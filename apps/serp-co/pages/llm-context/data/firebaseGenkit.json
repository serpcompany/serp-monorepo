[
  {
    "owner": "firebase",
    "repo": "genkit",
    "content": "TITLE: Implementing Function Calling with Genkit in Python\nDESCRIPTION: Demonstrates how to define a custom weather tool function in Python using Genkit with Google AI integration. The code shows a complete implementation with Pydantic models for input/output schemas, logging configuration, and async function execution.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport structlog\n\nfrom genkit.ai import genkit\nfrom genkit.plugins.google_ai import googleAI\nfrom genkit.plugins.google_ai.models import gemini15Flash\nfrom pydantic import BaseModel, Field\n\nlogger = structlog.get_logger()\n\n\nclass GetWeatherInput(BaseModel):\n    location: str = Field(description=\"The location to get the current weather for\")\n\n\nclass GetWeatherOutput(BaseModel):\n    weather: str\n\n\nasync def get_weather(input: GetWeatherInput) -> GetWeatherOutput:\n    await logger.adebug(\"Calling get_weather tool\", location=input.location)\n    # Replace this with an actual API call to a weather service\n    weather_info = f\"The current weather in {input.location} is 63Â°F and sunny.\"\n    return GetWeatherOutput(weather=weather_info)\n\n\nasync def main() -> None:\n    ai = genkit({\n      plugins: [googleAI()],\n      model: gemini15Flash,\n    })\n\n    get_weather_tool = ai.define_tool(\n        name=\"getWeather\",\n        description=\"Gets the current weather in a given location\",\n        input_schema=GetWeatherInput,\n        output_schema=GetWeatherOutput,\n        func=get_weather,\n    )\n\n    await logger.adebug(\"Generating text with tool\", prompt=\"What is the weather like in New York?\")\n    response = await ai.generate(\n        prompt=\"What is the weather like in New York?\",\n        tools=[get_weather_tool],\n    )\n    await logger.ainfo(\"Generated text\", text=response.text)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Defining a Genkit RAG Application with Dummy Retriever\nDESCRIPTION: This code creates a simple RAG (Retrieval-Augmented Generation) application using Genkit. It initializes Genkit with GoogleAI, defines a dummy retriever that returns predefined facts about dogs, and creates a question-answering flow that uses the retriever and an LLM to answer queries.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z, Document } from \"genkit\";\nimport {\n  googleAI,\n  gemini15Flash,\n} from \"@genkit-ai/googleai\";\n\n// Initialize Genkit\nexport const ai = genkit ({\n  plugins: [\n    googleAI(),\n  ]\n});\n\n// Dummy retriever that always returns the same docs\nexport const dummyRetriever = ai.defineRetriever(\n  {\n    name: \"dummyRetriever\",\n  },\n  async (i) => {\n    const facts = [\n      \"Dog is man's best friend\", \n      \"Dogs have evolved and were domesticated from wolves\",\n    ];\n    // Just return facts as documents.\n    return { documents: facts.map((t) => Document.fromText(t)) };\n  }\n);\n\n// A simple question-answering flow\nexport const qaFlow = ai.defineFlow({\n    name: 'qaFlow',\n    inputSchema: z.string(),\n    outputSchema: z.string(),\n  },\n  async (query) => {\n    const factDocs = await ai.retrieve({\n      retriever: dummyRetriever,\n      query,\n    });\n\n    const llmResponse = await ai.generate({\n      model: gemini15Flash,\n      prompt: `Answer this question with the given context ${query}`,\n      docs: factDocs,\n    });\n    return llmResponse.text;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting Genkit Class in Python\nDESCRIPTION: API reference for the Genkit class in the genkit.ai module. This class likely serves as the main interface for interacting with the Genkit AI functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: genkit.ai.Genkit\n```\n\n----------------------------------------\n\nTITLE: Creating AI Agents with Genkit in JavaScript\nDESCRIPTION: Demonstrates how to create and use AI agents with Genkit. It shows the definition of specialist agents, a triage agent, and how to use them in a chat context for handling customer service scenarios.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit/beta';\nimport { googleAI, gemini20Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash,\n});\n\n// Define tools for your agents to use\nconst reservationTool = ai.defineTool( ... );\nconst reservationCancelationTool = ai.defineTool( ... );\nconst reservationListTool = ai.defineTool( ... );\n\n// Define prompts that represent specialist agents\nconst reservationAgent = ai.definePrompt({\n  name: 'reservationAgent',\n  description: 'Reservation Agent can help manage guest reservations',\n  tools: [reservationTool, reservationCancelationTool, reservationListTool],\n  system: `Help guests make and manage reservations`\n});\nconst menuInfoAgent = ai.definePrompt( ... );\nconst complaintAgent = ai.definePrompt( ... );\n\n// Define a triage agent that routes to the proper specialist agent\nconst triageAgent = ai.definePrompt({\n  name: 'triageAgent',\n  description: 'Triage Agent',\n  tools: [reservationAgent, menuInfoAgent, complaintAgent],\n  system: `You are an AI customer service agent for Pavel's Cafe.\n    Greet the user and ask them how you can help. If appropriate, transfer to an\n    agent that can better handle the request. If you cannot help the customer with\n    the available tools, politely explain so.`\n});\n\n// Create a chat to enable conversational agent interactions\nconst chat = ai.chat(triageAgent);\n\nchat.send('I want a reservation at Pavel\\'s Cafe for noon on Tuesday.');\n```\n\n----------------------------------------\n\nTITLE: Adding Evaluation Metrics with Genkit Evaluator Plugin\nDESCRIPTION: This code demonstrates how to add evaluation metrics to a Genkit application using the genkitEval plugin. It specifically configures the MALICIOUSNESS metric from the Genkit Evaluator, using Gemini 1.5 Pro as the judge model for evaluations.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkitEval, GenkitMetric } from \"@genkit-ai/evaluator\";\nimport { gemini15Pro } from \"@genkit-ai/googleai\";\n\nexport const ai = genkit ({\n  plugins: [\n    ...\n    // Add this plugin to your Genkit initialization block\n    genkitEval({\n      judge: gemini15Pro,\n      metrics: [GenkitMetric.MALICIOUSNESS],\n    }),\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Generation with Genkit in JavaScript\nDESCRIPTION: Demonstrates how to perform simple and streamed text generation using Genkit with Google AI models. It shows how to initialize the Genkit instance and generate text using both synchronous and asynchronous methods.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI, gemini20Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash,  // Set default model\n});\n\n// Simple generation\nconst { text } = await ai.generate('Why is AI awesome?');\nconsole.log(text);\n\n// Streamed generation \nconst { stream } = ai.generateStream('Tell me a story');\nfor await (const chunk of stream) {\n  console.log(chunk.text);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RPG Character Generator with Genkit\nDESCRIPTION: Python implementation of an AI-powered RPG character generator using Genkit framework. Uses Pydantic for data modeling and Google's Gemini model for character generation. Includes model configuration, character schema definition, and generation flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/packages/genkit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom pydantic import BaseModel, Field\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleAI\n\nai = Genkit(\n    plugins=[GoogleAI()],\n    model='googleai/gemini-2.0-flash',\n)\n\nclass RpgCharacter(BaseModel):\n    \"\"\"An RPG game character.\"\"\"\n\n    name: str = Field(description='name of the character')\n    back_story: str = Field(description='back story')\n    abilities: list[str] = Field(description='list of abilities (3-4)')\n\n@ai.flow()\nasync def generate_character(name: str):\n    result = await ai.generate(\n        prompt=f'generate an RPG character named {name}',\n        output_schema=RpgCharacter,\n    )\n    return result.output\n\n\nasync def main() -> None:\n    \"\"\"Main function.\"\"\"\n    print(json.dumps(await generate_character('Goblorb')))\n\nai.run_main(main())\n```\n\n----------------------------------------\n\nTITLE: Defining Specialized Agents in a Multi-Agent System\nDESCRIPTION: This code demonstrates how to create specialized agents for different tasks within a multi-agent system. Each agent has a specific prompt and set of tools tailored to its purpose, like handling reservations or providing restaurant information.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/multi-agent.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/multi-agent/multi.ts\" region_tag=\"agents\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Structured Data Flow in Golang\nDESCRIPTION: Example of a flow using structured input and output types. Shows type definition and flow implementation for menu suggestions.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"msug\" adjust_indentation=\"auto\" %}\n```\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"flow2\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Structured Output Generation in JavaScript\nDESCRIPTION: Shows how to generate structured JSON output in JavaScript using Genkit with Zod schema validation. The example creates a character profile for a fantasy game with defined roles and structure.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\nconst { output } = await ai.generate({\n  prompt: 'Create a brief profile for a character in a fantasy video game.',\n  // Specify output structure using Zod schema\n  output: {\n    format: 'json',\n    schema: z.object({\n      name: z.string(),\n      role: z.enum(['knight', 'mage', 'archer']),\n      backstory: z.string(),\n    }),\n  },\n\n});\n\nconsole.log(output);\n```\n\n----------------------------------------\n\nTITLE: RPG Character Generation Sample Application\nDESCRIPTION: Complete Python script demonstrating Genkit usage for generating RPG characters using the Gemini API\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom pydantic import BaseModel, Field\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleAI\n\nai = Genkit(\n    plugins=[GoogleAI()],\n    model='googleai/gemini-2.0-flash',\n)\n\nclass RpgCharacter(BaseModel):\n    name: str = Field(description='name of the character')\n    back_story: str = Field(description='back story')\n    abilities: list[str] = Field(description='list of abilities (3-4)')\n\n@ai.flow()\nasync def generate_character(name: str):\n    result = await ai.generate(\n        prompt=f'generate an RPG character named {name}',\n        output_schema=RpgCharacter,\n    )\n    return result.output\n\nasync def main() -> None:\n    print(json.dumps(await generate_character('Goblorb'), indent=2))\n\nai.run_main(main())\n```\n\n----------------------------------------\n\nTITLE: Defining a Weather Tool with Genkit in Python\nDESCRIPTION: Demonstrates how to define a tool for getting weather information using Genkit's tool decorator. It includes setting up the Genkit instance, defining input schema, and creating the tool function.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/tools.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleGenai\n\nai = Genkit(\n    plugins=[GoogleGenai()],\n    model='googleai/gemini-2.0-flash',\n)\n\nclass WeatherInput(BaseModel):\n    location: str = Field(description='The location to get the current weather for')\n\n\n@ai.tool()\ndef get_weather(input: WeatherInput) -> str:\n    \"\"\"Gets the current weather in a given location\"\"\"\n    return f'The current weather in ${input.location} is 63Â°F and sunny.'\n```\n\n----------------------------------------\n\nTITLE: Defining a Tool in Genkit with TypeScript\nDESCRIPTION: Example of how to define a weather tool using the Genkit defineTool() function. This code demonstrates creating a tool with a name, description, input schema, and implementation function that handles the tool's logic.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkitai/google-ai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\nconst getWeather = ai.defineTool(\n  {\n    name: 'getWeather',\n    description: 'Gets the current weather in a given location',\n    inputSchema: z.object({ \n      location: z.string().describe('The location to get the current weather for')\n    }),\n    outputSchema: z.string(),\n  },\n  async (input) => {\n    // Here, we would typically make an API call or database query. For this\n    // example, we just return a fixed value.\n    return 'The current weather in ${input.location} is 63Â°F and sunny.';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking a Genkit Flow\nDESCRIPTION: Shows how to call a defined Genkit flow from Node.js code. The flow is invoked with an input argument that must conform to the flow's input schema.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await menuSuggestionFlow(\"French\");\n```\n\n----------------------------------------\n\nTITLE: Basic AI Generation in JavaScript\nDESCRIPTION: Shows how to initialize and use the Genkit framework in JavaScript for both simple text generation and streaming generation with the Google AI plugin and Gemini 1.5 Flash model.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,  // Set default model\n});\n\n// Simple generation\nconst { text } = await ai.generate('Why is AI awesome?');\nconsole.log(text);\n\n// Streamed generation\nconst { stream } = await ai.generateStream('Tell me a story');\nfor await (const chunk of stream) {\n  console.log(chunk.text);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Flow with Firestore Vector Store in Python\nDESCRIPTION: Sets up a RAG flow using Genkit with Vertex AI and Firestore Vector Store. Configures AI instance with plugins and defines a flow function that retrieves and generates responses based on queries.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/rag.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import (\n    VertexAI,\n    vertexai_name,\n)\nfrom genkit.plugins.firebase.firestore import FirestoreVectorStore\n\nai = Genkit(\n    plugins=[\n        VertexAI(),\n        FirestoreVectorStore(\n                name='my_firestore_retriever',\n                collection='mycollection',\n                vector_field='embedding',\n                content_field='text',\n                embedder=EMBEDDING_MODEL,\n                distance_measure=DistanceMeasure.EUCLIDEAN,\n                firestore_client=firestore_client,\n        ),\n    ],\n)\n@ai.flow()\nasync def qa_flow(query: str):\n    docs = await ai.retrieve(\n        query=Document.from_text(query), \n        retriever='firestore/my_firestore_retriever'\n    )\n    response = await ai.generate(prompt=query, docs=docs)\n    return response.text\n```\n\n----------------------------------------\n\nTITLE: Defining Genkit Flow with Input and Output Schemas\nDESCRIPTION: Creates a Genkit flow with defined input and output schemas using Zod for type safety. The flow takes a cuisine type string as input and returns a structured menu item object as output.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// First, define a schema for menu items\nconst MenuItemSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  ingredients: z.array(z.string()),\n});\n\n// Define the flow with input and output schemas\nexport const menuSuggestionFlow = defineFlow({\n  name: \"menuSuggestionFlow\",\n  inputSchema: z.string(),\n  outputSchema: MenuItemSchema,\n})(\n  async (cuisineType) => {\n    const menuItem = await generate({\n      model: \"gemini-pro\",\n      prompt: `Suggest a menu item for a ${cuisineType} dinner party.`,\n      outputSchema: MenuItemSchema,\n    });\n    return menuItem;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Data Retrieval with Genkit in JavaScript\nDESCRIPTION: Shows how to use Genkit for data retrieval from a vector database. It demonstrates setting up a local vector store, retrieving relevant documents based on a query, and using them in text generation.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI, gemini20Flash, textEmbedding004 } from '@genkit-ai/googleai';\nimport { devLocalRetrieverRef } from '@genkit-ai/dev-local-vectorstore';\n\nconst ai = genkit({ \n  plugins: [\n    googleAI()\n    devLocalVectorstore([\n      {\n        indexName: 'BobFacts',\n        embedder: textEmbedding004,\n      },\n    ]),\n  ],\n  model: gemini20Flash,\n});\n\n// Reference to a local vector database storing Genkit documentation\nconst retriever = devLocalRetrieverRef('BobFacts');\n\n// Consistent API to retrieve most relevant documents based on semantic similarity to query\nconst docs = await ai.retrieve(\n  retriever: retriever,\n  query: 'How old is bob?',\n);\n\nconst result = await ai.generate({\n    prompt: `Use the provided context from the Genkit documentation to answer this query: ${query}`,\n    docs // Pass retrieved documents to the model\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Step Genkit Flow\nDESCRIPTION: Implements a complex flow with multiple generation steps that can be individually tracked in the trace viewer. This flow demonstrates how sequential model calls are tracked as separate steps in the debugging UI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const multiStepMenuPlanFlow = defineFlow({\n  name: \"multiStepMenuPlanFlow\",\n  inputSchema: z.string(),\n  outputSchema: z.string(),\n})(\n  async (cuisineType) => {\n    // Step 1: Generate a list of dishes\n    const dishes = await generate({\n      model: \"gemini-pro\",\n      prompt: `List 3 popular ${cuisineType} dishes.`,\n    });\n\n    // Step 2: Generate recipes for each dish\n    const recipes = await generate({\n      model: \"gemini-pro\",\n      prompt: `Write simple recipes for these ${cuisineType} dishes: ${dishes}`,\n    });\n\n    // Step 3: Generate wine pairings\n    const winePairings = await generate({\n      model: \"gemini-pro\",\n      prompt: `Suggest wine pairings for these ${cuisineType} dishes: ${dishes}`,\n    });\n\n    return `${dishes}\\n\\nRecipes:\\n${recipes}\\n\\nWine Pairings:\\n${winePairings}`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Indexing Flow for RAG\nDESCRIPTION: Defines a complete flow for extracting text from PDF files, chunking the content, converting to documents, and storing in the vector database. This flow handles the entire document ingestion process for RAG.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Document } from 'genkit/retriever';\nimport { chunk } from 'llm-chunk';\nimport { readFile } from 'fs/promises';\nimport path from 'path';\nimport pdf from 'pdf-parse';\n\nasync function extractTextFromPdf(filePath: string) {\n  const pdfFile = path.resolve(filePath);\n  const dataBuffer = await readFile(pdfFile);\n  const data = await pdf(dataBuffer);\n  return data.text;\n}\n\nexport const indexMenu = ai.defineFlow(\n  {\n    name: 'indexMenu',\n    inputSchema: z.string().describe('PDF file path'),\n    outputSchema: z.void(),\n  },\n  async (filePath: string) => {\n    filePath = path.resolve(filePath);\n\n    // Read the pdf.\n    const pdfTxt = await ai.run('extract-text', () =>\n      extractTextFromPdf(filePath)\n    );\n\n    // Divide the pdf text into segments.\n    const chunks = await ai.run('chunk-it', async () =>\n      chunk(pdfTxt, chunkingConfig)\n    );\n\n    // Convert chunks of text into documents to store in the index.\n    const documents = chunks.map((text) => {\n      return Document.fromText(text, { filePath });\n    });\n\n    // Add documents to the index.\n    await ai.index({\n      indexer: menuPdfIndexer,\n      documents,\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Flow with Menu Retriever in TypeScript\nDESCRIPTION: Demonstrates how to define a RAG flow using Genkit's file-based vector retriever for menu-related queries. Uses Gemini model for response generation based on retrieved documents.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { devLocalRetrieverRef } from '@genkit-ai/dev-local-vectorstore';\nimport { gemini } from '@genkit-ai/vertexai';\n\n// Define the retriever reference\nexport const menuRetriever = devLocalRetrieverRef('menuQA');\n\nexport const menuQAFlow = ai.defineFlow(\n  { name: \"menuQA\", inputSchema: z.string(), outputSchema: z.string() },\n  async (input: string) => {\n    // retrieve relevant documents\n    const docs = await ai.retrieve({\n      retriever: menuRetriever,\n      query: input,\n      options: { k: 3 },\n    });\n\n    // generate a response\n   const { text } = await ai.generate({\n      model: gemini('gemini-1.5-flash'),\n      prompt: `\nYou are acting as a helpful AI assistant that can answer \nquestions about the food available on the menu at Genkit Grub Pub.\n\nUse only the context provided to answer the question.\nIf you don't know, do not make up an answer.\nDo not add or change items on the menu.\n\nQuestion: ${input}`,\n      docs,\n    });\n\n    return text;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Core Error Types in Genkit\nDESCRIPTION: Demonstrates the two main error types used in Genkit: GenkitError for internal framework use and UserFacingError for context providers and user code. These error types help distinguish between framework-level and user-level errors.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/errors/types.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGenkitError\nUserFacingError\n```\n\n----------------------------------------\n\nTITLE: Using pgvector Retriever in GenKit Flow for Question Answering\nDESCRIPTION: This code demonstrates how to use the custom SQL retriever in a GenKit flow. It defines a flow that takes a question as input, retrieves relevant documents from a PostgreSQL database using vector similarity search, and logs the retrieved documents for use in RAG prompts.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/templates/pgvector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple flow to use the sqlRetriever\nexport const askQuestionsOnGoT = ai.defineFlow(\n  {\n    name: 'askQuestionsOnGoT',\n    inputSchema: z.string(),\n    outputSchema: z.string(),\n  },\n  async (inputQuestion) => {\n    const docs = await ai.retrieve({\n      retriever: sqlRetriever,\n      query: inputQuestion,\n      options: {\n        show: 'Game of Thrones',\n      },\n    });\n    console.log(docs);\n\n    // Continue with using retrieved docs\n    // in RAG prompts.\n    //...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Retrieval with Genkit in Python\nDESCRIPTION: Shows how to retrieve relevant documents from a vector database in Python using Genkit. The example configures a local vector database, embeds a query using Google's text embedding model, retrieves semantically similar documents, and uses them to generate a contextually informed response.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport structlog\n\nfrom genkit.ai import genkit\nfrom genkit.plugins.google_ai import googleAI\nfrom genkit.plugins.google_ai.models import gemini15Flash, textEmbedding004\nfrom genkit.plugins.dev_local_vectorstore import devLocalVectorstore, devLocalRetrieverRef\n\nlogger = structlog.get_logger()\n\n\nasync def main() -> None:\n    ai = genkit(\n        plugins=[\n            googleAI(),\n            devLocalVectorstore(\n                [\n                    {\n                        \"index_name\": \"BobFacts\",\n                        \"embedder\": textEmbedding004,\n                    }\n                ]\n            ),\n        ],\n        model=gemini15Flash,\n    )\n\n    retriever = devLocalRetrieverRef(\"BobFacts\")\n\n    query = \"How old is Bob?\"\n\n    await logger.adebug(\"Retrieving documents\", query=query)\n    docs = await ai.retrieve(retriever=retriever, query=query)\n\n    await logger.adebug(\"Generating answer\", query=query)\n    response = await ai.generate(\n        prompt=f\"Use the provided context from the BobFacts database to answer this query: {query}\",\n        docs=docs,\n    )\n\n    await logger.ainfo(\"Generated answer\", answer=response.text)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using Tools with definePrompt in Genkit\nDESCRIPTION: Example of creating a reusable prompt with tool access using the definePrompt method. This approach allows creating parameterized prompts that have access to defined tools.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst weatherPrompt = ai.definePrompt(\n  {\n    name: 'weatherPrompt',\n    tools: [getWeather],\n  },\n  'What is the weather in {{location}}?'\n);\n\nconst response = await weatherPrompt({ location: 'Baltimore' });\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Genkit Flow with Generate Call\nDESCRIPTION: Defines a simple Genkit flow that wraps a generate() call to suggest menu items based on a cuisine type. This basic implementation allows the flow to be run from the Genkit CLI and developer UI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const menuSuggestionFlow = defineFlow({\n  name: \"menuSuggestionFlow\",\n})(\n  async (cuisineType: string) => {\n    const menuItems = await generate({\n      model: \"gemini-pro\",\n      prompt: `Suggest a menu for a ${cuisineType} dinner party.`,\n    });\n    return menuItems;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Architecture Layers with D2 Diagram\nDESCRIPTION: This diagram visualizes the layered architecture of Genkit, showing the relationships between core components, AI abstractions, plugins, and external libraries. It illustrates how different parts of the framework interact with each other.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/index.md#2025-04-22_snippet_0\n\nLANGUAGE: d2\nCODE:\n```\ngenkit: {\n  ai: {\n    style: {fill: \"#E0F7FA\"}\n    Veneer API\n  }\n  blocks: {\n    style: {fill: \"#FFF3E0\"}\n    AI Components: {\n      prompt: Prompt\n      model: Model\n      embedder: Embedder\n      retriever: Retriever\n    }\n  }\n  core: {\n    style: {fill: \"#E8F5E9\"}\n    Core Foundations: {\n      flow: Flow\n      actions: Actions\n      registry: Registry\n      reflection_server: Reflection Server\n    }\n  }\n  plugins: {\n    style: {fill: \"#FCE4EC\"}\n    chroma\n    pinecone\n    google_genai\n    google_cloud\n    openai\n    firebase\n    ollama\n  }\n}\n\nlib: {\n  style: {fill: \"#EDE7F6\"}\n  handlebars\n  dotprompt\n  pydantic\n  starlette\n  asgiref\n  uvicorn\n  opentelemetry\n}\n\ngenkit.blocks -> genkit.core\ngenkit.blocks -> lib.dotprompt\ngenkit.core -> lib.asgiref\ngenkit.core -> lib.opentelemetry\ngenkit.core -> lib.pydantic\ngenkit.core -> lib.starlette\ngenkit.plugins.chroma -> genkit.ai\ngenkit.plugins.firebase -> genkit.ai\ngenkit.plugins.google_cloud -> genkit.ai\ngenkit.plugins.google_genai -> genkit.ai\ngenkit.plugins.ollama -> genkit.ai\ngenkit.plugins.pinecone -> genkit.ai\ngenkit.ai -> genkit.blocks\ngenkit.ai -> genkit.core\ngenkit.ai -> lib.uvicorn\nlib.dotprompt -> lib.handlebars\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Integration with Genkit Python\nDESCRIPTION: Demonstrates how to implement tool calling functionality in Genkit, allowing AI models to interact with custom functions. Includes a weather tool example with structured input validation.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom pydantic import BaseModel, Field\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleAI\n\nai = Genkit(\n    plugins=[GoogleAI()],\n    model='googleai/gemini-2.0-flash',\n)\n\nclass WeatherToolInput(BaseModel):\n    location: str = Field(description='weather location')\n\n@ai.tool()\ndef get_weather(input:WeatherToolInput) -> str:\n    \"\"\"Use it get the weather.\"\"\"\n    return f'Weather in {input.location} is 23Â°'\n\nasync def main():\n    result = await ai.generate(\n        prompt='What is the weather in London?',\n        tools=['get_weather']\n    )\n    print(result.text)\n\nai.run_main(main())\n```\n\n----------------------------------------\n\nTITLE: Calling a Prompt with Configuration in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to call a prompt with a configuration object, which maps to the config values in the prompt file's front matter.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await helloPrompt(\n  { name: 'Alice' },\n  {\n    temperature: 0.7,\n    maxOutputTokens: 256,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Advanced Retriever in TypeScript\nDESCRIPTION: Shows how to create a custom retriever with advanced features like prompt extension and reranking capabilities.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CommonRetrieverOptionsSchema,\n} from 'genkit/retriever';\nimport { z } from 'genkit';\n\nexport const menuRetriever = devLocalRetrieverRef('menuQA');\n\nconst advancedMenuRetrieverOptionsSchema = CommonRetrieverOptionsSchema.extend({\n  preRerankK: z.number().max(1000),\n});\n\nconst advancedMenuRetriever = ai.defineRetriever(\n  {\n    name: `custom/advancedMenuRetriever`,\n    configSchema: advancedMenuRetrieverOptionsSchema,\n  },\n  async (input, options) => {\n    const extendedPrompt = await extendPrompt(input);\n    const docs = await ai.retrieve({\n      retriever: menuRetriever,\n      query: extendedPrompt,\n      options: { k: options.preRerankK || 10 },\n    });\n    const rerankedDocs = await rerank(docs);\n    return rerankedDocs.slice(0, options.k || 3);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Flow Observability Implementation\nDESCRIPTION: Example of implementing observability in flows by wrapping code in a run function for trace visibility.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"run\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Basic AI Generation with Genkit Python\nDESCRIPTION: Demonstrates basic text generation and streaming using Genkit with Google's Gemini AI model. Shows both single response and streaming generation patterns.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleAI\n\nai = Genkit(\n    plugins=[GoogleAI()],\n    model='googleai/gemini-2.0-flash',\n)\n\nasync def main():\n    result = await ai.generate(prompt=f'Why is AI awesome?')\n    print(result.text)\n\n    stream, _ = ai.generate_stream(prompt=f'Tell me a story')\n    async for chunk in stream:\n        print(chunk.text)\n\nai.run_main(main())\n```\n\n----------------------------------------\n\nTITLE: Processing Streaming Flow Output\nDESCRIPTION: Demonstrates how to process the streaming output from a Genkit flow using an async iterator. This allows handling each chunk of the response as it becomes available.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const chunk of response.stream) {\n  // Process each chunk as it arrives\n  console.log(chunk); // or append to UI\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flow Steps with run()\nDESCRIPTION: Demonstrates how to include custom steps in a flow trace by wrapping code in run() calls. This allows non-Genkit operations to appear in the flow trace viewer for debugging purposes.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const menuWithContextFlow = defineFlow({\n  name: \"menuWithContextFlow\",\n  inputSchema: z.string(),\n  outputSchema: z.string(),\n})(\n  async (restaurantId) => {\n    // Retrieve the restaurant's existing menu as context\n    const existingMenu = await run({\n      name: \"fetchExistingMenu\",\n    }, async () => {\n      // This could be any operation, like a database call\n      return retrieveExistingMenu(restaurantId);\n    });\n\n    // Generate suggestions based on the existing menu\n    const suggestions = await generate({\n      model: \"gemini-pro\",\n      prompt: `This restaurant already serves these items:\\n${existingMenu}\\n\\nSuggest 3 new menu items that would complement the existing menu.`,\n    });\n\n    return suggestions;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Defined Tools in Genkit Prompts\nDESCRIPTION: Shows how to include defined tools when generating content with Genkit. The example demonstrates using the 'get_weather' tool in a prompt about Baltimore's weather.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/tools.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = await ai.generate(\n    prompt='What is the weather in Baltimore?',\n    tools=['get_weather'],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit with Google Gemini AI Plugin\nDESCRIPTION: Example showing how to import and configure the Genkit framework with the Google AI plugin, specifically using the Gemini 1.5 Flash model. Demonstrates basic text generation functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/googleai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI, gemini } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini('gemini-1.5-flash'),\n});\n\nasync () => {\n  const { text } = ai.generate('hi Gemini!');\n  console.log(text);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Functionality with Genkit in Python\nDESCRIPTION: Demonstrates creating a chat interface in Python using Genkit. This example sets up a system prompt to make the AI respond like a pirate, handles chat history across multiple messages, and uses structured logging for debugging.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport structlog\n\nfrom genkit.ai import genkit\nfrom genkit.plugins.google_ai import googleAI\nfrom genkit.plugins.google_ai.models import gemini15Flash\nfrom pydantic import BaseModel, Field\n\nlogger = structlog.get_logger()\n\n\nclass ChatResponse(BaseModel):\n    text: str\n\n\nasync def chat(input: str) -> ChatResponse:\n    await logger.adebug(\"Calling chat tool\", input=input)\n    # Replace this with an actual API call to a language model,\n    # providing the user query and the conversation history.\n    response_text = \"Ahoy there! Your name is Pavel, you scurvy dog!\"\n    return ChatResponse(text=response_text)\n\n\nasync def main() -> None:\n    ai = genkit({\n      plugins: [googleAI()],\n      model: gemini15Flash,\n    })\n\n    chat_tool = ai.chat({system: 'Talk like a pirate'})\n\n    await logger.adebug(\"Calling chat tool\", input=\"Hi, my name is Pavel\")\n    response = await chat_tool.send(\"Hi, my name is Pavel\")\n\n    await logger.adebug(\"Calling chat tool\", input=\"What is my name?\")\n    response = await chat_tool.send(\"What is my name?\")\n\n    await logger.ainfo(\"Chat response\", text=response.text)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Basic Genkit Usage with Google AI Gemini Model in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to import Genkit and Google AI plugin libraries, configure a Genkit instance with the Gemini model, and make a simple generation request.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/get-started.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// import the Genkit and Google AI plugin libraries\nimport { gemini20Flash, googleAI } from '@genkit-ai/googleai';\nimport { genkit } from 'genkit';\n\n// configure a Genkit instance\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash, // set default model\n});\n\nasync function main() {\n  // make a generation request\n  const { text } = await ai.generate('Hello, Gemini!');\n  console.log(text);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Complete Genkit Flow Deployment Example\nDESCRIPTION: A comprehensive example showing a fully configured Genkit flow ready for deployment, including imports, flow definition, and all security features.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { onCallGenkit, hasClaim } from 'firebase-functions/https';\nimport { defineSecret } from 'firebase-functions/params';\n\nconst apiKey = defineSecret(\"GOOGLE_GENAI_API_KEY\");\n\nconst generatePoemFlow = ai.defineFlow({\n  name: \"generatePoem\",\n  inputSchema: z.string(),\n  outputSchema: z.string(),\n}, async (subject: string) => {\n  const { text } = await ai.generate(`Compose a poem about ${subject}.`);\n  return text;\n});\n\nexport const generateFlow = onCallGenkit({\n  secrets: [apiKey],\n  authPolicy: hasClaim(\"email_verified\"),\n  enforceAppCheck: true,\n}, generatePoemFlow);\n```\n\n----------------------------------------\n\nTITLE: Genkit Model Configuration Parameters\nDESCRIPTION: Shows how to configure model generation parameters like temperature, top_p, and max output tokens.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = await ai.generate(\n    prompt='Invent a menu item for a pirate themed restaurant.',\n    config={\n      'max_output_tokens': 400,\n      'stop_sequences': ['<end>', '<fin>'],\n      'temperature': 1.2,\n      'top_p': 0.4,\n      'top_k': 50,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Chat Functionality with Genkit in JavaScript\nDESCRIPTION: Illustrates how to use Genkit's chat functionality to create multi-turn conversations with AI models. It demonstrates setting up a chat instance with a system prompt and sending messages.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit/beta';\nimport { googleAI, gemini20Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash,\n});\n\nconst chat = ai.chat({ system: 'Talk like a pirate' });\n\nlet response = await chat.send('Hi, my name is Pavel');\n\nresponse = await chat.send('What is my name?');\nconsole.log(response.text);\n// Ahoy there! Your name is Pavel, you scurvy dog\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Retrieval with Genkit in JavaScript\nDESCRIPTION: Demonstrates how to implement a retrieval-augmented generation flow in JavaScript using Genkit. The code sets up a vector database, retrieves documents relevant to a query, and provides these documents to an AI model to generate a contextually informed response.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI, gemini15Flash, textEmbedding004 } from '@genkit-ai/googleai';\nimport { devLocalRetrieverRef } from '@genkit-ai/dev-local-vectorstore';\n\nconst ai = genkit({\n  plugins: [\n    googleAI()\n    devLocalVectorstore([\n      {\n        indexName: 'BobFacts',\n        embedder: textEmbedding004,\n      },\n    ]),\n  ],\n  model: gemini15Flash,\n});\n\n// Reference to a local vector database storing Genkit documentation\nconst retriever = devLocalRetrieverRef('BobFacts');\n\n// Consistent API to retrieve most relevant documents based on semantic similarity to query\nconst docs = await ai.retrieve(\n  retriever: retriever,\n  query: 'How old is bob?',\n);\n\nconst result = await ai.generate({\n    prompt: `Use the provided context from the Genkit documentation to answer this query: ${query}`,\n    docs // Pass retrieved documents to the model\n});\n```\n\n----------------------------------------\n\nTITLE: Populating Firestore with Embeddings in JavaScript\nDESCRIPTION: Code snippet showing how to populate a Firestore collection with embeddings, including PDF text extraction and chunking.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { vertexAI, textEmbedding004 } from \"@genkit-ai/vertexai\";\n\nimport { applicationDefault, initializeApp } from \"firebase-admin/app\";\nimport { FieldValue, getFirestore } from \"firebase-admin/firestore\";\n\nimport { chunk } from \"llm-chunk\";\nimport pdf from \"pdf-parse\";\n\nimport { readFile } from \"fs/promises\";\nimport path from \"path\";\n\n// Change these values to match your Firestore config/schema\nconst indexConfig = {\n  collection: \"menuInfo\",\n  contentField: \"text\",\n  vectorField: \"embedding\",\n  embedder: textEmbedding004,\n};\n\nconst ai = genkit({\n  plugins: [vertexAI({ location: \"us-central1\" })],\n});\n\nconst app = initializeApp({ credential: applicationDefault() });\nconst firestore = getFirestore(app);\n\nexport async function indexMenu(filePath: string) {\n  filePath = path.resolve(filePath);\n\n  // Read the PDF.\n  const pdfTxt = await extractTextFromPdf(filePath);\n\n  // Divide the PDF text into segments.\n  const chunks = await chunk(pdfTxt);\n\n  // Add chunks to the index.\n  await indexToFirestore(chunks);\n}\n\nasync function indexToFirestore(data: string[]) {\n  for (const text of data) {\n    const embedding = (await ai.embed({\n      embedder: indexConfig.embedder,\n      content: text,\n    }))[0].embedding;\n    await firestore.collection(indexConfig.collection).add({\n      [indexConfig.vectorField]: FieldValue.vector(embedding),\n      [indexConfig.contentField]: text,\n    });\n  }\n}\n\nasync function extractTextFromPdf(filePath: string) {\n  const pdfFile = path.resolve(filePath);\n  const dataBuffer = await readFile(pdfFile);\n  const data = await pdf(dataBuffer);\n  return data.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Images with Imagen2 Model in Genkit\nDESCRIPTION: Shows how to use Genkit to generate images using the Imagen2 model through Vertex AI. It demonstrates importing necessary libraries, generating an image, and saving it to a file.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { promises as fs } from \"fs\";\nimport DataURL from \"data-urls\";\nimport { VertexAIImageGenerator } from \"@genkit/vertexai\";\n\nconst imagen = new VertexAIImageGenerator({\n  model: \"imagegeneration@002\"\n});\n\nconst response = await imagen.generate({\n  prompt: \"A pirate ship sailing through a storm\",\n  mediaType: \"image/png\"\n});\n\nconst dataUrl = DataURL(response.output);\nconst buffer = dataUrl.body;\n\nawait fs.writeFile(\"pirate_ship.png\", buffer);\n```\n\n----------------------------------------\n\nTITLE: Structured Output Generation with Genkit Python\nDESCRIPTION: Shows how to generate structured data output using Pydantic models for schema validation. Creates an RPG character with defined attributes using AI generation.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport json\nfrom pydantic import BaseModel, Field\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleAI\n\nai = Genkit(\n    plugins=[GoogleAI()],\n    model='googleai/gemini-2.0-flash',\n)\n\nclass RpgCharacter(BaseModel):\n    \"\"\"An RPG game character.\"\"\"\n\n    name: str = Field(description='name of the character')\n    back_story: str = Field(description='back story')\n    abilities: list[str] = Field(description='list of abilities (3-4)')\n\nasync def main():\n    result = await ai.generate(\n        prompt=f'generate an RPG character named Glorb',\n        output_schema=RpgCharacter,\n    )\n    print(json.dumps(result.output))\n\nai.run_main(main())\n```\n\n----------------------------------------\n\nTITLE: Tool Configuration in Prompt File for Genkit\nDESCRIPTION: Example of a prompt file that includes tool configuration in its frontmatter. This shows how to declare available tools and input schemas in an external prompt file.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n---\nsystem: \"Answer questions using the tools you have.\"\ntools: [getWeather]\ninput:\n  schema:\n    location: string\n---\n\nWhat is the weather in {{location}}?\n```\n\n----------------------------------------\n\nTITLE: Providing Context to a Flow at Runtime\nDESCRIPTION: Example of providing auth context when calling a flow. This demonstrates how to pass the current user's authentication information to a flow during execution.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst summarizeHistory = ai.defineFlow(/* ... */);\n\nconst summary = await summarizeHistory(friend.uid, {context: {auth: currentUser}});\n```\n\n----------------------------------------\n\nTITLE: Defining Tools for a Simple Customer Service Agent in TypeScript\nDESCRIPTION: This snippet defines tools for a basic customer service agent, including functions to search for restaurants, check availability, and make reservations. Each tool has specific parameters and return types to facilitate interaction with external systems.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/multi-agent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/multi-agent/simple.ts\" region_tag=\"tools\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Calling with Genkit in JavaScript\nDESCRIPTION: Shows how to create a weather information tool in JavaScript using Genkit with Google AI. The example uses Zod for schema definition, defines a function that returns simulated weather data, and demonstrates how to provide the tool to the AI model.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\n// Define tool to get current weather for a given location\nconst getWeather = ai.defineTool(\n  {\n    name: \"getWeather\",\n    description: \"Gets the current weather in a given location\",\n    inputSchema: z.object({\n      location: z.string().describe('The location to get the current weather for')\n    }),\n    outputSchema: z.string(),\n  },\n  async (input) => {\n    // Here, we would typically make an API call or database query. For this\n    // example, we just return a fixed value.\n    return `The current weather in ${input.location} is 63Â°F and sunny.`;\n  }\n);\n\nconst { text } = await ai.generate({\n    tools: [getWeather], // Give the model a list of tools it can call\n    prompt: 'What is the weather like in New York? ',\n});\n\nconsole.log(text);\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Vector Store with Genkit and Google AI\nDESCRIPTION: Complete example demonstrating how to set up and use the dev-local-vectorstore plugin with Genkit. Shows document indexing, retrieval, and generation using Google AI models including Gemini.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/dev-local-vectorstore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Document, genkit } from 'genkit';\nimport {\n  googleAI,\n  gemini20Flash, // Replaced gemini15Flash with gemini20Flash\n  textEmbeddingGecko001,\n} from '@genkit-ai/googleai';\nimport {\n  devLocalVectorstore,\n  devLocalIndexerRef,\n  devLocalRetrieverRef,\n} from '@genkit-ai/dev-local-vectorstore';\n\nconst ai = genkit({\n  plugins: [\n    googleAI(),\n    devLocalVectorstore([\n      {\n        indexName: 'BobFacts',\n        embedder: textEmbeddingGecko001,\n      },\n    ]),\n  ],\n  model: gemini20Flash, // Use gemini20Flash\n});\n\n// Reference to a local vector database storing Genkit documentation\nconst indexer = devLocalIndexerRef('BobFacts');\nconst retriever = devLocalRetrieverRef('BobFacts');\n\nasync function main() {\n  // Add documents to the index. Only do it once.\n  await ai.index({\n    indexer: indexer,\n    documents: [\n      Document.fromText('Bob lives on the moon.'),\n      Document.fromText('Bob is 42 years old.'),\n      Document.fromText('Bob likes bananas.'),\n      Document.fromText('Bob has 11 cats.'),\n    ],\n  });\n\n  const question = 'How old is Bob?';\n\n  // Consistent API to retrieve most relevant documents based on semantic similarity to query\n  const docs = await ai.retrieve({\n    retriever: retriever,\n    query: question,\n  });\n\n  const result = await ai.generate({\n    prompt: `Use the provided context from the Genkit documentation to answer this query: ${question}`,\n    docs, // Pass retrieved documents to the model\n  });\n\n  console.log(result.text);\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Genkit Flow with onCallGenkit\nDESCRIPTION: Demonstrates how to expose a Genkit flow as a callable function using onCallGenkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onCallGenkit } from 'firebase-functions/https';\n\nexport generatePoem = onCallGenkit(generatePoemFlow);\n```\n\n----------------------------------------\n\nTITLE: Model-Specific Text Generation\nDESCRIPTION: Shows how to specify a particular model for text generation using a model reference\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await genkit.generate({\n  model: googleai.geminiPro,\n  prompt: \"Create a unique and creative dish that would be served at a pirate-themed restaurant\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Vertex AI Plugin with Genkit in TypeScript\nDESCRIPTION: This code demonstrates how to import, configure, and use the Vertex AI plugin with Genkit. It sets up the Genkit instance with the Vertex AI plugin and the Gemini 1.5 Flash model, then generates text using an asynchronous function.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/vertexai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { vertexAI, gemini, gemini15Flash } from '@genkit-ai/vertexai';\n\nconst ai = genkit({\n  plugins: [vertexAI()],\n  model: gemini15Flash,\n});\n\nasync () => {\n  const { text } = ai.generate('hi Gemini!');\n  console.log(text);\n};\n```\n\n----------------------------------------\n\nTITLE: Making First Request with Genkit and Google AI\nDESCRIPTION: Example demonstrating how to initialize Genkit with Google AI plugin, configure a model, and make a basic generation request using the Gemini model.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/genkit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import the Genkit and Google AI plugin libraries\nimport { gemini15Flash, googleAI } from '@genkit-ai/googleai';\nimport { genkit } from 'genkit';\n\n// configure a Genkit instance\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash, // set default model\n});\n\n(async () => {\n  // make a generation request\n  const { text } = await ai.generate('Hello, Gemini!');\n  console.log(text);\n})();\n```\n\n----------------------------------------\n\nTITLE: Custom QA Flow Implementation\nDESCRIPTION: JavaScript implementation of a custom QA flow with fact modification and retrieval functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const qaFlow = ai.defineFlow({\n    name: 'qaFlow',\n    inputSchema: z.string(),\n    outputSchema: z.string(),\n  },\n  async (query) => {\n    const factDocs = await ai.retrieve({\n      retriever: dummyRetriever,\n      query,\n    });\n    const factDocsModified = await ai.run('factModified', async () => {\n        return factDocs.filter(d => isSillyFact(d.text));\n    });\n\n    const llmResponse = await ai.generate({\n      model: gemini15Flash,\n      prompt: `Answer this question with the given context ${query}`,\n      docs: factDocsModified,\n    });\n    return llmResponse.text;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output Generation\nDESCRIPTION: Shows how to use generate() with a Zod schema to create structured output in Genkit\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/models/index.ts\" region_tag=\"ex05\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Gemini API Integration\nDESCRIPTION: Example showing how to initialize Genkit with the GoogleAI plugin for accessing Gemini API models. The model name can be optionally specified.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/google-genai.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.plugins.google_genai import GoogleAI\n\nai = Genkit(\n  plugins=[GoogleAI()],\n  model='googleai/gemini-2.0-flash', # optional\n)\n```\n\n----------------------------------------\n\nTITLE: Using Tools in Chat Sessions with Genkit\nDESCRIPTION: Examples of how to use tools in a chat session, both at creation time and for specific messages. Shows the flexibility of applying tools either globally to a chat or to individual messages.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst chat = ai.chat({\n  system: 'Answer questions using the tools you have.',\n  tools: [getWeather],\n});\n\nconst response = await chat.send('What is the weather in Baltimore?');\n\n// Or, specify tools that are message-specific \nconst response = await chat.send({\n  prompt: 'What is the weather in Baltimore?',\n  tools: [getWeather],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context in a Tool Definition\nDESCRIPTION: Implementation of a search tool that uses auth context to restrict note searches to the current user. The tool verifies user authentication before performing the search operation.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchNotes = ai.defineTool({\n  name: 'searchNotes',\n  description: \"search the current user's notes for info\",\n  inputSchema: z.object({query: z.string()}),\n  outputSchmea: z.array(NoteSchema);\n}, async ({query}, {context}) => {\n  if (!context.auth?.uid) throw new Error(\"Must be called by a signed-in user.\");\n  return searchUserNotes(context.auth.uid, query);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Response Interrupt in TypeScript\nDESCRIPTION: Shows how to define a manual response interrupt using Genkit's defineInterrupt method with input and output schemas for asking clarifying questions.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkitai/google-ai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\nconst askQuestion = ai.defineInterrupt({\n  name: 'askQuestion',\n  description: 'use this to ask the user a clarifying question',\n  inputSchema: z.object({\n    choices: z.array(z.string()).describe('the choices to display to the user'),\n    allowOther: z.boolean().optional().describe('when true, allow write-ins')\n  }),\n  outputSchema: z.string()\n});\n```\n\n----------------------------------------\n\nTITLE: Structured Flow with Pydantic Schema\nDESCRIPTION: Shows how to define a flow with type-safe input and output using Pydantic models for menu item generation.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass MenuItemSchema(BaseModel):\n    dishname: str\n    description: str\n\n@ai.flow()\nasync def menu_suggestion_flow(theme: str) -> MenuItemSchema:\n    response = await ai.generate(\n      prompt=f'Invent a menu item for a {theme} themed restaurant.',\n      output_schema=MenuItemSchema,\n    )\n    return response.output\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Genkit Express Server\nDESCRIPTION: Sets up a basic Express server that exposes a Genkit flow as a REST endpoint. Demonstrates creating a simple flow with streaming capability and exposing it via HTTP POST endpoint.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/express/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expressHandler } from '@genkit-ai/express';\nimport express from 'express';\n\nconst simpleFlow = ai.defineFlow('simpleFlow', async (input, { sendChunk }) => {\n  const { text } = await ai.generate({\n    model: gemini15Flash,\n    prompt: input,\n    onChunk: (c) => sendChunk(c.text),\n  });\n  return text;\n});\n\nconst app = express();\napp.use(express.json());\n\napp.post('/simpleFlow', expressHandler(simpleFlow));\n\napp.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Development Server\nDESCRIPTION: Commands to start the Genkit development server with TypeScript watch mode.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_12\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncd $PROJECT_ROOT/functions\n\nnpx genkit start -- npx tsx --watch src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streaming Genkit Flow\nDESCRIPTION: Creates a flow that supports streaming responses to improve UI responsiveness. The flow uses the sideChannel.sendChunk method to stream content as it's generated by the model.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const streamingMenuSuggestionFlow = defineFlow({\n  name: \"streamingMenuSuggestionFlow\",\n  inputSchema: z.string(),\n  outputSchema: z.string(),\n  streamSchema: z.string(),\n})(\n  async (cuisineType, sideChannel) => {\n    const response = await generate({\n      model: \"gemini-pro\",\n      prompt: `Write a detailed 5-course ${cuisineType} dinner menu with descriptions.`,\n      stream: true,\n    });\n\n    let fullText = \"\";\n    for await (const chunk of response.stream) {\n      fullText += chunk;\n      sideChannel.sendChunk(chunk);\n    }\n\n    return fullText;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Genkit Flow in TypeScript\nDESCRIPTION: Example of a simple Genkit flow that generates a poem based on a given subject.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst generatePoemFlow = ai.defineFlow(\n  {\n    name: \"generatePoem\",\n    inputSchema: z.string(),\n    outputSchema: z.string(),\n  },\n  async (subject: string) => {\n    const { text } = await ai.generate(`Compose a poem about ${subject}.`);\n    return text;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Firestore Retriever in TypeScript\nDESCRIPTION: Illustrates how to extend Genkit by creating a custom retriever that integrates with Firestore for vector similarity search.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/langchain/genkit-getting-started.txt#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { embed } from '@genkit-ai/ai/embedder';\nimport { Document, defineRetriever } from '@genkit-ai/ai/retriever';\nimport { textEmbeddingGecko } from '@genkit-ai/vertexai';\nimport {\n  FieldValue,\n  VectorQuery,\n  VectorQuerySnapshot,\n} from '@google-cloud/firestore';\nimport { Firestore } from 'firebase-admin/firestore';\nimport * as z from 'zod';\nimport { augmentedPrompt } from './prompt';\n\nconst QueryOptions = z.object({\n  k: z.number().optional(),\n});\n\nconst firestoreArtifactsRetriever = defineRetriever(\n  {\n    name: 'firestore/artifacts',\n    configSchema: QueryOptions,\n  },\n  async (input, options) => {\n    const embedding = await embed({\n      embedder: textEmbeddingGecko,\n      content: input,\n    });\n\n    const db = new Firestore();\n    const coll = db.collection('vectors' /* your collection name */);\n\n    const vectorQuery: VectorQuery = coll.findNearest(\n      'embedding' /* the name of the field that contains the vector */,\n      FieldValue.vector(embedding),\n      {\n        limit: options.k ?? 3,\n        distanceMeasure: 'COSINE',\n      }\n    );\n\n    const vectorQuerySnapshot: VectorQuerySnapshot = await vectorQuery.get();\n    return {\n      documents: vectorQuerySnapshot.docs.map((doc) =>\n        // doc.data() represents the Firestore document. You may process\n        // it as needed to generate a Genkit document object, depending on your\n        // storage format.\n        Document.fromText(doc.data().content.text)\n      ),\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Document Retrieval Implementation\nDESCRIPTION: Implementation of document retrieval using file-based vector retriever\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/rag/main.go\" region_tag=\"retrieve\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Document Indexer and Retriever for Vertex AI Vector Search\nDESCRIPTION: Demonstrates how to create custom document indexer and retriever implementations for use with Vertex AI Vector Search when using alternative document stores.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst myDocumentRetriever = async (neighbors) => {\n  // Return the documents referenced by `neighbors`.\n  // ...\n}\nconst myDocumentIndexer = async (documents) => {\n  // Add `documents` to storage.\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Context Within Actions\nDESCRIPTION: Example of overriding context when one flow calls another. This demonstrates both complete context replacement and selective context updates while maintaining propagation behavior.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst otherFlow = ai.defineFlow(/* ... */);\n\nconst myFlow = ai.defineFlow({\n  // ...\n}, (input, {context}) => {\n  // override the existing context completely\n  otherFlow({/*...*/}, {context: {newContext: true}});\n  // or selectively override\n  otherFlow({/*...*/}, {context: {...context, updatedContext: true}});\n}); \n```\n\n----------------------------------------\n\nTITLE: Generating Text with a Simple String Prompt in Golang\nDESCRIPTION: This snippet demonstrates how to use a simple string prompt with Genkit's generation helper functions for straightforward use cases.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/prompts.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntext, err := genkit.GenerateText(ctx, \"Tell me a joke about programming.\")\n```\n\n----------------------------------------\n\nTITLE: Structured Output Streaming in Python\nDESCRIPTION: Example of streaming structured data using Pydantic models for schema validation and type safety.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MenuItemSchema(BaseModel):\n    name: str\n    description: str\n    calories: int\n    allergens: list[str]\n\nclass MenuSchema(BaseModel):\n    starters: list[MenuItemSchema]\n    mains: list[MenuItemSchema]\n    desserts: list[MenuItemSchema]\n\nstream, response = ai.generate_stream(\n    prompt='Invent a menu item for a pirate themed restaurant.',\n    output_schema=MenuSchema,\n)\n\nasync for chunk in stream:\n    print(chunk.output)\n\nprint((await response).output)\n```\n\n----------------------------------------\n\nTITLE: Implementing Genkit Flask Application\nDESCRIPTION: Flask application setup using Genkit with Google GenAI plugin, implementing a joke generation endpoint that accepts a name parameter and returns an AI-generated joke\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/cloud-run.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom flask import Flask\n\nfrom genkit.ai import Genkit\nfrom genkit.plugins.flask import genkit_flask_handler\nfrom genkit.plugins.google_genai import (\n    GoogleGenai,\n    google_genai_name,\n)\n\nai = Genkit(\n    plugins=[GoogleGenai()],\n    model=google_genai_name('gemini-2.0-flash'),\n)\n\napp = Flask(__name__)\n\n@app.post('/joke')\n@genkit_flask_handler(ai)\n@ai.flow()\nasync def joke(name: str, ctx):\n    return await ai.generate(\n        on_chunk=ctx.send_chunk,\n        prompt=f'tell a medium sized joke about {name}',\n    )\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", 8080)))\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with Vertex AI in Go\nDESCRIPTION: Shows how to use the Embed() method of an embedder reference to call the Vertex AI API and generate embeddings.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nembedding, err := embedder.Embed(ctx, \"Hello, world!\")\nif err != nil {\n    // Handle error\n}\nfmt.Println(embedding)\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit with Google AI\nDESCRIPTION: Sets up Genkit with the Google AI plugin and configures Gemini 2.0 Flash as the default model for the chat application.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Genkit Text Generation with Google Gemini\nDESCRIPTION: Demonstrates basic usage of Genkit to generate text using Google's Gemini model. Shows initialization and a simple generate() call with a text prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom genkit.ai import Genkit\nfrom genkit.plugins.google_genai import GoogleGenai\n\nai = Genkit(\n    plugins=[GoogleGenai()],\n    model='googleai/gemini-2.0-flash',\n)\n\nasync def main() -> None:\n    result = await ai.generate(\n        prompt='Invent a menu item for a pirate themed restaurant.',\n    )\n    print(result.text)\n\nai.run_main(main())\n```\n\n----------------------------------------\n\nTITLE: Leveraging Context Caching for Large Text Analysis with Genkit\nDESCRIPTION: Shows how to use context caching in Genkit for efficient analysis of large texts, reducing repeated processing and API usage for improved performance and cost-efficiency.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst textContent = await fs.readFile('path/to/war_and_peace.txt', 'utf-8');\n\nconst llmResponse = await ai.generate({\n  messages: [\n    {\n      role: 'user',\n      content: [{ text: textContent }], // Include the large text as context\n    },\n    {\n      role: 'model',\n      content: [\n        {\n          text: 'This analysis is based on the provided text from War and Peace.',\n        },\n      ],\n      metadata: {\n        cache: {\n          ttlSeconds: 300, // Cache the response to avoid reloading the full text\n        },\n      },\n    },\n  ],\n  model: gemini15Flash,\n  prompt: 'Analyze the relationship between Pierre and Natasha.',\n});\n```\n\n----------------------------------------\n\nTITLE: Tool Calling with Genkit in JavaScript\nDESCRIPTION: Demonstrates how to define and use tools with Genkit. It shows the creation of a weather tool and how to use it in text generation, allowing the AI model to call the tool when needed.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini20Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash,\n});\n\n// Define tool to get current weather for a given location\nconst getWeather = ai.defineTool(\n  {\n    name: \"getWeather\",\n    description: \"Gets the current weather in a given location\",\n    inputSchema: z.object({ \n      location: z.string().describe('The location to get the current weather for')\n    }),\n    outputSchema: z.object({ \n      weatherReport: z.string().describe('Weather report of a particular location') \n    }),\n  },\n  async (input) => {\n    // Here, we would typically make an API call or database query. For this\n    // example, we just return a fixed value.\n    return `The current weather in ${input.location} is 63Â°F and sunny.`;\n  }\n);\n\nconst { text } = await ai.generate({\n    tools: [getWeather], // Give the model a list of tools it can call\n    prompt: 'What is the weather like in New York? ',\n});\n\nconsole.log(text);\n```\n\n----------------------------------------\n\nTITLE: Configuring GenKit Flow with Firebase Cloud Functions\nDESCRIPTION: Demonstrates how to wrap a GenKit flow in a Firebase callable function using onCallGenkit. Includes options for auth policy and App Check configuration.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/flows/firebase.ts\" region_tag=\"ex\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Handling Multimodal Input with Image URL in Genkit\nDESCRIPTION: Demonstrates how to provide multimodal input to a model that supports it, using an image URL along with a text prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await llm.generate({\n  prompt: [\n    {\n      type: \"image\",\n      source: {\n        type: \"url\",\n        url: \"https://example.com/image.jpg\"\n      }\n    },\n    {\n      type: \"text\",\n      text: \"Describe this image in detail.\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Agent Chat System with Orchestration\nDESCRIPTION: This snippet shows how to implement a multi-agent chat system with an orchestration agent that delegates tasks to specialized agents. It configures the main chat interface and manages the conversation flow, routing requests to the appropriate specialized agents as needed.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/multi-agent.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/multi-agent/multi.ts\" region_tag=\"chat\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Context Caching Implementation\nDESCRIPTION: Example of implementing context caching for conversational flows\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n\nconst llmResponse = await ai.generate({\n  messages: [\n    {\n      role: 'user',\n      content: [{ text: 'Here is the relevant text from War and Peace.' }],\n    },\n    {\n      role: 'model',\n      content: [\n        {\n          text: 'Based on War and Peace, here is some analysis of Pierre Bezukhov's character.',\n        },\n      ],\n      metadata: {\n        cache: {\n          ttlSeconds: 300, // Cache this message for 5 minutes\n        },\n      },\n    },\n  ],\n  model: gemini15Flash,\n  config: {\n    version: 'gemini-1.5-flash-001', // Only 001 currently supports context caching\n  },\n  prompt: 'Describe Pierre's transformation throughout the novel.',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore Document Indexer and Retriever for Vertex AI Vector Search\nDESCRIPTION: Sets up Firestore document indexer and retriever for use with Vertex AI Vector Search. Requires Firebase Admin SDK initialization and Firestore instance.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFirestoreDocumentIndexer, getFirestoreDocumentRetriever } from '@genkit-ai/vertexai/vectorsearch';\n\nimport { initializeApp } from 'firebase-admin/app';\nimport { getFirestore } from 'firebase-admin/firestore';\n\ninitializeApp({ projectId: PROJECT_ID });\nconst db = getFirestore();\n\nconst firestoreDocumentRetriever = getFirestoreDocumentRetriever(db, FIRESTORE_COLLECTION);\nconst firestoreDocumentIndexer = getFirestoreDocumentIndexer(db, FIRESTORE_COLLECTION);\n```\n\n----------------------------------------\n\nTITLE: Using Tools with ai.generate() in Genkit\nDESCRIPTION: Simple example showing how to use a defined tool with the generate() method. The tool is passed in the options to make it available to the LLM during generation.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await ai.generate({\n  prompt: 'What is the weather in Baltimore?',\n  tools: [getWeather],\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Prompt Variant Loading\nDESCRIPTION: Example of conditionally loading different prompt variants based on environment\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvariant := \"baseline\"\nif os.Getenv(\"ENVIRONMENT\") == \"production\" {\n    variant = \"production\"\n}\nprompt, err := dotprompt.OpenVariant(\"my_prompt.prompt\", variant)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Vector Store with Vertex AI Embeddings\nDESCRIPTION: Sets up a Genkit configuration with a local vector store for development and the Vertex AI embedder. This configuration connects the vector store with the text embedding model needed for RAG operations.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  devLocalIndexerRef,\n  devLocalVectorstore,\n} from '@genkit-ai/dev-local-vectorstore';\nimport { textEmbedding004, vertexAI } from '@genkit-ai/vertexai';\nimport { z, genkit } from 'genkit';\n\nconst ai = genkit({\n  plugins: [\n    // vertexAI provides the textEmbedding004 embedder\n    vertexAI(),\n\n    // the local vector store requires an embedder to translate from text to vector\n    devLocalVectorstore([\n      {\n        indexName: 'menuQA',\n        embedder: textEmbedding004,\n      },\n    ]),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Genkit Client for API Consumption\nDESCRIPTION: Shows how to use the Genkit client library to consume exposed REST endpoints, including examples of both regular and streaming requests with authentication headers.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/express/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { runFlow, streamFlow } from 'genkit/beta/client';\n\nconst result = await runFlow({\n  url: `http://localhost:${port}/simpleFlow`,\n  input: 'say hello',\n});\n\nconsole.log(result); // hello\n\n// set auth headers (when using auth policies)\nconst result = await runFlow({\n  url: `http://localhost:${port}/simpleFlow`,\n  headers: {\n    Authorization: 'open sesame',\n  },\n  input: 'say hello',\n});\n\nconsole.log(result); // hello\n\n// and streamed\nconst result = streamFlow({\n  url: `http://localhost:${port}/simpleFlow`,\n  input: 'say hello',\n});\nfor await (const chunk of result.stream) {\n  console.log(chunk);\n}\nconsole.log(await result.output);\n```\n\n----------------------------------------\n\nTITLE: Creating Flask App with Genkit Integration\nDESCRIPTION: Main Flask application setup with Genkit integration, including AI model configuration and joke generation endpoint\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/flask.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\nfrom genkit.ai import Genkit\nfrom genkit.plugins.flask import genkit_flask_handler\nfrom genkit.plugins.google_genai import (\n    GoogleGenai,\n    google_genai_name,\n)\n\nai = Genkit(\n    plugins=[GoogleGenai()],\n    model=google_genai_name('gemini-2.0-flash'),\n)\n\napp = Flask(__name__)\n\n\n@app.post('/joke')\n@genkit_flask_handler(ai)\n@ai.flow()\nasync def joke(name: str, ctx):\n    return await ai.generate(\n        on_chunk=ctx.send_chunk,\n        prompt=f'tell a medium sized joke about {name}',\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Gemini Model for Text Generation\nDESCRIPTION: Example of generating text using Gemini model with grounding configuration\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [vertexAI({ location: 'us-central1' })],\n});\n\nawait ai.generate({\n  model: gemini15Flash,\n  prompt: '...',\n  config: {\n    googleSearchRetrieval: {\n      disableAttribution: true,\n    },\n    vertexRetrieval: {\n      datastore: {\n        projectId: 'your-cloud-project',\n        location: 'us-central1',\n        collection: 'your-collection',\n      },\n      disableAttribution: true,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit Logger in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and configure the Genkit logger. It shows how to set the log level to 'debug', which is useful during development for more verbose logging. The Genkit logger automatically exports logs to Genkit Monitoring when the Firebase Telemetry plugin is enabled.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/local-observability.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from 'genkit/logging';\n\n// Set the desired log level\nlogger.setLogLevel('debug');\n```\n\n----------------------------------------\n\nTITLE: Basic Flow Definition in Python with Genkit\nDESCRIPTION: Demonstrates the simplest form of a Genkit flow that wraps a function calling generate() to create menu suggestions.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@ai.flow()\nasync def menu_suggestion_flow(theme: str):\n    response = await ai.generate(\n      prompt=f'Invent a menu item for a {theme} themed restaurant.',\n    )\n    return response.text\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Retriever in Python\nDESCRIPTION: Shows how to implement a custom retriever function that can be integrated with Genkit. Includes example of defining and using the custom retriever with the AI instance.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/rag.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.types import (\n    RetrieverRequest,\n    RetrieverResponse,\n    Document,\n    ActionRunContext\n)\n\nasync def my_retriever(request: RetrieverRequest, ctx: ActionRunContext):\n    \"\"\"Example of a retriever.\n\n    Args:\n        request: The request to the retriever.\n        ctx: The context of the retriever.\n    \"\"\"\n    return RetrieverResponse(documents=[Document.from_text('Hello'), Document.from_text('World')])\n\n\nai.define_retriever(name='my_retriever', fn=my_retriever)\n```\n\n----------------------------------------\n\nTITLE: System Prompt Configuration\nDESCRIPTION: Shows how to use system prompts to control model behavior and response characteristics\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await genkit.generate({\n  system: \"You are a professional chef with expertise in themed restaurants.\",\n  prompt: \"Create a unique and creative dish that would be served at a pirate-themed restaurant\"\n});\n```\n\n----------------------------------------\n\nTITLE: Structured Output Generation with Genkit in JavaScript\nDESCRIPTION: Shows how to generate structured output using Genkit with a specified schema. It uses Zod for schema definition and demonstrates generating a character profile for a fantasy video game.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini20Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini20Flash,\n});\n\nconst { output } = await ai.generate({\n  prompt: 'Create a brief profile for a character in a fantasy video game.',\n  // Specify output structure using Zod schema\n  output: {\n    format: 'json',  \n    schema: z.object({\n      name: z.string(),\n      role: z.enum(['knight', 'mage', 'archer']),\n      backstory: z.string(),\n    }),\n  },\n});\n\nconsole.log(output);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete Output from Streaming Request in Genkit\nDESCRIPTION: Demonstrates how to get the complete output of a streaming request, similar to a non-streaming request.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst completeOutput = await response.completeText();\nconsole.log(completeOutput);\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram of Genkit API Class Structure\nDESCRIPTION: This Mermaid diagram shows the class structure of the Genkit API, including RegistrarMixin, Registry, AsyncGenkit, SyncGenkit, and GenkitExperimental classes and their relationships.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class RegistrarMixin {\n        -Registry _registry\n        +__init__(registry: Registry | None)\n        +flow(name: str | None, description: str | None) Callable\n        +tool(name: str | None, description: str | None) Callable\n        +registry() Registry\n    }\n\n    class Registry {\n        %% Placeholder for Registry type %%\n    }\n\n    class AsyncGenkit {\n        <<_async.py>>\n        +generate(prompt: str) str\n        +generate_stream(prompt: str) AsyncGenerator\n    }\n\n    class SyncGenkit {\n        <<_sync.py>>\n        +generate(prompt: str) str\n        +generate_stream(prompt: str) Generator\n    }\n\n    class GenkitExperimental {\n        <<_veneer.py>>\n        -AsyncGenkit _async_ai\n        -SyncGenkit _sync_ai\n        +__init__(registry: Registry | None)\n        +generate(prompt: str) str\n        +generate_stream(prompt: str) Generator\n        +agenerate(prompt: str) str\n        +agenerate_stream(prompt: str) AsyncGenerator\n        +aio() AsyncGenkit\n        +io() SyncGenkit\n    }\n\n    RegistrarMixin *-- Registry : has a >\n    GenkitExperimental --|> RegistrarMixin : inherits\n    GenkitExperimental *-- AsyncGenkit : has _async_ai >\n    GenkitExperimental *-- SyncGenkit : has _sync_ai >\n\n    GenkitExperimental --> AsyncGenkit : calls agenerate()\n    GenkitExperimental --> AsyncGenkit : calls agenerate_stream()\n    GenkitExperimental --> SyncGenkit : calls generate()\n    GenkitExperimental --> SyncGenkit : calls generate_stream()\n```\n\n----------------------------------------\n\nTITLE: Implementing chat loop\nDESCRIPTION: Creates an infinite loop to handle user input, send it to the chat model, and display the model's response.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n    // Step 5: chat loop\n    while (true) {\n      const userInput = await readline.question(\"> \");\n      const { text } = await chat.send(userInput);\n      console.log(text);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing main application logic\nDESCRIPTION: Provides a skeleton for the main application logic, including error handling and steps for parsing PDF, constructing prompts, and implementing the chat loop.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(async () => {\n  try {\n    // Step 1: get command line arguments\n\n    // Step 2: load PDF file\n\n    // Step 3: construct prompt\n\n    // Step 4: start chat\n\n    // Step 5: chat loop\n\n  } catch (error) {\n    console.error(\"Error parsing PDF or interacting with Genkit:\", error);\n  }\n})(); // <-- don't forget the trailing parentheses to call the function!\n```\n\n----------------------------------------\n\nTITLE: Providing Context for LLM Generation\nDESCRIPTION: Example of providing context during LLM generation with tools. The context will be automatically propagated to any tool calls made during generation.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst {text} = await ai.generate({\n  prompt: \"Find references to ocelots in my notes.\",\n  // the context will propagate to tool calls\n  tools: [searchNotes],\n  context: {auth: currentUser},\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Pinecone Index\nDESCRIPTION: Demonstrates how to create an index definition specifying the index name and embedding model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\nidx := pinecone.NewIndex(\n    \"my-index\",\n    embeddings.OpenAI(\"text-embedding-ada-002\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using the PostgreSQL pgvector Retriever in a GenKit Flow\nDESCRIPTION: Demonstrates how to integrate a custom PostgreSQL pgvector retriever into a GenKit flow. This shows how to initialize the retriever and use it with a model to generate responses.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/pgvector.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/samples/pgvector/main.go\" region_tag=\"use-retr\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rerank Flow with Vertex AI in TypeScript\nDESCRIPTION: TypeScript function that defines a flow for reranking documents using Vertex AI. It takes a query as input, reranks predefined document content, and returns sorted results by relevance score.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-reranker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const rerankFlow = defineFlow(\n{\nname: 'rerankFlow',\ninputSchema: z.object({ query: z.string() }),\noutputSchema: z.array(\nz.object({\ntext: z.string(),\nscore: z.number(),\n})\n),\n},\nasync ({ query }) => {\nconst documents = FAKE_DOCUMENT_CONTENT.map((text) =>\nDocument.fromText(text)\n);\nconst reranker = 'vertexai/reranker';\n\n    const rerankedDocuments = await rerank({\n      reranker,\n      query: Document.fromText(query),\n      documents,\n    });\n\n    return rerankedDocuments.map((doc) => ({\n      text: doc.text,\n      score: doc.metadata.score,\n    }));\n\n}\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a PostgreSQL pgvector Retriever in Go\nDESCRIPTION: Creates a custom retriever implementation for GenKit using PostgreSQL with pgvector extension. It establishes a database connection and implements the Retrieve method to perform vector similarity search.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/pgvector.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/samples/pgvector/main.go\" region_tag=\"retr\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Handling Tool Calls in Genkit\nDESCRIPTION: Illustrates how to manually handle tool calls by setting 'return_tool_requests' to True. This gives full control over the tool-calling loop, allowing for more complex logic implementation.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/tools.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = await ai.generate(\n    prompt='What is the weather in Baltimore?',\n    tools=['get_weather'],\n    return_tool_requests=True,\n)\n\ntool_request_parts = llm_response.tool_requests\n\nif len(tool_request_parts) == 0:\n    print(llm_response.text)\nelse:\n    for part in tool_request_parts:\n        await handle_tool(part.name, part.input)\n```\n\n----------------------------------------\n\nTITLE: Creating Genkit Flow with Schema Transformation\nDESCRIPTION: Demonstrates a flow that uses a structured output schema for the generate() call but transforms it to return a simple string. This example shows how flow schemas don't need to match internal generate() schemas.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const menuSuggestionFlow = defineFlow({\n  name: \"menuSuggestionFlow\",\n  inputSchema: z.string(),\n  outputSchema: z.string(),\n})(\n  async (cuisineType) => {\n    const menuItem = await generate({\n      model: \"gemini-pro\",\n      prompt: `Suggest a menu item for a ${cuisineType} dinner party.`,\n      outputSchema: MenuItemSchema,\n    });\n    return `${menuItem.name}: ${menuItem.description}`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Functionality with Genkit in JavaScript\nDESCRIPTION: Shows how to create a conversational interface in JavaScript using Genkit. The example demonstrates creating a chat session with a system prompt that instructs the AI to talk like a pirate, and maintains conversation context across multiple messages.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\nconst chat = ai.chat({ system: 'Talk like a pirate' });\n\nlet response = await chat.send('Hi, my name is Pavel');\n\nresponse = await chat.send('What is my name?');\nconsole.log(response.text);\n// Ahoy there! Your name is Pavel, you scurvy dog\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reranker in TypeScript\nDESCRIPTION: Shows how to define a custom reranker with configurable options and custom scoring logic.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const customReranker = ai.defineReranker(\n  {\n    name: 'custom/reranker',\n    configSchema: z.object({\n      k: z.number().optional(),\n    }),\n  },\n  async (query, documents, options) => {\n    // Your custom reranking logic here\n    const rerankedDocs = documents.map((doc) => {\n      const score = Math.random(); // Assign random scores for demonstration\n      return {\n        ...doc,\n        metadata: { ...doc.metadata, score },\n      };\n    });\n\n    return rerankedDocs.sort((a, b) => b.metadata.score - a.metadata.score).slice(0, options.k || 3);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authorization\nDESCRIPTION: Example of implementing custom authorization and context handling in Flask routes using Genkit\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/flask.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.types import GenkitError\n\nasync def my_context_provider(request):\n    return {'username': parse_request_header(request.headers.get('authorization'))}\n\n@app.post('/say_hi')\n@genkit_flask_handler(ai, context_provider=my_context_provider)\n@ai.flow()\nasync def say_hi(name: str, ctx):\n    if not ctx.context.get('username'):\n        raise GenkitError(status='UNAUTHENTICATED', message='user not provided')\n\n    return await ai.generate(\n        on_chunk=ctx.send_chunk,\n        prompt=f'say hi to {ctx.context.get(\\'username\\')}',\n    )\n```\n\n----------------------------------------\n\nTITLE: String Identifier Model Selection\nDESCRIPTION: Demonstrates using string identifiers to specify AI models for generation tasks\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await genkit.generate({\n  model: \"googleai/gemini-pro\",\n  prompt: \"Create a unique and creative dish that would be served at a pirate-themed restaurant\"\n});\n```\n\n----------------------------------------\n\nTITLE: Flow Invocation Example\nDESCRIPTION: Demonstrates how to call a defined flow as a regular function.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = await menu_suggestion_flow('bistory')\n```\n\n----------------------------------------\n\nTITLE: Indexing Documents in Pinecone\nDESCRIPTION: Shows how to index a list of documents into a Pinecone vector database\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\ndocs := []string{\"document1\", \"document2\", \"document3\"}\nidx.Index(ctx, docs)\n```\n\n----------------------------------------\n\nTITLE: BigQuery Document Retriever Implementation\nDESCRIPTION: TypeScript implementation of the BigQuery document retriever that fetches documents based on neighbor IDs.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-bigquery/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bigQueryDocumentRetriever: DocumentRetriever =\n  getBigQueryDocumentRetriever(bq, BIGQUERY_TABLE, BIGQUERY_DATASET);\n```\n\n----------------------------------------\n\nTITLE: Streaming Structured Output in Genkit\nDESCRIPTION: Shows how to use streaming with structured output in Genkit. Each chunk represents the accumulated output so far, rather than individual pieces.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await llm.generateStream({\n  prompt: \"Create a menu for a pirate-themed restaurant. Include starters, mains, and desserts.\",\n  structuredOutput: {\n    starters: [{name: \"string\", description: \"string\", calories: \"number\", allergens: [\"string\"]}],\n    mains: [{name: \"string\", description: \"string\", calories: \"number\", allergens: [\"string\"]}],\n    desserts: [{name: \"string\", description: \"string\", calories: \"number\", allergens: [\"string\"]}]\n  }\n});\n\nfor await (const chunk of response.stream) {\n  console.log(JSON.stringify(chunk.output, null, 2));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Task Factory in Firebase GenKit\nDESCRIPTION: A function that creates a reusable task with customizable validation and execution logic. It manages state within the context object and handles progress tracking and sub-steps execution.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask = <T = any>(\n  options: {\n    name: string;\n    validate?: (ctx: any) => string | undefined;\n    execute: (ctx: any, params: any) => Promise<T>;\n  }\n) => {\n  return async (ctx: any, params: any = {}): Promise<T> => {\n    const { name, validate, execute } = options;\n\n    // Set up task tracking in context\n    if (!ctx.__tasks) {\n      ctx.__tasks = {};\n    }\n\n    // Create task state\n    if (!ctx.__tasks[name]) {\n      ctx.__tasks[name] = {\n        status: 'pending',\n        startTime: null,\n        endTime: null,\n        duration: null,\n        result: null,\n        error: null,\n        progress: 0,\n        steps: [],\n      };\n    }\n\n    const task = ctx.__tasks[name];\n\n    // If already completed, return the result\n    if (task.status === 'completed') {\n      return task.result as T;\n    }\n\n    // Run validation if provided\n    if (validate) {\n      const validationError = validate(ctx);\n      if (validationError) {\n        task.status = 'failed';\n        task.error = validationError;\n        throw new Error(validationError);\n      }\n    }\n\n    // Start executing\n    task.status = 'running';\n    task.startTime = Date.now();\n\n    try {\n      // Add helper functions to context for this task execution\n      const taskCtx = {\n        ...ctx,\n        setProgress: (progress: number) => {\n          task.progress = Math.min(Math.max(0, progress), 100);\n        },\n        addStep: (stepName: string) => {\n          const step = {\n            name: stepName,\n            status: 'running',\n            startTime: Date.now(),\n            endTime: null,\n            duration: null,\n          };\n          task.steps.push(step);\n          return {\n            complete: () => {\n              step.status = 'completed';\n              step.endTime = Date.now();\n              step.duration = step.endTime - step.startTime;\n            },\n            fail: (error: any) => {\n              step.status = 'failed';\n              step.endTime = Date.now();\n              step.duration = step.endTime - step.startTime;\n              step.error = error;\n            },\n          };\n        },\n      };\n\n      // Execute the task\n      const result = await execute(taskCtx, params);\n\n      // Mark as completed\n      task.status = 'completed';\n      task.result = result;\n      task.endTime = Date.now();\n      task.duration = task.endTime - task.startTime;\n      task.progress = 100;\n\n      return result;\n    } catch (error) {\n      // Mark as failed\n      task.status = 'failed';\n      task.error = error;\n      task.endTime = Date.now();\n      task.duration = task.endTime - task.startTime;\n\n      throw error;\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Flow Server\nDESCRIPTION: TypeScript code to initialize and start the Genkit flows server.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-firestore/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstartFlowsServer();\n```\n\n----------------------------------------\n\nTITLE: Loading a Prompt File with Tools in Genkit\nDESCRIPTION: Shows how to load and execute a prompt file that has tool configuration. This code snippet demonstrates using the ai.prompt() method to load a file-based prompt with tools.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// assuming prompt file is named weatherPrompt.prompt\nconst weatherPrompt = ai.prompt('weatherPrompt');\n\nconst response = await weatherPrompt({ location: 'Baltimore' });\n```\n\n----------------------------------------\n\nTITLE: Testing GenKit Flow HTTP Endpoint\nDESCRIPTION: Example of how to make a POST request to a GenKit flow endpoint using curl.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:3400/menuSuggestionFlow\" \\\n  -H \"Content-Type: application/json\"  -d '{\"data\": \"banana\"}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore Document Retriever\nDESCRIPTION: TypeScript implementation of the Firestore document retriever setup.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-firestore/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst firestoreDocumentRetriever: DocumentRetriever =\n  getFirestoreDocumentRetriever(db, FIRESTORE_COLLECTION);\n```\n\n----------------------------------------\n\nTITLE: Using Interrupts in Content Generation with Genkit\nDESCRIPTION: This code snippet shows how to include interrupts in the tools array when generating content using Genkit. It demonstrates passing both normal tools and interrupts to the same generate call.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/interrupts.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninterrupted_response = await ai.generate(\n    prompt='Ask me a movie trivia question.',\n    tools=['ask_question'],\n)\n```\n\n----------------------------------------\n\nTITLE: Using a Function-Based Prompt with Genkit in Golang\nDESCRIPTION: This snippet shows how to use the previously defined 'helloPrompt' function to generate text with Genkit, incorporating user input.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/prompts.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\ntext, err := genkit.GenerateText(ctx, helloPrompt(\"Alice\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js API Route for Genkit Flow in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a Next.js API route for the previously defined Genkit flow. It uses the 'appRoute' function from the '@genkit-ai/nextjs' package to expose the 'simpleFlow' as a POST endpoint.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/next/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// /app/api/simpleFlow/route.ts\nimport { simpleFlow } from '@/genkit/simpleFlow';\nimport { appRoute } from '@genkit-ai/nextjs';\n\nexport const POST = appRoute(simpleFlow);\n```\n\n----------------------------------------\n\nTITLE: Running Retriever Flow Command\nDESCRIPTION: Command line example showing how to run the menuQA flow with a specific query about dessert options.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_7\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit flow:run menuQA '\"Recommend a dessert from the menu while avoiding dairy and nuts\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Ollama Plugin with Genkit\nDESCRIPTION: TypeScript example demonstrating how to initialize Genkit with the Ollama plugin, configure model settings, and generate text using the Gemma model. Shows plugin configuration with server address and model selection.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/ollama/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { ollama } from 'genkitx-ollama';\n\nconst ai = genkit({\n  plugins: [\n    ollama({\n      models: [{ name: 'gemma' }],\n      serverAddress: 'http://127.0.0.1:11434', // default local address\n    }),\n  ],\n});\n\nasync function main() {\n  const { text } = await ai.generate({\n    prompt: 'hi Gemini!',\n    model: 'ollama/gemma',\n  });\n  console.log(text);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing Reranker Flow in TypeScript\nDESCRIPTION: Example of implementing a reranker flow using Vertex AI's semantic ranker to score and reorder documents based on relevance.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst FAKE_DOCUMENT_CONTENT = [\n  'pythagorean theorem',\n  'e=mc^2',\n  'pi',\n  'dinosaurs',\n  'quantum mechanics',\n  'pizza',\n  'harry potter',\n];\n\nexport const rerankFlow = ai.defineFlow(\n  {\n    name: 'rerankFlow',\n    inputSchema: z.object({ query: z.string() }),\n    outputSchema: z.array(\n      z.object({\n        text: z.string(),\n        score: z.number(),\n      })\n    ),\n  },\n  async ({ query }) => {\n    const documents = FAKE_DOCUMENT_CONTENT.map((text) =>\n       ({ content: text })\n    );\n\n    const rerankedDocuments = await ai.rerank({\n      reranker: 'vertexai/semantic-ranker-512',\n      query:  ({ content: query }),\n      documents,\n    });\n\n    return rerankedDocuments.map((doc) => ({\n      text: doc.content,\n      score: doc.metadata.score,\n    }));\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Interrupt Responses in TypeScript\nDESCRIPTION: Shows how to handle and respond to interrupts in a loop until generation is complete.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet response = await ai.generate({\n  tools: [askQuestion],\n  system: 'ask clarifying questions until you have a complete solution',\n  prompt: 'help me plan a backyard BBQ',\n});\n\nwhile (response.interrupts.length) {\n  const answers = [];\n  for (const question in response.interrupts) {\n    answers.push(\n      askQuestion.respond(\n        question,\n        await askUser(question.toolRequest.input)\n      )\n    );\n  }\n\n  response = await ai.generate({\n    tools: [askQuestion],\n    messages: response.messages,\n    resume: {\n      respond: answers\n    }\n  })\n}\n\nconsole.log(response.text);\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Database Retriever in TypeScript\nDESCRIPTION: Example of creating a simple retriever that integrates with an existing database search function for emails.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"genkit\";\nimport { searchEmails } from \"./db\";\n\nai.defineSimpleRetriever(\n  {\n    name: \"myDatabase\",\n    configSchema: z\n      .object({\n        limit: z.number().optional(),\n      })\n      .optional(),\n    // we'll extract \"message\" from the returned email item\n    content: \"message\",\n    // and several keys to use as metadata\n    metadata: [\"from\", \"to\", \"subject\"],\n  },\n  async (query, config) => {\n    const result = await searchEmails(query.text, { limit: config.limit });\n    return result.data.emails;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Video Content Analysis with Caching\nDESCRIPTION: Example of analyzing video content with context caching enabled\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst analyzeVideoResponse = await ai.generate({\n  messages: [\n    {\n      role: 'user',\n      content: [\n        {\n          media: {\n            url: fileUri, // Use the uploaded file URL\n            contentType: 'video/mp4',\n          },\n        },\n      ],\n    },\n    {\n      role: 'model',\n      content: [\n        {\n          text: 'This video seems to contain several key moments. I will analyze it now and prepare to answer your questions.',\n        },\n      ],\n      // Everything up to (including) this message will be cached.\n      metadata: {\n        cache: true,\n      },\n    },\n  ],\n  config: {\n    version: 'gemini-1.5-flash-001', // Only 001 versions support context caches\n  },\n  model: gemini15Flash,\n  prompt: query,\n});\n```\n\n----------------------------------------\n\nTITLE: Indexing Documents with Dev Local Vector Store - Python\nDESCRIPTION: Example showing how to index documents using the Dev Local Vector Store. Demonstrates creating Document objects from text and using the static index method.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/dev-local-vectorstore.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.ai import Genkit\nfrom genkit.plugins.dev_local_vectorstore import DevLocalVectorStore\nfrom genkit.plugins.google_genai import VertexAI\nfrom genkit.types import Document\n\nai = Genkit(\n    plugins=[\n        VertexAI(),\n        DevLocalVectorStore(\n            name='my_vectorstore',\n            embedder='vertexai/text-embedding-004',\n        ),\n    ],\n    model='vertexai/gemini-2.0.',\n)\n\ndata_list = [\n    'This is the first document.',\n    'This is the second document.',\n    'This is the third document.',\n    \"This is the fourth document.\",\n]\n\ngenkit_docs = [Document.from_text(text=item) for item in data_list]\nawait DevLocalVectorStore.index('my_vectorstore', genkit_docs)\n```\n\n----------------------------------------\n\nTITLE: Streaming Output with Genkit in TypeScript\nDESCRIPTION: Demonstrates how to use the generateStream() method in Genkit to stream large amounts of text output. This improves user experience by presenting output as it's generated.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await llm.generateStream({\n  prompt: \"Tell me a long story about a brave adventurer.\"\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Flow Server Mux\nDESCRIPTION: Example of setting up a custom server mux for handling flow endpoints alongside other routes.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"mux\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Generation with Genkit\nDESCRIPTION: Demonstrates the simplest form of text generation using Genkit's generate() method with a basic prompt\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await genkit.generate({\n  prompt: \"Create a unique and creative dish that would be served at a pirate-themed restaurant\"\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Document Retriever Implementation\nDESCRIPTION: TypeScript implementation of a document retriever that fetches documents from a local JSON file based on neighbor IDs\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-custom/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst localDocumentRetriever: DocumentRetriever = async (\n  neighbors: Neighbor[]\n) => {\n  const content = await fs.promises.readFile(localFilePath, 'utf-8');\n  const currentLocalFile = JSON.parse(content);\n  const ids = neighbors\n    .map((neighbor) => neighbor.datapoint?.datapointId)\n    .filter(Boolean) as string[];\n  const docs = ids\n    .map((id) => {\n      const doc = currentLocalFile[id];\n      if (!doc || !doc.content) return null;\n      const parsedContent = JSON.parse(doc.content);\n      const text = parsedContent[0]?.text;\n      return text ? Document.fromText(text) : null;\n    })\n    .filter(Boolean) as Document[];\n  return docs;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Gemini Files API\nDESCRIPTION: Example of uploading and using files with the Gemini Files API\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleAIFileManager } from '@google/generative-ai/server';\nimport { genkit } from 'genkit';\nimport { googleAI } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n\nconst fileManager = new GoogleAIFileManager(process.env.GOOGLE_GENAI_API_KEY);\nconst uploadResult = await fileManager.uploadFile(\n  'path/to/file.jpg',\n  {\n    mimeType: 'image/jpeg',\n    displayName: 'Your Image',\n  }\n);\n\nconst response = await ai.generate({\n  model: gemini15Flash,\n  prompt: [\n    {text: 'Describe this image:'},\n    {media: {contentType: uploadResult.file.mimeType, url: uploadResult.file.uri}}\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Prompt Files in Go\nDESCRIPTION: Code example showing how to load and initialize a prompt file using the Dotprompt plugin\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nprompt, err := dotprompt.Open(\"greeting.prompt\")\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Prompt with Output Schema in TypeScript\nDESCRIPTION: TypeScript code showing how to use a prompt that produces structured output based on the defined output schema. This demonstrates type-safe handling of prompt results.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await helloPrompt({ name: 'Alice' });\nconsole.log(result.greeting);\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Policy to Genkit Flow\nDESCRIPTION: Examples of how to add authorization policies to Genkit flows using manual functions and helper methods.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const generatePoem = onCallGenkit({\n  authPolicy: (auth) => auth?.token?.email_verified,\n}, generatePoemFlow);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hasClaim } from 'firebase-functions/https';\n\nexport const generatePoem = onCallGenkit({\n  authPolicy: hasClaim('email_verified'),\n}, generatePoemFlow);\n```\n\n----------------------------------------\n\nTITLE: Using Context in a Flow Action\nDESCRIPTION: Implementation of a flow action that accesses auth context to summarize message history between two users. The function checks for auth context before retrieving messages and generating a summary.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst summarizeHistory = ai.defineFlow({\n  name: 'summarizeMessages',\n  inputSchema: z.object({friendUid: z.string()}),\n  outputSchema: z.string();\n}, async ({friendUid}, {context}) => {\n  if (!context.auth?.uid) throw new Error(\"Must supply auth context.\");\n  const messages = await listMessagesBetween(friendUid, context.auth.uid);\n  const {text} = await ai.generate({\n    prompt:\n      `Summarize the content of these messages: ${JSON.stringify(messages)}`,\n  });\n  return text;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic Express.js Server for GenKit Flows\nDESCRIPTION: Shows how to define and start a GenKit flow server using Express.js, making flows available as HTTP endpoints.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/flows/express.ts\" region_tag=\"ex01\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Prompt File with Interrupts in TypeScript\nDESCRIPTION: Shows how to execute a prompt file that contains interrupt functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst partyPlanner = ai.prompt('partyPlanner');\n\nconst response = await partyPlanner({ partyType: 'birthday' });\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Pinecone Plugin with Genkit\nDESCRIPTION: This TypeScript code demonstrates how to import, configure, and use the Pinecone plugin with Genkit. It shows setup for indexing and retrieval operations, including creating indexer and retriever references.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/pinecone/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport {\n  pinecone,\n  pineconeRetrieverRef,\n  pineconeIndexerRef,\n} from 'genkitx-pinecone';\n\nconst ai = genkit({\n  plugins: [\n    pinecone([\n      {\n        indexId: 'bob-facts',\n        embedder: textEmbedding004,\n      },\n    ]),\n  ],\n});\n\nexport const bobFactsIndexer = pineconeIndexerRef({\n  indexId: 'bob-facts',\n});\nawait ai.index({ indexer: bobFactsIndexer, documents });\n\n// To specify an index:\nexport const bobFactsRetriever = pineconeRetrieverRef({\n  indexId: 'bob-facts',\n});\n\n// To use the index you configured when you loaded the plugin:\nlet docs = await ai.retrieve({ retriever: pineconeRetrieverRef, query });\n```\n\n----------------------------------------\n\nTITLE: Defining Template-based Prompt in TypeScript\nDESCRIPTION: Shows how to define a prompt using definePrompt() with a Handlebars template string, similar to a .prompt file structure.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePrompt({\n  name: \"greet\",\n  description: \"Generate a greeting\",\n  parameters: {\n    name: \"string\",\n    formal: \"boolean\"\n  }\n}, \"{{#if formal}}Dear{{else}}Hi{{/if}} {{name}}!\")\n```\n\n----------------------------------------\n\nTITLE: Indexing Documents in Firestore\nDESCRIPTION: Complete example of indexing documents in Firestore, including embedding generation and document upload\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/firestore.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.ai import Document\nfrom genkit.types import TextPart\n\nasync def index_documents(documents: list[str], collection_name: str):\n    \"\"\"Indexes the documents in Firestore.\"\"\"\n    genkit_documents = [Document(content=[TextPart(text=doc)]) for doc in documents]\n    embed_response = await ai.embed(embedder='vertexai/text-embedding-004', documents=genkit_documents)\n    embeddings = [emb.embedding for emb in embed_response.embeddings]\n\n    for i, document_text in enumerate(documents):\n        doc_id = f'doc-{i + 1}'\n        embedding = embeddings[i]\n\n        doc_ref = firestore_client.collection(collection_name).document(doc_id)\n        result = doc_ref.set({\n            'text': document_text,\n            'embedding': embedding,\n            'metadata': f'metadata for doc {i + 1}',\n        })\n\n# Example Usage\ndocuments = [\n    \"This is document one.\",\n    \"This is document two.\",\n    \"This is document three.\",\n]\nawait index_documents(documents, 'my_collection')\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Chunking for Vector Indexing\nDESCRIPTION: Defines configuration for the llm-chunk library to split documents into manageable segments for vectorization. Specifies character length limits, splitting strategy, and overlap between chunks.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst chunkingConfig = {\n  minLength: 1000,\n  maxLength: 2000,\n  splitter: 'sentence',\n  overlap: 100,\n  delimiters: '',\n} as any;\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for Genkit Telemetry Plugin\nDESCRIPTION: Required imports for creating a Genkit telemetry plugin, including the Genkit core library and various OpenTelemetry packages for traces, metrics, and logging functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport {\n\t\"log/slog\"\n\t\"time\"\n\n\t\"github.com/firebase/genkit/go/genkit\"\n\t\"github.com/firebase/genkit/go/genkit/telemetry\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/sdk/instrumentation\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mistral Models for Text Generation\nDESCRIPTION: Demonstrates how to generate text using Mistral models with configurable parameters like temperature, token limits, and stop sequences.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst llmResponse = await ai.generate({\n  model: mistralLarge,\n  prompt: 'Write a function that adds two numbers together',\n  config: {\n    version: 'mistral-large-2411', // Optional: specify model version\n    temperature: 0.7,              // Optional: control randomness (0-1)\n    maxOutputTokens: 1024,         // Optional: limit response length\n    topP: 0.9,                     // Optional: nucleus sampling parameter\n    stopSequences: ['###'],        // Optional: stop generation at sequences\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Flow Server\nDESCRIPTION: TypeScript code to initialize and start the Genkit flows server.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-bigquery/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstartFlowsServer();\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Policy in Genkit\nDESCRIPTION: This code snippet demonstrates how to create an authentication policy function in Genkit that verifies user authentication and ensures users can only access their own profile data. The function throws errors if authorization is missing or if the user tries to access another user's data.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/langchain/genkit-getting-started.txt#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nauthPolicy: (auth, input) => {\n  if (!auth) {\n    throw new Error('Authorization required.');\n  }\n  if (input.uid !== auth.uid) {\n    throw new Error('You may only summarize your own profile data.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fine-tuned Gemini Models\nDESCRIPTION: Example of using a fine-tuned Gemini model with a specific model ID\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n\nconst llmResponse = await ai.generate({\n  prompt: `Suggest an item for the menu of fish themed restruant`,\n  model: gemini15Flash.withConfig({\n    version: \"tunedModels/my-example-model-apbm8oqbvuv2\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Welcome Message Prompt with Dotprompt\nDESCRIPTION: A dotprompt file example that defines a welcome message prompt with configuration for the Vertex AI Gemini model. It includes input schema validation and templating using Handlebars for dynamic content insertion.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/index.md#2025-04-22_snippet_1\n\nLANGUAGE: dotprompt\nCODE:\n```\n---\nmodel: vertexai/gemini-1.5-flash\nconfig:\n  temperature: 0.9\ninput:\n  schema:\n    properties:\n      location: {type: string}\n      style: {type: string}\n      name: {type: string}\n    required: [location]\n  default:\n    location: a restaurant\n---\n\nYou are the most welcoming AI assistant and are currently working at {{location}}.\n\nGreet a guest{{#if name}} named {{name}}{{/if}}{{#if style}} in the style of {{style}}{{/if}}.\n```\n\n----------------------------------------\n\nTITLE: Defining a Prompt with DefinePrompt Function in Golang\nDESCRIPTION: This code demonstrates how to use the DefinePrompt function to register a prompt with Genkit, including input schema and model configuration options.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/prompts.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\nvar helloPrompt = genkit.DefinePrompt(\"hello\", genkit.PromptConfig{\n\tAction: func(input map[string]any) genkit.GenerateRequest {\n\t\treturn genkit.GenerateRequest{\n\t\t\tPrompt: fmt.Sprintf(\"Say hello to %s.\", input[\"name\"]),\n\t\t}\n\t},\n\tInputSchema: map[string]genkit.InputField{\n\t\t\"name\": {Type: \"string\"},\n\t},\n\tTemperature: 0.7,\n\tMaxOutputTokens: 50,\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Flow Implementation\nDESCRIPTION: Implementation of a streaming flow, including type definitions and flow logic for handling streamed data.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"streaming-types\" adjust_indentation=\"auto\" %}\n```\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"streaming\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Handling Multimodal Input with Data URL in Genkit\nDESCRIPTION: Demonstrates how to provide multimodal input to a model using a data URL for the image data along with a text prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst imageDataUrl = await readFileAsync(\"../assets/example.jpg\");\n\nconst response = await llm.generate({\n  prompt: [\n    {\n      type: \"image\",\n      source: {\n        type: \"data\",\n        data: imageDataUrl\n      }\n    },\n    {\n      type: \"text\",\n      text: \"Describe this image in detail.\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Genkit Structured Output Generation\nDESCRIPTION: Demonstrates how to use Pydantic models to generate structured output from the AI model.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass MenuItemSchema(BaseModel):\n    name: str\n    description: str\n    calories: int\n    allergens: list[str]\n\nresult = await ai.generate(\n    prompt='Invent a menu item for a pirate themed restaurant.',\n    output_schema=MenuItemSchema,\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Modal Prompt Template\nDESCRIPTION: Example of using the media helper in a prompt template to handle image inputs alongside text\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_13\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ media url }}\nDescribe what you see in this image.\n```\n\n----------------------------------------\n\nTITLE: Using Pinecone Retriever with Genkit\nDESCRIPTION: Examples showing how to use the Pinecone retriever with Genkit, either with the default configured index or by specifying a specific index.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/pinecone.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// To use the index you configured when you loaded the plugin:\nlet docs = await ai.retrieve({ retriever: pineconeRetrieverRef, query });\n\n// To specify an index:\nexport const bobFactsRetriever = pineconeRetrieverRef({\n  indexId: 'bob-facts',\n});\ndocs = await ai.retrieve({ retriever: bobFactsRetriever, query });\n```\n\n----------------------------------------\n\nTITLE: Service Account Impersonation for Testing\nDESCRIPTION: Command to impersonate a service account for testing production-like access. Requires the roles/iam.serviceAccountTokenCreator IAM role on the user account.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth application-default login --impersonate-service-account <SERVICE_ACCT_EMAIL>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI Model Garden Models in Genkit\nDESCRIPTION: Sets up Genkit with Vertex AI Model Garden plugin to enable access to Mistral models. Configures location and available model types.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport {\n  mistralLarge,\n  mistralNemo,\n  codestral,\n  vertexAIModelGarden,\n} from '@genkit-ai/vertexai/modelgarden';\n\nconst ai = genkit({\n  plugins: [\n    vertexAIModelGarden({\n      location: 'us-central1',\n      models: [mistralLarge, mistralNemo, codestral],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI Vector Search Plugin for Genkit\nDESCRIPTION: Sets up the Vertex AI Vector Search plugin for Genkit, including project details, index information, and document indexer/retriever implementations.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { textEmbedding004 } from '@genkit-ai/vertexai';\nimport { vertexAIVectorSearch } from '@genkit-ai/vertexai/vectorsearch';\n\nconst ai = genkit({\n  plugins: [\n    vertexAIVectorSearch({\n      projectId: PROJECT_ID,\n      location: LOCATION,\n      vectorSearchOptions: [\n        {\n          indexId: VECTOR_SEARCH_INDEX_ID,\n          indexEndpointId: VECTOR_SEARCH_INDEX_ENDPOINT_ID,\n          deployedIndexId: VECTOR_SEARCH_DEPLOYED_INDEX_ID,\n          publicDomainName: VECTOR_SEARCH_PUBLIC_DOMAIN_NAME,\n          documentRetriever: firestoreDocumentRetriever,\n          documentIndexer: firestoreDocumentIndexer,\n          embedder: textEmbedding004,\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Options for Genkit Telemetry Plugin\nDESCRIPTION: Basic configuration structure for a telemetry plugin that includes standard options like log level, force export flag, and metric collection interval. Most plugins will extend this with service-specific configuration options.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// Config holds configuration for the telemetry plugin.\ntype Config struct {\n\t// LogLevel is the minimum level at which to export logs. Defaults to LevelInfo.\n\tLogLevel slog.Level\n\n\t// ForceExport forces the exporting of telemetry data even in development\n\t// environments.\n\tForceExport bool\n\n\t// MetricInterval is the interval at which to collect and export metrics.\n\t// Defaults to 60 seconds.\n\tMetricInterval time.Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore Document Indexer\nDESCRIPTION: TypeScript implementation of the Firestore document indexer setup.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-firestore/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst firestoreDocumentIndexer: DocumentIndexer = getFirestoreDocumentIndexer(\n  db,\n  FIRESTORE_COLLECTION\n);\n```\n\n----------------------------------------\n\nTITLE: Calling Event Handlers in Firebase GenKit\nDESCRIPTION: A utility function for calling all registered event handlers for a specific event type. It executes each handler asynchronously and returns the results from all handlers.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const callEvent = async (ctx: any, eventName: string, data: any) => {\n  if (!ctx.__eventHandlers || !ctx.__eventHandlers[eventName]) {\n    return [];\n  }\n\n  const results = [];\n  for (const handler of ctx.__eventHandlers[eventName]) {\n    try {\n      const result = await handler(ctx, data);\n      results.push(result);\n    } catch (e) {\n      console.error(`Error in ${eventName} handler:`, e);\n      results.push(null);\n    }\n  }\n\n  return results;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit Flow Server - TypeScript Implementation\nDESCRIPTION: TypeScript code that sets up a basic Genkit flow server using Google AI's Gemini model and Express.js integration.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkit-ai/googleai';\nimport { startFlowServer } from '@genkit-ai/express';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\nconst helloFlow = ai.defineFlow(\n  {\n    name: 'helloFlow',\n    inputSchema: z.object({ name: z.string() }),\n    outputSchema: z.string(),\n  },\n  async (input) => {\n    const { text } = ai.generate('Say hello to ${input.name}');\n    return text;\n  }\n);\n\nstartFlowServer({\n  flows: [menuSuggestionFlow],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Structured Output Response\nDESCRIPTION: Example of accessing the structured output from a successful generate() call\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/models/index.ts\" region_tag=\"ex06\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Vertex AI Vector Search Indexer and Retriever in Genkit Application\nDESCRIPTION: Demonstrates how to use the configured Vertex AI Vector Search indexer and retriever within a Genkit application for document indexing and retrieval.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  vertexAiIndexerRef,\n  vertexAiRetrieverRef,\n} from '@genkit-ai/vertexai/vectorsearch';\n\n// ... inside your flow function:\n\nawait ai.index({\n  indexer: vertexAiIndexerRef({\n    indexId: VECTOR_SEARCH_INDEX_ID,\n  }),\n  documents,\n});\n\nconst res = await ai.retrieve({\n  retriever: vertexAiRetrieverRef({\n    indexId: VECTOR_SEARCH_INDEX_ID,\n  }),\n  query: queryDocument,\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Streaming Output in Genkit\nDESCRIPTION: Shows how to iterate over the streaming output of a request as it's generated using the stream property of the response object.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const chunk of response.stream) {\n  console.log(chunk.output);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Genkit Flow as Firebase Cloud Function\nDESCRIPTION: Example of creating a callable Cloud Function from a Genkit flow using onCallGenkit. The code demonstrates flow definition, secret management, and function export. Note: This implementation requires proper authentication and app check protections to be added.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onCallGenkit } from 'firebase-functions/https';\nimport { defineSecret } from 'firebase-functions/params';\n\nexport const exampleFlow = ai.defineFlow({\n  name: \"exampleFlow\",\n}, async (prompt) => {\n    // Flow logic goes here.\n\n    return response;\n  }\n);\n\n// WARNING: This has no authentication or app check protections.\n// See github.com/firebase/genkit/blob/main/docs/auth.md for more information.\nexport const example = onCallGenkit({ secrets: [apiKey] }, exampleFlow);\n```\n\n----------------------------------------\n\nTITLE: Basic Text Generation with Gemini\nDESCRIPTION: Example of generating text using the Gemini Flash model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\nconst llmResponse = await ai.generate('Tell me a joke.');\n```\n\n----------------------------------------\n\nTITLE: Defining Picoschema Structure in YAML\nDESCRIPTION: Example showing Picoschema format for defining an article schema with various field types including strings, arrays, objects and wildcards\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  title: string\n  subtitle?: string\n  draft?: boolean, true when in draft state\n  status?(enum, approval status): [PENDING, APPROVED]\n  date: string, the date of publication e.g. '2024-04-09'\n  tags(array, relevant tags for article): string\n  authors(array):\n    name: string\n    email?: string\n  metadata?(object):\n    updatedAt?: string, ISO timestamp of last update\n    approvedBy?: integer, id of approver\n  extra?: any, arbitrary extra data\n  (*): string, wildcard field\n```\n\n----------------------------------------\n\nTITLE: Chat Configuration with Interrupts in TypeScript\nDESCRIPTION: Demonstrates how to configure and use interrupts in a chat context.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst chat = ai.chat({\n  system: 'Use the askQuestion tool if you need to clarify something.',\n  tools: [askQuestion],\n});\n\nconst response = await chat.send('make a plan for my birthday party');\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Export in Genkit Monitoring\nDESCRIPTION: Configuration to enable development export mode for local debugging of Genkit Monitoring. This setting forces development export mode to test telemetry functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableFirebaseTelemetry({\n  forceDevExport: true\n});\n```\n\n----------------------------------------\n\nTITLE: Indexing with Vertex AI Embedder in Go\nDESCRIPTION: Demonstrates how to use a Vertex AI embedder with an indexer's Index() method for embedding and indexing content.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nindexer.Index(ctx, embedder, docs)\n```\n\n----------------------------------------\n\nTITLE: Initializing BigQuery Document Indexer and Retriever for Vertex AI Vector Search\nDESCRIPTION: Sets up BigQuery document indexer and retriever for use with Vertex AI Vector Search. Requires BigQuery client initialization with project ID.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBigQueryDocumentIndexer, getBigQueryDocumentRetriever } from '@genkit-ai/vertexai/vectorsearch';\nimport { BigQuery } from '@google-cloud/bigquery';\n\nconst bq = new BigQuery({ projectId: PROJECT_ID });\n\nconst bigQueryDocumentRetriever = getBigQueryDocumentRetriever(bq, BIGQUERY_TABLE, BIGQUERY_DATASET);\nconst bigQueryDocumentIndexer = getBigQueryDocumentIndexer(bq, BIGQUERY_TABLE, BIGQUERY_DATASET);\n```\n\n----------------------------------------\n\nTITLE: Setting up Model Connection in Firebase GenKit\nDESCRIPTION: A function that creates a connection to either a Vertex AI model or a GenAI model based on the provided configuration. It handles different connection types and validates required parameters for each type.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const setupModel = (ctx: any, params: any, options?: any) => {\n  // Use apiKey or serviceConfig\n  if (!ctx.genai && !ctx.vertexai) {\n    // Try to discover global genai client\n    // @ts-ignore\n    if (global.__genkit_genai) {\n      // @ts-ignore\n      ctx.genai = global.__genkit_genai;\n    } else if (params.apiKey) {\n      ctx.genai = new GoogleGenerativeAI(params.apiKey);\n      // @ts-ignore\n      global.__genkit_genai = ctx.genai;\n    } else if (\n      params.serviceConfig &&\n      params.serviceConfig.project &&\n      params.serviceConfig.location\n    ) {\n      try {\n        // Using dynamic import to avoid dependency on google-auth-library\n        const { GoogleAuth } = require('google-auth-library');\n        const auth = new GoogleAuth({\n          scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n        });\n\n        ctx.vertexai = new VertexAI({\n          project: params.serviceConfig.project,\n          location: params.serviceConfig.location,\n          googleAuthOptions: {\n            authClient: auth.getClient(),\n          },\n        });\n      } catch (e) {\n        console.error('Error setting up Vertex AI client', e);\n        throw new Error(\n          'Failed to set up Vertex AI client. Make sure you have the google-auth-library package installed.'\n        );\n      }\n    }\n  }\n\n  if (!ctx.model) {\n    // Setup model\n    if (params.vertexModelName && ctx.vertexai) {\n      ctx.model = ctx.vertexai.getGenerativeModel({\n        model: params.vertexModelName,\n        generationConfig: params.generationConfig,\n        safetySettings: params.safetySettings,\n      });\n      ctx.modelType = 'vertex';\n    } else if (params.modelName && ctx.genai) {\n      ctx.model = ctx.genai.getGenerativeModel({\n        model: params.modelName,\n        generationConfig: params.generationConfig,\n        safetySettings: params.safetySettings,\n      });\n      ctx.modelType = 'genai';\n    } else {\n      throw new Error(\n        'No model configuration provided. Either apiKey + modelName or serviceConfig + vertexModelName is required.'\n      );\n    }\n  }\n\n  return ctx;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Flow with Authentication in Genkit\nDESCRIPTION: Example of how to define a flow with authentication using the WithFlowAuth option. This snippet demonstrates implementing the FlowAuth interface with Firebase auth to secure a flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/auth.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nflows.Define(\"authenticatedFlow\", gen.Input[AuthInput](), gen.Output[string](),\n\tflows.WithFlowAuth(firebase.NewAuth(ctx, policy, true)),\n\tflows.WithFunction(func(ctx context.Context, input AuthInput) (string, error) {\n\t\t// Get the auth context\n\t\tauthCtx := flows.GetAuthContext(ctx)\n\t\tif authCtx == nil {\n\t\t\treturn \"\", errors.New(\"unauthorized\")\n\t\t}\n\n\t\treturn fmt.Sprintf(\"Hello, %s!\", authCtx.UserID), nil\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Flow Deployment Setup\nDESCRIPTION: Main function setup for deploying flows using Cloud Run, initializing the HTTP server for flow endpoints.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"main\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handler in Firebase GenKit\nDESCRIPTION: A utility function for registering event handlers in GenKit. It adds an event handler to the list of handlers for a specific event type, making event management more organized.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const onEvent = (\n  ctx: any,\n  eventName: string,\n  handler: (ctx: any, data: any) => Promise<any>\n) => {\n  if (!ctx.__eventHandlers) {\n    ctx.__eventHandlers = {};\n  }\n\n  if (!ctx.__eventHandlers[eventName]) {\n    ctx.__eventHandlers[eventName] = [];\n  }\n\n  ctx.__eventHandlers[eventName].push(handler);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Ollama Embeddings in Genkit\nDESCRIPTION: Setting up and using Ollama embeddings functionality for NLP tasks like similarity searches.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst ai = genkit({\n  plugins: [\n    ollama({\n      serverAddress: 'http://localhost:11434',\n      embedders: [{ name: 'nomic-embed-text', dimensions: 768 }],\n    }),\n  ],\n});\n\nasync function getEmbeddings() {\n  const embeddings = (await ai.embed({\n      embedder: 'ollama/nomic-embed-text',\n      content: 'Some text to embed!',\n  })\n  )[0].embedding;\n\n  return embeddings;\n}\n\ngetEmbeddings().then((e) => console.log(e))\n```\n\n----------------------------------------\n\nTITLE: Accessing Structured Flow Output\nDESCRIPTION: Demonstrates how to access properties from a structured flow output. When a flow's output schema is defined as an object, the returned values can be accessed using property notation.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst menuItem = await menuSuggestionFlow(\"French\");\nconsole.log(`${menuItem.name}: ${menuItem.description}`);\nconsole.log(\"Ingredients:\", menuItem.ingredients.join(\", \"));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Retriever in Python\nDESCRIPTION: Demonstrates how to use a custom-defined retriever with the Genkit AI instance for document retrieval.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/rag.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndocs = await ai.retrieve(\n    query=Document.from_text(query), \n    retriever='my_retriever'\n)\n```\n\n----------------------------------------\n\nTITLE: Getting the Complete Output from a Streaming Flow\nDESCRIPTION: Shows how to get the complete final output from a streaming flow by awaiting the response. This returns the aggregated result that conforms to the flow's outputSchema.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst fullOutput = await response;\n```\n\n----------------------------------------\n\nTITLE: Defining Function-based Prompt in TypeScript\nDESCRIPTION: Demonstrates defining a prompt using definePrompt() with a function that returns a GenerateRequest object.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePrompt({\n  name: \"greet\",\n  description: \"Generate a greeting\",\n  parameters: {\n    name: \"string\",\n    formal: \"boolean\"\n  }\n}, (params) => ({\n  messages: [\n    { role: \"user\", content: `Generate a ${params.formal ? 'formal' : 'casual'} greeting for ${params.name}` }\n  ]\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Pinecone Indexer with Genkit\nDESCRIPTION: Examples showing how to use the Pinecone indexer with Genkit, either with the default configured index or by specifying a specific index.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/pinecone.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// To use the index you configured when you loaded the plugin:\nawait ai.index({ indexer: pineconeIndexerRef, documents });\n\n// To specify an index:\nexport const bobFactsIndexer = pineconeIndexerRef({\n  indexId: 'bob-facts',\n});\nawait ai.index({ indexer: bobFactsIndexer, documents });\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Prompt Directory in TypeScript\nDESCRIPTION: TypeScript code snippet showing how to configure Genkit to use a custom directory for prompt files instead of the default 'prompts' directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenKit } from '@genkit/genkit';\nimport { VertexAIPlugin } from '@genkit/vertex-ai';\n\nconst genkit = new GenKit({\n  plugins: [new VertexAIPlugin()],\n  dotPromptOptions: {\n    promptsDir: 'my-prompts',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Manual-Response Interrupt in Python using Genkit\nDESCRIPTION: This snippet demonstrates how to define a manual-response interrupt using the Genkit tool decorator. It creates an 'ask_question' function that interrupts the LLM to ask a clarifying question with multiple-choice options.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/interrupts.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Questions(BaseModel):\n    choices: list[str] = Field(description='the choices to display to the user')\n    allow_other: bool = Field(description='when true, allow write-ins')\n\n\n@ai.tool()\ndef ask_question(input: Questions, ctx) -> str:\n    \"\"\"Use this to ask the user a clarifying question\"\"\"\n    ctx.interrupt()\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Composite Index for Vector Search\nDESCRIPTION: Uses gcloud to create a composite index in Firestore for vector-based querying. This enables efficient retrieval of vector data from a specified collection.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/firestore-retreiver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud firestore indexes composite create \\\n  --project=<FIREBASE-PROJECT>\\\n  --collection-group=<COLLECTION-NAME> \\\n  --query-scope=COLLECTION \\\n  --field-config=vector-config='{\"dimension\":\"3\",\"flat\": \"{}\"}',field-path=<VECTOR-FIELD>\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Retriever in JavaScript\nDESCRIPTION: Code snippet showing how to define a Firestore retriever for vector-based queries using the defineFirestoreRetriever function.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { defineFirestoreRetriever } from '@genkit-ai/firebase';\nimport { initializeApp } from 'firebase-admin/app';\nimport { getFirestore } from 'firebase-admin/firestore';\n\nconst app = initializeApp();\nconst firestore = getFirestore(app);\n\nconst retriever = defineFirestoreRetriever(ai, {\n  name: 'exampleRetriever',\n  firestore,\n  collection: 'documents',\n  contentField: 'text', // Field containing document content\n  vectorField: 'embedding', // Field containing vector embeddings\n  embedder: yourEmbedderInstance, // Embedder to generate embeddings\n  distanceMeasure: 'COSINE', // Default is 'COSINE'; other options: 'EUCLIDEAN', 'DOT_PRODUCT'\n});\n```\n\n----------------------------------------\n\nTITLE: Using Claude 3 Models\nDESCRIPTION: Example of generating text using Claude 3 Sonnet model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst llmResponse = await ai.generate({\n  model: claude3Sonnet,\n  prompt: 'What should I do when I visit Melbourne?',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Embedding Model Reference in Go\nDESCRIPTION: Demonstrates how to create a reference to a supported embedding model using its identifier.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nembedder := vertexai.Embedder(\"textembedding-gecko@003\")\n```\n\n----------------------------------------\n\nTITLE: Flow with Formatted String Output\nDESCRIPTION: Example of a flow that uses structured output internally but returns a formatted string.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@ai.flow()\nasync def menu_suggestion_flow(theme: str) => MenuItemSchema:\n    response = await ai.generate(\n      prompt=f'Invent a menu item for a {theme} themed restaurant.',\n      output_schema=MenuItemSchema,\n    )\n    output: MenuItemSchema = response.output\n    return f'**{output.dishname}**: {output.description}'\n```\n\n----------------------------------------\n\nTITLE: Enabling Firebase Telemetry in Genkit Configuration\nDESCRIPTION: TypeScript code showing how to import and enable Firebase telemetry in the Genkit configuration file. This setup is required to start collecting monitoring data.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { enableFirebaseTelemetry } from '@genkit-ai/firebase';\n\nenableFirebaseTelemetry();\n```\n\n----------------------------------------\n\nTITLE: Implementing App Check Enforcement in Genkit Flow\nDESCRIPTION: Example of how to add Firebase App Check enforcement to a Genkit flow for additional security.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const generatePoem = onCallGenkit({\n  enforceAppCheck: true,\n  consumeAppCheckToken: true,\n}, generatePoemFlow);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI Evaluation Metrics\nDESCRIPTION: Demonstrates how to set up evaluation metrics for Vertex AI Rapid Evaluation, including Safety and ROUGE metrics with custom specifications.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport {\n  vertexAIEvaluation,\n  VertexAIEvaluationMetricType,\n} from '@genkit-ai/vertexai/evaluation';\n\nconst ai = genkit({\n  plugins: [\n    vertexAIEvaluation({\n      location: 'us-central1',\n      metrics: [\n        VertexAIEvaluationMetricType.SAFETY,\n        {\n          type: VertexAIEvaluationMetricType.ROUGE,\n          metricSpec: {\n            rougeType: 'rougeLsum',\n          },\n        },\n      ],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Executing RAG Retriever Flow in Python\nDESCRIPTION: Demonstrates how to run the RAG flow by making a query about menu items with specific dietary restrictions.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/rag.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresult = await qa_flow('Recommend a dessert from the menu while avoiding dairy and nuts')\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Calling a Streaming Genkit Flow\nDESCRIPTION: Shows how to invoke a streaming flow and get the response object immediately rather than waiting for the Promise to resolve. The response provides access to the stream property.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = streamingMenuSuggestionFlow(\"Italian\");\n```\n\n----------------------------------------\n\nTITLE: Importing from Genkit's Beta Channel in TypeScript\nDESCRIPTION: Demonstrates how to import from the \"genkit/beta\" entrypoint to access beta features, and how to verify the API stability property.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/api-stability.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z } from \"genkit/beta\";\n\nconst ai = genkit({plugins: [...]});\nconsole.log(ai.apiStability); // \"beta\"\n\n// now beta features are available\n```\n\n----------------------------------------\n\nTITLE: Prompt Template Definition in YAML\nDESCRIPTION: Demonstrates how to define a prompt template using YAML format. It includes model configuration, input schema definition, and a templated prompt for generating greetings.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmodel: vertexai/gemini-1.5-flash\nconfig:\n  temperature: 0.9\ninput:\n  schema:\n    properties:\n      location: {type: string}\n      style: {type: string}\n      name: {type: string}\n    required: [location]\n  default:\n    location: a restaurant\n---\n\nYou are the most welcoming AI assistant and are currently working at {% verbatim %}{{location}}{% endverbatim %}.\n\nGreet a guest{% verbatim %}{{#if name}}{% endverbatim %} named {% verbatim %}{{name}}{% endverbatim %}{% verbatim %}{{/if}}{% endverbatim %}{% verbatim %}{{#if style}}{% endverbatim %} in the style of {% verbatim %}{{style}}{% endverbatim %}{% verbatim %}{{/if}}{% endverbatim %}.\n```\n\n----------------------------------------\n\nTITLE: Providing Context to a Prompt at Runtime\nDESCRIPTION: Example of providing context when executing a prompt file. This shows how to pass user authentication information to a prompt template.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloPrompt = ai.prompt('sayHello');\nhelloPrompt({pirateStyle: true}, {context: {auth: currentUser}});\n```\n\n----------------------------------------\n\nTITLE: Checking for Interrupts in Genkit Response\nDESCRIPTION: This snippet illustrates how to check if an interrupt has occurred in a Genkit response. It shows two methods: checking the 'finishReason' of the response and checking if any interrupt requests are present.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/interrupts.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n// you can check the 'finishReason' of the response\ninterrupted_response.finishReason === 'interrupted'\n// or you can check to see if any interrupt requests are on the response\nlen(interrupted_response.interrupts) > 0\n```\n\n----------------------------------------\n\nTITLE: Importing Vector Retriever and Embedder\nDESCRIPTION: Import statements for Genkit's local vector retriever and Vertex AI embedder model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Import Genkit's file-based vector retriever, (Don't use in production.)\nimport \"github.com/firebase/genkit/go/plugins/localvec\"\n\n// Vertex AI provides the text-embedding-004 embedder model.\nimport \"github.com/firebase/genkit/go/plugins/vertexai\"\n```\n\n----------------------------------------\n\nTITLE: ASGI Application Implementation\nDESCRIPTION: Shows an ASGI application implementation with async/await pattern, demonstrating event-based communication through scope, receive, and send channels. Includes request body handling and response streaming.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/python/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def app(scope, receive, send):\n    await logger.adebug('Debugging', scope=pformat(value))\n\n    await send({\n        'type': 'http.response.start',\n        'status_code': 200,\n        'headers': [],\n    })\n\n    # ...\n\n    buffer = bytearray()\n    more = True\n    while more:\n          msg = await receive()\n          buffer.extend(await msg['body'])\n          more = msg.get('more_body', False)\n\n    await send({\n        'type': 'http.response.body',\n        'body': buffer,\n    })\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using Chroma Retriever in Genkit\nDESCRIPTION: Examples of using the Chroma retriever with default and custom configurations.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// To use the index you configured when you loaded the plugin:\nlet docs = await ai.retrieve({ retriever: chromaRetrieverRef, query });\n\n// To specify an index:\nexport const bobFactsRetriever = chromaRetrieverRef({\n  collectionName: 'bob-facts',\n});\ndocs = await ai.retrieve({ retriever: bobFactsRetriever, query });\n```\n\n----------------------------------------\n\nTITLE: Defining Base Evaluation Data Point Schema in TypeScript\nDESCRIPTION: Zod schema definition for the base evaluation data point structure used in Genkit evaluators.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const BaseEvalDataPoint = z.object({\n  testCaseId: z.string(),\n  input: z.unknown(),\n  output: z.unknown().optional(),\n  context: z.array(z.unknown()).optional(),\n  reference: z.unknown().optional(),\n  testCaseId: z.string().optional(),\n  traceIds: z.array(z.string()).optional(),\n});\n\nexport const EvalResponse = z.object({\n  sampleIndex: z.number().optional(),\n  testCaseId: z.string(),\n  traceId: z.string().optional(),\n  spanId: z.string().optional(),\n  evaluation: z.union([ScoreSchema, z.array(ScoreSchema)]),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Plugin in Genkit\nDESCRIPTION: Example of how to initialize Genkit with the Chroma plugin, specifying a collection name and embedder.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { chroma } from 'genkitx-chromadb';\n\nconst ai = genkit({\n  plugins: [\n    chroma([\n      {\n        collectionName: 'bob_collection',\n        embedder: textEmbedding004,\n      },\n    ]),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Content with Gemini Model\nDESCRIPTION: Shows how to generate content using a Gemini model's Generate method.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nresp, err := model.Generate(ctx, genai.Text(\"Tell me a joke\"))\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multimodal Content in JavaScript/TypeScript\nDESCRIPTION: Shows how to work with multimodal content in Genkit, including generating images and analyzing them using different AI models.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/langchain/genkit-getting-started.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { imagen2, geminiProVision } from '@genkit-ai/vertexai';\nimport { generate } from '@genkit-ai/ai';\n\nconst imageResult = await generate({\n  model: imagen2,\n  prompt: 'Generate an image of a very specific historical time and place.',\n});\nconst generatedImage = imageResult.media();\n\nconst descriptionResult = await generate({\n  model: geminiProVision,\n  prompt: [\n    {\n      text: 'What is the historical time and place represented in this picture?',\n    },\n    { media: generatedImage },\n  ],\n});\nconsole.log(descriptionResult.text());\n```\n\n----------------------------------------\n\nTITLE: Customizing Express.js Server Configuration for GenKit\nDESCRIPTION: Demonstrates how to customize the GenKit flow server with specific flow lists, custom ports, and CORS settings.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/flows.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/flows/express.ts\" region_tag=\"ex02\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Checking if Telemetry Export Should Proceed\nDESCRIPTION: Function to determine whether to export telemetry data based on the environment and configuration. This prevents exporting data during development unless explicitly requested via ForceExport flag.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// shouldExport returns true if telemetry should be exported.\nfunc shouldExport(cfg *Config) bool {\n\tenv := genkit.GetEnvironment()\n\treturn env == genkit.EnvProduction || cfg.ForceExport\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Vector Store Indexer Reference\nDESCRIPTION: Defines a reference to the local vector store indexer with the name 'menuQA'. This reference will be used to store and retrieve documents from the vector database.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const menuPdfIndexer = devLocalIndexerRef('menuQA');\n```\n\n----------------------------------------\n\nTITLE: Prompt File with Input and Output Schemas\nDESCRIPTION: Example of a .prompt file with input and output schemas defined in the YAML front matter. This shows how to specify structured input and output for a prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n---\nmodel: gemini-pro\ninputSchema:\n  type: object\n  properties:\n    name:\n      type: string\noutputSchema:\n  type: object\n  properties:\n    greeting:\n      type: string\n---\n\nGenerate a greeting for {{name}}.\n```\n\n----------------------------------------\n\nTITLE: Implementing Heuristic Scoring Function in TypeScript\nDESCRIPTION: Defines a scoring function that uses regex to evaluate if output contains a US phone number pattern.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseEvalDataPoint, Score } from 'genkit/evaluator';\n\nconst US_PHONE_REGEX =\n  /[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4}/i;\n\nexport async function usPhoneRegexScore(\n  dataPoint: BaseEvalDataPoint\n): Promise<Score> {\n  const d = dataPoint;\n  if (!d.output || typeof d.output !== 'string') {\n    throw new Error('String output is required for regex matching');\n  }\n  const matches = US_PHONE_REGEX.test(d.output as string);\n  const reasoning = matches\n    ? `Output matched US_PHONE_REGEX`\n    : `Output did not match US_PHONE_REGEX`;\n  return {\n    score: matches,\n    details: { reasoning },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Plugin in Genkit\nDESCRIPTION: Python code to configure the Ollama plugin within Genkit. This setup defines the models and embedders to be used, including their specifications.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/ollama.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.plugins.ollama import Ollama, ModelDefinition, EmbeddingModelDefinition\n\nai = Genkit(\n    plugins=[\n        Ollama(\n           models=[\n               ModelDefinition(name='gemma3'),\n               ModelDefinition(name='mistral-nemo'),\n           ],\n           embedders=[\n               EmbeddingModelDefinition(\n                   name='nomic-embed-text',\n                   dimensions=512,\n               )\n           ],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Context Structure in JavaScript\nDESCRIPTION: Example of a recommended context structure for storing user authentication information. This structure includes the user's unique identifier, decoded token claims, and raw encoded ID token.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  auth: {\n    uid: \"...\", // the user's unique identifier\n    token: {...}, // the decoded claims of a user's id token\n    rawToken: \"...\", // the user's raw encoded id token\n    // ...any other fields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model in Genkit Plugin with Golang\nDESCRIPTION: Implementation of the DefineModel function that registers a model with the Genkit registry. It specifies model metadata including provider ID, name, and capabilities, and defines a generation function that handles request processing.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-models.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nfunc Init() {\n\t// Define a model.\n\tai.DefineModel(ai.ModelMetadata{\n\t\tProviderID:   providerID,\n\t\tName:         \"example-model\",\n\t\tDisplayName:  \"Example Model\",\n\t\tDescription:  \"An example model provided by the example plugin\",\n\t\tCapabilities: ai.ModelCapabilities{\n\t\t\tSystemMessage:       true,\n\t\t\tMultiturnGeneration: true,\n\t\t\tTextToText:          true,\n\t\t},\n\t}, (*Config)(nil), func(ctx context.Context, req *ai.GenerateRequest) (*ai.GenerateResponse, error) {\n\t\t// Cast the config to the right type.\n\t\tcfg, ok := req.Config.(*Config)\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"wrong config type: %T\", req.Config)\n\t\t}\n\n\t\t// Call the AI model API here and translate its response.\n\t\t// For the example, let's just return a fixed message.\n\t\treturn &ai.GenerateResponse{\n\t\t\tMessage: ai.ContentMessage{\n\t\t\t\tRole: ai.RoleAssistant,\n\t\t\t\tText: \"Hello from Example Model!\",\n\t\t\t},\n\t\t}, nil\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vertex AI Plugin\nDESCRIPTION: Basic setup of Vertex AI plugin with Genkit, specifying location for API requests\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { vertexAI } from '@genkit-ai/vertexai';\n\nconst ai = genkit({\n  plugins: [\n    vertexAI({ location: 'us-central1' }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Correctly Defining Actions Outside of Runtime Flow in TypeScript\nDESCRIPTION: This example demonstrates the correct pattern for defining a prompt using defineDotprompt before using it in a flow. Actions should be defined outside the flow execution context to avoid runtime errors.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst prompt = defineDotprompt({...})\n\nconst flow = defineFlow({...}, async (input) => {\n  await prompt.generate(...);\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Document Indexer Implementation\nDESCRIPTION: TypeScript implementation of a document indexer that stores documents in a local JSON file\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-custom/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst localDocumentIndexer: DocumentIndexer = async (documents: Document[]) => {\n  const content = await fs.promises.readFile(localFilePath, 'utf-8');\n  const currentLocalFile = JSON.parse(content);\n  const docsWithIds = Object.fromEntries(\n    documents.map((doc) => [\n      generateRandomId(),\n      { content: JSON.stringify(doc.content) },\n    ])\n  );\n  const newLocalFile = { ...currentLocalFile, ...docsWithIds };\n  await fs.promises.writeFile(\n    localFilePath,\n    JSON.stringify(newLocalFile, null, 2)\n  );\n  return Object.keys(docsWithIds);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Ollama LLM Usage in Genkit\nDESCRIPTION: Example of generating text using an Ollama model through the Genkit interface.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst llmResponse = await ai.generate({\n  model: 'ollama/gemma',\n  prompt: 'Tell me a joke.',\n});\n```\n\n----------------------------------------\n\nTITLE: Large Text Context Caching\nDESCRIPTION: Example of caching large text content for multiple queries\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst fs = require('fs/promises');\n\nconst textContent = await fs.readFile('path/to/war_and_peace.txt', 'utf-8');\n\nconst llmResponse = await ai.generate({\n  messages: [\n    {\n      role: 'user',\n      content: [{ text: textContent }], // Include the large text as context\n    },\n    {\n      role: 'model',\n      content: [\n        {\n          text: 'This analysis is based on the provided text from War and Peace.',\n        },\n      ],\n      metadata: {\n        cache: {\n          ttlSeconds: 300, // Cache the response to avoid reloading the full text\n        },\n      },\n    },\n  ],\n  model: gemini15Flash,\n  config: {\n    version: 'gemini-1.5-flash-001', // Only 001 currently supports context caching\n  },\n  prompt: 'Analyze the relationship between Pierre and Natasha.',\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Handling Tool Requests in Genkit\nDESCRIPTION: Advanced example showing how to manually handle the tool-calling loop by setting returnToolRequests to true. This gives full control over the tool request and response cycle, allowing custom logic between calls.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/tool-calling.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst getWeather = ai.defineTool(\n  {\n    // ... tool definition ...\n  },\n  async ({ location }) => {\n    // ... tool implementation ...\n  },\n);\n\nconst generateOptions: GenerateOptions = {\n  prompt: \"What's the weather like in Baltimore?\",\n  tools: [getWeather],\n  returnToolRequests: true,\n};\n\nlet llmResponse;\nwhile (true) {\n  llmResponse = await ai.generate(generateOptions);\n  const toolRequests = llmResponse.toolRequests;\n  if (toolRequests.length < 1) {\n    break;\n  }\n  const toolResponses: ToolResponsePart[] = await Promise.all(\n    toolRequests.map(async (part) => {\n      switch (part.toolRequest.name) {\n        case 'specialTool':\n          return {\n            toolResponse: {\n              name: part.toolRequest.name,\n              ref: part.toolRequest.ref,\n              output: await getWeather(part.toolRequest.input),\n            },\n          };\n        default:\n          throw Error('Tool not found');\n      }\n    })\n  );\n  generateOptions.messages = llmResponse.messages;\n  generateOptions.prompt = toolResponses;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flow Definition in Golang\nDESCRIPTION: Simple example of defining a basic flow by wrapping a function. This demonstrates the minimal implementation of a Genkit flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"flow1\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Starting Flow Server in TypeScript\nDESCRIPTION: TypeScript code to configure and start the Genkit flow server using the startFlowServer function from @genkit-ai/express.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startFlowServer } from '@genkit-ai/express';\n\nstartFlowServer({\n  flows: [menuSuggestionFlow],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Logging Handler\nDESCRIPTION: Code for setting up and registering a slog handler that forwards logs to the desired monitoring service. Configures the handler with the user-specified minimum log level.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n// Create a log handler for our service\nlogHandler, err := createYourLogHandler(/*...*/)\nif err != nil {\n\treturn fmt.Errorf(\"failed to create log handler: %w\", err)\n}\n\n// Set the minimum log level based on the configuration\nminLevel := cfg.LogLevel\nif minLevel == 0 {\n\tminLevel = slog.LevelInfo\n}\nlogHandler = logHandler.WithAttrs([]slog.Attr{slog.String(\"source\", \"genkit\")})\nlogHandler = telemetry.WithMinLevel(logHandler, minLevel)\n\n// Register the handler as the default logger\nslog.SetDefault(slog.New(logHandler))\n```\n\n----------------------------------------\n\nTITLE: Retrieving with Vertex AI Embedder in Go\nDESCRIPTION: Shows how to use a Vertex AI embedder with a retriever's Retrieve() method for embedding-based retrieval.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nresults, err := retriever.Retrieve(ctx, embedder, query)\n```\n\n----------------------------------------\n\nTITLE: Using Text Embeddings\nDESCRIPTION: Example of generating embeddings using the text embedding model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n\nconst embeddings = await ai.embed({\n  embedder: textEmbedding004,\n  content: input,\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Flow Implementation\nDESCRIPTION: Shows how to implement a flow that supports streaming output for real-time response generation.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@ai.flow()\nasync def menu_suggestion_flow(theme: str, ctx):\n    stream, response = ai.generate_stream(\n      prompt=f'Invent a menu item for a {theme} themed restaurant.',\n    )\n\n    async for chunk in stream:\n        ctx.send_chunk(chunk.text)\n\n    return {\n      'theme': theme,\n      'menu_item': (await response).text,\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with Firestore Retriever in JavaScript\nDESCRIPTION: Code snippet demonstrating how to retrieve documents using a defined Firestore retriever with query options.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst docs = await ai.retrieve({\n  retriever,\n  query: 'search query',\n  options: {\n    limit: 5, // Options: Return up to 5 documents\n    where: { category: 'example' }, // Optional: Filter by field-value pairs\n    collection: 'alternativeCollection', // Optional: Override default collection\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Chat API Implementation\nDESCRIPTION: Demonstrates the new streamlined Chat API with session management and streaming capabilities\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { gemini15Flash, googleAI } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n plugins: [googleAI()],\n model: gemini15Flash,\n});\n\nconst session = ai.createSession({ store: firestoreSessionStore() });\nconst chat = await session.chat({ system: 'talk like a pirate' });\n\nlet response = await chat.send('hi, my name is Pavel');\nconsole.log(response.text()); // \"hi Pavel, I'm llm\"\n\n// continue the conversation\nresponse = await chat.send(\"what's my name\");\nconsole.log(response.text()); // \"Pavel\"\n\n// can stream\nconst { response, stream } = await chat.sendStream('bye');\nfor await (const chunk of stream) {\n console.log(chunk.text());\n}\nconsole.log((await response).text());\n\n// can load session from the store\nconst prevSession = await ai.loadSession(session.id, { store });\nconst prevChat = await prevSession.chat();\nawait prevChat.send('bye');\n```\n\n----------------------------------------\n\nTITLE: Question Synthesis from PDF Implementation\nDESCRIPTION: TypeScript implementation for generating questions from PDF content using LLM.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z } from \"genkit\";\nimport { googleAI, gemini15Flash } from \"@genkit-ai/googleai\";\nimport { chunk } from \"llm-chunk\";\nimport path from \"path\";\nimport { readFile } from \"fs/promises\";\nimport pdf from \"pdf-parse\";\n\nconst ai = genkit({ plugins: [googleAI()] });\n\nconst chunkingConfig = {\n  minLength: 1000,\n  maxLength: 2000,\n  splitter: \"sentence\",\n  overlap: 100,\n  delimiters: \"\",\n} as any;\n\nasync function extractText(filePath: string) {\n  const pdfFile = path.resolve(filePath);\n  const dataBuffer = await readFile(pdfFile);\n  const data = await pdf(dataBuffer);\n  return data.text;\n}\n\nexport const synthesizeQuestions = ai.defineFlow(\n  {\n    name: \"synthesizeQuestions\",\n    inputSchema: z.string().describe(\"PDF file path\"),\n    outputSchema: z.array(z.string()),\n  },\n  async (filePath) => {\n    filePath = path.resolve(filePath);\n    const pdfTxt = await ai.run(\"extract-text\", () => extractText(filePath));\n\n    const chunks = await ai.run(\"chunk-it\", async () =>\n      chunk(pdfTxt, chunkingConfig)\n    );\n\n    const questions: string[] = [];\n    for (var i = 0; i < chunks.length; i++) {\n      const qResponse = await ai.generate({\n        model: gemini15Flash,\n        prompt: {\n          text: `Generate one question about the text below: ${chunks[i]}`,\n        },\n      });\n      questions.push(qResponse.text);\n    }\n    return questions;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Ollama Plugin Configuration in Genkit\nDESCRIPTION: Setting up the Ollama plugin with Genkit, specifying models and server address.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { ollama } from 'genkitx-ollama';\n\nconst ai = genkit({\n  plugins: [\n    ollama({\n      models: [\n        {\n          name: 'gemma',\n          type: 'generate', // type: 'chat' | 'generate' | undefined\n        },\n      ],\n      serverAddress: 'http://127.0.0.1:11434', // default local address\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generate with Interrupts in TypeScript\nDESCRIPTION: Demonstrates how to use interrupts with the generate method for asking movie trivia questions.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await ai.generate({\n  prompt: 'Ask me a movie trivia question.',\n  tools: [askQuestion],\n});\n```\n\n----------------------------------------\n\nTITLE: Calling a Prompt in TypeScript\nDESCRIPTION: Example of calling a loaded prompt as a function in TypeScript. This shows how to execute a prompt with input data.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await helloPrompt({ name: 'Alice' });\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore with Service Account Credentials in JavaScript\nDESCRIPTION: Code snippet demonstrating how to initialize Firestore with service account credentials passed via the GCLOUD_SERVICE_ACCOUNT_CREDS environment variable.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {initializeApp} from \"firebase-admin/app\";\nimport {getFirestore} from \"firebase-admin/firestore\";\n\nconst app = initializeApp();\nlet firestore = getFirestore(app);\n\nif (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {\n  const serviceAccountCreds = JSON.parse(process.env.GCLOUD_SERVICE_ACCOUNT_CREDS);\n  const authOptions = { credentials: serviceAccountCreds };\n  firestore.settings(authOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Editing with Imagen3\nDESCRIPTION: Example of image editing using base image and mask with Imagen3\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [vertexAI({ location: 'us-central1' })],\n});\n\nconst baseImg = fs.readFileSync('base.png', { encoding: 'base64' });\nconst maskImg = fs.readFileSync('mask.png', { encoding: 'base64' });\n\nconst response = await ai.generate({\n  model: imagen3,\n  output: { format: 'media' },\n  prompt: [\n    { media: { url: `data:image/png;base64,${baseImg}` }},\n    {\n      media: { url: `data:image/png;base64,${maskImg}` },\n      metadata: { type: 'mask' },\n    },\n    { text: 'replace the background with foo bar baz' },\n  ],\n  config: {\n    editConfig: {\n      editMode: 'outpainting',\n    },\n  },\n});\n\nreturn response.media();\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Tools for Function Calling in TypeScript\nDESCRIPTION: Demonstrates how to define and use tools in Genkit, allowing AI models to perform specific actions like creating reminders or searching notes.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/langchain/genkit-getting-started.txt#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generate, defineTool } from \"@genkit-ai/ai\";\nimport { geminiPro } from \"@genkit-ai/vertexai\";\nimport { z } from \"zod\";\n\nconst createReminder = defineTool({\n  name: \"createReminder\",\n  description: \"Use this to create reminders for things in the future\",\n  inputSchema: z.object({\n    time: z.string().describe('ISO timestamp string, e.g. 2024-04-03T12:23:00Z'),\n    reminder: z.string().describe('the content of the reminder'),\n  }),\n  outputSchema: z.number().describe('the ID of the created reminder'),\n  (reminder) => db.reminders.create(reminder)\n});\n\nconst searchNotes = defineTool({\n  name: \"searchNotes\",\n  description: \"Use this to search the user's notes for people or phrases\",\n  inputSchema: z.string().describe('the search query'),\n  outputSchema: z.object({notes: z.array(NoteSchema)}),\n  (query) => db.notes.search(query)\n});\n\nconst result = await generate({\n  model: geminiPro,\n  tools: [createReminder, searchNotes],\n  prompt: `\n  You are a note-taking assistant. Using the tools available, try to answer the provided query.\n  If you create a reminder, describe in text the reminder you created as a response.\n\n  Query: I took a note about a meeting with Anna - can you set a reminder for the time?\n  `\n});\nconsole.log(result.text());\n```\n\n----------------------------------------\n\nTITLE: Defining an Init Function for a Genkit Plugin\nDESCRIPTION: Shows the function signature for the required Init function that all Genkit plugins must implement to perform setup and configuration.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\nfunc Init(ctx context.Context, cfg *Config) (err error)\n```\n\n----------------------------------------\n\nTITLE: Registering Span Exporter for Traces\nDESCRIPTION: Code for initializing and registering a trace span exporter with the Genkit telemetry system. This allows the application to send trace data to a monitoring service.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n// Create a span exporter for our service\nspanExporter, err := createYourSpanExporter(/*...*/)\nif err != nil {\n\treturn fmt.Errorf(\"failed to create span exporter: %w\", err)\n}\n\n// Register the span exporter with Genkit\ntp := telemetry.NewTraceProvider(\n\ttelemetry.WithResource(resource.Default()),\n\ttelemetry.WithSpanExporter(spanExporter),\n)\ngenkit.RegisterTraceProvider(tp)\n```\n\n----------------------------------------\n\nTITLE: Multimodal Input with Base64 in TypeScript\nDESCRIPTION: Demonstrates providing multimodal input using base64 encoded image data.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbase64_encoded_image = base64.b64encode(read_file('image.jpg'))\nresult = await ai.generate(\n    prompt=[\n      Part(media={'url': f'data:image/jpeg;base64,{base64_encoded_image}'}),\n      Part(text='Compose a poem about this image.'),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Chroma Indexer in Genkit\nDESCRIPTION: Examples of using the Chroma indexer with default and custom configurations.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// To use the index you configured when you loaded the plugin:\nawait ai.index({ indexer: chromaIndexerRef, documents });\n\n// To specify an index:\nexport const bobFactsIndexer = chromaIndexerRef({\n  collectionName: 'bob-facts',\n});\nawait ai.index({ indexer: bobFactsIndexer, documents });\n```\n\n----------------------------------------\n\nTITLE: Generating Content with Vertex AI Model in Go\nDESCRIPTION: Shows how to use the Generate() method of a model reference to call the Vertex AI API and generate content.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nresp, err := model.Generate(ctx, \"Tell me a joke\")\nif err != nil {\n    // Handle error\n}\nfmt.Println(resp.Candidates[0].Content)\n```\n\n----------------------------------------\n\nTITLE: Image Generation with Imagen3\nDESCRIPTION: Example of generating images from text prompts using Imagen3\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { imagen3 } from '@genkit-ai/vertexai';\n\nconst ai = genkit({\n  plugins: [vertexAI({ location: 'us-central1' })],\n});\n\nconst response = await ai.generate({\n  model: imagen3,\n  output: { format: 'media' },\n  prompt: 'a banana riding a bicycle',\n});\n\nreturn response.media();\n```\n\n----------------------------------------\n\nTITLE: Implementing Restartable Tool with Interrupts in TypeScript\nDESCRIPTION: Example of implementing a restartable tool with interrupts for a money transfer use case with confirmation logic.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transferMoney = ai.defineTool({\n  name: 'transferMoney',\n  description: 'Transfers money between accounts.',\n  inputSchema: z.object({\n    toAccountId: z.string().describe('the account id of the transfer destination'),\n    amount: z.number().describe('the amount in integer cents (100 = $1.00)'),\n  }),\n  outputSchema: z.object({\n    status: z.string().describe('the outcome of the transfer'),\n    message: z.string().optional(),\n  })\n}, async (input, {context, interrupt, resumed})) {\n  if (resumed?.status === \"REJECTED\") {\n    return {status: 'REJECTED', message: 'The user rejected the transaction.'};\n  }\n  if (resumed?.status !== \"APPROVED\" && input.amount > 10000) {\n    interrupt({\n      message: \"Please confirm sending an amount > $100.\",\n    });\n  }\n  return doTransfer(input);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Text - Old vs New Method\nDESCRIPTION: Demonstrates the change from method-based to property-based access for response text in Genkit 0.9\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await generate({ prompt: 'hi' });\nconsole.log(response.text());\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await ai.generate('hi');\nconsole.log(response.text);\n```\n\n----------------------------------------\n\nTITLE: Importing from Genkit's Stable Channel in TypeScript\nDESCRIPTION: Shows how to import from the standard \"genkit\" entrypoint to use the stable API channel, and how to check the API stability property.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/api-stability.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z } from \"genkit\";\n\nconst ai = genkit({plugins: [...]});\nconsole.log(ai.apiStability); // \"stable\"\n```\n\n----------------------------------------\n\nTITLE: Importing Chroma Retriever and Indexer References\nDESCRIPTION: How to import the Chroma retriever and indexer references for use in Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromaRetrieverRef } from 'genkitx-chromadb';\nimport { chromaIndexerRef } from 'genkitx-chromadb';\n```\n\n----------------------------------------\n\nTITLE: Initializing Vertex AI Plugin with Project ID in Go\nDESCRIPTION: Demonstrates how to initialize the Vertex AI plugin by explicitly passing the Google Cloud project ID.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvertexai.Init(vertexai.WithProjectID(\"your-project-id\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Llama 3.1\nDESCRIPTION: Setup for using Meta's Llama 3.1 405b model through Vertex AI Model Garden\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { llama31, vertexAIModelGarden } from '@genkit-ai/vertexai/modelgarden';\n\nconst ai = genkit({\n  plugins: [\n    vertexAIModelGarden({\n      location: 'us-central1',\n      models: [llama31],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Defining Actions at Runtime in TypeScript\nDESCRIPTION: This example shows the incorrect pattern that causes runtime errors. Here, the prompt is defined inside the flow execution context, which is not allowed in genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst flow = defineFlow({...}, async (input) => {\n  const prompt = defineDotprompt({...})\n  prompt.generate(...);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Streaming Generation in Python\nDESCRIPTION: Demonstrates how to initiate a streaming text generation request using Genkit's generate_stream method.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstream, response = ai.generate_stream(\n  prompt='Suggest a complete menu for a pirate themed restaurant.',\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit and Google GenAI Plugin\nDESCRIPTION: Commands to install the Genkit framework and its Google GenAI plugin using pip package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/packages/genkit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install genkit\npip install genkit-plugin-google-genai\n```\n\n----------------------------------------\n\nTITLE: Creating Heuristic Evaluator Action in TypeScript\nDESCRIPTION: Implements a regex-based evaluator action for detecting US phone numbers in the output.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Genkit } from 'genkit';\nimport { BaseEvalDataPoint, EvaluatorAction } from 'genkit/evaluator';\n\nexport function createUSPhoneRegexEvaluator(ai: Genkit): EvaluatorAction {\n  return ai.defineEvaluator(\n    {\n      name: `myCustomEvals/usPhoneRegexEvaluator`,\n      displayName: \"Regex Match for US PHONE NUMBER\",\n      definition: \"Uses Regex to check if output matches a US phone number\",\n      isBilled: false,\n    },\n    async (datapoint: BaseEvalDataPoint) => {\n      const score = await usPhoneRegexScore(datapoint);\n      return {\n        testCaseId: datapoint.testCaseId,\n        evaluation: score,\n      };\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore Vector Store\nDESCRIPTION: Configuration code for setting up the Firestore Vector Store with Genkit, including client initialization and plugin configuration\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/firestore.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.ai import Genkit\nfrom genkit.plugins.firebase.firestore import FirestoreVectorStore\nfrom google.cloud import firestore\n\nfirestore_client = firestore.Client()\n\nai = Genkit(\n    plugins=[\n        FirestoreVectorStore(\n            name='my_firestore_retriever',\n            collection='my_collection',\n            vector_field='embedding',\n            content_field='text',\n            embedder='vertexai/text-embedding-004',\n            firestore_client=firestore_client,\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents from Firestore\nDESCRIPTION: Async function demonstrating how to retrieve documents using the configured Firestore Vector Store\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/firestore.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def retreive_documents():\n    return await ai.retrieve(\n        query=\"What are the main topics?\",\n        retriever='my_firestore_retriever',\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating Content with Ollama Model in Go\nDESCRIPTION: Code snippet demonstrating how to use the defined Ollama model to generate content in Go.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/ollama.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nresp, err := gemma.Generate(ctx, genkit.Request{\n\tPrompt: \"Tell me a joke about Go programming.\",\n})\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(resp.Text)\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in a Dotprompt Template\nDESCRIPTION: Example of using context variables in a Dotprompt template with the @ prefix. The template demonstrates conditional rendering based on input parameters while accessing the user's name from context.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/context.md#2025-04-22_snippet_3\n\nLANGUAGE: dotprompt\nCODE:\n```\n---\ninput:\n  schema:\n    pirateStyle?: boolean\n---\n\n{{#if pirateStyle}}\nAvast, {{@auth.name}}, how be ye today?\n{{else}}\nHello, {{@auth.name}}, how are you today?\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Genkit Flow in TypeScript\nDESCRIPTION: This code defines a simple Genkit flow named 'simpleFlow' that generates text using an AI model. It takes an input, generates text using the Gemini 1.5 Flash model, and streams the output through a callback function.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/next/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// /genkit/simpleFlow.ts\nconst simpleFlow = ai.defineFlow(\n  'simpleFlow',\n  async (input, streamingCallback) => {\n    const { text } = await ai.generate({\n      model: gemini15Flash,\n      prompt: input,\n      streamingCallback: (chunk) => streamingCallback(chunk.text),\n    });\n    return text;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Correct static tool definition for flow\nDESCRIPTION: JavaScript code showing the correct pattern of defining tools statically outside of a flow in Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst tool = ai.defineTool({...});\n\nconst flow = ai.defineFlow({...}, async (input) => {\n  await tool(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Llama 3.1 Model\nDESCRIPTION: Example of generating text using Llama 3.1 model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst llmResponse = await ai.generate({\n  model: llama31,\n  prompt: 'Write a function that adds two numbers together',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Google AI Plugin in Go\nDESCRIPTION: Shows how to import the googleai package for use in Go applications.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/firebase/genkit/go/plugins/googleai\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit with Custom Evaluator Plugin\nDESCRIPTION: Demonstrates how to add the custom evaluator plugin to Genkit configuration, using Gemini model for evaluation with safety settings disabled.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gemini15Pro } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [\n    vertexAI(),\n    ...\n    myCustomEvals({\n      judge: gemini15Pro,\n    }),\n  ],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Policy in Express\nDESCRIPTION: TypeScript code demonstrating how to implement an authorization policy using middleware and the expressHandler function for a Genkit flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// middleware for handling auth tokens in headers.\nconst authMiddleware = async (req, resp, next) => {\n  // parse auth headers and convert to auth object.\n  (req as RequestWithAuth).auth = {\n    user: await verifyAuthToken(req.header('authorization')),\n  };\n  next();\n};\n\napp.post(\n  '/simpleFlow',\n  authMiddleware,\n  expressHandler(simpleFlow, {\n    authPolicy: ({ auth }) => {\n      if (!auth.user) {\n        throw new Error('not authorized');\n      }\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Running a Genkit command with telemetry and developer UI\nDESCRIPTION: Example of using the Genkit CLI to run a command wrapped with telemetry and an interactive developer UI. This allows for easier debugging and analysis of Genkit applications.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/index.typedoc.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- <command to run your code>\n```\n\n----------------------------------------\n\nTITLE: Running Authenticated Flows Locally with Genkit\nDESCRIPTION: Shows how to run authenticated flows locally by providing local authentication context using the WithLocalAuth option. This allows testing authenticated flows without needing a valid Firebase token.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/auth.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n// Create a local auth context\nauthCtx := &flows.AuthContext{\n\tUserID: \"user123\",\n\tEmail:  \"user@example.com\",\n\tClaims: map[string]interface{}{\n\t\t\"role\": \"admin\",\n\t},\n}\n\n// Run the flow with local authentication\nresult, err := authenticatedFlow.Run(ctx, AuthInput{UserID: \"user123\"},\n\tflows.WithLocalAuth(authCtx),\n)\n```\n\n----------------------------------------\n\nTITLE: Responding to Interrupts and Resuming Generation in Genkit\nDESCRIPTION: This code demonstrates how to respond to an interrupt and resume generation in Genkit. It uses the tool_responses option and the tool_response helper function to construct the response, passing in the existing history.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/interrupts.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = await ai.generate(\n    messages=interrupted_response.messages,\n    tool_responses=[tool_response(interrupted_response.interrupts[0], 'b')],\n    tools=['ask_question'],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource bin/activate  # for bash\n```\n\n----------------------------------------\n\nTITLE: Loading Prompt Variants\nDESCRIPTION: Example of loading specific prompt variants with fallback to baseline\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nprompt, err := dotprompt.OpenVariant(\"my_prompt.prompt\", \"geminipro\")\n```\n\n----------------------------------------\n\nTITLE: Constructing chat prompt\nDESCRIPTION: Sets up the prompt for the chat model, incorporating the PDF content and an optional user-provided prompt prefix.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n    // Step 3: construct prompt\n    const prefix = process.argv[3] || \"Sample prompt: Answer the user's questions about the contents of this PDF file.\";\n    const prompt = `\n      ${prefix}\n      Context:\n      ${text}\n    `;\n```\n\n----------------------------------------\n\nTITLE: Defining Pinecone Retriever\nDESCRIPTION: Demonstrates how to create a retriever definition for searching documents\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\nret := pinecone.NewRetriever(\n    \"my-index\",\n    embeddings.OpenAI(\"text-embedding-ada-002\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents from Pinecone\nDESCRIPTION: Shows how to retrieve documents from Pinecone using a text query\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\nresults, err := ret.Retrieve(ctx, \"query text\")\n```\n\n----------------------------------------\n\nTITLE: Using Multimodal Prompts\nDESCRIPTION: Example of generating content with both text and image inputs using multimodal capabilities\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nresponse, err := prompt.Generate(ctx, genkit.Input{\n    \"photoUrl\": \"https://example.com/photo.jpg\",\n})\n```\n\n----------------------------------------\n\nTITLE: Proposed Genkit API Design with Sync and Async Methods\nDESCRIPTION: This code snippet demonstrates the proposed API design for Genkit, showing both synchronous and asynchronous flow definitions using decorators. It includes a main function and script execution.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nai = Genkit()\n\n@ai.flow()\nasync def async_flow(...):\n    response = await ai.generate(f\"Answer this: {query}\")\n    return {\"answer\": response.text}\n\n@ai.flow()\ndef sync_flow(...):\n    response = ai.generate(f\"Answer this: {query}\")\n    return {\"answer\": response.text}\n\nasync def main() -> None:\n    \"\"\"Main entry-point.\"\"\"\n    ...\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: New flow and tool definition pattern\nDESCRIPTION: JavaScript code showing how to define flows and tools on a Genkit instance and start the flow server in version 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n// Define tools and flows\nconst sampleFlow = ai.defineFlow(...);\nconst sampleTool = ai.defineTool(...);\n\n// onFlow now takes the Genkit instance as first argument\n// This registers the flow as a callable firebase function\nonFlow(ai, ...);  \n\nconst flows = [ sampleFlow, ... ];\n// Start the flow server to make the registered flows callable over HTTP\nai.startFlowServer({flows});\n```\n\n----------------------------------------\n\nTITLE: Creating an Embedding Model Reference\nDESCRIPTION: Shows how to get a reference to a supported embedding model.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nembedder := genai.GetEmbedder(\"text-embedding-004\")\n```\n\n----------------------------------------\n\nTITLE: Importing Genkit Plugins in Go\nDESCRIPTION: Demonstrates how to import Genkit plugins in a Go application.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nimport {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Ollama Configuration with Dynamic Authentication Headers\nDESCRIPTION: Example implementation using Google Auth library to dynamically set authentication headers for Ollama requests, with environment-based configuration.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { GoogleAuth } from 'google-auth-library';\nimport { ollama } from 'genkitx-ollama';\nimport { genkit } from 'genkit';\n\nconst ollamaCommon = { models: [{ name: 'gemma:2b' }] };\n\nconst ollamaDev = {\n  ...ollamaCommon,\n  serverAddress: 'http://127.0.0.1:11434',\n};\n\nconst ollamaProd = {\n  ...ollamaCommon,\n  serverAddress: 'https://my-deployment',\n  requestHeaders: async (params) => {\n    const headers = await fetchWithAuthHeader(params.serverAddress);\n    return { Authorization: headers['Authorization'] };\n  },\n};\n\nconst ai = genkit({\n  plugins: [\n    ollama(isDevEnv() ? ollamaDev : ollamaProd),\n  ],\n});\n\n// Function to lazily load GoogleAuth client\nlet auth: GoogleAuth;\nfunction getAuthClient() {\n  if (!auth) {\n    auth = new GoogleAuth();\n  }\n  return auth;\n}\n\n// Function to fetch headers, reusing tokens when possible\nasync function fetchWithAuthHeader(url: string) {\n  const client = await getIdTokenClient(url);\n  const headers = await client.getRequestHeaders(url); // Auto-manages token refresh\n  return headers;\n}\n\nasync function getIdTokenClient(url: string) {\n  const auth = getAuthClient();\n  const client = await auth.getIdTokenClient(url);\n  return client;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Evaluator Plugin in TypeScript\nDESCRIPTION: Creates a Genkit plugin that registers custom evaluators for deliciousness and US phone number validation. Uses the genkitPlugin helper method to instantiate evaluators within the plugin context.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenkitPlugin, genkitPlugin } from 'genkit/plugin';\n\nexport function myCustomEvals<\n  ModelCustomOptions extends z.ZodTypeAny\n>(options: {\n  judge: ModelArgument<ModelCustomOptions>;\n  judgeConfig?: ModelCustomOptions;\n}): GenkitPlugin {\n  // Define the new plugin\n  return genkitPlugin(\"myCustomEvals\", async (ai: Genkit) => {\n    const { judge, judgeConfig } = options;\n\n    // The plugin instatiates our custom evaluators within the context\n    // of the `ai` object, making them available\n    // throughout our Genkit application.\n    createDeliciousnessEvaluator(ai, judge, judgeConfig);\n    createUSPhoneRegexEvaluator(ai);\n  });\n}\nexport default myCustomEvals;\n```\n\n----------------------------------------\n\nTITLE: Video Content Caching Setup\nDESCRIPTION: Importing the file manager for video content caching\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleAIFileManager } from '@google/generative-ai/server';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Endpoints\nDESCRIPTION: TypeScript implementation of the reflection server endpoints including health checks, action management, and streaming capabilities.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Endpoint                     | HTTP Method | Purpose                     | Request Body                                       | Response                             | Content Type           |\n|------------------------------|-------------|-----------------------------|----------------------------------------------------|--------------------------------------|------------------------||\n| `/api/__health`              | GET         | Health check                | -                                                  | \"OK\" (200)                           | `text/plain`           |\n| `/api/__quitquitquit`        | GET         | Terminate server            | -                                                  | \"OK\" (200) and server stops          | `text/plain`           |\n| `/api/actions`               | GET         | List registered actions     | -                                                  | Action metadata with schemas         | `application/json`     |\n| `/api/runAction`             | POST        | Run an action               | `{ key, input, context, telemetryLabels }`         | `{ result, telemetry: { traceId } }` | `application/json`     |\n| `/api/runAction?stream=true` | POST        | Run action with streaming   | `{ key, input, context, telemetryLabels }`         | Stream of chunks and final result    | `text/plain` (chunked) |\n| `/api/envs`                  | GET         | Get configured environments | -                                                  | List of environment names            | `application/json`     |\n| `/api/notify`                | POST        | Notify of telemetry server  | `{ telemetryServerUrl, reflectionApiSpecVersion }` | \"OK\" (200)                           | `text/plain`           |\n```\n\n----------------------------------------\n\nTITLE: Running the Application\nDESCRIPTION: Command to execute the Genkit Python application\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Document Index\nDESCRIPTION: Commands to initialize the document index with PDF files. Can index default GenkitGrubPub.pdf or additional custom PDFs.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-rag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit flow:run setup\n```\n\nLANGUAGE: bash\nCODE:\n```\ngenkit flow:run setup '[\"./path/to/your/file.pdf\"]'\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses with Function Calling\nDESCRIPTION: Shows how to use streaming responses with Mistral models and integrate function calling capabilities.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await ai.generateStream({\n  model: mistralLarge,\n  prompt: 'What should I cook tonight?',\n  tools: ['recipe-finder'],\n  config: {\n    version: 'mistral-large-2411',\n    temperature: 1,\n  },\n});\n\nfor await (const chunk of response.stream) {\n  console.log(chunk.text);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema with Type Coercion\nDESCRIPTION: Example of creating a Zod schema with type coercion for handling non-conforming types\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/models/index.ts\" region_tag=\"ex07\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Loading and parsing PDF file\nDESCRIPTION: Reads the PDF filename from command line arguments, loads the PDF file, and extracts its text content using the pdf-parse library.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    // Step 1: get command line arguments\n    const filename = process.argv[2];\n    if (!filename) {\n      console.error(\"Please provide a filename as a command line argument.\");\n      process.exit(1);\n    }\n\n    // Step 2: load PDF file\n    let dataBuffer = fs.readFileSync(filename);\n    const { text } = await pdf(dataBuffer);\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Checks Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Checks middleware, configure it with authentication options and metrics, and use it in a Genkit flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/checks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the checks middleware and metric types.\nimport {\n  checksMiddleware,\n  ChecksEvaluationMetricType,\n} from '@genkit-ai/checks';\n\n// Import any models you would like to use.\nimport { gemini15Flash, googleAI } from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(),\n    // ... any other plugins you need.\n  ],\n});\n\n// Simple example flow\nexport const poemFlow = ai.defineFlow(\n  {\n    name: 'menuSuggestionFlow',\n  },\n  async (topic) => {\n    const { text } = await ai.generate({\n      model: gemini15Flash,\n      prompt: `Write a poem on this topic: ${topic}`,\n      // Add checks middleware to your generate calls.\n      use: [\n        checksMiddleware({\n          authOptions: {\n            // Project to charge quota to.\n            // Note: If your credentials have a quota project associated with them,\n            //       that value will take precedence over this.\n            projectId: 'your-project-id',\n          },\n          // Add the metrics/policies you want to validate against.\n          metrics: [\n            // This will use the default threshold determined by Checks.\n            ChecksEvaluationMetricType.DANGEROUS_CONTENT,\n            // This is how you can override the default threshold.\n            {\n              type: ChecksEvaluationMetricType.VIOLENCE_AND_GORE,\n              // If the content scores above 0.55, it fails and the response will be blocked.\n              threshold: 0.55,\n            },\n          ],\n        }),\n      ],\n    });\n    return text;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit with Pinecone Plugin\nDESCRIPTION: Example of initializing Genkit with the Pinecone plugin, specifying an index ID and embedding model.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/pinecone.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { pinecone } from 'genkitx-pinecone';\n\nconst ai = genkit({\n  plugins: [\n    pinecone([\n      {\n        indexId: 'bob-facts',\n        embedder: textEmbedding004,\n      },\n    ]),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: New Genkit configuration pattern\nDESCRIPTION: JavaScript code showing how to configure Genkit with instances, logging, and telemetry in version 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { enableFirebaseTelemetry } from '@genkit-ai/firebase';\n\nlogger.setLogLevel('debug');\nenableFirebaseTelemetry({...});\n\nconst ai = genkit({ ... });\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI Integration\nDESCRIPTION: Example showing how to initialize Genkit with the VertexAI plugin for accessing Gemini API in Vertex AI models.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/google-genai.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.plugins.google_genai import VertexAI\n\nai = Genkit(\n  plugins=[VertexAI()],\n  model='vertexai/gemini-2.0-flash', # optional\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ActionKind Enum in TypeScript for Firebase GenKit\nDESCRIPTION: Enumeration of action types available in the Firebase GenKit framework. It categorizes actions into different kinds such as initialization, file operations, UI interactions, and more to provide a structured way to classify various operations within the system.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/python/getting_started.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ActionKind {\n  /**\n   * Initialize or setup a new project\n   */\n  INIT = \"init\",\n  /**\n   * Create a file\n   */\n  CREATE_FILE = \"createFile\",\n  /**\n   * Create a folder (directory)\n   */\n  CREATE_FOLDER = \"createFolder\",\n  /**\n   * Add a dependency to a project\n   */\n  ADD_DEPENDENCY = \"addDependency\",\n  /**\n   * Execute a command\n   */\n  EXEC = \"exec\",\n  /**\n   * Add a script to package.json\n   */\n  ADD_SCRIPT = \"addScript\",\n  /**\n   * Modify a file\n   */\n  MODIFY_FILE = \"modifyFile\",\n  /**\n   * Ask the user a question\n   */\n  PROMPT = \"prompt\",\n  /**\n   * Show a message to the user\n   */\n  MESSAGE = \"message\",\n  /**\n   * Multiple actions to be performed\n   */\n  GROUP = \"group\",\n  /**\n   * Conditional action (if/else)\n   */\n  CONDITIONAL = \"conditional\",\n  /**\n   * Download a dependency\n   */\n  DOWNLOAD = \"download\",\n  /**\n   * Add environment variables\n   */\n  SET_ENV = \"setEnv\",\n  /**\n   * Generate a file from a template\n   */\n  TEMPLATE = \"template\",\n  /**\n   * Move a file\n   */\n  MOVE_FILE = \"moveFile\",\n  /**\n   * Delete a file\n   */\n  DELETE_FILE = \"deleteFile\",\n  /**\n   * Add a service\n   */\n  ADD_SERVICE = \"addService\",\n  /**\n   * Noop action for testing\n   */\n  NOOP = \"noop\",\n  /**\n   * Generate content\n   */\n  GENERATE = \"generate\",\n  /**\n   * Check health of local dev environment\n   */\n  HEALTH_CHECK = \"healthCheck\",\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Plugin Class in Python\nDESCRIPTION: API reference for the Plugin class in the genkit.ai module. This class likely defines the interface or base class for creating plugins that extend the functionality of the Genkit system.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n::: genkit.ai.Plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PDF Processing with RAG\nDESCRIPTION: Command for installing necessary npm packages for processing PDFs in a RAG workflow, including llm-chunk for text chunking, pdf-parse for PDF extraction, and the Genkit local vector store implementation.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm install llm-chunk pdf-parse @genkit-ai/dev-local-vectorstore\n\nnpm i -D --save @types/pdf-parse\n```\n\n----------------------------------------\n\nTITLE: Running Genkit CLI commands\nDESCRIPTION: Terminal commands showing how to run the DevUI with your JavaScript code and how to run a defined flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_13\n\nLANGUAGE: posix-terminal\nCODE:\n```\n# run the DevUI and your js code\ngenkit start -- <command to run node>\n\n# run a defined flow\ngenkit flow:run <flowName>\n```\n\n----------------------------------------\n\nTITLE: Importing Pinecone Retriever and Indexer References\nDESCRIPTION: How to import the retriever and indexer references from the Pinecone plugin package for use with Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/pinecone.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pineconeRetrieverRef } from 'genkitx-pinecone';\nimport { pineconeIndexerRef } from 'genkitx-pinecone';\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Credentials for Genkit Flow\nDESCRIPTION: Instructions for storing and accessing API keys securely using Cloud Secret Manager and Firebase Functions.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineSecret} from \"firebase-functions/params\";\nconst googleAIapiKey = defineSecret(\"GOOGLE_GENAI_API_KEY\");\n\nexport const generatePoem = onCallGenkit({\n  secrets: [googleAIapiKey]\n}, generatePoemFlow);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Customer Service Chat Agent in TypeScript\nDESCRIPTION: This code implements a basic customer service chat agent using a single prompt with multiple tools. It configures a chat model with the specified tools and handles the conversation flow between the user and the agent.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/multi-agent.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/multi-agent/simple.ts\" region_tag=\"chat\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Dev UI\nDESCRIPTION: Command to run the application with Genkit Dev UI for inspection\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- python3 main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Cloud Authentication\nDESCRIPTION: Command to set up Google Cloud Application Default Credentials locally\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud auth application-default login --project YOUR_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude 3 Models\nDESCRIPTION: Setup for using Anthropic Claude 3 models through Vertex AI Model Garden\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport {\n  claude3Haiku,\n  claude3Sonnet,\n  claude3Opus,\n  vertexAIModelGarden,\n} from '@genkit-ai/vertexai/modelgarden';\n\nconst ai = genkit({\n  plugins: [\n    vertexAIModelGarden({\n      location: 'us-central1',\n      models: [claude3Haiku, claude3Sonnet, claude3Opus],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Firebase Auth Provider for Genkit\nDESCRIPTION: Shows how to create a Firebase auth provider with a policy function. The policy function defines authorization logic, checking if the authenticated user ID matches the input user ID.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/auth.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// Create a policy function that checks if the authenticated user ID matches the input user ID\npolicy := func(ctx context.Context, authCtx *flows.AuthContext, input interface{}) error {\n\tif authCtx == nil {\n\t\treturn errors.New(\"unauthorized\")\n\t}\n\n\t// Type assertion to get the input type\n\tauthInput, ok := input.(AuthInput)\n\tif !ok {\n\t\treturn errors.New(\"invalid input type\")\n\t}\n\n\t// Check if the user ID in the auth context matches the user ID in the input\n\tif authCtx.UserID != authInput.UserID {\n\t\treturn errors.New(\"user ID mismatch\")\n\t}\n\n\treturn nil\n}\n\n// Create a Firebase auth provider with the policy function\nauth := firebase.NewAuth(ctx, policy, true)\n```\n\n----------------------------------------\n\nTITLE: Generating Structured Output with Zod Schema in TypeScript\nDESCRIPTION: Illustrates how to use Zod schema to generate strongly-typed data from AI models, ensuring type safety and structured output in Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/langchain/genkit-getting-started.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generate } from \"@genkit-ai/ai\";\nimport { geminiPro } from \"@genkit-ai/vertexai\";\nimport { z } from \"zod\";\n\nconst CreatureSchema = z.object({\n  name: z.string().describe('the name of the creature'),\n  hitPoints: z.number().describe('hit points, between 5 and 100'),\n  attacks: z.array(z.object({\n    name: z.string(),\n    damage: z.number().describe('amount of damage, between 2 and 25'),\n  })).describe('3 attacks the creature can use')\n});\n\nconst createCreature = defineFlow({\n    name: \"createCreature\",\n    inputSchema: z.string(),\n    outputSchema: CreatureSchema,\n  },\n  (habitat) => {\n    const result = await generate({\n      model: geminiPro,\n      prompt: `You are a brilliant RPG designer. Generate a creature that lives in ${habitat}.`,\n      output: {schema: CreatureSchema}\n    });\n    // strongly typed and ready to go\n    return result.output();\n  }\n)\n\nconsole.log(await createCreature(\"a developer conference\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Prompt File in Handlebars\nDESCRIPTION: Example of a minimal .prompt file containing YAML front matter and a Handlebars template. This demonstrates the basic structure of a Dotprompt file.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n---\nmodel: gemini-pro\n---\n\nHello, {{name}}!\n```\n\n----------------------------------------\n\nTITLE: Genkit System Prompt Usage\nDESCRIPTION: Demonstrates how to use system prompts to provide additional context or instructions to the model.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = await ai.generate(\n    system='You are a food industry marketing consultant.',\n    prompt='Invent a menu item for a pirate themed restaurant.',\n)\n```\n\n----------------------------------------\n\nTITLE: Installing new consolidated Genkit package\nDESCRIPTION: Command showing how to install the single consolidated Genkit package in version 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_20\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i genkit\n```\n\n----------------------------------------\n\nTITLE: Creating a Generative Model Reference\nDESCRIPTION: Demonstrates how to get a reference to a supported Gemini model using its identifier.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodel := genai.GetModel(\"gemini-1.0-pro\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Server with Port Specification\nDESCRIPTION: Go code snippet showing how to initialize a flow server with a specific port. Essential for cloud deployments where providers may require listening on specific ports.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n// Initialize the flow server, listening on an environment-specified port\nport := os.Getenv(\"PORT\")\nif port == \"\" {\n\tport = \"8080\"\n}\nflowServer := flow.NewServer().WithAddr(\":\" + port)\n```\n\n----------------------------------------\n\nTITLE: Minimal Genkit Configuration in TypeScript\nDESCRIPTION: A minimal TypeScript setup for Genkit, importing the library and configuring it with the VertexAIPlugin. This is the basic configuration needed to use Genkit with AI models.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenKit } from '@genkit/genkit';\nimport { VertexAIPlugin } from '@genkit/vertex-ai';\n\nconst genkit = new GenKit({\n  plugins: [new VertexAIPlugin()],\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Genkit Flow with Google AI on Cloud Run\nDESCRIPTION: Command to deploy the Genkit flow on Cloud Run, specifying the port and setting up the API key secret for Google AI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_8\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud run deploy --port 3400 \\\n  --update-secrets=GOOGLE_GENAI_API_KEY=<your-secret-name>:latest\n```\n\n----------------------------------------\n\nTITLE: Installing RAG Dependencies\nDESCRIPTION: Commands to install required Go packages for text splitting and PDF parsing functionality\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngo get github.com/tmc/langchaingo/textsplitter\n\ngo get github.com/ledongthuc/pdf\n```\n\n----------------------------------------\n\nTITLE: Enabling Firebase Telemetry in Genkit TypeScript Project\nDESCRIPTION: This code snippet demonstrates how to import and enable Firebase telemetry in a Genkit project. It shows the necessary imports and the function call to enable telemetry.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/firebase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { enableFirebaseTelemetry } from '@genkit-ai/firebase';\n\nenableFirebaseTelemetry();\n\nconst ai = genkit({\n  plugins: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Firebase GenKit Sample Application\nDESCRIPTION: This script sets the Google GenAI API key as an environment variable, installs all dependencies with npm, and starts the development server for a Firebase GenKit application.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-coffee-shop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<yourkey>\nnpm i\nnpm run genkit:dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama with Static Authentication Headers\nDESCRIPTION: Setting up the Ollama plugin with static request headers for authentication with remote deployments.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nollama({\n  models: [{ name: 'gemma'}],\n  requestHeaders: {\n    'api-key': 'API Key goes here'\n  },\n  serverAddress: 'https://my-deployment',\n}),\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Policy for Genkit Flow\nDESCRIPTION: Demonstrates how to set a custom CORS policy for a Genkit flow deployed as a callable function.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const generatePoem = onCallGenkit({\n  cors: 'mydomain.com',\n}, generatePoemFlow);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Caching with Genkit and Vertex AI\nDESCRIPTION: Demonstrates how to use context caching in Genkit with Vertex AI models to optimize token usage and improve performance for large content processing.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n\nconst llmResponse = await ai.generate({\n  messages: [\n    {\n      role: 'user',\n      content: [{ text: 'Here is the relevant text from War and Peace.' }],\n    },\n    {\n      role: 'model',\n      content: [\n        {\n          text: 'Based on War and Peace, here is some analysis of Pierre Bezukhov's character.',\n        },\n      ],\n      metadata: {\n        cache: {\n          ttlSeconds: 300, // Cache this message for 5 minutes\n        },\n      },\n    },\n  ],\n  model: gemini15Flash,\n  prompt: 'Describe Pierre's transformation throughout the novel.',\n});\n```\n\n----------------------------------------\n\nTITLE: Structured Output Generation in Python\nDESCRIPTION: Demonstrates how to generate structured JSON output in Python using Genkit with Pydantic models for schema validation. The example creates a character profile for a fantasy game with defined roles and structure.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport structlog\n\nfrom genkit.ai import genkit\nfrom genkit.plugins.google_ai import googleAI\nfrom genkit.plugins.google_ai.models import gemini15Flash\n\nlogger = structlog.get_logger()\n\nfrom pydantic import BaseModel, Field, validator\nfrom enum import Enum\n\nclass Role(str, Enum):\n    KNIGHT = \"knight\"\n    MAGE = \"mage\"\n    ARCHER = \"archer\"\n\nclass CharacterProfile(BaseModel):\n    name: str\n    role: Role\n    backstory: str\n\nasync def main() -> None:\n    ai = genkit({\n      plugins: [googleAI()],\n      model: gemini15Flash,\n    })\n\n    await logger.adebug(\"Generating structured output\", prompt=\"Create a brief profile for a character in a fantasy video game.\")\n    response = await ai.generate(\n        prompt=\"Create a brief profile for a character in a fantasy video game.\",\n        output={\n            \"format\": \"json\",\n            \"schema\": CharacterProfile,\n        },\n    )\n    await logger.ainfo(\"Generated output\", output=response.output)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Defining GenKit Types in Python\nDESCRIPTION: This snippet defines various types used in the Firebase GenKit project. It includes types for generate requests and responses, messages, parts, media, and tool requests and responses.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/api/types.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: genkit.types.GenerateResponseWrapper\n\n::: genkit.types.GenerateRequest\n\n::: genkit.types.GenerateResponse\n\n::: genkit.types.MessageWrapper\n\n::: genkit.types.MessageWrapper\n\n::: genkit.types.Message\n\n::: genkit.types.Part\n\n::: genkit.types.TextPart\n\n::: genkit.types.MediaPart\n\n::: genkit.types.Media\n\n::: genkit.types.ToolRequestPart\n\n::: genkit.types.ToolRequest\n\n::: genkit.types.ToolResponsePart\n\n::: genkit.types.ToolResponse\n```\n\n----------------------------------------\n\nTITLE: Defining LLM Evaluation Prompt in TypeScript using Genkit\nDESCRIPTION: Sets up an evaluation prompt using Genkit's definePrompt utility to assess food deliciousness. Uses Zod for schema validation and defines response types.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"genkit\";\n\nconst DELICIOUSNESS_VALUES = ['yes', 'no', 'maybe'] as const;\n\nconst DeliciousnessDetectionResponseSchema = z.object({\n  reason: z.string(),\n  verdict: z.enum(DELICIOUSNESS_VALUES),\n});\n\nfunction getDeliciousnessPrompt(ai: Genkit) {\n  return  ai.definePrompt({\n      name: 'deliciousnessPrompt',\n      input: {\n        schema: z.object({\n          responseToTest: z.string(),\n        }),\n      },\n      output: {\n        schema: DeliciousnessDetectionResponseSchema,\n      }\n      prompt: `You are a food critic. Assess whether the provided output sounds delicious, giving only \"yes\" (delicious), \"no\" (not delicious), or \"maybe\" (undecided) as the verdict.\n\n      Examples:\n      Output: Chicken parm sandwich\n      Response: { \"reason\": \"A classic and beloved dish.\", \"verdict\": \"yes\" }\n\n      Output: Boston Logan Airport tarmac\n      Response: { \"reason\": \"Not edible.\", \"verdict\": \"no\" }\n\n      Output: A juicy piece of gossip\n      Response: { \"reason\": \"Metaphorically 'tasty' but not food.\", \"verdict\": \"maybe\" }\n\n      New Output: {% verbatim %}{{ responseToTest }} {% endverbatim %}\n      Response:\n      `\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing old Genkit packages\nDESCRIPTION: Command showing how to install the individual Genkit packages used in version 0.5.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_19\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i @genkit-ai/core @genkit-ai/ai @genkit-ai/flow @genkit-ai/dotprompt\n```\n\n----------------------------------------\n\nTITLE: Initializing Google AI Plugin with API Key\nDESCRIPTION: Demonstrates how to initialize the Google AI plugin using an API key specified in environment variables.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := googleai.Init(); err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Flows Server in TypeScript\nDESCRIPTION: TypeScript code to start the Genkit server for handling flow requests.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-reranker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstartFlowsServer();\n```\n\n----------------------------------------\n\nTITLE: Generating with Prompt Template\nDESCRIPTION: Example of generating content using the loaded prompt template with specific input parameters\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresponse, err := prompt.Generate(ctx, genkit.Input{\n    \"location\": \"CafÃ© Paris\",\n    \"name\":     \"Alice\",\n    \"style\":    \"a French chef\",\n})\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Example in YAML\nDESCRIPTION: Example of using JSON Schema format instead of Picoschema for more robust schema definitions\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  schema:\n    type: object\n    properties:\n      field1:\n        type: number\n        minimum: 20\n```\n\n----------------------------------------\n\nTITLE: Genkit Config Log Structure\nDESCRIPTION: JSON payload structure for Config logs containing configuration settings. Includes message field with path and feature name, plus metadata about the execution environment and model settings.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/telemetry-collection.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"[genkit] Config[<path>, <featureName>]\",\n  \"metadata\": {\n    \"featureName\": \"string\",\n    \"model\": \"string\",\n    \"path\": \"step1 > step2 > step3\",\n    \"qualifiedPath\": \"/{flow1,t:flow}/{generate,t:util}/{modelProvider/model,t:action,s:model}\",\n    \"source\": \"ts\",\n    \"sourceVersion\": \"string\",\n    \"temperature\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversation History Management Updates\nDESCRIPTION: Shows the transition from toHistory() method to messages property for handling conversation history\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst history = response.toHistory();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await ai.generate({\n messages: [ { role: 'user', content: ...} ]\n});\nconst history = response.messages;\n```\n\n----------------------------------------\n\nTITLE: Migrating Genkit actions to instance-based approach\nDESCRIPTION: JavaScript code demonstrating how to define and use flows, tools, and Firebase functions with the new instance-based approach in Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { onFlow } from '@genkit-ai/firebase/functions';\n\nconst ai = genkit({ plugins: [...]});\n\n// Flows and tools are defined on the specific genkit instance\n// and are directly callable.\nconst sampleFlow = ai.defineFlow(...);\nconst sampleTool = ai.defineTool(...);\n\nasync function callMyFlow() {\n  // Previously, text output could accessed via .text()\n  // Now it is either .output() or .text\n  return await sampleFlow().output();\n}\n\n// onFlow now takes the Genkit instance as first argument\n// This registers the flow as a callable firebase function\nonFlow(ai, ...);\nconst flows = [ sampleFlow, ... ];\n// Start the flow server to make the registered flows callable over HTTP\nai.startFlowServer({flows});\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Plugin for Genkit using npm\nDESCRIPTION: This command installs the Firebase plugin for Genkit as a project dependency using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/firebase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @genkit-ai/firebase\n```\n\n----------------------------------------\n\nTITLE: Initializing Google AI Plugin with Direct API Key\nDESCRIPTION: Shows initialization with a directly provided API key, though this method is not recommended for production use.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := googleai.Init(googleai.WithAPIKey(\"your-api-key\")); err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Genkit with Dev Local Vector Store - Python\nDESCRIPTION: Example of initializing Genkit with the Dev Local Vector Store plugin and VertexAI. Demonstrates basic plugin configuration with name and embedder settings.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/dev-local-vectorstore.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.ai import Genkit\nfrom genkit.plugins.dev_local_vectorstore import DevLocalVectorStore\nfrom genkit.plugins.google_genai import VertexAI\n\nai = Genkit(\n    plugins=[\n        VertexAI(),\n        DevLocalVectorStore(\n            name='my_vectorstore',\n            embedder='vertexai/text-embedding-004',\n        ),\n    ],\n    model='vertexai/gemini-2.0.',\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Interruption and Restart Flow in TypeScript\nDESCRIPTION: Shows how to handle tool interruptions, process user confirmations, and resume generation loops. The code demonstrates managing multiple interrupts simultaneously and restarting tools with additional metadata. Includes error handling and confirmation flow for financial transactions.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet response = await ai.generate({\n  tools: [transferMoney],\n  prompt: \"Transfer $1000 to account ABC123\",\n});\n\nwhile (response.interrupts.length) {\n  const confirmations = [];\n  // multiple interrupts can be called at once, so we handle them all\n  for (const interrupt in response.interrupts) {\n    confirmations.push(\n      // use the 'restart' method on our tool to provide `resumed` metadata\n      transferMoney.restart(\n        interrupt,\n        // send the tool request input to the user to respond. assume that this\n        // returns `{status: \"APPROVED\"}` or `{status: \"REJECTED\"}`\n        await requestConfirmation(interrupt.toolRequest.input);\n      )\n    );\n  }\n\n  response = await ai.generate({\n    tools: [transferMoney],\n    messages: response.messages,\n    resume: {\n      restart: confirmations,\n    }\n  })\n}\n\n// no more interrupts, we can see the final response\nconsole.log(response.text);\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Plugin for Genkit\nDESCRIPTION: Command to install the Ollama plugin for Genkit using pip. This installs the necessary Python package to integrate Ollama with Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/ollama.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install genkit-plugin-ollama\n```\n\n----------------------------------------\n\nTITLE: Importing Gemini Models\nDESCRIPTION: Importing different Gemini model references from the Google AI plugin\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  gemini15Flash,\n  gemini15Pro,\n  textEmbedding004,\n} from '@genkit-ai/googleai';\n```\n\n----------------------------------------\n\nTITLE: Defining a Prompt Template with Genkit in YAML\nDESCRIPTION: Shows how to create a prompt template in YAML format for Genkit. The template defines input schema with required and optional parameters, sets default values, configures model parameters, and uses Handlebars syntax for conditional text generation in the prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmodel: vertexai/gemini-1.5-flash\nconfig:\n  temperature: 0.9\ninput:\n  schema:\n    properties:\n      location: {type: string}\n      style: {type: string}\n      name: {type: string}\n    required: [location]\n  default:\n    location: a restaurant\n---\n\nYou are the most welcoming AI assistant and are currently working at {% verbatim %}{{location}}{% endverbatim %}.\n\nGreet a guest{% verbatim %}{{#if name}}{% endverbatim %} named {% verbatim %}{{name}}{% endverbatim %}{% verbatim %}{{/if}}{% endverbatim %}{% verbatim %}{{#if style}}{% endverbatim %} in the style of {% verbatim %}{{style}}{% endverbatim %}{% verbatim %}{{/if}}{% endverbatim %}.\n```\n\n----------------------------------------\n\nTITLE: Removing old Zod imports\nDESCRIPTION: JavaScript code showing the standalone Zod import that should be removed.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport * as z from 'zod';\n```\n\n----------------------------------------\n\nTITLE: Processing Streaming Output in Python\nDESCRIPTION: Shows how to iterate over streaming chunks of generated text asynchronously.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync for chunk in stream:\n    print(chunk.text)\n```\n\n----------------------------------------\n\nTITLE: Setting logging level\nDESCRIPTION: JavaScript code showing how to configure the logging level independently in Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { logger } from 'genkit/logging';\n\nlogger.setLogLevel('debug');\n```\n\n----------------------------------------\n\nTITLE: Accessing Complete Response in Python\nDESCRIPTION: Demonstrates how to get the complete generated text from a streaming response.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncomplete_text = (await response).text\n```\n\n----------------------------------------\n\nTITLE: Document Existence Check Function in TypeScript\nDESCRIPTION: A utility function that checks if a Firestore document exists by performing a get operation. It returns a boolean indicating whether the document exists or not.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const exists = async (docRef: DocumentReference): Promise<boolean> => {\n  const snap = await getDoc(docRef);\n  return snap.exists();\n};\n```\n\n----------------------------------------\n\nTITLE: New Genkit imports pattern\nDESCRIPTION: JavaScript code showing the new simplified import pattern with consolidated Genkit package.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { genkit, z } from 'genkit';\n```\n\n----------------------------------------\n\nTITLE: Initializing Genkit Project\nDESCRIPTION: Command to initialize a new Genkit project\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit init\n```\n\n----------------------------------------\n\nTITLE: Go Server Endpoints\nDESCRIPTION: Go implementation of the reflection server endpoints with core functionality for health checks and action execution.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Endpoint         | HTTP Method | Purpose                    | Request Body                                       | Response                             | Content Type       |\n|------------------|-------------|----------------------------|----------------------------------------------------|--------------------------------------|--------------------||\n| `/api/__health`  | GET         | Health check               | -                                                  | 200 OK status                        | -                  |\n| `/api/actions`   | GET         | List registered actions    | -                                                  | Action metadata with schemas         | `application/json` |\n| `/api/runAction` | POST        | Run an action              | `{ key, input, context }`                          | `{ result, telemetry: { traceId } }` | `application/json` |\n| `/api/notify`    | POST        | Notify of telemetry server | `{ telemetryServerUrl, reflectionApiSpecVersion }` | OK response                          | `application/json` |\n```\n\n----------------------------------------\n\nTITLE: Defining Default Query for Lord of the Rings Analysis\nDESCRIPTION: TypeScript code snippet defining the default query for analyzing the Lord of the Rings text, focusing on Gandalf's relationship with Frodo.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultQuery =\n  \"Describe Gandalf's relationship with Frodo, referencing Gandalf quotes from the text.\";\n```\n\n----------------------------------------\n\nTITLE: Evaluation Data Format Schema\nDESCRIPTION: JSON schema for evaluation data exported by Genkit, including test case ID, input, output, context, and trace IDs.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nArray<{\n  \"testCaseId\": string,\n  \"input\": any,\n  \"output\": any,\n  \"context\": any[],\n  \"traceIds\": string[],\n}>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Generative Model Reference in Go\nDESCRIPTION: Demonstrates how to create a reference to a supported generative model using its identifier.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodel := vertexai.Model(\"gemini-1.0-pro\")\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Vector Index with gcloud CLI\nDESCRIPTION: Command to create a single-field vector index in Firestore using the gcloud CLI tool.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud alpha firestore indexes composite create --project=your-project-id \\\n  --collection-group=yourCollectionName --query-scope=COLLECTION \\\n  --field-config=vector-config='{\"dimension\":\"768\",\"flat\": \"{}\"}',field-path=yourEmbeddingField\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Plugin\nDESCRIPTION: Code snippet showing how to initialize the Google Cloud plugin with project configuration and optional parameters.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-cloud.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/gcp.go\" region_tag=\"init\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Deploying Genkit Flows to Firebase\nDESCRIPTION: Command to deploy the configured Genkit flows as Cloud Functions to Firebase.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd $PROJECT_ROOT\n\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Installing consolidated Genkit package\nDESCRIPTION: Command to install the new consolidated Genkit package that replaces the individual packages.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i --save genkit\n```\n\n----------------------------------------\n\nTITLE: Reading File and Encoding as Data URL in TypeScript\nDESCRIPTION: Shows how to read a file asynchronously and encode it as a data URL for use in multimodal input.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { promises as fs } from \"fs\";\nimport { fileURLToPath } from \"url\";\nimport { dirname, resolve } from \"path\";\n\nasync function readFileAsync(relativePath: string): Promise<string> {\n  const __filename = fileURLToPath(import.meta.url);\n  const __dirname = dirname(__filename);\n  const filePath = resolve(__dirname, relativePath);\n  const buffer = await fs.readFile(filePath);\n  const base64 = buffer.toString(\"base64\");\n  return `data:image/jpeg;base64,${base64}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Running GenKit Prompts via Developer UI\nDESCRIPTION: Instructions for running prompt samples using the GenKit Developer UI or command line interface. These samples demonstrate prompting techniques documented in prompts.md and use Google Gemini.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-prompts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Prompts Samples\n\nThese sample shows off several of the prompting techniques show in [docs/prompts.md](/docs/prompts.md)\n\nThese examples use Google Gemini, set your API key in the `GOOGLE_GENAI_API_KEY` environment variable.\n\nYou can run these prompts in the Developer UI with `genkit start`\n\nor invoke them with e.g. `genkit flow:run simplePrompt`\n```\n\n----------------------------------------\n\nTITLE: Switching Between AI Models in JavaScript/TypeScript\nDESCRIPTION: Demonstrates how to use different AI models interchangeably in Genkit, showcasing the framework's flexibility in model selection.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/langchain/genkit-getting-started.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { geminiPro } from '@genkit-ai/vertexai';\nimport { ollama } from 'genkitx-ollama';\nimport { generate } from '@genkit-ai/ai';\n\nfunction flipACoin(a, b) {\n  return Math.random() > 0.5 ? a : b;\n}\n\nconst result = await generate({\n  model: flipACoin(geminiPro, 'ollama/gemma'),\n  config: { temperature: 0.3, maxOutputTokens: 200 },\n  prompt: 'What makes you the best LLM out there?',\n});\n\nconsole.log(result.text());\n```\n\n----------------------------------------\n\nTITLE: Old Genkit configuration pattern\nDESCRIPTION: JavaScript code showing how Genkit was configured globally in version 0.5.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport { configureGenkit } from '@genkit-ai/core';\n\nconfigureGenkit({\n  telemetry: {\n    instrumentation: ...,\n    logger: ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: School Agent Terminal Interface Example\nDESCRIPTION: This snippet shows an example of the terminal interface for the School Agent, including the telemetry API and developer UI URLs, and a sample conversation start.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-schoolAgent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nTelemetry API running on http://localhost:4033\nGenkit Developer UI: http://localhost:4000\n\n> school-agent@1.0.0 dev\n> tsx --no-warnings --watch src/terminal.ts\n\nbell> Hi there, my name is Bell and I'm here to help! ðð I'm your friendly AI assistant for parents of Sparkyville High School. I can answer your questions about the school, events, grades, and more. Just ask me! ð\n\nprompt> [insert your chats here]\n```\n\n----------------------------------------\n\nTITLE: Initializing Ollama Plugin in Go\nDESCRIPTION: Code snippet for initializing the Ollama plugin by specifying the Ollama server address.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/ollama.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nollama.Init(ctx, ollama.WithAddress(\"http://localhost:11434\"))\n```\n\n----------------------------------------\n\nTITLE: Old streaming flow pattern\nDESCRIPTION: JavaScript code showing how streaming flows were defined and used in Genkit 0.5.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nimport { defineFlow, streamFlow } from '@genkit-ai/flow';\n\nconst myStreamingFlow = defineFlow(...);\nconst { stream, output } = await streamFlow(myStreamingFlow, ...);\n\nfor await (const chunk of stream()) {\n  console.log(chunk);\n}\n\nconsole.log(await output());\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dotprompt Template\nDESCRIPTION: Example of a basic .prompt file structure with model configuration, input schema, and templated content for generating greetings\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n---\nmodel: vertexai/gemini-1.5-flash\nconfig:\n  temperature: 0.9\ninput:\n  schema:\n    location: string\n    style?: string\n    name?: string\n  default:\n    location: a restaurant\n---\n\nYou are the world's most welcoming AI assistant and are currently working at {{location}}.\n\nGreet a guest{{#if name}} named {{name}}{{/if}}{{#if style}} in the style of {{style}}{{/if}}.\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Dataset in JSON\nDESCRIPTION: This snippet demonstrates the structure of a JSON file used for creating a test dataset for the Checks evaluator.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/checks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"testCaseId\": \"test_case_id_1\",\n    \"input\": \"The input to your model.\",\n    \"output\": \"Example model output. This is what will be evaluated.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents API Call\nDESCRIPTION: Curl command to query indexed documents using Genkit with a search term\nSOURCE: https://github.com/firebase/genkit/blob/main/go/samples/firebase-retrievers/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:4000/api/runAction -H \"Content-Type: application/json\" -d '{\"key\":\"/flow/flow-retrieve-documents\", \"input\": \"crime film\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing LLM-based Scoring Function in TypeScript\nDESCRIPTION: Defines a scoring function that processes test cases and returns a Score object based on LLM evaluation of deliciousness.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModelArgument } from 'genkit';\nimport { BaseEvalDataPoint, Score } from 'genkit/evaluator';\n\nexport async function deliciousnessScore<\n  CustomModelOptions extends z.ZodTypeAny,\n>(\n  ai: Genkit,\n  judgeLlm: ModelArgument<CustomModelOptions>,\n  dataPoint: BaseEvalDataPoint,\n  judgeConfig?: CustomModelOptions\n): Promise<Score> {\n  const d = dataPoint;\n  if (!d.output) {\n    throw new Error('Output is required for Deliciousness detection');\n  }\n\n  const deliciousnessPrompt = getDeliciousnessPrompt(ai);\n  const response = await deliciousnessPrompt(\n    {\n      responseToTest: d.output as string,\n    },\n    {\n      model: judgeLlm,\n      config: judgeConfig,\n    }\n  );\n\n  const parsedResponse = response.output;\n  if (!parsedResponse) {\n    throw new Error(`Unable to parse evaluator response: ${response.text}`);\n  }\n\n  return {\n    score: parsedResponse.verdict,\n    details: { reasoning: parsedResponse.reason },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vertex AI Plugin in Go\nDESCRIPTION: Shows how to initialize the Vertex AI plugin using the Init() function. This sets up the necessary configuration for using the plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvertexai.Init()\n```\n\n----------------------------------------\n\nTITLE: Firebase CLI Deployment Command\nDESCRIPTION: Command to deploy the Genkit flow to Firebase Cloud Functions using the Firebase CLI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Retriever Example\nDESCRIPTION: Demonstrates how to use the advanced retriever with custom options.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst docs = await ai.retrieve({\n  retriever: advancedRetriever,\n  query: input,\n  options: { preRerankK: 7, k: 3 },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK in JavaScript\nDESCRIPTION: Code snippet to initialize the Firebase Admin SDK in a JavaScript application, specifying the project ID.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { initializeApp } from 'firebase-admin/app';\n\ninitializeApp({\n  projectId: 'your-project-id',\n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling old Genkit CLI\nDESCRIPTION: Command to uninstall the previous version of Genkit CLI globally and locally.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm uninstall -g genkit && npm uninstall genkit\n```\n\n----------------------------------------\n\nTITLE: Installing Google Gen AI Plugin\nDESCRIPTION: Command to install the genkit-plugin-google-genai package using pip.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/google-genai.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install genkit-plugin-google-genai\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI\nDESCRIPTION: Commands to enable and configure Vertex AI services\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud services enable aiplatform.googleapis.com\n\nexport GCLOUD_PROJECT=<your project ID>\n\nexport GCLOUD_LOCATION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit Dependencies with npm\nDESCRIPTION: This command installs the core Genkit package and the Google AI plugin for accessing Gemini models.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm install genkit @genkit-ai/googleai\n```\n\n----------------------------------------\n\nTITLE: Starting application code without Dev UI\nDESCRIPTION: Commands showing how to start only the application code in Genkit dev mode without the Dev UI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_17\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start --noui -- <start command>\n\ngenkit start --noui -- tsx src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Vector Index\nDESCRIPTION: Curl command to create a composite vector index in Firestore for the embedding field with 3 dimensions\nSOURCE: https://github.com/firebase/genkit/blob/main/go/samples/firebase-retrievers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST      \"https://firestore.googleapis.com/v1/projects/<YOUR_PROJECT_ID>/databases/(default)/collectionGroups/<YOUR_COLLECTION>/indexes\"      -H \"Authorization: Bearer $(gcloud auth print-access-token)\"      -H \"Content-Type: application/json\"      -d '{\n       \"fields\": [\n         {\n           \"fieldPath\": \"embedding\",\n           \"vectorConfig\": {\n             \"dimension\": 3,\n             \"flat\": {}\n           }\n         }\n       ],\n       \"queryScope\": \"COLLECTION\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Sample Genkit Go Implementation\nDESCRIPTION: Example Go code showing a basic Genkit flow implementation for menu suggestions using LLM\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/init/main.go\" region_tag=\"main\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Executing Ollama Embed Sample with GenKit\nDESCRIPTION: Command to start the Ollama embedding sample application using GenKit. This command runs the pokemon_glossary.py script using the uv runner after starting the GenKit environment.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/ollama-simple-embed/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/pokemon_glossary.py\n```\n\n----------------------------------------\n\nTITLE: Genkit Tools Configuration\nDESCRIPTION: Configuration for custom evaluators and extractors in Genkit tools.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  evaluators: [\n    {\n      actionRef: '/flow/qaFlow',\n      extractors: {\n        context: { outputOf: 'factModified' },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Score Schema in TypeScript\nDESCRIPTION: Zod schema definition for the score structure used in Genkit evaluator responses.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ScoreSchema = z.object({\n  id: z.string().describe('Optional ID to differentiate multiple scores').optional(),\n  score: z.union([z.number(), z.string(), z.boolean()]).optional(),\n  error: z.string().optional(),\n  details: z\n    .object({\n      reasoning: z.string().optional(),\n    })\n    .passthrough()\n    .optional(),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinecone with API Key\nDESCRIPTION: Shows how to initialize the Pinecone plugin with an explicit API key configuration\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\npinecone.Init(pinecone.WithAPIKey(\"your-api-key\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Test Input JSON Structure\nDESCRIPTION: Example JSON structure for test inputs containing questions with optional reference answers.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"input\": \"What is the French word for Cheese?\"\n  },\n  {\n    \"input\": \"What green vegetable looks like cauliflower?\",\n    \"reference\": \"Broccoli\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic AI Generation in Go\nDESCRIPTION: A simple Hello World example in Go, representing a minimal implementation for Genkit in the Go language runtime.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Streaming Flows\nDESCRIPTION: Example of how to invoke a flow in streaming mode programmatically.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"invoke-streaming\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI with a Custom Command\nDESCRIPTION: Generic command to start the Genkit Developer UI and connect it to a running code process. The placeholder allows specifying the command needed to run your specific code.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit start -- <command to run your code>\n```\n\n----------------------------------------\n\nTITLE: Multimodal Input with URL in Python\nDESCRIPTION: Shows how to provide multimodal input using an image URL along with text prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresult = await ai.generate(\n    prompt=[\n      Part(media={'url': 'https://example.com/photo.jpg'}),\n      Part(text='Compose a poem about this image.'),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Language Models\nDESCRIPTION: Commands to pull and install the mistral-nemo and gemma3 latest model versions using Ollama.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/ollama-hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama pull mistral-nemo:latest\nollama pull gemma3:latest\n```\n\n----------------------------------------\n\nTITLE: Genkit Paths Log Structure\nDESCRIPTION: JSON payload structure for Paths logs containing execution path information. Includes message field with path and feature name, plus metadata about the flow and execution paths.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/telemetry-collection.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"[genkit] Paths[<path>, <featureName>]\",\n  \"metadata\": {\n    \"flowName\": \"string\",\n    \"paths\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Genkit Flow with cURL\nDESCRIPTION: cURL command to test the deployed Genkit flow on Cloud Run, including authentication and sending a JSON payload.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_10\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncurl -X POST https://<service-url>/menuSuggestionFlow \\\n  -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\n  -H \"Content-Type: application/json\" -d '\"banana\"'\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Genkit sample with uv\nDESCRIPTION: Executes a Genkit sample script using the 'genkit start' command and uv run, specifying the directory and Python file to run.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/dev-local-vectorstore-hello/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run --directory py samples/hello/src/hello.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase telemetry\nDESCRIPTION: JavaScript code showing how to enable Firebase telemetry in Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { enableFirebaseTelemetry } from '@genkit-ai/firebase';\n\nenableFirebaseTelemetry({...});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Equivalent of Picoschema\nDESCRIPTION: The TypeScript interface representation of the above Picoschema definition showing type mappings and comments\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Article {\n  title: string;\n  subtitle?: string | null;\n  /** true when in draft state */\n  draft?: boolean | null;\n  /** approval status */\n  status?: 'PENDING' | 'APPROVED' | null;\n  /** the date of publication e.g. '2024-04-09' */\n  date: string;\n  /** relevant tags for article */\n  tags: string[];\n  authors: {\n    name: string;\n    email?: string | null;\n  }[];\n  metadata?: {\n    /** ISO timestamp of last update */\n    updatedAt?: string | null;\n    /** id of approver */\n    approvedBy?: number | null;\n  } | null;\n  /** arbitrary extra data */\n  extra?: any;\n  /** wildcard field */\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Flower Image Generator Sample\nDESCRIPTION: Command to run the flower image generator sample using genkit. The sample generates flower images in a specified directory with configurable parameters.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/vertex-ai-imagen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run --directory py samples/vertex-ai-imagen/src/vertex-ai-imagen.py\n```\n\n----------------------------------------\n\nTITLE: Importing Zod Schema Definition\nDESCRIPTION: Demonstrates importing the Zod library for schema definitions in Genkit\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/js/doc-snippets/src/models/index.ts\" region_tag=\"importZod\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Provider ID for a Genkit Plugin\nDESCRIPTION: Demonstrates how to define a unique provider ID for a Genkit plugin. This ID serves as a namespace for all resources defined by the plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nconst providerID = \"yourplugin\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinecone Plugin\nDESCRIPTION: Demonstrates basic initialization of the Pinecone plugin using default configuration\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npinecone.Init()\n```\n\n----------------------------------------\n\nTITLE: Overriding Prompt Configuration\nDESCRIPTION: Example of overriding default prompt configuration during generation\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nresponse, err := prompt.GenerateWithConfig(ctx, genkit.Input{\n    \"userQuestion\": \"What is the weather like?\",\n}, genkit.PromptConfig{\n    Model: \"vertexai/gemini-1.5-pro\",\n    Config: map[string]any{\n        \"temperature\": 0.7,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings\nDESCRIPTION: Demonstrates how to generate embeddings using an embedding model.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nembedding, err := embedder.Embed(ctx, genai.Text(\"Some text to embed\"))\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedder Options for Chroma\nDESCRIPTION: Example of specifying embedder options for the Chroma plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nembedderOptions: { taskType: 'RETRIEVAL_DOCUMENT' },\n```\n\n----------------------------------------\n\nTITLE: Setting API Key - POSIX Terminal Command\nDESCRIPTION: Command to set the Google AI Studio API key as an environment variable.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: Defining an Authenticated Flow with Firebase Auth in Genkit\nDESCRIPTION: Example of how to define a flow with the Firebase auth provider. The flow uses the auth provider to authenticate and authorize requests based on the defined policy.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/auth.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Define a flow with Firebase authentication\nflowDef := flows.Define(\"authenticatedFlow\", gen.Input[AuthInput](), gen.Output[string](),\n\tflows.WithFlowAuth(auth),\n\tflows.WithFunction(func(ctx context.Context, input AuthInput) (string, error) {\n\t\t// Flow implementation\n\t\tauthCtx := flows.GetAuthContext(ctx)\n\t\treturn fmt.Sprintf(\"Hello, %s!\", authCtx.UserID), nil\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools with UV\nDESCRIPTION: Commands to install required development tools (httpie, mypy, and ruff) using the uv package manager\nSOURCE: https://github.com/firebase/genkit/blob/main/py/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install httpie\nuv tool install mypy\nuv tool install ruff\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI Environment Variables\nDESCRIPTION: Commands to set up Google Cloud project ID and location environment variables for Vertex AI, along with authentication setup.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GCLOUD_PROJECT=<your project ID>\n\nexport GCLOUD_LOCATION=us-central1\n\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for configuring the Vertex AI and Firestore integration.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-firestore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ID=your-google-cloud-project-id\nLOCATION=your-vertex-ai-location\nFIRESTORE_COLLECTION=your_firestore_collection_here\nVECTOR_SEARCH_PUBLIC_DOMAIN_NAME=your-vector-search-public-domain-name\nVECTOR_SEARCH_INDEX_ENDPOINT_ID=your-index-endpoint-id\nVECTOR_SEARCH_INDEX_ID=your-index-id\nVECTOR_SEARCH_DEPLOYED_INDEX_ID=your-deployed-index-id\nGOOGLE_APPLICATION_CREDENTIALS=path-to-your-service-account-key.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud telemetry\nDESCRIPTION: JavaScript code showing how to enable Google Cloud telemetry in Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { enableGoogleCloudTelemetry } from '@genkit-ai/google-cloud';\n\nenableGoogleCloudTelemetry({...});\n```\n\n----------------------------------------\n\nTITLE: Exporting Gemini API Key in Bash\nDESCRIPTION: Sets up the GEMINI_API_KEY environment variable with the user's API key obtained from ai.dev. This step is necessary for authenticating with the Google GenAI service.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY='<Your api key>'\n```\n\n----------------------------------------\n\nTITLE: Prompt File with Model Configuration in YAML\nDESCRIPTION: Example of a .prompt file with YAML front matter specifying model configuration values. This demonstrates how to set default model parameters for a prompt.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmodel: gemini-pro\nconfig:\n  temperature: 0.7\n  maxOutputTokens: 256\n---\n\nHello, {{name}}!\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud and Setting Up Virtual Environment\nDESCRIPTION: Sets up authentication with Google Cloud and creates a virtual environment for the project using uv venv and activates it.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/vertex-ai-imagen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud for Vertex AI\nDESCRIPTION: Commands to authenticate with Google Cloud to access Vertex AI services. This is required for the chatbot to use AI models from Vertex AI.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\ngcloud auth application-default login --project YOUR_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Candidate Response Handling Changes\nDESCRIPTION: Illustrates the simplified response handling without candidates array in Genkit 0.9\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await generate({\n messages: [ { role: 'user', content: ...} ]\n});\nconsole.log(response.candidates);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await ai.generate({\n messages: [ { role: 'user', content: ...} ]\n});\nconsole.log(response.message);\n```\n\n----------------------------------------\n\nTITLE: Importing Pinecone Plugin in Go\nDESCRIPTION: Shows how to import the Pinecone plugin package into a Go project\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/pinecone.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/firebase/genkit/go/plugins/pinecone\"\n```\n\n----------------------------------------\n\nTITLE: Basic WSGI Application Implementation\nDESCRIPTION: Demonstrates a simple WSGI application that returns a 'Hello World' response. Shows the synchronous nature of WSGI with its blocking request handling pattern.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/python/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef app(env, start_response):\n    start_response('200 OK', [('Content-Type','text/plain')])\n    return [b\"Hello World\"]\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Vertex AI Plugin with Location in Go\nDESCRIPTION: Shows how to initialize the Vertex AI plugin by explicitly specifying the Vertex AI API location.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvertexai.Init(vertexai.WithLocation(\"us-central1\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Vector Index\nDESCRIPTION: Command to create a composite index in Firestore for vector similarity search\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/firestore.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud firestore indexes composite create \\\n  --project=<FIREBASE-PROJECT>\\\n  --collection-group=<COLLECTION-NAME> \\\n  --query-scope=COLLECTION \\\n  --field-config=vector-config='{\"dimension\":\"<YOUR_DIMENSION_COUNT>\",\"flat\": \"{}\"}',field-path=<VECTOR-FIELD>\n```\n\n----------------------------------------\n\nTITLE: Setting up project directory structure\nDESCRIPTION: Creates the necessary directory structure and initializes a new TypeScript project for the PDF chat application.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p chat-with-a-pdf/src && \ncd chat-with-a-pdf && \ntouch src/index.ts\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ npm init -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinecone API Key in clientParams\nDESCRIPTION: Example of specifying the Pinecone API key through the clientParams configuration object instead of using environment variables.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/pinecone.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclientParams: {\n  apiKey: ...,\n}\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt Configuration\nDESCRIPTION: Content for requirements.txt file listing required Genkit packages\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngenkit\ngenkit-plugin-google-genai\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI for Local Development\nDESCRIPTION: Commands to set up the local environment for Vertex AI, including project ID, location, and authentication.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GCLOUD_PROJECT=<your project ID>\n\nexport GCLOUD_LOCATION=us-central1\n\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Removing old individual Genkit imports\nDESCRIPTION: JavaScript code showing imports from individual Genkit packages that should be removed.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { â¦ } from '@genkit-ai/ai';\nimport { â¦ } from '@genkit-ai/core';\nimport { â¦ } from '@genkit-ai/flow';\n```\n\n----------------------------------------\n\nTITLE: Running Google GenAI Sample with GenKit\nDESCRIPTION: Executes the sample Python script using GenKit and uv. This command starts the GenKit flow and runs the Google GenAI hello world example.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-hello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/google_genai_hello.py\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Plugin for Genkit\nDESCRIPTION: Command to install the Ollama plugin package for Genkit using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i --save genkitx-ollama\n```\n\n----------------------------------------\n\nTITLE: Vector Configuration Setup\nDESCRIPTION: Configuration setup for vector database using Genkit's localvec plugin\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/rag/main.go\" region_tag=\"vec\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Running Genkit Sample with Tool Interrupts\nDESCRIPTION: Command to start Genkit and run a Python sample from the tool-interrupts directory using uv as the Python runner.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/tool-interrupts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run --directory py samples/tool-interrupts/src/hello.py\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama on Debian/Ubuntu\nDESCRIPTION: Installs Ollama on Debian/Ubuntu systems using the official installation script\nSOURCE: https://github.com/firebase/genkit/blob/main/py/plugins/ollama/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://ollama.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Validator Creation Function for Firebase GenKit\nDESCRIPTION: A function that creates a validator function for GenKit. The created validator checks if a property is required or matches a specific pattern, and returns appropriate error messages if validation fails.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createValidator = (\n  config: {\n    property: string;\n    required?: boolean;\n    pattern?: string | RegExp;\n    patternErrorMessage?: string;\n  },\n  validate?: (property: string, value: any) => string | undefined\n) => {\n  return (ctx: any): string | undefined => {\n    const { property, required, pattern, patternErrorMessage } = config;\n    const value = ctx[property];\n\n    if (required && !value) {\n      return `${property} is required`;\n    }\n\n    if (value && pattern) {\n      const regex = typeof pattern === 'string' ? new RegExp(pattern) : pattern;\n      if (!regex.test(value.toString())) {\n        return (\n          patternErrorMessage ||\n          `${property} should match pattern ${pattern.toString()}`\n        );\n      }\n    }\n\n    if (validate && value) {\n      return validate(property, value);\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing the Pinecone Plugin for Genkit\nDESCRIPTION: Command to install the Pinecone plugin package for Genkit using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/pinecone.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i --save genkitx-pinecone\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit in watch mode\nDESCRIPTION: Command showing how to start Genkit with watch mode for automatic reloading.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_16\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start -- tsx --watch src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Google Gemini API Key Environment Variable\nDESCRIPTION: This command sets the GOOGLE_GENAI_API_KEY environment variable to the user's API key for accessing the Gemini API.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: New streaming flow pattern\nDESCRIPTION: JavaScript code showing how streaming flows are defined and used in Genkit 0.9 with the simplified API.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst myStreamingFlow = ai.defineStreamingFlow(...);\nconst { stream, response } = await myStreamingFlow(...);\n\nfor await (const chunk of stream) {\n  console.log(chunk);\n}\n\nconsole.log(await response);\n```\n\n----------------------------------------\n\nTITLE: Running Go Sample Application\nDESCRIPTION: Commands for navigating to sample directory, installing dependencies and running a Go application with Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd go/samples          # Navigate to samples directory\ncd <sample-name>       # Choose a sample to run\ngo mod tidy            # Install Go dependencies\ngenkit start -- go run .  # Start the Genkit server and run the application\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroma Client Parameters\nDESCRIPTION: Example of specifying custom Chroma client parameters, such as the server path.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclientParams: {\n  path: \"http://192.168.10.42:8000\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Google Gemini API Key\nDESCRIPTION: Command to set the environment variable for Google Gemini API authentication\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Generative AI API Key Inline\nDESCRIPTION: TypeScript code snippet showing how to configure the API key inline, which is not recommended for production use.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleAI({ apiKey: yourKey });\n```\n\n----------------------------------------\n\nTITLE: Installing Google Generative AI Plugin via NPM\nDESCRIPTION: Command to install the Google Generative AI plugin using npm package manager\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i --save @genkit-ai/googleai\n```\n\n----------------------------------------\n\nTITLE: Setting Gemini API Environment Variable\nDESCRIPTION: Command to set the Google Gemini API key as an environment variable for authentication.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Prompt File Configuration for Interrupts\nDESCRIPTION: Example of a prompt file configuration that includes interrupt tools for party planning.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntools: [askQuestion]\ninput:\n  schema:\n    partyType: string\n---\n{{role \"system\"}}\nUse the askQuestion tool if you need to clarify something.\n\n{{role \"user\"}}\nHelp me plan a {{partyType}} party next week.\n```\n\n----------------------------------------\n\nTITLE: Setting Google GenAI API Key in Bash\nDESCRIPTION: Exports the Gemini API key as an environment variable for authentication with Google's GenAI services. The API key must be obtained from ai.dev platform.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-code-execution/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY='<Your api key>'\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama on MacOS\nDESCRIPTION: Installs Ollama using Homebrew package manager on MacOS systems\nSOURCE: https://github.com/firebase/genkit/blob/main/py/plugins/ollama/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ollama\n```\n\n----------------------------------------\n\nTITLE: Streaming Flow CLI Usage\nDESCRIPTION: Command line example for running a flow in streaming mode using the Genkit CLI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit flow:run menuSuggestionFlow '\"French\"' -s\n```\n\n----------------------------------------\n\nTITLE: Initializing Genkit with Google AI Plugin\nDESCRIPTION: Basic setup for initializing Genkit with the Google AI plugin\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { googleAI } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit CLI in Node.js Projects\nDESCRIPTION: Command to install the Genkit CLI as a development dependency in a Node.js project. This makes the CLI available for local development tasks.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm install -D genkit-cli\n```\n\n----------------------------------------\n\nTITLE: Loading a Prompt File in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to load a prompt file using the prompt() method in Genkit. This is the first step in using a prompt in your application code.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst helloPrompt = await genkit.prompt('hello');\n```\n\n----------------------------------------\n\nTITLE: Running Flows in Code\nDESCRIPTION: Example showing how to execute a flow programmatically in Go code.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/flows.go\" region_tag=\"run1\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Genkit Model-Specific Generation\nDESCRIPTION: Shows how to specify a particular model for a single generation request.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = await ai.generate(\n    prompt='Invent a menu item for a pirate themed restaurant.',\n    model='googleai/gemini-2.0-pro',\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents from Vector Store - Python\nDESCRIPTION: Example of retrieving documents from the Dev Local Vector Store using ai.retrieve method with a search query.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/dev-local-vectorstore.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom genkit.types import Document\n\ndocs = await ai.retrieve(\n    query=Document.from_text('search query'),\n    retriever='my_vectorstore',\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment with uv for Firebase GenKit\nDESCRIPTION: Creates and activates a virtual environment using uv, a fast Python package installer and resolver.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/firestore-retreiver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Old flow and tool definition pattern\nDESCRIPTION: JavaScript code showing how flows and tools were defined globally in version 0.5.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport { defineFlow, defineTool, onFlow } from '@genkit-ai/core';\n\ndefineFlow(...);\ndefineTool(...);\n\nonFlow(...);\n```\n\n----------------------------------------\n\nTITLE: Installing the Genkit Evaluator Package\nDESCRIPTION: Command to install the @genkit-ai/evaluator npm package, which is required for using the Genkit evaluation metrics in a project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_2\n\nLANGUAGE: posix\nCODE:\n```\nnpm install @genkit-ai/evaluator\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Development Server\nDESCRIPTION: Command to start the Angular development server for the Genkit application.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run genkit:dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase CLI and Project\nDESCRIPTION: Commands to set up a new Firebase project directory and initialize it for Genkit use.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PROJECT_ROOT=~/tmp/genkit-firebase-project1\n\nmkdir -p $PROJECT_ROOT\n\ncd $PROJECT_ROOT\n\nfirebase init genkit\n```\n\n----------------------------------------\n\nTITLE: Defining Prompt with Interrupts in TypeScript\nDESCRIPTION: Shows how to define a prompt that includes interrupt functionality for asking trivia questions.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/interrupts.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst triviaPrompt = ai.definePrompt(\n  {\n    name: 'triviaPrompt',\n    tools: [askQuestion],\n    input: {\n      schema: z.object({subject: z.string()})\n    },\n    prompt: 'Ask me a trivia question about {{subject}}.',\n  }\n);\n\nconst response = await triviaPrompt({ subject: 'computer history' });\n```\n\n----------------------------------------\n\nTITLE: Setting GOOGLE_APPLICATION_CREDENTIALS for Firebase Telemetry Plugin\nDESCRIPTION: This command sets the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of the service account key file for authentication outside of Google Cloud.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_APPLICATION_CREDENTIALS = \"path/to/your/key/file\"\n```\n\n----------------------------------------\n\nTITLE: Starting Ollama Server\nDESCRIPTION: Starts the Ollama service locally on the default port 11434\nSOURCE: https://github.com/firebase/genkit/blob/main/py/plugins/ollama/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nollama serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Scripts for Cloud Run Deployment\nDESCRIPTION: JSON snippet showing the necessary scripts in package.json for Cloud Run deployment. It includes start and build scripts for a typical TypeScript project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"node lib/index.js\",\n  \"build\": \"tsc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ollama Model in Go\nDESCRIPTION: Example of creating a model definition for the Gemma 2 model in Go using Genkit and Ollama.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/ollama.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\ngemma := ollama.Model(\"gemma2\").WithTemperature(0.7)\n```\n\n----------------------------------------\n\nTITLE: Installing global Genkit CLI\nDESCRIPTION: Command to install the standalone Genkit CLI package globally.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_14\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i -g genkit-cli\n```\n\n----------------------------------------\n\nTITLE: Running the PDF Indexing Flow\nDESCRIPTION: Command to execute the indexMenu flow with a PDF file as input. This terminal command triggers the process of indexing a menu PDF into the vector database.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/rag.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit flow:run indexMenu '\"menu.pdf\"'\n```\n\n----------------------------------------\n\nTITLE: Implementing chat interface\nDESCRIPTION: Initializes the chat with the constructed prompt and sets up the command-line interface for user interaction.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    // Step 4: start chat\n    const chat = ai.chat({ system: prompt });\n    const readline = createInterface(process.stdin, process.stdout);\n    console.log(\"You're chatting with Gemini. Ctrl-C to quit.\\n\");\n```\n\n----------------------------------------\n\nTITLE: Documenting GenkitRegistry Class in Python\nDESCRIPTION: API reference for the GenkitRegistry class in the genkit.ai module. This class is probably responsible for managing and registering various components or plugins within the Genkit system.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n::: genkit.ai.GenkitRegistry\n```\n\n----------------------------------------\n\nTITLE: BigQuery Document Indexer Implementation\nDESCRIPTION: TypeScript implementation of the BigQuery document indexer that stores documents and generates datapoint IDs for Vertex AI Vector Search.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-bigquery/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bigQueryDocumentIndexer: DocumentIndexer = getBigQueryDocumentIndexer(\n  bq,\n  BIGQUERY_TABLE,\n  BIGQUERY_DATASET\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Gemini API Key Environment Variable\nDESCRIPTION: Command to set the required GEMINI_API_KEY environment variable needed for API authentication.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY=<Your api key>\n```\n\n----------------------------------------\n\nTITLE: Testing Flow Endpoint - POSIX Terminal Command\nDESCRIPTION: cURL command to test the deployed flow endpoint with sample data.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncurl -X POST \"http://127.0.0.1:3400/menuSuggestionFlow\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"data\": \"banana\"}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Genkit in the Project\nDESCRIPTION: Command to initialize Genkit in the project, which creates a sample source file for AI flows.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit init\n```\n\n----------------------------------------\n\nTITLE: Setting up Python virtual environment with uv\nDESCRIPTION: Creates a virtual environment using uv and activates it for the current shell session.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/dev-local-vectorstore-hello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using NVM\nDESCRIPTION: Command to install Node.js version 20 using NVM\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Flask Application\nDESCRIPTION: This curl command sends a POST request to the /chat endpoint of the Flask application. It includes JSON data, sets content type and accept headers, and includes an authorization header.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/flask-hello/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:5000/chat -d '{\"data\": \"banana\"}' -H 'content-Type: application/json' -H 'accept: text/event-stream' -H 'Authorization: Pavel'\n```\n\n----------------------------------------\n\nTITLE: Installing Vertex AI Plugin for Genkit using npm\nDESCRIPTION: This code snippet shows how to install the Vertex AI plugin for Genkit using npm. It adds the plugin as a dependency to your project.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/vertexai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @genkit-ai/vertexai\n```\n\n----------------------------------------\n\nTITLE: Deploying Genkit Flow with Vertex AI on Cloud Run\nDESCRIPTION: Command to deploy the Genkit flow on Cloud Run for Vertex AI, specifying the port and setting environment variables for project and location.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_9\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud run deploy --port 3400 \\\n  --set-env-vars GCLOUD_PROJECT=<your-gcloud-project> \\\n  --set-env-vars GCLOUD_LOCATION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Creating Genkit instance with plugins\nDESCRIPTION: JavaScript code showing how to create a Genkit instance with plugins in version 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { genkit } from 'genkit';\n\nconst ai = genkit({ plugins: [...]});\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI\nDESCRIPTION: Command to start the Genkit Developer UI locally\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_7\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Advanced Model Parameters\nDESCRIPTION: Demonstrates setting advanced configuration parameters to control the model's output\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/models.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await genkit.generate({\n  prompt: \"Create a unique and creative dish that would be served at a pirate-themed restaurant\",\n  config: {\n    temperature: 0.7,\n    maxOutputTokens: 500,\n    topP: 0.8,\n    topK: 40\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Python Server Endpoints\nDESCRIPTION: Python implementation of the reflection server endpoints with basic functionality for health checks and action management.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Endpoint         | HTTP Method | Purpose                 | Request Body | Response                     | Content Type       |\n|------------------|-------------|-------------------------|--------------|------------------------------|--------------------||\n| `/api/__health`  | GET         | Health check            | -            | 200 OK status                | -                  |\n| `/api/actions`   | GET         | List registered actions | -            | Action metadata with schemas | `application/json` |\n| `/api/runAction` | POST        | Run an action           | Action input | Action output with traceId   | `application/json` |\n```\n\n----------------------------------------\n\nTITLE: Indexing with Embeddings\nDESCRIPTION: Shows how to use embeddings for indexing content with a specified embedder.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif err := indexer.Index(ctx, embedder, docs...); err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PII Redaction for Span Exporter\nDESCRIPTION: A wrapper exporter that redacts personally identifiable information (PII) from trace spans before sending them to the monitoring service. This example removes 'genkit:input' and 'genkit:output' attributes from all spans.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\n// redactingExporter wraps a trace.SpanExporter and redacts PII from spans before\n// exporting them.\ntype redactingExporter struct {\n\tdelegate trace.SpanExporter\n}\n\n// ExportSpans redacts PII from spans before delegating to the wrapped exporter.\nfunc (e *redactingExporter) ExportSpans(ctx context.Context, spans []trace.ReadOnlySpan) error {\n\tredactedSpans := make([]trace.ReadOnlySpan, len(spans))\n\tfor i, span := range spans {\n\t\tredactedSpans[i] = redactSpan(span)\n\t}\n\treturn e.delegate.ExportSpans(ctx, redactedSpans)\n}\n\n// Shutdown delegates to the wrapped exporter.\nfunc (e *redactingExporter) Shutdown(ctx context.Context) error {\n\treturn e.delegate.Shutdown(ctx)\n}\n\n// redactSpan returns a copy of the given span with PII attributes redacted.\nfunc redactSpan(span trace.ReadOnlySpan) trace.ReadOnlySpan {\n\tredactedAttrs := make([]attribute.KeyValue, 0, span.Attributes().Len())\n\tspan.Attributes().Range(func(kv attribute.KeyValue) bool {\n\t\t// Skip genkit:input and genkit:output attributes, which may contain PII\n\t\tif kv.Key == \"genkit:input\" || kv.Key == \"genkit:output\" {\n\t\t\treturn true\n\t\t}\n\t\tredactedAttrs = append(redactedAttrs, kv)\n\t\treturn true\n\t})\n\n\treturn &redactedSpan{\n\t\tReadOnlySpan: span,\n\t\tattrs:        attribute.NewSet(redactedAttrs...),\n\t}\n}\n\n// redactedSpan wraps a trace.ReadOnlySpan and overrides its Attributes method.\ntype redactedSpan struct {\n\ttrace.ReadOnlySpan\n\tattrs attribute.Set\n}\n\n// Attributes returns the redacted attributes.\nfunc (s *redactedSpan) Attributes() attribute.Set {\n\treturn s.attrs\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Genkit plugin versions\nDESCRIPTION: Example command for upgrading Genkit plugins to versions compatible with Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm upgrade @genkit-ai/firebase\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit with application code\nDESCRIPTION: Commands showing how to start Genkit with application code and the Dev UI together.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_15\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start -- [start command]\n\ngenkit start -- tsx src/index.ts\n\ngenkit start -- go run main.go\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI for Project\nDESCRIPTION: Command to configure the Google Cloud CLI to use your project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Running PII Detection Evaluator Tests in Firebase GenKit\nDESCRIPTION: Command to run the PII detection evaluator tests using a specific dataset.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/custom-evaluators/README.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit eval:run ./datasets/pii_detection_dataset.json --evaluators=byo/pii_detection\n```\n\n----------------------------------------\n\nTITLE: Authenticating with VertexAI using gcloud\nDESCRIPTION: Uses gcloud CLI to authenticate the application with VertexAI for default credentials.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/dev-local-vectorstore-hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory - POSIX Terminal Commands\nDESCRIPTION: Commands to create and navigate to the project directory for a Genkit Express.js application.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GENKIT_PROJECT_HOME=~/tmp/genkit-express-project\n\nmkdir -p $GENKIT_PROJECT_HOME\n\ncd $GENKIT_PROJECT_HOME\n```\n\n----------------------------------------\n\nTITLE: Downloading Ollama Model via CLI\nDESCRIPTION: Example of using the Ollama CLI to download a specific model (gemma in this case).\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/ollama.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nollama pull gemma\n```\n\n----------------------------------------\n\nTITLE: Authenticating with VertexAI using gcloud CLI\nDESCRIPTION: This command authenticates the user with VertexAI using the gcloud CLI tool. It sets up the application-default login credentials.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/flask-hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit CLI using NPM\nDESCRIPTION: Command to globally install the Genkit CLI tool using npm package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/genkit-tools/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g genkit\n```\n\n----------------------------------------\n\nTITLE: Running Evaluator via CLI\nDESCRIPTION: CLI commands for starting the Genkit runtime and running the custom evaluator against the test dataset.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_10\n\nLANGUAGE: posix-terminal\nCODE:\n```\n# Start your genkit runtime\ngenkit start -- <command to start your app>\n\ngenkit eval:run deliciousness_dataset.json --evaluators=myCustomEvals/deliciousnessEvaluator\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Initialization with Environment Variables\nDESCRIPTION: Demonstrates how to implement the Init function for a Genkit plugin with support for configuration via both direct options and environment variables.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Video File Upload for Caching\nDESCRIPTION: Example of uploading video content for caching using the file manager\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileManager = new GoogleAIFileManager(\n  process.env.GOOGLE_GENAI_API_KEY\n);\n\n// Upload video to Google AI using the Gemini Files API\nconst uploadResult = await fileManager.uploadFile(videoFilePath, {\n  mimeType: 'video/mp4', // Adjust according to the video format\n  displayName: 'Uploaded Video for Analysis',\n});\n\nconst fileUri = uploadResult.file.uri;\n```\n\n----------------------------------------\n\nTITLE: Defining a Function to Render Prompts with User Inputs in Golang\nDESCRIPTION: This code defines a function called 'helloPrompt' that takes a name as input and returns a formatted greeting prompt string.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/prompts.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nfunc helloPrompt(name string) string {\n\treturn fmt.Sprintf(\"Say hello to %s.\", name)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port for Genkit Flow Server in Go\nDESCRIPTION: Go code snippet to explicitly specify the port on which the Genkit flow server should listen.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/firebase/genkit/go/pkg/flow\"\n)\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"3400\"\n\t}\n\n\tf := flow.New()\n\t// Build your flows here\n\n\thttp.Handle(\"/\", f)\n\tlog.Printf(\"Listening on :%s\", port)\n\tif err := http.ListenAndServe(fmt.Sprintf(\":%s\", port), nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Server with Custom Tools and Prompts\nDESCRIPTION: Complete example of creating an MCP server that exposes custom Genkit tools and prompts. Shows how to define tools with input/output schemas and create prompts with templates.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/mcp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { mcpServer } from 'genkitx-mcp';\n\nconst ai = genkit({});\n\nai.defineTool(\n  {\n    name: 'add',\n    description: 'add two numbers together',\n    inputSchema: z.object({ a: z.number(), b: z.number() }),\n    outputSchema: z.number(),\n  },\n  async ({ a, b }) => {\n    return a + b;\n  }\n);\n\nai.definePrompt(\n  {\n    name: 'happy',\n    description: 'everybody together now',\n    input: {\n      schema: z.object({ action: z.string().optional() }),\n      default: { action: 'clap your hands' },\n    },\n  },\n  `If you're happy and you know it, {{action}}.`\n);\n\nmcpServer(ai, { name: 'example_server', version: '0.0.1' }).start();\n```\n\n----------------------------------------\n\nTITLE: Registering Metric Exporter\nDESCRIPTION: Code example showing how to initialize a metric exporter and register it with OpenTelemetry. Uses a periodic reader with the user-configured metric collection interval.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-telemetry.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n// Create a metric exporter for our service\nmetricExporter, err := createYourMetricExporter(/*...*/)\nif err != nil {\n\treturn fmt.Errorf(\"failed to create metric exporter: %w\", err)\n}\n\n// Configure the metric reader with the user-specified interval\ninterval := cfg.MetricInterval\nif interval == 0 {\n\tinterval = 60 * time.Second\n}\nreader := metric.NewPeriodicReader(\n\tmetricExporter,\n\tmetric.WithInterval(interval),\n)\n\n// Create and register the meter provider\nmp := metric.NewMeterProvider(\n\tmetric.WithResource(resource.Default()),\n\tmetric.WithReader(reader),\n)\ngenkit.RegisterMeterProvider(mp)\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Ollama Models\nDESCRIPTION: Displays a list of all installed Ollama models on the local system\nSOURCE: https://github.com/firebase/genkit/blob/main/py/plugins/ollama/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nollama list\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Scripts - JSON Configuration\nDESCRIPTION: Package.json script configuration for building and running the TypeScript project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"node --watch lib/index.js\",\n  \"build\": \"tsc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go Module\nDESCRIPTION: Command to create a new Go module for the Genkit cloud project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngo mod init example/cloudrun\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Plugin for Genkit\nDESCRIPTION: Command to install the @genkit-ai/firebase plugin as a project dependency using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i âsave @genkit-ai/firebase\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Workspace Directory Structure for GitHub Projects\nDESCRIPTION: Commands to create a directory structure that mirrors GitHub's organization/repository structure and clone the Genkit repository.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/code/github.com/firebase/\ncd $HOME/code/github.com/firebase\n\ngh repo clone https://github.com/firebase/genkit.git\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Sample with Genkit\nDESCRIPTION: Executes the OpenAI compatibility sample script using genkit start command\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/compat-oai-hello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/compat_oai_hello.py\n```\n\n----------------------------------------\n\nTITLE: Installing PDF parsing and Genkit dependencies\nDESCRIPTION: Installs the required npm packages for PDF parsing and Genkit functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i pdf-parse && npm i -D @types/pdf-parse\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i genkit @genkit-ai/googleai\n```\n\n----------------------------------------\n\nTITLE: Running Flask App\nDESCRIPTION: Commands for running the Flask application, including standard mode and Dev UI mode, plus example curl command for testing\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/flask.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflask --app main.py run\n```\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- flask --app main.py run\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:5000/joke -d '{\"data\": \"banana\"}' -H 'content-Type: application/json' -H 'Accept: text/event-stream'\n```\n\n----------------------------------------\n\nTITLE: Basic AI Generation in Python\nDESCRIPTION: Demonstrates how to set up and use the Genkit framework in Python for basic text generation. Shows both simple generation and streaming generation approaches with the Google AI plugin and Gemini 1.5 Flash model.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport structlog\n\nfrom genkit.ai import genkit\nfrom genkit.plugins.google_ai import googleAI\nfrom genkit.plugins.google_ai.models import gemini15Flash\n\nlogger = structlog.get_logger()\n\n\nasync def main() -> None:\n    ai = genkit({        # (1)!\n      plugins: [googleAI()],\n      model: gemini15Flash,\n    })\n\n    response = await ai.generate('Why is AI awesome?')\n    await logger.adebug(response.text)\n\n    stream, _ = ai.generate_stream(\"Tell me a story\")\n    async for chunk in stream:\n        await logger.adebug(\"Received chunk\", text=chunk.text)\n    await logger.adebug(\"Finished generating text stream\")\n\n\nif __name__ == '__main__':\n    asyncio.run(content_generation())\n```\n\n----------------------------------------\n\nTITLE: Starting Flow Server\nDESCRIPTION: TypeScript code to start the Genkit flow server\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-custom/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstartFlowsServer();\n```\n\n----------------------------------------\n\nTITLE: Running MenuQA Flow via CLI\nDESCRIPTION: Command to execute the menuQA flow with a specific question through the command line interface.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-rag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit flow:run menuQA '\"What burgers are on the menu?\"'\n```\n\n----------------------------------------\n\nTITLE: Rendering Template to String\nDESCRIPTION: Code showing how to render a prompt template to a string without model generation\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntext, err := prompt.RenderTemplate(genkit.Input{\n    \"location\": \"CafÃ© Paris\",\n    \"name\":     \"Alice\",\n    \"style\":    \"a French chef\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client with Filesystem Server\nDESCRIPTION: Example showing how to create an MCP client that connects to a filesystem server. Demonstrates client configuration with server process spawning and plugin integration with Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/mcp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit } from 'genkit';\nimport { mcpClient } from 'genkitx-mcp';\n\n// the filesystem server requires one or more allowed directories\nconst ALLOWED_DIRS = ['/Users/yourusername/Desktop'];\n\nconst filesystemClient = mcpClient({\n  name: 'filesystem',\n  serverProcess: {\n    command: 'npx',\n    args: ['-y', '@modelcontextprotocol/server-everything', ...ALLOWED_DIRS],\n  },\n});\n\nconst ai = genkit({\n  plugins: [\n    filesystemClient /* ... other plugins such as model providers ...*/,\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Async Logging with structlog in Python\nDESCRIPTION: This snippet shows how to use structlog for asynchronous logging in a Python script. It defines an async function 'foo' that logs a message and returns its name.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport structlog\n\nlogger = structlog.get_logger(__name__)\n\nasync def foo() -> str:\n  \"\"\"Foo.\n\n  Returns:\n    The name of this function.\n  \"\"\"\n  await logger.ainfo('Returning foo from function', fn=foo.__name__)\n\n  return foo.__name__\n\n\nif __name__ == '__main__':\n    asyncio.run(foo())\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit CLI\nDESCRIPTION: Command to globally install the Genkit CLI using npm\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i -g genkit-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google AI API Key for Local Development\nDESCRIPTION: Command to set the Google AI API key as an environment variable for local development.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AI API Key\nDESCRIPTION: Setting up the environment variable for Google Gemini AI model access.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<your-api-key>\n```\n\n----------------------------------------\n\nTITLE: Building Firebase Genkit Packages\nDESCRIPTION: Command to perform a complete rebuild of all project packages from the root directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running PDF QA Evaluation\nDESCRIPTION: Command for running evaluation on PDF QA flow with sample dataset.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngenkit eval:flow pdfQA --input ./data/cat_adoption_questions.json\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit Google AI Plugin via NPM\nDESCRIPTION: Command to install the Google AI plugin package for Genkit using NPM package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/googleai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @genkit-ai/googleai\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment for Google GenAI Vertex AI Project\nDESCRIPTION: Commands to create and activate a virtual environment using uv for the Google GenAI Vertex AI example project.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-vertexai-hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Executing Ollama Hello World Sample\nDESCRIPTION: Command to start and run the hello world sample using genkit and uv run.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/ollama-hello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/ollama_hello.py\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI\nDESCRIPTION: Command to start the Genkit developer UI for local testing and development.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_7\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Calling a Prompt with Options in TypeScript\nDESCRIPTION: TypeScript code showing how to call a prompt with both input data and configuration options. This allows overriding default prompt settings.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/dotprompt.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await helloPrompt(\n  { name: 'Alice' },\n  { temperature: 0.7 }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server. After running this command, the application will be accessible at http://localhost:4200/ and will automatically reload when source files are changed.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/genkit-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI with Common Development Commands\nDESCRIPTION: Examples of starting the Genkit Developer UI with different types of development commands, including npm scripts, TypeScript execution, and JavaScript execution with watch mode.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\n# Running a typical development server\nnpx genkit start -- npm run dev\n\n# Running a TypeScript file directly\nnpx genkit start -- npx tsx --watch src/index.ts\n\n# Running a JavaScript file directly\nnpx genkit start -- node --watch src/index.js\n```\n\n----------------------------------------\n\nTITLE: Running Genkit Evaluation Flow with Specific Input and Evaluator\nDESCRIPTION: This command demonstrates how to run a Genkit evaluation flow named 'pdfQA' against a set of input samples from a JSON file, using a specific evaluator for maliciousness.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/evals/README.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit eval:flow pdfQA --input data/cat_adoption_questions.json --evaluator=genkitEval/maliciousness\n```\n\n----------------------------------------\n\nTITLE: Custom Retriever Implementation\nDESCRIPTION: Example of a custom retriever with re-ranking functionality\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/rag/main.go\" region_tag=\"customret\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Sample Web App Implementation\nDESCRIPTION: Complete HTML implementation of a web app that demonstrates Firebase authentication and Genkit flow integration. Includes Google sign-in and poem generation functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Genkit demo</title>\n  </head>\n  <body>\n    <div id=\"signin\" hidden>\n      <button id=\"signinBtn\">Sign in with Google</button>\n    </div>\n    <div id=\"callGenkit\" hidden>\n      Subject: <input type=\"text\" id=\"subject\" />\n      <button id=\"generatePoem\">Compose a poem on this subject</button>\n      <p id=\"generatedPoem\"></p>\n    </div>\n    <script type=\"module\">\n      import { initializeApp } from \"https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js\";\n      import {\n        getAuth,\n        onAuthStateChanged,\n        GoogleAuthProvider,\n        signInWithPopup,\n      } from \"https://www.gstatic.com/firebasejs/11.0.1/firebase-auth.js\";\n      import {\n        getFunctions,\n        httpsCallable,\n      } from \"https://www.gstatic.com/firebasejs/11.0.1/firebase-functions.js\";\n\n      const firebaseConfig = await fetch(\"/__/firebase/init.json\");\n      initializeApp(await firebaseConfig.json());\n\n      async function generatePoem() {\n        const poemFlow = httpsCallable(getFunctions(), \"generatePoem\");\n        const subject = document.querySelector(\"#subject\").value;\n        const response = await poemFlow(subject);\n        document.querySelector(\"#generatedPoem\").innerText = response.data;\n      }\n\n      function signIn() {\n        signInWithPopup(getAuth(), new GoogleAuthProvider());\n      }\n\n      document.querySelector(\"#signinBtn\").addEventListener(\"click\", signIn);\n      document\n        .querySelector(\"#generatePoem\")\n        .addEventListener(\"click\", generatePoem);\n\n      const signinEl = document.querySelector(\"#signin\");\n      const genkitEl = document.querySelector(\"#callGenkit\");\n\n      onAuthStateChanged(getAuth(), (user) => {\n        if (!user) {\n          signinEl.hidden = false;\n          genkitEl.hidden = true;\n        } else {\n          signinEl.hidden = true;\n          genkitEl.hidden = false;\n        }\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Google AI API Key for Gemini\nDESCRIPTION: Command to set up the Google AI API key as an environment variable for local testing with the Gemini model.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Client\nDESCRIPTION: Code to initialize a Firestore client instance\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/firestore.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.cloud import firestore\nfirestore_client = firestore.Client()\n```\n\n----------------------------------------\n\nTITLE: Running Flow Sample\nDESCRIPTION: Commands for running a test flow application using Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd js/testapps/flow-sample1\ngenkit start -- tsx --watch src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Running GenKit with Google GenAI Sample\nDESCRIPTION: Command to start a GenKit instance and execute the Python sample application. This launches the GenAI flows defined in the project.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-code-execution/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/main.py\n```\n\n----------------------------------------\n\nTITLE: Setting GCLOUD_SERVICE_ACCOUNT_CREDS for Firebase Telemetry Plugin\nDESCRIPTION: This command sets the GCLOUD_SERVICE_ACCOUNT_CREDS environment variable with the contents of the service account credentials file for authentication in serverless environments.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGCLOUD_SERVICE_ACCOUNT_CREDS='{\n  \"type\": \"service_account\",\n  \"project_id\": \"your-project-id\",\n  \"private_key_id\": \"your-private-key-id\",\n  \"private_key\": \"your-private-key\",\n  \"client_email\": \"your-client-email\",\n  \"client_id\": \"your-client-id\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"your-cert-url\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vertex AI Configuration\nDESCRIPTION: Example of environment variables needed to configure the Vertex AI project and location for reranking.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-reranker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ID=your_project_id_here\nLOCATION=your_location_here\n```\n\n----------------------------------------\n\nTITLE: Running Firebase GenKit Sample with Firestore Retriever\nDESCRIPTION: Executes a sample application using genkit and uv. The command runs a Python script located in the specified directory using the GenKit framework.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/firestore-retreiver/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run --directory py samples/firestore-retreiver/src/main.py\n```\n\n----------------------------------------\n\nTITLE: Creating Genkit Project Directory\nDESCRIPTION: Commands to create and navigate to a new Genkit project directory\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\nmkdir genkit-intro && cd genkit-intro\n```\n\n----------------------------------------\n\nTITLE: Rendering a Defined Prompt to a Model Request in Golang\nDESCRIPTION: This snippet shows how to use a helper function to render a previously defined prompt into a model request, providing input variables and specifying the model to call.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/prompts.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nreq := helloPrompt.RenderToModelRequest(map[string]any{\n\t\"name\": \"Alice\",\n}, genkit.TextModel)\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for School Agent\nDESCRIPTION: This command starts the development server for the School Agent project using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-schoolAgent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run genkit:dev\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Required environment variables for setting up Vertex AI Vector Search integration\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-custom/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ID=your-google-cloud-project-id\nLOCATION=your-vertex-ai-location\nLOCAL_DIR=./data\nVECTOR_SEARCH_PUBLIC_DOMAIN_NAME=your-vector-search-public-domain-name\nVECTOR_SEARCH_INDEX_ENDPOINT_ID=your-index-endpoint-id\nVECTOR_SEARCH_INDEX_ID=your-index-id\nVECTOR_SEARCH_DEPLOYED_INDEX_ID=your-deployed-index-id\nGOOGLE_APPLICATION_CREDENTIALS=path-to-your-service-account-key.json\n```\n\n----------------------------------------\n\nTITLE: Creating Database Reference Utility in TypeScript\nDESCRIPTION: A utility function that creates and returns a Firestore document reference based on a path pattern with optional path parameters. It validates that path parameters are provided for any path segments marked with a colon.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/developer_tools.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dbRef = (db: Firestore, path: string, pathParams: object = {}) => {\n  // Check if path contains placeholders but no pathParams are provided\n  if (path.includes(':') && Object.keys(pathParams).length === 0) {\n    throw new Error(`Path contains placeholders but no pathParams provided: ${path}`);\n  }\n\n  // Replace placeholders like :id with the values from pathParams\n  let resolvedPath = path;\n  for (const key in pathParams) {\n    const placeholder = `:${key}`;\n    if (resolvedPath.includes(placeholder)) {\n      resolvedPath = resolvedPath.replace(\n        placeholder,\n        pathParams[key as keyof typeof pathParams]?.toString() || ''\n      );\n    }\n  }\n\n  // Check if there are any remaining placeholders\n  if (resolvedPath.includes(':')) {\n    throw new Error(`Some placeholders were not replaced: ${resolvedPath}`);\n  }\n\n  // Split the path and create a document reference\n  const parts = resolvedPath\n    .split('/')\n    .filter((part) => part.length > 0);\n\n  if (parts.length === 0) {\n    throw new Error(`Invalid path: ${path}`);\n  }\n\n  if (parts.length % 2 === 0) {\n    // Document reference\n    return doc(db, resolvedPath);\n  } else {\n    // Collection reference\n    return collection(db, resolvedPath);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: PDF Reading Implementation\nDESCRIPTION: Function to read and process PDF documents\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/rag/main.go\" region_tag=\"readpdf\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Genkit Evaluation Testapp\nDESCRIPTION: This snippet shows the commands to build the Genkit evaluation testapp and start the Genkit Dev UI. It includes an optional command for building all dependencies.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/evals/README.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\n# Build the app\npnpm build\n\n# Use this command if you need to build everything\n# cd ../../../; pnpm build; pnpm pack:all; cd -\n\n# Start the app\n\ngenkit start -- pnpm dev\n# This command should output the link to the Genkit Dev UI.\n```\n\n----------------------------------------\n\nTITLE: Indexing Sample Document for Genkit Evaluation\nDESCRIPTION: This command indexes a PDF document named 'cat-handbook.pdf' to prepare for testing Genkit evaluation features. The setup process is defined in the src/setup.ts file.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/evals/README.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit flow:run setup\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Server\nDESCRIPTION: Command to start the Genkit server that hosts the reranking flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-reranker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Genkit Analytics Collection\nDESCRIPTION: Command to disable analytics collection in Genkit tools. This sets the analyticsOptOut configuration flag to true.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit config set analyticsOptOut true\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Creates and activates a Python virtual environment using uv tool\nSOURCE: https://github.com/firebase/genkit/blob/main/py/plugins/ollama/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Models\nDESCRIPTION: Commands to pull specific Ollama models using the Ollama CLI. This step is necessary to download the models that will be used with Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/ollama.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull gemma3\nollama pull nomic-embed-text\n```\n\n----------------------------------------\n\nTITLE: Running Regex Evaluator Tests in Firebase GenKit\nDESCRIPTION: Command to run the regex evaluator tests using a specific dataset and evaluators.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/custom-evaluators/README.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit eval:run datasets/regex_dataset.json --evaluators=byo/regex_match_url,byo/regex_match_us_phone\n```\n\n----------------------------------------\n\nTITLE: Running Short-Lived Application in Dev Mode with GenKit\nDESCRIPTION: Command to run the short-n-long example as a short-lived application in development mode using GenKit.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/short-n-long/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/short_n_long/main.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Genkit Project Directory\nDESCRIPTION: Commands to create and navigate to a new directory for a Genkit sample project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nmkdir -p ~/tmp/genkit-cloud-project\n\ncd ~/tmp/genkit-cloud-project\n```\n\n----------------------------------------\n\nTITLE: Running Flow Evaluation with Genkit CLI\nDESCRIPTION: Command to run evaluation on a flow using the Genkit CLI. This example shows how to evaluate the 'qaFlow' flow using an existing Genkit dataset called 'myFactsQaDataset'.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_4\n\nLANGUAGE: posix\nCODE:\n```\n# Referencing an existing dataset\ngenkit eval:flow qaFlow --input myFactsQaDataset\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Genkit Angular Application\nDESCRIPTION: Commands to install and setup the initial project dependencies.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - POSIX Terminal Commands\nDESCRIPTION: NPM commands to install Genkit core dependencies and development tools including TypeScript support.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm install --save genkit @genkit-ai/googleai\n\nnpm install -D genkit-cli typescript tsx\n```\n\n----------------------------------------\n\nTITLE: Installing Chroma Plugin for Genkit\nDESCRIPTION: Command to install the Chroma plugin package for Genkit using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/chroma.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i --save genkitx-chromadb\n```\n\n----------------------------------------\n\nTITLE: Indexer Flow Definition\nDESCRIPTION: Implementation of the indexing flow for processing documents\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/rag/main.go\" region_tag=\"indexflow\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit Dependencies\nDESCRIPTION: Commands for installing required Genkit packages using pip\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install genkit\npip3 install genkit-plugin-google-genai\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application. After execution, the build artifacts will be stored in the dist/ directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/genkit-app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Starting only the Dev UI\nDESCRIPTION: Command showing how to start only the Genkit Dev UI without application code.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_18\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Model via CLI\nDESCRIPTION: Command to pull and install the Gemma2 model using the Ollama CLI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/ollama.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nollama pull gemma2\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AI Plugin with API Key\nDESCRIPTION: Example showing how to initialize the plugin with an API key\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/google-genai.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleAI({ apiKey: yourKey });\n```\n\n----------------------------------------\n\nTITLE: Building the Firebase GenKit Custom Evaluators Project\nDESCRIPTION: Commands to build the project, including an option to build everything in the parent directory if needed.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/custom-evaluators/README.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncd ../../../; pnpm build; pnpm pack:all; cd -\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Server\nDESCRIPTION: Command to start the Genkit server instance.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-firestore/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Server\nDESCRIPTION: Command to initialize the Genkit server\nSOURCE: https://github.com/firebase/genkit/blob/main/go/samples/firebase-retrievers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Running Checks Evaluators in Bash\nDESCRIPTION: This command shows how to run the configured Checks evaluators using the Genkit CLI.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/checks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenkit eval:run test-dataset.json --evaluators=checks/guardrails\n```\n\n----------------------------------------\n\nTITLE: Running Short-Lived Application Normally in Bash\nDESCRIPTION: Command to run the short-n-long example as a short-lived application in normal mode using uv.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/short-n-long/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run src/short_n_long/main.py\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Local Emulator\nDESCRIPTION: Commands to build JavaScript assets and start the Firebase emulator suite for local testing. Requires setting up a GCLOUD_PROJECT environment variable.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/firebase-functions-sample1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:js\nfirebase emulators:start --project=GCLOUD_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI with Location and Project\nDESCRIPTION: Example showing how to specify location and project ID when initializing the VertexAI plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/google-genai.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nai = Genkit(\n  plugins=[VertexAI(\n    location='us-east1',\n    project='my-project-id',\n  )],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit Dependencies with npm\nDESCRIPTION: Command to install the core Genkit package and Google AI plugin using npm package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/genkit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm install genkit @genkit-ai/googleai\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase App\nDESCRIPTION: Command to deploy both the web application and Cloud Function to Firebase.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_11\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncd $PROJECT_ROOT\n\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Starting the Firebase GenKit TestApp\nDESCRIPTION: Command to start the test application using GenKit.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/custom-evaluators/README.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start -- pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit CLI\nDESCRIPTION: Command to globally install the Genkit CLI tool using npm\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_10\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i -g genkit-cli\n```\n\n----------------------------------------\n\nTITLE: Indexing Documents API Call\nDESCRIPTION: Curl command to trigger document indexing flow in Genkit\nSOURCE: https://github.com/firebase/genkit/blob/main/go/samples/firebase-retrievers/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:4000/api/runAction -H \"Content-Type: application/json\" -d '{\"key\":\"/flow/flow-index-documents\"}'\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Input for Genkit Flow\nDESCRIPTION: Example JSON input for testing the menuSuggestionFlow in the Genkit developer UI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"banana\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with UV\nDESCRIPTION: Command to execute all unit tests using pytest through the uv package manager\nSOURCE: https://github.com/firebase/genkit/blob/main/py/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest .\n```\n\n----------------------------------------\n\nTITLE: Starting Developer UI\nDESCRIPTION: Command to launch the Developer UI interface for running the menuQA flow through a graphical interface.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-rag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Setting Gemini API Key\nDESCRIPTION: Command to set the environment variable for Gemini API authentication\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\nexport GEMINI_API_KEY=<your API key>\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI with Auto-Browser Opening\nDESCRIPTION: Command to start the Genkit Developer UI with the -o flag, which automatically opens the UI in the default browser, saving a manual step.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit start -o -- <command to run your code>\n```\n\n----------------------------------------\n\nTITLE: Running as Server Normally in Bash\nDESCRIPTION: Command to run the short-n-long example as a server in normal mode using the --server flag.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/short-n-long/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run src/short_n_long/main.py --server\n```\n\n----------------------------------------\n\nTITLE: Adding consolidated Genkit imports\nDESCRIPTION: JavaScript code showing the new import pattern for Genkit and Zod in version 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { z, genkit } from 'genkit';\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Output - Old vs New Method\nDESCRIPTION: Shows the change in accessing response output from method-based to property-based approach\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(response.output());\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(response.output);\n```\n\n----------------------------------------\n\nTITLE: Implementing pgvector Retriever with PostgreSQL in TypeScript using GenKit\nDESCRIPTION: This code defines a custom retriever that connects to a PostgreSQL database with pgvector extension. It embeds the input query, performs a vector similarity search against a database table using pgvector's similarity operator, and returns matching documents with metadata.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/templates/pgvector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { genkit, z, Document } from 'genkit';\nimport { googleAI, textEmbedding004 } from '@genkit-ai/googleai';\nimport { toSql } from 'pgvector';\nimport postgres from 'postgres';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n});\n\nconst sql = postgres({ ssl: false, database: 'recaps' });\n\nconst QueryOptions = z.object({\n  show: z.string(),\n  k: z.number().optional(),\n});\n\nconst sqlRetriever = ai.defineRetriever(\n  {\n    name: 'pgvector-myTable',\n    configSchema: QueryOptions,\n  },\n  async (input, options) => {\n    const embedding = (await ai.embed({\n      embedder: textEmbedding004,\n      content: input,\n    }))[0].embedding;\n    const results = await sql`\n      SELECT episode_id, season_number, chunk as content\n        FROM embeddings\n        WHERE show_id = ${options.show}\n        ORDER BY embedding <#> ${toSql(embedding)} LIMIT ${options.k ?? 3}\n      `;\n    return {\n      documents: results.map((row) => {\n        const { content, ...metadata } = row;\n        return Document.fromText(content, metadata);\n      }),\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Genkit\nDESCRIPTION: Command to initialize Genkit in the project directory, which will create sample source files to develop AI flows.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit init\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Command to scaffold a new Angular component. This can also be used to generate other Angular artifacts like directives, pipes, services, classes, guards, interfaces, enums, or modules.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/genkit-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Starting Ollama Server in Bash\nDESCRIPTION: Command to start the Ollama server, which will run at http://localhost:11434 by default.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/ollama/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama serve\n```\n\n----------------------------------------\n\nTITLE: Accessing Genkit Developer Environment\nDESCRIPTION: Instructions for accessing the Genkit developer playground through keyboard shortcut in terminal\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-character-generator/README_IDX.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCtrl + `\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager\nDESCRIPTION: Command to install the uv package manager using a shell script from astral.sh\nSOURCE: https://github.com/firebase/genkit/blob/main/py/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI in Bash\nDESCRIPTION: Command to start the Genkit Developer UI, which allows running flows through a graphical interface.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-basic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Running the PDF chat application\nDESCRIPTION: Provides the command to run the TypeScript application, specifying the path to a PDF file as an argument.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnpx tsx src/index.ts path/to/some.pdf\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Hosting for Testing\nDESCRIPTION: Commands to build JavaScript assets and serve Firebase hosting locally for testing the deployed functions. Requires setting up a GCLOUD_PROJECT environment variable.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/firebase-functions-sample1/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:js\nfirebase serve --only hosting --project $GCLOUD_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Developer UI\nDESCRIPTION: Command to launch the Genkit developer UI for testing and debugging flows.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngenkit start -- python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment with UV\nDESCRIPTION: Creates and activates a Python virtual environment using the uv package manager\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/compat-oai-hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Old Genkit imports pattern\nDESCRIPTION: JavaScript code showing the old import pattern with multiple packages and separate Zod import.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nimport { â¦ } from '@genkit-ai/ai';\nimport { â¦ } from '@genkit-ai/core';\nimport { â¦ } from '@genkit-ai/flow';\nimport * as z from 'zod';\n```\n\n----------------------------------------\n\nTITLE: CLI Flow Execution\nDESCRIPTION: Command line example for running a flow using the Genkit CLI tool.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/flows.md#2025-04-22_snippet_3\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit flow:run menuSuggestionFlow '\"French\"'\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings\nDESCRIPTION: Examples of generating text embeddings using the Gecko model\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ai = genkit({\n  plugins: [vertexAI({ location: 'us-central1' })],\n});\n\nconst embeddings = await ai.embed({\n  embedder: textEmbedding004,\n  content: 'How many widgets do you have in stock?',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on macOS with Homebrew\nDESCRIPTION: Command to install the GitHub CLI tool on macOS using Homebrew package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gh\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Elements\nDESCRIPTION: Command for scaffolding new Angular components and other elements. This CLI utility supports generating various Angular artifacts like directives, pipes, services, classes, guards, interfaces, enums, and modules.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/genkit-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Model\nDESCRIPTION: Downloads a specific model version and tag from Ollama repository\nSOURCE: https://github.com/firebase/genkit/blob/main/py/plugins/ollama/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nollama pull <model-version>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Running the Google GenAI Vertex AI Sample Application\nDESCRIPTION: Command to start the GenKit application and run the Vertex AI sample script using uv.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-vertexai-hello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/google_genai_vertexai_hello.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Gemini API Key in Bash\nDESCRIPTION: Command to export the Gemini API key as an environment variable in your shell configuration. This is required for authenticating with the Gemini API service.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/short-n-long/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY='<Your api key>'\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Emulator with Genkit\nDESCRIPTION: Command to start Firebase emulators with Genkit integration for local development.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_13\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit start -- firebase emulators:start --inspect-functions\n```\n\n----------------------------------------\n\nTITLE: Building Genkit Project\nDESCRIPTION: Commands to build the Genkit project either individually or the entire setup.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-rag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd </path/to/genkit>; pnpm run setup; cd -\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Chatbot\nDESCRIPTION: Commands to set up the project dependencies and start the chatbot application. After running these commands, the chatbot will be accessible via browser.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run setup\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit Flask Plugin\nDESCRIPTION: Commands for installing the Genkit Flask plugin using pip or requirements.txt\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/flask.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/firebase/genkit#subdirectory=py/plugins/flask\n```\n\nLANGUAGE: text\nCODE:\n```\ngenkit-plugin-flask @ git+https://github.com/firebase/genkit#subdirectory=py/plugins/google-genai\n```\n\n----------------------------------------\n\nTITLE: Genkit Output Log Structure\nDESCRIPTION: JSON payload structure for Output logs containing execution results. Includes message field with path and feature name, plus extensive metadata about the execution context, model interaction details, and output organization.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/telemetry-collection.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"[genkit] Output[<path>, <featureName>]\",\n  \"metadata\": {\n    \"candidateIndex\": 0,\n    \"content\": \"string\",\n    \"featureName\": \"string\",\n    \"messageIndex\": 0,\n    \"model\": \"string\",\n    \"path\": \"step1 > step2 > step3\",\n    \"partIndex\": 0,\n    \"qualifiedPath\": \"/{flow1,t:flow}/{generate,t:util}/{modelProvider/model,t:action,s:model}\",\n    \"totalCandidates\": 1,\n    \"totalParts\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for Genkit using uv\nDESCRIPTION: Creates and activates a Python virtual environment using uv, a fast Python package installer and resolver.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/tool-interrupts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Importing Vertex AI Plugin in Go\nDESCRIPTION: Demonstrates how to import the Vertex AI plugin package in a Go application.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/firebase/genkit/go/plugins/vertexai\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud CLI\nDESCRIPTION: Command to authenticate locally with Google Cloud when using ForceExport option.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-cloud.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Installing Vertex AI Plugin\nDESCRIPTION: Command to install the Vertex AI plugin via npm\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i --save @genkit-ai/vertexai\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Server\nDESCRIPTION: Command to start the Genkit server\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-custom/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Running as Server in Dev Mode with GenKit\nDESCRIPTION: Command to run the short-n-long example as a server in development mode using GenKit and the --server flag.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/short-n-long/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/short_n_long/main.py --server\n```\n\n----------------------------------------\n\nTITLE: Starting Flask Application with GenKit\nDESCRIPTION: This command starts the Flask application using GenKit. It uses the 'uv run' command to execute the Flask app defined in src/flask_hello.py.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/flask-hello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run flask --app src/flask_hello.py run\n```\n\n----------------------------------------\n\nTITLE: Stopping Genkit Servers with SIGTERM\nDESCRIPTION: Command to stop the running Genkit servers by sending a SIGTERM signal (kill -15) to the process. Requires looking up the process ID from the server's status page.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/multi-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# SIGTERM\nkill -15 ${PROCESS_ID}\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit Dependencies\nDESCRIPTION: Required Python package dependencies for running Genkit with Google GenAI plugin on Cloud Run\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/cloud-run.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngenkit\ngenkit-plugin-google-genai\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies after cloning the repository.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-firestore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd js/testapps/vertexai-vector-search-firestore && pnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Genkit Flow via CLI in Bash\nDESCRIPTION: Command to run a specific flow (menuSuggestionFlow) using the Genkit CLI with a provided argument.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-basic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenkit flow:run menuSuggestionFlow '\"astronauts\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Local Vector Store Plugin\nDESCRIPTION: NPM installation command for the dev-local-vectorstore plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/dev-local-vectorstore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @genkit-ai/dev-local-vectorstore\n```\n\n----------------------------------------\n\nTITLE: Authenticating with gcloud CLI for Firebase Telemetry Plugin\nDESCRIPTION: These commands authenticate the user and set the project ID using the gcloud CLI for local development with the Firebase telemetry plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud config set project PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud\nDESCRIPTION: Command to authenticate with Google Cloud for accessing Firestore services\nSOURCE: https://github.com/firebase/genkit/blob/main/go/samples/firebase-retrievers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Starting the Genkit Developer UI\nDESCRIPTION: Command to launch the Genkit developer UI for local testing and development.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/deploy.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Cloud Application Default Credentials\nDESCRIPTION: Command to set up Google Cloud Application Default Credentials on a local development environment.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/vertex-ai.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Configuring Checks Plugin with Custom Thresholds in TypeScript\nDESCRIPTION: This snippet shows how to configure the Checks plugin with custom thresholds for different evaluation metrics.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/checks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { checks, ChecksEvaluationMetricType } from '@genkit-ai/checks';\n\nexport const ai = genkit({\n  plugins: [\n    checks({\n      // Project to charge quota to.\n      // Note: If your credentials have a quota project associated with them,\n      //       that value will take precedence over this.\n      projectId: 'your-project-id',\n      evaluation: {\n        metrics: [\n          // Policies configured with the default threshold (0.5).\n          ChecksEvaluationMetricType.DANGEROUS_CONTENT,\n          ChecksEvaluationMetricType.HARASSMENT,\n          ChecksEvaluationMetricType.HATE_SPEECH,\n          ChecksEvaluationMetricType.MEDICAL_INFO,\n          ChecksEvaluationMetricType.OBSCENITY_AND_PROFANITY,\n          // Policies configured with non-default thresholds.\n          {\n            type: ChecksEvaluationMetricType.PII_SOLICITING_RECITING,\n            threshold: 0.6,\n          },\n          {\n            type: ChecksEvaluationMetricType.SEXUALLY_EXPLICIT,\n            threshold: 0.3,\n          },\n          {\n            type: ChecksEvaluationMetricType.VIOLENCE_AND_GORE,\n            threshold: 0.55,\n          },\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies in the vector search custom directory\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-custom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd js/testapps/vertex-vector-search-custom && pnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Genkit Multi-Server Sample with Developer Environment\nDESCRIPTION: Command to run the multi_server.py script using uv with a developer environment setting. This starts multiple Genkit web servers simultaneously.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/multi-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GENKIT_ENV=dev uv run multi_server.py\n```\n\n----------------------------------------\n\nTITLE: Running Funniness Evaluator Tests in Firebase GenKit\nDESCRIPTION: Command to run the funniness evaluator tests using a specific dataset.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/custom-evaluators/README.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit eval:run datasets/funniness_dataset.json --evaluators=byo/funniness\n```\n\n----------------------------------------\n\nTITLE: Running the Google Imagen Sample with UV\nDESCRIPTION: Command to execute the image generation sample script using the uv package runner from the sample folder.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-vertexai-image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv run src/google_genai_vertexai_image.py\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Server\nDESCRIPTION: Command to start the Genkit server instance.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-bigquery/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install the necessary dependencies for the project using PNPM package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-reranker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Genkit Go Documentation\nDESCRIPTION: A simple markdown file containing a link to the official Genkit Go documentation on the Firebase website.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Genkit Go documentation\n\nThis directory contains the source for the Genkit Go documentation. To read the\ndocumentation, go to the official Firebase site:\nhttps://firebase.google.com/docs/genkit-go\n```\n\n----------------------------------------\n\nTITLE: Removing individual Genkit core packages\nDESCRIPTION: Command to uninstall separate Genkit core packages that are no longer needed in version 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm uninstall @genkit-ai/ai @genkit-ai/core @genkit-ai/dotprompt @genkit-ai/flow\n```\n\n----------------------------------------\n\nTITLE: Running Indexer Flow\nDESCRIPTION: Command to execute the menu indexing flow\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit flow:run indexMenu \"'menu.pdf'\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Firebase Hosting\nDESCRIPTION: Command to initialize Firebase Hosting in the project root directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/firebase.md#2025-04-22_snippet_9\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncd $PROJECT_ROOT\n\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Plugin via NPM\nDESCRIPTION: Command to install the Ollama plugin package as a dependency using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/ollama/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save genkitx-ollama\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone Plugin for Genkit\nDESCRIPTION: This command installs the Pinecone plugin for Genkit using npm. It adds the genkitx-pinecone package as a dependency to your project.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/pinecone/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save genkitx-pinecone\n```\n\n----------------------------------------\n\nTITLE: Destination File Content Example\nDESCRIPTION: Destination file showing sink markers where copied content will be placed.\nSOURCE: https://github.com/firebase/genkit/blob/main/go/internal/cmd/copy/testdata/simple.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nline1\n//copy:sink bar\nline2\n//copy:sink foo\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Unix Systems\nDESCRIPTION: Command to install Node Version Manager (nvm) on Linux/macOS systems\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/get-started-go.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Running the Menu Understanding Sample Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Genkit menu understanding application.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-menu/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run genkit:dev\n```\n\n----------------------------------------\n\nTITLE: Building Genkit Project in Bash\nDESCRIPTION: Commands to build the Genkit project. It includes a simple build command and a more comprehensive setup command for building everything.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/docs-menu-basic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd </path/to/genkit>; pnpm run setup; cd -\n```\n\n----------------------------------------\n\nTITLE: Running Genkit Context Caching Sample\nDESCRIPTION: Command to start the Genkit process and run the context caching Python script using the uv runner. The script is located in the google-genai-context-caching directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-context-caching/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run google-genai-context-caching/src/context_caching.py\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Flow with cURL\nDESCRIPTION: cURL command to test the deployed Genkit flow on Cloud Run, including authentication and JSON payload.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncurl -X POST https://<service-url>/menuSuggestionFlow \\\n  -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\n  -H \"Content-Type: application/json\" -d '{\"data\": \"banana\"}'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or pnpm\nDESCRIPTION: Commands to install the necessary dependencies for the application using either npm or pnpm package managers.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dotprompt Plugin\nDESCRIPTION: Command to install the Dotprompt plugin using Go package manager\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/dotprompt.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngo get github.com/firebase/genkit/go/plugins/dotprompt\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit MCP Dependencies\nDESCRIPTION: Commands to install the required Genkit core package and MCP plugin via npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/mcp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i genkit genkitx-mcp\n```\n\n----------------------------------------\n\nTITLE: Text Splitting Configuration\nDESCRIPTION: Configuration for document chunking with 200-character segments and 20-character overlap\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/rag.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n{% includecode github_path=\"firebase/genkit/go/internal/doc-snippets/rag/main.go\" region_tag=\"splitcfg\" adjust_indentation=\"auto\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Genkit Development Environment\nDESCRIPTION: Command to run the Genkit setup script that installs required development tools for the project.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npy/bin/setup\n```\n\n----------------------------------------\n\nTITLE: Viewing Genkit CLI Help Documentation\nDESCRIPTION: Command to display the full list of available Genkit CLI commands and their usage. Useful for exploring all available functionality.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit --help\n```\n\n----------------------------------------\n\nTITLE: Describing Menu Understanding Sample Application in Markdown\nDESCRIPTION: This markdown snippet outlines the structure and features of a menu understanding sample application. It describes 5 iterations of the app, each demonstrating different Genkit features and growing in complexity.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/menu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Menu Understanding Sample Application\n\nThis sample demonstrates an application that can understand a restaurant menu and answer relevant questions about the items on the menu.\n\nThere are 5 iterations of this sample application, growing in complexity and demonstrating utilization of many different Genkit features.\n\nTo test each one out, open the Developer UI and exercise the prompts and flows. Each step contains one or more `example.json` files which you can use as inputs.\n\n### Prerequisites\n\nThis example uses Vertex AI for language models and embeddings.\n\n### Prompts and Flows\n\n1. This step shows how to define prompts in code that can accept user input to their templates.\n2. This step illustrates how to wrap your llm calls and other application code into flows with strong input and output schemas.\n   It also adds an example of tool usage to load the menu from a data file.\n3. This step adds session history and supports a multi-turn chat with the model.\n4. This step ingests the menu items into a vector database and uses retrieval to include releveant menu items in the prompt.\n5. This step illustrates how to combine models with different modalities. It uses a vision model to ingest the menu items from a photograph.\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Genkit Sample\nDESCRIPTION: Commands to create a new directory for the Genkit sample project and navigate to it.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nmkdir -p ~/tmp/genkit-cloud-project\n\ncd ~/tmp/genkit-cloud-project\n```\n\n----------------------------------------\n\nTITLE: Pulling Required Ollama Models in Bash\nDESCRIPTION: Commands to pull the necessary models for the application: an embedding model (nomic-embed-text) and a generation model (phi3.5:latest).\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/ollama/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull nomic-embed-text\nollama pull phi3.5:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager in the vertex-vector-search-bigquery directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-bigquery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd js/testapps/vertex-vector-search-bigquery && pnpm i\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Packages\nDESCRIPTION: Command for building all JavaScript packages in the repository.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Starting a Genkit Application\nDESCRIPTION: Command to start a Genkit application, where the placeholder <command to start your app> should be replaced with the actual command to start the application.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/evaluation.md#2025-04-22_snippet_3\n\nLANGUAGE: posix\nCODE:\n```\ngenkit start -- <command to start your app>\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit CLI using npm\nDESCRIPTION: Command to install the Genkit CLI globally using npm. The CLI provides commands for running and evaluating Genkit functions and collecting telemetry and logs.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/index.typedoc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g genkit\n```\n\n----------------------------------------\n\nTITLE: Running the Application in Development Mode\nDESCRIPTION: Commands to start the application in development mode using either npm or pnpm.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Genkit Multi-Server Startup\nDESCRIPTION: Log output showing the startup process of multiple Genkit servers. Shows port assignments, availability checks, and server registration for flows, hello, reflection, and reflection-starlette servers.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/multi-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2025-03-15 18:06:09 [debug    ] â Event loop is using uvloop (recommendedï¸)\n2025-03-15 18:06:09 [info     ] Starting servers...\n2025-03-15 18:06:09 [info     ] Registering server             name=flows ports=range(3400, 3410)\n2025-03-15 18:06:09 [info     ] Registering server             name=hello ports=[3300]\n2025-03-15 18:06:09 [info     ] Registering server             name=reflection ports=[3100]\n2025-03-15 18:06:09 [info     ] Registering server             name=reflection-starlette ports=[3200]\n2025-03-15 18:06:09 [info     ] Checking port                  config=ServerConfig(name=flows, version=1.0.0, port=3400, ports=range(3400, 3410), host=localhost, log_level=info) host=localhost port=3400\n2025-03-15 18:06:09 [info     ] Port available                 config=ServerConfig(name=flows, version=1.0.0, port=3400, ports=range(3400, 3410), host=localhost, log_level=info) host=localhost port=3400\n2025-03-15 18:06:09 [info     ] Server started                 config=ServerConfig(name=flows, version=1.0.0, port=3400, ports=range(3400, 3410), host=localhost, log_level=info)\n2025-03-15 18:06:09 [info     ] Checking port                  config=ServerConfig(name=hello, version=1.0.0, port=3300, ports=[3300], host=localhost, log_level=info) host=localhost port=3300\n2025-03-15 18:06:09 [info     ] Port available                 config=ServerConfig(name=hello, version=1.0.0, port=3300, ports=[3300], host=localhost, log_level=info) host=localhost port=3300\n2025-03-15 18:06:09 [info     ] Server started                 config=ServerConfig(name=hello, version=1.0.0, port=3300, ports=[3300], host=localhost, log_level=info)\n2025-03-15 18:06:09 [info     ] Checking port                  config=ServerConfig(name=reflection, version=1.0.0, port=3100, ports=[3100], host=localhost, log_level=info) host=localhost port=3100\n2025-03-15 18:06:09 [info     ] Port available                 config=ServerConfig(name=reflection, version=1.0.0, port=3100, ports=[3100], host=localhost, log_level=info) host=localhost port=3100\n2025-03-15 18:06:09 [info     ] Server started                 config=ServerConfig(name=reflection, version=1.0.0, port=3100, ports=[3100], host=localhost, log_level=info)\n2025-03-15 18:06:09 [info     ] Checking port                  config=ServerConfig(name=reflection-starlette, version=1.0.0, port=3200, ports=[3200], host=localhost, log_level=info) host=localhost port=3200\n2025-03-15 18:06:09 [info     ] Port available                 config=ServerConfig(name=reflection-starlette, version=1.0.0, port=3200, ports=[3200], host=localhost, log_level=info) host=localhost port=3200\n2025-03-15 18:06:09 [info     ] Server started                 config=ServerConfig(name=reflection-starlette, version=1.0.0, port=3200, ports=[3200], host=localhost, log_level=info)\n2025-03-15 18:06:09 [info     ] Starting servers completed\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests\nDESCRIPTION: Commands for running Go tests in a specific directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd <test-directory>    # Navigate to test directory\ngo test .              # Run tests in current directory\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies in TypeScript\nDESCRIPTION: Imports the necessary modules and libraries for the PDF chat application, including Genkit, Google AI, pdf-parse, and Node.js built-in modules.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/codelabs/codelab-chat-with-a-pdf.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gemini20Flash, googleAI } from '@genkit-ai/googleai';\nimport { genkit } from 'genkit/beta'; // chat is a beta feature\nimport pdf from 'pdf-parse';\nimport fs from 'fs';\nimport { createInterface } from \"node:readline/promises\";\n```\n\n----------------------------------------\n\nTITLE: Generating an SSH Key with Detailed System Information\nDESCRIPTION: A bash script that generates an ED25519 SSH key with detailed system information embedded in the comment. It extracts OS type, CPU architecture, and distribution information, then saves the key to the standard location and displays the public key.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nUNAME_MRS=$(uname -mrs || echo 'unknown')\nUNAME_OS=\"$(uname -s | tr '[:upper:]' '[:lower:]' || echo 'unknown')\"\nOS_TYPE=\"$(echo $OSTYPE | tr '[:upper:]' '[:lower:]' || echo 'unknown')\"\nCPU_ARCH=\"$(uname -m || echo 'unknown')\"\nOS_DISTRO=\"$(cat /etc/os-release 2>/dev/null | grep -E '^ID=.*' | sed -e 's/^ID=\\(.*\\)/\\1/g')\"\n\nssh-keygen -vvvv -t ed25519 -C \"ssh://${USER}@$(hostname)/?arch=${CPU_ARCH}&os=${OS_TYPE}&distro=${OS_DISTRO}&timestamp=$(date +'%Y-%m-%dT%H:%M:%S')\"\ncat ~/.ssh/id_ed25519.pub >> \"${HOME}/.ssh/authorized_keys\"\ncat ~/.ssh/id_ed25519.pub\n```\n\n----------------------------------------\n\nTITLE: Using Ollama Models with Genkit\nDESCRIPTION: Python code demonstrating how to use Ollama models for text generation and embedding with Genkit. This shows the syntax for specifying Ollama models using the 'ollama/' prefix.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/ollama.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngenereate_response = await ai.generate(\n    prompt='...',\n    model='ollama/gemma3',\n)\n\nembedding_response = await ai.embed(\n    embedder='ollama/nomic-embed-text',\n    documents=[Document.from_text('...')],\n)\n```\n\n----------------------------------------\n\nTITLE: Running Deliciousness Evaluator Tests in Firebase GenKit\nDESCRIPTION: Command to run the deliciousness evaluator tests using a specific dataset.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/custom-evaluators/README.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngenkit eval:run datasets/deliciousness_dataset.json --evaluators=byo/deliciousness\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloud Run with Vertex AI\nDESCRIPTION: Command to deploy the Genkit flow to Cloud Run for use with Vertex AI.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_5\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud run deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Genkit Development Server with Custom Script\nDESCRIPTION: This bash command demonstrates how to start the Genkit development server and run a custom Python script 'sample.py' using the 'uv' runner.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run sample.py\n```\n\n----------------------------------------\n\nTITLE: Running the Gemini Image Generation Sample\nDESCRIPTION: Command to execute the image generation sample script using uv runner.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/google-genai-image/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run src/google_genai_image.py\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests via a platform of choice. Requires a package that implements end-to-end testing capabilities to be added first.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/genkit-app/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Starting Developer UI - POSIX Terminal Command\nDESCRIPTION: Command to start the Genkit Developer UI for interactive flow testing.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/deploy-node.md#2025-04-22_snippet_6\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit start -- npm run start\n```\n\n----------------------------------------\n\nTITLE: JavaScript Project Setup\nDESCRIPTION: Commands for setting up JavaScript dependencies using pnpm package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Generative AI API Key Inline\nDESCRIPTION: TypeScript code snippet for inline configuration of the Google Generative AI API key. This method is not recommended for production use.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleAI({ apiKey: yourKey });\n```\n\n----------------------------------------\n\nTITLE: Packing Built Firebase Genkit Packages\nDESCRIPTION: Command to pack all built packages for testing, executed from the root directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack:all\n```\n\n----------------------------------------\n\nTITLE: Installing NVM (Node Version Manager)\nDESCRIPTION: Command for installing NVM on Unix-like systems\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_8\n\nLANGUAGE: posix-terminal\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Example AI-Generated Markdown Output\nDESCRIPTION: Shows sample output from the Genkit generate() call in markdown format, demonstrating the structure and style of generated content.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/models.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## The Blackheart's Bounty\n\n**A hearty stew of slow-cooked beef, spiced with rum and molasses, served in a\nhollowed-out cannonball with a side of crusty bread and a dollop of tangy\npineapple salsa.**\n\n**Description:** This dish is a tribute to the hearty meals enjoyed by pirates\non the high seas. The beef is tender and flavorful, infused with the warm spices\nof rum and molasses. The pineapple salsa adds a touch of sweetness and acidity,\nbalancing the richness of the stew. The cannonball serving vessel adds a fun and\nthematic touch, making this dish a perfect choice for any pirate-themed\nadventure.\n```\n\n----------------------------------------\n\nTITLE: System Architecture Diagram with D2\nDESCRIPTION: This diagram illustrates the system architecture of Genkit, showing the relationships between the runtime components, user application, library, and tooling. It visualizes how different parts of the system interact.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/index.md#2025-04-22_snippet_2\n\nLANGUAGE: d2\nCODE:\n```\nvars: {\n  d2-config: {\n    layout-engine: elk\n    theme-id: 300\n    sketch: true\n  }\n}\nruntime: \"Runtime (Go, Python, Node.js, ...)\" {\n  app: User Application {\n    shape: package\n  }\n\n  library: \"Library\" {\n    plugins: \"Plugins\\n(pinecone,\\ngoogleai,\\nvertexai...)\"\n    veneers: \"Veneers\\n(ai.generateFlow,\\nai.defineFlow, ...)\"\n    registry: {\n      shape: stored_data\n      style.multiple: true\n    }\n    otel: \"OpenTelemetry\"\n    actions: \"Actions\"\n    reflection_api: \"Reflection API\"\n\n    plugins -> registry: Define models, etc.\n    plugins -> actions: Define\n    veneers -> registry\n    veneers -> actions\n    reflection_api -> registry: Lookup\n    reflection_api -> actions: Run\n    actions -> otel: Implement\n  }\n\n  app -> library.plugins: Uses\n  app -> library.veneers: Uses\n}\ntooling: \"Tooling\" {\n  runtime_manager\n  dev_console: Developer Console UI {\n    shape: document\n  }\n  telemetry_server: Telemetry Server\n  trace_store: Trace Store {\n    shape: cylinder\n  }\n  eval_and_dataset_store: Evaluation & Dataset Store {\n    shape: cylinder\n  }\n\n  dev_console -> runtime_manager: Uses\n  dev_console -> telemetry_server: Reports to\n  dev_console -> eval_and_dataset_store: Reads from and writes to\n  telemetry_server -> trace_store: Writes to\n}\n\nruntime.library.otel -> tooling.telemetry_server: Reports to\ntooling.runtime_manager -> runtime.library.reflection_api: Uses\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Local Vector Store Plugin - Bash\nDESCRIPTION: Command to install the Genkit Dev Local Vector Store plugin using pip\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/dev-local-vectorstore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install genkit-plugin-dev-local-vectorstore\n```\n\n----------------------------------------\n\nTITLE: Setting Google Generative AI API Key as Environment Variable\nDESCRIPTION: Command to set up the Google Generative AI API key as an environment variable for secure access.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Initializing Genkit with Vertex AI Plugin\nDESCRIPTION: Shows how to initialize Genkit with the Vertex AI plugin, which registers models, embedders, and other components with the Genkit registry.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Running PDF Indexing Sample\nDESCRIPTION: Command for indexing PDF files using the indexPdf flow.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"./docs/cat-handbook.pdf\"\n```\n\n----------------------------------------\n\nTITLE: Running with Specific Python Version in Bash\nDESCRIPTION: Command to run the short-n-long example with a specific Python version (3.10) using uv's --python flag.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/short-n-long/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run --python python3.10 src/short_n_long/main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Commands to set required environment variables for project configuration\nSOURCE: https://github.com/firebase/genkit/blob/main/go/samples/firebase-retrievers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport FIREBASE_PROJECT_ID=your-project-id\nexport FIRESTORE_COLLECTION=your-collection-name\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using Karma test runner. This will launch the configured test environment and run all specified unit tests.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/genkit-app/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Getting Angular CLI Help\nDESCRIPTION: Command to display help information about Angular CLI.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/genkit-app/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Google Cloud CLI\nDESCRIPTION: Commands to authenticate with Google Cloud and initialize the CLI with a selected project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud auth login\n\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Running the Application in Development Mode\nDESCRIPTION: Commands to start the application in development mode using either npm or pnpm.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application for production. The compiled output will be stored in the 'dist/' directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/genkit-app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js\nDESCRIPTION: Command to install Node.js version 20 using NVM\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_9\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Setting Up Genkit CI/CD Environment\nDESCRIPTION: Command to run the Genkit setup script with CI/CD configuration for continuous integration systems.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npy/bin/setup -a ci\n```\n\n----------------------------------------\n\nTITLE: ASCII Diagram of Genkit API Architecture\nDESCRIPTION: This ASCII diagram illustrates the architecture of the Genkit API, showing the relationships between RegistrarMixin, Registry, GenkitExperimental, AsyncGenkit, and SyncGenkit classes.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_5\n\nLANGUAGE: ascii\nCODE:\n```\n+---------------------+      +-------------------+\n|   RegistrarMixin    |      |      Registry     |\n|---------------------|      |-------------------|\n| - _registry         |<>----|(placeholder type) |  (Composition: RegistrarMixin has a Registry)\n|---------------------|      +-------------------+\n| + __init__(registry)|\n| + flow()            |\n| + tool()            |\n| + registry (prop)   |\n+--------^------------+\n         | (Inheritance: GenkitExperimental is-a RegistrarMixin)\n+--------|-----------------+      +----------------------+     +----------------------+\n|  GenkitExperimental      |----->|      AsyncGenkit     |     |       SyncGenkit     |\n| (in _veneer.py)          |<>--  | (in _async.py)       |     | (in _sync.py)        |\n|--------------------------|  |   |----------------------|     |----------------------|\n| - _registry (inherited)  |  |   | + generate()         |     | + generate()         |\n| - _async_ai : AsyncGenkit|  |   | + generate_stream()  |     | + generate_stream()  |\n| - _sync_ai : SyncGenkit  |  *-->+----------------------+     *-->+----------------------+\n|--------------------------|        (Async Implementation)        (Independent Sync Impl.)\n| + __init__(registry)     |\n| + flow() (inherited)     |\n| + tool() (inherited)     |\n|                          |\n| + generate() ----------> calls _sync_ai.generate()\n| + generate_stream() ---> calls _sync_ai.generate_stream()\n|                          |\n| + agenerate() ---------> calls _async_ai.generate()\n| + agenerate_stream() --> calls _async_ai.generate_stream()\n|                          |\n| + aio (prop) ---------> returns _async_ai instance\n| + io (prop) ----------> returns _sync_ai instance\n+--------------------------+\n```\n\n----------------------------------------\n\nTITLE: Installing Firestore Vector Store Plugin\nDESCRIPTION: Command to install the Firebase plugin for Genkit using pip\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/firestore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install genkit-plugin-firebase\n```\n\n----------------------------------------\n\nTITLE: Incorrect dynamic tool definition in flow\nDESCRIPTION: JavaScript code showing the incorrect pattern of defining tools dynamically within a flow in Genkit 0.9.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nconst flow = defineFlow({...}, async (input) => {\n  const tool = defineTool({...});\n  await tool(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Context Providers\nDESCRIPTION: Demonstrates how to implement authentication using context providers in Genkit Express. Shows error handling and custom authorization header validation.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/express/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserFacingError } from 'genkit';\nimport { ContextProvider, RequestData } from 'genkit/context';\n\nconst context: ContextProvider<Context> = (req: RequestData) => {\n  if (req.headers['authorization'] !== 'open sesame') {\n    throw new UserFacingError('PERMISSION_DENIED', 'not authorized');\n  }\n  return {\n    auth: {\n      user: 'Ali Baba',\n    },\n  };\n};\n\napp.post(\n  '/simpleFlow',\n  authMiddleware,\n  expressHandler(simpleFlow, { context })\n);\n```\n\n----------------------------------------\n\nTITLE: Genkit Developer UI Terminal Output Example\nDESCRIPTION: Example of the terminal output when the Genkit Developer UI starts successfully, showing the addresses for the Telemetry API and Developer UI interface.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\nTelemetry API running on http://localhost:4033\nGenkit Developer UI: http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables setup for connecting to Google Cloud services including BigQuery and Vertex AI Vector Search.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/vertexai-vector-search-bigquery/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ID=your-google-cloud-project-id\nLOCATION=your-vertex-ai-location\nBIGQUERY_DATASET=your_bigquery_dataset_here\nBIGQUERY_TABLE=your_bigquery_table_here\nVECTOR_SEARCH_PUBLIC_DOMAIN_NAME=your-vector-search-public-domain-name\nVECTOR_SEARCH_INDEX_ENDPOINT_ID=your-index-endpoint-id\nVECTOR_SEARCH_INDEX_ID=your-index-id\nVECTOR_SEARCH_DEPLOYED_INDEX_ID=your-deployed-index-id\nGOOGLE_APPLICATION_CREDENTIALS=path-to-your-service-account-key.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Header\nDESCRIPTION: Simple markdown header indicating the overview section of documentation.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/user_guide/typescript/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Overview\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloud Run with Google AI API Key\nDESCRIPTION: Command to deploy the Genkit flow to Cloud Run, updating secrets for the Google AI API key.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/cloud-run.md#2025-04-22_snippet_4\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngcloud run deploy --update-secrets=GOOGLE_GENAI_API_KEY=<your-secret-name>:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or pnpm\nDESCRIPTION: Commands to install the necessary dependencies for the application using either npm or pnpm package managers.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Expected Output Format\nDESCRIPTION: Shows the expected result after copying, with content properly placed in each sink location including warning comments and source attribution.\nSOURCE: https://github.com/firebase/genkit/blob/main/go/internal/cmd/copy/testdata/multiple.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n//copy:sink one from source\n// DO NOT MODIFY below vvvv\na\nb\nc\nf\ng\n// DO NOT MODIFY above ^^^^\n//copy:endsink one\n//copy:sink two from source\n// DO NOT MODIFY below vvvv\ne\n// DO NOT MODIFY above ^^^^\n//copy:endsink two\n//copy:sink one from source\n// DO NOT MODIFY below vvvv\na\nb\nc\nf\ng\n// DO NOT MODIFY above ^^^^\n//copy:endsink one\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Cloud Run Project\nDESCRIPTION: Command to initialize a new Go module in the project directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/cloud-run.md#2025-04-22_snippet_2\n\nLANGUAGE: posix-terminal\nCODE:\n```\ngo mod init example/cloudrun\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header Template for Python Files\nDESCRIPTION: Standard Apache 2.0 license header that should be included at the top of each Python source file in the project. The year should be updated to reflect the current year.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/coding_guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Copyright 2025 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Google Gemini API Key\nDESCRIPTION: Example showing how to provide the API key directly when initializing the GoogleAI plugin.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/plugins/google-genai.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nai = Genkit(\n  plugins=[GoogleAI(api_key='...')]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Command to create and navigate to a new project directory for Genkit\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nmkdir genkit-intro && cd genkit-intro\n```\n\n----------------------------------------\n\nTITLE: Installing Chrome for Puppeteer Tests\nDESCRIPTION: Command to install the development build of Chrome browser required for Puppeteer-based tests.\nSOURCE: https://github.com/firebase/genkit/blob/main/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx puppeteer browsers install chrome\n```\n\n----------------------------------------\n\nTITLE: Importing Google Cloud Plugin\nDESCRIPTION: Import statement for including the Google Cloud plugin in a Genkit project.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/firebase/genkit/go/plugins/googlecloud\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent System with Genkit in JavaScript\nDESCRIPTION: Demonstrates how to create a system of specialized agents in JavaScript using Genkit. The example sets up a triage agent that routes customer queries to specialized agents for reservations, menu information, or complaints, creating a hierarchical AI customer service system.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/index.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { genkit, z } from 'genkit';\nimport { googleAI, gemini15Flash } from '@genkit-ai/googleai';\n\nconst ai = genkit({\n  plugins: [googleAI()],\n  model: gemini15Flash,\n});\n\n// Define prompts that represent specialist agents\nconst reservationAgent = ai.definePrompt(\n  {\n    name: 'reservationAgent',\n    description: 'Reservation Agent can help manage guest reservations',\n    tools: [reservationTool, reservationCancelationTool, reservationListTool],\n\n  },\n  `{% verbatim %}{{role \"system\"}}{% endverbatim %} Help guests make and manage reservations`\n);\n\nconst menuInfoAgent = ...\nconst complaintAgent = ...\n\n// Define a triage agent that routes to the proper specialist agent\nconst triageAgent = ai.definePrompt(\n  {\n    name: 'triageAgent',\n    description: 'Triage Agent',\n    tools: [reservationAgent, menuInfoAgent, complaintAgent],\n  },\n  `{% verbatim %}{{role \"system\"}}{% endverbatim %} You are an AI customer service agent for Pavel's Cafe.\n  Greet the user and ask them how you can help. If appropriate, transfer to an\n  agent that can better handle the request. If you cannot help the customer\n  with the available tools, politely explain so.`\n);\n\n// Create a chat to enable multi-turn agent interactions\nconst chat = ai.chat(triageAgent);\n\nchat.send('I want a reservation at Pavel\\'s Cafe for noon on Tuesday.' );\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server. Once running, the application can be accessed at http://localhost:4200/ and will automatically reload when source files are changed.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/genkit-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Importing Ollama Plugin in Go\nDESCRIPTION: Import statement for including the Ollama plugin in a Go project using Genkit.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/ollama.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nimport \"github.com/firebase/genkit/go/plugins/ollama\"\n```\n\n----------------------------------------\n\nTITLE: Creating IDX Button in Markdown with HTML\nDESCRIPTION: This snippet creates a button to open the project in IDX. It uses HTML within Markdown, including picture and source elements to handle different color schemes.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-character-generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://idx.google.com/new?template=https%3A%2F%2Fgithub.com%2Ffirebase%2Fgenkit%2Ftree%2Fmain%2Fsamples%2Fjs-character-generator\">\n  <picture>\n    <source\n      media=\"(prefers-color-scheme: dark)\"\n      srcset=\"https://cdn.idx.dev/btn/open_dark_32.svg\">\n    <source\n      media=\"(prefers-color-scheme: light)\"\n      srcset=\"https://cdn.idx.dev/btn/open_light_32.svg\">\n    <img\n      height=\"32\"\n      alt=\"Open in IDX\"\n      src=\"https://cdn.idx.dev/btn/open_purple_32.svg\">\n  </picture>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Expected Output Result\nDESCRIPTION: Final file content showing how copy blocks are merged into sink locations with added warning comments.\nSOURCE: https://github.com/firebase/genkit/blob/main/go/internal/cmd/copy/testdata/simple.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nline1\n//copy:sink bar from source\n// DO NOT MODIFY below vvvv\nsixth\n// DO NOT MODIFY above ^^^^\n//copy:endsink bar\nline2\n//copy:sink foo from source\n// DO NOT MODIFY below vvvv\nthird\nfourth\n// DO NOT MODIFY above ^^^^\n//copy:endsink foo\n```\n\n----------------------------------------\n\nTITLE: Source File Content Example\nDESCRIPTION: Source file containing multiple copy blocks marked with start/stop directives that can be copied to different destinations.\nSOURCE: https://github.com/firebase/genkit/blob/main/go/internal/cmd/copy/testdata/simple.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfirst\nsecond\n//copy:start dest foo\nthird\nfourth\n//copy:stop\nfifth\n//copy:start dest bar\nsixth\n//copy:stop\nseventh\n```\n\n----------------------------------------\n\nTITLE: Defining Default Query for War and Peace Analysis\nDESCRIPTION: TypeScript code snippet defining a default query for analyzing the character Pierre Bezukhov in War and Peace.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultQuery =\n  \"Describe Pierre Bezukhov's transformation throughout the novel.\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Account\nDESCRIPTION: Command to authenticate using Google Cloud CLI with service account impersonation for local testing.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/observability/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login --impersonate-service-account SERVICE_ACCT_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Installing Genkit CLI\nDESCRIPTION: Global installation of the Genkit command line interface using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g genkit-cli\n```\n\n----------------------------------------\n\nTITLE: Packing JavaScript Packages\nDESCRIPTION: Command for creating distribution packages and zip file.\nSOURCE: https://github.com/firebase/genkit/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack:all\n```\n\n----------------------------------------\n\nTITLE: Authenticating GitHub CLI with your GitHub Account\nDESCRIPTION: Command to authenticate the GitHub CLI with your GitHub account credentials.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngh auth login\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests using a platform of choice. Note that a package implementing end-to-end testing capabilities must be added before using this command.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/genkit-app/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on Fedora\nDESCRIPTION: Command to install the GitHub CLI tool on Fedora Linux distribution using dnf package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install gh\n```\n\n----------------------------------------\n\nTITLE: Getting Angular CLI Help\nDESCRIPTION: Command to access Angular CLI help documentation. This provides information about available commands and their options.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-chatbot/genkit-app/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Installing new Genkit CLI\nDESCRIPTION: Command to install the new Genkit CLI as a development dependency.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/migrating-from-0.5.md#2025-04-22_snippet_1\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm i -D genkit-cli\n```\n\n----------------------------------------\n\nTITLE: Checking Genkit Analytics Opt-Out Status\nDESCRIPTION: Command to check the current setting of the analyticsOptOut configuration flag, which determines whether analytics are being collected.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/devtools.md#2025-04-22_snippet_7\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpx genkit config get analyticsOptOut\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on Debian/Ubuntu\nDESCRIPTION: Command to install the GitHub CLI tool on Debian or Ubuntu Linux distributions using apt package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install gh\n```\n\n----------------------------------------\n\nTITLE: Running the SSH Key Generation Script\nDESCRIPTION: Command to make the SSH key generation script executable and run it from the current directory.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod a+x gen_ssh_key.sh\n./gen_ssh_key.sh\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using Karma test runner.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-angular/genkit-app/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Destination Block Definition\nDESCRIPTION: Defines the destination sinks where content will be copied. Contains three sink declarations, two with name 'one' and one with name 'two'.\nSOURCE: https://github.com/firebase/genkit/blob/main/go/internal/cmd/copy/testdata/multiple.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n//copy:sink one\n//copy:sink two\n//copy:sink one\n```\n\n----------------------------------------\n\nTITLE: Configuring Git with User Information\nDESCRIPTION: Commands to configure Git with your legal name and email address for commit attribution.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/contributing/index.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit config user.email \"{username}@domain.com\"\ngit config user.Name \"Your Legal Name.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Google AI API Key for School Agent\nDESCRIPTION: This command sets the Google AI API key as an environment variable for use in the School Agent project.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-schoolAgent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Genkit Menu Sample with UV\nDESCRIPTION: This command starts the Firebase Genkit menu sample using the UV package runner to execute a Python script. It demonstrates how to launch the menu example application.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/samples/menu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenkit start -- uv run src/menu_example.py\n```\n\n----------------------------------------\n\nTITLE: Using Genkit Client Library for API Calls in TypeScript\nDESCRIPTION: This code snippet shows how to use the Genkit client library to call the API endpoints. It demonstrates running a flow synchronously, with authentication headers, and streaming the results. The 'runFlow' and 'streamFlow' functions are used from the '@genkit-ai/nextjs/client' package.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/plugins/next/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { runFlow, streamFlow } from '@genkit-ai/nextjs/client';\nimport { simpleFlow } from '@/genkit/simpleFlow';\n\nconst result = await runFlow<typeof simpleFlow>({\n  url: '/api/simpleFlow',\n  input: 'say hello',\n});\n\nconsole.log(result); // hello\n\n// set auth headers (when using auth policies)\nconst result = await runFlow<typeof simpleFlow>({\n  url: `/api/simpleFlow`,\n  headers: {\n    Authorization: 'open sesame',\n  },\n  input: 'say hello',\n});\n\nconsole.log(result); // hello\n\n// and streamed\nconst result = streamFlow<typeof simpleFlow>({\n  url: '/api/simpleFlow',\n  input: 'say hello',\n});\nfor await (const chunk of result.stream()) {\n  console.log(chunk.output);\n}\nconsole.log(await result.output());\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for School Agent Project\nDESCRIPTION: This command installs the necessary dependencies for the School Agent project using npm.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-schoolAgent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating LLM-based Evaluator Action in TypeScript\nDESCRIPTION: Implements the evaluator action that combines the prompt and scoring function into a complete Genkit evaluator.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EvaluatorAction } from 'genkit/evaluator';\n\nexport function createDeliciousnessEvaluator<\n  ModelCustomOptions extends z.ZodTypeAny,\n>(\n  ai: Genkit,\n  judge: ModelArgument<ModelCustomOptions>,\n  judgeConfig?: z.infer<ModelCustomOptions>\n): EvaluatorAction {\n  return ai.defineEvaluator(\n    {\n      name: `myCustomEvals/deliciousnessEvaluator`,\n      displayName: 'Deliciousness',\n      definition: 'Determines if output is considered delicous.',\n      isBilled: true,\n    },\n    async (datapoint: BaseEvalDataPoint) => {\n      const score = await deliciousnessScore(ai, judge, datapoint, judgeConfig);\n      return {\n        testCaseId: datapoint.testCaseId,\n        evaluation: score,\n      };\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Type for Genkit Model Plugin in Golang\nDESCRIPTION: Example of a configuration type definition for a Genkit model plugin. It embeds the common configuration type and adds model-specific options like temperature, top_k, and top_p parameters.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugin-authoring-models.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n// Define a config type for this model.\ntype Config struct {\n\t// Embed the common config, which contains frequently-used settings.\n\tai.GenerationCommonConfig\n\t// Add any model-specific configs here.\n\tTemperature *float32 `json:\"temperature,omitempty\"`\n\tTopK        *int     `json:\"top_k,omitempty\"`\n\tTopP        *float32 `json:\"top_p,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Genkit Concurrency Handling\nDESCRIPTION: This pseudocode outlines the logic for handling concurrency in different scenarios, including short-lived applications and long-lived servers, with and without dev mode enabled.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/engdoc/extending/api.md#2025-04-22_snippet_8\n\nLANGUAGE: pseudocode\nCODE:\n```\nif short lived app:\n  if dev mode enabled:\n    add reflection server coroutine to the event loop so main thread waits for dev UI debugging\n  else:\n    complete all flows and exit normally\nelif long-lived server:\n  if dev mode enabled:\n    add reflection server coroutine to the server manager to enable debuggging using dev UI\n  else:\n    run user-defined servers using server manager\n```\n\n----------------------------------------\n\nTITLE: Sample Test Dataset in JSON\nDESCRIPTION: Example JSON dataset for testing the deliciousness evaluator with test cases for delicious and less delicious items.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugin-authoring-evaluator.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"testCaseId\": \"delicous_mango\",\n    \"input\": \"What is a super delicious fruit\",\n    \"output\": \"A perfectly ripe mango â sweet, juicy, and with a hint of tropical sunshine.\"\n  },\n  {\n    \"testCaseId\": \"disgusting_soggy_cereal\",\n    \"input\": \"What is something that is tasty when fresh but less tasty after some time?\",\n    \"output\": \"Stale, flavorless cereal that's been sitting in the box too long.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Source Block Definition with Multiple Copy Blocks\nDESCRIPTION: Defines source content with multiple copy blocks targeting different destinations. Contains three copy blocks, two targeting 'dest one' and one targeting 'dest two'.\nSOURCE: https://github.com/firebase/genkit/blob/main/go/internal/cmd/copy/testdata/multiple.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n//copy:start dest one\na\nb\nc\n//copy:stop\nd\n//copy:start dest two\ne\n//copy:stop\n//copy:start dest one\nf\ng\n//copy:stop\nh\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud Authentication for Genkit Application\nDESCRIPTION: Commands to authenticate with Google Cloud for running the application. This process can be skipped when running on Google Cloud IDX platform.\nSOURCE: https://github.com/firebase/genkit/blob/main/samples/js-menu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\ngcloud auth application-default login --project YOUR_PROJECT\n```\n\n----------------------------------------\n\nTITLE: Generating Multimodal Embeddings\nDESCRIPTION: Example of generating embeddings for video content\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/vertex-ai.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { multimodalEmbedding001, vertexAI } from '@genkit-ai/vertexai';\n\nconst ai = genkit({\n  plugins: [vertextAI({location: 'us-central1' })],\n});\n\nconst embeddings = await ai.embed({\n  embedder: multimodalEmbedding001,\n  content: {\n    content: [{\n      \"media\": {\n        \"url\": \"gs://cloud-samples-data/generative-ai/video/pixel8.mp4\",\n        \"contentType\": \"video/mp4\"\n      }\n    }]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Google Generative AI API Key as Environment Variable\nDESCRIPTION: Command to set up the Google Generative AI API key as an environment variable for secure access.\nSOURCE: https://github.com/firebase/genkit/blob/main/js/testapps/context-caching2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_GENAI_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Streaming Flow Usage Examples\nDESCRIPTION: Demonstrates how to consume streaming output from a flow and get the complete response.\nSOURCE: https://github.com/firebase/genkit/blob/main/py/docs/reference/flows.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstream, response = menu_suggestion_flow.stream('bistro')\nasync for chunk in stream:\n    print(chunk)\n\nprint(await response)\n```\n\n----------------------------------------\n\nTITLE: Retrieving with Embeddings\nDESCRIPTION: Demonstrates how to use embeddings for content retrieval with a specified embedder.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs-go/plugins/google-genai.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmatches, err := retriever.Retrieve(ctx, embedder, genai.Text(\"query\"), 10)\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Plugin with npm\nDESCRIPTION: Command to install the Firebase plugin using npm package manager.\nSOURCE: https://github.com/firebase/genkit/blob/main/docs/plugins/firebase.md#2025-04-22_snippet_0\n\nLANGUAGE: posix-terminal\nCODE:\n```\nnpm install @genkit-ai/firebase\n```"
  }
]