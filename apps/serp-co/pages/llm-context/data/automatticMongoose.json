[
  {
    "owner": "automattic",
    "repo": "mongoose",
    "content": "TITLE: Basic MongoDB Connection with Mongoose\nDESCRIPTION: Demonstrates the minimum required code to connect to a local MongoDB database using Mongoose. Uses the default port 27017 and connects to a database named 'myapp'.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://127.0.0.1:27017/myapp');\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection with Authentication\nDESCRIPTION: Shows the connection string format for MongoDB connections that require authentication, including username, password, host, port, database, and additional options.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://username:password@host:port/database?options...');\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB with Mongoose\nDESCRIPTION: Example of connecting to a MongoDB database using Mongoose's connect method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait mongoose.connect('mongodb://127.0.0.1/my_database');\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Mongoose Models\nDESCRIPTION: Examples of accessing, instantiating, and saving Mongoose models, as well as finding documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyModel = mongoose.model('ModelName', mySchema);\n\nconst instance = new MyModel();\ninstance.my.key = 'hello';\nawait instance.save();\n\nawait MyModel.find({});\n\nconst instance = await MyModel.findOne({ /* ... */ });\nconsole.log(instance.my.key); // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Documents in Mongoose\nDESCRIPTION: Shows three different ways to create documents: using the new operator with save(), using the create() method, or using insertMany() for batch operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Tank = mongoose.model('Tank', yourSchema);\n\nconst small = new Tank({ size: 'small' });\nawait small.save();\n\n// or\n\nawait Tank.create({ size: 'small' });\n\n// or, for inserting large batches of documents\nawait Tank.insertMany([{ size: 'small' }]);\n```\n\n----------------------------------------\n\nTITLE: Mongoose Connection Event Listeners\nDESCRIPTION: Shows how to set up event listeners for various connection states using mongoose.connection.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connection.on('connected', () => console.log('connected'));\nmongoose.connection.on('open', () => console.log('open'));\nmongoose.connection.on('disconnected', () => console.log('disconnected'));\nmongoose.connection.on('reconnected', () => console.log('reconnected'));\nmongoose.connection.on('disconnecting', () => console.log('disconnecting'));\nmongoose.connection.on('close', () => console.log('close'));\n\nmongoose.connect('mongodb://127.0.0.1:27017/mongoose_test');\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB using Mongoose in Node.js\nDESCRIPTION: Demonstrates how to include Mongoose in a Node.js project and establish a connection to a local MongoDB instance. It uses an async function to handle the connection process.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// getting-started.js\nconst mongoose = require('mongoose');\n\nmain().catch(err => console.log(err));\n\nasync function main() {\n  await mongoose.connect('mongodb://127.0.0.1:27017/test');\n\n  // use `await mongoose.connect('mongodb://user:password@127.0.0.1:27017/test');` if your database has auth enabled\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a User Document with Mongoose in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an interface for a user document, define a schema, create a model, connect to MongoDB, and save a new user. It showcases the basic workflow for using Mongoose with TypeScript.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model, connect } from 'mongoose';\n\n// 1. Create an interface representing a document in MongoDB.\ninterface IUser {\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\n// 2. Create a Schema corresponding to the document interface.\nconst userSchema = new Schema<IUser>({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String\n});\n\n// 3. Create a Model.\nconst User = model<IUser>('User', userSchema);\n\nrun().catch(err => console.log(err));\n\nasync function run() {\n  // 4. Connect to MongoDB\n  await connect('mongodb://127.0.0.1:27017/test');\n\n  const user = new User({\n    name: 'Bill',\n    email: 'bill@initech.com',\n    avatar: 'https://i.imgur.com/dM7Thhn.png'\n  });\n  await user.save();\n\n  console.log(user.email); // 'bill@initech.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a Mongoose Document to MongoDB\nDESCRIPTION: Demonstrates how to save a Mongoose document to the MongoDB database using the save() method. It uses async/await for handling the asynchronous operation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait fluffy.save();\nfluffy.speak();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating that Mongoose Queries are Not Promises\nDESCRIPTION: Illustrates that Mongoose queries are not true Promises despite having a then() method. The example shows that calling then() multiple times on the same query throws an error because queries can only be executed once.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst q = MyModel.updateMany({}, { isDeleted: true });\n\nawait q.then(() => console.log('Update 2'));\n// Throws \"Query was already executed: Test.updateMany({}, { isDeleted: true })\"\nawait q.then(() => console.log('Update 3'));\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Mongoose\nDESCRIPTION: Demonstrates using Mongoose's query API to find documents. This example finds small tanks created after a specific date using chained query methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Tank.find({ size: 'small' }).where('createdDate').gt(oneYearAgo).exec();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Instance Methods in Mongoose Schema\nDESCRIPTION: Shows two ways to add custom instance methods to a schema: through the schema options object and by directly assigning to the methods property.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// define a schema\nconst animalSchema = new Schema({ name: String, type: String },\n  {\n  // Assign a function to the \"methods\" object of our animalSchema through schema options.\n  // By following this approach, there is no need to create a separate TS type to define the type of the instance functions.\n    methods: {\n      findSimilarTypes(cb) {\n        return mongoose.model('Animal').find({ type: this.type }, cb);\n      }\n    }\n  });\n\n// Or, assign a function to the \"methods\" object of our animalSchema\nanimalSchema.methods.findSimilarTypes = function(cb) {\n  return mongoose.model('Animal').find({ type: this.type }, cb);\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try-Catch\nDESCRIPTION: Shows how to handle initial connection errors using async/await with try-catch blocks.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await mongoose.connect('mongodb://127.0.0.1:27017/test');\n} catch (error) {\n  handleError(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mongoose Document Using save()\nDESCRIPTION: Illustrates how to modify a Mongoose document using JavaScript assignments and save the changes to MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoc.name = 'foo';\n\n// Mongoose sends an `updateOne({ _id: doc._id }, { $set: { name: 'foo' } })`\n// to MongoDB.\nawait doc.save();\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Mongoose\nDESCRIPTION: Shows how to delete documents matching a specific filter using the deleteOne() method. Mongoose also provides deleteMany() for removing multiple documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait Tank.deleteOne({ size: 'large' });\n```\n\n----------------------------------------\n\nTITLE: Defining a Mongoose Schema\nDESCRIPTION: Example of defining a Mongoose Schema for a blog post, including various data types and ObjectId.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst BlogPost = new Schema({\n  author: ObjectId,\n  title: String,\n  body: String,\n  date: Date\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TimeSeries Collections in Mongoose\nDESCRIPTION: Demonstrates how to use the 'timeseries' option to create a TimeSeries collection in MongoDB. This is useful for efficiently storing and querying time-based data.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = Schema({ name: String, timestamp: Date, metadata: Object }, {\n  timeseries: {\n    timeField: 'timestamp',\n    metaField: 'metadata',\n    granularity: 'hours'\n  },\n  autoCreate: false,\n  expireAfterSeconds: 86400\n});\n\n// `Test` collection will be a timeseries collection\nconst Test = db.model('Test', schema);\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Mongoose Pre-save Middleware\nDESCRIPTION: Illustrates multiple ways to handle errors in Mongoose pre-save middleware, including using next(err), returning rejected promises, and throwing errors in both synchronous and asynchronous contexts.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('save', function(next) {\n  const err = new Error('something went wrong');\n  // If you call `next()` with an argument, that argument is assumed to be\n  // an error.\n  next(err);\n});\n\nschema.pre('save', function() {\n  // You can also return a promise that rejects\n  return new Promise((resolve, reject) => {\n    reject(new Error('something went wrong'));\n  });\n});\n\nschema.pre('save', function() {\n  // You can also throw a synchronous error\n  throw new Error('something went wrong');\n});\n\nschema.pre('save', async function() {\n  await Promise.resolve();\n  // You can also throw an error in an `async` function\n  throw new Error('something went wrong');\n});\n\n// later...\n\n// Changes will not be persisted to MongoDB because a pre hook errored out\nmyDoc.save(function(err) {\n  console.log(err.message); // something went wrong\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Mongoose Schema\nDESCRIPTION: Demonstrates how to define indexes in Mongoose schemas at both path level and schema level. Shows index configuration options and auto-index settings.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst animalSchema = new Schema({\n  name: String,\n  type: String,\n  tags: { type: [String], index: true } // path level\n});\n\nanimalSchema.index({ name: 1, type: -1 }); // schema level\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Streams with Mongoose\nDESCRIPTION: Shows how to use MongoDB change streams with Mongoose to listen for database changes. This example creates a model and sets up a watch() listener that logs all changes.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  // Create a new mongoose model\n  const personSchema = new mongoose.Schema({\n    name: String\n  });\n  const Person = mongoose.model('Person', personSchema);\n\n  // Create a change stream. The 'change' event gets emitted when there's a\n  // change in the database\n  Person.watch().\n    on('change', data => console.log(new Date(), data));\n\n  // Insert a doc, will trigger the change stream handler above\n  console.log(new Date(), 'Inserting doc');\n  await Person.create({ name: 'Axl Rose' });\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Error Event Handler\nDESCRIPTION: Shows how to handle errors that occur after the initial connection is established using event listeners.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connection.on('error', err => {\n  logError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose via npm\nDESCRIPTION: Command to install Mongoose package using npm. This is the first step in setting up a project with Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install mongoose --save\n```\n\n----------------------------------------\n\nTITLE: Avoiding Duplicate Query Execution in Mongoose\nDESCRIPTION: This snippet illustrates a common pitfall that leads to duplicate query execution in Mongoose, caused by mixing callbacks and promises with queries.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst BlogPost = mongoose.model('BlogPost', new Schema({\n  title: String,\n  tags: [String]\n}));\n\n// Because there's both `await` **and** a callback, this `updateOne()` executes twice\n// and thus pushes the same string into `tags` twice.\nconst update = { $push: { tags: ['javascript'] } };\nawait BlogPost.updateOne({ title: 'Introduction to Promises' }, update, (err, res) => {\n  console.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with Mongoose\nDESCRIPTION: Demonstrates updating documents in the database without returning them using the updateOne() method. The response includes information about the number of documents modified.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Updated at most one doc, `res.nModified` contains the number\n// of docs that MongoDB updated\nawait Tank.updateOne({ size: 'large' }, { name: 'T-90' });\n```\n\n----------------------------------------\n\nTITLE: Defining a Mongoose Schema for Kittens\nDESCRIPTION: Shows how to create a simple Mongoose schema with a single property. This schema will be used to define the structure of kitten documents in the database.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst kittySchema = new mongoose.Schema({\n  name: String\n});\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic Mongoose Query with findOne\nDESCRIPTION: Demonstrates how to use findOne() to query a MongoDB collection with a filter and field selection. The query looks for a person with the last name 'Ghost' and returns only the name and occupation fields.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Person = mongoose.model('Person', yourSchema);\n\n// find each person with a last name matching 'Ghost', selecting the `name` and `occupation` fields\nconst person = await Person.findOne({ 'name.last': 'Ghost' }, 'name occupation');\n// Prints \"Space Ghost is a talk show host\".\nconsole.log('%s %s is a %s.', person.name.first, person.name.last, person.occupation);\n```\n\n----------------------------------------\n\nTITLE: Comparing Promise Chaining and Async/Await with Mongoose\nDESCRIPTION: Demonstrates two approaches to retrieving, updating, and saving a document: traditional promise chaining with .then() versus the more readable async/await pattern. Both examples handle errors appropriately.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/async-await.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Using promise chaining\nfunction thenUpdate() {\n  MyModel.findOne({ firstName: 'franklin', lastName: 'roosevelt' })\n    .then(function(doc) {\n      doc.middleName = 'delano';\n      return doc.save();\n    })\n    .then(console.log)\n    .catch(function(err) {\n      handleError(err);\n    });\n}\n\n// Using async/await\nasync function awaitUpdate() {\n  try {\n    const doc = await MyModel.findOne({\n      firstName: 'franklin',\n      lastName: 'roosevelt'\n    });\n\n    doc.middleName = 'delano';\n\n    console.log(await doc.save());\n  }\n  catch (err) {\n    handleError(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Query Middleware in Mongoose\nDESCRIPTION: Explains the differences between query and document middleware in Mongoose, focusing on the behavior of 'this' in different contexts. Demonstrates how to use query middleware for operations like find() and updateOne().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('find', function() {\n  console.log(this instanceof mongoose.Query); // true\n  this.start = Date.now();\n});\n\nschema.post('find', function(result) {\n  console.log(this instanceof mongoose.Query); // true\n  // prints returned documents\n  console.log('find() returned ' + JSON.stringify(result));\n  // prints number of milliseconds the query took\n  console.log('find() took ' + (Date.now() - this.start) + ' milliseconds');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('updateOne', function() {\n  this.set({ updatedAt: new Date() });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('findOneAndUpdate', async function() {\n  const docToUpdate = await this.model.findOne(this.getQuery());\n  console.log(docToUpdate); // The document that `findOneAndUpdate()` will modify\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('updateOne', { document: true, query: false }, function() {\n  console.log('Updating');\n});\nconst Model = mongoose.model('Test', schema);\n\nconst doc = new Model();\nawait doc.updateOne({ $set: { name: 'test' } }); // Prints \"Updating\"\n\n// Doesn't print \"Updating\", because `Query#updateOne()` doesn't fire\n// document middleware.\nawait Model.updateOne({}, { $set: { name: 'test' } });\n```\n\n----------------------------------------\n\nTITLE: Filtering MongoDB Documents with Mongoose\nDESCRIPTION: Demonstrates how to use Mongoose's query syntax to filter documents. This example uses a regular expression to find all kittens whose names start with 'fluff'.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait Kitten.find({ name: /^fluff/ });\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Promises with Mongoose\nDESCRIPTION: Demonstrates how Mongoose operations like save() and queries return thenables that can be used with then() or await. Shows the basic promise-like functionality built into Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/promises.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Built-in Promises]\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Promise Catch\nDESCRIPTION: Demonstrates how to handle initial connection errors using Promise catch syntax.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://127.0.0.1:27017/test').\n  catch(error => handleError(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a Mongoose Model from a Schema\nDESCRIPTION: Shows how to convert a schema definition into a usable Mongoose model by passing it to mongoose.model() with a model name.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Blog = mongoose.model('Blog', blogSchema);\n// ready to go!\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Mongoose\nDESCRIPTION: Explains the structure of validation errors in Mongoose, including the ValidatorError objects with their properties such as kind, path, value, message, and reason.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Validation Errors]\n```\n\n----------------------------------------\n\nTITLE: Connection Callback and Promise Patterns\nDESCRIPTION: Shows both callback and promise-based approaches to handling mongoose connections.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect(uri, options, function(error) {\n  // Check error in initial connection. There is no 2nd param to the callback.\n});\n\n// Or using promises\nmongoose.connect(uri, options).then(\n  () => { /** ready to use. The `mongoose.connect()` promise resolves to mongoose instance. */ },\n  err => { /** handle initial connection error */ }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Validators in Mongoose Schema\nDESCRIPTION: Demonstrates how to use built-in validators in Mongoose including required fields, min/max for numbers, and various string validators like enum, match, minLength, and maxLength.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Built-in Validators]\n```\n\n----------------------------------------\n\nTITLE: Connection Factory Pattern\nDESCRIPTION: Demonstrates the connection factory pattern for creating and managing multiple database connections.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nmodule.exports = function connectionFactory() {\n  const conn = mongoose.createConnection(process.env.MONGODB_URI);\n\n  conn.model('User', require('../schemas/user'));\n  conn.model('PageView', require('../schemas/pageView'));\n\n  return conn;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Blog Schema in Mongoose\nDESCRIPTION: Demonstrates how to define a schema structure for a blog document with various data types including String, Date, Boolean, and nested objects for metadata.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mongoose from 'mongoose';\nconst { Schema } = mongoose;\n\nconst blogSchema = new Schema({\n  title: String, // String is shorthand for {type: String}\n  author: String,\n  body: String,\n  comments: [{ body: String, date: Date }],\n  date: { type: Date, default: Date.now },\n  hidden: Boolean,\n  meta: {\n    votes: Number,\n    favs: Number\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling a Mongoose Model from Schema\nDESCRIPTION: Creates a Mongoose model named 'Tank' from a schema with name and size properties. Mongoose automatically looks for the plural, lowercased version of the model name in the database.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({ name: String, size: String });\nconst Tank = mongoose.model('Tank', schema);\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB Replica Sets\nDESCRIPTION: Examples of connecting to MongoDB replica sets using different connection string formats.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://user:pw@host1.com:27017,host2.com:27017,host3.com:27017/testdb');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://host1:port1/?replicaSet=rsName');\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Mongoose Schema with Various Types\nDESCRIPTION: Shows how to define a Mongoose schema with multiple SchemaTypes, including String, Buffer, Boolean, Date, Number, Mixed, ObjectId, Array, and Map.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: String,\n  binary: Buffer,\n  living: Boolean,\n  updated: { type: Date, default: Date.now },\n  age: { type: Number, min: 18, max: 65 },\n  mixed: Schema.Types.Mixed,\n  _someId: Schema.Types.ObjectId,\n  decimal: Schema.Types.Decimal128,\n  double: Schema.Types.Double,\n  int32bit: Schema.Types.Int32,\n  array: [],\n  ofString: [String],\n  ofNumber: [Number],\n  ofDates: [Date],\n  ofBuffer: [Buffer],\n  ofBoolean: [Boolean],\n  ofMixed: [Schema.Types.Mixed],\n  ofObjectId: [Schema.Types.ObjectId],\n  ofArrays: [[]],\n  ofArrayOfNumbers: [[Number]],\n  nested: {\n    stuff: { type: String, lowercase: true, trim: true }\n  },\n  map: Map,\n  mapOfString: {\n    type: Map,\n    of: String\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Differentiating Between Promises and Mongoose Queries with Async/Await\nDESCRIPTION: Demonstrates the critical distinction between genuine Promises and Mongoose Query objects when using async/await. Shows how re-observing a Query can cause re-execution, unlike with true Promises.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/async-await.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isPromise(thenable) {\n  return thenable instanceof Promise;\n}\n\n// The fulfillment value of the promise returned by user.save() will always be the same,\n// regardless of how, or how often, we observe it.\nasync function observePromise() {\n  const user = await User.findOne({ firstName: 'franklin', lastName: 'roosevelt' });\n\n  user.middleName = 'delano';\n\n  // Document.prototype.save() returns a *genuine* promise\n  const realPromise = user.save();\n\n  console.log(isPromise(realPromise)); // true\n\n  const awaitedValue = await realPromise;\n\n  realPromise.then(chainedValue => console.log(chainedValue === awaitedValue)); // true\n}\n\n// By contrast, the value we receive when we try to observe the same Query more than\n// once is different every time.  The Query is re-executing.\nasync function observeQuery() {\n  const query = User.findOne({ firstName: 'leroy', lastName: 'jenkins' });\n\n  console.log(isPromise(query)); // false\n\n  const awaitedValue = await query;\n\n  query.then(chainedValue => console.log(chainedValue === awaitedValue)); // false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Connections in Mongoose\nDESCRIPTION: Creates a custom connection to MongoDB and uses it to define a model. This approach allows using multiple database connections in a single application.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = mongoose.createConnection('mongodb://127.0.0.1:27017/test');\nconst Tank = connection.model('Tank', yourSchema);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Arrow Function Issues with Mongoose Schema Features\nDESCRIPTION: Shows why arrow functions cause issues with Mongoose's getter/setter, virtual, and method functionality due to how they handle the 'this' keyword differently than conventional functions.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Do **NOT** use arrow functions as shown below unless you're certain\n// that's what you want. If you're reading this FAQ, odds are you should\n// just be using a conventional function.\nconst schema = new mongoose.Schema({\n  propWithGetter: {\n    type: String,\n    get: v => {\n      // Will **not** be the doc, do **not** use arrow functions for getters/setters\n      console.log(this);\n      return v;\n    }\n  }\n});\n\n// `this` will **not** be the doc, do **not** use arrow functions for methods\nschema.method.arrowMethod = () => this;\nschema.virtual('virtualWithArrow').get(() => {\n  // `this` will **not** be the doc, do **not** use arrow functions for virtuals\n  console.log(this);\n});\n```\n\n----------------------------------------\n\nTITLE: Single Connection Export Pattern\nDESCRIPTION: Shows how to export a single connection with pre-registered models.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// connections/index.js\nconst mongoose = require('mongoose');\n\nconst conn = mongoose.createConnection(process.env.MONGODB_URI);\nconn.model('User', require('../schemas/user'));\n\nmodule.exports = conn;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple MongoDB Connections\nDESCRIPTION: Demonstrates how to create and manage multiple MongoDB connections using createConnection().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst conn = mongoose.createConnection('mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]', options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserModel = conn.model('User', userSchema);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst conn = await mongoose.createConnection(connectionString).asPromise();\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregation Hooks for Soft Delete Filtering in Mongoose\nDESCRIPTION: This snippet demonstrates how to use aggregation hooks in Mongoose to implement soft delete filtering. It adds a $match stage to the beginning of each aggregation pipeline to exclude soft-deleted documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncustomerSchema.pre('aggregate', function() {\n  // Add a $match state to the beginning of each pipeline.\n  this.pipeline().unshift({ $match: { isDeleted: { $ne: true } } });\n});\n```\n\n----------------------------------------\n\nTITLE: Properly Handling Async Function Return Values in Mongoose\nDESCRIPTION: Shows the correct approach to working with values returned by async functions. Either await the function within another async function or use .then() method to access the resolved value.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/async-await.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUser() {\n  const foundUser = await User.findOne({ name: 'bill' });\n  return foundUser;\n}\n\nasync function doStuffWithUser() {\n  // Await the promise returned from calling getUser.\n  const user = await getUser();\n\n  console.log(user); // Prints '{name: 'bill', admin: false}'\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB and Querying Documents in AWS Lambda using Mongoose\nDESCRIPTION: This snippet shows how to create a Lambda function that connects to MongoDB using Mongoose, creates a model, and finds a document. It optimizes the connection process by reusing the connection between function calls.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/lambda.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nlet conn = null;\n\nconst uri = 'YOUR CONNECTION STRING HERE';\n\nexports.handler = async function(event, context) {\n  // Make sure to add this so you can re-use `conn` between function calls.\n  // See https://www.mongodb.com/blog/post/serverless-development-with-nodejs-aws-lambda-mongodb-atlas\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  // Because `conn` is in the global scope, Lambda may retain it between\n  // function calls thanks to `callbackWaitsForEmptyEventLoop`.\n  // This means your Lambda function doesn't have to go through the\n  // potentially expensive process of connecting to MongoDB every time.\n  if (conn == null) {\n    conn = mongoose.createConnection(uri, {\n      // and tell the MongoDB driver to not wait more than 5 seconds\n      // before erroring out if it isn't connected\n      serverSelectionTimeoutMS: 5000\n    });\n\n    // `await`ing connection after assigning to the `conn` variable\n    // to avoid multiple function calls creating new connections\n    await conn.asPromise();\n    conn.model('Test', new mongoose.Schema({ name: String }));\n  }\n\n  const M = conn.model('Test');\n\n  const doc = await M.findOne();\n  console.log(doc);\n\n  return doc;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Mongoose Schema\nDESCRIPTION: Demonstrates how to define MongoDB indexes using schema type options in Mongoose, including regular, unique, and sparse indexes.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema2 = new Schema({\n  test: {\n    type: String,\n    index: true,\n    unique: true // Unique index. If you specify `unique: true`\n    // specifying `index: true` is optional if you do `unique: true`\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Understanding the 'unique' Option in Mongoose Schema\nDESCRIPTION: Clarifies that the 'unique' option in Mongoose schemas is not a validator but a helper for building MongoDB unique indexes. Shows the proper usage and limitations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[require:The `unique` Option is Not a Validator]\n```\n\n----------------------------------------\n\nTITLE: Basic Mongoose Populate with TypeScript Generics\nDESCRIPTION: Demonstrates how to use TypeScript generics with Mongoose's populate() function. Shows the basic setup of Parent and Child models with proper typing and population.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/populate.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model, Document, Types } from 'mongoose';\n\n// `Parent` represents the object as it is stored in MongoDB\ninterface Parent {\n  child?: Types.ObjectId,\n  name?: string\n}\nconst ParentModel = model<Parent>('Parent', new Schema({\n  child: { type: Schema.Types.ObjectId, ref: 'Child' },\n  name: String\n}));\n\ninterface Child {\n  name: string;\n}\nconst childSchema: Schema = new Schema({ name: String });\nconst ChildModel = model<Child>('Child', childSchema);\n\n// Populate with `Paths` generic `{ child: Child }` to override `child` path\nParentModel.findOne({}).populate<{ child: Child }>('child').orFail().then(doc => {\n  // Works\n  const t: string = doc.child.name;\n});\n```\n\n----------------------------------------\n\nTITLE: Starting and Committing a Transaction Manually in Mongoose\nDESCRIPTION: Demonstrates advanced usage of transactions by manually starting, committing, and handling errors in a transaction using session methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/transactions.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Require:transactions.*basic example\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pools\nDESCRIPTION: Demonstrates how to configure connection pool size using both object options and connection string options.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// With object options\nmongoose.createConnection(uri, { maxPoolSize: 10 });\n\n// With connection string options\nconst uri = 'mongodb://127.0.0.1:27017/test?maxPoolSize=10';\nmongoose.createConnection(uri);\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing a Mongoose Document\nDESCRIPTION: Shows how to create a new document instance from a Mongoose model and access its properties. This example creates a kitten document and logs its name.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst silence = new Kitten({ name: 'Silence' });\nconsole.log(silence.name); // 'Silence'\n```\n\n----------------------------------------\n\nTITLE: Using Connection.transaction() for Mongoose Transactions\nDESCRIPTION: Illustrates the use of Mongoose's Connection.transaction() function, which integrates change tracking with transactions and handles rollbacks.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/transactions.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = new Person({ name: 'Will Riker' });\n\nawait db.transaction(async function setRank(session) {\n  doc.name = 'Captain';\n  await doc.save({ session });\n  doc.isNew; // false\n\n  // Throw an error to abort the transaction\n  throw new Error('Oops!');\n}, { readPreference: 'primary' }).catch(() => {});\n\n// true, `transaction()` reset the document's state because the\n// transaction was aborted.\ndoc.isNew;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Change Stream with Event Listeners in Mongoose\nDESCRIPTION: This code demonstrates how to create a change stream using Mongoose's watch() method and listen for changes using the 'change' event. It shows creating a Person model, setting up a change stream listener, and inserting a document to trigger the listener.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/change-streams.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Person = mongoose.model('Person', new mongoose.Schema({ name: String }));\n\n// Create a change stream. The 'change' event gets emitted when there's a\n// change in the database. Print what the change stream emits.\nPerson.watch().\n  on('change', data => console.log(data));\n\n// Insert a doc, will trigger the change stream handler above\nawait Person.create({ name: 'Axl Rose' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Properties in Mongoose Schema\nDESCRIPTION: Demonstrates how to create virtual properties in Mongoose schemas, including getters and setters, with both schema options and virtual method approaches.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst personSchema = new Schema({\n  name: {\n    first: String,\n    last: String\n  }\n}, {\n  virtuals: {\n    fullName: {\n      get() {\n        return this.name.first + ' ' + this.name.last;\n      },\n      set(v) {\n        this.name.first = v.substr(0, v.indexOf(' '));\n        this.name.last = v.substr(v.indexOf(' ') + 1);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Mongoose Schemas from ES6 Classes Using loadClass()\nDESCRIPTION: Demonstrates how to create a Mongoose schema from an ES6 class using the loadClass() function. The example shows how class methods, static methods, and getters/setters map to schema methods, statics, and virtuals in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/advanced_schemas.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Creating from ES6 Classes Using `loadClass\\(\\)`]\n```\n\n----------------------------------------\n\nTITLE: Promise-based Pre-save Middleware in Mongoose\nDESCRIPTION: Shows how to use promises and async/await in Mongoose middleware instead of the next() callback pattern. This approach is available in Mongoose 5.x and later.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('save', function() {\n  return doStuff().\n    then(() => doMoreStuff());\n});\n\n// Or, using async functions\nschema.pre('save', async function() {\n  await doStuff();\n  await doMoreStuff();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Mongoose Document from Model\nDESCRIPTION: Demonstrates creating a new document instance from a Mongoose model and shows the inheritance relationships.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyModel = mongoose.model('Test', new Schema({ name: String }));\nconst doc = new MyModel();\n\ndoc instanceof MyModel; // true\ndoc instanceof mongoose.Model; // true\ndoc instanceof mongoose.Document; // true\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Document and Query Builder Approaches in Mongoose\nDESCRIPTION: Demonstrates two equivalent ways to construct complex queries in Mongoose: using a JSON document and using the query builder with chaining syntax. Both examples filter, sort, limit, and select fields.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// With a JSON doc\nawait Person.\n  find({\n    occupation: /host/,\n    'name.last': 'Ghost',\n    age: { $gt: 17, $lt: 66 },\n    likes: { $in: ['vaporizing', 'talking'] }\n  }).\n  limit(10).\n  sort({ occupation: -1 }).\n  select({ name: 1, occupation: 1 }).\n  exec();\n\n// Using query builder\nawait Person.\n  find({ occupation: /host/ }).\n  where('name.last').equals('Ghost').\n  where('age').gt(17).lt(66).\n  where('likes').in(['vaporizing', 'talking']).\n  limit(10).\n  sort('-occupation').\n  select('name occupation').\n  exec();\n```\n\n----------------------------------------\n\nTITLE: Basic Pre-save Middleware in Mongoose\nDESCRIPTION: Demonstrates how to define a pre-save hook for a Mongoose schema with the next() pattern. This middleware executes before saving a document to the database.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ /* ... */ });\nschema.pre('save', function(next) {\n  // do stuff\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Default Schema _id Property\nDESCRIPTION: Demonstrates how Mongoose automatically adds an _id property to schemas and how to access this path.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema();\n\nschema.path('_id'); // ObjectId { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validators in Mongoose\nDESCRIPTION: Demonstrates how to define custom validators to satisfy specific validation requirements in Mongoose schemas. Shows how to implement conditional validation logic.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Custom Validators]\n```\n\n----------------------------------------\n\nTITLE: Streaming Query Results with Async Iterators in Mongoose\nDESCRIPTION: Demonstrates using async iterators to process query results one at a time. This is a more modern and concise approach to streaming MongoDB documents compared to manual cursor handling.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const doc of Person.find()) {\n  console.log(doc); // Prints documents one at a time\n}\n```\n\n----------------------------------------\n\nTITLE: Post Middleware Hooks in Mongoose\nDESCRIPTION: Shows how to define post middleware hooks for various operations in Mongoose. These hooks execute after the operation completes and are useful for logging or additional processing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nschema.post('init', function(doc) {\n  console.log('%s has been initialized from the db', doc._id);\n});\nschema.post('validate', function(doc) {\n  console.log('%s has been validated (but not saved yet)', doc._id);\n});\nschema.post('save', function(doc) {\n  console.log('%s has been saved', doc._id);\n});\nschema.post('deleteOne', function(doc) {\n  console.log('%s has been deleted', doc._id);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Static Functions for Mongoose Models in TypeScript\nDESCRIPTION: This snippet shows how to define static functions for a Mongoose model in TypeScript. It demonstrates creating an interface that extends Mongoose's Model interface to include static methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics-and-methods.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Schema, model } from 'mongoose';\n\ninterface IUser {\n  name: string;\n}\n\ninterface UserModel extends Model<IUser> {\n  myStaticMethod(): number;\n}\n\nconst schema = new Schema<IUser, UserModel>({ name: String });\nschema.static('myStaticMethod', function myStaticMethod() {\n  return 42;\n});\n\nconst User = model<IUser, UserModel>('User', schema);\n\nconst answer: number = User.myStaticMethod(); // 42\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Connection Pool Multi-Tenancy with Mongoose\nDESCRIPTION: Demonstrates pattern 1 for multi-tenancy using Mongoose's useDb() method to switch between tenant databases while maintaining a single connection pool. This approach is recommended for applications with few tenants or light workloads (<1 request/second).\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://127.0.0.1:27017/main');\nmongoose.set('debug', true);\n\nmongoose.model('User', mongoose.Schema({ name: String }));\n\nconst app = express();\n\napp.get('/users/:tenantId', function(req, res) {\n  const db = mongoose.connection.useDb(`tenant_${req.params.tenantId}`, {\n    // `useCache` tells Mongoose to cache connections by database name, so\n    // `mongoose.connection.useDb('foo', { useCache: true })` returns the\n    // same reference each time.\n    useCache: true\n  });\n  // Need to register models every time a new connection is created\n  if (!db.models['User']) {\n    db.model('User', mongoose.Schema({ name: String }));\n  }\n  console.log('Find users from', db.name);\n  db.model('User').find().\n    then(users => res.json({ users })).\n    catch(err => res.status(500).json({ message: err.message }));\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB with Mongoose Default Connection\nDESCRIPTION: Establishes a connection to MongoDB using the default mongoose connection. This connection will be used by models created with mongoose.model().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait mongoose.connect('mongodb://127.0.0.1/gettingstarted');\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware Before Compiling Models in Mongoose\nDESCRIPTION: Explains the importance of defining middleware and plugins before compiling models in Mongoose. Demonstrates correct and incorrect ways of adding middleware to schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({ name: String });\n\n// Compile a model from the schema\nconst User = mongoose.model('User', schema);\n\n// Mongoose will **not** call the middleware function, because\n// this middleware was defined after the model was compiled\nschema.pre('save', () => console.log('Hello from pre save'));\n\nconst user = new User({ name: 'test' });\nuser.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({ name: String });\n// Mongoose will call this middleware function, because this script adds\n// the middleware to the schema before compiling the model.\nschema.pre('save', () => console.log('Hello from pre save'));\n\n// Compile a model from the schema\nconst User = mongoose.model('User', schema);\n\nconst user = new User({ name: 'test' });\nuser.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({ name: String });\n\n// Once you `require()` this file, you can no longer add any middleware\n// to this schema.\nmodule.exports = mongoose.model('User', schema);\n```\n\n----------------------------------------\n\nTITLE: Using a Defined Mongoose Schema to Create and Save a Document\nDESCRIPTION: Illustrates how to use a defined Mongoose schema to create a new document, set various properties, and save it to the database.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Thing = mongoose.model('Thing', schema);\n\nconst m = new Thing;\nm.name = 'Statue of Liberty';\nm.age = 125;\nm.updated = new Date;\nm.binary = Buffer.alloc(0);\nm.living = false;\nm.mixed = { any: { thing: 'i want' } };\nm.markModified('mixed');\nm._someId = new mongoose.Types.ObjectId;\nm.array.push(1);\nm.ofString.push('strings!');\nm.ofNumber.unshift(1, 2, 3, 4);\nm.ofDates.addToSet(new Date);\nm.ofBuffer.pop();\nm.ofMixed = [1, [], 'three', { four: 5 }];\nm.nested.stuff = 'good';\nm.map = new Map([['key', 'value']]);\nm.save(callback);\n```\n\n----------------------------------------\n\nTITLE: Accessing SchemaType Information in Mongoose\nDESCRIPTION: Demonstrates how to access and check SchemaType information for a specific path in a Mongoose schema.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.path('name') instanceof mongoose.SchemaType; // true\nschema.path('name') instanceof mongoose.Schema.Types.String; // true\nschema.path('name').instance; // 'String'\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Custom Validators in Mongoose\nDESCRIPTION: Shows how to implement asynchronous custom validators using promises or async functions. The validator waits for the promise to settle and validates based on the result.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Async Custom Validators]\n```\n\n----------------------------------------\n\nTITLE: Working with Path-Specific Update Validators in Mongoose\nDESCRIPTION: Shows that update validators only run on paths specified in the update operation and explains how required validators behave differently with update operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Update Validators Only Run On Updated Paths]\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Mongoose Document Method\nDESCRIPTION: Shows how to create a new document instance and use a custom method defined on the schema. This example creates a kitten and calls its 'speak' method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fluffy = new Kitten({ name: 'fluffy' });\nfluffy.speak(); // \"Meow name is fluffy\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Global Plugin for All Schemas in Mongoose\nDESCRIPTION: Shows how to register a plugin at the mongoose singleton level so it's automatically applied to all schemas. This is useful for functionality that should be consistent across all models.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/plugins.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nmongoose.plugin(require('./loadedAt'));\n\nconst gameSchema = new Schema({ /* ... */ });\nconst playerSchema = new Schema({ /* ... */ });\n// `loadedAtPlugin` gets attached to both schemas\nconst Game = mongoose.model('Game', gameSchema);\nconst Player = mongoose.model('Player', playerSchema);\n```\n\n----------------------------------------\n\nTITLE: Creating a Mongoose Model from a Schema\nDESCRIPTION: Demonstrates how to compile a Mongoose schema into a model. The model is a class used to construct documents in MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Kitten = mongoose.model('Kitten', kittySchema);\n```\n\n----------------------------------------\n\nTITLE: Converting from Callbacks to Promises/Async-Await in Mongoose 7\nDESCRIPTION: Shows how to refactor code from using callbacks to using promises or async/await, as Mongoose 7 has dropped callback support for most methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconn.startSession(function(err, session) {\n  // ...\n});\n\n// After\nconst session = await conn.startSession();\n// Or:\nconn.startSession().then(session => { /* ... */ });\n\n// With error handling\ntry {\n  await conn.startSession();\n} catch (err) { /* ... */ }\n// Or:\nconst [err, session] = await conn.startSession().then(\n  session => ([null, session]),\n  err => ([err, null])\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Plugin in Mongoose\nDESCRIPTION: Defines a loadedAtPlugin that adds a virtual 'loadedAt' property to schemas and sets it automatically after find operations. The plugin demonstrates how to create reusable functionality that can be applied to multiple schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/plugins.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// loadedAt.js\nmodule.exports = function loadedAtPlugin(schema, options) {\n  schema.virtual('loadedAt').\n    get(function() { return this._loadedAt; }).\n    set(function(v) { this._loadedAt = v; });\n\n  schema.post(['find', 'findOne'], function(docs) {\n    if (!Array.isArray(docs)) {\n      docs = [docs];\n    }\n    const now = new Date();\n    for (const doc of docs) {\n      doc.loadedAt = now;\n    }\n  });\n};\n\n// game-schema.js\nconst loadedAtPlugin = require('./loadedAt');\nconst gameSchema = new Schema({ /* ... */ });\ngameSchema.plugin(loadedAtPlugin);\n\n// player-schema.js\nconst loadedAtPlugin = require('./loadedAt');\nconst playerSchema = new Schema({ /* ... */ });\nplayerSchema.plugin(loadedAtPlugin);\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling Middleware for Duplicate Key Errors in Mongoose\nDESCRIPTION: This snippet demonstrates how to create error handling middleware for a Mongoose schema to handle duplicate key errors. It uses a post-save hook to catch MongoServerErrors with code 11000 and provides a custom error message.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: {\n    type: String,\n    // Will trigger a MongoServerError with code 11000 when\n    // you save a duplicate\n    unique: true\n  }\n});\n\n// Handler **must** take 3 parameters: the error that occurred, the document\n// in question, and the `next()` function\nschema.post('save', function(error, doc, next) {\n  if (error.name === 'MongoServerError' && error.code === 11000) {\n    next(new Error('There was a duplicate key error'));\n  } else {\n    next();\n  }\n});\n\n// Will trigger the `post('save')` error handler\nPerson.create([{ name: 'Axl Rose' }, { name: 'Axl Rose' }]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Method to Mongoose Schema\nDESCRIPTION: Demonstrates how to add a custom method to a Mongoose schema. This method will be available on all documents created from the model. It also shows how to recompile the model after adding the method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// NOTE: methods must be added to the schema before compiling it with mongoose.model()\nkittySchema.methods.speak = function speak() {\n  const greeting = this.name\n    ? 'Meow name is ' + this.name\n    : 'I don\\'t have a name';\n  console.log(greeting);\n};\n\nconst Kitten = mongoose.model('Kitten', kittySchema);\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Mongoose Schema\nDESCRIPTION: Shows how to implement aliases in Mongoose schemas for property name mapping, including both simple and nested path aliases.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst personSchema = new Schema({\n  n: {\n    type: String,\n    // Now accessing `name` will get you the value of `n`, and setting `name` will set the value of `n`\n    alias: 'name'\n  }\n});\n\n// Setting `name` will propagate to `n`\nconst person = new Person({ name: 'Val' });\nconsole.log(person); // { n: 'Val' }\nconsole.log(person.toObject({ virtuals: true })); // { n: 'Val', name: 'Val' }\nconsole.log(person.name); // \"Val\"\n\nperson.name = 'Not Val';\nconsole.log(person); // { n: 'Not Val' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Type in Mongoose Schema\nDESCRIPTION: Demonstrates how to define and use a Map type in Mongoose schema for storing key-value pairs with arbitrary string keys. Shows proper methods for getting and setting map values.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({\n  socialMediaHandles: {\n    type: Map,\n    of: String\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\nconsole.log(new User({\n  socialMediaHandles: {\n    github: 'vkarpov15',\n    twitter: '@code_barbarian'\n  }\n}).socialMediaHandles);\n```\n\n----------------------------------------\n\nTITLE: Creating a Mongoose Model with a New Connection\nDESCRIPTION: This snippet illustrates how to create a new Mongoose connection and bind a model to it, avoiding the 'OverwriteModelError' when working with testing frameworks or hot reloading.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst connection = mongoose.createConnection(/* ... */);\n\n// use mongoose.Schema\nconst kittySchema = mongoose.Schema({ name: String });\n\n// use connection.model\nconst Kitten = connection.model('Kitten', kittySchema);\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Mutating Method Arguments in Mongoose\nDESCRIPTION: This snippet demonstrates how to use middleware to intercept and modify method arguments in Mongoose. It shows how to broadcast changes when a path is set and how to mutate incoming method arguments for subsequent middleware.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nschema.pre('set', function(next, path, val, typel) {\n  // `this` is the current Document\n  this.emit('set', path, val);\n\n  // Pass control to the next pre\n  next();\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nschema.pre(method, function firstPre(next, methodArg1, methodArg2) {\n  // Mutate methodArg1\n  next('altered-' + methodArg1.toString(), methodArg2);\n});\n\n// pre declaration is chainable\nschema.pre(method, function secondPre(next, methodArg1, methodArg2) {\n  console.log(methodArg1);\n  // => 'altered-originalValOfMethodArg1'\n\n  console.log(methodArg2);\n  // => 'originalValOfMethodArg2'\n\n  // Passing no arguments to `next` automatically passes along the current argument values\n  // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n  // and also equivalent to, with the example method arg\n  // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB with Mongoose\nDESCRIPTION: Shows how to perform a simple query to retrieve all documents of a specific model from MongoDB. It uses the find() method without any arguments to get all kittens.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/index.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst kittens = await Kitten.find();\nconsole.log(kittens);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Connection Issue with createConnection vs connect\nDESCRIPTION: Shows how mongoose operations can time out when not properly connecting to MongoDB. This example illustrates that creating a model on a connection doesn't implicitly connect to MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait mongoose.createConnection(mongodbUri).asPromise();\n\nconst Test = mongoose.model('Test', schema);\n\nawait Test.findOne(); // Will throw \"Operation timed out\" error because didn't call `mongoose.connect()`\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Post Hooks in Mongoose\nDESCRIPTION: Demonstrates how to use asynchronous post hooks in Mongoose, including both callback-style and async/await syntax. Shows how to chain multiple post hooks and handle asynchronous operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Takes 2 parameters: this is an asynchronous post hook\nschema.post('save', function(doc, next) {\n  setTimeout(function() {\n    console.log('post1');\n    // Kick off the second post hook\n    next();\n  }, 10);\n});\n\n// Will not execute until the first middleware calls `next()`\nschema.post('save', function(doc, next) {\n  console.log('post2');\n  next();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nschema.post('save', async function(doc) {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('post1');\n  // If less than 2 parameters, no need to call `next()`\n});\n\nschema.post('save', async function(doc, next) {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  console.log('post1');\n  // If there's a `next` parameter, you need to call `next()`.\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling Middleware for UpdateOne Operations in Mongoose\nDESCRIPTION: This snippet shows how to create error handling middleware for updateOne operations in Mongoose. It catches MongoDB duplicate key errors and provides a custom error message. The middleware function must take 4 parameters.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// The same E11000 error can occur when you call `updateOne()`\n// This function **must** take 4 parameters.\n\nschema.post('updateOne', function(passRawResult, error, res, next) {\n  if (error.name === 'MongoServerError' && error.code === 11000) {\n    next(new Error('There was a duplicate key error'));\n  } else {\n    next(); // The `updateOne()` call will still error out.\n  }\n});\n\nconst people = [{ name: 'Axl Rose' }, { name: 'Slash' }];\nawait Person.create(people);\n\n// Throws \"There was a duplicate key error\"\nawait Person.updateOne({ name: 'Slash' }, { $set: { name: 'Axl Rose' } });\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in Mongoose Middleware\nDESCRIPTION: Demonstrates how to access parameters in Mongoose middleware for both query and document middleware. Shows how to use 'this' for query middleware and the second argument for document middleware.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({ name: String, age: Number });\nuserSchema.pre('findOneAndUpdate', function() {\n  console.log(this.getFilter()); // { name: 'John' }\n  console.log(this.getUpdate()); // { age: 30 }\n});\nconst User = mongoose.model('User', userSchema);\n\nawait User.findOneAndUpdate({ name: 'John' }, { $set: { age: 30 } });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({ name: String, age: Number });\nuserSchema.pre('save', function(next, options) {\n  options.validateModifiedOnly; // true\n\n  // Remember to call `next()` unless you're using an async function or returning a promise\n  next();\n});\nconst User = mongoose.model('User', userSchema);\n\nconst doc = new User({ name: 'John', age: 30 });\nawait doc.save({ validateModifiedOnly: true });\n```\n\n----------------------------------------\n\nTITLE: Operation Buffering Example\nDESCRIPTION: Demonstrates Mongoose's buffering capability, allowing model usage before connection establishment. Shows how to create and use a model immediately after initiating a connection.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://127.0.0.1:27017/myapp');\nconst MyModel = mongoose.model('Test', new Schema({ name: String }));\n// Works\nawait MyModel.findOne();\n```\n\n----------------------------------------\n\nTITLE: Validating Mongoose Documents\nDESCRIPTION: Demonstrates how Mongoose validates documents before saving, including type casting and custom validation rules.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String, age: { type: Number, min: 0 } });\nconst Person = mongoose.model('Person', schema);\n\nconst p = new Person({ name: 'foo', age: 'bar' });\n// Cast to Number failed for value \"bar\" at path \"age\"\nawait p.validate();\n\nconst p2 = new Person({ name: 'foo', age: -1 });\n// Path `age` (-1) is less than minimum allowed value (0).\nawait p2.validate();\n```\n\n----------------------------------------\n\nTITLE: Migrating from remove() to deleteOne() and deleteMany() in Mongoose 7\nDESCRIPTION: Shows how to replace the deprecated remove() method with deleteOne() or deleteMany() for both models and documents. Includes guidance on updating middleware.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySchema = new Schema({ field: Number });\nconst MyModel = mongoose.model('Test', mySchema);\n\n// Change this:\nawait MyModel.remove(filter);\n\n// To this:\nawait MyModel.deleteOne(filter);\n// Or this, if you want to delete multiple:\nawait MyModel.deleteMany(filter);\n\n// For documents, change this:\nawait doc.remove();\n\n// To this:\nawait doc.deleteOne();\n```\n\n----------------------------------------\n\nTITLE: Using Strict Mode in Mongoose Schema\nDESCRIPTION: This snippet illustrates the use of the 'strict' option in Mongoose schemas. It controls whether fields not specified in the schema are saved to the database or ignored.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst thingSchema = new Schema({ /* ... */ })\nconst Thing = mongoose.model('Thing', thingSchema);\nconst thing = new Thing({ iAmNotInTheSchema: true });\nthing.save(); // iAmNotInTheSchema is not saved to the db\n\n// set to false..\nconst thingSchema = new Schema({ /* ... */ }, { strict: false });\nconst thing = new Thing({ iAmNotInTheSchema: true });\nthing.save(); // iAmNotInTheSchema is now saved to the db!!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst thingSchema = new Schema({ /* ... */ });\nconst Thing = mongoose.model('Thing', thingSchema);\nconst thing = new Thing;\nthing.set('iAmNotInTheSchema', true);\nthing.save(); // iAmNotInTheSchema is not saved to the db\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Thing = mongoose.model('Thing');\nconst thing = new Thing(doc, true);  // enables strict mode\nconst thing = new Thing(doc, false); // disables strict mode\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst thingSchema = new Schema({ /* ... */ });\nconst Thing = mongoose.model('Thing', thingSchema);\nconst thing = new Thing;\nthing.iAmNotInTheSchema = true;\nthing.save(); // iAmNotInTheSchema is never saved to the db\n```\n\n----------------------------------------\n\nTITLE: Validating Mongoose Updates\nDESCRIPTION: Shows how to enable validation for update operations in Mongoose using the runValidators option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Cast to number failed for value \"bar\" at path \"age\"\nawait Person.updateOne({}, { age: 'bar' });\n\n// Path `age` (-1) is less than minimum allowed value (0).\nawait Person.updateOne({}, { age: -1 }, { runValidators: true });\n```\n\n----------------------------------------\n\nTITLE: Enabling Mongoose Debugging\nDESCRIPTION: Shows how to enable different debugging options in Mongoose to help troubleshoot queries. Demonstrates basic debug mode, disabling colors, and enabling MongoDB shell-friendly output.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// all executed methods log output to console\nmongoose.set('debug', true);\n\n// disable colors in debug mode\nmongoose.set('debug', { color: false });\n\n// get mongodb-shell friendly output (ISODate)\nmongoose.set('debug', { shell: true });\n```\n\n----------------------------------------\n\nTITLE: Using Update Validators in Mongoose\nDESCRIPTION: Demonstrates how to enable validation for update operations by setting the runValidators option for update(), updateOne(), updateMany(), and findOneAndUpdate() methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Update Validators$]\n```\n\n----------------------------------------\n\nTITLE: Best Practices for Using exec() with await\nDESCRIPTION: Compares the two approaches to using await with Mongoose queries and recommends using .exec() for better stack traces. Shows the functional equivalence between the two methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/promises.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Should You Use `exec\\(\\)` With `await`]\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Methods for Mongoose Models in TypeScript\nDESCRIPTION: This snippet demonstrates how to define instance methods for a Mongoose model using TypeScript. It shows the creation of interfaces for the document and methods, and how to use these with the Schema and Model types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics-and-methods.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Schema, model } from 'mongoose';\n\ninterface IUser {\n  firstName: string;\n  lastName: string;\n}\n\n// Put all user instance methods in this interface:\ninterface IUserMethods {\n  fullName(): string;\n}\n\n// Create a new Model type that knows about IUserMethods...\ntype UserModel = Model<IUser, {}, IUserMethods>;\n\n// And a schema that knows about IUserMethods\nconst schema = new Schema<IUser, UserModel, IUserMethods>({\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true }\n});\nschema.method('fullName', function fullName() {\n  return this.firstName + ' ' + this.lastName;\n});\n\nconst User = model<IUser, UserModel>('User', schema);\n\nconst user = new User({ firstName: 'Jean-Luc', lastName: 'Picard' });\nconst fullName: string = user.fullName(); // 'Jean-Luc Picard'\n```\n\n----------------------------------------\n\nTITLE: Aborting a Transaction Manually in Mongoose\nDESCRIPTION: Shows how to manually abort a transaction using the session.abortTransaction() method for more fine-grained control over transaction flow.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/transactions.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Require:transactions.*abort\n```\n\n----------------------------------------\n\nTITLE: Creating a Session for Transactions in Mongoose\nDESCRIPTION: Demonstrates how to create a session using Mongoose's default connection or a custom connection. Sessions are required to initiate transactions.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/transactions.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Using Mongoose's default connection\nconst session = await mongoose.startSession();\n\n// Using custom connection\nconst db = await mongoose.createConnection(mongodbUri).asPromise();\nconst session = await db.startSession();\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Populate in Mongoose\nDESCRIPTION: Demonstrates how to set up a populated virtual in Mongoose, allowing for virtual references to other collections.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst PersonSchema = new Schema({\n  name: String,\n  band: String\n});\n\nconst BandSchema = new Schema({\n  name: String\n});\n\nBandSchema.virtual('members', {\n  ref: 'Person',\n  localField: 'name',\n  foreignField: 'band'\n});\n\nconst Person = mongoose.model('Person', PersonSchema);\nconst Band = mongoose.model('Band', BandSchema);\n\n// Create a band\nconst band = await Band.create({ name: 'Guns N\\' Roses' });\n\n// Create people in the band\nawait Person.create([\n  { name: 'Axl Rose', band: 'Guns N\\' Roses' },\n  { name: 'Slash', band: 'Guns N\\' Roses' }\n]);\n\nconst doc = await Band.findOne().populate('members');\nconsole.log(doc.members.length); // 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Timestamps in Mongoose Schema\nDESCRIPTION: Demonstrates how to use the timestamps option in a Mongoose schema, including customizing field names and overriding the current time function.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst thingSchema = new Schema({ /* ... */ }, { timestamps: { createdAt: 'created_at' } });\nconst Thing = mongoose.model('Thing', thingSchema);\nconst thing = new Thing();\nawait thing.save(); // `created_at` & `updatedAt` will be included\n\n// With updates, Mongoose will add `updatedAt` to `$set`\nawait Thing.updateOne({}, { $set: { name: 'Test' } });\n\n// If you set upsert: true, Mongoose will add `created_at` to `$setOnInsert` as well\nawait Thing.findOneAndUpdate({}, { $set: { name: 'Test2' } });\n\n// Mongoose also adds timestamps to bulkWrite() operations\n// See https://mongoosejs.com/docs/api/model.html#model_Model-bulkWrite\nawait Thing.bulkWrite([\n  {\n    insertOne: {\n      document: {\n        name: 'Jean-Luc Picard',\n        ship: 'USS Stargazer'\n      // Mongoose will add `created_at` and `updatedAt`\n      }\n    }\n  },\n  {\n    updateOne: {\n      filter: { name: 'Jean-Luc Picard' },\n      update: {\n        $set: {\n          ship: 'USS Enterprise'\n        // Mongoose will add `updatedAt`\n        }\n      }\n    }\n  }\n]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = Schema({\n  createdAt: Number,\n  updatedAt: Number,\n  name: String\n}, {\n  // Make Mongoose use Unix time (seconds since Jan 1, 1970)\n  timestamps: { currentTime: () => Math.floor(Date.now() / 1000) }\n});\n```\n\n----------------------------------------\n\nTITLE: Express Route Using Lean for GET Requests\nDESCRIPTION: An Express route example showing a good use case for lean() in a GET endpoint that simply returns JSON data without modifications.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// As long as you don't need any of the Person model's virtuals or getters,\n// you can use `lean()`.\napp.get('/person/:id', function(req, res) {\n  Person.findOne({ _id: req.params.id }).lean().\n    then(person => res.json({ person })).\n    catch(error => res.json({ error: error.message }));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Schema with Array Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Mongoose schema with array types using TypeScript. It shows the usage of generics to properly type the schema, model, and hydrated documents, including array subdocuments.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/schemas.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport mongoose from 'mongoose'\nconst { Schema } = mongoose;\n\ninterface IOrder {\n  tags: Array<{ name: string }>\n}\n\n// Define a HydratedDocumentType that describes what type Mongoose should use\n// for fully hydrated docs returned from `findOne()`, etc.\ntype OrderHydratedDocument = mongoose.HydratedDocument<\n  IOrder,\n  { tags: mongoose.HydratedArraySubdocument<{ name: string }> }\n>;\ntype OrderModelType = mongoose.Model<\n  IOrder,\n  {},\n  {},\n  {},\n  OrderHydratedDocument // THydratedDocumentType\n>;\n\nconst orderSchema = new mongoose.Schema<\n  IOrder,\n  OrderModelType,\n  {}, // methods\n  {}, // query helpers\n  {}, // virtuals\n  {}, // statics\n  mongoose.DefaultSchemaOptions, // schema options\n  IOrder, // doctype\n  OrderHydratedDocument // THydratedDocumentType\n>({\n  tags: [{ name: { type: String, required: true } }]\n});\nconst OrderModel = mongoose.model<IOrder, OrderModelType>('Order', orderSchema);\n\n// Demonstrating return types from OrderModel\nconst doc = new OrderModel({ tags: [{ name: 'test' }] });\n\ndoc.tags; // mongoose.Types.DocumentArray<{ name: string }>\ndoc.toObject().tags; // Array<{ name: string }>\n\nasync function run() {\n  const docFromDb = await OrderModel.findOne().orFail();\n  docFromDb.tags; // mongoose.Types.DocumentArray<{ name: string }>\n\n  const leanDoc = await OrderModel.findOne().orFail().lean();\n  leanDoc.tags; // Array<{ name: string }>\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Default Values in Mongoose Schema\nDESCRIPTION: Demonstrates how to set default values for schema paths. If a new document is created without a value for these paths, the defaults will be applied.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/defaults.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: String,\n  age: { type: Number, default: 20 },\n  registered: { type: Date, default: Date.now }\n});\n\nconst User = mongoose.model('User', schema);\n\nconst user = new User({ name: 'Jean-Luc Picard' });\nconsole.log(user.age); // 20\nconsole.log(user.registered); // 2023-05-23T14:30:00.000Z (or whatever the current date/time is)\n```\n\n----------------------------------------\n\nTITLE: Automatic Type Inference with Mongoose Schema\nDESCRIPTION: Demonstrates how to use Mongoose's automatic type inference when defining schemas and models. Shows basic schema definition with required and optional fields.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/schemas.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model } from 'mongoose';\n// Schema\nconst schema = new Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String\n});\n\n// `UserModel` will have `name: string`, etc.\nconst UserModel = mongoose.model('User', schema);\n\nconst doc = new UserModel({ name: 'test', email: 'test' });\ndoc.name; // string\ndoc.email; // string\ndoc.avatar; // string | undefined | null\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Differences Between Query and Aggregation Results\nDESCRIPTION: Illustrates that aggregation results are plain JavaScript objects, not Mongoose documents. This is an important difference as aggregation results don't have document methods or middleware.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst docs = await Person.aggregate([{ $match: { 'name.last': 'Ghost' } }]);\n\ndocs[0] instanceof mongoose.Document; // false\n```\n\n----------------------------------------\n\nTITLE: Mongoose Middleware Execution Order\nDESCRIPTION: Shows the execution order of validate and save middleware for both parent and child documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/subdocs.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema = new mongoose.Schema({ name: 'string' });\n\nchildSchema.pre('validate', function(next) {\n  console.log('2');\n  next();\n});\n\nchildSchema.pre('save', function(next) {\n  console.log('3');\n  next();\n});\n\nconst parentSchema = new mongoose.Schema({\n  child: childSchema\n});\n\nparentSchema.pre('validate', function(next) {\n  console.log('1');\n  next();\n});\n\nparentSchema.pre('save', function(next) {\n  console.log('4');\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Lean with Populate in Mongoose\nDESCRIPTION: Shows how to use lean with populated documents, where the lean option propagates to both top-level documents and populated subdocuments.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Lean Tutorial.*conventional populate]\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Typed Query Helpers in TypeScript with Mongoose\nDESCRIPTION: This snippet demonstrates how to implement auto-typed query helpers in TypeScript using Mongoose. It shows how to define query helpers in the schema options, which are then automatically typed by Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/query-helpers.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model } from 'mongoose';\n\nconst ProjectSchema = new Schema({\n  name: String,\n  stars: Number\n}, {\n  query: {\n    byName(name: string) {\n      return this.find({ name });\n    }\n  }\n});\n\nconst ProjectModel = model('Project', ProjectSchema);\n\n// Equivalent to `ProjectModel.find({ stars: { $gt: 1000 }, name: 'mongoose' })`\nawait ProjectModel.find().where('stars').gt(1000).byName('mongoose');\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Discriminators in Arrays\nDESCRIPTION: Explains how to use embedded discriminators for array fields, allowing different schema types within the same document array.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Embedded discriminators in arrays]\n```\n\n----------------------------------------\n\nTITLE: Working with Mixed Schema Types in Mongoose\nDESCRIPTION: Demonstrates different ways to declare Mixed schema types and explains how to handle changes to Mixed type fields.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst Any = new Schema({ any: {} });\nconst Any = new Schema({ any: Object });\nconst Any = new Schema({ any: Schema.Types.Mixed });\nconst Any = new Schema({ any: mongoose.Mixed });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nperson.anything = { x: [3, 4, { y: 'changed' }] };\nperson.markModified('anything');\nperson.save(); // Mongoose will save changes to `anything`.\n```\n\n----------------------------------------\n\nTITLE: Accessing Virtuals on Mongoose Model Instances\nDESCRIPTION: Demonstrates that virtuals are accessible on hydrated Mongoose document instances and shows how to get the fully typed document type with virtuals using ReturnType and hydrate.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/virtuals.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserModel = model('User', schema);\n\nconst user = new UserModel({ firstName: 'foo' });\n// Works\nuser.fullName;\n\n// Here's how to get the hydrated document type\ntype UserDocument = ReturnType<(typeof UserModel)['hydrate']>;\n```\n\n----------------------------------------\n\nTITLE: Setting Required Validators on Nested Objects in Mongoose\nDESCRIPTION: Explains the tricky aspects of defining validators on nested objects in Mongoose and demonstrates the proper way to make nested fields required.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Required Validators On Nested Objects]\n```\n\n----------------------------------------\n\nTITLE: Defining Static Methods in Mongoose Schema\nDESCRIPTION: Shows three ways to add static methods to a Mongoose model: through schema options, by assigning to the statics object, or using the static() function.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// define a schema\nconst animalSchema = new Schema({ name: String, type: String },\n  {\n  // Assign a function to the \"statics\" object of our animalSchema through schema options.\n  // By following this approach, there is no need to create a separate TS type to define the type of the statics functions.\n    statics: {\n      findByName(name) {\n        return this.find({ name: new RegExp(name, 'i') });\n      }\n    }\n  });\n\n// Or, Assign a function to the \"statics\" object of our animalSchema\nanimalSchema.statics.findByName = function(name) {\n  return this.find({ name: new RegExp(name, 'i') });\n};\n// Or, equivalently, you can call `animalSchema.static()`.\nanimalSchema.static('findByBreed', function(breed) { return this.find({ breed }); });\n\nconst Animal = mongoose.model('Animal', animalSchema);\nlet animals = await Animal.findByName('fido');\nanimals = animals.concat(await Animal.findByBreed('Poodle'));\n```\n\n----------------------------------------\n\nTITLE: Streaming Query Results using Cursor in Mongoose\nDESCRIPTION: Shows how to stream large query results from MongoDB using cursors. The example demonstrates using cursor.next() to process documents one at a time without loading all results into memory.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cursor = Person.find({ occupation: /host/ }).cursor();\n\nfor (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {\n  console.log(doc); // Prints documents one at a time\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Mongoose Compatibility\nDESCRIPTION: Configuration settings for next.config.js to resolve Mongoose compatibility issues with Next.js, particularly addressing prototype-related errors and enabling top-level await support for Webpack.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/nextjs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig = {\n  experimental: {\n    esmExternals: \"loose\", // <-- add this\n    serverComponentsExternalPackages: [\"mongoose\"] // <-- and this\n  },\n  // and the following to enable top-level await support for Webpack\n  webpack: (config) => {\n    config.experiments = {\n      topLevelAwait: true\n    };\n    return config;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Virtual Property in Mongoose\nDESCRIPTION: Demonstrates how to create a virtual property 'domain' on a User schema that computes the domain from the email address.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  email: String\n});\n\nUserSchema.virtual('domain').get(function() {\n  return this.email.slice(this.email.indexOf('@') + 1);\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nconst user = new User({\n  email: 'test@gmail.com'\n});\n\nconsole.log(user.domain); // 'gmail.com'\n```\n\n----------------------------------------\n\nTITLE: Using model.discriminator() Function in Mongoose\nDESCRIPTION: Demonstrates how to use model.discriminator() to create different event types with shared and specific schemas in the same MongoDB collection.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:The `model.discriminator\\(\\)` function]\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Concurrency in Mongoose\nDESCRIPTION: Explains how to use the 'optimisticConcurrency' option to ensure that a document hasn't changed between when it was loaded and when it's being updated. This helps prevent conflicts in concurrent operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst House = mongoose.model('House', Schema({\n  status: String,\n  photos: [String]\n}, { optimisticConcurrency: true }));\n\nconst house = await House.findOne({ _id });\nif (house.photos.length < 2) {\n  throw new Error('House must have at least two photos!');\n}\n\nconst house2 = await House.findOne({ _id });\nhouse2.photos = [];\nawait house2.save();\n\n// Throws 'VersionError: No matching document found for id \"...\" version 0'\nhouse.status = 'APPROVED';\nawait house.save();\n```\n\n----------------------------------------\n\nTITLE: Basic Query Get and Set Operations in Mongoose\nDESCRIPTION: Demonstrates basic filter parameter usage in Mongoose queries, showing how filter parameters are handled when querying MongoDB through Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*get and set]\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Views with Mongoose\nDESCRIPTION: Demonstrates creating a MongoDB View using Mongoose. This example creates a RedactedUser view based on a User model that hides sensitive information through an aggregation pipeline.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/models.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Make sure to disable `autoCreate` and `autoIndex` for Views,\n// because you want to create the collection manually.\nconst userSchema = new Schema({\n  name: String,\n  email: String,\n  roles: [String]\n}, { autoCreate: false, autoIndex: false });\nconst User = mongoose.model('User', userSchema);\n\nconst RedactedUser = mongoose.model('RedactedUser', userSchema);\n\n// First, create the User model's underlying collection...\nawait User.createCollection();\n// Then create the `RedactedUser` model's underlying collection\n// as a View.\nawait RedactedUser.createCollection({\n  viewOn: 'users', // Set `viewOn` to the collection name, **not** model name.\n  pipeline: [\n    {\n      $set: {\n        name: { $concat: [{ $substr: ['$name', 0, 3] }, '...'] },\n        email: { $concat: [{ $substr: ['$email', 0, 3] }, '...'] }\n      }\n    }\n  ]\n});\n\nawait User.create([\n  { name: 'John Smith', email: 'john.smith@gmail.com', roles: ['user'] },\n  { name: 'Bill James', email: 'bill@acme.co', roles: ['user', 'admin'] }\n]);\n\n// [{ _id: ..., name: 'Bil...', email: 'bil...', roles: ['user', 'admin'] }]\nconsole.log(await RedactedUser.find({ roles: 'admin' }));\n```\n\n----------------------------------------\n\nTITLE: Implementing Manually Typed Query Helpers in TypeScript with Mongoose\nDESCRIPTION: This snippet shows how to implement manually typed query helpers in TypeScript using Mongoose. It includes interface definitions, schema creation, and query helper implementation with proper TypeScript typing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/query-helpers.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HydratedDocument, Model, QueryWithHelpers, Schema, model, connect } from 'mongoose';\n\ninterface Project {\n  name?: string;\n  stars?: number;\n}\n\ninterface ProjectQueryHelpers {\n  byName(name: string): QueryWithHelpers<\n    HydratedDocument<Project>[],\n    HydratedDocument<Project>,\n    ProjectQueryHelpers\n  >\n}\n\ntype ProjectModelType = Model<Project, ProjectQueryHelpers>;\n\nconst ProjectSchema = new Schema<\n  Project,\n  Model<Project, ProjectQueryHelpers>,\n  {},\n  ProjectQueryHelpers\n>({\n  name: String,\n  stars: Number\n});\n\nProjectSchema.query.byName = function byName(\n  this: QueryWithHelpers<any, HydratedDocument<Project>, ProjectQueryHelpers>,\n  name: string\n) {\n  return this.find({ name: name });\n};\n\n// 2nd param to `model()` is the Model class to return.\nconst ProjectModel = model<Project, ProjectModelType>('Project', ProjectSchema);\n\nrun().catch(err => console.log(err));\n\nasync function run(): Promise<void> {\n  await connect('mongodb://127.0.0.1:27017/test');\n\n  // Equivalent to `ProjectModel.find({ stars: { $gt: 1000 }, name: 'mongoose' })`\n  await ProjectModel.find().where('stars').gt(1000).byName('mongoose');\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Schema Implementation in Mongoose\nDESCRIPTION: Demonstrates how to implement nested schemas and set default values for sub-schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst subSchema = new mongoose.Schema({\n  // some schema definition here\n});\n\nconst schema = new mongoose.Schema({\n  data: {\n    type: subSchema,\n    default: {}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Working with the Default _id ObjectId in Mongoose Documents\nDESCRIPTION: Shows how Mongoose creates a new ObjectId for the _id property when creating a new document instance.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Model = mongoose.model('Test', schema);\n\nconst doc = new Model();\ndoc._id instanceof mongoose.Types.ObjectId; // true\n```\n\n----------------------------------------\n\nTITLE: Using Custom Instance Methods on Mongoose Documents\nDESCRIPTION: Demonstrates how to use a custom instance method that was defined on the schema with a document instance.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Animal = mongoose.model('Animal', animalSchema);\nconst dog = new Animal({ type: 'dog' });\n\ndog.findSimilarTypes((err, dogs) => {\n  console.log(dogs); // woof\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Document Population Syntax in JavaScript\nDESCRIPTION: Shows the new population syntax in Mongoose 6 where populate() returns a promise and accepts an array of paths or objects.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait doc.populate([{path: 'path1', select: 'select1'}, {path: 'path2', select: 'select2'}]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Global SchemaType Validation in Mongoose\nDESCRIPTION: Shows how to configure a custom validator to run on every instance of a given SchemaType, such as making empty strings invalid for all string paths.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Global SchemaType Validation]\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Setters for Multiple Properties\nDESCRIPTION: Shows how to use a virtual property 'fullName' to set both 'firstName' and 'lastName' properties of a User schema.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  firstName: String,\n  lastName: String\n});\n\nUserSchema.virtual('fullName').get(function() {\n  return `${this.firstName} ${this.lastName}`;\n}).set(function(v) {\n  // `v` is the value being set, so use the value to set\n  // `firstName` and `lastName`.\n  const firstName = v.substring(0, v.indexOf(' '));\n  const lastName = v.substring(v.indexOf(' ') + 1);\n  this.set({ firstName, lastName });\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nconst user = new User();\nuser.fullName = 'Jean-Luc Picard';\n\nconsole.log(user.firstName); // 'Jean-Luc'\nconsole.log(user.lastName); // 'Picard'\n```\n\n----------------------------------------\n\nTITLE: Reusable MongoDB Connection Helper for AWS Lambda using Mongoose\nDESCRIPTION: This snippet provides a reusable connection helper function for AWS Lambda. It creates and manages a single MongoDB connection that can be shared across multiple Lambda functions, improving efficiency.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/lambda.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nlet conn = null;\n\nconst uri = 'YOUR CONNECTION STRING HERE';\n\nexports.connect = async function() {\n  if (conn == null) {\n    conn = mongoose.createConnection(uri, {\n      serverSelectionTimeoutMS: 5000\n    });\n\n    // `await`ing connection after assigning to the `conn` variable\n    // to avoid multiple function calls creating new connections\n    await conn.asPromise();\n  }\n\n  return conn;\n};\n```\n\n----------------------------------------\n\nTITLE: Map Population in Mongoose\nDESCRIPTION: Demonstrates how to populate references within Map fields using the special $* syntax for populating all elements in a map.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({\n  socialMediaHandles: {\n    type: Map,\n    of: new Schema({\n      handle: String,\n      oauth: {\n        type: ObjectId,\n        ref: 'OAuth'\n      }\n    })\n  }\n});\nconst User = mongoose.model('User', userSchema);\n\nconst user = await User.findOne().populate('socialMediaHandles.$*.oauth');\n```\n\n----------------------------------------\n\nTITLE: Proper Method for Deep Cloning Mongoose Documents\nDESCRIPTION: This example shows the recommended approach for deep cloning Mongoose documents without using Lodash's cloneDeep(). It creates a new model instance and initializes it with the original document's data using toObject() method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/lodash.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await MyModel.findOne();\n\nconst newDoc = new MyModel().init(doc.toObject());\nnewDoc.myProperty = 'test';\nawait newDoc.save();\n```\n\n----------------------------------------\n\nTITLE: Using Date Validators in Mongoose Schema\nDESCRIPTION: Shows how to use built-in date validators 'min' and 'max' in a Mongoose schema. These validators ensure that the date falls within a specified range.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/dates.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Date Tutorial.*Example 1.2.1]\n```\n\n----------------------------------------\n\nTITLE: Early Return Pattern with next() in Mongoose Middleware\nDESCRIPTION: Demonstrates the early return pattern with next() to prevent the rest of the middleware function from executing. This pattern is important for controlling middleware flow.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ /* ... */ });\nschema.pre('save', function(next) {\n  if (foo()) {\n    console.log('calling next!');\n    // `return next();` will make sure the rest of this function doesn't run\n    /* return */ next();\n  }\n  // Unless you comment out the `return` above, 'after next' will print\n  console.log('after next');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Helpers in Mongoose Schema\nDESCRIPTION: Shows how to add custom query helper methods to a Mongoose schema. Demonstrates two approaches: defining helpers through schema options and directly on the schema query object.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// define a schema\nconst animalSchema = new Schema({ name: String, type: String },\n  {\n  // Assign a function to the \"query\" object of our animalSchema through schema options.\n  // By following this approach, there is no need to create a separate TS type to define the type of the query functions.\n    query: {\n      byName(name) {\n        return this.where({ name: new RegExp(name, 'i') });\n      }\n    }\n  });\n\n// Or, Assign a function to the \"query\" object of our animalSchema\nanimalSchema.query.byName = function(name) {\n  return this.where({ name: new RegExp(name, 'i') });\n};\n\nconst Animal = mongoose.model('Animal', animalSchema);\n\nAnimal.find().byName('fido').exec((err, animals) => {\n  console.log(animals);\n});\n\nAnimal.findOne().byName('fido').exec((err, animal) => {\n  console.log(animal);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Getters and Setters in Mongoose Schema\nDESCRIPTION: Shows how to define custom getters and setters for a schema property, along with an alias, to manipulate the data when getting or setting values.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst numberSchema = new Schema({\n  integerOnly: {\n    type: Number,\n    get: v => Math.round(v),\n    set: v => Math.round(v),\n    alias: 'i'\n  }\n});\n\nconst Number = mongoose.model('Number', numberSchema);\n\nconst doc = new Number();\ndoc.integerOnly = 2.001;\ndoc.integerOnly; // 2\ndoc.i; // 2\ndoc.i = 3.001;\ndoc.integerOnly; // 3\ndoc.i; // 3\n```\n\n----------------------------------------\n\nTITLE: Integrating ES6 Classes with Mongoose Schemas\nDESCRIPTION: Demonstrates how to use the loadClass() method to create a Mongoose schema from an ES6 class, including methods, statics, and virtuals.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  myMethod() { return 42; }\n  static myStatic() { return 42; }\n  get myVirtual() { return 42; }\n}\n\nconst schema = new mongoose.Schema();\nschema.loadClass(MyClass);\n\nconsole.log(schema.methods); // { myMethod: [Function: myMethod] }\nconsole.log(schema.statics); // { myStatic: [Function: myStatic] }\nconsole.log(schema.virtuals); // { myVirtual: VirtualType { ... } }\n```\n\n----------------------------------------\n\nTITLE: Mongoose Reference Documents vs Subdocuments\nDESCRIPTION: Demonstrates the difference between populated reference documents and embedded subdocuments in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/subdocs.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema = new Schema({ name: 'string' });\nconst Child = mongoose.model('Child', childSchema);\n\nconst parentSchema = new Schema({\n  child: {\n    type: mongoose.ObjectId,\n    ref: 'Child'\n  }\n});\nconst Parent = mongoose.model('Parent', parentSchema);\n\nconst doc = await Parent.findOne().populate('child');\n// NOT a subdocument. `doc.child` is a separate top-level document.\ndoc.child;\n```\n\n----------------------------------------\n\nTITLE: Querying and Sorting by Dates in Mongoose\nDESCRIPTION: Demonstrates various ways to query documents by date ranges and sort results by date fields using Mongoose. This includes finding documents within a date range and sorting by date in ascending or descending order.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/dates.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Date Tutorial.*Example 1.3.1]\n```\n\n----------------------------------------\n\nTITLE: Using Change Streams with next() in AWS Lambda Functions\nDESCRIPTION: This code demonstrates how to use change streams in AWS Lambda functions by utilizing the next() method instead of event listeners. It includes handling resumable change streams, implementing timeouts to prevent infinite waiting, and properly closing the stream when done.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/change-streams.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet resumeAfter = undefined;\n\nexports.handler = async(event, context) => {\n  // add this so that we can re-use any static/global variables between function calls if Lambda\n  // happens to re-use existing containers for the invocation.\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  await connectToDatabase();\n\n  const changeStream = await Country.watch([], { resumeAfter });\n\n  // Change stream `next()` will wait forever if there are no changes. So make sure to\n  // stop listening to the change stream after a fixed period of time.\n  const timeoutPromise = new Promise(resolve => setTimeout(() => resolve(false), 1000));\n  let doc = null;\n  while (doc = await Promise.race([changeStream.next(), timeoutPromise])) {\n    console.log('Got', doc);\n  }\n\n  // `resumeToken` tells you where the change stream left off, so next function instance\n  // can pick up any changes that happened in the meantime.\n  resumeAfter = changeStream.resumeToken;\n  await changeStream.close();\n};\n```\n\n----------------------------------------\n\nTITLE: Understanding Update Validator Limitations with Operators\nDESCRIPTION: Explains which update operators support validation ($set, $unset, $push, $addToSet, $pull, $pullAll) and which ones don't (like $inc), with examples of validation behavior for different operators.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Update Validators Only Run For Some Operations]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose Connection with CSFLE Schema Map\nDESCRIPTION: Shows how to configure a Mongoose connection with a schemaMap that defines encrypted fields using JSON schema syntax. This sets up automatic encryption for the 'name' field in documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/field-level-encryption.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* Step 2: connect using schema map and new key */\nawait mongoose.connect('mongodb://127.0.0.1:27017/mongoose_test', {\n  // Configure auto encryption\n  autoEncryption: {\n    keyVaultNamespace,\n    kmsProviders,\n    schemaMap: {\n      'mongoose_test.tests': {\n        bsonType: 'object',\n        encryptMetadata: {\n          keyId: [_key]\n        },\n        properties: {\n          name: {\n            encrypt: {\n              bsonType: 'string',\n              algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic'\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Mongoose Schema in Shared Library\nDESCRIPTION: This code snippet shows the recommended way to export a Mongoose schema from a shared library, avoiding the export of models.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/shared-schemas.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// `userSchema.js` in `@initech/shared-schemas`\nconst userSchema = new mongoose.Schema({ name: String });\n\n// Do this:\nmodule.exports = userSchema;\n\n// Not this:\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages for Validators in Mongoose\nDESCRIPTION: Shows how to configure custom error messages for validators using both array syntax and object syntax. The example demonstrates templating with {VALUE} placeholder for error messages.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Custom Error Messages]\n```\n\n----------------------------------------\n\nTITLE: Understanding Save/Validate Hooks Order in Mongoose\nDESCRIPTION: Explains the order of execution for save and validate hooks in Mongoose. Demonstrates how validate hooks are triggered before save hooks due to Mongoose's built-in pre('save') hook.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('validate', function() {\n  console.log('this gets printed first');\n});\nschema.post('validate', function() {\n  console.log('this gets printed second');\n});\nschema.pre('save', function() {\n  console.log('this gets printed third');\n});\nschema.post('save', function() {\n  console.log('this gets printed fourth');\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Discriminator Models to Shared Collection\nDESCRIPTION: Shows how different discriminator models (like SignedUpEvent) are stored in the same collection as the base Event model.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Discriminators save to the Event model's collection]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Schema Type in Mongoose\nDESCRIPTION: This example demonstrates how to create a custom 1-byte integer schema type in Mongoose by inheriting from SchemaType and implementing the cast() method. The code shows the complete implementation including how to register the type with Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/customschematypes.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Creating a Basic Custom Schema Type]\n```\n\n----------------------------------------\n\nTITLE: Disabling '_id' Field in Mongoose Subdocuments\nDESCRIPTION: Shows how to disable the automatic addition of '_id' field in subdocuments using the '_id' schema option. This option can only be used on subdocuments.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// default behavior\nconst schema = new Schema({ name: String });\nconst Page = mongoose.model('Page', schema);\nconst p = new Page({ name: 'mongodb.org' });\nconsole.log(p); // { _id: '50341373e894ad16347efe01', name: 'mongodb.org' }\n\n// disabled _id\nconst childSchema = new Schema({ name: String }, { _id: false });\nconst parentSchema = new Schema({ children: [childSchema] });\n\nconst Model = mongoose.model('Model', parentSchema);\n\nModel.create({ children: [{ name: 'Luke' }] }, (error, doc) => {\n  // doc.children[0]._id will be undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Retry Logic\nDESCRIPTION: Example of custom retry logic for connection attempts using a for loop with multiple attempts before throwing an error.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst serverSelectionTimeoutMS = 5000;\n\nfor (let i = 0; i < 3; ++i) {\n  try {\n    await mongoose.connect('mongodb://doesnt.exist:27017/test', {\n      serverSelectionTimeoutMS\n    });\n    break;\n  } catch (err) {\n    console.log('Failed', i);\n    if (i >= 2) {\n      throw err;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mongoose Lean Plugins with Virtuals\nDESCRIPTION: Example showing how to use the mongoose-lean-virtuals plugin with a schema, noting that 'this' in virtuals will be a plain JavaScript object, not a Mongoose document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.plugin(require('mongoose-lean-virtuals'));\n\nschema.virtual('lowercase', function() {\n  this instanceof mongoose.Document; // false\n\n  this.name; // Works\n  this.get('name'); // Crashes because `this` is not a Mongoose document.\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Naming Conflicts in Mongoose Middleware\nDESCRIPTION: Explains how to handle naming conflicts in Mongoose middleware, particularly for methods like deleteOne() and validate() that have both query and document middleware versions.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nschema.pre('deleteOne', function() { console.log('Removing!'); });\n\n// Does **not** print \"Removing!\". Document middleware for `deleteOne` is not executed by default\nawait doc.deleteOne();\n\n// Prints \"Removing!\"\nawait Model.deleteOne();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Only document middleware\nschema.pre('deleteOne', { document: true, query: false }, function() {\n  console.log('Deleting doc!');\n});\n\n// Only query middleware. This will get called when you do `Model.deleteOne()`\n// but not `doc.deleteOne()`.\nschema.pre('deleteOne', { query: true, document: false }, function() {\n  console.log('Deleting!');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({ name: String });\nschema.pre('validate', function() {\n  console.log('Document validate');\n});\nschema.pre('validate', { query: true, document: false }, function() {\n  console.log('Query validate');\n});\nconst Test = mongoose.model('Test', schema);\n\nconst doc = new Test({ name: 'foo' });\n\n// Prints \"Document validate\"\nawait doc.validate();\n\n// Prints \"Query validate\"\nawait Test.find().validate();\n```\n\n----------------------------------------\n\nTITLE: UUID Implementation in Mongoose\nDESCRIPTION: Shows how to use UUID type in Mongoose schemas, storing UUIDs as Node.js buffers with proper type casting.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst authorSchema = new Schema({\n  _id: Schema.Types.UUID,\n  name: String\n});\n\nconst Author = mongoose.model('Author', authorSchema);\n\nconst bookSchema = new Schema({\n  authorId: { type: Schema.Types.UUID, ref: 'Author' }\n});\nconst Book = mongoose.model('Book', bookSchema);\n\nconst author = new Author({ name: 'Martin Fowler' });\nconsole.log(typeof author._id);\nconsole.log(author.toObject()._id instanceof mongoose.mongo.BSON.Binary);\n\nconst book = new Book({ authorId: '09190f70-3d30-11e5-8814-0f4df9a59c41' });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mongoose Document\nDESCRIPTION: Shows how to retrieve a document from MongoDB using a model's findOne() method and verifies its instance type.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await MyModel.findOne();\n\ndoc instanceof MyModel; // true\ndoc instanceof mongoose.Model; // true\ndoc instanceof mongoose.Document; // true\n```\n\n----------------------------------------\n\nTITLE: Declaring Date Field in Mongoose Schema\nDESCRIPTION: Demonstrates how to declare a Date type field in a Mongoose schema and create a model from it. This snippet shows the basic structure for working with dates in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/dates.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: String,\n  // `lastActiveAt` is a date\n  lastActiveAt: Date\n});\nconst User = mongoose.model('User', userSchema);\n```\n\n----------------------------------------\n\nTITLE: Understanding 'this' in Update Validators\nDESCRIPTION: Explains how 'this' in update validators refers to the query object rather than the document, and shows how to use query.get() to access updated values for validation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Update Validators and `this`]\n```\n\n----------------------------------------\n\nTITLE: Separate Document Interface Definition with Mongoose\nDESCRIPTION: Demonstrates how to define a separate raw document interface for cases where automatic type inference isn't suitable. Shows interface definition and schema typing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/schemas.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema } from 'mongoose';\n\n// Raw document interface. Contains the data type as it will be stored\n// in MongoDB. So you can ObjectId, Buffer, and other custom primitive data types.\n// But no Mongoose document arrays or subdocuments.\ninterface User {\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\n// Schema\nconst schema = new Schema<User>({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Statics with Generics in TypeScript\nDESCRIPTION: This snippet shows how to use generics to define statics for a Mongoose model in TypeScript. It demonstrates creating an interface that extends Mongoose's Model interface to include custom static methods, and how to use this interface when defining the schema and model.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Schema, model } from 'mongoose';\n\ninterface IUser {\n  name: string;\n}\n\ninterface UserModel extends Model<IUser> {\n  myStaticMethod(): number;\n}\n\nconst schema = new Schema<IUser, UserModel>({ name: String });\nschema.static('myStaticMethod', function myStaticMethod() {\n  return 42;\n});\n\nconst User = model<IUser, UserModel>('User', schema);\n\nconst answer: number = User.myStaticMethod(); // 42\n```\n\n----------------------------------------\n\nTITLE: Using Default Functions in Mongoose Schema\nDESCRIPTION: Shows how to use a function as a default value in a schema. Mongoose will execute the function and use its return value as the default.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/defaults.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  title: String,\n  genre: String,\n  releaseYear: {\n    type: Number,\n    default: function() {\n      return new Date().getFullYear();\n    }\n  }\n});\n\nconst Movie = mongoose.model('Movie', schema);\n\nconst movie = new Movie({ title: 'The Terminator', genre: 'Sci-Fi' });\nconsole.log(movie.releaseYear); // 2023 (or whatever the current year is)\n```\n\n----------------------------------------\n\nTITLE: Working with Date Types in Mongoose\nDESCRIPTION: Explains how to handle Date types in Mongoose and the necessary steps for tracking Date modifications.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Assignment = mongoose.model('Assignment', { dueDate: Date });\nconst doc = await Assignment.findOne();\ndoc.dueDate.setMonth(3);\nawait doc.save(); // THIS DOES NOT SAVE YOUR CHANGE\n\ndoc.markModified('dueDate');\nawait doc.save(); // works\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Options in Mongoose\nDESCRIPTION: Demonstrates how to set schema options when creating a new schema or using the 'set' method on an existing schema.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnew Schema({ /* ... */ }, options);\n\n// or\n\nconst schema = new Schema({ /* ... */ });\nschema.set(option, value);\n```\n\n----------------------------------------\n\nTITLE: Using strictQuery with Default False Behavior in Mongoose 7\nDESCRIPTION: Demonstrates how strictQuery is now false by default in Mongoose 7, which means queries won't strip out fields not defined in the schema. This changes the behavior of find() operations compared to Mongoose 6.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySchema = new Schema({ field: Number });\nconst MyModel = mongoose.model('Test', mySchema);\n\n// Mongoose will not strip out `notInSchema: 1` because `strictQuery` is false by default\nconst docs = await MyModel.find({ notInSchema: 1 });\n// Empty array in Mongoose 7. In Mongoose 6, this would contain all documents in MyModel\ndocs;\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Populate via Schema Options\nDESCRIPTION: Demonstrates how to set up a populated virtual using schema options instead of the .virtual() method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst PersonSchema = new Schema({\n  name: String,\n  band: String\n});\n\nconst BandSchema = new Schema({\n  name: String\n}, {\n  virtuals: {\n    members: {\n      options: {\n        ref: 'Person',\n        localField: 'name',\n        foreignField: 'band'\n      }\n    }\n  }\n});\n\nconst Person = mongoose.model('Person', PersonSchema);\nconst Band = mongoose.model('Band', BandSchema);\n\n// Create a band\nconst band = await Band.create({ name: 'Guns N\\' Roses' });\n\n// Create people in the band\nawait Person.create([\n  { name: 'Axl Rose', band: 'Guns N\\' Roses' },\n  { name: 'Slash', band: 'Guns N\\' Roses' }\n]);\n\nconst doc = await Band.findOne().populate('members');\nconsole.log(doc.members.length); // 2\n```\n\n----------------------------------------\n\nTITLE: Using HydratedDocument Type with Mongoose in TypeScript\nDESCRIPTION: This snippet shows how to use the HydratedDocument type when creating a new document instance. It demonstrates the difference between the document interface and the hydrated Mongoose document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HydratedDocument } from 'mongoose';\n\nconst user: HydratedDocument<IUser> = new User({\n  name: 'Bill',\n  email: 'bill@initech.com',\n  avatar: 'https://i.imgur.com/dM7Thhn.png'\n});\n```\n\n----------------------------------------\n\nTITLE: BigInt Type in Mongoose\nDESCRIPTION: Shows implementation of BigInt type in Mongoose schemas for handling 64-bit integers.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst questionSchema = new Schema({\n  answer: BigInt\n});\nconst Question = mongoose.model('Question', questionSchema);\n\nconst question = new Question({ answer: 42n });\ntypeof question.answer;\n```\n\n----------------------------------------\n\nTITLE: Correctly Defining a Mongoose Schema with a 'type' Property\nDESCRIPTION: Demonstrates the correct way to define a Mongoose schema that includes an object with a 'type' property, avoiding confusion with the special 'type' key.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst holdingSchema = new Schema({\n  asset: {\n    type: { type: String },\n    ticker: String\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Methods with Generics in TypeScript\nDESCRIPTION: This snippet demonstrates how to use generics to define methods for a Mongoose model in TypeScript. It shows how to create an interface for custom methods, use it as a generic parameter when defining the schema, and add methods to the schema using the 'method' function.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Schema, model } from 'mongoose';\n\ninterface IUser {\n  name: string;\n}\n\ninterface UserMethods {\n  updateName(name: string): Promise<any>;\n}\n\nconst schema = new Schema<IUser, Model<IUser>, UserMethods>({ name: String });\nschema.method('updateName', function updateName(name) {\n  this.name = name;\n  return this.save();\n});\n\nconst User = model('User', schema);\nconst doc = new User({ name: 'test' });\n// Compiles correctly\ndoc.updateName('foo');\n```\n\n----------------------------------------\n\nTITLE: Mongoose Populate using PopulatedDoc Type\nDESCRIPTION: Demonstrates using Mongoose's PopulatedDoc type for defining populated documents. Includes type checking for populated vs unpopulated fields and handling null cases.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/populate.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model, Document, PopulatedDoc } from 'mongoose';\n\n// `child` is either an ObjectId or a populated document\ninterface Parent {\n  child?: PopulatedDoc<Document<ObjectId> & Child>,\n  name?: string\n}\nconst ParentModel = model<Parent>('Parent', new Schema({\n  child: { type: 'ObjectId', ref: 'Child' },\n  name: String\n}));\n\ninterface Child {\n  name?: string;\n}\nconst childSchema: Schema = new Schema({ name: String });\nconst ChildModel = model<Child>('Child', childSchema);\n\nParentModel.findOne({}).populate('child').orFail().then((doc: Parent) => {\n  const child = doc.child;\n  if (child == null || child instanceof ObjectId) {\n    throw new Error('should be populated');\n  } else {\n    // Works\n    doc.child.name.trim();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Getters in Mongoose\nDESCRIPTION: Example of implementing a basic getter function to obfuscate email addresses in a Mongoose schema. The getter transforms the stored email value before it's returned to the application.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*getters.*basic example]\n```\n\n----------------------------------------\n\nTITLE: Building a Mongoose Query with Chaining Syntax\nDESCRIPTION: Shows how to build and execute a Mongoose query using chaining syntax. The query is constructed incrementally and executed later using exec().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// find each person with a last name matching 'Ghost'\nconst query = Person.findOne({ 'name.last': 'Ghost' });\n\n// selecting the `name` and `occupation` fields\nquery.select('name occupation');\n\n// execute the query at a later time\nconst person = await query.exec();\n// Prints \"Space Ghost is a talk show host.\"\nconsole.log('%s %s is a %s.', person.name.first, person.name.last, person.occupation);\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Tags in Mongoose Schemas\nDESCRIPTION: Explains how to use plugin tags to selectively apply plugins to specific schemas in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a `meta` property to all schemas\nmongoose.plugin(function myPlugin(schema) {\n  schema.add({ meta: {} });\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema1 = new Schema({\n  name: String\n}, { pluginTags: ['useMetaPlugin'] });\n\nconst schema2 = new Schema({\n  name: String\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a `meta` property to all schemas\nmongoose.plugin(function myPlugin(schema) {\n  schema.add({ meta: {} });\n}, { tags: ['useMetaPlugin'] });\n```\n\n----------------------------------------\n\nTITLE: Using Setters with Update Operations\nDESCRIPTION: Example demonstrating how Mongoose also runs setters during update operations like updateOne(), ensuring consistent data transformation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*setters.*updates]\n```\n\n----------------------------------------\n\nTITLE: Highlighting Type Casting Differences Between Queries and Aggregation\nDESCRIPTION: Shows a key difference between queries and aggregation: Mongoose automatically casts values in query filters to the correct types, but does not do so for aggregation pipelines. This requires manual type handling in aggregation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await Person.findOne();\n\nconst idString = doc._id.toString();\n\n// Finds the `Person`, because Mongoose casts `idString` to an ObjectId\nconst queryRes = await Person.findOne({ _id: idString });\n\n// Does **not** find the `Person`, because Mongoose doesn't cast aggregation\n// pipelines.\nconst aggRes = await Person.aggregate([{ $match: { _id: idString } }]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Mongoose Schema with Nested Properties\nDESCRIPTION: Shows how to define a Mongoose schema with nested properties, demonstrating the special handling of the 'type' key.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: { type: String },\n  nested: {\n    firstName: { type: String },\n    lastName: { type: String }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Subdocuments in Mongoose\nDESCRIPTION: Shows how subdocuments are saved as part of their parent document and demonstrates subdocument middleware execution.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/subdocs.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parent = mongoose.model('Parent', parentSchema);\nconst parent = new Parent({ children: [{ name: 'Matt' }, { name: 'Sarah' }] });\nparent.children[0].name = 'Matthew';\n\n// `parent.children[0].save()` is a no-op, it triggers middleware but\n// does **not** actually save the subdocument. You need to save the parent\n// doc.\nawait parent.save();\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Subdocument Schemas in Mongoose\nDESCRIPTION: Shows how to define schemas with both array subdocuments and single nested subdocuments using Mongoose Schema constructor.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/subdocs.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema = new Schema({ name: 'string' });\n\nconst parentSchema = new Schema({\n  // Array of subdocuments\n  children: [childSchema],\n  // Single nested subdocuments\n  child: childSchema\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Server Selection Timeout\nDESCRIPTION: Shows how to configure a custom serverSelectionTimeoutMS value of 5000ms (5 seconds) for faster connection feedback.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect(uri, {\n  serverSelectionTimeoutMS: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Statics and Methods with Automatic Type Inference in TypeScript\nDESCRIPTION: This snippet demonstrates how to define statics and methods using the 'statics' and 'methods' schema options in Mongoose with TypeScript. It shows how to create a schema, define methods and statics, and use them with proper type inference.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userSchema = new mongoose.Schema(\n  { name: { type: String, required: true } },\n  {\n    methods: {\n      updateName(name: string) {\n        this.name = name;\n        return this.save();\n      }\n    },\n    statics: {\n      createWithName(name: string) {\n        return this.create({ name });\n      }\n    }\n  }\n);\nconst UserModel = mongoose.model('User', userSchema);\n\nconst doc = new UserModel({ name: 'test' });\n// Compiles correctly\ndoc.updateName('foo');\n// Compiles correctly\nUserModel.createWithName('bar');\n```\n\n----------------------------------------\n\nTITLE: Working with Thenable Queries in Mongoose\nDESCRIPTION: Shows how Mongoose queries are thenables (having a .then() function) which allows them to work with promise chaining and async/await patterns despite not being true promises.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/promises.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Queries are thenable]\n```\n\n----------------------------------------\n\nTITLE: Enabling AsyncLocalStorage for Mongoose Transactions\nDESCRIPTION: Shows how to enable AsyncLocalStorage for Mongoose transactions, which automatically sets the session option on all operations within a transaction executor function.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/transactions.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.set('transactionAsyncLocalStorage', true);\n\nconst Test = mongoose.model('Test', mongoose.Schema({ name: String }));\n\nconst doc = new Test({ name: 'test' });\n\n// Save a new doc in a transaction that aborts\nawait connection.transaction(async() => {\n  await doc.save(); // Notice no session here\n  throw new Error('Oops');\n}).catch(() => {});\n\n// false, `save()` was rolled back\nawait Test.exists({ _id: doc._id });\n```\n\n----------------------------------------\n\nTITLE: Model.validate() Object Handling in Mongoose 8\nDESCRIPTION: Shows how Mongoose 8 modifies validation behavior to return a copy of the validated object instead of modifying the original object, preserving input object integrity.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ answer: Number });\nconst Test = mongoose.model('Test', schema);\n\nconst obj = { answer: '42' };\nconst res = Test.validate(obj);\n\ntypeof obj.answer; // 'string' in Mongoose 8, 'number' in Mongoose 7 \ntypeof res.answer; // 'number' in both Mongoose 7 and Mongoose 8\n```\n\n----------------------------------------\n\nTITLE: Understanding Return Values of Async Functions in Mongoose\nDESCRIPTION: Illustrates how async functions always return promises regardless of their internal return values. This example shows a common mistake of treating the async function's return value as a direct value rather than a promise.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/async-await.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getUser() {\n  // Inside getUser, we can await an async operation and interact with\n  // foundUser as a normal, non-promise value...\n  const foundUser = await User.findOne({ name: 'bill' });\n\n  console.log(foundUser); // Prints '{name: 'bill', admin: false}'\n  return foundUser;\n}\n\n// However, because async functions always return a promise,\n// user is a promise.\nconst user = getUser();\n\nconsole.log(user); // Oops.  Prints '[Promise]'\n```\n\n----------------------------------------\n\nTITLE: Map Operations in Mongoose\nDESCRIPTION: Shows the correct ways to get and set values in a Mongoose Map, including proper usage of .get() and .set() methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = new User({\n  socialMediaHandles: {}\n});\n\n// Good\nuser.socialMediaHandles.set('github', 'vkarpov15');\n// Works too\nuser.set('socialMediaHandles.twitter', '@code_barbarian');\n// Bad, the `myspace` property will **not** get saved\nuser.socialMediaHandles.myspace = 'fail';\n\nconsole.log(user.socialMediaHandles.get('github'));\nconsole.log(user.get('socialMediaHandles.twitter'));\nuser.socialMediaHandles.github;\n\nuser.save();\n```\n\n----------------------------------------\n\nTITLE: Using SchemaType Options in Mongoose\nDESCRIPTION: Illustrates how to use SchemaType options to customize the behavior of schema properties, such as applying lowercase transformation to a string.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema2 = new Schema({\n  test: {\n    type: String,\n    lowercase: true // Always convert `test` to lowercase\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Arrays in Mongoose Schemas\nDESCRIPTION: Demonstrates how to declare arrays of different types and handle array defaults in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst ToySchema = new Schema({ name: String });\nconst ToyBoxSchema = new Schema({\n  toys: [ToySchema],\n  buffers: [Buffer],\n  strings: [String],\n  numbers: [Number]\n  // ... etc\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ToyBox = mongoose.model('ToyBox', ToyBoxSchema);\nconsole.log((new ToyBox()).toys); // []\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ToyBoxSchema = new Schema({\n  toys: {\n    type: [ToySchema],\n    default: undefined\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Empty1 = new Schema({ any: [] });\nconst Empty2 = new Schema({ any: Array });\nconst Empty3 = new Schema({ any: [Schema.Types.Mixed] });\nconst Empty4 = new Schema({ any: [{}] });\n```\n\n----------------------------------------\n\nTITLE: Creating an Encryption Key for MongoDB CSFLE with Mongoose\nDESCRIPTION: Demonstrates how to connect to MongoDB and create a new encryption key for Client Side Field Level Encryption. This creates a basic local key and stores it in the key vault.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/field-level-encryption.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ClientEncryption } = require('mongodb');\nconst mongoose = require('mongoose');\n\nrun().catch(err => console.log(err));\n\nasync function run() {\n  /* Step 1: Connect to MongoDB and insert a key */\n\n  // Create a very basic key. You're responsible for making\n  // your key secure, don't use this in prod :)\n  const arr = [];\n  for (let i = 0; i < 96; ++i) {\n    arr.push(i);\n  }\n  const key = Buffer.from(arr);\n\n  const keyVaultNamespace = 'client.encryption';\n  const kmsProviders = { local: { key } };\n\n  const uri = 'mongodb://127.0.0.1:27017/mongoose_test';\n  const conn = await mongoose.createConnection(uri, {\n    autoEncryption: {\n      keyVaultNamespace,\n      kmsProviders\n    }\n  }).asPromise();\n  const encryption = new ClientEncryption(conn.getClient(), {\n    keyVaultNamespace,\n    kmsProviders,\n  });\n\n  const _key = await encryption.createDataKey('local', {\n    keyAltNames: ['exampleKeyName'],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS/SSL Connections in Mongoose\nDESCRIPTION: Demonstrates how to enable TLS/SSL connections using either connection options or query parameters in the connection string. TLS is automatically enabled for mongodb+srv:// connection strings used with MongoDB Atlas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/ssl.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://127.0.0.1:27017/test', { tls: true });\n\n// Equivalent:\nmongoose.connect('mongodb://127.0.0.1:27017/test?tls=true');\n```\n\n----------------------------------------\n\nTITLE: Preventing Cursor Timeout in Mongoose Queries\nDESCRIPTION: Shows how to prevent MongoDB from automatically closing a cursor after its default 10-minute timeout period by setting the noCursorTimeout flag. This is useful for long-running operations that process large result sets.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// MongoDB won't automatically close this cursor after 10 minutes.\nconst cursor = Person.find().cursor().addCursorFlag('noCursorTimeout', true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Timestamps in Mongoose Schema\nDESCRIPTION: Demonstrates basic timestamp functionality in Mongoose schema creation and document operations. Shows how createdAt and updatedAt are automatically managed during create and update operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/timestamps.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({ name: String }, { timestamps: true });\nconst User = mongoose.model('User', userSchema);\n\nlet doc = await User.create({ name: 'test' });\n\nconsole.log(doc.createdAt); // 2022-02-26T16:37:48.244Z\nconsole.log(doc.updatedAt); // 2022-02-26T16:37:48.244Z\n\ndoc.name = 'test2';\nawait doc.save();\nconsole.log(doc.createdAt); // 2022-02-26T16:37:48.244Z\nconsole.log(doc.updatedAt); // 2022-02-26T16:37:48.307Z\n\ndoc = await User.findOneAndUpdate({ _id: doc._id }, { name: 'test3' }, { new: true });\nconsole.log(doc.createdAt); // 2022-02-26T16:37:48.244Z\nconsole.log(doc.updatedAt); // 2022-02-26T16:37:48.366Z\n```\n\n----------------------------------------\n\nTITLE: Excluding Paths from Versioning in Mongoose\nDESCRIPTION: Shows how to use the 'skipVersioning' option to exclude specific paths from versioning. This prevents the internal revision from being incremented when these paths are updated.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nnew Schema({ /* ... */ }, { skipVersioning: { dontVersionMe: true } });\nthing.dontVersionMe.push('hey');\nthing.save(); // version is not incremented\n```\n\n----------------------------------------\n\nTITLE: Understanding Why Queries are Not Promises\nDESCRIPTION: Explains that Mongoose queries are not full promises but have a .then() function for convenience. Demonstrates the difference between using a query directly and using .exec() to get a fully-fledged promise.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/promises.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Queries are not promises]\n```\n\n----------------------------------------\n\nTITLE: Mongoose Subdocument Middleware Example\nDESCRIPTION: Illustrates how validation and save middleware work with subdocuments, including error handling.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/subdocs.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchildSchema.pre('save', function(next) {\n  if ('invalid' == this.name) {\n    return next(new Error('#sadpanda'));\n  }\n  next();\n});\n\nconst parent = new Parent({ children: [{ name: 'invalid' }] });\ntry {\n  await parent.save();\n} catch (err) {\n  err.message; // '#sadpanda'\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unique Index Behavior with Duplicate Creation After Index Build\nDESCRIPTION: Shows how waiting for indexes to build using Model.init() properly enforces unique constraints. This example demonstrates how duplicate creation will throw an error after indexes are ready.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({\n  name: { type: String, unique: true }\n});\nconst Model = db.model('Test', schema);\n\n// Wait for model's indexes to finish. The `init()`\n// function is idempotent, so don't worry about triggering an index rebuild.\nawait Model.init();\n\n// Throws a duplicate key error\nawait Model.create([{ name: 'Val' }, { name: 'Val' }]);\n```\n\n----------------------------------------\n\nTITLE: Handling Cast Errors in Mongoose Queries\nDESCRIPTION: Demonstrates error handling when Mongoose fails to cast filter values to match the schema types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*cast error]\n```\n\n----------------------------------------\n\nTITLE: Overwriting Mongoose's Default _id with Custom Type\nDESCRIPTION: Demonstrates how to replace the default ObjectId _id with a custom type, showing that documents must have an _id before saving.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  _id: Number // <-- overwrite Mongoose's default `_id`\n});\nconst Model = mongoose.model('Test', schema);\n\nconst doc = new Model();\nawait doc.save(); // Throws \"document must have an _id before saving\"\n\ndoc._id = 1;\nawait doc.save(); // works\n```\n\n----------------------------------------\n\nTITLE: Setting Custom CA File for TLS/SSL Validation in Mongoose\nDESCRIPTION: Demonstrates how to specify a custom Certificate Authority file for TLS/SSL validation, which is necessary when connecting to MongoDB instances using self-signed certificates.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/ssl.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait mongoose.connect('mongodb://127.0.0.1:27017/test', {\n  tls: true,\n  // For example, see https://medium.com/@rajanmaharjan/secure-your-mongodb-connections-ssl-tls-92e2addb3c89\n  // for where the `rootCA.pem` file comes from.\n  tlsCAFile: `${__dirname}/rootCA.pem`,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Lean Method with Mongoose Queries in JavaScript\nDESCRIPTION: Demonstrates how to use the lean() method with a Mongoose findOne query to get a plain JavaScript object instead of a full Mongoose document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst leanDoc = await MyModel.findOne().lean();\n```\n\n----------------------------------------\n\nTITLE: Setting Write Concern in Mongoose Schema\nDESCRIPTION: This snippet shows how to set write concern at the schema level in Mongoose. Write concern determines the level of acknowledgment requested from MongoDB for write operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String }, {\n  writeConcern: {\n    w: 'majority',\n    j: true,\n    wtimeout: 1000\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Discriminator Keys\nDESCRIPTION: Demonstrates the default behavior when attempting to update discriminator keys and the restrictions in place.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Update discriminator key]\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Casting in Mongoose\nDESCRIPTION: Shows how to customize Boolean type casting behavior by modifying the convertToTrue and convertToFalse sets.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst M = mongoose.model('Test', new Schema({ b: Boolean }));\nconsole.log(new M({ b: 'nay' }).b); // undefined\n\n// Set { false, 'false', 0, '0', 'no' }\nconsole.log(mongoose.Schema.Types.Boolean.convertToFalse);\n\nmongoose.Schema.Types.Boolean.convertToFalse.add('nay');\nconsole.log(new M({ b: 'nay' }).b); // false\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectId Types in Mongoose with TypeScript\nDESCRIPTION: This snippet demonstrates how to properly define ObjectId types in both the TypeScript interface and the Mongoose schema. It uses Types.ObjectId for the interface and Schema.Types.ObjectId for the schema definition.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, Types } from 'mongoose';\n\n// 1. Create an interface representing a document in MongoDB.\ninterface IUser {\n  name: string;\n  email: string;\n  // Use `Types.ObjectId` in document interface...\n  organization: Types.ObjectId;\n}\n\n// 2. Create a Schema corresponding to the document interface.\nconst userSchema = new Schema<IUser>({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  // And `Schema.Types.ObjectId` in the schema definition.\n  organization: { type: Schema.Types.ObjectId, ref: 'Organization' }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring strictQuery Option in Mongoose\nDESCRIPTION: This snippet demonstrates the use of the 'strictQuery' option in Mongoose, which controls whether unknown fields in query filters are removed or allowed. It's separate from the 'strict' option and only applies to query filters.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySchema = new Schema({ field: Number }, { strict: true });\nconst MyModel = mongoose.model('Test', mySchema);\n// Mongoose will filter out `notInSchema: 1` because `strict: true`, meaning this query will return\n// _all_ documents in the 'tests' collection\nMyModel.find({ notInSchema: 1 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Mongoose will strip out `notInSchema` from the update if `strict` is\n// not `false`\nMyModel.updateMany({}, { $set: { notInSchema: 1 } });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst mySchema = new Schema({ field: Number }, {\n  strict: true,\n  strictQuery: false // Turn off strict mode for query filters\n});\nconst MyModel = mongoose.model('Test', mySchema);\n// Mongoose will not strip out `notInSchema: 1` because `strictQuery` is false\nMyModel.find({ notInSchema: 1 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this!\nconst docs = await MyModel.find(req.query);\n\n// Do this instead:\nconst docs = await MyModel.find({ name: req.query.name, age: req.query.age }).setOptions({ sanitizeFilter: true });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Set `strictQuery` to `true` to omit unknown fields in queries.\nmongoose.set('strictQuery', true);\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema Pattern\nDESCRIPTION: Shows the recommended pattern for exporting schemas instead of models when working with multiple connections.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({ name: String, email: String });\n\n// The alternative to the export model pattern is the export schema pattern.\nmodule.exports = userSchema;\n\n// Because if you export a model as shown below, the model will be scoped\n// to Mongoose's default connection.\n// module.exports = mongoose.model('User', userSchema);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Setters in Mongoose\nDESCRIPTION: Example of implementing a setter function to normalize email addresses by converting them to lowercase before storing in MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*setters.*basic]\n```\n\n----------------------------------------\n\nTITLE: Timer Mocks Usage with Mongoose\nDESCRIPTION: Examples showing correct and incorrect ways to implement timer mocks with Mongoose, demonstrating proper import ordering.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/jest.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Fine for basic cases, but may still cause issues:\nconst mongoose = require('mongoose');\n\njest.useFakeTimers();\n\n// Bad:\njest.useFakeTimers();\n\nconst mongoose = require('mongoose');\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Preferences in Mongoose Schema\nDESCRIPTION: This snippet demonstrates how to set read preferences at the schema level in Mongoose. It shows various read preference options and how to specify tag sets for replica set member selection.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ /* ... */ }, { read: 'primary' });            // also aliased as 'p'\nconst schema = new Schema({ /* ... */ }, { read: 'primaryPreferred' });   // aliased as 'pp'\nconst schema = new Schema({ /* ... */ }, { read: 'secondary' });          // aliased as 's'\nconst schema = new Schema({ /* ... */ }, { read: 'secondaryPreferred' }); // aliased as 'sp'\nconst schema = new Schema({ /* ... */ }, { read: 'nearest' });            // aliased as 'n'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// pings the replset members periodically to track network latency\nconst options = { replset: { strategy: 'ping' } };\nmongoose.connect(uri, options);\n\nconst schema = new Schema({ /* ... */ }, { read: ['nearest', { disk: 'ssd' }] });\nmongoose.model('JellyBean', schema);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Validation in Mongoose\nDESCRIPTION: Shows how to disable automatic validation before saving documents by setting the 'validateBeforeSave' option to false. This allows saving objects that don't pass validation, enabling manual validation handling.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.set('validateBeforeSave', false);\nschema.path('name').validate(function(value) {\n  return value != null;\n});\nconst M = mongoose.model('Person', schema);\nconst m = new M({ name: null });\nm.validate(function(err) {\n  console.log(err); // Will tell you that null is not allowed.\n});\nm.save(); // Succeeds despite being invalid\n```\n\n----------------------------------------\n\nTITLE: Configuring setDefaultsOnInsert Option in Mongoose\nDESCRIPTION: Demonstrates how to use the setDefaultsOnInsert option to control default value behavior during upsert operations. This option can be set at the schema level or globally.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/defaults.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: String,\n  age: { type: Number, default: 25 }\n}, { setDefaultsOnInsert: false });\n\nconst User = mongoose.model('User', schema);\n\nUser.updateOne(\n  { name: 'Jean-Luc Picard' },\n  { name: 'Jean-Luc Picard' },\n  { upsert: true }\n).then(() => {\n  return User.findOne({ name: 'Jean-Luc Picard' });\n}).then(user => {\n  console.log(user.age); // undefined\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.set('setDefaultsOnInsert', false);\n```\n\n----------------------------------------\n\nTITLE: Configuring strictQuery Behavior in Mongoose 6.x\nDESCRIPTION: Demonstrates how to configure the strictQuery option, which is now set to the value of strict by default in Mongoose 6.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({ name: String });\nconst User = mongoose.model('User', userSchema);\n\n// By default, this is equivalent to `User.find()` because Mongoose filters out `notInSchema`\nawait User.find({ notInSchema: 1 });\n\n// Set `strictQuery: false` to opt in to filtering by properties that aren't in the schema\nawait User.find({ notInSchema: 1 }, null, { strictQuery: false });\n// equivalent:\nawait User.find({ notInSchema: 1 }).setOptions({ strictQuery: false });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.set('strictQuery', false);\n```\n\n----------------------------------------\n\nTITLE: Comparing Document Sizes in Mongoose\nDESCRIPTION: Code that compares the size difference between regular Mongoose documents and lean documents to demonstrate memory efficiency.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Lean Tutorial.*compare sizes]\n```\n\n----------------------------------------\n\nTITLE: Configuring toJSON Option in Mongoose Schema\nDESCRIPTION: This snippet shows how to use the 'toJSON' option in a Mongoose schema. It affects the output when a document's toJSON method is called or when the document is stringified.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.path('name').get(function(v) {\n  return v + ' is my name';\n});\nschema.set('toJSON', { getters: true, virtuals: false });\nconst M = mongoose.model('Person', schema);\nconst m = new M({ name: 'Max Headroom' });\nconsole.log(m.toObject()); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom' }\nconsole.log(m.toJSON()); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }\n// since we know toJSON is called whenever a js object is stringified:\nconsole.log(JSON.stringify(m)); // { \"_id\": \"504e0cd7dd992d9be2f20b6f\", \"name\": \"Max Headroom is my name\" }\n```\n\n----------------------------------------\n\nTITLE: Using includeResultMetadata Instead of rawResult in findOneAndUpdate\nDESCRIPTION: Demonstrates the replacement of the rawResult option with includeResultMetadata in findOneAndUpdate operations. The new option provides identical functionality to the previous rawResult option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter = { name: 'Will Riker' };\nconst update = { age: 29 };\n\nconst res = await Character.findOneAndUpdate(filter, update, {\n  new: true,\n  upsert: true,\n  // Replace `rawResult: true` with `includeResultMetadata: true`\n  includeResultMetadata: true\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling _id in Subdocuments Using Schema Options\nDESCRIPTION: Shows how to disable the automatic _id generation for subdocuments by setting _id: false in the schema options.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst nestedSchema = new Schema(\n  { name: String },\n  { _id: false } // <-- disable `_id`\n);\nconst schema = new Schema({\n  subdoc: nestedSchema,\n  docArray: [nestedSchema]\n});\nconst Test = mongoose.model('Test', schema);\n\n// Neither `subdoc` nor `docArray.0` will have an `_id`\nawait Test.create({\n  subdoc: { name: 'test 1' },\n  docArray: [{ name: 'test 2' }]\n});\n```\n\n----------------------------------------\n\nTITLE: Mongoose Schema for GeoJSON Point\nDESCRIPTION: Definition of a Mongoose schema with a GeoJSON point location field using inline type definition.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/geojson.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst citySchema = new mongoose.Schema({\n  name: String,\n  location: {\n    type: {\n      type: String, // Don't do `{ location: { type: String } }`\n      enum: ['Point'], // 'location.type' must be 'Point'\n      required: true\n    },\n    coordinates: {\n      type: [Number],\n      required: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Property Names in Mongoose\nDESCRIPTION: Shows how to customize the property names used for timestamps in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/timestamps.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({ name: String }, {\n  timestamps: {\n    createdAt: 'created_at', // Use `created_at` to store the created date\n    updatedAt: 'updated_at' // and `updated_at` to store the last updated date\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Errors in Mongoose Connection\nDESCRIPTION: Shows how to handle authentication errors during MongoDB connection and access the error reason property.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nconst uri = 'mongodb+srv://username:badpw@cluster0-OMITTED.mongodb.net/' +\n  'test?retryWrites=true&w=majority';\n// Prints \"MongoServerError: bad auth Authentication failed.\"\nmongoose.connect(uri, {\n  serverSelectionTimeoutMS: 5000\n}).catch(err => console.log(err.reason));\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Fields in Mongoose Query\nDESCRIPTION: Shows how to sort query results by multiple fields (age and weight) in Mongoose. It creates a Person model with age, name, and weight fields, and demonstrates how the order of sort keys affects the sorting priority.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst personSchema = new mongoose.Schema({\n  age: Number,\n  name: String,\n  weight: Number\n});\n\nconst Person = mongoose.model('Person', personSchema);\nconst iterations = 5;\nfor (let i = 0; i < iterations; i++) {\n  await Person.create({\n    age: Math.abs(2 - i),\n    name: 'Test' + i,\n    weight: Math.floor(Math.random() * 100) + 1\n  });\n}\n\nawait Person.find().sort({ age: 1, weight: -1 }); // returns age starting from 0, but while keeping that order will then sort by weight.\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Connection Options in Mongoose 6.x\nDESCRIPTION: Shows how to update Mongoose connection code by removing deprecated options that are no longer necessary in Mongoose 6.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// No longer necessary:\nmongoose.set('useFindAndModify', false);\n\nawait mongoose.connect('mongodb://127.0.0.1:27017/test', {\n  useNewUrlParser: true, // <-- no longer necessary\n  useUnifiedTopology: true // <-- no longer necessary\n});\n```\n\n----------------------------------------\n\nTITLE: Array Modification with Proxies\nDESCRIPTION: Demonstrates how arrays in Mongoose 6 are ES6 proxies, eliminating the need for explicit markModified() calls.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = await BlogPost.findOne();\n\npost.tags[0] = 'javascript';\nawait post.save(); // Works, no need for `markModified()`!\n```\n\n----------------------------------------\n\nTITLE: Replacing update() with updateOne() in Mongoose 7\nDESCRIPTION: Shows how to replace the removed update() method with updateOne() for models, queries, and documents in Mongoose 7.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nawait Model.update(filter, update);\nawait doc.update(update);\n\n// After\nawait Model.updateOne(filter, update);\nawait doc.updateOne(update);\n```\n\n----------------------------------------\n\nTITLE: Configuring Discriminator Key in Mongoose Schema\nDESCRIPTION: Demonstrates how to set a custom discriminator key for schema inheritance, replacing the default '__t' path.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseSchema = new Schema({}, { discriminatorKey: 'type' });\nconst BaseModel = mongoose.model('Test', baseSchema);\n\nconst personSchema = new Schema({ name: String });\nconst PersonModel = BaseModel.discriminator('Person', personSchema);\n\nconst doc = new PersonModel({ name: 'James T. Kirk' });\n// Without `discriminatorKey`, Mongoose would store the discriminator\n// key in `__t` instead of `type`\ndoc.type; // 'Person'\n```\n\n----------------------------------------\n\nTITLE: Working with Cast Errors in Mongoose\nDESCRIPTION: Demonstrates how casting works before validation and how cast errors are handled. Shows that validation doesn't run if casting fails and how to access cast error information.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Errors]\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Synchronous Init Hooks in Mongoose\nDESCRIPTION: This snippet demonstrates error handling in synchronous init hooks for Mongoose. Unlike other middleware, init middleware does not handle promise rejections and requires throwing synchronous errors.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n[require:post init hooks.*error]\n```\n\n----------------------------------------\n\nTITLE: Defining Geospatial Index in Mongoose\nDESCRIPTION: Example showing how to define a 2dsphere index for GeoJSON fields using Schema#index().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/geojson.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncitySchema.index({ location: '2dsphere' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Capped Collections in Mongoose Schema\nDESCRIPTION: Demonstrates how to set up a capped collection using schema options, including specifying size and additional parameters like max documents and auto-indexing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nnew Schema({ /* ... */ }, { capped: 1024 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew Schema({ /* ... */ }, { capped: { size: 1024, max: 1000, autoIndexId: true } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Shard Key in Mongoose Schema\nDESCRIPTION: This snippet demonstrates how to set a shard key in a Mongoose schema for use with sharded MongoDB architectures. The shard key must be present in all insert/update operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nnew Schema({ /* ... */ }, { shardKey: { tag: 1, name: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Selection Timeout in Mongoose\nDESCRIPTION: Demonstrates how to set a custom server selection timeout when connecting to MongoDB using the serverSelectionTimeoutMS option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect(uri, {\n  serverSelectionTimeoutMS: 5000 // Timeout after 5s instead of 30s\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Distinct Return Type Inference in Mongoose 8\nDESCRIPTION: Shows how Mongoose 8 adds support for inferring return types from schema definitions when using the distinct() method, improving TypeScript type safety.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  name: string;\n  email: string;\n  avatar?: string;\n}\nconst schema = new Schema<User>({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String\n});\n\n// Works in Mongoose 8. Compile error in Mongoose 7.\nconst names: string[] = await MyModel.distinct('name');\n```\n\n----------------------------------------\n\nTITLE: Handling Virtuals with Lean Queries\nDESCRIPTION: Illustrates that virtuals are not included when using lean queries, and suggests a plugin for including virtuals with lean.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  name: String,\n  email: String\n});\n\nUserSchema.virtual('domain').get(function() {\n  return this.email.slice(this.email.indexOf('@') + 1);\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nconst doc = await User.findOne().lean();\nconsole.log(doc.domain); // undefined\n```\n\n----------------------------------------\n\nTITLE: Including Virtuals in JSON Output\nDESCRIPTION: Demonstrates how to configure a Mongoose schema to include virtual properties when converting a document to JSON.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst opts = { toJSON: { virtuals: true } };\nconst UserSchema = new Schema({ email: String }, opts);\n\nUserSchema.virtual('domain').get(function() {\n  return this.email.slice(this.email.indexOf('@') + 1);\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nconst user = new User({ email: 'test@gmail.com' });\n\nconsole.log(user.toJSON());\n// { email: 'test@gmail.com', domain: 'gmail.com', _id: ... }\n```\n\n----------------------------------------\n\nTITLE: Query Sanitization with sanitizeFilter\nDESCRIPTION: Shows how to use the new sanitizeFilter option and trusted() method to prevent query selector injection attacks.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Mongoose will convert this filter into `{ username: 'val', pwd: { $eq: { $ne: null } } }`, preventing\n// a query selector injection.\nawait Test.find({ username: 'val', pwd: { $ne: null } }).setOptions({ sanitizeFilter: true });\n\n// `mongoose.trusted()` allows query selectors through\nawait Test.find({ username: 'val', pwd: mongoose.trusted({ $ne: null }) }).setOptions({ sanitizeFilter: true });\n```\n\n----------------------------------------\n\nTITLE: Combining Instance Methods and Static Functions in Mongoose with TypeScript\nDESCRIPTION: This snippet illustrates how to define a Mongoose model that has both instance methods and static functions using TypeScript. It shows the creation of interfaces for the document, methods, and model, and how to use these with the Schema and Model types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics-and-methods.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model, Schema, HydratedDocument, model } from 'mongoose';\n\ninterface IUser {\n  firstName: string;\n  lastName: string;\n}\n\ninterface IUserMethods {\n  fullName(): string;\n}\n\ninterface UserModel extends Model<IUser, {}, IUserMethods> {\n  createWithFullName(name: string): Promise<HydratedDocument<IUser, IUserMethods>>;\n}\n\nconst schema = new Schema<IUser, UserModel, IUserMethods>({\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true }\n});\nschema.static('createWithFullName', function createWithFullName(name: string) {\n  const [firstName, lastName] = name.split(' ');\n  return this.create({ firstName, lastName });\n});\nschema.method('fullName', function fullName(): string {\n  return this.firstName + ' ' + this.lastName;\n});\n\nconst User = model<IUser, UserModel>('User', schema);\n\nUser.createWithFullName('Jean-Luc Picard').then(doc => {\n  console.log(doc.firstName); // 'Jean-Luc'\n  doc.fullName(); // 'Jean-Luc Picard'\n});\n```\n\n----------------------------------------\n\nTITLE: Using toObject Option in Mongoose Schema\nDESCRIPTION: This snippet demonstrates the use of the 'toObject' option in a Mongoose schema. It affects how the document is converted to a plain JavaScript object, including whether getters are applied.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.path('name').get(function(v) {\n  return v + ' is my name';\n});\nschema.set('toObject', { getters: true });\nconst M = mongoose.model('Person', schema);\nconst m = new M({ name: 'Max Headroom' });\nconsole.log(m); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }\n```\n\n----------------------------------------\n\nTITLE: Disabling 'id' Virtual Getter in Mongoose Schema\nDESCRIPTION: Demonstrates how to disable the default 'id' virtual getter that Mongoose adds to schemas, which typically returns the '_id' field as a string.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// default behavior\nconst schema = new Schema({ name: String });\nconst Page = mongoose.model('Page', schema);\nconst p = new Page({ name: 'mongodb.org' });\nconsole.log(p.id); // '50341373e894ad16347efe01'\n\n// disabled id\nconst schema = new Schema({ name: String }, { id: false });\nconst Page = mongoose.model('Page', schema);\nconst p = new Page({ name: 'mongodb.org' });\nconsole.log(p.id); // undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Documents with Encrypted Fields in Mongoose\nDESCRIPTION: Demonstrates how to create a Mongoose model and insert a document with an encrypted field. The 'name' field will be automatically encrypted based on the previously configured schemaMap.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/field-level-encryption.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 'super secret' will be stored as 'BinData' in the database,\n// if you query using the `mongo` shell.\nconst Model = mongoose.model('Test', mongoose.Schema({ name: String }));\nawait Model.create({ name: 'super secret' });\n```\n\n----------------------------------------\n\nTITLE: Declaring Number Schema Types in Mongoose\nDESCRIPTION: Shows how to declare number schema types and demonstrates number casting behavior with different input types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema1 = new Schema({ age: Number }); // age will be cast to a Number\nconst schema2 = new Schema({ age: 'Number' }); // Equivalent\n\nconst Car = mongoose.model('Car', schema2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew Car({ age: '15' }).age; // 15 as a Number\nnew Car({ age: true }).age; // 1 as a Number\nnew Car({ age: false }).age; // 0 as a Number\nnew Car({ age: { valueOf: () => 83 } }).age; // 83 as a Number\n```\n\n----------------------------------------\n\nTITLE: Using ObjectId Constructor with 'new' Keyword in Mongoose 7\nDESCRIPTION: Demonstrates the requirement to use the 'new' keyword with ObjectId constructor in Mongoose 7, as it's now a JavaScript class.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Works in Mongoose 6\n// Throws \"Class constructor ObjectId cannot be invoked without 'new'\" in Mongoose 7\nconst oid = mongoose.Types.ObjectId('0'.repeat(24));\n\n// Works in Mongoose 6 and Mongoose 7\nconst oid = new mongoose.Types.ObjectId('0'.repeat(24));\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Selection Timeout in Mongoose\nDESCRIPTION: Demonstrates how the serverSelectionTimeoutMS option affects connection attempts to MongoDB servers. Shows the default 30-second timeout behavior when connecting to non-existent servers.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait mongoose.connect('mongodb://doesnt.exist:27017/test');\n```\n\n----------------------------------------\n\nTITLE: Using Lean with Virtual Populate in Mongoose\nDESCRIPTION: Demonstrates that virtual populate also works with lean queries, returning plain JavaScript objects for virtually populated fields.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Lean Tutorial.*virtual populate]\n```\n\n----------------------------------------\n\nTITLE: Customizing Cast Error Messages in Mongoose\nDESCRIPTION: Shows how to override Mongoose's default cast error messages using the 'cast' option on a SchemaType, supporting templating with parameters like {PATH}, {VALUE}, and {KIND}.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Error Message Overwrite]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose Auto-Index Settings\nDESCRIPTION: Shows different ways to configure auto-indexing behavior in Mongoose, including connection level and schema level settings.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://user:pass@127.0.0.1:port/database', { autoIndex: false });\n// or\nmongoose.createConnection('mongodb://user:pass@127.0.0.1:port/database', { autoIndex: false });\n// or\nmongoose.set('autoIndex', false);\n// or\nanimalSchema.set('autoIndex', false);\n// or\nnew Schema({ /* ... */ }, { autoIndex: false });\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Point Structure Example\nDESCRIPTION: Example of a basic GeoJSON point structure representing San Francisco's location.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/geojson.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\" : \"Point\",\n  \"coordinates\" : [\n    -122.5,\n    37.7\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Schema Minimize Option in Mongoose\nDESCRIPTION: This snippet shows how the 'minimize' option affects the storage of empty objects in MongoDB. By default, Mongoose removes empty objects, but setting minimize to false will store them.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String, inventory: {} });\nconst Character = mongoose.model('Character', schema);\n\n// will store `inventory` field if it is not empty\nconst frodo = new Character({ name: 'Frodo', inventory: { ringOfPower: 1 } });\nawait frodo.save();\nlet doc = await Character.findOne({ name: 'Frodo' }).lean();\ndoc.inventory; // { ringOfPower: 1 }\n\n// will not store `inventory` field if it is empty\nconst sam = new Character({ name: 'Sam', inventory: {} });\nawait sam.save();\ndoc = await Character.findOne({ name: 'Sam' }).lean();\ndoc.inventory; // undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String, inventory: {} }, { minimize: false });\nconst Character = mongoose.model('Character', schema);\n\n// will store `inventory` if empty\nconst sam = new Character({ name: 'Sam', inventory: {} });\nawait sam.save();\ndoc = await Character.findOne({ name: 'Sam' }).lean();\ndoc.inventory; // {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sam = new Character({ name: 'Sam', inventory: {} });\nsam.$isEmpty('inventory'); // true\n\nsam.inventory.barrowBlade = 1;\nsam.$isEmpty('inventory'); // false\n```\n\n----------------------------------------\n\nTITLE: Handling save() Promise in Mongoose\nDESCRIPTION: Demonstrates how to work with the promise returned by the save() method and compare the saved document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndoc.save().then(savedDoc => {\n  savedDoc === doc; // true\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Mongoose's Buffer Commands Globally\nDESCRIPTION: This snippet shows how to disable Mongoose's buffering mechanism across the entire application by setting the global 'bufferCommands' option to false.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.set('bufferCommands', false);\n```\n\n----------------------------------------\n\nTITLE: Alternative Method to Disable _id in Nested Schemas\nDESCRIPTION: Demonstrates an alternative syntax for disabling the _id property in nested schemas by including it directly in the schema definition.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nestedSchema = new Schema({\n  _id: false, // <-- disable _id\n  name: String\n});\n```\n\n----------------------------------------\n\nTITLE: Using Nullish Coalescing with Mongoose Documents\nDESCRIPTION: Demonstrates the correct and incorrect ways to use nullish coalescing assignments with nested paths in Mongoose documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// The following works fine\nconst doc3 = new TestModel();\ndoc3.nested.subdoc ??= {};\ndoc3.nested.subdoc.name = 'John Smythe';\n\n// The following does **NOT** work.\n// Do not use the following pattern with Mongoose documents.\nconst doc4 = new TestModel();\n(doc4.nested.subdoc ??= {}).name = 'Charlie Smith';\ndoc.nested.subdoc; // Empty object\ndoc.nested.subdoc.name; // undefined.\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Nested Discriminators\nDESCRIPTION: Demonstrates how to define discriminators on single nested subdocuments for schema differentiation within a document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Single nested discriminators]\n```\n\n----------------------------------------\n\nTITLE: Using Functions for Custom Cast Error Messages in Mongoose\nDESCRIPTION: Demonstrates how to define a function that Mongoose will call to generate custom cast error messages, allowing dynamic error message generation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/validation.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Error Message Function Overwrite]\n```\n\n----------------------------------------\n\nTITLE: Query Middleware Changes in Mongoose 5.x\nDESCRIPTION: Demonstrates how query middleware compilation timing has changed in Mongoose 5.x. Middleware must now be defined before calling mongoose.model() to be effective.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nconst MyModel = mongoose.model('Test', schema);\nschema.pre('find', () => { console.log('find!'); });\n\nMyModel.find().exec(function() {\n  // In mongoose 4.x, the above `.find()` will print \"find!\"\n  // In mongoose 5.x, \"find!\" will **not** be printed.\n  // Call `pre('find')` **before** calling `mongoose.model()` to make the middleware apply.\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Collection Name in Mongoose Schema\nDESCRIPTION: Shows how to specify a custom collection name for a schema, overriding Mongoose's default pluralization behavior.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSchema = new Schema({ /* ... */ }, { collection: 'data' });\n```\n\n----------------------------------------\n\nTITLE: Declaring Buffer Schema Types in Mongoose\nDESCRIPTION: Shows different ways to declare Buffer schema types and demonstrates Buffer casting behavior.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema1 = new Schema({ binData: Buffer }); // binData will be cast to a Buffer\nconst schema2 = new Schema({ binData: 'Buffer' }); // Equivalent\n\nconst Data = mongoose.model('Data', schema2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst file1 = new Data({ binData: 'test'}); // {\"type\":\"Buffer\",\"data\":[116,101,115,116]}\nconst file2 = new Data({ binData: 72987 }); // {\"type\":\"Buffer\",\"data\":[27]}\nconst file4 = new Data({ binData: { type: 'Buffer', data: [1, 2, 3]}}); // {\"type\":\"Buffer\",\"data\":[1,2,3]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Search Index in Mongoose Schema\nDESCRIPTION: Demonstrates how to enable automatic creation of Atlas search indexes using the autoSearchIndex option in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String }, { autoSearchIndex: true });\nschema.searchIndex({\n  name: 'my-index',\n  definition: { mappings: { dynamic: true } }\n});\n// Will automatically attempt to create the `my-index` search index.\nconst Test = mongoose.model('Test', schema);\n```\n\n----------------------------------------\n\nTITLE: Creating Capped Collections\nDESCRIPTION: Example of creating a capped collection with disabled buffering and autoCreate. Shows proper collection initialization for special collection types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: String\n}, {\n  capped: { size: 1024 },\n  bufferCommands: false,\n  autoCreate: false // disable `autoCreate` since `bufferCommands` is false\n});\n\nconst Model = mongoose.model('Test', schema);\n// Explicitly create the collection before using it\n// so the collection is capped.\nawait Model.createCollection();\n```\n\n----------------------------------------\n\nTITLE: Null Validation for Non-Required String Enums\nDESCRIPTION: Demonstrates the new behavior where null values are considered valid for non-required string enum fields in Mongoose 8, whereas they would cause validation errors in Mongoose 7.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  status: {\n    type: String,\n    enum: ['on', 'off']\n  }\n});\nconst Test = mongoose.model('Test', schema);\n\n// Works fine in Mongoose 8\n// Throws a `ValidationError` in Mongoose 7\nawait Test.create({ status: null });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Number Casting for Japanese Numerals in Mongoose\nDESCRIPTION: Shows how to override Mongoose's default number casting function to handle strings containing Japanese numerals, specifically converting the Japanese numeral '2' to a number.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/custom-casting.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:custom casting.*casting override]\n```\n\n----------------------------------------\n\nTITLE: Working with Discriminator Keys in Mongoose\nDESCRIPTION: Explains how Mongoose uses the __t discriminator key to differentiate between different model types in the same collection.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Discriminator keys]\n```\n\n----------------------------------------\n\nTITLE: Defining Automatically Inferred Virtuals in Mongoose with TypeScript\nDESCRIPTION: Demonstrates how to define virtual properties in the schema constructor to enable automatic type inference. This approach uses the 'virtuals' option in the schema constructor to define a 'fullName' virtual that concatenates firstName and lastName.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/virtuals.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, Model, model } from 'mongoose';\n\nconst schema = new Schema(\n  {\n    firstName: String,\n    lastName: String\n  },\n  {\n    virtuals: {\n      fullName: {\n        get() {\n          return `${this.firstName} ${this.lastName}`;\n        }\n        // virtual setter and options can be defined here as well.\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Index Events in Mongoose\nDESCRIPTION: Shows how to handle index creation events and errors in Mongoose using the index event listener.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Will cause an error because mongodb has an _id index by default that\n// is not sparse\nanimalSchema.index({ _id: 1 }, { sparse: true });\nconst Animal = mongoose.model('Animal', animalSchema);\n\nAnimal.on('index', error => {\n  // \"_id index cannot be sparse\"\n  console.log(error.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Mongoose Schema for GeoJSON Polygon\nDESCRIPTION: Definition of a Mongoose schema for storing GeoJSON polygons with triple nested arrays.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/geojson.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst polygonSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['Polygon'],\n    required: true\n  },\n  coordinates: {\n    type: [[[Number]]], // Array of arrays of arrays of numbers\n    required: true\n  }\n});\n\nconst citySchema = new mongoose.Schema({\n  name: String,\n  location: polygonSchema\n});\n```\n\n----------------------------------------\n\nTITLE: Working with ObjectIds in Mongoose\nDESCRIPTION: Shows how to declare and work with ObjectId schema types, including type checking and string conversion.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst carSchema = new mongoose.Schema({ driver: mongoose.ObjectId });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Car = mongoose.model('Car', carSchema);\n\nconst car = new Car();\ncar.driver = new mongoose.Types.ObjectId();\n\ntypeof car.driver; // 'object'\ncar.driver instanceof mongoose.Types.ObjectId; // true\n\ncar.driver.toString(); // Something like \"5e1a0651741b255ddda996c4\"\n```\n\n----------------------------------------\n\nTITLE: Middleware on Parent vs Subdocuments in Mongoose\nDESCRIPTION: Demonstrates how query middleware operates on parent documents but not on subdocuments. This example shows a key limitation of Mongoose middleware with nested document structures.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema = new mongoose.Schema({\n  name: String\n});\n\nconst mainSchema = new mongoose.Schema({\n  child: [childSchema]\n});\n\nmainSchema.pre('findOneAndUpdate', function() {\n  console.log('Middleware on parent document'); // Will be executed\n});\n\nchildSchema.pre('findOneAndUpdate', function() {\n  console.log('Middleware on subdocument'); // Will not be executed\n});\n```\n\n----------------------------------------\n\nTITLE: Schema Generic Parameters Definition\nDESCRIPTION: Shows the TypeScript definition of Mongoose Schema class with its generic parameters. Contains the complete type signature with all available generic parameters.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/schemas.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Schema<\n  RawDocType = any,\n  TModelType = Model<RawDocType, any, any, any>,\n  TInstanceMethods = {},\n  TQueryHelpers = {},\n  TVirtuals = {},\n  TStaticMethods = {},\n  TSchemaOptions = DefaultSchemaOptions,\n  DocType = ...,\n  THydratedDocumentType = HydratedDocument<FlatRecord<DocType>, TVirtuals & TInstanceMethods>\n>\n  extends events.EventEmitter {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Model Constructor Optional Properties in Mongoose 8\nDESCRIPTION: Illustrates how Mongoose 8 makes all model constructor properties optional by default in TypeScript, with the ability to enforce required properties through explicit generic type parameters.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Schema, model, Model} from 'mongoose';\n\ninterface IDocument {\n  name: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst documentSchema = new Schema<IDocument>(\n  { name: { type: String, required: true } },\n  { timestamps: true }\n);\n\nconst TestModel = model<IDocument>('Document', documentSchema);\n\n// Would throw a compile error in Mongoose 7, compiles in Mongoose 8\nconst newDoc = new TestModel({\n  name: 'Foo'\n});\n\n// Explicitly pass generic param to constructor to specify the expected\n// type of the model constructor param. The following will cause TS\n// to complain about missing `createdAt` and `updatedAt` in Mongoose 8.\nconst newDoc2 = new TestModel<IDocument>({\n  name: 'Foo'\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing rawResult with includeResultMetadata in Mongoose findOneAndUpdate\nDESCRIPTION: Demonstrates how to update code from using the deprecated 'rawResult' option to the new 'includeResultMetadata' option in Mongoose's findOneAndUpdate method. This change aligns with the MongoDB Node.js driver's current API standards.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/deprecations.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace this:\nconst doc = await Test.findOneAndUpdate(\n  { name: 'Test' },\n  { name: 'Test Testerson' },\n  { rawResult: true }\n);\n\n// With this:\nconst doc = await Test.findOneAndUpdate(\n  { name: 'Test' },\n  { name: 'Test Testerson' },\n  { includeResultMetadata: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Auto-typed Static Functions in Mongoose Schema Options\nDESCRIPTION: This snippet demonstrates how to define auto-typed static functions in Mongoose schema options. It shows a more concise way of adding static methods to a Mongoose model.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/statics-and-methods.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model } from 'mongoose';\n\nconst schema = new Schema(\n  { name: String },\n  {\n    statics: {\n      myStaticMethod() {\n        return 42;\n      }\n    }\n  }\n);\n\nconst User = model('User', schema);\n\nconst answer = User.myStaticMethod(); // 42\n```\n\n----------------------------------------\n\nTITLE: Comparing Mongoose Queries with Aggregation\nDESCRIPTION: Demonstrates how to use MongoDB's aggregation pipeline to perform a simple query. The example shows that while aggregation can often do the same things as queries, the results differ as aggregation returns plain objects rather than Mongoose documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst docs = await Person.aggregate([{ $match: { 'name.last': 'Ghost' } }]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Mongoose Operations\nDESCRIPTION: Demonstrates how to disable timestamp updates for specific operations and manually set timestamp values.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/timestamps.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet doc = await User.create({ name: 'test' });\n\nconsole.log(doc.createdAt); // 2022-02-26T23:28:54.264Z\nconsole.log(doc.updatedAt); // 2022-02-26T23:28:54.264Z\n\ndoc.name = 'test2';\n\nawait doc.save({ timestamps: false });\nconsole.log(doc.updatedAt); // 2022-02-26T23:28:54.264Z\n\ndoc = await User.findOneAndUpdate({ _id: doc._id }, { name: 'test3' }, {\n  new: true,\n  timestamps: false\n});\nconsole.log(doc.updatedAt); // 2022-02-26T23:28:54.264Z\n\nawait User.bulkWrite([{\n  updateOne: {\n    filter: { _id: doc._id },\n    update: { name: 'test4' },\n    timestamps: false\n  }\n}]);\ndoc = await User.findOne({ _id: doc._id });\nconsole.log(doc.updatedAt); // 2022-02-26T23:28:54.264Z\n```\n\n----------------------------------------\n\nTITLE: ObjectId BSONType Change Example - JavaScript\nDESCRIPTION: Demonstrates the change in ObjectId's internal _bsontype property from 'ObjectID' to 'ObjectId' in Mongoose 7.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst oid = new mongoose.Types.ObjectId();\n\noid._bsontype; // 'ObjectId' in Mongoose 7, 'ObjectID' in older versions of Mongoose\n```\n\n----------------------------------------\n\nTITLE: Double Type in Mongoose\nDESCRIPTION: Demonstrates usage of Double type for 64-bit floating point numbers in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst temperatureSchema = new Schema({\n  celsius: Double\n});\nconst Temperature = mongoose.model('Temperature', temperatureSchema);\n\nconst temperature = new Temperature({ celsius: 1339 });\ntemperature.celsius instanceof bson.Double;\n```\n\n----------------------------------------\n\nTITLE: CreateConnection Event Listeners\nDESCRIPTION: Demonstrates setting up connection event listeners when using mongoose.createConnection().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst conn = mongoose.createConnection('mongodb://127.0.0.1:27017/mongoose_test');\n\nconn.on('connected', () => console.log('connected'));\nconn.on('open', () => console.log('open'));\nconn.on('disconnected', () => console.log('disconnected'));\nconn.on('reconnected', () => console.log('reconnected'));\nconn.on('disconnecting', () => console.log('disconnecting'));\nconn.on('close', () => console.log('close'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdocument Validation Error Storage in Mongoose\nDESCRIPTION: Demonstrates how to control the storage of subdocument validation errors in Mongoose using the storeSubdocValidationError option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema = new Schema({ name: { type: String, required: true } });\nconst parentSchema = new Schema({ child: childSchema });\n\nconst Parent = mongoose.model('Parent', parentSchema);\n\n// Will contain an error for both 'child.name' _and_ 'child'\nnew Parent({ child: {} }).validateSync().errors;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema = new Schema({\n  name: { type: String, required: true }\n}, { storeSubdocValidationError: false }); // <-- set on the child schema\nconst parentSchema = new Schema({ child: childSchema });\n\nconst Parent = mongoose.model('Parent', parentSchema);\n\n// Will only contain an error for 'child.name'\nnew Parent({ child: {} }).validateSync().errors;\n```\n\n----------------------------------------\n\nTITLE: Understanding Virtual Types with InferSchemaType in Mongoose\nDESCRIPTION: Shows how InferSchemaType does not include virtuals in the inferred type, as it represents the raw document structure in MongoDB. However, virtuals are available on the model instances.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/virtuals.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = InferSchemaType<typeof schema>;\n\nconst user: User = {};\n// Property 'fullName' does not exist on type '{ firstName?: string | undefined; ... }'.\nuser.fullName;\n```\n\n----------------------------------------\n\nTITLE: UUID Generation in Mongoose\nDESCRIPTION: Demonstrates how to generate UUIDs using Node's built-in UUIDv4 generator with Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { randomUUID } = require('crypto');\n\nconst schema = new mongoose.Schema({\n  docId: {\n    type: 'UUID',\n    default: () => randomUUID()\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mongoose Populate with PopulatedParent Interface\nDESCRIPTION: Shows an alternative approach using a PopulatedParent interface and Pick<> type utility to define populated properties. This approach provides better type safety and clarity.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/populate.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, model, Document, Types } from 'mongoose';\n\n// `Parent` represents the object as it is stored in MongoDB\ninterface Parent {\n  child?: Types.ObjectId,\n  name?: string\n}\ninterface Child {\n  name: string;\n}\ninterface PopulatedParent {\n  child: Child | null;\n}\nconst ParentModel = model<Parent>('Parent', new Schema({\n  child: { type: Schema.Types.ObjectId, ref: 'Child' },\n  name: String\n}));\nconst childSchema: Schema = new Schema({ name: String });\nconst ChildModel = model<Child>('Child', childSchema);\n\n// Populate with `Paths` generic `{ child: Child }` to override `child` path\nParentModel.findOne({}).populate<Pick<PopulatedParent, 'child'>>('child').orFail().then(doc => {\n  // Works\n  const t: string = doc.child.name;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Init Hooks in Mongoose\nDESCRIPTION: This snippet shows how to use synchronous init hooks in Mongoose. These hooks do not support asynchronous operations and must throw synchronous errors for error handling.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/middleware.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n[require:post init hooks.*success]\n```\n\n----------------------------------------\n\nTITLE: Casting Moment.js Objects to Dates in Mongoose\nDESCRIPTION: Illustrates how Mongoose can automatically cast Moment.js objects to native JavaScript Date objects. This is achieved through Mongoose's use of the valueOf() function during date casting.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/dates.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Date Tutorial.*Example 1.4.1]\n```\n\n----------------------------------------\n\nTITLE: Accessing Mongoose Browser Library from Node.js\nDESCRIPTION: Demonstrates how to access the Mongoose browser library from Node.js using both CommonJS require() and ES6 import syntax.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/browser.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Using `require()`\nconst mongoose = require('mongoose/browser');\n\n// Using ES6 imports\nimport mongoose from 'mongoose/browser';\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Properties in Mongoose Document\nDESCRIPTION: Demonstrates how to use the set() function to safely set deeply nested properties in a Mongoose document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  nested: {\n    subdoc: new Schema({\n      name: String\n    })\n  }\n});\nconst TestModel = mongoose.model('Test', schema);\n\nconst doc = new TestModel();\ndoc.set('nested.subdoc.name', 'John Smith');\ndoc.nested.subdoc.name; // 'John Smith'\n```\n\n----------------------------------------\n\nTITLE: Defining Virtuals via Schema Options in Mongoose\nDESCRIPTION: Shows how to define virtual properties directly in the schema options without using the .virtual() method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst PersonSchema = new Schema({\n  firstName: String,\n  lastName: String\n}, {\n  virtuals: {\n    fullName: {\n      get() {\n        return `${this.firstName} ${this.lastName}`;\n      },\n      set(v) {\n        const firstName = v.substring(0, v.indexOf(' '));\n        const lastName = v.substring(v.indexOf(' ') + 1);\n        this.set({ firstName, lastName });\n      }\n    }\n  }\n});\n\nconst Person = mongoose.model('Person', PersonSchema);\n\nconst person = new Person({\n  firstName: 'Jean-Luc',\n  lastName: 'Picard'\n});\n\nconsole.log(person.fullName); // 'Jean-Luc Picard'\n\nperson.fullName = 'James T. Kirk';\nconsole.log(person.firstName); // 'James'\nconsole.log(person.lastName);  // 'T. Kirk'\n```\n\n----------------------------------------\n\nTITLE: Setting Array Default to Undefined in Mongoose Schema\nDESCRIPTION: This code shows how to set the default value of an array field to undefined in a Mongoose schema, allowing for required real data on document creation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst CollectionSchema = new Schema({\n  field1: {\n    type: [String],\n    default: void 0\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Query Execution in Mongoose 6.x\nDESCRIPTION: Shows how to use Query#clone() to execute the same query twice, which is no longer allowed by default in Mongoose 6.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Results in 'Query was already executed' error, because technically this `find()` query executes twice.\nawait Model.find({}, function(err, result) {});\n\nconst q = Model.find();\nawait q;\nawait q.clone(); // Can `clone()` the query to allow executing the query again\n```\n\n----------------------------------------\n\nTITLE: Disable Command Buffering\nDESCRIPTION: Shows how to disable Mongoose's command buffering globally using mongoose.set().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.set('bufferCommands', false);\n```\n\n----------------------------------------\n\nTITLE: Handling In-Place Date Modifications in Mongoose\nDESCRIPTION: These code examples show different approaches to handle in-place modifications to date objects in Mongoose, ensuring the changes are saved properly.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndoc.createdAt.setDate(2011, 5, 1);\ndoc.markModified('createdAt');\ndoc.save(); // Works\n\ndoc.createdAt = new Date(2011, 5, 1).setHours(4);\ndoc.save(); // Works\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Indexing in Mongoose Schema\nDESCRIPTION: Shows how to disable automatic index creation for a schema and manually ensure indexes are created. This is useful for managing indexes in production environments.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ /* ... */ }, { autoIndex: false });\nconst Clock = mongoose.model('Clock', schema);\nClock.ensureIndexes(callback);\n```\n\n----------------------------------------\n\nTITLE: Document Parameter in Default Functions\nDESCRIPTION: Shows how Mongoose 6 passes the document as the first parameter to default functions in schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: String,\n  age: Number,\n  canVote: {\n    type: Boolean,\n    // Default functions now receive a `doc` parameter, helpful for arrow functions\n    default: doc => doc.age >= 18\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Post Save Hooks Flow Control\nDESCRIPTION: Shows how post save hooks execution order has changed in Mongoose 5.x, with async hooks running before save callbacks.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst ChildModelSchema = new mongoose.Schema({\n  text: {\n    type: String\n  }\n});\nChildModelSchema.post('save', function(doc) {\n  console.log('Child post save');\n});\nconst ParentModelSchema = new mongoose.Schema({\n  children: [ChildModelSchema]\n});\n\nconst Model = mongoose.model('Parent', ParentModelSchema);\nconst m = new Model({ children: [{ text: 'test' }] });\nm.save(function() {\n  console.log('Save callback');\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Properties in Mongoose Document\nDESCRIPTION: Shows how to use the get() function to safely read deeply nested properties in a Mongoose document, avoiding null checks.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc2 = new TestModel();\n\ndoc2.get('nested.subdoc.name'); // undefined\ndoc2.nested?.subdoc?.name; // undefined\n\ndoc2.set('nested.subdoc.name', 'Will Smith');\ndoc2.get('nested.subdoc.name'); // 'Will Smith'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mongoose's Default Behavior with Nested Properties\nDESCRIPTION: Shows how Mongoose adds empty objects for nested schema properties by default as a performance optimization, even when those properties are not set on the document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({\n  nested: {\n    prop: String\n  }\n});\nconst Model = db.model('Test', schema);\n\n// The below prints `{ _id: /* ... */, nested: {} }`, mongoose assigns\n// `nested` to an empty object `{}` by default.\nconsole.log(new Model());\n```\n\n----------------------------------------\n\nTITLE: Discriminator Models Definition\nDESCRIPTION: Example showing how to define discriminator models in Mongoose with event types inheritance structure.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/findoneandupdate.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSchema = new mongoose.Schema({ time: Date });\nconst Event = db.model('Event', eventSchema);\n\nconst ClickedLinkEvent = Event.discriminator(\n  'ClickedLink',\n  new mongoose.Schema({ url: String })\n);\n\nconst SignedUpEvent = Event.discriminator(\n  'SignedUp',\n  new mongoose.Schema({ username: String })\n);\n```\n\n----------------------------------------\n\nTITLE: Schema Minimize Option Behavior in JavaScript\nDESCRIPTION: Illustrates the changes in how toObject() and toJSON() handle the minimize option with nested schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst child = new Schema({ thing: Schema.Types.Mixed });\nconst parent = new Schema({ child }, { minimize: false });\nconst Parent = model('Parent', parent);\nconst p = new Parent({ child: { thing: {} } });\n\n// In v5.10.4, would contain `child.thing` because `toObject()` uses `parent` schema's `minimize` option\n// In `>= 5.10.5`, `child.thing` is omitted because `child` schema has `minimize: true`\nconsole.log(p.toObject());\n```\n\n----------------------------------------\n\nTITLE: Setting Buffer Timeout for Mongoose Operations\nDESCRIPTION: This code demonstrates how to set a custom timeout for Mongoose's buffering mechanism, throwing an error if an operation is buffered for more than the specified time.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// If an operation is buffered for more than 500ms, throw an error.\nmongoose.set('bufferTimeoutMS', 500);\n```\n\n----------------------------------------\n\nTITLE: Using BigInt with Lean Queries in Mongoose\nDESCRIPTION: Shows how to use the useBigInt64 option with lean() to convert MongoDB longs to JavaScript BigInts instead of numbers.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Lean Tutorial.*bigint]\n```\n\n----------------------------------------\n\nTITLE: Overwriting Mongoose Documents\nDESCRIPTION: Demonstrates two methods for overwriting a Mongoose document: using Document#overwrite() and Model.replaceOne().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await Person.findOne({ _id });\n\n// Sets `name` and unsets all other properties\ndoc.overwrite({ name: 'Jean-Luc Picard' });\nawait doc.save();\n\n// Sets `name` and unsets all other properties\nawait Person.replaceOne({ _id }, { name: 'Jean-Luc Picard' });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Collation in Mongoose\nDESCRIPTION: Shows how to set a default collation for queries and aggregations using the 'collation' option. This affects how string comparisons are made, allowing for language-specific sorting and matching.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: String\n}, { collation: { locale: 'en_US', strength: 1 } });\n\nconst MyModel = db.model('MyModel', schema);\n\nMyModel.create([{ name: 'val' }, { name: 'Val' }]).\n  then(() => {\n    return MyModel.find({ name: 'val' });\n  }).\n  then((docs) => {\n    // `docs` will contain both docs, because `strength: 1` means\n    // MongoDB will ignore case when matching.\n  });\n```\n\n----------------------------------------\n\nTITLE: URI Encoding for MongoDB Connection Strings in Mongoose 5.x\nDESCRIPTION: Demonstrates how to properly encode MongoDB connection strings in Mongoose 5.x using the mongodb-uri module, which is required due to more stringent URI parsing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst uriFormat = require('mongodb-uri');\nfunction encodeMongoURI(urlString) {\n  if (urlString) {\n    const parsed = uriFormat.parse(urlString);\n    urlString = uriFormat.format(parsed);\n  }\n  return urlString;\n}\n\n// Your un-encoded string.\nconst mongodbConnectString = 'mongodb://...';\nmongoose.connect(encodeMongoURI(mongodbConnectString));\n```\n\n----------------------------------------\n\nTITLE: StrictQuery True Option in Mongoose\nDESCRIPTION: Demonstrates how strictQuery:true removes non-schema properties from the filter.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*strictQuery true]\n```\n\n----------------------------------------\n\nTITLE: Using 'this' in Mongoose Default Functions\nDESCRIPTION: Explains how 'this' refers to the document in default functions, unless the function is running on a query with setDefaultsOnInsert. This allows access to other fields when setting defaults.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/defaults.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  list: [String],\n  size: {\n    type: Number,\n    default: function() {\n      return this.list.length;\n    }\n  }\n});\nconst Model = mongoose.model('Test', schema);\n\nconst doc = new Model({ list: ['a', 'b', 'c'] });\nconsole.log(doc.size); // 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Route Without Email Getter Execution\nDESCRIPTION: Example showing how Mongoose getters are not executed by default when converting a document to JSON in Express responses.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(function(req, res) {\n  return User.findOne().\n    // The `email` getter will NOT run here\n    then(doc => res.json(doc)).\n    catch(err => res.status(500).json({ message: err.message }));\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Optional Fields Null Handling in Mongoose 8\nDESCRIPTION: Demonstrates how Mongoose 8 improves TypeScript type inference by allowing null values for optional fields, expanding from Mongoose 7's undefined-only approach.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = new Schema({ name: String });\nconst TestModel = model('Test', schema);\n\nconst doc = new TestModel();\n\n// In Mongoose 8, this type is `string | null | undefined`.\n// In Mongoose 7, this type is `string | undefined`\ndoc.name;\n```\n\n----------------------------------------\n\nTITLE: Overriding the 'this' Type in Mongoose Virtuals\nDESCRIPTION: Demonstrates how to override the type of 'this' in virtual getters using a generic parameter on the virtual() function. This is useful when you need to ensure TypeScript recognizes the correct context.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/virtuals.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyCustomUserDocumentType {\n  firstName: string;\n  lastName: string;\n  myMethod(): string;\n}\n\nschema.virtual<MyCustomUserDocumentType>('fullName').get(function() {\n  return this.method(); // returns string\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Getters in JSON Conversion with Schema Configuration\nDESCRIPTION: Methods for enabling getters during JSON conversion, including schema-level configuration, global configuration, and one-off conversion.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    get: obfuscate\n  }\n}, { toJSON: { getters: true } });\n\n// Or, globally\nmongoose.set('toJSON', { getters: true });\n\n// Or, on a one-off basis\napp.get(function(req, res) {\n  return User.findOne().\n    // The `email` getter will run here\n    then(doc => res.json(doc.toJSON({ getters: true }))).\n    catch(err => res.status(500).json({ message: err.message }));\n});\n```\n\n----------------------------------------\n\nTITLE: Handling DocumentNotFoundError in Mongoose\nDESCRIPTION: Shows how Mongoose handles attempting to save a document that no longer exists in the database.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await MyModel.findOne();\n\n// Delete the document so Mongoose won't be able to save changes\nawait MyModel.deleteOne({ _id: doc._id });\n\ndoc.name = 'foo';\nawait doc.save(); // Throws DocumentNotFoundError\n```\n\n----------------------------------------\n\nTITLE: Overriding Types for Hydrated Documents with Subdocuments\nDESCRIPTION: Shows how to use Mongoose's type override mechanism to correctly type subdocuments. This approach uses the 'THydratedDocumentType' as the 5th generic parameter to Model, which controls what type Mongoose uses for hydrated documents.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/subdocuments.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HydratedSingleSubdocument } from 'mongoose';\n\n// Define property overrides for hydrated documents\ntype THydratedUserDocument = {\n  names?: HydratedSingleSubdocument<Names>\n}\ntype UserModelType = mongoose.Model<User, {}, {}, {}, THydratedUserDocument>;\n\nconst userSchema = new mongoose.Schema<User, UserModelType>({\n  names: new mongoose.Schema<Names>({ firstName: String })\n});\nconst UserModel = mongoose.model<User, UserModelType>('User', userSchema);\n\nconst doc = new UserModel({ names: { _id: '0'.repeat(24), firstName: 'foo' } });\ndoc.names!.ownerDocument(); // Works, `names` is a subdocument!\ndoc.names!.firstName; // 'foo'\n```\n\n----------------------------------------\n\nTITLE: Customizing Version Key in Mongoose\nDESCRIPTION: Demonstrates how to customize the version key used by Mongoose for document versioning. It shows how to change the default '__v' key to a custom name or disable versioning entirely.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: 'string' });\nconst Thing = mongoose.model('Thing', schema);\nconst thing = new Thing({ name: 'mongoose v3' });\nawait thing.save(); // { __v: 0, name: 'mongoose v3' }\n\n// customized versionKey\nnew Schema({ /* ... */ }, { versionKey: '_somethingElse' })\nconst Thing = mongoose.model('Thing', schema);\nconst thing = new Thing({ name: 'mongoose v3' });\nthing.save(); // { _somethingElse: 0, name: 'mongoose v3' }\n```\n\n----------------------------------------\n\nTITLE: Implicit $in Operations in Mongoose\nDESCRIPTION: Demonstrates Mongoose's automatic $in operator insertion for non-array fields based on schema types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*implicit in]\n```\n\n----------------------------------------\n\nTITLE: Declaring String Schema Types in Mongoose\nDESCRIPTION: Demonstrates different ways to declare string schema types and how string casting works with various input types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema1 = new Schema({ name: String }); // name will be cast to string\nconst schema2 = new Schema({ name: 'String' }); // Equivalent\n\nconst Person = mongoose.model('Person', schema2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew Person({ name: 42 }).name; // \"42\" as a string\nnew Person({ name: { toString: () => 42 } }).name; // \"42\" as a string\n\n// \"undefined\", will get a cast error if you `save()` this document\nnew Person({ name: { foo: 42 } }).name;\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Driver Result Handling in JavaScript\nDESCRIPTION: Demonstrates how to handle the updated result structure for updateMany() and deleteMany() operations in Mongoose 6.x, which differs from Mongoose 5.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await TestModel.updateMany({}, { someProperty: 'someValue' });\n\nres.matchedCount; // Number of documents that were found that match the filter. Replaces `res.n`\nres.modifiedCount; // Number of documents modified. Replaces `res.nModified`\nres.upsertedCount; // Number of documents upserted. Replaces `res.upserted`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await TestModel.deleteMany({});\n\n// In Mongoose 6: `{ acknowledged: true, deletedCount: 2 }`\n// In Mongoose 5: `{ n: 2, ok: 1, deletedCount: 2 }`\nres;\n\nres.deletedCount; // Number of documents that were deleted. Replaces `res.n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Environment for Mongoose\nDESCRIPTION: Configuration to set Node.js as the test environment in Jest config file, which is necessary for proper Mongoose testing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/jest.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  testEnvironment: 'node'\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema with Nested Reference in Array\nDESCRIPTION: Shows how to define a schema with a populated reference inside an array of objects. This pattern is mentioned in relation to sort order issues when populating nested properties.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew Schema({\n  arr: [{\n    child: { ref: 'OtherModel', type: Schema.Types.ObjectId }\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Skipping Setters During Updates\nDESCRIPTION: Example showing how to make setters run only for document operations but not for query operations by checking if 'this' is a Mongoose document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*setters.*update skip]\n```\n\n----------------------------------------\n\nTITLE: Using $locals to Pass Parameters to Getters and Setters\nDESCRIPTION: Example demonstrating how to use the document's $locals property to store and access configuration data for getter functions, such as localization settings.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*localization.*locale]\n```\n\n----------------------------------------\n\nTITLE: Typing Subdocument Arrays in Mongoose with TypeScript\nDESCRIPTION: Demonstrates how to properly type subdocument arrays using the TMethodsAndOverrides generic parameter. This approach allows TypeScript to recognize array elements as subdocuments with access to subdocument methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/subdocuments.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Subdocument definition\ninterface Names {\n  _id: Types.ObjectId;\n  firstName: string;\n}\n// Document definition\ninterface User {\n  names: Names[];\n}\n\n// TMethodsAndOverrides\ntype THydratedUserDocument = {\n  names?: Types.DocumentArray<Names>\n}\ntype UserModelType = Model<User, {}, {}, {}, THydratedUserDocument>;\n\n// Create model\nconst UserModel = model<User, UserModelType>('User', new Schema<User, UserModelType>({\n  names: [new Schema<Names>({ firstName: String })]\n}));\n\nconst doc = new UserModel({});\ndoc.names[0].ownerDocument(); // Works!\ndoc.names[0].firstName; // string\n```\n\n----------------------------------------\n\nTITLE: Basic findOneAndUpdate Function Signature\nDESCRIPTION: The basic signature of the findOneAndUpdate function showing its main parameters: filter, update, and options.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/findoneandupdate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction findOneAndUpdate(filter, update, options) {}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Subdocument vs Nested Path Comparison\nDESCRIPTION: Demonstrates the structural differences between subdocuments and nested paths in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/subdocs.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Subdocument\nconst subdocumentSchema = new mongoose.Schema({\n  child: new mongoose.Schema({ name: String, age: Number })\n});\nconst Subdoc = mongoose.model('Subdoc', subdocumentSchema);\n\n// Nested path\nconst nestedSchema = new mongoose.Schema({\n  child: { name: String, age: Number }\n});\nconst Nested = mongoose.model('Nested', nestedSchema);\n```\n\n----------------------------------------\n\nTITLE: Create Operation Error Handling in Mongoose 8\nDESCRIPTION: Demonstrates how Mongoose 8 waits for all save operations to complete before throwing validation errors, unlike Mongoose 7 which throws immediately. This allows valid documents to be saved even when one document fails validation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: {\n    type: String,\n    enum: ['Badger', 'Mushroom']\n  }\n});\nschema.pre('save', async function() {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n});\nconst Test = mongoose.model('Test', schema);\n\nconst err = await Test.create([\n  { name: 'Badger' },\n  { name: 'Mushroom' },\n  { name: 'Cow' }\n]).then(() => null, err => err);\nerr; // ValidationError\n\n// In Mongoose 7, there would be 0 documents, because `Test.create()`\n// would throw before 'Badger' and 'Mushroom' are inserted\n// In Mongoose 8, there will be 2 documents. `Test.create()` waits until\n// 'Badger' and 'Mushroom' are inserted before throwing.\nawait Test.countDocuments();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Lodash's cloneDeep() with Mongoose Documents\nDESCRIPTION: This example demonstrates why using Lodash's cloneDeep() function on Mongoose documents causes errors. The code attempts to clone a document and save it, but will throw a TypeError due to how Lodash handles proxies and Mongoose arrays.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/lodash.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst _ = require('lodash');\n\nconst doc = await MyModel.findOne();\n\nconst newDoc = _.cloneDeep(doc);\nnewDoc.myProperty = 'test';\nawait newDoc.save();\n```\n\n----------------------------------------\n\nTITLE: Skipping Getters on a One-off Basis\nDESCRIPTION: Example showing how to skip getter execution for a specific property access using the get() method with getters option set to false.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*getters.*skip]\n```\n\n----------------------------------------\n\nTITLE: Query Value Casting in Mongoose\nDESCRIPTION: Shows how Mongoose automatically casts filter values to match the schema types during query execution.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*cast values]\n```\n\n----------------------------------------\n\nTITLE: Double Type Casting in Mongoose\nDESCRIPTION: Shows various ways values can be cast to Double type in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nnew Temperature({ celsius: '1.2e12' }).celsius;\nnew Temperature({ celsius: true }).celsius;\nnew Temperature({ celsius: false }).celsius;\nnew Temperature({ celsius: { valueOf: () => 83.0033 } }).celsius;\nnew Temperature({ celsius: '' }).celsius;\n```\n\n----------------------------------------\n\nTITLE: Working with Embedded Documents in Mongoose\nDESCRIPTION: Examples of creating and removing embedded documents within a Mongoose model.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// retrieve my model\nconst BlogPost = mongoose.model('BlogPost');\n\n// create a blog post\nconst post = new BlogPost();\n\n// create a comment\npost.comments.push({ title: 'My comment' });\n\nawait post.save();\n\n// Removing embedded documents\nconst post = await BlogPost.findById(myId);\npost.comments[0].deleteOne();\nawait post.save();\n```\n\n----------------------------------------\n\nTITLE: Setting Read Concern in Mongoose Schema\nDESCRIPTION: Shows how to set a default read concern for all queries using the readConcern option in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSchema = new mongoose.Schema(\n  { name: String },\n  {\n    readConcern: { level: 'available' } // <-- set default readConcern for all queries\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Getters and Virtuals with Lean in Mongoose\nDESCRIPTION: Example showing how getters and virtuals don't work with lean documents since they're plain JavaScript objects without Mongoose document functionality.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Lean Tutorial.*getters and virtuals]\n```\n\n----------------------------------------\n\nTITLE: Query Casting and Overwrite Behavior\nDESCRIPTION: Demonstrates how query casting timing has changed in Mongoose 5.x, affecting update operations and overwrite behavior.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nUser.where({ name: 'Bar' }).update({ name: 'Baz' }).setOptions({ overwrite: true });\n```\n\n----------------------------------------\n\nTITLE: Applying Plugins Before Model Compilation in Mongoose\nDESCRIPTION: Demonstrates the incorrect way to apply plugins after model compilation, which would result in middleware not being properly applied. This example highlights the importance of the proper order of operations when using plugins.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/plugins.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// loadedAt.js\nmodule.exports = function loadedAtPlugin(schema, options) {\n  schema.virtual('loadedAt').\n    get(function() { return this._loadedAt; }).\n    set(function(v) { this._loadedAt = v; });\n\n  schema.post(['find', 'findOne'], function(docs) {\n    if (!Array.isArray(docs)) {\n      docs = [docs];\n    }\n    const now = new Date();\n    for (const doc of docs) {\n      doc.loadedAt = now;\n    }\n  });\n};\n\n// game-schema.js\nconst loadedAtPlugin = require('./loadedAt');\nconst gameSchema = new Schema({ /* ... */ });\nconst Game = mongoose.model('Game', gameSchema);\n\n// `find()` and `findOne()` hooks from `loadedAtPlugin()` won't get applied\n// because `mongoose.model()` was already called!\ngameSchema.plugin(loadedAtPlugin);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Mongos Instances\nDESCRIPTION: Shows how to connect to multiple mongos instances for high availability in a sharded cluster.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Connect to 2 mongos servers\nmongoose.connect('mongodb://mongosA:27501,mongosB:27501', cb);\n```\n\n----------------------------------------\n\nTITLE: Immutable Timestamp Behavior in Mongoose\nDESCRIPTION: Shows how Mongoose handles timestamp immutability and prevents manual overrides of createdAt and updatedAt fields during various operations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/timestamps.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet doc = await User.create({ name: 'test' });\n\nconsole.log(doc.createdAt); // 2022-02-26T17:08:13.930Z\nconsole.log(doc.updatedAt); // 2022-02-26T17:08:13.930Z\n\ndoc.name = 'test2';\ndoc.createdAt = new Date(0);\ndoc.updatedAt = new Date(0);\nawait doc.save();\n\nconsole.log(doc.createdAt); // 2022-02-26T17:08:13.930Z\nconsole.log(doc.updatedAt); // 2022-02-26T17:08:13.991Z\n\ndoc = await User.findOneAndUpdate(\n  { _id: doc._id },\n  { name: 'test3', createdAt: new Date(0), updatedAt: new Date(0) },\n  { new: true }\n);\nconsole.log(doc.createdAt); // 2022-02-26T17:08:13.930Z\nconsole.log(doc.updatedAt); // 2022-02-26T17:08:14.008Z\n```\n\n----------------------------------------\n\nTITLE: Using InferRawDocType with Mongoose Schema\nDESCRIPTION: Shows how to explicitly get the raw document type from a schema definition using Mongoose's InferRawDocType helper. Includes type assertion with 'as const' to prevent type widening.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/schemas.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, InferRawDocType, model } from 'mongoose';\n\nconst schemaDefinition = {\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String\n} as const;\nconst schema = new Schema(schemaDefinition);\n\nconst UserModel = model('User', schema);\nconst doc = new UserModel({ name: 'test', email: 'test' });\n\ntype RawUserDocument = InferRawDocType<typeof schemaDefinition>;\n\nuseRawDoc(doc.toObject());\n\nfunction useRawDoc(doc: RawUserDocument) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Document Types in Mongoose\nDESCRIPTION: Code that shows the type difference between regular Mongoose documents and lean documents, demonstrating that lean returns plain JavaScript objects.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Lean Tutorial.*compare types]\n```\n\n----------------------------------------\n\nTITLE: Comparing Mongoose Setters to ES6 Setters\nDESCRIPTION: Example showing the differences between Mongoose setters and ES6 setters, highlighting how Mongoose setters directly transform values without requiring internal properties.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/getters-setters.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[require:getters/setters.*setters.*vs ES6]\n```\n\n----------------------------------------\n\nTITLE: Schema Setter Function Parameters in JavaScript\nDESCRIPTION: Shows the updated setter function signature that now includes priorValue as the second parameter.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst userSchema = new Schema({\n  name: {\n    type: String,\n    trimStart: true,\n    set: trimStartSetter\n  }\n});\n\n// in v5.x the parameters were (value, schemaType), in v6.x the parameters are (value, priorValue, schemaType).\nfunction trimStartSetter(val, priorValue, schemaType) {\n  if (schemaType.options.trimStart && typeof val === 'string') {\n    return val.trimStart();\n  }\n  return val;\n}\n\nconst User = mongoose.model('User', userSchema);\n\nconst user = new User({ name: 'Robert Martin' });\nconsole.log(user.name); // 'robert martin'\n```\n\n----------------------------------------\n\nTITLE: Aggregation Cursor API Changes in Mongoose 5.x\nDESCRIPTION: Shows the updated syntax for working with aggregation cursors in Mongoose 5.x, where the useMongooseAggCursor option is now always enabled by default.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// When you call `.cursor()`, `.exec()` will now return a mongoose aggregation\n// cursor.\nconst cursor = MyModel.aggregate([{ $match: { name: 'Val' } }]).cursor().exec();\n// No need to `await` on the cursor or wait for a promise to resolve\ncursor.eachAsync(doc => console.log(doc));\n\n// Can also pass options to `cursor()`\nconst cursorWithOptions = MyModel.\n  aggregate([{ $match: { name: 'Val' } }]).\n  cursor({ batchSize: 10 }).\n  exec();\n```\n\n----------------------------------------\n\nTITLE: Example Output of Multi-Field Sorting in Mongoose\nDESCRIPTION: Displays the output of a single run of the multi-field sorting example. It shows how documents are sorted first by age in ascending order, and then by weight in descending order when ages are equal.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    _id: new ObjectId('63a335a6b9b6a7bfc186cb37'),\n    age: 0,\n    name: 'Test2',\n    weight: 67,\n    __v: 0\n  },\n  {\n    _id: new ObjectId('63a335a6b9b6a7bfc186cb35'),\n    age: 1,\n    name: 'Test1',\n    weight: 99,\n    __v: 0\n  },\n  {\n    _id: new ObjectId('63a335a6b9b6a7bfc186cb39'),\n    age: 1,\n    name: 'Test3',\n    weight: 73,\n    __v: 0\n  },\n  {\n    _id: new ObjectId('63a335a6b9b6a7bfc186cb33'),\n    age: 2,\n    name: 'Test0',\n    weight: 65,\n    __v: 0\n  },\n  {\n    _id: new ObjectId('63a335a6b9b6a7bfc186cb3b'),\n    age: 2,\n    name: 'Test4',\n    weight: 62,\n    __v: 0\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Getters in Mongoose Schemas\nDESCRIPTION: Shows how to implement getters for schema paths to transform data when accessing fields.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = 'https://s3.amazonaws.com/mybucket';\n\nconst userSchema = new Schema({\n  name: String,\n  picture: {\n    type: String,\n    get: v => `${root}${v}`\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\n\nconst doc = new User({ name: 'Val', picture: '/123.png' });\ndoc.picture;\ndoc.toObject({ getters: false }).picture;\n```\n\n----------------------------------------\n\nTITLE: Replace Operations with Timestamps in Mongoose\nDESCRIPTION: Demonstrates how replaceOne and findOneAndReplace operations handle timestamps differently from other operations, including overwriting createdAt.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/timestamps.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoc = await User.findOneAndReplace(\n  { _id: doc._id },\n  { name: 'test3' },\n  { new: true }\n);\nconsole.log(doc.createdAt); // 2022-02-26T17:08:14.008Z\nconsole.log(doc.updatedAt); // 2022-02-26T17:08:14.008Z\n\ndoc = await User.findOneAndReplace(\n  { _id: doc._id },\n  {\n    name: 'test3',\n    createdAt: new Date('2022-06-01'),\n    updatedAt: new Date('2022-06-01')\n  },\n  { new: true }\n);\nconsole.log(doc.createdAt); // 2022-06-01T00:00:00.000Z\nconsole.log(doc.updatedAt); // 2022-06-01T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Importing and Using POJO Schema in Client Project\nDESCRIPTION: This code shows how to import and use a POJO schema definition in a client project, creating a new Mongoose schema from the imported definition.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/shared-schemas.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace this:\nconst { userSchema } = require('@initech/shared-schemas');\n\n// With this:\nconst { userSchemaDefinition } = require('@initech/shared-schemas');\nconst userSchema = new mongoose.Schema(userSchemaDefinition);\n```\n\n----------------------------------------\n\nTITLE: Express Route Without Lean for PUT Requests\nDESCRIPTION: An Express route example showing when not to use lean() - in this case, a PUT endpoint that modifies and saves a document, requiring Mongoose document methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/lean.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This route should **not** use `lean()`, because lean means no `save()`.\napp.put('/person/:id', function(req, res) {\n  Person.findOne({ _id: req.params.id }).\n    then(person => {\n      assert.ok(person);\n      Object.assign(person, req.body);\n      return person.save();\n    }).\n    then(person => res.json({ person })).\n    catch(error => res.json({ error: error.message }));\n});\n```\n\n----------------------------------------\n\nTITLE: Delayed Connection Example\nDESCRIPTION: Shows how Mongoose buffers operations when connection is delayed. The operation will wait until a connection is established.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyModel = mongoose.model('Test', new Schema({ name: String }));\nconst promise = MyModel.findOne();\n\nsetTimeout(function() {\n  mongoose.connect('mongodb://127.0.0.1:27017/myapp');\n}, 60000);\n\n// Will just hang until mongoose successfully connects\nawait promise;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Issue with 'type' Property in Schema Objects\nDESCRIPTION: Shows how using 'type' as a property name in schema objects can cause misinterpretation by Mongoose, since 'type' is a special keyword that defines schema types.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst holdingSchema = new Schema({\n  // You might expect `asset` to be an object that has 2 properties,\n  // but unfortunately `type` is special in mongoose so mongoose\n  // interprets this schema to mean that `asset` is a string\n  asset: {\n    type: String,\n    ticker: String\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Aggregate Pipeline Array Requirement\nDESCRIPTION: Shows the required syntax change for aggregate() calls in Mongoose 5.x where pipeline stages must be passed as an array.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMyModel.aggregate({ $match: { isDeleted: false } }, { $skip: 10 }).exec(cb);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMyModel.aggregate([{ $match: { isDeleted: false } }, { $skip: 10 }]).exec(cb);\n```\n\n----------------------------------------\n\nTITLE: Int32 Type in Mongoose\nDESCRIPTION: Demonstrates implementation of Int32 type for 32-bit integers in Mongoose schemas.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst studentSchema = new Schema({\n  id: Int32\n});\nconst Student = mongoose.model('Student', studentSchema);\n\nconst student = new Student({ id: 1339 });\ntypeof student.id;\n```\n\n----------------------------------------\n\nTITLE: Int32 Type Casting in Mongoose\nDESCRIPTION: Shows various ways values can be cast to Int32 type in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nnew Student({ id: '15' }).id;\nnew Student({ id: true }).id;\nnew Student({ id: false }).id;\nnew Student({ id: { valueOf: () => 83 } }).id;\nnew Student({ id: '' }).id;\n```\n\n----------------------------------------\n\nTITLE: Connection String with Query Parameters\nDESCRIPTION: Demonstrates how to specify MongoDB driver options using query string parameters in the connection URI.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://127.0.0.1:27017/test?socketTimeoutMS=1000&bufferCommands=false&authSource=otherdb');\n// The above is equivalent to:\nmongoose.connect('mongodb://127.0.0.1:27017/test', {\n  socketTimeoutMS: 1000\n  // Note that mongoose will **not** pull `bufferCommands` from the query string\n});\n```\n\n----------------------------------------\n\nTITLE: Reusable Point Schema Definition\nDESCRIPTION: Creation of a reusable point schema using subdocuments for better code organization.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/geojson.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['Point'],\n    required: true\n  },\n  coordinates: {\n    type: [Number],\n    required: true\n  }\n});\n\nconst citySchema = new mongoose.Schema({\n  name: String,\n  location: {\n    type: pointSchema,\n    required: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Change Stream Output Example for Document Insertion\nDESCRIPTION: This snippet shows the output format of a change stream event when a document is inserted. It includes details such as operation type, timestamp, the full document that was inserted, and namespace information.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/change-streams.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  _id: {\n    _data: '8262408DAC000000012B022C0100296E5A10042890851837DB4792BE6B235E8B85489F46645F6964006462408DAC6F5C42FF5EE087A20004'\n  },\n  operationType: 'insert',\n  clusterTime: new Timestamp({ t: 1648397740, i: 1 }),\n  fullDocument: {\n    _id: new ObjectId(\"62408dac6f5c42ff5ee087a2\"),\n    name: 'Axl Rose',\n    __v: 0\n  },\n  ns: { db: 'test', coll: 'people' },\n  documentKey: { _id: new ObjectId(\"62408dac6f5c42ff5ee087a2\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Documents in Mongoose\nDESCRIPTION: Shows how to use updateMany() to update multiple documents in a Mongoose collection without using save() middleware.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/documents.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Update all documents in the `mymodels` collection\nawait MyModel.updateMany({}, { $set: { name: 'foo' } });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CastError with 'type' Property\nDESCRIPTION: Shows the error that occurs when trying to save an object to a field that Mongoose interprets as a String due to the 'type' property misinterpretation in the schema.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nHolding.create({ asset: { type: 'stock', ticker: 'MDB' } }).catch(error => {\n  // Cast to String failed for value \"{ type: 'stock', ticker: 'MDB' }\" at path \"asset\"\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Schema Path Application Order in Discriminators\nDESCRIPTION: Illustrates the changed order of getter and setter application in discriminator schemas, where base schema paths are now applied before discriminator paths in Mongoose 8.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  name: {\n    type: String,\n    get(v) {\n      console.log('Base schema getter');\n      return v;\n    }\n  }\n});\n\nconst Test = mongoose.model('Test', schema);\nconst D = Test.discriminator('D', new Schema({\n  otherProp: {\n    type: String,\n    get(v) {\n      console.log('Discriminator schema getter');\n      return v;\n    }\n  }\n}));\n\nconst doc = new D({ name: 'test', otherProp: 'test' });\n// In Mongoose 8, prints \"Base schema getter\" followed by \"Discriminator schema getter\"\n// In Mongoose 7, prints \"Discriminator schema getter\" followed by \"Base schema getter\"\nconsole.log(doc.toObject({ getters: true }));\n```\n\n----------------------------------------\n\nTITLE: Updated castForQuery() Signature for Custom SchemaTypes in Mongoose 7\nDESCRIPTION: Shows how to update custom SchemaType implementations that use castForQuery() to match the new signature in Mongoose 7, which now always receives three arguments.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Mongoose 6.x format:\nMySchemaType.prototype.castForQuery = function($conditional, value) {\n  if (arguments.length === 2) {\n    // Handle casting value with `$conditional` - $eq, $in, $not, etc.\n  } else {\n    value = $conditional;\n    // Handle casting `value` with no conditional\n  }\n};\n\n// Mongoose 7.x format\nMySchemaType.prototype.castForQuery = function($conditional, value, context) {\n  if ($conditional != null) {\n    // Handle casting value with `$conditional` - $eq, $in, $not, etc.\n  } else {\n    // Handle casting `value` with no conditional\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Helpers in JavaScript with Mongoose\nDESCRIPTION: This snippet demonstrates how to define and use a query helper named 'byName' in JavaScript using Mongoose. It shows the schema definition and usage of the helper in a query.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/query-helpers.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nProjectSchema.query.byName = function(name) {\n  return this.find({ name: name });\n};\nconst Project = mongoose.model('Project', ProjectSchema);\n\n// Works. Any Project query, whether it be `find()`, `findOne()`,\n// `findOneAndUpdate()`, `delete()`, etc. now has a `byName()` helper\nProject.find().where('stars').gt(1000).byName('mongoose');\n```\n\n----------------------------------------\n\nTITLE: Using the new 'id' Setter in Mongoose 7.4\nDESCRIPTION: Shows how the id virtual in Mongoose 7.4+ now has a setter that allows modifying the document's _id property. This can cause unexpected behavior when both id and _id are specified.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst doc = await TestModel.findOne();\n\ndoc.id = '000000000000000000000000';\ndoc._id; // ObjectId('000000000000000000000000')\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Type Key in Mongoose\nDESCRIPTION: Demonstrates how to use the 'typeKey' option to control which key Mongoose uses for type declarations in schemas. This is useful for applications like geoJSON where the 'type' property has a specific meaning.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  // Mongoose interprets this as 'loc is an object with 2 keys, type and coordinates'\n  loc: { type: String, coordinates: [Number] },\n  // Mongoose interprets this as 'name is a String'\n  name: { $type: String }\n}, { typeKey: '$type' }); // A '$type' key means this object is a type declaration\n```\n\n----------------------------------------\n\nTITLE: Using mongoose.connect() for Global Model Creation in AWS Lambda\nDESCRIPTION: This snippet demonstrates an alternative approach using mongoose.connect() instead of createConnection(). This method allows for global model creation using mongoose.model(), which can be useful in certain scenarios.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/lambda.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nlet conn = null;\n\nconst uri = 'YOUR CONNECTION STRING HERE';\n\nexports.connect = async function() {\n  if (conn == null) {\n    conn = mongoose.connect(uri, {\n      serverSelectionTimeoutMS: 5000\n    }).then(() => mongoose);\n\n    // `await`ing connection after assigning to the `conn` variable\n    // to avoid multiple function calls creating new connections\n    await conn;\n  }\n\n  return conn;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Subdocument Example with TypeScript Limitations\nDESCRIPTION: Demonstrates the default behavior where TypeScript doesn't recognize object properties as subdocuments. This example shows how Mongoose treats the 'names' property as a nested property rather than a subdocument, causing TypeScript errors when accessing subdocument methods.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/subdocuments.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Setup\nimport { Schema, Types, model, Model } from 'mongoose';\n\n// Subdocument definition\ninterface Names {\n  _id: Types.ObjectId;\n  firstName: string;\n}\n\n// Document definition\ninterface User {\n  names: Names;\n}\n\n// Models and schemas\ntype UserModelType = Model<User>;\nconst userSchema = new Schema<User, UserModelType>({\n  names: new Schema<Names>({ firstName: String })\n});\nconst UserModel = model<User, UserModelType>('User', userSchema);\n\n// Create a new document:\nconst doc = new UserModel({ names: { _id: '0'.repeat(24), firstName: 'foo' } });\n\n// \"Property 'ownerDocument' does not exist on type 'Names'.\"\n// Means that `doc.names` is not a subdocument!\ndoc.names.ownerDocument();\n```\n\n----------------------------------------\n\nTITLE: Displaying npm Package Dependencies for a Web App\nDESCRIPTION: This snippet shows the output of 'npm list' command, demonstrating the dependency structure of a web application that uses a shared schema package.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/shared-schemas.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n@initech/web-app1@1.0.0\n├── @initech/shared-schemas@1.0.0\n├── mongoose@8.0.1\n```\n\n----------------------------------------\n\nTITLE: ObjectId _id Getter Behavior in Mongoose 5.1.0\nDESCRIPTION: Demonstrates the new _id getter functionality added in Mongoose 5.1.0 that allows accessing the ObjectId regardless of whether a path is populated, which affects population checking.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst blogPostSchema = new Schema({\n  title: String,\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Author'\n  }\n});\nconst BlogPost = mongoose.model('BlogPost', blogPostSchema);\n\nawait BlogPost.create({ title: 'test', author: author._id });\nconst blogPost = await BlogPost.findOne();\n\nconsole.log(blogPost.author); // '5b207f84e8061d1d2711b421'\n// New in Mongoose 5.1.0: this will print '5b207f84e8061d1d2711b421' as well\nconsole.log(blogPost.author._id);\n\nawait blogPost.populate('author');\nconsole.log(blogPost.author._id); // '5b207f84e8061d1d2711b421'\n```\n\n----------------------------------------\n\nTITLE: Schema-Defined Document Key Ordering\nDESCRIPTION: Demonstrates how Mongoose 6 maintains key order based on schema definition rather than input object order.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  profile: {\n    name: {\n      first: String,\n      last: String\n    }\n  }\n});\nconst Test = db.model('Test', schema);\n\nconst doc = new Test({\n  profile: { name: { last: 'Musashi', first: 'Miyamoto' } }\n});\n\n// Note that 'first' comes before 'last', even though the argument to `new Test()` flips the key order.\n// Mongoose uses the schema's key order, not the provided objects' key order.\nassert.deepEqual(Object.keys(doc.toObject().profile.name), ['first', 'last']);\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Polygon Structure Example\nDESCRIPTION: Example of a GeoJSON polygon structure representing Colorado's border.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/geojson.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Polygon\",\n  \"coordinates\": [[\n    [-109, 41],\n    [-102, 41],\n    [-102, 37],\n    [-109, 37],\n    [-109, 41]\n  ]]\n}\n```\n\n----------------------------------------\n\nTITLE: Using overwriteDiscriminatorKey Option\nDESCRIPTION: Shows how to update a document's discriminator key using findOneAndUpdate() or updateOne() with the overwriteDiscriminatorKey option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/discriminators.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[require:use overwriteDiscriminatorKey to change discriminator key]\n```\n\n----------------------------------------\n\nTITLE: Configuring Populated Path Selection in Mongoose\nDESCRIPTION: Shows how to control the automatic selection of populated paths in Mongoose queries using the selectPopulatedPaths option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = new Schema({\n  title: 'String',\n  author: { type: 'ObjectId', ref: 'Person' }\n});\nconst Book = mongoose.model('Book', bookSchema);\n\n// By default, Mongoose will add `author` to the below `select()`.\nawait Book.find().select('title').populate('author');\n\n// In other words, the below query is equivalent to the above\nawait Book.find().select('title author').populate('author');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = new Schema({\n  title: 'String',\n  author: { type: 'ObjectId', ref: 'Person' }\n}, { selectPopulatedPaths: false });\nconst Book = mongoose.model('Book', bookSchema);\n\n// Because `selectPopulatedPaths` is false, the below doc will **not**\n// contain an `author` property.\nconst doc = await Book.findOne().select('title').populate('author');\n```\n\n----------------------------------------\n\nTITLE: Using asPromise() for Connection Promises in Mongoose 6.x\nDESCRIPTION: Demonstrates the new way to handle connection promises in Mongoose 6.x using the asPromise() method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// The below no longer works in Mongoose 6\nawait mongoose.createConnection(uri);\n\n// Do this instead\nawait mongoose.createConnection(uri).asPromise();\n```\n\n----------------------------------------\n\nTITLE: Updating Document Middleware for deleteOne in Mongoose 7\nDESCRIPTION: Demonstrates how to update middleware hooks when migrating from remove() to deleteOne(). The new approach requires specifying document-level middleware explicitly.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace this:\nschema.pre('remove', function() {\n  /* ... */\n});\n\n// With this:\nschema.pre('deleteOne', { document: true, query: false }, function() {\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose via npm\nDESCRIPTION: Command to install Mongoose using npm package manager.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install mongoose\n```\n\n----------------------------------------\n\nTITLE: Removed MapReduce Example - JavaScript\nDESCRIPTION: Shows an example of the removed mapReduce functionality that is no longer supported in Mongoose 7 and MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// The following no longer works in Mongoose 7.\nconst o = {\n  map: function() {\n    emit(this.author, 1);\n  },\n  reduce: function(k, vals) {\n    return vals.length;\n  }\n};\n\nawait MR.mapReduce(o);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unique Index Behavior with Duplicate Creation Before Index Build\nDESCRIPTION: Shows that the 'unique' schema option doesn't prevent duplicate documents from being created until MongoDB indexes are built. This example creates duplicates that won't error initially.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new mongoose.Schema({\n  name: { type: String, unique: true }\n});\nconst Model = db.model('Test', schema);\n\n// No error, unless index was already built\nawait Model.create([{ name: 'Val' }, { name: 'Val' }]);\n```\n\n----------------------------------------\n\nTITLE: Schema Path Setter Order Changes in Mongoose 5.x\nDESCRIPTION: Illustrates how the execution order of multiple setters on the same path has changed from reverse order in 4.x to declaration order in 5.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.path('name').\n  set(() => console.log('This will print 2nd')).\n  set(() => console.log('This will print first'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String });\nschema.path('name').\n  set(() => console.log('This will print first')).\n  set(() => console.log('This will print 2nd'));\n```\n\n----------------------------------------\n\nTITLE: Type POJO to Mixed Conversion\nDESCRIPTION: Shows how Mongoose 6 handles schema paths declared with object type definitions.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// In Mongoose 6, the below makes `foo` into a subdocument with a `name` property.\n// In Mongoose 5, the below would make `foo` a `Mixed` type, _unless_ you set `typePojoToMixed: false`.\nconst schema = new Schema({\n  foo: { type: { name: String } }\n});\n```\n\n----------------------------------------\n\nTITLE: Subdocument Reference Function Context\nDESCRIPTION: Demonstrates how function refs in subdocuments now have access to the subdocument context rather than the parent document.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  works: [{\n    modelId: String,\n    data: {\n      type: mongoose.ObjectId,\n      ref: function(doc) {\n        // In Mongoose 6, `doc` is the array element, so you can access `modelId`.\n        // In Mongoose 5, `doc` was the top-level document.\n        return doc.modelId;\n      }\n    }\n  }]});\n```\n\n----------------------------------------\n\nTITLE: Printing Mongoose Version using mongoose.version Property in JavaScript\nDESCRIPTION: This snippet demonstrates how to check the Mongoose version by accessing the mongoose.version property in a Node.js application. It requires the mongoose package to be installed and imported.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/check-version.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\nconsole.log(mongoose.version); // '7.x.x'\n```\n\n----------------------------------------\n\nTITLE: Setting Array Default to Null in Mongoose Schema\nDESCRIPTION: This snippet demonstrates how to set the default value of an array field to null in a Mongoose schema, initializing the array path to null.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst CollectionSchema = new Schema({\n  field1: {\n    type: [String],\n    default: null\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Connection Issue with Unconnected Database Instance\nDESCRIPTION: Illustrates how creating a model on an unconnected database instance will cause operations to time out. This example shows that each connection must be explicitly connected to MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait mongoose.connect(mongodbUri);\n\nconst db = mongoose.createConnection();\n\nconst Test = db.model('Test', schema);\n\nawait Test.findOne(); // Will throw \"Operation timed out\" error because `db` isn't connected to MongoDB\n```\n\n----------------------------------------\n\nTITLE: Copying Schema Options with add() Method in Mongoose 7\nDESCRIPTION: Shows how the add() method now copies schema options to the target schema in Mongoose 7, which wasn't the case in Mongoose 6.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nchildSchema.add(new Schema({}, { toObject: { virtuals: true } }));\n\nchildSchema.options.toObject; // { virtuals: true } in Mongoose 7. undefined in Mongoose 6.\n```\n\n----------------------------------------\n\nTITLE: Schema Options Copying in Schema.prototype.add() in Mongoose 7\nDESCRIPTION: Demonstrates how Mongoose 7 now copies user-defined schema options when adding one schema to another, either through array construction or the add() method.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseSchema = new Schema({ created: Date }, { id: true, toJSON: { virtuals: true } });\nconst childSchema = new Schema([baseSchema, { name: String }]);\n\nchildSchema.options.toJSON; // { virtuals: true } in Mongoose 7. undefined in Mongoose 6.\n```\n\n----------------------------------------\n\nTITLE: ObjectId valueOf() Comparison in JavaScript\nDESCRIPTION: Demonstrates the new valueOf() function added to ObjectIds allowing string comparison using ==.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = ObjectId('6143b55ac9a762738b15d4f0');\n\na == '6143b55ac9a762738b15d4f0'; // true\n```\n\n----------------------------------------\n\nTITLE: Potential Conflicts with id and _id in Mongoose 7.4+\nDESCRIPTION: Demonstrates how the new id setter can cause unexpected behavior when both id and _id are specified in the same object, with the later property in the object overriding the earlier one.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Because `id` is after `_id`, the `id` will overwrite the `_id`\nconst doc = new TestModel({\n  _id: '000000000000000000000000',\n  id: '111111111111111111111111'\n});\n\ndoc._id; // ObjectId('111111111111111111111111')\n```\n\n----------------------------------------\n\nTITLE: Running Express Connection Sharing Example\nDESCRIPTION: Command line instructions to set up and run the Express connection sharing example with Mongoose. Includes steps for installing dependencies and starting the server.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/examples/express/connection-sharing/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* Execute `npm install` from this directory\n* Execute `node app.js`\n* Navigate to `127.0.0.1:8000`\n```\n\n----------------------------------------\n\nTITLE: Discriminator Schemas Inheriting Base Schema Options in Mongoose 7\nDESCRIPTION: Shows how discriminator schemas now automatically use the base schema's options by default in Mongoose 7, which wasn't the case in Mongoose 6.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseSchema = Schema({}, { typeKey: '$type' });\nconst Base = db.model('Base', baseSchema);\n\n// In Mongoose 6.x, the `Base.discriminator()` call would throw because\n// no `typeKey` option. In Mongoose 7, Mongoose uses the base schema's\n// `typeKey` by default.\nconst childSchema = new Schema({}, {});\nconst Test = Base.discriminator('Child', childSchema);\n\nTest.schema.options.typeKey; // '$type'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Limitations of Virtuals in Queries\nDESCRIPTION: Shows that Mongoose virtuals cannot be used directly in database queries as they are not stored in MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/virtuals.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  email: String\n});\n\nUserSchema.virtual('domain').get(function() {\n  return this.email.slice(this.email.indexOf('@') + 1);\n});\n\nconst User = mongoose.model('User', UserSchema);\n\n// Will **not** find any users!\nconst users = await User.find({ domain: 'gmail.com' });\n```\n\n----------------------------------------\n\nTITLE: Removed Document Extension Pattern - TypeScript\nDESCRIPTION: Shows the removal of Document extension pattern and LeanDocument type in Mongoose 7, providing the new recommended approach.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// No longer supported\ninterface ITest extends Document {\n  name?: string;\n}\nconst Test = model<ITest>('Test', schema);\n\n// Do this instead, no `extends Document`\ninterface ITest {\n  name?: string;\n}\nconst Test = model<ITest>('Test', schema);\n\n// If you need to access the hydrated document type, use the following code\ntype TestDocument = ReturnType<(typeof Test)['hydrate']>;\n```\n\n----------------------------------------\n\nTITLE: Document.prototype.deleteOne Return Type Change\nDESCRIPTION: Shows the change in return type for document.deleteOne() method. In Mongoose 8, it returns a query instead of a promise resolving to the document, allowing for better query chaining.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_8.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst numberOne = await Character.findOne({ name: 'Will Riker' });\n\n// In Mongoose 7, q is a Promise that resolves to `numberOne`\n// In Mongoose 8, q is a Query.\nconst q = numberOne.deleteOne();\n\n// In Mongoose 7, `res === numberOne`\n// In Mongoose 8, `res` is a `DeleteResult`.\nconst res = await q;\n```\n\n----------------------------------------\n\nTITLE: Custom Promise Library Removal - JavaScript\nDESCRIPTION: Demonstrates the removal of custom promise library support in Mongoose 7 and shows the alternative global Promise assignment.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose');\n\n// No-op on Mongoose 7\nmongoose.Promise = require('bluebird');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.Promise = require('bluebird');\n```\n\n----------------------------------------\n\nTITLE: Importing Mongoose Browser Library with Webpack\nDESCRIPTION: Shows how to import Mongoose's browser library when bundling code with Webpack, assuming the Webpack target is set to 'web'.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/browser.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mongoose from 'mongoose';\n```\n\n----------------------------------------\n\nTITLE: ObjectId Validation in Mongoose 6\nDESCRIPTION: Shows the difference between isValidObjectId() and isObjectIdOrHexString() methods for validating MongoDB ObjectIds.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// `isValidObjectId()` returns `true` for some surprising values, because these\n// values are _technically_ ObjectId representations\nmongoose.isValidObjectId(new mongoose.Types.ObjectId()); // true\nmongoose.isValidObjectId('0123456789ab'); // true\nmongoose.isValidObjectId(6); // true\nmongoose.isValidObjectId(new User({ name: 'test' })); // true\n\n// `isObjectIdOrHexString()` instead only returns `true` for ObjectIds and 24\n// character hex strings.\nmongoose.isObjectIdOrHexString(new mongoose.Types.ObjectId()); // true\nmongoose.isObjectIdOrHexString('62261a65d66c6be0a63c051f'); // true\nmongoose.isObjectIdOrHexString('0123456789ab'); // false\nmongoose.isObjectIdOrHexString(6); // false\n```\n\n----------------------------------------\n\nTITLE: Connect Method Return Value Changes in Mongoose 5.x\nDESCRIPTION: Shows how mongoose.connect() now returns a promise instead of the mongoose singleton if no callback is provided. This affects code that chained methods directly after connect().\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Worked in mongoose 4. Does **not** work in mongoose 5, `mongoose.connect()`\n// now returns a promise consistently. This is to avoid the horrible things\n// we've done to allow mongoose to be a thenable that resolves to itself.\nmongoose.connect('mongodb://127.0.0.1:27017/test').model('Test', new Schema({}));\n\n// Do this instead\nmongoose.connect('mongodb://127.0.0.1:27017/test');\nmongoose.model('Test', new Schema({}));\n```\n\n----------------------------------------\n\nTITLE: Excluding Indexes in Subdocument Schemas in Mongoose\nDESCRIPTION: Shows how to use the 'excludeIndexes' option to prevent index creation on subdocument schemas, while allowing indexes on the parent schema.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst childSchema1 = Schema({\n  name: { type: String, index: true }\n});\n\nconst childSchema2 = Schema({\n  name: { type: String, index: true }\n}, { excludeIndexes: true });\n\n// Mongoose will create an index on `child1.name`, but **not** `child2.name`, because `excludeIndexes`\n// is true on `childSchema2`\nconst User = new Schema({\n  name: { type: String, index: true },\n  child1: childSchema1,\n  child2: childSchema2\n});\n```\n\n----------------------------------------\n\nTITLE: Boolean Casting Behavior Change\nDESCRIPTION: Illustrates the stricter boolean casting rules in Mongoose 5.x where only specific values are cast to boolean.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyModel = mongoose.model('Test', new Schema({\n  boolField: Boolean\n}));\n\nMyModel.create({ boolField: 'not a boolean' });\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined in Updates\nDESCRIPTION: Demonstrates how Mongoose 6 handles undefined values in updates, removing the omitUndefined option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// In Mongoose 6, equivalent to `findOneAndUpdate({}, {}, { new: true })` because Mongoose will\n// remove `name: undefined`\nconst res = await Test.findOneAndUpdate({}, { $set: { name: undefined } }, { new: true });\n\n// The only workaround is to explicitly set properties to `null` in your updates:\nconst res = await Test.findOneAndUpdate({}, { $set: { name: null } }, { new: true });\n```\n\n----------------------------------------\n\nTITLE: Running Specific Mocha Tests with npm\nDESCRIPTION: Examples of running Mongoose tests using npm commands with various Mocha flags and configurations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -g 'some regexp that matches the test description'\nnpm test -- -R spec\n```\n\n----------------------------------------\n\nTITLE: Importing Mongoose for Transactions\nDESCRIPTION: This snippet shows how to import the Mongoose library, which is required for using transactions.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/transactions.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mongoose from 'mongoose';\n```\n\n----------------------------------------\n\nTITLE: Discriminator Schema Cloning in Mongoose 6\nDESCRIPTION: Demonstrates how Mongoose 6 handles discriminator schema cloning by default and how to opt out using the clone option.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// In Mongoose 6, these two are equivalent:\nUser.discriminator('author', authorSchema);\nUser.discriminator('author', authorSchema.clone());\n\n// To opt out if `clone()` is causing issues, pass `clone: false`\nUser.discriminator('author', authorSchema, { clone: false });\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Virtual Types with TypeScript Interfaces in Mongoose\nDESCRIPTION: Shows how to manually define virtual types using separate interfaces. This approach uses generic parameters on both Model and Schema to specify the document type and virtuals interface.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript/virtuals.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Schema, Model, model } from 'mongoose';\n\ninterface UserDoc {\n  firstName: string;\n  lastName: string;\n}\n\ninterface UserVirtuals {\n  fullName: string;\n}\n\ntype UserModel = Model<UserDoc, {}, UserVirtuals>; // <-- add virtuals here...\n\nconst schema = new Schema<UserDoc, UserModel, UserVirtuals>({ // <-- and here\n  firstName: String,\n  lastName: String\n});\n\nschema.virtual('fullName').get(function() {\n  return `${this.firstName} ${this.lastName}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Schema Definition with 'type' Property\nDESCRIPTION: Shows the correct way to define a schema with an object that has a 'type' property, using nested type declaration to avoid Mongoose misinterpretation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/faq.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst holdingSchema = new Schema({\n  // This is how you tell mongoose you mean `asset` is an object with\n  // a string property `type`, as opposed to telling mongoose that `asset`\n  // is a string.\n  asset: {\n    type: { type: String },\n    ticker: String\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using findOneAndUpdate with new:true option in Mongoose 4\nDESCRIPTION: In Mongoose 4, findOneAndUpdate() returns the document before updates by default. To get the updated document, you must explicitly set the 'new' option to true as shown in this example.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migration.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMyModel.findOneAndUpdate({}, { $set: { test: 1 } }, { new: true }, callback);\n```\n\n----------------------------------------\n\nTITLE: Suppressing Jest Warnings in Mongoose Tests\nDESCRIPTION: Command to suppress Jest warnings when running Mongoose tests by setting the SUPPRESS_JEST_WARNINGS environment variable.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/jest.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nenv SUPPRESS_JEST_WARNINGS=1 npm test\n```\n\n----------------------------------------\n\nTITLE: Removing Mongoose's Built-in TypeScript Definitions\nDESCRIPTION: This JSON snippet shows how to add a postinstall script to remove Mongoose's built-in index.d.ts file if it doesn't work for your project. It's recommended to report issues before resorting to this solution.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/typescript.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postinstall\": \"rm ./node_modules/mongoose/index.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Model.exists() Return Value in Mongoose 6.x\nDESCRIPTION: Illustrates the change in Model.exists() return value from a boolean to a lean document in Mongoose 6.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// in Mongoose 5.x, `existingUser` used to be a boolean\n// now `existingUser` will be either `{ _id: ObjectId(...) }` or `null`.\nconst existingUser = await User.exists({ name: 'John' });\nif (existingUser) {\n  console.log(existingUser._id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring X.509 Authentication with Mongoose\nDESCRIPTION: Shows the correct way to set up X.509 authentication by including the username in the connection string rather than in the connect options. This method is required for proper X.509 authentication with MongoDB.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/ssl.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Do this:\nconst username = 'myusername';\nawait mongoose.connect(`mongodb://${encodeURIComponent(username)}@127.0.0.1:27017/test`, {\n  tls: true,\n  tlsCAFile: `${__dirname}/rootCA.pem`,\n  authMechanism: 'MONGODB-X509',\n});\n\n// Not this:\nawait mongoose.connect('mongodb://127.0.0.1:27017/test', {\n  tls: true,\n  tlsCAFile: `${__dirname}/rootCA.pem`,\n  authMechanism: 'MONGODB-X509',\n  auth: { username },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema as POJO for Mongoose Version Compatibility\nDESCRIPTION: This snippet demonstrates a workaround for shared libraries with older Mongoose versions by exporting the schema as a Plain Old JavaScript Object (POJO).\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/shared-schemas.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace this:\nmodule.exports = new mongoose.Schema({ name: String });\n\n// With this:\nmodule.exports = { name: String };\n```\n\n----------------------------------------\n\nTITLE: Handling Numeric String Date Conversion in Mongoose\nDESCRIPTION: Shows how Mongoose handles the conversion of numeric strings to dates, particularly for values outside the range of representable dates in JavaScript. This differs from native JavaScript date parsing behavior.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/dates.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[require: Date Tutorial.*Example 1.4.3]\n```\n\n----------------------------------------\n\nTITLE: BulkWrite Results Structure\nDESCRIPTION: Demonstrates the new structure of bulkWrite() operation results in Mongoose 5.x using MongoDB driver 3.x.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst Model = mongoose.model('Test', new Schema({ name: String }));\n\nconst res = await Model.bulkWrite([{ insertOne: { document: { name: 'test' } } }]);\n\nconsole.log(res);\n```\n\n----------------------------------------\n\nTITLE: Website Update Commands for Mongoose 5.x\nDESCRIPTION: Commands for updating the Mongoose documentation website for legacy version 5.x, including building and publishing documentation to gh-pages branch.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/release-items.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake docs_legacy\ngit commit -a -m 'chore: website 5.x.x'\ngit push origin gh-pages\n```\n\n----------------------------------------\n\nTITLE: Checking Mongoose Version via Node.js Command Line\nDESCRIPTION: This shell command uses Node.js' -e flag to execute a one-line script that prints the current Mongoose version. It's useful for quickly checking the version without creating a separate file.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/check-version.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Prints current Mongoose version, e.g. 7.0.3\nnode -e \"console.log(require('mongoose').version)\"\n```\n\n----------------------------------------\n\nTITLE: Filter Property Overwriting\nDESCRIPTION: Shows how filter property overwriting behavior has changed in Mongoose 5.x when using query builders.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nSport.find({ name: 'baseball' }).where({ name: { $ne: 'softball' } });\n```\n\n----------------------------------------\n\nTITLE: toObject Options Change in Mongoose 5.x\nDESCRIPTION: Demonstrates how toObject() options merge behavior changed in Mongoose 5.x. Options now merge with schema defaults instead of overwriting them.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String }, { toObject: { virtuals: true } });\nschema.virtual('answer').get(() => 42);\nconst MyModel = db.model('MyModel', schema);\n\nconst doc = new MyModel({ name: 'test' });\nconsole.log(doc.toJSON({ minimize: false }).answer);\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Client Encryption Package\nDESCRIPTION: Command for installing the required mongodb-client-encryption npm package, which is MongoDB's official package for setting up encryption keys.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/field-level-encryption.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install mongodb-client-encryption\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS/SSL Certificate Validation in Mongoose\nDESCRIPTION: Shows how to disable TLS/SSL certificate validation for debugging purposes by setting tlsAllowInvalidCertificates to true. This should generally be avoided in production environments.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/ssl.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect('mongodb://127.0.0.1:27017/test', {\n  tls: true,\n  tlsAllowInvalidCertificates: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Redirect Script for Mongoose API Documentation\nDESCRIPTION: This snippet imports a JavaScript file responsible for redirecting old API links to their proper destinations in the Mongoose documentation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/api.md#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"/docs/js/redirect-old-api.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Release Commands for Mongoose\nDESCRIPTION: Commands for tagging and releasing a new version of Mongoose, including updating version numbers and documentation.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/release-items.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a -m 'release x.x.x'\ngit tag x.x.x\nnpm run release\nnpm run release-legacy\n```\n\n----------------------------------------\n\nTITLE: Query Setters Execution\nDESCRIPTION: Demonstrates how setters now run on queries by default in Mongoose 5.x, with the runSettersOnQuery option removed.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({\n  email: { type: String, lowercase: true }\n});\nconst Model = mongoose.model('Test', schema);\nModel.find({ email: 'FOO@BAR.BAZ' });\n```\n\n----------------------------------------\n\nTITLE: Configuring X.509 Authentication with MongoDB Atlas\nDESCRIPTION: Demonstrates how to connect to a MongoDB Atlas cluster using X.509 authentication, which requires using tlsCertificateKeyFile instead of tlsCAFile, along with proper authSource and authMechanism settings.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/ssl.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = 'mongodb+srv://xyz.mongodb.net/test?authSource=%24external&authMechanism=MONGODB-X509';\nawait mongoose.connect(url, {\n  tls: true,\n  // location of a local .pem file that contains both the client's certificate and key\n  tlsCertificateKeyFile: '/path/to/certificate.pem',\n  authMechanism: 'MONGODB-X509',\n  authSource: '$external',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Collection Options in Mongoose Schema\nDESCRIPTION: Shows how to set MongoDB collection options using the collectionOptions schema option in Mongoose.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/guide.md#2025-04-14_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = new Schema({ name: String }, {\n  autoCreate: false,\n  collectionOptions: {\n    capped: true,\n    max: 1000\n  }\n});\nconst Test = mongoose.model('Test', schema);\n\n// Equivalent to `createCollection({ capped: true, max: 1000 })`\nawait Test.createCollection();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Casting Error with Japanese Numerals in Mongoose\nDESCRIPTION: Example showing how Mongoose's default number casting throws an error when attempting to cast a string containing Japanese numerals to a number type.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/custom-casting.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[require:custom casting.*casting error]\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Button for Tidelift Learn More Link\nDESCRIPTION: HTML button element styled with custom CSS for the Tidelift Learn More call-to-action link.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/enterprise.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://tidelift.com/subscription/pkg/npm-mongoose?utm_source=npm-mongoose&utm_medium=referral&utm_campaign=enterprise\">\n  <button style=\"border-radius: 3px;padding: 3px;padding-left: 30px;padding-right: 30px;border: 1px solid #800;color: #800;\">Learn More</button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Custom Timer Wrapper Implementation\nDESCRIPTION: Implementation of a custom setTimeout wrapper and its stubbing using Sinon, providing a safer alternative to Jest timer mocks.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/jest.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// time.js\nexports.setTimeout = function() {\n  return global.setTimeout.apply(global, arguments);\n};\n\n// Tests\nconst time = require('../util/time');\nconst sinon = require('sinon');\nsinon.stub(time, 'setTimeout');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating schema.path() Function in Mongoose\nDESCRIPTION: This code snippet shows how to use the schema.path() function in Mongoose to inspect the schema type for a given path. It creates a sample schema with a required String field named 'name' and then logs the output of schema.path('name').\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/schematypes.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst sampleSchema = new Schema({ name: { type: String, required: true } });\nconsole.log(sampleSchema.path('name'));\n// Output looks like:\n/**\n * SchemaString {\n *   enumValues: [],\n  *   regExp: null,\n  *   path: 'name',\n  *   instance: 'String',\n  *   validators: ...\n  */\n```\n\n----------------------------------------\n\nTITLE: Website Update Commands for Mongoose 6.x\nDESCRIPTION: Commands for updating the Mongoose documentation website for version 6.x, including preparing and publishing documentation to gh-pages branch.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/release-items.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:prepare:publish:stable\ngit commit -a -m 'chore: website 6.x.x'\ngit push origin gh-pages\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Table in Markdown\nDESCRIPTION: This HTML snippet defines the styling for a table within a Markdown document. It sets border, padding, and background color for table cells and alternating rows.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/compatibility.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    tr > td, tr > th {\n        border: 1px solid;\n        padding: 8px;\n    }\n\n    table tr:nth-child(2n) {\n        background: rgba(0,0,0,.03);\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Displaying Encrypted Document Structure in MongoDB\nDESCRIPTION: Shows how encrypted data appears in MongoDB when using Client Side Field Level Encryption. The example shows a document with an encrypted 'name' field stored as BinData.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/field-level-encryption.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"_id\" : ObjectId(\"647a3207661e3a3a1bc3e614\"),\n  \"name\" : BinData(6,\"ASrIv7XfokKwiCUJEjckOdgCG+u6IqavcOWX8hINz29MLvcKDZ4nnjCnPFZG+0ftVxMdWgzu6Vdh7ys1uIK1WiaPN0SqpmmtL2rPoqT9gfhADpGDmI60+vm0bJepXNY1Gv0=\"),\n  \"__v\" : 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Shared Mongoose Schemas\nDESCRIPTION: This JSON snippet demonstrates how to properly set up the package.json file for a shared schema package, using Mongoose as a peer dependency.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/shared-schemas.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"@initech/shared-schemas\",\n  \"peerDependencies\": {\n    \"mongoose\": \"8.x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Domain Socket URI Encoding in Mongoose 5.x\nDESCRIPTION: Shows how to properly encode domain sockets in MongoDB connection strings for Mongoose 5.x, which is required due to more stringent URI parsing.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Works in mongoose 4. Does **not** work in mongoose 5 because of more\n// stringent URI parsing.\nconst host = '/tmp/mongodb-27017.sock';\nmongoose.createConnection(`mongodb://aaron:psw@${host}/fake`);\n\n// Do this instead\nconst host = encodeURIComponent('/tmp/mongodb-27017.sock');\nmongoose.createConnection(`mongodb://aaron:psw@${host}/fake`);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Virtual Property Type Inference\nDESCRIPTION: Demonstrates improved TypeScript type inference for virtual getters and setters in Mongoose 6.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_6.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = new Schema({ name: String });\n\nschema.virtual('myVirtual').get(function() {\n  this.name; // string\n});\n```\n\n----------------------------------------\n\nTITLE: HydratedDocument Type Changes - TypeScript\nDESCRIPTION: Illustrates the changes in HydratedDocument type parameters between Mongoose 6 and 7, showing both old and new implementations.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_7.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype HydratedDocument<\n  DocType,\n  TMethodsAndOverrides = {},\n  TVirtuals = {}\n> = Document<unknown, any, DocType> &\nRequire_id<DocType> &\nTMethodsAndOverrides &\nTVirtuals;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype HydratedDocument<\n  DocType,\n  TOverrides = {},\n  TQueryHelpers = {}\n> = Document<unknown, TQueryHelpers, DocType> &\nRequire_id<DocType> &\nTOverrides;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Mongoose 6 version:\ntype UserDocument = HydratedDocument<TUser, TUserMethods, TUserVirtuals>;\n\n// Mongoose 7:\ntype UserDocument = HydratedDocument<TUser, TUserMethods & TUserVirtuals, TUserQueryHelpers>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Connection Pools Multi-Tenancy with Mongoose\nDESCRIPTION: Demonstrates pattern 2 for multi-tenancy using separate connection pools for each tenant. This approach is better suited for applications with >10k tenants and higher request volumes (>1 request/second), but requires careful management of connection limits.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst mongoose = require('mongoose');\n\nconst tenantIdToConnection = {};\n\nconst app = express();\n\napp.get('/users/:tenantId', function(req, res) {\n  let initialConnection = Promise.resolve();\n  const { tenantId } = req.params;\n  if (!tenantIdToConnection[tenantId]) {\n    tenantIdToConnection[tenantId] = mongoose.createConnection(`mongodb://127.0.0.1:27017/tenant_${tenantId}`);\n    tenantIdToConnection[tenantId].model('User', mongoose.Schema({ name: String }));\n    initialConnection = tenantIdToConnection[tenantId].asPromise();\n  }\n  const db = tenantIdToConnection[tenantId];\n  initialConnection.\n    then(() => db.model('User').find()).\n    then(users => res.json({ users })).\n    catch(err => res.status(500).json({ message: err.message }));\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: SSL Validation Configuration\nDESCRIPTION: Shows how to configure SSL validation settings in Mongoose 5.x when using self-signed certificates.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/migrating_to_5.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmongoose.connect(uri, { tlsInsecure: false });\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Style Guidelines\nDESCRIPTION: Code formatting standards for contributing to Mongoose, including spacing and conditional statement formatting.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (..) {\nfor (..) {\nwhile (..) {\nfunction(err) {\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Button for Tidelift Demo Request\nDESCRIPTION: HTML button element styled with custom CSS for the Tidelift Request a Demo call-to-action link.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/enterprise.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://tidelift.com/subscription/request-a-demo?utm_source=npm-mongoose&utm_medium=referral&utm_campaign=enterprise\">\n  <button style=\"border-radius: 3px;padding: 3px;padding-left: 30px;padding-right: 30px;border: 1px solid transparent;color: white;background-color: #800;\">Request a Demo</button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Error Message for Change Streams on Standalone MongoDB Servers\nDESCRIPTION: This snippet shows the error message that occurs when attempting to use change streams with a standalone MongoDB server instead of a replica set or sharded cluster, which is required for change streams functionality.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/change-streams.md#2025-04-14_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nMongoServerError: The $changeStream stage is only supported on replica sets\n```\n\n----------------------------------------\n\nTITLE: Using npm list to Check Mongoose Version\nDESCRIPTION: This shell command uses npm list to display the installed version of Mongoose. It's helpful for identifying if multiple versions of Mongoose are installed in the project.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/check-version.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npm list mongoose\ntest@ /path/to/test\n└── mongoose@7.0.3 \n```\n\n----------------------------------------\n\nTITLE: Handling 'type' Property in Mongoose Schemas\nDESCRIPTION: This snippet illustrates a common gotcha when using the 'type' property in Mongoose schemas. It shows how to properly define a nested 'type' property using object notation to avoid conflicts with Mongoose's special handling of 'type'.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Schema({\n  broken: { type: Boolean },\n  asset: {\n    name: String,\n    type: String // uh oh, it broke. asset will be interpreted as String\n  }\n});\n\nnew Schema({\n  works: { type: Boolean },\n  asset: {\n    name: String,\n    type: { type: String } // works. asset is an object with a type property\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fallback Message for Non-JavaScript Browsers in Mongoose Documentation\nDESCRIPTION: This HTML snippet provides a fallback message for users with JavaScript disabled, informing them that JavaScript is required for proper redirection of old links.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/api.md#2025-04-14_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<noscript>This Page requires JavaScript to Redirect old links properly</noscript>\n```\n\n----------------------------------------\n\nTITLE: Sorting by Single Field in Mongoose Query\nDESCRIPTION: Demonstrates how to sort query results by a single field (age) in both ascending and descending order. It creates a Person model with an age field and shows how to sort the results.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/queries.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst personSchema = new mongoose.Schema({\n  age: Number\n});\n\nconst Person = mongoose.model('Person', personSchema);\nfor (let i = 0; i < 10; i++) {\n  await Person.create({ age: i });\n}\n\nawait Person.find().sort({ age: -1 }); // returns age starting from 10 as the first entry\nawait Person.find().sort({ age: 1 }); // returns age starting from 0 as the first entry\n```\n\n----------------------------------------\n\nTITLE: Validating Documents with Mongoose Browser Library\nDESCRIPTION: Demonstrates the primary use case of the browser library: validating documents against Mongoose schemas. This example creates a document with a required field and shows validation errors.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/browser.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mongoose from 'mongoose';\n\n// Mongoose's browser library does **not** have models. It only supports\n// schemas and documents. The primary use case is validating documents\n// against Mongoose schemas.\nconst doc = new mongoose.Document({}, new mongoose.Schema({\n  name: { type: String, required: true }\n}));\n// Prints an error because `name` is required.\nconsole.log(doc.validateSync());\n```\n\n----------------------------------------\n\nTITLE: Advanced Mongoose Schema with Validators and Middleware\nDESCRIPTION: Example of a more complex Mongoose Schema with custom validators, setters, and middleware.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Comment = new Schema({\n  name: { type: String, default: 'hahaha' },\n  age: { type: Number, min: 18, index: true },\n  bio: { type: String, match: /[a-z]/ },\n  date: { type: Date, default: Date.now },\n  buff: Buffer\n});\n\n// a setter\nComment.path('name').set(function(v) {\n  return capitalize(v);\n});\n\n// middleware\nComment.pre('save', function(next) {\n  notify(this.get('email'));\n  next();\n});\n```\n\n----------------------------------------\n\nTITLE: TypeError from Using Lodash's cloneDeep with Mongoose Documents\nDESCRIPTION: This snippet shows the error message that occurs when using Lodash's cloneDeep() function on Mongoose documents with array properties. The error occurs because Lodash's cloneDeep() doesn't properly handle proxies.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/lodash.md#2025-04-14_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nTypeError: this.__parentArray.$path is not a function\n```\n\n----------------------------------------\n\nTITLE: Checking Replica Set Server Status\nDESCRIPTION: Demonstrates how to inspect replica set server status using the error's reason.servers property.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/connections.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.name === 'MongooseServerSelectionError') {\n  // Contains a Map describing the state of your replica set. For example:\n  // Map(1) {\n  //   'localhost:27017' => ServerDescription {\n  //     address: 'localhost:27017',\n  //     type: 'Unknown',\n  //     ...\n  //   }\n  // }\n  console.log(err.reason.servers);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mongoose in Deno\nDESCRIPTION: Example of importing Mongoose in Deno using createRequire() for CommonJS support.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from 'https://deno.land/std@0.177.0/node/module.ts';\nconst require = createRequire(import.meta.url);\n\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://127.0.0.1:27017/test')\n  .then(() => console.log('Connected!'));\n```\n\n----------------------------------------\n\nTITLE: Importing Mongoose in Node.js\nDESCRIPTION: Examples of importing Mongoose using CommonJS require() and ES6 import syntax.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Using Node.js `require()`\nconst mongoose = require('mongoose');\n\n// Using ES6 imports\nimport mongoose from 'mongoose';\n```\n\n----------------------------------------\n\nTITLE: Non-Schema Properties in Mongoose Queries\nDESCRIPTION: Shows default behavior for handling filter properties that aren't defined in the schema.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*not in schema]\n```\n\n----------------------------------------\n\nTITLE: StrictQuery Throw Option in Mongoose\nDESCRIPTION: Shows how strictQuery:'throw' causes errors when filter contains non-schema properties.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/docs/tutorials/query_casting.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[require:Cast Tutorial.*strictQuery throw]\n```\n\n----------------------------------------\n\nTITLE: Running Mongoose in Deno\nDESCRIPTION: Command to run a Mongoose script in Deno with necessary permissions.\nSOURCE: https://github.com/Automattic/mongoose/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --allow-net --allow-read --allow-sys --allow-env mongoose-test.js\n```"
  }
]