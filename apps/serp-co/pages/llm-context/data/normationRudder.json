[
  {
    "owner": "normation",
    "repo": "rudder",
    "content": "TITLE: Importing Rudder Technique via HTTP API (Shell)\nDESCRIPTION: This snippet illustrates how to import a Rudder technique archive into a Rudder server using the HTTP API and `curl`. It requires a valid API token and the path to the ZIP archive generated by `rudderc build --export`. Replace `yourToken` and `rudder.example.com` with your actual values.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl --header \"X-API-Token: yourToken\" -X POST https://rudder.example.com/rudder/api/latest/archives/import --form \"archive=@ntp_technique-0.1.zip\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating Rudder API Requests with API Token\nDESCRIPTION: This example demonstrates how to authenticate requests to the Rudder REST API using the `X-API-Token` header. The API token is a 32-character string that serves as an equivalent of a password and needs to be passed within the header of the API request.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules\n```\n\n----------------------------------------\n\nTITLE: Using alternative form to prevent leaking the token in process list\nDESCRIPTION: This example demonstrates an alternative way to pass the API token to `curl` to avoid leaking the token in the process list. This approach is useful when the token is stored in a file, like `/var/rudder/run/api-token`, and read from the file using the `--header @<file>` option.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --header @/var/rudder/run/api-token-header\n```\n\n----------------------------------------\n\nTITLE: Foreach Loop Example - Package Installation (YAML)\nDESCRIPTION: This snippet demonstrates a basic `foreach` loop in a Rudder YAML technique to install multiple packages. It iterates over a list of package names, using the `item.name` variable to specify the package to install.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: \"Install the '${item.name}' package\"\n    method: package_present\n    params:\n      name: \"${item.name}\"\n      version: \"latest\"\n    foreach:\n      - name: \"vim\"\n      - name: \"htop\"\n```\n\n----------------------------------------\n\nTITLE: CLI Usage for Rudder Template Module\nDESCRIPTION: This CLI tool allows users to render templates with specified data and template engines. It requires the template file, data file (JSON), and output file path as input. The template engine can be selected from mustache, minijinja, or jinja2, with minijinja being the default.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/template/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ /opt/rudder/bin/rudder-module-template --help\nUsage: rudder-module-template [OPTIONS] --template <TEMPLATE> --data <DATA> --out <OUT>\n\nOptions:\n  -e, --engine <ENGINE>      Template engine [default: minijinja] [possible values: mustache, minijinja, jinja2]\n  -t, --template <TEMPLATE>  Template file\n  -d, --data <DATA>          JSON data file\n  -o, --out <OUT>            Output file\n  -h, --help                 Print help\n  -V, --version              Print version\n```\n\n----------------------------------------\n\nTITLE: Checking Rudder Technique Syntax (Shell)\nDESCRIPTION: This snippet demonstrates how to check the syntax and compilation of a Rudder technique using the `rudderc check` command.  It validates the `technique.yml` file against the technique schema and attempts compilation for Linux and Windows platforms. Requires `rudderc` to be installed and configured.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ rudderc check\n        Read 179 methods (/path/to/methods/lib)\n   Compiling my_technique v0.1 [Linux]\n   Compiling my_technique v0.1 [Windows]\n     Checked technique.yml\n```\n\n----------------------------------------\n\nTITLE: Compiling Rudder Technique (Shell)\nDESCRIPTION: This snippet shows how to compile a Rudder technique for Linux and Windows platforms using the `rudderc build` command. It generates platform-specific policy files (`.cf` for Linux, `.ps1` for Windows) and metadata files in the `target` directory.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ rudderc build\n        Read 179 methods (/path/to/methods/lib)\n   Compiling my_technique v0.1 [Linux]\n       Wrote target/technique.cf\n   Compiling my_technique v0.1 [Windows]\n       Wrote target/technique.ps1\n  Generating my_technique v0.1 [Metadata]\n       Wrote target/metadata.xml\n      Copied resources\n```\n\n----------------------------------------\n\nTITLE: YAML Test Case Example\nDESCRIPTION: This YAML snippet demonstrates the structure of a test case file for Rudder techniques. It includes sections for target platform, parameters, conditions, policy mode, setup, check, and cleanup steps. The steps involve shell commands to manipulate files and verify their existence.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/test.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntarget: windows\nparams:\n  param1: value1\n  param2: true\nconditions:\n  - condition1\n  - condition2\npolicy_mode: audit\nsetup:\n  - sh: \"touch /my/file\"\ncheck:\n  # Linux target\n  - sh: \"test -f /my/file\"\n  # Windows target\n  - sh: \"if (Test-Path -Path C:\\\\my\\\\file) { exit 0 } else { exit 1 }\"\ncleanup:\n  - sh: \"rm -f /my/file\"\n```\n\n----------------------------------------\n\nTITLE: Importing Rudder Technique on Server File System (Shell)\nDESCRIPTION: This snippet shows how to import a Rudder technique by directly placing the `technique.yml` file in the configuration repository on the server's file system.  It requires navigating to the configuration repository directory, creating the appropriate directory structure, copying the file, adding the changes to Git, committing, and reloading the techniques.  Replace `CATEGORY` and `MY_TECHNIQUE` with the desired values.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd /var/rudder/configuration-repository/\nmkdir -p CATEGORY/MY_TECHNIQUE/1.0/\ncp /path/to/technique.yml  CATEGORY/MY_TECHNIQUE/1.0/\ngit add CATEGORY/MY_TECHNIQUE/\ngit commit -m \"Add my technique\"\nrudder server reload-techniques\n```\n\n----------------------------------------\n\nTITLE: Installing Rudder Agent via Script\nDESCRIPTION: This code snippet demonstrates how to install the Rudder agent using a one-line installer script. It fetches the script from the Rudder repository, executes it, and sets up the agent, specifying the Rudder server's IP or hostname. This requires curl, internet access, and the SERVER environment variable should be replaced with the actual server address.\nSOURCE: https://github.com/normation/rudder/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://repository.rudder.io/tools/rudder-setup | sh -s -- setup-agent latest SERVER\n```\n\n----------------------------------------\n\nTITLE: Updating a Rule with Request Parameters via Rudder API\nDESCRIPTION: This example shows how to update a rule using request parameters passed via the `-d` option. Multiple `-d` options are used to specify different parameters. A file can also be passed as a request data.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"X-API-Token: yourToken\"\nhttps://rudder.example.com/rudder/api/rules/latest/{id} -d \"displayName=my new name\" -d \"enabled=false\" -d @directive-info.json\n```\n\n----------------------------------------\n\nTITLE: Updating a Rule with JSON Data via Rudder API\nDESCRIPTION: This snippet updates a rule in the Rudder API using JSON data. It sends a POST request to the API endpoint for a specific rule ID. The JSON data, included via the `-d` option, specifies the new display name, disabled state, and associated directives for the rule.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"X-API-Token: yourToken\" -H  \"Content-Type: application/json\"\nhttps://rudder.example.com/rudder/api/rules/latest/{id}\n  -d '{ \"displayName\": \"new name\", \"enabled\": false, \"directives\": \"directiveId\"}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Message\nDESCRIPTION: This command displays the help message for the `rudder-module-system-updates` CLI tool. It lists available options and commands for interacting with the system updates module. This is useful for understanding the tool's capabilities and usage.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/system-updates/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ /opt/rudder/bin/rudder-module-system-updates --help\nUsage: /vagrant/rudder/target/debug/rudder-module-system-updates [OPTIONS]\n\nOptional arguments:\n  -h, --help     print help message\n  -v, --verbose  be verbose\n\nAvailable commands:\n  list   list upgrade events\n  show   show details about a specific event\n  run    run an upgrade\n  clear  drop database content\n```\n\n----------------------------------------\n\nTITLE: Foreach Loop Example - Package Installation with Version (YAML)\nDESCRIPTION: This snippet demonstrates a `foreach` loop to install packages with specific versions. It uses a list of dictionaries, where each dictionary contains the package name and version, accessed via `tools.pkg_name` and `tools.version` respectively.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: \"Install the '${tools.pkg_name}' package\"\n    method: package_present\n    params:\n      name: \"${tools.pkg_name}\"\n      version: \"${tools.version}\"\n    foreach:\n      - pkg_name: \"vim\"\n        version: \"latest\"\n      - pkg_name: \"htop\"\n        version: \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Rudder Technique as Archive (Shell)\nDESCRIPTION: This snippet demonstrates how to export a Rudder technique as a ZIP archive using `rudderc build --export`. The archive is named after the technique ID and version, and can be imported into a Rudder server via the HTTP API.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ rudderc build --export\n     Writing ./target/ntp_technique-0.1.zip\n```\n\n----------------------------------------\n\nTITLE: Rudder API Response Format Example\nDESCRIPTION: This JSON snippet illustrates the standard response format for the Rudder API. It includes fields like `action` (the function called), `id` (the element's ID), `result` (success or error), `data` (the result data, if successful), and `errorDetails` (the error message, if an error occurred).\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"The name of the called function\",\n  \"id\": \"The ID of the element you want, if relevant\",\n  \"result\": \"The result of your action: success or error\",\n  \"data\": \"Only present if this is a success and depends on the function, it's usually a JSON object\",\n  \"errorDetails\": \"Only present if this is an error, it contains the error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rudder Technique (Shell)\nDESCRIPTION: This snippet shows how to create a new Rudder technique using the `rudderc new` command. It creates a directory structure for the new technique, including `technique.yml`, `resources/`, and `tests/` directories.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ rudderc new my_technique\n       Wrote ./my_technique/technique.yml\n\n$ cd my_technique\n```\n\n----------------------------------------\n\nTITLE: Updating a Rule with JSON File via Rudder API\nDESCRIPTION: This snippet updates a rule by reading JSON data from a file. It uses the `-d @jsonParam` option to instruct `curl` to read the JSON data from the file named `jsonParam` and send it as the request body.  API token and Content-Type header are required.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" https://rudder.example.com/rudder/api/rules/latest/{id} -d @jsonParam\n```\n\n----------------------------------------\n\nTITLE: Triggering Immediate Update\nDESCRIPTION: These commands trigger an immediate execution of a scheduled update event within the Rudder agent. They use the `-D` flag to define a special condition based on the event ID. This is useful for testing or immediately applying critical updates.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/system-updates/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrudder agent run -D ${event_id}_force_now\nrudder agent run -D 70fbe730-3a88-4c27-bfbe-26f799c04b1a_force_now\n```\n\n----------------------------------------\n\nTITLE: Alternative Virtual Host Configuration with Letsencrypt\nDESCRIPTION: This Apache configuration snippet shows an alternative virtual host configuration, using a separate certificate (e.g., Letsencrypt) for Web/API communication.  It separates the relay and webapp configurations into different virtual hosts.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_6\n\nLANGUAGE: ApacheConf\nCODE:\n```\n<VirtualHost *:443>\n  Include /opt/rudder/etc/rudder-apache-relay-ssl.conf\n</VirtualHost>\n\n<VirtualHost *:443>\n  # example with Letsencrypt\n  SSLCertificateFile      /etc/letsencrypt/live/example.com/cert.pem\n  SSLCertificateKeyFile   /etc/letsencrypt/live/example.com/privkey.pem\n  SSLCertificateChainFile /etc/letsencrypt/live/example.com/fullchain.pem\n  # contains no TLS configuration\n  Include /opt/rudder/etc/rudder-apache-webapp-ssl.conf\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Generate Public Key Hash from Private Key\nDESCRIPTION: This command generates a base64-encoded SHA256 hash of the server's public key (in DER format) from the private key. This hash is used for curl key pinning to verify the server's identity during HTTPS connections. The private key is transformed into DER format and then hashed.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rsa -in localhost.priv -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Certificate with OpenSSL\nDESCRIPTION: This command generates a self-signed SHA256 certificate for the agent's key pair, including the agent's unique ID in the subject. It uses the agent's private key and configuration file to create the certificate, valid for 3650 days, and stores it in the specified directory. The certificate is used for authentication, signing, and encrypting files.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -sha256 -key ${CFE_DIR}/ppkeys/localhost.priv -out /opt/rudder/etc/ssl/agent.cert -passin \"pass:Cfengine passphrase\" -x509 -days 3650 -extensions agent_cert -config /opt/rudder/etc/ssl/openssl-agent.cnf -subj \"/UID=$(cat \"${UUID_FILE}\")\"\n```\n\n----------------------------------------\n\nTITLE: Example System Updates Report\nDESCRIPTION: This JSON snippet illustrates the structure of a system updates report sent by the module to the Rudder server. It includes details about updated software packages, the overall status, and the output of the update process. The report allows Rudder to track and monitor system update activities.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/system-updates/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"software-updated\": [\n    {\n      \"name\": \"xz\",\n      \"arch\": \"x86_64\",\n      \"old-version\": \"(none):5.2.4-3.el8\",\n      \"new-version\": \"(none):5.2.4-4.el8\",\n      \"action\": \"updated\"\n    }\n  ],\n  \"status\": \"repaired\",\n  \"output\": \"Last metadata expiration check: 0:08:16 ago on Wed Jul  6 18:01:05 2022.\\nDependencies resolved.\\n=======================================================================================\\n Package               Arch    Version                                 Repo        Size\\n=======================================================================================\\nUpgrading:\\n cockpit-packagekit    noarch  272-1.el8                               appstream  630 k\\n curl                  x86_64  7.61.1-22.el8.3                         baseos     352 k\\n dbus                  x86_64  1:1.12.8-18.el8.1                       baseos      41 k\\n dbus-common           noarch  1:1.12.8-18.el8.1                       baseos                            \\n  vim-filesystem-2:8.0.1763-19.el8.4.noarch                                     \\n  vim-minimal-2:8.0.1763-19.el8.4.x86_64                                        \\n  xz-5.2.4-4.el8.x86_64                                                         \\n  xz-devel-5.2.4-4.el8.x86_64                                                   \\n  xz-libs-5.2.4-4.el8.x86_64                                                    \\n\\nComplete!\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Technique Tests with rudderc\nDESCRIPTION: This shell snippet shows how to run technique tests using the `rudderc` command-line tool. It demonstrates running all defined tests for a given library and running a specific test case. It requires providing the path to the library and optionally the test case name.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/test.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Run all defined tests\nrudderc test --library /path/to/lib\n# Run only the case1 test\nrudderc test --library /path/to/lib case1\n```\n\n----------------------------------------\n\nTITLE: Apache SSL Certificate Configuration\nDESCRIPTION: This Apache configuration snippet defines the SSL certificate and key files used for agent-server communication in the `rudder-apache-relay-ssl.conf` file. It specifies the path to the certificate and private key.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_4\n\nLANGUAGE: ApacheConf\nCODE:\n```\n# certificate linked to agent keys\nSSLCertificateFile     /opt/rudder/etc/ssl/agent.cert\n# agent private key\nSSLCertificateKeyFile  /var/rudder/cfengine-community/ppkeys/localhost.priv\n```\n\n----------------------------------------\n\nTITLE: Nested Foreach Loop Example - File Deployment (YAML)\nDESCRIPTION: This example showcases a nested `foreach` loop to deploy configuration files for multiple users. The outer loop iterates over users, and the inner loop iterates over files, creating a personalized deployment for each user.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  - name: \"Deploy utility files for ${user.login}\"\n    foreach_name: \"user\"\n    foreach:\n      - login: \"bob\"\n      - login: \"alice\"\n    items:\n      - name: \"Deploy file ~/${file.path}\"\n        method: file_from_shared_folder\n        params:\n          hash_type: sha256\n          source: \"${file.path}\"\n          path: \"/home/${user.login}/${file.path}\"\n        foreach_name: \"file\"\n        foreach:\n          - path: \".vimrc\"\n          - path: \".bashrc\"\n```\n\n----------------------------------------\n\nTITLE: RPKG Plugin Metadata Example\nDESCRIPTION: This JSON snippet illustrates the structure of an RPKG plugin metadata file. It defines the plugin's type, name, version, dependencies, build information, and content deployment details. The `content` field maps file archives to their target installation paths.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/SPECS.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"plugin\",\n  \"name\": \"myplugin\",\n  \"version\": \"4.1-1.0\",\n  \"description\": \"\",\n  \"build-date\": \"2017-02-22T13:58:23Z\",\n  \"build-commit\": \"34aea1077f34e5abdaf88eb3455352aa4559ba8b\",\n  \"jar-files\": [ \"test.jar\" ],\n  \"depends\": {\n    \"binary\": [ \"zip\" ]\n    \"apt\": [ \"apache2\" ],\n    \"rpm\": [ ],\n    \"python\": []\n  },\n  \"content\": {\n    \"files.txz\": \"/opt/rudder/share\",\n    \"var_rudder.txz\": \"/var/rudder\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Debian/Ubuntu Build Dependencies\nDESCRIPTION: This command installs the necessary build dependencies for relayd on Debian or Ubuntu systems. It uses `make apt-dependencies` to retrieve and install the dependencies using the `apt` package manager.  It requires root privileges.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/relayd/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo make apt-dependencies\n```\n\n----------------------------------------\n\nTITLE: GPG Keyring Creation and Key Import - Shell Script\nDESCRIPTION: This script removes an existing GPG key file, downloads the Rudder APT key from the repository, and imports it into a new GPG keyring. This is done to verify the authenticity of Rudder plugins downloaded from the Rudder repository.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/tools/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nrm -f rudder_plugins_key.gpg\nwget https://repository.rudder.io/apt/rudder_apt_key.pub\ngpg --no-default-keyring --keyring ./rudder_plugins_key.gpg --import rudder_apt_key.pub\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Version Argument\nDESCRIPTION: Builds a Docker image for the Rudder relay, specifying the Rudder version to install using the `VERSION` build argument. This ensures the container installs a specific version of Rudder during the image creation process.\nSOURCE: https://github.com/normation/rudder/blob/master/docker/rudder-relay/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg VERSION=6.2.0 .\n```\n\n----------------------------------------\n\nTITLE: Install Required Packages (Debian/Ubuntu)\nDESCRIPTION: Installs necessary packages for Rudder development, including git, OpenJDK, Python, and Maven.  This is a comprehensive list of packages that might be needed during development.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt update && apt install -y git openssh-server python3 python3-pip python python-pip openjdk-11-jdk net-tools ldap-utils nodejs npm maven\npip install docopt requests pexpect urllib3\n```\n\n----------------------------------------\n\nTITLE: Updating a Rule with URL Parameter and JSON File via Rudder API\nDESCRIPTION: This example demonstrates how to update a rule in the Rudder API using a combination of a URL parameter and a JSON file for the request body. The 'reason' parameter is passed through the URL and a JSON file via -d @jsonParam.  You can't mix JSON and request parameters. The request parameter will be ignored.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" \"https://rudder.example.com/rudder/api/rules/latest/{id}?reason=Reason used\" -d @jsonParam -d \"reason=Reason ignored\"\n```\n\n----------------------------------------\n\nTITLE: Running Rudder Relay Docker Container\nDESCRIPTION: Starts a Docker container for the Rudder relay, exposing ports 443 and 5309. Port 443 is used for HTTPS traffic, and port 5309 is the standard Rudder port. The container exposes these ports to the host machine, allowing external access to the Rudder relay service.\nSOURCE: https://github.com/normation/rudder/blob/master/docker/rudder-relay/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p443:443 -p5309:5309\n```\n\n----------------------------------------\n\nTITLE: Enabling APT Support\nDESCRIPTION: This command is used to build the module with APT support enabled, by using cargo features. It enables the use of `libapt` through Rust bindings, which allows security-only upgrades and efficient APT cache usage.  The feature `apt` flag enables the inclusion of the APT related functionalities during the build process.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/system-updates/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --release --features=apt\n```\n\n----------------------------------------\n\nTITLE: Generating Rudder SBOM using sbom.sh\nDESCRIPTION: This script generates a CycloneDX SBOM for a specific version of Rudder. It fetches the necessary repositories and creates a gzipped JSON file containing the SBOM data.\nSOURCE: https://github.com/normation/rudder/blob/master/sbom/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./sbom.sh 8.0.1\n```\n\n----------------------------------------\n\nTITLE: Default Virtual Host Configuration\nDESCRIPTION: This Apache configuration snippet shows the default virtual host configuration in `/etc/apache2/sites-available/rudder.conf` or `/etc/httpd/conf.d/rudder.conf`. It includes configurations for both HTTP (redirecting to HTTPS) and HTTPS, using `rudder-apache-relay-ssl.conf` and optionally `rudder-apache-webapp-ssl.conf`.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_5\n\nLANGUAGE: ApacheConf\nCODE:\n```\n<VirtualHost *:80>\n  # include redirection to https\n  Include /opt/rudder/etc/rudder-apache-relay-nossl.conf\n</VirtualHost>\n\n<VirtualHost *:443>\n  Include         /opt/rudder/etc/rudder-apache-relay-ssl.conf\n  # optional as webapp may or may not be installed\n  IncludeOptional /opt/rudder/etc/rudder-apache-webapp-ssl.conf\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Installing Rudder Server via Script\nDESCRIPTION: This code snippet demonstrates how to install the Rudder server using a one-line installer script. It fetches the script from the Rudder repository, executes it, and sets up the server with the latest version. This requires curl and internet access.\nSOURCE: https://github.com/normation/rudder/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://repository.rudder.io/tools/rudder-setup | sh -s -- setup-server latest\n```\n\n----------------------------------------\n\nTITLE: Signing Reports with S/MIME using OpenSSL\nDESCRIPTION: This command signs a report using S/MIME with OpenSSL. It applies a SHA256 digest, disables certificate embedding, specifies the signer certificate and private key, and sets the MIME type to plain text. The password for the private key is provided via the command line, and the signed report is stored in a new file.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl smime -sign -text -nocerts -md sha256 -signer \"${CERT}\" -inkey \"${PRIVKEY}\" -passin \"pass:${PASSPHRASE}\" -in \"${tmp_file}\" -out \"${tmp_file}.signed\"\n```\n\n----------------------------------------\n\nTITLE: Set Rudder File Permissions\nDESCRIPTION: Sets the correct ownership and permissions for the Rudder directories and files. This ensures that the web application has the necessary access to read and write data.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R <username> /var/rudder/\nsudo chown -R <username> /var/log/rudder\nsudo chgrp -R rudder /var/rudder/configuration-repository\nsudo chmod -R 770 /var/rudder/share\n```\n\n----------------------------------------\n\nTITLE: Example Rudder Report\nDESCRIPTION: This code snippet shows an example of a Rudder report, a log line that describes the state of a component of the system. Each report contains the full context needed for compliance computation and traceability.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2019-05-14T08:58:13+00:00 R: @@OpenSSH server@@result_success@@32377fd7-02fd-43d0-aab7-28460a91347b@@c844d80c-8f5d-4b93-83d6-a3a65ae8a6eb@@0@@SSH configuration@@None@@2018-08-24 15:55:01+00:00##e745a140-40bc-4b86-b6dc-084488fc906b@#The OpenSSH server configuration was correct\n```\n\n----------------------------------------\n\nTITLE: Building Rudder Technique Documentation (Shell)\nDESCRIPTION: This snippet demonstrates building documentation for a Rudder technique using the `rudderc lib` command. It generates HTML documentation in the `target/doc/book/` directory.  Requires `rudderc` to be installed and pointed at a valid technique directory.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ rudderc lib\n        Read 179 methods (/.../ncf/tree/30_generic_methods/)\nBook building has started\nRunning the html backend\n       Wrote target/doc/book/index.html\n```\n\n----------------------------------------\n\nTITLE: Backup and Remove Old HTTPS Certificates Script\nDESCRIPTION: This shell script backs up and removes the old HTTPS key and certificate files during an upgrade. It moves `rudder.crt`, `rudder.key`, and `ca.cert` to a backup directory with a timestamped filename.  The variable `$BACKUP_DIR` must be defined in the environment.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n# Backup and remove old HTTPS key and cert\nif [ -f /opt/rudder/etc/ssl/rudder.crt ]; then\n  mv /opt/rudder/etc/ssl/rudder.crt \"${BACKUP_DIR}/rudder-`date +%Y%m%d`.crt\"\nfi\nif [ -f /opt/rudder/etc/ssl/rudder.key ]; then\n  mv /opt/rudder/etc/ssl/rudder.key \"${BACKUP_DIR}/rudder-`date +%Y%m%d`.key\"\nfi\nif [ -f /opt/rudder/etc/ssl/ca.cert ]; then\n  mv /opt/rudder/etc/ssl/ca.cert \"${BACKUP_DIR}/ca-`date +%Y%m%d`.cert\"\nfi\n\n# Internal certificate is now in a packaged file, remove references from\n```\n\n----------------------------------------\n\nTITLE: Specifying Rudder API Version in HTTP Header\nDESCRIPTION: This code illustrates how to specify the desired Rudder API version using the `X-API-Version` HTTP header.  The API version can be a number or `latest`. The example demonstrates how to pass this header with a `curl` request, and shows how an invalid version format will result in an error.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Version 10\ncurl -X GET -H \"X-API-Token: yourToken\" -H \"X-API-Version: 10\" https://rudder.example.com/rudder/api/rules\n# Wrong => Error response indicating which versions are available\ncurl -X GET -H \"X-API-Token: yourToken\" -H \"X-API-Version: 3.14\" https://rudder.example.com/rudder/api/rules\n```\n\n----------------------------------------\n\nTITLE: Technique Directory Structure with Resources (Bash)\nDESCRIPTION: This bash code represents the directory structure of a Rudder technique which includes a 'resources' directory. Files placed under the `resources` folder can be accessed within the technique definition using the `${resources_dir}` variable.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmy_technique\n├── resources\n│   └── file1.txt\n├── technique.yml\n└── tests\n```\n\n----------------------------------------\n\nTITLE: Running the development environment setup script\nDESCRIPTION: This command executes the `setup_dev_env.sh` script, which automates many of the development environment setup steps. It requires two parameters: the local user's username and the GitHub username.  The script should be executed outside of sudo.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n./setup_dev_env.sh <user> <gituser>\n```\n\n----------------------------------------\n\nTITLE: Create Rudder Groups\nDESCRIPTION: Creates the rudder and rudder-policy-reader groups and adds the current user to these groups. This grants necessary permissions for accessing and modifying Rudder configurations.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngroupadd rudder\ngroupadd rudder-policy-reder\nusermod -a -G rudder <username>\nusermod -a -G rudder-policy-reader <username>\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type Header for JSON in Rudder API\nDESCRIPTION: This snippet demonstrates how to set the `Content-Type` header to `application/json` when interacting with the Rudder API. This is essential when sending JSON data in POST or PUT requests to ensure that the API correctly interprets the data.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" ...\n```\n\n----------------------------------------\n\nTITLE: RudderSysEvents Table Schema\nDESCRIPTION: This SQL code defines the schema for the `RudderSysEvents` table, which stores Rudder reports in the database. The table is directly mapped to the reports structure and contains fields such as execution date, node ID, directive ID, rule ID, and message.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE RudderSysEvents (\n  id                 bigint PRIMARY KEY default nextval('serial')\n, executionDate      timestamp with time zone NOT NULL\n, nodeId             text NOT NULL CHECK (nodeId <> '')\n, directiveId        text NOT NULL CHECK (directiveId <> '')\n, ruleId             text NOT NULL CHECK (ruleId <> '')\n, serial             integer NOT NULL\n, component          text NOT NULL CHECK (component <> '')\n, keyValue           text\n, executionTimeStamp timestamp with time zone NOT NULL\n, eventType          text\n, policy             text\n, msg                text\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating MiniFusion with Rudder agent in Shell\nDESCRIPTION: This snippet shows how to integrate minifusion into the Rudder agent's inventory process. It involves disabling the default inventory check script and adding a call to minifusion in the `/opt/rudder/bin/run-inventory` script.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/inventory/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npath/to/minifusion \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Vagrant SSH into Environment\nDESCRIPTION: Connects to the Vagrant box via SSH. This allows access to the server environment for debugging and testing.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nvagrant ssh <env's name>_server\n```\n\n----------------------------------------\n\nTITLE: Clone Rudder Techniques Repository\nDESCRIPTION: Clones the rudder-techniques repository from GitHub.  This provides the base techniques for Rudder configuration management.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Normation/rudder-techniques.git\n```\n\n----------------------------------------\n\nTITLE: Installing Maven dependencies\nDESCRIPTION: This command initiates the Maven build process to clean the project and install dependencies. This process downloads all necessary libraries and resources defined in the project's POM files.  The command is executed from the `rudder/webapp/sources/` directory.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Database Schema Location\nDESCRIPTION: This entry indicates the file path to the database schema definition for the relayd application. The schema is located within the webapp project, specifically in the `reportsSchema.sql` file. This file is crucial for understanding and modifying the database structure used by relayd.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/relayd/README.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nwebapp/sources/rudder/rudder-core/src/main/resources/reportsSchema.sql\n```\n\n----------------------------------------\n\nTITLE: Example RPKG Metadata (JSON)\nDESCRIPTION: This JSON snippet shows an example of the metadata file within an RPKG archive.  It defines the plugin's type, name, version, build details, dependencies (binary dependencies like zip), JAR files, and the content mapping of TXZ archives to their destination directories. The `depends` section specifies external dependencies required by the plugin.  The `content` section specifies where each txz archive should be unpacked.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"plugin\",\n  \"name\": \"rudder-plugin-dsc\",\n  \"version\": \"8.0.3-2.5\",\n  \"build-date\": \"2023-11-23T17:52:03+00:00\",\n  \"build-commit\": \"bfd5b32bafa097e81a25bcb0d33a1e0a94160b7c\",\n  \"depends\": {\n    \"binary\": [ \"zip\" ]\n  },\n  \"jar-files\": [ \"/opt/rudder/share/plugins/dsc/dsc.jar\" ],\n  \"content\": {\n    \"files.txz\": \"/opt/rudder/share/plugins\",\n    \"agent-policy.txz\": \"/var/rudder/configuration-repository\",\n    \"dsc-common.txz\": \"/var/rudder/configuration-repository/techniques/system\",\n    \"techniques.txz\": \"/var/rudder/configuration-repository\",\n    \"ncf.txz\": \"/var/rudder/configuration-repository\",\n    \"hooks.txz\": \"/opt/rudder/etc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Techniques to Configuration Repository\nDESCRIPTION: Copies the techniques directory from the cloned repository to the Rudder configuration repository. This makes the techniques available for use within Rudder.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncp -r rudder-techniques/techniques /var/rudder/configuration-repository/\n```\n\n----------------------------------------\n\nTITLE: Git Add and Commit Techniques\nDESCRIPTION: Adds and commits the techniques directory to the Rudder configuration repository, effectively tracking changes made to the techniques.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit add techniques/\ngit commit -m \"what ever you want\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format\nDESCRIPTION: Defines the standard JSON response format used by the System API and future endpoints.  It includes fields for the action name, result status (success or error), data (if successful), and error details (if an error occurred).\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/api-doc/introduction.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"action\": \"The name of the called function\",\n    \"result\": \"The result of your action: success or error\",\n    \"data\": \"Only present if this is a success and depends on the function, it's usually a JSON object\",\n    \"errorDetails\": \"Only present if this is an error, it contains the error message\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing SQLite Database\nDESCRIPTION: This command is used to access the SQLite database where the system update event data is stored. It allows direct querying and inspection of the stored information for debugging and analysis. The database is located at `/var/rudder/system-update/rudder-module-system-updates.sqlite`.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/system-updates/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsqlite3 /var/rudder/system-update/rudder-module-system-updates.sqlite\n```\n\n----------------------------------------\n\nTITLE: RPKG Plugin Content Example\nDESCRIPTION: This JSON snippet demonstrates how plugin content archives are mapped to their installation paths within the `contents` field of the metadata. The archive name is used as the key, and the target path is the value.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/SPECS.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"content\": {\n    \"files.txz\": \"/opt/rudder/share\",\n    \"var_rudder.txz\": \"/var/rudder\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Content field data example (JSON)\nDESCRIPTION: This JSON snippet shows the `content` data structure which specifies the destination paths for each txz archive within the rpkg. This data structure is contained in the `metadata` file, which is part of the rpkg archive.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"txz_name.txz\": \"unpack_destination\",\n      ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Generate Public Key Hash from Certificate\nDESCRIPTION: This command generates a base64-encoded SHA256 hash of the server's public key (in DER format) from the certificate. This hash is used for curl key pinning to verify the server's identity during HTTPS connections. The certificate is used to extract the public key, transformed into DER format and then hashed.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in agent.cert -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration Example\nDESCRIPTION: This TOML snippet shows the configuration options for the Rudder agent, including the HTTPS port and proxy settings.  These parameters are read by the agent CLI for making `curl` calls.  It should be placed in `/opt/rudder/etc/agent.conf` or `C:\\Program Files\\Rudder\\etc\\agent.conf`.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n# This file configures the way the Rudder agent connects to its server\n\n# Port used for HTTP-like communication\nhttps_port = 443\n\n# Proxy configuration for HTTP-like communication\nhttps_proxy = \"https://user:password@proxy.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Install Elm (Version 0.19.0)\nDESCRIPTION: Downloads, extracts, and installs the Elm compiler (version 0.19.0) for Linux. It moves the executable to /usr/local/bin.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO elm.gz https://github.com/elm/compiler/releases/download/0.19.0/binary-for-linux-64-bit.gz\ngzip -d elm.gz\nchmod +x elm\nmv elm /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Run Quick Tests with Avocado\nDESCRIPTION: These commands execute quick tests within the NCF project using the Avocado framework. The first command runs all executable files in the `tests/quick` directory. The second command specifically runs the `test_ncf_api.py` test file.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/lib/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\navocado run tests/quick\n```\n\nLANGUAGE: shell\nCODE:\n```\navocado run tests/quick/test_ncf_api.py\n```\n\n----------------------------------------\n\nTITLE: Cloning the NCF repository\nDESCRIPTION: This command clones the Network Configuration Framework (NCF) repository from GitHub. It also creates a symbolic link to `/usr/share/ncf` and creates the directory `/var/rudder/configuration-repository/ncf`.  NCF is used for technique editing.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Normation/ncf.git\nsudo ln -s <path/to/ncf/repo> /usr/share/ncf\nmkdir -p /var/rudder/configuration-repository/ncf\n```\n\n----------------------------------------\n\nTITLE: Remove SSL Certificate Configurations - Apache\nDESCRIPTION: These sed commands remove the old SSL certificate file and key file configurations from the Apache virtual host configuration file. This is part of the Rudder upgrade process and ensures that the old certificate paths are removed.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsed -i '/SSLCertificateFile.*\\/opt\\/rudder\\/etc\\/ssl\\/rudder.crt/d' /etc/${APACHE_VHOSTDIR}/rudder.conf\nsed -i '/SSLCertificateKeyFile.*\\/opt\\/rudder\\/etc\\/ssl\\/rudder.key/d' /etc/${APACHE_VHOSTDIR}/rudder.conf\n```\n\n----------------------------------------\n\nTITLE: Updating a Rule with URL Parameters via Rudder API\nDESCRIPTION: This snippet demonstrates how to update a rule using URL parameters. It constructs a URL with query parameters for 'displayName', 'enabled', and 'directives'.  The parameters need to be URL encoded.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"X-API-Token: yourToken\"  https://rudder.example.com/rudder/api/rules/latest/{id}?\"displayName=my new name\"&\"enabled=false\"&\"directives=aDirectiveId\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for NCF\nDESCRIPTION: These commands configure Apache to serve the NCF web interface. They copy a configuration file, replace a placeholder with the actual path to the NCF repository, and restart the Apache service. The commands are specific to Fedora-based systems using `httpd`.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncp <path/to/rudder/repo>/contributing/rudder.conf /etc/httpd/conf.d/\nsed -i \"s#<pathToncfRepo>#<path/to/ncf/repo>#\" /etc/httpd/conf.d/rudder.conf\nservice httpd restart\n```\n\n----------------------------------------\n\nTITLE: Configuring HSTS in rudder-web.properties (TOML)\nDESCRIPTION: This snippet shows the TOML configuration used to enable HTTP Strict Transport Security (HSTS) in Rudder.  It sets the `rudder.server.hsts` and `rudder.server.hstsIncludeSubDomains` properties. The `rudder.server.hstsIncludeSubDomains` allows to specify whether to include all subdomains in HSTS policy.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/arch-doc/rudder-7-3-frontend-security.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\nrudder.server.hsts=true\nrudder.server.hstsIncludeSubDomains=true\n```\n\n----------------------------------------\n\nTITLE: Generating Server Certificate with OpenSSL\nDESCRIPTION: This command generates a server certificate for HTTPS traffic using OpenSSL. It creates a new self-signed certificate with RSA 2048-bit key, sets the subject and subject alternative name (SAN), and stores the key and certificate in the specified files. The certificate is valid for 1460 days and is used by the Apache httpd server.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSUBJALTNAME=DNS:$(hostname --fqdn) openssl req -new -x509 -newkey rsa:2048 -subj \"/C=FR/ST=France/L=Paris/CN=$(hostname --fqdn)/emailAddress=root@$(hostname --fqdn)/\" -keyout /opt/rudder/etc/ssl/rudder.key -out /opt/rudder/etc/ssl/rudder.crt -days 1460 -nodes -sha256 -config /opt/rudder/etc/ssl/openssl.cnf -extensions server_cert\n```\n\n----------------------------------------\n\nTITLE: Yum Alias Example\nDESCRIPTION: This shell command demonstrates that on recent systems, `yum` is often aliased to `dnf`. This allows the system updates module to use the `yum` CLI interface, which is compatible with both `yum` and `dnf` package managers. It shows how yum command points to dnf.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/module-types/system-updates/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[root@centos9 ~]# ls -ahl /usr/bin/yum\nlrwxrwxrwx. 1 root root 5 Apr  1  2024 /usr/bin/yum -> dnf-3\n```\n\n----------------------------------------\n\nTITLE: Adding Rudder Technique as Built-in (Shell)\nDESCRIPTION: This snippet shows how to add a Rudder technique as a built-in technique. It involves compiling the technique, copying the compiled files to the techniques directory in the configuration repository, adding the changes to Git, committing, and reloading the techniques.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nrudderc build\ncd /var/rudder/configuration-repository/techniques/\nmkdir -p CATEGORY/MY_TECHNIQUE/1.0/\ncp -r /path/to/technique/target/* CATEGORY/MY_TECHNIQUE/1.0/\ngit add CATEGORY/MY_TECHNIQUE/\ngit commit -m \"Add my technique\"\nrudder server reload-techniques\n```\n\n----------------------------------------\n\nTITLE: Systemd Sandboxing Configuration for Rudder Relay\nDESCRIPTION: This snippet shows the systemd configuration used for sandboxing the Rudder relay service, restricting file system access and providing a private temporary directory. It enhances security by limiting the potential impact of vulnerabilities in the relayd component.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nProtectSystem=strict\nReadWritePaths=/var/rudder/reports /var/rudder/inventories\nPrivateTmp=True\n```\n\n----------------------------------------\n\nTITLE: Specifying Rudder API Version in URL\nDESCRIPTION: This snippet showcases how to specify the Rudder API version directly within the URL. The API version can be an integer representing a specific version or the string `latest` to use the most recent version. It demonstrates valid and invalid version formats in the URL path.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Version 10\ncurl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/10/rules\n# Latest\ncurl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules\n# Wrong (not an integer) => 404 not found\ncurl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/3.14/rules\n```\n\n----------------------------------------\n\nTITLE: Rudder Signature File Example\nDESCRIPTION: This snippet provides an example of a Rudder signature file. It includes various fields such as the signature version, algorithm, digest, hash value, public key information, hostname, key date, key ID, and expiration date. These fields are crucial for verifying the authenticity and integrity of the associated Rudder configurations or directives.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/relayd/tests/files/metadata.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nheader=rudder-signature-v1\nalgorithm=sha256\ndigest=the_digest\nhash_value=1201874583fb4a77e1d6bd4cd51592c4afb8571c7d5a532e6fc08d648fbb1406\nshort_pubkey=myshortpubkey\nhostname=ubuntu-18-04-64\nkeydate=2018-10-3118:21:43.653257143\nkeyid=B29D02BB\nexpires=1562230426\n```\n\n----------------------------------------\n\nTITLE: Install Apache Directory Studio\nDESCRIPTION: Downloads and installs Apache Directory Studio from Apache mirrors. It extracts the tar.gz archive to the /opt directory.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget \"http://apache.mirrors.ovh.net/ftp.apache.org/dist/directory/studio/2.0.0.v20180908-M14/ApacheDirectoryStudio-2.0.0.v20180908-M14-linux.gtk.x86_64.tar.gz\"\nsudo tar -xzf ApacheDirectoryStudio-2.0.0.v20180908-M14-linux.gtk.x86_64.tar.gz -C /opt\nrm -rf ApacheDirectoryStudio-2.0.0.v20180908-M14-linux.gtk.x86_64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Run Rudder Test Framework Platform Setup\nDESCRIPTION: Command to execute the Rudder Test Framework to set up the specified environment, which triggers the creation and configuration of the Vagrant box.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./rtf platform setup <env's name>\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration\nDESCRIPTION: This robots.txt configuration file is used to control the behavior of web crawlers.  The 'User-agent: *' directive applies the following rules to all user agents.  The 'Disallow: /' directive instructs all crawlers not to access any part of the website, effectively blocking them from indexing the site.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/rudder/rudder-web/src/main/resources/load-page/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: RPKG Plugin Version Example\nDESCRIPTION: This JSON snippet demonstrates the version field format in the plugin metadata, showing how Rudder webapp version and plugin version are concatenated. The plugin version must follow the format `^(?<major>\\d+)\\.(?<minor>\\d+)(-nightly)?$`.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/SPECS.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"8.0.1~rc3-2.9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Rudder Webapp Files\nDESCRIPTION: Creates necessary directories and files for the Rudder web application, including directories for inventories, logs, and run files. It also touches log files and an API token file.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/rudder/inventories/incoming /var/rudder/share /var/rudder/inventories/accepted-nodes-updates /var/rudder/inventories/received /var/rudder/inventories/failed /var/log/rudder/core /var/log/rudder/compliance/ /var/rudder/run/\ntouch /var/log/rudder/core/rudder-webapp.log /var/log/rudder/compliance/non-compliant-reports.log /var/rudder/run/api-token\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Files (Shell)\nDESCRIPTION: This snippet shows how to remove all generated files from a Rudder technique using the `rudderc clean` command.  It removes the contents of the `target` directory, cleaning up build artifacts.  Requires `rudderc` to be installed and pointed at a valid technique directory.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ rudderc clean\n     Cleaned target\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition Example YAML\nDESCRIPTION: This example demonstrates how to define parameters for a technique in YAML, including constraints such as allowed values and default values. It shows how to specify parameters like a DNS server and an NTP server.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nparams:\n  - name: dns_server\n    description: \"The DNS server hostname\"\n    default: \"1.1.1.1\"\n    constraints:\n      allow_empty: true\n  - name: ntp_server\n    constraints:\n      select:\n        - value: \"192.123.23.21\"\n          name: \"DC1\"\n        - value: \"192.123.22.21\"\n          name: \"DC2\"\n```\n\n----------------------------------------\n\nTITLE: Extended Platform Configuration Example (JSON)\nDESCRIPTION: Provides an extended JSON configuration example for a platform within the Rudder Test Framework (RTF).  It includes definitions for relay and agent nodes, specifying their configurations.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n  \"relay\":  { \"rudder-setup\": \"relay\" },\n  \"agent1\": { \"rudder-setup\": \"agent\", \"system\" : \"debian8\", \"server\": \"relay\" },\n  \"agent2\": { \"rudder-setup\": \"agent\", \"system\" : \"debian7\" },\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Install Relayd\nDESCRIPTION: This command installs the relayd application to a specified directory. The `DESTDIR` variable determines the installation location. It copies the built binaries and related files to the target directory.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/relayd/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake DESTDIR=/target/directory install\n```\n\n----------------------------------------\n\nTITLE: Maven settings.xml configuration\nDESCRIPTION: This section configures the Maven settings.xml file by copying a template and replacing placeholders with the actual user and .m2 directory path. It uses `cp` to copy the template and `sed` to replace the path. It's important to adjust `<user>` accordingly.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncp rudder/contributing/settings.xml /home/<user>/.m2/settings.xml\nsed -i \"s/\\[PATH TO \\.m2 DIRECTORY\\]/\\/home\\/<user>\\//g\" /home/<user>/.m2/settings.xml\n```\n\n----------------------------------------\n\nTITLE: HSTS Header Configuration Result (Bash)\nDESCRIPTION: This snippet shows the resulting Strict-Transport-Security header that is generated based on the TOML configuration from `rudder-web.properties`. It demonstrates the `max-age` and `includeSubDomains` directives.  This requires that the web server is configured to read these properties.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/arch-doc/rudder-7-3-frontend-security.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nStrict-Transport-Security\n    # max-age = 1 year\n\tmax-age=31536000 ; includeSubDomains\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Vagrant box\nDESCRIPTION: This command establishes an SSH connection to a specified Vagrant environment. Replace `<env's name>` with the actual name of the Vagrant environment you want to connect to. This step is a prerequisite for performing further configuration within the virtual machine.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nvagrant ssh <env's name>_server\n```\n\n----------------------------------------\n\nTITLE: Rudder Technique Directory Structure (Text)\nDESCRIPTION: This snippet illustrates the directory structure created when generating a new Rudder technique with `rudderc new`. The structure consists of `technique.yml` (the technique definition), `resources/` (for external files), and `tests/` (for technique tests).\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/usage.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmy_technique/\n  ├── technique.yml\n  ├── resources/\n  └── tests/\n```\n\n----------------------------------------\n\nTITLE: Method Definition Example YAML\nDESCRIPTION: This example shows how to define a method with parameters, tags, condition, and reporting mode in YAML. It specifies how to define a method to ensure the absence of a package using the `package_absent` technique.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nitems:\n  - name: \"Ensure telnet-server absence\"\n    tags:\n      cve: CVE-2022-3456\n    condition: \"debian\"\n    method: package_absent\n    params:\n      name: \"telnet-server\"\n    reporting:\n      mode: disabled\n```\n\n----------------------------------------\n\nTITLE: Installing Node dependencies\nDESCRIPTION: This command installs Node.js dependencies using npm. It is executed in the `rudder/webapp/sources/rudder/rudder-web/src/main/` directory and is required by the `src/main/build.sh` script.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Technique Definition Example YAML\nDESCRIPTION: This example demonstrates a basic technique definition in YAML, including its ID, name, version, description, and documentation. It shows the general structure for defining a technique within Rudder.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nid: \"ntp\"\nname: \"NTP configuration\"\nversion: \"1.0\"\ndescription: \"This technique configures the local ntp service\"\ndocumentation: \"**Warning**: it installs\n                the [chrony](https://chrony.tuxfamily.org/) service.\"\n```\n\n----------------------------------------\n\nTITLE: Install Vagrant\nDESCRIPTION: Downloads and installs Vagrant from HashiCorp. It retrieves the latest version and installs the appropriate .deb package.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvagrantversion=$(wget -qO- https://raw.githubusercontent.com/hashicorp/vagrant/stable-website/version.txt) \nwget https://releases.hashicorp.com/vagrant/${vagrantversion}/vagrant_${vagrantversion}_x86_64.deb\napt install -y ./vagrant_${vagrantversion}_x86_64.deb\nrm -rf vagrant_${vagrantversion}_x86_64.deb\n```\n\n----------------------------------------\n\nTITLE: Rudder Technique Example in YAML\nDESCRIPTION: This snippet shows an example of a Rudder technique defined in YAML.  It's meant to illustrate how configuration policies can be expressed as code.  The actual content is expected to be found in the `../examples/ntp/technique.yml` file.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/introduction.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{{#include ../examples/ntp/technique.yml}}\n```\n\n----------------------------------------\n\nTITLE: Normation Ampersand Template Parser Token Types Definition\nDESCRIPTION: Defines the token vocabulary for the Normation Ampersand Template Parser.  This includes tokens for literals, newlines, actions, conditional statements (IF, ELSEIF, ELSE, ENDIF), region references and definitions, expressions (EXPR, IF_EXPR), templates, escape sequences (ESC_CHAR, ESC, HEX), subtemplates, nested parentheses, indentation, and comments.  This file is generated by ANTLR.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/rudder/rudder-templates/src/main/java/com/normation/stringtemplate/language/NormationAmpersandTemplateParserTokenTypes.txt#_snippet_0\n\nLANGUAGE: ANTLR\nCODE:\n```\nNormationAmpersandTemplateParser    // output token vocab name\nLITERAL=4\nNEWLINE=5\nACTION=6\nIF=7\nELSEIF=8\nELSE=9\nENDIF=10\nREGION_REF=11\nREGION_DEF=12\nEXPR=13\nTEMPLATE=14\nIF_EXPR=15\nESC_CHAR=16\nESC=17\nHEX=18\nSUBTEMPLATE=19\nNESTED_PARENS=20\nINDENT=21\nCOMMENT=22\n```\n\n----------------------------------------\n\nTITLE: Minimal Platform Configuration Example (JSON)\nDESCRIPTION: Provides a minimal JSON configuration example for a platform within the Rudder Test Framework (RTF). This configuration specifies the environment to run with Vagrant, the Rudder version, the system OS, and the inventory OS.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\":{ \"run-with\": \"vagrant\", \"rudder-version\": \"6.0\",\n  \"system\": \"debian9\", \"inventory-os\": \"debian\" },\n  \"server\": { \"rudder-setup\": \"dev-server\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git repository\nDESCRIPTION: This command clones a specified Git repository to your local machine. Replace `<gituser>` with your GitHub username. This is a standard Git operation to obtain a local copy of the Rudder source code.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<gituser>/rudder.git\n```\n\n----------------------------------------\n\nTITLE: Getting a Rule by ID via Rudder API\nDESCRIPTION: This snippet demonstrates how to retrieve a rule from the Rudder API using its ID. It uses `curl` to send a GET request to the API endpoint with the rule's ID included in the URL. An API token is required for authentication.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules/id\n```\n\n----------------------------------------\n\nTITLE: Downloading and Executing Rudder Setup Script\nDESCRIPTION: This code snippet shows how to download the Rudder setup script using wget, make it executable using chmod, and then execute it with the -h option to display help information. This requires wget and the ability to execute scripts.\nSOURCE: https://github.com/normation/rudder/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repository.rudder.io/tools/rudder-setup\nchmod +x rudder-setup\n./rudder-setup -h\n```\n\n----------------------------------------\n\nTITLE: Install RHEL/Fedora Build Dependencies\nDESCRIPTION: This command installs the required build dependencies for relayd on RHEL or Fedora systems. It uses `make yum-dependencies` to fetch and install dependencies via the `yum` package manager.  Root privileges are required.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/relayd/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo make yum-dependencies\n```\n\n----------------------------------------\n\nTITLE: TemplateParser Token Definitions in ANTLR\nDESCRIPTION: This snippet defines the tokens used by the `TemplateParser`. Each token is assigned a numerical value, representing its unique identifier within the grammar. These definitions are crucial for the parser to correctly interpret the template language syntax, enabling it to parse and process template files.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/rudder/rudder-templates/src/main/java/com/normation/stringtemplate/language/TemplateParserTokenTypes.txt#_snippet_0\n\nLANGUAGE: ANTLR\nCODE:\n```\nTemplateParser    // output token vocab name\nLITERAL=4\nNEWLINE=5\nACTION=6\nIF=7\nELSEIF=8\nELSE=9\nENDIF=10\nREGION_REF=11\nREGION_DEF=12\nEXPR=13\nTEMPLATE=14\nIF_EXPR=15\nESC_CHAR=16\nESC=17\nHEX=18\nSUBTEMPLATE=19\nNESTED_PARENS=20\nINDENT=21\nCOMMENT=22\n```\n\n----------------------------------------\n\nTITLE: Rudder Policy JSON Example\nDESCRIPTION: This JSON snippet represents the content of `inputs/rudder.json` file in Rudder policies. It configures the HTTPS policy distribution port, the policy server key for CFEngine ACLs and the key hash for curl key pinning. The POLICY_SERVER_KEY is the MD5 hash used by CFEngine, and POLICY_SERVER_KEY_HASH is the SHA256 hash used by curl.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"HTTPS_POLICY_DISTRIBUTION_PORT\":\"443\",\n  \"POLICY_SERVER_KEY\":\"MD5=1ec2213e08921bd3444861f7b4a60919\",\n  \"POLICY_SERVER_KEY_HASH\":\"sha256//LqSz+lTXd9VN4qhpQfGagTrQJjw/msKoczOc4XddhkA=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Block Definition Example YAML\nDESCRIPTION: This example illustrates how to define a block with nested items, tags, condition, and reporting mode in YAML. It specifies the structure of a block within a technique and includes an example of setting the reporting mode.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/syntax.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nitems:\n  - name: \"Ensure telnet-server absence\"\n    tags:\n      cve: CVE-2022-3456\n    condition: \"debian\"\n    reporting:\n      mode: worst-case-weighted-one\n    items:\n      - ...\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Check if PostgreSQL is Listening\nDESCRIPTION: Checks if PostgreSQL is listening on port 15432. This verifies that the database is running correctly within the development environment.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo netstat -laputn | grep 15432\n```\n\n----------------------------------------\n\nTITLE: Install IntelliJ IDEA Community Edition\nDESCRIPTION: Downloads and installs IntelliJ IDEA Community Edition from JetBrains.  It extracts the tar.gz archive to the /opt directory.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://download.jetbrains.com/idea/ideaIC-2019.3.3.tar.gz\nsudo tar -xzf ideaIC-2019.3.3.tar.gz -C /opt\nrm -rf ideaIC-2019.3.3.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Install VirtualBox\nDESCRIPTION: Adds the VirtualBox repository, downloads and installs VirtualBox along with the extension pack.  It also configures the network settings for VirtualBox.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadd-apt-repository \"deb http://download.virtualbox.org/virtualbox/debian bionic contrib\"\nwget -qO- https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo apt-key add -\napt update\nvboxlatest=$(wget -qO- https://download.virtualbox.org/virtualbox/LATEST.TXT)\nvboxversion=$(echo $vboxlatest | cut -c1-3)\napt install -y virtualbox-${vboxversion}\nwget https://download.virtualbox.org/virtualbox/${vboxlatest}/Oracle_VM_VirtualBox_Extension_Pack-${vboxlatest}.vbox-extpack\necho y | sudo vboxmanage extpack install --replace Oracle_VM_VirtualBox_Extension_Pack-${vboxlatest}.vbox-extpack\nrm -rf Oracle_VM_VirtualBox_Extension_Pack-${vboxlatest}.vbox-extpack\nmkdir -p /etc/vbox\necho '* 10.0.0.0/8 192.168.0.0/16' >> /etc/vbox/networks.conf\n```\n\n----------------------------------------\n\nTITLE: Legacy SSL Configuration\nDESCRIPTION: This Apache configuration snippet shows the legacy SSL configuration from Rudder 6.X, which used self-signed certificates.  It defines the paths to the `rudder.crt` and `rudder.key` files.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-7-communications-security.md#_snippet_7\n\nLANGUAGE: ApacheConf\nCODE:\n```\nSSLCertificateFile      /opt/rudder/etc/ssl/rudder.crt\nSSLCertificateKeyFile   /opt/rudder/etc/ssl/rudder.key\n```\n\n----------------------------------------\n\nTITLE: Listing RPKG Archive Contents (ar command)\nDESCRIPTION: This command lists the contents of an RPKG file using the `ar` command. It displays the names of the files within the archive, including the metadata file and the various TXZ archives.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/sources/rudder-package/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~% ar t ./rudder-plugin-dsc-8.0.3-2.5.rpkg\nmetadata\nfiles.txz\nscripts.txz\nhooks.txz\nncf.txz\ntechniques.txz\nagent-policy.txz\ndsc-common.txz\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Detached Signature\nDESCRIPTION: This example shows the content of a detached signature file used for inventories.  It stores metadata related to the signature, including the algorithm used, the signature itself, the hash value, a short public key, the hostname, key date, and key ID. This signature is generated using `openssl dgst` and manually formatted.\nSOURCE: https://github.com/normation/rudder/blob/master/relay/arch-doc/rudder-6-reporting-relayd.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nheader=rudder-signature-v1\nalgorithm=${HASH}\ndigest=${SIGNATURE}\nhash_value=${HASH_VALUE}\nshort_pubkey=${SHORT_PUBKEY}\nhostname=${HOSTNAME}\nkeydate=${KEYDATE}\nkeyid=${KEYID}\n```\n\n----------------------------------------\n\nTITLE: Install Avocado Testing Framework\nDESCRIPTION: This command installs the Avocado testing framework, which is used for running tests in the NCF project. The `--user` flag ensures that the package is installed in the user's home directory.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/lib/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install --user avocado-framework\n```\n\n----------------------------------------\n\nTITLE: JSON Format Example for Rudder API\nDESCRIPTION: This snippet shows a basic example of a JSON format that can be used when interacting with the Rudder API. The JSON object contains key-value pairs, where values can be strings, booleans, or numbers.  This format is for creating or updating resources.\nSOURCE: https://github.com/normation/rudder/blob/master/webapp/sources/api-doc/introduction.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key1\": \"value1\",\n  \"key2\": false,\n  \"key3\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Rudder Agent Output JSON Example\nDESCRIPTION: This JSON snippet represents an example of the output generated by the Rudder agent after running a technique. It shows an array containing a single entry with details about a repair event, including the component, key-value, event type, message, report ID, and logs. The `REPORTS_FILE` environment variable in check steps points to this reports JSON.\nSOURCE: https://github.com/normation/rudder/blob/master/policies/rudderc/docs/src/test.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"component\": \"Ensure correct ntp configuration\",\n    \"key_value\": \"/tmp/rudderc_test_one\",\n    \"event_type\": \"result_repaired\",\n    \"msg\": \"Insert content into /tmp/rudderc_test_one was repaired\",\n    \"report_id\": \"d86ce2e5-d5b6-45cc-87e8-c11cca71d907\",\n    \"logs\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Install Elm (Version 0.19.1)\nDESCRIPTION: Downloads, extracts, and installs the Elm compiler (version 0.19.1) for Linux. It moves the executable to /usr/local/bin.\nSOURCE: https://github.com/normation/rudder/blob/master/contributing/webapp.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO elm-0.19.1.gz https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz\ngzip -d elm-0.19.1.gz\nchmod +x elm-0.19.1\nmv elm-0.19.1 /usr/local/bin/\n```"
  }
]