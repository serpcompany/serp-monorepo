[
  {
    "owner": "twopointone",
    "repo": "applepassgenerator",
    "content": "TITLE: Creating Apple Wallet Pass using applepassgenerator in Python\nDESCRIPTION: Demonstrates the complete process of creating an Apple Wallet pass, including initializing the card info, setting up client credentials, adding required images, and generating the final .pkpass file. Requires certificate files, images, and proper credentials for Apple Wallet pass generation.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/quickstart.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator import ApplePassGeneratorClient\nfrom applepassgenerator.models import EventTicket\n\ncard_info = EventTicket()\ncard_info.add_primary_field('name', 'Tony Stark', 'Name')\ncard_info.add_secondary_field('loc', 'USA', 'Country')\n\napplepassgenerator_client = ApplePassGeneratorClient(pass_type_identifier=\"pass.com.project.example\",\n                                                       organization_name=\"PrimeDigital Global\",\n                                                       team_identifier=\"<Team Identifier>\")\napple_pass = applepassgenerator_client.get_pass(card_info)\n\n# Add logo/icon/strip image to file\napple_pass.add_file(\"logo.png\", open(\"<path-to-file>/logo.png\", \"rb\"))\napple_pass.add_file(\"icon.png\", open(\"<path-to-file>/icon.png\", \"rb\"))\n\nCERTIFICATE_PATH = '<path>/certificate.pem'\nPASSWORD_KEY = '<path>/password.key'\nWWDR_PATH = '<path>/wwdr.pem'\nCERTIFICATE_PASSWORD = \"<password>\"\nOUTPUT_PASS_NAME = \"mypass.pkpass\"\n\n# Creates a .pkpass file\napple_pass.create(CERTIFICATE_PATH, PASSWORD_KEY, WWDR_PATH, CERTIFICATE_PASSWORD, OUTPUT_PASS_NAME)\n```\n\n----------------------------------------\n\nTITLE: Creating Apple Wallet Pass with Python\nDESCRIPTION: Complete example of using the applepassgenerator library to create an Apple Wallet pass (.pkpass) with custom fields and images, including signing the pass with certificates.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator import ApplePassGeneratorClient\nfrom applepassgenerator.models import EventTicket\n\ncard_info = EventTicket()\ncard_info.add_primary_field('name', 'Tony Stark', 'Name')\ncard_info.add_secondary_field('loc', 'USA', 'Country')\n\nteam_identifier = \"1234ABCDEF\"\npass_type_identifier = \"pass.com.project.example\"\norganization_name = \"Primedigital Global\"\n\napplepassgenerator_client = ApplePassGeneratorClient(team_identifier, pass_type_identifier, organization_name)\napple_pass = applepassgenerator_client.get_pass(card_info)\n\n# Add logo/icon/strip image to file\napple_pass.add_file(\"logo.png\", open(\"<path>/logo.png\", \"rb\"))\napple_pass.add_file(\"icon.png\", open(\"<path>/icon.png\", \"rb\"))\n\nCERTIFICATE_PATH = \"<path-to-file>/certificate.pem\"\nPASSWORD_KEY = \"<path-to-file>/password.key\"\nWWDR_CERTIFICATE_PATH = \"<path-to-file>/wwdr.pem\"\nCERTIFICATE_PASSWORD = \"<password>\"\nOUTPUT_PASS_NAME = \"mypass.pkpass\"\n\napple_pass.create(CERTIFICATE_PATH, PASSWORD_KEY, WWDR_CERTIFICATE_PATH, CERTIFICATE_PASSWORD, OUTPUT_PASS_NAME)\n```\n\n----------------------------------------\n\nTITLE: Generating a .pkpass File in Python\nDESCRIPTION: Creates the final .pkpass file using the configured pass settings and required certificate files. Requires certificate.pem, private.key, wwdr.pem, certificate password, and a unique serial number to identify the pass.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nCERTIFICATE_PASSWORD = \"123456789\"\n\napple_pass.serialNumber = '<some unique identifier>'\n\napple_pass.create(\n        \"passes/certificates/certificate.pem\",\n        \"passes/certificates/private.key\",\n        \"passes/certificates/wwdr.pem\",\n        CERTIFICATE_PASSWORD,\n        \"passes/mypass.pkpass\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating an Apple Pass Generator Client in Python\nDESCRIPTION: Initializes a client for generating Apple Wallet passes. Requires your Apple Developer team identifier, pass type identifier, and organization name as parameters.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator import ApplePassGeneratorClient\n\nTEAM_IDENTIFIER = \"<your team id>\"\nPASS_TYPE_IDENTIFIER = \"pass.com.example.mypass\"\nORGANIZATION_NAME = \"Primedigital Global\"\n\nclient = ApplePassGeneratorClient(TEAM_IDENTIFIER, PASS_TYPE_IDENTIFIER, ORGANIZATION_NAME)\n```\n\n----------------------------------------\n\nTITLE: Creating Different Pass Layout Types in Python\nDESCRIPTION: Instantiates different types of Apple Wallet pass layout templates including EventTicket, Generic, Coupon, StoreCard, and BoardingPass. Each layout type has specific fields and appearances optimized for different use cases.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator.models import EventTicket, Generic, Coupon, StoreCard, BoardingPass\n\ncard0 = EventTicket()\ncard1 = Generic()\ncard2 = Coupon()\ncard3 = StoreCard()\ncard4 = BoardingPass()\n```\n\n----------------------------------------\n\nTITLE: Adding Fields to a Pass Card in Python\nDESCRIPTION: Demonstrates how to add different field types to a pass card including primary, secondary, header, auxiliary, and back fields. Each field requires a key, value, and label parameter for proper display in the pass.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator.models import StoreCard\n\ncard_info = StoreCard()\n\ncard_info.add_primary_field(\"key\", \"value\", \"label\")\ncard_info.add_secondary_field(\"key\", \"value\", \"label\")\ncard_info.add_header_field(\"key\", \"value\", \"label\")\ncard_info.add_auxiliary_field(\"key\", \"value\", \"label\")\ncard_info.add_back_field(\"key\", \"value\", \"label\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Pass Instance from Card Information in Python\nDESCRIPTION: Converts the configured card information into an actual pass instance using the client. This is a prerequisite step before adding visual elements and generating the final pass file.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napple_pass = client.get_pass(card_info)\n```\n\n----------------------------------------\n\nTITLE: Adding Visual Elements to an Apple Pass in Python\nDESCRIPTION: Adds required and optional visual elements to the pass including logo, icon, strip, and thumbnail images. Note that icon.png and logo.png are mandatory for the pass to be created properly.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napple_pass.addFile(\"logo.png\", open(\"<path-to-file>/logo.png\", \"rb\"))\napple_pass.addFile(\"logo@2x.png\", open(\"<path-to-file>/logo@2x.png\", \"rb\"))\n\napple_pass.addFile(\"icon.png\", open(\"<path-to-file>/icon.png\", \"rb\"))\napple_pass.addFile(\"icon@2x.png\", open(\"<path-to-file>/icon@2x.png\", \"rb\"))\n\napple_pass.addFile(\"strip.png\", open(\"<path-to-file>/strip.png\", \"rb\"))\napple_pass.addFile(\"strip@2x.png\", open(\"<path-to-file>/strip@2x.png\", \"rb\"))\n\napple_pass.addFile(\"thumbnail.png\", open(\"<path-to-file>/thumbnail.png\", \"rb\"))\napple_pass.addFile(\"thumbnail@2x.png\", open(\"<path-to-file>/thumbnail@2x.png\", \"rb\"))\n```\n\n----------------------------------------\n\nTITLE: Adding a Barcode to an Apple Pass in Python\nDESCRIPTION: Configures a barcode to display on the pass with a custom message. The Barcode class enables adding scannable codes that work with point-of-sale systems and other barcode scanners.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator.models import Barcode\n\napple_pass.barcode = Barcode(message='Barcode message')\n```\n\n----------------------------------------\n\nTITLE: Adding Location Data to an Apple Pass in Python\nDESCRIPTION: Adds geographic location information to the pass. Latitude and longitude parameters are required while altitude is optional. Location data enables location-based notifications for the pass.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator.models import Location\n\napple_pass.locations = Location(\"latitude\", \"longitude\", \"altitude\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Pass Colors in Python\nDESCRIPTION: Sets the color scheme for the pass including foreground (text), background, and label colors. Colors are defined using RGB format strings to customize the visual appearance of the pass.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napple_pass.foreground_color = \"rgb(255, 255, 255)\"\napple_pass.background_color = \"rgb(255, 110, 0)\"\napple_pass.label_color = \"rgb(255, 255, 255)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Beacon Support to an Apple Pass in Python\nDESCRIPTION: Configures iBeacon proximity detection for the pass. The proximity_uuid parameter is required, while major and minor parameters are optional. This enables interaction with physical beacons for proximity-based pass activation.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom applepassgenerator.models import IBeacon\n\napple_pass.ibeacons = IBeacon(\"proximity_uuid\", \"major\", \"minor\")\n```\n\n----------------------------------------\n\nTITLE: Setting Pass Description in Python\nDESCRIPTION: Adds a descriptive text to the Apple Wallet pass. This description helps identify the pass in the Apple Wallet app and provides context about its purpose.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napple_pass.description = \"My Project Pass\"\n```\n\n----------------------------------------\n\nTITLE: Validating Pass JSON Structure in Python\nDESCRIPTION: Returns the pass configuration as a JSON dictionary for validation before generating the final .pkpass file. This is useful for debugging and ensuring all required parameters are properly set.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/tutorial.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napple_pass.json_dict()\n```\n\n----------------------------------------\n\nTITLE: Converting Apple certificate to PEM format\nDESCRIPTION: Command to convert a .p12 certificate file to .pem format which is required for the Apple Pass Generator library.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Generating private key from Apple certificate\nDESCRIPTION: Command to extract the private key from a .p12 certificate file, which will be used for signing the pass.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n>$ openssl pkcs12 -in certificate.p12 -nocerts -out private.key\n```\n\n----------------------------------------\n\nTITLE: Converting Apple Certificate to PEM Format\nDESCRIPTION: Command to convert a .p12 certificate file to a .pem certificate file needed for the Apple Pass Generator. This creates the certificate.pem file that contains only the certificate without the private key.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$ openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Extracting Private Key from Apple Certificate\nDESCRIPTION: Command to extract the private key from a .p12 certificate file. During this process, you'll be prompted for a PEM pass phrase which will be used as the CERTIFICATE_PASSWORD attribute in the package.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/docs/library/configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n>$ openssl pkcs12 -in certificate.p12 -nocerts -out private.key\n```\n\n----------------------------------------\n\nTITLE: Installing Apple Pass Generator using pip\nDESCRIPTION: Command to install or upgrade to the latest release of the applepassgenerator library using pip package manager.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install applepassgenerator\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring the Repository in Bash\nDESCRIPTION: Commands to fork the repository, clone it locally, and configure the upstream remote for keeping the fork in sync with the original repository.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork of the repo into the current directory\ngit clone https://github.com/<your-username>/applepassgenerator.git\n# Navigate to the newly cloned directory\ncd applepassgenerator\n# Assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/PrimedigitalGlobal/applepassgenerator.git\n```\n\n----------------------------------------\n\nTITLE: Updating the Local Repository from Upstream in Bash\nDESCRIPTION: Commands to synchronize the local repository with the latest changes from the upstream repository, ensuring the work is based on the most recent codebase.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Bash\nDESCRIPTION: Command to create a new topic branch for development work, allowing isolated changes that won't affect the main branch until they're reviewed and merged.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes into Feature Branch in Bash\nDESCRIPTION: Command to incorporate the latest changes from the upstream repository into the feature branch, resolving any conflicts before submitting a pull request.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit pull [--rebase] upstream main\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Fork in Bash\nDESCRIPTION: Command to push the local feature branch to the forked repository on GitHub, making it available for creating a pull request.\nSOURCE: https://github.com/twopointone/applepassgenerator/blob/main/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```"
  }
]