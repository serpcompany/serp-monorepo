[
  {
    "owner": "nartc",
    "repo": "mapper",
    "content": "TITLE: Installing AutoMapper Dependencies with npm\nDESCRIPTION: Command to install AutoMapper core, classes strategy, and reflect-metadata using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Automatic Property Mapping in TypeScript with AutoMapper\nDESCRIPTION: Demonstrates how matching properties are automatically mapped between User and UserDto classes using the @AutoMap() decorator.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n}\n\nclass UserDto {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AutoMapper Mappings with createMap() in TypeScript\nDESCRIPTION: Sets up mappings between model and DTO classes using AutoMapper's createMap() function. This code demonstrates how to initialize mappings for both simple and nested models.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMap } from '@automapper/core';\nimport { mapper } from './mappings/mapper';\nimport { Bio, BioDto } from './models/bio';\nimport { User, UserDto } from './models/user';\n\ncreateMap(mapper, Bio, BioDto);\ncreateMap(mapper, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapper with Classes Strategy in TypeScript\nDESCRIPTION: Creates a new Mapper instance using the classes() strategy initializer. This is the basic setup required to start using AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/mapper.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Model Mapping in TypeScript with AutoMapper\nDESCRIPTION: Shows how nested models (Address, Bio, and User) are automatically mapped to their corresponding DTO classes using @AutoMap() decorator with type information.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Address {\n    @AutoMap()\n    street!: string;\n}\n\nclass Bio {\n    @AutoMap()\n    text!: string;\n    @AutoMap(() => [Address])\n    addresses: Address[] = [];\n}\n\nclass User {\n    @AutoMap(() => Bio)\n    bio!: Bio;\n}\n\nclass AddressDto {\n    @AutoMap()\n    street!: string;\n}\n\nclass BioDto {\n    @AutoMap()\n    text!: string;\n    @AutoMap(() => [AddressDto])\n    addresses: AddressDto[] = [];\n}\n\nclass UserDto {\n    @AutoMap(() => BioDto)\n    bio!: BioDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Models with AutoMap Decorators\nDESCRIPTION: Example of entity classes decorated with AutoMap for metadata discovery.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    username: string;\n\n    password: string;\n\n    @AutoMap(() => Bio)\n    bio: Bio;\n}\n\nexport class Bio {\n    @AutoMap(() => Job)\n    job: Job;\n\n    @AutoMap()\n    birthday: Date;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n\nexport class Job {\n    @AutoMap()\n    title: string;\n\n    @AutoMap()\n    salary: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Computed Property Mapping in AutoMapper\nDESCRIPTION: Demonstrates how to configure mapping for a computed fullName property using forMember() function. The fullName is derived by concatenating firstName and lastName.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMap, forMember, mapFrom } from '@automapper/core';\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with AutoMapper Decorators\nDESCRIPTION: TypeScript class definition for a User entity with nested Bio and Job classes, using @AutoMap() decorators for metadata discovery.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    username: string;\n\n    password: string; // <- we purposely left this one out because we don't want to map \"password\"\n\n    @AutoMap(() => Bio)\n    bio: Bio;\n}\n\nexport class Bio {\n    @AutoMap(() => Job)\n    job: Job;\n\n    @AutoMap()\n    birthday: Date;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n\nexport class Job {\n    @AutoMap()\n    title: string;\n\n    @AutoMap()\n    salary: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Main Mapping Configuration\nDESCRIPTION: Demonstrates the complete mapping configuration including type conversion, naming conventions, and computed properties.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    namingConventions(new CamelCaseNamingConvention())\n);\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining DTO Models with AutoMap Decorators\nDESCRIPTION: Example of DTO classes decorated with AutoMap for object mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDto {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    fullName: string;\n\n    @AutoMap()\n    username: string;\n\n    @AutoMap(() => BioDto)\n    bio: BioDto;\n}\n\nexport class BioDto {\n    @AutoMap()\n    jobTitle: string;\n\n    @AutoMap()\n    jobSalary: number;\n\n    @AutoMap()\n    birthday: string;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Computed Property Mapping with forMember in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a computed property 'fullName' that doesn't exist in the source model using forMember() with mapFrom(). It shows how to combine firstName and lastName from the source to create a fullName in the destination.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMap, forMember, mapFrom } from '@automapper/core';\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    // highlight-start\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n    // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Mapping Operation with AutoMapper in TypeScript\nDESCRIPTION: This snippet shows how to use the map() function to perform the actual mapping from a User object to a UserDto object using the previously created mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapping.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dto = mapper.map(user, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Complete Mapping Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates the complete mapping configuration for both Bio to BioDto and User to UserDto. It combines type conversion, naming conventions, and property mapping to create a comprehensive mapping strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    namingConventions(new CamelCaseNamingConvention())\n);\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping Properties Using Value Selector in TypeScript AutoMapper\nDESCRIPTION: Demonstrates how to use mapFrom() with a Value Selector to concatenate firstName and lastName into a fullName property during mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-from.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (d) => d.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Mappings with AutoMapper in TypeScript\nDESCRIPTION: This snippet shows how to create mappings between Bio and BioDto, as well as User and UserDto models using the createMap() function from AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMap } from '@automapper/core';\nimport { mapper } from './mappings/mapper';\nimport { Bio, BioDto } from './models/bio';\nimport { User, UserDto } from './models/user';\n\ncreateMap(mapper, Bio, BioDto);\ncreateMap(mapper, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core with Classes or POJOs Strategy via npm\nDESCRIPTION: Commands to install the core AutoMapper library with either the classes strategy (which requires reflect-metadata) or the POJOs strategy using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes reflect-metadata # for classes\nnpm i @automapper/core @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoMapper POJOS Strategy\nDESCRIPTION: Complete example showing how to create a mapper with POJOS strategy, define metadata for interfaces, create mapping configuration, and perform object mapping. Demonstrates mapping between User and UserDto interfaces with custom property mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/pojos/src/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pojos, PojosMetadataMap } from '@automapper/pojos';\nimport { createMapper, createMap, forMember, mapFrom } from '@automapper/core';\n\nconst mapper = createMapper({\n    ...,\n    strategyInitializer: pojos()\n});\n\ninterface User {\n    firstName: string;\n    lastName: string;\n}\n\ninterface UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n}\n\nPojosMetadataMap.create<User>('SomeTokenForUser', {\n    firstName: String,\n    lastName: String\n});\n\nPojosMetadataMap.create<UserDto>('SomeTokenForUserDto', {\n  firstName: String,\n  lastName: String,\n  fullName: String\n});\n\ncreateMap<User, UserDto>(\n    mapper,\n    'SomeTokenForUser',\n    'SomeTokenForUserDto',\n    forMember(\n        d => d.fullName,\n        mapFrom(s => s.firstName + ' ' + s.lastName)\n    )\n);\nmapper.map<User, UserDto>(\n    {firstName: 'Auto', lastName: 'Mapper'},\n    'SomeTokenForUser',\n    'SomeTokenForUserDto'\n);\n// { firstName: 'Auto', lastName: 'Mapper', fullName: 'Auto Mapper' }\n```\n\n----------------------------------------\n\nTITLE: Using AutoMap with Array types in TypeScript\nDESCRIPTION: Demonstrates how to use the AutoMap decorator with array types, which require explicit type annotation.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/classes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n    @AutoMap(() => [Date])\n    logins!: Date[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Converter for Date to String Mapping in TypeScript\nDESCRIPTION: This snippet shows how to use the typeConverter() function to convert all Date properties to String with a specific conversion format. It applies this conversion globally for all Date to String mappings in the map configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    // highlight-next-line\n    typeConverter(Date, String, (date) => date.toDateString())\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring AutomapperModule in NestJS AppModule\nDESCRIPTION: Example of how to set up the AutomapperModule in the main AppModule of a NestJS application, including single and multiple strategy configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/nestjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutomapperModule } from '@automapper/nestjs';\nimport { classes } from '@automapper/classes';\n\n// single strategy\n@Module({\n    imports: [\n        AutomapperModule.forRoot({\n            strategyInitializer: classes(),\n        }),\n    ],\n})\nexport class AppModule {}\n\n// multiple strategies\n@Module({\n    imports: [\n        AutomapperModule.forRoot(\n            [\n                {\n                    name: 'classes',\n                    strategyInitializer: classes(),\n                },\n                {\n                    name: 'pojos',\n                    strategyInitializer: pojos(),\n                },\n            ],\n            {\n                globalErrorHandler,\n                globalNamingConventions,\n            }\n        ),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating Bidirectional Mappings in TypeScript\nDESCRIPTION: Demonstrates how to create unidirectional mappings between Source and Destination models using createMap(). Each mapping is unique and can be created in both directions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(mapper, Source, Destination); // Mapping<Source, Destination>\ncreateMap(mapper, Destination, Source); // Mapping<Destination, Source>\n```\n\n----------------------------------------\n\nTITLE: Initializing AutoMapper Module in NestJS\nDESCRIPTION: Examples showing how to initialize AutoMapper in the NestJS AppModule with single or multiple mapping strategies.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutomapperModule } from '@automapper/nestjs';\nimport { classes } from '@automapper/classes';\n\n// single strategy\n@Module({\n    imports: [\n        AutomapperModule.forRoot({\n            strategyInitializer: classes(),\n        }),\n    ],\n})\nexport class AppModule {}\n\n// multiple strategies\n@Module({\n    imports: [\n        AutomapperModule.forRoot(\n            [\n                {\n                    name: 'classes',\n                    strategyInitializer: classes(),\n                },\n                {\n                    name: 'pojos',\n                    strategyInitializer: pojos(),\n                },\n            ],\n            {\n                globalErrorHandler,\n                globalNamingConventions,\n            }\n        ),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using MapInterceptor in NestJS Controller\nDESCRIPTION: Shows how to use the MapInterceptor to automatically map the return value of a controller method to a DTO.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/nestjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseInterceptors } from '@nestjs/common';\nimport { MapInterceptor } from '@automapper/nestjs';\n\nexport class UserController {\n    @Get('me')\n    @UseInterceptors(MapInterceptor(User, UserDto))\n    me() {\n        // userService.getMe() returns a User here and does not have mapping logic in it.\n        return this.userService.getMe();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AutoMapper Instance\nDESCRIPTION: Shows how to create and configure the main mapper instance using classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMapper } from '@automapper/core';\nimport { classes } from '@automapper/classes';\n\nexport const mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoMapper POJOS Strategy\nDESCRIPTION: Example of setting up and using the POJOS strategy with AutoMapper, including interface definitions, metadata creation, and mapping configuration. Shows how to map between User and UserDto interfaces with custom property mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pojos, PojosMetadataMap } from '@automapper/pojos';\nimport { createMapper, createMap, forMember, mapFrom } from '@automapper/core';\n\nconst mapper = createMapper({\n    ...,\n    strategyInitializer: pojos()\n});\n\ninterface User {\n    firstName: string;\n    lastName: string;\n}\n\ninterface UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n}\n\nPojosMetadataMap.create<User>('SomeTokenForUser', {\n    firstName: String,\n    lastName: String\n});\n\nPojosMetadataMap.create<UserDto>('SomeTokenForUserDto', {\n  firstName: String,\n  lastName: String,\n  fullName: String\n});\n\ncreateMap<User, UserDto>(\n    mapper,\n    'SomeTokenForUser',\n    'SomeTokenForUserDto',\n    forMember(\n        d => d.fullName,\n        mapFrom(s => s.firstName + ' ' + s.lastName)\n    )\n);\nmapper.map<User, UserDto>(\n    {firstName: 'Auto', lastName: 'Mapper'},\n    'SomeTokenForUser',\n    'SomeTokenForUserDto'\n);\n// { firstName: 'Auto', lastName: 'Mapper', fullName: 'Auto Mapper' }\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Models with MapWith in TypeScript\nDESCRIPTION: Demonstrates how to use mapWith() to handle nested model mapping between User/UserDto and Profile/ProfileDto. The function takes three parameters: withDestination (NestedDestination model), withSource (NestedSource model), and withSourceValue (ValueSelector for selecting the nested source property).\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-with.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.profile,\n        mapWith(ProfileDto, Profile, (source) => source.profile)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Unidirectional Mappings in TypeScript\nDESCRIPTION: Demonstrates how to create unidirectional mappings between Source and Destination models using the createMap function. Each mapping is unique within a Mapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(mapper, Source, Destination); // Mapping<Source, Destination>\ncreateMap(mapper, Destination, Source); // Mapping<Destination, Source>\n```\n\n----------------------------------------\n\nTITLE: Creating a Map with TypeConverters in AutoMapper\nDESCRIPTION: Demonstrates how to use typeConverter() in createMap() to define type conversions for String to Number, Date, and Boolean.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Source,\n    Destination,\n    typeConverter(String, Date, (str) => new Date(str)),\n    typeConverter(String, Number, (str) => parseInt(str, 10)),\n    typeConverter(String, Boolean, (str) => Boolean(str))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating AutoMapper Instance\nDESCRIPTION: Initialize and export a singleton mapper instance with classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMapper } from '@automapper/core';\nimport { classes } from '@automapper/classes';\n\n// Create and export the mapper\nexport const mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Decoratorless Mapping with AutoMap in TypeScript\nDESCRIPTION: Demonstrates how to use autoMap() function to map properties between entity and DTO classes without decorators. Shows mapping of identical properties, type conversions, and computed properties. Includes handling of constructor-based entities and manual property transformations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/auto-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    autoMap,\n    createMap,\n    forMember,\n    mapFrom,\n    Mapper,\n} from '@automapper/core';\n\nexport class DecoratorlessUserEntity {\n    constructor(\n        public readonly firstName: string,\n        public readonly lastName: string,\n        public readonly birthday: Date\n    ) {}\n}\n\nexport class DecoratorlessUserDto {\n    firstName!: string;\n    lastName!: string;\n    birthday!: string;\n    fullName!: string;\n}\n\nexport function decoratorlessUserProfile(mapper: Mapper) {\n    createMap(\n        mapper,\n        DecoratorlessUserEntity,\n        DecoratorlessUserDto,\n        // Use `autoMap()` on properties that can be trivially mapped.\n        autoMap('firstName'),\n        autoMap('lastName'),\n\n        // Use more elaborate mapping configurations when necessary:\n\n        // 'birthday' exists on both `Source` and `Destination`, but with\n        // different types.\n        forMember(\n          (d) => d.birthday,\n            mapFrom((s) => s.birthday.toDateString())\n        ),\n\n        // 'fullName' doesn't exist on `Source` and must be mapped manually.\n        forMember(\n            (d) => d.fullName,\n            mapFrom((s) => `${s.firstName} ${s.lastName}`)\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Object Mapping with AutoMap Type Parameters in TypeScript\nDESCRIPTION: Illustrates how nested models are automatically mapped using @AutoMap() decorator with type parameters. Shows mapping between complex object structures with arrays and nested objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Address {\n    @AutoMap()\n    street!: string;\n}\n\nclass Bio {\n    @AutoMap()\n    text!: string;\n    @AutoMap(() => [Address])\n    addresses: Address[] = [];\n}\n\nclass User {\n    @AutoMap(() => Bio)\n    bio!: Bio;\n}\n\nclass AddressDto {\n    @AutoMap()\n    street!: string;\n}\n\nclass BioDto {\n    @AutoMap()\n    text!: string;\n    @AutoMap(() => [AddressDto])\n    addresses: AddressDto[] = [];\n}\n\nclass UserDto {\n    @AutoMap(() => BioDto)\n    bio!: BioDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mapper Instance with Classes Strategy in TypeScript\nDESCRIPTION: This snippet shows how to create and export a mapper instance using the classes strategy for AutoMapper. The mapper instance will be used for all mapping operations in the application.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMapper } from '@automapper/core';\nimport { classes } from '@automapper/classes';\n\n// Create and export the mapper\nexport const mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Decoratorless Mapping with AutoMap in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use autoMap() function along with other mapping configurations for decoratorless entities and DTOs. It shows the creation of a mapping profile between DecoratorlessUserEntity and DecoratorlessUserDto, utilizing autoMap() for trivial mappings and more elaborate configurations for complex mappings.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/auto-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    autoMap,\n    createMap,\n    forMember,\n    mapFrom,\n    Mapper,\n} from '@automapper/core';\nexport class DecoratorlessUserEntity {\n    constructor(\n        public readonly firstName: string,\n        public readonly lastName: string,\n        public readonly birthday: Date\n    ) {}\n}\nexport class DecoratorlessUserDto {\n    firstName!: string;\n    lastName!: string;\n    birthday!: string;\n    fullName!: string;\n}\nexport function decoratorlessUserProfile(mapper: Mapper) {\n    createMap(\n        mapper,\n        DecoratorlessUserEntity,\n        DecoratorlessUserDto,\n        // Use `autoMap()` on properties that can be trivially mapped.\n        autoMap('firstName'),\n        autoMap('lastName'),\n        // Use more elaborate mapping configurations when necessary:\n        // 'birthday' exists on both `Source` and `Destination`, but with\n        // different types.\n        forMember(\n            (d) => d.birthday,\n            mapFrom((s) => s.birthday.toDateString())\n        ),\n        // 'fullName' doesn't exist on `Source` and must be mapped manually.\n        forMember(\n            (d) => d.fullName,\n            mapFrom((s) => `${s.firstName} ${s.lastName}`)\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Naming Conventions in AutoMapper (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set naming conventions at different levels in AutoMapper: mapper level (global), mapping level (specific mapping), and profile level (all mappings in a profile). It uses the CamelCaseNamingConvention as an example.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/naming-convention.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper level conventions (global for all Mappings)\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\n// Mapping level conventions (applied for one specific Mapping)\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    namingConventions(new CamelCaseNamingConvention())\n);\n\n// Profile level conventions (applied for ALL Mappings inside a Profile)\naddProfile(\n    mapper,\n    userProfile,\n    namingConventions(new CamelCaseNamingConvention())\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Dependencies with AutoMap in TypeScript\nDESCRIPTION: Example showing circular dependency between models and how it's handled with different depth settings in AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/classes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass A {\n    b: B;\n}\n\nclass B {\n    a: A;\n}\n\n// depth 1\nA {\n    b: B {\n        a: A {\n            b: undefined\n        }\n    }\n}\n\n// depth 2\nA {\n    b: B {\n        a: A {\n            b: B {\n                a: undefined\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Mapping with AfterMap in TypeScript\nDESCRIPTION: Demonstrates using afterMap() for asynchronous operations in combination with mapAsync(). This example fetches a fullName property asynchronously after the initial mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/after-map.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    //                  👇 We are fetching the \"fullName\" manually\n    //                  👇          👇 so we need to ignore it\n    forMember((d) => d.fullName, ignore()),\n    afterMap(async (source, destination) => {\n        const fullName = await fetchFullName(source);\n        Object.assign(destination, { fullName });\n    })\n);\n\n//                          👇 mapAsync is needed if we use the above \"trick\" with afterMap\nconst dto = await mapper.mapAsync(user, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Using AutoMapper with TypeScript Classes\nDESCRIPTION: Example demonstrating how to use AutoMapper with TypeScript classes, including class decoration, mapper creation, and mapping configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { classes, AutoMap } from '@automapper/classes';\nimport { createMapper, createMap, forMember, mapFrom } from '@automapper/core';\n\nconst mapper = createMapper({\n  ...,\n  strategyInitializer: classes()\n});\n\nclass User {\n    @AutoMap()\n    firstName: string;\n    @AutoMap()\n    lastName: string;\n\n    constructor(firstName: string, lastName: string) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n\nclass UserDto {\n  @AutoMap()\n  firstName: string;\n  @AutoMap()\n  lastName: string;\n  @AutoMap()\n  fullName: string;\n}\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        d => d.fullName,\n        mapFrom(s => s.firstName + ' ' + s.lastName)\n    )\n);\nmapper.map(new User('Auto', 'Mapper'), User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Testing the Mapping Configuration with Sample Data in TypeScript\nDESCRIPTION: This snippet shows a test method in a UserService class that creates a sample User instance with nested Bio and Job objects, then maps it to a UserDto using the configured mapper to verify the mapping works correctly.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n    testMapping() {\n        const user = new User();\n        user.firstName = 'Chau';\n        user.lastName = 'Tran';\n        user.username = 'ctran';\n        user.password = '123456';\n        user.bio = new Bio();\n        user.bio.avatarUrl = 'google.com';\n        user.bio.birthday = new Date();\n        user.bio.job = new Job();\n        user.bio.job.title = 'Developer';\n        user.bio.job.salary = 99999;\n\n        const dto = mapper.map(user, User, UserDto);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Mapping with AutoMapper in TypeScript\nDESCRIPTION: Demonstrates how to use the condition() function to conditionally map a property based on a predicate function. If the condition is true, the property is mapped; otherwise, it remains undefined.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/condition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.petName,\n        condition((source) => source.hasPet)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core and Strategies via npm\nDESCRIPTION: Command-line instructions for installing AutoMapper core module and strategies using npm. It includes options for both classes and POJOs.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes reflect-metadata # for classes\nnpm i @automapper/core @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @automapper/pojos with TypeScript Interfaces\nDESCRIPTION: Example demonstrating how to create metadata for interfaces, initialize the mapper, define mapping configurations, and perform mapping operations using the pojos strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n    firstName: string;\n    lastName: string;\n}\n\ninterface UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n}\n\nexport function createUserMetadata() {\n    PojosMetadataMap.create<User>('User', {\n        firstName: String,\n        lastName: String,\n    });\n\n    PojosMetadataMap.create<UserDto>('UserDto', {\n        firstName: String,\n        lastName: String,\n        fullName: String,\n    });\n}\n\ncreateUserMetadata();\n\nconst mapper = createMapper({ strategyInitializer: pojos() });\n\ncreateMap<User, UserDto>(\n    mapper,\n    'User', // this needs to match what we passed in PojosMetadataMap.create()\n    'UserDto', // this needs to match what we passed in PojosMetadataMap.create()\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n\nconst dto = mapper.map<User, UserDto>(\n    { firstName: 'Chau', lastName: 'Tran' },\n    'User', // this needs to match what we passed in PojosMetadataMap.create()\n    'UserDto' // this needs to match what we passed in PojosMetadataMap.create()\n); // { firstName: 'Chau', lastName: 'Tran', fullName: 'Chau Tran'\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Mapping Configuration in TypeScript with AutoMapper\nDESCRIPTION: Initial approach to create mappings between Bio and User entities and their respective DTOs using AutoMapper. Includes type conversion for Date to String and creating a derived property for fullName.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    namingConventions(new CamelCaseNamingConvention())\n);\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Using MapperOmitType in AutoMapper\nDESCRIPTION: Demonstrates how to use MapperOmitType to create a new class that excludes specific properties from an original class. The example shows creating an OmitFooBar class that omits 'foo' and 'bar' properties from the Foo class.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/mapped-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n    @AutoMap()\n    bar!: number;\n    @AutoMap()\n    baz!: boolean;\n}\n\nclass OmitFooBar extends MapperOmitType(Foo, ['foo', 'bar']) {}\n\ncreateMap(mapper, Foo, OmitFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst omittedFooBar = mapper.map(foo, Foo, OmitFooBar);\nconsole.log(omittedFooBar);\n/**\n * OmitFooBar { baz: true }\n * foo and bar have been omitted\n */\n```\n\n----------------------------------------\n\nTITLE: Conditional Mapping with Default Value in AutoMapper\nDESCRIPTION: Shows how to use condition() with a default value parameter. When the condition evaluates to false, the default value is used instead of undefined for the destination property.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/condition.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.petName,\n        condition((source) => source.hasPet, 'default pet name')\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a MappingProfile for Bio in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a MappingProfile function for Bio entity, which encapsulates the mapping configuration for Bio to BioDto.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst bioProfile: MappingProfile = (mapper) => {\n    createMap(\n        mapper,\n        Bio,\n        BioDto,\n        typeConverter(Date, String, (date) => date.toDateString()),\n        namingConventions(new CamelCaseNamingConvention())\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mapping with forMember() and preCondition() in TypeScript\nDESCRIPTION: This snippet demonstrates how to use forMember() to customize property mapping and preCondition() to add a conditional check before executing the mapping function. It maps a User object to a UserDto, setting the fullName property based on a condition and a custom resolver.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        preCondition((source) => source.age > 10, 'default full name'),\n        mapFrom(fullNameResolver)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a MappingProfile for Bio Entity in TypeScript\nDESCRIPTION: Demonstrates how to create a MappingProfile function that encapsulates mapping configuration for Bio entity. This approach helps organize related mappings into a single profile.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst bioProfile: MappingProfile = (mapper) => {\n    createMap(\n        mapper,\n        Bio,\n        BioDto,\n        typeConverter(Date, String, (date) => date.toDateString()),\n        namingConventions(new CamelCaseNamingConvention())\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AfterMap on Mapping in TypeScript\nDESCRIPTION: Demonstrates how to set up a MapCallback using afterMap() in the createMap() function. This allows for post-mapping operations on the source and destination objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/after-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    afterMap((source, destination) => {})\n);\n```\n\n----------------------------------------\n\nTITLE: Testing AutoMapper Configuration\nDESCRIPTION: Shows a practical example of using the configured mapper to transform a User entity into a UserDto.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n    testMapping() {\n        const user = new User();\n        user.firstName = 'Chau';\n        user.lastName = 'Tran';\n        user.username = 'ctran';\n        user.password = '123456';\n        user.bio = new Bio();\n        user.bio.avatarUrl = 'google.com';\n        user.bio.birthday = new Date();\n        user.bio.job = new Job();\n        user.bio.job.title = 'Developer';\n        user.bio.job.salary = 99999;\n\n        const dto = mapper.map(user, User, UserDto);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NullSubstitution in AutoMapper TypeScript\nDESCRIPTION: Demonstrates how to configure nullSubstitution() in AutoMapper to provide a default value when a source property is null. The example shows mapping from a User object to UserDto where a null fullName is substituted with a raw value. The function uses strict equality (===) for null checking, meaning undefined values won't trigger the substitution.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/null-substitution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        nullSubstitution('raw value')\n    )\n);\n\nconst user = { fullName: null };\nmapper.map(user, User, UserDto); // UserDto { fullName: 'raw value' }\n```\n\n----------------------------------------\n\nTITLE: Setting Naming Conventions in AutoMapper (TypeScript)\nDESCRIPTION: Examples of how to configure naming conventions in AutoMapper at different levels: globally at mapper level, for a specific mapping, or at the profile level to apply to all mappings in that profile.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/naming-convention.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper level conventions (global for all Mappings)\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\n// Mapping level conventions (applied for one specific Mapping)\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    namingConventions(new CamelCaseNamingConvention())\n);\n\n// Profile level conventions (applied for ALL Mappings inside a Profile)\naddProfile(\n    mapper,\n    userProfile,\n    namingConventions(new CamelCaseNamingConvention())\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Source Entity Models with AutoMap Decorators in TypeScript\nDESCRIPTION: This snippet shows the definition of source entity models (User, Bio, Job) with @AutoMap() decorators that mark properties for mapping. It demonstrates how to specify property types and nested relationships between models.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    username: string;\n\n    password: string; // <- we purposely left this one out because we don't want to map \"password\"\n\n    @AutoMap(() => Bio)\n    bio: Bio;\n}\n\nexport class Bio {\n    @AutoMap(() => Job)\n    job: Job;\n\n    @AutoMap()\n    birthday: Date;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n\nexport class Job {\n    @AutoMap()\n    title: string;\n\n    @AutoMap()\n    salary: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing MappingConfiguration across Profile in TypeScript\nDESCRIPTION: Improved approach to share common mapping configurations across all mappings in a profile. This eliminates repetition by passing configurations to addProfile() rather than individual createMap() calls.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bioProfile: MappingProfile = (mapper) => {\n    createMap(mapper, Bio, BioDto);\n    createMap(mapper, Bio, BioInformationDto);\n    createMap(mapper, Bio, MinimalBioDto);\n};\n\naddProfile(\n    mapper,\n    bioProfile,\n    namingConventions(new CamelCaseNamingConvention()),\n    extend(Base, BaseDto)\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Destination Construction with constructUsing() in AutoMapper (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the constructUsing() method to customize the construction of a destination object in AutoMapper. It allows you to define a custom constructor function that receives the source object and destination identifier as parameters.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/construct-using.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto, // 👈 --the destination modifier--👇\n    constructUsing((sourceObject, destinationIdentifier) => {\n        // sourceObject is the data when run: mapper.map(sourceObject...);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an AutomapperProfile in NestJS\nDESCRIPTION: Demonstrates how to create and use an AutomapperProfile class in NestJS, including injecting the Mapper and defining mapping configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/nestjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutomapperProfile, InjectMapper } from '@automapper/nestjs';\nimport type { Mapper } from '@automapper/core';\nimport { Injectable } from '@nestjs/common';\nimport { createMap } from '@automapper/core';\n\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n    constructor(@InjectMapper() mapper: Mapper) {\n        super(mapper);\n    }\n\n    override get profile() {\n        return (mapper) => {\n            createMap(mapper, User, UserDto);\n        };\n    }\n}\n\n@Module({\n    providers: [UserProfile],\n})\nexport class UserModule {}\n```\n\n----------------------------------------\n\nTITLE: Using Resolver with mapFrom() in AutoMapper\nDESCRIPTION: Demonstrates creating a custom tax calculation resolver and using it with mapFrom() to compute the tax property during mapping. This approach allows for more complex logic and better code organization.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-from.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const taxResolver: Resolver<Item, ItemDto, number> = {\n    resolve(item): number {\n        return item.type === 'A' ? item.price * 0.5 : item.price * 0.9;\n    },\n};\n\ncreateMap(\n    mapper,\n    Item,\n    ItemDto,\n    forMember((d) => d.tax, mapFrom(taxResolver))\n);\n```\n\n----------------------------------------\n\nTITLE: Conditional Mapping with Default Value in AutoMapper\nDESCRIPTION: Shows how to use the condition() function with a default value. If the condition is false, the default value is used instead of leaving the property undefined.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/condition.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.petName,\n        condition((source) => source.hasPet, 'default pet name')\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample User Object with Nested Properties in TypeScript\nDESCRIPTION: Instantiates a User object with nested Bio and Job objects, demonstrating the structure of a complex object before mapping. This example shows how to populate all properties required for testing the mapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapping.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.firstName = 'Chau';\nuser.lastName = 'Tran';\nuser.username = 'ctran';\nuser.password = '123456';\nuser.bio = new Bio();\nuser.bio.avatarUrl = 'google.com';\nuser.bio.birthday = new Date();\nuser.bio.job = new Job();\nuser.bio.job.title = 'Developer';\nuser.bio.job.salary = 99999;\n```\n\n----------------------------------------\n\nTITLE: Applying Naming Conventions in Mapper Creation\nDESCRIPTION: These examples demonstrate how to use the namingConventions() function when creating maps. It shows both single convention and separate source/destination convention usage.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/naming-conventions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    namingConventions(new CamelCaseNamingConvention())\n);\n\ncreateMap(\n    mapper,\n    Product,\n    ProductDto,\n    namingConventions({\n        source: new SnakeCaseNamingConvention(),\n        destination: new CamelCaseNamingConvention(),\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing preMap in mikro strategy\nDESCRIPTION: Example of creating a mapper with a custom preMap function using the mikro strategy initializer. The preMap function is responsible for serializing MikroORM entities, collections, and references.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/mikro.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: mikro({ preMap: customPreMap }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoMapper Configuration with Auto Flattening\nDESCRIPTION: Demonstrates how to configure AutoMapper with naming conventions and create mappings between complex and simple models. Includes example usage with sample data.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/auto-flattening.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = new Product(5, 'Fried Chicken');\nconst customer = new Customer('Chau Tran');\nconst order = new Order(customer);\norder.addItem(product, 10);\n\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\ncreateMap(mapper, Order, OrderDto);\n\nconst dto = mapper.map(order, Order, OrderDto);\n```\n\n----------------------------------------\n\nTITLE: Mapping with Value Resolver in AutoMapper (TypeScript)\nDESCRIPTION: Shows how to use mapWithArguments() with a Value Resolver to map a property. The example demonstrates mapping an Item to ItemDto, calculating a tax based on a percentage provided in extra arguments.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-with-arguments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const taxResolver: Resolver<Item, { percentage: number }, number> = {\n    resolve(source, { percentage }) {\n        return source.price * percentage;\n    },\n};\n\ncreateMap(\n    mapper,\n    Item,\n    ItemDto,\n    forMember((destination) => destination.tax, mapWithArguments(taxResolver))\n);\n\nmapper.map(item, Item, ItemDto, { extraArgs: () => ({ percentage: 0.5 }) });\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Classes in TypeScript\nDESCRIPTION: Defines the User, Bio, and Job classes representing the database model for user information.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/preface.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    firstName: string;\n    lastName: string;\n    username: string;\n    password: string;\n    bio: Bio;\n}\n\nexport class Bio {\n    job: Job;\n    birthday: Date;\n    avatarUrl: string;\n}\n\nexport class Job {\n    title: string;\n    salary: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex TypeConverter Examples in AutoMapper\nDESCRIPTION: Demonstrates various types of TypeConverters including single type to single type, single type to array, array to single type, and array to array conversions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    TypeConverter,\n    TypeConverterDto,\n    typeConverter(String, Number, (str) => parseInt(str) + 1),\n    typeConverter(String, Boolean, (str) => Boolean(str)),\n    typeConverter(String, Date, (str) => new Date(str)),\n    typeConverter([String], [Number], (manyStrs) =>\n        manyStrs.map((str) => parseInt(str))\n    ),\n    typeConverter(DateString, String, (dateStr) => dateStr.toDateString()),\n    typeConverter(TimestampString, String, (timestampStr) =>\n        timestampStr.toISOString()\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Destination Construction in AutoMapper (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the constructUsing() method to specify a custom constructor for the destination object in AutoMapper. It allows for customization of the destination object creation before the mapping process begins.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/construct-using.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto, // 👈 --the destination modifier--👇\n    constructUsing((sourceObject, destinationIdentifier) => {\n        // sourceObject is the data when run: mapper.map(sourceObject...);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Mappings with AutoMapper TypeScript\nDESCRIPTION: Demonstrates two ways to extend mapping configurations: using an existing Mapping object or by directly specifying the base model and DTO pairs. The extended properties can be overridden using forMember() after the extend() call.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/extend.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseMapping = createMap(mapper, Base, BaseDto);\ncreateMap(\n    // 👆 the Mapping we are creating\n    mapper,\n    User,\n    UserDto, // 👇 the Mapping we are extending\n    extend(baseMapping)\n);\n\n// or\ncreateMap(mapper, User, UserDto, extend(Base, BaseDto));\n```\n\n----------------------------------------\n\nTITLE: Updating NestJS Automapper Integration\nDESCRIPTION: Shows changes in NestJS module configuration, including updates to AutomapperModule.forRoot, AutomapperProfile, MapPipe, and MapInterceptor implementations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nAutomapperModule.forRoot({\n    strategyInitializer: classes(),\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\nAutomapperModule.forRootAsync({\n    inject: [EntityManager],\n    useFactory: (em: EntityManager) => ({\n        strategyInitializer: classes({\n            destinationConstructor: (sourceObject, destinationIdentifier) =>\n                em.create(destinationIdentifier, {}),\n        }),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Enums in TypeScript with AutoMapper\nDESCRIPTION: Demonstrates how to use AutoMap decorator with string and numeric enums in TypeScript. It shows the correct type specification for different enum types.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/classes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\n\nenum Role {\n    Admin = 'admin',\n    User = 'user',\n}\n\nclass User {\n    @AutoMap(() => String) // string enum\n    role!: Role;\n    @AutoMap(() => Number) // numeric enum\n    color!: Color;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Self Mapping in AutoMapper TypeScript\nDESCRIPTION: This snippet demonstrates how to create mapping configurations for self-mapping scenarios. It includes a mapping for Person to itself and a mapping between Org and OrgDto.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/self-mapping.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(mapper, Person, forMember(d => d.nickname, mapFrom(s => s.nickname ?? s.name));\ncreateMap(mapper, Org, OrgDto);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Property Mapping in TypeScript Mapper\nDESCRIPTION: Demonstrates how to use ignore() to skip mapping a specific property (fullName) while marking it as configured. This prevents the property from being flagged by assertUnmappedProperties() and sets it to undefined in the resulting mapped object.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/ignore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember((d) => d.fullName, ignore())\n);\n```\n\n----------------------------------------\n\nTITLE: Using Self Mapping in AutoMapper TypeScript\nDESCRIPTION: This snippet shows how to use the configured mappings to map Org to OrgDto and how to map an array of Person objects using the self-mapping configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/self-mapping.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dto = mapper.map(org, Org, OrgDto);\nconst mappedPeople = mapper.mapArray(org.people, Person);\n```\n\n----------------------------------------\n\nTITLE: Basic AutoMapper POJOS Usage Example\nDESCRIPTION: Demonstrates basic usage of @automapper/pojos including interface definitions, metadata creation, and mapping configuration with a simple User to UserDto example.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/pojos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n    firstName: string;\n    lastName: string;\n}\n\ninterface UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n}\n\nexport function createUserMetadata() {\n    PojosMetadataMap.create<User>('User', {\n        firstName: String,\n        lastName: String,\n    });\n\n    PojosMetadataMap.create<UserDto>('UserDto', {\n        firstName: String,\n        lastName: String,\n        fullName: String,\n    });\n}\n\ncreateUserMetadata();\n\nconst mapper = createMapper({ strategyInitializer: pojos() });\n\ncreateMap<User, UserDto>(\n    mapper,\n    'User',\n    'UserDto',\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n\nconst dto = mapper.map<User, UserDto>(\n    { firstName: 'Chau', lastName: 'Tran' },\n    'User',\n    'UserDto'\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Type Converter Implementation\nDESCRIPTION: Example of creating type converters for string to number, date, and boolean conversions using createMap\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Source,\n    Destination,\n    typeConverter(String, Date, (str) => new Date(str)),\n    typeConverter(String, Number, (str) => parseInt(str, 10)),\n    typeConverter(String, Boolean, (str) => Boolean(str))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Value Mapping with fromValue in TypeScript\nDESCRIPTION: Demonstrates how to use fromValue() to directly map a static value to a destination property in a mapping configuration. The example shows mapping 'John Doe' to a fullName property without applying any nested mapping logic.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/from-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember((destination) => destination.fullName, fromValue('John Doe'))\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing AutomapperModule with Synchronous Configuration in NestJS\nDESCRIPTION: Static method to initialize AutomapperModule with synchronous configuration. It accepts mapper options and optional global options, returning a DynamicModule for NestJS.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperModule.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic forRoot(mapperOptions: CreateMapperOptions): DynamicModule;\nstatic forRoot(mapperOptions: (CreateMapperOptions & { name: string })[], globalOptions?: AutomapperGlobalOptions): DynamicModule;\n```\n\n----------------------------------------\n\nTITLE: Setting Naming Conventions for Auto Flattening in TypeScript\nDESCRIPTION: This snippet demonstrates how to use namingConventions() with CamelCaseNamingConvention to enable auto-flattening of nested properties. It allows properties like job.title to be automatically mapped to jobTitle in the destination model.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    // highlight-next-line\n    namingConventions(new CamelCaseNamingConvention())\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for POJOs in TypeScript\nDESCRIPTION: Implements the static create method to add metadata for a given identifier and model. It handles both string and symbol identifiers and normalizes the metadata before storage.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/classes/PojosMetadataMap.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic create<TModel extends Dictionary<TModel>>(\n  identifier: string | symbol,\n  metadata?: { [key in keyof TModel]?: PojoMetadata | [PojoMetadata] | Object }\n): void {\n  // Implementation details omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Mappings with AutoMapper in TypeScript\nDESCRIPTION: Demonstrates how to use the extend() function to extend MappingProperties from one mapping to another in AutoMapper. It shows two ways to extend mappings: using an existing Mapping object or specifying the source and destination models directly.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/extend.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseMapping = createMap(mapper, Base, BaseDto);\ncreateMap(\n    // 👆 the Mapping we are creating\n    mapper,\n    User,\n    UserDto, // 👇 the Mapping we are extending\n    extend(baseMapping)\n);\n\n// or\ncreateMap(mapper, User, UserDto, extend(Base, BaseDto));\n```\n\n----------------------------------------\n\nTITLE: Using mapDefer for Conditional Mapping in TypeScript\nDESCRIPTION: This example demonstrates how to use mapDefer() to conditionally select a mapping strategy based on a property of the source object. The function allows runtime decisions about which profile mapping to apply depending on the profile type.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-defer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.profile,\n        mapDefer((source) => {\n            if (source.profile.type === 'A')\n                return mapWith(\n                    ProfileDto,\n                    ProfileA,\n                    (source) => source.profile\n                );\n            return mapWith(ProfileDto, Profile, (source) => source.profile);\n        })\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Map vs Mutate in AutoMapper (TypeScript)\nDESCRIPTION: This snippet demonstrates the difference between using map() and mutate() APIs. The map() method returns a new object, while mutate() modifies an existing object and returns void.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/mutation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// map()\nconst dto = mapper.map(user, User, UserDto);\n\n// mutate()\nlet dto = {};\nmapper.mutate(user, dto, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using Converter with convertUsing in TypeScript\nDESCRIPTION: This example demonstrates how to implement a Converter for converting Date to string, and how to use it with convertUsing() in a mapping configuration. It includes a dateToStringConverter implementation and its usage in createMap() function.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/convert-using.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dateToStringConverter: Converter<Date, string> = {\n    convert(source) {\n        // maybe handle validation, additional parsing, or format here\n        return source.toDateString();\n    },\n};\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.birthday,\n        convertUsing(dateToStringConverter, (source) => source.birthday)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Using ValueSelector with mapFrom() in AutoMapper\nDESCRIPTION: Demonstrates how to use mapFrom() with a ValueSelector function to concatenate firstName and lastName from the source object into a fullName property on the destination object.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-from.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (d) => d.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Complex TypeScript Models with AutoMapper Decorators\nDESCRIPTION: Demonstrates the setup of complex nested models using TypeScript classes and AutoMapper decorators. Includes Product, Customer, OrderItem, and Order classes with relationships and computed properties.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/auto-flattening.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Product {\n    @AutoMap()\n    price!: number;\n    @AutoMap()\n    name!: string;\n\n    constructor(price: number, name: string) {\n        this.price = price;\n        this.name = name;\n    }\n}\n\nclass Customer {\n    @AutoMap()\n    name!: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass OrderItem {\n    @AutoMap(() => Product)\n    product!: Product;\n    @AutoMap()\n    quantity!: number;\n\n    constructor(product: Product, quantity: number) {\n        this.product = product;\n        this.quantity = quantity;\n    }\n\n    get total() {\n        return this.product.price * this.quantity;\n    }\n}\n\nclass Order {\n    @AutoMap(() => [OrderItem])\n    items: OrderItem[] = [];\n    @AutoMap(() => Customer)\n    customer!: Customer;\n\n    constructor(customer: Customer) {\n        this.customer = customer;\n    }\n\n    @AutoMap()\n    get total(): number {\n        return this.items.reduce((sum, item) => sum + item.total, 0);\n    }\n\n    addItem(product: Product, quantity: number) {\n        this.items.push(new OrderItem(product, quantity));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Map and Mutate APIs in AutoMapper (TypeScript)\nDESCRIPTION: This snippet shows the available mapping and mutation methods in AutoMapper. It includes both synchronous and asynchronous versions for regular and array mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/mutation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmapper.map();\nmapper.mapAsync();\nmapper.mapArray();\nmapper.mapArrayAsync();\n\nmapper.mutate();\nmapper.mutateAsync();\nmapper.mutateArray();\nmapper.mutateArrayAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Automapper with Custom Sequelize Strategy\nDESCRIPTION: Example of initializing Automapper with custom Sequelize strategy options, including custom preMap and destinationConstructor functions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/sequelize.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: sequelize({\n        preMap: customPreMap,\n        destinationConstructor: customDestinationConstructor,\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User DTO Classes with Manual Mapping in TypeScript\nDESCRIPTION: Defines UserDto and BioDto classes with static methods for manual mapping from User and Bio entities. This demonstrates the coupling and repetitive mapping logic that AutoMapper aims to solve.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/preface.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n    username: string;\n    bio: BioDto;\n\n    static fromUser(user: User) {\n        const dto = new UserDto();\n        dto.firstName = user.firstName;\n        dto.lastName = user.lastName;\n        dto.fullName = user.firstName + ' ' + user.lastName;\n        dto.username = user.username;\n        dto.bio = BioDto.fromBio(user.bio);\n\n        return dto;\n    }\n}\n\nexport class BioDto {\n    jobTitle: string;\n    jobSalary: number;\n    birthday: string;\n    avatarUrl: string;\n\n    static fromBio(bio: Bio) {\n        const dto = new BioDto();\n        dto.jobTitle = bio.job.title;\n        dto.jobSalary = bio.job.salary;\n        dto.birthday = bio.birthday.toDateString();\n        dto.avatarUrl = bio.avatarUrl;\n\n        return dto;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Naming Conventions for Source and Destination (TypeScript)\nDESCRIPTION: Example showing how to set different naming conventions for source and destination models using an object configuration with source and destination properties.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/naming-convention.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: {\n        source: new PascalCaseNamingConvention(),\n        destination: new CamelCaseNamingConvention(),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Standard and Mutation API Methods in AutoMapper (TypeScript)\nDESCRIPTION: This snippet lists the standard mapping methods alongside their mutable counterparts in AutoMapper. It showcases the different method names for both synchronous and asynchronous operations on single objects and arrays.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/mutation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmapper.map();\nmapper.mapAsync();\nmapper.mapArray();\nmapper.mapArrayAsync();\n\nmapper.mutate();\nmapper.mutateAsync();\nmapper.mutateArray();\nmapper.mutateArrayAsync();\n```\n\n----------------------------------------\n\nTITLE: Using namingConventions() in AutoMapper with TypeScript\nDESCRIPTION: These examples demonstrate how to use the namingConventions() function in createMap() calls. The first example uses a single CamelCaseNamingConvention for both source and destination, while the second specifies different conventions for source and destination.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/naming-conventions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    namingConventions(new CamelCaseNamingConvention())\n);\n\ncreateMap(\n    mapper,\n    Product,\n    ProductDto,\n    namingConventions({\n        source: new SnakeCaseNamingConvention(),\n        destination: new CamelCaseNamingConvention(),\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping with Value Selector in TypeScript AutoMapper\nDESCRIPTION: Demonstrates how to use mapWithArguments() with a Value Selector to map a property using additional arguments. The example shows mapping a fullName property using a custom function with extra arguments.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-with-arguments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapWithArguments((source, { someArgument }) => {\n            return getFullName(source, someArgument);\n        })\n    )\n);\n\nmapper.map(user, User, UserDto, { extraArgs: () => ({ someArgument: 'foo' }) });\n```\n\n----------------------------------------\n\nTITLE: Nested Model Metadata Configuration\nDESCRIPTION: Shows how to configure metadata for nested models, where child model metadata must be created before parent model metadata.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/pojos.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Bio {\n    birthday: Date;\n}\n\ninterface User {\n    firstName: string;\n    lastName: string;\n    bio: Bio;\n}\n\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: 'Bio',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Models for Self Mapping in TypeScript\nDESCRIPTION: This snippet defines the Person, Org, and OrgDto classes using AutoMap decorators. The Person class is used in both Org and OrgDto, demonstrating the self-mapping scenario.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/self-mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Person {\n  @AutoMap()\n  name!: string; // always required\n  @AutoMap()\n  nickname?: string; // can be optional\n}\n\nexport class Org {\n  @AutoMap(() => [Person])\n  people!: Person[];\n}\n\nexport class OrgDto {\n  @AutoMap(() => [Person])\n  people!: Person[];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Class Structure Example in TypeScript\nDESCRIPTION: Example showing basic class structure before applying the transformer plugin.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    bio!: string;\n    age!: number;\n}\nclass User {\n    firstName!: string;\n    lastName!: string;\n    profile!: Profile;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Standard Mapping and Mutation in AutoMapper (TypeScript)\nDESCRIPTION: This snippet demonstrates the difference between using the standard map() method and the mutate() method in AutoMapper. The map() method returns a new object, while mutate() modifies an existing object and returns void.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/mutation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// map()\nconst dto = mapper.map(user, User, UserDto);\n\n// mutate()\nlet dto = {};\nmapper.mutate(user, dto, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Async Mapping with AfterMap in TypeScript\nDESCRIPTION: This snippet illustrates how to use afterMap() for asynchronous operations in combination with mapAsync(). It demonstrates ignoring a property during mapping and then fetching its value asynchronously in the afterMap callback.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/after-map.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember((d) => d.fullName, ignore()),\n    afterMap(async (source, destination) => {\n        const fullName = await fetchFullName(source);\n        Object.assign(destination, { fullName });\n    })\n);\n\nconst dto = await mapper.mapAsync(user, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Configuration in AutoMapper\nDESCRIPTION: Shows how to configure type conversion from Date to String using typeConverter() function. This applies the conversion globally for all Date to String mappings.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString())\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing UndefinedSubstitution in TypeScript AutoMapper\nDESCRIPTION: Demonstrates how to use undefinedSubstitution() to provide a default value when mapping undefined properties. The function performs a strict equality check against undefined and sets a raw value as a substitute. Note that null values are not substituted.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/undefined-substitution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        undefinedSubstitution('raw value')\n    )\n);\n\nmapper.map({}, User, UserDto); // UserDto { fullName: 'raw value' }\n```\n\n----------------------------------------\n\nTITLE: Mapping with Value Resolver in TypeScript AutoMapper\nDESCRIPTION: Shows how to use mapWithArguments() with a Value Resolver to calculate tax based on a percentage argument. The resolver implements a specific interface for handling the transformation.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-with-arguments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const taxResolver: Resolver<Item, { percentage: number }, number> = {\n    resolve(source, { percentage }) {\n        return source.price * percentage;\n    },\n};\n\ncreateMap(\n    mapper,\n    Item,\n    ItemDto,\n    forMember((destination) => destination.tax, mapWithArguments(taxResolver))\n);\n\nmapper.map(item, Item, ItemDto, { extraArgs: () => ({ percentage: 0.5 }) });\n```\n\n----------------------------------------\n\nTITLE: Complex Type Converter Implementation\nDESCRIPTION: Advanced example showing various type converter combinations including array conversions\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    TypeConverter,\n    TypeConverterDto,\n    typeConverter(String, Number, (str) => parseInt(str) + 1),\n    typeConverter(String, Boolean, (str) => Boolean(str)),\n    typeConverter(String, Date, (str) => new Date(str)),\n    typeConverter([String], [Number], (manyStrs) =>\n        manyStrs.map((str) => parseInt(str))\n    ),\n    typeConverter(DateString, String, (dateStr) => dateStr.toDateString()),\n    typeConverter(TimestampString, String, (timestampStr) =>\n        timestampStr.toISOString()\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing MikroORM Mapping Strategy\nDESCRIPTION: Function to initialize a mapping strategy for MikroORM entities. Takes optional configuration options and returns a mapping strategy initializer that works with constructor types.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/mikro/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmikro(options?: MappingStrategyInitializerOptions): MappingStrategyInitializer<Constructor>\n```\n\n----------------------------------------\n\nTITLE: Mapping Array Types with AutoMapper in TypeScript\nDESCRIPTION: Shows how to use the AutoMap decorator with array types in TypeScript, explicitly specifying the type for proper mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/classes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n    @AutoMap(() => [Date])\n    logins!: Date[];\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - MappingStrategyInitializerOptions\nDESCRIPTION: Interface defining options for initializing mapping strategies. Includes optional properties for applying metadata, setting destination constructor, and methods for pre/post mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/MappingStrategyInitializerOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MappingStrategyInitializerOptions {\n    applyMetadata?: ApplyMetadata;\n    destinationConstructor?: DestinationConstructor<any, any>;\n    preMap?<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        source: TSource,\n        mapping: Mapping<TSource, TDestination>\n    ): TSource;\n    postMap?<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        source: TSource,\n        destination: TDestination,\n        mapping: Mapping<TSource, TDestination>\n    ): TDestination;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Existing Mapping with forSelf() in AutoMapper\nDESCRIPTION: This example demonstrates how to use an existing mapping with forSelf() instead of just passing the nested model class.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapping = createMap(mapper, Item, CartItemDto);\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forSelf(mapping, (source) => source.item)\n);\n```\n\n----------------------------------------\n\nTITLE: Updating @automapper/classes Initializer and AutoMap Usage (TypeScript)\nDESCRIPTION: Shows changes to the @automapper/classes initializer and AutoMap decorator usage, including renaming typeFn to type, setting default depth to 1, and requiring explicit array metadata specification.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initializer changes\n// before\nconst mapper = createMapper({\n    pluginInitializer: classes, // no ()\n});\n\n// after\nconst mapper = createMapper({\n    strategyInitializer: classes(), // invoking\n});\n\n// AutoMap changes\n// before\n@AutoMap({ typeFn: () => User })\n\n// after\n@AutoMap({ type: () => User })\n// or\n@AutoMap(() => User)\n\n// Array metadata specification\n// before\nexport class User {\n    @AutoMap({ typeFn: () => Address })\n    addresses: Address[];\n}\n\n// after\nexport class User {\n    @AutoMap(() => [Address])\n    addresses: Address[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample User Object in TypeScript\nDESCRIPTION: This code snippet demonstrates the creation of a sample User object with nested Bio and Job properties for testing the mapping functionality.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapping.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.firstName = 'Chau';\nuser.lastName = 'Tran';\nuser.username = 'ctran';\nuser.password = '123456';\nuser.bio = new Bio();\nuser.bio.avatarUrl = 'google.com';\nuser.bio.birthday = new Date();\nuser.bio.job = new Job();\nuser.bio.job.title = 'Developer';\nuser.bio.job.salary = 99999;\n```\n\n----------------------------------------\n\nTITLE: Mapping with Value Selector in AutoMapper (TypeScript)\nDESCRIPTION: Demonstrates how to use mapWithArguments() with a Value Selector to map a property using extra arguments. The example shows mapping a User to UserDto, with a custom fullName property.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-with-arguments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapWithArguments((source, { someArgument }) => {\n            return getFullName(source, someArgument);\n        })\n    )\n);\n\nmapper.map(user, User, UserDto, { extraArgs: () => ({ someArgument: 'foo' }) });\n```\n\n----------------------------------------\n\nTITLE: Handling Array Types in POJO Mapping\nDESCRIPTION: Example demonstrating how to define metadata for arrays of both primitive types and custom model types.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Address {\n    street: string;\n}\n\ninterface Bio {\n    birthday: Date;\n    addresses: Address[];\n}\n\ninterface User {\n    firstName: string;\n    lastName: string;\n    bio: Bio;\n    logins: Date[];\n}\n\nPojosMetadataMap.create<Address>('Address', {\n    street: String,\n});\n\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n    addresses: ['Address'], // <-- array of the identifier\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: 'Bio',\n    logins: [Date], // <-- array of the Date constructor\n});\n```\n\n----------------------------------------\n\nTITLE: Adding MappingProfiles to Mapper in TypeScript\nDESCRIPTION: Shows how to add MappingProfile instances to the Mapper. The order of adding profiles matters as some profiles may depend on mappings defined in other profiles.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddProfile(mapper, bioProfile);\naddProfile(mapper, userProfile);\n```\n\n----------------------------------------\n\nTITLE: AutomapperAsyncOptions Interface Definition in TypeScript\nDESCRIPTION: Interface defining asynchronous configuration options for Automapper module. Includes optional properties for imports, inject, useClass, useExisting, and useFactory patterns following NestJS conventions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/interfaces/AutomapperAsyncOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AutomapperAsyncOptions extends Pick<ModuleMetadata, 'imports'> {\n  imports?: (DynamicModule | Type<any> | Promise<DynamicModule> | ForwardReference<any>)[];\n  inject?: any[];\n  useExisting?: Type<AutomapperOptionsFactory>;\n  useClass?: Type<AutomapperOptionsFactory>;\n  useFactory?(...args: any[]): CreateMapperOptions | Promise<CreateMapperOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Models in TypeScript for AutoMapper\nDESCRIPTION: This snippet defines a set of complex models including Product, Customer, OrderItem, and Order classes. These classes use the @AutoMap() decorator to specify mapping configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/auto-flattening.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Product {\n    @AutoMap()\n    price!: number;\n    @AutoMap()\n    name!: string;\n\n    constructor(price: number, name: string) {\n        this.price = price;\n        this.name = name;\n    }\n}\n\nclass Customer {\n    @AutoMap()\n    name!: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass OrderItem {\n    @AutoMap(() => Product)\n    product!: Product;\n    @AutoMap()\n    quantity!: number;\n\n    constructor(product: Product, quantity: number) {\n        this.product = product;\n        this.quantity = quantity;\n    }\n\n    get total() {\n        return this.product.price * this.quantity;\n    }\n}\n\nclass Order {\n    @AutoMap(() => [OrderItem])\n    items: OrderItem[] = [];\n    @AutoMap(() => Customer)\n    customer!: Customer;\n\n    constructor(customer: Customer) {\n        this.customer = customer;\n    }\n\n    @AutoMap() // 👇 need to specify the type for getter\n    get total(): number {\n        return this.items.reduce((sum, item) => sum + item.total, 0);\n    }\n\n    addItem(product: Product, quantity: number) {\n        this.items.push(new OrderItem(product, quantity));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/classes with npm\nDESCRIPTION: Command to install the core automapper package and classes strategy using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/classes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes\n```\n\n----------------------------------------\n\nTITLE: CreateMap Method Changes in TypeScript\nDESCRIPTION: Illustrates the transition from method-based to functional approach for creating maps, including syntax and API changes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nmapper.createMap(User, UserDto);\n\n// after\ncreateMap(mapper, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Circular Dependency Handling in AutoMapper\nDESCRIPTION: Illustrates the concept of circular dependencies in model mapping and how AutoMapper handles them with different depth levels.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/classes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass A {\n    b: B;\n}\n\nclass B {\n    a: A;\n}\n\n// depth 1\nA {\n    b: B {\n        a: A {\n            b: undefined\n        }\n    }\n}\n\n// depth 2\nA {\n    b: B {\n        a: A {\n            b: B {\n                a: undefined\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Different Naming Conventions for Source and Destination (TypeScript)\nDESCRIPTION: This snippet shows how to set different naming conventions for source and destination models in AutoMapper. It uses PascalCaseNamingConvention for the source and CamelCaseNamingConvention for the destination.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/naming-convention.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    namingConventions: {\n        source: new PascalCaseNamingConvention(),\n        destination: new CamelCaseNamingConvention(),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Properties Using forSelf() in AutoMapper\nDESCRIPTION: This snippet shows how to use forSelf() to map nested properties from CartItem to CartItemDto without explicit mapping for each property.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forSelf(Item, (source) => source.item)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Destination Classes with AutoMap Decorator in TypeScript\nDESCRIPTION: Example of Source and Destination classes with mismatched property types, using the @AutoMap() decorator for mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Source {\n    @AutoMap()\n    value1!: string;\n    @AutoMap()\n    value2!: string;\n    @AutoMap()\n    value3!: string;\n}\n\nexport class Destination {\n    @AutoMap()\n    value1!: number;\n    @AutoMap()\n    value2!: Date;\n    @AutoMap()\n    value3!: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Destination DTO Models with AutoMap Decorators in TypeScript\nDESCRIPTION: This snippet shows the definition of destination DTO models (UserDto, BioDto) with @AutoMap() decorators. It demonstrates the flattened structure where nested properties like job.title become direct properties like jobTitle.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDto {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    fullName: string;\n\n    @AutoMap()\n    username: string;\n\n    @AutoMap(() => BioDto)\n    bio: BioDto;\n}\n\nexport class BioDto {\n    @AutoMap()\n    jobTitle: string;\n\n    @AutoMap()\n    jobSalary: number;\n\n    @AutoMap()\n    birthday: string;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Nested Models\nDESCRIPTION: Example demonstrating how to create metadata for nested models where the nested model's metadata needs to be created before the parent model.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Bio {\n    birthday: Date;\n}\n\ninterface User {\n    firstName: string;\n    lastName: string;\n    bio: Bio;\n}\n\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: 'Bio', // <-- use what we passed in PojosMetadataMap.create() for Bio\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Configuration API Changes in TypeScript\nDESCRIPTION: Shows the transformation from fluent chain API to functional approach for mapping configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nmapper\n    .createMap(User, UserDto)\n    .forMember(/* ... */)\n    .forSelf(/* ... */)\n    .beforeMap(/* ... */)\n    .afterMap(/* ... */);\n\n// after\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(/* ... */),\n    forSelf(/* ... */),\n    beforeMap(/* ... */),\n    afterMap(/* ... */)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper with Custom Sequelize Strategy\nDESCRIPTION: TypeScript code showing how to initialize AutoMapper with custom preMap and destinationConstructor options for the Sequelize strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/sequelize.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: sequelize({\n        preMap: customPreMap,\n        destinationConstructor: customDestinationConstructor,\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Transformer Plugin in TypeScript\nDESCRIPTION: Example of how to configure Webpack to use the transformer plugin with ts-loader, including options for specifying model file name suffixes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst automapperTransformerPlugin = require('@automapper/classes/transformer-plugin');\nconst pluginOptions = {\n    modelFileNameSuffix: [\n        /*...*/\n    ],\n};\nmodule.exports = {\n    // snip\n    module: {\n        rules: [\n            // snip\n            {\n                test: /\\.tsx?$/,\n                loader: 'ts-loader',\n                options: {\n                    getCustomTransformers: (program) => ({\n                        before: [\n                            automapperTransformerPlugin(program, pluginOptions)\n                                .before,\n                        ],\n                    }),\n                },\n            },\n            // snip\n        ],\n    },\n    // snip\n};\n```\n\n----------------------------------------\n\nTITLE: Applying ignore() Function in TypeScript Mapping Configuration\nDESCRIPTION: This snippet demonstrates how to use the ignore() function within a createMap() call to skip mapping for a specific property. The example shows ignoring the 'fullName' property when mapping from User to UserDto.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/ignore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember((d) => d.fullName, ignore())\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CreateMapperOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the CreateMapperOptions interface with three properties: errorHandler (optional), namingConventions (optional), and strategyInitializer (required). It specifies types and locations for each property.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/CreateMapperOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CreateMapperOptions {\n    errorHandler?: ErrorHandler;\n    namingConventions?: NamingConventionInput;\n    strategyInitializer: MappingStrategyInitializer<MetadataIdentifier<any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: NestJS CLI configuration (JSON)\nDESCRIPTION: Example showing how to configure NestJS CLI to use the transformer plugin with default and custom options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection\": \"@nestjs/schematics\",\n    \"sourceRoot\": \"src\",\n    \"compilerOptions\": {\n        \"plugins\": [\"@automapper/classes/transformer-plugin\"]\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection\": \"@nestjs/schematics\",\n    \"sourceRoot\": \"src\",\n    \"compilerOptions\": {\n        \"plugins\": [\n            {\n                \"name\": \"@automapper/classes/transformer-plugin\",\n                \"options\": {\n                    \"modelFileNameSuffix\": [\".dto.ts\", \".vm.ts\"]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Metadata for TypeScript Interfaces\nDESCRIPTION: Example showing how to create metadata for a User interface using PojosMetadataMap.create() with proper type annotation for intellisense support.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating convertUsing in Automapper (TypeScript)\nDESCRIPTION: Shows the changes to the convertUsing function, which now requires a Selector as the second argument. This change encourages better Converter usages and improves reusability.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst dateToStringConverter: Converter<User, string> = {\n    convert(source: User): string {\n        return source.birthday.toDateString();\n    },\n};\nmapper.createMap(User, UserDto).forMember(\n    (d) => d.birthday,\n    // 2nd argument is optional.\n    // If not passed in, convertUsing will call the converter#convert with the whole sourceObject\n    convertUsing(dateToStringConverter)\n);\n\n// after\nconst dateToStringConverter: Converter<Date, string> = {\n    convert(source: Date): string {\n        return source.toDateString();\n    },\n};\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (d) => d.birthday,\n        // 2nd argument is required.\n        convertUsing(dateToStringConverter, (src) => src.birthday)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Shared MappingConfiguration in addProfile for Bio in TypeScript\nDESCRIPTION: This snippet shows how to use shared MappingConfiguration when adding a profile, eliminating the need to repeat the same configuration for each createMap call within the profile.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bioProfile: MappingProfile = (mapper) => {\n    createMap(mapper, Bio, BioDto);\n    createMap(mapper, Bio, BioInformationDto);\n    createMap(mapper, Bio, MinimalBioDto);\n};\n\naddProfile(\n    mapper,\n    bioProfile,\n    namingConventions(new CamelCaseNamingConvention()),\n    extend(Base, BaseDto)\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Classes Strategy Initialization\nDESCRIPTION: Shows changes in initialization syntax for @automapper/classes strategy, including AutoMap decorator updates and array metadata specification.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst mapper = createMapper({\n    pluginInitializer: classes,\n});\n\n// after\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Transformer Plugin Output in TypeScript\nDESCRIPTION: Demonstrates how the transformer plugin modifies the original classes by adding a static method __AUTOMAPPER_METADATA_FACTORY__ to each class, which returns the metadata for AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    bio!: string;\n    age!: number;\n\n    static __AUTOMAPPER_METADATA_FACTORY__() {\n        return [\n            ['bio', { type: () => String, depth: 1 }],\n            ['age', { type: () => Number, depth: 1 }],\n        ];\n    }\n}\nclass User {\n    firstName!: string;\n    lastName!: string;\n    profile!: Profile;\n\n    static __AUTOMAPPER_METADATA_FACTORY__() {\n        return [\n            ['firstName', { type: () => String, depth: 1 }],\n            ['lastName', { type: () => String, depth: 1 }],\n            ['profile', { type: () => Profile, depth: 1 }],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateMapperOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CreateMapperOptions, which is used as a parameter for the createMapper() function. It includes strategyInitializer, optional errorHandler, and optional namingConventions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/core/src/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport interface CreateMapperOptions {\n    strategyInitializer: MappingStrategyInitializer<MetadataIdentifier>;\n    errorHandler?: ErrorHandler;\n    namingConventions?: NamingConventionInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NestedMappingPairClassId Enumeration in TypeScript\nDESCRIPTION: This enumeration defines two members: 'destination' with a value of 0, and 'source' with a value of 1. It is used to distinguish between source and destination classes in nested mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/NestedMappingPairClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum NestedMappingPairClassId {\n  destination = 0,\n  source = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Object Mapping with AutoMapper in TypeScript\nDESCRIPTION: Maps a User object to a UserDto using AutoMapper's map() function. This code shows the basic syntax for performing a mapping operation between source and destination types.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapping.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dto = mapper.map(user, User, UserDto);\n```\n\n----------------------------------------\n\nTITLE: Defining Simple DTO Model in TypeScript for AutoMapper\nDESCRIPTION: This snippet defines a simple OrderDto class that represents a flattened version of the complex Order model. It uses @AutoMap() decorators to specify mapping configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/auto-flattening.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderDto {\n    @AutoMap()\n    customerName!: string;\n    @AutoMap()\n    total!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Mappings in a MappingProfile for Bio in TypeScript\nDESCRIPTION: This snippet demonstrates how to define multiple mappings within a single MappingProfile for Bio entity, including shared MappingConfiguration for naming conventions and extension.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bioProfile: MappingProfile = (mapper) => {\n    const camelCaseNamingConvention = new CamelCaseNamingConvention();\n    createMap(\n        mapper,\n        Bio,\n        BioDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n\n    createMap(\n        mapper,\n        Bio,\n        BioInformationDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n\n    createMap(\n        mapper,\n        Bio,\n        MinimalBioDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating POJOS Strategy Implementation\nDESCRIPTION: Demonstrates changes in POJOS strategy initialization and metadata mapping creation, including array type specification requirements.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// before\ncreateMetadataMap('SimpleUser', {\n    firstName: String,\n    lastName: String,\n});\ncreateMetadataMap('SimpleUserDto', 'SimpleUser', {\n    fullName: String,\n});\n\n// after\nPojosMetadataMap.create<SimpleUser>('SimpleUser', {\n    firstName: String,\n    lastName: String,\n});\nPojosMetadataMap.create<SimpleUserDto>('SimpleUserDto', {\n    firstName: String,\n    lastName: String,\n    fullName: String,\n});\n```\n\n----------------------------------------\n\nTITLE: Using MapPipe in NestJS Controller\nDESCRIPTION: Demonstrates how to use MapPipe to transform request body or query parameters before they reach the route handler.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/nestjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MapPipe } from '@automapper/nestjs';\n\n@Post('/from-body')\npostFromBody(@Body(MapPipe(User, UserDto)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n\n@Get('/from-query')\ngetFromQuery(@Query(MapPipe(User, UserDto)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Value Resolver Interface Definition in TypeScript AutoMapper\nDESCRIPTION: Defines the interface for a Resolver that can be used with mapFrom(). The interface includes a resolve method that accepts source and destination objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-from.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Resolver<TheSource, TheDestination, TheReturnType> {\n    resolve(source: TheSource, destination?: TheDestination): TheReturnType;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options\nDESCRIPTION: Required TypeScript configuration options for decorator metadata and experimental decorators support.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"skipLibCheck\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapperIntersectionType in TypeScript\nDESCRIPTION: Demonstrates how to use MapperIntersectionType to create a new class that combines properties from two parent classes. The example shows mapping between intersected class and its parent classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/mapped-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n}\n\nclass Bar {\n    @AutoMap()\n    bar!: number;\n}\n\nclass IntersectFooBar extends MapperIntersectionType(Foo, Bar) {}\n\ncreateMap(mapper, IntersectFooBar, Foo);\ncreateMap(mapper, IntersectFooBar, Bar);\n\nconst intersect = new IntersectFooBar();\nintersect.foo = 'foo';\nintersect.bar = 123;\n\nconst foo = mapper.map(intersect, IntersectFooBar, Foo);\nconsole.log(foo);\n\nconst bar = mapper.map(intersect, IntersectFooBar, Bar);\nconsole.log(bar);\n```\n\n----------------------------------------\n\nTITLE: Complex Types and Array Metadata Configuration\nDESCRIPTION: Demonstrates metadata configuration for complex types including arrays, nested objects, and multiple levels of nesting.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/pojos.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Address {\n    street: string;\n}\n\ninterface Bio {\n    birthday: Date;\n    addresses: Address[];\n}\n\ninterface User {\n    firstName: string;\n    lastName: string;\n    bio: Bio;\n    logins: Date[];\n}\n\nPojosMetadataMap.create<Address>('Address', {\n    street: String,\n});\n\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n    addresses: ['Address'],\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: 'Bio',\n    logins: [Date],\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Properties Using forSelf() in AutoMapper\nDESCRIPTION: This snippet shows how to use forSelf() to map nested properties from CartItem to CartItemDto in AutoMapper, simplifying the mapping process.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forSelf(Item, (source) => source.item)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapping Strategy Options\nDESCRIPTION: Shows the interface and implementation for customizing mapping strategy initialization with metadata handling, constructor customization, and pre/post mapping hooks.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MappingStrategyInitializerOptions {\n    applyMetadata?: ApplyMetadata;\n    destinationConstructor?: DestinationConstructor;\n    preMap?<TSource extends Dictionary<TSource>>(source: TSource): TSource;\n    postMap?<\n        TSource extends Dictionary<TSource>,\n        TDestination extends Dictionary<TDestination>\n    >(\n        source: TSource,\n        destination: TDestination\n    ): TDestination;\n}\n\nconst mapper = createMapper({\n    strategyInitializer: classes({\n        applyMetadata,\n        destinationConstructor,\n        preMap,\n        postMap,\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AfterMap on Mapping in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a MapCallback using afterMap() within the createMap() function. The callback function is executed after the mapping operation is completed.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/after-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    afterMap((source, destination) => {})\n);\n```\n\n----------------------------------------\n\nTITLE: Updating NestJS Integration for Automapper (TypeScript)\nDESCRIPTION: Shows changes to NestJS integration, including updates to AutomapperModule.forRoot, AutomapperModule.forRootAsync, AutomapperProfile, MapPipe, and MapInterceptor usage.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// AutomapperModule.forRoot changes\nAutomapperModule.forRoot({\n    strategyInitializer: classes(),\n    namingConventions: new CamelCaseNamingConvention(),\n});\nAutomapperModule.forRoot(\n    [\n        {\n            name: 'classes',\n            strategyInitializer: classes(),\n        },\n        {\n            name: 'pojos',\n            strategyInitializer: pojos(),\n        },\n    ],\n    {\n        globalErrorHandler,\n        globalNamingConventions: new CamelCaseNamingConvention(),\n    }\n);\n\n// AutomapperModule.forRootAsync changes\nAutomapperModule.forRootAsync({\n    inject: [EntityManager],\n    useFactory: (em: EntityManager) => ({\n        strategyInitializer: classes({\n            destinationConstructor: (sourceObject, destinationIdentifier) =>\n                em.create(destinationIdentifier, {}),\n        }),\n    }),\n});\n\n// AutomapperProfile changes\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n    constructor(@InjectMapper() mapper: Mapper) {\n        super(mapper);\n    }\n\n    override get profile(): MappingProfile {\n        return (mapper) => {\n            createMap(mapper /*...*/);\n        };\n    }\n\n    protected get mappingConfigurations(): MappingConfiguration[] {\n        return [extend(BaseEntity, BaseDto)];\n    }\n}\n\n// MapPipe changes\nexport class SomeController {\n    @Post()\n    someMethod(@Body(MapPipe(User, UserDto)) dto: UserDto) {\n        /*..*/\n    }\n}\n\n// MapInterceptor changes\nexport class SomeController {\n    @Get()\n    @UseInterceptors(MapInterceptor(User, UserDto))\n    get() {\n        /*...*/\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping with fromValue in TypeScript AutoMapper\nDESCRIPTION: Demonstrates how to use the fromValue() function to map a literal value to a destination property. When using fromValue(), the specified value is directly assigned to the destination property without any transformation or nested mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/from-value.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember((destination) => destination.fullName, fromValue('John Doe'))\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Metadata to Symbol in TypeScript\nDESCRIPTION: Private static method to convert metadata to a symbol representation, used internally for metadata storage and retrieval.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/classes/PojosMetadataMap.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate static toSymbol(metadata: PojoMetadata | [PojoMetadata]): PojoMetadata | [PojoMetadata] {\n  // Implementation details omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for AutoMapper with Classes Strategy\nDESCRIPTION: Required TypeScript configuration options when using AutoMapper with the classes strategy. This includes enabling decorator metadata and experimental decorators support.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true, // for @automapper/classes\n    \"emitDecoratorMetadata\": true // for @automapper/classes\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mapping with forSelf() in AutoMapper\nDESCRIPTION: This snippet demonstrates how to use a pre-defined mapping with forSelf() in AutoMapper, providing an alternative way to map nested properties.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapping = createMap(mapper, Item, CartItemDto);\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forSelf(mapping, (source) => source.item)\n);\n```\n\n----------------------------------------\n\nTITLE: Mutating Single Objects in TypeScript\nDESCRIPTION: Defines a function to mutate a single source object into a destination object. It supports generic types, custom identifiers, and optional mapping options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **mutate**<`TSource`>(`sourceObject`, `destinationObject`, `identifier`, `options?`): `void`\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `TSource` | extends [`Dictionary`](../modules.md#dictionary)<`TSource`> |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `sourceObject` | `TSource` |\n| `destinationObject` | `TSource` |\n| `identifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TSource`> |\n| `options?` | [`MapOptions`](MapOptions.md)<`TSource`, `TSource`, `Record`<`string`, `any`>> |\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Initializing AutomapperModule with a Single Mapper\nDESCRIPTION: Example of how to initialize the AutomapperModule with a single Mapper object in a NestJS application. This setup uses the 'classes' strategy initializer.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n    imports: [\n        AutomapperModule.forRoot({\n            strategyInitializer: classes(),\n        }),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Classes with Self-Mapping Properties\nDESCRIPTION: Demonstrates the structure of model classes where Person class is used directly in both source and destination models instead of having a separate DTO class. Uses AutoMap decorator for property mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/self-mapping.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Person {\n  @AutoMap()\n  name!: string; // always required\n  @AutoMap()\n  nickname?: string; // can be optional\n}\n\nexport class Org {\n  @AutoMap(() => [Person])\n  people!: Person[];\n}\n\nexport class OrgDto {\n  @AutoMap(() => [Person])\n  people!: Person[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CamelCaseNamingConvention Class Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the CamelCaseNamingConvention class, including the separator character and splitting expression used for converting property names.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/classes/CamelCaseNamingConvention.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CamelCaseNamingConvention implements NamingConvention {\n  separatorCharacter: string = '';\n  splittingExpression: RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Classes with transformer-generated metadata (TypeScript)\nDESCRIPTION: Demonstrates how the transformer plugin modifies the TypeScript AST to add static metadata methods to classes while keeping the original property definitions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// your code\nclass Profile {\n    bio: string;\n    age: number;\n}\nclass User {\n    firstName: string;\n    lastName: string;\n    profile: Profile;\n}\n\n// after \"before\" transformer runs through your code\n\nclass Profile {\n    bio: string;\n    age: number;\n\n    static __AUTOMAPPER_METADATA_FACTORY__() {\n        return [\n            ['bio', { type: () => String, depth: 1 }],\n            ['age', { type: () => Number, depth: 1 }],\n        ];\n    }\n}\nclass User {\n    firstName: string;\n    lastName: string;\n    profile: Profile;\n\n    static __AUTOMAPPER_METADATA_FACTORY__() {\n        return [\n            ['firstName', { type: () => String, depth: 1 }],\n            ['lastName', { type: () => String, depth: 1 }],\n            ['profile', { type: () => Profile, depth: 1 }],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @automapper/classes with TypeScript\nDESCRIPTION: Example of how to use @automapper/classes strategy with TypeScript, including class definitions, mapping configuration, and usage.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { classes, AutoMap } from '@automapper/classes';\nimport { createMapper, createMap, forMember, mapFrom } from '@automapper/core';\n\nconst mapper = createMapper({\n  ...,\n  strategyInitializer: classes()\n});\n\nclass User {\n    @AutoMap()\n    firstName: string;\n    @AutoMap()\n    lastName: string;\n\n    constructor(firstName: string, lastName: string) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}\n\nclass UserDto {\n  @AutoMap()\n  firstName: string;\n  @AutoMap()\n  lastName: string;\n  @AutoMap()\n  fullName: string;\n}\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        d => d.fullName,\n        mapFrom(s => s.firstName + ' ' + s.lastName)\n    )\n);\nmapper.map(new User('Auto', 'Mapper'), User, UserDto);\n// UserDto { firstName: 'Auto', lastName: 'Mapper', fullName: 'Auto Mapper' }\n```\n\n----------------------------------------\n\nTITLE: Providing AutomapperProfile in a NestJS Module\nDESCRIPTION: Example showing how to provide the UserProfile in a NestJS module for dependency injection.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n    providers: [UserProfile],\n})\nexport class UserModule {}\n```\n\n----------------------------------------\n\nTITLE: Mutating Arrays in TypeScript\nDESCRIPTION: Defines functions to mutate arrays of objects. It includes overloads for same-type and different-type mutations, supporting custom identifiers and mapping options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **mutateArray**<`TSource`, `TDestination`>(`sourceArray`, `destinationArray`, `sourceIdentifier`, `destinationIdentifier`, `options?`): `void`\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `TSource` | extends [`Dictionary`](../modules.md#dictionary)<`TSource`> |\n| `TDestination` | extends [`Dictionary`](../modules.md#dictionary)<`TDestination`> |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `sourceArray` | `TSource`[] |\n| `destinationArray` | `TDestination`[] |\n| `sourceIdentifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TSource`> |\n| `destinationIdentifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TDestination`> |\n| `options?` | [`MapOptions`](MapOptions.md)<`TSource`[], `TDestination`[], `Record`<`string`, `any`>> |\n\n#### Returns\n\n`void`\n```\n\n----------------------------------------\n\nTITLE: Defining AutoMapper Models in TypeScript\nDESCRIPTION: This snippet shows the definition of Item, CartItem, and CartItemDto classes with AutoMap decorators for use with AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Item {\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    @AutoMap()\n    stock: number;\n}\n\nclass CartItem {\n    @AutoMap(() => Item)\n    item: Item;\n    @AutoMap()\n    quantity: number;\n}\n\nclass CartItemDto {\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    @AutoMap()\n    quantity: number;\n\n    get total() {\n        return this.price * this.quantity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CreateMapper Configuration Changes in TypeScript\nDESCRIPTION: Shows the updated configuration for createMapper, removing the name requirement and changing pluginInitializer to strategyInitializer.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst mapper = createMapper({\n    name: 'arbitrary',\n    pluginInitializer: classes,\n    /* namingConventions and errorHandler stay the same */\n});\n\n// after\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    /* namingConventions and errorHandler stay the same */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MappingStrategyInitializerOptions in Automapper (TypeScript)\nDESCRIPTION: Demonstrates how to customize Strategy (previously Plugin) using MappingStrategyInitializerOptions, which allows configuring metadata application, destination constructor, pre-map, and post-map operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MappingStrategyInitializerOptions {\n    applyMetadata?: ApplyMetadata;\n    destinationConstructor?: DestinationConstructor;\n    preMap?<TSource extends Dictionary<TSource>>(source: TSource): TSource;\n    postMap?<\n        TSource extends Dictionary<TSource>,\n        TDestination extends Dictionary<TDestination>\n    >(\n        source: TSource,\n        destination: TDestination\n    ): TDestination;\n}\n\nconst mapper = createMapper({\n    strategyInitializer: classes({\n        applyMetadata, // customize how a Strategy applies the metadata to a model\n        destinationConstructor, // customize the default constructor of the Destination model\n        preMap, // customize what to do before a map happens\n        postMap, // customize what to do after a map happens\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using AutoMapperLogger in TypeScript\nDESCRIPTION: Shows how to use the AutoMapperLogger for logging in AutoMapper TypeScript. The logger adds an '[AutoMapper]' prefix to log messages.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/mapper.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('some log'); // some log\nAutoMapperLogger.log('some log'); // [AutoMapper]: some log\n```\n\n----------------------------------------\n\nTITLE: Handling Enum Types in POJO Mapping\nDESCRIPTION: Example showing how to handle enum types in interface metadata by explicitly specifying the enum's underlying type.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum Role {\n    Admin = 'admin',\n    User = 'user',\n}\n\ninterface User {\n    role: Role;\n}\n\nPojosMetadataMap.create<User>('User', {\n    role: String,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Dependencies in POJO Mapping\nDESCRIPTION: Example showing how to handle circular dependencies between interfaces by using a function to lazily resolve the type and specifying recursion depth.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n    addresses: ['Address'],\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: {\n        // pass in an object instead\n        type: () => 'Bio',\n        depth: 2, // default to 1\n    },\n    logins: [Date],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MappingConfigurations in AutomapperProfile\nDESCRIPTION: Example of using mappingConfigurations in an AutomapperProfile to share configuration across multiple createMap calls.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutomapperProfile, InjectMapper } from '@automapper/nestjs';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n    constructor(@InjectMapper() mapper: Mapper) {\n        super(mapper);\n    }\n\n    get profile(): MappingProfile {\n        return (mapper) => {\n            createMap(mapper, UserEntity, UserDto);\n            createMap(mapper, UserEntity, UserInformationDto);\n            createMap(mapper, UserEntity, AuthUserDto);\n        };\n    }\n\n    protected get mappingConfigurations(): MappingConfiguration[] {\n        // the 3 createMap() above will get this `extend()`\n        return [extend(BaseEntity, BaseDto)];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapPipe Function\nDESCRIPTION: Function that creates a NestJS pipe for transforming data between source and destination types using AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/modules.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MapPipe<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(from: ModelIdentifier<TSource>, to: ModelIdentifier<TDestination>, options?: { isArray?: boolean; mapperName?: string } & MapOptions<TSource, TDestination, Record<string, any>>): PipeTransform<any, any>\n```\n\n----------------------------------------\n\nTITLE: Repeated MappingConfiguration in Bio Profile\nDESCRIPTION: Example of a MappingProfile with repeated configuration patterns across multiple mappings. Each mapping uses the same naming convention and extends the same base classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bioProfile: MappingProfile = (mapper) => {\n    const camelCaseNamingConvention = new CamelCaseNamingConvention();\n    createMap(\n        mapper,\n        Bio,\n        BioDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n\n    createMap(\n        mapper,\n        Bio,\n        BioInformationDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n\n    createMap(\n        mapper,\n        Bio,\n        MinimalBioDto,\n        namingConventions(camelCaseNamingConvention),\n        extend(Base, BaseDto)\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding MappingProfiles to Mapper in TypeScript\nDESCRIPTION: This snippet shows how to add MappingProfiles to the Mapper object using the addProfile function. The order of adding profiles matters when there are dependencies between mappings.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naddProfile(mapper, bioProfile);\naddProfile(mapper, userProfile);\n```\n\n----------------------------------------\n\nTITLE: Configuring BeforeMap on map() Function in TypeScript\nDESCRIPTION: This code shows how to set up a MapCallback using beforeMap in the MapOptions when calling the map() function. This callback is executed before the mapping operation.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/before-map.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmapper.map(user, User, UserDto, {\n    beforeMap: (source, destination) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Using AutoMapper Logger in TypeScript\nDESCRIPTION: Demonstrates the default behavior of AutoMapper's logging system compared to console logging. The AutoMapper logger adds a prefix to all log messages.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/mapper.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('some log'); // some log\nAutoMapperLogger.log('some log'); // [AutoMapper]: some log\n```\n\n----------------------------------------\n\nTITLE: Implementing InjectMapper Decorator Function\nDESCRIPTION: Function that creates a dependency injection decorator for injecting mapper instances into NestJS components.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/modules.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction InjectMapper(name?: string): (target: object, key: string | symbol, index?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Creating an AutomapperProfile in NestJS\nDESCRIPTION: Implementation of a mapping profile by extending AutomapperProfile class. This injectable class maps between domain models and DTOs.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutomapperProfile, InjectMapper } from '@automapper/nestjs';\nimport type { Mapper } from '@automapper/core';\nimport { Injectable } from '@nestjs/common';\nimport { createMap } from '@automapper/core';\n\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n    constructor(@InjectMapper() mapper: Mapper) {\n        super(mapper);\n    }\n\n    override get profile() {\n        return (mapper) => {\n            createMap(mapper, User, UserDto);\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapPipe with Query Parameters in NestJS\nDESCRIPTION: Example of using MapPipe to transform query parameters before they reach the route handler.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MapPipe } from '@automapper/nestjs';\n\n@Get('/from-query')\ngetFromQuery(@Query(MapPipe(User, UserDto)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UndefinedSubstitution in AutoMapper with TypeScript\nDESCRIPTION: This snippet demonstrates how to use undefinedSubstitution() in createMap() to provide a default value for a property when it's undefined in the source object. It also shows the result of mapping an empty object with this configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/undefined-substitution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        undefinedSubstitution('raw value')\n    )\n);\n\nmapper.map({}, User, UserDto); // UserDto { fullName: 'raw value' }\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration\nDESCRIPTION: Example of configuring the transformer plugin with Webpack and ts-loader.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst automapperTransformerPlugin = require('@automapper/classes/transformer-plugin');\nconst pluginOptions = {\n    modelFileNameSuffix: [\n        /*...*/\n    ],\n};\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                loader: 'ts-loader',\n                options: {\n                    getCustomTransformers: (program) => ({\n                        before: [\n                            automapperTransformerPlugin(program, pluginOptions)\n                                .before,\n                        ],\n                    }),\n                },\n            },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring BeforeMap on Mapping in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a MapCallback using beforeMap() in the createMap() function. The callback is executed before the mapping operation.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/before-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    beforeMap((source, destination) => {})\n);\n```\n\n----------------------------------------\n\nTITLE: Updating @automapper/pojos Usage in Automapper (TypeScript)\nDESCRIPTION: Covers changes to @automapper/pojos, including initializer updates, replacement of createMetadataMap with PojosMetadataMap.create, and explicit array metadata specification requirements.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initializer changes\n// before\nconst mapper = createMapper({\n    pluginInitializer: pojos, // no ()\n});\n\n// after\nconst mapper = createMapper({\n    strategyInitializer: pojos(), // invoking\n});\n\n// Metadata map creation\n// before\ncreateMetadataMap('SimpleUser', {\n    firstName: String,\n    lastName: String,\n});\ncreateMetadataMap('SimpleUserDto', 'SimpleUser', {\n    fullName: String,\n});\n\n// after\nPojosMetadataMap.create<SimpleUser>('SimpleUser', {\n    firstName: String,\n    lastName: String,\n});\nPojosMetadataMap.create<SimpleUserDto>('SimpleUserDto', {\n    firstName: String,\n    lastName: String,\n    fullName: String,\n});\n\n// Array metadata specification\n// before\ncreateMetadataMap<User>('User', {\n    addresses: 'Address',\n});\n\n// after\nPojosMetadataMap.create<User>('User', {\n    addresses: ['Address'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DestinationConstructor type in TypeScript\nDESCRIPTION: Type definition for the DestinationConstructor function used in customization of the classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DestinationConstructor<\n    TSource extends Dictionary<TSource> = any,\n    TDestination extends Dictionary<TDestination> = any\n> = (\n    sourceObject: TSource, // the sourceObject used to map to the Destination\n    destinationIdentifier: MetadataIdentifier<TDestination> // the Destination model\n) => TDestination;\n\n// example\nmapper.map(user, User, UserDto);\n// sourceObject will be \"user\"\n// destinationIdentifier will be \"UserDto\"\n// This allows you to provide a default constructor that can be based on the Source object data\n```\n\n----------------------------------------\n\nTITLE: Implementing Fake Async Methods in TypeScript AutoMapper\nDESCRIPTION: Shows simplified implementations of mapAsync and mutateAsync methods that use setTimeout to create artificial asynchronous behavior by leveraging the JavaScript Event Loop. These methods wrap synchronous operations in Promises that resolve in the next tick.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/fake-async.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//                  👇 simplified for brevity\nfunction mapAsync(...args) {\n    const result = map(...args);\n    return new Promise((res) => {\n        setTimeout(res, 0, result);\n    });\n}\n\n//                      👇 simplified for brevity\nfunction mutateAsync(...args) {\n    return new Promise((res) => {\n        mutate(...args);\n        setTimeout(res);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapperIntersectionType in AutoMapper\nDESCRIPTION: Demonstrates how to use MapperIntersectionType to create a new class that combines properties from two parent classes. The example shows creating an IntersectFooBar class that includes properties from both Foo and Bar classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/mapped-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n}\n\nclass Bar {\n    @AutoMap()\n    bar!: number;\n}\n\nclass IntersectFooBar extends MapperIntersectionType(Foo, Bar) {}\n\ncreateMap(mapper, IntersectFooBar, Foo);\ncreateMap(mapper, IntersectFooBar, Bar);\n\nconst intersect = new IntersectFooBar();\nintersect.foo = 'foo';\nintersect.bar = 123;\n\nconst foo = mapper.map(intersect, IntersectFooBar, Foo);\nconsole.log(foo);\n/**\n * Foo { foo: 'foo' }\n */\n\nconst bar = mapper.map(intersect, IntersectFooBar, Bar);\nconsole.log(bar);\n/**\n * Bar { bar: 123 }\n */\n```\n\n----------------------------------------\n\nTITLE: Executing Self-Mapping Operations\nDESCRIPTION: Demonstrates how to perform the actual mapping operations using the configured mappings, including mapping full objects and arrays of objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/self-mapping.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dto = mapper.map(org, Org, OrgDto);\nconst mappedPeople = mapper.mapArray(org.people, Person);\n```\n\n----------------------------------------\n\nTITLE: Defining Classes Without AutoMap Decorators in TypeScript\nDESCRIPTION: Example of two classes, Profile and User, without AutoMap decorators. This demonstrates the verbose nature of manual decoration that the plugin aims to solve.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    bio!: string;\n    age!: number;\n}\nclass User {\n    firstName!: string;\n    lastName!: string;\n    profile!: Profile;\n}\n```\n\n----------------------------------------\n\nTITLE: Transformer Plugin Output\nDESCRIPTION: Shows how the transformer plugin modifies the code by adding metadata factory methods.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    bio!: string;\n    age!: number;\n\n    static __AUTOMAPPER_METADATA_FACTORY__() {\n        return [\n            ['bio', { type: () => String, depth: 1 }],\n            ['age', { type: () => Number, depth: 1 }],\n        ];\n    }\n}\nclass User {\n    firstName!: string;\n    lastName!: string;\n    profile!: Profile;\n\n    static __AUTOMAPPER_METADATA_FACTORY__() {\n        return [\n            ['firstName', { type: () => String, depth: 1 }],\n            ['lastName', { type: () => String, depth: 1 }],\n            ['profile', { type: () => Profile, depth: 1 }],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AfterMap on map() Function in TypeScript\nDESCRIPTION: This example shows how to set up a MapCallback using the afterMap option when calling the map() function. This approach allows for a callback to be executed after the mapping operation for a specific map call.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/after-map.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmapper.map(user, User, UserDto, {\n    afterMap: (source, destination) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Mapper with Strategy in TypeScript\nDESCRIPTION: Demonstrates how to create a Mapper instance using the createMapper function and specifying a mapping strategy. This example uses the classes() strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/mapper.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with ORM Support via yarn\nDESCRIPTION: Command-line instructions for installing AutoMapper with support for Sequelize and MikroORM using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes reflect-metadata @automapper/mikro # for mikro-orm\nyarn add @automapper/core @automapper/classes reflect-metadata @automapper/sequelize # for sequelize\n```\n\n----------------------------------------\n\nTITLE: MappingStrategy Interface Definition in TypeScript\nDESCRIPTION: Defines the MappingStrategy interface with type parameter TIdentifier extending MetadataIdentifier. Contains properties for metadata handling, constructor references, and mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/MappingStrategy.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MappingStrategy<TIdentifier extends MetadataIdentifier> {\n  destinationConstructor: DestinationConstructor<any, any>;\n  mapper: Mapper;\n  applyMetadata: ApplyMetadataFn;\n  retrieveMetadata(...identifiers: TIdentifier[]): Map<TIdentifier, MetadataList>;\n  preMap<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n    source: TSource,\n    mapping: Mapping<TSource, TDestination>\n  ): TSource;\n  postMap<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n    source: TSource,\n    destination: TDestination,\n    mapping: Mapping<TSource, TDestination>\n  ): TDestination | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapperOmitType in TypeScript\nDESCRIPTION: Shows how to use MapperOmitType to create a new class that excludes specified properties from the original class. This example omits 'foo' and 'bar' properties from the Foo class.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/mapped-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n    @AutoMap()\n    bar!: number;\n    @AutoMap()\n    baz!: boolean;\n}\n\nclass OmitFooBar extends MapperOmitType(Foo, ['foo', 'bar']) {}\n\ncreateMap(mapper, Foo, OmitFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst omittedFooBar = mapper.map(foo, Foo, OmitFooBar);\nconsole.log(omittedFooBar);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fake Async Operations in TypeScript AutoMapper\nDESCRIPTION: Demonstrates how AutoMapper implements pseudo-asynchronous operations using setTimeout to manipulate the JavaScript Event Loop. The code shows simplified versions of mapAsync() and mutateAsync() methods that wrap synchronous operations in Promises.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/fake-async.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//                  👇 simplified for brevity\nfunction mapAsync(...args) {\n    const result = map(...args);\n    return new Promise((res) => {\n        setTimeout(res, 0, result);\n    });\n}\n\n//                      👇 simplified for brevity\nfunction mutateAsync(...args) {\n    return new Promise((res) => {\n        mutate(...args);\n        setTimeout(res);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata for POJOs in TypeScript\nDESCRIPTION: Implements the static retrieve method to fetch metadata for a given symbol identifier. It returns an array of key-metadata pairs with additional properties like depth and isArray.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/classes/PojosMetadataMap.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic retrieve(identifier: symbol): [string, { depth: number; isArray: boolean; isGetterOnly?: boolean; type: () => PojoMetadata }][] {\n  // Implementation details omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AutomapperModule with Asynchronous Configuration in NestJS\nDESCRIPTION: Static method to initialize AutomapperModule with asynchronous configuration. It accepts async mapper options and optional global options, returning a DynamicModule for NestJS.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperModule.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic forRootAsync(asyncMapperOptions: AutomapperAsyncOptions): DynamicModule;\nstatic forRootAsync(asyncMapperOptions: (AutomapperAsyncOptions & { name: string })[], globalOptions?: AutomapperGlobalOptions): DynamicModule;\n```\n\n----------------------------------------\n\nTITLE: Interface Properties in TypeScript\nDESCRIPTION: Defines the key properties of the Mapper interface including error handling, mappings storage, metadata maps, naming conventions, and configuration context.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Mapper {\n    [ERROR_HANDLER]: ErrorHandler;\n    [MAPPINGS]: Map<MetadataIdentifier<any>, Map<MetadataIdentifier<any>, Mapping<any, any>>>;\n    [METADATA_MAP]: Map<MetadataIdentifier<any>, Metadata[]>;\n    [METADATA_OBJECT_MAP]: Map<MetadataIdentifier<any>, [asSource?: Record<string, unknown>, asDestination?: Record<string, unknown>]>;\n    [NAMING_CONVENTIONS]: NamingConventionInput;\n    [STRATEGY]: MappingStrategy<MetadataIdentifier<any>>;\n    [RECURSIVE_DEPTH]: Map<MetadataIdentifier<any>, ArrayKeyedMap>;\n    [RECURSIVE_COUNT]: Map<MetadataIdentifier<any>, ArrayKeyedMap>;\n    [PROFILE_CONFIGURATION_CONTEXT]: Set<MappingConfiguration<any, any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mapper Provider for AutomapperModule in NestJS\nDESCRIPTION: Private static method to create a mapper provider. It takes async mapper options and global options, returning a Provider object.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperModule.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic private createMapperProvider(asyncMapperOptions: AutomapperAsyncOptions & { name: string }, globalOptions?: AutomapperGlobalOptions): Provider<any>\n```\n\n----------------------------------------\n\nTITLE: Declaring Default Mapper Token Constant\nDESCRIPTION: Constant definition for the default AutoMapper injection token used in NestJS dependency injection system.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/modules.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_MAPPER_TOKEN = \"automapper:nestjs:default\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Converter Example\nDESCRIPTION: Demonstrates how to use type converters to map between different primitive types when property names match between Source and Destination classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Source {\n    @AutoMap()\n    value1!: string;\n    @AutoMap()\n    value2!: string;\n    @AutoMap()\n    value3!: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Destination {\n    @AutoMap()\n    value1!: number;\n    @AutoMap()\n    value2!: Date;\n    @AutoMap()\n    value3!: boolean;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper(/*...*/)\n\nmapper\n    .addTypeConverter(String, Number, (str) => parseInt(str))\n    .addTypeConverter(String, Date, (str) => new Date(str))\n    .addTypeConverter(String, Boolean, (str) => Boolean(str));\n\nmapper.createMap(Source, Destination);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = new Source();\nsource.value1 = '123';\nsource.value2 = '10/14/1991';\nsource.value3 = 'truthy';\n\nconst destination = mapper.map(source, Destination, Source);\n/**\n * Destination {\n    value1: 123, // number\n    value2: Mon Oct 14 1991 00:00:00 GMT-0500 (Central Daylight Time), // a Date instance\n    value3; true // boolean\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing AutomapperModule with Multiple Mappers\nDESCRIPTION: Example of how to initialize the AutomapperModule with multiple Mapper objects in a NestJS application. This setup demonstrates using both 'classes' and 'pojos' strategy initializers.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n    imports: [\n        AutomapperModule.forRoot(\n            [\n                {\n                    name: 'classes',\n                    strategyInitializer: classes(),\n                },\n                {\n                    name: 'pojos',\n                    strategyInitializer: pojos(),\n                },\n            ],\n            {\n                /*  globalErrorHandler: ErrorHandler */\n                /*  globalNamingConventions: NamingConvention | {source, destination} */\n            }\n        ),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using MapperPickType in AutoMapper\nDESCRIPTION: Demonstrates how to use MapperPickType to create a new class that only includes specific properties from an original class. The example shows creating a PickFooBar class that only contains 'foo' and 'bar' properties from the Foo class.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/mapped-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n    @AutoMap()\n    bar!: number;\n    @AutoMap()\n    baz!: boolean;\n}\n\nclass PickFooBar extends MapperPickType(Foo, ['foo', 'bar']) {}\n\ncreateMap(mapper, Foo, PickFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst pickedFooBar = mapper.map(foo, Foo, PickFooBar);\nconsole.log(pickedFooBar);\n/**\n * PickFooBar { foo: 'foo', bar: 123 }\n * only foo and bar have been picked\n */\n```\n\n----------------------------------------\n\nTITLE: Normalizing POJO Metadata in TypeScript\nDESCRIPTION: Private static method to normalize POJO metadata, ensuring consistent structure with depth and type information.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/classes/PojosMetadataMap.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate static normalizePojoMetadata(pojoMetadata: unknown): {\n  depth: number;\n  type: () => PojoMetadata | [PojoMetadata];\n} {\n  // Implementation details omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mapper Instance for AutomapperModule in NestJS\nDESCRIPTION: Private static method to create a mapper instance. It takes mapper options and global options, returning a Mapper object.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperModule.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic private createMapper(mapperOptions: CreateMapperOptions, globalOptions?: AutomapperGlobalOptions): Mapper\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods in TypeScript\nDESCRIPTION: Defines core mapping methods for converting between source and destination objects, including synchronous and asynchronous array mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Mapper {\n    dispose(): void;\n    \n    map<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        sourceObject: TSource,\n        sourceIdentifier: ModelIdentifier<TSource>,\n        destinationIdentifier: ModelIdentifier<TDestination>,\n        options?: MapOptions<TSource, TDestination, Record<string, any>>\n    ): TDestination;\n    \n    mapArray<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        sourceArray: TSource[],\n        sourceIdentifier: ModelIdentifier<TSource>,\n        destinationIdentifier: ModelIdentifier<TDestination>,\n        options?: MapOptions<TSource[], TDestination[], Record<string, any>>\n    ): TDestination[];\n    \n    mapAsync<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        sourceObject: TSource,\n        sourceIdentifier: ModelIdentifier<TSource>,\n        destinationIdentifier: ModelIdentifier<TDestination>,\n        options?: MapOptions<TSource, TDestination, Record<string, any>>\n    ): Promise<TDestination>;\n    \n    mapArrayAsync<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        sourceArray: TSource[],\n        sourceIdentifier: ModelIdentifier<TSource>,\n        destinationIdentifier: ModelIdentifier<TDestination>,\n        options?: MapOptions<TSource[], TDestination[], Record<string, any>>\n    ): Promise<TDestination[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Converter Interface in TypeScript\nDESCRIPTION: Defines a generic Converter interface with type parameters TSource and TConvertDestination. It includes a convert method that takes a source object and returns a converted destination object.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Converter.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Converter<TSource extends Dictionary<TSource> = any, TConvertDestination = any> {\n    convert(source: TSource): TConvertDestination;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutoMapper Metadata Key Constants in TypeScript\nDESCRIPTION: Defines constant values for AutoMapper metadata keys used for reflection and mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const AUTOMAPPER_METADATA_FACTORY_KEY = \"__AUTOMAPPER_METADATA_FACTORY__\";\n\nexport const AUTOMAP_PROPERTIES_METADATA_KEY = \"automap:properties\";\nexport const AUTOMAP_STANDALONE_METADATA_KEY = \"automap:standalone\";\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Array Mutation in TypeScript\nDESCRIPTION: Defines asynchronous functions for mutating arrays of objects. It includes overloads for same-type and different-type mutations, supporting custom identifiers and mapping options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **mutateArrayAsync**<`TSource`, `TDestination`>(`sourceArray`, `destinationArray`, `sourceIdentifier`, `destinationIdentifier`, `options?`): `Promise`<`void`>\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `TSource` | extends [`Dictionary`](../modules.md#dictionary)<`TSource`> |\n| `TDestination` | extends [`Dictionary`](../modules.md#dictionary)<`TDestination`> |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `sourceArray` | `TSource`[] |\n| `destinationArray` | `TDestination`[] |\n| `sourceIdentifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TSource`> |\n| `destinationIdentifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TDestination`> |\n| `options?` | [`MapOptions`](MapOptions.md)<`TSource`[], `TDestination`[], `Record`<`string`, `any`>> |\n\n#### Returns\n\n`Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Using MapperPickType in TypeScript with AutoMapper\nDESCRIPTION: Demonstrates how to use MapperPickType to create a new class that only includes selected properties from an original class. This example picks 'foo' and 'bar' properties while excluding 'baz'.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/mapped-types/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n    @AutoMap()\n    bar!: number;\n    @AutoMap()\n    baz!: boolean;\n}\n\nclass PickFooBar extends MapperPickType(Foo, ['foo', 'bar']) {}\n\ncreateMap(mapper, Foo, PickFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst pickedFooBar = mapper.map(foo, Foo, PickFooBar);\nconsole.log(pickedFooBar);\n/**\n * PickFooBar { foo: 'foo', bar: 123 }\n * only foo and bar have been picked\n */\n```\n\n----------------------------------------\n\nTITLE: Circular Dependency Configuration\nDESCRIPTION: Shows how to handle circular dependencies in the metadata configuration using type function and depth parameter.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/pojos.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPojosMetadataMap.create<Bio>('Bio', {\n    birthday: Date,\n    addresses: ['Address'],\n});\n\nPojosMetadataMap.create<User>('User', {\n    firstName: String,\n    lastName: String,\n    bio: {\n        type: () => 'Bio',\n        depth: 2,\n    },\n    logins: [Date],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MapOptions Interface in TypeScript\nDESCRIPTION: Defines the MapOptions interface with generic type parameters for source, destination, and extra arguments. Includes optional properties for before and after mapping callbacks, destination constructor, and an extra arguments function.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/MapOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MapOptions<TSource, TDestination, TExtraArgs> {\n  afterMap?: MapCallback<TSource, TDestination, TExtraArgs>;\n  beforeMap?: MapCallback<TSource, TDestination, TExtraArgs>;\n  destinationConstructor?: DestinationConstructor<TSource, TDestination>;\n  extraArgs?: (mapping: Mapping<TSource, TDestination>, destinationObject: TDestination) => TExtraArgs;\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Method in TypeScript\nDESCRIPTION: Defines a method for mutating destination objects based on source objects using specified identifiers and mapping options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Mapper {\n    mutate<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(\n        sourceObject: TSource,\n        destinationObject: TDestination,\n        sourceIdentifier: ModelIdentifier<TSource>,\n        destinationIdentifier: ModelIdentifier<TDestination>,\n        options?: MapOptions<TSource, TDestination, Record<string, any>>\n    ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Provider for Asynchronous Mapper Configuration in NestJS\nDESCRIPTION: Private static method to create a provider for asynchronous mapper configuration. It takes async mapper options and global options, returning an array of Provider objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperModule.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic private createProvider(asyncMapperOptions: AutomapperAsyncOptions & { name: string }, globalOptions?: AutomapperGlobalOptions): Provider<any>[]\n```\n\n----------------------------------------\n\nTITLE: TransformationType Enum Definition in TypeScript\nDESCRIPTION: Defines an enumeration of transformation types used for object mapping operations. The enum includes various mapping strategies like Ignore, MapFrom, Condition, FromValue, MapWith, ConvertUsing, MapInitialize, null/undefined substitutions, and deferred mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/TransformationType.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum TransformationType {\n  Ignore = 0,\n  MapFrom = 1,\n  Condition = 2,\n  FromValue = 3,\n  MapWith = 4,\n  ConvertUsing = 5,\n  MapInitialize = 6,\n  NullSubstitution = 7,\n  UndefinedSubstitution = 8,\n  MapWithArguments = 9,\n  MapDefer = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Single Object Mutation in TypeScript\nDESCRIPTION: Defines asynchronous functions for mutating single objects. It includes overloads for same-type and different-type mutations, supporting custom identifiers and mapping options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Mapper.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **mutateAsync**<`TSource`, `TDestination`>(`sourceObject`, `destinationObject`, `sourceIdentifier`, `destinationIdentifier`, `options?`): `Promise`<`void`>\n\n#### Type parameters\n\n| Name | Type |\n| :------ | :------ |\n| `TSource` | extends [`Dictionary`](../modules.md#dictionary)<`TSource`> |\n| `TDestination` | extends [`Dictionary`](../modules.md#dictionary)<`TDestination`> |\n\n#### Parameters\n\n| Name | Type |\n| :------ | :------ |\n| `sourceObject` | `TSource` |\n| `destinationObject` | `TDestination` |\n| `sourceIdentifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TSource`> |\n| `destinationIdentifier` | [`ModelIdentifier`](../modules.md#modelidentifier)<`TDestination`> |\n| `options?` | [`MapOptions`](MapOptions.md)<`TSource`, `TDestination`, `Record`<`string`, `any`>> |\n\n#### Returns\n\n`Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Using MapperIntersectionType in TypeScript with AutoMapper\nDESCRIPTION: Demonstrates MapperIntersectionType which creates a new class combining properties from two parent classes. The example shows mapping from the intersection class to each of the original classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/mapped-types/src/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n}\n\nclass Bar {\n    @AutoMap()\n    bar!: number;\n}\n\nclass IntersectFooBar extends MapperIntersectionType(Foo, Bar) {}\n\ncreateMap(mapper, IntersectFooBar, Foo);\ncreateMap(mapper, IntersectFooBar, Bar);\n\nconst intersect = new IntersectFooBar();\nintersect.foo = 'foo';\nintersect.bar = 123;\n\nconst foo = mapper.map(intersect, IntersectFooBar, Foo);\nconsole.log(foo);\n/**\n * Foo { foo: 'foo' }\n */\n\nconst bar = mapper.map(intersect, IntersectFooBar, Bar);\nconsole.log(bar);\n/**\n * Bar { bar: 123 }\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring AutomapperModule with Single Mapper in NestJS\nDESCRIPTION: Example of how to configure AutomapperModule with a single mapper in a NestJS application. It uses the classes() strategy initializer.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/nestjs/src/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n    imports: [\n        AutomapperModule.forRoot({\n            strategyInitializer: classes(),\n        }),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorHandler Interface in TypeScript\nDESCRIPTION: Interface definition for ErrorHandler that specifies a handle method which takes an unknown error parameter and returns void. Used for handling errors in the mapper library.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/ErrorHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ErrorHandler {\n    handle(error: unknown): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MapInterceptor Function\nDESCRIPTION: Function that creates a NestJS interceptor for automatic object mapping between source and destination types.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/modules.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MapInterceptor<TSource extends Dictionary<TSource>, TDestination extends Dictionary<TDestination>>(from: ModelIdentifier<TSource>, to: ModelIdentifier<TDestination>, options?: { isArray?: boolean; mapperName?: string } & MapOptions<TSource, TDestination, Record<string, any>>): NestInterceptor<any, any>\n```\n\n----------------------------------------\n\nTITLE: Creating Providers for AutomapperModule in NestJS\nDESCRIPTION: Private static method to create providers for AutomapperModule. It takes mapper options and global options, returning an array of Provider objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperModule.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic private createProviders(mapperOptions: (CreateMapperOptions & { name: string })[], globalOptions?: AutomapperGlobalOptions): Provider<any>[]\n```\n\n----------------------------------------\n\nTITLE: Defining TransformerMetadataFactory Interface in TypeScript\nDESCRIPTION: This code snippet defines the TransformerMetadataFactory interface with a generic type parameter TModel. It includes an optional method __AUTOMAPPER_METADATA_FACTORY__ that returns an array of property key and options pairs.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/TransformerMetadataFactory.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransformerMetadataFactory<TModel extends Dictionary<TModel>> {\n    __AUTOMAPPER_METADATA_FACTORY__?: () => [propertyKey: string, options: Object][];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutomapperModule with Multiple Mappers in NestJS\nDESCRIPTION: Example of how to configure AutomapperModule with multiple mappers in a NestJS application. It demonstrates setting up 'classes' and 'pojos' mappers with optional global configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/nestjs/src/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n    imports: [\n        AutomapperModule.forRoot(\n            [\n                {\n                    name: 'classes',\n                    strategyInitializer: classes(),\n                },\n                {\n                    name: 'pojos',\n                    strategyInitializer: pojos(),\n                },\n            ],\n            {\n                /*  globalErrorHandler: ErrorHandler */\n                /*  globalNamingConventions: NamingConvention | {source, destination} */\n            }\n        ),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with ORM Support via yarn\nDESCRIPTION: Commands to install AutoMapper with support for MikroORM or Sequelize using yarn. Both ORM integrations require the classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes reflect-metadata @automapper/mikro # for mikro-orm\nyarn add @automapper/core @automapper/classes reflect-metadata @automapper/sequelize # for sequelize\n```\n\n----------------------------------------\n\nTITLE: Initializing Class-based Mapping Strategy in TypeScript\nDESCRIPTION: Defines the classes function for initializing the class-based mapping strategy with optional configuration options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/modules.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function classes(options?: MappingStrategyInitializerOptions): MappingStrategyInitializer<Constructor>\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataClassId Enumeration in TypeScript\nDESCRIPTION: An enumeration that defines numeric identifiers for different types of metadata used in the mapping system. It includes identifiers for property keys (0), metadata functions (1), array types (2), and getter-only properties (3).\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MetadataClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MetadataClassId {\n    propertyKeys = 0,\n    metaFn = 1,\n    isArray = 2,\n    isGetterOnly = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MappingClassId Enumeration in TypeScript\nDESCRIPTION: Enumeration defining numeric identifiers for various mapping components including identifiers, properties, mapper configurations, constructors, type converters, callbacks, and naming conventions. Used internally by the mapper library for component identification.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MappingClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MappingClassId {\n  identifiers = 0,\n  identifierMetadata = 1,\n  properties = 2,\n  mapper = 3,\n  destinationConstructor = 4,\n  typeConverters = 5,\n  callbacks = 6,\n  namingConventions = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Installing peer dependencies with yarn\nDESCRIPTION: Command to install the required peer dependencies (@automapper/core and reflect-metadata) using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @automapper/core reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Manual Decorator Implementation\nDESCRIPTION: Example showing how classes would need to be decorated manually without the transformer plugin.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    @AutoMap()\n    bio!: string;\n    @AutoMap()\n    age!: number;\n}\nclass User {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n    @AutoMap(() => Profile)\n    profile!: Profile;\n}\n```\n\n----------------------------------------\n\nTITLE: Using mapDefer() for Conditional Mapping in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use mapDefer() within createMap() to conditionally map a profile property based on its type. It shows how to defer the mapping decision until runtime, allowing for dynamic selection of mapping functions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-defer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.profile,\n        mapDefer((source) => {\n            if (source.profile.type === 'A')\n                return mapWith(\n                    ProfileDto,\n                    ProfileA,\n                    (source) => source.profile\n                );\n            return mapWith(ProfileDto, Profile, (source) => source.profile);\n        })\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Automapper Sequelize Dependencies with Yarn\nDESCRIPTION: Commands to install the required dependencies for using Automapper with Sequelize using Yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/sequelize.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes @automapper/sequelize\n```\n\n----------------------------------------\n\nTITLE: Initializing POJO Mapping Strategy in TypeScript\nDESCRIPTION: Function that initializes a mapping strategy for POJOs. Takes optional configuration options and returns a MappingStrategyInitializer with a symbol type.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/modules.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **pojos**(`options?`): `MappingStrategyInitializer`<`symbol`\\>\n```\n\n----------------------------------------\n\nTITLE: Implementing SnakeCaseNamingConvention Class in TypeScript\nDESCRIPTION: Class definition that implements NamingConvention interface to transform property names into snake_case format. Uses underscore as separator character and includes a splitting expression regular expression pattern. The transformPropertyName method converts property name parts into snake case format.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/classes/SnakeCaseNamingConvention.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SnakeCaseNamingConvention implements NamingConvention {\n  separatorCharacter: string = '_';\n  splittingExpression: RegExp;\n\n  transformPropertyName(sourcePropNameParts: string[]): string {\n    // Implementation details not shown in source\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MappingCallbacksClassId Enumeration in TypeScript\nDESCRIPTION: Enumerates the callback execution points in the mapping process. Contains two members: beforeMap (0) representing callbacks that execute before mapping occurs, and afterMap (1) representing callbacks that execute after mapping completes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MappingCallbacksClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MappingCallbacksClassId {\n  beforeMap = 0,\n  afterMap = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NamingConvention Interface in TypeScript\nDESCRIPTION: This snippet defines the NamingConvention interface with two properties: separatorCharacter and splittingExpression, and a method transformPropertyName. It is implemented by CamelCaseNamingConvention, PascalCaseNamingConvention, and SnakeCaseNamingConvention classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/NamingConvention.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NamingConvention {\n  separatorCharacter: string;\n  splittingExpression: RegExp;\n  transformPropertyName(sourcePropNameParts: string[]): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing peer dependencies with npm\nDESCRIPTION: Command to install the required peer dependencies (@automapper/core and reflect-metadata) using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @automapper/core reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Defining AutoMapper Options Type in TypeScript\nDESCRIPTION: Type definition for AutoMapper configuration options that can be either a single CreateMapperOptions object or an array of named mapper options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AutomapperOptions = CreateMapperOptions | (CreateMapperOptions & { name: string })[]\n```\n\n----------------------------------------\n\nTITLE: Defining AutomapperProfile Class in TypeScript\nDESCRIPTION: This code snippet defines the AutomapperProfile class with a protected constructor that takes a Mapper instance. It includes a protected mapper property and two accessor methods: an abstract 'profile' getter and a protected 'mappingConfigurations' getter.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/classes/AutomapperProfile.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AutomapperProfile {\n  protected constructor(mapper: Mapper) {}\n\n  protected mapper: Mapper;\n\n  protected abstract get profile(): MappingProfile;\n\n  protected get mappingConfigurations(): MappingConfiguration<any, any>[] {\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing automapper packages via yarn\nDESCRIPTION: Command for installing @automapper/core, @automapper/classes, and @automapper/mikro packages using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/mikro.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes @automapper/mikro\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core with Classes or POJOs Strategy via yarn\nDESCRIPTION: Commands to install the core AutoMapper library with either the classes strategy (which requires reflect-metadata) or the POJOs strategy using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes reflect-metadata # for classes\nyarn add @automapper/core @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Defining AutomapperGlobalOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the AutomapperGlobalOptions interface with two optional properties: globalErrorHandler of type ErrorHandler and globalNamingConventions of type NamingConventionInput. These properties allow for global configuration of error handling and naming conventions in the Automapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/interfaces/AutomapperGlobalOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AutomapperGlobalOptions {\n    globalErrorHandler?: ErrorHandler;\n    globalNamingConventions?: NamingConventionInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MappingPropertyClassId Enumeration in TypeScript\nDESCRIPTION: This code snippet defines an enumeration called MappingPropertyClassId with two members: 'target' with a value of 0, and 'transformation' with a value of 1. This enumeration is likely used to identify different types of mapping properties in the mapper library.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MappingPropertyClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum MappingPropertyClassId {\n    target = 0,\n    transformation = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConditionPredicate Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a predicate function that takes a source object and returns a boolean. The source object extends Dictionary type and is parameterized as TSource.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/ConditionPredicate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConditionPredicate<TSource extends Dictionary<TSource>> {\n  (source: TSource): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core with npm\nDESCRIPTION: Command to install required peer dependency @automapper/core using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/pojos/src/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Initializing PojosMetadataMap Class in TypeScript\nDESCRIPTION: Defines the PojosMetadataMap class with a private static metadataStorage property. This class is used to manage metadata for POJOs in the mapper project.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/classes/PojosMetadataMap.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PojosMetadataMap {\n  private static metadataStorage: Map<symbol, [key: string, metadata: Object][]>\n\n  constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DTO Class Structure\nDESCRIPTION: Shows the destination DTO class structure with decorators for AutoMapper, featuring flattened properties from nested objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDto {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    fullName: string;\n\n    @AutoMap()\n    username: string;\n\n    @AutoMap(() => BioDto)\n    bio: BioDto;\n}\n\nexport class BioDto {\n    @AutoMap()\n    jobTitle: string;\n\n    @AutoMap()\n    jobSalary: number;\n\n    @AutoMap()\n    birthday: string;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for AutoMapper\nDESCRIPTION: TypeScript configuration options required for AutoMapper to work properly, including experimental decorators and decorator metadata.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"skipLibCheck\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with ORM Support via npm\nDESCRIPTION: Command-line instructions for installing AutoMapper with support for Sequelize and MikroORM using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes reflect-metadata @automapper/mikro # for mikro-orm\nnpm i @automapper/core @automapper/classes reflect-metadata @automapper/sequelize # for sequelize\n```\n\n----------------------------------------\n\nTITLE: Resolver Interface Definition in AutoMapper\nDESCRIPTION: Shows the TypeScript interface definition for a Resolver, which can be used with mapFrom(). A Resolver includes a resolve method that receives both source and destination objects.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/map-from.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Resolver<TheSource, TheDestination, TheReturnType> {\n    resolve(source: TheSource, destination?: TheDestination): TheReturnType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutomapperOptionsFactory Interface in TypeScript\nDESCRIPTION: This code snippet defines the AutomapperOptionsFactory interface with a single method createAutomapperOptions. The method returns either CreateMapperOptions or a Promise of CreateMapperOptions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/interfaces/AutomapperOptionsFactory.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AutomapperOptionsFactory {\n    createAutomapperOptions(): CreateMapperOptions | Promise<CreateMapperOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeferFunction Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a deferred mapping function that takes a source object and returns a MemberMapReturnNoDefer type. The interface is generic with three type parameters: TSource, TDestination, and TSelectorReturn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/DeferFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **DeferFunction**(`source`): [`MemberMapReturnNoDefer`](../modules.md#membermapreturnnodefer)<`TSource`, `TDestination`, `TSelectorReturn`\\>\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/classes with npm\nDESCRIPTION: Command to install the @automapper/classes package using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @automapper/classes\n```\n\n----------------------------------------\n\nTITLE: Updating AutoMap Decorator Usage in TypeScript\nDESCRIPTION: Shows the change in usage of the AutoMap decorator, moving from a direct type function to an options object containing the type function. This change is part of a deprecation process in the classes module.\nSOURCE: https://github.com/nartc/mapper/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Foo {\n    // before\n    @AutoMap(() => Bar)\n    bar: Bar;\n\n    // after\n    @AutoMap({ typeFn: () => Baz })\n    baz: Baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapInterceptor in NestJS Controller\nDESCRIPTION: Example of using MapInterceptor to automatically map controller method return values from one type to another.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseInterceptors } from '@nestjs/common';\nimport { MapInterceptor } from '@automapper/nestjs';\n\nexport class UserController {\n    @Get('me')\n    @UseInterceptors(MapInterceptor(User, UserDto))\n    me() {\n        // userService.getMe() returns a User here and does not have mapping logic in it.\n        return this.userService.getMe();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual decorating with @AutoMap() (TypeScript)\nDESCRIPTION: Example showing how classes would need to be manually decorated with @AutoMap() without the transformer plugin, which becomes verbose quickly.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    @AutoMap()\n    bio: string;\n    @AutoMap()\n    age: number;\n}\nclass User {\n    @AutoMap()\n    firstName: string;\n    @AutoMap()\n    lastName: string;\n    @AutoMap(() => Profile)\n    profile: Profile;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Configurations\nDESCRIPTION: Illustrates the change from method chaining to functional approach in creating map configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nmapper\n    .createMap(User, UserDto)\n    .forMember(/* ... */)\n    .forSelf(/* ... */)\n    .beforeMap(/* ... */)\n    .afterMap(/* ... */);\n\n// after\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(/* ... */),\n    forSelf(/* ... */),\n    beforeMap(/* ... */),\n    afterMap(/* ... */)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapping with PreCondition in TypeScript AutoMapper\nDESCRIPTION: Demonstrates how to create a mapping configuration using createMap() with forMember() and preCondition(). The example shows mapping from User to UserDto with a precondition check on the source age property before mapping the fullName property.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        preCondition((source) => source.age > 10, 'default full name'),\n        mapFrom(fullNameResolver)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining PojoMetadata Type in TypeScript\nDESCRIPTION: Defines a type alias for POJO metadata that can either be a ModelIdentifier excluding Constructor, or any constructor type.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nƬ **PojoMetadata**: `Exclude`<`ModelIdentifier`, `Constructor`\\> \\| `AnyConstructor`\n```\n\n----------------------------------------\n\nTITLE: Defining AutoMapOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the AutoMapOptions interface with properties for depth, isGetterOnly, and a type function. It's used to configure automatic mapping behavior in the @nartc/mapper library.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/interfaces/AutoMapOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AutoMapOptions {\n    depth?: number;\n    isGetterOnly?: boolean;\n    type?: () => Constructor<any> | [Constructor<any>];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core with yarn\nDESCRIPTION: Command to install the @automapper/core package using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/core/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Implementing getMapperToken Function\nDESCRIPTION: Utility function that generates mapper injection tokens based on an optional name parameter.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/modules.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getMapperToken(name?: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining Resolver Interface in TypeScript\nDESCRIPTION: This code snippet defines the Resolver interface with generic type parameters for source, destination, and resolved type. It includes a resolve method that takes source and optional destination parameters and returns the resolved type.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/interfaces/Resolver.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Resolver<TSource, TDestination, TResolvedType> {\n    resolve(source: TSource, destination?: TDestination): TResolvedType;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript output of plain classes (JavaScript)\nDESCRIPTION: Shows how TypeScript classes compile to JavaScript with all type information stripped, illustrating why metadata is needed.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Profile {}\nclass User {}\n```\n\n----------------------------------------\n\nTITLE: Creating Mapper Configuration\nDESCRIPTION: Shows the updated syntax for creating a mapper instance with the new strategyInitializer option.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst mapper = createMapper({\n    name: 'arbitrary',\n    pluginInitializer: classes,\n    /* namingConventions and errorHandler stay the same */\n});\n\n// after\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    /* namingConventions and errorHandler stay the same */\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Converter Interface in TypeScript\nDESCRIPTION: This snippet defines the Converter interface used for custom property mapping in AutoMapper TypeScript. It specifies a convert method that takes a source of type TheSource and returns a result of type TheResult.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/convert-using.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Converter<TheSource, TheResult> {\n    convert(source: TheSource): TheResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Converter Interface in TypeScript\nDESCRIPTION: Interface definition for Converter that specifies the contract for converting between source and result types.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/convert-using.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Converter<TheSource, TheResult> {\n    convert(source: TheSource): TheResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Options and Extensions\nDESCRIPTION: Shows how to configure map options and extensions using the new functional approach.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nmapper.createMap(Base, BaseDto);\nmapper.createMap(User, UserDto, {\n    extend: [mapper.getMapping(Base, BaseDto)],\n    namingConventions: new PascalCaseNamingConvention(),\n});\n\n// after\nconst baseMapping = createMap(mapper, Base, BaseDto);\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    extend(baseMapping),\n    // or you can call: extend(Base, BaseDto)\n    namingConventions(new PascalCaseNamingConvention())\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core peer dependency with npm\nDESCRIPTION: Command to install the required peer dependency @automapper/core using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/nestjs/src/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Output\nDESCRIPTION: Shows how the TypeScript classes compile to plain JavaScript without decorators.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Profile {}\nclass User {}\n```\n\n----------------------------------------\n\nTITLE: Implementing transformPropertyName Method in CamelCaseNamingConvention\nDESCRIPTION: This method transforms the given source name parts into a camel case property name. It takes an array of string parts and returns a single camel case string.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/classes/CamelCaseNamingConvention.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntransformPropertyName(sourceNameParts: string[]): string {\n  // Implementation not provided in the snippet\n}\n```\n\n----------------------------------------\n\nTITLE: Transformer plugin options interface (TypeScript)\nDESCRIPTION: TypeScript interface showing the configuration options available for the transformer plugin.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AutomapperTransformerPluginOptions {\n    modelFileNameSuffix?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Service with Manual DTO Mapping in TypeScript\nDESCRIPTION: Defines a UserService class with a method that fetches a user from the database and manually maps it to a UserDto using the static fromUser method.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/preface.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n    getUserByUsername(username: string): UserDto {\n        const user = fetchUserByUsernameFromDb(username);\n        return UserDto.fromUser(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NamingConventionInput Type in TypeScript\nDESCRIPTION: This snippet defines the NamingConventionInput type, which can be either a single NamingConvention or an object specifying separate conventions for source and destination.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/naming-conventions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NamingConventionInput =\n    | NamingConvention\n    | {\n          source: NamingConvention;\n          destination: NamingConvention;\n      };\n```\n\n----------------------------------------\n\nTITLE: Source Class Definition with AutoMap Decorators\nDESCRIPTION: Definition of a Source class with three string properties decorated with @AutoMap()\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Source {\n    @AutoMap()\n    value1!: string;\n    @AutoMap()\n    value2!: string;\n    @AutoMap()\n    value3!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequelize Mapping Strategy in TypeScript\nDESCRIPTION: This function initializes a mapping strategy for Sequelize models. It accepts an optional 'options' parameter of type MappingStrategyInitializerOptions and returns a MappingStrategyInitializer for Constructor types. The function is defined in the file 'lib/sequelize.ts'.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/sequelize/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **sequelize**(`options?`): `MappingStrategyInitializer`<`Constructor`>\n\n#### Parameters\n\n| Name | Type | Default value |\n| :------ | :------ | :------ |\n| `options` | `MappingStrategyInitializerOptions` | `defaultStrategyInitializerOptions` |\n\n#### Returns\n\n`MappingStrategyInitializer`<`Constructor`>\n\n#### Defined in\n\n[lib/sequelize.ts:12](https://github.com/nartc/mapper/blob/efc4cb9d/packages/sequelize/src/lib/sequelize.ts#L12)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Mikro Library with Nx and Jest\nDESCRIPTION: Command to execute unit tests for the mikro library using Nx and Jest testing framework.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/mikro/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx test mikro\n```\n\n----------------------------------------\n\nTITLE: Basic class declaration without transformer plugin (TypeScript)\nDESCRIPTION: Example of two plain TypeScript classes that would normally require manual @AutoMap() decorators on each property for @automapper/classes to work.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    bio: string;\n    age: number;\n}\nclass User {\n    firstName: string;\n    lastName: string;\n    profile: Profile;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper MikroORM Dependencies with Yarn\nDESCRIPTION: Install the required dependencies for using AutoMapper with MikroORM using Yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/mikro.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes @automapper/mikro\n```\n\n----------------------------------------\n\nTITLE: Property Ignore Example\nDESCRIPTION: Demonstrates how to ignore properties from being processed by the transformer using JSDoc tags.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n    firstName!: string;\n    lastName!: string;\n    profile!: Profile;\n    /**\n     * @autoMapIgnore\n     */\n    ignoreMe!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DTO Classes with Manual Mapping\nDESCRIPTION: Defines the DTO classes with static mapping methods to transform User and Bio entities into their respective DTOs. Includes manual property mapping and data transformation logic.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/preface.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDto {\n    firstName: string;\n    lastName: string;\n    fullName: string;\n    username: string;\n    bio: BioDto;\n\n    static fromUser(user: User) {\n        const dto = new UserDto();\n        dto.firstName = user.firstName;\n        dto.lastName = user.lastName;\n        dto.fullName = user.firstName + ' ' + user.lastName;\n        dto.username = user.username;\n        dto.bio = BioDto.fromBio(user.bio);\n\n        return dto;\n    }\n}\n\nexport class BioDto {\n    jobTitle: string;\n    jobSalary: number;\n    birthday: string;\n    avatarUrl: string;\n\n    static fromBio(bio: Bio) {\n        const dto = new BioDto();\n        dto.jobTitle = bio.job.title;\n        dto.jobSalary = bio.job.salary;\n        dto.birthday = bio.birthday.toDateString();\n        dto.avatarUrl = bio.avatarUrl;\n\n        return dto;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Service with DTO Transformation\nDESCRIPTION: Demonstrates the service layer implementation that uses the manual DTO mapping to transform database entities into DTOs for client response.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/preface.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n    getUserByUsername(username: string): UserDto {\n        const user = fetchUserByUsernameFromDb(username);\n        return UserDto.fromUser(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for AutoMapper\nDESCRIPTION: JSON configuration for tsconfig.json to enable necessary options for using AutoMapper, particularly for the classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"skipLibCheck\": true, // if your TS is lower than 4.0\n    \"experimentalDecorators\": true, // for @automapper/classes\n    \"emitDecoratorMetadata\": true // for @automapper/classes\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapperPickType in TypeScript\nDESCRIPTION: Demonstrates how to use MapperPickType to create a new class that only includes specified properties from the original class. In this example, it picks 'foo' and 'bar' properties from the Foo class.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/mapped-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n    @AutoMap()\n    bar!: number;\n    @AutoMap()\n    baz!: boolean;\n}\n\nclass PickFooBar extends MapperPickType(Foo, ['foo', 'bar']) {}\n\ncreateMap(mapper, Foo, PickFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst pickedFooBar = mapper.map(foo, Foo, PickFooBar);\nconsole.log(pickedFooBar);\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Sequelize Library\nDESCRIPTION: Command to execute unit tests for the Sequelize library using Jest via Nx. This ensures the library functions as expected.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/sequelize/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx test sequelize\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper MikroORM Dependencies with NPM\nDESCRIPTION: Install the required dependencies for using AutoMapper with MikroORM using NPM package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/mikro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes @automapper/mikro\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper POJOS Dependencies\nDESCRIPTION: Installation commands for @automapper/core and @automapper/pojos using npm and yarn package managers.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/pojos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/pojos\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration\nDESCRIPTION: Example of configuring the transformer plugin with Rollup using rollup-plugin-typescript2.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport automapperTransformerPlugin from '@automapper/classes/transformer-plugin';\nimport typescript from 'rollup-plugin-typescript2';\nconst pluginOptions = {\n    modelFileNameSuffix: [\n        /*...*/\n    ],\n};\nexport default {\n    preserveModules: true,\n    plugins: [\n        typescript({\n            transformers: [\n                (service) => ({\n                    before: [\n                        automapperTransformerPlugin(\n                            service.getProgram(),\n                            pluginOptions\n                        ).before,\n                    ],\n                }),\n            ],\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Type Converter Usage Example\nDESCRIPTION: Demonstration of using the configured type converters with sample data\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = new Source();\nsource.value1 = '123';\nsource.value2 = '10/14/1991';\nsource.value3 = 'truthy';\n\nconst destination = mapper.map(source, Destination, Source);\n/**\n * Destination {\n    value1: 123, // number\n    value2: Mon Oct 14 1991 00:00:00 GMT-0500 (Central Daylight Time), // a Date instance\n    value3; true // boolean\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapperLogger in TypeScript\nDESCRIPTION: Demonstrates how to customize the AutoMapperLogger by configuring its log levels. In this example, the 'warn' level is nullified.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/mapper.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// in your application's entry point, at the top\nAutoMapperLogger.configure({\n  warn: null, // nullify \"warn\" completely\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core and Classes via npm\nDESCRIPTION: Command to install @automapper/core and @automapper/classes using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/classes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes\n```\n\n----------------------------------------\n\nTITLE: NestJS CLI Configuration\nDESCRIPTION: Shows how to configure the transformer plugin in a NestJS application using nest-cli.json.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection\": \"@nestjs/schematics\",\n    \"sourceRoot\": \"src\",\n    \"compilerOptions\": {\n        \"plugins\": [{\n            \"name\": \"@automapper/classes/transformer-plugin\",\n            \"options\": {\n                \"modelFileNameSuffix\": [\".dto.ts\", \".vm.ts\"]\n            }\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple DTO Model for Flattened Mapping\nDESCRIPTION: Shows the definition of a simplified DTO class that will receive flattened data from the complex Order model.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/fundamentals/auto-flattening.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderDto {\n    @AutoMap()\n    customerName!: string;\n    @AutoMap()\n    total!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PascalCaseNamingConvention Class in TypeScript\nDESCRIPTION: This snippet defines the PascalCaseNamingConvention class with its properties and methods. It implements the NamingConvention interface and provides logic for transforming property names to PascalCase.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/classes/PascalCaseNamingConvention.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PascalCaseNamingConvention implements NamingConvention {\n    separatorCharacter: string = '';\n    splittingExpression: RegExp;\n\n    transformPropertyName(sourceNameParts: string[]): string {\n        // Implementation not provided in the snippet\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NamingConventionInput Type in TypeScript\nDESCRIPTION: This snippet defines the NamingConventionInput type, which can be either a single NamingConvention or an object specifying separate conventions for source and destination.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/naming-conventions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NamingConventionInput =\n    | NamingConvention\n    | {\n          source: NamingConvention;\n          destination: NamingConvention;\n      };\n```\n\n----------------------------------------\n\nTITLE: Managing Mapping Profiles\nDESCRIPTION: Demonstrates the new approach to handling mapping profiles with common configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst productProfile: MappingProfile = (mapper) => {\n    const baseMapping = mapper.getMapping(Base, BaseDto);\n    const camelCaseConvention = new CamelCaseNamingConvention();\n\n    const beforeMap = () => {\n        /* do something common for all Mappings */\n    };\n    const afterMap = () => {\n        /* do something common for all Mappings */\n    };\n\n    // duplicate the configurations for all Mappings\n    mapper\n        .createMap(Product, ProductDto, {\n            extend: [baseMapping],\n            namingConventions: camelCaseConvention,\n        })\n        .beforeMap(beforeMap)\n        .afterMap(afterMap);\n\n    mapper\n        .createMap(Product, ProductDetailDto, {\n            extend: [baseMapping],\n            namingConventions: camelCaseConvention,\n        })\n        .beforeMap(beforeMap)\n        .afterMap(afterMap);\n\n    mapper\n        .createMap(Product, MinimalProductDto, {\n            extend: [baseMapping],\n            namingConventions: camelCaseConvention,\n        })\n        .beforeMap(beforeMap)\n        .afterMap(afterMap);\n};\nmapper.addProfile(productProfile);\n\n// after\nconst productProfile: MappingProfile = (mapper) => {\n    createMap(mapper, Product, ProductDto);\n    createMap(mapper, Product, ProductDetailDto);\n    createMap(mapper, Product, MinimalProductDto);\n};\n\n// pass the common configurations to the profile\naddProfile(\n    mapper,\n    productProfile,\n    extend(Base, BaseDto),\n    namingConventions(new CamelCaseNamingConvention()),\n    beforeMap(() => {\n        /* do something common for all Mappings */\n    }),\n    afterMap(() => {\n        /* do something common for all Mappings */\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/classes with yarn\nDESCRIPTION: Command to install the core automapper package and classes strategy using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/classes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes\n```\n\n----------------------------------------\n\nTITLE: Installing Automapper Sequelize Dependencies with NPM\nDESCRIPTION: Commands to install the required dependencies for using Automapper with Sequelize using NPM package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/sequelize.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes @automapper/sequelize\n```\n\n----------------------------------------\n\nTITLE: NestJS with Nx configuration (JSON)\nDESCRIPTION: Example showing how to configure NestJS applications and libraries in an Nx workspace to use the transformer plugin.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"app\": {\n        \"targets\": {\n            \"build\": {\n                \"executor\": \"@nrwl/node:webpack\",\n                \"options\": {\n                    \"transformers\": [\n                        {\n                            \"name\": \"@automapper/classes/transformer-plugin\",\n                            \"options\": {\n                                \"modelFileNameSuffix\": [\".dto.ts\"]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"lib\": {\n        \"targets\": {\n            \"build\": {\n                \"executor\": \"@nrwl/js:tsc\",\n                \"options\": {\n                    \"transformers\": [\n                        {\n                            \"name\": \"@automapper/classes/transformer-plugin\",\n                            \"options\": {\n                                \"modelFileNameSuffix\": [\".dto.ts\"]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/nestjs with yarn\nDESCRIPTION: Command to install the @automapper/nestjs module using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/nestjs\n```\n\n----------------------------------------\n\nTITLE: Defining AutoMapperLogger Class in TypeScript\nDESCRIPTION: This snippet defines the AutoMapperLogger class with static properties and methods for logging. It includes a configuration method and various logging methods for different log levels.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/classes/AutoMapperLogger.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AutoMapperLogger {\n  private static readonly AUTOMAPPER_PREFIX: \"[AutoMapper]: \" = \"[AutoMapper]: \";\n  private static configured: boolean = false;\n\n  static configure(customLogger?: Partial<Pick<typeof AutoMapperLogger, \"log\" | \"info\" | \"error\" | \"warn\">>): void {\n    // Implementation not shown\n  }\n\n  static log(message: string): void {\n    // Implementation not shown\n  }\n\n  static warn(warning: string): void {\n    // Implementation not shown\n  }\n\n  static error(error: string): void {\n    // Implementation not shown\n  }\n\n  static info(info: string): void {\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Classes Dependencies\nDESCRIPTION: Commands for installing @automapper/classes and its peer dependencies using npm or yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/classes\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/classes\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core reflect-metadata\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Updating Converter Usage in TypeScript Automapper\nDESCRIPTION: Demonstrates the changes in converter implementation requiring explicit source selection. Shows migration from optional to required selector parameter.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst dateToStringConverter: Converter<User, string> = {\n    convert(source: User): string {\n        return source.birthday.toDateString();\n    },\n};\nmapper.createMap(User, UserDto).forMember(\n    (d) => d.birthday,\n    convertUsing(dateToStringConverter)\n);\n\n// after\nconst dateToStringConverter: Converter<Date, string> = {\n    convert(source: Date): string {\n        return source.toDateString();\n    },\n};\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (d) => d.birthday,\n        convertUsing(dateToStringConverter, (src) => src.birthday)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/classes with yarn\nDESCRIPTION: Command to install the @automapper/classes package using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @automapper/classes\n```\n\n----------------------------------------\n\nTITLE: Defining MappingTransformationClassId Enumeration in TypeScript\nDESCRIPTION: An enumeration that defines identifiers for mapping transformation classes. Contains two members: memberMapFn with value 0 and preCond with value 1.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MappingTransformationClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MappingTransformationClassId {\n    memberMapFn = 0,\n    preCond = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AutoMapper Strategy Options\nDESCRIPTION: Demonstrates the change from Plugin Initializer to Strategy Initializer syntax in mapper options configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// before: Plugin Initializer sometimes is a function, other times is a function that needs to be invoked\nconst mapperOptions = {\n    // pluginInitializer: classes\n    // pluginInitializer: pojos\n    // pluginInitializer: mikro()\n    // pluginInitializer: sequelize()\n};\n\n// after: All Strategies are functions that need to be invoked\nconst mapperOptions = {\n    // strategyInitializer: classes()\n    // strategyInitializer: pojos()\n    // strategyInitializer: mikro()\n    // strategyInitializer: sequelize()\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core with npm\nDESCRIPTION: Command to install the @automapper/core package using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper POJOS with npm\nDESCRIPTION: Command to install @automapper/pojos package using npm package manager\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Installing automapper packages via npm\nDESCRIPTION: Command for installing @automapper/core, @automapper/classes, and @automapper/mikro packages using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/mikro.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes @automapper/mikro\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core with yarn\nDESCRIPTION: Command to install the @automapper/core package using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Defining MappingPropertiesClassId Enum in TypeScript\nDESCRIPTION: Enumeration that defines numeric identifiers for different types of mapping properties. Used internally by the mapper library to identify property types during mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MappingPropertiesClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MappingPropertiesClassId {\n    path = 0,\n    mappingProperty = 1,\n    nestedMappingPair = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Rollup configuration with transformer plugin (TypeScript)\nDESCRIPTION: Example showing how to configure Rollup with rollup-plugin-typescript2 to use the transformer plugin during the TypeScript compilation process.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport automapperTransformerPlugin from '@automapper/classes/transformer-plugin';\nimport typescript from 'rollup-plugin-typescript2';\nconst pluginOptions = {\n    modelFileNameSuffix: [\n        /*...*/\n    ],\n};\nexport default {\n    // snip\n    preserveModules: true, // <-- turn on preserveModules\n    plugins: [\n        // snip\n        typescript({\n            transformers: [\n                (service) => ({\n                    before: [\n                        automapperTransformerPlugin(\n                            service.getProgram(),\n                            pluginOptions\n                        ).before,\n                    ],\n                }),\n            ],\n        }),\n        // snip\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ApplyMetadata types in TypeScript\nDESCRIPTION: Type definitions for ApplyMetadataFn and ApplyMetadata functions used in customization of the classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/src/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ApplyMetadataFn = <TModel extends Dictionary<TModel>>(\n    model: MetadataIdentifier<TModel>\n) => TModel;\n\nexport type ApplyMetadata = (\n    strategy: MappingStrategy<MetadataIdentifier>\n) => ApplyMetadataFn;\n\n// for example\nconst customApplyMetadata: ApplyMetadata = (strategy: MappingStrategy) => {\n    // strategy contains the Mapper which stores all the models' metadata\n    return (model) => {\n        // based on this model, you can extract the metadata and do as you like\n\n        return anObjectThatHasTheMetadataApplied; // { foo: undefined, bar: undefined }\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreateMapperOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CreateMapperOptions, used when creating a Mapper object. It specifies the structure for strategy initialization, error handling, and naming conventions.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateMapperOptions {\n    strategyInitializer: MappingStrategyInitializer<MetadataIdentifier>;\n    errorHandler?: ErrorHandler;\n    namingConventions?: NamingConventionInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper POJOS with yarn\nDESCRIPTION: Command to install @automapper/pojos package using yarn package manager\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Dependencies with yarn\nDESCRIPTION: Command to install AutoMapper core, classes strategy, and reflect-metadata using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Custom Metadata Application Type Definition\nDESCRIPTION: Type definitions for customizing how metadata is applied to models during mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ApplyMetadataFn = <TModel extends Dictionary<TModel>>(\n    model: MetadataIdentifier<TModel>\n) => TModel;\n\nexport type ApplyMetadata = (\n    strategy: MappingStrategy<MetadataIdentifier>\n) => ApplyMetadataFn;\n\nconst customApplyMetadata: ApplyMetadata = (strategy: MappingStrategy) => {\n    return (model) => {\n        return anObjectThatHasTheMetadataApplied;\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Webpack configuration with transformer plugin (TypeScript)\nDESCRIPTION: Example showing how to configure Webpack with ts-loader to use the transformer plugin during the TypeScript compilation process.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/transformer-plugin/src/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// snip\nconst automapperTransformerPlugin = require('@automapper/classes/transformer-plugin');\nconst pluginOptions = {\n    modelFileNameSuffix: [\n        /*...*/\n    ],\n};\nmodule.exports = {\n    // snip\n    module: {\n        rules: [\n            // snip\n            {\n                test: /\\.tsx?$/,\n                loader: 'ts-loader',\n                options: {\n                    getCustomTransformers: (program) => ({\n                        before: [\n                            automapperTransformerPlugin(program, pluginOptions)\n                                .before,\n                        ],\n                    }),\n                },\n            },\n            // snip\n        ],\n    },\n    // snip\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Properties with JSDoc Tag in TypeScript\nDESCRIPTION: Shows how to use the @autoMapIgnore JSDoc tag to exclude a property from being processed by the transformer plugin.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n    firstName!: string;\n    lastName!: string;\n    profile!: Profile;\n    /**\n     * @autoMapIgnore\n     */\n    ignoreMe!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoMap Decorator Function in TypeScript\nDESCRIPTION: Defines the AutoMap decorator function with multiple overloads for different parameter types. Used to mark properties for automatic mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/modules.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function AutoMap(): PropertyDecorator;\nexport function AutoMap(typeFn: () => Constructor<any> | [Constructor<any>]): PropertyDecorator;\nexport function AutoMap(options: AutoMapOptions): PropertyDecorator;\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper POJOS with npm\nDESCRIPTION: Command to install @automapper/pojos package using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/pojos/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Defining UserDto with AutoMapper Decorators\nDESCRIPTION: TypeScript class definition for a UserDto with nested BioDto, using @AutoMap() decorators for metadata discovery.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDto {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    fullName: string;\n\n    @AutoMap()\n    username: string;\n\n    @AutoMap(() => BioDto)\n    bio: BioDto;\n}\n\nexport class BioDto {\n    @AutoMap()\n    jobTitle: string;\n\n    @AutoMap()\n    jobSalary: number;\n\n    @AutoMap()\n    birthday: string;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core peer dependency with yarn\nDESCRIPTION: Command to install the required peer dependency @automapper/core using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Dependencies with NPM\nDESCRIPTION: Install required AutoMapper packages and reflect-metadata using NPM package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the directory structure of the AutoMapper project with its main package directories including classes, core, integration tests, NestJS integration, POJOs, and documentation\nSOURCE: https://github.com/nartc/mapper/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n_packages\n \\_classes\n \\_core\n \\_integration-test\n \\_nestjs\n \\_pojos\n \\_documentations\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core with npm\nDESCRIPTION: Command to install the @automapper/core package using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/core/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata for Class Mapping in TypeScript\nDESCRIPTION: Defines the getMetadataList function to extract mapping metadata from a given model class, including nested constructors.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/modules.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getMetadataList(model: Constructor<any>): [metadataList: [string, Object][], nestedConstructor: Constructor[]]\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Sequelize Dependencies with NPM\nDESCRIPTION: Command to install required AutoMapper packages including core, classes, and sequelize strategy using NPM package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/sequelize.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes @automapper/sequelize\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core peer dependency with yarn\nDESCRIPTION: Command to install the required peer dependency @automapper/core using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/nestjs/src/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper for NestJS\nDESCRIPTION: Commands to install the required AutoMapper packages for NestJS integration using npm or yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/nestjs\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/nestjs\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Dependencies with Yarn\nDESCRIPTION: Install required AutoMapper packages and reflect-metadata using Yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes reflect-metadata\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Docusaurus Website\nDESCRIPTION: Command to generate static content into the 'build' directory. The resulting files can be served using any static contents hosting service.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/core peer dependency with npm\nDESCRIPTION: Command to install the required peer dependency @automapper/core using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core with yarn\nDESCRIPTION: Command to install required peer dependency @automapper/core using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/pojos/src/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Custom Destination Constructor Type Definition\nDESCRIPTION: Type definition for customizing how destination objects are constructed during mapping operations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/classes/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DestinationConstructor<\n    TSource extends Dictionary<TSource> = any,\n    TDestination extends Dictionary<TDestination> = any\n> = (\n    sourceObject: TSource,\n    destinationIdentifier: MetadataIdentifier<TDestination>\n) => TDestination;\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Sequelize Dependencies with Yarn\nDESCRIPTION: Command to install required AutoMapper packages including core, classes, and sequelize strategy using Yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/sequelize.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes @automapper/sequelize\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/nestjs with npm\nDESCRIPTION: Command to install the @automapper/nestjs package using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/nestjs/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/nestjs\n```\n\n----------------------------------------\n\nTITLE: Manually Decorating Classes with AutoMap in TypeScript\nDESCRIPTION: The same classes as before, but with manual AutoMap decorators applied to each property. This shows the verbose approach that the plugin eliminates.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Profile {\n    @AutoMap()\n    bio!: string;\n    @AutoMap()\n    age!: number;\n}\nclass User {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n    @AutoMap(() => Profile)\n    profile!: Profile;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core and Strategies via yarn\nDESCRIPTION: Command-line instructions for installing AutoMapper core module and strategies using yarn. It includes options for both classes and POJOs.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes reflect-metadata # for classes\nyarn add @automapper/core @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Running MikroORM AutoMapper Tests with Jest\nDESCRIPTION: Command to execute unit tests for @automapper/mikro library using Jest test runner\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/mikro/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx test mikro\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH. This is one of two deployment options provided for GitHub Pages hosting.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Defining MapFnClassId Enumeration in TypeScript\nDESCRIPTION: This enumeration defines three members: type, fn, and isConverted. Each member is assigned a numeric value. The enumeration is likely used for identifying different aspects of mapping functions in the nartc/mapper project.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MapFnClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum MapFnClassId {\n    type = 0,\n    fn = 1,\n    isConverted = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoMapper Logger in TypeScript\nDESCRIPTION: Shows how to customize the AutoMapper logger behavior by configuring specific log levels. In this example, the warn level is disabled by setting it to null.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/mapper.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nAutoMapperLogger.configure({\n  warn: null, // nullify \"warn\" completely\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/nestjs with npm\nDESCRIPTION: Command to install the @automapper/nestjs module using npm package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/nestjs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/nestjs\n```\n\n----------------------------------------\n\nTITLE: Building Zod Library with Nx\nDESCRIPTION: Command to build the Zod library using Nx build system.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/zod/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build zod\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with NestJS Integration via npm\nDESCRIPTION: Commands to install AutoMapper with NestJS integration using npm. Supports both classes and POJOs strategies, with optional ORM integration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/nestjs @automapper/classes reflect-metadata # for classes\nnpm i @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/mikro # for classes + mikro-orm\nnpm i @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/sequelize # for classes + sequelize\nnpm i @automapper/core @automapper/nestjs @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core and Classes via yarn\nDESCRIPTION: Command to install @automapper/core and @automapper/classes using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/classes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/classes\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/nestjs with yarn\nDESCRIPTION: Command to install the @automapper/nestjs package using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/nestjs/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/nestjs\n```\n\n----------------------------------------\n\nTITLE: Defining Source/Destination Mapping Identifiers in TypeScript\nDESCRIPTION: Enumeration that defines numeric identifiers for mapping directions. 'asSource' represents mapping from source (0) and 'asDestination' represents mapping to destination (1).\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/core/enums/MetadataObjectMapClassId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum MetadataObjectMapClassId {\n    asSource = 0,\n    asDestination = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Metadata Storage in TypeScript\nDESCRIPTION: Provides a static reset method to clear the metadataStorage, allowing for a clean slate in metadata management.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/classes/PojosMetadataMap.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic reset(): void {\n  this.metadataStorage = new Map();\n}\n```\n\n----------------------------------------\n\nTITLE: Building Mikro Library with Nx\nDESCRIPTION: Command to build the mikro library using Nx build system.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/mikro/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build mikro\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Zod Library with Nx and Jest\nDESCRIPTION: Command to execute unit tests for the Zod library using Nx and Jest testing framework.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/zod/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx test zod\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with NestJS Integration via yarn\nDESCRIPTION: Commands to install AutoMapper with NestJS integration using yarn. Supports both classes and POJOs strategies, with optional ORM integration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/nestjs @automapper/classes reflect-metadata # for classes\nyarn add @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/mikro # for classes + mikro-orm\nyarn add @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/sequelize # for classes + sequelize\nyarn add @automapper/core @automapper/nestjs @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core with npm\nDESCRIPTION: Command to install required peer dependency @automapper/core using npm\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Building Sequelize AutoMapper Package with Nx\nDESCRIPTION: Command to build the @automapper/sequelize library using Nx build system\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/sequelize/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build sequelize\n```\n\n----------------------------------------\n\nTITLE: Destination Class Definition with AutoMap Decorators\nDESCRIPTION: Definition of a Destination class with three properties of different types decorated with @AutoMap()\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Destination {\n    @AutoMap()\n    value1!: number;\n    @AutoMap()\n    value2!: Date;\n    @AutoMap()\n    value3!: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Docusaurus\nDESCRIPTION: Command to start a local development server that opens a browser window. Changes to the website content are reflected live without server restarts.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom PreMap in MikroORM Strategy\nDESCRIPTION: Example of initializing the AutoMapper with a custom preMap function for the MikroORM strategy. The preMap function customizes how source objects are serialized before mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/strategies/mikro.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapper = createMapper({\n    strategyInitializer: mikro({ preMap: customPreMap }),\n});\n```\n\n----------------------------------------\n\nTITLE: Building Sequelize Library with Nx\nDESCRIPTION: Command to build the Sequelize library using Nx. This command compiles the library code and prepares it for use.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/sequelize/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build sequelize\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with NestJS Integration via npm\nDESCRIPTION: Command-line instructions for installing AutoMapper with NestJS integration using npm. It includes options for classes, POJOs, and ORM integrations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/nestjs @automapper/classes reflect-metadata # for classes\nnpm i @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/mikro # for classes + mikro-orm\nnpm i @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/sequelize # for classes + sequelize\nnpm i @automapper/core @automapper/nestjs @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Without SSH\nDESCRIPTION: Command to deploy the website without using SSH, requiring a GitHub username. This builds the website and pushes to the 'gh-pages' branch for GitHub Pages hosting.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button with React in MDX\nDESCRIPTION: This snippet shows how to create an interactive button using React within an MDX blog post. The code defines a button with an onClick handler that displays an alert when clicked.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/blog/2021-08-01-mdx-blog-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Integration Test Library\nDESCRIPTION: Command to execute unit tests for the integration test library using Jest via Nx. This runs all unit tests defined for the library.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/integration-test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx test integration-test\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper for NestJS\nDESCRIPTION: Commands to install the required AutoMapper packages for NestJS integration using npm or yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/nestjs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/nestjs\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/nestjs\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Blog Post Filename Examples\nDESCRIPTION: Examples of valid blog post filename formats that Docusaurus uses to extract post dates.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/blog/2021-08-26-welcome/index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2019-05-30-welcome.md\n2019-05-30-welcome/index.md\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/pojos with npm\nDESCRIPTION: Command to install the @automapper/core and @automapper/pojos packages using npm.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docusaurus Website with Yarn\nDESCRIPTION: Command to install all the dependencies required for the Docusaurus website using Yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Building Integration Test Library with Nx\nDESCRIPTION: Command to build the integration test library using Nx. This compiles and prepares the library for use.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/integration-test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build integration-test\n```\n\n----------------------------------------\n\nTITLE: Installing @automapper/pojos with yarn\nDESCRIPTION: Command to install the @automapper/core and @automapper/pojos packages using yarn.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/pojos.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML/Markdown\nDESCRIPTION: An HTML table structure embedded in markdown that displays contributor information including profile pictures, GitHub links, names, and contribution types using emoji indicators. Uses HTML table formatting with markdown links and styling.\nSOURCE: https://github.com/nartc/mapper/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://nartc.me/\"><img src=\"https://avatars1.githubusercontent.com/u/25516557?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Chau Tran</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=nartc\" title=\"Code\">💻</a> <a href=\"#ideas-nartc\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/micalevisk\"><img src=\"https://avatars.githubusercontent.com/u/13461315?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Micael Levi L. Cavalcante</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=micalevisk\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/AliYusuf95\"><img src=\"https://avatars.githubusercontent.com/u/17704100?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Ali Yusuf</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=AliYusuf95\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/robsonhermes\"><img src=\"https://avatars.githubusercontent.com/u/26451017?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Robson Hermes</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=robsonhermes\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/huybn5776\"><img src=\"https://avatars.githubusercontent.com/u/6702287?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Huybn</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=huybn5776\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://jasonmerino.me/\"><img src=\"https://avatars.githubusercontent.com/u/1660279?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Jason Merino</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=jasonmerino\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/roblopz\"><img src=\"https://avatars.githubusercontent.com/u/48892593?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>roblopz</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=roblopz\" title=\"Code\">💻</a> <a href=\"https://github.com/nartc/mapper/issues?q=author%3Aroblopz\" title=\"Bug reports\">🐛</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/LennartH\"><img src=\"https://avatars.githubusercontent.com/u/902689?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Lennart Hensler</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=LennartH\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jmplahitko\"><img src=\"https://avatars.githubusercontent.com/u/3401828?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>jmplahitko</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=jmplahitko\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://hoadev.com/\"><img src=\"https://avatars.githubusercontent.com/u/376698?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Hoa Truong</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=hoa00\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://www.vincent-p.fr/\"><img src=\"https://avatars.githubusercontent.com/u/6575007?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Vincent Pecquerie</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=VPecquerie\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://alwinschuster.at/\"><img src=\"https://avatars.githubusercontent.com/u/39517491?v=4?s=75\" width=\"75px;\" alt=\"\"/><br /><sub><b>Alwin J. Schuster</b></sub></a><br /><a href=\"https://github.com/nartc/mapper/commits?author=Alwinator\" title=\"Code\">💻</a></td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button with React in MDX\nDESCRIPTION: This snippet demonstrates how to create an interactive button using React within an MDX blog post. It uses the onClick event to display an alert when the button is clicked.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/blog/2021-08-01-mdx-blog-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Using HTML Comments for Content Truncation\nDESCRIPTION: Demonstrates how to use HTML comments to truncate blog post content in list views. The special comment tag acts as a marker for where content should be cut off when displaying post previews.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/blog/2019-05-29-long-blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper Core with yarn\nDESCRIPTION: Command to install required peer dependency @automapper/core using yarn\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/pojos/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown File Naming for Blog Posts in Docusaurus\nDESCRIPTION: Shows examples of how to name Markdown files for blog posts in Docusaurus, including options for single files and folder structures with index files. The naming convention includes the date and title of the post.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/blog/2021-08-26-welcome/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   `2019-05-30-welcome.md`\n-   `2019-05-30-welcome/index.md`\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper POJOS with yarn\nDESCRIPTION: Command to install @automapper/pojos package using yarn package manager.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/pojos/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/pojos\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with NestJS Integration via yarn\nDESCRIPTION: Command-line instructions for installing AutoMapper with NestJS integration using yarn. It includes options for classes, POJOs, and ORM integrations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/getting-started/installation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @automapper/core @automapper/nestjs @automapper/classes reflect-metadata # for classes\nyarn add @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/mikro # for classes + mikro-orm\nyarn add @automapper/core @automapper/nestjs @automapper/classes reflect-metadata @automapper/sequelize # for classes + sequelize\nyarn add @automapper/core @automapper/nestjs @automapper/pojos # for pojos\n```\n\n----------------------------------------\n\nTITLE: Running Sequelize AutoMapper Unit Tests with Jest\nDESCRIPTION: Command to execute unit tests for the @automapper/sequelize library using Jest test runner\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/sequelize/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx test sequelize\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post Truncation in Docusaurus Markdown\nDESCRIPTION: This snippet shows how to use a special HTML comment to truncate a long blog post in Docusaurus. The '<!--truncate-->' comment is placed where the post should be cut off in list views.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/blog/2019-05-29-long-blog-post.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--truncate-->\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using AutoMapper for Auto Flattening in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure AutoMapper with a CamelCaseNamingConvention for auto flattening, create a mapping between the complex Order model and the simple OrderDto, and perform the mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/fundamentals/auto-flattening.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// complex model\nconst product = new Product(5, 'Fried Chicken');\nconst customer = new Customer('Chau Tran');\nconst order = new Order(customer);\norder.addItem(product, 10);\n/**\n * Order {\n *     customer: Customer {\n *         name: 'Chau Tran'\n *     },\n *     items: [\n *         OrderItem {\n *             product: Product {\n *                 price: 5,\n *                 name: 'Fried Chicken\n *             },\n *             quantity: 10\n *         }\n *     ]\n * }\n */\n\n// configure AutoMapper with NamingConvention\nconst mapper = createMapper({\n    strategyInitializer: classes(),\n    // 👇 apply the CamelCaseNamingConvention\n    namingConventions: new CamelCaseNamingConvention(),\n});\n\ncreateMap(mapper, Order, OrderDto);\n\nconst dto = mapper.map(order, Order, OrderDto);\n/**\n * OrderDto {\n *     customerName: 'Chau Tran',\n *     total: 50\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Using MapperOmitType in TypeScript with AutoMapper\nDESCRIPTION: Shows how to use MapperOmitType to create a new class that excludes specified properties from an original class. This example omits 'foo' and 'bar' properties while keeping 'baz'.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/classes/mapped-types/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n    @AutoMap()\n    foo!: string;\n    @AutoMap()\n    bar!: number;\n    @AutoMap()\n    baz!: boolean;\n}\n\nclass OmitFooBar extends MapperOmitType(Foo, ['foo', 'bar']) {}\n\ncreateMap(mapper, Foo, OmitFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst omittedFooBar = mapper.map(foo, Foo, OmitFooBar);\nconsole.log(omittedFooBar);\n/**\n * OmitFooBar { baz: true }\n * foo and bar have been omitted\n */\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Mappings for Bio and User in TypeScript\nDESCRIPTION: This snippet shows how to create individual mappings for Bio and User entities using createMap function. It includes type conversion and custom property mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-profile.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    Bio,\n    BioDto,\n    typeConverter(Date, String, (date) => date.toDateString()),\n    namingConventions(new CamelCaseNamingConvention())\n);\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        mapFrom((source) => source.firstName + ' ' + source.lastName)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Property Mapping with AutoMap Decorator in TypeScript\nDESCRIPTION: Demonstrates how matching properties are automatically mapped between User and UserDto classes using the @AutoMap() decorator to provide metadata. This is the simplest form of convention-based mapping.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n}\n\nclass UserDto {\n    @AutoMap()\n    firstName!: string;\n    @AutoMap()\n    lastName!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AutoMapper Strategies Table in Markdown\nDESCRIPTION: This markdown table lists the available AutoMapper strategies, including their package names and descriptions. It covers classes, POJOs, MikroORM, and Sequelize integrations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Strategy                | Description                                                     |\n| ----------------------- | --------------------------------------------------------------- |\n| `@automapper/classes`   | Works with TS/ES6 Class                                         |\n| `@automapper/pojos`     | Works with plain objects and Interface                          |\n| `@automapper/mikro`     | Works with TS/ES6 Class and [MikroORM](https://mikro-orm.io/)   |\n| `@automapper/sequelize` | Works with TS/ES6 Class and [Sequelize](https://sequelize.org/) |\n```\n\n----------------------------------------\n\nTITLE: Plugin to Strategy Migration in TypeScript\nDESCRIPTION: Demonstrates the change from Plugin Initializer to Strategy approach in mapper options configuration. All strategies are now functions that need to be invoked.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/migrate-v8.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// before: Plugin Initializer sometimes is a function, other times is a function that needs to be invoked\nconst mapperOptions = {\n    // pluginInitializer: classes\n    // pluginInitializer: pojos\n    // pluginInitializer: mikro()\n    // pluginInitializer: sequelize()\n};\n\n// after: All Strategies are functions that need to be invoked\nconst mapperOptions = {\n    // strategyInitializer: classes()\n    // strategyInitializer: pojos()\n    // strategyInitializer: mikro()\n    // strategyInitializer: sequelize()\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Resolver for Tax Calculation in TypeScript AutoMapper\nDESCRIPTION: Shows how to implement a Resolver for calculating tax based on item type and price, then using it with mapFrom() in a mapping configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-from.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const taxResolver: Resolver<Item, ItemDto, number> = {\n    resolve(item): number {\n        return item.type === 'A' ? item.price * 0.5 : item.price * 0.9;\n    },\n};\n\ncreateMap(\n    mapper,\n    Item,\n    ItemDto,\n    forMember((d) => d.tax, mapFrom(taxResolver))\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Mapping with AutoMapper in TypeScript\nDESCRIPTION: Demonstrates how to use condition() to conditionally map a property based on a source object predicate. The mapping only occurs if the predicate returns true, otherwise the destination property will be undefined.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/condition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.petName,\n        condition((source) => source.hasPet)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AutoMapper Models in TypeScript\nDESCRIPTION: This snippet shows the definition of Item, CartItem, and CartItemDto classes with AutoMap decorators for use with AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Item {\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    @AutoMap()\n    stock: number;\n}\n\nclass CartItem {\n    @AutoMap(() => Item)\n    item: Item;\n    @AutoMap()\n    quantity: number;\n}\n\nclass CartItemDto {\n    @AutoMap()\n    name: string;\n    @AutoMap()\n    price: number;\n    @AutoMap()\n    quantity: number;\n\n    get total() {\n        return this.price * this.quantity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapWith for Nested Model Mapping in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the mapWith() function to manually map nested models in AutoMapper. It shows the configuration for mapping a User object to a UserDto, specifically handling the nested profile property.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/map-with.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.profile,\n        mapWith(ProfileDto, Profile, (source) => source.profile)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Class Structure\nDESCRIPTION: Demonstrates the source entity class structure with decorators for AutoMapper, including nested Bio and Job classes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/tutorial/mapping-configurations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    @AutoMap()\n    firstName: string;\n\n    @AutoMap()\n    lastName: string;\n\n    @AutoMap()\n    username: string;\n\n    password: string;\n\n    @AutoMap(() => Bio)\n    bio: Bio;\n}\n\nexport class Bio {\n    @AutoMap(() => Job)\n    job: Job;\n\n    @AutoMap()\n    birthday: Date;\n\n    @AutoMap()\n    avatarUrl: string;\n}\n\nexport class Job {\n    @AutoMap()\n    title: string;\n\n    @AutoMap()\n    salary: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Transformer Plugin in TypeScript\nDESCRIPTION: Demonstrates how to set up Rollup with rollup-plugin-typescript2 to use the transformer plugin, including preserveModules option.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport automapperTransformerPlugin from '@automapper/classes/transformer-plugin';\nimport typescript from 'rollup-plugin-typescript2';\nconst pluginOptions = {\n    modelFileNameSuffix: [\n        /*...*/\n    ],\n};\nexport default {\n    // snip\n    preserveModules: true, // <-- turn on preserveModules\n    plugins: [\n        // snip\n        typescript({\n            transformers: [\n                (service) => ({\n                    before: [\n                        automapperTransformerPlugin(\n                            service.getProgram(),\n                            pluginOptions\n                        ).before,\n                    ],\n                }),\n            ],\n        }),\n        // snip\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NullSubstitution in AutoMapper with TypeScript\nDESCRIPTION: This snippet demonstrates how to use nullSubstitution() in AutoMapper to provide a default value when mapping a null property. It shows the creation of a mapping configuration and the result of mapping a null value.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-member/null-substitution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.fullName,\n        nullSubstitution('raw value')\n    )\n);\n\nconst user = { fullName: null };\nmapper.map(user, User, UserDto); // UserDto { fullName: 'raw value' }\n```\n\n----------------------------------------\n\nTITLE: Using AutoMap with Enum types in TypeScript\nDESCRIPTION: Example showing how to use the AutoMap decorator with both string and numeric enum types, which require explicit type specification.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/strategies/classes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\n\nenum Role {\n    Admin = 'admin',\n    User = 'user',\n}\n\nclass User {\n    @AutoMap(() => String) // string enum\n    role!: Role;\n    @AutoMap(() => Number) // numeric enum\n    color!: Color;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Date to String Converter with AutoMapper\nDESCRIPTION: Example implementation of a Converter that transforms Date objects to strings, demonstrating how to create and use custom converters in mapping configurations.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-member/convert-using.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dateToStringConverter: Converter<Date, string> = {\n    convert(source) {\n        // maybe handle validation, additional parsing, or format here\n        return source.toDateString();\n    },\n};\n\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.birthday,\n        convertUsing(dateToStringConverter, (source) => source.birthday)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring BeforeMap in CreateMap Operation\nDESCRIPTION: Shows how to set up a MapCallback using beforeMap() within createMap() function. The callback receives source and destination parameters and is executed before the mapping operation.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/before-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    User,\n    UserDto,\n    beforeMap((source, destination) => {})\n);\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Model in TypeScript\nDESCRIPTION: Defines the database entity model classes for User, Bio, and Job with their respective properties representing the data structure in the database.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/preface.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    firstName: string;\n    lastName: string;\n    username: string;\n    password: string;\n    bio: Bio;\n}\n\nexport class Bio {\n    job: Job;\n    birthday: Date;\n    avatarUrl: string;\n}\n\nexport class Job {\n    title: string;\n    salary: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Markdown Page in /nartc/mapper Project\nDESCRIPTION: This snippet demonstrates the structure of a basic Markdown page. It includes a YAML front matter for metadata and a main content section with a heading and explanatory text.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/src/pages/markdown-page.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n\n# Markdown page example\n\nYou don't need React to write simple standalone pages.\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeMap in Map Operation\nDESCRIPTION: Demonstrates how to configure beforeMap as part of MapOptions when calling map(). This approach allows setting up a MapCallback that runs before the mapping process.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/before-map.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmapper.map(user, User, UserDto, {\n    beforeMap: (source, destination) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AutoMapper with ORM Support via npm\nDESCRIPTION: Commands to install AutoMapper with support for MikroORM or Sequelize using npm. Both ORM integrations require the classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/getting-started/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @automapper/core @automapper/classes reflect-metadata @automapper/mikro # for mikro-orm\nnpm i @automapper/core @automapper/classes reflect-metadata @automapper/sequelize # for sequelize\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Mapping Operations\nDESCRIPTION: Shows how to create mapping configurations for self-mapping scenarios, including mapping between Person to Person and Org to OrgDto with custom member mapping rules.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/misc/self-mapping.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(mapper, Person, forMember(d => d.nickname, mapFrom(s => s.nickname ?? s.name));\ncreateMap(mapper, Org, OrgDto);\n```\n\n----------------------------------------\n\nTITLE: Configuring ttypescript for Transformer Plugin in JSON\nDESCRIPTION: Shows how to configure ttypescript in tsconfig.json to use the transformer plugin, including options for specifying model file name suffixes.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...,\n    \"plugins\": [\n        {\n            \"transform\": \"@automapper/classes/transformer-plugin\",\n            \"modelFileNameSuffix\": [...]\n        }\n    ],\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AfterMap on map() Call in TypeScript\nDESCRIPTION: Shows how to set up a MapCallback using afterMap in the MapOptions when calling map(). This method has precedence over the Mapping configuration.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/after-map.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmapper.map(user, User, UserDto, {\n    afterMap: (source, destination) => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Properties Using forMember() in AutoMapper\nDESCRIPTION: This snippet demonstrates how to explicitly map nested properties from CartItem to CartItemDto using forMember() in AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forMember(\n        (destination) => destination.name,\n        mapFrom((source) => source.item.name)\n    ),\n    forMember(\n        (destination) => destination.price,\n        mapFrom((source) => source.item.price)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Properties Using forMember() in AutoMapper\nDESCRIPTION: This example demonstrates how to explicitly map nested properties from CartItem to CartItemDto using forMember() in AutoMapper.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/for-self.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMap(\n    mapper,\n    CartItem,\n    CartItemDto,\n    forMember(\n        (destination) => destination.name,\n        mapFrom((source) => source.item.name)\n    ),\n    forMember(\n        (destination) => destination.price,\n        mapFrom((source) => source.item.price)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS CLI for Transformer Plugin in JSON\nDESCRIPTION: Demonstrates how to configure nest-cli.json to use the transformer plugin in a NestJS project, with and without options.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/misc/transformer-plugin.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection\": \"@nestjs/schematics\",\n    \"sourceRoot\": \"src\",\n    \"compilerOptions\": {\n        \"plugins\": [\"@automapper/classes/transformer-plugin\"]\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"collection\": \"@nestjs/schematics\",\n    \"sourceRoot\": \"src\",\n    \"compilerOptions\": {\n        \"plugins\": [\n            {\n                \"name\": \"@automapper/classes/transformer-plugin\",\n                \"options\": {\n                    \"modelFileNameSuffix\": [\".dto.ts\", \".vm.ts\"]\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoMapper with TypeConverters in TypeScript\nDESCRIPTION: Example of mapping a Source object to a Destination object using AutoMapper with defined TypeConverters.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/mapping-configuration/type-converters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = new Source();\nsource.value1 = '123';\nsource.value2 = '10/14/1991';\nsource.value3 = 'truthy';\n\nconst destination = mapper.map(source, Destination, Source);\n/**\n * Destination {\n    value1: 123, // number\n    value2: Mon Oct 14 1991 00:00:00 GMT-0500 (Central Daylight Time), // a Date instance\n    value3; true // boolean\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Using MapPipe with Request Body in NestJS\nDESCRIPTION: Example of using MapPipe to transform request body data before it reaches the route handler.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/nestjs.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MapPipe } from '@automapper/nestjs';\n\n@Post('/from-body')\npostFromBody(@Body(MapPipe(User, UserDto)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AutoMapper Instance in TypeScript\nDESCRIPTION: Code to create and export a singleton AutoMapper instance using the classes strategy.\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentation/docs/tutorial/create-mapper.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMapper } from '@automapper/core';\nimport { classes } from '@automapper/classes';\n\n// Create and export the mapper\nexport const mapper = createMapper({\n    strategyInitializer: classes(),\n});\n```\n\n----------------------------------------\n\nTITLE: Building MikroORM AutoMapper Library with Nx\nDESCRIPTION: Command to build the @automapper/mikro library using Nx build system\nSOURCE: https://github.com/nartc/mapper/blob/main/packages/documentations/docs/api/mikro/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build mikro\n```"
  }
]