[
  {
    "owner": "qwikdev",
    "repo": "qwik",
    "content": "TITLE: Installing Qwik Using Package Managers\nDESCRIPTION: Commands to create a new Qwik project using different package managers (pnpm, npm, yarn, and bun).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create qwik@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm create qwik@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create qwik\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Optimized Counter Component Entry\nDESCRIPTION: The main component entry point after optimization, showing how the component is transformed into a lazy-loadable format.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/optimizer/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst Counter = component(qrl('./chunk-a.js', 'Counter_onMount'));\n```\n\n----------------------------------------\n\nTITLE: Advanced Catch-All Route with Path Segment Processing\nDESCRIPTION: This code demonstrates how to access and process URL segments in a catch-all route. It splits the slug parameter into an array and conditionally renders different UI based on the number of segments, enabling hierarchical documentation structures.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/docs/[...slug]/index.tsx\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation()\n  const slugArr = loc.params.slug.split('/')\n  if (params.slug.length === 2) {\n    return (\n      <h1>\n         Docs for feature {params.slug[0]} and concept {params.slug[1]}\n      </h1>\n    );\n  } else if (params.slug.length === 1) {\n    return <h1>Viewing docs for feature {params.slug[0]}</h1>;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using RouteAction$ with Form Component in QwikCity\nDESCRIPTION: This code shows how to use a routeAction$ with the Form component to handle form submissions. The Form component uses a native HTML form element for progressive enhancement, falling back to regular form submission when JavaScript is disabled.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$, Form } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(async (user) => {\n  const userID = await db.users.add(user);\n  return {\n    success: true,\n    userID,\n  };\n});\n\nexport default component$(() => {\n  const action = useAddUser();\n  return (\n    <Form action={action}>\n      <input name=\"name\" />\n      <button type=\"submit\">Add user</button>\n      {action.value?.success && <p>User added successfully</p>}\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Slot-Based Projection in Qwik Components\nDESCRIPTION: Example showing how to modify a Panel component to accept and project content from parent components using the <Slot> element. This approach allows the child component to control where content is rendered while enabling independent re-rendering of components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/projection/basic/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Example implementation would look like this:\n<Panel>\n  <div>Content from App component to be projected</div>\n</Panel>\n\n// And the Panel component implementation:\nexport const Panel = component$(() => {\n  return (\n    <div class=\"panel\">\n      <Slot />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Typed Server Response with Form Action in Qwik Modular Forms\nDESCRIPTION: Demonstrates adding a typed server response to a form action handler by specifying a second generic type parameter. This enables type-safe access to server response data on the client side.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useFormAction = formAction$<LoginForm, LoginResponse>(\n  async ({ email, password }) => {\n    // Runs on server\n    // simulating adding a user to the DB.\n    const createdUserID = await db.users.add({ email, password })\n    return {\n      status: 'success',\n      message: 'User added successfully',\n      data: { createdUserID },\n    };\n  },\n  zodForm$(formSchema)\n);\n```\n\n----------------------------------------\n\nTITLE: Form Submission with routeAction$ in Qwik\nDESCRIPTION: The Form component is used to handle user input and process form submissions in a Qwik application. It leverages the routeAction$ to handle form submission logic on the server-side. In this snippet, a login form is created, which validates user credentials and manages authentication tokens through cookies before redirecting the user to a dashboard.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Form, routeAction$ } from '@builder.io/qwik-city';\n\n// this action will be called when the form is submitted\nexport const useLoginAction = routeAction$((data, { cookies, redirect }) => {\n  if (validate(data.username, data.password)) {\n    cookies.set('auth', getAuthToken(data.username));\n    throw redirect(302, '/dashboard');\n  }\n});\n\nexport default component$(() => {\n  const login = useLoginAction();\n\n  return (\n    <Form action={login}>\n      <input type=\"text\" name=\"username\" />\n      <input type=\"password\" name=\"password\" />\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Qwik Component with State Management\nDESCRIPTION: This code snippet shows a complete Qwik component that includes state management, form handling, and API integration for fetching and displaying jokes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { routeLoader$, Form, routeAction$ } from '@builder.io/qwik-city';\n\nexport const useDadJoke = routeLoader$(async () => {\n  const response = await fetch('https://icanhazdadjoke.com/', {\n    headers: { Accept: 'application/json' },\n  });\n  return (await response.json()) as {\n    id: string;\n    status: number;\n    joke: string;\n  };\n});\n\nexport const useJokeVoteAction = routeAction$((props) => {\n  console.log('VOTE', props);\n});\n\nexport default component$(() => {\n  const isFavoriteSignal = useSignal(false);\n  // Calling our `useDadJoke` hook, will return a reactive signal to the loaded data.\n  const dadJokeSignal = useDadJoke();\n  const favoriteJokeAction = useJokeVoteAction();\n\n  return (\n    <section class=\"section bright\">\n      <p>{dadJokeSignal.value.joke}</p>\n      <Form action={favoriteJokeAction}>\n        <input type=\"hidden\" name=\"jokeID\" value={dadJokeSignal.value.id} />\n        <button name=\"vote\" value=\"up\">\n          üëç\n        </button>\n        <button name=\"vote\" value=\"down\">\n          üëé\n        </button>\n      </Form>\n      <button\n        onClick$={() => (isFavoriteSignal.value = !isFavoriteSignal.value)}\n      >\n        {isFavoriteSignal.value ? '‚ù§Ô∏è' : 'ü§ç'}\n      </button>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Qwik in TypeScript\nDESCRIPTION: This snippet demonstrates a more complex Qwik component that implements a counter. It uses useSignal for state management and shows how to handle click events in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <>\n      <p>Count: {count.value}</p>\n      <button onClick$={() => count.value++}>Increment</button>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Form Component with Validation Error Display in Qwik\nDESCRIPTION: A complete Qwik component that implements a login form with client-side validation using Modular Forms. It displays validation errors below each field when validation fails and includes the complete form structure.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const [_, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    validate: zodForm$(formSchema),\n  });\n\n  return (\n    <section class=\"p-4\">\n      <h1>Qwik Modular Forms</h1>\n      <Form class=\"flex flex-col gap-2\">\n        <Field name=\"email\">\n          {(field, props) => (\n            <>\n              <input\n                class=\"w-96\"\n                placeholder=\"enter email\"\n                {...props}\n                type=\"email\"\n              />\n              {field.error && <div>{field.error}</div>}\n            </>\n          )}\n        </Field>\n        <Field name=\"password\">\n          {(field, props) => (\n            <>\n              <input\n                class={'w-96'}\n                placeholder=\"enter password\"\n                {...props}\n                type=\"password\"\n              />\n              {field.error && <div>{field.error}</div>}\n            </>\n          )}\n        </Field>\n        <button class=\"w-max\" type=\"submit\">\n          Login\n        </button>\n      </Form>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter with useStore() in Qwik\nDESCRIPTION: Shows how to use useStore() to create a reactive object with multiple properties. The example tracks a count and name value, demonstrating how changes to either property trigger re-renders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStore } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const state = useStore({ count: 0, name: 'Qwik' });\n\n  return (\n    <>\n      <button onClick$={() => state.count++}>Increment</button>\n      <p>Count: {state.count}</p>\n      <input\n        value={state.name}\n        onInput$={(_, el) => (state.name = el.value)}\n      />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: State Management with Context API in Qwik\nDESCRIPTION: An example demonstrating Qwik's Context API for passing state to components without prop drilling. It shows how to create, provide, and consume context to share state between components in the component tree.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  createContextId,\n  useContext,\n  useContextProvider,\n  useStore,\n} from '@builder.io/qwik';\n\n// Declare a context ID\nexport const CTX = createContextId<{ count: number }>('stuff');\n\nexport default component$(() => {\n  const userData = useStore({ count: 0 });\n\n  // Provide the store to the context under the context ID\n  useContextProvider(CTX, userData);\n\n  return <Child />;\n});\n\nexport const Child = component$(() => {\n  const userData = useContext(CTX);\n  return (\n    <>\n      <button onClick$={() => userData.count++}>Increment</button>\n      <p>Count: {userData.count}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Server Data Access Hooks in Qwik\nDESCRIPTION: Provides hooks to access server-side data in Qwik applications. The functions allow for accessing data with optional default values if the requested key doesn't exist.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function useServerData<T>(key: string): T | undefined;\n\n// @public (undocumented)\nexport function useServerData<T, B = T>(key: string, defaultValue: B): T | B;\n```\n\n----------------------------------------\n\nTITLE: Interrupting Middleware Chain with Error Throwing in Qwik City\nDESCRIPTION: Demonstrates how to interrupt the middleware chain by throwing an error or response. This is typically used for authentication or authorization to prevent execution of subsequent middleware and return an appropriate status code.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onRequest: RequestHandler = async ({ next, sharedMap, json }) => {\n  const log: string[] = [];\n  sharedMap.set('log', log);\n\n  log.push('onRequest');\n  if (isLoggedIn()) {\n    // normal behavior call next middleware\n    await next();\n  } else {\n    // If not logged in throw to prevent implicit call to the next middleware.\n    throw json(404, log);\n  }\n};\n\nexport const onGet: RequestHandler = async ({ sharedMap }) => {\n  const log = sharedMap.get('log') as string[];\n  log.push('onGET');\n};\n\nfunction isLoggedIn() {\n  return false; // always return false as mock example\n}\n```\n\n----------------------------------------\n\nTITLE: Using next() to Chain Middleware Functions in Qwik City\nDESCRIPTION: Shows how to explicitly call next() to execute subsequent middleware functions in the chain and track execution flow. The example demonstrates wrapping behavior around the next middleware function using shared state.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\n// Generic function `onRequest` is executed first\nexport const onRequest: RequestHandler = async ({ next, sharedMap, json }) => {\n  const log: string[] = [];\n  sharedMap.set('log', log);\n\n  log.push('onRequest start');\n  await next(); // Execute next middleware function (onGet)\n  log.push('onRequest end');\n\n  json(200, log);\n};\n\n// Specific functions such as `onGet` are executed next\nexport const onGet: RequestHandler = async ({ next, sharedMap }) => {\n  const log = sharedMap.get('log') as string[];\n\n  log.push('onGET start');\n  // execute next middleware function\n  // (in our case, there are no more middleware functions nor components.)\n  await next();\n  log.push('onGET end');\n};\n```\n\n----------------------------------------\n\nTITLE: Using routeLoader$ to Fetch Product Details in Qwik\nDESCRIPTION: Demonstrates how to use routeLoader$ to fetch product details from an API and use the data in a Qwik component. The loader runs on the server after every navigation and makes the data available to components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useProductDetails = routeLoader$(async (requestEvent) => {\n  // This code runs only on the server, after every navigation\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product as Product;\n});\n\nexport default component$(() => {\n  // In order to access the `routeLoader$` data within a Qwik Component, you need to call the hook.\n  const signal = useProductDetails(); // Readonly<Signal<Product>>\n  return <p>Product name: {signal.value.product.name}</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a User Addition Action with Validation in Qwik\nDESCRIPTION: This snippet demonstrates the creation of a route action to add a user, utilizing Zod for validating form data. It shows how to handle optional parameters based on the request URL and returns a user ID upon success.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useAddUser = routeAction$(\n  async (user) => {\n    // The \"user\" is still strongly typed, but firstname\n    // is now optional: { firstName?: string | undefined, lastName: string }\n    const userID = await db.users.add({\n      firstName: user.firstName,\n      lastName: user.lastName,\n    });\n    return {\n      success: true,\n      userID,\n    };\n  },\n  // Zod schema is used to validate that the FormData includes \"firstName\" and \"lastName\"\n  zod$((z, ev) => {\n    // The first name is optional if the url contains the query parameter \"firstname=optional\"\n    const firstName =\n      ev.url.searchParams.get(\"firstname\") === \"optional\"\n        ? z.string().optional()\n        : z.string().nonempty();\n\n    return z.object({\n      firstName,\n      lastName: z.string(),\n    });\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Fetched Data with Resource Component in Qwik\nDESCRIPTION: This snippet demonstrates how to use the <Resource> component to render fetched data. It handles different states: pending, rejected, and resolved, providing appropriate content for each case.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/reactivity/resource/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Resource\n  value={resourceToRender}\n  onPending={() => <div>Loading...</div>}\n  onRejected={(reason) => <div>Error: {reason}</div>}\n  onResolved={(data) => <div>{data}</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Component with State and Event Handling\nDESCRIPTION: Shows how to create a Qwik component with reactive state using useSignal, handle events, and use conditional rendering and component composition.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\n// Other components can be imported and used in JSX.\nimport { MyOtherComponent } from './my-other-component';\n\ninterface MyComponentProps {\n  step: number;\n}\n\n// Components are always declared with the `component$` function.\nexport const MyComponent = component$((props: MyComponentProps) => {\n  // Components use the `useSignal` hook to create reactive state.\n  const count = useSignal(0); // { value: 0 }\n  return (\n    <>\n      <button\n        onClick$={() => {\n          // Event handlers have the `$` suffix.\n          count.value = count.value + props.step;\n        }}\n      >\n        Increment by {props.step}\n      </button>\n      <main\n        class={{\n          even: count.value % 2 === 0,\n          odd: count.value % 2 === 1,\n        }}\n      >\n        <h1>Count: {count.value}</h1>\n        <MyOtherComponent class=\"correct-way\"> {/* ‚úÖ */}\n          {count.value > 10 && <p>Count is greater than 10</p>}\n          {count.value > 10 ? <p>Count is greater than 10</p> : <p>Count is less than 10</p>}\n        </MyOtherComponent>\n      </main>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Root Route in Qwik City\nDESCRIPTION: Implementation of the root route component that handles the homepage URL (localhost:5173).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/index.tsx\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>Welcome home!</h1>\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple routeLoader$s in a Single Qwik Component\nDESCRIPTION: Illustrates how to use multiple routeLoader$s within the same file in a Qwik application. It shows two loaders: one for checking login status and another for retrieving current user data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useLoginStatus = routeLoader$(async ({ cookie }) => {\n  return {\n    isUserLoggedIn: checkCookie(cookie),\n  };\n});\n\nexport const useCurrentUser = routeLoader$(async ({ cookie }) => {\n  return {\n    user: currentUserFromCookie(cookie),\n  };\n});\n\nexport default component$(() => {\n  const loginStatus = useLoginStatus();\n  const currentUser = useCurrentUser();\n  return (\n    <section>\n      <h1>Admin</h1>\n      {loginStatus.value.isUserLoggedIn ? (\n        <p>Welcome {currentUser.value.user.name}</p>\n      ) : (\n        <p>You are not logged in</p>\n      )}\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using onSubmitCompleted$ Event Handler with RouteAction$ in QwikCity\nDESCRIPTION: This example shows how to use the onSubmitCompleted$ event handler to perform actions after a routeAction$ has successfully completed. It's used in an EditForm component to reset UI state after form submission.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, type Signal, useSignal } from '@builder.io/qwik';\nimport { Form } from '@builder.io/qwik-city';\nimport { type ListItem, useEditFromListAction } from '../../routes/index';\n\nexport interface EditFormProps {\n  item: listItem;\n  editingIdSignal: Signal<string>;\n}\n\nconst EditForm = component$(\n  ({ item, editingIdSignal }: EditFormProps) => {\n    const editAction = useEditFromListAction();\n\n    return (\n      <div>\n        <Form\n          action={editAction}\n          onSubmitCompleted$={() => {\n            editingIdSignal.value = '';\n          }}\n          spaReset\n        >\n          <input\n            type=\"text\"\n            value={item.text}\n            name=\"text\"\n            id={`edit-${item.id}`}\n          />\n          {/* Sends item.id with form data on submission. */}\n          <input type=\"hidden\" name=\"id\" value={item.id} />\n          <button type=\"submit\">\n            Submit\n          </button>\n        </Form>\n\n        <div>\n          <button onClick$={() => (editingIdSignal.value = '')}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default EditForm;\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering RouteAction$ in QwikCity\nDESCRIPTION: This example illustrates how to programmatically trigger a routeAction$ without using a Form component. The action is called through the action.submit() method, which returns a Promise that resolves when the action is completed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$ } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(async (user) => {\n  const userID = await db.users.add(user);\n  return {\n    success: true,\n    userID,\n  };\n});\n\nexport default component$(() => {\n  const action = useAddUser();\n  return (\n    <section>\n      <button\n        onClick$={async () => {\n          const { value } = await action.submit({ name: 'John' });\n          console.log(value);\n        }}\n      >\n        Add user\n      </button>\n      {action.value?.success && <p>User added successfully</p>}\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data with routeLoader$ in Qwik\nDESCRIPTION: This snippet demonstrates the use of the routeLoader$() function from @builder.io/qwik-city to fetch user data from a database before the route is rendered. It creates a server-side data loader that returns a custom hook useUserData to access the fetched data. The example also uses the head function to set document metadata, using the server-fetched data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\\nimport { routeLoader$ } from '@builder.io/qwik-city';\\n\\n// The `routeLoader$()` function is used to create a data loader that will be executed on the server before the route is rendered.\\n// The return of `routeLoader$()` is a custom use hook, which can be used to access the data returned from `routeLoader$()`.\\nexport const useUserData = routeLoader$(async (requestContext) => {\\n  const user = await db.table('users').get(requestContext.params.userID);\\n  return {\\n    name: user.name,\\n    email: user.email,\\n  };\\n});\\n\\nexport default component$(() => {\\n  // The `useUserData` hook will return a `Signal` containing the data returned from `routeLoader$()`, which will re-render the component, whenever the navigation changes, and the routeLoader$() is re-run.\\n  const userData = useUserData();\\n  return (\\n    <main>\\n      <h1>User data</h1>\\n      <p>User name: {userData.value.name}</p>\\n      <p>User email: {userData.value.email}</p>\\n    </main>\\n  );\\n});\\n\\n// Exported `head` function is used to set the document head for the route.\\nexport const head: DocumentHead = ({resolveValue}) => {\\n  // It can use the `resolveValue()` method to resolve the value from `routeLoader$()`.\\n  const user = resolveValue(useUserData);\\n  return {\\n    title: `User: \"${user.name}\"`,\\n    meta: [\\n      {\\n        name: 'description',\\n        content: 'User page',\\n      },\\n    ],\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter with useSignal() in Qwik\nDESCRIPTION: Demonstrates how to create a reactive counter component using useSignal() to track state. When the button is clicked, the count value increments and the component automatically re-renders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <button onClick$={() => count.value++}>\n      Increment {count.value}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Qwik Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic Qwik component that returns a div with 'Hello World!' text. It uses the component$ function to enable optimization and lazy loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <div>Hello World!</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Qwik Testing\nDESCRIPTION: A Vite configuration file that sets up the necessary plugins and environment variables for testing Qwik applications. It includes the Qwik optimizer, Qwik City, and TypeScript path configuration, and defines test mode global variables.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//vite.config.ts\nimport { defineConfig } from 'vite';\nimport { qwikVite } from '@builder.io/qwik/optimizer';\nimport { qwikCity } from '@builder.io/qwik-city/vite';\nimport tsconfigPaths from 'vite-tsconfig-paths';\n\nexport default defineConfig(() => {\n  return {\n    plugins: [qwikCity(), qwikVite(), tsconfigPaths()],\n    define: {\n      'globalThis.qTest': true,\n      'globalThis.qDev': true,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Qwik Components in TypeScript\nDESCRIPTION: This example shows how to compose Qwik components by creating a parent component that includes a child component. It demonstrates the automatic lazy loading of child components in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <>\n      <p>Parent Text</p>\n      <Child />\n    </>\n  );\n});\n\nconst Child = component$(() => {\n  return <p>Child Text</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Component with Signal and Event Handling in Qwik\nDESCRIPTION: Demonstrates a basic Qwik component using component$, useSignal for state management, and event handling with onClick$. Shows conditional class binding and prop usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/rendering/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport const MyComponent = component$((props) => {\n  const count = useSignal(0);\n  return (\n    <>\n      <button\n        onClick$={() => {\n          count.value = count.value + props.step;\n        }}\n      >\n        Increment by {props.step}\n      </button>\n      <main\n        class={{\n          even: count.value % 2 === 0,\n          odd: count.value % 2 === 1,\n        }}\n      >\n        <h1>Count: {count.value}</h1>\n      </main>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik: Using `useTask$` for Asynchronous Tasks\nDESCRIPTION: Illustrates how to use the `useTask$` hook in a Qwik component to create asynchronous tasks. The example demonstrates how to fetch data and update a signal, triggering a re-render.  Also shows how to track signal dependencies within the task.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, useTask$ } from '@builder.io/qwik';\n\nexport const Counter = component$(() => {\n  const page = useSignal(0);\n  const listOfUsers = useSignal([]);\n\n  // The `useTask$` hook is used to create a task.\n  useTask$(() => {\n    // The task is executed before the first render.\n    console.log('Task executed before first render');\n  });\n\n  // You can create multiple tasks, and they can be async.\n  useTask$(async (taskContext) => {\n    // Since we want to re-run the task whenever the `page` changes,\n    // we need to track it.\n    taskContext.track(() => page.value);\n    console.log('Task executed before the first render AND when page changes');\n    console.log('Current page:', page.value);\n\n    // Tasks can run async code, such as fetching data.\n    const res = await fetch(`https://api.randomuser.me/?page=${page.value}`);\n    const json = await res.json();\n\n    // Assigning to a signal will trigger a re-render.\n    listOfUsers.value = json.results;\n  });\n\n  return (\n    <>\n      <h1>Page {page.value}</h1>\n      <ul>\n        {listOfUsers.value.map((user) => (\n          <li key={user.login.uuid}>\n            {user.name.first} {user.name.last}\n          </li>\n        ))}\n      </ul>\n      <button onClick$={() => page.value++}>Next Page</button>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Event Handlers in Qwik\nDESCRIPTION: Demonstrates how to register multiple event handlers for the same event using an array of handlers in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, $ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  const print = $((ev) => console.log('CLICKED!', ev));\n  const increment = $(() => count.value++);\n\n  // The button when clicked will print \"CLICKED!\" to the console, increment the count and send an event to Google Analytics.\n  return (\n    <button\n      onClick$={[print, increment, $(() => {\n        ga.send('click', { label: 'increment' });\n      })]}\n    >\n      Count: {count.value}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS in Qwik\nDESCRIPTION: This command installs Tailwind CSS in a Qwik project.  It uses the `qwik add tailwind` command which automates the installation and setup process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Store State Management in Qwik\nDESCRIPTION: Defines useStore hook and options for creating reactive object stores in Qwik. The store can be configured with deep reactivity options to control how changes propagate.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useStore: <STATE extends object>(initialState: STATE | (() => STATE), opts?: UseStoreOptions) => STATE;\n\n// @public (undocumented)\nexport interface UseStoreOptions {\n    deep?: boolean;\n    reactive?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTask$() Hook in Qwik for State Tracking and Cleanup\nDESCRIPTION: Example demonstrating how to use the useTask$() hook in Qwik to track state changes and implement cleanup functionality. The hook executes before rendering and can set up subscriptions that automatically trigger re-execution when tracked values change.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/hooks/use-task/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n### Example\n```\n\n----------------------------------------\n\nTITLE: Qwik Routing: Defining a Basic Route\nDESCRIPTION: Shows how to define a basic route in Qwik using the file-based router. Creating an `index.tsx` file under `src/routes/` will generate a route at the corresponding URL.  Exporting the component as the default export is crucial.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>Home</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing combineRequestHandlers Utility Function in TypeScript for Qwik\nDESCRIPTION: This function combines multiple request handlers into a single handler, maintaining their execution order. It uses a recursive approach to chain the handlers, allowing each to execute before and after the next handler in the sequence.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/combine-request-handlers/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\n/**\n * Combines multiple request handlers into a single request handler.\n *\n * The handlers will be called in order:\n *\n * 1. Handler1 before next()\n * 2. Handler2 before next()\n * 3. Handler3 before next()\n * 4. Next()\n * 5. Handler3 after next()\n * 6. Handler2 after next()\n * 7. Handler1 after next()\n *\n * @public\n */\n\nexport const combineRequestHandlers = (...handlers: RequestHandler[]): RequestHandler =>\n  async (originalContext) => {\n    let lastNext = originalContext.next;\n    for (let i = handlers.length - 1; i >= 0; i--) {\n      const currentHandler = handlers[i];\n      const nextInChain = lastNext;\n      lastNext = async () => {\n        await currentHandler({ ...originalContext, next: nextInChain });\n      };\n    }\n\n    await lastNext();\n  };\n```\n\n----------------------------------------\n\nTITLE: Using useLocation() in a Qwik Component\nDESCRIPTION: This example demonstrates how to use useLocation() in a Qwik component to access route parameters and display loading state during navigation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation();\n\n  return (\n    <>\n      <h1>SKU</h1>\n      {loc.isNavigating && <p>Loading...</p>}\n      <p>pathname: {loc.url.pathname}</p>\n      <p>skuId: {loc.params.skuId}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ActionConstructor Type in Qwik City\nDESCRIPTION: Complex type definition for ActionConstructor in Qwik City that provides various overloads for creating actions with different validation options. It handles typed data validation, error handling, and optional configuration parameters.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionConstructor = {\n  <\n    OBJ extends Record<string, any> | void | null,\n    VALIDATOR extends TypedDataValidator,\n    REST extends [DataValidator, ...DataValidator[]],\n  >(\n    actionQrl: (\n      data: GetValidatorOutputType<VALIDATOR>,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    options: {\n      readonly id?: string;\n      readonly validation: [VALIDATOR, ...REST];\n    },\n  ): Action<\n    StrictUnion<\n      | OBJ\n      | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>>\n      | FailReturn<FailOfRest<REST>>\n    >,\n    GetValidatorInputType<VALIDATOR>,\n    false\n  >;\n  <\n    OBJ extends Record<string, any> | void | null,\n    VALIDATOR extends TypedDataValidator,\n  >(\n    actionQrl: (\n      data: GetValidatorOutputType<VALIDATOR>,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    options: {\n      readonly id?: string;\n      readonly validation: [VALIDATOR];\n    },\n  ): Action<\n    StrictUnion<\n      OBJ | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>>\n    >,\n    GetValidatorInputType<VALIDATOR>,\n    false\n  >;\n  <\n    OBJ extends Record<string, any> | void | null,\n    REST extends [DataValidator, ...DataValidator[]],\n  >(\n    actionQrl: (\n      data: JSONObject,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    options: {\n      readonly id?: string;\n      readonly validation: REST;\n    },\n  ): Action<StrictUnion<OBJ | FailReturn<FailOfRest<REST>>>>;\n  <\n    OBJ extends Record<string, any> | void | null,\n    VALIDATOR extends TypedDataValidator,\n    REST extends [DataValidator, ...DataValidator[]],\n  >(\n    actionQrl: (\n      data: GetValidatorOutputType<VALIDATOR>,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    options: VALIDATOR,\n    ...rest: REST\n  ): Action<\n    StrictUnion<\n      | OBJ\n      | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>>\n      | FailReturn<FailOfRest<REST>>\n    >,\n    GetValidatorInputType<VALIDATOR>,\n    false\n  >;\n  <\n    OBJ extends Record<string, any> | void | null,\n    VALIDATOR extends TypedDataValidator,\n  >(\n    actionQrl: (\n      data: GetValidatorOutputType<VALIDATOR>,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    options: VALIDATOR,\n  ): Action<\n    StrictUnion<\n      OBJ | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>>\n    >,\n    GetValidatorInputType<VALIDATOR>,\n    false\n  >;\n  <\n    OBJ extends Record<string, any> | void | null,\n    REST extends [DataValidator, ...DataValidator[]],\n  >(\n    actionQrl: (\n      form: JSONObject,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    ...rest: REST\n  ): Action<StrictUnion<OBJ | FailReturn<FailOfRest<REST>>>>;\n  <OBJ>(\n    actionQrl: (\n      form: JSONObject,\n      event: RequestEventAction,\n    ) => ValueOrPromise<OBJ>,\n    options?: {\n      readonly id?: string;\n    },\n  ): Action<StrictUnion<OBJ>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic SSG Routes in Qwik\nDESCRIPTION: Example of implementing dynamic routes for Static Site Generation using onStaticGenerate handler and component configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/static-site-generation/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation, type StaticGenerateHandler } from '@builder.io/qwik-city';\nimport { loadProductIds } from './load-product-ids';\n\nexport default component$(() => {\n  const { params } = useLocation();\n\n  return <p>Example: {params.id}</p>;\n});\n\nexport const onStaticGenerate: StaticGenerateHandler = async ({ env }) => {\n  // example of loading params for this use case\n  // every implementation will be different\n  const ids = await loadProductIds({\n    apiKey: env.get('API_KEY'),\n  });\n\n  return {\n    params: ids.map((id) => {\n      return { id };\n    }),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding New Users with Prisma and Qwik in TypeScript\nDESCRIPTION: Illustrates how to create a new user in the database using Prisma's `create` method and Qwik's `routeAction$` for handling form submissions. Includes input validation with Zod schemas, ensuring name and email fields are filled appropriately. Requires Prisma Client and Qwik City for server-side processing and Zod for validations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/prisma/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$, zod$, z, Form } from '@builder.io/qwik-city';\nimport { PrismaClient } from '@prisma/client'\n\nexport const useCreateUser = routeAction$(async (data) => {\n  const prisma = new PrismaClient();\n  const user = await prisma.user.create({\n    data,\n  });\n  return user;\n}, zod$({\n  name: z.string(),\n  email: z.string().email(),\n}));\n\nexport default component$(() => {\n  const createUserAction = useCreateUser();\n  return (\n    <section>\n      <h1>Create User</h1>\n      <Form action={createUserAction}>\n        <label>Name\n          <input name=\"name\" value={createUserAction.formData?.get('name')} />\n        </label>\n        <label>Email\n          <input name=\"email\" value={createUserAction.formData?.get('email')} />\n        </label>\n        <button type=\"submit\">Create</button>\n      </Form>\n      {createUserAction.value && (\n        <div>\n          <h2>User created successfully!</h2>\n        </div>\n      )}\n    </section>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Route Loader in Qwik\nDESCRIPTION: This snippet demonstrates the definition of an asynchronous route loader using Qwik's routeLoader$. It returns a function that simulates a delay and then resolves with random data. The loader is then used to fetch data in a Qwik component, allowing for deferred rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/streaming-deferred-loaders/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource, component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useMyData = routeLoader$(() => {\n  return async () => {\n    await delay(4_000);\n    return 'MyData ' + Math.random();\n  };\n});\n\nconst delay = (timeout: number) => {\n  return new Promise((res) => setTimeout(res, timeout));\n};\n\nexport default component$(() => {\n  const myData = useMyData();\n  return (\n    <>\n      <div>BEFORE</div>\n      <Resource\n        value={myData}\n        onResolved={(data) => <div>DATA: {data}</div>}\n      />\n      <div>AFTER</div>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions with routeAction$ in Qwik\nDESCRIPTION: This snippet uses the routeAction$() API from @builder.io/qwik-city to handle form submissions on the server. It defines a data loader to update user information in a database and returns a custom hook useUserUpdate to access update actions. The example demonstrates how to bind a form to this action store and handle submissions both programmatically and via native form behavior.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\\nimport { routeAction$, Form, zod$, z } from '@builder.io/qwik-city';\\n\\n// The `routeAction$()` function is used to create a data loader that will be executed on the server when the form is submitted.\\n// The return of `routeAction$()` is a custom use hook, which can be used to access the data returned from `routeAction$()`.\\nexport const useUserUpdate = routeAction$(async (data, requestContext) => {\\n  const user = await db.table('users').get(requestContext.params.userID);\\n  user.name = data.name;\\n  user.email = data.email;\\n  await db.table('users').put(user);\\n  return {\\n    user,\\n  };\\n}, zod$({\\n  name: z.string(),\\n  email: z.string(),\\n}));\\n\\nexport default component$(() => {\\n  // The `useUserUpdate` hook will return an `ActionStore<T>` containing the `value` returned from `routeAction$()`, and some other properties, such as `submit()`, which is used to submit the form programmatically, and `isRunning`. All of these properties are reactive, and will re-render the component whenever they change.\\n  const userData = useUserUpdate();\\n  // userData.value is the value returned from `routeAction$()`, which is `undefined` before the form is submitted.\\n  // userData.formData is the form data that was submitted, it is `undefined` before the form is submitted.\\n  // userData.isRunning is a boolean that is true when the form is being submitted.\\n  // userData.submit() is a function that can be used to submit the form programmatically.\\n  // userData.actionPath is the path to the action, which is used to submit the form.\\n  return (\\n    <main>\\n      <h1>User data</h1>\\n      <Form action={userData}>\\n        <div>\\n          <label>User name: <input name=\"name\" defaultValue={userData.formData?.get('name')} /></label>\\n        </div>\\n        <div>\\n          <label>User email: <input name=\"email\" defaultValue={userData.formData?.get('email')} /></label>\\n        </div>\\n        <button type=\"submit\">Update</button>\\n      </Form>\\n    </main>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing ServerErrors from routeLoader$ and server$ Functions in Qwik\nDESCRIPTION: This example demonstrates how to throw custom server errors with specific status codes and payloads from both route loaders and server$ functions. It also shows how to catch and handle these errors on the client side.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/error-handling/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Throw ServerErrors from a routerLoader$\nconst useProduct = routeLoader$(async (ev) => {\n  const product = await fetch('api/product/1')\n\n  if (!product) {\n    // Throw a 404 with a custom payload\n    throw new ServerError(404, 'Product not found')\n\n    // Or use the existing helper function\n    throw ev.error(404, 'Product not found')\n  }\n\n  return product\n})\n\n// Throw ServerErrors from a server$\nconst getPrices = server$(() => {\n  if (!isAuthenticated()) {\n    throw new ServerError(401, { code: 401 })\n  }\n\n  return fetch('api/product/1/prices')\n})\n\nexport default component$(() => {\n  const product = useProduct()\n\n  useVisibleTask(() => {\n    getPrices()\n      .then()\n      .catch(err => {\n        // The payload from a ServerError is deserialised as the error caught in the client\n        if (err.code === 401) {\n          // Navigate to login page\n        }\n\n        // Show generic error\n      })\n  })\n\n  return <div>Product page</div>\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handlers\nDESCRIPTION: Demonstrates how to handle click events in both frameworks. Qwik requires the onClick$ syntax for lazy loading event handlers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Button = () => {\n  return <button onClick={() => console.log('click')}>Click me</button>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Button = component$(() => {\n  return <button onClick$={() => console.log('click')}>Click me</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Qwik Components with Reactive State\nDESCRIPTION: This code demonstrates how to create a Qwik component using the component$ function with reactive state management via useSignal. It shows implementation of event handlers with $ suffix, conditional rendering, CSS modules usage, and the useVisibleTask$ hook for browser-only code execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/components/qwik-gpt/gpt.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, $, useSignal, useVisibleTask$ } from '@builder.io/qwik';\nimport US_PRESIDENTS from './us-presidents.json';\nimport { MyOtherComponent } from './my-other-component';\n\n// CSS modules are supported by default\nimport styles from './my-component.module.css';\n\ninterface MyComponentProps {\n  step: number;\n}\n\n// Components are always declared with the `component$` function.\nexport const MyComponent = component$((props: MyComponentProps) => {\n  // Components use the `useSignal` hook to create reactive state.\n  const seconds = useSignal(0); // { value: 0 }\n  const count = useSignal(0); // Signal<number>\n\n  useVisibleTask$(async (taskCtx) => {\n    // `useVisibleTask$` runs only in the browser AFTER the component is first mounted in the DOM.\n    // It's ok to inspect the DOM, or use browser APIS, initialize browser-only libraries, start an animation, or a timer...\n    const timer = setInterval(() => {\n      seconds.value = seconds.value + 1;\n    }, 1000);\n\n    taskCtx.onCleanup(() => {\n      clearInterval(timer);\n    });\n  });\n\n  // Event handler that are not inlined must be wrapped in the `$` function.\n  const toggleDarkMode = $(() => {\n    darkMode.value = !darkMode.value;\n    document.body.classList.toggle('dark-mode', darkMode.value);\n  });\n\n  return (\n    <>\n      <header>\n        <button\n          class={{\n            button: true,\n            [styles.darkMode]: darkMode.value, // Conditional classes are supported\n          }}\n          onClick$={toggleDarkMode}\n        >\n          Toggle Dark Mode\n        </button>\n      </header>\n      <main class={styles.main}>\n        <button\n          onClick$={() => {\n            // Event handlers have the `$` suffix.\n            count.value = count.value + props.step;\n          }}\n        >\n          Count: {count.value}\n        </button>\n        <MyOtherComponent>{count.value > 10 && <p>Count is greater than 10</p>}</MyOtherComponent>\n        <ul>\n          {US_PRESIDENTS.map((president) => (\n            <li key={president.id}>{president.name}</li>\n          ))}\n        </ul>\n      </main>\n      <footer>Seconds: {seconds.value}</footer>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Posting Data to Server with Qwik's routeAction$\nDESCRIPTION: Implementing a complete joke application with both data loading and form submission. This example shows how to use routeAction$ and Form to handle user interactions like voting on jokes, which works even when JavaScript is disabled.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$, Form, routeAction$ } from '@builder.io/qwik-city';\n\nexport const useDadJoke = routeLoader$(async () => {\n  const response = await fetch('https://icanhazdadjoke.com/', {\n    headers: { Accept: 'application/json' },\n  });\n  return (await response.json()) as {\n    id: string;\n    status: number;\n    joke: string;\n  };\n});\n\nexport const useJokeVoteAction = routeAction$((props) => {\n  console.log('VOTE', props);\n});\n\nexport default component$(() => {\n  // Calling our `useDadJoke` hook, will return a reactive signal to the loaded data.\n  const dadJokeSignal = useDadJoke();\n  const favoriteJokeAction = useJokeVoteAction();\n  return (\n    <section class=\"section bright\">\n      <p>{dadJokeSignal.value.joke}</p>\n      <Form action={favoriteJokeAction}>\n        <input type=\"hidden\" name=\"jokeID\" value={dadJokeSignal.value.id} />\n        <button name=\"vote\" value=\"up\">\n          üëç\n        </button>\n        <button name=\"vote\" value=\"down\">\n          üëé\n        </button>\n      </Form>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag & Drop in Qwik with TypeScript and React\nDESCRIPTION: This code snippet demonstrates a complete implementation of a drag-and-drop interface using Qwik. It creates two containers with draggable items that can be moved between them. The implementation uses Qwik's component$, useSignal, sync$, and $ APIs, along with custom event handlers for drag and drop functionality.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/drag&drop/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, sync$, $ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const items1 = useSignal([\n    { id: 1, content: 'üì± Phone' },\n    { id: 2, content: 'üíª Laptop' },\n    { id: 3, content: 'üéß Headphones' },\n  ]);\n\n  const items2 = useSignal([\n    { id: 4, content: '‚åöÔ∏è Watch' },\n    { id: 5, content: 'üñ± Mouse' },\n    { id: 6, content: '‚å®Ô∏è Keyboard' },\n  ]);\n\n  return (\n    <div class=\"flex min-h-screen justify-center gap-8 bg-gray-50 p-8\">\n      <div\n        class=\"h-[25em] w-80 rounded-xl border-2 border-dashed border-gray-300 bg-white p-6 shadow-xs transition-all duration-300 hover:border-gray-400 [&[data-over]]:border-blue-300 [&[data-over]]:bg-blue-50\"\n        preventdefault:dragover\n        preventdefault:drop\n        onDragOver$={sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.setAttribute('data-over', 'true');\n        })}\n        onDragLeave$={sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.removeAttribute('data-over');\n        })}\n        onDrop$={[\n          sync$((e: DragEvent, currentTarget: HTMLDivElement) => {\n            const id = e.dataTransfer?.getData('text');\n            currentTarget.dataset.droppedId = id;\n            currentTarget.removeAttribute('data-over');\n          }),\n          $((_, currentTarget) => {\n            const id = currentTarget.dataset.droppedId;\n            if (id) {\n              const itemId = parseInt(id);\n              const item = [...items2.value].find((i) => i.id === itemId);\n              if (item) {\n                items2.value = items2.value.filter((i) => i.id !== itemId);\n                items1.value = [...items1.value, item];\n              }\n            }\n          }),\n        ]}\n      >\n        <h3 class=\"mb-4 text-lg font-semibold text-gray-700\">Container 1</h3>\n        {items1.value.map((item) => (\n          <div\n            key={item.id}\n            data-id={item.id}\n            class=\"min-h-[62px] mb-3 cursor-move select-none rounded-lg border border-gray-200 bg-white p-4 transition-all duration-200 hover:-translate-y-1 hover:shadow-md active:scale-95\"\n            draggable\n            onDragStart$={sync$(\n              (e: DragEvent, currentTarget: HTMLDivElement) => {\n                const itemId = currentTarget.getAttribute('data-id');\n                if (e.dataTransfer && itemId) {\n                  e.dataTransfer?.setData('text/plain', itemId);\n                }\n              }\n            )}\n          >\n            <span class=\"text-lg text-gray-700\">{item.content}</span>\n          </div>\n        ))}\n      </div>\n\n      <div\n        class=\"h-[25em] w-80 rounded-xl border-2 border-dashed border-gray-300 bg-white p-6 shadow-xs transition-all duration-300 hover:border-gray-400 [&[data-over]]:border-blue-300 [&[data-over]]:bg-blue-50\"\n        preventdefault:dragover\n        preventdefault:drop\n        onDragOver$={sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.setAttribute('data-over', 'true');\n        })}\n        onDragLeave$={sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.removeAttribute('data-over');\n        })}\n        onDrop$={[\n          sync$((e: DragEvent, currentTarget: HTMLDivElement) => {\n            const id = e.dataTransfer?.getData('text');\n            currentTarget.dataset.droppedId = id;\n            currentTarget.removeAttribute('data-over');\n          }),\n          $((_, currentTarget) => {\n            const id = currentTarget.dataset.droppedId;\n            if (id) {\n              const itemId = parseInt(id);\n              const item = [...items1.value].find((i) => i.id === itemId);\n              if (item) {\n                items1.value = items1.value.filter((i) => i.id !== itemId);\n                items2.value = [...items2.value, item];\n              }\n            }\n          }),\n        ]}\n      >\n        <h3 class=\"mb-4 text-lg font-semibold text-gray-700\">Container 2</h3>\n        {items2.value.map((item) => (\n          <div\n            key={item.id}\n            data-id={item.id}\n            class=\"min-h-[62px] mb-3 cursor-move select-none rounded-lg border border-gray-200 bg-white p-4 transition-all duration-200 hover:-translate-y-1 hover:shadow-md active:scale-95\"\n            draggable\n            onDragStart$={sync$(\n              (e: DragEvent, currentTarget: HTMLDivElement) => {\n                const itemId = currentTarget.getAttribute('data-id');\n                if (e.dataTransfer && itemId) {\n                  e.dataTransfer?.setData('text/plain', itemId);\n                }\n              }\n            )}\n          >\n            <span class=\"text-lg text-gray-700\">{item.content}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using isServer and isBrowser Helpers in Qwik Components\nDESCRIPTION: Demonstrates how to import and use the environment detection helpers within a Qwik component. The example shows how to conditionally execute code in the browser while avoiding execution on the server using the useTask$ hook.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isServer, isBrowser} from '@builder.io/qwik';\n\n// inside component$\n\nuseTask$(({ track }) => {\n  track(() => interactionSig.value) <-- tracks on the client when a signal has changed.\n\n  // server code\n\n  if (isServer) return;\n\n  // client code here\n});\n\n//\n```\n\n----------------------------------------\n\nTITLE: Setting up Data Fetching with useResource$ in Qwik\nDESCRIPTION: This code demonstrates how to use useResource$ to fetch GitHub repository data reactively. It tracks changes to the github.org value, sets up proper cleanup with AbortController, and returns the repository data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/introduction/resource/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  const reposResource = useResource$<string[]>(({ track, cleanup }) => {\n    // We need a way to re-run fetching data whenever the `github.org` changes.\n    // Use `track` to trigger re-running of this data fetching function.\n    track(() => github.org);\n\n    // A good practice is to use `AbortController` to abort the fetching of data if\n    // new request comes in. We create a new `AbortController` and register a `cleanup`\n    // function which is called when this function re-runs.\n    const controller = new AbortController();\n    cleanup(() => controller.abort());\n\n    // Fetch the data and return the promises.\n    return getRepositories(github.org, controller);\n  });\n```\n\n----------------------------------------\n\nTITLE: Advanced Joke Fetching with useResource$ and AbortController\nDESCRIPTION: A comprehensive example showing how to fetch jokes from Chuck Norris API based on user input. It includes tracking query changes, implementing request cancellation with AbortController, and handling different resource states.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  useResource$,\n  Resource,\n  useSignal,\n} from '@builder.io/qwik';\n\nexport default component$(() => {\n  const query = useSignal('busy');\n  const jokes = useResource$<{ value: string }[]>(\n    async ({ track, cleanup }) => {\n      track(() => query.value);\n      // A good practice is to use `AbortController` to abort the fetching of data if\n      // new request comes in. We create a new `AbortController` and register a `cleanup`\n      // function which is called when this function re-runs.\n      const controller = new AbortController();\n      cleanup(() => controller.abort());\n\n      if (query.value.length < 3) {\n        return [];\n      }\n\n      const url = new URL('https://api.chucknorris.io/jokes/search');\n      url.searchParams.set('query', query.value);\n\n      const resp = await fetch(url, { signal: controller.signal });\n      const json = (await resp.json()) as { result: { value: string }[] };\n\n      return json.result;\n    }\n  );\n\n  return (\n    <>\n      <label>\n        Query: <input bind:value={query} />\n      </label>\n      <button>search</button>\n      <Resource\n        value={jokes}\n        onPending={() => <>loading...</>}\n        onResolved={(jokes) => (\n          <ul>\n            {jokes.map((joke, i) => (\n              <li key={i}>{joke.value}</li>\n            ))}\n          </ul>\n        )}\n      />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Closures to Lazy-Loaded References in Qwik\nDESCRIPTION: This example demonstrates how to convert a closure into a lazy-loaded reference using the $() function, which generates a QRL<Function> type. The code shows how to extract an onInput event handler to be loaded on demand and how to handle Enter key presses lazily using .invoke() with await.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/qrl/closures/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Example code would be here, but none was provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-loaded Components and Event Handlers in Qwik\nDESCRIPTION: This code example demonstrates Qwik's lazy-loading capabilities using the $ suffix marker. It shows a Counter component that uses component$ for lazy-loading the component itself and onClick$ for lazy-loading the event handler, demonstrating how Qwik only downloads code when actually needed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/progressive/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// the `$` suffix for `component` indicates that the component should be\n// lazy-loaded.\nexport const Counter = component$(() => {\n  const count = useSignal(0);\n\n  // the `$` suffix for `onClick` indicates that the implementation for\n  // the handler should be lazy-loaded.\n  return <button onClick$={() => count.value++}>{count.value}</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Using validator$ for Server-Side Validation in QwikCity\nDESCRIPTION: This code snippet demonstrates the use of `validator$()` in QwikCity for server-side validation of request events and data within a `routeAction$`. It validates a query parameter named \"secret\" and returns a success or failure object accordingly. The validation happens before the action's execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/validator/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  type RequestEvent,\n  type RequestEventAction,\n  routeAction$,\n  validator$,\n} from \"@builder.io/qwik-city\";\n\nexport const useAction = routeAction$(\n  async (data, requestEvent: RequestEventAction) => {\n    return { foo: \"bar\" };\n  },\n  validator$(async (ev: RequestEvent, data) => {\n    if (ev.query.get(\"secret\") === \"123\") {\n      return { success: true };\n    }\n    return {\n      success: false,\n      error: {\n        message: \"secret is not correct\",\n      },\n    };\n  }),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Basic Slot Usage in Qwik Components\nDESCRIPTION: Demonstrates the basic usage of Slot component to project children content into a Button component. The <Slot/> acts as a placeholder where child content will be rendered.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/slots/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, component$ } from '@builder.io/qwik';\n\nconst Button = component$(() => {\n  return (\n    <button>\n      Content: <Slot />\n    </button>\n  );\n});\n\nexport default component$(() => {\n  return (\n    <Button>\n      This goes inside {'<Button>'} component marked by{`<Slot>`}\n    </Button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Named Slots in Qwik for Multiple Content Projections\nDESCRIPTION: Shows how to use named slots with the q:slot attribute to project different content into specific locations within a component. This example creates a Tab component with title, content, and footer slots.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/slots/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, component$, useStylesScoped$ } from '@builder.io/qwik';\nimport CSS from './index.css?inline';\n\nconst Tab = component$(() => {\n  useStylesScoped$(CSS);\n  return (\n    <section>\n      <h2>\n        <Slot name=\"title\" />\n      </h2>\n      <div>\n        <Slot /> {/* default slot */}\n        <div>\n          <Slot name=\"footer\" />\n        </div>\n      </div>\n    </section>\n  );\n});\n\nexport default component$(() => {\n  return (\n    <Tab>\n      <div q:slot=\"title\">Qwik</div>\n      <div>A resumable framework for building instant web applications</div>\n      <span q:slot=\"footer\">made with ‚ù§Ô∏è by </span>\n      <a q:slot=\"footer\" href=\"https://builder.io\">\n        builder.io\n      </a>\n    </Tab>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying Scoped Styles in Qwik\nDESCRIPTION: This code demonstrates how to import CSS styles and apply them scoped to a specific Qwik component using useStylesScoped$.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from \"./index.css?inline\";\nimport { component$, useSignal, useStylesScoped$, useTask$ } from \"@builder.io/qwik\";\n\n// Inside the component\nuseStylesScoped$(styles);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control in Qwik City\nDESCRIPTION: This middleware function allows setting of cache headers for HTTP responses, providing a convenient way to manage caching strategies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({\n  cacheControl,\n  headers,\n  json,\n}) => {\n  cacheControl({ maxAge: 42, public: true });\n  const obj: Record<string, string> = {};\n  headers.forEach((value, key) => (obj[key] = value));\n  json(200, obj);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City Vercel Edge Types and Functions in TypeScript\nDESCRIPTION: This code snippet defines types and functions for integrating Qwik City with Vercel Edge. It includes interfaces for Vercel platform and options, as well as a function to create a Qwik City instance for Vercel Edge.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/vercel-edge/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityVercelEdgeOptions): (request: Request) => Promise<Response>;\n\n// @public (undocumented)\nexport interface PlatformVercel {\n}\n\n// @public (undocumented)\nexport interface QwikCityVercelEdgeOptions extends ServerRenderOptions {\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Loaders and Actions in Qwik\nDESCRIPTION: This snippet demonstrates how to create reusable routeAction$ and routeLoader$ in a shared file. It defines common actions and loaders that can be imported and used across multiple components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/re-exporting-loaders/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeAction$, routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useCommonRouteAction = routeAction$(async () => {\n  // ...\n  return { success: true, data: ['Qwik', 'Partytown'] };\n});\n\nexport const useCommonRouteLoader = routeLoader$(async () => {\n  // ...\n  return ['Mitosis', 'Builder.io'];\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialization Boundaries in Qwik Component\nDESCRIPTION: This code demonstrates serialization boundaries in Qwik components. It shows what types of data can cross a $ boundary: top-level exports are always accessible, while captured variables must be both declared as constants and serializable. The example includes cases that work properly and a case that causes a runtime error due to non-serializable data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/serialization/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const topLevel = Promise.resolve('nonserializable data');\n\nexport class MyCustomClass {\n  val: string;\n\n  constructor(val: string) {\n    this.val = val;\n  }\n}\n\nexport const Greeter = component$(() => {\n  // BEGIN component serialization boundary\n\n  // Referring to top level symbols that are exported is always allowed.\n  console.log(topLevel); // OK\n\n  const captureSerializable = 'serializable data';\n  const capturePromise = Promise.resolve('Qwik serializes promises');\n  // Instances of custom classes are not serializable.\n  const captureNonSerializable = new MyCustomClass('non serializable');\n\n  return (\n    <button\n      onClick$={() => {\n        // BEGIN onClick serialization boundary\n\n        // Referring to top level symbols that are exported is always allowed,\n        // even if the value is non-serializable.\n        console.log(topLevel); // OK\n\n        // Capturing a non-top-level variable is allowed only if:\n        // - declared as `const`\n        // - is serializable (runtime error)\n        console.log(captureSerializable); // OK\n        console.log(capturePromise); // OK\n\n        // Referring to captureNonSerializable will pass static analysis but\n        // will fail at runtime because Qwik does not know how to serialize it.\n        console.log(captureNonSerializable); // RUNTIME ERROR\n\n        // END onClick serialization boundary\n      }}\n    >\n      click\n    </button>\n  );\n  // END component serialization boundary\n});\n```\n\n----------------------------------------\n\nTITLE: Using useContextProvider in Qwik Parent Component\nDESCRIPTION: This snippet shows how to use useContextProvider to create multiple contexts in a parent component. It demonstrates providing different types of data to the context.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/context/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStore, useContextProvider } from '@builder.io/qwik';\n\nexport const Parent = component$(() => {\n\n  const qwikCityObject = useStore<GenericType>({\n    ...\n  });\n\n  useContextProvider(QwikCityContext, qwikCityObject);\n  useContextProvider(PlainArrayContext, [1, 2, 3])\n  useContextProvider(AppNameContext, \"My Qwik App\")\n\n  return (\n    <Children />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Context in Qwik\nDESCRIPTION: This example demonstrates how to create a context, provide it to child components, and consume it. It uses createContextId, useContextProvider, and useContext hooks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// Declare the Context type.\ninterface TodosStore {\n  items: string[];\n}\n// Create a Context ID (no data is saved here.)\n// You will use this ID to both create and retrieve the Context.\nexport const TodosContext = createContextId<TodosStore>(\"Todos\");\n\n// Example of providing context to child components.\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: [\"Learn Qwik\", \"Build Qwik app\", \"Profit\"],\n    }),\n  );\n\n  return <Items />;\n});\n\n// Example of retrieving the context provided by a parent component.\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Context in Qwik Components\nDESCRIPTION: This snippet demonstrates how to create a context, provide it with a value, and consume it in a child component. It uses a theme context as an example.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/context/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Signal, component$, useSignal } from '@builder.io/qwik';\nimport {\n  useContext,\n  useContextProvider,\n  createContextId,\n} from '@builder.io/qwik';\n\nexport const ThemeContext = createContextId<Signal<string>>(\n  'docs.theme-context'\n);\n\nexport default component$(() => {\n  const theme = useSignal('dark');\n  useContextProvider(ThemeContext, theme);\n  return (\n    <>\n      <button\n        onClick$={() =>\n          (theme.value = theme.value == 'dark' ? 'light' : 'dark')\n        }\n      >\n        Flip\n      </button>\n      <Child />\n    </>\n  );\n});\n\nconst Child = component$(() => {\n  const theme = useContext(ThemeContext);\n  return <div>Theme is {theme.value}</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook to Qwik project with PNPM\nDESCRIPTION: This command adds Storybook to an existing Qwik app or library project using PNPM.  It installs the necessary dependencies and adds an example component and stories. It leverages the `qwik add storybook` command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add storybook\n```\n\n----------------------------------------\n\nTITLE: Qwik Component with DOM Element Reference in TypeScript\nDESCRIPTION: This example demonstrates how to get a reference to a DOM element in a Qwik component using the ref attribute. It uses useVisibleTask$ to perform calculations on the referenced element after it's visible.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useVisibleTask$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const width = useSignal(0);\n  const height = useSignal(0);\n  const outputRef = useSignal<Element>();\n\n  useVisibleTask$(() => {\n    if (outputRef.value) {\n      const rect = outputRef.value.getBoundingClientRect();\n      width.value = Math.round(rect.width);\n      height.value = Math.round(rect.height);\n    }\n  });\n\n  return (\n    <section>\n      <article\n        ref={outputRef}\n        style={{ border: '1px solid red', width: '100px' }}\n      >\n        Change text value here to stretch the box.\n      </article>\n      <p>\n        The above red box is {height.value} pixels high and {width.value}{' '}\n        pixels wide.\n      </p>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Modular Forms Login Form Example\nDESCRIPTION: This complete example demonstrates a working login form using Modular Forms in a Qwik application. It includes form definition with Valibot validation, initial value loading, form creation with `useForm`, field rendering with the `Field` component, and form submission handling with `formAction$` and `onSubmit$`.  It showcases the integration of different components to create a fully functional form.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// @ts-nocheck\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { $, component$, type QRL } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport type { InitialValues, SubmitHandler } from '@modular-forms/qwik';\nimport { formAction$, useForm, valiForm$ } from '@modular-forms/qwik';\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.'),\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'Your password must have 8 characters or more.'),\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\nexport const useFormAction = formAction$<LoginForm>((values) => {\n  // Runs on server\n}, valiForm$(LoginSchema));\n\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    action: useFormAction(),\n    validate: valiForm$(LoginSchema),\n  });\n\n  const handleSubmit: QRL<SubmitHandler<LoginForm>> = $((values, event) => {\n    // Runs on client\n    console.log(values);\n  });\n\n  return (\n    <Form onSubmit$={handleSubmit}>\n      <Field name=\"email\">\n        {(field, props) => (\n          <div>\n            <input {...props} type=\"email\" value={field.value} />\n            {field.error && <div>{field.error}</div>}\n          </div>\n        )}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => (\n          <div>\n            <input {...props} type=\"password\" value={field.value} />\n            {field.error && <div>{field.error}</div>}\n          </div>\n        )}\n      </Field>\n      <button type=\"submit\">Login</button>\n    </Form>\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Redirect in Qwik City\nDESCRIPTION: This snippet demonstrates how to redirect an unauthenticated user from a dashboard to a login page. It checks authorization via a cookie and throws a redirect response if the user isn't authorized.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/redirects/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RequestEvent } from '@builder.io/qwik-city';\nimport { checkAuthorization } from '../auth'; // Your authorization code\nimport type { DashboardData } from '../types'; // Your types\n\nexport const onGet = async ({ cookie, redirect }: RequestEvent) => {\n  const isAuthorized = checkAuthorization(cookie.get('cookie'));\n\n  if (!isAuthorized) {\n    // User is not authorized!\n    // throw the redirect response to\n    // relocate the user to the log-in page\n    throw redirect(302, '/login');\n  } else {\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Qwik Component with $ Syntax\nDESCRIPTION: Example of creating a Qwik component using the component$ function and onClick$ event handler. This demonstrates how the $ syntax is used to signal the Qwik Optimizer to split the code into separate chunks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  console.log('render');\n  return <button onClick$={() => console.log('hello')}>Hello Qwik</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side and Server-Side Execution in Qwik\nDESCRIPTION: This snippet showcases the use of isBrowser and isServer checks along with useTask$ and useVisibleTask$ APIs to control execution of code either only in the browser or only on the server. It also demonstrates how JSX event handlers run only in the browser, as these are DOM events not applicable on the server side.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { component$, useTask$, useVisibleTask$, useSignal } from '@builder.io/qwik';\\nimport { isBrowser } from '@builder.io/qwik';\\n\\nexport default component$(() => {\\n  const ref = useSignal<Element>();\\n\\n  // useVisibleTask$ will only run in the browser\\n  useVisibleTask$(() => {\\n    // No need to check for `isBrowser` before accessing the DOM, because useVisibleTask$ will only run in the browser\\n    ref.value?.focus();\\n    document.title = 'Hello world';\\n  });\\n\\n  // useTask might run on the server, so you need to check for `isBrowser` before accessing the DOM\\n  useTask$(() => {\\n    if (isBrowser) {\\n      // This code will only run in the browser only when the component is first rendered there\\n      ref.value?.focus();\\n      document.title = 'Hello world';\\n    }\\n  });\\n\\n  return (\\n    <button\\n      ref={ref}\\n      onClick$={() => {\\n        // All event handlers are only executed in the browser, so it's safe to access the DOM\\n        ref.value?.focus();\\n        document.title = 'Hello world';\\n      }}\\n    >\\n      Click me\\n    </button>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context in Qwik Components\nDESCRIPTION: The three-step process for using context in Qwik applications: creating a unique context ID with createContextId(), providing context values with useContextProvider(), and consuming context with useContext(). This pattern helps avoid prop drilling when sharing data like application state or user information across components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/context/basic/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Step 1: Create a unique context ID\ncreateContextId();\n\n// Step 2: Provide context in a parent component\nuseContextProvider();\n\n// Step 3: Consume context in child components\nuseContext();\n```\n\n----------------------------------------\n\nTITLE: Installing styled-vanilla-extract in Qwik Project\nDESCRIPTION: Shows the command to add styled-vanilla-extract to a Qwik project using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add styled-vanilla-extract\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add styled-vanilla-extract\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add styled-vanilla-extract\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add styled-vanilla-extract\n```\n\n----------------------------------------\n\nTITLE: Accessing RequestEvent in routeLoader$ for Personalized Data\nDESCRIPTION: Demonstrates how to use the RequestEvent API within a routeLoader$ to access request details and fetch personalized data based on those details.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useProductRecommendations = routeLoader$(async (requestEvent) => {\n  console.log('Request headers:', requestEvent.request.headers);\n  console.log('Request cookies:', requestEvent.cookie);\n  console.log('Request url:', requestEvent.url);\n  console.log('Request method:', requestEvent.method);\n  console.log('Request params:', requestEvent.params);\n\n  // Use request details to fetch personalized data\n  const res = fetch(`https://.../recommendations?user=${requestEvent.params.user}`);\n  const recommendedProducts = (await res.json()) as Product[];\n\n  return recommendedProducts;\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Presidents List in React\nDESCRIPTION: This React component renders a list of US presidents and their terms in office using a static array of objects. Each president is displayed as a list item within an unordered list, and each item has a unique key combining the president's name and term years. The component requires no external dependencies and outputs a list of HTML elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Presidents() {\n  const presidents = [\n    { name: 'George Washington', years: '1789-1797' },\n    { name: 'John Adams', years: '1797-1801' },\n    { name: 'Thomas Jefferson', years: '1801-1809' },\n    { name: 'James Madison', years: '1809-1817' },\n    { name: 'James Monroe', years: '1817-1825' },\n    { name: 'John Quincy Adams', years: '1825-1829' },\n    { name: 'Andrew Jackson', years: '1829-1837' },\n    { name: 'Martin Van Buren', years: '1837-1841' },\n    { name: 'William Henry Harrison', years: '1841-1841' },\n    { name: 'John Tyler', years: '1841-1845' },\n    { name: 'James K. Polk', years: '1845-1849' },\n    { name: 'Zachary Taylor', years: '1849-1850' },\n    { name: 'Millard Fillmore', years: '1850-1853' },\n    { name: 'Franklin Pierce', years: '1853-1857' },\n    { name: 'James Buchanan', years: '1857-1861' },\n    { name: 'Abraham Lincoln', years: '1861-1865' },\n    { name: 'Andrew Johnson', years: '1865-1869' },\n    { name: 'Ulysses S. Grant', years: '1869-1877' },\n    { name: 'Rutherford B. Hayes', years: '1877-1881' },\n    { name: 'James A. Garfield', years: '1881-1881' },\n    { name: 'Chester A. Arthur', years: '1881-1885' },\n    { name: 'Grover Cleveland', years: '1885-1889' },\n  ];\n  return (\n    <ul>\n      {presidents.map((president) => (\n        <li key={president.name + president.years}>\n          {president.name} ({president.years})\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Prisma and Qwik in TypeScript\nDESCRIPTION: This TypeScript code sample demonstrates how to use Prisma's `findMany` method within a `routeLoader$` function to fetch all user records from the database. The data is then rendered in a Qwik component displaying a user's directory. It depends on Prisma Client and Qwik City to handle server-side data fetching.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/prisma/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { PrismaClient } from '@prisma/client'\n\nexport const useGetUsers = routeLoader$(async () => {\n  const prisma = new PrismaClient();\n  // example read from SQLite\n  const users = await prisma.user.findMany()\n  return users;\n});\n\nexport default component$(() => {\n  const users = useGetUsers();\n  return (\n    <section>\n      <h1>User's directory</h1>\n      <ul>\n        {users.value.map(user => (\n          <li key={user.id}>\n            <a href={`/users/${user.id}`}>{user.name} ({user.email})</a>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Component in React and Qwik\nDESCRIPTION: Shows the basic component structure difference between React and Qwik. Qwik requires the component$ wrapper and $ suffix for optimization.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const HelloWorld = () => {\n  return <div>Hello world</div>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const HelloWorld = component$(() => {\n  return <div>Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Qwik Component with Event Handling\nDESCRIPTION: This snippet demonstrates how to create a simple Qwik component with a button that logs a message when clicked. It showcases the use of the component$ function and the onClick$ event handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/faq/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  console.log('render');\n  return <button onClick$={() => console.log('hello')}>Hello Qwik</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata with head Export in Qwik City\nDESCRIPTION: Shows how to export a head object to set page metadata, including title, meta tags, and links for SEO and social sharing in a Qwik City page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/pages/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport type { DocumentHead } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  return <h1>About page</h1>;\n});\n\nexport const head: DocumentHead = {\n  // This will be used to resolve the <title> of the page\n  title: 'About page',\n  meta: [\n    {\n      name: 'description',\n      content: 'This is the about page',\n    },\n    // Open graph\n    {\n      property: 'og:title',\n      content: 'About page',\n    },\n    {\n      property: 'og:description',\n      content: 'This is the about page',\n    },\n  ],\n  links: [\n    {\n      rel: 'canonical',\n      href: 'https://example.com/about',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Client-Only Rendering of React Component in Qwik\nDESCRIPTION: Demonstrates the use of client:only to render a React component exclusively on the client side, skipping server-side rendering. This is useful for components that rely on browser-specific APIs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<MUISlider client:only></MUISlider>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Server Loader with routeLoader$() in Qwik\nDESCRIPTION: The routeLoader$() function is used to declare a server loader that can be accessed by components. It returns a custom hook for retrieving the loaded data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useGetTime = routeLoader$(async () => {\n  return { time: new Date() }\n});\nexport default component$(() => {\n  const signal = useGetTime(); // Signal<{time: Date}>\n  console.log('Date': signal.value.time);\n  return (\n    <div>{signal.value.time.toISOString()}</div>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Bundle Optimization in vite.config.ts\nDESCRIPTION: Example configuration for manually controlling symbol distribution across bundles in Qwik applications. This allows developers to specify which symbols should be grouped together in the same chunk for optimal loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/bundle/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig(() => {\n  const routesDir = resolve('src', 'routes');\n  return {\n    // ...\n    qwikVite({\n      entryStrategy: {\n        type: 'smart',\n        manual: {\n          ...bundle('bundleA', [\n              's_I5CyQjO9FjQ',\n              's_NsnidK2eXPg',\n              's_kDw0latGeM0',\n          ]),\n          ...bundle('bundleB', [\n              's_vXb90XKAnjE',\n              's_hYpp40gCb60',\n          ]),\n          ...bundle('bundleC', [\n              's_AqHBIVNKf34',\n              's_oEksvFPgMEM',\n              's_eePwnt3YTI8',\n          ]),\n        },\n      },\n    }),\n  };\n});\n\nfunction bundle(bundleName: string, symbols: string[]) {\n  return symbols.reduce((obj, key) => {\n    // Sometimes symbols are prefixed with `s_`, remove it.\n    obj[key.replace('s_', '')] = obj[key] = bundleName;\n    return obj;\n  }, {} as Record<string, string>);\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Counter with Conditional Rendering in Qwik\nDESCRIPTION: Shows a more advanced counter implementation with visibility toggle and conditional rendering. Demonstrates how Qwik manages subscriptions and selective re-rendering based on state changes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/reactivity/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ComplexCounter = component$(() => {\n  const store = useStore({ count: 0, visible: true });\n\n  return (\n    <>\n      <button onClick$={() => (store.visible = !store.visible)}>\n        {store.visible ? 'hide' : 'show'}\n      </button>\n      <button onClick$={() => store.count++}>increment</button>\n      {store.visible ? <p>{store.count}</p> : null}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping React Components with Qwikify in TypeScript\nDESCRIPTION: This snippet demonstrates how to convert a React component into a Qwik component using the qwikify$() function, requiring React JSX syntax. It imports the qwikify$ function from the Qwik React package and uses it to create a Qwik-compliant version of an existing React component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This pragma is required so that React JSX is used instead of Qwik JSX\n/** @jsxImportSource react */\nimport { qwikify$ } from '@builder.io/qwik-react';\n\n// An existing React component\nfunction Greetings() {\n  return <div>Hello from React</div>;\n}\n\n// Qwik component wrapping the React component\nexport const QGreetings = qwikify$(Greetings);\n```\n\n----------------------------------------\n\nTITLE: Querying All Users with Qwik and Drizzle ORM\nDESCRIPTION: This snippet demonstrates the use of `routeLoader$` to fetch all users from the database using Drizzle ORM. It establishes a connection to the database and retrieves the users using the `findMany` method.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/drizzle/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx {7} /Drizzle/ title=\"src/routes/users/index.tsx\"\nimport { component$ } from \"@builder.io/qwik\";\nimport { routeLoader$ } from \"@builder.io/qwik-city\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport Database from \"better-sqlite3\";\nimport { schema } from \"../../../drizzle/schema\";\n\nexport const useGetUsers = routeLoader$(async () => {\n  const sqlite = new Database(\"./drizzle/db/db.sqlite\");\n  const db = drizzle(sqlite, { schema });\n  const users = await db.query.users.findMany();\n  return users;\n});\n\nexport default component$(() => {\n  const users = useGetUsers();\n  return (\n    <section>\n      <h1>User's directory</h1>\n      <ul>\n        {users.value.map((user) => (\n          <li key={user.id}>\n            <a href={`/users/${user.id}`}> \n              {user.name} ({user.email})\n            </a>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic RTL/LTR Direction Setting in QwikCity\nDESCRIPTION: Shows how to dynamically set HTML direction attribute based on route parameters, specifically for handling right-to-left languages. Utilizes serverData to access route parameters and determine the appropriate text direction.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/html-attributes/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function (opts: RenderToStreamOptions) {\n  // With this route structure src/routes/[locale]/post/[id]/index.tsx\n  const isRTL = opts.serverData?.qwikcity.params.locale === 'ar';\n\n  return renderToStream(<Root />, {\n    manifest,\n    ...opts,\n    containerAttributes: {\n      dir: isRTL ? 'rtl' : 'ltr'\n      ...opts.containerAttributes,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials Authentication Provider with QwikAuth\nDESCRIPTION: Sets up the Qwik Auth.js plugin with Credentials as the authentication provider. Includes a sample authorize function that validates user credentials and returns a user object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\";\nimport Credentials from \"@auth/qwik/providers/credentials\";\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Credentials({\n        async authorize(credentials, req) {\n          // Add logic here to look up the user from the credentials supplied\n          const user = {\n            id: 1,\n            name: \"Mike\",\n            email: \"mike@example.com\",\n          };\n\n          return user;\n        },\n      }),\n    ],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Qwik Event Listener Functions Table\nDESCRIPTION: Table showing the available event listener functions in Qwik and their descriptions. Includes useOn() for component elements, useOnDocument() for document object, and useOnWindow() for window object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/events/programmatic/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function          | Description                                               |\n| ----------------- | --------------------------------------------------------- |\n| `useOn()`         | Listen to events on the current component's root element. |\n| `useOnDocument()` | Listen to events on the `document` object.                |\n| `useOnWindow()`   | Listen to events on the `window` object.                  |\n```\n\n----------------------------------------\n\nTITLE: Advanced Slot Example with Editable Projected Content\nDESCRIPTION: Demonstrates a collapsible component that conditionally projects editable content, showcasing how parent and child components can independently update without forcing re-renders of each other.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/slots/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, component$, useSignal } from '@builder.io/qwik';\n\nexport const Collapsible = component$(() => {\n  const isOpen = useSignal(true);\n\n  return (\n    <div>\n      <h1 onClick$={() => (isOpen.value = !isOpen.value)}>\n        {isOpen.value ? '‚ñº' : '‚ñ∂Ô∏é'}\n        <Slot name=\"title\" />\n      </h1>\n      {isOpen.value && <Slot />}\n    </div>\n  );\n});\n\nexport default component$(() => {\n  const title = useSignal('Qwik');\n  const description = useSignal(\n    'A resumable framework for building instant web applications'\n  );\n  return (\n    <>\n      <label>Title</label>\n      <input bind:value={title} type=\"text\" />\n      <label>Description</label>\n      <textarea bind:value={description} cols={50} />\n      <hr />\n      <Collapsible>\n        <span q:slot=\"title\">{title}</span>\n        {description}\n      </Collapsible>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Response in Qwik City\nDESCRIPTION: This example demonstrates how to manually write to the HTTP response stream using the getWritableStream() method. It creates a streaming endpoint that sends messages at intervals using a TextEncoder.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/endpoints/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async (requestEvent) => {\n  const writableStream = requestEvent.getWritableStream();\n  const writer = writableStream.getWriter();\n  const encoder = new TextEncoder();\n\n  writer.write(encoder.encode('Hello World\\n'));\n  await wait(100);\n  writer.write(encoder.encode('After 100ms\\n'));\n  await wait(100);\n  writer.write(encoder.encode('After 200ms\\n'));\n  await wait(100);\n  writer.write(encoder.encode('END'));\n  writer.close();\n};\n\nconst wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n```\n\n----------------------------------------\n\nTITLE: Reading and updating signal values in Qwik\nDESCRIPTION: Example of how to read and update signal values using the value property. Shows a button that increments a counter and displays the current value.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/hooks/use-signal/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  <button onClick$={() => intStore.value++}>Click me</button>\n  <p>{intStore.value}</p>\n</>\n```\n\n----------------------------------------\n\nTITLE: Adding LeafletJS Map Dependency with PNPM\nDESCRIPTION: This command adds the LeafletJS map as a dependency to your Qwik project using PNPM. It executes a Qwik add script to install the necessary packages and set up the required files for map integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/leaflet-map/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm run qwik add leaflet-map\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Request Logging Middleware in Qwik City\nDESCRIPTION: This code demonstrates a simple onRequest middleware function that logs all incoming requests. It shows how to access request information and use the next() function to continue the middleware chain.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n \nexport const onRequest: RequestHandler = async ({next, url}) => {\n  console.log('Before request', url);\n  await next();\n  console.log('After request', url);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useResource$ for Data Fetching in Qwik\nDESCRIPTION: Example showing how to use useResource$ to perform asynchronous data fetching that responds to signal changes, with proper cleanup and resource handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_119\n\nLANGUAGE: tsx\nCODE:\n```\nconst Cmp = component$(() => {\n  const cityS = useSignal(\"\");\n\n  const weatherResource = useResource$(async ({ track, cleanup }) => {\n    const cityName = track(cityS);\n    const abortController = new AbortController();\n    cleanup(() => abortController.abort(\"cleanup\"));\n    const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n      signal: abortController.signal,\n    });\n    const data = await res.json();\n    return data as { temp: number };\n  });\n\n  return (\n    <div>\n      <input name=\"city\" bind:value={cityS} />\n      <Resource\n        value={weatherResource}\n        onResolved={(weather) => {\n          return <div>Temperature: {weather.temp}</div>;\n        }}\n      />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Server Function Integration with Client JSX in Qwik\nDESCRIPTION: Demonstrates how Qwik allows collocating server and client code using the server$ function. This example shows a button with an onClick handler that runs code on the server, illustrating Qwik's module extraction capabilities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<button onClick={server$(() => console.log('runs in the server'))}>\n   Runs in server\n</button>\n```\n\n----------------------------------------\n\nTITLE: Registering Click Event Handler in Qwik\nDESCRIPTION: Demonstrates how to register a simple click event handler on a button element using the onClick$ attribute in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<button onClick$={() => alert('CLICKED!')}>click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Repositories with useResource$ in Qwik\nDESCRIPTION: This snippet shows how to use useResource$ to fetch GitHub repository data. It demonstrates tracking changes, using AbortController for cleanup, and returning the fetched data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/reactivity/resource/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst reposResource = useResource$<string[]>(({ track, cleanup }) => {\n  // We need a way to re-run fetching data whenever the `github.org` changes.\n  // Use `track` to trigger re-running of this data fetching function.\n  track(() => github.org);\n\n  // A good practice is to use `AbortController` to abort the fetching of data if\n  // new request comes in. We create a new `AbortController` and register a `cleanup`\n  // function which is called when this function re-runs.\n  const controller = new AbortController();\n  cleanup(() => controller.abort());\n\n  // Fetch the data and return the promises.\n  return getRepositories(github.org, controller);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useResource\nDESCRIPTION: Example showing how to use useResource$ to perform asynchronous data fetching when tracked values change, handling different resource states.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Weather = component$(() => {\\n  const store = useStore({\\n    cityName: 'NYC',\\n  });\\n\\n  const weatherResource = useResource$(async ({ track, cleanup }) => {\\n    const cityName = track(() => store.cityName);\\n    const controller = new AbortController();\\n    cleanup(() => controller.abort());\\n    const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\\n      signal: controller.signal,\\n    });\\n    const data = await res.json();\\n    return data as WeatherData;\\n  });\\n\\n  return (\\n    <div>\\n      <input\\n        type=\\\"text\\\"\\n        value={store.cityName}\\n        onInput$={(ev, el) => {\\n          store.cityName = el.value;\\n        }}\\n      />\\n      <Resource\\n        value={weatherResource}\\n        onPending={() => <div>Loading...</div>}\\n        onRejected={(error) => <div>Error: {error.message}</div>}\\n        onResolved={(weather) => {\\n          return (\\n            <div>\\n              <div>Temp: {weather.temp}</div>\\n              <div>Conditions: {weather.conditions}</div>\\n            </div>\\n          );\\n        }}\\n      />\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with State Dependencies\nDESCRIPTION: Demonstrates data fetching that responds to state changes. Shows how Qwik's useTask$ differs from React's useEffect for async operations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Fetch() {\n  const [url, setUrl] = useState('https://api.github.com/repos/QwikDev/qwik');\n  const [responseJson, setResponseJson] = useState(undefined);\n\n  useEffect(() => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((json) => setResponseJson(json));\n  }, [url]);\n\n  return (\n    <>\n      <p>{responseJson?.name} has {responseJson?.stargazers_count} ‚ú®'s</p>\n      <input name=\"url\" value={url} onChange={(e) => setUrl(e.target.value)} />\n    </>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Fetch = component$(() => {\n  const url = useSignal('https://api.github.com/repos/QwikDev/qwik');\n  const responseJson = useSignal(undefined);\n\n  useTask$(async ({ track }) => {\n    track(() => url.value);\n    const res = await fetch(url.value);\n    const json = await res.json();\n    responseJson.value = json;\n  });\n\n  return (\n    <>\n      <p>{responseJson.value?.name} has {responseJson.value?.stargazers_count} ‚ú®'s</p>\n      <input name=\"url\" bind:value={url} />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Code Execution in Qwik\nDESCRIPTION: This snippet details how to execute specific code only on the server using Qwik's server$ and routeLoader$ functions. It includes examples of data fetching operations and how to execute server-specific logic such as encrypting data on the server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { component$, useTask$ } from '@builder.io/qwik';\\nimport { server$, routeLoader$ } from '@builder.io/qwik/qwik-city';\\nimport { isServer } from '@builder.io/qwik';\\n\\n\\nexport const useGetProducts = routeLoader$((requestEvent) => {\\n  // This code will only run on the server\\n  const db = await openDB(requestEvent.env.get('DB_PRIVATE_KEY'));\\n  const product = await db.table('products').select();\\n  return product;\\n})\\n\\nconst encryptOnServer = server$(function(message: string) {\\n  // `this` is the `requestEvent\\n  const secretKey = this.env.get('SECRET_KEY');\\n  const encryptedMessage = encrypt(message, secretKey);\\n  return encryptedMessage;\\n});\\n\\nexport default component$(() => {\\n  useTask$(() => {\\n    if (isServer) {\\n      // This code will only run on the server only when the component is first rendered in the server\\n    }\\n  });\\n\\n  return (\\n    <>\\n      <button\\n        onClick$={server$(() => {\\n          // This code will only run on the server when the button is clicked\\n        })}\\n      >\\n        Click me\\n      </button>\\n\\n      <button\\n        onClick$={() => {\\n          // This code will call the server function, and wait for the result\\n          const encrypted = await encryptOnServer('Hello world');\\n          console.log(encrypted);\\n        }}\\n      >\\n        Click me\\n      </button>\\n    </>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SSR Components in Qwik\nDESCRIPTION: Definitions for server-side rendering components in Qwik, including SSRComment, SSRRaw, SSRStream, and SSRStreamBlock. These components help with generating and controlling server-rendered content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SSRComment: FunctionComponent<{\n    data: string;\n}>;\n\nexport const SSRRaw: FunctionComponent<{\n    data: string;\n}>;\n\nexport const SSRStream: FunctionComponent<SSRStreamProps>;\n\nexport const SSRStreamBlock: FunctionComponent<{\n    children?: any;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Leaflet Map Component in Qwik\nDESCRIPTION: This code defines a Qwik component that integrates LeafletJS to display an interactive map with markers and boundaries. It uses Qwik signals to manage the map's location and marker data, allowing for dynamic updates. The component leverages Leaflet's API to create the map, add tile layers, markers, and GeoJSON boundaries.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/leaflet-map/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"import {\\n  component$,\\n  noSerialize,\\n  useSignal,\\n  useStyles$,\\n  useVisibleTask$,\\n  type Signal,\\n} from '@builder.io/qwik';\\nimport * as L from 'leaflet';\\nimport leafletStyles from 'leaflet/dist/leaflet.css?inline';\\n\\n// Sample data json and geojson\\n\\nexport const fvg: any = {\\n  type: 'FeatureCollection',\\n  name: 'FVG_line_0_001',\\n  crs: { type: 'name', properties: { name: 'urn:ogc:def:crs:OGC:1.3:CRS84' } },\\n  features: [\\n    {\\n      type: 'Feature',\\n      properties: { ID_OGG: '08020060000', NAME: 'GEOJSON NAME' },\\n      geometry: {\\n        type: 'MultiLineString',\\n        coordinates: [\\n          [\\n            [12.4188, 46.3528],\\n            [12.4178, 46.3547],\\n            [12.4284, 46.3517],\\n            [12.4425, 46.3599],\\n            [12.4488, 46.3605],\\n            [12.4554, 46.3652],\\n            [12.4552, 46.3672],\\n            [12.4513, 46.3706],\\n          ],\\n        ],\\n      },\\n    },\\n  ],\\n};\\n\\nconst markers: Record<string, MarkersProps[]> = {\\n  FDA: [\\n    {\\n      name: \\\"Terzo d'Aquileia\\\",\\n      label: 'TRZ',\\n      lat: '45.770946',\\n      lon: '13.31338',\\n    },\\n    {\\n      name: 'Musi',\\n      label: 'MUS',\\n      lat: '46.312663',\\n      lon: '13.274682',\\n    },\\n  ],\\n  FVG: [\\n    {\\n      name: 'Borgo Grotta Gigante',\\n      label: 'BGG',\\n      lat: '45.709385',\\n      lon: '13.764681',\\n    },\\n    {\\n      name: 'Muggia',\\n      label: 'MGG',\\n      lat: '45.610495',\\n      lon: '13.752682',\\n    },\\n  ],\\n};\\n\\nexport default component$(() => {\\n  useStyles$(\\n    leafletStyles +\\n      `\\n    .marker-label {\\n      color: red;\\n      font-weight: 700;\\n    }\\n  `\\n  );\\n\\n  const groupSig = useSignal('FDA');\\n  const currentLocation = useSignal<LocationsProps>({\\n    name: 'Udine',\\n    point: [46.06600881056668, 13.237724558490601],\\n    zoom: 10,\\n    marker: true,\\n  });\\n\\n  return (\\n    <>\\n      Change markers:{'  '}\\n      <select name=\\\"group\\\" class=\\\"leaflet-ctrl\\\" bind:value={groupSig}>\\n        <option value=\\\"FDA\\\">FDA</option>\\n        <option value=\\\"FVG\\\">FVG</option>\\n      </select>\\n      <LeafletMap\\n        location={currentLocation}\\n        markers={markers[groupSig.value]}\\n        group={groupSig}\\n      ></LeafletMap>\\n    </>\\n  );\\n});\\n\\n// The properties (props) used in the `LeafletMap` component and other related components are defined as follows:\\n\\nexport interface MapProps {\\n  location: Signal<LocationsProps>;\\n  markers?: MarkersProps[];\\n  group?: Signal<string>;\\n}\\n\\nexport interface LocationsProps {\\n  name: string;\\n  point: [number, number];\\n  zoom: number;\\n  marker: boolean;\\n}\\n\\nexport interface MarkersProps {\\n  name: string;\\n  label: string;\\n  lat: string;\\n  lon: string;\\n}\\n\\n/*\\nThe `LeafletMap` component leverages the Leaflet library to render an interactive map. \\nThis component can be configured with various properties (props) to set the central location, add markers, and draw boundaries.\\nIn the `LeafletMap` component, both the location and the group signal are tracked.\\nThis ensures that when the signal changes, the server function is called, and the map is updated with the new data.\\n*/\\n\\nexport const LeafletMap = component$<MapProps>(\\n  ({ location, markers, group }) => {\\n    const mapContainerSig = useSignal<L.Map>();\\n\\n    useVisibleTask$(async ({ track }) => {\\n      track(location);\\n      group && track(group);\\n\\n      if (mapContainerSig.value) {\\n        mapContainerSig.value.remove();\\n      }\\n\\n      // center location\\n      const { value: locationData } = location;\\n      const centerPosition = locationData.point;\\n\\n      // layers\\n      const markersLayer = new L.LayerGroup();\\n      const bordersLayer = new L.LayerGroup();\\n\\n      // map\\n      const map = L.map('map', {\\n        layers: [markersLayer, bordersLayer],\\n      }).setView(centerPosition, locationData.zoom || 14);\\n      L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\\n        maxZoom: 19,\\n        attribution:\\n          '&copy; <a href=\\\"http://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>',\\n      }).addTo(map);\\n\\n      // center position marker\\n\\n      const qwikMarker = L.divIcon({\\n        html: ` \\n          <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"30.12\\\" height=\\\"32\\\" viewBox=\\\"0 0 256 272\\\">\\n            <path fill=\\\"#18B6F6\\\"\\n              d=\\\"m224.803 271.548l-48.76-48.483l-.744.107v-.532L71.606 120.252l25.55-24.667l-15.01-86.12l-71.222 88.247c-12.136 12.226-14.372 32.109-5.642 46.781l44.5 73.788c6.813 11.376 19.163 18.18 32.47 18.074l22.038-.213z\\\" />\\n            <path fill=\\\"#AC7EF4\\\"\\n              d=\\\"m251.414 96.01l-9.795-18.075l-5.11-9.25l-2.023-3.615l-.212.213l-26.829-46.463C200.738 7.125 188.176-.105 174.55 0l-23.527.639l-70.158.213c-13.307.106-25.444 7.123-32.151 18.5l-42.69 84.632L82.353 9.25l100.073 109.937l-17.779 17.968l10.646 86.015l.107-.213v.213h-.213l.213.212l8.304 8.081l40.348 39.445c1.704 1.595 4.472-.318 3.3-2.339l-24.911-49.014l43.436-80.273l1.383-1.595c.533-.638 1.065-1.276 1.491-1.914c8.517-11.589 9.688-27.112 2.662-39.764\\\" />\\n            <path fill=\\\"#FFF\\\" d=\\\"M182.746 118.763L82.353 9.358l14.266 85.695l-25.55 24.773L175.08 223.065l-9.368-85.696z\\\" />\\n          </svg>\\n        `,\\n        className: '',\\n        iconSize: [24, 40],\\n      });\\n\\n      locationData.marker &&\\n        L.marker(centerPosition, { icon: qwikMarker })\\n          .bindPopup(`Udine`)\\n          .addTo(map);\\n\\n      // add boundaries to map\\n      L.geoJSON(fvg, { style: { color: '#005DA4' } }).addTo(bordersLayer);\\n\\n      // add markers to map\\n      const markersList = await markers;\\n      markersList &&\\n        markersList.map((m) => {\\n          const myIcon = L.divIcon({\\n            className: 'marker-point',\\n            html: `<div class=\\\"marker-label\\\" title=\\\"${m.name}\\\" >${m.label}</div>`,\\n          });\\n          L.marker([+m.lat, +m.lon], { icon: myIcon }).addTo(markersLayer);\\n        });\\n\\n      mapContainerSig.value = noSerialize(map);\\n    });\\n\\n    return <div id=\\\"map\\\" style={{ height: '25rem' }}></div>;\\n  }\\n);\\n\"\n```\n\n----------------------------------------\n\nTITLE: Basic Server Time and User Form Implementation in Qwik\nDESCRIPTION: Demonstrates basic usage of loader$ for fetching server time and action$ for handling user form submission. Shows how to combine both server-side operations with client-side rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useGetServerTime = loader$(() => {\n  // This code runs in the server\n  return new Date();\n});\n\nexport const useAddUser = action$(async (user) => {\n  const userID = await db.users.add(user);\n  return {\n    success: true,\n    userID,\n  };\n});\n\nexport default component$(() => {\n  const serverTime = useGetServerTime();\n  const addUser = useAddUser();\n  return (\n    <div>\n      <p>Server time: {serverTime.value.toISOString()}</p>\n      <Form action={addUser}>\n        <input name=\"name\" />\n        <button type=\"submit\">Add user</button>\n        {addUser.value?.success && <div>User added successfully</div>}\n      </Form>\n    </div>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Object in Qwik Event Handlers\nDESCRIPTION: Shows how to access and use the Event object in a Qwik event handler to get information about mouse position.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const position = useSignal<{ x: number; y: number }>();\n  return (\n    <div\n      onClick$={(event) => (position.value = { x: event.x, y: event.y })}\n      style=\"height: 100vh\"\n    >\n      <p>\n        Clicked at: ({position.value?.x}, {position.value?.y})\n      </p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Post Data with useResource$ in Qwik\nDESCRIPTION: A basic example showing how to fetch data from JSONPlaceholder API using useResource$. The component tracks changes to a postId signal and fetches the corresponding post title, displaying different UI states using the Resource component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  Resource,\n  useResource$,\n  useSignal,\n} from '@builder.io/qwik';\n\nexport default component$(() => {\n  const postId = useSignal('23');\n\n  const postTitle = useResource$<string>(async ({ track }) => {\n    // it will run first on mount (server), then re-run whenever postId changes (client)\n    // this means this code will run on the server and the browser\n    track(() => postId.value);\n\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/posts/${postId.value}`\n    );\n    const data = await response.json();\n    return data.title as string;\n  });\n\n  return (\n    <>\n      <input type=\"number\" bind:value={postId} max={100} min={0} />\n      <h1>Post#{postId}:</h1>\n      <Resource\n        value={postTitle}\n        onPending={() => <p>Loading...</p>}\n        onResolved={(title) => <h2>{title}</h2>}\n      />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Context in Qwik Child Component\nDESCRIPTION: This snippet demonstrates how to use the useContext hook to consume multiple contexts in a child component. It shows accessing different types of context data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/context/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useContext } from '@builder.io/qwik';\n\nexport const Children = component$(() => {\n  const qwikCityObject = useContext(QwikCityContext);\n  const plainArray = useContext(PlainArrayContext);\n  const appName = useContext(AppNameContext);\n\n  return (\n    <div>Child components can use any of the provided values, such as {appName}</div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Components in Qwik\nDESCRIPTION: Shows how to create a polymorphic component in Qwik that can render different element types based on props. The example includes a Poly component that defaults to a div but can be changed to other elements or components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst Poly = component$(\n  <C extends string | FunctionComponent = 'div'>({\n    as,\n    ...props\n  }: { as?: C } & PropsOf<string extends C ? 'div' : C>) => {\n    const Cmp = as || 'div';\n    return (\n      <Cmp {...props}>\n        <Slot />\n      </Cmp>\n    );\n  }\n);\n\nexport const TestComponent = component$(() => {\n  // These all work with correct types\n  return (\n    <>\n      <Poly>Hello from a div</Poly>\n      <Poly as=\"a\" href=\"/blog\">\n        Blog\n      </Poly>\n      <Poly as=\"input\" onInput$={(ev, el) => console.log(el.value)} />\n      <Poly as={OtherComponent} someProp />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Qwik Debouncer Utility Function\nDESCRIPTION: A reusable debouncer hook that manages function execution timing using Qwik's signal and QRL primitives. Allows delaying function calls to optimize performance and reduce unnecessary processing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/debouncer/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useDebouncer = <A extends readonly unknown[], R>(\n  fn: QRL<(...args: A) => R>,\n  delay: number,\n): QRL<(...args: A) => void> => {\n  const timeoutId = useSignal<number>();\n\n  return $((...args: A): void => {\n    window.clearTimeout(timeoutId.value);\n    timeoutId.value = window.setTimeout((): void => {\n      void fn(...args);\n    }, delay);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Head Configuration in Qwik City\nDESCRIPTION: Demonstrates how to create a dynamic head configuration using a function that returns a DocumentHead object, allowing programmatic setting of title, meta, and link tags based on route data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/pages/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport type { DocumentHead } from '@builder.io/qwik-city';\n\nexport const useJoke = routeLoader$(async (requestEvent) => {\n  // Fetch a joke from a public API\n  const jokeId = requestEvent.params.jokeId;\n  const response = await fetch(`https://api.chucknorris.io/jokes/${jokeId}`);\n  const joke = await response.json();\n  return joke;\n});\n\n// Now we can export a function that returns a DocumentHead object\nexport const head: DocumentHead = ({resolveValue, params}) => {\n  const joke = resolveValue(useJoke);\n  return {\n    title: `Joke \"${joke.title}\"`,\n    meta: [\n      {\n        name: 'description',\n        content: joke.text,\n      },\n      {\n        name: 'id',\n        content: params.jokeId,\n      },\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Complex Forms with Zod in Qwik Route Action\nDESCRIPTION: Using Zod to validate complex form structures with nested arrays and objects in a Qwik route action.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const action = routeAction$(\n  async (person) => {\n    return { success: true, person, };\n  },\n  // Zod schema is used to validate the FormData\n  zod$({\n    person: z.array(\n      z.object({\n        name: z.string(),\n        email: z.string().email(),\n        address: z.object({\n          street: z.string(),\n          city: z.string(),\n          state: z.string(),\n          zip: z.coerce.number()\n        }),\n        pets: z.array(z.string())\n      })\n    ),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Protection with Auth.js Session Check\nDESCRIPTION: Request handler function that protects routes by checking for a valid session. If no valid session exists, the user is redirected to the sign-in page with the original URL as the callback destination.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const onRequest: RequestHandler = (event) => {\n  const session: Session | null = event.sharedMap.get('session');\n  if (!session || new Date(session.expires) < new Date()) {\n    throw event.redirect(302, `/auth/signin?callbackUrl=${event.url.pathname}`);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in tailwind.config.js\nDESCRIPTION: This code snippet shows how to enable dark mode in the `tailwind.config.js` file.  Setting `darkMode` to `\"class\"` allows Tailwind CSS to toggle dark mode based on a CSS class applied to the `<html>` element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  content: [\"./src/**/*.{js,ts,jsx,tsx,mdx}\"],\n  darkMode: \"class\",\n  theme: {},\n  plugins: [],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Layout Component in Qwik\nDESCRIPTION: This snippet shows how to create a child layout component in Qwik. It also uses the Slot component to render nested content within the layout.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <section>\n      <Slot /> {/* <== Child layout/route inserted here */}\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example in Qwik City\nDESCRIPTION: Example showing the basic directory layout for Qwik City routing including static routes, dynamic routes, and catch-all routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ contact/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.mdx         # https://example.com/contact\n    ‚îú‚îÄ‚îÄ about/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.md          # https://example.com/about\n    ‚îú‚îÄ‚îÄ docs/\n    ‚îÇ   ‚îî‚îÄ‚îÄ [id]/\n    ‚îÇ       ‚îî‚îÄ‚îÄ index.ts      # https://example.com/docs/1234\n    ‚îÇ                         # https://example.com/docs/anything\n    ‚îú‚îÄ‚îÄ [...catchall]/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx         # https://example.com/anything/else/that/didnt/match\n    ‚îÇ\n    ‚îî‚îÄ‚îÄ layout.tsx            # This layout is used for all pages\n```\n\n----------------------------------------\n\nTITLE: Using useComputed$() for Derived State in Qwik\nDESCRIPTION: Demonstrates how to create computed values that automatically update when dependencies change. The example creates a capitalized version of a name input that updates reactively.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useComputed$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const name = useSignal('Qwik');\n  const capitalizedName = useComputed$(() => {\n    // it will automatically reexecute when name.value changes\n    return name.value.toUpperCase();\n  });\n\n  return (\n    <>\n      <input type=\"text\" bind:value={name} />\n      <p>Name: {name.value}</p>\n      <p>Capitalized name: {capitalizedName.value}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Cache Control Configurations with Qwik-City in TypeScript\nDESCRIPTION: Illustrates tailored cache control settings for specific routes in a Qwik City application using TypeScript, providing both examples of overriding caching defaults and bypassing caching entirely for certain pages.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/caching/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\n\nexport const onGet: RequestHandler = async ({ cacheControl }) => {\n  cacheControl({\n    public: true,\n    maxAge: 5,\n    sMaxAge: 10,\n    staleWhileRevalidate: 60 * 60 * 24 * 365,\n  });\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\n\n// Override caching for /dashboard pages to not cache as they are unique per visitor\nexport const onGet: RequestHandler = async ({ cacheControl }) => {\n  cacheControl({\n    public: false,\n    maxAge: 0,\n    sMaxAge: 0,\n    staleWhileRevalidate: 0,\n  });\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\n\nexport const onGet: RequestHandler = async ({ cacheControl, url }) => {\n  // Only our homepage is public and should be CDN cached. Other pages are unique per visitor\n  if (url.pathname === '/') {\n    cacheControl({\n      public: true,\n      maxAge: 5,\n      staleWhileRevalidate: 60 * 60 * 24 * 365,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Static Site Generation Adapter in Qwik\nDESCRIPTION: Shell commands for adding the static site adapter to a Qwik project using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/static-site-generation/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add static\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add static\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add static\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add static\n```\n\n----------------------------------------\n\nTITLE: Complete Qwik Form Component with Validation Error Handling\nDESCRIPTION: A full Qwik component implementing a form with complex validation and error handling, showing how to match form field errors with their corresponding inputs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useAddPersonAction = routeAction$(\n  async person => {\n    console.log(person);\n    return { success: true, person };\n  },\n  zod$({\n    person: z.object({\n      name: z.string().min(2),\n      email: z.string().email(),\n      address: z.object({\n        street: z.string().min(2),\n        city: z.string().min(2),\n        state: z.string().min(2),\n        zip: z.coerce.number(),\n      }),\n      pets: z.array(z.string().min(2)),\n    }),\n  })\n);\n\nexport default component$(() => {\n  const testAction = useAddPersonAction();\n\n  const renderError = (errorMessage: string | undefined) => {\n    if (!errorMessage) return null;\n    return <p class=\"error\">{errorMessage}</p>;\n  };\n\n  return (\n    <Form action={testAction}>\n      <input type=\"email\" name=\"person.email\" placeholder=\"Email\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.email\"])}\n      <input type=\"text\" name=\"person.name\" placeholder=\"Name\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.name\"])}\n      <input type=\"text\" name=\"person.address.street\" placeholder=\"Street\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.address.street\"])}\n      <input type=\"text\" name=\"person.address.city\" placeholder=\"City\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.address.city\"])}\n      <input type=\"text\" name=\"person.address.state\" placeholder=\"State\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.address.state\"])}\n      <input type=\"text\" name=\"person.address.zip\" placeholder=\"Zip\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.address.zip\"])}\n      <input type=\"text\" name=\"person.pets.0\" placeholder=\"Pet 1\" />\n      {renderError(testAction.value?.fieldErrors?.[\"person.pets[]\"]?.[0])}\n      <button>Send</button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Values with routeLoader$ in Qwik\nDESCRIPTION: Illustrates how to use the fail method in routeLoader$ to return a failed value and override the HTTP status code. This is useful for handling error scenarios and returning appropriate error messages.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useProductDetails = routeLoader$(async (requestEvent) => {\n  const product = await db.from('products').filter('id', 'eq', requestEvent.params.productId);\n  if (!product) {\n    // Return a failed value to indicate that product was not found\n    return requestEvent.fail(404, {\n      errorMessage: 'Product not found'\n    });\n  }\n  return {\n    productName: product.name\n  };\n});\n\nexport default component$(() => {\n  const product = useProductDetails();\n\n  if (product.value.errorMessage) {\n    // Render UI for failed value\n    return <div>{product.value.errorMessage}</div>;\n  }\n  return <div>Product name: {product.value.productName}</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Server-side Environment Variables in Qwik Server Functions\nDESCRIPTION: Examples of accessing server-side environment variables in various Qwik server functions like routeLoader$, routeAction$, server$, and endpoint handlers using the RequestEvent object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  routeLoader$,\n  routeAction$,\n  server$,\n  type RequestEvent,\n} from '@builder.io/qwik-city';\n\nexport const onGet = (requestEvent: RequestEvent) => {\n  console.log(requestEvent.env.get('DB_PRIVATE_KEY'));\n};\n\nexport const onPost = (requestEvent: RequestEvent) => {\n  console.log(requestEvent.env.get('DB_PRIVATE_KEY'));\n};\n\nexport const useAction = routeAction$(async (_, requestEvent) => {\n  console.log(requestEvent.env.get('DB_PRIVATE_KEY'));\n});\n\nexport const useLoader = routeLoader$(async (requestEvent) => {\n  console.log(requestEvent.env.get('DB_PRIVATE_KEY'));\n});\n\nexport const serverFunction = server$(function () {\n  // `this` is the `RequestEvent` object\n  console.log(this.env.get('DB_PRIVATE_KEY'));\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Qwik\nDESCRIPTION: Shows different methods of conditional rendering in Qwik using ternary operators and logical AND operator.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/rendering/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const show = useSignal(false);\n  return (\n    <>\n      <button onClick$={() => show.value = !show.value}>Toggle</button>\n      {show.value ? <h1>Visible</h1> : <h1>Hidden</h1>}\n      {show.value && <div>Only show when it's visible</div>}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Error Responses in Qwik City\nDESCRIPTION: This middleware function demonstrates how to throw an error as part of the response, allowing the API to convey error states effectively.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ error }) => {\n  throw error(500, 'ERROR: Demonstration of an error response.');\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reverse Proxy in Qwik City\nDESCRIPTION: This code snippet shows how to create a reverse proxy using the fetch() method to request data from another server and then send the response back to the client using the send() method.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/endpoints/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ send, url }) => {\n  const response = await fetch(\n    new URL('/demo/qwikcity/middleware/json/', url)\n  );\n  send(response.status, await response.text());\n};\n```\n\n----------------------------------------\n\nTITLE: Deep Reactivity with useStore() in Qwik\nDESCRIPTION: Demonstrates how useStore() tracks deep reactivity in nested objects and arrays. The example shows how mutating nested properties or adding items to an array will trigger component re-renders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStore } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const store = useStore({\n    nested: {\n      fields: { are: 'also tracked' },\n    },\n    list: ['Item 1'],\n  });\n\n  return (\n    <>\n      <p>{store.nested.fields.are}</p>\n      <button\n        onClick$={() => {\n          // Even though we are mutating a nested object, this will trigger a re-render\n          store.nested.fields.are = 'tracked';\n        }}\n      >\n        Clicking me works because store is deep watched\n      </button>\n      <br />\n      <button\n        onClick$={() => {\n          // Because store is deep watched, this will trigger a re-render\n          store.list.push(`Item ${store.list.length + 1}`);\n        }}\n      >\n        Add to list\n      </button>\n      <ul>\n        {store.list.map((item, key) => (\n          <li key={key}>{item}</li>\n        ))}\n      </ul>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik: Using `useVisibleTask$` for Client-Side Tasks\nDESCRIPTION: Demonstrates the usage of the `useVisibleTask$` hook in a Qwik component to create a task that runs only on the client after the component is mounted in the DOM. The example shows how to initialize a timer and clean it up when the component is unmounted.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, useVisibleTask$ } from '@builder.io/qwik';\n\nexport const Clock = component$(() => {\n  const time = useSignal(0);\n\n  // The `useVisibleTask$` hook is used to create a task that runs eagerly on the client.\n  useVisibleTask$((taskContext) => {\n    // Since this VisibleTask is not tracking any signals, it will only run once.\n\n    const interval = setInterval(() => {\n      time.value = new Date();\n    }, 1000);\n\n    // The `cleanup` function is called when the component is unmounted, or when the task is re-run.\n    taskContext.cleanup(() => clearInterval(interval));\n  });\n\n  return (\n    <>\n      <h1>Clock</h1>\n      <h1>Seconds passed: {time.value}</h1>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Control with Qwik-City in TypeScript\nDESCRIPTION: Demonstrates setting up default cache control headers for all responses in a Qwik City application, using TypeScript. It configures 'stale-while-revalidate' to serve cached responses by default and limits the frequency of server revalidation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/caching/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { component\\$, Slot } from \"@builder.io/qwik\";\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\n\nexport const onGet: RequestHandler = async ({ cacheControl }) => {\n  cacheControl({\n    // Always serve a cached response by default, up to a week stale\n    staleWhileRevalidate: 60 * 60 * 24 * 7,\n    // Max once every 5 seconds, revalidate on the server to get a fresh version of this page\n    maxAge: 5,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Reusing Event Handlers in Qwik Components\nDESCRIPTION: Illustrates how to create a reusable event handler using the $() function and use it in multiple elements or events in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, $ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  const increment = $(() => count.value++);\n  return (\n    <>\n      <button onClick$={increment}>Increment</button>\n      <p>Count: {count.value}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Product Detail Page in Qwik City\nDESCRIPTION: This code demonstrates a dynamic product details page that extracts the productId from URL parameters. It uses the useLocation hook to access route parameters and display product-specific information based on the URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/products/[productId]/index.tsx\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation();\n  return <h1>Details about product {loc.params.productId}</h1>\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Routing: Using Route Parameters\nDESCRIPTION: Illustrates how to create dynamic routes with route parameters in Qwik. The `useLocation` hook is used to access the route parameters. The example shows how to display a user ID from the route.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation();\n  return (\n    <main>\n      {loc.isNavigating && <p>Loading...</p>}\n      <h1>User: {loc.params.userID}</h1>\n      <p>Current URL: {loc.url.href}</p>\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using preventDefault and stopPropagation in Qwik\nDESCRIPTION: Demonstrates how to use preventdefault and stoppropagation attributes in Qwik to handle default behavior and event propagation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <a\n      href=\"/docs\"\n      preventdefault:click // This will prevent the default behavior of the \"click\" event.\n      stoppropagation:click // This will stop the propagation of the \"click\" event.\n      onClick$={() => {\n        // event.PreventDefault() will not work here, because handler is dispatched asynchronously.\n        alert('Do something else to simulate navigation...');\n      }}\n    >\n      Go to docs page\n    </a>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ActionStore Type in Qwik City\nDESCRIPTION: Type definition for ActionStore which represents the state and functionality of a form action. It includes properties for tracking status, form data, and submission state, plus a submit method that handles different input types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionStore<RETURN, INPUT, OPTIONAL extends boolean = true> = {\n  readonly actionPath: string;\n  readonly isRunning: boolean;\n  readonly status?: number;\n  readonly formData: FormData | undefined;\n  readonly value: RETURN | undefined;\n  readonly submit: QRL<\n    OPTIONAL extends true\n      ? (form?: INPUT | FormData | SubmitEvent) => Promise<ActionReturn<RETURN>>\n      : (form: INPUT | FormData | SubmitEvent) => Promise<ActionReturn<RETURN>>\n  >;\n  readonly submitted: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying State in Qwik Component\nDESCRIPTION: This snippet shows how to create a button that toggles a boolean state value when clicked in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<button\n onClick$={() => {\n   isFavoriteSignal.value = !isFavoriteSignal.value;\n }}>\n  {isFavoriteSignal.value ? '‚ù§Ô∏è' : 'ü§ç'}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using useTask$ for State Tracking in Qwik\nDESCRIPTION: This code snippet shows how to use the useTask$ hook to track state changes and execute both isomorphic and server-side code in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nuseTask$(({ track }) => {\n  track(() => isFavoriteSignal.value);\n  console.log('FAVORITE (isomorphic)', isFavoriteSignal.value);\n  server$(() => {\n    console.log('FAVORITE (server)', isFavoriteSignal.value);\n  })();\n});\n```\n\n----------------------------------------\n\nTITLE: Authorization Middleware with Component Rendering in Qwik City\nDESCRIPTION: Demonstrates how to implement authorization middleware that redirects unauthenticated users before rendering a component. Shows the integration between middleware and component rendering in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onRequest: RequestHandler = async ({ redirect }) => {\n  if (!isLoggedIn()) {\n    throw redirect(308, '/login');\n  }\n};\n\nexport default component$(() => {\n  return <div>You are logged in.</div>;\n});\n\nfunction isLoggedIn() {\n  return true; // Mock login as true\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with QwikCityMockProvider in TypeScript\nDESCRIPTION: The QwikCityMockProvider component is used to simulate the Qwik City context during testing. It allows components to be tested in isolation while preserving the context that Qwik City components rely on. It is specifically designed for use in test files and is capable of managing various route-related functionalities automatically. This example uses the vitest library for testing purposes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createDOM } from '@builder.io/qwik/testing';\nimport { QwikCityMockProvider } from '@builder.io/qwik-city';\nimport { test, expect } from 'vitest';\n\n// Component with two props. Uses <Link> internally. Omitted for brevity\nimport { Card } from './card';\n\nconst cases = [\n  {text: 'qwik', link:'https://qwik.dev/docs/api'}, \n  {text: 'vitest', link: 'https://vitest.dev'}\n];\n\ntest.each(cases)('should render card with %s %s', async ({text, link}) => {\n  const { screen, render } = await createDOM();\n  await render(\n    <QwikCityMockProvider>\n      <Card text={text} link={link} />\n    </QwikCityMockProvider>,\n  );\n  expect(screen.innerHTML).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple RequestEvent Information in server$() in Qwik\nDESCRIPTION: Shows how to access and use multiple RequestEvent information (environment variables, cookies, URL, and headers) within a single server$() function in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const handleRequest = server$(\n  function () {\n    // Access environment variable\n    const dbKey = this.env.get('DB_KEY');\n\n    // Access cookies\n    const userSession = this.cookie.get('user-session')?.value;\n    if (!userSession) {\n      this.cookie.set('user-session', 'new-session-id', { path: '/', httpOnly: true });\n    }\n\n    // Access request URL\n    const requestUrl = this.url;\n\n    // Access headers\n    const userAgent = this.headers.get('User-Agent');\n\n    console.log('Environment Variable:', dbKey);\n    console.log('User Session:', userSession);\n    console.log('Request URL:', requestUrl);\n    console.log('User-Agent:', userAgent);\n\n    return {\n      dbKey,\n      userSession,\n      requestUrl,\n      userAgent\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik Components with Signals and Event Handling in TSX\nDESCRIPTION: This snippet demonstrates the creation of a Counter component and a Layout component using Qwik. It showcases the use of signals for state management and event handling for user interactions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-2-coming-soon/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport const Counter = component$(() => {\n  const count = useSignal(123);\n  return (\n    <>\n      Count: {count.value}! \n      <button onClick$={() => count.value++}>+1</button>\n    </>\n  );\n});\n\nexport const Layout = component$(() => {\n  return (\n    <main>\n      <Slot />\n    </main>\n  );\n});\n\n// Think of it as: <main> <Counter/> </main>\n```\n\n----------------------------------------\n\nTITLE: Managing Locale in Qwik City\nDESCRIPTION: This middleware sets or retrieves the current locale based on the request's 'accept-language' header, allowing localization of content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onRequest: RequestHandler = async ({ locale, request }) => {\n  const acceptLanguage = request.headers.get('accept-language');\n  const [languages] = acceptLanguage?.split(';') || ['?', '?'];\n  const [preferredLanguage] = languages.split(',');\n  locale(preferredLanguage);\n};\n\nexport const onGet: RequestHandler = async ({ locale, json }) => {\n  json(200, { locale: locale() });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Qwik and Drizzle ORM\nDESCRIPTION: This snippet demonstrates how to add a new user to the database using the `routeAction$` API and `Form`. It validates input data using Zod and inserts the new user into the database using Drizzle ORM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/drizzle/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx {7-9} /Drizzle/ title=\"src/routes/create/index.tsx\"\nimport { component$ } from \"@builder.io/qwik\";\nimport { routeAction$, zod$, z, Form } from \"@builder.io/qwik-city\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport Database from \"better-sqlite3\";\nimport { schema } from \"../../../drizzle/schema\";\nexport const useCreateUser = routeAction$(\n  async (data) => {\n    const sqlite = new Database(\"./drizzle/db/db.sqlite\");\n    const db = drizzle(sqlite, { schema });\n    const user = await db.insert(schema.users).values(data);\n    return user;\n  },\n  zod$({\n    name: z.string(),\n    email: z.string().email(),\n  }),\n);\n\nexport default component$(() => {\n  const createUserAction = useCreateUser();\n  return (\n    <section>\n      <h1>Create User</h1>\n      <Form action={createUserAction}>\n        <label>\n          Name\n          <input name=\"name\" value={createUserAction.formData?.get(\"name\")} />\n        </label>\n        <label>\n          Email\n          <input name=\"email\" value={createUserAction.formData?.get(\"email\")} />\n        </label>\n        <button type=\"submit\">Create</button>\n      </Form>\n      {createUserAction.value && (\n        <div>\n          <h2>User created successfully!</h2>\n        </div>\n      )}\n    </section>\n  );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Page Component in Qwik City\nDESCRIPTION: Simple example of a page component using index.tsx.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>Hello World</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Correctly Implementing Event Handlers in Qwik\nDESCRIPTION: Shows the correct way to implement event handlers in Qwik components by using the $ function to wrap the handler implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, $ } from '@builder.io/qwik';\n\nexport const HelloWorld = component$(() => {\n  const click = $(() => console.log());\n  return (\n    <button onClick$={click}>log it</button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Window Events with useOnWindow\nDESCRIPTION: Example demonstrating how to listen to window events using the useOnWindow$ hook.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const WindowListener = component$(() => {\\n  const store = useStore({\\n    width: 0,\\n    height: 0,\\n  });\\n\\n  useOnWindow(\\n    'resize',\\n    $(() => {\\n      store.width = window.innerWidth;\\n      store.height = window.innerHeight;\\n    })\\n  );\\n\\n  return (\\n    <div>\\n      Window size: {store.width} x {store.height}\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Using server$() for Server-Side Greetings in Qwik\nDESCRIPTION: Demonstrates how to use server$() to create a server-side greeting function and use it in a Qwik component. The example shows binding input values and calling the server function on button click.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, $ } from '@builder.io/qwik';\nimport { server$ } from '@builder.io/qwik-city';\n\n// By wrapping a function with `server$()` we mark it to always\n// execute on the server. This is a form of RPC mechanism.\nexport const serverGreeter = server$(\n  function (firstName: string, lastName: string) {\n    const greeting = `Hello ${firstName} ${lastName}`;\n    console.log('Prints in the server', greeting);\n    return greeting;\n  }\n);\n\nexport default component$(() => {\n  const firstName = useSignal('');\n  const lastName = useSignal('');\n\n  return (\n    <section>\n      <label>First name: <input bind:value={firstName} /></label>\n      <label>Last name: <input bind:value={lastName} /></label>\n\n      <button\n        onClick$={\n          $(async () => {\n            const greeting = await serverGreeter(firstName.value, lastName.value);\n            alert(greeting);\n          })\n        }\n      >\n        greet\n      </button>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Framer Motion in a Qwik Project\nDESCRIPTION: This command installs the Framer Motion library as a dependency in a Qwik project that already has React integration set up.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install framer-motion\n```\n\n----------------------------------------\n\nTITLE: Optimal Implementation of reactive template using Qwik\nDESCRIPTION: This snippet demonstrates how to optimize a Qwik component by inlining the signal evaluation within the template, preventing unnecessary re-renders when the signal changes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const signal = useSignal(0);\n  return (\n    <div>\n      <button onClick$={() => signal.value++}>+</button>\n      <button onClick$={() => signal.value--}>-</button>\n        <div>\n          {signal.value > 0 ? 'Bigger than zero' : 'Smaller than zero'} - Current\n          value: {signal.value}\n        </div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Validators in QwikCity Route Action\nDESCRIPTION: This example demonstrates how to apply multiple validators to a `routeAction$` in QwikCity. Validators are executed in reverse order. The execution order is `validator3`, then `validator2`, and lastly `validator1`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/validator/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst validator1 = validator$(/*...*/)\nconst validator2 = validator$(/*...*/)\nconst validator3 = validator$(/*...*/)\n\nexport const useAction = routeAction$(\n  async (data, requestEvent: RequestEventAction) => {\n    return { foo: \"bar\" };\n  },\n  validator1,\n  validator2,\n  validator3, // will be executed first\n);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Qwik City RequestHandler\nDESCRIPTION: This code snippet demonstrates how to access HTTP request headers within a Qwik City RequestHandler. It creates a request handler function that extracts all headers from the request object and returns them as a JSON response.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ json, request }) => {\n  const obj: Record<string, string> = {};\n  request.headers.forEach((v, k) => (obj[k] = v));\n  json(200, { headers: obj });\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Redirects with External Data Source in Qwik City\nDESCRIPTION: This example demonstrates how to handle multiple redirects using an external data source like a CMS or API. It fetches redirect rules, matches the current URL against them, and applies the appropriate redirect with the correct status code.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/redirects/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from \"@builder.io/qwik-city\";\n\nexport const onGet: RequestHandler = async ({ url, redirect }) => {\n  // qwik city request caching ...\n\n  // example external data source\n  async function fetchRules(): Promise<\n    { source: string; destination: string; permanent: boolean }[]\n  > {\n    // Fetch data from a CMS or API, and add more rules as needed.\n    // Filter and map your data to make it easier to handle, as simulated here:\n    return [\n      { source: \"/old-path\", destination: \"/new-path\", permanent: true },\n      {\n        source: \"/another-old-path\",\n        destination: \"/another-new-path\",\n        permanent: false,\n      },\n    ];\n  }\n\n  const redirectRules = await fetchRules();\n  const redirectUrl = redirectRules.find((rule) => {\n    if (url.pathname.endsWith(\"/\")) {\n      return rule.source + \"/\" === url.pathname;\n    }\n\n    return rule.source === url.pathname;\n  });\n\n  if (redirectUrl) {\n    throw redirect(redirectUrl.permanent ? 308 : 307, redirectUrl.destination);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Open Graph Image Response in Qwik\nDESCRIPTION: This TypeScript snippet demonstrates how to generate an Open Graph image using the og-img package by creating a server endpoint that returns an ImageResponse. It utilizes the html tagged template literal for defining the image content and fetches a font from a URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/og-img/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\nimport { fetchFont, ImageResponse, html } from 'og-img';\n\nexport const onGet: RequestHandler = async ({ send }) => {\n  send(\n    new ImageResponse(\n      // Use Tailwind CSS or style attribute\n      html`\n        <div tw=\"text-4xl text-green-700\" style=\"background-color: tan\">\n          Hello, world!\n        </div>\n      `,\n      {\n        width: 1200,\n        height: 600,\n        fonts: [\n          {\n            name: 'Roboto',\n            // Use `fs` (Node.js only) or `fetch` to read font file\n            data: await fetchFont(\n              'https://www.example.com/fonts/roboto-400.ttf'\n            ),\n            weight: 400,\n            style: 'normal',\n          },\n        ],\n      }\n    )\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useStore for Reactive State Management in Qwik\nDESCRIPTION: This code snippet demonstrates how to use the useStore() function in Qwik to create a reactive state object. The counter object is wrapped with useStore() to enable dependency tracking and automatic re-rendering of components when the state changes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/store/basic/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, useStore } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const counter = useStore({ count: 0 });\n\n  return (\n    <>\n      <button onClick$={() => counter.count++}>Increment</button>\n      Count: {counter.count}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Algolia Search Component in Qwik\nDESCRIPTION: Creates a Qwik component that integrates Algolia search functionality. It includes a search input, search execution, and result display. The component uses Algolia's API to perform searches and display results in a styled list.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/algolia-search/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $, component$, useSignal, useStylesScoped$ } from '@builder.io/qwik';\n\ntype AlgoliaResult = {\n  hits: {\n    type: string;\n    anchor?: string;\n    content?: string;\n    url: string;\n  }[];\n};\n\nexport default component$(() => {\n  useStylesScoped$(`\n    .search {\n      font-size: 100%;\n      width: calc(100% - 38px);\n      border-radius: 0.5rem;\n      border: 1px black solid;\n      padding: 1rem;\n      color: black;\n      outline: none;\n    }\n\n    .search-button {\n      border: none;\n      padding: 6px 0px;\n      cursor: pointer;\n      background-color: transparent;\n      position: absolute;\n      right: 2.4rem;\n      padding: 0.85rem 0.5rem 0.4rem 0.5rem;\n      outline: none;\n    }\n\n    .list {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n\n    .list li {\n      counter-increment: cardCount;\n      display: flex;\n      color: white;\n      margin-top: 1rem;\n      margin-bottom: 1rem;\n      max-width: 500px;\n    }\n\n    .list li::before {\n      content: counter(cardCount, decimal-leading-zero);\n      background: white;\n      color: var(--cardColor);\n      font-size: 2em;\n      font-weight: 700;\n      transform: translateY(calc(-1 * 1rem));\n      margin-right: calc(-1 * 1rem);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      padding-inline: 0.5em;\n      border: 1px solid black;\n    }\n\n    .list li .content {\n      background-color: var(--cardColor);\n      display: grid;\n      padding: 0.5em calc(1em + 1.5rem) 0.5em calc(1em + 1rem);\n      grid-template-areas:\n        \"icon title\"\n        \"icon text\";\n      gap: 0.25em;\n      clip-path: polygon(\n        0 0,\n        calc(100% - 1.5rem) 0,\n        100% 50%,\n        calc(100% - 1.5rem) 100%,\n        calc(100% - 1.5rem) calc(100% + 1rem),\n        0 calc(100% + 1rem)\n      );\n    }\n\n    .list li .content .title {\n      grid-area: title;\n      font-size: 1.25em;\n    }\n\n    .list li .content .text {\n      grid-area: text;\n      color: black;\n    }\n  `);\n  const termSignal = useSignal('');\n  const hitsSig = useSignal<AlgoliaResult['hits']>([]);\n\n  const onSearch = $(async (query: string) => {\n    const algoliaURL = new URL(\n      `/1/indexes/${import.meta.env.VITE_ALGOLIA_INDEX}/query`,\n      `https://${import.meta.env.VITE_ALGOLIA_APP_ID}-dsn.algolia.net`\n    );\n    const response = await fetch(algoliaURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Algolia-Application-Id': import.meta.env.VITE_ALGOLIA_APP_ID!,\n        'X-Algolia-API-Key': import.meta.env.VITE_ALGOLIA_SEARCH_KEY!,\n      },\n      body: JSON.stringify({ query }),\n    });\n    const algoliaResult: AlgoliaResult = await response.json();\n    hitsSig.value = algoliaResult.hits;\n  });\n\n  return (\n    <div>\n      <div style=\"margin: 1rem;\">\n        <div style=\"position: relative;\">\n          <input\n            class=\"search\"\n            placeholder=\"Algolia search: type here and press enter\"\n            bind:value={termSignal}\n            onKeyDown$={(e) => {\n              if (e.key === 'Enter') {\n                onSearch(termSignal.value);\n              }\n            }}\n          />\n          <button\n            type=\"submit\"\n            class=\"search-button\"\n            onClick$={() => onSearch(termSignal.value)}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"32\"\n              height=\"32\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                fill=\"currentColor\"\n                d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5A6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5S14 7.01 14 9.5S11.99 14 9.5 14z\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div class=\"list\">\n        {hitsSig.value.map(({ anchor, content, url }, key) => (\n          <li\n            key={key}\n            style={`--cardColor:${key % 2 === 0 ? '#19b6f6' : '#ac7ef4'}`}\n          >\n            <div class=\"content\">\n              <div class=\"title\">\n                {(anchor || content || url || '').substring(0, 30)}\n              </div>\n              <a class=\"text\" href={url}>\n                Documentation link\n              </a>\n            </div>\n          </li>\n        ))}\n      </div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Managing State with useStore\nDESCRIPTION: Example illustrating how to use the useStore hook to create reactive state that can be tracked across serializations in a counter component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$(() => {\\n  const store = useStore({\\n    count: 0,\\n  });\\n\\n  return (\\n    <div>\\n      <p>Count: {store.count}</p>\\n      <p>\\n        <button onClick$={() => store.count++}>Increment</button>\\n      </p>\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Details using Prisma and Qwik in TypeScript\nDESCRIPTION: Showing detailed information about a specific user using `routeLoader$` and Prisma's `findUnique` method to retrieve data based on a dynamic URL parameter. This TypeScript code checks the database for a user with the given `userId` and handles cases where the user is not found by setting a 404 status.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/prisma/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { PrismaClient } from '@prisma/client'\n\nexport const useGetUser = routeLoader$(async ({params, status}) => {\n  const userId = parseInt(params['userId'], 10);\n  const prisma = new PrismaClient();\n  const user = await prisma.user.findUnique({where: {id: userId}});\n  if (!user) {\n    // Set the status to 404 if the user is not found\n    status(404);\n  }\n  return user;\n});\n\nexport default component$(() => {\n  const user = useGetUser();\n  return (\n    <section>\n      <h1>User detail</h1>\n      {user.value ? (\n        <>\n          <p>Name: {user.value.name}</p>\n          <p>Email: {user.value.email}</p>\n        </>\n      ) : (\n        <p>User not found</p>\n      )}\n    </section>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Server-side Form Validation with Zod in Qwik\nDESCRIPTION: Demonstrates how to use Zod for server-side form validation in Qwik using routeAction$ and zod$. This snippet shows how to define a schema for user data and validate it on the server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeAction$, zod$, z } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(\n  async (user) => {\n    // `user` is typed { name: string }\n    const userID = await db.users.add(user);\n    return {\n      success: true,\n      userID,\n    };\n  },\n  zod$({\n    name: z.string(),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Route Actions vs Global Actions in Qwik\nDESCRIPTION: This snippet explains the distinction between routeAction$() and globalAction$(), including the optimal usage of each based on whether the action requires user data or needs to be shared across routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { routeAction$ } from '@builder.io/qwik-city';\n\nexport const useChangePassword = routeAction$((data) => {\n  // ...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { globalAction$ } from '@builder.io/qwik-city';\n\nexport const useLogin = globalAction$((data) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining PageModule interface in Qwik\nDESCRIPTION: This snippet defines the `PageModule` interface, extending the `RouteModule` interface. It includes properties like `default`, `head`, `headings`, and `onStaticGenerate`, which define the structure of a page module in a Qwik City application.  These properties can be used for rendering the page, setting the document head, providing content headings, and handling static generation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PageModule extends RouteModule\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Responses in Qwik City\nDESCRIPTION: This middleware function allows creating a JSON response easily, setting the appropriate headers and serializing the data to JSON format automatically.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ json }) => {\n  json(200, { hello: 'world' });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Events with State in Qwik\nDESCRIPTION: This snippet demonstrates how to use sync$() and $() together to handle events synchronously while still accessing component state. It uses a checkbox to toggle preventDefault behavior on a link click.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/sync-events/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, sync$, $ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const shouldPreventDefault = useSignal(true);\n  return (\n    <div>\n      <div>Sync Event:</div>\n      <input\n        type=\"checkbox\"\n        checked={shouldPreventDefault.value}\n        onChange$={(e, target) =>\n          (shouldPreventDefault.value = target.checked)\n        }\n      />{' '}\n      Should Prevent Default\n      <hr />\n      <a\n        href=\"https://google.com\"\n        target=\"_blank\"\n        data-should-prevent-default={shouldPreventDefault.value}\n        onClick$={[\n          sync$((e: MouseEvent, target: HTMLAnchorElement) => {\n            if (target.hasAttribute('data-should-prevent-default')) {\n              e.preventDefault();\n            }\n          }),\n          $(() => {\n            console.log(\n              shouldPreventDefault.value ? 'Prevented' : 'Not Prevented'\n            );\n          }),\n        ]}\n      >\n        open Google\n      </a>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining QwikCityPlan interface in Qwik\nDESCRIPTION: This snippet defines the `QwikCityPlan` interface, which represents the overall plan for a Qwik City application. It includes properties such as `basePathname`, `cacheModules`, `menus`, `routes`, `serverPlugins`, and `trailingSlash`. These properties define the routing configuration, caching behavior, menu structure, server-side plugins, and trailing slash behavior of the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityPlan\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik City with Bun\nDESCRIPTION: Command to create a new Qwik City project using Bun package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/qwikcity/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Reactive Computation with useTask\nDESCRIPTION: Example demonstrating how to use useTask to observe state changes and execute reactive computations with the tracker function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Multiplier = component$(() => {\\n  const store = useStore({\\n    count: 0,\\n    doubleCount: 0,\\n    debounced: 0,\\n  });\\n\\n  // Double the count every time it changes\\n  useTask$(({ track }) => {\\n    const count = track(() => store.count);\\n    store.doubleCount = 2 * count;\\n  });\\n\\n  // Update the debounced value after a delay\\n  useTask$(({ track }) => {\\n    const count = track(() => store.count);\\n    const timer = setTimeout(() => {\\n      store.debounced = count;\\n    }, 500);\\n    return () => {\\n      clearTimeout(timer);\\n    };\\n  });\\n\\n  return (\\n    <div>\\n      <div>\\n        <button onClick$={() => store.count++}>+</button>\\n        <p>Count: {store.count}</p>\\n        <p>Double: {store.doubleCount}</p>\\n        <p>Debounced: {store.debounced}</p>\\n      </div>\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: List Rendering with Keys in Qwik\nDESCRIPTION: Demonstrates how to render lists of items in Qwik using array.map() with proper key implementation for optimal rendering performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/rendering/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const Parent = component$(() => {\n  return (\n    <>\n      {data.map(({ message, uniqueKey }) => (\n        <div key={uniqueKey}>\n          <p>{message}</p>\n        </div>\n      ))}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using QRL Type in Qwik Functions\nDESCRIPTION: Example of declaring a custom function that takes a callback as a QRL, demonstrating how to use the QRL type for lazy-loadable function references.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_67\n\nLANGUAGE: tsx\nCODE:\n```\n// Example of declaring a custom functions which takes callback as QRL.\nexport function useMyFunction(callback: QRL<() => void>) {\n  doExtraStuff();\n  // The callback passed to `onDocument` requires `QRL`.\n  useOnDocument(\"mousemove\", callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Route Details with Zod\nDESCRIPTION: Defines type-safe route parameters using Zod schemas in `routeInfo.ts`. The example shows creating a schema for `pokemonId` to ensure data consistency in routing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const Route = {\n  name: \"PokemonDetail\",\n  params: z.object({\n    pokemonId: z.coerce.number(),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Sitemap Route in Qwik City\nDESCRIPTION: This code sets up a route for generating a dynamic sitemap in Qwik City. It uses the createSitemap function to generate XML based on the application's routes and sends it as an XML response.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/sitemaps/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/dynamic-sitemap.xml/index.tsx\n\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\nimport { routes } from \"@qwik-city-plan\";\nimport { createSitemap } from \"./create-sitemap\";\n\nexport const onGet: RequestHandler = (ev) => {\n  const siteRoutes = routes\n    .map(([route]) => route as string)\n    .filter(route => route !== \"/\");  // Exclude the '/' route\n\n  const sitemap = createSitemap([\n    { loc: \"/\", priority: 1 },  // Manually include the root route\n    ...siteRoutes.map((route) => ({\n      loc: route,\n      priority: 0.9,  // Default priority, adjust as needed\n    })),\n  ]);\n\n  const response = new Response(sitemap, {\n    status: 200,\n    headers: { \"Content-Type\": \"text/xml\" },\n  });\n\n  ev.send(response);\n};\n```\n\n----------------------------------------\n\nTITLE: Binding Data to Input Elements in JSX Templates\nDESCRIPTION: This example demonstrates how to bind data properties to input elements in a Qwik JSX template. It shows binding data.name to an input's value attribute and data.description to a textarea.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/component/binding/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<input value={data.name}/>\n<textarea>{data.description}</textarea>\n```\n\n----------------------------------------\n\nTITLE: Defining server$ Function Type in TypeScript\nDESCRIPTION: Type definition for the server$ function, which allows defining server-side functions that can be called from the client. It takes a server function and optional configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nserver$: <T extends ServerFunction>(\n  qrl: T,\n  options?: ServerConfig | undefined,\n) => ServerQRL<T>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic 404 Page Response in Qwik City\nDESCRIPTION: Example of how to create a dynamic 404 page response in Qwik City by using routeLoader$ to check if data exists and setting an appropriate status code. This handles cases where a page might exist but the requested resource does not.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useProductLoader = routeLoader$(async ({ params, status }) => {\n  // Example database call using the id param\n  // The database could return null if the product is not found\n  const data = await productDatabase.get(params.id);\n\n  if (!data) {\n    // Product data was not found\n    // Set the status code to 404\n    status(404);\n  }\n\n  // return the data (which may be null)\n  return data;\n});\n\nexport default component$(() => {\n  // get the product data from the loader\n  const product = useProductLoader();\n\n  if (!product.value) {\n    // no product data found\n    // so render our own custom product 404\n    return <p>Sorry, looks like we don't have this product.</p>;\n  }\n\n  // product data was found, so let's render it\n  return (\n    <div>\n      <h1>{product.value.name}</h1>\n      <p>{product.value.price}</p>\n      <p>{product.value.description}</p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing Data Between Middleware with sharedMap in Qwik City\nDESCRIPTION: Shows how to use sharedMap to share data between middleware functions, routeLoaders, and components. The example demonstrates storing user details from a cookie for access throughout the request lifecycle.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport {\n  routeLoader$,\n  type RequestHandler,\n  type Cookie,\n} from '@builder.io/qwik-city';\n\ninterface User {\n  username: string;\n  email: string;\n}\n\nexport const onRequest: RequestHandler = async ({\n  sharedMap,\n  cookie,\n  send,\n}) => {\n  const user = loadUserFromCookie(cookie);\n  if (user) {\n    sharedMap.set('user', user);\n  } else {\n    throw send(401, 'NOT_AUTHORIZED');\n  }\n};\n\nfunction loadUserFromCookie(cookie: Cookie): User | null {\n  // this is where you would check cookie for user.\n  if (cookie) {\n    // just return mock user for this demo.\n    return {\n      username: `Mock User`,\n      email: `mock@users.com`,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport const useUser = routeLoader$(({ sharedMap }) => {\n  return sharedMap.get('user') as User;\n});\n\nexport default component$(() => {\n  const log = useUser();\n  return (\n    <div>\n      {log.value.username} ({log.value.email})\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Resource Management Hooks in Qwik\nDESCRIPTION: Defines hooks for resource management in Qwik. These hooks enable loading and managing asynchronous resources with optional configuration parameters.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useResource$: <T>(generatorFn: ResourceFn<T>, opts?: ResourceOptions) => ResourceReturn<T>;\n\n// @public\nexport const useResourceQrl: <T>(qrl: QRL<ResourceFn<T>>, opts?: ResourceOptions) => ResourceReturn<T>;\n```\n\n----------------------------------------\n\nTITLE: Example of Using the Image Component | Qwik | TypeScript\nDESCRIPTION: This snippet shows how to utilize the Image component within a Qwik component, allowing for a simple display of images optimized for performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport Image from '~/media/your_image.png?jsx';\n\nexport default component$(() => {\n  return (\n    <div>\n      <Image />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Database Utility with Singleton Pattern for Serverfull Architecture\nDESCRIPTION: Implementation of a database utility using the singleton design pattern to access environment variables in a serverfull architecture. This code provides functions to initialize and access a database instance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet _db!: AppDatabase;\n\nexport function getDB() {\n  // eslint-disable-next-line\n  if (!_db) {\n    throw new Error('DB not set');\n  }\n  return _db;\n}\n\nexport async function initializeDbIfNeeded(factory: () => Promise<AppDatabase>) {\n  // eslint-disable-next-line\n  if (!_db) {\n    _db = await factory();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Qwik Component in TypeScript\nDESCRIPTION: Demonstrates how to create a simple Qwik component with props and content projection using the Slot component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot } from '@builder.io/qwik';\nimport type { ClassList } from '@builder.io/qwik'\n\nexport const MyOtherComponent = component$((props: { class?: ClassList }) => { // ‚úÖ\n  return <div class={class}><Slot /></div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple routeLoader$s in Qwik City Layout\nDESCRIPTION: Shows how to use multiple routeLoader$s across different files in a Qwik application. It demonstrates defining a loader in a layout file and using it in a separate component file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { Footer } from '../components/footer.tsx';\n\nexport const useProductData = routeLoader$(async () => {\n  const res = await fetch('https://.../product');\n  const product = (await res.json()) as Product;\n  return product;\n});\n\nexport default component$(() => {\n  const signal = useProductData();\n  return (\n    <main>\n      <Slot />\n      <Footer />\n    </main>\n  );\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\n// Import the loader from the layout\nimport { useProductData } from '../routes/layout.tsx';\n\nexport const Footer = component$(() => {\n  // Consume the loader data\n  const signal = useProductData();\n  return <footer>Product name: {signal.value.product.name}</footer>;\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Data with Resource Component in Qwik\nDESCRIPTION: This code shows how to use the Resource component to render data fetched with useResource$. It handles three states: pending (loading), rejected (error), and resolved (data display).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/introduction/resource/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Resource\n  value={resourceToRender}\n  onPending={() => <div>Loading...</div>}\n  onRejected={(reason) => <div>Error: {reason}</div>}\n  onResolved={(data) => <div>{data}</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Simple Task Tracking with useTask\nDESCRIPTION: Simplified example of using useTask to observe and react to state changes using the tracker object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const SimpleExample = component$(() => {\\n  const state = useStore({\\n    count: 0,\\n    doubleCount: 0,\\n  });\\n\\n  useTask$(({ track }) => {\\n    // By tracking the state.count, and then reading it, this task will\\n    // rerun whenever state.count changes.\\n    const count = track(() => state.count);\\n    state.doubleCount = count * 2;\\n  });\\n\\n  return (\\n    <div>\\n      <p>Count: {state.count}</p>\\n      <p>Double count: {state.doubleCount}</p>\\n      <button onClick$={() => state.count++}>Increment</button>\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with useVisibleTask$ in Qwik\nDESCRIPTION: A basic example showing how to use the useVisibleTask$ hook to trigger animations when a component becomes visible. The component uses a signal to track animation state that changes when the component enters the viewport.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-tasks/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { component$, useSignal, useVisibleTask$ } from \"@builder.io/qwik\";\n\nexport const Animated = component$(() => {\n  const animate = useSignal(false);\n\n  useVisibleTask$(() => {\n    animate.value = true;\n  });\n\n  return (\n    <div\n      class={{\n        animate: animate.value,\n      }}\n    >\n      {/* Animated Stuff */}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RouterHead Component in Qwik\nDESCRIPTION: This component uses useDocumentHead() to generate the <head> element of the document, including title, meta tags, links, and styles. It's typically included in the root layout of a Qwik City application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useDocumentHead } from '@builder.io/qwik-city';\n\nexport const RouterHead = component$(() => {\n  const head = useDocumentHead();\n\n  return (\n    <>\n      <title>{head.title}</title>\n\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\n      {head.meta.map((m) => (\n        <meta {...m} />\n      ))}\n\n      {head.links.map((l) => (\n        <link {...l} />\n      ))}\n\n      {head.styles.map((s) => (\n        <style {...s.props} dangerouslySetInnerHTML={s.style} />\n      ))}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Navigation with Link Component in Qwik\nDESCRIPTION: The Link component in a Qwik application enables SPA-like navigation, reducing the need for full-page reloads while maintaining current application state. It works similarly to an anchor tag but prevents the default navigation behavior by using the useNavigate API. Prefetching can improve navigation performance by anticipating user actions based on viewport and interaction.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useNavigate } from '@builder.io/qwik-city';\n\nexport const Link = component$<LinkProps>((props) => {\n  const nav = useNavigate();\n\n  return (\n    <a\n      preventdefault:click\n      onClick$={() => {\n        nav(props.href);\n      }}\n      {...props}\n    >\n      <Slot />\n    </a>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies with server$() in Qwik\nDESCRIPTION: Demonstrates how to read and set cookies using this.cookie methods within a server$() function in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const handleCookies = server$(\n  function () {\n    const userSession = this.cookie.get('user-session')?.value;\n    if (!userSession) {\n      this.cookie.set('user-session', 'new-session-id', { path: '/', httpOnly: true });\n    }\n    return userSession;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Qwik Theme Switch Component with TypeScript\nDESCRIPTION: This component creates a theme switch button in Qwik. It uses `useStylesScoped$` to apply scoped CSS styles and an event handler to toggle the theme and store the preference in local storage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, useStylesScoped$ } from \"@builder.io/qwik\";\nimport styles from \"./style.css?inline\";\n\nexport const ThemeSwitch = component$(() => {\n  useStylesScoped$(styles);\n  return (\n    <div class=\"flex items-center gap-3\">\n      <label class=\"switch\">\n        <input\n          type=\"checkbox\"\n          id=\"hide-checkbox\"\n          onClick$={() => {\n            const theme = document.documentElement.className;\n            if (theme === \"light\") {\n              document.documentElement.className = \"dark\";\n              localStorage.setItem(\"theme\", \"dark\");\n            } else {\n              document.documentElement.className = \"light\";\n              localStorage.setItem(\"theme\", \"light\");\n            }\n          }}\n        />\n        <span class=\"slider round\"></span>\n      </label>\n    </div>\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Signal-Based Hydration of React Component in Qwik\nDESCRIPTION: Shows how to use client:signal for custom hydration strategies. The React component hydrates when a specified signal becomes true, allowing for fine-grained control over component hydration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const hydrateReact = useSignal(false);\n  return (\n    <>\n      <button onClick$={() => (hydrateReact.value = true)}>Hydrate Slider when click</button>\n\n      <MUISlider client:signal={hydrateReact}></MUISlider>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Qwik Node.js Application\nDESCRIPTION: This Dockerfile sets up a multi-stage build process for a Qwik Node.js application. It includes stages for installing dependencies, building the application, and creating a minimal runtime image. The final image uses Node.js 18.18.2 Alpine and exposes port 3000.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/node-docker-deploy/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nARG NODE_VERSION=18.18.2\n\n################################################################################\n# Use node image for base image for all stages.\nFROM node:${NODE_VERSION}-alpine as base\n\n# Set working directory for all build stages.\nWORKDIR /usr/src/app\n\n################################################################################\n# Create a stage for installing production dependencies.\nFROM base as deps\n\n# Download dependencies as a separate step to take advantage of Docker's caching.\n# Leverage a cache mount to /root/.yarn to speed up subsequent builds.\n# Leverage bind mounts to package.json and yarn.lock to avoid having to copy them\n# into this layer.\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=yarn.lock,target=yarn.lock \\\n    --mount=type=cache,target=/root/.yarn \\\n    yarn install --frozen-lockfile\n\n################################################################################\n# Create a stage for building the application.\nFROM deps as build\n\n# Copy the rest of the source files into the image.\nCOPY . .\n\n# Run the build script.\nRUN yarn run build\n\n################################################################################\n# Create a new stage to run the application with minimal runtime dependencies\n# where the necessary files are copied from the build stage.\nFROM base as final\n\n# Use production node environment by default.\nENV NODE_ENV production\nENV ORIGIN https://example.com\n\n# Run the application as a non-root user.\nUSER node\n\n# Copy package.json so that package manager commands can be used.\nCOPY package.json .\n\n# Copy the production dependencies from the deps stage and also\n# the built application from the build stage into the image.\nCOPY --from=deps /usr/src/app/node_modules ./node_modules\nCOPY --from=build /usr/src/app/dist ./dist\nCOPY --from=build /usr/src/app/server ./server\n\n# Expose the port that the application listens on.\nEXPOSE 3000\n\n# Run the application.\nCMD yarn serve\n```\n\n----------------------------------------\n\nTITLE: State Management with useStore Example\nDESCRIPTION: Demonstrates using useStore hook for managing component state including nested objects and custom hooks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_124\n\nLANGUAGE: tsx\nCODE:\n```\nconst Stores = component$(() => {\n  const counter = useCounter(1);\n\n  // Reactivity happens even for nested objects and arrays\n  const userData = useStore({\n    name: \"Manu\",\n    address: {\n      address: \"\",\n      city: \"\",\n    },\n    orgs: [],\n  });\n\n  // useStore() can also accept a function to calculate the initial value\n  const state = useStore(() => {\n    return {\n      value: expensiveInitialValue(),\n    };\n  });\n\n  return (\n    <div>\n      <div>Counter: {counter.value}</div>\n      <Child userData={userData} state={state} />\n    </div>\n  );\n});\n\nfunction useCounter(step: number) {\n  // Multiple stores can be created in custom hooks for convenience and composability\n  const counterStore = useStore({\n    value: 0,\n  });\n  useVisibleTask$(() => {\n    // Only runs in the client\n    const timer = setInterval(() => {\n      counterStore.value += step;\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  });\n  return counterStore;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing State via Props in Qwik Components\nDESCRIPTION: A simple example showing how to pass state between Qwik components using props. It demonstrates creating a store in a parent component and passing it to a child component where it can be modified.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStore } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const userData = useStore({ count: 0 });\n  return <Child userData={userData} />;\n});\n\ninterface ChildProps {\n  userData: { count: number };\n}\nexport const Child = component$<ChildProps>(({ userData }) => {\n  return (\n    <>\n      <button onClick$={() => userData.count++}>Increment</button>\n      <p>Count: {userData.count}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Prefetching Strategy with Link Component in Qwik\nDESCRIPTION: This snippet demonstrates how to configure prefetching behavior for Qwik's Link component. Prefetching improves the user experience by loading necessary resources before they are requested, enhancing SPA navigation performance. It can be customized or disabled based on user interaction settings and data saver preferences to optimize network requests.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Link } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  return (\n    <div>\n      <Link href=\"/a\" prefetch={false}>\n        page will not be prefetched\n      </Link>\n      <Link href=\"/b\" prefetch=\"js\">\n        page js will be prefetched\n      </Link>\n      <Link href=\"/c\">\n        page content & js will be prefetched\n      </Link>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Qwik Routing with Dynamic Parameters\nDESCRIPTION: This snippet demonstrates Qwik's file-based routing system with dynamic route parameters. It shows how to use routeLoader$ to fetch data based on route parameters, access location information with useLocation, and implement navigation using the Link component for SPA navigation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/components/qwik-gpt/gpt.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$, useLocation, Link } from '@builder.io/qwik-city';\n\nexport const useUserData = routeLoader$(async (requestEvent) => {\n  const { userID } = requestEvent.params;\n  const db = await createDB(requestEvent.env.get('DB_KEY'));\n  const user = await db.from('users').filter('id', userID);\n  return {\n    name: user.name,\n    email: user.email,\n  };\n});\n\nexport default component$(() => {\n  const loc = useLocation();\n  const userData = useUserData(); // Signal<{name, email}>\n\n  return (\n    <>\n      <nav>\n        <Link href=\"/about/\">SPA navigate to /about/</Link>\n        <a href=\"/about/\">Full page navigate to /about/</a>\n      </nav>\n      <main>\n        <h1>User: {loc.params.userID}</h1>\n        <div>Name: {userData.value.name}</div>\n        <div>Email: {userData.value.email}</div>\n        <div>Current URL: {loc.url.href}</div>\n      </main>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Component Implementation - Weather Resource Example\nDESCRIPTION: Example showing how to use useResource$ to fetch weather data based on city name changes, with cleanup handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_80\n\nLANGUAGE: tsx\nCODE:\n```\nconst Cmp = component$(() => {\n  const cityS = useSignal(\"\");\n\n  const weatherResource = useResource$(async ({ track, cleanup }) => {\n    const cityName = track(cityS);\n    const abortController = new AbortController();\n    cleanup(() => abortController.abort(\"cleanup\"));\n    const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n      signal: abortController.signal,\n    });\n    const data = await res.json();\n    return data as { temp: number };\n  });\n\n  return (\n    <div>\n      <input name=\"city\" bind:value={cityS} />\n      <Resource\n        value={weatherResource}\n        onResolved={(weather) => {\n          return <div>Temperature: {weather.temp}</div>;\n        }}\n      />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Controller Component in Qwik with iOS Support\nDESCRIPTION: This code snippet defines a Qwik component that creates a media controller for both audio and video playback. It addresses iOS playback restrictions by using synchronous event handlers and the 'playsinline' attribute. The component includes play/pause functionality for both audio and video, and a toggle for the 'playsinline' attribute.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/mediaController/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  useSignal,\n  useStylesScoped$,\n  useVisibleTask$,\n} from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nconst AUDIO_SRC =\n  'https://cdn.builder.io/o/assets%2F5b8073f890b043be81574f96cfd1250b%2Fafe011812da146a5b2263196cb25f263?alt=media&token=c017cd87-0598-4af2-8afd-e9b5a3fba078&apiKey=5b8073f890b043be81574f96cfd1250b';\nconst VIDEO_SRC =\n  'https://cdn.builder.io/o/assets%2F5b8073f890b043be81574f96cfd1250b%2F8b210c56974440649a0a78d4a3a0ddc5%2Fcompressed?apiKey=5b8073f890b043be81574f96cfd1250b&token=8b210c56974440649a0a78d4a3a0ddc5&alt=media&optimized=true';\n\nexport default component$(() => {\n  const audioElementSignal = useSignal<HTMLAudioElement | undefined>();\n  const audioPlayButtonSignal = useSignal<HTMLButtonElement | undefined>();\n  const audioIsPlayingSignal = useSignal(false);\n  const videoElementSignal = useSignal<HTMLAudioElement | undefined>();\n  const videoPlayButtonSignal = useSignal<HTMLButtonElement | undefined>();\n  const videoIsPlayingSignal = useSignal(false);\n  const playsInlineSignal = useSignal(true);\n  const location = useLocation();\n\n  const videoPoster =\n    location.url.origin + '/sample-media/qwik-koi-poster.jpg';\n\n  useStylesScoped$(`\n        segment {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          text-align: center;\n          width: 100%;\n          padding: 20px;\n          color: #1dacf2\n        }\n        .content {\n          width: 60%;\n          min-width: 250px;\n        }\n        button {\n          padding: 20px;\n          font-weight: bold;\n          font-size: 1.2em;\n          width: 100%;\n          background: #1dacf2;\n          color: white;\n        }\n        .checkbox-container {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n        .checkbox {\n          width: 20px;\n          height: 20px;\n          margin-right: 8px;\n        }\n        .video-container {\n          position: relative;\n          width: 100%;\n          height: 0;\n          padding-bottom: calc(56.25% + 1px);\n        }\n        video {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          box-sizing: border-box;\n          border: 1px solid gray;\n        }\n        `);\n\n  useVisibleTask$(({ track }) => {\n    track(() => audioPlayButtonSignal.value);\n    track(() => audioElementSignal.value);\n\n    const play = () =>\n      audioIsPlayingSignal.value\n        ? audioElementSignal.value?.pause()\n        : audioElementSignal.value?.play();\n\n    audioPlayButtonSignal.value?.removeEventListener('click', play);\n    audioPlayButtonSignal.value?.addEventListener('click', play);\n\n    return () =>\n      audioPlayButtonSignal.value?.removeEventListener('click', play);\n  });\n\n  useVisibleTask$(({ track }) => {\n    track(() => videoPlayButtonSignal.value);\n    track(() => videoElementSignal.value);\n\n    const play = () =>\n      videoIsPlayingSignal.value\n        ? videoElementSignal.value?.pause()\n        : videoElementSignal.value?.play();\n\n    videoPlayButtonSignal.value?.addEventListener('click', play);\n    return () =>\n      videoPlayButtonSignal.value?.removeEventListener('click', play);\n  });\n\n  return (\n    <segment>\n      <div class=\"content\">\n        <h1>Media Controller</h1>\n        <h3>\n          <i>with iOS Support</i>\n        </h3>\n        <br />\n        <div class=\"video-container\">\n          <video\n            ref={videoElementSignal}\n            src={VIDEO_SRC}\n            poster={videoPoster}\n            playsInline={playsInlineSignal.value}\n            onPlay$={() => (videoIsPlayingSignal.value = true)}\n            onPause$={() => (videoIsPlayingSignal.value = false)}\n            onEnded$={() => (videoIsPlayingSignal.value = false)}\n          />\n        </div>\n        <audio\n          ref={audioElementSignal}\n          src={AUDIO_SRC}\n          onPlay$={() => (audioIsPlayingSignal.value = true)}\n          onPause$={() => (audioIsPlayingSignal.value = false)}\n          onEnded$={() => (audioIsPlayingSignal.value = false)}\n        />\n        <br />\n        <div class=\"checkbox-container\">\n          <input\n            type=\"checkbox\"\n            id=\"playsInlineCheckbox\"\n            class=\"checkbox\"\n            checked={playsInlineSignal.value}\n            onchange$={() => {\n              videoElementSignal.value?.pause();\n              playsInlineSignal.value = !playsInlineSignal.value;\n            }}\n          />\n          <label for=\"playsInlineCheckbox\">playsInline (iOS)</label>\n        </div>\n\n        <br />\n        <button ref={videoPlayButtonSignal}>\n          {videoIsPlayingSignal.value ? 'Pause' : 'Play'} Video\n        </button>\n        <br />\n        <br />\n        <button ref={audioPlayButtonSignal}>\n          {audioIsPlayingSignal.value ? 'Pause' : 'Play'} Audio\n        </button>\n      </div>\n    </segment>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Counter Component Implementation\nDESCRIPTION: Example Qwik component implementation of a counter\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport const Counter = component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <button class=\"counter\" type=\"button\" onClick$={() => count.value++}>\n      Increment {count.value}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in vite.config.ts\nDESCRIPTION: This TypeScript snippet shows how to add the Tailwind CSS plugin to the Vite configuration file (`vite.config.ts`). The `@tailwindcss/vite` plugin is imported and included in the `plugins` array of the Vite configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig , type UserConfig} from 'vite'\nimport tailwindcss from '@tailwindcss/vite'\n// ‚Ä¶ other imports ...\n\nexport default defineConfig(({ command, mode }): UserConfig => {\n  return {\n    plugins: [\n      tailwindcss(),\n      // ... other plugins ...\n      ]\n    // ... other stuff ...\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Endpoint in Qwik City\nDESCRIPTION: This snippet demonstrates how to create a simple JSON endpoint using the RequestHandler in Qwik City. It responds to GET requests at the '/greet/' URL with a JSON object containing a 'hello' message.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/endpoints/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ json }) => {\n  json(200, { hello: 'world' });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Modular Forms in Qwik\nDESCRIPTION: Demonstrates how to create a form using Modular Forms in Qwik. This snippet shows the use of useForm hook and how to render form fields using the Field component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n\n  return (\n    <Form>\n      <Field name=\"email\">\n        {(field, props) => <input {...props} type=\"email\" />}\n      </Field>\n      <Field name=\"password\">\n        {(field, props) => <input {...props} type=\"password\" />}\n      </Field>\n      <button class=\"w-max\" type=\"submit\">\n        Login\n       </button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Unpic Library for Image Optimization | Qwik | TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Unpic library for image optimization in a Qwik application. It shows the import of the Unpic Image component and its usage to display an optimized image from an external source.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Image } from '@unpic/qwik';\n\nexport default component$(() => {\n  return (\n    <Image\n      src=\"https://cdn.shopify.com/static/sample-images/bath_grande_crop_center.jpeg\"\n      layout=\"constrained\"\n      width={800}\n      height={600}\n      alt=\"A lovely bath\"\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Qwik Route Component\nDESCRIPTION: Implementing a basic route component in Qwik that displays static content. This demonstrates the fundamental structure of a Qwik component using the component$ function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <section class=\"section bright\">A Joke!</section>;\n});\n```\n\n----------------------------------------\n\nTITLE: Building Counter Components\nDESCRIPTION: Implements a counter with increment functionality. Shows state and event handling differences between React and Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <p>Value is: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$(() => {\n  const count = useSignal(0);\n  return (\n    <>\n      <p>Value is: {count.value}</p>\n      <button onClick$={() => count.value++}>Increment</button>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stream Responses in Qwik City\nDESCRIPTION: This middleware function demonstrates how to set a stream response, sending data in chunks over time rather than all at once.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async (requestEvent) => {\n  const writableStream = requestEvent.getWritableStream();\n  const writer = writableStream.getWriter();\n  const encoder = new TextEncoder();\n\n  writer.write(encoder.encode('Hello World\\n'));\n  await wait(100);\n  writer.write(encoder.encode('After 100ms\\n'));\n  await wait(100);\n  writer.write(encoder.encode('After 200ms\\n'));\n  await wait(100);\n  writer.write(encoder.encode('END'));\n  writer.close();\n};\n\nconst wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n```\n\n----------------------------------------\n\nTITLE: Qwik: Using `useStore` for Reactive Arrays\nDESCRIPTION: Demonstrates the usage of the `useStore` hook in a Qwik component to create a reactive store for an array. The example shows how to create a `todoList` with a reactive array and how changes to the array elements trigger re-renders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStore } from '@builder.io/qwik';\n\nexport const Counter = component$(() => {\n  // The `useStore` hook is used to create a reactive store.\n  const todoList = useStore(\n    {\n      array: [],\n    },\n    { deep: true }\n  );\n\n  // todoList.array is a reactive array, so we can push to it and the component will re-render.\n\n  return (\n    <>\n      <h1>Todo List</h1>\n      <ul>\n        {todoList.array.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              onInput$={() => {\n                // todoList is a reactive store\n                // because we used `deep: true`, the `todo` object is also reactive.\n                // so we can change the `completed` property and the component will re-render.\n                todo.completed = !todo.completed;\n              }}\n            />\n            {todo.text}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using zod$ and validator$ Together in QwikCity Actions\nDESCRIPTION: This snippet demonstrates the correct order for using `zod$()` and `validator$()` together in QwikCity actions. `zod$()` should be the second argument to `routeAction$`, followed by any `validator$()` calls.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/validator/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useAction = routeAction$(\n  async (data, requestEvent: RequestEventAction) => {\n    return { foo: \"bar\" };\n  },\n  zod$(/*...*/),\n  validator$(/*...*/),\n  validator$(/*...*/),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Supabase data server-side in Qwik\nDESCRIPTION: This code snippet demonstrates how to use `createServerClient` within a Qwik `routeLoader$` to fetch data from a Supabase database. It retrieves the Supabase URL and anon key from environment variables, initializes the Supabase client, queries the 'test' table, and returns the data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/supabase/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\nimport { createServerClient } from 'supabase-auth-helpers-qwik';\n\nexport const useDBTest = routeLoader$(async (requestEv) => {\n  const supabaseClient = createServerClient(\n    requestEv.env.get(\"PUBLIC_SUPABASE_URL\")!,\n    requestEv.env.get(\"PUBLIC_SUPABASE_ANON_KEY\")!,\n    requestEv\n  );\n  const { data } = await supabaseClient.from('test').select('*')\n  return { data };\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Component with Primitive Props in TypeScript\nDESCRIPTION: This example shows how to define and use props in a Qwik component, including optional props and signals. It demonstrates passing both primitive values and signals as props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from \"@builder.io/qwik\";\nimport type { Signal } from \"@builder.io/qwik\";\n\ninterface ItemProps {\n  name?: string;\n  quantity?: number;\n  description?: string;\n  price?: Signal<number>;\n}\n\nexport const Item = component$<ItemProps>((props) => {\n  const localQuantity = useSignal(props.quantity);\n\n  return (\n    <ul>\n      <li>name: {props.name}</li>\n      <li>quantity: {localQuantity}</li>\n      <li>description: {props.description}</li>\n      <li>price: {props.price}</li>\n    </ul>\n  );\n});\n\nexport default component$(() => {\n  const price = useSignal(9.99);\n\n  return (\n    <>\n      <h1>Props</h1>\n      <Item name=\"hammer\" price={price} quantity={5} />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Modules in Qwik Components\nDESCRIPTION: Demonstrates how to import and use CSS Modules in Qwik components, using the class attribute instead of className.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport styles from './MyComponent.module.css';\n\nexport default component$(() => {\n  return <div class={styles.container}>Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Turso Client in Qwik - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and initialize a Turso client within a Qwik route using Qwik's server-side APIs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/turso/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tursoClient } from \"~/utils/turso\";\nexport const useRouteLoader = routeLoader$(\n  async (requestEvent: RequestEventBase) => {\n    const client = tursoClient(requestEvent);\n    const items = await client.execute(\"select * from table\");\n    return {\n      items: items.rows,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Debouncer with Implicit First Argument\nDESCRIPTION: An enhanced version of the debouncer that leverages Qwik's `implicit$FirstArg` to simplify function wrapping and provide a more concise API for creating debounced functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/debouncer/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useDebouncerQrl = <A extends readonly unknown[], R>(\n  fn: QRL<(...args: A) => R>,\n  delay: number,\n): QRL<(...args: A) => void> => {\n  const timeoutId = useSignal<number>();\n\n  return $((...args: A): void => {\n    window.clearTimeout(timeoutId.value);\n    timeoutId.value = window.setTimeout((): void => {\n      void fn(...args);\n    }, delay);\n  });\n};\n\nexport const useDebouncer$ = implicit$FirstArg(useDebouncerQrl);\n```\n\n----------------------------------------\n\nTITLE: Using useSession Hook in Qwik\nDESCRIPTION: This snippet demonstrates the use of the useSession hook to retrieve a session object, displaying the user's email if available.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useSession } from '~/routes/plugin@auth';\n\nexport default component$(() => {\n  const session = useSession();\n  return <p>{session.value?.user?.email}</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Width and Height for Images | Qwik | TypeScript\nDESCRIPTION: This snippet demonstrates how to set custom width and height for the Image component within a Qwik application, ensuring that the aspect ratio is maintained and layout reflows are prevented.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<Image style={{ width: '300px'}} />\n\n<Image style={{ width: '300px', height: '200px'}} />\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Typed Routes\nDESCRIPTION: Installation command for Qwik Typed Routes, tailored for various package managers to ensure type-safe URL building in a Qwik application. It installs `qwik-labs-build` to streamline development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install github:QwikDev/qwik-labs-build#main\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install github:QwikDev/qwik-labs-build#main\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add github:QwikDev/qwik-labs-build#main\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun install github:QwikDev/qwik-labs-build#main\n```\n\n----------------------------------------\n\nTITLE: Managing Local State\nDESCRIPTION: Shows state management patterns in both frameworks. React uses useState while Qwik uses useSignal for reactive state.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function UseStateExample() {\n  const [value, setValue] = useState(0);\n  return <div>Value is: {value}</div>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const LocalStateExample = component$(() => {\n  const count = useSignal(0);\n  return <div>Value is: {count.value}</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Dynamic Routes in Qwik City\nDESCRIPTION: This code demonstrates how to create nested dynamic routes in Qwik City. It shows a component that displays both productId and reviewId extracted from the URL parameters using useLocation(). This approach enables dynamic routing for product reviews.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/products/[productId]/reviews/[reviewId]/index.tsx\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation();\n  const { productId, reviewId } = loc.params\n  return <h1>Review {reviewId} for product {productId}</h1>\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Back Button with useNavigate() and useLocation() in Qwik\nDESCRIPTION: This example shows how to create a back button component using useNavigate() and useLocation() hooks, with a fallback to the home page if there's no previous URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useNavigate, useLocation } from '@builder.io/qwik-city';\n\nexport const BackButton = component$(() => {\n  const nav = useNavigate();\n  const loc = useLocation();\n\n  return (\n    <button onClick$={() => loc.prevUrl ? window.history.back() : nav('/')}>\n      Go Back\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Qwik City Middleware\nDESCRIPTION: Demonstrates how to set response headers using the headers object in a middleware function. This example sets a security token and returns all headers as JSON for demonstration purposes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ headers, json }) => {\n  headers.set('X-SRF-TOKEN', Math.random().toString(36).replace('0.', ''));\n  const obj: Record<string, string> = {};\n  headers.forEach((value, key) => (obj[key] = value));\n  json(200, obj);\n};\n```\n\n----------------------------------------\n\nTITLE: Qwik Component with Captured Variables\nDESCRIPTION: Examples of valid and invalid usage of captured variables in Qwik components. Demonstrates the rules for variable capture in $ functions, including const declaration and serializability.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Invalid\ncomponent$(() => {\n  let foo = 'value'; // variable is not a const\n  return <div onClick$={() => console.log(foo)}/>\n});\n\n// Valid\ncomponent$(() => {\n  const foo = 'value';\n  return <div onClick$={() => console.log(foo)}/>\n});\n```\n\n----------------------------------------\n\nTITLE: Using Scoped CSS in Qwik Component\nDESCRIPTION: Demonstrates how to use scoped CSS in a Qwik component using the useStylesScoped$ hook. This ensures that the styles are scoped to the component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStylesScoped$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  useStylesScoped$(`\n    .container {\n      background-color: red;\n    }\n  `);\n  return <div class=\"container\">Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component in Qwik with TypeScript\nDESCRIPTION: This example shows how to create a reusable counter component using Qwik's component$ function. It demonstrates prop typing, state management with useStore, and event handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface CounterProps {\n  initialValue?: number;\n  step?: number;\n}\nexport const Counter = component$((props: CounterProps) => {\n  const state = useStore({ count: props.initialValue || 0 });\n  return (\n    <div>\n      <span>{state.count}</span>\n      <button onClick$={() => (state.count += props.step || 1)}>+</button>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing qwik-image with a custom image transformer\nDESCRIPTION: A complete example showing how to set up qwik-image in a Qwik component with a custom image transformer function that uses Builder.io's CDN. The example demonstrates configuring the image provider and rendering an optimized image with specific dimensions and properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $, component$ } from '@builder.io/qwik';\nimport {\n  Image,\n  type ImageTransformerProps,\n  useImageProvider,\n} from 'qwik-image';\n\nexport default component$(() => {\n  const imageTransformer$ = $(\n    ({ src, width, height }: ImageTransformerProps): string => {\n      // Here you can set your favorite image loaders service\n      return `https://cdn.builder.io/api/v1/${src}?height=${height}&width=${width}&format=webp&fit=fill`;\n    }\n  );\n\n  // Global Provider (required)\n  useImageProvider({\n    // You can set this prop to overwrite default values [3840, 1920, 1280, 960, 640]\n    resolutions: [640],\n    imageTransformer$,\n  });\n\n  return (\n    <Image\n      layout=\"constrained\"\n      objectFit=\"fill\"\n      width={400}\n      height={500}\n      alt=\"Tropical paradise\"\n      placeholder=\"#e6e6e6\"\n      src={\n        'image/assets%2FYJIGb4i01jvw0SRdL5Bt%2Fe5113e1c02db40e5bac75146fa46386f'\n      }\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling URL Retrieval in Qwik City\nDESCRIPTION: This middleware function retrieves the current HTTP request URL and returns it as a JSON response. It is specifically designed for use in Qwik City middleware layers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ url, json }) => {\n  json(200, { url: url.toString() });\n};\n```\n\n----------------------------------------\n\nTITLE: Symbol Extraction in Qwik Optimizer\nDESCRIPTION: Demonstration of how the Qwik Optimizer extracts symbols into separate files for lazy loading. Shows the original component definition and the resulting split files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComp = component$(() => {\n  /* my component definition */\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComp = component(qrl('./chunk-a.js', 'MyComp_onMount'));\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComp_onMount = () => {\n  /* my component definition */\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Drag-and-Drop Containers in Qwik\nDESCRIPTION: This snippet implements two drag-and-drop containers using Qwik's component structure. It defines item types, initializes states for both containers, and sets up event handlers for drag and drop actions. Dependencies include Qwik's core features such as 'component$', 'useSignal', and 'sync$'. It handles item transfers and sorting by updating the respective signal arrays based on drag events.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/drag&drop/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, sync$, useSignal, $ } from '@builder.io/qwik';\n\ntype Item = {\n  id: number;\n  content: string;\n};\n\nexport default component$(() => {\n  const items1 = useSignal<Item[]>([\n    { id: 1, content: 'üì± Phone' },\n    { id: 2, content: 'üíª Laptop' },\n    { id: 3, content: 'üéß Headphones' },\n  ]);\n\n  const items2 = useSignal<Item[]>([\n    { id: 4, content: '‚åöÔ∏è Watch' },\n    { id: 5, content: 'üñ± Mouse' },\n    { id: 6, content: '‚å®Ô∏è Keyboard' },\n  ]);\n\n  return (\n    <div class=\"flex min-h-screen justify-center gap-8 bg-gray-50 p-8\">\n      <div\n        data-dropzone\n        class=\"h-[25em] w-80 rounded-xl border-2 border-dashed border-gray-300 bg-white p-6 shadow-xs transition-all duration-300 hover:border-gray-400 [&[data-over]]:border-blue-300 [&[data-over]]:bg-blue-50\"\n        preventdefault:dragover\n        preventdefault:drop\n        onDragOver$={sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.setAttribute('data-over', 'true');\n        })}\n        onDragLeave$={sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.removeAttribute('data-over');\n        })}\n        onDrop$={[\n          sync$((e: DragEvent, currentTarget: HTMLDivElement) => {\n            const id = e.dataTransfer?.getData('text/plain');\n            currentTarget.dataset.droppedId = id;\n            currentTarget.removeAttribute('data-over');\n          }),\n          $((e, currentTarget) => {\n            const draggedElementId = currentTarget.dataset.droppedId;\n            const isDropZone = currentTarget.hasAttribute('data-dropzone');\n\n            if (draggedElementId) {\n              const itemId = parseInt(draggedElementId);\n              const item = items2.value.find((i) => i.id === itemId);\n\n              if (item && isDropZone) {\n                items2.value = items2.value.filter((i) => i.id !== itemId);\n                items1.value = [...items1.value, item];\n              } else {\n                const newItems = [...items1.value];\n                const targetId = parseInt(\n                  (e.target as HTMLDivElement).dataset.id || '0'\n                );\n                if (targetId === 0) return;\n\n                const targetIndex = items1.value.findIndex(\n                  (i) => i.id === targetId\n                );\n                const draggedIndex = items1.value.findIndex(\n                  (i) => i.id === itemId\n                );\n\n                if (draggedIndex !== -1) {\n                  // Sorting in the same container\n                  swapElements(newItems, draggedIndex, targetIndex);\n                  items1.value = newItems;\n                } else {\n                  // Sorting between containers\n                  if (!item) return;\n                  items2.value = items2.value.filter((i) => i.id !== itemId);\n                  insertElement(newItems, targetIndex, item);\n                  items1.value = newItems;\n                }\n              }\n            }\n          }),\n        ]}\n      >\n        <h3 class=\"mb-4 text-lg font-semibold text-gray-700\">Container 1</h3>\n        {items1.value.map((item) => (\n          <div\n            key={item.id}\n            data-id={item.id}\n            class=\"min-h-[62px] mb-3 cursor-move select-none rounded-lg border border-gray-200 bg-white p-4 transition-all duration-200 hover:-translate-y-1 hover:shadow-md active:scale-95\"\n            draggable\n            onDragStart$={sync$(\n              (e: DragEvent, currentTarget: HTMLDivElement) => {\n                const itemId = currentTarget.getAttribute('data-id');\n                if (e.dataTransfer && itemId) {\n                  e.dataTransfer.setData('text/plain', itemId);\n                }\n              }\n            )}\n          >\n            <span class=\"text-lg text-gray-700\">{item.content}</span>\n          </div>\n        ))}\n      </div>\n\n      <div\n        class=\"h-[25em] w-80 rounded-xl border-2 border-dashed border-gray-300 bg-white p-6 shadow-xs transition-all duration-300 hover:border-gray-400 [&[data-over]]:border-blue-300 [&[data-over]]:bg-blue-50\"\n        data-dropzone\n        preventdefault:dragover\n        preventdefault:drop\n        onDragOver$={(_: DragEvent, currentTarget: HTMLDivElement) => {\n          currentTarget.setAttribute('data-over', 'true');\n        }}\n        onDragLeave$={[\n          sync$((_: DragEvent, currentTarget: HTMLDivElement) => {\n            currentTarget.removeAttribute('data-over');\n          }),\n        ]}\n        onDrop$={[\n          sync$((e: DragEvent, currentTarget: HTMLDivElement) => {\n            const id = e.dataTransfer?.getData('text/plain');\n            currentTarget.dataset.droppedId = id;\n            currentTarget.removeAttribute('data-over');\n          }),\n          $((e, currentTarget) => {\n            const draggedElementId = currentTarget.dataset.droppedId;\n            const isDropZone = currentTarget.hasAttribute('data-dropzone');\n\n            if (draggedElementId) {\n              const itemId = parseInt(draggedElementId);\n              const item = items1.value.find((i) => i.id === itemId);\n\n              if (isDropZone && item) {\n                items1.value = items1.value.filter((i) => i.id !== itemId);\n                items2.value = [...items2.value, item];\n              } else {\n                const targetId = parseInt(\n                  (e.target as HTMLDivElement).dataset.id || '0'\n                );\n                if (targetId === 0) return;\n                const newItems = [...items2.value];\n                const draggedIndex = items2.value.findIndex(\n                  (i) => i.id === itemId\n                );\n                const targetIndex = items2.value.findIndex(\n                  (i) => i.id === targetId\n                );\n                if (draggedIndex !== -1) {\n                  // Sorting in the same container\n                  swapElements(newItems, targetIndex, draggedIndex);\n                  items2.value = newItems;\n                } else {\n                  // Sorting between containers\n                  if (!item) return;\n                  items1.value = items1.value.filter((i) => i.id !== itemId);\n                  insertElement(newItems, targetIndex, item);\n                  items2.value = newItems;\n                }\n              }\n            }\n          }),\n        ]}\n      >\n        <h3 class=\"mb-4 text-lg font-semibold text-gray-700\">Container 2</h3>\n        {items2.value.map((item) => (\n          <div\n            key={item.id}\n            data-id={item.id}\n            class=\"min-h-[62px] mb-3 cursor-move select-none rounded-lg border border-gray-200 bg-white p-4 transition-all duration-200 hover:-translate-y-1 hover:shadow-md active:scale-95\"\n            draggable\n            onDragStart$={sync$(\n              (e: DragEvent, currentTarget: HTMLDivElement) => {\n                const itemId = currentTarget.getAttribute('data-id');\n                if (e.dataTransfer && itemId) {\n                  e.dataTransfer.setData('text/plain', itemId);\n                }\n              }\n            )}\n          >\n            <span class=\"text-lg text-gray-700\">{item.content}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction swapElements(arr: Item[], index1: number, index2: number) {\n  arr[index1] = arr.splice(index2, 1, arr[index1])[0];\n\n  return arr;\n}\n\nfunction insertElement(arr: Item[], index: number, item: Item) {\n  arr.splice(index, 0, item);\n  return arr;\n}\n```\n\n----------------------------------------\n\nTITLE: MDX with Imported Counter Component\nDESCRIPTION: MDX file demonstrating how to import and use a Qwik component\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello World Title\n---\nimport { Counter } from \"../../../components/counter/counter\";\n\nThis is a simple hello world component.\n\n<Counter />\n\n```\n\n----------------------------------------\n\nTITLE: Component Styles Example with useStyles$\nDESCRIPTION: Shows how to use useStyles$ for lazy-loading component styles.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_125\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from \"./code-block.css?inline\";\n\nexport const CmpStyles = component$(() => {\n  useStyles$(styles);\n\n  return <div>Some text</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Routing: Linking to Other Routes\nDESCRIPTION: Demonstrates how to use the `Link` component from `@builder.io/qwik-city` to navigate between routes in a Qwik application. The `Link` component enables SPA navigation, avoiding full page reloads.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Link } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  return (\n    <>\n      <h1>Home</h1>\n      <Link href=\"/about/\">SPA navigate to /about/</Link>\n      <a href=\"/about/\">Full page navigate to /about/</a>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Qwik Application using Nx\nDESCRIPTION: This command uses the Nx CLI to generate a new Qwik application within an existing Nx workspace, leveraging the installed 'qwik-nx' plugin. The application's structure and configuration are set up according to Qwik best practices.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnx generate qwik-nx:app\n```\n\n----------------------------------------\n\nTITLE: NavLink Component Usage Example in Qwik\nDESCRIPTION: This code snippet demonstrates how to use the NavLink component with the `activeClass` prop to style active navigation links. It imports the NavLink component and renders two links, each with a different href and `activeClass`. When a link is active, the specified `activeClass` is applied, allowing for custom styling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/nav-link/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { NavLink } from '..';\n\nexport default component$(() => {\n  return (\n    <>\n      Links\n      <div>\n        <NavLink href=\"/docs\" activeClass=\"text-green-600\">\n          /docs\n        </NavLink>\n      </div>\n      <div>\n        <NavLink\n          href=\"/demo/cookbook/nav-link/example/\"\n          activeClass=\"text-green-600\"\n        >\n          /demo/cookbook/nav-link/example/\n        </NavLink>\n      </div>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Basic RouteAction$ with Form Component in QwikCity\nDESCRIPTION: This example demonstrates defining a routeAction$ for adding users and using it with the Form component. The action runs exclusively on the server when triggered, allowing side effects like database operations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$, Form } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(async (data, requestEvent) => {\n  // This will only run on the server when the user submits the form (or when the action is called programmatically)\n  const userID = await db.users.add({\n    firstName: data.firstName,\n    lastName: data.lastName,\n  });\n  return {\n    success: true,\n    userID,\n  };\n});\n\nexport default component$(() => {\n  const action = useAddUser();\n\n  return (\n    <>\n      <Form action={action}>\n        <input name=\"firstName\" />\n        <input name=\"lastName\" />\n        <button type=\"submit\">Add user</button>\n      </Form>\n      {action.value?.success && (\n        // When the action is done successfully, the `action.value` property will contain the return value of the action\n        <p>User {action.value.userID} added successfully</p>\n      )}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing QwikCityProvider in TypeScript\nDESCRIPTION: The QwikCityProvider component initializes the core Qwik City infrastructure in a Qwik application. It's typically placed at the root of the application and ensures the foundational setup, such as the document's head and body elements. This component doesn't render any DOM elements; its main function is to initialize the Qwik City logic. Dependencies include Qwik City related hooks like useContent and useLocation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  /**\n   * The root of a QwikCity site always start with the <QwikCityProvider> component,\n   * immediately followed by the document's <head> and <body>.\n   *\n   * Don't remove the `<head>` and `<body>` elements.\n   */\n\n  return (\n    <QwikCityProvider>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n        <RouterHead />\n      </head>\n      <body lang=\"en\">\n        <RouterOutlet />\n      </body>\n    </QwikCityProvider>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Structure from Nested Layouts in Qwik\nDESCRIPTION: This HTML snippet shows the final rendered structure resulting from the nested layouts and page component in Qwik. It demonstrates how the layouts wrap around the page content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<main>\n  <section>\n    <h1>About</h1>\n  </section>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Module in Qwik Component\nDESCRIPTION: Demonstrates how to import a CSS Module and apply its styles to a Qwik component. The styles object is used to reference the CSS classes defined in the module.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport styles from './MyComponent.module.css';\n\nexport default component$(() => {\n  return <div class={styles.container}>Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Validator Data Passing in QwikCity Route Actions\nDESCRIPTION: This snippet showcases how data is passed between multiple validators in a QwikCity `routeAction$`. Each validator modifies the `data` property in its success return object, which is then passed to the next validator.  The final `data` object is passed to the action function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/validator/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useAction = routeAction$(\n  async (data, requestEvent: RequestEventAction) => {\n    console.log(data); // { message: \"hi, I am validator1\" }\n    return { foo: \"bar\" };\n  },\n  // validator1\n  validator$((ev, data) => {\n    console.log(data); // { message: \"hi, I am validator2\" }\n    return {\n      success: true,\n      data: {\n        message: \"hi, I am validator1\",\n      },\n    };\n  }),\n  // validator2\n  validator$((ev, data) => {\n    console.log(data); // { message: \"hi, I am validator3\" }\n    return {\n      success: true,\n      data: {\n        message: \"hi, I am validator2\",\n      },\n    };\n  }),\n  // validator3\n  validator$((ev, data) => {\n    console.log(data); // Your submitted data\n    return {\n      success: true,\n      data: {\n        message: \"hi, I am validator3\",\n      },\n    };\n  }),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Material UI Integration with Qwik\nDESCRIPTION: Shows how to integrate Material UI components with Qwik, including tabs and event handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\nimport { qwikify$ } from '@builder.io/qwik-react';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport { type ReactNode } from 'react';\n\nexport const Example = qwikify$(\n  function Example({\n    selected,\n    onSelected,\n    children,\n  }: {\n    selected: number;\n    onSelected: (v: number) => any;\n    children?: ReactNode[];\n  }) {\n    console.log('React <Example/> Render');\n    return (\n      <>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs\n            value={selected}\n            onChange={(e, v) => onSelected(v)}\n            aria-label=\"basic tabs example\"\n          >\n            <Tab label=\"Item One\" />\n            <Tab label=\"Item Two\" />\n            <Tab label=\"Item Three\" />\n          </Tabs>\n          {children}\n        </Box>\n      </>\n    );\n  },\n  { eagerness: 'hover' }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Qwik Components for Builder.io\nDESCRIPTION: TypeScript example of exposing Qwik components to the Builder.io visual editor with input configuration\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/builderio/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyFunComponent } from './fun/fun';\n\nexport const CUSTOM_COMPONENTS: RegisteredComponent[] = [\n  {\n    component: MyFunComponent,\n    name: 'MyFunComponent',\n    inputs: [\n      {\n        name: 'text',\n        type: 'string',\n        defaultValue: 'Hello world',\n      },\n    ],\n  },\n];\n\nexport default component$(() => {\n  const content = useBuilderContent();\n  return (\n    <RenderContent\n      customComponents={CUSTOM_COMPONENTS}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Components in Qwik\nDESCRIPTION: Illustrates how Qwik implements lazy loading of components to avoid transitive dependencies and optimize bundling. The example shows how component$() creates lazy wrappers for Child and Parent components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const Child = component$(() => {\n  return <p>child</p>;\n});\n\nexport const Parent = component$(() => {\n  return (\n    <section>\n      <Child />\n    </section>\n  );\n});\n\nexport default Parent;\n```\n\n----------------------------------------\n\nTITLE: Original Counter Component Implementation\nDESCRIPTION: Example of a basic Counter component written in Qwik's developer-friendly syntax, showing the use of signals and event handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/optimizer/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$(() => {\n  const count = useSignal(0);\n\n  return <button onClick$={() => count.value++}>{count.value}</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik City Middleware for Node.js\nDESCRIPTION: Defines the createQwikCity function which returns middleware functions for routing, handling not found errors, and serving static files in a Node.js environment. The function takes QwikCityNodeRequestOptions and works with Node's HTTP request and response objects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-node/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(opts: QwikCityNodeRequestOptions): {\n  router: (\n    req: IncomingMessage | Http2ServerRequest,\n    res: ServerResponse,\n    next: NodeRequestNextFunction,\n  ) => Promise<void>;\n  notFound: (\n    req: IncomingMessage | Http2ServerRequest,\n    res: ServerResponse,\n    next: (e: any) => void,\n  ) => Promise<void>;\n  staticFile: (\n    req: IncomingMessage | Http2ServerRequest,\n    res: ServerResponse,\n    next: (e?: any) => void,\n  ) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Theme in root.tsx with JavaScript\nDESCRIPTION: This script is added to the head tag of `root.tsx` to set the initial theme and handle theme changes. It checks local storage for a saved theme, otherwise it checks the user's preferred color scheme and save the theme into local storage for future use.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n       <script\n          dangerouslySetInnerHTML={`\n        (function() {\n          function setTheme(theme) {\n            document.documentElement.className = theme;\n            localStorage.setItem('theme', theme);\n          }\n          const theme = localStorage.getItem('theme');\n\n          if (theme) {\n            setTheme(theme);\n          } else {\n            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n              setTheme('dark');} \n              else {\n                setTheme('light');}}\n        })();\n        window.addEventListener('load', function() {\n          const themeSwitch = document.getElementById('hide-checkbox');\n          themeSwitch.checked = localStorage.getItem('theme') === 'light'? true: false;\n        }\n        );\n      `}\n        ></script>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Redirect Syntax in Qwik City\nDESCRIPTION: A simple example showing the basic syntax for creating a redirect in Qwik City. The redirect function takes a status code and URL as parameters.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/redirects/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nthrow redirect(302, '/login');\n```\n\n----------------------------------------\n\nTITLE: Listening to DOM Events Without Hydration in Qwik-React Components\nDESCRIPTION: Demonstrates how to listen to DOM events on the host element of a qwikified React component without triggering full hydration. This technique allows for efficient event handling without loading React.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<MUIButton\n  host:onClick$={() => {\n    console.log('click a react component without hydration!!');\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: HTTP Method-Specific Middleware Handlers in Qwik City\nDESCRIPTION: Examples of HTTP method-specific middleware handlers that respond only to particular HTTP methods (GET, POST, PUT, PATCH, DELETE). These can be used alongside the general onRequest handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Called only with a specific HTTP method\nexport const onGet: RequestHandler = async (requestEvent) => { ... }\nexport const onPost: RequestHandler = async (requestEvent) => { ... }\nexport const onPut: RequestHandler = async (requestEvent) => { ... }\nexport const onPatch: RequestHandler = async (requestEvent) => { ... }\nexport const onDelete: RequestHandler = async (requestEvent) => { ... }\n```\n\n----------------------------------------\n\nTITLE: Definition of RenderOptions Interface in TypeScript\nDESCRIPTION: Interface for configuring the rendering process. Extends SerializeDocumentOptions and contains properties for base path, container attributes, locale, and various loading strategies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderOptions extends SerializeDocumentOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Loader type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `Loader` which is a function that returns a `LoaderSignal`. The `Loader` type is generic, accepting a type `RETURN` which specifies the type of the value returned by the loader.  It is likely used for asynchronous data loading in Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Loader<RETURN> = {\n  (): LoaderSignal<RETURN>;\n};\n```\n\n----------------------------------------\n\nTITLE: Optimized delay$ Example with Lazy Loading\nDESCRIPTION: Example showing the improved delay$ API which lazy-loads the callback function only when it needs to be executed, reducing initial bundle size.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/composing/dollar/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndelay$(() => {\n  // I am lazy-loaded only when I need to be executed.\n  ...\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Schema with Valibot\nDESCRIPTION: This TypeScript code uses Valibot to define a schema for validating the `LoginForm`. It ensures that the email is a non-empty string and a valid email format, and the password is a non-empty string with a minimum length of 8 characters.  The `LoginForm` type is then derived from the schema using `v.InferInput`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as v from 'valibot';\n\nconst LoginSchema = v.object({\n  email: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your email.'),\n    v.email('The email address is badly formatted.'),\n  ),\n  password: v.pipe(\n    v.string(),\n    v.nonEmpty('Please enter your password.'),\n    v.minLength(8, 'Your password must have 8 characters or more.'),\n  ),\n});\n\ntype LoginForm = v.InferInput<typeof LoginSchema>;\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Slot Projection Example in Qwik\nDESCRIPTION: Shows an example of both valid and invalid slot projections, demonstrating that q:slot attribute must be on a direct child of a component to work correctly.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/slots/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const Project = component$(() => { ... })\n\nexport const MyApp = component$(() => {\n  return (\n    <Project>\n      <span q:slot=\"title\">ok, direct child of Project</span>\n      <div>\n        <span q:slot=\"title\">Error, not a direct child of Project</span>\n      </div>\n    </Project>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Handling React Events in Qwik Components\nDESCRIPTION: Shows how to listen to React events in Qwik components using the qwikify$ function. This example demonstrates converting a React Slider component with an onChange event to a Qwik-compatible version.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from '@mui/material';\nimport { qwikify$ } from '@builder.io/qwik-react';\nconst MUISlider = qwikify$(Slider);\n\n<MUISlider client:visible onChange$={() => console.log('value changed')} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Components with Qwik Integration\nDESCRIPTION: Defines React button and display components that are qwikified for use in Qwik applications. The button is configured to hydrate on hover while the display hydrates on prop changes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\nimport { qwikify$ } from '@builder.io/qwik-react';\n\nfunction Button({ onClick }: { onClick: () => void }) {\n  console.log('React <Button/> Render');\n  return <button onClick={onClick}>+1</button>;\n}\n\nfunction Display({ count }: { count: number }) {\n  console.log('React <Display count=' + count + '/> Render');\n  return <p className=\"react\">Count: {count}</p>;\n}\n\nexport const QButton = qwikify$(Button, { eagerness: 'hover' });\nexport const QDisplay = qwikify$(Display);\n```\n\n----------------------------------------\n\nTITLE: Implementing a GET Request Handler in Qwik City\nDESCRIPTION: Example of implementing an onGet request handler function that returns product data based on a URL parameter. This handler is triggered specifically for GET HTTP method requests to the route.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/request-handling/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler<ProductData> = async ({ params }) => {\n  // put your DB access here (hard coding data for simplicity)\n  return {\n    skuId: params.skuId,\n    price: 123.45,\n    description: `Description for ${params.skuId}`,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: QwikCity Component with Route Action Submission\nDESCRIPTION: This snippet shows a QwikCity component utilizing a route action. It handles the action's value, checking for success or failure based on the validation result.  The `action.value` will contain the error message if the server-side validation failed due to an incorrect secret. A button triggers the submission of the action with data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/validator/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const action = useAction();\n\n  // action value is undefined before submitting\n  if (action.value) {\n    if (action.value.failed) {\n      // action failed if query string has no secret\n      action.value satisfies { failed: true; message: string };\n    } else {\n      action.value satisfies { searchResult: string };\n    }\n  }\n\n  return (\n    <button onClick$={() => action.submit({ search: \"foo\" })}>Submit</button>\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GitHub Organization UI Component in HTML\nDESCRIPTION: HTML markup for creating a simple UI component that displays a GitHub organization input field and a list of repositories with links. The component includes a label, input field pre-filled with 'QwikDev', and an unordered list of repository links.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/introduction/component/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<main>\n  <p>\n    <label>\n      GitHub organization:\n      <input value=\"QwikDev\" />\n    </label>\n  </p>\n  <section>\n    <ul>\n      <li>\n        <a href=\"https://github.com/QwikDev/qwik\">Qwik</a>\n      </li>\n      <li>\n        <a href=\"https://github.com/BuilderIO/partytown\">Partytown</a>\n      </li>\n    </ul>\n  </section>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Defining useNavigate Hook Type in TypeScript\nDESCRIPTION: Type definition for the useNavigate hook that returns a function to programmatically navigate between routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nuseNavigate: () => RouteNavigate;\n```\n\n----------------------------------------\n\nTITLE: Scoped Styles Example with useStylesScoped$\nDESCRIPTION: Demonstrates using useStylesScoped$ for component-scoped style loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_126\n\nLANGUAGE: tsx\nCODE:\n```\nimport scoped from \"./code-block.css?inline\";\n\nexport const CmpScopedStyles = component$(() => {\n  useStylesScoped$(scoped);\n\n  return <div>Some text</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Background in Qwik\nDESCRIPTION: This code snippet defines a Qwik component that dynamically changes the background color of a div. It uses the 'useSignal' hook to maintain the state of RGB color values, and a button triggers the randomization of these values. Dependencies include Qwik's 'component$' and 'useSignal'. The component expects no external input and produces a div with a randomly colored background.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const DynamicBackground = component$(() => {\n  const red = useSignal(0);\n  const green = useSignal(0);\n  const blue = useSignal(0);\n\n  return (\n    <div\n      style={{\n        background: `rgb(${red.value}, ${green.value}, ${blue.value})`,\n      }}\n    >\n      <button\n        onClick$={() => {\n          red.value = Math.random() * 256;\n          green.value = Math.random() * 256;\n          blue.value = Math.random() * 256;\n        }}\n      >\n        Change background\n      </button>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Image Optimization | Qwik | TypeScript\nDESCRIPTION: This snippet shows how to import necessary components from the Qwik library for image optimization, allowing the use of responsive images in your application. The required components are 'CodeSandbox' and 'PackageManagerTabs' from specified paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport CodeSandbox from '../../../../components/code-sandbox/index.tsx';\nimport PackageManagerTabs from '~/components/package-manager-tabs/index.tsx';\n```\n\n----------------------------------------\n\nTITLE: Age Prediction with useResource$ and API Integration\nDESCRIPTION: An example that uses the Agify API to predict age based on a name input. It demonstrates reactive data fetching, proper request cleanup, and rendering different UI states with the Resource component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  useSignal,\n  useResource$,\n  Resource,\n} from '@builder.io/qwik';\n\nexport default component$(() => {\n  const name = useSignal<string>();\n\n  const ageResource = useResource$<{\n    name: string;\n    age: number;\n    count: number;\n  }>(async ({ track, cleanup }) => {\n    track(() => name.value);\n    const abortController = new AbortController();\n    cleanup(() => abortController.abort('cleanup'));\n    const res = await fetch(`https://api.agify.io?name=${name.value}`, {\n      signal: abortController.signal,\n    });\n    return res.json();\n  });\n\n  return (\n    <section>\n      <div>\n        <label>\n          Enter your name, and I'll guess your age!\n          <input onInput$={(ev, el) => (name.value = el.value)} />\n        </label>\n      </div>\n      <Resource\n        value={ageResource}\n        onPending={() => <p>Loading...</p>}\n        onRejected={() => <p>Failed to person data</p>}\n        onResolved={(ageGuess) => {\n          return (\n            <p>\n              {name.value && (\n                <>\n                  {ageGuess.name} {ageGuess.age} years\n                </>\n              )}\n            </p>\n          );\n        }}\n      />\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Document Head in Nested Layouts in Qwik City\nDESCRIPTION: Shows how to modify the document head in nested layouts, allowing parent layouts to add to or modify the head configuration of child components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/pages/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\nexport const head: DocumentHead = {\n  title: `Foo`,\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/layout.tsx\nexport const head: DocumentHead = ({ head }) => {\n  return {\n    title: `MyCompany - ${head.title}`,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Declarative Routes in Components\nDESCRIPTION: Demonstrates different techniques for using Declarative Routes within Qwik components. The snippet includes methods for linking using the `RouteName` pattern.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PokemonDetail } from \"~/declarativeRoutes\";\n\nexport default component$(() => {\n  // ...\n  return (\n    // ...\n    <PokemonDetail.Link pokemonId={1}>Bulbasaur</PokemonDetail.Link>\n  );\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Link } from \"@builder.io/qwik-city\";\nimport { PokemonDetail } from \"~/declarativeRoutes\";\n\nexport default component$(() => {\n  // ...\n  return (\n    // ...\n    <Link href={PokemonDetail({ pokemonId: 1 })}>Bulbasaur</Link>\n  );\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PokemonDetail } from \"~/declarativeRoutes\";\n\nexport default component$(() => {\n  // ...\n  return (\n    // ...\n    <PokemonDetail.ParamsLink params={{ pokemonId: 1 }}>Bulbasaur</PokemonDetail.ParamsLink>\n  );\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PokemonDetail } from \"~/declarativeRoutes\";\n\nexport default component$(() => {\n  // Typescript will know the correct params and their types\n  const { pokemonId } = useParams(PokemonDetail);\n  // ...\n  return (\n    // ...\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Component with Server-Side Work in Qwik\nDESCRIPTION: An example of a more complex Qwik component that demonstrates how expensive operations and large component trees are handled only on the server, while the client still receives minimal code for visibility-based tasks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-tasks/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { component$, useSignal, useVisibleTask$ } from \"@builder.io/qwik\";\nimport doReallyExpensiveWork from './huge-file'\nimport { SomeHugeComponent, LotsMoreComponents } from './huge-components'\n\nexport const Animated = component$(() => {\n  const animate = useSignal(false);\n\n  useVisibleTask$(() => {\n    animate.value = true;\n  });\n\n  // NBD, this will only run on server\n  const value = doReallyExpensiveWork()\n\n  return (\n    <div\n      class={{\n        animate: animate.value,\n      }}\n    >\n      {/* NBD, these won't load in the browser, even tho this component does */}\n      <SomeHugeComponent value={value} />\n      <LotsMoreComponents />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Content Projection with Unprojected Content Handling\nDESCRIPTION: Demonstrates how Qwik handles content that isn't immediately projected by storing it in an inert <q:template> element. This example shows an accordion component that conditionally displays its content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/slots/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slot, component$, useSignal } from '@builder.io/qwik';\n\nconst Accordion = component$(() => {\n  const isOpen = useSignal(false);\n  return (\n    <div>\n      <h1 onClick$={() => (isOpen.value = !isOpen.value)}>\n        {isOpen.value ? '‚ñº' : '‚ñ∂Ô∏é'}\n      </h1>\n      {isOpen.value && <Slot />}\n    </div>\n  );\n});\n\nexport default component$(() => {\n  return (\n    <Accordion>\n      I am pre-rendered on the Server and hidden until needed.\n    </Accordion>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Data with Qwik $() Function\nDESCRIPTION: This snippet demonstrates how to use the $() function to mark a string for lazy loading in Qwik. The lazy-loaded value is then resolved using await within a click event handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/qrl/data/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, useSignal, $ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const message = useSignal('');\n\n  return (\n    <>\n      <button\n        onClick$={async () => {\n          // Resolve the lazy-loaded string\n          message.value = await $('Hello World!');\n        }}\n      >\n        Click me\n      </button>\n      <p>{message.value}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SPA Navigation in Qwik\nDESCRIPTION: Demonstrates how to use Link component and useNavigate hook for client-side navigation in a Qwik application\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Link, useNavigate } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const nav = useNavigate();\n  return (\n    <div>\n      <Link href=\"/about\">About (preferred)</Link>\n      <button onClick$={() => nav('/about')}>About</button>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Pages Adapter for SSG Sitemap Generation in Qwik\nDESCRIPTION: This snippet shows how to configure the Cloudflare Pages adapter to generate a sitemap for Static Site Generation (SSG) in Qwik. It demonstrates setting the include paths, origin, and custom sitemap output file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/sitemaps/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  plugins: [\n    cloudflarePagesAdapter({\n      ssg: {\n        include: ['/*'],\n        origin: 'https://qwik.dev',\n        sitemapOutFile: 'sitemap.xml',\n      },\n    }),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Declaring routeActionQrl constant in Qwik\nDESCRIPTION: This snippet declares a constant `routeActionQrl` of type `ActionConstructorQRL`. This constant likely represents a QRL (Qwik URL) function or class used to create route actions within a Qwik City application, enabling lazy loading of the action.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nrouteActionQrl: ActionConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Action Handler for Server-side Processing in Qwik\nDESCRIPTION: Implements a server-side form action handler using formAction$ to process form submissions. The handler validates form data on the server using the same Zod schema and logs the submitted values.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// FILE: src/routes/modular-forms/index.tsx\n\n// .... our previous code\n\nexport const useFormAction = formAction$<LoginForm>((values) => {\n  // Runs on server\n  console.log(values);\n  // This validates the values on the server side.\n  // And cannot be manipulated by an attacker. ‚úÖ \n}, zodForm$(formSchema));\n\nexport default component$(() => {\n  const [_, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    validate: zodForm$(formSchema),\n    action: useFormAction(),\n  });\n\n  // ... the rest of our previous code\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page Component in Qwik City\nDESCRIPTION: Demonstrates how to create a simple page component in Qwik City by exporting a default component in an index.tsx file within the src/routes directory.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\n// Notice the default export\nexport default component$(() => {\n  return <h1>Hello World!</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Using preventdefault:click attribute in Qwik\nDESCRIPTION: This example shows how to prevent default navigation behavior on a link click using the preventdefault:click attribute in Qwik. This allows Qwikloader to synchronously call preventDefault() when the event is triggered, even before the event handler is loaded.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/events/preventdefault/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"...\" preventdefault:click>\n```\n\n----------------------------------------\n\nTITLE: Defining QwikCityMockProps interface in Qwik\nDESCRIPTION: This snippet defines the `QwikCityMockProps` interface, including optional properties like `goto`, `params`, and `url`. These properties are intended to mock the behavior of a Qwik City application for testing or development purposes.  They allow setting the route navigator, parameters, and URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityMockProps\n```\n\n----------------------------------------\n\nTITLE: Disabling Link Prefetching\nDESCRIPTION: Demonstrates how to disable automatic link prefetching in Qwik\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Link prefetch={false} href=\"/about\">About</Link>\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Entry Middleware in entry.cloudflare-pages.tsx\nDESCRIPTION: This TypeScript code initializes Qwik City's Cloudflare Pages middleware, defining the fetch handler for the entry point of the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createQwikCity,\n  type PlatformCloudflarePages,\n} from '@builder.io/qwik-city/middleware/cloudflare-pages';\nimport qwikCityPlan from '@qwik-city-plan';\nimport render from './entry.ssr';\n\nconst fetch = createQwikCity({ render, qwikCityPlan });\n\nexport { fetch };\n```\n\n----------------------------------------\n\nTITLE: Qwik Component with Dynamic import.meta.glob\nDESCRIPTION: This Qwik component utilizes `import.meta.glob` to dynamically import components based on the environment (development or production) using the `isDev` boolean. It demonstrates a workaround to address issues with `import.meta.glob` in Qwik, ensuring it functions correctly in both development and production builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/glob-import/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"import {\\n  type Component,\\n  component$,\\n  useSignal,\\n  useTask$,\\n} from '@builder.io/qwik';\\nimport { isDev } from '@builder.io/qwik';\\n\\nconst metaGlobComponents: Record<string, any> = import.meta.glob(\\n  '/src/examples/*',\\n  {\\n    import: 'default',\\n    eager: isDev ? false : true,\\n  }\\n);\\n\\nexport default component$(() => {\\n  return (\\n    <div>\\n      <MetaGlobExample name=\\\"example1\\\" />\\n      <MetaGlobExample name=\\\"example2\\\" />\\n      <MetaGlobExample name=\\\"example3\\\" />\\n    </div>\\n  );\\n});\\n\\nexport const MetaGlobExample = component$<{ name: string }>(({ name }) => {\\n  const MetaGlobComponent = useSignal<Component<any>>();\\n  const componentPath = `/src/examples/${name}.tsx`;\\n\\n  useTask$(async () => {\\n    MetaGlobComponent.value = isDev\\n      ? await metaGlobComponents[componentPath]()\\n      // We need to call `await metaGlobComponents[componentPath]()` in development as it is `eager:false`\\n      : metaGlobComponents[componentPath];\\n      // We need to directly access the `metaGlobComponents[componentPath]` expression in preview/production as it is `eager:true`\\n  });\\n\\n  return <>{MetaGlobComponent.value && <MetaGlobComponent.value />}</>;\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Responses in Qwik City\nDESCRIPTION: This middleware function allows sending a raw HTTP response by utilizing the native Response object, providing flexibility in response generation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({send}) => {\n  const response = new Response('Hello World', {\n    status: 200,\n    headers: {\n      'Content-Type': 'text/plain',\n    },\n  });\n  send(response);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Content Information with useContent() in TypeScript\nDESCRIPTION: The useContent() function retrieves content information for the current route, including headings and menu data. It returns an object with headings and menu properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nheadings: ContentHeading[] | undefined;\nmenu: ContentMenu | undefined;\n```\n\n----------------------------------------\n\nTITLE: Handling CDN Cache Control Headers with Qwik-City in TypeScript\nDESCRIPTION: Illustrates adding separate cache control headers for handling CDN-specific caching in Qwik City applications, to overcome limitations of certain CDNs such as Vercel Edge.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/caching/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\n\nexport const onGet: RequestHandler = async ({ cacheControl }) => {\n    // If you want the browser to use \"stale-while-revalidate\" or \"s-maxage\" Cache Control headers, you have to add the second cacheControl with \"CDN-Cache-Control\" or \"Vercel-CDN-Cache-Control\" on Vercel Edge \n    cacheControl({\n      staleWhileRevalidate: 60 * 60 * 24 * 365,\n      maxAge: 5,\n    });\n    cacheControl({\n      maxAge: 5,\n      staleWhileRevalidate: 60 * 60 * 24 * 365,\n    }, \"CDN-Cache-Control\");\n};\n```\n\n----------------------------------------\n\nTITLE: Creating different types of signals in Qwik\nDESCRIPTION: Examples of creating signals with different data types in Qwik. Shows valid uses with primitive types and flat objects, as well as incorrect usage with arrays and nested objects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/hooks/use-signal/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst intStore = useSignal(0);\nconst stringStore = useSignal('foo');\nconst booleanStore = useSignal(true);\nconst objectStore = useSignal({fruit: 'apple', color: 'green'});\n\n// DON'T DO THIS!\nconst arrayStore = useSignal(['banana','oranges']);\nconst nestedObjectStore = useSignal({\n  fruits: {\n    banana: 10,\n    apple: 5\n  },\n  vegetables: {\n    tomato: 7,\n    broccoli: 14\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Optimal event listener registration using useOnDocument in Qwik\nDESCRIPTION: This snippet shows how to use the useOnDocument hook to register event listeners efficiently, avoiding the eager execution and unnecessary loading of JavaScript.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nuseOnDocument(\n  'mousemove',\n  $((event) => {\n    const mouseEvent = event as MouseEvent;\n    console.log(mouseEvent.x, mouseEvent.y);\n    // No manual clean up required!\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout Component in Qwik\nDESCRIPTION: Creates a root layout component that includes Header, Menu, and Footer components, with a Slot for nested route content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/layout/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <>\n      <Header />\n      <Menu />\n      <Slot /> {/* <== This is where the route will be inserted */}\n      <Footer />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining StaticGenerateOptions Interface\nDESCRIPTION: The StaticGenerateOptions interface extends StaticGenerateRenderOptions and includes properties for configuring the static site generation process, such as paths to modules and base pathname.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-static/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StaticGenerateOptions extends StaticGenerateRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple React Component Wrapped in Qwik in TypeScript\nDESCRIPTION: This snippet illustrates the creation of a simple 'Greetings' React component, wrapping it in a Qwik-compatible component using qwikify$. It serves as a foundational example of how to structure a file for using React components within Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create React component standard way\nfunction Greetings() {\n  return <p>Hello from React</p>;\n}\n\n// Convert React component to Qwik component\nexport const QGreetings = qwikify$(Greetings);\n```\n\n----------------------------------------\n\nTITLE: MetaGlobComponent Usage in TSX\nDESCRIPTION: This code snippet demonstrates how to use the `MetaGlobComponent` to dynamically render components based on the `name` prop. It shows passing different file names as props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/glob-import/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"<MetaGlobComponent name=\\\"file-name\\\" />\\n<MetaGlobComponent name=\\\"another-file-name\\\" />\\n<MetaGlobComponent name=\\\"etc.\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Qwik Components Directory with Barrel Structure\nDESCRIPTION: This snippet shows the structure of the src/components directory after creating a Button component using the barrel file structure.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsrc\n‚îÇ   ‚îú‚îÄ‚îÄ components\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ router-head\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ router-head.tsx\n‚îÇ   ‚îÇ       Button\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring vite.config.ts for Qwik Library Mode\nDESCRIPTION: Vite configuration for a Qwik component library using Vite's library mode, specifying the entry point and output formats.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/library/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { qwikVite } from '@builder.io/qwik/optimizer';\n\nexport default defineConfig(() => {\n  return {\n    build: {\n      target: 'es2020',\n      lib: {\n        entry: './src/index.ts',\n        formats: ['es', 'cjs'],\n        fileName: (format) => `index.qwik.${format === 'es' ? 'mjs' : 'cjs'}`,\n      },\n    },\n    plugins: [qwikVite()],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Qwikloader Event Listener Implementation\nDESCRIPTION: Shows how Qwik serializes event listeners into the DOM using QRLs. Demonstrates the structure of event handling attributes and chunk references.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qwikloader/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <button on:click=\"./chunk-a.js#Counter_button_onClick[0]\">0</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using useOnDocument Hook for Mouse Position Tracking in Qwik\nDESCRIPTION: This snippet shows how to use the useOnDocument hook to track mouse position in a Qwik component. It demonstrates creating a custom hook (useMousePosition) that listens to mousemove events on the document.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $, component$, useOnDocument, useStore } from '@builder.io/qwik';\n\n// Assume reusable use method that does not have access to JSX\n// but needs to register event handlers.\nfunction useMousePosition() {\n  const position = useStore({ x: 0, y: 0 });\n  useOnDocument(\n    'mousemove',\n    $((event) => {\n      const { x, y } = event as MouseEvent;\n      position.x = x;\n      position.y = y;\n    })\n  );\n  return position;\n}\n\nexport default component$(() => {\n  const pos = useMousePosition();\n  return (\n    <div>\n      MousePosition: ({pos.x}, {pos.y})\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentHeadProps Interface in Qwik City\nDESCRIPTION: Interface definition for DocumentHeadProps which extends RouteLocation and provides context for generating document head metadata. It includes the current head, utility methods for resolving values and handling locales.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentHeadProps extends RouteLocation\n```\n\n----------------------------------------\n\nTITLE: Defining Bun Server Adapter and Interface for Qwik City in TypeScript\nDESCRIPTION: This code defines the API for the Bun server adapter in the @builder.io/qwik-city package. It includes a bunServerAdapter function that accepts configuration options and an interface extending ServerAdapterOptions. The file also re-exports StaticGenerateRenderOptions from another module.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/bun-server/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @alpha (undocumented)\nexport function bunServerAdapter(opts?: bunServerAdapterOptions): any;\n\n// @alpha (undocumented)\nexport interface bunServerAdapterOptions extends ServerAdapterOptions {\n    // (undocumented)\n    name?: string;\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Plugins in Vite\nDESCRIPTION: Vite configuration for customizing MDX plugins in Qwik City\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { qwikCity } from '@builder.io/qwik-city/vite';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nexport default defineConfig(() => {\n  return {\n    plugins: [\n      qwikCity({\n        mdxPlugins: {\n          remarkGfm: false,\n          rehypeSyntaxHighlight: false,\n          rehypeAutolinkHeadings: false,\n        },\n        mdx: {\n          rehypePlugins: [\n            [rehypeAutolinkHeadings, { behavior: 'wrap' }],\n          ],\n        },\n      }),\n      /* the rest of the configuration */\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Example of function-invocation-routes config in _routes.json\nDESCRIPTION: This JSON configuration controls which paths should invoke Cloudflare worker functions, determining whether responses should be server-side rendered or statically served.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"/*\"],\n  \"exclude\": [\n    \"/_headers\",\n    \"/_redirects\",\n    \"/build/*\",\n    \"/favicon.ico\",\n    \"/manifest.json\",\n    \"/service-worker.js\",\n    \"/about\"\n  ],\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced import.meta.glob Usage in TSX\nDESCRIPTION: This code illustrates how to use `import.meta.glob` with additional options such as `import`, `as`, and `eager`.  These options control how the files are imported and handled, including named imports, assigning to raw strings, and eager loading.  The type `any` is used for flexibility.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/glob-import/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"const metaGlobComponents: any = import.meta.glob('/src/components/*', {\\n  import: 'default',\\n  as: 'raw',\\n  eager: true, // defaults to false\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status in Qwik City\nDESCRIPTION: This middleware function allows setting the HTTP response status code, useful for streaming responses or providing custom status messages.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ status, getWritableStream }) => {\n  status(200);\n  const stream = getWritableStream();\n  const writer = stream.getWriter();\n  writer.write(new TextEncoder().encode('Hello World!'));\n  writer.close();\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Body Data in Qwik City\nDESCRIPTION: This middleware parses form data from incoming requests, supporting various content types such as JSON and URL encoded data, allowing for flexible handling of submitted data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ html }) => {\n  html(\n    200,\n    `\n      <form id=\"myForm\" method=\"POST\">\n        <input type=\"text\" name=\"project\" value=\"Qwik\"/>\n        <input type=\"text\" name=\"url\" value=\"http://qwik.dev\"/>\n      </form>\n      <script>myForm.submit()</script>`\n  );\n};\n\nexport const onPost: RequestHandler = async ({ parseBody, json }) => {\n  json(200, { body: await parseBody() });\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Qwik Components with Vitest\nDESCRIPTION: A test file showcasing how to test a Qwik component using the createDOM utility and Vitest. It demonstrates testing both initial rendering and user interactions like clicking a button, verifying the component's behavior through DOM assertions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// card.test.tsx\n\nimport { createDOM } from '@builder.io/qwik/testing';\nimport { test, expect } from 'vitest';\nimport Card from './card.tsx';\n\ntest(`[Card Component]: üôå Only render`, async () => {\n  const { screen, render } = await await createDOM();\n  await render(<Card />);\n  expect(screen.outerHTML).toContain('Counter_0');\n});\n\ntest(`[Card Component]: üôå Click counter +1 `, async () => {\n  const { screen, render, userEvent } = await await createDOM();\n  await render(<Card />);\n  expect(screen.outerHTML).toContain('Counter_0');\n  await userEvent('button.btn-counter', 'click');\n  expect(screen.outerHTML).toContain('Counter_1');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-incrementing Clock\nDESCRIPTION: Creates a clock that updates every second using intervals. Shows the difference between React's useEffect and Qwik's useVisibleTask$.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Clock() {\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  return <p>Seconds: {seconds}</p>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Clock = component$(() => {\n  const seconds = useSignal(0);\n  useVisibleTask$(({ cleanup }) => {\n    const interval = setInterval(() => {\n      seconds.value++;\n    }, 1000);\n    cleanup(() => clearInterval(interval));\n  });\n\n  return <p>Seconds: {seconds.value}</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with formAction$ and onSubmit$\nDESCRIPTION: This TSX code demonstrates how to handle form submission using `formAction$` for server-side logic and `onSubmit$` for client-side logic. `formAction$` is used to define an action that runs on the server when the form is submitted.  `onSubmit$` is a function that runs on the client after the form is submitted, allowing you to handle the form data and update the UI.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useFormAction = formAction$<LoginForm>((values) => {\n  // Runs on server\n}, valiForm$(LoginSchema));\n\nexport default component$(() => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n    action: useFormAction(),\n    validate: valiForm$(LoginSchema),\n  });\n\n  const handleSubmit = $<SubmitHandler<LoginForm>>((values, event) => {\n    // Runs on client\n  });\n\n  return (\n    <Form onSubmit$={handleSubmit}>\n      ‚Ä¶\n    </Form>\n  );\n});\n\n```\n\n----------------------------------------\n\nTITLE: QwikCity Validator with Status Code and Error Object\nDESCRIPTION: This example shows how to return a specific status code and error object from a QwikCity validator. It mimics the `fail()` method behavior within a `routeAction$`. When the validator fails, it returns a `status` and an `errorObject`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/validator/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst status = 500;\nconst errorObject = { message: \"123\" };\n\nexport const useAction = routeAction$(\n  async (_, { fail }) => {\n    return fail(status, errorObject);\n  },\n  validator$(async () => {\n    return {\n      success: false,\n      status,\n      errorObject,\n    };\n  }),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Wide Island Pattern Implementation\nDESCRIPTION: Demonstrates the recommended approach of creating a single qwikified component containing multiple MUI components, showing proper component composition.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ImageIcon from '@mui/icons-material/Image';\nimport WorkIcon from '@mui/icons-material/Work';\nimport BeachAccessIcon from '@mui/icons-material/BeachAccess';\n\n// Qwikify the whole list\nexport const FolderList = qwikify$(() => {\n  return (\n    <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar>\n            <ImageIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary=\"Photos\" secondary=\"Jan 9, 2014\" />\n      </ListItem>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar>\n            <WorkIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\n      </ListItem>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar>\n            <BeachAccessIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary=\"Vacation\" secondary=\"July 20, 2014\" />\n      </ListItem>\n    </List>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining useOn hook in TypeScript\nDESCRIPTION: Signature of the useOn hook which registers event listeners on the current component's host element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nuseOn: <T extends KnownEventNames>(event: T | T[], eventQrl: EventQRL<T>) => void\n```\n\n----------------------------------------\n\nTITLE: Preventing Navigation with Modal Library in Qwik\nDESCRIPTION: This snippet demonstrates how to use `usePreventNavigate` in a Qwik component along with a modal library to prevent navigation if the user has unsaved changes. It uses `confirmDialog` function to show a modal and returns a promise indicating whether the user wants to proceed with navigation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/usePreventNavigate/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default component$(() => {\n  const okToNavigate = useSignal(true);\n  usePreventNavigate$((url) => {\n    if (!okToNavigate.value) {\n      // we we didn't get a url, the browser is navigating away\n      // and we must respond synchronously without dialogs\n      if (!url) return true;\n\n      // Here we assume that the confirmDialog function shows a modal and returns a promise for the result\n      return confirmDialog(\n        `Do you want to lose changes and go to ${url}?`\n      ).then(answer => !answer);\n      // or simply using the browser confirm dialog:\n      // return !confirm(`Do you want to lose changes and go to ${url}?`);\n    }\n  });\n\n  return (\n    <div>\n      <button onClick$={() => (okToNavigate.value = !okToNavigate.value)}>\n        toggle user state\n      </button>\n      application content\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Form Action Implementation with User Addition\nDESCRIPTION: Demonstrates implementing a form action for adding users with success state handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { action$, Form } from '@builder.io/qwik-city';\nimport { component$ } from '@builder.io/qwik';\n\nexport const useAddUser = action$((user) => {\n  const userID = db.users.add(user);\n  return {\n    success: true,\n    userID,\n  };\n});\n\nexport default component$(() => {\n  const action = useAddUser();\n  return (\n    <Form action={action}>\n      <input name=\"name\" />\n      <button>Add user</button>\n      {action.value?.success && <div>User added successfully</div>}\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Format | Qwik | TypeScript\nDESCRIPTION: This snippet illustrates how to customize the image format by changing the import parameters for the Image component. Formats such as PNG can be specified when importing an image.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport Image from '~/media/your_image.jpg?format=png&jsx';\n\nexport default component$(() => {\n  return (\n    <div>\n      <Image />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Node Server Adapter Types in TypeScript\nDESCRIPTION: Defines the core types and interfaces for Qwik City's node server adapter. Includes a function to create a node server adapter and an interface extending ServerAdapterOptions with an optional name property.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/node-server/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @alpha (undocumented)\nexport function nodeServerAdapter(opts?: NodeServerAdapterOptions): any;\n\n// @alpha (undocumented)\nexport interface NodeServerAdapterOptions extends ServerAdapterOptions {\n    // (undocumented)\n    name?: string;\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Event Listener Serialization in Qwik HTML\nDESCRIPTION: Demonstrates how Qwik serializes event listeners into DOM attributes, allowing lazy loading of handlers without eager code download. The example shows a button element with a serialized click event handler that references an external chunk file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/resumable/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button on:click=\"./chunk.js#handler_symbol\">click me</button>\n```\n\n----------------------------------------\n\nTITLE: Netlify Edge Functions Declarations | TOML\nDESCRIPTION: This snippet illustrates how to configure edge function declarations in the 'netlify.toml' file, mapping URL patterns to specific functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[edge_functions]]\n  path = \"/admin\"\n  function = \"auth\"\n```\n\n----------------------------------------\n\nTITLE: Combined Page and Endpoint Handler in Qwik City\nDESCRIPTION: Example showing how to combine both page rendering and request handling in a single file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onRequest: RequestHandler = ({ headers, query, json }) => {\n  headers.set('Cache-Control', 'private');\n  if (query.get('format') === 'json') {\n    json(200, { message: 'Hello World' });\n  }\n};\n\nexport default component$(() => {\n  return <h1>Hello World</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Computed Function in TypeScript\nDESCRIPTION: Declares the useComputed$ function, which returns a computed signal calculated from other signals. It takes a ComputedFn as an argument and returns a Signal.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nuseComputed$: <T>(qrl: ComputedFn<T>) => Signal<Awaited<T>>;\n```\n\n----------------------------------------\n\nTITLE: Defining useErrorBoundary hook in TypeScript\nDESCRIPTION: Signature of the useErrorBoundary hook which returns an ErrorBoundaryStore for handling component errors.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nuseErrorBoundary: () => ErrorBoundaryStore;\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Counter Component in TypeScript\nDESCRIPTION: A simple Qwik counter component that uses the useSignal hook for state management and the component$ function to define a component with a click handler that increments a counter value.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/astro-qwik/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from \"@builder.io/qwik\";\n\nexport const Counter = component$(() => {\n  const counter = useSignal(0);\n\n  return <button onClick$={() => counter.value++}>{counter.value}</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Component with noSerialize() for Monaco Editor\nDESCRIPTION: This code demonstrates how to use `noSerialize()` in a Qwik component to handle the Monaco editor instance. The Monaco editor is a third-party library that cannot be serialized, so it's instantiated on the client-side after the component is visible. `noSerialize` prevents Qwik from trying to serialize the editor instance, setting it to undefined during SSR and allowing re-initialization on the client.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  useStore,\n  useSignal,\n  noSerialize,\n  useVisibleTask$,\n  type NoSerialize,\n} from '@builder.io/qwik';\nimport type Monaco from './monaco';\nimport { monacoEditor } from './monaco';\n\nexport default component$(() => {\n  const editorRef = useSignal<HTMLElement>();\n  const store = useStore<{ monacoInstance: NoSerialize<Monaco> }>({\n    monacoInstance: undefined,\n  });\n\n  useVisibleTask$(() => {\n    const editor = monacoEditor.create(editorRef.value!, {\n      value: 'Hello, world!',\n    });\n    // Monaco is not serializable, so we can't serialize it as part of SSR\n    // We can however instantiate it on the client after the component is visible\n    store.monacoInstance = noSerialize(editor);\n  });\n  return <div ref={editorRef}>loading...</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Provider with QwikAuth\nDESCRIPTION: Sets up the Qwik Auth.js plugin with GitHub as the authentication provider. It exports the necessary authentication functions to be used throughout the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\";\nimport GitHub from \"@auth/qwik/providers/github\";\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [GitHub],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Nested Layout for Product Details in Qwik City\nDESCRIPTION: This code shows how to implement a nested layout specifically for product detail pages. It extends the layout hierarchy by adding product-specific UI elements like a featured products section that appears only within the product details section of the site.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/products/[productId]/layout.tsx\nimport { component$, Slot } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <>\n      <Slot />\n      <h2>Featured products</h2>\n      {/* Carousel of featured products */}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring createQwikCity Function for Cloudflare Pages Integration\nDESCRIPTION: Function declaration for creating Qwik City middleware for Cloudflare Pages. Takes configuration options and returns a handler function that processes requests with Cloudflare Pages platform-specific context and environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-cloudflare-pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(opts: QwikCityCloudflarePagesOptions): (\n  request: PlatformCloudflarePages[\"request\"],\n  env: PlatformCloudflarePages[\"env\"] & {\n    ASSETS: {\n      fetch: (req: Request) => Response;\n    };\n  },\n  ctx: PlatformCloudflarePages[\"ctx\"],\n) => Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Public Environment Variables in Qwik Components\nDESCRIPTION: Example of accessing a PUBLIC_ prefixed environment variable within a Qwik component using import.meta.env. These variables can be accessed anywhere, including in the browser.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  // `import.meta.env.PUBLIC_*` variables can be read anywhere, including browser\n  return <div>PUBLIC_API_URL: {import.meta.env.PUBLIC_API_URL}</div>\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Named Layouts in Qwik City\nDESCRIPTION: Shows how to implement named layouts in Qwik City where different routes can use different layout templates. This is achieved by naming conventions for layout files and using the @name suffix for index files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ contact/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index@narrow.tsx      # https://example.com/contact (Layout: layout-narrow.tsx)\n    ‚îú‚îÄ‚îÄ layout.tsx                # Default layout\n    ‚îú‚îÄ‚îÄ layout-narrow.tsx         # Named layout\n    ‚îî‚îÄ‚îÄ index.tsx                 # https://example.com/ (Layout: layout.tsx)\n```\n\n----------------------------------------\n\nTITLE: Installing Orama via pnpm\nDESCRIPTION: This snippet shows the command to install Orama using pnpm. It adds Orama as a dependency in a Qwik project, creating a public route for integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/orama/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add orama\n```\n\n----------------------------------------\n\nTITLE: Enhanced Layout with Header and Footer in Qwik City\nDESCRIPTION: This code demonstrates a more complex layout implementation with header and footer components. It wraps the Slot component (child page content) with consistent UI elements that will be shared across all pages of the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/layout.tsx\nimport { component$, Slot } from '@builder.io/qwik';\n\nimport Header from '~/component/header/header';\nimport Footer from '~/components/footer/footer';\n\nexport default component$(() => {\n  return (\n    <>\n      <Header />\n      <main>\n        <Slot />\n      </main>\n      <Footer />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Adapter to Qwik City (npm)\nDESCRIPTION: This command adds the Firebase adapter to your Qwik City project using npm. It installs the necessary dependencies and sets up the required configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"npm run qwik add firebase\"\n```\n\n----------------------------------------\n\nTITLE: Declaring globalAction$ in TypeScript\nDESCRIPTION: Declares globalAction$ as an ActionConstructor type, used for creating global actions in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nglobalAction$: ActionConstructor;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using noSerialize for Cleanup Function in Qwik\nDESCRIPTION: This snippet shows how to import the noSerialize function from '@builder.io/qwik' and use it to wrap the clearInterval function. This allows for proper cleanup of intervals when the application is paused or resumed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/store/no-serialize/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { noSerialize } from '@builder.io/qwik';\n\nstore.cleanup = noSerialize(() => clearInterval(intervalId));\n```\n\n----------------------------------------\n\nTITLE: Copying Existing Example as Template for New Example in Shell\nDESCRIPTION: Command to copy the hello-world example folder to create a new example called my-new-example within the introduction category.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/examples/apps/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp -r introduction/hello-world introduction/my-new-example\n```\n\n----------------------------------------\n\nTITLE: General Pattern for Creating $ Suffix APIs\nDESCRIPTION: The general pattern for creating Qwik APIs with $ suffix, showing the naming convention and relationship between Qrl and $ versions of functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/composing/dollar/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const SOME_NAME_Qrl = ...;\nexport const SOME_NAME_$ = implicit$FirstArg(SOME_NAME_Qrl);\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with RouteAction$ in QwikCity\nDESCRIPTION: This code demonstrates how to upload files using a routeAction$ programmatically. It creates a FormData object and appends the file before submitting the action, allowing for file uploads without a Form component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$ } from '@builder.io/qwik-city';\n\nexport const useUploadFile = routeAction$(async ({file}) => {\n  // save the file somewhere...\n  return {\n    success: true,\n  };\n});\n\nexport default component$(() => {\n  const action = useUploadFile();\n  const fileUploadRef = useSignal<HTMLInputElement | undefined>();\n  return (\n    <section>\n      <input type=\"file\" ref={fileUploadRef}/>\n      <button\n        onClick$={async () => {\n          \n          const file = fileUploadRef.value?.files?.[0];\n\n          if (file){\n            const formData = new FormData();\n            formData.append('file', file);\n            const { value } = await action.submit(formData);\n            console.log(value);\n          }\n        }}\n      >\n        Upload file\n      </button>\n      \n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Components in Qwik\nDESCRIPTION: This snippet demonstrates how Qwik handles dynamic component rendering, showcasing the simplicity of the syntax compared to other frameworks like Solid, Svelte, Vue, and Angular.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/faq/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst DynamicList = [ CompA, CompB, ...];\nexport const DynamicExample = component$(() => {\n  const idx = Math.floor(Math.random() * DynamicList.length);\n  const Component = DynamicList[idx];\n  {/* Dynamically chose which component to render */}\n  return <Component/>; \n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple CSS Classes in Qwik Component\nDESCRIPTION: Shows how to apply multiple CSS classes to a Qwik component using arrays and objects. This allows for dynamic class application based on component props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport styles from './MyComponent.module.css';\n\nexport default component$((props) => {\n  // Array syntax example\n  return <div class={[\n    styles.container, \n    'p-8', \n    props.isHighAttention ? 'text-green-500' : 'text-slate-500',\n    { active: true}\n  ]}>Hello world</div>;\n\n  // Object syntax example\n  return <div class={{  \n    'text-green-500': props.isHighAttention,\n    'p-4': true\n  }}>Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Task Function Type in TypeScript\nDESCRIPTION: Defines a type for task functions used in Qwik's useTask$ hook. The function takes a TaskCtx parameter and returns a value or promise that may include a cleanup function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TaskFn = (ctx: TaskCtx) => ValueOrPromise<void | (() => void)>;\n```\n\n----------------------------------------\n\nTITLE: Using useId() for Consistent Element IDs in Qwik\nDESCRIPTION: Demonstrates how to use useId() to generate consistent element IDs across server and client environments in a Qwik component. This is useful for accessibility, animation engines, and other client-side libraries in a microfrontends setup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  component$,\n  useId,\n  useSignal,\n  useVisibleTask$,\n} from '@builder.io/qwik';\n\nexport default component$(() => {\n  const elemIdSignal = useSignal<string | null>(null);\n  const id = useId();\n  const elemId = `${id}-example`;\n  console.log('server-side id:', elemId);\n\n  useVisibleTask$(() => {\n    const elem = document.getElementById(elemId);\n    elemIdSignal.value = elem?.getAttribute('id') || null;\n    console.log('client-side id:', elemIdSignal.value);\n  });\n\n  return (\n    <section>\n      <div id={elemId}>\n        Both server-side and client-side console should match this id:\n        <br />\n        <b>{elemIdSignal.value || null}</b>\n      </div>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating RouterHead Component to Render Head Scripts in Qwik City\nDESCRIPTION: Shows how to modify the RouterHead component to render scripts defined in the head configuration, which is necessary for features like Google Structured Data to work properly.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/pages/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\nimport { useDocumentHead, useLocation } from \"@builder.io/qwik-city\";\n\nexport const RouterHead = component$(() => {\n  const head = useDocumentHead();\n  const loc = useLocation();\n\n  return (\n    <>\n      <title>{head.title}</title>\n\n      {/* add this  */}\n      {head.scripts.map((s) => (\n        <script key={s.key} {...s.props} dangerouslySetInnerHTML={s.script} />\n      ))}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining transformFsSync Function in TypeScript\nDESCRIPTION: This TypeScript code defines the `transformFsSync` function for Qwik.  It transforms a directory from the file system synchronously using the provided `TransformFsOptions` and returns a `TransformOutput`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntransformFsSync(opts: TransformFsOptions): TransformOutput;\n```\n```\n\n----------------------------------------\n\nTITLE: API Exports for @builder.io/qwik-city\nDESCRIPTION: This code snippet defines the public API exports for the @builder.io/qwik-city package. It includes the vercelEdgeAdapter function and the VercelEdgeAdapterOptions interface that extends ServerAdapterOptions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/vercel-edge/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\nexport { StaticGenerateRenderOptions }\n\n// @public (undocumented)\nexport function vercelEdgeAdapter(opts?: VercelEdgeAdapterOptions): any;\n\n// @public (undocumented)\nexport interface VercelEdgeAdapterOptions extends ServerAdapterOptions {\n    outputConfig?: boolean;\n    staticPaths?: string[];\n    target?: 'webworker' | 'node';\n    vcConfigEntryPoint?: string;\n    vcConfigEnvVarsInUse?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind with yarn in Shell\nDESCRIPTION: The shell command to integrate Tailwind CSS into a Qwik project using the yarn package manager. It installs necessary dependencies for Tailwind CSS v3. Required dependency: yarn package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind-v3/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add tailwind-v3\n```\n\n----------------------------------------\n\nTITLE: Button Component Navigation Test in TypeScript\nDESCRIPTION: This test ensures that a Button component functions correctly within the Qwik framework, specifically testing its navigation capabilities. By mocking the navigation function using vitest, the test verifies that the button triggers the correct navigation behavior. It uses QwikCityMockProvider to provide the necessary context for testing navigation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $ } from '@builder.io/qwik';\nimport { createDOM } from '@builder.io/qwik/testing';\nimport { test, expect, vi } from 'vitest';\n\n// Component with one prop. Uses useNavigate internally. Omitted for brevity\nimport { Button } from '../button';\n\nconst goto = vi.fn(async (path, options) => {\n  console.log(`Navigating to ${path} with ${options}`);\n});\n\ntest('should render the button and navigate', async () => {\n  const { screen, render, userEvent } = await createDOM();\n  const goto$ = $(goto);\n  await render(\n    <QwikCityMockProvider goto={goto$}>\n      <Button id=\"button\" />\n    </QwikCityMockProvider>,\n  );\n  expect(screen.innerHTML).toMatchSnapshot();\n  await userEvent('#button', 'click');\n  expect(goto).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Component Structure Example\nDESCRIPTION: Demonstrates the basic JSX syntax transformation in Qwik, showing how JSX elements are converted to function calls.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/render/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag prop><Child /></Tag>\n```\n\nLANGUAGE: jsx\nCODE:\n```\njsx(Tag, {prop: true}, jsx(Child, null, null))\n```\n\n----------------------------------------\n\nTITLE: Validating Form Input with Valibot Schema\nDESCRIPTION: This TypeScript code demonstrates how to integrate Valibot validation with `@modular-forms/qwik` using the `valiForm$` adapter. The `LoginSchema` is passed to the `validate` option of the `useForm` hook, enabling automatic validation of the form fields. The `valiForm$` function adapts Valibot's error messages to the format expected by Modular Forms.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst [loginForm, { Form, Field, FieldArray }] = useForm<LoginForm>({\n  loader: useFormLoader(),\n  validate: valiForm$(LoginSchema),\n});\n\n```\n\n----------------------------------------\n\nTITLE: Optimized Counter Click Handler\nDESCRIPTION: The extracted click handler function in a separate chunk, demonstrating how the Optimizer handles event handlers and maintains scope.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/optimizer/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Counter_onClick = () => {\n  const [count] = useLexicalScope();\n  return count.value++;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Structured Data in Qwik City Pages\nDESCRIPTION: Demonstrates how to integrate Google Structured Data into a Qwik City page by adding a script to the head configuration, which helps provide explicit clues about the page's meaning to Google.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/pages/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport type { DocumentHead } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  return <h1>About page</h1>;\n});\n\nexport const head: DocumentHead = {\n  scripts: [\n    {\n      props: {\n        type: \"application/ld+json\",\n      },\n      script: JSON.stringify({\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"ItemList\",\n      }),\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring State with useSignal in Qwik\nDESCRIPTION: This code demonstrates how to declare a state variable using the useSignal hook in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst isFavoriteSignal = useSignal(false);\n```\n\n----------------------------------------\n\nTITLE: Accessing routeLoader$ Data in Another routeLoader$ in Qwik\nDESCRIPTION: Shows how to access data from one routeLoader$ inside another routeLoader$ using the requestEvent.resolveValue method. This allows for data sharing between loaders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useProductDetails = routeLoader$(async (requestEvent) => {\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product;\n});\n\nexport const useProductRecommendations = routeLoader$(async (requestEvent) => {\n  // Resolve the product details from the other loader\n  const product = await requestEvent.resolveValue(useProductDetails);\n\n  // Use the product details to fetch personalized data\n  const res = fetch(`https://.../recommendations?product=${product.id}`);\n  const recommendedProducts = (await res.json()) as Product[];\n\n  return recommendedProducts;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Sitemap Function in Qwik City\nDESCRIPTION: This function generates a sitemap XML based on provided entries. It defines an interface for sitemap entries and creates the XML structure with the given locations and priorities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/sitemaps/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/dynamic-sitemap.xml/create-sitemap.ts\n\nexport interface SitemapEntry {\n  loc: string;\n  priority: number;\n}\n\nexport function createSitemap(entries: SitemapEntry[]) {\n  const baseUrl = \"https://<YOUR_HOSTNAME>\";\n\n  return `\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n${entries.map(\n  (entry) => `\n    <url>\n        <loc>${baseUrl}${entry.loc.startsWith(\"/\") ? \"\" : \"/\"}${entry.loc}</loc>\n        <priority>${entry.priority}</priority>\n    </url>`,\n)}\n</urlset>`.trim();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StaticGenerateHandler Type in TypeScript\nDESCRIPTION: Type definition for a handler function that returns static generation configuration. It receives an environment getter and returns a StaticGenerate object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StaticGenerateHandler = ({\n  env,\n}: {\n  env: EnvGetter;\n}) => Promise<StaticGenerate> | StaticGenerate;\n```\n\n----------------------------------------\n\nTITLE: Styling Hooks in Qwik\nDESCRIPTION: Provides hooks for adding global and scoped styles in Qwik components. Includes both string literal and QRL variants for different usage patterns.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useStyles$: (qrl: string) => void;\n\n// @public\nexport const useStylesQrl: (styles: QRL<string>) => void;\n\n// @public\nexport const useStylesScoped$: (qrl: string) => UseStylesScoped;\n\n// @public (undocumented)\nexport interface UseStylesScoped {\n    // (undocumented)\n    scopeId: string;\n}\n\n// @public\nexport const useStylesScopedQrl: (styles: QRL<string>) => UseStylesScoped;\n```\n\n----------------------------------------\n\nTITLE: Using useSignOut Hook in Qwik\nDESCRIPTION: This snippet demonstrates how to use the useSignOut hook to allow users to sign out, including examples of form submission and programmatic usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Form } from '@builder.io/qwik-city';\nimport { useSignOut } from '~/routes/plugin@auth';\n\nexport default component$(() => {\n  const signOut = useSignOut();\n  return (\n    <Form action={signOut}>\n      <input type=\"hidden\" name=\"redirectTo\" value=\"/signedout\" />\n      <button>Sign Out</button>\n    </Form>\n  );\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useSignOut } from '~/routes/plugin@auth';\n\nexport default component$(() => {\n  const signOut = useSignOut();\n  return <button onClick$={() => signOut.submit({ redirectTo: '/signedout' })}>Sign Out</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Custom 404 Page in Qwik City\nDESCRIPTION: Shows the directory structure for implementing a custom 404 page at the root level in Qwik City. The 404.tsx file will use the layout.tsx layout since it's in the same directory.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ 404.tsx            # Custom 404\n    ‚îú‚îÄ‚îÄ layout.tsx         # Default layout\n    ‚îî‚îÄ‚îÄ index.tsx          # https://example.com/\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformCloudflarePages Interface\nDESCRIPTION: TypeScript interface defining the structure for Cloudflare Pages platform-specific types including request object, environment variables, and context with waitUntil functionality.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-cloudflare-pages/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformCloudflarePages\n```\n\n----------------------------------------\n\nTITLE: Qwikifying a Framer Motion Component\nDESCRIPTION: Converting a React Framer Motion component to be usable in Qwik using the qwikify$ function. This creates a Qwik-compatible component that can be used with client hydration directives.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// FILE: src/integrations/react/framer.tsx\n// ==========================================\n\n// üëáüèΩ this tells Qwik that the JSX here is React\n/** @jsxImportSource react */\n\nimport { motion } from \"framer-motion\";\n\n// one function to import \nimport { qwikify$ } from '@builder.io/qwik-react';\n\nconst MyComponent = () => (\n  <motion.div\n    animate={{\n      scale: [1, 2, 2, 1, 1],\n      rotate: [0, 0, 270, 270, 0],\n      borderRadius: ['20%', '20%', '50%', '50%', '20%'],\n      backgroundColor: ['#ff008c', '#d309e1', '#9c1aff', '#7700ff', '#ff008c'],\n      transition: { duration: 2 },\n    }}\n    className=\"h-52 w-52 rounded-sm bg-green-500\"\n  />\n);\n\n// All you need is to export:\nexport const FramerQwik = qwikify$(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Information with useLocation() in Qwik\nDESCRIPTION: The useLocation() function provides current URL, params, and navigation state. It returns a RouteLocation object containing params, url, and isNavigating properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouteLocation {\n  readonly params: Record<string, string>;\n  readonly url: URL;\n  readonly isNavigating: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Netlify Edge Adapter API for Qwik City\nDESCRIPTION: This code snippet defines the main export function 'netlifyEdgeAdapter' and the 'NetlifyEdgeAdapterOptions' interface for configuring how a Qwik application is deployed to Netlify Edge Functions. It includes options for excluding paths, configuring function routes, and specifying static paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/netlify-edge/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @public (undocumented)\nexport function netlifyEdgeAdapter(opts?: NetlifyEdgeAdapterOptions): any;\n\n// @public (undocumented)\nexport interface NetlifyEdgeAdapterOptions extends ServerAdapterOptions {\n    excludedPath?: string | string[];\n    functionRoutes?: boolean;\n    staticPaths?: string[];\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright via yarn\nDESCRIPTION: This command uses yarn to add Playwright to your Qwik application's dependencies. It additionally configures the project for testing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/playwright/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add playwright\n```\n\n----------------------------------------\n\nTITLE: Defining usePreventNavigate$ Hook Type in TypeScript\nDESCRIPTION: Type definition for the usePreventNavigate$ hook that registers a callback to conditionally prevent navigation, useful for confirming with users before leaving a page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nusePreventNavigate$: (qrl: PreventNavigateCallback) => void\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Route Structure in Qwik\nDESCRIPTION: This snippet shows the directory structure for implementing nested layouts in a Qwik project. It illustrates how parent and child layouts are organized in relation to page components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ layout.tsx           # Parent layout\n    ‚îî‚îÄ‚îÄ about/\n        ‚îú‚îÄ‚îÄ layout.tsx       # Child layout\n        ‚îî‚îÄ‚îÄ index.tsx        # https://example.com/about\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma to Qwik Project using Shell\nDESCRIPTION: This snippet illustrates installing Prisma in a Qwik project using different package managers such as pnpm, npm, yarn, and bun. Execute the command specific to the package manager in use to add Prisma to the project. This step requires having Qwik CLI set up in your development environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/prisma/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add prisma\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add prisma\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add prisma\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add prisma\n```\n\n----------------------------------------\n\nTITLE: Typescript: `useStore` Interface Definition\nDESCRIPTION: Defines the `Reactive<T>` interface, `StoreOptions` interface, and `useStore` function signature in TypeScript. `Reactive<T>` makes properties of `T` reactive. `StoreOptions` configures deep reactivity. `useStore` creates reactive stores.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Typescript definition `useStore<T>`\n\n// The `Reactive<T>` is a reactive version of the `T` type, every property of `T` behaves like a `Signal<T>`.nexport interface Reactive<T extends Record<string, any>> extends T {}\n\nexport interface StoreOptions {\n  // If `deep` is true, then nested property of the store will be wrapped in a `Signal<T>`.n deep?: boolean;\n}\nexport const useStore: <T>(value?: T | (() => T), options?: StoreOptions): Reactive<T>;\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Grouped Layouts in Qwik City\nDESCRIPTION: Shows how to implement grouped layouts (also called pathless layouts) using parentheses in directory names. This allows related routes to share layouts without including the directory name in the URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îî‚îÄ‚îÄ (account)/             # Notice the parentheses\n        ‚îú‚îÄ‚îÄ layout.tsx         # Shared account layout\n        ‚îî‚îÄ‚îÄ profile/\n            ‚îî‚îÄ‚îÄ index.tsx      # https://example.com/profile\n        ‚îî‚îÄ‚îÄ settings/\n            ‚îî‚îÄ‚îÄ index.tsx      # https://example.com/settings\n```\n\n----------------------------------------\n\nTITLE: Inline Components in Qwik\nDESCRIPTION: Demonstrates the usage of inline components in Qwik, which are lightweight and bundled with their parent component. The example shows an inline MyButton component used within a standard component$() declaration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\n// Inline component: declared using a standard function.\nexport const MyButton = (props: { text: string }) => {\n  return <button>{props.text}</button>;\n};\n\n// Component: declared using `component$()`.\nexport default component$(() => {\n  return (\n    <p>\n      Some text:\n      <MyButton text=\"Click me\" />\n    </p>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Triple-Click Event in Qwik Component\nDESCRIPTION: This snippet demonstrates how to create a custom triple-click event prop in a Qwik component. It uses useStore to track clicks and implements the triple-click logic in the onClick$ handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot, useStore } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <Button onTripleClick$={() => alert('TRIPLE CLICKED!')}>\n      Triple Click me!\n    </Button>\n  );\n});\n\ntype ButtonProps = {\n  onTripleClick$: QRL<() => void>;\n};\n\nexport const Button = component$<ButtonProps>(({ onTripleClick$ }) => {\n  const state = useStore({\n    clicks: 0,\n    lastClickTime: 0,\n  });\n  return (\n    <button\n      onClick$={() => {\n        // triple click logic\n        const now = Date.now();\n        const timeBetweenClicks = now - state.lastClickTime;\n        state.lastClickTime = now;\n        if (timeBetweenClicks > 500) {\n          state.clicks = 0;\n        }\n        state.clicks++;\n        if (state.clicks === 3) {\n          // handle custom event\n          onTripleClick$();\n          state.clicks = 0;\n        }\n      }}\n    >\n      <Slot />\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring useSignal Hook in TypeScript\nDESCRIPTION: Type declaration for useSignal hook that creates a signal retained for component lifetime.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nuseSignal: UseSignal;\n```\n\n----------------------------------------\n\nTITLE: Correct Lexical Scope Usage in Qwik Component\nDESCRIPTION: Demonstrates proper use of lexical scope within a Qwik component, including the use of $ for serializable functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useTask$, $ } from '@builder.io/qwik';\n\nexport const HelloWorld = component$(() => {\n  const print = $((msg: string) => {\n    console.log(msg);\n  });\n\n  useTask$(() => {\n    print(\"Hello World\");\n  });\n\n  return <h1>Hello</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Component Invalidation in Qwik\nDESCRIPTION: Demonstrates how Qwik handles selective re-rendering of child components based on prop changes, showing efficient component invalidation and update propagation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/reactivity/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Child = component$((props: { count: number }) => {\n  return <span>{props.count}</span>;\n});\n\nexport const MyApp = component$(() => {\n  const store = useStore({ a: 0, b: 0, c: 0 });\n\n  return (\n    <>\n      <button onClick$={() => store.a++}>a++</button>\n      <button onClick$={() => store.b++}>b++</button>\n      <button onClick$={() => store.c++}>c++</button>\n      {JSON.stringify(store)}\n\n      <Child count={store.a} />\n      <Child count={store.b} />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating a Qwik Component in an Astro Page\nDESCRIPTION: An example of how to use a Qwik component in an Astro page without any hydration directives, demonstrating that Qwik components don't require explicit client-side hydration instructions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/astro-qwik/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n---\nimport { Counter } from \"../components/counter\";\n---\n\n<html lang=\"en\">\n  <body>\n      <h1>Astro.js - Qwik</h1>\n      /* no hydration directive! */\n      <Counter />\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating QRL Reference in Qwik\nDESCRIPTION: Example of creating a QRL reference using the $(...) function, which is a special marker for the Qwik Optimizer to extract code into a lazy-loaded symbol.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_65\n\nLANGUAGE: tsx\nCODE:\n```\nuseOnDocument(\n  \"mousemove\",\n  $((event) => console.log(\"mousemove\", event)),\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Azure SWA Adapter with Qwik\nDESCRIPTION: This snippet shows how to add the \"azure-swa\" adapter to a Qwik project using various package managers. The command will add necessary configuration files for Azure deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/azure-swa/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add azure-swa\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add azure-swa\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add azure-swa\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add azure-swa\n```\n\n----------------------------------------\n\nTITLE: Integrating Bun Adapter for Qwik\nDESCRIPTION: Command to add the Bun adapter to a Qwik project, enabling integration with Bun's integrated HTTP server. This sets up the necessary configuration for Bun deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/bun/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add bun\n```\n\n----------------------------------------\n\nTITLE: Defining StaticGenerate Interface in TypeScript\nDESCRIPTION: Interface for static site generation configuration that includes optional path parameters to generate.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StaticGenerate\n```\n\n----------------------------------------\n\nTITLE: Defining LinkProps interface in Qwik\nDESCRIPTION: This code defines the `LinkProps` interface, extending the `AnchorAttributes` interface. It includes properties such as `prefetch`, `reload`, `replaceState`, and `scroll`, which control the behavior of the `Link` component, such as prefetching the linked page or controlling history state and scrolling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LinkProps extends AnchorAttributes\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase dependencies using npm\nDESCRIPTION: This command installs the necessary Supabase JS library and Qwik authentication helpers using npm. These packages are essential for interacting with Supabase from a Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/supabase/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @supabase/supabase-js supabase-auth-helpers-qwik\n```\n\n----------------------------------------\n\nTITLE: HTTP Endpoint Handler in Qwik City\nDESCRIPTION: Example of an HTTP endpoint handler using onGet.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = ({ json }) => {\n  json(200, { message: 'Hello World' });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Device Plugin in Capacitor\nDESCRIPTION: Steps to install the Device plugin, configure it in the Capacitor config file, and update the Qwik component to use the plugin for accessing device information.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @capacitor/device\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nplugins: {\n  Device: {\n    // No configuration required\n  },\n},\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, useVisibleTask$ } from '@builder.io/qwik';\nimport { Device } from '@capacitor/device';\n\nexport const DeviceInfoComponent = component$(() => {\n  const deviceInfo = useSignal<string | null>(null);\n\n  useVisibleTask$(async () => {\n    const info = await Device.getInfo();\n    deviceInfo.value = `Model: ${info.model}, OS: ${info.operatingSystem}, Version: ${info.osVersion}`;\n  });\n\n  return (\n    <div style={{ paddingTop: \"40px\" }}>\n      <h2>Device Information</h2>\n      {deviceInfo.value ? (\n        <p>{deviceInfo.value}</p>\n      ) : (\n        <p>Loading device information...</p>\n      )}\n    </div>\n  );\n});\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\nnpx cap run ios     # Runs the app in an iOS simulator\nnpx cap run android # Runs the app in an Android emulator\n```\n\n----------------------------------------\n\nTITLE: Defining Action Type in Qwik City\nDESCRIPTION: Type definition for an Action in Qwik City, which provides a function that returns an ActionStore. The type is generic and allows specification of return type, input type, and whether inputs are optional.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Action<\n  RETURN,\n  INPUT = Record<string, unknown>,\n  OPTIONAL extends boolean = true,\n> = {\n  (): ActionStore<RETURN, INPUT, OPTIONAL>;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic import.meta.glob Usage in TSX\nDESCRIPTION: This snippet shows how to use `import.meta.glob` with a simple pattern to import all files from the `/src/components/` directory.  The imported files are assigned to the `metaGlobComponents` variable.  The type `any` is used for flexibility.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/glob-import/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"const metaGlobComponents: any = import.meta.glob('/src/components/*');\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Navigation with Separate Modal in Qwik\nDESCRIPTION: This snippet demonstrates how to use `usePreventNavigate` with a separate modal component in Qwik to confirm navigation. It sets a signal to trigger the modal and uses the `useNavigate` hook to navigate when the user confirms. When the URL is undefined, it means the browser is navigating away, and it must respond synchronously.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/usePreventNavigate/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default component$(() => {\n  const okToNavigate = useSignal(true);\n  const navSig = useSignal<URL | number>();\n  const showConfirm = useSignal(false);\n  const nav = useNavigate();\n  usePreventNavigate$((url) => {\n    if (!okToNavigate.value) {\n      if (url) {\n        navSig.value = url;\n        showConfirm.value = true;\n      }\n      return true;\n    }\n  });\n\n  return (\n    <div>\n      <button onClick$={() => (okToNavigate.value = !okToNavigate.value)}>\n        toggle user state\n      </button>\n      application content\n      {showConfirm.value && (\n        <div>\n          <div>\n            Do you want to lose changes and go to {String(navSig.value)}?\n          </div>\n          <button\n            onClick$={() => {\n              showConfirm.value = false;\n              okToNavigate.value = true;\n              nav(navSig.value!);\n            }}\n          >\n            Yes\n          </button>\n          <button onClick$={() => (showConfirm.value = false)}>No</button>\n        </div>\n      )}\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSignIn Hook in Qwik\nDESCRIPTION: This snippet shows how to implement the useSignIn hook to initiate a sign-in flow for the user. It demonstrates both form submission and programmatic usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Form } from '@builder.io/qwik-city';\nimport { useSignIn } from '~/routes/plugin@auth';\n\nexport default component$(() => {\n  const signIn = useSignIn();\n  return (\n    <Form action={signIn}>\n      <input type=\"hidden\" name=\"providerId\" value=\"github\" />\n      <input type=\"hidden\" name=\"options.redirectTo\" value=\"http://qwik-auth-example.com/dashboard\" />\n      <button>Sign In</button>\n    </Form>\n  );\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useSignIn } from '~/routes/plugin@auth';\n\nexport default component$(() => {\n  const signIn = useSignIn();\n  return (\n    <button onClick$={() => signIn.submit({ providerId: 'github', options: { redirectTo: 'http://qwik-auth-example.com/dashboard' } })}>Sign In</button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Menu Structure in Markdown\nDESCRIPTION: Demonstrates how to define a menu structure using markdown syntax in a menu.md file, including headings for depth and bullet points for menu items.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/menu/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Docs\n\n## Getting Started\n\n- [Introduction](introduction/index.md)\n\n## Components\n\n- [Basics](/docs/(qwik)/components/basics/index.mdx)\n```\n\n----------------------------------------\n\nTITLE: Defining ServerFunction Type in TypeScript\nDESCRIPTION: Type definition for server functions that can be executed on the server. These functions receive the RequestEventBase context and can accept any arguments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ServerFunction = {\n  (this: RequestEventBase, ...args: any[]): any;\n  options?: ServerConfig;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CDN-Specific Cache Controls in Qwik-City with TypeScript\nDESCRIPTION: Shows how to adjust caching strategies for CDN-specific requirements in Qwik City applications, demonstrating how to pass CDN-specific cache control headers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/caching/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ncacheControl({\n  maxAge: 5,\n  staleWhileRevalidate: 60 * 60 * 24 * 365,\n}, \"CDN-Cache-Control\");\n```\n\n----------------------------------------\n\nTITLE: Event-Based Hydration of React Component in Qwik\nDESCRIPTION: Illustrates the use of client:event for hydrating a React component when specific DOM events are dispatched. This allows for event-driven hydration strategies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<MUISlider client:event=\"click\"></MUISlider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Product Route\nDESCRIPTION: Creating a dynamic route for individual product details with URL parameter access.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/products/[productId]/index.tsx\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation();\n  return <h1>Details about product {loc.params.productId}</h1>\n});\n```\n\n----------------------------------------\n\nTITLE: NavLink Component Implementation in Qwik\nDESCRIPTION: This code snippet defines the NavLink component in Qwik, which extends the standard Link component by adding an `activeClass` prop. It uses the `useLocation` hook to determine the current URL and applies the `activeClass` when the link's href matches the current URL. This allows developers to easily style active navigation links.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/nav-link/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Slot, component$ } from '@builder.io/qwik';\nimport { Link, useLocation, type LinkProps } from '@builder.io/qwik-city';\n\ntype NavLinkProps = LinkProps & { activeClass?: string };\n\nexport const NavLink = component$(\n  ({ activeClass, ...props }: NavLinkProps) => {\n    const location = useLocation();\n    const toPathname = props.href ?? '';\n    const locationPathname = location.url.pathname;\n\n    const startSlashPosition =\n      toPathname !== '/' && toPathname.startsWith('/')\n        ? toPathname.length - 1\n        : toPathname.length;\n    const endSlashPosition =\n      toPathname !== '/' && toPathname.endsWith('/')\n        ? toPathname.length - 1\n        : toPathname.length;\n    const isActive =\n      locationPathname === toPathname ||\n      (locationPathname.endsWith(toPathname) &&\n        (locationPathname.charAt(endSlashPosition) === '/' ||\n          locationPathname.charAt(startSlashPosition) === '/'));\n\n    return (\n      <Link\n        {...props}\n        class={[props.class, isActive && activeClass ? activeClass : \"\"]}\n        \n      >\n        <Slot />\n      </Link>\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Qwik Preset (npm)\nDESCRIPTION: This command uses npm to create a new Nx workspace named 'org-workspace' with the 'qwik-nx' preset, pre-configured for Qwik development. It leverages the create-nx-workspace package to set up the workspace.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-nx-workspace@latest org-workspace --preset=qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Static HTML for Open Graph Image Metadata\nDESCRIPTION: This HTML snippet explains how to statically include a meta tag for Open Graph images in the head of a Qwik website. The generated image's URL is specified in the content attribute of the meta tag.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/og-img/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Hello, world!</title>\n  <meta property=\"og:image\" content=\"https://www.example.com/og-image\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Qwik's routeLoader$\nDESCRIPTION: Implementing a route loader to fetch joke data from an external API. The routeLoader$ function executes on the server before rendering and makes the data available to the component via a reactive signal.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useDadJoke = routeLoader$(async () => {\n  const response = await fetch('https://icanhazdadjoke.com/', {\n    headers: { Accept: 'application/json' },\n  });\n  return (await response.json()) as {\n    id: string;\n    status: number;\n    joke: string;\n  };\n});\n\nexport default component$(() => {\n  // Calling our `useDadJoke` hook, will return a reactive signal to the loaded data.\n  const dadJokeSignal = useDadJoke();\n  return (\n    <section class=\"section bright\">\n      <p>{dadJokeSignal.value.joke}</p>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using useStyles$ Hook for Lazy-Loaded Styles in Qwik\nDESCRIPTION: Shows how to use the useStyles$ hook to create lazy-loadable references to component styles in Qwik, which helps optimize style loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStyles$, component$ } from '@builder.io/qwik';\nimport styles from './code-block.css?inline';\n\nexport const CmpStyles = component$(() => {\n  useStyles$(styles);\n  return <span class=\"my-text\">Some text</span>;\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n// code-block.css\n.my-text {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Counter Component with Qwik's $ Syntax\nDESCRIPTION: Example of writing a Counter component using Qwik's special $ syntax for lazy-loading. This shows the developer-friendly code before optimization, with the $ indicating parts that can be extracted and lazy-loaded.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Counter = component$(() => {\n  const store = useStore({ count: 0 });\n\n  return <button onClick$={() => store.count++}>{store.count}</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Component Using React Islands\nDESCRIPTION: Demonstrates how to use qwikified React components within a Qwik component, showing inter-island communication using signals.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { QButton, QDisplay } from './react';\n\nexport default component$(() => {\n  console.log('Qwik Render');\n  const count = useSignal(0);\n  return (\n    <main>\n      <QButton\n        onClick$={() => {\n          console.log('click', count.value);\n          count.value++;\n        }}\n      />\n      <QDisplay count={count.value}></QDisplay>\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components in Qwik with styled-vanilla-extract\nDESCRIPTION: Demonstrates how to create styled components using the styled-components syntax in Qwik with zero-runtime cost, thanks to styled-vanilla-extract.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from 'styled-vanilla-extract/qwik';\n\nexport const BlueBox = styled.div`\n  display: block;\n  width: 100%;\n  height: 500px;\n  background: blue;\n`;\n```\n\n----------------------------------------\n\nTITLE: Task Management Hooks in Qwik\nDESCRIPTION: Defines hooks for task management in Qwik, providing ways to execute code at specific lifecycle points with configurable options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const useTask$: (qrl: TaskFn, opts?: UseTaskOptions | undefined) => void;\n\n// @public @deprecated (undocumented)\nexport interface UseTaskOptions {\n    eagerness?: EagernessOptions;\n}\n\n// @public\nexport const useTaskQrl: (qrl: QRL<TaskFn>, opts?: UseTaskOptions) => void;\n\n// @public\nexport const useVisibleTask$: (qrl: TaskFn, opts?: OnVisibleTaskOptions | undefined) => void;\n\n// @public\nexport const useVisibleTaskQrl: (qrl: QRL<TaskFn>, opts?: OnVisibleTaskOptions) => void;\n```\n\n----------------------------------------\n\nTITLE: Setting Supabase environment variables\nDESCRIPTION: This shows the configuration of `PUBLIC_SUPABASE_URL` and `PUBLIC_SUPABASE_ANON_KEY` in the `.env` file.  The anon key is safe to be exposed client-side.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/supabase/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPUBLIC_SUPABASE_URL=https://xxxxxxx.supabase.co\nPUBLIC_SUPABASE_ANON_KEY=eyJhb.......\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Resource Component\nDESCRIPTION: Type definition for the Resource component that handles async data rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nResource: <T>(props: ResourceProps<T>) => JSXOutput;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Live Network Access - TypeScript\nDESCRIPTION: This snippet modifies the vite.config.ts file to enable access to the development server from the local network by setting the host to true. This allows developers to view and test their applications on devices connected to the same network.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nserver: {\n  ...\n  host: true, // Enables access from the local network\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Bootstrap Using npm\nDESCRIPTION: This npm script integrates Bootstrap into a Qwik project, installing the necessary packages and adding files to define and utilize Bootstrap components with TypeScript types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/bootstrap/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add bootstrap\n```\n\n----------------------------------------\n\nTITLE: RenderToString Type Definition - TypeScript\nDESCRIPTION: Defines RenderToString as a type for a function that takes RenderToStringOptions and promises a RenderToStringResult. It is critical for operations where rendering produces a string.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RenderToString = (\n  opts: RenderToStringOptions,\n) => Promise<RenderToStringResult>;\n```\n\n----------------------------------------\n\nTITLE: Defining RouteNavigate type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `RouteNavigate` as a QRL (Qwik URL) representing a navigation function. This function takes an optional path and options, allowing for programmatic navigation within a Qwik City application, with options to specify navigation type, force reload, replace state, and control scrolling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RouteNavigate = QRL<\n  (\n    path?: string | number | URL,\n    options?:\n      | {\n          type?: Exclude<NavigationType, \"initial\">;\n          forceReload?: boolean;\n          replaceState?: boolean;\n          scroll?: boolean;\n        }\n      | boolean,\n  ) => Promise<void>\n>;\n```\n\n----------------------------------------\n\nTITLE: Adding Key Prop in Qwik Iterator - Correct\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingIterKey` case. It demonstrates the correct way to add a unique `key` prop to list items generated within an iterator in a Qwik component, improving rendering performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const Person = component$(() => {\n  const person  = {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 32,\n  }\n\n  return (\n    <ul>\n      {Object.keys(person).map((color) => (\n        <li key={`person-${key}`}>{person[key]}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Collecting Symbol Usage Data with Event Listener\nDESCRIPTION: HTML script for collecting symbol usage data from a running Qwik application. This allows developers to gather runtime analytics about which symbols are used together during actual user interactions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/bundle/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.symbols = [];\n  document.addEventListener('qsymbol', (e) => window.symbols.push(e.detail));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Bootstrap Using pnpm\nDESCRIPTION: This script uses pnpm to add Bootstrap to a Qwik project, which updates the app with Bootstrap and its TypeScript types as dependencies. It introduces new files for components like buttons, alerts, and spinners.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/bootstrap/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add bootstrap\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Form Values via Props\nDESCRIPTION: This TSX code snippet demonstrates how to dynamically update Modular Forms' state from the parent component through props. It leverages `useTask$` to track changes in the `props.login` object, and updates the corresponding fields in the form using the `setValue` function. The code iterates through the `login` object and updates the corresponding form fields with the new values whenever props.login changes, enabling the form to react to external state updates.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { setValue, useForm } from \"@modular-forms/qwik\";\n\nexport interface FormProps {\n login?: LoginForm\n}\n\nexport default component$<FormProps>((props) => {\n  const [loginForm, { Form, Field }] = useForm<LoginForm>({\n   // rest of the code...\n  });\n\n useTask$(({ track }) => {\n     const login = track(() => props.login);\n    if (!login) return;\n    for (const [key,value] of Object.entries(login)) {\n      setValue(loginForm, key, value);\n    }\n  });\n\n  // rest of the code...\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Counter Component in Qwik\nDESCRIPTION: Example of a simple Counter component in Qwik, showcasing the use of component$, useSignal, and onClick$ with props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qrl/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$((props: { step: number }) => {\n  const count = useSignal(0);\n\n  return <button onClick$={() => (count.value += props.step || 1)}>{count.value}</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Qwik City Middleware\nDESCRIPTION: Shows how to read and set cookies in middleware functions. This example implements a simple counter that increments with each request by storing and retrieving the count in a cookie.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ cookie, json }) => {\n  let count = cookie.get('Qwik.demo.count')?.number() || 0;\n  count++;\n  cookie.set('Qwik.demo.count', count);\n  json(200, { count });\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Parameters in Qwik City\nDESCRIPTION: This middleware function utilizes query parameters from the URL, transforming them into an object for easy access and manipulation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ query, json }) => {\n  const obj: Record<string, string> = {};\n  query.forEach((v, k) => (obj[k] = v));\n  json(200, obj);\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Action Functions for Qwik City in TypeScript\nDESCRIPTION: Declares global action functions for Qwik City, including both regular and QRL versions. These are used for defining server-side actions that can be called from the client.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const globalAction$: ActionConstructor;\n\nexport const globalActionQrl: ActionConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Page Refresh with Link and useNavigate\nDESCRIPTION: Shows how to refresh the current page using Link reload prop and useNavigate hook with server-side time rendering\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Link, routeLoader$, useNavigate } from '@builder.io/qwik-city';\n\nexport const useServerTime = routeLoader$(() => {\n  // This will re-execute in the server when the page refreshes.\n  return Date.now();\n});\n\nexport default component$(() => {\n  const nav = useNavigate();\n  const serverTime = useServerTime();\n\n  return (\n    <div>\n      <Link reload>Refresh (better accessibility)</Link>\n      <button onClick$={() => nav()}>Refresh</button>\n      <p>Server time: {serverTime.value}</p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Site Generation (SSG) in vite.config.ts\nDESCRIPTION: This TypeScript snippet configures static site generation (SSG) for the Cloudflare Pages adapter, including which paths to include or exclude during static file generation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nexport default extendConfig(baseConfig, () => {\n  return {\n    build: {\n      ssr: true,\n      rollupOptions: {\n        input: ['src/entry.cloudflare-pages.tsx', '@qwik-city-plan'],\n      }\n    },\n    plugins: [\n      cloudflarePagesAdapter(\n       // üëá THIS IS WHAT YOU NEED TO ADD üëá\n       {\n         ssg: {\n           include: ['/*'],\n           exclude: ['/shop/*'],\n           origin: 'https://example.com',\n       },\n      }),\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Project Directory Structure\nDESCRIPTION: Shows the basic directory structure of a Qwik City project, including the public directory for static assets and src directory containing components and routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/base/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n‚îú‚îÄ‚îÄ public/\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îî‚îÄ‚îÄ src/\n    ‚îú‚îÄ‚îÄ components/\n    ‚îÇ   ‚îî‚îÄ‚îÄ ...\n    ‚îî‚îÄ‚îÄ routes/\n        ‚îî‚îÄ‚îÄ ...\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorErrorKeyDotNotation Type in TypeScript\nDESCRIPTION: Advanced type utility for generating dot notation paths for validator error fields, supporting nested objects and arrays.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidatorErrorKeyDotNotation<T, Prefix extends string = \"\"> =\n  IsAny<T> extends true\n    ? never\n    : T extends object\n      ? {\n          [K in keyof T & string]: IsAny<T[K]> extends true\n            ? never\n            : T[K] extends (infer U)[]\n              ? IsAny<U> extends true\n                ? never\n                : U extends object\n                  ?\n                      | `${Prefix}${K}[]`\n                      | ValidatorErrorKeyDotNotation<U, `${Prefix}${K}[].`>\n                  : `${Prefix}${K}[]`\n              : T[K] extends object\n                ? ValidatorErrorKeyDotNotation<T[K], `${Prefix}${K}.`>\n                : `${Prefix}${K}`;\n        }[keyof T & string]\n      : never;\n```\n\n----------------------------------------\n\nTITLE: Using clientConn API for User Information\nDESCRIPTION: Example of using the new clientConn API in a route loader to get the IP address and country of the user, abstracting platform-specific implementations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useGetCountryAndIP = routeLoader$(({clientConn}) => {\n  return {\n    ip: clientConn.ip,\n    country: clientConn.country\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Presidents List in Qwik\nDESCRIPTION: This Qwik component mirrors its React counterpart, rendering an unordered list of US presidents and their term years using a similar static array of objects. Each list item has a unique identifier made from president's name and years served. Without additional dependencies, it outputs a structured HTML list.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Presidents = component$(() => {\n  const presidents = [\n    { name: 'George Washington', years: '1789-1797' },\n    { name: 'John Adams', years: '1797-1801' },\n    { name: 'Thomas Jefferson', years: '1801-1809' },\n    { name: 'James Madison', years: '1809-1817' },\n    { name: 'James Monroe', years: '1817-1825' },\n    { name: 'John Quincy Adams', years: '1825-1829' },\n    { name: 'Andrew Jackson', years: '1829-1837' },\n    { name: 'Martin Van Buren', years: '1837-1841' },\n    { name: 'William Henry Harrison', years: '1841-1841' },\n    { name: 'John Tyler', years: '1841-1845' },\n    { name: 'James K. Polk', years: '1845-1849' },\n    { name: 'Zachary Taylor', years: '1849-1850' },\n    { name: 'Millard Fillmore', years: '1850-1853' },\n    { name: 'Franklin Pierce', years: '1853-1857' },\n    { name: 'James Buchanan', years: '1857-1861' },\n    { name: 'Abraham Lincoln', years: '1861-1865' },\n    { name: 'Andrew Johnson', years: '1865-1869' },\n    { name: 'Ulysses S. Grant', years: '1869-1877' },\n    { name: 'Rutherford B. Hayes', years: '1877-1881' },\n    { name: 'James A. Garfield', years: '1881-1881' },\n    { name: 'Chester A. Arthur', years: '1881-1885' },\n    { name: 'Grover Cleveland', years: '1885-1889' },\n  ];\n  return (\n    <ul>\n      {presidents.map((president) => (\n        <li key={president.name + president.years}>\n          {president.name} ({president.years})\n        </li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Constants in TypeScript for Qwik\nDESCRIPTION: This code snippet defines three public boolean constants for environment detection in the Qwik framework. These constants can be used to determine if the code is running in a browser, in development mode, or on the server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/build/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const isBrowser: boolean;\n\n// @public\nexport const isDev: boolean;\n\n// @public\nexport const isServer: boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik using Package Managers\nDESCRIPTION: Command line instructions for creating a new Qwik project using different package managers like pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-tasks/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm create qwik@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm create qwik@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create qwik\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Breaking Event Handlers into Synchronous and Asynchronous Parts in Qwik\nDESCRIPTION: This example shows the recommended approach for handling events that need both synchronous and asynchronous processing. It uses an array of handlers with `sync$()` for the synchronous portion and `$()` for the asynchronous portion.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/events/synchronous-sync/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n  <a href=\"/\" \n    onClick$={[\n      sync$((event, target) => {\n        // This part is synchronous and can't close over anything.\n        if (event.ctrlKey) {\n          event.preventDefault();\n        }\n      }),\n      $(() => {\n        // This part can be asynchronous and can close over anything.\n        console.log('clicked');\n      })\n    ]}>\n    link\n  </a>\n```\n\n----------------------------------------\n\nTITLE: Defining cloudRunAdapter Function in TypeScript\nDESCRIPTION: This function creates an adapter for deploying Qwik City applications to Google Cloud Run. It accepts optional CloudRunAdapterOptions as a parameter and returns an adapter configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-cloud-run/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function cloudRunAdapter(opts?: CloudRunAdapterOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Astro project with PNPM\nDESCRIPTION: This command initializes a new Qwik project within an Astro environment using PNPM. This is a quick way to set up a project with both frameworks configured to work together. The command leverages the `@qwikdev/astro` package.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm create @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback Props in Qwik Component\nDESCRIPTION: This snippet demonstrates how to declare callback props in a Qwik component interface. The props are defined with a '$' suffix and use the QRL type for lazy-loaded function references.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/props/closures/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyComponentProps {\n  goodbye$: QRL<() => void>;\n  hello$: QRL<() => void>;\n}\n\nexport const MyComponent = component$((props: MyComponentProps) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Avoid using useVisibleTask$ in Qwik\nDESCRIPTION: This snippet provides guidance against using useVisibleTask$ because it runs code eagerly and blocks the main thread, impacting user experience negatively. Alternatives are presented for better practices.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nuseVisibleTask$(({ cleanup }) => {\n  const listener = (event) => {\n    const mouseEvent = event as MouseEvent;\n    console.log(mouseEvent.x, mouseEvent.y);\n  };\n  document.addEventListener('mousemove', listener);\n\n  cleanup(() => {\n    document.removeEventListener('mousemove', listener);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SVG Icon - TypeScript\nDESCRIPTION: Defines a React component that renders an SVG icon with a customizable property interface. It specifically implements the OcticonAlertFill12 icon using SVG properties, demonstrating how to create scalable vector graphics directly in a React component. Dependencies include @builder.io/qwik for type definitions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/icons/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { PropsOf } from '@builder.io/qwik'\n\nexport function OcticonAlertFill12(props: PropsOf<'svg'>, key: string) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 12 12\" {...props} key={key}><path fill=\"#888888\" d=\"M4.855.708c.5-.896 1.79-.896 2.29 0l4.675 8.351a1.312 1.312 0 0 1-1.146 1.954H1.33A1.313 1.313 0 0 1 .183 9.058ZM7 7V3H5v4Zm-1 3a1 1 0 1 0 0-2a1 1 0 0 0 0 2Z\"></path></svg>\n  )\n}\nexport default OcticonAlertFill12\n```\n\n----------------------------------------\n\nTITLE: Suboptimal implementation of signal read in Qwik\nDESCRIPTION: This snippet shows a suboptimal implementation where a signal value is read directly in the component function, causing the entire component to re-render on each signal change.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Don't do this!\nexport default component$(() => {\n  const count = useSignal(1);\n  const doubleCount = count.value*2;\n  return (\n    <div>{doubleCount}</div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for Form Validation in Qwik Modular Forms\nDESCRIPTION: Creates a Zod schema for form validation with custom error messages for email and password fields. The schema validates that email is not empty and follows email format, while password has a minimum length of 8 characters.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst formSchema = z.object({\n  email: z.string().nonempty(),\n  password: z.string().min(8),\n  email: z\n    .string()\n    .nonempty('please enter your email')\n    .email('enter a valid email'),\n  password: z\n    .string()\n    .min(1, 'please enter a password')\n    .min(8, 'You password must have 8 characters or more.'),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to Qwik project using Bun\nDESCRIPTION: This command uses bun to execute the qwik add tailwind script, which automates the process of installing Tailwind CSS and configuring the necessary files in a Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Netlify Edge Entry Middleware | TypeScript\nDESCRIPTION: This snippet showcases how to create a Qwik City instance using the built-in middleware for Netlify Edge. It initializes middleware with rendering capabilities as per the edge functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createQwikCity } from '@builder.io/qwik-city/middleware/netlify-edge';\nimport qwikCityPlan from '@qwik-city-plan';\nimport render from './entry.ssr';\n\nexport default createQwikCity({ render, qwikCityPlan });\n```\n\n----------------------------------------\n\nTITLE: Rendering Optimized Images | Qwik | TypeScript\nDESCRIPTION: This snippet illustrates how the Image component renders an optimized <img> element with attributes for lazy loading and responsive capabilities, ensuring improved performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<img\n\n  decoding=\"async\"\n  loading=\"lazy\"\n  srcset=\"\n    /@imagetools/141464b77ebd76570693f2e1a6b0364f4b4feea7 200w,\n    /@imagetools/e70ec011d10add2ba28f9c6973b7dc0f11894307 400w,\n    /@imagetools/1f0dd65f511ffd34415a391bf350e7934ce496a1 600w,\n    /@imagetools/493154354e7e89c3f639c751e934d1be4fc05827 800w,\n    /@imagetools/324867f8f1af03474a17a9d19035e28a4c241aa1 1200w\"\n  width=\"1200\"\n  height=\"1200\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using host: Attribute for DOM Events without Hydration in Qwik\nDESCRIPTION: This snippet demonstrates how to use the host: attribute to listen to DOM events on a React component without hydrating it. This approach provides interactivity without loading React, resulting in better performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { MUIButton } from '~/integrations/react/mui';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  return (\n    <div>\n      <h2>React component with no React code</h2>\n      <MUIButton\n        variant=\"contained\"\n        host:onClick$={() => {\n          count.value++;\n        }}\n      >\n        I'm a button from react\n      </MUIButton>\n      <p>current count is: {count.value}</p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceRejected Interface in TypeScript\nDESCRIPTION: Interface representing a rejected resource state in Qwik, containing a loading status and the original promise value.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResourceRejected<T>\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Qwik Component Library\nDESCRIPTION: Commands to build the Qwik component library using different package managers and then publish it to npm.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/library/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Defining GetValidatorInputType Type in TypeScript\nDESCRIPTION: Defines a conditional type to extract the input type from a TypedDataValidator, supporting both Valibot and Zod validators.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GetValidatorInputType<VALIDATOR extends TypedDataValidator> =\n  VALIDATOR extends ValibotDataValidator<infer TYPE>\n    ? v.InferInput<TYPE>\n    : VALIDATOR extends ZodDataValidator<infer TYPE>\n      ? z.input<TYPE>\n      : never;\n```\n\n----------------------------------------\n\nTITLE: Declaring Qwik City Provider and Mock Components in TypeScript\nDESCRIPTION: Declares the QwikCityProvider component and a QwikCityMockProvider for testing. These components provide the necessary context for Qwik City applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface QwikCityProps {\n    viewTransition?: boolean;\n}\n\nexport const QwikCityProvider: Component<QwikCityProps>;\n\nexport interface QwikCityMockProps {\n    goto?: RouteNavigate;\n    params?: Record<string, string>;\n    url?: string;\n}\n\nexport const QwikCityMockProvider: Component<QwikCityMockProps>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Component Library using Package Managers\nDESCRIPTION: Commands to initialize a new Qwik component library project using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/library/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create qwik library my-library\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm create qwik library my-library\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create qwik library my-library\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create qwik library my-library\n```\n\n----------------------------------------\n\nTITLE: Adding Client-side Form Submission Handler in Qwik Modular Forms\nDESCRIPTION: Adds a client-side form submission handler using the onSubmit$ property of the Form component. This allows processing form data on the client before or alongside the server-side submission.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  // ... \n\n  const handleSubmit: SubmitHandler<LoginForm> = $((values, event) => {\n    // Runs on client\n  });\n\n  return (\n    <Form onSubmit$={handleSubmit}>\n      ‚Ä¶\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring QwikCityProvider Component in Qwik\nDESCRIPTION: This snippet declares a `QwikCityProvider` component type in Qwik, importing it from the `@builder.io/qwik` library. The component accepts `QwikCityProps` as its properties. This component likely provides the core Qwik City context and functionality to its children.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nQwikCityProvider: import(\"@builder.io/qwik\").Component<QwikCityProps>;\n```\n\n----------------------------------------\n\nTITLE: useVisibleTaskQrl Type Definition\nDESCRIPTION: Low-level API for the useVisibleTask$ hook that accepts a QRL (serializable reference to a function) as its first parameter. This is the internal implementation that useVisibleTask$ calls after transforming the provided function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\nuseVisibleTaskQrl: (qrl: QRL<TaskFn>, opts?: OnVisibleTaskOptions) => void\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase dependencies using pnpm\nDESCRIPTION: This command installs the necessary Supabase JS library and Qwik authentication helpers using pnpm. These packages are essential for interacting with Supabase from a Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/supabase/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @supabase/supabase-js supabase-auth-helpers-qwik\n```\n\n----------------------------------------\n\nTITLE: Setting Rewrite Rules in Vite Config for Qwik City\nDESCRIPTION: This code snippet demonstrates how to configure rewrite rules in the vite.config.ts file for Qwik City. It allows the application to handle URL translations for different locales and aliases while using a single page component. The configuration includes defining paths for localization and setting up plugins.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { qwikCity } from '@builder.io/qwik-city/vite';\n\nexport default defineConfig(async () => {\n  return {\n    plugins: [\n      qwikCity({\n        rewriteRoutes: [\n            {\n              paths: {\n                  'docs': 'documentation'\n              },\n            },\n            {\n              prefix: 'it',\n              paths: {\n                'docs': 'documentazione',\n                'getting-started': 'per-iniziare',\n                'products': 'prodotti',\n              },\n            },\n          ],\n      }),\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Debouncer Component Example with Input Handling\nDESCRIPTION: Demonstrates using the debouncer to efficiently manage user input by updating a signal only after a 1-second pause in typing, reducing unnecessary state updates and potential performance overhead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/debouncer/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const debouncedValue = useSignal(\"\");\n\n  const debounce = useDebouncer(\n    $((value: string) => {\n      debouncedValue.value = value;\n    }),\n    1000\n  );\n\n  return (\n    <>\n      <input\n        onInput$={(_, target) => {\n          debounce(target.value);\n        }}\n      />\n      <p>{debouncedValue.value}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling CSRF Protection\nDESCRIPTION: This TypeScript snippet illustrates how to disable CSRF protection by modifying the options in the `createQwikCity` function, if needed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/node/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\n// ...\nconst { router, notFound, staticFile } = createQwikCity({\n  render,\n  qwikCityPlan,\n  manifest,\n  checkOrigin: false,\n});\n// ...\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TypedDataValidator Type in TypeScript\nDESCRIPTION: Type that represents a union of supported data validators, including Valibot and Zod.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TypedDataValidator = ValibotDataValidator | ZodDataValidator;\n```\n\n----------------------------------------\n\nTITLE: Object Identity Change Demonstration in Qwik\nDESCRIPTION: Shows how Qwik's proxy wrapping affects object identity when storing objects in the reactive store, demonstrating the auto-wrapping behavior of the proxy system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/reactivity/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComp = component$(() => {\n  const store = useStore({ person: null });\n  const person = { first: 'John', last: 'Smith' };\n  store.person = person; // store.person auto wraps object into proxy\n\n  if (store.person !== person) {\n    // The consequence of auto wrapping is that the object identity changes.\n    console.log('store auto-wrapped person into a proxy');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion One Animation in Qwik Component\nDESCRIPTION: This snippet demonstrates how to use Motion One to create an animation in a Qwik component. It uses useVisibleTask$ to ensure the animation code runs only in the browser and applies a complex animation to a div element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport { component$, useVisibleTask$ } from '@builder.io/qwik';\nimport { animate } from 'motion';\n\nexport default component$(() => {\n  useVisibleTask$(() => {\n    animate(\n      '#animation-target',\n      {\n        scale: [1, 2, 2, 1, 1],\n        rotate: [0, 0, 270, 270, 0],\n        borderRadius: ['20%', '20%', '50%', '50%', '20%'],\n        backgroundColor: [\n          '#ff008c',\n          '#d309e1',\n          '#9c1aff',\n          '#7700ff',\n          '#ff008c',\n        ],\n      },\n      {\n        duration: 2,\n        easing: 'ease-in-out',\n        repeat: 2,\n        direction: 'alternate',\n      }\n    );\n  });\n  return (\n    <div\n      id=\"animation-target\"\n      // Some tailwind styling for sizing and initial color\n      class=\"m-auto mt-24 w-52 h-52 bg-slate-500\"\n    ></div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Application for Production using npm\nDESCRIPTION: This snippet shows the process to build a Qwik application for production using npm. Ensure npm is installed and the necessary build scripts are defined in the package.json.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Interface for Reactive State Management\nDESCRIPTION: Interface for a reactive signal value that can be read and written. When a signal is written, all tasks tracking it will re-run and all components reading it will re-render.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Signal<T = any>\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Component using Yarn\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the Qwik utility command with Yarn.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik new Button\n```\n\n----------------------------------------\n\nTITLE: Creating Styles with Vanilla Extract in Qwik\nDESCRIPTION: This snippet demonstrates how to create a style using the 'styled-vanilla-extract' library to define a blue-colored block element, leveraging TypeScript and Qwik. It showcases the use of the style function from 'styled-vanilla-extract/qwik'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/styled-vanilla-extract/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { style } from 'styled-vanilla-extract/qwik';\n\nexport const blueClass = style({\n  display: 'block',\n  width: '100%',\n  height: '500px',\n  background: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronous Event Handling in Qwik\nDESCRIPTION: Shows how to handle events synchronously in Qwik using useVisibleTask$ for cases where asynchronous handling is not suitable.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, useVisibleTask$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const draggableRef = useSignal<HTMLElement>();\n  const dragStatus = useSignal('');\n\n  useVisibleTask$(({ cleanup }) => {\n    if (draggableRef.value) {\n      // Use the DOM API to add an event listener.\n      const dragstart = () => (dragStatus.value = 'dragstart');\n      const dragend = () => (dragStatus.value = 'dragend');\n\n      draggableRef.value!.addEventListener('dragstart', dragstart);\n      draggableRef.value!.addEventListener('dragend', dragend);\n      cleanup(() => {\n        draggableRef.value!.removeEventListener('dragstart', dragstart);\n        draggableRef.value!.removeEventListener('dragend', dragend);\n      });\n    }\n  });\n\n  return (\n    <div>\n      <div draggable ref={draggableRef}>\n        Drag me!\n      </div>\n      <p>{dragStatus.value}</p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Invocation Routes for Cloudflare Pages\nDESCRIPTION: Example of a routes configuration file that controls which paths should be handled by worker functions for SSR vs static file serving. Includes paths to be processed by Functions and excludes static assets.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/cloudflare-pages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    \"/*\"\n  ],\n  \"exclude\": [\n    \"/_headers\",\n    \"/_redirects\",\n    \"/build/*\",\n    \"/favicon.ico\",\n    \"/manifest.json\",\n    \"/service-worker.js\",\n    \"/about\"\n  ],\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Class Assignment in Qwik Component\nDESCRIPTION: This snippet demonstrates how to conditionally apply CSS classes in a Qwik component using the `classnames` helper. It takes a `props` object with a boolean `isHighAttention` property to dynamically set text color classes and utilizes module CSS.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport styles from './MyComponent.module.css';\n \nexport default component$((props) => {\n  return <div class={classnames(\n    styles.container, \n    'p-8', \n    {\n      'text-green-500' : props.isHighAttention,\n      'text-slate-500' : !props.isHighAttention,\n    },\n    { active: true}\n  )}>Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with useForm Hook\nDESCRIPTION: This TypeScript code demonstrates how to create a form using the `useForm` hook from `@modular-forms/qwik`. It initializes the form with the type `LoginForm` and passes the previously created `useFormLoader` to set the initial values. It returns the form state and components like `Form`, `Field`, and `FieldArray`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default component$(() => {\n  const [loginForm, { Form, Field, FieldArray }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Structuring Complex Form Inputs with HTML\nDESCRIPTION: Example HTML form with structured input names using dot notation to create nested objects and arrays from form data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input name=\"person.0.name\" value=\"Sam\">\n  <input name=\"person.0.email\" value=\"sam@complexform.com\">\n  <input name=\"person.0.pets.0\" value=\"cat\">\n  <input name=\"person.0.pets.1\" value=\"dog\">\n  <input name=\"person.0.address.street\" value=\"1234 Example Ave.\">\n  <input name=\"person.0.address.city\" value=\"Qwik\">\n  <input name=\"person.0.address.state\" value=\"IA\">\n  <input name=\"person.0.address.zip\" value=\"00000\">\n  <input name=\"person.0.pets.0\" value=\"beaver\">\n\n  <input name=\"person.1.name\" value=\"Bonnie\">\n  <input name=\"person.1.email\" value=\"bonnie@hishai.net\">\n  <input name=\"person.1.address.street\" value=\"768 Resolution Way\">\n  <input name=\"person.1.address.city\" value=\"Jaffa\">\n  <input name=\"person.1.address.state\" value=\"IL\">\n  <input name=\"person.1.address.zip\" value=\"01948\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Correct State Mutation in Qwik Components\nDESCRIPTION: Demonstrates the correct pattern for mutable state in Qwik by using objects whose properties can be modified within event handlers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const HelloWorld = component$(() => {\n  const person = { name: 'Bob' };\n\n  return (\n    <button onClick$={() => {\n      person.name = 'Alice';\n    }}>\n      {person.name}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ResourceReturn Type in TypeScript\nDESCRIPTION: Type definition that represents the possible states of a resource in Qwik (pending, resolved, or rejected).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResourceReturn<T> =\n  | ResourcePending<T>\n  | ResourceResolved<T>\n  | ResourceRejected<T>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Input\nDESCRIPTION: Creates an input with debounced value updates. Shows how Qwik handles cleanup and tracking compared to React's useEffect.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const DebouncedInput = () => {\n  const [value, setValue] = useState('');\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const debounced = setTimeout(() => setDebouncedValue(value), 1000);\n    return () => clearTimeout(debounced);\n  }, [value]);\n\n  return (\n    <>\n      <input\n        value={value}\n        onChange={(ev) => setValue((ev.target as HTMLInputElement).value)}\n      />\n      <p>{debouncedValue}</p>\n    </>\n  );\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const DebouncedInput = component$(() => {\n  const inputText = useSignal('');\n  const debouncedValue = useSignal('');\n\n  useTask$(({ track, cleanup }) => {\n    track(() => inputText.value);\n\n    const debounced = setTimeout(() => {\n      debouncedValue.value = inputText.value;\n    }, 1000);\n    cleanup(() => clearTimeout(debounced));\n  });\n\n  return (\n    <>\n      <input bind:value={inputText} />\n      <p>{debouncedValue.value}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Astro project with Bun\nDESCRIPTION: This command initializes a new Qwik project within an Astro environment using Bun. This is the Bun-specific command to create a pre-configured Astro project with Qwik support, utilizing the `@qwikdev/astro` package.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"bun create @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorErrorType in TypeScript\nDESCRIPTION: Type that defines the structure of validation errors, including form-level errors and field-specific errors using dot notation paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidatorErrorType<T, U = string> = {\n  formErrors: U[];\n  fieldErrors: Partial<{\n    [K in ValidatorErrorKeyDotNotation<T>]: K extends `${infer _Prefix}[]${infer _Suffix}`\n      ? U[]\n      : U;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: QwikCityAwsLambdaOptions interface definition\nDESCRIPTION: Interface that extends ServerRenderOptions for configuring AWS Lambda integration with Qwik City. Provides configuration options specific to AWS Lambda deployments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-aws-lambda/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityAwsLambdaOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceProps Interface in TypeScript\nDESCRIPTION: Interface for resource properties in Qwik that defines the structure for handling async resources with callbacks for different states (pending, resolved, rejected).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResourceProps<T>\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Route with a React Component Without Loading React Runtime\nDESCRIPTION: Example of how to use a qwikified React component in a Qwik route without loading the React runtime until needed. The component is rendered server-side initially.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/no-react/index.tsx\n\nimport { component$ } from '@builder.io/qwik';\nimport { MUIButton } from '~/integrations/react/mui';\n\nexport default component$(() => {\n  return (\n    <div>\n      <h2>React component with no React code</h2>\n      <MUIButton variant=\"contained\">I'm a button from react</MUIButton>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing qwikest/icons Package - Shell\nDESCRIPTION: Provides installation commands for adding the qwikest/icons package to a Qwik application using different package managers. This package offers a streamlined way to include various icon sets like Bootstrap, Heroicons, and more. Ensure you have a Node.js environment set up with a compatible package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/icons/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @qwikest/icons\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @qwikest/icons\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @qwikest/icons\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun install @qwikest/icons\n```\n\n----------------------------------------\n\nTITLE: Using Styled Components in Qwik with Vanilla Extract\nDESCRIPTION: This snippet illustrates how to utilize the styled-components integration of the styled-vanilla-extract library. It defines a styled 'BlueBox' component with specific styling parameters using TypeScript and Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/styled-vanilla-extract/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { styled } from 'styled-vanilla-extract/qwik';\n\nexport const BlueBox = styled.div`\n  display: block;\n  width: 100%;\n  height: 500px;\n  background: blue;\n`;  \n```\n\n----------------------------------------\n\nTITLE: Unique Key Prop in Qwik Array - Correct\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `nonUniqueKeys` case. It demonstrates the correct way to assign a unique `key` prop to list items generated from an array in a Qwik component, ensuring efficient rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const ColorList = component$(() => {\n  const colors = ['red', 'green', 'blue'];\n\n  return (\n    <ul>\n      {colors.map((color) => (\n        <li key={`color-${color}`}>{color}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env.local\nDESCRIPTION: Example of defining both server-side and public environment variables in a .env.local file. Server-side API_KEY will only be available on the server, while PUBLIC_API_URL will be accessible everywhere.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# This will only be available when run on the server\nAPI_KEY=secretApiKeyHere\n# This will be available everywhere\nPUBLIC_API_URL=https://api.example.com\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses with server$() in Qwik\nDESCRIPTION: Demonstrates how to use an async generator function with server$() to stream data from the server to the client in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal, $ } from '@builder.io/qwik';\nimport { server$ } from '@builder.io/qwik-city';\n\nexport const streamFromServer = server$(\n  // Async Generator Function\n  async function* () {\n    // Creation of an array with 10 undefined values\n    const iterationRange = Array(10).fill().entries(); \n  \n    for (const [value] of iterationRange) {\n      // Yield returns the array value during each iteration\n      yield value;\n  \n      // Waiting for 1 second before the next iteration\n      // This simulates a delay in the execution\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n  }\n);\n\n\nexport default component$(() => {\n  const message = useSignal('');\n  return (\n    <div>\n      <button\n        onClick$={\n          $(async () => {\n            // call the async stream function and wait for the response\n            const response = await streamFromServer(); \n            // use a for-await-of loop to asynchronously iterate over the response\n            for await (const value of response) {\n              // add each value from the response to the message value\n              message.value += ` ${value}`;\n            }\n            // do anything else\n          })\n        }\n      >\n        start\n      </button>\n      <div>{message.value}</div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring useServerData Hook in TypeScript\nDESCRIPTION: Type declaration for useServerData hook that retrieves server data by key.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function useServerData<T>(key: string): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Qwik in TSX\nDESCRIPTION: This snippet demonstrates how to create a simple counter component using Qwik. It showcases the use of signals for state management and the $ symbol for lazy-loading boundaries.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/the-qase-for-qwik-love-at-first-tti/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport type { DocumentHead } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  return (\n    <div>\n      <h1>\n        Counter is {count.value} <span class='lightning'>‚ö°Ô∏è</span>\n      </h1>\n      <button onClick$={() => count.value++}>Increment</button>\n    </div>\n  );\n});\n\nexport const head: DocumentHead = {\n  title: 'Welcome to Qwik Demo',\n  meta: [\n    {\n      name: 'description',\n      content: 'Qwik site description',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Two-way Data Binding in Qwik\nDESCRIPTION: Shows the manual implementation of two-way data binding without using the bind attribute, handling different input types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/rendering/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  const firstName = useSignal('');\n  const acceptConditions = useSignal(false);\n\n  return (\n    <form>\n      <input type=\"number\"\n        value={count.value}\n        onInput$={(_, el) => count.value = el.valueAsNumber }\n      />\n      <input type=\"text\"\n        value={firstName.value}\n        onInput$={(_, el) => firstName.value = el.value }\n      />\n      <input type=\"checkbox\"\n        checked={acceptConditions.value}\n        onChange$={(_, el) => acceptConditions.value = el.checked }\n      />\n      <div>First name: {firstName.value}</div>\n    </form>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Using RequestHandler and PlatformCloudflarePages Types\nDESCRIPTION: This TypeScript snippet imports types for better development ergonomics when working with Cloudflare Pages and Qwik City middleware, enhancing type safety during request handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\nimport { type PlatformCloudflarePages } from '@builder.io/qwik-city/middleware/cloudflare-pages';\n\nexport const onGet: RequestHandler<PlatformCloudflarePages> = ({ platform }) => {\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useDocumentHead Hook Type in TypeScript\nDESCRIPTION: Type definition for the useDocumentHead hook that returns the document head for the current page, with optional generic type for front matter.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nuseDocumentHead: <\n  FrontMatter extends Record<string, unknown> = Record<string, any>,\n>() => Required<ResolvedDocumentHead<FrontMatter>>;\n```\n\n----------------------------------------\n\nTITLE: Deep Object Store Management in Qwik\nDESCRIPTION: Illustrates how Qwik handles nested objects in stores, showing automatic proxy wrapping of deep properties and subscription tracking for nested values.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/reactivity/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComp = component$(() => {\n  const store = useStore({\n    person: { first: null, last: null },\n    location: null\n  });\n\n  store.location = {street: 'main st'};\n\n  return (\n    <section>\n      <p>{store.person.last}, {store.person.first}</p>\n      <p>{store.location.street}</p>\n    </section>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Defining QwikCityCloudflarePagesOptions Interface\nDESCRIPTION: Interface extending ServerRenderOptions to provide configuration options specific to Cloudflare Pages integration with Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-cloudflare-pages/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityCloudflarePagesOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Netlify Edge | TypeScript\nDESCRIPTION: This snippet showcases how to access environment variables using the Netlify platform context in edge functions, specifically showcasing retrieval of an API key.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const onRequest = async ({ env }) => {\n  platform.log('netlify serverless env read from Netlify UI or CLI', env.get('API_KEY'));\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Qwikified Framer Motion Component in a Qwik Route\nDESCRIPTION: Implementing a Qwikified Framer Motion component in a Qwik route with the client:idle directive, which hydrates the React component when the browser is idle.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// FILE: src/routes/index.tsx\n// ==========================================\n\nimport { component$ } from '@builder.io/qwik';\nimport { FramerQwik } from '~/integrations/react/framer';\n\nexport default component$(() => {\n  return (\n    <div class=\"flex flex-col gap-4\">\n      <h1 class=\"text-3xl\">Qwik/React Framer Motion</h1>\n      <div class=\"grid place-content-center\">\n        <FramerQwik client:idle />\n      </div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining QwikCityProps interface in Qwik\nDESCRIPTION: This snippet defines the `QwikCityProps` interface, including the optional `viewTransition` property. This property enables the ViewTransition API, with a default value of `true`, likely providing smooth transitions between pages in a Qwik City application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityProps\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Link in Qwik\nDESCRIPTION: Uses the `AppLink` component from `~/routes.config` to create type-safe links in Qwik applications. Ensures correct parameter passing through `param:appParam`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppLink } from '~/routes.config';\n\nexport default component$(() => {\n  // ...\n  return (\n    // ...\n    <AppLink route=\"/your/[appParam]/link/\" param:appParam={\"some-value\"}>\n      Link text\n    </AppLink>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Converting delayQrl to delay$ with implicit$FirstArg\nDESCRIPTION: Using implicit$FirstArg to create a delay$ alias that allows inlined usage of the function while the Optimizer converts it to delayQrl form.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/composing/dollar/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const delay$ = implicit$FirstArg(delayQrl);\n```\n\n----------------------------------------\n\nTITLE: Basic Catch-All Route Implementation in Qwik City\nDESCRIPTION: This code shows a simple implementation of a catch-all route in Qwik City. It creates a component that handles any URL with the /docs segment, demonstrating how to create flexible documentation routes with a single file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/docs/[...slug]/index.tsx\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>Docs home page</h1>\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Transformation in Qwik\nDESCRIPTION: Shows the transformed code after Qwik's Optimizer processes the lazy-loaded components. This transformation allows for efficient bundling and tree-shaking without pulling in unnecessary dependencies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst Child = componentQrl(qrl('./chunk-a', 'Child_onMount'));\nconst Parent = componentQrl(qrl('./chunk-b', 'Parent_onMount'));\nconst Parent_onMount = () => qrl('./chunk-c', 'Parent_onRender');\nconst Parent_onRender = () => (\n  <section>\n    <Child />\n  </section>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a TodoMVC Application with Qwik\nDESCRIPTION: This snippet shows how to create a TodoMVC application using Qwik framework via the CLI. It includes selecting the Todo starter template and Express server, followed by installation and startup commands to get the classic TodoMVC implementation running.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/introducing-qwik-starters/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> npm init qwik\nüí´ Let's create a Qwik project üí´\n\n‚úî Project name ‚Ä¶ qwik-todo\n‚úî Select a starter ‚Ä∫ Todo\n‚úî Select a server ‚Ä∫ Express\n\n‚≠êÔ∏è Success! Project saved in qwik-todo directory\n\nüìü Next steps:\n  cd qwik-todo\n  npm install\n  npm start\n\n> (cd qwik-todo; npm install; npm start)\n```\n\n----------------------------------------\n\nTITLE: Simple Server Time Loader in Qwik\nDESCRIPTION: Shows a basic implementation of loader$ to fetch and display server time using Qwik's reactive system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loader$ } from '@builder.io/qwik-city';\n\nexport const useGetServerTime = loader$(() => {\n  return new Date().toIsoString();\n});\n\nexport default component$(() => {\n  const serverTime = useGetServerTime();\n  return (\n    <div>{serverTime}</div>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MUI Components with Qwik React\nDESCRIPTION: Example showing how to import and qwikify Material-UI components for use in Qwik. Demonstrates basic component setup with qwikify$ and eagerness configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\n\nimport { qwikify$ } from '@builder.io/qwik-react';\nimport { Alert, Button, Slider } from '@mui/material';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\n\nexport const MUIButton = qwikify$(Button);\nexport const MUIAlert = qwikify$(Alert);\nexport const MUISlider = qwikify$(Slider, { eagerness: 'hover' });\n```\n\n----------------------------------------\n\nTITLE: Defining ServerQRL Type in TypeScript\nDESCRIPTION: Type definition for server QRL (Qwik Resource Loader) that can accept an optional AbortSignal as the first parameter to allow aborting the fetch request when fired.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ServerQRL<T extends ServerFunction> = QRL<\n  | ((abort: AbortSignal, ...args: Parameters<T>) => ReturnType<T>)\n  | ((...args: Parameters<T>) => ReturnType<T>)\n>;\n```\n\n----------------------------------------\n\nTITLE: Accessing RequestEvent in Route Actions\nDESCRIPTION: This snippet illustrates how to define a route action that utilizes the RequestEvent object to log details about the HTTP request, including headers, cookies, URL, and environment variables.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { routeAction$ } from '@builder.io/qwik-city';\n\n// The second argument of the action is the `RequestEvent` object\nexport const useProductRecommendations = routeAction$(\n  async (_data, requestEvent) => {\n    console.log('Request headers:', requestEvent.request.headers);\n    console.log('Request cookies:', requestEvent.cookie);\n    console.log('Request url:', requestEvent.url);\n    console.log('Request params:', requestEvent.params);\n    console.log('MY_ENV_VAR:', requestEvent.env.get('MY_ENV_VAR'));\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizer-Generated Counter Component Code\nDESCRIPTION: Shows how the Qwik optimizer breaks down the Counter component into separate chunks for lazy loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qrl/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Counter = component(qrl('./chunk-a.js', 'Counter_onMount'));\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter_onMount = (props) => {\n  const count = useSignal(0);\n  return qrl('./chunk-b.js', 'Counter_onRender', [count, props]);\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst Counter_onRender = () => {\n  const [count, props] = useLexicalScope();\n  return (\n    <button onClick$={qrl('./chunk-c.js', 'Counter_onClick', [count, props])}>{count.value}</button>\n  );\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst Counter_onClick = () => {\n  const [count, props] = useLexicalScope();\n  return (count.value += props.step || 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useContent Hook Type in TypeScript\nDESCRIPTION: Type definition for the useContent hook that returns the content state for the current page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nuseContent: () => import(\"./types\").ContentState;\n```\n\n----------------------------------------\n\nTITLE: Redirect Handling in Loader\nDESCRIPTION: Shows how to handle redirects and access low-level HTTP functionality in loaders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useGetActiveUser = loader(async ({params, redirect}) => {\n  const productID = params['id'];\n  const product = await db.getProduct(id);\n  if (!product) {\n    throw redirect(301, '/all-products');\n  }\n  return user;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing About Page Component in Qwik\nDESCRIPTION: Creates the about page component, which will be rendered within the Slot of the root layout when navigating to the about route.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/layout/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <>About</>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Azure SWA Adapter and Types for Qwik City in TypeScript\nDESCRIPTION: This code snippet defines the Azure Static Web Apps adapter function and its options interface for Qwik City. It also imports and re-exports the StaticGenerateRenderOptions type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/azure-swa/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @public (undocumented)\nexport function azureSwaAdapter(opts?: AzureSwaAdapterOptions): any;\n\n// @public (undocumented)\nexport interface AzureSwaAdapterOptions extends ServerAdapterOptions {\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentMeta Interface in TypeScript\nDESCRIPTION: Defines the DocumentMeta interface with optional readonly properties for HTML meta tag attributes like content, name, and property.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentMeta\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-plugin-qwik via Package Managers\nDESCRIPTION: Commands for installing the eslint-plugin-qwik package using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/eslint-plugin-qwik/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add -D eslint-plugin-qwik\npnpm add -D eslint-plugin-qwik\nyarn add -D eslint-plugin-qwik\n```\n\n----------------------------------------\n\nTITLE: Structuring Routes Directory for Qwik Application\nDESCRIPTION: Demonstrates the file structure for a Qwik application with nested layouts, including component and route files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/layout/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ header.tsx         # Header component implementation\n‚îÇ   ‚îú‚îÄ‚îÄ footer.tsx         # Footer component implementation\n‚îÇ   ‚îî‚îÄ‚îÄ menu.tsx           # Menu component implementation\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ layout.tsx         # Layout implementation using: <Header>, <Footer>, and <Menu>\n    ‚îú‚îÄ‚îÄ about/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx      # https://example.com/about\n    ‚îî‚îÄ‚îÄ index.tsx          # https://example.com\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorReturn Type in TypeScript\nDESCRIPTION: Type that represents the possible return values from a validator, either success or failure with error details.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidatorReturn<T extends Record<string, any> = {}> =\n  | ValidatorReturnSuccess\n  | ValidatorReturnFail<T>;\n```\n\n----------------------------------------\n\nTITLE: Setting Open Graph Image Meta Tag in Qwik\nDESCRIPTION: This TypeScript snippet illustrates how to dynamically generate a meta tag for Open Graph images in a Qwik application. It exports a head object which specifies the title of the page and the content for the og:image property.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/og-img/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport type { DocumentHead } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  return <h1>Hello, world!</h1>;\n});\n\nexport const head: DocumentHead = {\n  title: 'Hello, world!',\n  meta: [\n    {\n      property: 'og:image',\n      content: 'https://www.example.com/og-image',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing isServer and isBrowser Environment Detection Helpers in Qwik\nDESCRIPTION: Defines two boolean constants that reliably detect browser and server environments. The isBrowser implementation uses multiple checks to ensure robust environment detection, and isServer is simply the negation of isBrowser.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport const isBrowser: boolean = /*#__PURE__*/ (() =>\n  typeof window !== 'undefined' &&\n  typeof HTMLElement !== 'undefined' &&\n  !!window.document &&\n  String(HTMLElement).includes('[native code]'))();\n\nexport const isServer: boolean = !isBrowser;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Parameter Usage in Qwik\nDESCRIPTION: Example component showing how to access dynamic route parameters using useLocation hook.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const loc = useLocation();\n  return <div>Hello {loc.params.username}!</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Two-way Data Binding with bind Attribute in Qwik\nDESCRIPTION: Demonstrates two-way data binding using the bind attribute for form inputs, including text and checkbox inputs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/rendering/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const firstName = useSignal('');\n  const acceptConditions = useSignal(false);\n\n  return (\n    <form>\n      <input type=\"text\" bind:value={firstName} />\n      <input type=\"checkbox\" bind:checked={acceptConditions} />\n\n      <div>First name: {firstName.value}</div>\n    </form>\n  );\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying to Firebase (pnpm)\nDESCRIPTION: These commands configure and deploy your Qwik City application to Firebase using pnpm. It involves logging in to Firebase, selecting a project, and then deploying the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"firebase login\\nfirebase use --add\\npnpm run deploy\"\n```\n\n----------------------------------------\n\nTITLE: Exporting QwikRollupPluginOptions Interface in TypeScript\nDESCRIPTION: Defines a comprehensive interface for configuring Rollup plugins with Qwik-specific options, allowing for detailed customization of build modes, entry strategies, manifest handling, and optimization settings. Optional properties facilitate flexible configurations suited to development and production builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikRollupPluginOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ZodConstructor Type for Qwik City Data Validation\nDESCRIPTION: Defines a ZodConstructor type that creates Zod-based data validators for Qwik City. It supports both object schemas and custom schema functions that can access the RequestEvent.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ZodConstructor = {\n  <T extends z.ZodRawShape>(schema: T): ZodDataValidator<z.ZodObject<T>>;\n  <T extends z.ZodRawShape>(\n    schema: (zod: typeof z.z, ev: RequestEvent) => T,\n  ): ZodDataValidator<z.ZodObject<T>>;\n  <T extends z.Schema>(schema: T): ZodDataValidator<T>;\n  <T extends z.Schema>(\n    schema: (zod: typeof z.z, ev: RequestEvent) => T,\n  ): ZodDataValidator<T>;\n};\n```\n\n----------------------------------------\n\nTITLE: Children Projection with React Components\nDESCRIPTION: Demonstrates how to project children from Qwik components into React components using ReactNode types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\nimport { type ReactNode } from 'react';\nimport { qwikify$ } from '@builder.io/qwik-react';\n\nfunction Frame({ children }: { children?: ReactNode[] }) {\n  console.log('React <Zippy/> Render');\n  return (\n    <div\n      style={{\n        display: 'inline-block',\n        border: '1px solid black',\n        borderRadius: '10px',\n        padding: '5px',\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport const QFrame = qwikify$(Frame);\n```\n\n----------------------------------------\n\nTITLE: Linking Local Qwik Packages\nDESCRIPTION: Commands to link local development versions of Qwik packages to your application using pnpm package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm link ../qwik/packages/qwik\npnpm link ../qwik/packages/qwik-city\n```\n\n----------------------------------------\n\nTITLE: Storybook Story for Qwik Component with Qwik City Link\nDESCRIPTION: Defines a Storybook story for the Qwik `WithLink` component, which utilizes Qwik City's `Link` component.  It wraps the `WithLink` component with `QwikCityMockProvider` to provide a mock Qwik City context for the story, which is necessary for components that use Qwik City features to function correctly in Storybook.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from \"storybook-framework-qwik\";\nimport { QwikCityMockProvider } from \"@builder.io/qwik-city\";\n\nimport { WithLink } from \"./with-link\";\n\nconst meta: Meta = {\n  component: WithLink,\n};\n\ntype Story = StoryObj;\nexport default meta;\n\nexport const Primary: Story = {\n  render: () =>\n    <QwikCityMockProvider>\n      <WithLink />\n    </QwikCityMockProvider>\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying for Development | Shell\nDESCRIPTION: This snippet details commands to deploy the Qwik application in a development environment using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing the BlueBox Component in Qwik\nDESCRIPTION: This snippet demonstrates the implementation of a simple Qwik component that utilizes the previously defined 'BlueBox' styled component. It returns a div element styled according to the defined properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/styled-vanilla-extract/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlueBox } from './styles.css';\n\nexport const Cmp = component$(() => {\n  return <BlueBox />;\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Containers Example in Qwik\nDESCRIPTION: Demonstrates how multiple containers can be nested within a document, each with its own version, state, and base path. This example shows a main container with header and footer containers nested inside.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/containers/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html q:container=\"paused\" q:version=\"1.9.0\" q:base=\"/build/\">\n  <head>\n    <title>My Qwik Application</title>\n  </head>\n  <body>\n    <header q:container=\"resumed\" q:version=\"1.8.0\" q:base=\"https://server.a/build\">\n      <div>\n        <h1>This is a header form a container</h1>\n      </div>\n    </header>\n\n    <footer q:container=\"paused\" q:version=\"0.13.0\" q:base=\"https://footer.server.b/\">\n      <div>\n        <h1>This is a footer</h1>\n      </div>\n    </footer>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sending Text Responses in Qwik City\nDESCRIPTION: This middleware allows sending a text-based response, automatically setting the appropriate Content-Type header for plain text.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ text }) => {\n  text(200, 'Text based response.');\n};\n```\n\n----------------------------------------\n\nTITLE: Using server$ function in Qwik - Correct\nDESCRIPTION: This snippet demonstrates the `unused-server` ESLint rule. It shows the correct usage of a `server$` function in a Qwik component, where the function is defined and then called within an `onClick$` handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { $, component$ } from '@builder.io/qwik';\nimport { server$ } from '@builder.io/qwik-city';\n \nconst serverGreeter = server$((firstName: string, lastName: string) => {\n  const greeting = `Hello ${firstName} ${lastName}`;\n  return greeting;\n});\n \nexport default component$(() => (\n    <button\n      onClick$={$(async () => {\n        const greeting = await serverGreeter('John', 'Doe');\n        alert(greeting);\n      })}\n    >\n      greet\n    </button>\n  );\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Import Waterfall in JavaScript\nDESCRIPTION: This code snippet demonstrates how module imports create a waterfall effect in browsers. Module A imports Module B, which imports Module C, creating a sequential loading pattern that reduces performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/speculative-module-fetching/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport './b.js';\nconsole.log('Module A');\n```\n\n----------------------------------------\n\nTITLE: Basic Qwikloader HTML Implementation\nDESCRIPTION: Demonstrates the basic HTML structure for implementing Qwikloader with a button event handler. Shows how the q:base attribute and event handling are configured.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qwikloader/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body q:base=\"/build/\">\n    <button on:click=\"./myHandler.js#clickHandler\">push me</button>\n    <script>\n      /* Qwikloader */\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating delayQrl Function Implementation\nDESCRIPTION: Implementation of the delayQrl function that works with QRLs (Qwik Resource Loaders) to execute a callback after a specified delay.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/composing/dollar/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function delayQrl<T>(fn: QRL<() => T>, delayInMs: number): Promise<T> {\n  return new Promise((res) => {\n    setTimeout(() => {\n      res(fn.invoke());\n    }, delayInMs);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useSignal Outside Qwik Component\nDESCRIPTION: Illustrates an incorrect usage of the useSignal hook outside of a Qwik component function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = (() => {\n  const count = useSignal(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining useLocation Hook Type in TypeScript\nDESCRIPTION: Type definition for the useLocation hook that returns the current route location information.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nuseLocation: () => RouteLocation;\n```\n\n----------------------------------------\n\nTITLE: Using and Re-exporting Common Loaders and Actions in Qwik Component\nDESCRIPTION: This snippet shows how to import, use, and re-export common routeAction$ and routeLoader$ in a Qwik component. It demonstrates the usage of these shared actions and loaders within a Form component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/re-exporting-loaders/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { Form } from '@builder.io/qwik-city';\nimport { useCommonRouteAction, useCommonRouteLoader } from './shared/loaders';\n\n// As mentioned, here we are re-exporting them\nexport { useCommonRouteAction, useCommonRouteLoader } from './shared/loaders';\n\nexport default component$(() => {\n  const commonRouteAction = useCommonRouteAction();\n  const commonRouteLoader = useCommonRouteLoader();\n\n  return (\n    <div class=\"flex justify-around text-xl\">\n      <Form action={commonRouteAction}>\n        <div class=\"mb-2\">CommonRouteAction</div>\n        <div class=\"mb-4\">response:</div>\n        <div class=\"text-lg font-bold mb-4\">\n          {commonRouteAction.value?.data.join(' ') || ''}\n        </div>\n        <button type=\"submit\">Submit</button>\n      </Form>\n      <div>\n        <div class=\"mb-2\">CommonRouteLoader</div>\n        <div class=\"mb-4\">response:</div>\n        <div class=\"text-lg font-bold mb-4\">{commonRouteLoader.value.join(' ')}</div>\n      </div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page Component in Qwik\nDESCRIPTION: Implements the main route component for the home page, which will be rendered within the Slot of the root layout.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/layout/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <>Home</>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TransformModule Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `TransformModule` interface for Qwik. It describes the structure of a transformed module, including properties like `code`, `isEntry`, `map`, `origPath`, `path`, and `segment`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface TransformModule\n```\n```\n\n----------------------------------------\n\nTITLE: Creating SSRHintProps Type for Server-Side Rendering Hints\nDESCRIPTION: Type definition for props used with the SSRHint component, allowing configuration of dynamic behavior in server-side rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SSRHintProps = {\n  dynamic?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Application on Simulators - Bash\nDESCRIPTION: This snippet provides bash commands to run the Qwik application on iOS and Android simulators/emulators using Capacitor. It simplifies the deployment process to mobile platforms for testing and development purposes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios\nnpx cap run android\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Configuration with CssNano\nDESCRIPTION: Modifying the PostCSS configuration to include the CssNano plugin for CSS optimization\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/postcss/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    /* previous plugin configuration */\n    \"cssnano\": {\n      preset: \"default\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL Parameters in Qwik City\nDESCRIPTION: This middleware function retrieves URL parameters from the request, enabling access to dynamic route values such as 'myId'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ params, json }) => {\n  json(200, { params });\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QRL Encoding in TypeScript\nDESCRIPTION: Shows the basic format of a QRL, including the path to a JavaScript chunk and the symbol name to be retrieved from that chunk.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qrl/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"./path/to/chunk.js#SymbolName\"\n```\n\n----------------------------------------\n\nTITLE: Handling Action Failures with Qwik\nDESCRIPTION: This snippet demonstrates how to handle failures in route actions by using the fail() method. It shows how to return a structured error message if the user could not be added successfully, using Zod for validation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { routeAction$, zod$, z } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(\n  async (user, { fail }) => {\n    // `user` is typed { name: string }\n    const userID = await db.users.add(user);\n    if (!userID) {\n      return fail(500, {\n        message: 'User could not be added',\n      });\n    }\n    return {\n      userID,\n    };\n  },\n  zod$({\n    name: z.string(),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Hydrating React Components with a Click Event in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a counter using React and wrap it in a Qwik component. It shows how to use state and manage interactions within the React component that has been converted to work with Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create React component standard way\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <button className=\"react\" onClick={() => setCount(count + 1)}>\n      Count: {count}\n    </button>\n  );\n}\n\n// Convert React component to Qwik component\nexport const QCounter = qwikify$(Counter);\n```\n\n----------------------------------------\n\nTITLE: Definition of QwikLoaderOptions Interface in TypeScript\nDESCRIPTION: Interface for configuring the Qwik loader script. Contains properties for inclusion strategy and position on the page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikLoaderOptions\n```\n\n----------------------------------------\n\nTITLE: Passing Callback Prop to Button onClick Event\nDESCRIPTION: This snippet illustrates how to pass a callback prop directly to a button's onClick event in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/props/closures/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<button onClick$={props.goodbye$}>good bye</button>\n```\n\n----------------------------------------\n\nTITLE: Providing Methods on useStore() in Qwik\nDESCRIPTION: Shows how to add methods to a store by defining them as QRLs and using the 'this' keyword to reference the store object. This pattern allows the store to encapsulate both data and behavior.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/state/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStore, $, type QRL } from \"@builder.io/qwik\";\n\ntype CountStore = { count: number; increment: QRL<(this: CountStore) => void> };\n\nexport default component$(() => {\n  const state = useStore<CountStore>({\n    count: 0,\n    increment: $(function (this: CountStore) {\n      this.count++;\n    }),\n  });\n\n  return (\n    <>\n      <button onClick$={() => state.increment()}>Increment</button>\n      <p>Count: {state.count}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Building Qwik App for Production with pnpm\nDESCRIPTION: Runs the build command using pnpm, which compiles the application for production by executing server and client build scripts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Declaring Sync Function Type in TypeScript\nDESCRIPTION: Declares a type for the sync$ function, which extracts a function into a synchronously loadable QRL. This is an alpha preview API for developers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nsync$: <T extends Function>(fn: T) => SyncQRL<T>;\n```\n\n----------------------------------------\n\nTITLE: Vitest Example Component Unit Test in Qwik\nDESCRIPTION: This code demonstrates a Vitest unit test for a Qwik component. It imports necessary modules from `@builder.io/qwik/testing` and `vitest` to create a testing environment, render the `ExampleTest` component with different props, and assert the expected output using `expect`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/vitest/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createDOM } from '@builder.io/qwik/testing';\nimport { test, expect } from 'vitest';\nimport { ExampleTest } from './example';\n\ntest(`[ExampleTest Component]: Should render ‚≠ê`, async () => {\n  const { screen, render } = await createDOM();\n  await render(<ExampleTest flag={true} />);\n  expect(screen.outerHTML).toContain('‚≠ê');\n  const div = screen.querySelector('.icon') as HTMLElement;\n  expect(div.outerHTML).toContain('‚≠ê');\n});\n\ntest(`[ExampleTest Component]: Should render üí£`, async () => {\n  const { screen, render } = await createDOM();\n  await render(<ExampleTest flag={false} />);\n  expect(screen.outerHTML).toContain('üí£');\n});\n\ntest(`[ExampleTest Component]: Click counter +1`, async () => {\n  const { screen, render, userEvent } = await createDOM();\n  await render(<ExampleTest flag={true} />);\n\n  expect(screen.outerHTML).toContain('Count:0');\n\n  const spanBefore = screen.querySelector('span') as HTMLDivElement;\n  await userEvent('.btn-counter', 'click');\n  expect(spanBefore.innerHTML).toEqual('Count:1');\n\n  const spanAfter = screen.querySelector('span') as HTMLDivElement;\n  await userEvent('button', 'click');\n  expect(spanAfter.innerHTML).toEqual('Count:2');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Qwik JSX in Astro\nDESCRIPTION: This TypeScript configuration snippet ensures that the Qwik JSX types are correctly recognized within an Astro project.  It sets the `jsx` compiler option to `react-jsx` and specifies `@builder.io/qwik` as the `jsxImportSource`, which is required for Qwik to render properly in Astro.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"\\\"compilerOptions\\\": {\\n  \\\"jsx\\\": \\\"react-jsx\\\",\\n  \\\"jsxImportSource\\\": \\\"@builder.io/qwik\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring ProgressHTMLAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for HTML attributes specific to the 'progress' element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ProgressHTMLAttributes<T extends Element> extends Attrs<'progress', T>\n```\n\n----------------------------------------\n\nTITLE: Compiled Qwik Component for Visibility-Based Execution\nDESCRIPTION: Shows the compiled minimal code that Qwik generates for the useVisibleTask$ hook. This demonstrates how Qwik optimizes by only including the essential logic required for client-side execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-tasks/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLexicalScope } from '@builder.io/qwik';\n\nexport const app_component_useVisibleTask_wbBu0Yp42Vw = () => {\n    const [animate] = useLexicalScope();\n    animate.value = true;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hello World Component in Qwik\nDESCRIPTION: A simple example of creating a Qwik component that returns a 'Hello World!' message. Components in Qwik are declared using the component$() function and must return JSX elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/component/basic/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <div>Hello World!</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: QRL vs import() Example in Qwik\nDESCRIPTION: Illustrates the difference between using QRL and import() for lazy-loading, showing how QRL handles serialization and relative paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_69\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <button onClick={() => (await import('./chunk-abc.js')).onClick}>\n```\n\n----------------------------------------\n\nTITLE: Defining Server-side Environment Variables in .env.local\nDESCRIPTION: Example of defining a private server-side environment variable. This variable is only accessible in server-side code and is not available in the browser.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nDB_PRIVATE_KEY=123456789\n```\n\n----------------------------------------\n\nTITLE: Optimizer-Generated Code for Qwik Component\nDESCRIPTION: Demonstration of how the Qwik Optimizer transforms the component code into multiple chunks. This includes the main app file, the component file, and the onClick handler file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { componentQrl, qrl } from '@builder.io/qwik';\n\nconst App = /*#__PURE__*/ componentQrl(\n  qrl(() => import('./app_component_akbu84a8zes.js'), 'App_component_AkbU84a8zes')\n);\n\nexport { App };\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { jsx as _jsx } from '@builder.io/qwik/jsx-runtime';\nimport { qrl } from '@builder.io/qwik';\nexport const App_component_AkbU84a8zes = () => {\n  console.log('render');\n  return /*#__PURE__*/ _jsx('button', {\n    onClick$: qrl(\n      () => import('./app_component_button_onclick_01pegc10cpw'),\n      'App_component_button_onClick_01pEgC10cpw'\n    ),\n    children: 'Hello Qwik',\n  });\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const App_component_button_onClick_01pEgC10cpw = () => console.log('hello');\n```\n\n----------------------------------------\n\nTITLE: Hydrating React Components on Hover Event in TypeScript\nDESCRIPTION: This snippet provides an example of how to specify an eagerness condition to hydrate a React component on hover event using qwikify$. It emphasizes the importance of controlling hydration to optimize application performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Specify eagerness to hydrate component on hover event.\nexport const QCounter = qwikify$(Counter, { eagerness: 'hover' });\n```\n\n----------------------------------------\n\nTITLE: Creating a robots.txt File for Qwik City\nDESCRIPTION: This snippet demonstrates the content of a robots.txt file for a Qwik City project. It includes directives for allowing all user agents and specifying the location of the sitemap.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/sitemaps/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://<YOUR_HOSTNAME>/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module Styles for Qwik Component\nDESCRIPTION: Creates a CSS Module file with a container class that sets the background color to red. CSS Modules are supported out of the box in Qwik thanks to Vite.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizer-Rewritten Counter Component with Symbol Generation\nDESCRIPTION: Example of how the Qwik optimizer transforms the counter component code, showing how symbols are generated and referenced in the compiled output with explicit QRL paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/bundle/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default componentQRL(qrl('./chunk-1.js', 's_ABC123'));\n\nexport const s_ABC123 = () => {\n  const count = useSignal(0);\n\n  return (\n    <button onClickQRL={qrl('/.chunk-1.js', 's_XYZ342')}>\n      Increment {count.value}\n    </button>\n  );\n};\n\nexport const s_XYZ432 = () => {\n  const [count] = useLexicalScope();\n  return count.value++;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Form Element with Form Component\nDESCRIPTION: This TypeScript code demonstrates how to add a form element using the `Form` component returned by the `useForm` hook from `@modular-forms/qwik`. The `Form` component encloses the fields of your form and through its properties you can define what happens when the form is submitted.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const [loginForm, { Form, Field, FieldArray }] = useForm<LoginForm>({\n    loader: useFormLoader(),\n  });\n\n  return <Form>‚Ä¶</Form>;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Validation Errors\nDESCRIPTION: This TSX code demonstrates how to display validation errors for a form field using the `field.error` property provided by the `Field` component from `@modular-forms/qwik`.  If an error exists for the field, it's rendered within a `div` element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Field name=\"email\">\n  {(field, props) => (\n    <div>\n      <input {...props} type=\"email\" value={field.value} />\n      {field.error && <div>{field.error}</div>}\n    </div>\n  )}\n</Field>\n\n```\n\n----------------------------------------\n\nTITLE: Declaring NetlifyEdgeAdapterOptions Interface in TypeScript\nDESCRIPTION: Interface definition for Netlify Edge adapter options that extends ServerAdapterOptions. Includes configuration for excluded paths, function routes, and static paths to customize the deployment behavior on Netlify Edge Functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-netlify-edge/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NetlifyEdgeAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Untrack Function in TypeScript\nDESCRIPTION: Defines the untrack function, which prevents tracking of listeners for a given callback. It takes a function as an argument and returns its result without tracking.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nuntrack: <T>(fn: () => T) => T;\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Component Implementation in Qwik\nDESCRIPTION: Demonstrates a simple counter implementation using Qwik's useStore hook for state management and proxy-based reactivity. Shows how the component handles click events and automatic re-rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/concepts/reactivity/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$(() => {\n  const store = useStore({ count: 0 });\n\n  return <button onClick$={() => store.count++}>{store.count}</button>;\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from @builder.io/qwik-auth to @auth/qwik\nDESCRIPTION: This code snippet illustrates the necessary changes to migrate from the old Auth library to the new Auth.js implementation, particularly the updates to route handling and imports.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const onRequest: RequestHandler = (event) => {\n  const session: Session | null = event.sharedMap.get('session');\n  if (!session || new Date(session.expires) < new Date()) {\n-    throw event.redirect(302, `/api/auth/signin?redirectTo=${event.url.pathname}`);\n+    throw event.redirect(302, `/auth/signin?callbackUrl=${event.url.pathname}`);\n  }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Auth0Provider from \"@auth/core/providers/auth0\";\n-import { serverAuth$ } from \"@builder.io/qwik-auth\";\n+import { QwikAuth$ } from \"@auth/qwik\";\n\n-export const { onRequest, useAuthSession, useAuthSignin, useAuthSignout } =\n-  serverAuth$(({ env }) => ({\n+export const { onRequest, useSession, useSignIn, useSignOut } = \n+  QwikAuth$(({ env }) => ({\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig(({ command, mode }): UserConfig => {\n  return {\n    plugins: [qwikCity(), qwikVite(), tsconfigPaths()],\n    // This tells Vite which dependencies to pre-build in dev mode.\n    optimizeDeps: {\n      include: [\"@auth/qwik\"],\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting QwikViteDevResponse Interface in TypeScript\nDESCRIPTION: Specifies the layout for development responses when using Qwik with a Vite setup, featuring optional environment data and render resolution handlers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikViteDevResponse\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotListener Interface for State Management\nDESCRIPTION: Interface that defines the structure of a snapshot listener in Qwik's container system, connecting elements to QRLs with specific keys.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnapshotListener\n```\n\n----------------------------------------\n\nTITLE: Creating Page Component in Qwik\nDESCRIPTION: This code snippet demonstrates how to create a simple page component in Qwik. It renders an h1 element with the text 'About'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>About</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up MDX Route Structure in Qwik City\nDESCRIPTION: Example of basic route directory structure for MDX files in Qwik City\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îî‚îÄ‚îÄ some/\n        ‚îî‚îÄ‚îÄ path/\n            ‚îî‚îÄ‚îÄ index.mdx    # https://example.com/some/path\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handling in Qwik\nDESCRIPTION: Type definition for event handlers in Qwik, supporting generic event and element types with a specialized bivarianceHack for type flexibility.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventHandler<EV = Event, EL = Element> = {\n  bivarianceHack(event: EV, element: EL): any;\n}[\"bivarianceHack\"];\n```\n\n----------------------------------------\n\nTITLE: Defining useOnDocument hook in TypeScript\nDESCRIPTION: Signature of the useOnDocument hook which registers event listeners on the document object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nuseOnDocument: <T extends KnownEventNames>(event: T | T[], eventQrl: EventQRL<T>) => void\n```\n\n----------------------------------------\n\nTITLE: Importing useTask$ and server$ in Qwik\nDESCRIPTION: This snippet demonstrates how to import the useTask$ hook from Qwik and the server$ function from Qwik City for task execution and server-side code invocation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, useSignal, useTask$ } from \"@builder.io/qwik\";\nimport {\n  routeLoader$,\n  Form,\n  routeAction$,\n  server$,\n} from '@builder.io/qwik-city';\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Blog Routes - Second Post\nDESCRIPTION: Creating a nested route for the second blog post at /blog/second URL path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/blog/second/index.tsx\n\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>Second blog post</h1>\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Method in Qwik City Middleware\nDESCRIPTION: Demonstrates how to access the current HTTP request method (GET, POST, PATCH, PUT, DELETE) in a middleware function and return it as part of the response.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onRequest: RequestHandler = async ({ method, json }) => {\n  json(200, { method });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @qwikdev/astro with Bun\nDESCRIPTION: This command manually installs the `@qwikdev/astro` integration into the project using Bun. The `@qwikdev/astro` package provides the necessary functionality for integrating Qwik components into an Astro project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n\"bun install @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik City Middleware for Vercel Edge\nDESCRIPTION: Function that creates a Qwik City middleware handler for Vercel Edge runtime. Takes QwikCityVercelEdgeOptions and returns a function that processes Request objects and returns Response promises.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-vercel-edge/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(\n  opts: QwikCityVercelEdgeOptions,\n): (request: Request) => Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Responses in Qwik City\nDESCRIPTION: This middleware function allows sending an HTML response to the client, rendering HTML content directly within the response body.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ html }) => {\n  html(\n    200,\n    ` \n      <html>\n        <body>\n          <h1>HTML response</h1>\n        </body>\n      </html>`\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Schema with Zod in Qwik\nDESCRIPTION: Shows how to define a form schema using Zod and create initial values for a login form in Qwik. This snippet uses routeLoader$ to provide initial form values.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$, z } from '@builder.io/qwik-city';\nimport { InitialValues } from '@modular-forms/qwik';\n\nconst formSchema = z.object({\n  email: z.string().nonempty(),\n  password: z.string().min(8),\n});\n\ntype LoginForm = z.infer<typeof formSchema>;\n\nexport const useLoginForm = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Qwik Preset (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Nx workspace named 'org-workspace' with the 'qwik-nx' preset, pre-configured for Qwik development. It leverages the create-nx-workspace package to set up the workspace.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx create-nx-workspace@latest org-workspace --preset=qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Management in Qwik Components\nDESCRIPTION: Example demonstrating how to create, provide, and consume context in Qwik components using useContext and useContextProvider hooks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_111\n\nLANGUAGE: tsx\nCODE:\n```\n// Declare the Context type.\ninterface TodosStore {\n  items: string[];\n}\n// Create a Context ID (no data is saved here.)\n// You will use this ID to both create and retrieve the Context.\nexport const TodosContext = createContextId<TodosStore>(\"Todos\");\n\n// Example of providing context to child components.\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: [\"Learn Qwik\", \"Build Qwik app\", \"Profit\"],\n    }),\n  );\n\n  return <Items />;\n});\n\n// Example of retrieving the context provided by a parent component.\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Function resolveManifest Declaration - TypeScript\nDESCRIPTION: The resolveManifest function integrates a provided manifest with a built one and facilitates symbol mappings. Receives an optional Partial<QwikManifest | ResolvedManifest> and returns ResolvedManifest or undefined.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function resolveManifest(\n  manifest?: Partial<QwikManifest | ResolvedManifest> | undefined,\n): ResolvedManifest | undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Route using NPM\nDESCRIPTION: This command shows how to create a new route for the /contact page using the Qwik utility command with NPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik new /contact\n```\n\n----------------------------------------\n\nTITLE: Modifying global.css for Panda CSS layers\nDESCRIPTION: This CSS snippet demonstrates the modification made to the `src/global.css` file after adding Panda CSS. It adds `@layer` directives to define the order of CSS layers for reset, base styles, tokens, recipes, and utilities, ensuring proper styling application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/panda-css/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n\n...stuff...\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Type with TypeScript\nDESCRIPTION: This TypeScript code defines a `LoginForm` type, which specifies the structure of the form data, including the `email` and `password` fields, both as strings.  This provides type safety when working with form data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype LoginForm = {\n  email: string;\n  password: string;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Extracted Component Render Function in chunk-a.js\nDESCRIPTION: The component's render function extracted into a separate chunk. The event handler is further extracted into another chunk with the necessary lexical scope captured for state management.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Counter_onMount = () => {\n  const store = useStore({ count: 0 });\n  return <button onClick$={qrl('./chunk-b.js', 'Counter_onClick', [store])}>{store.count}</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Deploy Script for Cloud Run\nDESCRIPTION: Shows an example of updating the deploy script in package.json to deploy the Cloud Run app. 'my-cloud-run-app' should be replaced with the actual app name.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/gcp-cloud-run/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deploy\": \"gcloud run deploy my-cloud-run-app --source .\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS-in-JS Styles in Qwik Component\nDESCRIPTION: Demonstrates how to import and apply CSS-in-JS styles created with styled-vanilla-extract in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { blueClass } from './styles.css';\n\nexport const Cmp = component$(() => {\n  return <div class={blueClass} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useSignal in Qwik Custom Hook\nDESCRIPTION: Shows how to properly use the useSignal hook within a custom Qwik hook function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useCounter = () => {\n  const count = useSignal(0);\n  return count;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining JSXChildren Type in TypeScript\nDESCRIPTION: The JSXChildren type defines acceptable types for children in JSX, including strings, numbers, functions, and signals. It supports a diverse set of content types that can be rendered as children in JSX components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport type JSXChildren =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | Function\n  | RegExp\n  | JSXChildren[]\n  | Promise<JSXChildren>\n  | Signal<JSXChildren>\n  | JSXNode;\n```\n\n----------------------------------------\n\nTITLE: Defining GetValidatorOutputType Type in TypeScript\nDESCRIPTION: Defines a conditional type to extract the output type from a TypedDataValidator, supporting both Valibot and Zod validators.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GetValidatorOutputType<VALIDATOR extends TypedDataValidator> =\n  VALIDATOR extends ValibotDataValidator<infer TYPE>\n    ? v.InferOutput<TYPE>\n    : VALIDATOR extends ZodDataValidator<infer TYPE>\n      ? z.output<TYPE>\n      : never;\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Qwik Component\nDESCRIPTION: Demonstrates how to use a custom Qwik component (Counter) within another component. This shows the component composition pattern in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const OtherComponent = component$(() => {\n  return <Counter initialValue={100} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Building Qwik App for Production with yarn\nDESCRIPTION: Runs the build command using yarn, which compiles the application for production by executing server and client build scripts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Defining JSONValue type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type named `JSONValue` that represents a valid JSON value. It can be a string, number, boolean, an object with string keys and JSONValue values, or an array of JSONValue values. This type is useful for representing data that can be serialized to JSON.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport type JSONValue =\n  | string\n  | number\n  | boolean\n  | {\n      [x: string]: JSONValue;\n    }\n  | Array<JSONValue>;\n```\n\n----------------------------------------\n\nTITLE: Creating Test DOM Environment with Qwik Testing\nDESCRIPTION: Function to create a testing platform with DOM capabilities. Returns an object with render method for JSX elements, screen access, and userEvent simulation. Accepts optional HTML string for initial content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-testing/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDOM: ({ html }?: { html?: string }) =>\n  Promise<{\n    render: (\n      jsxElement: JSXOutput,\n    ) => Promise<import(\"@builder.io/qwik\").RenderResult>;\n    screen: HTMLElement;\n    userEvent: (\n      queryOrElement: string | Element | keyof HTMLElementTagNameMap | null,\n      eventNameCamel: string | keyof WindowEventMap,\n      eventPayload?: any,\n    ) => Promise<void>;\n  }>;\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Component in Qwik City\nDESCRIPTION: This code shows a basic layout implementation in Qwik City. It creates a component that uses the Slot element to render child page content, demonstrating the foundation of Qwik's layout system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/layout.tsx\nimport { component$, Slot } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <Slot />;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Middleware\nDESCRIPTION: This snippet provides installation commands for integrating Fastify middleware with Qwik City, essential for setting up a server environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/node/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm run qwik add fastify\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpm run qwik add fastify\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn run qwik add fastify\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun run qwik add fastify\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring eslint-plugin-qwik with Legacy ESLint Config (ESLint < 9)\nDESCRIPTION: Configuration example for eslint-plugin-qwik using the legacy ESLint configuration format. Includes TypeScript integration and enables recommended rules for Qwik development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/eslint-plugin-qwik/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n    node: true,\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:qwik/recommended',\n  ],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    tsconfigRootDir: __dirname,\n    project: ['./tsconfig.json'],\n    ecmaVersion: 2021,\n    sourceType: 'module',\n    ecmaFeatures: {\n      jsx: true,\n    },\n  },\n  plugins: ['@typescript-eslint'],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Quality | Qwik | TypeScript\nDESCRIPTION: This snippet allows for the customization of image quality. By specifying a quality parameter during import, users can control the quality of the rendered image from 1 to 100.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport Image from '~/media/your_image.png?quality=100&jsx';\n\nexport default component$(() => {\n  return (\n    <div>\n      <Image />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Timer with useVisibleTask$ in Qwik\nDESCRIPTION: This example demonstrates how to create a component with a client-side timer using useVisibleTask$. The hook runs only on the client and sets up an interval that increments a counter every 500ms. It also includes cleanup logic that runs when the component is destroyed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_127\n\nLANGUAGE: tsx\nCODE:\n```\nconst Timer = component$(() => {\n  const store = useStore({\n    count: 0,\n  });\n\n  useVisibleTask$(() => {\n    // Only runs in the client\n    const timer = setInterval(() => {\n      store.count++;\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  });\n\n  return <div>{store.count}</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Optimal implementation using useLocation in Qwik\nDESCRIPTION: This snippet demonstrates the correct usage of the useLocation hook to safely access the current URL within a Qwik application without causing unnecessary JavaScript execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Do this!\nconst location = useLocation();\n\nif (location.url.href.includes('foo')) {\n  // Do the thing\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExperimentalFeatures Enum in TypeScript\nDESCRIPTION: Enum definition for experimental features in Qwik, including noSPA, preventNavigate, and valibot.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ExperimentalFeatures\n```\n\n----------------------------------------\n\nTITLE: Exporting Azure SWA Adapter Function\nDESCRIPTION: Function declaration for the Azure Static Web Apps adapter that configures Qwik City applications for deployment to Azure SWA. Takes optional configuration options parameter.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-azure-swa/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function azureSwaAdapter(opts?: AzureSwaAdapterOptions): any;\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Theme Switch\nDESCRIPTION: This CSS code provides the styling for the theme switch component. It defines the appearance of the switch, slider, and the checked state.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.switch{\n  position: relative;\n  display: inline-block;\n  width: 50px;\n  height: 30px;\n  background-color: red;\n  border-radius: 100px;\n  cursor: pointer;\n}\n\n.switch input{\n  display: none;\n}\n\n.slider{\n  width: 50px;\n  height: 25px;\n  border-radius: 25px;\n  background-color: #ccc;\n  position: relative;\n  cursor: pointer;\n  transition: all .3s linear;\n}\n\n.slider:before{\n  content: \"\";\n  position: absolute;\n  width: 25px;\n  height: 25px;\n  background-size: cover;\n  border-radius: 50%;\n  background-color: #fff;\n  top: 15px;\n  left: 5px;\n  bottom: 0;\n  margin: auto;\n  transition: all .3s linear;\n}\n\ninput:checked + .slider{\n  background-color: #2196F3;\n}\n\ninput:checked + .slider:before{\n  left: 22px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing @qwikdev/astro with PNPM\nDESCRIPTION: This command manually installs the `@qwikdev/astro` integration into an Astro project using PNPM. This is useful when the Astro CLI tool is not used, or when manual dependency management is preferred.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm install @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Image Usage: Public Directory Reference\nDESCRIPTION: This snippet showcases an incorrect approach to using images in Qwik. Directly referencing images from the public directory bypasses optimization and caching mechanisms. The ESLint rule flags this pattern to encourage importing images as ESM modules instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\n<img src=\"/image.png\">\n```\n\n----------------------------------------\n\nTITLE: Integrating Third-Party Component with Re-exported Loader in Qwik\nDESCRIPTION: This snippet illustrates how to integrate a third-party component that relies on a Qwik routeLoader$. It shows the re-export of the loader from the third-party library to ensure proper functioning within the Qwik routing system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/re-exporting-loaders/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { ThirdPartyPaymentComponent } from './third-party-library';\n\n// As mentioned, here we are re-exporting the third-party loader\nexport { useThirdPartyPaymentLoader } from './third-party-library';\n\nexport default component$(() => {\n  return (\n    <section>\n      <ThirdPartyPaymentComponent />\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Middleware Execution in Qwik City\nDESCRIPTION: This middleware allows for the execution of other middleware functions to be stopped by throwing an exit exception, effectively terminating further processing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ exit }) => {\n  throw exit();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik City Firebase Middleware Function\nDESCRIPTION: The createQwikCity function takes QwikCityFirebaseOptions and returns an async request handler function for Firebase. This function sets up the Qwik City middleware for Firebase hosting and functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-firebase/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(\n  opts: QwikCityFirebaseOptions,\n): (req: any, res: any) => Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining QwikManifest Interface in TypeScript\nDESCRIPTION: Declares the QwikManifest interface with properties describing the build metadata, including bundles, symbols, and mapping information.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikManifest\n```\n\n----------------------------------------\n\nTITLE: Font Face Rule in CSS\nDESCRIPTION: This snippet demonstrates how to define a custom font using the `@font-face` rule in CSS. It specifies the font family, style, weight, and the URL of the font file, along with the `font-display` property to control font loading behavior.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/fonts/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"@font-face {\\n  font-display: swap;\\n  font-family: \\\"Peace Sans\\\";\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(\\\"../assets/fonts/peace-sans.woff2\\\") format(\\\"woff2\\\");\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentHeadValue Interface in Qwik City\nDESCRIPTION: Interface definition for DocumentHeadValue which represents the structure of page metadata. It includes properties for title, meta tags, links, scripts, styles, and arbitrary frontmatter data that can be used to generate the document head.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentHeadValue<FrontMatter extends Record<string, any> = Record<string, unknown>>\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik Component with Barrel Structure using NPM\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the barrel file structure with NPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik new --barrel Button\n```\n\n----------------------------------------\n\nTITLE: Using Inline Styles in Qwik Components (Inefficient Approach)\nDESCRIPTION: Demonstrates the naive approach of inlining styles directly into a component, which causes duplicate style loading when the component is re-rendered. This pattern should be avoided in favor of useStyles$().\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/style/styles/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComponent = () => {\n  return (\n    <>\n    <style>.my-class { color: red; }</style>\n      My Component\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Netlify Request Context | TypeScript\nDESCRIPTION: This snippet demonstrates how to access the Netlify request context in an endpoint's request handler, logging the request IP address.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const onRequest = async ({ platform }) => {\n  platform.log('requested ip:', platform.ip);\n};\n```\n\n----------------------------------------\n\nTITLE: Recovering Virtual Nodes in JSX for Qwik\nDESCRIPTION: This code snippet demonstrates the virtual DOM structure that Qwik needs to recover from the encoded string '!{HDB1}'. It includes a Counter component with nested elements and text nodes, showcasing how Qwik represents complex structures efficiently.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-2-coming-soon/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<main>\n  <Counter>\n    <>\n      {'Count: '}\n      {signal.value}\n      {'!'}\n      <button on:click=\"...\">+1</button>\n    </>\n  </Counter>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Adding the Static Adapter to Qwik\nDESCRIPTION: Command to add the static adapter to your Qwik app, enabling Static Site Generation (SSG). This ensures your app generates pre-rendered static files suitable for Capacitor.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run qwik add static\n```\n\n----------------------------------------\n\nTITLE: Qwik Component with Reference Props in TypeScript\nDESCRIPTION: This snippet illustrates how to use reference props in a Qwik component. It shows passing an object as a prop, which allows for mutating the internal data without using signals.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/overview/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\n\ninterface ItemProps {\n  details: {\n    name?: string;\n    quantity?: number;\n    description?: string;\n    price?: number;\n  };\n}\n\nexport const Item = component$((props: ItemProps) => {\n  props.details.price = 4.99;\n\n  return (\n    <ul>\n      <li>name: {props.details.name}</li>\n      <li>quantity: {props.details.quantity}</li>\n      <li>description: {props.details.description}</li>\n      <li>price: {props.details.price}</li>\n    </ul>\n  );\n});\n\nexport default component$(() => {\n  return (\n    <Item\n      details={{ name: \"hammer\", quantity: 5, description: \"\", price: 9.99 }}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining staticAdapter Function in TypeScript for Qwik-City Static Site Generation\nDESCRIPTION: This function creates a static site generator adapter for Qwik City. It accepts a StaticGenerateAdapterOptions object and returns a configuration that can be used with Qwik's build system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-static/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function staticAdapter(opts: StaticGenerateAdapterOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Simple Qwik Button Component\nDESCRIPTION: Defines a simple Qwik button component with a customizable label. It uses the `component$` function from `@builder.io/qwik` to create a Qwik component. The component accepts a `label` prop of type string and renders a button element with the given label.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\n\nexport interface ButtonProps {\n  label: string;\n}\n\nexport const Button = component$<ButtonProps>(({label}) => {\n  return (\n    <button>\n      {label}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTMLElementAttrs Interface in TypeScript\nDESCRIPTION: The HTMLElementAttrs interface extends HTMLAttributesBase and FilterBase, providing a robust type structure for HTML element attributes in Qwik. This interface allows for additional filtering and type checking of attributes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HTMLElementAttrs extends HTMLAttributesBase, FilterBase<HTMLElement>\n```\n\n----------------------------------------\n\nTITLE: Defining PropsOf Type in TypeScript\nDESCRIPTION: Defines a utility type that infers Props from a component or tag, handling various cases including intrinsic elements and function components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PropsOf<COMP> = COMP extends string\n  ? COMP extends keyof QwikIntrinsicElements\n    ? QwikIntrinsicElements[COMP]\n    : QwikIntrinsicElements[\"span\"]\n  : NonNullable<COMP> extends never\n    ? never\n    : COMP extends FunctionComponent<infer PROPS>\n      ? PROPS extends Record<any, infer V>\n        ? IsAny<V> extends true\n          ? never\n          : ObjectProps<PROPS>\n        : COMP extends Component<infer OrigProps>\n          ? ObjectProps<OrigProps>\n          : PROPS\n      : never;\n```\n\n----------------------------------------\n\nTITLE: Deferred Product Loading with Resource Component\nDESCRIPTION: Demonstrates using defer with loader$ for streaming HTML content and handling expensive fetches without blocking rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { loader$ } from '@builder.io/qwik-city';\n\nexport const useGetProduct = loader$(({defer}) => {\n  const promise = expensiveFetch();\n  return defer(promise);\n});\n\nexport default component$(() => {\n  const productResource = useGetProduct();\n  return (\n    <Resource value={productResource}\n      onResolved={(value) => (\n        <article>\n          <div>Product name: {value.name}</div>\n          <img src={value.src} />\n        </article>\n      )}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-image using npm\nDESCRIPTION: Command to install the qwik-image package using npm package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install qwik-image\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Component in Qwik\nDESCRIPTION: Definition of the Slot component in Qwik, which is used for content projection. It takes an optional name property that specifies which named slot to render.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Slot: FunctionComponent<{\n    name?: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Defining Deno Server Adapter and Options for Qwik City in TypeScript\nDESCRIPTION: This code snippet defines the denoServerAdapter function and DenoServerAdapterOptions interface for integrating Deno server with Qwik City. It also imports and re-exports types from other modules.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/deno-server/api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @alpha (undocumented)\nexport function denoServerAdapter(opts?: DenoServerAdapterOptions): any;\n\n// @alpha (undocumented)\nexport interface DenoServerAdapterOptions extends ServerAdapterOptions {\n    // (undocumented)\n    name?: string;\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Using SVG Component in Qwik Markdown\nDESCRIPTION: This code demonstrates how to use an imported SVG component within JSX markup in a Markdown file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/community/groups/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgQwikNewsletter/>\n```\n\n----------------------------------------\n\nTITLE: Qwik createComputedQrl Function Definition\nDESCRIPTION: Type definition for the createComputedQrl function in Qwik. This is a lower-level API that accepts a QRL (Qwik Resource Loader) instead of a direct function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncreateComputedQrl: <T>(qrl: QRL<ComputedFn<T>>) => Signal<Awaited<T>>;\n```\n\n----------------------------------------\n\nTITLE: Installing Express Middleware\nDESCRIPTION: The snippet shows how to install the Express middleware for Qwik City using various package managers. This is essential for integrating Qwik City with an Express server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/node/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm run qwik add express\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpm run qwik add express\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn run qwik add express\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun run qwik add express\n```\n```\n\n----------------------------------------\n\nTITLE: Host Listener Implementation in Qwik\nDESCRIPTION: Shows how to use host listeners to handle events without requiring full React hydration, improving performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { QButton, QDisplay } from './react';\n\nexport default component$(() => {\n  console.log('Qwik Render');\n  const count = useSignal(0);\n  return (\n    <main>\n      <QButton\n        host:onClick$={() => {\n          console.log('click', count.value);\n          count.value++;\n        }}\n      >\n        +1\n      </QButton>\n      <QDisplay count={count.value}></QDisplay>\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Route Loader Implementation in Qwik City\nDESCRIPTION: Shows the correct implementation of a route loader in Qwik City, properly placed in a routes directory file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n \nexport const useProductDetails = routeLoader$(async (requestEvent) => {\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product as Product;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS in Qwik\nDESCRIPTION: This command installs Tailwind CSS in a Qwik project.  It uses the `qwik add tailwind` command which automates the installation and setup process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent Layout Component in Qwik\nDESCRIPTION: This code snippet demonstrates how to create a parent layout component in Qwik. It uses the Slot component to render child content within the layout.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <main>\n      <Slot /> {/* <== Child layout/route inserted here */}\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-nx Plugin (pnpm)\nDESCRIPTION: This command uses pnpm to install the 'qwik-nx' plugin as a dependency within an existing Nx workspace.  This plugin enables Qwik-specific functionalities within the Nx environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm install qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Versions Object Structure\nDESCRIPTION: Object structure containing version information for Qwik, used for compatibility checking and debugging.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nversions: {\n  qwik: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Qwik Optimizer Transformation of QRL\nDESCRIPTION: Demonstrates how the Qwik Optimizer transforms the code containing a QRL reference into separate chunks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_66\n\nLANGUAGE: tsx\nCODE:\n```\n// FILE: <current file>\nuseOnDocument(\"mousemove\", qrl(\"./chunk-abc.js\", \"onMousemove\"));\n\n// FILE: chunk-abc.js\nexport const onMousemove = () => console.log(\"mousemove\");\n```\n\n----------------------------------------\n\nTITLE: Defining $ Function in TypeScript\nDESCRIPTION: The $ function is a Qwik Optimizer marker function used to extract expressions into lazy-loadable resources. It takes an expression of type T and returns a QRL of the same type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n$: <T>(expression: T) => QRL<T>;\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Adapter to Qwik City (yarn)\nDESCRIPTION: This command adds the Firebase adapter to your Qwik City project using yarn. It installs the necessary dependencies and sets up the required configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn run qwik add firebase\"\n```\n\n----------------------------------------\n\nTITLE: Using Component-less Image Optimization in Qwik\nDESCRIPTION: Demonstrates how to import and use an image as a JSX component in Qwik 1.2.0, which automatically optimizes the image with appropriate attributes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport QwikLogo from './logo.png?jsx';\n\nexport default component$(() => {\n  return (\n    <section>\n      <QwikLogo />\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS in Qwik\nDESCRIPTION: This command installs Tailwind CSS in a Qwik project.  It uses the `qwik add tailwind` command which automates the installation and setup process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Route using Yarn\nDESCRIPTION: This command shows how to create a new route for the /contact page using the Qwik utility command with Yarn.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik new /contact\n```\n\n----------------------------------------\n\nTITLE: Implementing a Content Security Policy Plugin in Qwik\nDESCRIPTION: This TypeScript implementation creates a route middleware that adds CSP headers to all requests. It generates a nonce value for script security and sets appropriate CSP directives. The plugin is disabled in development mode to avoid conflicts with Vite scripts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/content-security-policy/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestHandler } from \"@builder.io/qwik-city\";\nimport { isDev } from \"@builder.io/qwik\";\n\nexport const onRequest: RequestHandler = event => {\n  if (isDev) return; // Will not return CSP headers in dev mode\n  const nonce = Date.now().toString(36); // Your custom nonce logic here\n  event.sharedMap.set(\"@nonce\", nonce);\n  const csp = [\n    `default-src 'self' 'unsafe-inline'`,\n    `font-src 'self'`,\n    `img-src 'self' 'unsafe-inline' data:`,\n    `script-src 'self' 'unsafe-inline' https: 'nonce-${nonce}' 'strict-dynamic'`,\n    `style-src 'self' 'unsafe-inline'`,\n    `frame-src 'self' 'nonce-${nonce}'`,\n    `object-src 'none'`,\n    `base-uri 'self'`,\n  ];\n\n  event.headers.set(\"Content-Security-Policy\", csp.join(\"; \"));\n};\n```\n\n----------------------------------------\n\nTITLE: Qwik createContextId Function Definition\nDESCRIPTION: Type definition for the createContextId function in Qwik. This function creates a serializable identifier for context that can be used with useContextProvider and useContext.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncreateContextId: <STATE = unknown>(name: string) => ContextId<STATE>;\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of Items in Qwik\nDESCRIPTION: Demonstrates how to render a list of items in Qwik using the map function, with each item having a unique key property.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { US_PRESIDENTS } from './presidents';\n\nexport const PresidentsList = component$(() => {\n  return (\n    <ul>\n      {US_PRESIDENTS.map((president) => (\n        <li key={president.number}>\n          <h2>{president.name}</h2>\n          <p>{president.description}</p>\n        </li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Component using Bun\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the Qwik utility command with Bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik new Button\n```\n\n----------------------------------------\n\nTITLE: Defining useResource$ hook in TypeScript\nDESCRIPTION: Signature of the useResource$ hook which creates memoized async functions that run when tracked values change and return ResourceReturn objects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nuseResource$: <T>(generatorFn: ResourceFn<T>, opts?: ResourceOptions) =>\n  ResourceReturn<T>;\n```\n\n----------------------------------------\n\nTITLE: SerializeDocumentOptions Interface Definition - TypeScript\nDESCRIPTION: Describes the SerializeDocumentOptions interface containing optional properties like debug, manifest for partial manifests, and symbolMapper for function references. Used for handling serialization options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SerializeDocumentOptions\n```\n\n----------------------------------------\n\nTITLE: Defining PublicProps Type in TypeScript\nDESCRIPTION: Defines a utility type that extends component props, adding default props and allowing plain functions to QRL arguments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PublicProps<PROPS> = (PROPS extends Record<any, any>\n  ? Omit<PROPS, `${string}$`> & _Only$<PROPS>\n  : unknown extends PROPS\n    ? {}\n    : PROPS) &\n  ComponentBaseProps &\n  ComponentChildren<PROPS>;\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City API for Cloudflare Pages in TypeScript\nDESCRIPTION: This code snippet defines the API for Qwik City integration with Cloudflare Pages. It includes the createQwikCity function, PlatformCloudflarePages interface, and QwikCityCloudflarePagesOptions interface. The createQwikCity function is the main entry point for setting up Qwik City on Cloudflare Pages.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/cloudflare-pages/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityCloudflarePagesOptions): (request: PlatformCloudflarePages['request'], env: PlatformCloudflarePages['env'] & {\n    ASSETS: {\n        fetch: (req: Request) => Response;\n    };\n}, ctx: PlatformCloudflarePages['ctx']) => Promise<Response>;\n\n// @public (undocumented)\nexport interface PlatformCloudflarePages {\n    // (undocumented)\n    ctx: {\n        waitUntil: (promise: Promise<any>) => void;\n    };\n    // (undocumented)\n    env?: Record<string, any>;\n    // (undocumented)\n    request: Request;\n}\n\n// @public (undocumented)\nexport interface QwikCityCloudflarePagesOptions extends ServerRenderOptions {\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting QwikJSX as JSX\nDESCRIPTION: Export statements for the QwikJSX namespace. This makes the QwikJSX namespace available as both QwikJSX and JSX, allowing for compatibility with standard JSX patterns.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport { QwikJSX as JSX }\nexport { QwikJSX }\n```\n\n----------------------------------------\n\nTITLE: VisibleTaskStrategy Type Definition\nDESCRIPTION: A union type defining possible strategies for determining when a visible task should run. Options include using an intersection observer, executing when the document is ready, or running during idle periods.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\nexport type VisibleTaskStrategy =\n  | \"intersection-observer\"\n  | \"document-ready\"\n  | \"document-idle\";\n```\n\n----------------------------------------\n\nTITLE: Adding Key Prop in Qwik Array with Fragment - Correct\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingArrayKeyUsePrag` case. It demonstrates the correct way to add a unique `key` prop to a fragment when mapping an array in a Qwik component, using the `Fragment` component to properly assign keys.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, Fragment } from '@builder.io/qwik';\n\nexport const ColorList = component$(() => {\n  const colors = ['red', 'green', 'blue'];\n\n  return (\n    {colors.map((color) => (\n      <Fragment key={`color-${color}`}>\n        <h2>{color}</h2>\n        <p>The color \"${color}\" is a great color.</p>\n      </Fragment>\n    ))}\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: QwikCityAzureOptions interface definition in TypeScript\nDESCRIPTION: The QwikCityAzureOptions interface extends ServerRenderOptions, providing configuration options specific to Azure Static Web Apps integration with Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-azure-swa/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityAzureOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Form Values with routeLoader$\nDESCRIPTION: This TypeScript code uses `routeLoader$` from Qwik City to define the initial values for the `LoginForm`. It sets both the `email` and `password` fields to empty strings. This loader is used to pre-render the form on the server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useFormLoader = routeLoader$<InitialValues<LoginForm>>(() => ({\n  email: '',\n  password: '',\n}));\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Qwik Astro Integration with NPX\nDESCRIPTION: Command to add the Qwik integration to an existing Astro project using NPX, allowing developers to start using Qwik's resumability features in their Astro applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/astro-qwik/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add @qwikdev/astro\n```\n\n----------------------------------------\n\nTITLE: Context Usage Example in TypeScript\nDESCRIPTION: Demonstrates how to create, provide, and use context in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// Declare the Context type and create a Context ID:\ninterface TodosStore {\n  items: string[];\n}\nconst TodosContext = createContextId<TodosStore>('Todos');\n\n// Provide context to child components\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n    })\n  );\n\n  return <Items />;\n});\n\n// Retrieve the context provided by a parent component\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSP Nonce in Custom Scripts in Qwik Components\nDESCRIPTION: This TSX snippet demonstrates how to access the server-generated nonce value from within a Qwik component using the useServerData hook. The nonce is then applied to custom script tags to comply with the Content Security Policy.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/content-security-policy/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const nonce = useServerData<string | undefined>(\"nonce\");\n  return (\n    <div>\n      <script nonce={nonce}>alert(\"Hello world\")</script>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Component Naive Split - Chunk A\nDESCRIPTION: First chunk of the naively split component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter_onMount = (props) => {\n  const salutation = 'Hello';\n  return qrl('./chunk-b.js', 'Greeter_onRender');\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Bootstrap Using yarn\nDESCRIPTION: A yarn script to incorporate Bootstrap into a Qwik application. The command updates the project dependencies and structures files for Bootstrap component functionality using TypeScript.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/bootstrap/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add bootstrap\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Qwik\nDESCRIPTION: Shows how to use CSS Modules in Qwik components by creating a .module.css file and importing it in the component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Adapter to Qwik City (pnpm)\nDESCRIPTION: This command adds the Firebase adapter to your Qwik City project using pnpm. It installs the necessary dependencies and sets up the required configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm run qwik add firebase\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Static Assets in Qwik's Public Folder\nDESCRIPTION: This snippet demonstrates the folder structure for organizing static assets in a Qwik application. It shows how to place files like favicon.ico and images in the /public folder, which are then served from the server's root.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/static-assets/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npublic/\n‚îú‚îÄ‚îÄ favicon.ico           # https://example.com/favicon.ico\n‚îî‚îÄ‚îÄ images/\n    ‚îî‚îÄ‚îÄ logo.png          # https://example.com/images/logo.png\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik integration to Astro configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to manually add the Qwik integration to your `astro.config.mjs` file. It imports the `qwikdev` integration and includes it in the `integrations` array within the `defineConfig` function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n\"// astro.config.mjs\\nimport { defineConfig } from 'astro/config';\\n+ import qwikdev from '@qwikdev/astro';\\n\\nexport default defineConfig({\\n  // ...\\n  integrations: [qwikdev()],\\n  //             ^^^^^\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Defining valibot$ Function Type in TypeScript\nDESCRIPTION: Type definition for the valibot$ function that creates Valibot-based validators for server functions. This is an alpha preview API.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nvalibot$: ValibotConstructor;\n```\n\n----------------------------------------\n\nTITLE: Open Graph Metadata Configuration\nDESCRIPTION: Example of defining Open Graph metadata in MDX frontmatter\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My Title\ndescription: My Description\nog:\n  - title: My Custom Title\n    description: true\n  - image: https://example.com/rock.jpg\n    image:alt: A shiny red apple with a bite taken out\n  - image: https://example.com/rock2.jpg\n```\n\n----------------------------------------\n\nTITLE: Applying Scoped Styles with useStylesScoped\nDESCRIPTION: Example showing how to use useStylesScoped$ to add component-isolated CSS styles that don't affect other components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ScopedStyledComponent = component$(() => {\\n  useStylesScoped$(\\`\\n    /* This style will only apply to this component's elements */\\n    div {\\n      color: blue;\\n    }\\n  \\`);\\n\\n  return <div>Hello, scoped styled world!</div>;\\n});\n```\n\n----------------------------------------\n\nTITLE: Type SymbolsToPrefetch Definition - TypeScript\nDESCRIPTION: Describes the SymbolsToPrefetch type, designed to specify how QRLs should be prefetched by the document, defaulting to 'auto'. It may also include a function that accepts manifest options and returns an array of prefetch resources.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SymbolsToPrefetch =\n  | \"auto\"\n  | ((opts: { manifest: QwikManifest }) => PrefetchResource[]);\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms Qwik Package\nDESCRIPTION: These commands demonstrate how to install the `@modular-forms/qwik` package using various package managers (pnpm, npm, yarn, and bun). The specific command depends on the package manager used in the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun install @modular-forms/qwik\n```\n\n----------------------------------------\n\nTITLE: Implementing JSX Function in TypeScript\nDESCRIPTION: Defines the JSX function used for creating JSX elements in Qwik, supporting various overloads for different use cases.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction h<TYPE extends string | FunctionComponent<PROPS>, PROPS extends {} = {}>(type: TYPE, props: PROPS | null, ...children: any[]): JSXNode<TYPE>;\n\nnamespace h {\n    function h(type: any): JSXNode<any>;\n    function h(type: Node, data: any): JSXNode<any>;\n    function h(type: any, text: string): JSXNode<any>;\n    function h(type: any, children: Array<any>): JSXNode<any>;\n    function h(type: any, data: any, text: string): JSXNode<any>;\n    function h(type: any, data: any, children: Array<JSXNode<any> | undefined | null>): JSXNode<any>;\n    function h(sel: any, data: any | null, children: JSXNode<any>): JSXNode<any>;\n        { JSX };\n}\nexport { h as createElement }\nexport { h }\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Component Communication in Qwik\nDESCRIPTION: Shows how parent and child components interact in Qwik, demonstrating props passing and component lazy loading behavior.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/rendering/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport const Parent = component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <>\n      <button onClick$={() => (count.value += 1)}>Increment</button>\n      <Child name={'World_' + count.value} />\n    </>\n  );\n});\n\nexport const Child = component$((props: { name: string }) => {\n  return <p>Hello {props.name}</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QRL Usage with $ in TypeScript\nDESCRIPTION: Shows how to use the $ function to create a lazy-loadable QRL reference for an event handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <button onClick$={(event) => console.log(event)}>\n```\n\n----------------------------------------\n\nTITLE: Defining AriaAttributes Interface in TypeScript\nDESCRIPTION: This code snippet declares the AriaAttributes interface, which contains a collection of ARIA attributes as optional properties. Each property is typed according to its expected value format.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AriaAttributes\n```\n\n----------------------------------------\n\nTITLE: Defining Render Function in Qwik\nDESCRIPTION: Definition of the render function for Qwik, which renders JSX output to a DOM element. It takes a parent element, JSX output or function component, and optional render options, returning a promise with render results.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const render: (parent: Element | Document, jsxOutput: JSXOutput | FunctionComponent<any>, opts?: RenderOptions) => Promise<RenderResult>;\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright via bun\nDESCRIPTION: This command integrates Playwright into your Qwik project by using bun as the package manager. It configures the project for end-to-end testing after installation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/playwright/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add playwright\n```\n\n----------------------------------------\n\nTITLE: Missing Key Prop in Qwik Array with Fragment - Incorrect\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingArrayKeyUsePrag` case. It demonstrates the incorrect way of trying to assign a key to a shorthand fragment when mapping an array in a Qwik component, highlighting that shorthand fragments do not support keys and should be replaced with `<Fragment>`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const ColorList = component$(() => {\n  const colors = ['red', 'green', 'blue'];\n\n  return (\n    {colors.map((color) => (\n      < key={`color-${color}`}>\n        <h2>{color}</h2>\n        <p>The color \"${color}\" is a great color.</p>\n      </>\n    ))}\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Storybook Story for Qwik Button Component\nDESCRIPTION: Defines a Storybook story for the Qwik Button component. It imports the Button component and defines a story named Primary which sets the `label` argument to \"Hello World\". It uses the storybook-framework-qwik library for creating the story.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from \"storybook-framework-qwik\";\nimport {Button, type ButtonProps} from \"./button\";\n\nconst meta: Meta<ButtonProps>  = {\n  component: Button,\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonProps>; \n\nexport const Primary: Story = {\n  args: {\n    label: \"Hello World\", \n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating jsx Function in TypeScript\nDESCRIPTION: The jsx function is utilized by JSX transpilers to create JSXNode elements. It facilitates the construction of JSX nodes while maintaining proper type inference.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\njsx: <T extends string | FunctionComponent<any>>(\n  type: T,\n  props: T extends FunctionComponent<infer PROPS>\n    ? PROPS\n    : Record<any, unknown>,\n  key?: string | number | null,\n) => JSXNode<T>;\n```\n\n----------------------------------------\n\nTITLE: QRL Type Definition in Qwik\nDESCRIPTION: The TypeScript type definition for QRL, showing its structure and properties including resolve method, captured variables, and development-related information.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QRL<TYPE = unknown> = {\n  __qwik_serializable__?: any;\n  __brand__QRL__: TYPE;\n  resolve(): Promise<TYPE>;\n  resolved: undefined | TYPE;\n  getCaptured(): unknown[] | null;\n  getSymbol(): string;\n  getHash(): string;\n  dev: QRLDev | null;\n} & BivariantQrlFn<QrlArgs<TYPE>, QrlReturn<TYPE>>;\n```\n\n----------------------------------------\n\nTITLE: Configuring useForm with Zod Validation Adapter in Qwik\nDESCRIPTION: Sets up the useForm hook with Zod validation by importing the zodForm$ adapter and adding it as a validate parameter. This enables client-side validation based on the defined Zod schema.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/type-safe-forms-in-qwik/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst [loginForm, { Form, Field }] = useForm<LoginForm>({\n  loader: useFormLoader(),\n  validate: zodForm$(formSchema),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RouteData type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `RouteData` as a tuple containing route information.  It represents either a route name and an array of module loaders, or a route name, module loaders, an original pathname, and route bundle names. This is used for route definition and module loading within Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RouteData =\n  | [routeName: string, loaders: ModuleLoader[]]\n  | [\n      routeName: string,\n      loaders: ModuleLoader[],\n      originalPathname: string,\n      routeBundleNames: string[],\n    ];\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Custom Container Attributes\nDESCRIPTION: Shows the resulting HTML output when custom container attributes are added using the containerAttributes option, including both the custom lang attribute and system-generated Qwik attributes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/containers/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\" q:container=\"paused\" q:version=\"1.9.0\" q:base=\"/build/\">\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: TransformOutput Interface Definition\nDESCRIPTION: Interface defining the structure of the output returned by transformation functions, including diagnostics, module information, and language detection flags.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformOutput\n```\n\n----------------------------------------\n\nTITLE: Building Qwik City for Production (bun)\nDESCRIPTION: This command builds the Qwik City application for production using bun. It compiles the client and server code, preparing the application for deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"bun run build\"\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Attribute Types in TypeScript\nDESCRIPTION: This snippet showcases various SVG attribute definitions using TypeScript. It includes attributes like xlink:href, xml:base, accumulate, additive, and many others. Each attribute is defined with its type, which can be a string, number, boolean, or a custom type like Booleanish or HTMLCrossOriginAttribute.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SVGAttributes {\n  \"xlink:href\"?: string | undefined;\n  \"xlink:role\"?: string | undefined;\n  \"xlink:show\"?: string | undefined;\n  \"xlink:title\"?: string | undefined;\n  \"xlink:type\"?: string | undefined;\n  \"xml:base\"?: string | undefined;\n  \"xml:lang\"?: string | undefined;\n  \"xml:space\"?: string | undefined;\n  \"xmlns:xlink\"?: string | undefined;\n  accumulate?: 'none' | 'sum' | undefined;\n  additive?: 'replace' | 'sum' | undefined;\n  allowReorder?: 'no' | 'yes' | undefined;\n  alphabetic?: number | string | undefined;\n  amplitude?: number | string | undefined;\n  ascent?: number | string | undefined;\n  attributeName?: string | undefined;\n  attributeType?: string | undefined;\n  autoReverse?: Booleanish | undefined;\n  azimuth?: number | string | undefined;\n  baseFrequency?: number | string | undefined;\n  baseProfile?: number | string | undefined;\n  bbox?: number | string | undefined;\n  begin?: number | string | undefined;\n  bias?: number | string | undefined;\n  by?: number | string | undefined;\n  calcMode?: number | string | undefined;\n  clip?: number | string | undefined;\n  clipPathUnits?: number | string | undefined;\n  color?: string | undefined;\n  contentScriptType?: number | string | undefined;\n  contentStyleType?: number | string | undefined;\n  crossOrigin?: HTMLCrossOriginAttribute;\n  cursor?: number | string;\n  cx?: number | string | undefined;\n  cy?: number | string | undefined;\n  d?: string | undefined;\n  decelerate?: number | string | undefined;\n  descent?: number | string | undefined;\n  diffuseConstant?: number | string | undefined;\n  direction?: number | string | undefined;\n  display?: number | string | undefined;\n  divisor?: number | string | undefined;\n  dur?: number | string | undefined;\n  dx?: number | string | undefined;\n  dy?: number | string | undefined;\n  elevation?: number | string | undefined;\n  end?: number | string | undefined;\n  exponent?: number | string | undefined;\n  externalResourcesRequired?: number | string | undefined;\n  fill?: string | undefined;\n  filter?: string | undefined;\n  filterRes?: number | string | undefined;\n  filterUnits?: number | string | undefined;\n  focusable?: number | string | undefined;\n  format?: number | string | undefined;\n  fr?: number | string | undefined;\n  from?: number | string | undefined;\n  fx?: number | string | undefined;\n  fy?: number | string | undefined;\n  g1?: number | string | undefined;\n  g2?: number | string | undefined;\n  glyphRef?: number | string | undefined;\n  gradientTransform?: string | undefined;\n  gradientUnits?: string | undefined;\n  hanging?: number | string | undefined;\n  height?: Size | undefined;\n  href?: string | undefined;\n  id?: string | undefined;\n  ideographic?: number | string | undefined;\n  in?: string | undefined;\n  in2?: number | string | undefined;\n  intercept?: number | string | undefined;\n  k?: number | string | undefined;\n  k1?: number | string | undefined;\n  k2?: number | string | undefined;\n  k3?: number | string | undefined;\n  k4?: number | string | undefined;\n  kernelMatrix?: number | string | undefined;\n  kernelUnitLength?: number | string | undefined;\n  kerning?: number | string | undefined;\n  keyPoints?: number | string | undefined;\n  keySplines?: number | string | undefined;\n  keyTimes?: number | string | undefined;\n  lang?: string | undefined;\n  lengthAdjust?: number | string | undefined;\n  limitingConeAngle?: number | string | undefined;\n  local?: number | string | undefined;\n  markerHeight?: number | string | undefined;\n  // ... more attributes would follow\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Head Metadata with useDocumentHead() in TypeScript\nDESCRIPTION: The useDocumentHead() function retrieves a readonly DocumentHead object containing metadata for the document head, including title, meta tags, links, styles, and frontmatter data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentHead {\n  readonly title?: string;\n  readonly meta?: readonly DocumentMeta[];\n  readonly links?: readonly DocumentLink[];\n  readonly styles?: readonly DocumentStyle[];\n  readonly frontmatter?: Readonly<Record<string, any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Development Server\nDESCRIPTION: Command to start the Vite development server with server-side rendering (SSR) enabled for development mode.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/base/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start # or `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font in CSS\nDESCRIPTION: This snippet demonstrates how to use a custom font defined with `@font-face` in a CSS rule. It sets the `font-family` property to the name defined in the `@font-face` rule, with a fallback to a generic sans-serif font.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/fonts/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n\"body {\\n  font-family: 'Peace Sans', sans-serif;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Deno Adapter for Qwik City - Shell\nDESCRIPTION: This snippet provides commands to install the Deno adapter for Qwik using different package managers. The commands facilitate the integration of Deno with Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/deno/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add deno\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add deno\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add deno\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add deno\n```\n\n----------------------------------------\n\nTITLE: Defining SourceLocation Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `SourceLocation` interface for Qwik. It represents the location of a piece of code in the source file, including properties like `endCol`, `endLine`, `hi`, `lo`, `startCol`, and `startLine`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface SourceLocation\n```\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML with QRL Attributes\nDESCRIPTION: Example of the HTML output after the Counter component is rendered, showing how QRLs are embedded in the DOM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qrl/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body q:base=\"/build/\">\n    <button q:obj=\"456, 123\" on:click=\"./chunk-c.js#Counter_onClick[0,1]\">0</button>\n    <script>\n      /*Qwikloader script*/\n    </script>\n    <script type=\"qwik/json\">\n      {...json...}\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Request URL with server$() in Qwik\nDESCRIPTION: Shows how to access the request URL using this.url within a server$() function in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const getRequestUrl = server$(\n  function () {\n    const requestUrl = this.url;\n    console.log('Request URL:', requestUrl);\n    return requestUrl;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Hooks and Utilities for Qwik City in TypeScript\nDESCRIPTION: Defines various hooks and utilities for use in Qwik City applications, including hooks for accessing content, document head, location, and navigation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useContent: () => ContentState;\n\nexport const useDocumentHead: <FrontMatter extends Record<string, unknown> = Record<string, any>>() => Required<ResolvedDocumentHead<FrontMatter>>;\n\nexport const useLocation: () => RouteLocation;\n\nexport const useNavigate: () => RouteNavigate;\n\nexport const usePreventNavigate$: (qrl: PreventNavigateCallback) => void;\n\nexport const usePreventNavigateQrl: (fn: QRL<PreventNavigateCallback>) => void;\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Integration using npm\nDESCRIPTION: This snippet demonstrates how to add the Qwik integration using npm. npm should be installed on the system and initialized in the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add\n```\n\n----------------------------------------\n\nTITLE: Exporting QwikVitePluginApi Interface in TypeScript\nDESCRIPTION: Defines an API interface for interacting with the Qwik Vite plugin. Provides various methods to retrieve build-related configurations and components, supporting dynamic plugin operation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikVitePluginApi\n```\n\n----------------------------------------\n\nTITLE: Defining FormProps Interface in TypeScript\nDESCRIPTION: Defines the FormProps interface that extends HTML form properties and adds custom properties for Qwik City forms.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormProps<O, I> extends Omit<QwikJSX.IntrinsicElements['form'], 'action' | 'method'>\n```\n\n----------------------------------------\n\nTITLE: Hydrating React Component on Hover in Qwik\nDESCRIPTION: Demonstrates the use of client:hover for lazy hydration of a React component when the mouse hovers over it. This is useful for low-priority UI elements, especially on desktop.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<MUISlider client:hover></MUISlider>\n```\n\n----------------------------------------\n\nTITLE: Creating New Callback with Prop Invocation\nDESCRIPTION: This example shows how to create a new callback for a button's onClick event that internally invokes a callback prop. It demonstrates the use of async/await for lazy-loaded QRLs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/props/closures/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n  onClick$={async () => {\n    await props.hello$?.invoke('World');\n  }}\n>\n  hello\n</button>\n```\n\n----------------------------------------\n\nTITLE: Azure SWA Adapter Options Interface\nDESCRIPTION: TypeScript interface definition for Azure Static Web Apps adapter options that extends the base ServerAdapterOptions interface.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-azure-swa/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AzureSwaAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Creating QRL References with $\nDESCRIPTION: Example showing how to create QRL (Qwik URL) references using the $ function for lazy-loaded code.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport function myFunction() {\\n  return 'Hello World';\\n}\\n\\n// Creating a QRL reference to the function\\nconst lazyFunction = $(() => myFunction());\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Configuration File\nDESCRIPTION: Default PostCSS configuration with Autoprefixer and PostCSS Preset Env plugins, enabling CSS nesting and browser compatibility\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/postcss/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n    \"postcss-preset-env\": {\n      stage: 3,\n      features: {\n        \"nesting-rules\": true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Qwik createComputed$ Function Definition\nDESCRIPTION: Type definition for the createComputed$ function in Qwik. This function creates a read-only signal that updates when dependencies change.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncreateComputed$: <T>(qrl: ComputedFn<T>) => Signal<Awaited<T>>;\n```\n\n----------------------------------------\n\nTITLE: Exporting QwikSymbol Interface in TypeScript\nDESCRIPTION: Represents a Qwik symbol, which includes properties like canonical filename, event handler type, and function hash. Used for managing entities within a Qwik project, it supports operations involving file locations and origin tracking.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikSymbol\n```\n\n----------------------------------------\n\nTITLE: Hydrating React Component with client:visible Directive in Qwik\nDESCRIPTION: This snippet shows how to use the client:visible directive to hydrate a React component within a Qwik application. This approach works but loads React, which may not be ideal for performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { MUIButton } from '~/integrations/react/mui';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  return (\n    <div>\n      <h2>Visibly hydrated React component</h2>\n      <MUIButton\n        client:visible\n        variant=\"contained\"\n        onClick$={() => {\n          count.value++;\n        }}\n      >\n        I'm a button from react\n      </MUIButton>\n      <p>current count is: {count.value}</p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring routeLoader$ constant in Qwik\nDESCRIPTION: This snippet declares a constant `routeLoader$` of type `LoaderConstructor`. This constant likely represents a function or class used to create route loaders within a Qwik City application, responsible for loading data associated with a route.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nrouteLoader$: LoaderConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining SelectHTMLAttributes Interface in TypeScript\nDESCRIPTION: Interface that extends HTML attributes specifically for select elements in Qwik's JSX implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SelectHTMLAttributes<T extends Element> extends Attrs<'select', T>\n```\n\n----------------------------------------\n\nTITLE: TransformOptions Interface Definition\nDESCRIPTION: Interface defining the configuration options for transforming Qwik modules, including entry strategy, minification settings, and source directory options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformOptions\n```\n\n----------------------------------------\n\nTITLE: Defining PathParams type in Qwik\nDESCRIPTION: This snippet declares a TypeScript type alias `PathParams` as a record of string keys and string values. This is typically used to represent URL parameters extracted from a route path within Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type PathParams = Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Render in TypeScript\nDESCRIPTION: Type definition for render functions. It's a union of RenderToString and RenderToStream types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Render = RenderToString | RenderToStream;\n```\n\n----------------------------------------\n\nTITLE: Listening to Document Events with useOnDocument\nDESCRIPTION: Example showing how to use useOnDocument$ to listen for events on the document object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const DocumentListener = component$(() => {\\n  const store = useStore({\\n    x: 0,\\n    y: 0,\\n  });\\n\\n  useOnDocument(\\n    'mousemove',\\n    $((event) => {\\n      const { clientX, clientY } = event as MouseEvent;\\n      store.x = clientX;\\n      store.y = clientY;\\n    })\\n  );\\n\\n  return (\\n    <div>\\n      Mouse position: {store.x} x {store.y}\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Form Fields with Field Component\nDESCRIPTION: This TSX code demonstrates how to add form fields using the `Field` component from `@modular-forms/qwik`.  The `Field` component takes a `name` prop to associate it with a specific field in the form data. It also uses a render prop to provide access to the field's state and props, allowing you to connect it to an input element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <Field name=\"email\">\n    {(field, props) => (\n      <input {...props} type=\"email\" value={field.value} />\n    )}\n  </Field>\n  <Field name=\"password\">\n    {(field, props) => (\n      <input {...props} type=\"password\" value={field.value} />\n    )}\n  </Field>\n  <button type=\"submit\">Login</button>\n</Form>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik City with Vercel Edge Middleware Entry\nDESCRIPTION: An example of setting up the entry point for a Qwik City application using the Vercel Edge middleware. This code imports necessary packages and exports the middleware configured with the render and qwikCityPlan.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/vercel-edge/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createQwikCity } from '@builder.io/qwik-city/middleware/vercel-edge';\nimport qwikCityPlan from '@qwik-city-plan';\nimport render from './entry.ssr';\n\nexport default createQwikCity({ render, qwikCityPlan });\n```\n\n----------------------------------------\n\nTITLE: Defining QuoteHTMLAttributes Interface in TypeScript\nDESCRIPTION: Interface extending Attrs for quote HTML elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QuoteHTMLAttributes<T extends Element> extends Attrs<'q', T>\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik integration to Astro with Bun\nDESCRIPTION: This command adds the `@qwikdev/astro` integration to an existing Astro project using Bun. It uses the Astro CLI tool `astro add` to simplify dependency management and integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"bunx astro add @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Builder.io API Key\nDESCRIPTION: Adding the Builder.io public API key to the project's environment configuration\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/builderio/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- BUILDER_PUBLIC_API_KEY=YOUR_API_KEY\n+ BUILDER_PUBLIC_API_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Authenticating the Google Cloud SDK\nDESCRIPTION: Describes the command required to authenticate the Google Cloud SDK to utilize Google Cloud services.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/gcp-cloud-run/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Defining Style HTML Attributes Interface in TypeScript\nDESCRIPTION: Interface extending generic Attrs type for style HTML attributes, providing type safety for style-specific HTML element properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StyleHTMLAttributes<T extends Element> extends Attrs<'style', T>\n```\n\n----------------------------------------\n\nTITLE: Defining useResourceQrl hook in TypeScript\nDESCRIPTION: Signature of the useResourceQrl hook, the QRL version of useResource$ that accepts a QRL instead of an inline function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nuseResourceQrl: <T>(qrl: QRL<ResourceFn<T>>, opts?: ResourceOptions) =>\n  ResourceReturn<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining IntrinsicElements Interface in TypeScript\nDESCRIPTION: The IntrinsicElements interface extends IntrinsicHTMLElements and IntrinsicSVGElements, establishing a structure for managing intrinsic elements in Qwik's JSX syntax.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IntrinsicElements extends IntrinsicHTMLElements, IntrinsicSVGElements\n```\n\n----------------------------------------\n\nTITLE: PlatformAwsLambda interface definition\nDESCRIPTION: Interface that extends Object for AWS Lambda platform integration in Qwik City. Provides type definitions for the platform-specific implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-aws-lambda/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformAwsLambda extends Object\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Qwik Project Structure\nDESCRIPTION: This snippet shows the updated file and directory structure of a Qwik project after adding new components and routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nqwik-app-demo\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ public\n‚îÇ   ‚îî‚îÄ‚îÄ favicon.svg\n‚îú‚îÄ‚îÄ src\n‚îÇ   ‚îú‚îÄ‚îÄ components\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ router-head\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ router-head.tsx\n‚îÇ   ‚îÇ       Button\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ button.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ entry.ssr.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ global.css\n‚îÇ   ‚îú‚îÄ‚îÄ root.tsx\n‚îÇ   ‚îî‚îÄ‚îÄ routes\n‚îÇ       ‚îú‚îÄ‚îÄ flower\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ flower.css\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx\n‚îÇ       ‚îú‚îÄ‚îÄ contact\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx\n‚îÇ       ‚îú‚îÄ‚îÄ index.tsx\n‚îÇ       ‚îú‚îÄ‚îÄ layout.tsx\n‚îÇ       ‚îî‚îÄ‚îÄ service-worker.ts\n‚îú‚îÄ‚îÄ tsconfig.json\n‚îî‚îÄ‚îÄ vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Building Application for Production - Shell\nDESCRIPTION: This snippet provides commands to build the Qwik application for production. The `build` command runs both `build.server` and `build.client` tasks to prepare the application for deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/deno/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Exporting ResolvedManifest Interface in TypeScript\nDESCRIPTION: Defines a structure for a manifest containing global injections, a Qwik manifest, and a symbol mapper, providing essential configuration for project builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResolvedManifest\n```\n\n----------------------------------------\n\nTITLE: Defining ActionReturn Type in Qwik City\nDESCRIPTION: Type definition for ActionReturn which represents the structure of a response returned by an action. It includes an optional status code and a value with the generic type RETURN.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionReturn<RETURN> = {\n  readonly status?: number;\n  readonly value: RETURN;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Declarations for delayQrl and delay$\nDESCRIPTION: Type declarations showing the difference between delayQrl which expects a QRL parameter and delay$ which accepts a regular function that gets converted to a QRL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/composing/dollar/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare function delayQrl<T>(fn: QRL<() => T>, delayInMs: number): Promise<T>;\ndeclare function delay$<T>(fn: () => T, delayInMs: number): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Complex Component Correct Split - Chunk B\nDESCRIPTION: Final chunk with proper lexical scope restoration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter_onRender = () => {\n  const [salutation, props] = useLexicalScope();\n\n  return (\n    <div>\n      {salutation} {props.name}!\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining JSXNode Interface in TypeScript\nDESCRIPTION: Defines the core JSXNode interface which serves as an internal structure for JSX elements in Qwik. This interface includes properties for type, props, children, key, and optional development metadata.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JSXNode<T extends string | FunctionComponent | unknown = unknown>\n```\n\n----------------------------------------\n\nTITLE: Resolving QRL References to Values\nDESCRIPTION: Example showing how to resolve QRL references to their actual values using the QRL.resolve() method.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// Getting the actual function from a QRL\\nconst element = document.getElementById('my-element');\\nconst qrlReference: QRL<() => string> = qrl('./chunk-abc.js', 'myFunction_0');\\nconst myFunction: () => string = await qrlReference.resolve(element);\\n\\n// Now we can execute the function\\nconst result = myFunction();\\n\\n// After resolution we can also use\\nconst sameFunction = qrlReference.resolved;\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind with pnpm in Shell\nDESCRIPTION: The shell command to integrate Tailwind CSS into a Qwik project using the pnpm package manager. It installs the necessary dependencies for Tailwind CSS v3. Required dependency: pnpm package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind-v3/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add tailwind-v3\n```\n\n----------------------------------------\n\nTITLE: Pure Function vs Closure in TypeScript\nDESCRIPTION: Illustrates the difference between a pure function and a closure in TypeScript. The example defines a pure function that takes inputs as arguments, then demonstrates a closure that captures variables from its outer scope.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a pure function: takes inputs as arguments and returns an output.\nfunction thisIsAFunction(a, b) {\n  return a + b;\n}\n\nfunction main() {\n  const captured = 10;\n  // This is a closure: in addition, the function captures the variable \"captured\".\n  function thisIsAClosure(a, b) {\n    return (a + b) * captured;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Plugin for Serverfull Architecture\nDESCRIPTION: Example of a plugin that initializes a database connection using environment variables in a serverfull architecture. This code demonstrates how to access private environment variables in a Qwik City request handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const onRequest: RequestHandler = async ({ env }) => {\n  const url = env.get('PRIVATE_LIBSQL_DB_URL')!;\n  const authToken = env.get('PRIVATE_LIBSQL_DB_API_TOKEN')!;\n  await initializeDbIfNeeded(initLibSql(url, authToken));\n};\n```\n\n----------------------------------------\n\nTITLE: Basic MDX Component Example\nDESCRIPTION: Simple MDX file with frontmatter and content\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello World Title\n---\n\nThis is a simple hello world component.\n\n```\n\n----------------------------------------\n\nTITLE: Defining SmartEntryStrategy Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `SmartEntryStrategy` interface for Qwik. It details the strategy for smart code entries, including properties like `manual` (optional record of strings) and `type` (set to 'smart').\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface SmartEntryStrategy\n```\n```\n\n----------------------------------------\n\nTITLE: Using Client Directives with Qwikified React Components\nDESCRIPTION: Example of using client directives to specify when React components should be hydrated in a Qwik application. Shows the four basic hydration strategies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  return (\n    <>\n      <MUISlider client:load></MUISlider>\n      <MUISlider client:visible></MUISlider>\n      <MUISlider client:idle></MUISlider>\n      <MUISlider client:hover></MUISlider>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring globalActionQrl in TypeScript\nDESCRIPTION: Declares globalActionQrl as an ActionConstructorQRL type, used for creating global action QRLs in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nglobalActionQrl: ActionConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Integration using pnpm\nDESCRIPTION: This snippet demonstrates how to add the Qwik integration using pnpm. It is assumed that pnpm is already installed and initialized in the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add\n```\n\n----------------------------------------\n\nTITLE: Type Definition - QwikUIEvent\nDESCRIPTION: Type definition for UI events in Qwik. This API is marked as obsolete and developers should use UIEvent instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikUIEvent<T = Element> = NativeUIEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentEntryStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for the component entry strategy, specifying the type and optional manual record of component entries.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComponentEntryStrategy\n```\n\n----------------------------------------\n\nTITLE: Creating Size Type for Element Dimensions\nDESCRIPTION: Type definition allowing both numeric and string values for size specifications in Qwik's JSX implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Size = number | string;\n```\n\n----------------------------------------\n\nTITLE: Deploying with Static Web Apps CLI\nDESCRIPTION: Instructions to deploy the Qwik application using the Azure Static Web Apps CLI from the local environment, using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/azure-swa/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx swa deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx swa deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx swa deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nbunx swa deploy\n```\n\n----------------------------------------\n\nTITLE: Demonstrating implicit$FirstArg Usage in TypeScript\nDESCRIPTION: Shows how the implicit$FirstArg function works by automatically applying $ to the first argument of functions ending with $.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ncomponent$(() => { ... });\n// is the same as\ncomponent($(() => { ... }));\n```\n\n----------------------------------------\n\nTITLE: Adding PostCSS to Qwik Project via Package Managers\nDESCRIPTION: Command-line instructions for installing PostCSS using various package managers (pnpm, npm, yarn, bun)\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/postcss/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add postcss\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add postcss\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add postcss\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add postcss\n```\n\n----------------------------------------\n\nTITLE: Extracting Translations from Code\nDESCRIPTION: This set of commands allows developers to extract translations from their code into the `package.json` file. It is essential for maintaining updates to translation strings.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/i18n/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm run i18n-extract\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpm run i18n-extract\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn run i18n-extract\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun run i18n-extract\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Native Platform Projects\nDESCRIPTION: Commands to create the native project files for iOS and Android. This generates the necessary platform-specific code that wraps your Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap add ios\nnpx cap add android\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentEntryStrategy Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `SegmentEntryStrategy` interface for Qwik. It specifies the strategy for code segment entries, including properties like `manual` (optional record of strings) and `type` (set to 'segment').\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface SegmentEntryStrategy\n```\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output in Qwik\nDESCRIPTION: Shows the minimal HTML output that Qwik delivers to the browser for a component with useVisibleTask$. The on:qvisible attribute indicates where the visibility-based code execution will be triggered.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-tasks/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <div\n    on:qvisible=\"app_component_usevisibletask_wbbu0yp42vw.js\"\n  >\n    <!-- Animated stuff! -->\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Checking Header Sent Status in Qwik City\nDESCRIPTION: This middleware checks if the response headers have already been sent. If not, it responds with a default message as a JSON response.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ headersSent, json }) => {\n  if (!headersSent) {\n    json(200, { response: 'default response' });\n  }\n};\n\nexport const onRequest: RequestHandler = async ({ status }) => {\n  status(200);\n};\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with useNavigate() in Qwik\nDESCRIPTION: The useNavigate() hook returns a function for programmatic navigation without page reloads. It can be used to navigate to a new path or refresh the current page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/api/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useNavigate } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const nav = useNavigate();\n\n  return (\n    <>\n      <button\n        onClick$={async () => {\n          // SPA navigate to /dashboard\n          await nav('/dashboard');\n        }}\n      >\n        Go to dashboard\n      </button>\n\n      <button\n        onClick$={async() => {\n          // refresh page: call without arguments\n          await nav();\n        }}\n      >\n        Refresh page\n      </button>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentStyle Interface in TypeScript\nDESCRIPTION: Defines the DocumentStyle interface with properties for style elements, including the style content and optional key and props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentStyle\n```\n\n----------------------------------------\n\nTITLE: Complex Component with Lexical Scope\nDESCRIPTION: Example of a component that captures variables in its lexical scope.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Greeter = component$((props: { name: string }) => {\n  const salutation = 'Hello';\n\n  return (\n    <div>\n      {salutation} {props.name}!\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Type Definition - QwikVisibleEvent\nDESCRIPTION: Type definition for visibility events emitted by qwik-loader when an element becomes visible. Used by useVisibleTask$.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikVisibleEvent = CustomEvent<IntersectionObserverEntry>;\n```\n\n----------------------------------------\n\nTITLE: Context Implementation\nDESCRIPTION: Shows how to create and consume context in both frameworks. Qwik uses createContextId and useContextProvider instead of React's Context.Provider.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyContext = createContext({ message: 'some example value' });\n\nexport default function Parent() {\n  return (\n    <MyContext.Provider value={{ message: 'updated example value' }}>\n      <Child />\n    </MyContext.Provider>\n  );\n}\n\nexport const Child = () => {\n  const value = useContext(MyContext);\n  return <p>{value.message}</p>;\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyContext = createContextId('my-context');\n\nexport const Parent = component$(() => {\n  const message = useSignal('some example value');\n  useContextProvider(MyContext, message);\n  return (\n    <>\n      <Child />\n    </>\n  );\n});\n\nexport const Child = component$(() => {\n  const message = useContext(MyContext);\n  return <p>{message.value}</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Component Function Type Definition\nDESCRIPTION: Type definition for the Qwik component$ function, showing its parameter and return types. This is used internally by Qwik for type checking and intellisense.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncomponentQrl: <PROPS extends Record<any, any>>(\n  componentQrl: QRL<OnRenderFn<PROPS>>,\n) => Component<PROPS>;\n```\n\n----------------------------------------\n\nTITLE: Defining useOnWindow hook in TypeScript\nDESCRIPTION: Signature of the useOnWindow hook which registers event listeners on the window object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nuseOnWindow: <T extends KnownEventNames>(event: T | T[], eventQrl: EventQRL<T>) => void\n```\n\n----------------------------------------\n\nTITLE: Adding Static Site Adapter Using NPM\nDESCRIPTION: This shell command integrates the static site adapter into a Qwik project using NPM. The command facilitates setting up the static site generation environment by modifying the project configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/static/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add static\n```\n\n----------------------------------------\n\nTITLE: Optimized QRL Usage Example in TypeScript\nDESCRIPTION: Demonstrates how the Qwik Optimizer transforms the $ usage into a QRL reference.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst onClick = qrl('./chunk-abc.js', 'onClick');\nreturn <button onClick$={onClick}>\n```\n\n----------------------------------------\n\nTITLE: RenderToStream Type Definition - TypeScript\nDESCRIPTION: Declares RenderToStream as a type that represents a function taking RenderToStreamOptions and returning a Promise of RenderToStreamResult. It is vital for rendering operations that output streamed content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RenderToStream = (\n  opts: RenderToStreamOptions,\n) => Promise<RenderToStreamResult>;\n```\n\n----------------------------------------\n\nTITLE: Production Build Command for AWS Lambda\nDESCRIPTION: Command-line instructions for building the Qwik application for production deployment across different package managers. Automatically runs client and server builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/aws-lambda/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Defining useContext hook in TypeScript\nDESCRIPTION: Signature of the useContext hook used to retrieve context values in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nuseContext: UseContext;\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js in Qwik using Shell Commands\nDESCRIPTION: These shell commands are used to install the Auth.js library in a Qwik application with various package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add auth\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add auth\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add auth\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add auth\n```\n\n----------------------------------------\n\nTITLE: Defining HTMLAttributes Interface in TypeScript\nDESCRIPTION: The HTMLAttributes interface extends HTMLElementAttrs and DOMAttributes, providing a structure for defining HTML attributes in Qwik components. This interface is essential for ensuring type safety when working with HTML attributes in JSX.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HTMLAttributes<E extends Element> extends HTMLElementAttrs, DOMAttributes<E>\n```\n\n----------------------------------------\n\nTITLE: Declaring OptionHTMLAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for HTML attributes specific to the 'option' element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OptionHTMLAttributes<T extends Element> extends Attrs<'option', T>\n```\n\n----------------------------------------\n\nTITLE: Defining useConstant hook in TypeScript\nDESCRIPTION: Defines the useConstant hook which stores a value for the lifetime of a component. This API is marked as obsolete and is a technology preview.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nuseConstant: <T>(value: (() => T) | T) => T;\n```\n\n----------------------------------------\n\nTITLE: Secondary Module in Import Waterfall\nDESCRIPTION: This code represents the second module in the import waterfall example, showing how Module B imports Module C, continuing the chain of sequential dependencies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/speculative-module-fetching/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport './c.js';\nconsole.log('Module B');\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Project Structure Configuration\nDESCRIPTION: Demonstrates the project directory structure after adding the AWS Lambda adapter. Highlights the creation of adapters and entry point files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/aws-lambda/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n‚îî‚îÄ‚îÄ adapters/\n    ‚îî‚îÄ‚îÄ aws-lambda\n        ‚îî‚îÄ‚îÄ vite.config.ts\n‚îî‚îÄ‚îÄ src/\n    ‚îî‚îÄ‚îÄ entry_aws-lambda.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Qwik's Responsive Images API | Qwik | TypeScript\nDESCRIPTION: This snippet demonstrates how to import an image with responsive settings using a JSX query parameter. The 'Image' component optimizes and serves images appropriately based on the device's resolution and screen size.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Image from '[IMAGE_PATH]?w=24&h=24&jsx';\n```\n\n----------------------------------------\n\nTITLE: Installing Orama via npm\nDESCRIPTION: This snippet illustrates the command for installing Orama with npm. It sets up the necessary environment for Orama integration in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/orama/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add orama\n```\n\n----------------------------------------\n\nTITLE: Declaring RouterOutlet Component in Qwik\nDESCRIPTION: This snippet declares a `RouterOutlet` component type in Qwik, importing it from the `@builder.io/qwik` library. The component accepts unknown properties. This component likely acts as a placeholder for rendering the current route's content within a Qwik City application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nRouterOutlet: import(\"@builder.io/qwik\").Component<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Adding $localize Package to Qwik\nDESCRIPTION: The following commands illustrate how to add the $localize translation system to a Qwik project using various package managers. This dependency allows for compile-time translations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/i18n/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm run qwik add localize\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpm run qwik add localize\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn run qwik add localize\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun run qwik add localize\n```\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Lambda Support to Qwik Project\nDESCRIPTION: Command to add AWS Lambda support to a Qwik project, enabling deployment to AWS Lambda environments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm qwik add aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceResolved Interface in TypeScript\nDESCRIPTION: Interface representing a successfully resolved resource state in Qwik, containing a loading status and the promise value.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ResourceResolved<T>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Nesting Rules in Qwik with PostCSS\nDESCRIPTION: Example of CSS nesting rules enabled by PostCSS configuration in Qwik projects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  & .box {\n    background: red;\n\n    &:hover {\n      background: yellow;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Application for Development\nDESCRIPTION: This snippet describes how to serve the application for development using the 'serve' command, which is critical for local testing and development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/node/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm run serve\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpm run serve\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn run serve\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun run serve\n```\n```\n\n----------------------------------------\n\nTITLE: Optimized Counter Mount Function\nDESCRIPTION: The component's mount function extracted into a separate chunk, containing the main component logic and reference to the click handler.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/optimizer/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter_onMount = () => {\n  const count = useSignal(0);\n  return <button onClick$={qrl('./chunk-b.js', 'Counter_onClick', [count])}>{count.value}</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Qwik Blog Post Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Qwik v1.0 announcement blog post, defining metadata like title, author, tags, date, and canonical URL\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-v1/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Qwik Reaches v1.0'\nauthorName: 'The Qwik Team'\ntags: ['Qwik']\ndate: 'May 1, 2023'\ncanonical: 'https://www.builder.io/blog/qwik-v1'\n---\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentScript Interface in TypeScript\nDESCRIPTION: Defines the DocumentScript interface with optional readonly properties for script elements. This is marked as an alpha preview API.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentScript\n```\n\n----------------------------------------\n\nTITLE: Complex Component Naive Split - Main File\nDESCRIPTION: Initial naive approach to splitting the complex component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter = component(qrl('./chunk-a.js', 'Greeter_onMount'));\n```\n\n----------------------------------------\n\nTITLE: QRL Type Definition\nDESCRIPTION: Core type definition for Qwik Resource Loader (QRL) with serialization and resolution capabilities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QRL<TYPE = unknown> = {\n    __qwik_serializable__?: any;\n    __brand__QRL__: TYPE;\n    resolve(): Promise<TYPE>;\n    resolved: undefined | TYPE;\n    getCaptured(): unknown[] | null;\n    getSymbol(): string;\n    getHash(): string;\n    dev: QRLDev | null;\n} & BivariantQrlFn<QrlArgs<TYPE>, QrlReturn<TYPE>>;\n```\n\n----------------------------------------\n\nTITLE: Content Projection in Qwik Components\nDESCRIPTION: Demonstrates how to use content projection in Qwik components using the Slot component and q:slot attribute.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// File: src/components/Button/Button.tsx\nimport { component$, Slot } from '@builder.io/qwik';\nimport styles from './Button.module.css';\n\nexport const Button = component$(() => {\n  return (\n    <button class={styles.button}>\n      <div class={styles.start}>\n        <Slot name=\"start\" />\n      </div>\n      <Slot />\n      <div class={styles.end}>\n        <Slot name=\"end\" />\n      </div>\n    </button>\n  );\n});\n\nexport default component$(() => {\n  return (\n    <Button>\n      <span q:slot=\"start\">üì©</span>\n      Hello world\n      <span q:slot=\"end\">üü©</span>\n    </Button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App in Interactive Mode (Bash)\nDESCRIPTION: This command initiates the interactive mode for creating a Qwik application using npm. It prompts the user for input to customize the project setup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/create-qwik/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Types for Qwik City in TypeScript\nDESCRIPTION: Defines types for JSON objects and values, which are commonly used in data exchange between client and server in Qwik City applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type JSONObject = {\n    [x: string]: JSONValue;\n};\n\nexport type JSONValue = string | number | boolean | {\n    [x: string]: JSONValue;\n} | Array<JSONValue>;\n```\n\n----------------------------------------\n\nTITLE: Declaring ErrorBoundary Component in TypeScript\nDESCRIPTION: Declares the ErrorBoundary component type, which is a Qwik component that takes ErrorBoundaryProps as its properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nErrorBoundary: import(\"@builder.io/qwik\").Component<ErrorBoundaryProps>;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook dashboard with Bun\nDESCRIPTION: This command starts the Storybook development server using Bun, which allows visualizing and interacting with UI components in isolation. It utilizes the `storybook` script within the `package.json`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbun run storybook\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles with useStyles\nDESCRIPTION: Example showing how to use the useStyles$ hook to load and apply component-specific CSS styles.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const StyledComponent = component$(() => {\\n  useStyles$(\\`\\n    .component {\\n      color: red;\\n    }\\n  \\`);\\n\\n  return <div class=\\\"component\\\">Hello, styled world!</div>;\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Public Environment Variables in .env.local\nDESCRIPTION: Example showing how to define a public API URL as a build-time variable. Variables prefixed with PUBLIC_ are accessible in both browser and server-side code.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/env-variables/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nPUBLIC_API_URL=https://api.example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik-React Integration\nDESCRIPTION: Command to add the qwik-react integration to a Qwik project, which enables wrapping React components with the qwikify$() method.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run qwik add react\n```\n\n----------------------------------------\n\nTITLE: StreamingOptions Interface Definition - TypeScript\nDESCRIPTION: Defines StreamingOptions interface used to manage streaming configurations. Features an optional inOrder property for in-order streaming configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StreamingOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ScriptHTMLAttributes Interface in TypeScript\nDESCRIPTION: Interface that extends HTML attributes specifically for script elements in Qwik's JSX implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScriptHTMLAttributes<T extends Element> extends Attrs<'script', T>\n```\n\n----------------------------------------\n\nTITLE: Adding Integrations with npm\nDESCRIPTION: Initiate the addition of integrations to a Qwik City application using npm. Ensure npm is installed and configured as a prerequisite. The command prompts the user to choose an integration, which is then configured within the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add\n```\n\n----------------------------------------\n\nTITLE: Optimal implementation using useComputed$ in Qwik\nDESCRIPTION: This snippet demonstrates the optimal way to recompute a value in Qwik using the useComputed$ hook to avoid unnecessary re-renders of the entire component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const count = useSignal(1);\n  const dobuleCount = useComputed$(() => count.value*2);\n  return (\n    <div>{doubleCount.value}</div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining staticAdapter Function and StaticGenerateAdapterOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the staticAdapter function and StaticGenerateAdapterOptions interface for the @builder.io/qwik-city package. The staticAdapter function takes options of type StaticGenerateAdapterOptions and returns any. The StaticGenerateAdapterOptions interface extends StaticGenerateRenderOptions, omitting the 'outDir' property.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/static/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StaticGenerateRenderOptions } from '../../../static';\n\n// @public (undocumented)\nexport function staticAdapter(opts: StaticGenerateAdapterOptions): any;\n\n// @public (undocumented)\nexport interface StaticGenerateAdapterOptions extends Omit<StaticGenerateRenderOptions, 'outDir'> {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining dirname Function in TypeScript\nDESCRIPTION: Function signature for the dirname utility, which extracts the directory name from a file path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndirname(path: string): string;\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind with npm in Shell\nDESCRIPTION: The shell command to integrate Tailwind CSS into a Qwik project using the npm package manager. It installs necessary dependencies for Tailwind CSS v3. Required dependency: npm package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind-v3/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add tailwind-v3\n```\n\n----------------------------------------\n\nTITLE: Defining QwikCity Plugin Types and Functions\nDESCRIPTION: TypeScript type definitions and function declarations for the QwikCity Vite plugin. Includes interfaces for plugin configuration, MDX options, and helper functions for extending Vite configs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/buildtime/vite/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BuiltinsWithOptionalParams } from 'svgo/plugins/plugins-types';\nimport type { CompileOptions } from '@mdx-js/mdx';\nimport type { Config } from 'svgo';\nimport { ConfigEnv } from 'vite';\nimport type { Plugin as Plugin_2 } from 'vite';\nimport type { PluginOption } from 'vite';\nimport { UserConfigExport } from 'vite';\n\n// @public (undocumented)\nexport function extendConfig(baseConfigExport: UserConfigExport, serverConfigExport: UserConfigExport): (env: ConfigEnv) => Promise<Record<string, any>>;\n\n// @public (undocumented)\nexport type MdxOptions = CompileOptions;\n\n// @public (undocumented)\nexport function qwikCity(userOpts?: QwikCityVitePluginOptions): PluginOption[];\n\n// Warning: (ae-forgotten-export) The symbol \"P\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"QwikCityPluginApi\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface QwikCityPlugin extends P<QwikCityPluginApi> {\n    // (undocumented)\n    name: 'vite-plugin-qwik-city';\n}\n\n// Warning: (ae-forgotten-export) The symbol \"PluginOptions\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface QwikCityVitePluginOptions extends Omit<PluginOptions, 'basePathname'> {\n    // Warning: (ae-forgotten-export) The symbol \"ImageOptimizationOptions\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    imageOptimization?: ImageOptimizationOptions;\n    // (undocumented)\n    mdx?: MdxOptions;\n    // Warning: (ae-forgotten-export) The symbol \"MdxPlugins\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    mdxPlugins?: MdxPlugins;\n    // (undocumented)\n    platform?: Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResolvedDocumentHead type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `ResolvedDocumentHead` representing the resolved document head metadata. It's a required version of `DocumentHeadValue`, potentially including frontmatter data, used within the Qwik City application to manage document head content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResolvedDocumentHead<\n  FrontMatter extends Record<string, any> = Record<string, unknown>,\n> = Required<DocumentHeadValue<FrontMatter>>;\n```\n\n----------------------------------------\n\nTITLE: Package Manager Installation Commands for Builder.io\nDESCRIPTION: Command-line instructions for adding Builder.io to a Qwik project using different package managers\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/builderio/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add builder.io\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add builder.io\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add builder.io\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add builder.io\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure for Vercel Edge Adaptation in Qwik\nDESCRIPTION: Shows the new file structure created after adapting the Qwik project for Vercel Edge deployment. It includes a new vite.config.ts file in the adapters directory and a new entry file for Vercel Edge.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/vercel-edge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n‚îî‚îÄ‚îÄ adapters/\n    ‚îî‚îÄ‚îÄ vercel-edge/\n        ‚îî‚îÄ‚îÄ vite.config.ts\n‚îî‚îÄ‚îÄ src/\n    ‚îî‚îÄ‚îÄ entry.vercel-edge.tsx\n```\n\n----------------------------------------\n\nTITLE: RenderToStringResult Interface Definition - TypeScript\nDESCRIPTION: An interface extending RenderResult, RenderToStringResult includes an html property for the rendered HTML string and timing details for render and snapshot processes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderToStringResult extends RenderResult\n```\n\n----------------------------------------\n\nTITLE: Maintaining Previous Form State in Qwik\nDESCRIPTION: This snippet shows how to use action.formData to retain the state of a user-filled form, ensuring a seamless user experience even during page refreshes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$, Form, zod$, z } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(async (user) => {\n  // handle action...\n});\n\nexport default component$(() => {\n  const action = useAddUser();\n  return (\n    <Form action={action}>\n      <input name=\"name\" value={action.formData?.get('name')} />\n      <button type=\"submit\">Add user</button>\n    </Form>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Project - Shell Commands\nDESCRIPTION: The shell commands provided here initialize a new Tauri project by scaffolding a minimal Rust setup that is pre-configured for Tauri. Each command varies according to the package manager in use: pnpm, npm, yarn, or bun. Ensure the package manager and its CLI are set up in your development environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tauri/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run tauri init\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run tauri init\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run tauri init\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run tauri init\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with component$\nDESCRIPTION: Example showing how to create a basic counter component using the component$ API with props interface and internal state management.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$<CounterProps>((props) => {\\n  const { value = 0, step = 1 } = props;\\n  const state = useStore({ count: value });\\n\\n  return (\\n    <div>\\n      <span>{state.count}</span>\\n      <button onClick$={() => (state.count += step)}>+</button>\\n    </div>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Utility Types and Functions in Qwik\nDESCRIPTION: Defines utility types like ValueOrPromise and internal verification functions for serialization in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type ValueOrPromise<T> = T | Promise<T>;\n\n// @internal (undocumented)\nexport const _verifySerializable: <T>(value: T, preMessage?: string) => T;\n\n// @public\nexport const version: string;\n```\n\n----------------------------------------\n\nTITLE: Defining JSX Node Interface in TypeScript\nDESCRIPTION: Specifies the structure of JSX nodes in Qwik, including properties for type, props, children, and development information.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface JSXNode<T extends string | FunctionComponent | unknown = unknown> {\n    type: T;\n    props: T extends FunctionComponent<infer P> ? P : Record<any, unknown>;\n    children: JSXChildren | null;\n    key: string | null;\n    dev?: DevJSX;\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Event Handlers in Qwik\nDESCRIPTION: Shows how to create reusable event handlers in Qwik using the $(...) syntax for lazy loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { $, component$, useSignal } from '@builder.io/qwik';\n\ninterface MyComponentProps {\n  step: number;\n}\n\n// Components are always declared with the `component$` function.\nexport const MyComponent = component$(() => {\n  const count = useSignal(0);\n\n  // Notice the `$(...)` around the event handler function.\n  const inputHandler = $((event, elem) => {\n    console.log(event.type, elem.value);\n  });\n\n  return (\n    <>\n      <input name=\"name\" onInput$={inputHandler} />\n      <input\n        name=\"password\"\n        onInput$={inputHandler}\n      />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining qwikVite Function in TypeScript\nDESCRIPTION: Declares a function that returns a tuple of Qwik and Vite plugins, constructed with optional configuration parameters. This function bridges Qwik functionalities within the Vite ecosystem, enabling plugin-based enhancements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function qwikVite(qwikViteOpts?: QwikVitePluginOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Declaring Link Component in Qwik\nDESCRIPTION: This snippet declares a `Link` component type in Qwik, importing it from the `@builder.io/qwik` library. The component accepts `LinkProps` as its properties. This component is likely used for creating links within a Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nLink: import(\"@builder.io/qwik\").Component<LinkProps>;\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Component using NPM\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the Qwik utility command with NPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik new Button\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Component using PNPM\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the Qwik utility command with PNPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik new Button\n```\n\n----------------------------------------\n\nTITLE: QwikCityNodeRequestOptions Configuration Interface\nDESCRIPTION: Defines the configuration options for Qwik City in a Node.js environment. Extends ServerRenderOptions and provides additional options for resolving client connections, determining server origin, and configuring static file serving.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-node/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityNodeRequestOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Auth.js Credentials Authentication\nDESCRIPTION: Sample environment variable configuration for credentials-based authentication in a .env.local file, only requiring AUTH_SECRET for session encryption.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Declaring OptgroupHTMLAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for HTML attributes specific to the 'optgroup' element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OptgroupHTMLAttributes<T extends Element> extends Attrs<'optgroup', T>\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Command to Add Cypress - Shell\nDESCRIPTION: This snippet shows how to add Cypress and cypress-ct-qwik to your Qwik application using various package managers. You can run this command in your terminal to set up the necessary testing tools for your application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/cypress/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add cypress\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add cypress\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add cypress\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add cypress\n```\n\n----------------------------------------\n\nTITLE: Suboptimal implementation accessing window.location directly\nDESCRIPTION: This snippet highlights the wrong approach of directly accessing window.location in a Qwik component, which can lead to increased JavaScript overhead and eager loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Don't do this!\nuseVisibleTask$(()=> {\n    if (window.location.href).includes('foo') {\n        //... do the thing\n    }\n})\n// or\nuseTask$(() => {\n  if (isBrowser) {\n        if (window.location.href).includes('foo') {\n        //... do the thing\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Express Server for Qwik Build Preview\nDESCRIPTION: Command to start the Express server for previewing the built Qwik application. The server will run on port 8080 and can be accessed through localhost.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/express/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Astro project with NPM\nDESCRIPTION: This command initializes a new Qwik project within an Astro environment using NPM. This provides a streamlined setup process leveraging the `@qwikdev/astro` package to quickly integrate the frameworks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"npm create @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Defining OnRenderFn Type in TypeScript\nDESCRIPTION: Defines a type for a render function that takes props and returns a JSXOutput.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OnRenderFn<PROPS> = (props: PROPS) => JSXOutput;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Qwik (Incorrect Approach)\nDESCRIPTION: This snippet shows the incorrect way of trying to change the build output directory in a Qwik project using Vite configuration. The 'outDir' setting in the 'build' object will be overridden by qwikVite(), making this approach ineffective.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/custom-build-dir/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { qwikVite } from '@builder.io/qwik/optimizer';\nimport { qwikCity } from '@builder.io/qwik-city/vite';\nimport { resolve } from 'node:path';\n/* VITE_IMPORTS */\n\nexport default defineConfig(() => {\n  const pagesDir = resolve('pages');\n\n  return {\n    /* VITE_CONFIG */\n    build: {\n      outDir: '../resources/', // This will be overrided to `dist` by qwikVite() setting\n    },\n    plugins: [\n      qwikCity({\n        pagesDir,\n        layouts: {\n          default: resolve('src', 'layouts', 'default', 'default.tsx'),\n        },\n      }),\n      qwikVite(/* VITE_QWIK */),\n      /* VITE_PLUGINS */\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Running tests with cargo\nDESCRIPTION: Alternative command to run the qwik-core test suite directly using cargo's test runner.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/core/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Application for Production using pnpm\nDESCRIPTION: This snippet can be used to build a Qwik application for production using pnpm. It is assumed that pnpm is configured correctly with required scripts in place in the package.json file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Page's environment variables in onRequest function\nDESCRIPTION: This TypeScript snippet demonstrates accessing Cloudflare Pages' environment variables within a request handler, providing seamless integration with the environment context.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nexport const onRequest = async ({ platform }) => {\n  const secret = platform.env['SUPER_SECRET_TOKEN'];\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright via pnpm\nDESCRIPTION: This command installs Playwright as a dependency in your Qwik project when using the pnpm package manager. It will also configure your project with the necessary test scripts and configuration files for end-to-end testing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/playwright/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add playwright\n```\n\n----------------------------------------\n\nTITLE: Defining _qrlSync Function in TypeScript\nDESCRIPTION: _qrlSync is a function that extracts another function into a synchronously loadable QRL. It takes a function and an optional serialized function string as parameters, and returns a SyncQRL of the same type as the input function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n_qrlSync: <TYPE extends Function>(fn: TYPE, serializedFn?: string) =>\n  SyncQRL<TYPE>;\n```\n\n----------------------------------------\n\nTITLE: Building Qwik App for Production with bun\nDESCRIPTION: Runs the build command using bun, which compiles the application for production by executing server and client build scripts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Definition of PrefetchResource Interface in TypeScript\nDESCRIPTION: Interface for representing a resource to be prefetched. Contains url property and an array of nested imports.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PrefetchResource\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentLink Interface in TypeScript\nDESCRIPTION: Defines the DocumentLink interface with optional properties for HTML link attributes like href, rel, and crossorigin.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DocumentLink\n```\n\n----------------------------------------\n\nTITLE: Using Signal-Based Hydration for React Components in Qwik\nDESCRIPTION: Example of using client:signal directive for conditional hydration of React components based on Qwik's reactive signals.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n  const shouldHydrate = useSignal(false);\n  return (\n    <>\n      <button onClick$={() => (shouldHydrate.value = true)}>Hydrate Slider when click</button>\n\n      <MUISlider client:signal={shouldHydrate}></MUISlider>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: CorePlatform Interface Properties and Methods\nDESCRIPTION: Core interface defining platform abstraction capabilities including server detection, symbol import, animation frame handling, and chunk resolution for the Qwik framework.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/platform/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CorePlatform {\n  isServer: boolean;\n  importSymbol(element: Element, url: string, symbol: string): Promise<any>;\n  raf(fn: () => void): void;\n  nextTick(fn: () => void): void;\n  chunkForSymbol(symbolName: string): string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Qwik Lazy-Loaded onClick Event Handler in JavaScript\nDESCRIPTION: This snippet shows the contents of a lazy-loaded JavaScript file that handles the onClick event for the counter increment. It demonstrates how Qwik breaks down functionality into separate files for on-demand loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/the-qase-for-qwik-love-at-first-tti/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onClick_gurwhjlhap8 = () => {\n  const [count] = useLexicalScope();\n  return count.value++;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Path Resolve Function in TypeScript\nDESCRIPTION: Offers a function to resolve a sequence of paths or path segments into an absolute path, crucial for handling file paths in a Qwik environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nresolve(...paths: string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Building for Production | Shell\nDESCRIPTION: This snippet provides the commands to build the Qwik application for production. The commands ensure both server and client builds are executed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Props Interface in TypeScript\nDESCRIPTION: Defines an interface for SVG props that extends SVGAttributes and QwikAttributes. This provides type definitions for SVG element properties in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SVGProps<T extends Element> extends SVGAttributes, QwikAttributes<T>\n```\n\n----------------------------------------\n\nTITLE: Building a Framer Motion Image Gallery in Qwik\nDESCRIPTION: A complex example of creating an interactive image gallery with swipe functionality using Framer Motion and integrating it with Qwik. The component includes animations for image transitions and touch gestures.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\n\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { wrap } from 'popmotion';\nimport { qwikify$ } from '@builder.io/qwik-react';\n\nconst images = [\n  'https://d33wubrfki0l68.cloudfront.net/dd23708ebc4053551bb33e18b7174e73b6e1710b/dea24/static/images/wallpapers/shared-colors@2x.png',\n  'https://d33wubrfki0l68.cloudfront.net/49de349d12db851952c5556f3c637ca772745316/cfc56/static/images/wallpapers/bridge-02@2x.png',\n  'https://d33wubrfki0l68.cloudfront.net/594de66469079c21fc54c14db0591305a1198dd6/3f4b1/static/images/wallpapers/bridge-01@2x.png',\n];\n\nconst variants = {\n  enter: (direction: number) => {\n    return {\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0,\n    };\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n    opacity: 1,\n  },\n  exit: (direction: number) => {\n    return {\n      zIndex: 0,\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0,\n    };\n  },\n};\n\nconst swipeConfidenceThreshold = 10000;\nconst swipePower = (offset: number, velocity: number) => {\n  return Math.abs(offset) * velocity;\n};\n\nexport const Example = () => {\n  const [[page, direction], setPage] = useState([0, 0]);\n\n  const imageIndex = wrap(0, images.length, page);\n\n  const paginate = (newDirection: number) => {\n    setPage([page + newDirection, newDirection]);\n  };\n\n  return (\n    <div className='framer-gallery'>\n      <AnimatePresence initial={false} custom={direction}>\n        <motion.img\n          key={page}\n          src={images[imageIndex]}\n          custom={direction}\n          variants={variants}\n          initial=\"enter\"\n          animate=\"center\"\n          exit=\"exit\"\n          transition={{\n            x: { type: 'spring', stiffness: 300, damping: 30 },\n            opacity: { duration: 0.2 },\n          }}\n          drag=\"x\"\n          dragConstraints={{ left: 0, right: 0 }}\n          dragElastic={1}\n          onDragEnd={(e, { offset, velocity }) => {\n            const swipe = swipePower(offset.x, velocity.x);\n\n            if (swipe < -swipeConfidenceThreshold) {\n              paginate(1);\n            } else if (swipe > swipeConfidenceThreshold) {\n              paginate(-1);\n            }\n          }}\n        />\n      </AnimatePresence>\n      <div className=\"next\" onClick={() => paginate(1)}>\n        {'‚Ä£'}\n      </div>\n      <div className=\"prev\" onClick={() => paginate(-1)}>\n        {'‚Ä£'}\n      </div>\n    </div>\n  );\n};\n\nexport const ImageGallery = qwikify$(Example);\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Adapter to Qwik City (bun)\nDESCRIPTION: This command adds the Firebase adapter to your Qwik City project using bun. It installs the necessary dependencies and sets up the required configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"bun run qwik add firebase\"\n```\n\n----------------------------------------\n\nTITLE: Running Fastify Server for Qwik Project\nDESCRIPTION: Command to start the Fastify server after building the Qwik project. This allows previewing the build on localhost:3000.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/fastify/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Importing External CSS File for Scoped Styles in Qwik\nDESCRIPTION: Shows how to import an external CSS file and use it with the useStylesScoped$ hook in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  background-color: red;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useStylesScoped$ } from '@builder.io/qwik';\n\nimport styles from './MyComponent.css?inline';\n\nexport default component$(() => {\n  useStylesScoped$(styles);\n  return <div class=\"container\">Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Allowing safe URLs in Qwik onClick$ handler\nDESCRIPTION: This snippet demonstrates the `jsx-no-script-url` ESLint rule, which allows the use of safe URLs in `onClick$` handlers in Qwik components. The correct example shows how the rule permits calls to javascript functions defined inline.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n<button onClick$={() => alert('open the door please')>ring</button>\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-nx Plugin (Bun)\nDESCRIPTION: This command uses Bun to install the 'qwik-nx' plugin as a dependency within an existing Nx workspace. This plugin enables Qwik-specific functionalities within the Nx environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbun install qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Framer Motion Component\nDESCRIPTION: A simple React component using Framer Motion to create an animated div with scale, rotation, border radius, and background color transformations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { motion } from \"framer-motion\";\n\nconst MyComponent = () => {\n  return (\n    <motion.div\n      animate={{\n      scale: [1, 2, 2, 1, 1],\n      rotate: [0, 0, 270, 270, 0],\n      borderRadius: ['20%', '20%', '50%', '50%', '20%'],\n      backgroundColor: ['#ff008c', '#d309e1', '#9c1aff', '#7700ff', '#ff008c'],\n      transition: { duration: 2 },\n    }}\n      className=\"h-52 w-52 rounded-sm bg-green-500\"\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind in Qwik with Package Managers\nDESCRIPTION: Commands for adding Tailwind to a Qwik project using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add tailwind\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add tailwind\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add tailwind\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City Netlify Integration Types and Functions\nDESCRIPTION: Defines the core types and functions for integrating Qwik City with Netlify edge functions. Includes PlatformNetlify interface extending Netlify Context, QwikCityNetlifyOptions interface extending ServerRenderOptions, and createQwikCity factory function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/netlify-edge/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from '@netlify/edge-functions';\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityNetlifyOptions): (request: Request, context: Context) => Promise<Response>;\n\n// @public (undocumented)\nexport interface PlatformNetlify extends Partial<Omit<Context, 'next' | 'cookies'>> {\n}\n\n// @public (undocumented)\nexport interface QwikCityNetlifyOptions extends ServerRenderOptions {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Pages Adapter with npm\nDESCRIPTION: This shell command installs the Cloudflare Pages adapter for Qwik City using npm. It updates the build scripts in package.json and creates necessary adapter configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add cloudflare-pages\n```\n\n----------------------------------------\n\nTITLE: VideoHTMLAttributes Interface Definition\nDESCRIPTION: TypeScript interface for HTML attributes specific to video elements. It extends the base attributes interface for the 'video' tag type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VideoHTMLAttributes<T extends Element> extends Attrs<'video', T>\n```\n\n----------------------------------------\n\nTITLE: Adding Static Site Adapter Using PNPM\nDESCRIPTION: This shell command integrates the static site adapter into a Qwik project using PNPM. The command is executed to install necessary dependencies and set up the configuration required for generating static HTML files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/static/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add static\n```\n\n----------------------------------------\n\nTITLE: Defining basename Function in TypeScript\nDESCRIPTION: Function signature for the basename utility, which extracts the base name of a file path, optionally removing a specified extension.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbasename(path: string, ext?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Development Server\nDESCRIPTION: Command to start the Vite development server for Qwik, which includes server-side rendering (SSR) during development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/library/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Panda CSS to Qwik with Yarn\nDESCRIPTION: This shell command utilizes Yarn to execute the Qwik CLI and add Panda CSS as a dependency to the Qwik project. It automates the installation process and configures the project for Panda CSS usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/panda-css/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Implicit $ First Argument in Qwik\nDESCRIPTION: Example of using implicit$FirstArg to simplify the syntax for lazy-loaded functions in Qwik. This demonstrates a more convenient way to express lazy-loaded functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst onScroll$ = implicit$FirstArg(onScrollQrl);\n\nonScroll$(() => alert('scroll'));\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Element Attribute Interfaces\nDESCRIPTION: A series of interfaces for HTML element attributes including LabelHTMLAttributes, LiHTMLAttributes, LinkHTMLAttributes, MapHTMLAttributes extending the base Attrs type with element-specific properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LabelHTMLAttributes<T extends Element> extends Attrs<'label', T>\nexport interface LiHTMLAttributes<T extends Element> extends Attrs<'li', T>\nexport interface LinkHTMLAttributes<T extends Element> extends Attrs<'link', T>\nexport interface MapHTMLAttributes<T extends Element> extends Attrs<'map', T>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Components in MDX Content\nDESCRIPTION: Example showing how to add custom components to MDX content by passing a components prop to Content component in a Qwik route file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/example/index.tsx\nimport Content from './markdown.mdx';\nimport MyComponent from '../../components/my-component/my-component';\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => <Content components={{ MyComponent }} />);\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Pages Adapter with yarn\nDESCRIPTION: This shell command installs the Cloudflare Pages adapter for Qwik City using yarn. It updates the build scripts in package.json and creates necessary adapter configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add cloudflare-pages\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using rustup\nDESCRIPTION: Command to download and run the rustup installer which installs the Rust programming language. This is a prerequisite for building the qwik-core library.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Creating setPlatform Function for Platform Configuration\nDESCRIPTION: Function that sets the CorePlatform implementation, useful for overriding platform behavior in tests such as requestAnimationFrame and import resolution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nsetPlatform: (plt: CorePlatform) => CorePlatform;\n```\n\n----------------------------------------\n\nTITLE: PlatformNetlify Interface Definition in TypeScript\nDESCRIPTION: The PlatformNetlify interface extends the Netlify Context object with customizations for Qwik City integration. It omits the 'next' and 'cookies' properties from the standard Netlify Context.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-netlify-edge/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformNetlify extends Partial<Omit<Context, 'next' | 'cookies'>>\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Qwik Node.js Application\nDESCRIPTION: This shell command builds a Docker image for the Qwik Node.js application using the Dockerfile in the current directory. The image is tagged as 'your-image'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/node-docker-deploy/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t your-image .\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App using JavaScript API\nDESCRIPTION: This JavaScript code demonstrates how to use the createApp function from the 'create-qwik' package to programmatically create a Qwik application. It specifies options such as project name, starter ID, and output directory.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/create-qwik/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createApp } = require('create-qwik');\n\nconst opts = {\n  projectName: 'my-project',\n  starterId: 'todo',\n  outDir: '/path/to/output/dir',\n};\n\nconst result = await createApp(opts);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Defining QwikBundle Interface in TypeScript\nDESCRIPTION: Declares the QwikBundle interface with properties describing a bundle's content, including imports, size, and symbols.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikBundle\n```\n\n----------------------------------------\n\nTITLE: Building Qwik for Production\nDESCRIPTION: Command to generate production-ready client and server modules with TypeScript type checking.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/base/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build # or `yarn build`\n```\n\n----------------------------------------\n\nTITLE: Defining SlotHTMLAttributes Interface in TypeScript\nDESCRIPTION: Interface that extends HTML attributes specifically for slot elements in Qwik's JSX implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SlotHTMLAttributes<T extends Element> extends Attrs<'slot', T>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Auth.js GitHub Authentication\nDESCRIPTION: Sample environment variables configuration for GitHub OAuth authentication in a .env.local file, including GitHub client ID, secret, and AUTH_SECRET for session encryption.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/authjs/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_GITHUB_ID=\nAUTH_GITHUB_SECRET=\nAUTH_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Building the Application with Different Package Managers - Shell Commands\nDESCRIPTION: These shell commands are used to build the application using different package managers: pnpm, npm, yarn, and bun. Each command invokes the build script defined in the package configuration. Ensure to have the respective package manager installed before running the commands.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tauri/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Using :global() Selector in Scoped CSS for Qwik\nDESCRIPTION: Demonstrates how to use the :global() selector in scoped CSS to style child components rendered through a Slot in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStylesScoped$, component$ } from '@builder.io/qwik';\n\nexport const List = component$(() => {\n  useStylesScoped$(`\n    .list {\n      display: flex;\n\n      > :global(*nth-child(3)) {\n        width: 100%\n      }\n    }\n  `);\n\n  return (\n    <div class=\"list\">\n      <Slot />\n    </div>;\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signal Type in TypeScript\nDESCRIPTION: Defines a type for function signals in Qwik, which wraps a function and its arguments into a derived signal.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const _fnSignal: <T extends (...args: any) => any>(fn: T, args: Parameters<T>, fnStr?: string) => SignalDerived<ReturnType<T>, Parameters<T>>;\n```\n\n----------------------------------------\n\nTITLE: Building Static Site in Qwik\nDESCRIPTION: Commands to build a static site using different package managers in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/static-site-generation/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build.server\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build.server\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build.server\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build.server\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik City AWS Lambda middleware instance\nDESCRIPTION: Function that creates a Qwik City middleware instance for AWS Lambda. Returns an object with utilities for path fixing, routing, static file handling, 404 handling, and request handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-aws-lambda/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(opts: AwsOpt): {\n  fixPath: (pathT: string) => string;\n  router: (\n    req: import(\"http\").IncomingMessage | import(\"http2\").Http2ServerRequest,\n    res: import(\"http\").ServerResponse<import(\"http\").IncomingMessage>,\n    next: import(\"@builder.io/qwik-city/middleware/node\").NodeRequestNextFunction,\n  ) => Promise<void>;\n  staticFile: (\n    req: import(\"http\").IncomingMessage | import(\"http2\").Http2ServerRequest,\n    res: import(\"http\").ServerResponse<import(\"http\").IncomingMessage>,\n    next: (e?: any) => void,\n  ) => Promise<void>;\n  notFound: (\n    req: import(\"http\").IncomingMessage | import(\"http2\").Http2ServerRequest,\n    res: import(\"http\").ServerResponse<import(\"http\").IncomingMessage>,\n    next: (e: any) => void,\n  ) => Promise<void>;\n  handle: (req: any, res: any) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest to Qwik project using PNPM\nDESCRIPTION: This command utilizes the Qwik CLI to add Vitest to an existing Qwik project using PNPM. It simplifies the installation and configuration process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/vitest/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add vitest\n```\n\n----------------------------------------\n\nTITLE: Internal Utility Functions for Qwik\nDESCRIPTION: Defines internal utility functions for Qwik framework, including locale handling, prop wrapping, and serialization utilities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// @internal (undocumented)\nexport const _waitUntilRendered: (elm: Element) => Promise<void>;\n\n// @internal (undocumented)\nexport const _weakSerialize: <T extends object>(input: T) => Partial<T>;\n\n// Warning: (ae-internal-missing-underscore) The name \"withLocale\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport function withLocale<T>(locale: string, fn: () => T): T;\n\n// @internal (undocumented)\nexport const _wrapProp: <T extends Record<any, any>, P extends keyof T>(obj: T, prop: P) => any;\n\n// @internal (undocumented)\nexport const _wrapSignal: <T extends Record<any, any>, P extends keyof T>(obj: T, prop: P) => any;\n```\n\n----------------------------------------\n\nTITLE: Building and Running Qwik App with Capacitor\nDESCRIPTION: Commands for creating a production build of a Qwik app, syncing web assets to native platforms, and running the app in iOS simulator or Android emulator.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap sync\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap run ios     # Runs the app in an iOS simulator\nnpx cap run android # Runs the app in an Android emulator\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cap open ios     # Opens Xcode\nnpx cap open android # Opens Android Studio\n```\n\n----------------------------------------\n\nTITLE: Deploying to Firebase (npm)\nDESCRIPTION: These commands configure and deploy your Qwik City application to Firebase using npm. It involves logging in to Firebase, selecting a project, and then deploying the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"firebase login\\nfirebase use --add\\nnpm run deploy\"\n```\n\n----------------------------------------\n\nTITLE: Defining GlobalInjections Interface in TypeScript\nDESCRIPTION: Interface definition for global injections, specifying the tag, location, and optional attributes for injected content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GlobalInjections\n```\n\n----------------------------------------\n\nTITLE: Adding LeafletJS Map Dependency with Yarn\nDESCRIPTION: This command adds the LeafletJS map as a dependency to your Qwik project using Yarn. It executes a Qwik add script to install the necessary packages and set up the required files for map integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/leaflet-map/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn run qwik add leaflet-map\"\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Property Types in TypeScript\nDESCRIPTION: This code defines TypeScript interface properties for SVG elements. Each property is marked as undocumented and specifies its type (number, string, or specific string literals) with optional undefined to make them optional properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// (undocumented)\n'fill-opacity'?: number | string | undefined;\n// (undocumented)\n'fill-rule'?: 'nonzero' | 'evenodd' | 'inherit' | undefined;\n// (undocumented)\n'flood-color'?: number | string | undefined;\n// (undocumented)\n'flood-opacity'?: number | string | undefined;\n// (undocumented)\n'font-family'?: string | undefined;\n// (undocumented)\n'font-size'?: number | string | undefined;\n// (undocumented)\n'font-size-adjust'?: number | string | undefined;\n// (undocumented)\n'font-stretch'?: number | string | undefined;\n// (undocumented)\n'font-style'?: number | string | undefined;\n// (undocumented)\n'font-variant'?: number | string | undefined;\n// (undocumented)\n'font-weight'?: number | string | undefined;\n// (undocumented)\n'glyph-name'?: number | string | undefined;\n// (undocumented)\n'glyph-orientation-horizontal'?: number | string | undefined;\n// (undocumented)\n'glyph-orientation-vertical'?: number | string | undefined;\n// (undocumented)\n'horiz-adv-x'?: number | string | undefined;\n// (undocumented)\n'horiz-origin-x'?: number | string | undefined;\n// (undocumented)\n'image-rendering'?: number | string | undefined;\n// (undocumented)\n'letter-spacing'?: number | string | undefined;\n// (undocumented)\n'lighting-color'?: number | string | undefined;\n// (undocumented)\n'marker-end'?: string | undefined;\n// (undocumented)\n'marker-mid'?: string | undefined;\n// (undocumented)\n'marker-start'?: string | undefined;\n// (undocumented)\n'overline-position'?: number | string | undefined;\n// (undocumented)\n'overline-thickness'?: number | string | undefined;\n// (undocumented)\n'paint-order'?: number | string | undefined;\n// (undocumented)\n'pointer-events'?: number | string | undefined;\n// (undocumented)\n'rendering-intent'?: number | string | undefined;\n// (undocumented)\n'shape-rendering'?: number | string | undefined;\n// (undocumented)\n'stop-color'?: string | undefined;\n// (undocumented)\n'stop-opacity'?: number | string | undefined;\n// (undocumented)\n'strikethrough-position'?: number | string | undefined;\n// (undocumented)\n'strikethrough-thickness'?: number | string | undefined;\n// (undocumented)\n'stroke-dasharray'?: string | number | undefined;\n// (undocumented)\n'stroke-dashoffset'?: string | number | undefined;\n// (undocumented)\n'stroke-linecap'?: 'butt' | 'round' | 'square' | 'inherit' | undefined;\n// (undocumented)\n'stroke-linejoin'?: 'miter' | 'round' | 'bevel' | 'inherit' | undefined;\n// (undocumented)\n'stroke-miterlimit'?: string | undefined;\n// (undocumented)\n'stroke-opacity'?: number | string | undefined;\n// (undocumented)\n'stroke-width'?: number | string | undefined;\n// (undocumented)\n'text-anchor'?: string | undefined;\n// (undocumented)\n'text-decoration'?: number | string | undefined;\n// (undocumented)\n'text-rendering'?: number | string | undefined;\n// (undocumented)\n'underline-position'?: number | string | undefined;\n// (undocumented)\n'underline-thickness'?: number | string | undefined;\n// (undocumented)\n'unicode-bidi'?: number | string | undefined;\n// (undocumented)\n'unicode-range'?: number | string | undefined;\n// (undocumented)\n'units-per-em'?: number | string | undefined;\n// (undocumented)\n'v-alphabetic'?: number | string | undefined;\n// (undocumented)\n'v-hanging'?: number | string | undefined;\n// (undocumented)\n'v-ideographic'?: number | string | undefined;\n// (undocumented)\n'v-mathematical'?: number | string | undefined;\n// (undocumented)\n'vector-effect'?: number | string | undefined;\n// (undocumented)\n'vert-adv-y'?: number | string | undefined;\n// (undocumented)\n'vert-origin-x'?: number | string | undefined;\n// (undocumented)\n'vert-origin-y'?: number | string | undefined;\n// (undocumented)\n'word-spacing'?: number | string | undefined;\n// (undocumented)\n'writing-mode'?: number | string | undefined;\n// (undocumented)\n'x-channel-selector'?: string | undefined;\n// (undocumented)\n'x-height'?: number | string | undefined;\n// (undocumented)\n'xlink:actuate'?: string | undefined;\n// (undocumented)\n'xlink:arcrole'?: string | undefined;\n// (undocumented)\n'xlink:href'?: string | undefined;\n// (undocumented)\n'xlink:role'?: string | undefined;\n// (undocumented)\n'xlink:show'?: string | undefined;\n// (undocumented)\n'xlink:title'?: string | undefined;\n// (undocumented)\n'xlink:type'?: string | undefined;\n// (undocumented)\n'xml:base'?: string | undefined;\n// (undocumented)\n'xml:lang'?: string | undefined;\n// (undocumented)\n'xml:space'?: string | undefined;\n// (undocumented)\n'xmlns:xlink'?: string | undefined;\n// (undocumented)\naccumulate?: 'none' | 'sum' | undefined;\n// (undocumented)\nadditive?: 'replace' | 'sum' | undefined;\n// (undocumented)\nallowReorder?: 'no' | 'yes' | undefined;\n// (undocumented)\nalphabetic?: number | string | undefined;\n// (undocumented)\namplitude?: number | string | undefined;\n// (undocumented)\nascent?: number | string | undefined;\n// (undocumented)\nattributeName?: string | undefined;\n// (undocumented)\nattributeType?: string | undefined;\n// (undocumented)\nautoReverse?: Booleanish | undefined;\n// (undocumented)\nazimuth?: number | string | undefined;\n// (undocumented)\nbaseFrequency?: number | string | undefined;\n// (undocumented)\nbaseProfile?: number | string | undefined;\n// (undocumented)\nbbbox?: number | string | undefined;\n// (undocumented)\nbegin?: number | string | undefined;\n// (undocumented)\nbias?: number | string | undefined;\n// (undocumented)\nby?: number | string | undefined;\n// (undocumented)\ncalcMode?: number | string | undefined;\n// (undocumented)\nclip?: number | string | undefined;\n// (undocumented)\nclipPathUnits?: number | string | undefined;\n// (undocumented)\ncolor?: string | undefined;\n// (undocumented)\ncontentScriptType?: number | string | undefined;\n// (undocumented)\ncontentStyleType?: number | string | undefined;\n// (undocumented)\ncrossOrigin?: HTMLCrossOriginAttribute;\n// (undocumented)\ncursor?: number | string;\n// (undocumented)\ncx?: number | string | undefined;\n// (undocumented)\ncy?: number | string | undefined;\n// (undocumented)\nd?: string | undefined;\n// (undocumented)\ndecelerate?: number | string | undefined;\n// (undocumented)\ndescent?: number | string | undefined;\n// (undocumented)\ndiffuseConstant?: number | string | undefined;\n// (undocumented)\ndirection?: number | string | undefined;\n// (undocumented)\ndisplay?: number | string | undefined;\n// (undocumented)\ndivisor?: number | string | undefined;\n// (undocumented)\ndur?: number | string | undefined;\n// (undocumented)\ndx?: number | string | undefined;\n// (undocumented)\ndy?: number | string | undefined;\n// (undocumented)\nelevation?: number | string | undefined;\n// (undocumented)\nend?: number | string | undefined;\n// (undocumented)\nexponent?: number | string | undefined;\n// (undocumented)\nexternalResourcesRequired?: number | string | undefined;\n// (undocumented)\nfill?: string | undefined;\n// (undocumented)\nfilter?: string | undefined;\n// (undocumented)\nfilterRes?: number | string | undefined;\n// (undocumented)\nfilterUnits?: number | string | undefined;\n// (undocumented)\nfocusable?: number | string | undefined;\n// (undocumented)\nformat?: number | string | undefined;\n// (undocumented)\nfr?: number | string | undefined;\n// (undocumented)\nfrom?: number | string | undefined;\n// (undocumented)\nfx?: number | string | undefined;\n// (undocumented)\nfy?: number | string | undefined;\n// (undocumented)\ng1?: number | string | undefined;\n// (undocumented)\ng2?: number | string | undefined;\n// (undocumented)\nglyphRef?: number | string | undefined;\n// (undocumented)\ngradientTransform?: string | undefined;\n// (undocumented)\ngradientUnits?: string | undefined;\n// (undocumented)\nhanging?: number | string | undefined;\n// (undocumented)\nheight?: Size | undefined;\n// (undocumented)\nhref?: string | undefined;\n// (undocumented)\nid?: string | undefined;\n// (undocumented)\nideographic?: number | string | undefined;\n// (undocumented)\nin?: string | undefined;\n// (undocumented)\nin2?: number | string | undefined;\n// (undocumented)\nintercept?: number | string | undefined;\n// (undocumented)\nk?: number | string | undefined;\n// (undocumented)\nk1?: number | string | undefined;\n// (undocumented)\nk2?: number | string | undefined;\n// (undocumented)\nk3?: number | string | undefined;\n// (undocumented)\nk4?: number | string | undefined;\n// (undocumented)\nkernelMatrix?: number | string | undefined;\n// (undocumented)\nkernelUnitLength?: number | string | undefined;\n// (undocumented)\nkerning?: number | string | undefined;\n// (undocumented)\nkeyPoints?: number | string | undefined;\n// (undocumented)\nkeySplines?: number | string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Adding Integrations with yarn\nDESCRIPTION: Facilitate the addition of integrations to a Qwik City project using yarn. This requires yarn to be installed. Upon execution, the user is prompted to select desired integrations to be included in the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add\n```\n\n----------------------------------------\n\nTITLE: Defining IntrinsicAttributes Interface in TypeScript\nDESCRIPTION: The IntrinsicAttributes interface extends QwikIntrinsicAttributes to manage intrinsic attributes used throughout Qwik JSX components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IntrinsicAttributes extends QwikIntrinsicAttributes\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to Qwik project using Yarn\nDESCRIPTION: This command uses yarn to execute the qwik add tailwind script, which automates the process of installing Tailwind CSS and configuring the necessary files in a Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variables in Qwik City\nDESCRIPTION: This middleware retrieves environmental properties in a platform-independent manner, allowing access to environment variables such as USER and PATH.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ env, json }) => {\n  json(200, {\n    USER: env.get('USER'),\n    MODE_ENV: env.get('MODE_ENV'),\n    PATH: env.get('PATH'),\n    SHELL: env.get('SHELL'),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Platform-Specific Capacitor Dependencies\nDESCRIPTION: Command to install iOS and Android platform dependencies for Capacitor. These are required to build your app for specific mobile platforms.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @capacitor/ios @capacitor/android\n```\n\n----------------------------------------\n\nTITLE: Terminal Module in Import Waterfall\nDESCRIPTION: This code shows the final module in the import chain, Module C, which has no further dependencies but still must wait for the previous modules to load before it can be executed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/speculative-module-fetching/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Module C');\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify Edge Adapter | Shell\nDESCRIPTION: This snippet shows the various commands to install the Netlify Edge adapter using different package managers. The commands install necessary dependencies automatically, including the Netlify CLI.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/netlify-edge/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add netlify-edge\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add netlify-edge\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add netlify-edge\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add netlify-edge\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Initial Build for Qwik\nDESCRIPTION: This command installs project dependencies using pnpm and performs an initial build of Qwik for local development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install && pnpm build.local\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationType type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `NavigationType` as a union of string literals, representing different types of navigation events. These navigation types include 'initial', 'form', 'link', and 'popstate', likely used to categorize and handle navigation events within the Qwik City application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NavigationType = \"initial\" | \"form\" | \"link\" | \"popstate\";\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Attribute Types in TypeScript\nDESCRIPTION: This code snippet defines TypeScript types for various SVG attributes. Each attribute is defined as an optional property with a type of number | string | undefined, or in some cases, more specific types like CSSProperties or Size.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_104\n\nLANGUAGE: TypeScript\nCODE:\n```\nmarkerUnits?: number | string | undefined;\nmarkerWidth?: number | string | undefined;\nmask?: string | undefined;\nmaskContentUnits?: number | string | undefined;\nmaskUnits?: number | string | undefined;\nmathematical?: number | string | undefined;\nmax?: number | string | undefined;\nmedia?: string | undefined;\nmethod?: string | undefined;\nmin?: number | string | undefined;\nmode?: number | string | undefined;\nname?: string | undefined;\nnumOctaves?: number | string | undefined;\noffset?: number | string | undefined;\nopacity?: number | string | undefined;\noperator?: number | string | undefined;\norder?: number | string | undefined;\norient?: number | string | undefined;\norientation?: number | string | undefined;\norigin?: number | string | undefined;\noverflow?: number | string | undefined;\npanose1?: number | string | undefined;\npath?: string | undefined;\npathLength?: number | string | undefined;\npatternContentUnits?: string | undefined;\npatternTransform?: number | string | undefined;\npatternUnits?: string | undefined;\npoints?: string | undefined;\npointsAtX?: number | string | undefined;\npointsAtY?: number | string | undefined;\npointsAtZ?: number | string | undefined;\npreserveAlpha?: number | string | undefined;\npreserveAspectRatio?: string | undefined;\nprimitiveUnits?: number | string | undefined;\nr?: number | string | undefined;\nradius?: number | string | undefined;\nrefX?: number | string | undefined;\nrefY?: number | string | undefined;\nrepeatCount?: number | string | undefined;\nrepeatDur?: number | string | undefined;\nrequiredextensions?: number | string | undefined;\nrequiredFeatures?: number | string | undefined;\nrestart?: number | string | undefined;\nresult?: string | undefined;\nrole?: string | undefined;\nrotate?: number | string | undefined;\nrx?: number | string | undefined;\nry?: number | string | undefined;\nscale?: number | string | undefined;\nseed?: number | string | undefined;\nslope?: number | string | undefined;\nspacing?: number | string | undefined;\nspecularConstant?: number | string | undefined;\nspecularExponent?: number | string | undefined;\nspeed?: number | string | undefined;\nspreadMethod?: string | undefined;\nstartOffset?: number | string | undefined;\nstdDeviation?: number | string | undefined;\nstemh?: number | string | undefined;\nstemv?: number | string | undefined;\nstitchTiles?: number | string | undefined;\nstring?: number | string | undefined;\nstroke?: string | undefined;\nstyle?: CSSProperties | string | undefined;\nsurfaceScale?: number | string | undefined;\nsystemLanguage?: number | string | undefined;\ntabindex?: number | undefined;\ntableValues?: number | string | undefined;\ntarget?: string | undefined;\ntargetX?: number | string | undefined;\ntargetY?: number | string | undefined;\ntextLength?: number | string | undefined;\nto?: number | string | undefined;\ntransform?: string | undefined;\ntype?: string | undefined;\nu1?: number | string | undefined;\nu2?: number | string | undefined;\nunicode?: number | string | undefined;\nvalues?: string | undefined;\nversion?: string | undefined;\nviewBox?: string | undefined;\nviewTarget?: number | string | undefined;\nvisibility?: number | string | undefined;\nwidth?: Size | undefined;\nwidths?: number | string | undefined;\nx?: number | string | undefined;\nx1?: number | string | undefined;\nx2?: number | string | undefined;\n```\n\n----------------------------------------\n\nTITLE: AWS Deployment Command using Serverless Framework\nDESCRIPTION: Command to deploy the Qwik application to AWS Lambda using the Serverless framework after setting up AWS credentials.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/aws-lambda/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App with bun\nDESCRIPTION: This shell command uses bun to create a new Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbun create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Creating isSignal Utility in TypeScript\nDESCRIPTION: The isSignal function checks if a given object is a Signal type. This utility is essential for managing state in Qwik applications where signal-based reactive programming is employed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nisSignal: <T = unknown>(obj: any) => obj is Signal<T>\n```\n\n----------------------------------------\n\nTITLE: Defining SymbolMapperFn Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `SymbolMapperFn` type alias for a function used in Qwik. The function takes a symbol name, a `SymbolMapper`, and an optional parent string, and returns a readonly tuple containing the symbol and chunk, or `undefined` if no mapping is found.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport type SymbolMapperFn = (\n  symbolName: string,\n  mapper: SymbolMapper | undefined,\n  parent?: string,\n) => readonly [symbol: string, chunk: string] | undefined;\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Labs with pnpm\nDESCRIPTION: Installs the Qwik Labs package directly from the GitHub repository using pnpm. This command fetches the latest build from the `main` branch of the `QwikDev/qwik-labs-build` repository.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install github:QwikDev/qwik-labs-build#main\n```\n\n----------------------------------------\n\nTITLE: Defining PropFunction Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for PropFunction as QRL<T>, noting its historical relevance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PropFunction<T> = QRL<T>;\n```\n\n----------------------------------------\n\nTITLE: Creating implicit$FirstArg Utility in TypeScript\nDESCRIPTION: The implicit$FirstArg utility function automatically extracts the first argument from functions ending with '$', making it easier to handle lazy-loadable resources in Qwik. This supports a shorthand for common patterns in Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport function myApi(callback: QRL<() => void>): void {\n  // ...\n}\n\nexport const myApi$ = implicit$FirstArg(myApi);\n// type of myApi$: (callback: () => void): void\n\n// can be used as:\nmyApi$(() => console.log(\"callback\"));\n\n// will be transpiled to:\n// FILE: <current file>\nmyApi(qrl(\"./chunk-abc.js\", \"callback\"));\n\n// FILE: chunk-abc.js\nexport const callback = () => console.log(\"callback\");\n\n\nimplicit$FirstArg: <FIRST, REST extends any[], RET>(\n    fn: (qrl: QRL<FIRST>, ...rest: REST) => RET,\n  ) =>\n  (qrl: FIRST, ...rest: REST) =>\n    RET;\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase dependencies using yarn\nDESCRIPTION: This command installs the necessary Supabase JS library and Qwik authentication helpers using yarn. These packages are essential for interacting with Supabase from a Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/supabase/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @supabase/supabase-js supabase-auth-helpers-qwik\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Interfaces for Specific Elements\nDESCRIPTION: Generic type interfaces for HTML element attributes, supporting various HTML elements like data, del, details, dialog, etc.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DataHTMLAttributes<T extends Element> extends Attrs<'data', T>\n```\n\n----------------------------------------\n\nTITLE: Installing CSS Preprocessors in Qwik Project\nDESCRIPTION: Provides commands to install CSS preprocessors like Sass, Less, and Stylus in a Qwik project using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# .scss and .sass\npnpm add -D sass\n\n# .less\npnpm add -D less\n\n# .styl and .stylus\npnpm add -D stylus\n```\n\nLANGUAGE: shell\nCODE:\n```\n# .scss and .sass\nnpm add -D sass\n\n# .less\nnpm add -D less\n\n# .styl and .stylus\nnpm add -D stylus\n```\n\nLANGUAGE: shell\nCODE:\n```\n# .scss and .sass\nyarn add -D sass\n\n# .less\nyarn add -D less\n\n# .styl and .stylus\nyarn add -D stylus\n```\n\nLANGUAGE: shell\nCODE:\n```\n# .scss and .sass\nbun add -D sass\n\n# .less\nbun add -D less\n\n# .styl and .stylus\nbun add -D stylus\n```\n\n----------------------------------------\n\nTITLE: Setting Container Attributes in Qwik with renderToStream\nDESCRIPTION: Demonstrates how to set custom HTML attributes on the container element using the containerAttributes option in the renderToStream function, which is useful for adding non-reactive attributes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/containers/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nrenderToStream(<Root />, {\n  containerAttributes: {\n    lang: 'en',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MDX with Tags Component\nDESCRIPTION: Example of accessing frontmatter data in MDX file\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello World Title\ntags:\n  - super\n  - exiting\n  - docs\n---\nimport { Tags } from \"../../../components/tags/tags\";\n\nThis is a simple hello world component.\n\n<Tags />\n```\n\n----------------------------------------\n\nTITLE: Implementing PandaCSS Styling in Qwik Component\nDESCRIPTION: Example of using PandaCSS to style a Qwik component with inline CSS-in-JS syntax that gets compiled to zero-runtime CSS at build time.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\nimport { css } from \"~/styled-system/css\";\n\nexport default component$(() => {\n  return (\n    <div\n      class={css({\n        padding: 10,\n        bg: \"red.400\",\n        height: \"dvh\",\n        margin: 100,\n        fontSize: 30,\n      })}\n    >\n      This box is styled with PandaCSS.\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Pages Adapter with bun\nDESCRIPTION: This shell command installs the Cloudflare Pages adapter for Qwik City using bun. It updates the build scripts in package.json and creates necessary adapter configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add cloudflare-pages\n```\n\n----------------------------------------\n\nTITLE: Defining VercelEdgeAdapterOptions Interface in TypeScript\nDESCRIPTION: This interface extends ServerAdapterOptions and defines additional configuration options specific to the Vercel Edge adapter. It includes properties for output configuration, static paths, target environment, and Vercel-specific config options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-vercel/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VercelEdgeAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook to Qwik project with Yarn\nDESCRIPTION: This command adds Storybook to an existing Qwik app or library project using Yarn. It installs the necessary dependencies and adds an example component and stories.  It leverages the `qwik add storybook` command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add storybook\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Component in Qwik\nDESCRIPTION: Definition of the Resource component, which is used for data fetching and resource handling in Qwik. It takes ResourceProps generic type parameter to specify the type of resource being handled.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Resource: <T>(props: ResourceProps<T>) => JSXOutput;\n```\n\n----------------------------------------\n\nTITLE: Serving Qwik Bun Application\nDESCRIPTION: Command to start the Bun server after a production build, enabling the deployment of the Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/bun/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run serve\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik's Development Server - Bash\nDESCRIPTION: This snippet shows the command to start Qwik's development server using pnpm. It is the first step in the live development process, allowing the application to be served to connected devices for testing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: PlatformFirebase Interface Declaration\nDESCRIPTION: The PlatformFirebase interface extends Object to define the Firebase platform integration type for Qwik City. This interface is used for type safety when working with Firebase-specific functionality.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-firebase/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformFirebase extends Object\n```\n\n----------------------------------------\n\nTITLE: Defining SSR Stream Properties Type in TypeScript\nDESCRIPTION: Type definition for SSR streaming properties that accepts either an async generator of JSX children, a stream writer function, or a function returning an async generator.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SSRStreamProps = {\n  children:\n    | AsyncGenerator<JSXChildren, void, any>\n    | ((stream: StreamWriter) => Promise<void>)\n    | (() => AsyncGenerator<JSXChildren, void, any>);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Path Relative Function in TypeScript\nDESCRIPTION: Provides a utility function to calculate relative paths between two locations as strings, aiding in path manipulation within Qwik projects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nrelative(from: string, to: string): string;\n```\n\n----------------------------------------\n\nTITLE: Regular setTimeout Example with Eager Loading\nDESCRIPTION: Example showing standard setTimeout usage which eagerly loads the callback function, even if it's never executed or only executed later.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/composing/dollar/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsetTimeout(() => {\n  // I am eagerly loaded, but it would be better if I was lazy-loaded.\n  ...\n}, timeout);\n```\n\n----------------------------------------\n\nTITLE: Serving the Deno application - Shell\nDESCRIPTION: This snippet shows commands to start the Deno server after the application has been built. These commands allow for running the server in different environments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/deno/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run serve\n```\n\n----------------------------------------\n\nTITLE: Running Node HTTP Server\nDESCRIPTION: Command to start the HTTP server after building the project. The server will run on port 3004.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/node-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Defining useId hook in TypeScript\nDESCRIPTION: Signature of the useId hook which generates a unique identifier string.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nuseId: () => string;\n```\n\n----------------------------------------\n\nTITLE: Missing Key Prop in Qwik Iterator - Incorrect\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingIterKey` case. It demonstrates the incorrect way omitting a `key` prop to list items generated within an iterator in a Qwik component, which can lead to poor rendering performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const Person = component$(() => {\n  const person  = {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 32,\n  }\n\n  return (\n    <ul>\n      {Object.keys(person).map((color) => (\n        <li>{person[key]}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Using Any CI System\nDESCRIPTION: Command to deploy the application to Azure Static Web Apps from any CI system. Requires setting an Azure SWA deployment token as an environment variable.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/azure-swa/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nswa deploy ./dist --api-location ./azure-functions --env production\n```\n\n----------------------------------------\n\nTITLE: Function Component Type Definition\nDESCRIPTION: Type definition for Qwik function components, specifying rendering behavior with props, key, flags, and optional dev information.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FunctionComponent<P = unknown> = {\n  renderFn(\n    props: P,\n    key: string | null,\n    flags: number,\n    dev?: DevJSX,\n  ): JSXOutput;\n}[\"renderFn\"];\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotMetaValue Interface for Metadata Values\nDESCRIPTION: Interface that defines the structure of metadata values in Qwik's serialization system, with optional properties for different types of metadata.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnapshotMetaValue\n```\n\n----------------------------------------\n\nTITLE: Auto Translation with deepl-localize\nDESCRIPTION: This command demonstrates how to use the deepl-localize package to automatically translate strings using the DeepL API. Developers must provide their API key and specify source and target languages.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/i18n/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm dlx deepl-localize translate -b src/locales/message.en.json -l de-DE fr-FR -a \"YOUR-DEEPL-API-KEY\"\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpx deepl-localize translate -b src/locales/message.en.json -l de-DE fr-FR -a \"YOUR-DEEPL-API-KEY\"\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn dlx deepl-localize translate -b src/locales/message.en.json -l de-DE fr-FR -a \"YOUR-DEEPL-API-KEY\"\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbunx deepl-localize translate -b src/locales/message.en.json -l de-DE fr-FR -a \"YOUR-DEEPL-API-KEY\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DocumentHead Type in Qwik City\nDESCRIPTION: Type definition for DocumentHead which represents the metadata for a page. It can be either a static DocumentHeadValue object or a function that generates one based on DocumentHeadProps.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DocumentHead =\n  | DocumentHeadValue\n  | ((props: DocumentHeadProps) => DocumentHeadValue);\n```\n\n----------------------------------------\n\nTITLE: Optimized Main Component After Transformation\nDESCRIPTION: The main component after the Qwik Optimizer has transformed it. The component function has been extracted into a separate chunk file that can be lazy-loaded when needed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Counter = component(qrl('./chunk-a.js', 'Counter_onMount'));\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Library for Production\nDESCRIPTION: Command to generate the production build of the Qwik component library in the ./lib directory and typescript type definitions in ./lib-types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/library/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining HTMLCrossOriginAttribute Type in TypeScript\nDESCRIPTION: The HTMLCrossOriginAttribute type defines possible values for the 'crossorigin' attribute in HTML. It includes 'anonymous', 'use-credentials', and other variants, ensuring proper type usage in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HTMLCrossOriginAttribute =\n  | \"anonymous\"\n  | \"use-credentials\"\n  | \"\"\n  | undefined;\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Product Loader Example\nDESCRIPTION: Shows how Qwik provides automatic type safety for loader functions without manual type definitions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const useGetProduct = loader$(() => {\n  return {\n    id: '42',\n    name: 'Valentines Teddy-Bear',\n    description: 'Handmade and Guaranteed For Life.'\n  };\n});\n\nexport default component$(() => {\n  const product = useGetProduct();\n  return (\n    <div>{product.value.name}</div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Docs for Production\nDESCRIPTION: Generates both client and server modules for a complete production build of the Qwik documentation site.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App with npm\nDESCRIPTION: This shell command uses npm to create a new Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Declaring Link Component and Props for Qwik City in TypeScript\nDESCRIPTION: Declares the Link component and its props interface for Qwik City. The Link component is used for client-side navigation with optional prefetching and other navigation behaviors.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Link: Component<LinkProps>;\n\nexport interface LinkProps extends AnchorAttributes {\n    prefetch?: boolean | 'js';\n    reload?: boolean;\n    replaceState?: boolean;\n    scroll?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Astro project with Yarn\nDESCRIPTION: This command initializes a new Qwik project within an Astro environment using Yarn. It simplifies the integration of Qwik components into an Astro project with a single command, utilizing the `@qwikdev/astro` package.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn create @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Defining QwikJSX Namespace in TypeScript\nDESCRIPTION: TypeScript namespace definition for Qwik's JSX implementation. It includes interface and type definitions needed for JSX element handling, including Element, ElementChildrenAttribute, ElementType, and IntrinsicElements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace QwikJSX {\n    // (undocumented)\n    type Element = JSXOutput;\n    // (undocumented)\n    interface ElementChildrenAttribute {\n        // (undocumented)\n        children: JSXChildren;\n    }\n    // (undocumented)\n    type ElementType = string | FunctionComponent<Record<any, any>>;\n    // Warning: (ae-forgotten-export) The symbol \"QwikIntrinsicAttributes\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    interface IntrinsicAttributes extends QwikIntrinsicAttributes {\n    }\n    // Warning: (ae-forgotten-export) The symbol \"LenientQwikElements\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    interface IntrinsicElements extends LenientQwikElements {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Library for Production\nDESCRIPTION: Command to generate the production build of the Qwik component library and its type definitions in the ./lib directory using pnpm.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-labs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Qwik Insights\nDESCRIPTION: Command to run database migrations to set up or update the database schema for Qwik Insights.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/insights/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run db.migrate\n```\n\n----------------------------------------\n\nTITLE: Defining FormSubmitCompletedDetail Interface in TypeScript\nDESCRIPTION: Defines an interface for the detail of a form submission completion event, including status and value.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FormSubmitCompletedDetail<T>\n```\n\n----------------------------------------\n\nTITLE: Defining TransformModulesOptions Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `TransformModulesOptions` interface, which extends `TransformOptions`. It includes the `input` property, which is an array of `TransformModuleInput` objects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface TransformModulesOptions extends TransformOptions\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Config for Typed Routes\nDESCRIPTION: Modifies `vite.config.ts` by adding the `qwikTypes` plugin to enable type-safe routing features. Ensures the plugin is loaded with other Vite plugins.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { qwikTypes } from '@builder.io/qwik-labs/vite';\n\nexport default defineConfig(() => {\n  return {\n    plugins: [\n     // ...\n     qwikTypes() // <== Add `qwikTypes()` to the list of plugins\n    ],\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MediaHTMLAttributes Interface\nDESCRIPTION: Defines the MediaHTMLAttributes interface for HTML media elements with specific attributes like crossOrigin. It extends both the base HTMLAttributes and adds augmentations specific to media elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MediaHTMLAttributes<T extends Element> extends HTMLAttributes<T>, Augmented<HTMLMediaElement, {\n    crossOrigin?: HTMLCrossOriginAttribute;\n}>\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik integration to Astro with NPM\nDESCRIPTION: This command adds the `@qwikdev/astro` integration to an existing Astro project using NPM. It automates the process of installing required dependencies and modifying the `astro.config.*` file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"npx astro add @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Converting Relative URLs to Absolute URLs in Qwik Components\nDESCRIPTION: Demonstrates how to convert relative URLs to absolute URLs in the server-side execution environment of Qwik. This is important for ensuring proper functionality when working with URLs in loaders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/route-loader/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation } from '@builder.io/qwik-city';\n\nexport default component$(() => {\n  const location = useLocation();\n  const relativeUrl = '/mock-data';\n  const absoluteUrl = location.url.origin + relativeUrl;\n\n  return (\n    <section>\n      <div>Relative URL: {relativeUrl}</div>\n      <div>Absolute URL: {absoluteUrl}</div>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Output JSON Structure from Complex Form\nDESCRIPTION: The parsed JSON structure resulting from submitting a complex form with nested objects and arrays.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"person\": [\n    {\n      \"name\": \"Sam\",\n      \"email\": \"sam@complexform.com\",\n      \"address\": {\n        \"street\": \"1234 Example Ave.\",\n        \"city\": \"Qwik\",\n        \"state\": \"IA\",\n        \"zip\": \"00000\"\n      },\n      \"pets\": [\"beaver\"]\n    },\n    {\n      \"name\": \"Bonnie\",\n      \"email\": \"bonnie@hishai.net\",\n      \"address\": {\n        \"street\": \"768 Resolution Way\",\n        \"city\": \"Jaffa\",\n        \"state\": \"IL\",\n        \"zip\": \"01948\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik City for Production (yarn)\nDESCRIPTION: This command builds the Qwik City application for production using yarn. It compiles the client and server code, preparing the application for deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn run build\"\n```\n\n----------------------------------------\n\nTITLE: CSS Properties Type Interface\nDESCRIPTION: Type interface extending CSS properties to support string and number values for both standard and hyphenated CSS property names.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CSSProperties extends CSS.Properties<string | number>, CSS.PropertiesHyphen<string | number>\n```\n\n----------------------------------------\n\nTITLE: Defining SourceMapsOption Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `SourceMapsOption` type for Qwik. It specifies the possible values for source map generation, including \"external\", \"inline\", `undefined`, and `null`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport type SourceMapsOption = \"external\" | \"inline\" | undefined | null;\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect State Mutation in Qwik Components\nDESCRIPTION: Shows the incorrect pattern of using primitive values for mutable state. Simple values cannot be directly mutated; use objects with properties instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const HelloWorld = component$(() => {\n  let personName = 'Bob';\n\n  return (\n    <button onClick$={() => {\n      personName = 'Alice';\n    }}>\n      {personName}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Production Build for Qwik Bun Application\nDESCRIPTION: Command to build the Qwik application for production, which automatically runs both client and server build processes using Bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/bun/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Async Computed Function Implementation\nDESCRIPTION: Example implementation of useAsyncComputed$ function as a replacement for deprecated async functions in useComputed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useAsyncComputed$ = (qrlFn: QRL<() => Promise<any>>) => {\n  const sig = useSignal();\n  useTask(({ track }) => {\n    const result = track(qrlFn);\n    if (result && 'then' in result) {\n      result.then(\n        (val) => (sig.value = val),\n        (err) => {\n          console.error('async computed function threw!', err);\n          throw error;\n        }\n      );\n    } else {\n      sig.value = result;\n    }\n  });\n  return sig;\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing SVG images in Qwik | Qwik | TypeScript\nDESCRIPTION: This snippet shows how to implement SVG images using both JSX and Image component optimizations in Qwik, allowing for scalable vector graphics to be rendered efficiently.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport SvgImage from '~/media/your_image.svg?jsx';\n\nexport default component$(() => {\n  return (\n    <>\n      <h1>Image Example</h1>\n      <div class=\"image-wrapper\" >\n        <SvgImage />\n      </div>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Internal Helper Functions for QRL Handling\nDESCRIPTION: Internal utility functions for handling QRL (Qwik Resource Loader) operations with noop implementations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const _noopQrl: <T>(symbolName: string, lexicalScopeCapture?: any[]) => QRL<T>;\n\nexport const _noopQrlDEV: <T>(symbolName: string, opts: QRLDev, lexicalScopeCapture?: any[]) => QRL<T>;\n```\n\n----------------------------------------\n\nTITLE: deepl-localize Script Configuration\nDESCRIPTION: This JSON snippet shows how to configure a script to use deepl-localize for translating strings directly within your Node.js scripts, providing a convenient alias for the command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/i18n/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\":{\n    \"translate\":\"deepl-localize translate -b src/locales/message.en.json -l de-DE fr-FR -a 'your-deepl-api-key'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreventNavigateCallback type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `PreventNavigateCallback` as a function type that accepts an optional URL (either a number or URL object) and returns a `ValueOrPromise<boolean>`. This callback is likely used to prevent navigation based on some condition, allowing for asynchronous checks before navigating.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PreventNavigateCallback = (\n  url?: number | URL,\n) => ValueOrPromise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Qwik City Vercel Edge Options Interface\nDESCRIPTION: Interface extending ServerRenderOptions to define configuration options specific to Vercel Edge middleware integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-vercel-edge/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityVercelEdgeOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Server-Side Static Files\nDESCRIPTION: Command to run the server-side build process for generating static files. Should be used with proper cache header configuration for the build/**/*.js files, setting Cache-Control to public, max-age=31536000, immutable.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/static/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build.server\n```\n\n----------------------------------------\n\nTITLE: Defining extname Function in TypeScript\nDESCRIPTION: Function signature for the extname utility, which extracts the file extension from a path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nextname(path: string): string;\n```\n\n----------------------------------------\n\nTITLE: Initializing Declarative Routing\nDESCRIPTION: Provides shell commands to initialize the Declarative Routing package in Qwik, a system adapted from NextJS for handling type-safe routes with `declarative-routing`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx declarative-routing init\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx declarative-routing init\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx declarative-routing init\n```\n\nLANGUAGE: shell\nCODE:\n```\nbunx declarative-routing init\n```\n\n----------------------------------------\n\nTITLE: Building Qwik App for Production with npm\nDESCRIPTION: Runs the build command using npm, which compiles the application for production by executing server and client build scripts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Main Page Route\nDESCRIPTION: Implementation of the main blog page route at /blog URL path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/blog/index.tsx\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>My blog</h1>\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to Qwik project using NPM\nDESCRIPTION: This command uses npm to execute the qwik add tailwind script, which automates the process of installing Tailwind CSS and configuring the necessary files in a Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Deploying to Firebase (yarn)\nDESCRIPTION: These commands configure and deploy your Qwik City application to Firebase using yarn. It involves logging in to Firebase, selecting a project, and then deploying the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"firebase login\\nfirebase use --add\\nyarn run deploy\"\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City Azure Functions API Interface in TypeScript\nDESCRIPTION: This code snippet defines the public API for integrating Qwik City with Azure Functions. It includes imports from Azure Functions and Qwik City, exports a createQwikCity function for initializing the integration, and defines interfaces for Azure platform types and configuration options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/azure-swa/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AzureFunction } from '@azure/functions';\nimport type { Context } from '@azure/functions';\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityAzureOptions): AzureFunction;\n\n// @public (undocumented)\nexport interface PlatformAzure extends Partial<Context> {\n}\n\n// @public (undocumented)\nexport interface QwikCityAzureOptions extends ServerRenderOptions {\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Integration using yarn\nDESCRIPTION: This snippet shows how to add the Qwik integration using yarn. Ensure yarn is installed and the project is initialized with it prior to running this command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Parsing Function in TypeScript\nDESCRIPTION: Defines a parse function that takes a file path and returns an object with parsed components such as root, directory, base, extension, and name.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nparse(path: string): {\n        root: string;\n        dir: string;\n        base: string;\n        ext: string;\n        name: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining Node Server Adapter Options Interface\nDESCRIPTION: TypeScript interface declaration for NodeServerAdapterOptions that extends ServerAdapterOptions. Includes an optional 'name' property of type string. This is an alpha preview API.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-node-server/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NodeServerAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Running Storybook dashboard with NPM\nDESCRIPTION: This command starts the Storybook development server using NPM, allowing you to view and interact with your UI components in isolation. It utilizes the `storybook` script defined in your `package.json`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Creating Obsolete Signal in Qwik\nDESCRIPTION: Type definition for createSignal, a deprecated API for signal creation in Qwik. Warns users to use alternative methods.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSignal: UseSignal;\n```\n\n----------------------------------------\n\nTITLE: React Slider Integration Example\nDESCRIPTION: Shows how to integrate a MUI Slider component with qwikify$ and optional eagerness configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\nimport { qwikify$ } from '@builder.io/qwik-react';\nimport { Slider } from '@mui/material';\nexport const MUISlider = qwikify$<typeof Slider>(\n  Slider\n  //  Uncomment next line to make component interactive in browser\n  // { eagerness: 'hover' }\n);\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Application for Production using yarn\nDESCRIPTION: This snippet describes how to build a Qwik application for production with yarn. Yarn should be properly set up, and the package.json file should contain the necessary build script.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Defining SVGAttributes Interface in TypeScript for Qwik\nDESCRIPTION: Interface declaration for SVGAttributes that extends AriaAttributes to provide type definitions for SVG-specific attributes not included in standard TypeScript types. This interface enables proper type checking for SVG elements in the Qwik framework.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SVGAttributes<T extends Element = Element> extends AriaAttributes\n```\n\n----------------------------------------\n\nTITLE: NoSerialize Type and Function Definition\nDESCRIPTION: Type and function for marking objects as non-serializable in Qwik's serialization system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NoSerialize<T> = (T & {\n    __no_serialize__: true;\n}) | undefined;\n\nexport const noSerialize: <T extends object | undefined>(input: T) => NoSerialize<T>;\n```\n\n----------------------------------------\n\nTITLE: Using Non-Serializable Functions in Qwik Components\nDESCRIPTION: Demonstrates the incorrect pattern of using non-serializable expressions directly in Qwik components. Functions must be wrapped with $(...) so the optimizer can split the code into small chunks.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useTask$ } from '@builder.io/qwik';\n\nexport const HelloWorld = component$(() => {\n  const print = (msg: string) => {\n    console.log(msg);\n  };\n\n  useTask$(() => {\n    print(\"Hello World\");\n  });\n\n  return <h1>Hello</h1>;\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying to Firebase (bun)\nDESCRIPTION: These commands configure and deploy your Qwik City application to Firebase using bun. It involves logging in to Firebase, selecting a project, and then deploying the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"firebase login\\nfirebase use --add\\nbun run deploy\"\n```\n\n----------------------------------------\n\nTITLE: Running Client-Only Development Build for Qwik React\nDESCRIPTION: Executes a client-side JavaScript development build using Vite for quick module reloading. This mode is ideal for development but doesn't demonstrate Qwik's full capabilities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Sync QRL Type Definition\nDESCRIPTION: Type definition for synchronous QRL (Qwik Resource Loader) function with brand and resolution types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SyncQRL<TYPE extends Function = any> extends QRL<TYPE> {\n    __brand__SyncQRL__: TYPE;\n    (...args: TYPE extends (...args: infer ARGS) => any ? ARGS : never): TYPE extends (...args: any[]) => infer RETURN ? RETURN : never;\n    dev: QRLDev | null;\n    resolved: TYPE;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining zod$ Function Type in TypeScript\nDESCRIPTION: Type definition for the zod$ function that creates Zod-based validators for server functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nzod$: ZodConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining MenuData type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type alias `MenuData` as a tuple containing a pathname (string) and a `MenuModuleLoader`. This is likely used to define menu items and their corresponding loaders within the Qwik City application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MenuData = [pathname: string, menuLoader: MenuModuleLoader];\n```\n\n----------------------------------------\n\nTITLE: Declaring bunServerAdapter Function in TypeScript\nDESCRIPTION: Defines the bunServerAdapter function that takes optional bunServerAdapterOptions and returns any. This function is part of the Bun server adapter for Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-bun-server/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function bunServerAdapter(opts?: bunServerAdapterOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Installing @builder.io/qwik with NPM\nDESCRIPTION: This command installs the `@builder.io/qwik` package, which is a peer dependency of `@qwikdev/astro`. If this peer dependency is not automatically installed, running this command will resolve the issue.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n\"npm install @builder.io/qwik\"\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik Labs as a dependency\nDESCRIPTION: Adds the Qwik Labs package as a dependency in the `package.json` file.  This configuration specifies that the package should be installed directly from the GitHub repository. It ensures that the project uses the latest build from the `main` branch of `QwikDev/qwik-labs-build`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  \"dependencies\": {\n    ...\n    \"@builder.io/qwik-labs\": \"github:QwikDev/qwik-labs-build#main\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Application for Production\nDESCRIPTION: Command to build the Qwik application for production deployment to Vercel Edge. This command runs both the server and client build scripts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/vercel-edge/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-nx Plugin (npm)\nDESCRIPTION: This command uses npm to install the 'qwik-nx' plugin as a dependency within an existing Nx workspace.  This plugin enables Qwik-specific functionalities within the Nx environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install qwik-nx\n```\n\n----------------------------------------\n\nTITLE: API Type Definitions for Qwik City Deno Integration\nDESCRIPTION: Defines the TypeScript interfaces and functions for integrating Qwik City with Deno. Includes types for network connections, server render options, and handler functions for routing, static files, and 404 responses.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/deno/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ClientConn } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityDenoOptions): {\n    router: (request: Request, info: ServeHandlerInfo) => Promise<Response | null>;\n    notFound: (request: Request) => Promise<Response>;\n    staticFile: (request: Request) => Promise<Response | null>;\n};\n\n// @public (undocumented)\nexport interface NetAddr {\n    // (undocumented)\n    hostname: string;\n    // (undocumented)\n    port: number;\n    // (undocumented)\n    transport: 'tcp' | 'udp';\n}\n\n// @public (undocumented)\nexport interface QwikCityDenoOptions extends ServerRenderOptions {\n    // (undocumented)\n    getClientConn?: (request: Request, info: ServeHandlerInfo) => ClientConn;\n    static?: {\n        root?: string;\n        cacheControl?: string;\n    };\n}\n\n// @public (undocumented)\nexport interface ServeHandlerInfo {\n    // (undocumented)\n    remoteAddr: NetAddr;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App with yarn\nDESCRIPTION: This shell command uses yarn to create a new Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn create qwik\n```\n\n----------------------------------------\n\nTITLE: Definition of PrefetchStrategy Interface in TypeScript\nDESCRIPTION: Interface for configuring the prefetch strategy. Contains properties for implementation details and symbols to prefetch.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PrefetchStrategy\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App in Command Mode (Bash)\nDESCRIPTION: This command creates a Qwik application in command mode, allowing the user to specify the starter template and project name directly in the command line.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/create-qwik/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create qwik@latest <starter> <projectName>\n```\n\n----------------------------------------\n\nTITLE: Suboptimal implementation of reactive template using Qwik\nDESCRIPTION: This snippet illustrates a suboptimal implementation of a Qwik component where a signal value is evaluated outside the template. This leads to unnecessary re-renders of the entire template when the signal changes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/best-practices/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Don't do this!\nexport default component$(() => {\n  const signal = useSignal(0);\n  const isBiggerThanZero = signal.value > 0 ? 'Bigger than zero' : 'Smaller than zero';\n  return (\n    <div>\n      <button onClick$={() => signal.value++}>+</button>\n      <button onClick$={() => signal.value--}>-</button>\n      <div>{isBiggerThanZero} - Current value: { signal.value }</div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Building Declarative Routes\nDESCRIPTION: Provides commands to build declarative routes, updating the routing system in Qwik applications after adding or modifying routes to refresh definitions and structure.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/typed-routes/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx declarative-routing build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx declarative-routing build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx declarative-routing build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbunx declarative-routing build\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Qwik Preset (Yarn)\nDESCRIPTION: This command uses Yarn to create a new Nx workspace named 'org-workspace' with the 'qwik-nx' preset, pre-configured for Qwik development. It leverages the create-nx-workspace package to set up the workspace.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx create-nx-workspace@latest org-workspace --preset=qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Run Adapter with Package Managers\nDESCRIPTION: Provides commands to integrate the Cloud Run adapter with a Qwik City application using various package managers such as pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/gcp-cloud-run/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add cloud-run\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add cloud-run\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add cloud-run\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add cloud-run\n```\n\n----------------------------------------\n\nTITLE: Reading Headers with server$() in Qwik\nDESCRIPTION: Demonstrates how to read request headers using this.headers.get() within a server$() function in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const getHeaders = server$(\n  function () {\n    const userAgent = this.headers.get('User-Agent');\n    console.log('User-Agent:', userAgent);\n    return userAgent;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Qwik CLI\nDESCRIPTION: Command to execute the Qwik CLI after building.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/README.md#2025-04-21_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\npnpm cli.qwik\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Integration using bun\nDESCRIPTION: This snippet illustrates adding the Qwik integration with bun. Make sure bun is installed and set up in the project environment before executing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add\n```\n\n----------------------------------------\n\nTITLE: Type Definition - ReadonlySignal\nDESCRIPTION: Type definition for a readonly signal in Qwik's state management system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ReadonlySignal<T = unknown> = Readonly<Signal<T>>;\n```\n\n----------------------------------------\n\nTITLE: TranspileOption Type Definition\nDESCRIPTION: Type definition for transpile options that can be boolean, undefined, or null.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TranspileOption = boolean | undefined | null;\n```\n\n----------------------------------------\n\nTITLE: Qwik Library Directory Structure\nDESCRIPTION: The file and directory structure of a Qwik component library project, highlighting the key configuration files and component organization.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/library/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ src\n‚îÇ   ‚îú‚îÄ‚îÄ components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ counter\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ counter.tsx\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ logo\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ logo.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ entry.dev.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ entry.ssr.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts\n‚îÇ   ‚îî‚îÄ‚îÄ root.tsx\n‚îú‚îÄ‚îÄ tsconfig.json\n‚îî‚îÄ‚îÄ vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik City with Yarn\nDESCRIPTION: Command to create a new Qwik City project using Yarn package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/qwikcity/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn create qwik\n```\n\n----------------------------------------\n\nTITLE: Fetching User Details by ID with Qwik and Drizzle ORM\nDESCRIPTION: This snippet uses `routeLoader$` to fetch user details based on the user ID obtained from the URL parameters. It checks for the existence of the user and returns a status of 404 if not found.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/drizzle/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx {8} /Drizzle/ title=\"src/routes/users/[userId]/index.tsx\"\nimport { component$ } from \"@builder.io/qwik\";\nimport { routeLoader$ } from \"@builder.io/qwik-city\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport Database from \"better-sqlite3\";\nimport { schema } from \"../../../../drizzle/schema\";\n\nexport const useGetUser = routeLoader$(async (requestEvent) => {\n  const userId = parseInt(requestEvent.params[\"userId\"], 10);\n  const sqlite = new Database(\"./drizzle/db/db.sqlite\");\n  const db = drizzle(sqlite, { schema });\n  const user = await db.query.users.findFirst({\n    where: (users, { eq }) => eq(users.id, userId),\n  });\n  if (!user) {\n    // Set the status to 404 if the user is not found\n    requestEvent.status(404);\n  }\n  return user;\n});\n\nexport default component$(() => {\n  const user = useGetUser();\n  return (\n    <section>\n      <h1>User detail</h1>\n      {user.value ? (\n        <>\n          <p>Name: {user.value.name}</p>\n          <p>Email: {user.value.email}</p>\n        </>\n      ) : (\n        <p>User not found</p>\n      )}\n    </section>\n  );\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Numberish Type in TypeScript\nDESCRIPTION: Defines a type alias 'Numberish' that represents either a number or a string template literal of a number.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Numberish = number | `${number}`;\n```\n\n----------------------------------------\n\nTITLE: Generating Static Sites with Qwik City\nDESCRIPTION: The generate function is used for SSG from another module, such as a Vite plugin. It takes StaticGenerateOptions and returns a Promise with StaticGenerateResult.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-static/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function generate(\n  opts: StaticGenerateOptions,\n): Promise<StaticGenerateResult>;\n```\n\n----------------------------------------\n\nTITLE: Defining Known Event Names Type\nDESCRIPTION: Type definition for known event names in Qwik, using a union of literal event keys and strings.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KnownEventNames = LiteralUnion<AllEventKeys, string>;\n```\n\n----------------------------------------\n\nTITLE: Defining NoSerialize Type for Serialization Control\nDESCRIPTION: Defines the NoSerialize type which is returned by the noSerialize() function. This type helps mark values that should not be serialized by adding a __no_serialize__ property to them or returning undefined.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NoSerialize<T> =\n  | (T & {\n      __no_serialize__: true;\n    })\n  | undefined;\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright via npm\nDESCRIPTION: This command installs Playwright as a dependency in your Qwik project using npm. It will also set up required scripts and configuration for e2e testing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/playwright/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add playwright\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Behavior for qwik.dev\nDESCRIPTION: A standard robots.txt configuration that instructs all web crawlers to avoid the /demo/ directory while allowing access to all other parts of the site. It also points to the sitemap location for improved search engine indexing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /demo/\nAllow: /\nSitemap: https://qwik.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Adding PandaCSS to Qwik Project\nDESCRIPTION: Command to add PandaCSS, a zero-runtime CSS-in-JS solution, to a Qwik project using the Qwik CLI.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Setting Up E2E Test Environment with BeforeAll Hook in TypeScript\nDESCRIPTION: A TypeScript snippet showing the beforeAll hook setup for E2E tests. It scaffolds a Qwik project, stores the temporary directory globally, and registers cleanup functions to remove temporary directories and kill processes after tests complete.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/e2e/qwik-cli-e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeAll(() => {\n  const config = scaffoldQwikProject();\n  global.tmpDir = config.tmpDir;\n\n  return async () => {\n    await killAllRegisteredProcesses();\n    config.cleanupFn();\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Building Qwik City Application for Production\nDESCRIPTION: Shell commands for building the Qwik City application for production using different package managers. This command sequence includes running both 'build.server' and 'build.client' parts to prepare the application for deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/vercel-edge/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Installing Orama via yarn\nDESCRIPTION: This code snippet provides the yarn command to install Orama in a Qwik project. It ensures that Orama dependencies are included.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/orama/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add orama\n```\n\n----------------------------------------\n\nTITLE: Defining Netlify Edge Adapter Function in TypeScript\nDESCRIPTION: Function signature for the Netlify Edge adapter that configures Qwik applications for deployment on Netlify Edge Functions. Takes optional configuration options and returns the adapter implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-netlify-edge/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function netlifyEdgeAdapter(\n  opts?: NetlifyEdgeAdapterOptions,\n): any;\n```\n\n----------------------------------------\n\nTITLE: Using Turso Database - Shell\nDESCRIPTION: This snippet provides commands for interacting with a Turso database using the Turso CLI, including creating tables and seeding data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/turso/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nturso db shell <database-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\ncreate table todo (id integer not null, task text, done int default 0);\n```\n\nLANGUAGE: shell\nCODE:\n```\ninsert into todo(id, task) values(1, \"Go to the gym\");\n```\n\nLANGUAGE: shell\nCODE:\n```\ninsert into todo(id, task) values(2, \"Buy groceries\");\n```\n\nLANGUAGE: shell\nCODE:\n```\nturso db show <database-name> --url\n```\n\nLANGUAGE: shell\nCODE:\n```\nturso db tokens create <database-name>\n```\n\n----------------------------------------\n\nTITLE: Field Error Response for Complex Form Validation\nDESCRIPTION: Example of field errors returned from validation in dot notation, matching the structure of the form inputs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  \"person.name\": \"Invalid string\",\n  \"person.email\": \"Invalid email\",\n  \"person.address.street\": \"Invalid string\",\n  \"person.address.city\": \"Invalid string\",\n  \"person.address.state\": \"Invalid string\",\n  \"person.address.zip\": \"Invalid number\",\n  \"person.pets[]\": [\"Required\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CssNano PostCSS Plugin\nDESCRIPTION: Command-line instructions for installing the CssNano plugin across different package managers\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/postcss/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install cssnano\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cssnano\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add cssnano\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun install cssnano\n```\n\n----------------------------------------\n\nTITLE: Qwikifying React Material UI Components\nDESCRIPTION: Example of how to import and wrap React Material UI components with qwikify$ to use them in a Qwik application. Shows basic wrapping and adding interactivity options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/** @jsxImportSource react */\n\nimport { qwikify$ } from '@builder.io/qwik-react';\nimport { Button, Slider } from '@mui/material';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\n\nexport const MUIButton = qwikify$(Button);\nexport const MUISlider = qwikify$(Slider, { eagerness: 'hover' });\n\nexport const TableApp = qwikify$(() => {\n  const columns: GridColDef[] = [\n    { field: 'id', headerName: 'ID', width: 70 },\n    { field: 'firstName', headerName: 'First name', width: 130 },\n    { field: 'lastName', headerName: 'Last name', width: 130 },\n    {\n      field: 'age',\n      headerName: 'Age',\n      type: 'number',\n      width: 90,\n    },\n    {\n      field: 'fullName',\n      headerName: 'Full name',\n      description: 'This column has a value getter and is not sortable.',\n      sortable: false,\n      width: 160,\n      valueGetter: (params: GridValueGetterParams) =>\n        `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n    },\n  ];\n\n  const rows = [\n    { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n    // more rows with same object shape ,removed for brevity.\n  ];\n\n  return (\n    <>\n      <h1>Hello from React</h1>\n\n      <div style={{ height: 400, width: '100%' }}>\n        <DataGrid\n          rows={rows}\n          columns={columns}\n          pageSize={5}\n          rowsPerPageOptions={[5]}\n          checkboxSelection\n          disableSelectionOnClick\n        />\n      </div>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik integration to Astro with Yarn\nDESCRIPTION: This command adds the `@qwikdev/astro` integration to an existing Astro project using Yarn. The command uses the Astro CLI tool `astro add` and automates dependency installation and project configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn dlx astro add @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript API for @builder.io/qwik Framework\nDESCRIPTION: This code snippet defines the API structure for the Qwik framework. It includes type definitions for optimization, bundle management, entry strategies, and plugin configurations that form the core of Qwik's build system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/src/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin as Plugin_2 } from 'vite';\n\n// @public\nexport type BundleGraphAdder = (manifest: QwikManifest) => Record<string, {\n    imports?: string[];\n    dynamicImports?: string[];\n}>;\n\n// @public (undocumented)\nexport interface ComponentEntryStrategy {\n    // (undocumented)\n    manual?: Record<string, string>;\n    // (undocumented)\n    type: 'component';\n}\n\n// @public (undocumented)\nexport const createOptimizer: (optimizerOptions?: OptimizerOptions) => Promise<Optimizer>;\n\n// @public (undocumented)\nexport interface Diagnostic {\n    // (undocumented)\n    category: DiagnosticCategory;\n    // (undocumented)\n    code: string | null;\n    // (undocumented)\n    file: string;\n    // (undocumented)\n    highlights: SourceLocation[];\n    // (undocumented)\n    message: string;\n    // (undocumented)\n    scope: string;\n    // (undocumented)\n    suggestions: string[] | null;\n}\n\n// @public (undocumented)\nexport type DiagnosticCategory = 'error' | 'warning' | 'sourceError';\n\n// Warning: (ae-forgotten-export) The symbol \"HoistEntryStrategy\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"HookEntryStrategy_2\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport type EntryStrategy = InlineEntryStrategy | HoistEntryStrategy | SingleEntryStrategy | HookEntryStrategy_2 | SegmentEntryStrategy | ComponentEntryStrategy | SmartEntryStrategy;\n\n// @alpha\nexport enum ExperimentalFeatures {\n    noSPA = \"noSPA\",\n    preventNavigate = \"preventNavigate\",\n    valibot = \"valibot\"\n}\n\n// @public (undocumented)\nexport interface GlobalInjections {\n    // (undocumented)\n    attributes?: {\n        [key: string]: string;\n    };\n    // (undocumented)\n    location: 'head' | 'body';\n    // (undocumented)\n    tag: string;\n}\n\n// @public (undocumented)\nexport interface InlineEntryStrategy {\n    // (undocumented)\n    type: 'inline';\n}\n\n// @public (undocumented)\nexport type MinifyMode = 'simplify' | 'none';\n\n// @public (undocumented)\nexport interface Optimizer {\n    sys: OptimizerSystem;\n    transformFs(opts: TransformFsOptions): Promise<TransformOutput>;\n    transformFsSync(opts: TransformFsOptions): TransformOutput;\n    transformModules(opts: TransformModulesOptions): Promise<TransformOutput>;\n    transformModulesSync(opts: TransformModulesOptions): TransformOutput;\n}\n\n// @public (undocumented)\nexport interface OptimizerOptions {\n    // (undocumented)\n    binding?: any;\n    inlineStylesUpToBytes?: number;\n    sourcemap?: boolean;\n    // (undocumented)\n    sys?: OptimizerSystem;\n}\n\n// @public (undocumented)\nexport interface OptimizerSystem {\n    // (undocumented)\n    cwd: () => string;\n    // (undocumented)\n    dynamicImport: (path: string) => Promise<any>;\n    // (undocumented)\n    env: SystemEnvironment;\n    // (undocumented)\n    getInputFiles?: (rootDir: string) => Promise<TransformModuleInput[]>;\n    // (undocumented)\n    os: string;\n    // (undocumented)\n    path: Path;\n    // (undocumented)\n    strictDynamicImport: (path: string) => Promise<any>;\n}\n\n// @public (undocumented)\nexport interface Path {\n    // (undocumented)\n    basename(path: string, ext?: string): string;\n    // (undocumented)\n    readonly delimiter: string;\n    // (undocumented)\n    dirname(path: string): string;\n    // (undocumented)\n    extname(path: string): string;\n    // (undocumented)\n    format(pathObject: {\n        root: string;\n        dir: string;\n        base: string;\n        ext: string;\n        name: string;\n    }): string;\n    // (undocumented)\n    isAbsolute(path: string): boolean;\n    // (undocumented)\n    join(...paths: string[]): string;\n    // (undocumented)\n    normalize(path: string): string;\n    // (undocumented)\n    parse(path: string): {\n        root: string;\n        dir: string;\n        base: string;\n        ext: string;\n        name: string;\n    };\n    // (undocumented)\n    readonly posix: Path;\n    // (undocumented)\n    relative(from: string, to: string): string;\n    // (undocumented)\n    resolve(...paths: string[]): string;\n    // (undocumented)\n    readonly sep: string;\n    // (undocumented)\n    readonly win32: null;\n}\n\n// @public (undocumented)\nexport type QwikBuildMode = 'production' | 'development';\n\n// @public (undocumented)\nexport type QwikBuildTarget = 'client' | 'ssr' | 'lib' | 'test';\n\n// @public (undocumented)\nexport interface QwikBundle {\n    dynamicImports?: string[];\n    imports?: string[];\n    interactivity?: number;\n    origins?: string[];\n    size: number;\n    symbols?: string[];\n    total: number;\n}\n\n// @public\nexport type QwikBundleGraph = Array<string | number>;\n\n// @public\nexport interface QwikManifest {\n    bundleGraph?: QwikBundleGraph;\n    bundles: {\n        [fileName: string]: QwikBundle;\n    };\n    injections?: GlobalInjections[];\n    manifestHash: string;\n    mapping: {\n        [symbolName: string]: string;\n    };\n    options?: {\n        target?: string;\n        buildMode?: string;\n        entryStrategy?: {\n            type: EntryStrategy['type'];\n        };\n    };\n    platform?: {\n        [name: string]: string;\n    };\n    preloader?: string;\n    symbols: {\n        [symbolName: string]: QwikSymbol;\n    };\n    version: string;\n}\n\n// @public (undocumented)\nexport function qwikRollup(qwikRollupOpts?: QwikRollupPluginOptions): any;\n\n// @public (undocumented)\nexport interface QwikRollupPluginOptions {\n    buildMode?: QwikBuildMode;\n    // (undocumented)\n    csr?: boolean;\n    debug?: boolean;\n    entryStrategy?: EntryStrategy;\n    // Warning: (ae-incompatible-release-tags) The symbol \"experimental\" is marked as @public, but its signature references \"ExperimentalFeatures\" which is marked as @alpha\n    experimental?: (keyof typeof ExperimentalFeatures)[];\n    lint?: boolean;\n    manifestInput?: QwikManifest;\n    manifestOutput?: (manifest: QwikManifest) => Promise<void> | void;\n    // (undocumented)\n    optimizerOptions?: OptimizerOptions;\n    rootDir?: string;\n    srcDir?: string;\n    srcInputs?: TransformModuleInput[] | null;\n    target?: QwikBuildTarget;\n    transformedModuleOutput?: ((transformedModules: TransformModule[]) => Promise<void> | void) | null;\n}\n\n// @public (undocumented)\nexport interface QwikSymbol {\n    // (undocumented)\n    canonicalFilename: string;\n    // (undocumented)\n    captures: boolean;\n    // (undocumented)\n    ctxKind: 'function' | 'eventHandler';\n    // (undocumented)\n    ctxName: string;\n    // (undocumented)\n    displayName: string;\n    // (undocumented)\n    hash: string;\n    // (undocumented)\n    loc: [number, number];\n    // (undocumented)\n    origin: string;\n    // (undocumented)\n    parent: string | null;\n}\n\n// @public\nexport function qwikVite(qwikViteOpts?: QwikVitePluginOptions): any;\n\n// @public (undocumented)\nexport interface QwikViteDevResponse {\n    // (undocumented)\n    _qwikEnvData?: Record<string, any>;\n    // (undocumented)\n    _qwikRenderResolve?: () => void;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"P\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type QwikVitePlugin = P<QwikVitePluginApi> & {\n    name: 'vite-plugin-qwik';\n};\n\n// @public (undocumented)\nexport interface QwikVitePluginApi {\n    // (undocumented)\n    getAssetsDir: () => string | undefined;\n    // (undocumented)\n    getClientOutDir: () => string | null;\n    // (undocumented)\n    getClientPublicOutDir: () => string | null;\n    // (undocumented)\n    getManifest: () => QwikManifest | null;\n    // (undocumented)\n    getOptimizer: () => Optimizer | null;\n    // Warning: (ae-forgotten-export) The symbol \"NormalizedQwikPluginOptions\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    getOptions: () => NormalizedQwikPluginOptions;\n    // (undocumented)\n    getRootDir: () => string | null;\n    // (undocumented)\n    registerBundleGraphAdder: (adder: BundleGraphAdder) => void;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"QwikVitePluginCSROptions\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"QwikVitePluginSSROptions\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport type QwikVitePluginOptions = QwikVitePluginCSROptions | QwikVitePluginSSROptions;\n\n// @public (undocumented)\nexport interface ResolvedManifest {\n    // (undocumented)\n    injections: GlobalInjections[];\n    // (undocumented)\n    manifest: QwikManifest;\n    // (undocumented)\n    mapper: SymbolMapper;\n}\n\n// @public (undocumented)\ninterface SegmentAnalysis {\n    // (undocumented)\n    canonicalFilename: string;\n    // (undocumented)\n    captures: boolean;\n    // (undocumented)\n    ctxKind: 'eventHandler' | 'function';\n    // (undocumented)\n    ctxName: string;\n    // (undocumented)\n    displayName: string;\n    // (undocumented)\n    entry: string | null;\n    // (undocumented)\n    extension: string;\n    // (undocumented)\n    hash: string;\n    // (undocumented)\n    loc: [number, number];\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    origin: string;\n    // (undocumented)\n    parent: string | null;\n}\nexport { SegmentAnalysis as HookAnalysis }\nexport { SegmentAnalysis }\n\n// @public (undocumented)\ninterface SegmentEntryStrategy {\n    // (undocumented)\n    manual?: Record<string, string>;\n    // (undocumented)\n    type: 'segment';\n}\nexport { SegmentEntryStrategy as HookEntryStrategy }\nexport { SegmentEntryStrategy }\n```\n\n----------------------------------------\n\nTITLE: Running Storybook dashboard with PNPM\nDESCRIPTION: This command starts the Storybook development server using PNPM, allowing you to view and interact with your UI components in isolation.  It utilizes the `storybook` script defined in your `package.json`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Installing Bun on Linux, OSX, or WSL\nDESCRIPTION: Command to install Bun runtime using the official installation script. Supports Linux, macOS, and Windows Subsystem for Linux environments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/bun/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://bun.sh/install | bash\n```\n\n----------------------------------------\n\nTITLE: Defining useContextProvider hook in TypeScript\nDESCRIPTION: Signature of the useContextProvider hook used to assign values to context in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nuseContextProvider: <STATE>(context: ContextId<STATE>, newValue: STATE) => void\n```\n\n----------------------------------------\n\nTITLE: Adding Key Prop in Qwik Iterator with Fragment - Correct\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingIterKeyUsePrag` case. It demonstrates the correct way to add a unique `key` prop to a fragment when mapping in a Qwik component, using the `Fragment` component to properly assign keys.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport Card from './Card';\nimport Summary from './Summary';\n\nexport const Person = component$(() => {\n  const person  = {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 32,\n  }\n\n  return (\n    {Object.keys(person).map((color) => (\n      <Fragment key={`person-${key}`}>\n        <Card value={person[key]} />\n        <Summary value={person[key]} />\n      </Fragment>\n    ))}\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Qwik Component Library\nDESCRIPTION: Essential package.json configuration for a Qwik component library, including the special 'qwik' field needed for the Qwik Optimizer to recognize the library.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/library/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-qwik-library-name\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Create a reusable Qwik component library\",\n  \"main\": \"./lib/index.qwik.mjs\",\n  \"qwik\": \"./lib/index.qwik.mjs\",\n  \"types\": \"./lib-types/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./lib/index.qwik.mjs\",\n      \"require\": \"./lib/index.qwik.cjs\",\n      \"types\": \"./lib-types/index.d.ts\"\n    }\n  },\n  \"files\": [\n    \"lib\",\n    \"lib-types\"\n  ],\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Route using Bun\nDESCRIPTION: This command shows how to create a new route for the /contact page using the Qwik utility command with Bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik new /contact\n```\n\n----------------------------------------\n\nTITLE: Importing and Parsing Qwik JSON in JavaScript\nDESCRIPTION: The code snippet demonstrates how to import a script using JavaScript to parse Qwik's serialized JSON state into a human-readable format. It requires access to the browser's developer console to run the import statement. The main functionality involves using the import function to dynamically load the script for parsing serialized data.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/devtools/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"https://qwik.dev/devtools/json/\");\n```\n\n----------------------------------------\n\nTITLE: Declaring OlHTMLAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for HTML attributes specific to the 'ol' (ordered list) element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OlHTMLAttributes<T extends Element> extends Attrs<'ol', T>\n```\n\n----------------------------------------\n\nTITLE: HTML Container Element Example in Qwik\nDESCRIPTION: Example of an HTML element serving as a container in a Qwik application with system-generated container attributes that define the container state, version, rendering method, and base path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/containers/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html\n  q:container=\"paused\"\n  q:version=\"1.9.0\"\n  q:render=\"ssr\"\n  q:base=\"/build/\"\n  q:manifest-hash=\"ggb7b3\"\n  q:instance=\"b0yf84vwuup\"\n>\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining bunServerAdapterOptions Interface in TypeScript\nDESCRIPTION: Declares the bunServerAdapterOptions interface that extends ServerAdapterOptions. It includes an optional 'name' property of type string. This interface is used to configure the Bun server adapter for Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-bun-server/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface bunServerAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Defining JSXOutput Type in TypeScript\nDESCRIPTION: Defines the JSXOutput type which represents any valid output from a Qwik component. This includes JSXNode objects, primitive values (string, number, boolean), null, undefined, or arrays of JSXOutput.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport type JSXOutput =\n  | JSXNode\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | JSXOutput[];\n```\n\n----------------------------------------\n\nTITLE: Running Server-Side Rendering Development Build in Qwik\nDESCRIPTION: Command to start a development build with server-side rendering and client-side module prefetching. Useful for testing SSR during development, but slower than client-only builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev.ssr\n```\n\n----------------------------------------\n\nTITLE: Creating New Routes with Qwik CLI\nDESCRIPTION: Command to create a new route for the /about page using the new 'qwik new' command introduced in Qwik 1.2.0.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm qwik new /about\n```\n\n----------------------------------------\n\nTITLE: Extracted Event Handler in chunk-b.js\nDESCRIPTION: The onClick event handler extracted into its own chunk. It uses lexical scoping to access the store that was captured and passed when the QRL was created.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst Counter_onClick = () => {\n  const [store] = useLexicalScope();\n  return store.count++;\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Component Naive Split - Chunk B\nDESCRIPTION: Final chunk of the naively split component with broken scope references.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter_onRender = () => (\n  <div>\n    {salutation} {props.name}!\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Building Core Qwik Components\nDESCRIPTION: This command builds only the core Qwik and Qwik City components along with their types, which is faster but not sufficient for running the documentation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm build.core\n```\n\n----------------------------------------\n\nTITLE: Qwik Framework Changelog\nDESCRIPTION: Markdown formatted changelog detailing version updates, bug fixes, new features and breaking changes in the Qwik framework. Includes changes to build system, optimizer, and various components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- ‚ú® Introducing the `experimental[]` option to the Vite plugin. This allows you to opt in to features that are not guaranteed to have a stable API.\n\n- üêûü©π fix typo in using useStore()\n\n- üêûü©π gracefully handle image dimensions service errors\n\n- ‚ú® Lib builds no longer perform qwik transformation.\n\n- üêûü©π SSG Link component strips search parameters\n\n- üêûü©π The PrefetchServiceWorker now has a more efficient graph\n\n## 1.8.0\n\n### Minor Changes\n\n- Updated SWC parser means that the optimizer now understands `import ... with` syntax\n- The optimizer plugin will now rely on Rollup to group QRL segments\n- The default asset filenames in the build have changed\n\n### Patch Changes\n\n- The `fileFilter` option to `qwikVite()` now always allows `*.qwik.{m,c,}js` files\n\n## 1.7.3\n\n## 1.7.2\n\n### Patch Changes\n\n- Library builds now correctly generate _fnSignal calls again\n- built files are now under dist/ or lib/\n- fix dev mode on windows\n```\n\n----------------------------------------\n\nTITLE: Building Client-Side Modules for Production in Qwik\nDESCRIPTION: Command to create a production build that generates only the client-side modules that will be dynamically imported by the browser.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-auth/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build.client\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Writer Interface in TypeScript\nDESCRIPTION: Type definition for a stream writer interface that provides a method to write string chunks to a stream.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StreamWriter = {\n  write: (chunk: string) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring QwikBuildMode Type in TypeScript\nDESCRIPTION: Defines the QwikBuildMode type as a union of 'production' and 'development' strings, representing different build modes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikBuildMode = \"production\" | \"development\";\n```\n\n----------------------------------------\n\nTITLE: Adding Static Site Adapter Using Yarn\nDESCRIPTION: This shell command allows for the integration of the static site adapter in a Qwik project using Yarn. It ensures that the project is configured to support static site generation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/static/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add static\n```\n\n----------------------------------------\n\nTITLE: Deploying with Package Managers\nDESCRIPTION: Instructions for deploying a Qwik City app to Google Cloud Run using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/gcp-cloud-run/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Environment Variables for Qwik Insights\nDESCRIPTION: Environment variable configuration for local development with a local database. Sets up the database URL, API token, and authentication base API path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/insights/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPRIVATE_LIBSQL_DB_URL=ws://127.0.0.1:8080\nPRIVATE_LIBSQL_DB_API_TOKEN=(none)\nPRIVATE_AUTH_BASE_API=/api/auth\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik City with NPM\nDESCRIPTION: Command to create a new Qwik City project using NPM package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/qwikcity/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Defining XML-related Properties in TypeScript\nDESCRIPTION: These properties define XML-related attributes, each of type string or undefined.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'xml:base'?: string | undefined;\n'xml:lang'?: string | undefined;\n'xml:space'?: string | undefined;\n'xmlns:xlink'?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik Component with Barrel Structure using Yarn\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the barrel file structure with Yarn.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik new --barrel Button\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in global.css\nDESCRIPTION: This CSS snippet shows how to import the Tailwind CSS styles into the `src/global.css` file.  It also includes comments on how to customize the Tailwind theme and register source files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n/* ... other css stuff ... */\n\n/* ... to customize tailwind follow guidelines at https://tailwindcss.com/docs/theme ... */\n\n/* Explicitly registering sources */\n/* @source \"../node_modules/@your/ui-lib\"; */\n\n/* Setting your base path */\n/* @import \"tailwindcss\" source(\"../src\"); */\n\n/* Disabling automatic detection of source file */\n/* @import \"tailwindcss\" source(none); */\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Project with Builder Integration\nDESCRIPTION: This snippet shows how to create a Qwik project with Builder integration using the CLI. It guides through selecting the Builder starter template and Express server, followed by the necessary commands to install dependencies and start the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/introducing-qwik-starters/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> npm init qwik\nüí´ Let's create a Qwik project üí´\n\n‚úî Project name ‚Ä¶ qwik-builder\n‚úî Select a starter ‚Ä∫ Starter Builder\n‚úî Select a server ‚Ä∫ Express\n\n‚≠êÔ∏è Success! Project saved in qwik-builder directory\n\nüìü Next steps:\n  cd qwik-builder\n  npm install\n  npm start\n\n> (cd qwik-builder; npm install; npm start)\n```\n\n----------------------------------------\n\nTITLE: Inline Styles Using Style Tag in Qwik Components (Not Recommended)\nDESCRIPTION: Example of inline styles in a Qwik component, demonstrating why this approach is not recommended due to duplicate style loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComponent = () => {\n  return (\n    <>\n      <style>.my-class { color: red; }</style>\n      My Component\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PropFunctionProps Type in TypeScript (Obsolete)\nDESCRIPTION: Defines an obsolete type for prop function props, recommending the use of QRL<> on function props instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PropFunctionProps<PROPS extends Record<any, any>> = {\n  [K in keyof PROPS]: PROPS[K] extends undefined\n    ? PROPS[K]\n    : PROPS[K] extends ((...args: infer ARGS) => infer RET) | undefined\n      ? PropFnInterface<ARGS, Awaited<RET>>\n      : PROPS[K];\n};\n```\n\n----------------------------------------\n\nTITLE: Field Error Response for Array-Based Form Validation\nDESCRIPTION: Example of field errors in array notation when validating forms with array structures.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n{\n  \"person[].name\": [\"Invalid string\"],\n  \"person[].email\": [\"Invalid email\"],\n  \"person[].address.street\": [\"Invalid string\"],\n  \"person[].address.city\": [\"Invalid string\"],\n  \"person[].address.state\": [\"Invalid string\"],\n  \"person[].address.zip\": [\"Invalid number\"],\n  \"person[].pets[]\": [\"Required\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of InOrderAuto Interface in TypeScript\nDESCRIPTION: Interface definition for automatic in-order streaming configuration. Contains properties for maximumChunk, maximumInitialChunk, and strategy.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InOrderAuto\n```\n\n----------------------------------------\n\nTITLE: Optimized HTML Rendering for Qwik Components (Qwik v2.0)\nDESCRIPTION: This HTML snippet demonstrates the improved rendering approach in Qwik 2.0. It removes inline virtual nodes and moves component information to separate script tags at the end of the document.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-2-coming-soon/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div q:container=\"paused\" q:render=\"static-ssr\" q:version=\"dev\" \n     q:base=\"/build/\" q:locale q:manifest-hash=\"dev\">\n  <main>\n   Count: 123!\n   <button on:click=\"...\">+1</button>\n  </main>\n  <script type=\"qwik/state\">[...]</script>\n  <script type=\"qwik/vnode\">!{{HDB1}}</script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Complete Production Build in Qwik\nDESCRIPTION: Command to generate a complete production build that creates both client and server modules by running both build commands together.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-auth/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Unit Tests\nDESCRIPTION: Command to execute unit tests using Vitest testing framework.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npnpm test.unit\n```\n\n----------------------------------------\n\nTITLE: Qwik Container DOM Structure\nDESCRIPTION: Shows the HTML comment structure used by Qwik to manage components in the DOM\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/render/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--qv ...-->\\n<q-template />\\n<style />\\n[component content]\\n<!--/qv-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Static Site Adapter in TypeScript\nDESCRIPTION: This TypeScript configuration file sets up the static site adapter for Vite in a Qwik project. It imports necessary modules, extends the base configuration, and specifies options for server-side rendering. Users need to update the 'origin' field with their domain.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/static/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { staticAdapter } from \"@builder.io/qwik-city/adapters/static/vite\";\nimport { extendConfig } from '@builder.io/qwik-city/vite';\nimport baseConfig from '../../vite.config';\n\nexport default extendConfig(baseConfig, () => {\n  return {\n    build: {\n      ssr: true,\n      rollupOptions: {\n        input: ['@qwik-city-plan'],\n      },\n    },\n    plugins: [\n      staticAdapter({\n        origin: 'https://yoursite.qwik.dev',\n      }),\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor for Live Reload - TypeScript\nDESCRIPTION: This snippet updates the capacitor.config.ts file to set the URL for live reloading when running on a device. It specifies the development server's IP address and enables cleartext communication, which is essential for local development environments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: CapacitorConfig = {\n  ...\n  server: {\n    url: 'http://YOUR_IP:5172',\n    cleartext: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Styled Components in Qwik\nDESCRIPTION: Shows how to use a styled component created with styled-vanilla-extract in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { BlueBox } from './styles.css';\n\nexport const Cmp = component$(() => {\n  return <BlueBox />;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Build for Qwik and Qwik City\nDESCRIPTION: This command performs a fast rebuild of Qwik and Qwik City components, skipping type checking and generation for development purposes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm build --dev --qwik --qwikcity\n```\n\n----------------------------------------\n\nTITLE: Rendering Component without DOM Structure Change in Qwik\nDESCRIPTION: This snippet demonstrates a Qwik component that updates a counter value without causing a structural change in the DOM, thus avoiding the use of virtual DOM for rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/faq/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const NoStructuralChange = component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <>\n    {/* This will not cause vDOM to activate. (No DOM structure change, only update text value) */}\n     <div>Count: {count.value}</div>\n     <button onClick$={() => count.value++}>+1</button>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Panda CSS to Qwik with PNPM\nDESCRIPTION: This shell command utilizes PNPM to execute the Qwik CLI and add Panda CSS as a dependency to the Qwik project. It automates the installation process and configures the project for Panda CSS usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/panda-css/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Running Client-Only Development Build for Qwik Docs\nDESCRIPTION: Executes a client-side JavaScript-only build of the Qwik app, ideal for rapid development with Vite. This mode is for development purposes and doesn't fully represent Qwik's server-side rendering capabilities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Defining StaticGenerateResult Interface\nDESCRIPTION: The StaticGenerateResult interface represents the outcome of the static site generation process, including duration, error count, number of rendered pages, and generated static paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-static/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StaticGenerateResult\n```\n\n----------------------------------------\n\nTITLE: Creating New Qwik Route using PNPM\nDESCRIPTION: This command shows how to create a new route for the /contact page using the Qwik utility command with PNPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik new /contact\n```\n\n----------------------------------------\n\nTITLE: Declaring OutputHTMLAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for HTML attributes specific to the 'output' element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OutputHTMLAttributes<T extends Element> extends Attrs<'output', T>\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms Qwik Package\nDESCRIPTION: These commands demonstrate how to install the `@modular-forms/qwik` package using various package managers (pnpm, npm, yarn, and bun). The specific command depends on the package manager used in the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @modular-forms/qwik\n```\n\n----------------------------------------\n\nTITLE: Defining SymbolMapper Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `symbolMapper` property, which is the return type of the `createSymbolMapper` function. This function is used to map symbols (QRLs) to their corresponding bundles, especially in development mode when a full client build and `q-manifest` are not yet available.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nsymbolMapper: ReturnType<typeof createSymbolMapper>;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Qwik Project with Partytown Integration\nDESCRIPTION: This snippet demonstrates creating a Qwik project with Partytown integration, which allows running expensive tasks on web workers. It walks through the CLI prompts for project name, selecting the Partytown starter, and Express server setup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/introducing-qwik-starters/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> npm init qwik\nüí´ Let's create a Qwik project üí´\n\n‚úî Project name ‚Ä¶ qwik-partytown\n‚úî Select a starter ‚Ä∫ Starter Partytown\n‚úî Select a server ‚Ä∫ Express\n\n‚≠êÔ∏è Success! Project saved in qwik-partytown directory\n\nüìü Next steps:\n  cd qwik-partytown\n  npm install\n  npm start\n\n> (cd qwik-partytown; npm install; npm start)\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase dependencies using bun\nDESCRIPTION: This command installs the necessary Supabase JS library and Qwik authentication helpers using bun. These packages are essential for interacting with Supabase from a Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/supabase/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun install @supabase/supabase-js supabase-auth-helpers-qwik\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definitions for @builder.io/qwik-city\nDESCRIPTION: This API report contains type definitions and interfaces that make up the public API of the @builder.io/qwik-city package. It includes imports from core Qwik, middleware components, and defines types for actions, forms, document handling, and content management.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@builder.io/qwik';\nimport { Cookie } from '@builder.io/qwik-city/middleware/request-handler';\nimport { CookieOptions } from '@builder.io/qwik-city/middleware/request-handler';\nimport { CookieValue } from '@builder.io/qwik-city/middleware/request-handler';\nimport { DeferReturn } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { EnvGetter } from '@builder.io/qwik-city/middleware/request-handler';\nimport { JSXOutput } from '@builder.io/qwik';\nimport { QRL } from '@builder.io/qwik';\nimport { QRLEventHandlerMulti } from '@builder.io/qwik';\nimport { QwikIntrinsicElements } from '@builder.io/qwik';\nimport { QwikJSX } from '@builder.io/qwik';\nimport type { ReadonlySignal } from '@builder.io/qwik';\nimport { RequestEvent } from '@builder.io/qwik-city/middleware/request-handler';\nimport { RequestEventAction } from '@builder.io/qwik-city/middleware/request-handler';\nimport { RequestEventBase } from '@builder.io/qwik-city/middleware/request-handler';\nimport { RequestEventCommon } from '@builder.io/qwik-city/middleware/request-handler';\nimport { RequestEventLoader } from '@builder.io/qwik-city/middleware/request-handler';\nimport { RequestHandler } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ResolveSyncValue } from '@builder.io/qwik-city/middleware/request-handler';\nimport type * as v from 'valibot';\nimport type { ValueOrPromise } from '@builder.io/qwik';\nimport { z } from 'zod';\nimport type * as z_2 from 'zod';\n\n// @public (undocumented)\nexport type Action<RETURN, INPUT = Record<string, unknown>, OPTIONAL extends boolean = true> = {\n    (): ActionStore<RETURN, INPUT, OPTIONAL>;\n};\n\n// @public (undocumented)\nexport type ActionConstructor = {\n    <OBJ extends Record<string, any> | void | null, VALIDATOR extends TypedDataValidator, REST extends [DataValidator, ...DataValidator[]]>(actionQrl: (data: GetValidatorOutputType<VALIDATOR>, event: RequestEventAction) => ValueOrPromise<OBJ>, options: {\n        readonly id?: string;\n        readonly validation: [VALIDATOR, ...REST];\n    }): Action<StrictUnion<OBJ | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>> | FailReturn<FailOfRest<REST>>>, GetValidatorInputType<VALIDATOR>, false>;\n    <OBJ extends Record<string, any> | void | null, VALIDATOR extends TypedDataValidator>(actionQrl: (data: GetValidatorOutputType<VALIDATOR>, event: RequestEventAction) => ValueOrPromise<OBJ>, options: {\n        readonly id?: string;\n        readonly validation: [VALIDATOR];\n    }): Action<StrictUnion<OBJ | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>>>, GetValidatorInputType<VALIDATOR>, false>;\n    <OBJ extends Record<string, any> | void | null, REST extends [DataValidator, ...DataValidator[]]>(actionQrl: (data: JSONObject, event: RequestEventAction) => ValueOrPromise<OBJ>, options: {\n        readonly id?: string;\n        readonly validation: REST;\n    }): Action<StrictUnion<OBJ | FailReturn<FailOfRest<REST>>>>;\n    <OBJ extends Record<string, any> | void | null, VALIDATOR extends TypedDataValidator, REST extends [DataValidator, ...DataValidator[]]>(actionQrl: (data: GetValidatorOutputType<VALIDATOR>, event: RequestEventAction) => ValueOrPromise<OBJ>, options: VALIDATOR, ...rest: REST): Action<StrictUnion<OBJ | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>> | FailReturn<FailOfRest<REST>>>, GetValidatorInputType<VALIDATOR>, false>;\n    <OBJ extends Record<string, any> | void | null, VALIDATOR extends TypedDataValidator>(actionQrl: (data: GetValidatorOutputType<VALIDATOR>, event: RequestEventAction) => ValueOrPromise<OBJ>, options: VALIDATOR): Action<StrictUnion<OBJ | FailReturn<ValidatorErrorType<GetValidatorInputType<VALIDATOR>>>>, GetValidatorInputType<VALIDATOR>, false>;\n    <OBJ extends Record<string, any> | void | null, REST extends [DataValidator, ...DataValidator[]]>(actionQrl: (form: JSONObject, event: RequestEventAction) => ValueOrPromise<OBJ>, ...rest: REST): Action<StrictUnion<OBJ | FailReturn<FailOfRest<REST>>>>;\n    <OBJ>(actionQrl: (form: JSONObject, event: RequestEventAction) => ValueOrPromise<OBJ>, options?: {\n        readonly id?: string;\n    }): Action<StrictUnion<OBJ>>;\n};\n\n// @public (undocumented)\nexport type ActionReturn<RETURN> = {\n    readonly status?: number;\n    readonly value: RETURN;\n};\n\n// @public (undocumented)\nexport type ActionStore<RETURN, INPUT, OPTIONAL extends boolean = true> = {\n    readonly actionPath: string;\n    readonly isRunning: boolean;\n    readonly status?: number;\n    readonly formData: FormData | undefined;\n    readonly value: RETURN | undefined;\n    readonly submit: QRL<OPTIONAL extends true ? (form?: INPUT | FormData | SubmitEvent) => Promise<ActionReturn<RETURN>> : (form: INPUT | FormData | SubmitEvent) => Promise<ActionReturn<RETURN>>>;\n    readonly submitted: boolean;\n};\n\n// @public (undocumented)\nexport interface ContentHeading {\n    // (undocumented)\n    readonly id: string;\n    // (undocumented)\n    readonly level: number;\n    // (undocumented)\n    readonly text: string;\n}\n\n// @public (undocumented)\nexport interface ContentMenu {\n    // (undocumented)\n    readonly href?: string;\n    // (undocumented)\n    readonly items?: ContentMenu[];\n    // (undocumented)\n    readonly text: string;\n}\n\nexport { Cookie }\n\nexport { CookieOptions }\n\nexport { CookieValue }\n\n// @public (undocumented)\nexport type DataValidator<T extends Record<string, any> = {}> = {\n    validate(ev: RequestEvent, data: unknown): Promise<ValidatorReturn<T>>;\n};\n\nexport { DeferReturn }\n\n// @public (undocumented)\nexport type DocumentHead = DocumentHeadValue | ((props: DocumentHeadProps) => DocumentHeadValue);\n\n// @public (undocumented)\nexport interface DocumentHeadProps extends RouteLocation {\n    // (undocumented)\n    readonly head: ResolvedDocumentHead;\n    // (undocumented)\n    readonly resolveValue: ResolveSyncValue;\n    // (undocumented)\n    readonly withLocale: <T>(fn: () => T) => T;\n}\n\n// @public (undocumented)\nexport interface DocumentHeadValue<FrontMatter extends Record<string, any> = Record<string, unknown>> {\n    readonly frontmatter?: Readonly<FrontMatter>;\n    readonly links?: readonly DocumentLink[];\n    readonly meta?: readonly DocumentMeta[];\n    // Warning: (ae-incompatible-release-tags) The symbol \"scripts\" is marked as @public, but its signature references \"DocumentScript\" which is marked as @alpha\n    readonly scripts?: readonly DocumentScript[];\n    readonly styles?: readonly DocumentStyle[];\n    readonly title?: string;\n}\n\n// @public (undocumented)\nexport interface DocumentLink {\n    // (undocumented)\n    as?: string;\n    // (undocumented)\n    crossorigin?: string;\n    // (undocumented)\n    disabled?: boolean;\n    // (undocumented)\n    href?: string;\n    // (undocumented)\n    hreflang?: string;\n    // (undocumented)\n    id?: string;\n    // (undocumented)\n    imagesizes?: string;\n    // (undocumented)\n    imagesrcset?: string;\n    // (undocumented)\n    integrity?: string;\n    // (undocumented)\n    key?: string;\n    // (undocumented)\n    media?: string;\n    // (undocumented)\n    prefetch?: string;\n    // (undocumented)\n    referrerpolicy?: string;\n    // (undocumented)\n    rel?: string;\n    // (undocumented)\n    sizes?: string;\n    // (undocumented)\n    title?: string;\n    // (undocumented)\n    type?: string;\n}\n\n// @public (undocumented)\nexport interface DocumentMeta {\n    // (undocumented)\n    readonly content?: string;\n    // (undocumented)\n    readonly httpEquiv?: string;\n    // (undocumented)\n    readonly itemprop?: string;\n    // (undocumented)\n    readonly key?: string;\n    // (undocumented)\n    readonly media?: string;\n    // (undocumented)\n    readonly name?: string;\n    // (undocumented)\n    readonly property?: string;\n}\n\n// @alpha (undocumented)\nexport interface DocumentScript {\n    // (undocumented)\n    readonly key?: string;\n    // (undocumented)\n    readonly props?: Readonly<QwikIntrinsicElements['script']>;\n    // (undocumented)\n    readonly script?: string;\n}\n\n// @public (undocumented)\nexport interface DocumentStyle {\n    // (undocumented)\n    readonly key?: string;\n    // (undocumented)\n    readonly props?: Readonly<QwikIntrinsicElements['style']>;\n    // (undocumented)\n    readonly style: string;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"ErrorBoundaryProps\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport const ErrorBoundary: Component<ErrorBoundaryProps>;\n\n// @public (undocumented)\nexport type FailOfRest<REST extends readonly DataValidator[]> = REST extends readonly DataValidator<infer ERROR>[] ? ERROR : never;\n\n// Warning: (ae-forgotten-export) The symbol \"Failed\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport type FailReturn<T> = T & Failed;\n\n// @public (undocumented)\nexport const Form: <O, I>({ action, spaReset, reloadDocument, onSubmit$, ...rest }: FormProps<O, I>, key: string | null) => JSXOutput;\n\n// @public (undocumented)\nexport interface FormProps<O, I> extends Omit<QwikJSX.IntrinsicElements['form'], 'action' | 'method'> {\n    action?: ActionStore<O, I, true | false>;\n    // (undocumented)\n    key?: string | number | null;\n    onSubmit$?: QRLEventHandlerMulti<SubmitEvent, HTMLFormElement> | undefined;\n    onSubmitCompleted$?: QRLEventHandlerMulti<CustomEvent<FormSubmitSuccessDetail<O>>, HTMLFormElement> | undefined;\n    reloadDocument?: boolean;\n    spaReset?: boolean;\n}\n\n// @public (undocumented)\nexport interface FormSubmitSuccessDetail<T> {\n    // (undocumented)\n    status: number;\n    // (undocumented)\n    value: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest to Qwik project using Bun\nDESCRIPTION: This command utilizes the Qwik CLI to add Vitest to an existing Qwik project using Bun. It simplifies the installation and configuration process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/vitest/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add vitest\n```\n\n----------------------------------------\n\nTITLE: Defining OptimizerOptions Interface in TypeScript\nDESCRIPTION: Interface definition for optimizer options, including binding, inline styles threshold, sourcemap generation, and custom system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OptimizerOptions\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik Component with Barrel Structure using Bun\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the barrel file structure with Bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik new --barrel Button\n```\n\n----------------------------------------\n\nTITLE: Updating Qwik Dependencies\nDESCRIPTION: Command to update project dependencies using an interactive UI.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npnpm deps\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceWorkerRegister Component Type in TypeScript\nDESCRIPTION: Type definition for the ServiceWorkerRegister component which loads and registers service workers defined in routes. It accepts an optional nonce property for content security.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nServiceWorkerRegister: (props: { nonce?: string }) => JSXOutput;\n```\n\n----------------------------------------\n\nTITLE: Definition of PreloaderOptions Interface in TypeScript\nDESCRIPTION: Interface for configuring the preloader behavior. Contains properties for debug mode, buffer size, and probability thresholds for various preloading scenarios.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PreloaderOptions\n```\n\n----------------------------------------\n\nTITLE: Missing Key Prop in Qwik Array - Incorrect\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingArrayKey` case. It demonstrates the incorrect way of omitting a `key` prop to list items generated from an array in a Qwik component, which can lead to poor rendering performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const ColorList = component$(() => {\n  const colors = ['red', 'green', 'blue'];\n\n  return (\n    <ul>\n      {colors.map((color) => (\n        <li>{color}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Building qwik-core with make\nDESCRIPTION: Command to build the qwik-core library using the make utility, which executes the build tasks defined in the Makefile.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Defining RenderToStringOptions Interface - TypeScript\nDESCRIPTION: The RenderToStringOptions interface extends RenderOptions to define configuration options for string-rendering functions. No additional properties are listed beyond what is inherited from RenderOptions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderToStringOptions extends RenderOptions\n```\n\n----------------------------------------\n\nTITLE: Building Client Modules for Qwik Docs Production\nDESCRIPTION: Creates only the client-side modules that are dynamically imported by the browser in the production environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm build.client\n```\n\n----------------------------------------\n\nTITLE: Implementing Over-the-Air Updates with Capawesome in Qwik\nDESCRIPTION: Instructions for installing the Live Update plugin, configuring Capacitor for live updates, and implementing OTA updates in a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @capawesome/capacitor-live-update\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n  plugins: {\n    ...\n    LiveUpdate: {\n      appId: \"YOUR_APP_ID\",\n      // publicKey:\n      //   \"-----BEGIN PUBLIC KEY-----\\nYOUR_PUBLIC_KEY\\n-----END PUBLIC KEY-----\",\n    },\n  },\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  $,\n  component$,\n  useComputed$,\n  useSignal,\n  useVisibleTask$,\n} from \"@builder.io/qwik\";\nimport type { DocumentHead } from \"@builder.io/qwik-city\";\nimport { LiveUpdate } from \"@capawesome/capacitor-live-update\";\n\nconst VERSION = \"1.0.0\";\nconst OTA_SERVER_URL = \"http://YOUR_IP:8000\";\nconst wait = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\nexport default component$(() => {\n  const version = useSignal<string>(VERSION);\n  const updateStatus = useSignal<string | null>(null);\n  const otaUrl = useComputed$(() => `${OTA_SERVER_URL}/${version.value}.zip`);\n\n  const handleUpdate = $(async () => {\n    try {\n      updateStatus.value = `Checking for existing bundle...`;\n      console.log(updateStatus.value);\n      await wait();\n\n      const { bundleIds } = await LiveUpdate.getBundles();\n      const bundleExists = bundleIds.includes(version.value);\n\n      if (bundleExists) {\n        updateStatus.value = `Bundle ${version.value} already exists. Switching to it...`;\n        console.log(updateStatus.value);\n        await wait();\n\n        await LiveUpdate.setNextBundle({ bundleId: version.value });\n        await LiveUpdate.reload();\n\n        updateStatus.value = `Switched to existing bundle ${version.value}!`;\n        console.log(updateStatus.value);\n        await wait();\n      } else {\n        updateStatus.value = `Downloading update from ${otaUrl.value}...`;\n        console.log(updateStatus.value);\n        await wait();\n\n        await LiveUpdate.downloadBundle({\n          url: otaUrl.value,\n          bundleId: version.value,\n        });\n\n        updateStatus.value = \"Applying update...\";\n        console.log(updateStatus.value);\n        await wait();\n\n        await LiveUpdate.setNextBundle({ bundleId: version.value });\n        await LiveUpdate.reload();\n\n        updateStatus.value = \"Update applied successfully!\";\n        console.log(updateStatus.value);\n        await wait();\n      }\n    } catch (error) {\n      updateStatus.value = `Update to ${otaUrl.value} failed. Error: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`;\n      console.error(updateStatus.value);\n      await wait();\n    }\n  });\n\n  useVisibleTask$(async () => {\n    try {\n      updateStatus.value = \"App ready\";\n      console.log(updateStatus.value);\n      await wait();\n\n      LiveUpdate.ready();\n    } catch (error) {\n      (updateStatus.value = \"Error notifying app readiness:\"), error;\n      console.error(updateStatus.value);\n      await wait();\n    }\n  });\n\n  return (\n    <div style={{ padding: \"40px\" }}>\n      <h2>OTA Update</h2>\n      <h3>Current Version: {VERSION}</h3>\n      <p>Enter the version you want to update to and click the button below.</p>\n\n      <div style={{ marginBottom: \"20px\" }}>\n        <label>\n          Version:\n          <input\n            value={version.value}\n            onInput$={(event) =>\n              (version.value = (event.target as HTMLInputElement).value)\n            }\n            style={{\n              marginLeft: \"10px\",\n              padding: \"8px\",\n              fontSize: \"14px\",\n              borderRadius: \"5px\",\n              border: \"1px solid #ccc\",\n            }}\n          />\n        </label>\n      </div>\n\n      <button\n        onClick$={handleUpdate}\n        style={{\n          marginTop: \"10px\",\n          padding: \"10px 20px\",\n          fontSize: \"14px\",\n          cursor: \"pointer\",\n          borderRadius: \"5px\",\n          border: \"none\",\n          backgroundColor: \"#0078D4\",\n          color: \"#fff\",\n        }}\n      >\n        Update Now\n      </button>\n\n      {updateStatus.value && (\n        <p style={{ marginTop: \"20px\" }}>{updateStatus.value}</p>\n      )}\n    </div>\n  );\n});\n\nexport const head: DocumentHead = {\n  title: \"Dynamic OTA Update with Capawesome\",\n  meta: [\n    {\n      name: \"description\",\n      content: \"Qwik app with OTA updates.\",\n    },\n  ],\n};\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\nnpx cap sync\nnpx cap run ios     # Runs the app in an iOS simulator\nnpx cap run android # Runs the app in an Android emulator\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ota_bundles # Only required the first time\npnpm run build\nzip -r ota_bundles/VERSION.zip dist/*\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx serve ota_bundles -l 8000\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Wrapper Component with QwikIntrinsicElements\nDESCRIPTION: Example showing how to create a customizable wrapper component using QwikIntrinsicElements for type-safe attribute handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_73\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot, type QwikIntrinsicElements } from \"@builder.io/qwik\";\n\ntype WrapperProps = {\n  attributes?: QwikIntrinsicElements[\"div\"];\n};\n\nexport default component$<WrapperProps>(({ attributes }) => {\n  return (\n    <div {...attributes} class=\"p-2\">\n      <Slot />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Edge Function in TOML\nDESCRIPTION: This TOML snippet demonstrates how to add a custom edge function declaration in the netlify.toml file. It associates the '/admin' path with an 'auth' function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/netlify-edge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[edge_functions]]\n  path = \"/admin\"\n  function = \"auth\"\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-image using pnpm\nDESCRIPTION: Command to install the qwik-image package using pnpm package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npnpm install qwik-image\n```\n\n----------------------------------------\n\nTITLE: Defining Diagnostic Interface in TypeScript\nDESCRIPTION: Interface definition for diagnostic information, including category, code, file, highlights, message, scope, and suggestions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Diagnostic\n```\n\n----------------------------------------\n\nTITLE: Adding Panda CSS to Qwik with Bun\nDESCRIPTION: This shell command utilizes Bun to execute the Qwik CLI and add Panda CSS as a dependency to the Qwik project. It automates the installation process and configures the project for Panda CSS usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/panda-css/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Declaring Form Component in TypeScript\nDESCRIPTION: Declares the Form component function that takes FormProps and a key, returning a JSX output.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nForm: <O, I>(\n  { action, spaReset, reloadDocument, onSubmit$, ...rest }: FormProps<O, I>,\n  key: string | null,\n) => import(\"@builder.io/qwik\").JSXOutput;\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Qwik Preset (Bun)\nDESCRIPTION: This command uses Bun to create a new Nx workspace named 'org-workspace' with the 'qwik-nx' preset, pre-configured for Qwik development. It leverages the create-nx-workspace package to set up the workspace.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbunx create-nx-workspace@latest org-workspace --preset=qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Properties in Markdown Table\nDESCRIPTION: This markdown table defines two properties for a resource object: 'name' and 'path'. It specifies the property names, their data types (both strings), and provides brief descriptions for each.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/qwikcity-test/src/routes/mdx/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | Type   | Description          |\n| ------ | ------ | -------------------- |\n| `name` | string | Name of the resource |\n| `path` | string | Path to the resource |\n```\n\n----------------------------------------\n\nTITLE: Defining Optimizer Interface in TypeScript\nDESCRIPTION: Interface definition for the Qwik optimizer, including methods for transforming file systems and modules.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Optimizer\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind with bun in Shell\nDESCRIPTION: The shell command to integrate Tailwind CSS into a Qwik project using the bun package manager. It installs necessary dependencies for Tailwind CSS v3. Required dependency: bun package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind-v3/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add tailwind-v3\n```\n\n----------------------------------------\n\nTITLE: Defining Transform Options Interface in TypeScript\nDESCRIPTION: Comprehensive interface for transformation options including compilation settings, directory paths, and various transformation flags.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/src/api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformOptions {\n    entryStrategy?: EntryStrategy;\n    explicitExtensions?: boolean;\n    isServer?: boolean;\n    minify?: MinifyMode;\n    mode?: EmitMode;\n    preserveFilenames?: boolean;\n    regCtxName?: string[];\n    rootDir?: string;\n    scope?: string;\n    sourceMaps?: boolean;\n    srcDir: string;\n    stripCtxName?: string[];\n    stripEventHandlers?: boolean;\n    stripExports?: string[];\n    transpileJsx?: boolean;\n    transpileTs?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: SSR Link Preload Tag\nDESCRIPTION: HTML link tag used for early preloading of bundles during Server-Side Rendering\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/server/preloading.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"bundlepreload\">\n```\n\n----------------------------------------\n\nTITLE: Adding Bootstrap Using bun\nDESCRIPTION: This bun script adds Bootstrap to a Qwik application, ensuring the project dependencies are updated and the necessary files for component integration are created.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/bootstrap/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add bootstrap\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentAnalysis Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `SegmentAnalysis` interface, which describes the structure for analyzing code segments within Qwik. The interface includes properties like `canonicalFilename`, `captures`, `ctxKind`, `ctxName`, `displayName`, `entry`, `extension`, `hash`, `loc`, `name`, `origin`, and `parent`, providing metadata about each code segment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface SegmentAnalysis\n```\n```\n\n----------------------------------------\n\nTITLE: Using Proper HTML Attributes in Qwik\nDESCRIPTION: Shows the preferred way of using standard HTML attributes 'class' and 'for' instead of React-specific props in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<MyReactComponent class=\"foo\" for=\"#password\" />;\n```\n\n----------------------------------------\n\nTITLE: PlatformNode Interface for Node.js Environment\nDESCRIPTION: Defines the PlatformNode interface that describes Node.js-specific platform features for Qwik. It includes optional properties for the incoming HTTP request object and platform identification.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-node/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformNode\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Pages Adapter with pnpm\nDESCRIPTION: This shell command installs the Cloudflare Pages adapter for Qwik City using pnpm. It updates the build scripts in package.json and creates necessary adapter configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add cloudflare-pages\n```\n\n----------------------------------------\n\nTITLE: Declaring Deprecated Service Worker Setup Function in TypeScript\nDESCRIPTION: Exports a deprecated public function named setupServiceWorker that handles service worker initialization. The function takes no parameters and returns void.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/service-worker/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public @deprecated (undocumented)\nexport const setupServiceWorker: () => void;\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS in Qwik\nDESCRIPTION: This command installs Tailwind CSS in a Qwik project.  It uses the `qwik add tailwind` command which automates the installation and setup process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/theme-management/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-image using bun\nDESCRIPTION: Command to install the qwik-image package using bun package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nbun install qwik-image\n```\n\n----------------------------------------\n\nTITLE: Defining createDOM Function in TypeScript for @builder.io/qwik\nDESCRIPTION: This snippet defines the createDOM function, which is part of the public API for @builder.io/qwik. It creates a DOM environment for rendering JSX elements and simulating user events. The function returns an object with methods for rendering, accessing the screen, and triggering user events.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/testing/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport const createDOM: ({ html }?: {\n    html?: string;\n}) => Promise<{\n    render: (jsxElement: JSXOutput) => Promise<RenderResult>;\n    screen: HTMLElement;\n    userEvent: (queryOrElement: string | Element | keyof HTMLElementTagNameMap | null, eventNameCamel: string | keyof WindowEventMap, eventPayload?: any) => Promise<void>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Using Lucide Icons with qwikest/icons - TypeScript\nDESCRIPTION: Demonstrates how to use specific icons from the qwikest/icons package in a Qwik component. It imports the LuRocket icon from the Lucide set and renders it with inherited size and color from the parent styles. Requires the qwikest/icons package and a Qwik application setup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/icons/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LuRocket } from \"@qwikest/icons/lucide\";\n\nexport const MyComponent = component$(() => {\n  // Icon size and color are inherited by default ‚¨áÔ∏è\n  return (\n    <div style={{ color: \"red\", fontSize: \"40px\" }}>\n      <LuRocket />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Qwik Project with CLI\nDESCRIPTION: Command to create a new Qwik project using the CLI. This is the first step in setting up your hybrid native app development environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Defining ContentHeading Interface in Qwik City\nDESCRIPTION: Interface definition for ContentHeading which represents a section heading in content. It includes properties for the heading's ID, nesting level, and text content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContentHeading\n```\n\n----------------------------------------\n\nTITLE: Working with Props and Component Communication\nDESCRIPTION: Shows how to pass props between parent and child components in both frameworks. Qwik simplifies state sharing through stores.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Parent = (() => {\n  const [ count, setCount ] = useState<number>(0);\n\n  const increment = (() => {\n    setCount((prev) => prev + 1)\n  })\n  return <Child count={count} increment={increment} />;\n})\n\ninterface ChildProps {\n  count: number;\n  increment: () => void;\n}\n\nexport const Child = ((props: ChildProps) => {\n  return (\n    <>\n      <button onClick={props.increment}>Increment</button>\n      <p>Count: {props.count}</p>\n    </>\n  );\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Parent = component$(() => {\n  const userData = useStore({ count: 0 });\n  return <Child userData={userData} />;\n});\n\ninterface ChildProps {\n  userData: { count: number };\n}\n\nexport const Child = component$<ChildProps>(({ userData }) => {\n  return (\n    <>\n      <button onClick$={() => userData.count++}>Increment</button>\n      <p>Count: {userData.count}</p>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik API Types and Functions in TypeScript\nDESCRIPTION: This code snippet defines various interfaces, types, and functions for the Qwik framework's server-side rendering API. It includes options for rendering to string or stream, prefetching strategies, and manifest resolution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/server/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { QwikManifest } from '@builder.io/qwik/optimizer';\nimport type { ResolvedManifest } from '@builder.io/qwik/optimizer';\nimport type { SnapshotResult } from '@builder.io/qwik';\nimport type { StreamWriter } from '@builder.io/qwik';\nimport type { SymbolMapperFn } from '@builder.io/qwik/optimizer';\n\n// @public\nexport function getQwikLoaderScript(opts?: {\n    debug?: boolean;\n}): string;\n\n// @public\nexport function getQwikPrefetchWorkerScript(opts?: {\n    debug?: boolean;\n}): string;\n\n// @public (undocumented)\nexport interface InOrderAuto {\n    // (undocumented)\n    maximunChunk?: number;\n    // (undocumented)\n    maximunInitialChunk?: number;\n    // (undocumented)\n    strategy: 'auto';\n}\n\n// @public (undocumented)\nexport interface InOrderDisabled {\n    // (undocumented)\n    strategy: 'disabled';\n}\n\n// Warning: (ae-forgotten-export) The symbol \"InOrderDirect\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport type InOrderStreaming = InOrderAuto | InOrderDisabled | InOrderDirect;\n\n// @public @deprecated (undocumented)\nexport interface PrefetchImplementation {\n    // @deprecated (undocumented)\n    linkFetchPriority?: 'auto' | 'low' | 'high' | null;\n    // @deprecated (undocumented)\n    linkInsert?: 'js-append' | 'html-append' | null;\n    // @deprecated (undocumented)\n    linkRel?: 'prefetch' | 'preload' | 'modulepreload' | null;\n    // @deprecated (undocumented)\n    prefetchEvent?: 'always' | null;\n    // @deprecated (undocumented)\n    workerFetchInsert?: 'always' | 'no-link-support' | null;\n}\n\n// @public (undocumented)\nexport interface PrefetchResource {\n    // (undocumented)\n    imports: PrefetchResource[];\n    // (undocumented)\n    url: string;\n}\n\n// @public (undocumented)\nexport interface PrefetchStrategy {\n    // (undocumented)\n    implementation?: PrefetchImplementation;\n    // (undocumented)\n    symbolsToPrefetch?: SymbolsToPrefetch;\n}\n\n// @public (undocumented)\nexport interface PreloaderOptions {\n    debug?: boolean;\n    maxBufferedPreloads?: number;\n    preloadProbability?: number;\n    ssrPreloadProbability?: number;\n    ssrPreloads?: number;\n}\n\n// @public (undocumented)\nexport interface QwikLoaderOptions {\n    // (undocumented)\n    include?: 'always' | 'never' | 'auto';\n    // (undocumented)\n    position?: 'top' | 'bottom';\n}\n\n// @public (undocumented)\nexport type Render = RenderToString | RenderToStream;\n\n// @public (undocumented)\nexport interface RenderOptions extends SerializeDocumentOptions {\n    base?: string | ((options: RenderOptions) => string);\n    // (undocumented)\n    containerAttributes?: Record<string, string>;\n    containerTagName?: string;\n    locale?: string | ((options: RenderOptions) => string);\n    // @deprecated (undocumented)\n    prefetchStrategy?: PrefetchStrategy | null;\n    // (undocumented)\n    preloader?: PreloaderOptions | boolean;\n    qwikLoader?: QwikLoaderOptions;\n    // Warning: (ae-forgotten-export) The symbol \"QwikPrefetchServiceWorkerOptions\" needs to be exported by the entry point index.d.ts\n    //\n    // @deprecated (undocumented)\n    qwikPrefetchServiceWorker?: QwikPrefetchServiceWorkerOptions;\n    // (undocumented)\n    serverData?: Record<string, any>;\n    snapshot?: boolean;\n}\n\n// @public (undocumented)\nexport interface RenderResult {\n    // (undocumented)\n    isStatic: boolean;\n    // (undocumented)\n    manifest?: QwikManifest;\n    // (undocumented)\n    prefetchResources: PrefetchResource[];\n    // (undocumented)\n    snapshotResult: SnapshotResult | undefined;\n}\n\n// @public (undocumented)\nexport type RenderToStream = (opts: RenderToStreamOptions) => Promise<RenderToStreamResult>;\n\n// @public\nexport function renderToStream(rootNode: any, opts: RenderToStreamOptions): Promise<RenderToStreamResult>;\n\n// @public (undocumented)\nexport interface RenderToStreamOptions extends RenderOptions {\n    // (undocumented)\n    stream: StreamWriter;\n    // (undocumented)\n    streaming?: StreamingOptions;\n}\n\n// @public (undocumented)\nexport interface RenderToStreamResult extends RenderResult {\n    // (undocumented)\n    flushes: number;\n    // (undocumented)\n    size: number;\n    // (undocumented)\n    timing: {\n        firstFlush: number;\n        render: number;\n        snapshot: number;\n    };\n}\n\n// @public (undocumented)\nexport type RenderToString = (opts: RenderToStringOptions) => Promise<RenderToStringResult>;\n\n// @public\nexport function renderToString(rootNode: any, opts?: RenderToStringOptions): Promise<RenderToStringResult>;\n\n// @public (undocumented)\nexport interface RenderToStringOptions extends RenderOptions {\n}\n\n// @public (undocumented)\nexport interface RenderToStringResult extends RenderResult {\n    // (undocumented)\n    html: string;\n    // (undocumented)\n    timing: {\n        render: number;\n        snapshot: number;\n    };\n}\n\n// Warning: (ae-forgotten-export) The symbol \"ResolvedManifest_2\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function resolveManifest(manifest?: Partial<QwikManifest | ResolvedManifest_2> | undefined): ResolvedManifest_2 | undefined;\n\n// @public (undocumented)\nexport interface SerializeDocumentOptions {\n    // (undocumented)\n    debug?: boolean;\n    // (undocumented)\n    manifest?: Partial<QwikManifest | ResolvedManifest>;\n    // (undocumented)\n    symbolMapper?: SymbolMapperFn;\n}\n\n// @public (undocumented)\nexport function setServerPlatform(manifest?: Partial<QwikManifest | ResolvedManifest>): Promise<void>;\n\n// @public (undocumented)\nexport interface StreamingOptions {\n    // (undocumented)\n    inOrder?: InOrderStreaming;\n}\n\n// @public\nexport type SymbolsToPrefetch = 'auto' | ((opts: {\n    manifest: QwikManifest;\n}) => PrefetchResource[]);\n\n// @public (undocumented)\nexport const versions: {\n    readonly qwik: string;\n    readonly qwikDom: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Function setServerPlatform Declaration - TypeScript\nDESCRIPTION: Declares setServerPlatform, a function to set the server platform using an optional manifest. It returns a Promise<void>, and helps configure the environment context.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function setServerPlatform(\n  manifest?: Partial<QwikManifest | ResolvedManifest>,\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Qwik Node.js Application\nDESCRIPTION: This shell command starts a Docker container from the previously built image. It maps port 3000 of the container to port 3000 on the host machine and runs the container in detached mode.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/node-docker-deploy/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -dp 127.0.0.1:3000:3000 your-image\n```\n\n----------------------------------------\n\nTITLE: Installing @builder.io/qwik with Bun\nDESCRIPTION: This command installs the core Qwik library using Bun. It is necessary to install this manually if the package manager fails to install peer dependencies automatically and a warning is thrown during startup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n\"bun install @builder.io/qwik\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Node Server Adapter Function\nDESCRIPTION: TypeScript declaration for the nodeServerAdapter function that adapts Qwik City for Node.js servers. Takes optional NodeServerAdapterOptions parameter and returns any type. This is an alpha preview API.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-node-server/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function nodeServerAdapter(opts?: NodeServerAdapterOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Database - Shell\nDESCRIPTION: This snippet illustrates commands to create an SQLite database and define its schema, suited for local development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/turso/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsqlite3 foo.db\n```\n\nLANGUAGE: shell\nCODE:\n```\ncreate table todo (id integer not null, task text, done int default 0);\n```\n\nLANGUAGE: shell\nCODE:\n```\ninsert into todo(id, task) values(1, \"Go to the gym\");\n```\n\nLANGUAGE: shell\nCODE:\n```\ninsert into todo(id, task) values(2, \"Buy groceries\");\n```\n\n----------------------------------------\n\nTITLE: Declaring zodQrl Constant for Qwik City Zod Validation\nDESCRIPTION: Declares a zodQrl constant of type ZodConstructorQRL, which is likely a QRL (Qwik Resource Loader) wrapper around the ZodConstructor for lazy-loading Zod validation logic.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nzodQrl: ZodConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Defining ImgHTMLAttributes Interface in TypeScript\nDESCRIPTION: The ImgHTMLAttributes interface extends the Attrs for 'img' elements, providing attribute type definitions specific to image elements within Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ImgHTMLAttributes<T extends Element> extends Attrs<'img', T>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Settings\nDESCRIPTION: Example configuration for Capacitor in TypeScript. This sets up the app ID, name, output directory for the static build, and schemes for iOS and Android platforms.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.example.app',\n  appName: 'my-qwik-empty-starter',\n  webDir: 'dist',\n  server: {\n    iosScheme: 'capacitor',\n    androidScheme: 'https'\n  }\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining TransformModuleInput Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `TransformModuleInput` interface for Qwik. It specifies the input structure for transforming a module, including properties like `code`, `devPath` (optional), and `path`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface TransformModuleInput\n```\n```\n\n----------------------------------------\n\nTITLE: Optimized Qwik Component Output\nDESCRIPTION: This set of snippets shows how Qwik optimizes and splits the component code into separate modules. It includes the main app file, the component file, and the event handler file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/faq/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { componentQrl, qrl } from '@builder.io/qwik';\n\nconst App = /*#__PURE__*/ componentQrl(\n  qrl(() => import('./app_component_akbu84a8zes.js'), 'App_component_AkbU84a8zes')\n);\n\nexport { App };\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { jsx as _jsx } from '@builder.io/qwik/jsx-runtime';\nimport { qrl } from '@builder.io/qwik';\nexport const App_component_AkbU84a8zes = () => {\n  console.log('render');\n  return /*#__PURE__*/ _jsx('p', {\n    onClick$: qrl(\n      () => import('./app_component_p_onclick_01pegc10cpw'),\n      'App_component_p_onClick_01pEgC10cpw'\n    ),\n    children: 'Hello Qwik',\n  });\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nexport const App_component_p_onClick_01pEgC10cpw = () => console.log('hello');\n```\n\n----------------------------------------\n\nTITLE: Rendering Qwik Components with Virtual Nodes in HTML (Qwik v1)\nDESCRIPTION: This HTML snippet shows how Qwik v1 renders components with virtual nodes as comments. It includes component boundaries, signal placeholders, and attributes for resumability.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-2-coming-soon/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div q:container=\"paused\" q:render=\"static-ssr\" q:version=\"dev\" \n     q:base=\"/build/\" q:locale q:manifest-hash=\"dev\">\n  <main>\n    <!--qv q:s q:sref=5 q:key=-->\n      <!--qv q:id=7 q:key=xYL1:zl_0-->\n        <!--qv q:key=H1_0-->\n          Count: \n          <!--t=8-->123<!---->! \n          <button on:click=\"...\" q:id=\"9\">\n            +1\n          </button>\n        <!--/qv-->\n      <!--/qv-->\n    <!--/qv-->\n  </main>\n  <script type=\"qwik/json\">{...}</script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Production Deploy\nDESCRIPTION: This snippet explains the process for deploying the application in production, including necessary configurations for origin and running the server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/node/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nORIGIN=https://example.com node server/entry.express\n```\n```\n\n----------------------------------------\n\nTITLE: Defining API Types for @builder.io/qwik-city in TypeScript\nDESCRIPTION: This code snippet defines various interfaces, types, and classes for the Qwik City framework. It includes definitions for request handling, server-side rendering, caching, cookies, and other core functionalities.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/request-handler/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Action } from '@builder.io/qwik-city';\nimport type { _deserializeData } from '@builder.io/qwik';\nimport type { EnvGetter as EnvGetter_2 } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { FailReturn } from '@builder.io/qwik-city';\nimport type { Loader as Loader_2 } from '@builder.io/qwik-city';\nimport type { QwikCityPlan } from '@builder.io/qwik-city';\nimport type { QwikIntrinsicElements } from '@builder.io/qwik';\nimport type { Render } from '@builder.io/qwik/server';\nimport type { RenderOptions } from '@builder.io/qwik/server';\nimport type { RequestEvent as RequestEvent_2 } from '@builder.io/qwik-city';\nimport type { RequestHandler as RequestHandler_2 } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ResolveSyncValue as ResolveSyncValue_2 } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { _serializeData } from '@builder.io/qwik';\nimport type { ValueOrPromise } from '@builder.io/qwik';\nimport type { _verifySerializable } from '@builder.io/qwik';\n\n// @public (undocumented)\nexport class AbortMessage {\n}\n\n// @public (undocumented)\nexport type CacheControl = CacheControlOptions | number | 'day' | 'week' | 'month' | 'year' | 'no-cache' | 'immutable' | 'private';\n\n// @public (undocumented)\nexport interface ClientConn {\n    // (undocumented)\n    country?: string;\n    // (undocumented)\n    ip?: string;\n}\n\n// @public (undocumented)\nexport interface Cookie {\n    append(name: string, value: string | number | Record<string, any>, options?: CookieOptions): void;\n    delete(name: string, options?: Pick<CookieOptions, 'path' | 'domain' | 'sameSite'>): void;\n    get(name: string): CookieValue | null;\n    getAll(): Record<string, CookieValue>;\n    has(name: string): boolean;\n    headers(): string[];\n    set(name: string, value: string | number | Record<string, any>, options?: CookieOptions): void;\n}\n\n// @public\nexport interface CookieOptions {\n    domain?: string;\n    expires?: Date | string;\n    httpOnly?: boolean;\n    maxAge?: number | [number, 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks'];\n    path?: string;\n    sameSite?: 'strict' | 'lax' | 'none' | 'Strict' | 'Lax' | 'None' | boolean;\n    secure?: boolean;\n}\n\n// @public (undocumented)\nexport interface CookieValue {\n    // (undocumented)\n    json: <T = unknown>() => T;\n    // (undocumented)\n    number: () => number;\n    // (undocumented)\n    value: string;\n}\n\n// @public (undocumented)\nexport type DeferReturn<T> = () => Promise<T>;\n\n// @public (undocumented)\nexport interface EnvGetter {\n    // (undocumented)\n    get(key: string): string | undefined;\n}\n\n// @public (undocumented)\nexport function getErrorHtml(status: number, e: any): string;\n\n// @public (undocumented)\nexport const mergeHeadersCookies: (headers: Headers, cookies: Cookie) => Headers;\n\n// @public (undocumented)\nexport class RedirectMessage extends AbortMessage {\n}\n\n// @public (undocumented)\nexport interface RequestEvent<PLATFORM = QwikCityPlatform> extends RequestEventCommon<PLATFORM> {\n    readonly exited: boolean;\n    readonly getWritableStream: () => WritableStream<Uint8Array>;\n    readonly headersSent: boolean;\n    readonly next: () => Promise<void>;\n}\n\n// @public (undocumented)\nexport interface RequestEventAction<PLATFORM = QwikCityPlatform> extends RequestEventCommon<PLATFORM> {\n    // (undocumented)\n    fail: <T extends Record<string, any>>(status: number, returnData: T) => FailReturn<T>;\n}\n\n// @public (undocumented)\nexport interface RequestEventBase<PLATFORM = QwikCityPlatform> {\n    readonly basePathname: string;\n    readonly cacheControl: (cacheControl: CacheControl, target?: CacheControlTarget) => void;\n    readonly clientConn: ClientConn;\n    readonly cookie: Cookie;\n    readonly env: EnvGetter;\n    readonly headers: Headers;\n    readonly method: string;\n    readonly params: Readonly<Record<string, string>>;\n    readonly parseBody: () => Promise<unknown>;\n    readonly pathname: string;\n    readonly platform: PLATFORM;\n    readonly query: URLSearchParams;\n    readonly request: Request;\n    readonly sharedMap: Map<string, any>;\n    readonly signal: AbortSignal;\n    readonly url: URL;\n}\n\n// @public (undocumented)\nexport interface RequestEventCommon<PLATFORM = QwikCityPlatform> extends RequestEventBase<PLATFORM> {\n    readonly error: <T = any>(statusCode: ErrorCodes, message: T) => ServerError<T>;\n    // (undocumented)\n    readonly exit: () => AbortMessage;\n    readonly html: (statusCode: StatusCodes, html: string) => AbortMessage;\n    readonly json: (statusCode: StatusCodes, data: any) => AbortMessage;\n    readonly locale: (local?: string) => string;\n    readonly redirect: (statusCode: RedirectCode, url: string) => RedirectMessage;\n    readonly send: SendMethod;\n    readonly status: (statusCode?: StatusCodes) => number;\n    readonly text: (statusCode: StatusCodes, text: string) => AbortMessage;\n}\n\n// @public (undocumented)\nexport interface RequestEventLoader<PLATFORM = QwikCityPlatform> extends RequestEventAction<PLATFORM> {\n    // (undocumented)\n    defer: <T>(returnData: Promise<T> | (() => Promise<T>)) => DeferReturn<T>;\n    // (undocumented)\n    resolveValue: ResolveValue;\n}\n\n// @public (undocumented)\nexport type RequestHandler<PLATFORM = QwikCityPlatform> = (ev: RequestEvent<PLATFORM>) => Promise<void> | void;\n\n// @public\nexport function requestHandler<T = unknown>(serverRequestEv: ServerRequestEvent<T>, opts: ServerRenderOptions, qwikSerializer: QwikSerializer): Promise<QwikCityRun<T> | null>;\n\n// @public (undocumented)\nexport interface ResolveSyncValue {\n    // (undocumented)\n    <T>(loader: Loader_2<T>): Awaited<T> extends () => any ? never : Awaited<T>;\n    // (undocumented)\n    <T>(action: Action<T>): Awaited<T> | undefined;\n}\n\n// @public (undocumented)\nexport interface ResolveValue {\n    // (undocumented)\n    <T>(loader: Loader_2<T>): Awaited<T> extends () => any ? never : Promise<T>;\n    // (undocumented)\n    <T>(action: Action<T>): Promise<T | undefined>;\n}\n\n// @public (undocumented)\nexport class ServerError<T = any> extends Error {\n    constructor(status: number, data: T);\n    // (undocumented)\n    data: T;\n    // (undocumented)\n    status: number;\n}\n\n// @public (undocumented)\nexport interface ServerRenderOptions extends RenderOptions {\n    checkOrigin?: boolean;\n    // (undocumented)\n    qwikCityPlan: QwikCityPlan;\n    // (undocumented)\n    render: Render;\n}\n\n// @public\nexport interface ServerRequestEvent<T = unknown> {\n    // (undocumented)\n    env: EnvGetter;\n    // (undocumented)\n    getClientConn: () => ClientConn;\n    // (undocumented)\n    getWritableStream: ServerResponseHandler<T>;\n    // (undocumented)\n    locale: string | undefined;\n    // (undocumented)\n    mode: ServerRequestMode;\n    // (undocumented)\n    platform: QwikCityPlatform;\n    // (undocumented)\n    request: Request;\n    // (undocumented)\n    url: URL;\n}\n\n// @public (undocumented)\nexport type ServerRequestMode = 'dev' | 'static' | 'server';\n\n// @public (undocumented)\nexport type ServerResponseHandler<T = any> = (status: number, headers: Headers, cookies: Cookie, resolve: (response: T) => void, requestEv: RequestEventInternal) => WritableStream<Uint8Array>;\n\n// @internal (undocumented)\nexport class _TextEncoderStream_polyfill {\n    // (undocumented)\n    get [Symbol.toStringTag](): string;\n    // (undocumented)\n    get encoding(): string;\n    // (undocumented)\n    get readable(): ReadableStream<Uint8Array>;\n    // (undocumented)\n    get writable(): WritableStream<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Server Modules for Qwik Docs Production\nDESCRIPTION: Generates the server-side render (SSR) module used by the server to render HTML in the production environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build.ssr\n```\n\n----------------------------------------\n\nTITLE: Dynamic Routes Directory Structure in Qwik City\nDESCRIPTION: Example showing dynamic route structure with parameters and catch-all routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/routing/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ blog/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx         # https://example.com/blog\n    ‚îú‚îÄ‚îÄ post/\n    ‚îÇ   ‚îî‚îÄ‚îÄ [...all]/\n    ‚îÇ       ‚îî‚îÄ‚îÄ index.tsx     # https://example.com/post/2020/id/title\n    ‚îî‚îÄ‚îÄ user/\n        ‚îî‚îÄ‚îÄ [username]/\n            ‚îî‚îÄ‚îÄ index.tsx     # https://example.com/user/foo\n```\n\n----------------------------------------\n\nTITLE: Defining Type Utilities for Qwik City Data Validators in TypeScript\nDESCRIPTION: Defines utility types for working with data validators in Qwik City, including getting input and output types from validators. Supports both Valibot and Zod validators.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type GetValidatorInputType<VALIDATOR extends TypedDataValidator> = VALIDATOR extends ValibotDataValidator<infer TYPE> ? v.InferInput<TYPE> : VALIDATOR extends ZodDataValidator<infer TYPE> ? z_2.input<TYPE> : never;\n\nexport type GetValidatorOutputType<VALIDATOR extends TypedDataValidator> = VALIDATOR extends ValibotDataValidator<infer TYPE> ? v.InferOutput<TYPE> : VALIDATOR extends ZodDataValidator<infer TYPE> ? z_2.output<TYPE> : never;\n\nexport type GetValidatorType<VALIDATOR extends TypedDataValidator> = GetValidatorOutputType<VALIDATOR>;\n```\n\n----------------------------------------\n\nTITLE: Installing @builder.io/qwik with PNPM\nDESCRIPTION: This command manually installs the `@builder.io/qwik` package using PNPM. It is needed if the package manager does not automatically resolve peer dependencies and a warning is thrown when starting Astro.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm install @builder.io/qwik\"\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms Qwik Package\nDESCRIPTION: These commands demonstrate how to install the `@modular-forms/qwik` package using various package managers (pnpm, npm, yarn, and bun). The specific command depends on the package manager used in the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @modular-forms/qwik\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City API Types and Functions in TypeScript\nDESCRIPTION: This code snippet defines the public API for the @builder.io/qwik-city package, including interfaces for adapter options, SSG configuration, and utility functions for path resolution. It imports types from Vite and the qwik-city/static packages and exports constants and functions for use in Qwik City applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/shared/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin as Plugin_2 } from 'vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\nimport type { UserConfig } from 'vite';\n\n// @public (undocumented)\nexport interface AdapterSSGOptions extends Omit<StaticGenerateRenderOptions, 'outDir' | 'origin'> {\n    exclude?: string[];\n    include: string[];\n    origin?: string;\n}\n\n// @public (undocumented)\nexport function getParentDir(startDir: string, dirName: string): string;\n\n// @public (undocumented)\nexport const NOT_FOUND_PATHS_ID = \"@qwik-city-not-found-paths\";\n\n// @public (undocumented)\nexport const RESOLVED_NOT_FOUND_PATHS_ID = \"@qwik-city-not-found-paths.js\";\n\n// @public (undocumented)\nexport const RESOLVED_STATIC_PATHS_ID = \"@qwik-city-static-paths.js\";\n\n// @public (undocumented)\nexport interface ServerAdapterOptions {\n    ssg?: AdapterSSGOptions | null;\n}\n\n// @public (undocumented)\nexport const STATIC_PATHS_ID = \"@qwik-city-static-paths\";\n\n// Warning: (ae-forgotten-export) The symbol \"ViteAdapterPluginOptions\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport function viteAdapter(opts: ViteAdapterPluginOptions): Plugin_2<never>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Transform Module Interfaces in TypeScript\nDESCRIPTION: Interfaces for module transformation input and output, including code content, path information, and analysis results.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/src/api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformModule {\n    code: string;\n    isEntry: boolean;\n    map: string | null;\n    origPath: string | null;\n    path: string;\n    segment: SegmentAnalysis | null;\n}\n\nexport interface TransformModuleInput {\n    code: string;\n    devPath?: string;\n    path: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotState Interface for State Serialization\nDESCRIPTION: Interface that defines the structure of serialized state in a Qwik application snapshot, including context metadata, objects, references, and subscriptions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnapshotState\n```\n\n----------------------------------------\n\nTITLE: Building Application for Production\nDESCRIPTION: This snippet indicates how to build the application for production using the 'build' command, which compiles server and client code.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/node/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\npnpm run build\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nnpm run build\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nyarn run build\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun run build\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @qwikdev/astro with Yarn\nDESCRIPTION: This command installs the `@qwikdev/astro` package as a dependency to the project using Yarn. This is an alternative to using the Astro CLI to incorporate the Qwik integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn add @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Qwik Loader Script in TypeScript\nDESCRIPTION: Function signature for retrieving the qwikloader.js file as a string. This is useful for tooling to inline the qwikloader script into HTML.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getQwikLoaderScript(opts?: { debug?: boolean }): string;\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Preview Build\nDESCRIPTION: Command to create and preview a production build locally, including client modules and preview server setup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/base/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run preview # or `yarn preview`\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Postgres with Vercel Edge Functions\nDESCRIPTION: Errors that can occur when running Postgres without a suitable edge-compatible driver. The errors shown suggest necessary changes for ensuring compatibility with Vercel Edge Functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/vercel-edge/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n‚îî‚îÄ‚îÄ The Edge Function \"_qwik-city\" is referencing unsupported modules\n‚îî‚îÄ‚îÄ Cannot bundle Node.js built-in \"node:events\" imported from \"node_modules\\postgres\\cf\\polyfills.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining InsHTMLAttributes Interface in TypeScript\nDESCRIPTION: The InsHTMLAttributes interface extends Attrs for 'ins' elements, enabling stronger type checking for the insertion of HTML elements in Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InsHTMLAttributes<T extends Element> extends Attrs<'ins', T>\n```\n\n----------------------------------------\n\nTITLE: Defining transformFs Function in TypeScript\nDESCRIPTION: This TypeScript code defines the `transformFs` function for Qwik. It transforms a directory from the file system using the provided `TransformFsOptions` and returns a promise that resolves to a `TransformOutput`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntransformFs(opts: TransformFsOptions): Promise<TransformOutput>;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining JSXTagName Type for HTML Elements\nDESCRIPTION: Defines the JSXTagName type which represents valid HTML element tag names. It includes both built-in HTML element tag names from HTMLElementTagNameMap and allows custom tag names.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport type JSXTagName =\n  | keyof HTMLElementTagNameMap\n  | Omit<string, keyof HTMLElementTagNameMap>;\n```\n\n----------------------------------------\n\nTITLE: WebViewHTMLAttributes Interface Definition\nDESCRIPTION: Interface for HTML attributes specific to WebView elements, which is marked as obsolete. It was designed for React Native WebView but maintained for backward compatibility in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WebViewHTMLAttributes<T extends Element> extends HTMLAttributes<T>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Qwik Starter Project with CLI\nDESCRIPTION: This snippet demonstrates how to create a basic Qwik starter project using the CLI tool. The process prompts for project name, starter type, and server preference, followed by installation and startup instructions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/introducing-qwik-starters/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> npm init qwik\nüí´ Let's create a Qwik project üí´\n\n‚úî Project name ‚Ä¶ qwik-starter\n‚úî Select a starter ‚Ä∫ Starter\n‚úî Select a server ‚Ä∫ Express\n\n‚≠êÔ∏è Success! Project saved in qwik-starter directory\n\nüìü Next steps:\n  cd qwik-starter\n  npm install\n  npm start\n\n> (cd qwik-starter; npm install; npm start)\n```\n\n----------------------------------------\n\nTITLE: Defining IframeHTMLAttributes Interface in TypeScript\nDESCRIPTION: The IframeHTMLAttributes interface extends the Attrs for 'iframe' elements, ensuring that TypeScript can accurately type-check iframe attributes in Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IframeHTMLAttributes<T extends Element> extends Attrs<'iframe', T>\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag Initiating Module Waterfall\nDESCRIPTION: This HTML snippet shows how the browser initially loads only the first module via a script tag, unaware of the subsequent dependencies until after each module has been processed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/speculative-module-fetching/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"./a.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City Static Generation API in TypeScript\nDESCRIPTION: This code snippet defines the public API for @builder.io/qwik-city, focusing on static site generation. It includes the generate() function and related interfaces for configuring static generation options and handling the results.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/static/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"node\" />\n\nimport type { RenderOptions } from '@builder.io/qwik/server';\n\n// @public\nexport function generate(opts: StaticGenerateOptions): Promise<StaticGenerateResult>;\n\n// @public (undocumented)\nexport interface StaticGenerateOptions extends StaticGenerateRenderOptions {\n    basePathname?: string;\n    qwikCityPlanModulePath: string;\n    renderModulePath: string;\n    // (undocumented)\n    rootDir?: string;\n}\n\n// @public (undocumented)\nexport interface StaticGenerateRenderOptions extends RenderOptions {\n    emit404Pages?: boolean;\n    emitData?: boolean;\n    emitHtml?: boolean;\n    exclude?: string[];\n    include?: string[];\n    log?: 'debug';\n    maxTasksPerWorker?: number;\n    maxWorkers?: number;\n    origin: string;\n    outDir: string;\n    sitemapOutFile?: string | null;\n}\n\n// @public (undocumented)\nexport interface StaticGenerateResult {\n    // (undocumented)\n    duration: number;\n    // (undocumented)\n    errors: number;\n    // (undocumented)\n    rendered: number;\n    // (undocumented)\n    staticPaths: string[];\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Export Fetch Handler for Cloudflare Worker in _worker.js\nDESCRIPTION: This TypeScript snippet exports the fetch handler for use in the Cloudflare Pages functions environment, necessary for advanced build setups.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { fetch } from \"../server/entry.cloudflare-pages\";\nexport default { fetch };\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Forms Qwik Package\nDESCRIPTION: These commands demonstrate how to install the `@modular-forms/qwik` package using various package managers (pnpm, npm, yarn, and bun). The specific command depends on the package manager used in the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/modular-forms/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @modular-forms/qwik\n```\n\n----------------------------------------\n\nTITLE: Using transformModulesSync Function in TypeScript\nDESCRIPTION: Function signature for transformModulesSync, which synchronously transforms input code without accessing the file system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ntransformModulesSync(opts: TransformModulesOptions): TransformOutput;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Interceptor Middleware in Qwik City\nDESCRIPTION: This code snippet shows how to create an error interceptor using middleware in a plugin file. It handles different error types, allowing redirects and ServerErrors to pass through while providing custom handling for unknown errors and differentiating between development and production environments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/error-handling/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/plugin@errors.ts\nimport { type RequestHandler } from '@builder.io/qwik-city'\nimport { RedirectMessage } from '@builder.io/qwik-city/middleware/request-handler'\nimport { isDev } from '@builder.io/qwik/build'\n\nexport const onRequest: RequestHandler = async ({ next }) => {\n  try {\n    return await next();\n  } catch (err) {\n    // Pass through 3xx redirects\n    if (isRedirectMessage(err)) {\n      throw err\n    }\n\n    // Pass through ServerErrors\n    if (isServerError(err)) {\n      throw err\n    }\n\n    // Log unknown errors\n    console.error('unknown error', err)\n\n    if (isDev) {\n      throw err\n    } else {\n      throw new ServerError(500, 'Internal server error');\n    }\n  }\n};\n\nfunction isServerError(err: unknown): err is ServerError {\n  return (\n    err instanceof ServerError ||\n    // This is required for dev environments due to an issue with vite: https://github.com/vitejs/vite/issues/3910\n    (isDev && err instanceof Error && err.constructor.name === \"ServerError\")\n  );\n}\n\nfunction isRedirectMessage(err: unknown): err is RedirectMessage {\n  return (\n    err instanceof RedirectMessage ||\n    // This is required for dev environments due to an issue with vite: https://github.com/vitejs/vite/issues/3910\n    (isDev && err instanceof Error && err.constructor.name === \"RedirectMessage\")\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSX Output Type in TypeScript\nDESCRIPTION: Defines the possible output types for JSX expressions in Qwik, including nodes, primitives, and arrays.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type JSXOutput = JSXNode | string | number | boolean | null | undefined | JSXOutput[];\n```\n\n----------------------------------------\n\nTITLE: Building Qwik City for Production (npm)\nDESCRIPTION: This command builds the Qwik City application for production using npm. It compiles the client and server code, preparing the application for deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"npm run build\"\n```\n\n----------------------------------------\n\nTITLE: Using React-specific Props in Qwik\nDESCRIPTION: Shows the incorrect usage of React-specific props 'className' and 'htmlFor' in Qwik components. Use 'class' and 'for' instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<MyReactComponent className=\"foo\" htmlFor=\"#password\" />;\n```\n\n----------------------------------------\n\nTITLE: Running Package-Specific Commands\nDESCRIPTION: Example of running commands for specific packages using pnpm filter command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npnpm --filter qwik-docs start\n```\n\n----------------------------------------\n\nTITLE: Displaying Qwik Library Project Structure\nDESCRIPTION: Shows the directory structure of the Qwik Library project, highlighting the public and src folders, along with the components directory and index.ts file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/library/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n‚îú‚îÄ‚îÄ public/\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îî‚îÄ‚îÄ src/\n    ‚îú‚îÄ‚îÄ components/\n    ‚îÇ   ‚îî‚îÄ‚îÄ ...\n    ‚îî‚îÄ‚îÄ index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Defining valibotQrl Function Type in TypeScript\nDESCRIPTION: Type definition for the valibotQrl function that creates Valibot-based QRL validators. This is an alpha preview API.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nvalibotQrl: ValibotConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Defining QwikVitePluginOptions Type in TypeScript\nDESCRIPTION: Specifies a union type for Qwik Vite plugin options, enabling choice between CSR and SSR configurations in Vite-based Qwik projects.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikVitePluginOptions =\n  | QwikVitePluginCSROptions\n  | QwikVitePluginSSROptions;\n```\n\n----------------------------------------\n\nTITLE: Defining join Function in TypeScript\nDESCRIPTION: Function signature for joining multiple path segments into a single path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\njoin(...paths: string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Defining HtmlHTMLAttributes Interface in TypeScript\nDESCRIPTION: The HtmlHTMLAttributes interface extends the Attrs for 'html' elements. This typification ensures accurate attribute definition for HTML elements when using Qwik in TypeScript.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HtmlHTMLAttributes<T extends Element> extends Attrs<'html', T>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Cmp Component in Qwik using Vanilla Extract\nDESCRIPTION: This snippet shows how to implement a Qwik component utilizing the 'blueClass' style defined earlier. It serves as an example of rendering a styled component in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/styled-vanilla-extract/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blueClass } from './styles.css';\n\nexport const Cmp = component$(() => {\n  return <div class={blueClass} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component with Qwik Signal in TypeScript\nDESCRIPTION: This snippet demonstrates an attempt to use a React component (MUIButton) with Qwik's useSignal for state management. However, this approach doesn't work as expected due to React's synthetic event system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\nimport { MUIButton } from '~/integrations/react/mui';\n\nexport default component$(() => {\n  const count = useSignal(0);\n  return (\n    <div>\n      <h2>React component with Qwik sigal</h2> // ‚ùå\n      <MUIButton\n        variant=\"contained\"\n        onClick$={() => {\n          count.value++;\n        }}\n      >\n        I'm a button from react\n      </MUIButton>\n      <p>current count is: {count.value}</p>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ContentMenu Interface in Qwik City\nDESCRIPTION: Interface definition for ContentMenu which represents a navigation menu item. It includes properties for the menu item's text, optional href for linking, and optional nested items for hierarchical menus.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContentMenu\n```\n\n----------------------------------------\n\nTITLE: HTML Module Preload Link\nDESCRIPTION: Example of how Qwik implements module prefetching using HTML link elements with modulepreload or fallback preload attributes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/modules-prefetching/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"modulepreload\">\n```\n\n----------------------------------------\n\nTITLE: Defining DataValidator Type in Qwik City\nDESCRIPTION: Type definition for DataValidator which provides validation functionality for form data. It includes a validate method that processes request events and input data, returning a validation result.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DataValidator<T extends Record<string, any> = {}> = {\n  validate(ev: RequestEvent, data: unknown): Promise<ValidatorReturn<T>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StrictUnion Type in TypeScript\nDESCRIPTION: Type utility for creating stricter union types with pretty formatting.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StrictUnion<T> = Prettify<StrictUnionHelper<T, T>>;\n```\n\n----------------------------------------\n\nTITLE: Qwik Component With Link Using Qwik City\nDESCRIPTION: Defines a Qwik component that includes a Link from `@builder.io/qwik-city`. This component, `WithLink`, simply renders a link to Google. It's used to demonstrate how to test components that depend on Qwik City features within Storybook.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\nimport { Link } from \"@builder.io/qwik-city\";\n\nexport const WithLink = component$(() => {\n  return (\n    <Link href=\"https://google.com\">Google Link</Link>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI - Shell Commands\nDESCRIPTION: These commands are used to install the Tauri CLI from the @tauri-apps/cli package using different package managers: pnpm, npm, yarn, and bun. This is a prerequisite for initializing and developing Tauri applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tauri/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @tauri-apps/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tauri-apps/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun install @tauri-apps/cli\n```\n\n----------------------------------------\n\nTITLE: Defining OptimizerSystem Interface in TypeScript\nDESCRIPTION: Declares the OptimizerSystem interface with properties for system operations like file paths, dynamic imports, and environment settings.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OptimizerSystem\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Form Validation with Zod in Qwik City Actions\nDESCRIPTION: This code snippet demonstrates how to use Qwik City's built-in Zod validation with actions. It creates an action to add a user with type validation for name and age fields, where age is coerced to a number type from string input.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useAddUser = action$(\n  (user) => {\n    // `user` is typed { name: string }\n    const userID = db.users.add(user);\n    return {\n      success: true,\n      userID,\n    };\n  },\n  zod$({\n    name: z.string(),\n    age: z.coerce.number(),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: SVG Attributes Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining SVG element attributes that can be numbers or strings. This includes properties for SVG elements like markers, masks, patterns and various geometric attributes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SVGAttributes {\n    keyTimes?: number | string | undefined;\n    lang?: string | undefined;\n    lengthAdjust?: number | string | undefined;\n    limitingConeAngle?: number | string | undefined;\n    local?: number | string | undefined;\n    // ... additional attributes\n    zoomAndPan?: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik City for Production (pnpm)\nDESCRIPTION: This command builds the Qwik City application for production using pnpm. It compiles the client and server code, preparing the application for deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/firebase/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm run build\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Route Loader Naming in Qwik City\nDESCRIPTION: Shows an incorrect naming pattern for route loaders. In Qwik City, route loader function names should start with 'use'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n \nexport const getProductDetails = routeLoader$(async (requestEvent) => {\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product as Product;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining transformModules Function in TypeScript\nDESCRIPTION: This TypeScript code defines the `transformModules` function for Qwik. It transforms the input code string (does not access the file system) using the provided `TransformModulesOptions` and returns a promise that resolves to a `TransformOutput`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntransformModules(opts: TransformModulesOptions): Promise<TransformOutput>;\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Deploying Netlify Site via CLI\nDESCRIPTION: This shell command manually deploys the site to Netlify, including building the project and generating necessary Edge Functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/netlify-edge/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy --build\n```\n\n----------------------------------------\n\nTITLE: Defining KnownEventNames Type for Event Handling\nDESCRIPTION: Defines the KnownEventNames type which lists all event names that Qwik recognizes. These are used for event handling in JSX with proper case transformation for developer experience.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport type KnownEventNames = LiteralUnion<AllEventKeys, string>;\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current working directory to the newly created Qwik project folder.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/qwikcity-test/src/routes/docs/getting-started/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd qwik-todo\n```\n\n----------------------------------------\n\nTITLE: Type Definition - QwikTransitionEvent\nDESCRIPTION: Type definition for transition events in Qwik. This API is marked as obsolete and developers should use TransitionEvent instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikTransitionEvent<T = Element> = NativeTransitionEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining HTMLInputAutocompleteAttribute Type in TypeScript\nDESCRIPTION: The HTMLInputAutocompleteAttribute type defines string literals for the 'autocomplete' attribute in input elements. This ensures that only valid autocomplete values are used in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HTMLInputAutocompleteAttribute =\n  | \"on\"\n  | \"off\"\n  | \"billing\"\n  | \"shipping\"\n  | \"name\"\n  | \"honorific-prefix\"\n  | \"given-name\"\n  | \"additional-name\"\n  | \"family-name\"\n  | \"honorific-suffix\"\n  | \"nickname\"\n  | \"username\"\n  | \"new-password\"\n  | \"current-password\"\n  | \"one-time-code\"\n  | \"organization-title\"\n  | \"organization\"\n  | \"street-address\"\n  | \"address-line1\"\n  | \"address-line2\"\n  | \"address-line3\"\n  | \"address-level4\"\n  | \"address-level3\"\n  | \"address-level2\"\n  | \"address-level1\"\n  | \"country\"\n  | \"country-name\"\n  | \"postal-code\"\n  | \"cc-name\"\n  | \"cc-given-name\"\n  | \"cc-additional-name\"\n  | \"cc-family-name\"\n  | \"cc-number\"\n  | \"cc-exp\"\n  | \"cc-exp-month\"\n  | \"cc-exp-year\"\n  | \"cc-csc\"\n  | \"cc-type\"\n  | \"transaction-currency\"\n  | \"transaction-amount\"\n  | \"language\"\n  | \"bday\"\n  | \"bday-day\"\n  | \"bday-month\"\n  | \"bday-year\"\n  | \"sex\"\n  | \"url\"\n  | \"photo\";\n```\n\n----------------------------------------\n\nTITLE: Using Qwikified MUI Components\nDESCRIPTION: Demonstrates how to use qwikified MUI components within a Qwik component, showing client:hover directive usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { MUIAlert, MUIButton } from '~/integrations/react/mui';\n\nexport default component$(() => {\n  return (\n    <>\n      <MUIButton client:hover>Hello this is a button</MUIButton>\n\n      <MUIAlert severity=\"warning\">This is a warning from Qwik</MUIAlert>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Qwik Application with PNPM\nDESCRIPTION: Command to create and bootstrap a new Qwik application using the PNPM package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest to Qwik project using NPM\nDESCRIPTION: This command utilizes the Qwik CLI to add Vitest to an existing Qwik project using NPM. It simplifies the installation and configuration process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/vitest/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add vitest\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderSignal type in Qwik\nDESCRIPTION: This snippet defines a TypeScript type `LoaderSignal` which represents a readonly signal that holds the result of a loader function. It uses conditional types to determine the signal's value based on whether the underlying type is a function returning a `ValueOrPromise`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LoaderSignal<TYPE> = TYPE extends () => ValueOrPromise<\n  infer VALIDATOR\n>\n  ? ReadonlySignal<ValueOrPromise<VALIDATOR>>\n  : ReadonlySignal<TYPE>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Qwik Project Structure\nDESCRIPTION: This snippet shows the typical file and directory structure of a Qwik project, including key files and folders.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqwik-app-demo\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ public\n‚îÇ   ‚îî‚îÄ‚îÄ favicon.svg\n‚îú‚îÄ‚îÄ src\n‚îÇ   ‚îú‚îÄ‚îÄ components\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ router-head\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ router-head.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ entry.ssr.tsx\n‚îÇ   ‚îú‚îÄ‚îÄ global.css\n‚îÇ   ‚îú‚îÄ‚îÄ root.tsx\n‚îÇ   ‚îî‚îÄ‚îÄ routes\n‚îÇ       ‚îú‚îÄ‚îÄ flower\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ flower.css\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx\n‚îÇ       ‚îú‚îÄ‚îÄ index.tsx\n‚îÇ       ‚îî‚îÄ‚îÄ layout.tsx\n‚îú‚îÄ‚îÄ tsconfig.json\n‚îî‚îÄ‚îÄ vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: Command to display the current Node.js version in use. This helps ensure compatibility with Cloudflare Pages deployment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\nv20.11.1\n```\n\n----------------------------------------\n\nTITLE: Defining isAbsolute Function in TypeScript\nDESCRIPTION: Function signature for checking if a path is absolute, returning a boolean.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nisAbsolute(path: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Vercel Platform Interface Definition\nDESCRIPTION: TypeScript interface definition for the Vercel platform integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-vercel-edge/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformVercel\n```\n\n----------------------------------------\n\nTITLE: HTML Attribute Interfaces for Qwik Components\nDESCRIPTION: Defines TypeScript interfaces for HTML attributes specific to video and web view elements, providing type safety when using these elements in Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface VideoHTMLAttributes<T extends Element> extends Attrs<'video', T> {\n}\n\n// @public (undocumented)\nexport type VisibleTaskStrategy = 'intersection-observer' | 'document-ready' | 'document-idle';\n\n// @public @deprecated (undocumented)\nexport interface WebViewHTMLAttributes<T extends Element> extends HTMLAttributes<T> {\n    // (undocumented)\n    allowFullScreen?: boolean | undefined;\n    // (undocumented)\n    allowpopups?: boolean | undefined;\n    // (undocumented)\n    autoFocus?: boolean | undefined;\n    // (undocumented)\n    autosize?: boolean | undefined;\n    // (undocumented)\n    blinkfeatures?: string | undefined;\n    // (undocumented)\n    disableblinkfeatures?: string | undefined;\n    // (undocumented)\n    disableguestresize?: boolean | undefined;\n    // (undocumented)\n    disablewebsecurity?: boolean | undefined;\n    // (undocumented)\n    guestinstance?: string | undefined;\n    // (undocumented)\n    httpreferrer?: string | undefined;\n    // (undocumented)\n    nodeintegration?: boolean | undefined;\n    // (undocumented)\n    partition?: string | undefined;\n    // (undocumented)\n    plugins?: boolean | undefined;\n    // (undocumented)\n    preload?: string | undefined;\n    // (undocumented)\n    src?: string | undefined;\n    // (undocumented)\n    useragent?: string | undefined;\n    // (undocumented)\n    webpreferences?: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Qwik Application for Production\nDESCRIPTION: This snippet details commands to build the Qwik application for production using various package managers. The build process includes both server and client builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/azure-swa/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Linking Netlify Site to Git Provider via CLI\nDESCRIPTION: This shell command links the current project to a Netlify site and sets up continuous deployment from a Git provider.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/netlify-edge/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnetlify link\n```\n\n----------------------------------------\n\nTITLE: Defining SingleEntryStrategy Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `SingleEntryStrategy` interface for Qwik. It describes the strategy for single code entries, including properties like `manual` (optional record of strings) and `type` (set to 'single').\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface SingleEntryStrategy\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Qwik App to Google Cloud Run\nDESCRIPTION: After building the Qwik application, this command deploys it to Google Cloud Run. It assumes that the necessary build steps have been completed and the deployment configuration is set up.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/cloud-run/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Using Event-Based Hydration for React Components in Qwik\nDESCRIPTION: Example of using client:event directive to trigger hydration of React components when specific DOM events are dispatched.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default component$(() => {\n\tconst count = useSignal(0);\n  return (\n    <>\n      <p>This slider will only run hydration after a click on it</p>\n      <MUIEventSlider\n        client:event=\"click\"\n        value={count.value}\n        onChange$={(_, value) => {\n          count.value = value as number;\n        }}\n      />\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Definition of InOrderDisabled Interface in TypeScript\nDESCRIPTION: Interface definition for disabling in-order streaming. Contains a single property for strategy set to 'disabled'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InOrderDisabled\n```\n\n----------------------------------------\n\nTITLE: Adding Turso to Qwik Project - Shell\nDESCRIPTION: This snippet shows how to add Turso as a dependency in a Qwik project using various package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/turso/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add turso\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add turso\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add turso\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add turso\n```\n\n----------------------------------------\n\nTITLE: Project Card Grid Structure - HTML/Markdown\nDESCRIPTION: HTML structure for displaying project cards in a grid layout, with each card containing an icon/image and project title. The cards are organized into categories like component libraries, form libraries, etc.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/community/projects/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card-grid\">\n  <a class=\"card card-center\" href=\"https://github.com/qwikifiers/qwik-ui\">\n    <p class=\"icon\" align=\"center\"><img src=\"https://raw.githubusercontent.com/qwikifiers/qwik-ui/main/apps/website/public/images/qwik-ui.png\" width=\"256px\"/></p>\n    <h3>Qwik UI - The first Qwik ui components library</h3>\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bug Triaging Process with Mermaid Flowchart\nDESCRIPTION: This flowchart illustrates the decision-making process for triaging bug reports in the Qwik repository. It covers steps from initial information check to prioritization of confirmed bugs.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/contributing/TRIAGE.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    start{Missing information?}\n    start --YES--> close1[Tag with\\n'STATUS-2: missing info'\\n\\nBot will auto close if\\n no update for 14 days]\n    start --NO--> dupe{Is duplicate?}\n    dupe --YES--> close2[Close, point to duplicate\\n and tag with\\n'STATUS-3: duplication']\n    dupe --NO--> repro{Has proper\\nreproduction?}\n    repro --NO--> close3[Tag with\\n 'STATUS-2: needs reproduction'\\nBot will auto close if \\nno update for 14 days]\n    repro --YES--> real{Is actually a bug?}\n    real --NO--> intended{Is the intended\\nbehaviour?}\n    intended --YES--> explain[Explain and close.\\nPoint to docs if needed.\\nTag with\\n'STATUS-3: works as expected']\n    intended --NO--> open[Tag with\\n'STATUS-2: requires discussion'\\nand either\\n'WAITING FOR: team'\\n'WAITING FOR: user']\n    real --YES--> real2[\"1. Tag with 'STATUS-2: team is working on this'\\n2. Add related feature label if\\napplicable (e.g. 'COMP: runtime')\\n3. Add priority labels (see below)\"]\n    real2 --> unusable{Does the\\nbug make Qwik\\nunusable?}\n    unusable --YES--> maj{Does the bug\\naffect the majority\\nof Qwik users?}\n    maj --YES--> P4[P4: urgent]\n    maj --NO--> P3[P3: important]\n    unusable --NO--> workarounds{Are there\\nworkarounds for\\nthe bug?}\n    workarounds --NO--> P2[P2: minor]\n    workarounds --YES--> P1[P1: nice to have / fix]\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Dynamic Sitemap in Qwik City\nDESCRIPTION: This snippet shows the content of a robots.txt file configured for a dynamic sitemap in Qwik City. It includes directives for allowing all user agents, optionally disallowing specific folders, and specifying the location of the dynamic sitemap.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/sitemaps/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUser-agent: *\nAllow: /\n\n# Uncomment the following line and replace <unindexedFolder> with the actual folder name you want to disallow\n# Disallow: /<unindexedFolder>/\n\nSitemap: https://<YOUR_HOSTNAME>/dynamic-sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Building Server Modules for Qwik React Production\nDESCRIPTION: Generates the server-side render (SSR) module used by the server to render HTML in a production environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-react/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build.server\n```\n\n----------------------------------------\n\nTITLE: Creating Library Entry Point in src/index.ts\nDESCRIPTION: Example of a library entry point file that exports components for external use in the Qwik component library.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/library/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// As an example, we will export the Logo and Counter components\nexport { Logo } from './components/logo/logo';\nexport { Counter } from './components/counter/counter';\n```\n\n----------------------------------------\n\nTITLE: Defining RouteLocation interface in Qwik\nDESCRIPTION: This snippet defines the `RouteLocation` interface, representing the current route location. It includes properties like `isNavigating`, `params`, `prevUrl`, and `url`, providing information about the current route, including navigation status, URL parameters, previous URL, and current URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouteLocation\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik App with pnpm\nDESCRIPTION: This shell command uses pnpm to create a new Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/cloudflare-pages/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: QwikCityFirebaseOptions Interface Declaration\nDESCRIPTION: The QwikCityFirebaseOptions interface extends ServerRenderOptions to define the configuration options for Qwik City in Firebase environment. This interface includes all server render options plus any Firebase-specific configurations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-firebase/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityFirebaseOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Qwik Component\nDESCRIPTION: This CSS snippet defines styles for paragraphs and forms within a Qwik component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\np {\n  font-weight: bold;\n}\n\nform {\n  float: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Static Site Adapter Using Bun\nDESCRIPTION: This shell command integrates the static site adapter into a Qwik project using Bun. It prepares the project for generating static HTML files by adapting its configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/static/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add static\n```\n\n----------------------------------------\n\nTITLE: Defining RenderToStreamOptions Interface - TypeScript\nDESCRIPTION: Specifies the RenderToStreamOptions interface, inheriting from RenderOptions, to describe options for rendering operations that stream content. Key properties include stream for defining the StreamWriter and streaming for optional StreamingOptions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderToStreamOptions extends RenderOptions\n```\n\n----------------------------------------\n\nTITLE: Closure Extraction Challenge in TypeScript\nDESCRIPTION: Shows what happens when attempting to extract a closure from its original context. The example demonstrates how moving a closure outside its lexical scope results in errors because the captured variables are no longer accessible.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/module-extraction-the-silent-web-revolution/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction thisIsAClosure(a, b) {\n  // Exception: \"captured\" is undefined\n  return (a + b) * captured;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BundleGraphAdder Type in TypeScript\nDESCRIPTION: Type definition for a function that generates a bundle graph from a Qwik manifest, returning a record of bundle names and their dependencies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type BundleGraphAdder = (manifest: QwikManifest) => Record<\n  string,\n  {\n    imports?: string[];\n    dynamicImports?: string[];\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Lambda Adapter with Package Managers\nDESCRIPTION: Command-line installation of the AWS Lambda adapter for Qwik using different package managers. Supports pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/aws-lambda/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add aws-lambda\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add aws-lambda\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add aws-lambda\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Creating New Components with Qwik CLI\nDESCRIPTION: Command to create a new component named 'my-button' using the 'qwik new' command introduced in Qwik 1.2.0.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm qwik new my-button\n```\n\n----------------------------------------\n\nTITLE: Bundle Priority Calculation Formula\nDESCRIPTION: Mathematical formula showing how the preload count threshold is calculated based on importance probability (iP). Bundles with iP < 0.05 are always preloaded, while others are preloaded based on a sliding scale.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/server/preloading.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npreloadCount < 2 + 20 * (1 - iP)\n```\n\n----------------------------------------\n\nTITLE: Deploying Qwik Application for Development on Vercel Edge\nDESCRIPTION: Command to deploy the Qwik application for development purposes on Vercel Edge. This requires a Vercel account to complete the deployment process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/vercel-edge/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Creating jsxDEV Function in TypeScript\nDESCRIPTION: The jsxDEV function creates a JSXNode intended for development environments. It accepts props and a type and is pivotal for enhancing the development experience with JSX in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\njsxDEV: <T extends string | FunctionComponent<Record<any, unknown>>> (\n  type: T,\n  props: T extends FunctionComponent<infer PROPS>\n    ? PROPS\n    : Record<any, unknown>,\n  key: string | number | null | undefined,\n  _isStatic: boolean,\n  opts: JsxDevOpts,\n  _ctx: unknown,\n) => JSXNode<T>;\n```\n\n----------------------------------------\n\nTITLE: Declaring QwikBuildTarget Type in TypeScript\nDESCRIPTION: Defines the QwikBuildTarget type as a union of 'client', 'ssr', 'lib', and 'test' strings, representing different build targets.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikBuildTarget = \"client\" | \"ssr\" | \"lib\" | \"test\";\n```\n\n----------------------------------------\n\nTITLE: Adding LeafletJS Map Dependency with NPM\nDESCRIPTION: This command adds the LeafletJS map as a dependency to your Qwik project using NPM. It executes a Qwik add script to install the necessary packages and set up the required files for map integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/leaflet-map/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"npm run qwik add leaflet-map\"\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Components in Qwik\nDESCRIPTION: This code imports SVG components for displaying Discord and Qwik Newsletter icons in the community page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/community/groups/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ImgDiscord from '~/media/ecosystem/discord.svg?jsx';\nimport ImgQwikNewsletter from '~/media/ecosystem/qwik-newsletter.svg?jsx';\n```\n\n----------------------------------------\n\nTITLE: ValueOrPromise Type Definition\nDESCRIPTION: A utility type representing a value that can be either directly available or a Promise that will resolve to that value. This is used throughout Qwik to handle potentially asynchronous operations.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValueOrPromise<T> = T | Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Route Loader Location in Qwik City\nDESCRIPTION: Shows an incorrect implementation where a route loader is defined outside the routes directory. Route loaders can only be used in src/routes folder.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n \nexport const useProductDetails = routeLoader$(async (requestEvent) => {\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product as Product;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring global.css for Tailwind in CSS\nDESCRIPTION: This CSS code snippet is added to the `src/global.css` file to include Tailwind CSS base, components, and utilities. This setup is essential for enabling Tailwind CSS features in a Qwik project. Dependencies include the Tailwind CSS framework.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind-v3/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Defining CloudflarePagesAdapterOptions Interface for Configuration\nDESCRIPTION: Interface extending ServerAdapterOptions that defines configuration options for the Cloudflare Pages adapter, including functionRoutes for generating route files and staticPaths for manually specifying static content paths.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-cloudflare-pages/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CloudflarePagesAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Importing useSignal in Qwik\nDESCRIPTION: This snippet shows how to import the useSignal hook from the Qwik framework for state management.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$, useSignal } from \"@builder.io/qwik\";\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Application for Production using bun\nDESCRIPTION: This snippet details building a Qwik application for production using bun. Ensure bun is configured with relevant scripts in the package.json file for successful execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Component in TypeScript\nDESCRIPTION: Declares the Fragment component type used for grouping multiple elements without adding extra nodes to the DOM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Fragment: FunctionComponent<{\n    children?: any;\n    key?: string | number | null;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Defining AnchorHTMLAttributes Interface in TypeScript\nDESCRIPTION: This interface extends Attrs<'a', T> to define attributes specific to anchor HTML elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AnchorHTMLAttributes<T extends Element> extends Attrs<'a', T>\n```\n\n----------------------------------------\n\nTITLE: Defining format Function in TypeScript\nDESCRIPTION: Function signature for formatting a path object into a string, taking an object with root, dir, base, ext, and name properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nformat(pathObject: {\n        root: string;\n        dir: string;\n        base: string;\n        ext: string;\n        name: string;\n    }): string;\n```\n\n----------------------------------------\n\nTITLE: Adding Integrations with pnpm\nDESCRIPTION: Initiate the addition of integrations to a Qwik City application using pnpm. This command requires pnpm to be installed as a dependency. It is designed to prompt the user to select a specific integration to add to their application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add\n```\n\n----------------------------------------\n\nTITLE: Running Bun Server for Qwik Project Preview\nDESCRIPTION: This command starts the Bun server to preview the Qwik project build. It should be executed after a full build has been completed. The server will run on localhost:3000.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/bun/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbun run serve\n```\n\n----------------------------------------\n\nTITLE: Retrieving Menu Structure with useContent() in JavaScript\nDESCRIPTION: Shows the JavaScript object structure returned by useContent() hook when retrieving the menu data defined in the markdown file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/menu/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  text: \"Docs\",\n  items: [\n    {\n      text: \"Getting Started\",\n      items: [\n        {\n          text: \"Introduction\",\n          href: \"/docs/introduction\"\n        }\n      ],\n    },\n    {\n      text: \"Components\",\n      items: [\n        {\n          text: \"Basics\",\n          href: \"/docs/(qwik)/components/basics\"\n        }\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining normalize Function in TypeScript\nDESCRIPTION: Function signature for normalizing a file path, resolving '..' and '.' segments.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnormalize(path: string): string;\n```\n\n----------------------------------------\n\nTITLE: Running Storybook dashboard with Yarn\nDESCRIPTION: This command starts the Storybook development server using Yarn, enabling the visualization and testing of UI components independently.  It executes the `storybook` script within the `package.json`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn run storybook\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Qwik Package Changelogs\nDESCRIPTION: A markdown table listing Qwik packages and their corresponding changelog file locations within the repository.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package              | File                                                  |\n| -------------------- | ----------------------------------------------------- |\n| `qwik`               | [Changelog](packages/qwik/CHANGELOG.md)               |\n| `qwik-city`          | [Changelog](packages/qwik-city/CHANGELOG.md)          |\n| `eslint-plugin-qwik` | [Changelog](packages/eslint-plugin-qwik/CHANGELOG.md) |\n| `create-qwik`        | [Changelog](packages/create-qwik/CHANGELOG.md)        |\n```\n\n----------------------------------------\n\nTITLE: Installation Commands for Adding React in Shell\nDESCRIPTION: This snippet provides shell commands to add React to a Qwik project using various package managers like pnpm, npm, yarn, and bun. It details the setup needed for integrating React into Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/react/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add react\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add react\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add react\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add react\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Qwik Build Artifacts in package.json\nDESCRIPTION: Configuration example for installing specific build artifacts of Qwik packages from GitHub repositories. This approach allows using unreleased changes or specific commit versions by referencing either a specific SHA or branch name.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTINUOUS_BUILD.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@builder.io/qwik\": \"github:QwikDev/qwik-build#SHA\",\n    \"@builder.io/qwik-city\": \"github:QwikDev/qwik-city-build#SHA\",\n    \"@builder.io/qwik-labs\": \"github:QwikDev/qwik-labs-build#SHA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Qwik Route Files for Menu Structure\nDESCRIPTION: Shows the file structure for implementing menus in Qwik, including the placement of menu.md, layout.tsx, and route components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/menu/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îî‚îÄ‚îÄ some/\n        ‚îú‚îÄ‚îÄ menu.md\n        ‚îú‚îÄ‚îÄ layout.tsx\n        ‚îî‚îÄ‚îÄ path/\n            ‚îî‚îÄ‚îÄ index.tsx  # https://example.com/some/path\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook to Qwik project with Bun\nDESCRIPTION: This command adds Storybook to an existing Qwik app or library project using Bun. It installs the necessary dependencies and adds an example component and stories. It leverages the `qwik add storybook` command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add storybook\n```\n\n----------------------------------------\n\nTITLE: RenderToStreamResult Interface Definition - TypeScript\nDESCRIPTION: The RenderToStreamResult interface extends RenderResult to include properties like flushes and size, with timing detailing various stages in milliseconds. It encapsulates the result of streamed content rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderToStreamResult extends RenderResult\n```\n\n----------------------------------------\n\nTITLE: Simple Component Definition in Qwik\nDESCRIPTION: Basic example of a Qwik component definition before optimization.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Greeter = component$(() => {\n  return <div>Hello World!</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Building Client Modules for Qwik React Production\nDESCRIPTION: Creates only the client-side modules that are dynamically imported by the browser in a production environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-react/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build.client\n```\n\n----------------------------------------\n\nTITLE: Validation Error Response with Detailed Messages\nDESCRIPTION: Example of field error messages returned from Zod validation showing various validation constraints like minimum length requirements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"person.name\": \"String must contain at least 2 character(s)\",\n  \"person.email\": \"Invalid email\",\n  \"person.address.street\": \"String must contain at least 2 character(s)\",\n  \"person.address.city\": \"String must contain at least 2 character(s)\",\n  \"person.address.state\": \"String must contain at least 2 character(s)\",\n  \"person.pets[]\": [\n    \"String must contain at least 2 character(s)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Native DOM Event Types\nDESCRIPTION: Defines type aliases for native DOM events that are now marked as obsolete. These types suggest using the standard DOM event types with the second argument for current event target instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NativeAnimationEvent = AnimationEvent;\nexport type NativeClipboardEvent = ClipboardEvent;\nexport type NativeCompositionEvent = CompositionEvent;\nexport type NativeDragEvent = DragEvent;\nexport type NativeFocusEvent = FocusEvent;\nexport type NativeKeyboardEvent = KeyboardEvent;\nexport type NativeMouseEvent = MouseEvent;\nexport type NativePointerEvent = PointerEvent;\nexport type NativeTouchEvent = TouchEvent;\nexport type NativeTransitionEvent = TransitionEvent;\nexport type NativeUIEvent = UIEvent;\nexport type NativeWheelEvent = WheelEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining QwikVitePlugin Type in TypeScript\nDESCRIPTION: Describes a Qwik Vite plugin type, combining Vite plugin capabilities with Qwik-specific API. Facilitates unique naming in a flattened plugin structure.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikVitePlugin = P<QwikVitePluginApi> & {\n  name: \"vite-plugin-qwik\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring eslint-plugin-qwik with ESLint Flat Config (ESLint 9+)\nDESCRIPTION: Configuration example for eslint-plugin-qwik using the new ESLint flat config format. Includes TypeScript integration and sets up recommended rules for Qwik development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/eslint-plugin-qwik/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport js from '@eslint/js';\nimport globals from 'globals';\nimport tseslint from 'typescript-eslint';\nimport { qwikEslint9Plugin } from 'eslint-plugin-qwik';\n\nexport const qwikConfig = [\n  js.configs.recommended,\n  ...tseslint.configs.recommended,\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n  {\n    files: ['**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'],\n    languageOptions: {\n      globals: {\n        ...globals.serviceworker,\n        ...globals.browser,\n        ...globals.node,\n      },\n    },\n  },\n  ...qwikEslint9Plugin.configs.recommended,\n  {\n    ignores: ['node_modules/*', 'dist/*', 'server/*', 'tmp/*'],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Pages Routes for Qwik Docs\nDESCRIPTION: Example of an auto-generated _routes.json file for Cloudflare Pages, specifying which paths should be server-side rendered and which should be treated as static files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    \"/*\"\n  ],\n  \"exclude\": [\n    \"/_headers\",\n    \"/_redirects\",\n    \"/build/*\",\n    \"/favicon.ico\",\n    \"/manifest.json\",\n    \"/service-worker.js\",\n    \"/about\"\n  ],\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik React Project for Production\nDESCRIPTION: Generates both client and server modules for a complete production build of the Qwik React project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-react/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: useVisibleTask$ Type Definition\nDESCRIPTION: Type definition for the useVisibleTask$ hook that schedules a task to run when a component becomes visible. It accepts a task function and optional configuration options for controlling when the task executes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_128\n\nLANGUAGE: typescript\nCODE:\n```\nuseVisibleTask$: (qrl: TaskFn, opts?: OnVisibleTaskOptions | undefined) => void\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Wrangler\nDESCRIPTION: Command to start a local development server using npm to preview the production build.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/cloudflare-pages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-nx Plugin (Yarn)\nDESCRIPTION: This command uses Yarn to install the 'qwik-nx' plugin as a dependency within an existing Nx workspace. This plugin enables Qwik-specific functionalities within the Nx environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/nx/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn add qwik-nx\n```\n\n----------------------------------------\n\nTITLE: Definition of PrefetchImplementation Interface in TypeScript\nDESCRIPTION: Interface for configuring prefetch implementation details. Contains properties for link attributes and prefetch behavior. Marked as obsolete with a recommendation to use 'preloader' instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PrefetchImplementation\n```\n\n----------------------------------------\n\nTITLE: Running Client-Only Development Build in Qwik\nDESCRIPTION: Command to start a client-only development build with Vite. This mode is ideal for fast development with hot module reloading but requires JavaScript execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Non-Unique Key Prop in Qwik Array - Incorrect\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `nonUniqueKeys` case. It shows the incorrect practice of assigning the same `key` value to multiple list items, which can lead to rendering issues.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const ColorList = component$(() => {\n  const colors = ['red', 'green', 'blue'];\n\n  return (\n    <ul>\n      {colors.map((color) => (\n        <li key=\"not-a-good-idea\">{color}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint, Jest, and Prettier for Qwik Development\nDESCRIPTION: This configuration file sets up ESLint rules, Jest testing environment, and Prettier formatting options for the Qwik development project. It includes custom ESLint plugins, specific Jest configurations, and Prettier rules tailored for the project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/playground/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/eslintrc\",\n  \"root\": true,\n  \"extends\": [\n    \"plugin:qwik/recommended\",\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:@typescript-eslint/recommended-requiring-type-checking\"\n  ],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"project\": [\"./tsconfig.json\"],\n    \"ecmaVersion\": 2021,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"plugins\": [\"@typescript-eslint\"],\n  \"rules\": {\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n    \"@typescript-eslint/no-inferrable-types\": \"off\",\n    \"@typescript-eslint/no-non-null-assertion\": \"off\",\n    \"@typescript-eslint/no-empty-interface\": \"off\",\n    \"@typescript-eslint/no-namespace\": \"off\",\n    \"@typescript-eslint/no-empty-function\": \"off\",\n    \"@typescript-eslint/no-this-alias\": \"off\",\n    \"@typescript-eslint/ban-types\": \"off\",\n    \"@typescript-eslint/ban-ts-comment\": \"off\",\n    \"prefer-spread\": \"off\",\n    \"no-case-declarations\": \"off\",\n    \"no-console\": \"off\",\n    \"@typescript-eslint/no-unused-vars\": [\"error\"],\n    \"@typescript-eslint/consistent-type-imports\": \"warn\"\n  },\n  \"overrides\": [\n    {\n      \"files\": [\"*.unit.ts\", \"*.unit.tsx\", \"*.spec.tsx\", \"*.spec.ts\"],\n      \"extends\": [\"plugin:jest-dom/recommended\", \"plugin:testing-library/react\"],\n      \"rules\": {\n        \"testing-library/no-await-sync-query\": \"off\"\n      }\n    }\n  ],\n  \"ignorePatterns\": [\"lib/**/*\", \"server/**/*\", \"dist/**/*\"],\n  \"settings\": {\n    \"jest\": {\n      \"version\": 28\n    }\n  },\n  \"jest\": {\n    \"preset\": \"ts-jest\",\n    \"testEnvironment\": \"node\",\n    \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$\",\n    \"setupFiles\": [\"./jest.setup.js\"],\n    \"moduleFileExtensions\": [\"ts\", \"tsx\", \"js\", \"jsx\", \"json\", \"node\"]\n  },\n  \"prettier\": {\n    \"printWidth\": 100,\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"quoteProps\": \"as-needed\",\n    \"jsxSingleQuote\": false,\n    \"trailingComma\": \"es5\",\n    \"bracketSpacing\": true,\n    \"bracketSameLine\": false,\n    \"arrowParens\": \"always\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Management Functions\nDESCRIPTION: Functions for getting and setting the CorePlatform instance for a specific document or node in the application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/platform/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getPlatform(docOrNode: Document | Node): CorePlatform;\nfunction setPlatform(doc: Document, platform: CorePlatform): void;\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik Integrations Command\nDESCRIPTION: Command to add additional integrations to a Qwik project, such as Cloudflare, Netlify, Express Server, or Static Site Generator.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/base/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add # or `yarn qwik add`\n```\n\n----------------------------------------\n\nTITLE: Running Qwik E2E Tests\nDESCRIPTION: Command to run end-to-end tests using Playwright in Chromium browser.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npnpm test.e2e.chromium\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Test Server\nDESCRIPTION: Command to start the test applications server for debugging purposes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm serve\n```\n\n----------------------------------------\n\nTITLE: Defining SystemEnvironment Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `SystemEnvironment` type for Qwik. It specifies the possible runtime environments for Qwik applications, including \"node\", \"deno\", \"bun\", \"webworker\", \"browsermain\", and \"unknown\".\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport type SystemEnvironment =\n  | \"node\"\n  | \"deno\"\n  | \"bun\"\n  | \"webworker\"\n  | \"browsermain\"\n  | \"unknown\";\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Local Database for Qwik Insights\nDESCRIPTION: Command to start the local database server for Qwik Insights development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/insights/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run db.local\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik City middleware for Azure SWA in TypeScript\nDESCRIPTION: The createQwikCity function creates an Azure Function handler for Qwik City applications. It takes QwikCityAzureOptions as a parameter and returns an AzureFunction that can be used as a handler in Azure Static Web Apps.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-azure-swa/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(\n  opts: QwikCityAzureOptions,\n): AzureFunction;\n```\n\n----------------------------------------\n\nTITLE: Event Handler References in Markdown\nDESCRIPTION: References to Qwik event handling methods and documentation links for synchronous event processing. Mentions useVisibleTask$ lifecycle hook and standard DOM event registration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/events/synchronous-visible/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`useVisibleTask$`](/docs/(qwik)/components/tasks/index.mdx#usevisibletask)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base App Dependencies\nDESCRIPTION: JSON configuration showing how the base app's package.json devDependencies are updated during publishing with the current Qwik version and matching TypeScript and Vite versions from the root package.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@builder.io/qwik\": \"<QWIK_VERSION_BEING_PUBLISHED>\",\n    \"typescript\": \"<SAME_AS_ROOT_PACKAGE>\",\n    \"vite\": \"<SAME_AS_ROOT_PACKAGE>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Panda CSS to Qwik with NPM\nDESCRIPTION: This shell command utilizes NPM to execute the Qwik CLI and add Panda CSS as a dependency to the Qwik project. It automates the installation process and configures the project for Panda CSS usage.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/panda-css/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components in Blog Post\nDESCRIPTION: Imports for MDX components used in the blog post layout including ArticleBlock and CodeSandbox components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-and-qwik-city-have-reached-beta/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArticleBlock } from '~/routes/(blog)/blog/components/mdx/article-block';\nimport CodeSandbox from '~/components/code-sandbox/index.tsx';\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Documentation Development Server\nDESCRIPTION: Command to run the development server for the Qwik documentation site.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm docs.dev\n```\n\n----------------------------------------\n\nTITLE: Defining QRLEventHandlerMulti Type in TypeScript\nDESCRIPTION: Type definition for Qwik event handlers that can be either a single handler QRL or an array of handler QRLs. This is a beta API that may change based on feedback.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QRLEventHandlerMulti<EV extends Event, EL> =\n  | QRL<EventHandler<EV, EL>>\n  | undefined\n  | null\n  | QRLEventHandlerMulti<EV, EL>[]\n  | EventHandler<EV, EL>;\n```\n\n----------------------------------------\n\nTITLE: Adding Storybook to Qwik project with NPM\nDESCRIPTION: This command adds Storybook to an existing Qwik app or library project using NPM.  It installs the necessary dependencies and adds an example component and stories. It leverages the `qwik add storybook` command.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/storybook/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add storybook\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed HTML/JSX\nDESCRIPTION: Responsive iframe implementation for embedding a YouTube video with proper styling and permissions\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/the-qase-for-qwik-love-at-first-tti/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style='position:relative;padding-bottom:56.25%;height:0;'>\n\t<iframe\n\t\tsrc='https://www.youtube.com/embed/l2mBk9meSvc?rel=0'\n\t\tstyle='position:absolute;top:0;left:0;width:100%;height:100%;border:0;'\n\t\tallowfullscreen\n\t\tallow='accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share;'\n\t></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Production Database\nDESCRIPTION: Environment variable configuration for connecting to a production database while running locally. Includes database URL, API token, authentication secret, and base API path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/insights/README.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPRIVATE_LIBSQL_DB_URL=libsql://qwik-bundalyzer-mhevery.turso.io\nPRIVATE_LIBSQL_DB_API_TOKEN=<API_TOKEN>\nPRIVATE_AUTH_SECRET=<AUTH_SECRET>\nPRIVATE_AUTH_BASE_API=/api/auth\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Development Server\nDESCRIPTION: Command to run the Qwik application in development mode, which starts a local server for testing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Framework with Rust\nDESCRIPTION: Command to execute a full build of Qwik including Rust packages and WASM components. Builds all submodules, generates type definitions, and creates minified output.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build.full\n```\n\n----------------------------------------\n\nTITLE: Declaring ParamHTMLAttributes Interface in TypeScript (Obsolete)\nDESCRIPTION: Defines an obsolete interface for HTML attributes specific to the 'param' element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ParamHTMLAttributes<T extends Element> extends Attrs<'base', T, HTMLParamElement>\n```\n\n----------------------------------------\n\nTITLE: Defining Path Interface in TypeScript\nDESCRIPTION: Declares the Path interface with properties and methods for path manipulation, including platform-specific path separators and utility functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Path\n```\n\n----------------------------------------\n\nTITLE: Building qwik-core with cargo\nDESCRIPTION: Alternative command to build the qwik-core library directly using cargo, Rust's package manager and build system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/core/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Defining HTMLInputTypeAttribute Type in TypeScript\nDESCRIPTION: The HTMLInputTypeAttribute type provides a list of accepted values for the 'type' attribute of input elements. This ensures that Qwik components adhere to HTML standards for input types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HTMLInputTypeAttribute =\n  | \"button\"\n  | \"checkbox\"\n  | \"color\"\n  | \"date\"\n  | \"datetime-local\"\n  | \"email\"\n  | \"file\"\n  | \"hidden\"\n  | \"image\"\n  | \"month\"\n  | \"number\"\n  | \"password\"\n  | \"radio\"\n  | \"range\"\n  | \"reset\"\n  | \"search\"\n  | \"submit\"\n  | \"tel\"\n  | \"text\"\n  | \"time\"\n  | \"url\"\n  | \"week\"\n  | (string & {});\n```\n\n----------------------------------------\n\nTITLE: Using External Classnames Library in Qwik Components\nDESCRIPTION: Shows the non-recommended pattern of importing and using an external classnames library in Qwik components instead of using the built-in class list syntax.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport classnames from 'classnames';\n```\n\n----------------------------------------\n\nTITLE: Resolving QRL References in Qwik\nDESCRIPTION: Demonstrates how to resolve a QRL reference to its actual value using the QRL.resolve() function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_68\n\nLANGUAGE: tsx\nCODE:\n```\n// Assume you have QRL reference to a greet function\nconst lazyGreet: QRL<() => void> = $(() => console.log(\"Hello World!\"));\n\n// Use `qrlImport` to load / resolve the reference.\nconst greet: () => void = await lazyGreet.resolve();\n\n//  Invoke it\ngreet();\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik Changeset\nDESCRIPTION: Command to create a new changeset for documenting changes in the changelog.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npnpm change\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Labs with Bun\nDESCRIPTION: Installs the Qwik Labs package directly from the GitHub repository using Bun. This command fetches the latest build from the `main` branch of the `QwikDev/qwik-labs-build` repository.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun install github:QwikDev/qwik-labs-build#main\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Blog Routes - First Post\nDESCRIPTION: Creating a nested route for the first blog post at /blog/first URL path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/blog/first/index.tsx\n\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>First blog post</h1>\n})\n```\n\n----------------------------------------\n\nTITLE: Version Property Definition\nDESCRIPTION: A string constant that contains the current version of Qwik, exported as QWIK_VERSION.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_131\n\nLANGUAGE: typescript\nCODE:\n```\nversion: string;\n```\n\n----------------------------------------\n\nTITLE: Simplified HTML Structure for Qwik's Event Handling\nDESCRIPTION: A simplified HTML representation showing how Qwik implements event listeners. The on:click attribute contains a reference to the chunk file and component function that will be lazy-loaded when the button is clicked. This demonstrates Qwik's approach to event handling without upfront JavaScript loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/events/basic/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    <button on:click=\"chunk-abc.js#App_onClick\">\n      Click Me\n    </button>\n    <script id=\"Qwikloader\">....</script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Building Qwik CLI\nDESCRIPTION: Command to build the Qwik CLI from source in a local development environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/README.md#2025-04-21_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\npnpm build.cli\n```\n\n----------------------------------------\n\nTITLE: Type Definition - QwikTouchEvent\nDESCRIPTION: Type definition for touch events in Qwik. This API is marked as obsolete and developers should use TouchEvent instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikTouchEvent<T = Element> = NativeTouchEvent;\n```\n\n----------------------------------------\n\nTITLE: API Report TypeScript Declaration File for @builder.io/qwik\nDESCRIPTION: This is the API report file for the Qwik framework, containing type definitions, interfaces, and function declarations that form the public API. The file is automatically generated by API Extractor and should not be manually edited.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as CSS_2 from 'csstype';\nimport { isBrowser } from '@builder.io/qwik/build';\nimport { isDev } from '@builder.io/qwik/build';\nimport { isServer } from '@builder.io/qwik/build';\nimport type { JSXNode as JSXNode_2 } from '@builder.io/qwik/jsx-runtime';\n\n// @public\nexport const $: <T>(expression: T) => QRL<T>;\n\n// @internal (undocumented)\nexport type _AllowPlainQrl<Q> = QRLEventHandlerMulti<any, any> extends Q ? Q extends QRLEventHandlerMulti<infer EV, infer EL> ? Q | (EL extends Element ? EventHandler<EV, EL> : never) : Q : Q extends QRL<infer U> ? Q | U : NonNullable<Q> extends never ? Q : QRL<Q> | Q;\n\n// Warning: (ae-forgotten-export) The symbol \"Attrs\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport interface AnchorHTMLAttributes<T extends Element> extends Attrs<'a', T> {\n}\n\n// @public (undocumented)\nexport interface AreaHTMLAttributes<T extends Element> extends Attrs<'area', T> {\n}\n\n// @public\nexport interface AriaAttributes {\n    'aria-activedescendant'?: string | undefined;\n    'aria-atomic'?: Booleanish | undefined;\n    'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both' | undefined;\n    'aria-busy'?: Booleanish | undefined;\n    'aria-checked'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n    'aria-colcount'?: number | undefined;\n    'aria-colindex'?: number | undefined;\n    'aria-colspan'?: number | undefined;\n    'aria-controls'?: string | undefined;\n    'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time' | undefined;\n    'aria-describedby'?: string | undefined;\n    'aria-details'?: string | undefined;\n    'aria-disabled'?: Booleanish | undefined;\n    // @deprecated\n    'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup' | undefined;\n    'aria-errormessage'?: string | undefined;\n    'aria-expanded'?: Booleanish | undefined;\n    'aria-flowto'?: string | undefined;\n    // @deprecated\n    'aria-grabbed'?: Booleanish | undefined;\n    'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog' | undefined;\n    'aria-hidden'?: Booleanish | undefined;\n    'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling' | undefined;\n    'aria-keyshortcuts'?: string | undefined;\n    'aria-label'?: string | undefined;\n    'aria-labelledby'?: string | undefined;\n    'aria-level'?: number | undefined;\n    'aria-live'?: 'off' | 'assertive' | 'polite' | undefined;\n    'aria-modal'?: Booleanish | undefined;\n    'aria-multiline'?: Booleanish | undefined;\n    'aria-multiselectable'?: Booleanish | undefined;\n    'aria-orientation'?: 'horizontal' | 'vertical' | undefined;\n    'aria-owns'?: string | undefined;\n    'aria-placeholder'?: string | undefined;\n    'aria-posinset'?: number | undefined;\n    'aria-pressed'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n    'aria-readonly'?: Booleanish | undefined;\n    'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals' | undefined;\n    'aria-required'?: Booleanish | undefined;\n    'aria-roledescription'?: string | undefined;\n    'aria-rowcount'?: number | undefined;\n    'aria-rowindex'?: number | undefined;\n    'aria-rowspan'?: number | undefined;\n    'aria-selected'?: Booleanish | undefined;\n    'aria-setsize'?: number | undefined;\n    'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other' | undefined;\n    'aria-valuemax'?: number | undefined;\n    'aria-valuemin'?: number | undefined;\n    'aria-valuenow'?: number | undefined;\n    'aria-valuetext'?: string | undefined;\n}\n\n// @public (undocumented)\nexport type AriaRole = 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'button' | 'cell' | 'checkbox' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'search' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem' | (string & {});\n\n// @public (undocumented)\nexport interface AudioHTMLAttributes<T extends Element> extends Attrs<'audio', T> {\n}\n\n// @public (undocumented)\nexport interface BaseHTMLAttributes<T extends Element> extends Attrs<'base', T> {\n}\n\n// @public (undocumented)\nexport interface BlockquoteHTMLAttributes<T extends Element> extends Attrs<'blockquote', T> {\n}\n\n// @public (undocumented)\nexport type Booleanish = boolean | `${boolean}`;\n\n// @public (undocumented)\nexport interface ButtonHTMLAttributes<T extends Element> extends Attrs<'button', T> {\n}\n\n// @public (undocumented)\nexport interface CanvasHTMLAttributes<T extends Element> extends Attrs<'canvas', T> {\n}\n\n// @public\nexport type ClassList = string | undefined | null | false | Record<string, boolean | string | number | null | undefined> | ClassList[];\n\n// @public (undocumented)\nexport interface ColgroupHTMLAttributes<T extends Element> extends Attrs<'colgroup', T> {\n}\n\n// @public (undocumented)\nexport interface ColHTMLAttributes<T extends Element> extends Attrs<'col', T> {\n}\n\n// @public\nexport const component$: <PROPS = unknown>(onMount: OnRenderFn<PROPS>) => Component<PROPS>;\n\n// @public\nexport type Component<PROPS = unknown> = FunctionComponent<PublicProps<PROPS>>;\n\n// @public (undocumented)\nexport interface ComponentBaseProps {\n    // (undocumented)\n    'q:slot'?: string;\n    // (undocumented)\n    key?: string | number | null | undefined;\n}\n\n// @public\nexport const componentQrl: <PROPS extends Record<any, any>>(componentQrl: QRL<OnRenderFn<PROPS>>) => Component<PROPS>;\n\n// @public (undocumented)\nexport type ComputedFn<T> = () => T;\n\n// @public\nexport interface ContextId<STATE> {\n    readonly __brand_context_type__: STATE;\n    readonly id: string;\n}\n\n// @public\nexport interface CorePlatform {\n    chunkForSymbol: (symbolName: string, chunk: string | null, parent?: string) => readonly [symbol: string, chunk: string] | undefined;\n    importSymbol: (containerEl: Element | undefined, url: string | URL | undefined | null, symbol: string) => ValueOrPromise<any>;\n    isServer: boolean;\n    nextTick: (fn: () => any) => Promise<any>;\n    raf: (fn: () => any) => Promise<any>;\n}\n\n// @public\nexport interface CorrectedToggleEvent extends Event {\n    // (undocumented)\n    readonly newState: 'open' | 'closed';\n    // (undocumented)\n    readonly prevState: 'open' | 'closed';\n}\n\n// @public @deprecated\nexport const createComputed$: <T>(qrl: ComputedFn<T>) => Signal<Awaited<T>>;\n\n// @public (undocumented)\nexport const createComputedQrl: <T>(qrl: QRL<ComputedFn<T>>) => Signal<Awaited<T>>;\n\n// @public\nexport const createContextId: <STATE = unknown>(name: string) => ContextId<STATE>;\n\n// @public @deprecated\nexport const createSignal: UseSignal;\n\n// @public (undocumented)\nexport interface CSSProperties extends CSS_2.Properties<string | number>, CSS_2.PropertiesHyphen<string | number> {\n    [v: `--${string}`]: string | number | undefined;\n}\n\n// @public (undocumented)\nexport interface DataHTMLAttributes<T extends Element> extends Attrs<'data', T> {\n}\n\n// @public (undocumented)\nexport interface DelHTMLAttributes<T extends Element> extends Attrs<'del', T> {\n}\n\n// @internal (undocumented)\nexport const _deserializeData: (data: string, element?: unknown) => any;\n\n// @public (undocumented)\nexport interface DetailsHTMLAttributes<T extends Element> extends Attrs<'details', T> {\n}\n\n// @public (undocumented)\nexport interface DevJSX {\n    // (undocumented)\n    columnNumber: number;\n    // (undocumented)\n    fileName: string;\n    // (undocumented)\n    lineNumber: number;\n    // (undocumented)\n    stack?: string;\n}\n\n// @public (undocumented)\nexport interface DialogHTMLAttributes<T extends Element> extends Attrs<'dialog', T> {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"DOMAttributesBase\" needs to be exported by the entry point index.d.ts\n// Warning: (ae-forgotten-export) The symbol \"QwikEvents\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport interface DOMAttributes<EL extends Element> extends DOMAttributesBase<EL>, QwikEvents<EL> {\n    // (undocumented)\n    class?: ClassList | Signal<ClassList> | undefined;\n}\n\n// @public @deprecated (undocumented)\nexport type EagernessOptions = 'visible' | 'load' | 'idle';\n\n// @public (undocumented)\nexport interface EmbedHTMLAttributes<T extends Element> extends Attrs<'embed', T> {\n}\n\n// @public (undocumented)\nexport interface ErrorBoundaryStore {\n    // (undocumented)\n    error: any | undefined;\n}\n\n// @public (undocumented)\nexport const event$: <T>(qrl: T) => QRL<T>;\n\n// @public\nexport type EventHandler<EV = Event, EL = Element> = {\n    bivarianceHack(event: EV, element: EL): any;\n}['bivarianceHack'];\n\n// @public (undocumented)\nexport const eventQrl: <T>(qrl: QRL<T>) => QRL<T>;\n\n// @public (undocumented)\nexport interface FieldsetHTMLAttributes<T extends Element> extends Attrs<'fieldset', T> {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"SignalDerived\" needs to be exported by the entry point index.d.ts\n//\n// @internal (undocumented)\n```\n\n----------------------------------------\n\nTITLE: Zod QRL Export\nDESCRIPTION: Exports the Zod QRL constructor for creating server-side Zod schema validators.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const zodQrl: ZodConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Full Build without Rust for Qwik\nDESCRIPTION: This command builds everything except Rust prerequisites and optimizer binaries, instead copying those binaries from the latest Qwik package on NPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm build.local\n```\n\n----------------------------------------\n\nTITLE: Defining vercelEdgeAdapter Function in TypeScript\nDESCRIPTION: This function declaration defines the vercelEdgeAdapter, which is used to configure the Vercel Edge adapter for Qwik City. It accepts an optional VercelEdgeAdapterOptions parameter and returns any type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-vercel/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function vercelEdgeAdapter(opts?: VercelEdgeAdapterOptions): any;\n```\n\n----------------------------------------\n\nTITLE: Running Development Setup and Lint Commands in Shell\nDESCRIPTION: Shell commands for setting up the development environment, building the project, and running linting to ensure code quality before submitting a new example.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/examples/apps/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn build\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Creating Products List Route\nDESCRIPTION: Implementation of the products listing page route showing multiple products.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/products/index.tsx\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return (\n    <>\n      <h1>Product List</h1>\n      <h2>Product 1</h2>\n      <h2>Product 2</h2>\n      <h2>Product 3</h2>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring OnVisibleTaskOptions Interface in TypeScript\nDESCRIPTION: Defines an interface for options used in visible task execution, including an optional strategy property.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OnVisibleTaskOptions\n```\n\n----------------------------------------\n\nTITLE: Installing @qwikdev/astro with NPM\nDESCRIPTION: This command manually installs the `@qwikdev/astro` integration package using NPM. This is the standard way to add the integration as a project dependency when not using the Astro CLI.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"npm install @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Package JSON Dependency Configuration\nDESCRIPTION: Configuration example showing how to add dependencies for backwards compatibility between Qwik V1 and V2.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@builder.io/qwik\": \"^1.11.0\",\n    \"@qwik.dev/core\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring QwikBundleGraph Type in TypeScript\nDESCRIPTION: Defines the QwikBundleGraph type as an array of strings and numbers, representing a compact format for bundle dependencies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikBundleGraph = Array<string | number>;\n```\n\n----------------------------------------\n\nTITLE: Zod Constructor Export\nDESCRIPTION: Exports the Zod constructor implementation for creating schema validators.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const zod$: ZodConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotResult Interface for Serialization\nDESCRIPTION: Interface that defines the structure of the result from taking a snapshot of a Qwik application, containing functions, objects, QRLs, resources, and state.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SnapshotResult\n```\n\n----------------------------------------\n\nTITLE: Declaring Source Location Interface in TypeScript\nDESCRIPTION: Interface defining the structure for source code location information, including line numbers, column positions, and position markers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/src/api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceLocation {\n    endCol: number;\n    endLine: number;\n    hi: number;\n    lo: number;\n    startCol: number;\n    startLine: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StaticGenerateAdapterOptions Interface for Qwik-City Static Adapter\nDESCRIPTION: This interface extends the StaticGenerateRenderOptions, omitting the 'outDir' property. It defines the configuration options for the static generation adapter in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-static/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StaticGenerateAdapterOptions extends Omit<StaticGenerateRenderOptions, 'outDir'>\n```\n\n----------------------------------------\n\nTITLE: Defining InlineEntryStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for the inline entry strategy, specifying the type as 'inline'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InlineEntryStrategy\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik integration to Astro with PNPM\nDESCRIPTION: This command adds the `@qwikdev/astro` integration to an existing Astro project using PNPM.  It simplifies the process of incorporating Qwik components by automating dependency installation and configuration modifications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"pnpm dlx astro add @qwikdev/astro\"\n```\n\n----------------------------------------\n\nTITLE: Defining InputHTMLAttributes Type in TypeScript\nDESCRIPTION: The InputHTMLAttributes type is defined for input elements, extending the Attrs structure to ensure proper type checking of HTML input attributes compatible with Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputHTMLAttributes<T extends Element> = Attrs<\n  \"input\",\n  T,\n  HTMLInputElement\n>;\n```\n\n----------------------------------------\n\nTITLE: SVG Props Generic Interface Definition\nDESCRIPTION: Generic interface extending SVGAttributes and QwikAttributes for SVG element props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SVGProps<T extends Element> extends SVGAttributes, QwikAttributes<T> {}\n```\n\n----------------------------------------\n\nTITLE: Defining SourceHTMLAttributes Interface in TypeScript\nDESCRIPTION: Interface that extends HTML attributes specifically for source elements in Qwik's JSX implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceHTMLAttributes<T extends Element> extends Attrs<'source', T>\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Form Validation with Zod and RouteAction$ in QwikCity\nDESCRIPTION: This example demonstrates using Zod for server-side validation with routeAction$. It defines a schema that validates form data before the action executes, providing type safety and automatic error handling.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/action/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeAction$, zod$, z, Form } from '@builder.io/qwik-city';\n\nexport const useAddUser = routeAction$(\n  async (user) => {\n    // The \"user\" is strongly typed: { firstName: string, lastName: string }\n    const userID = await db.users.add({\n      firstName: user.firstName,\n      lastName: user.lastName,\n    });\n    return {\n      success: true,\n      userID,\n    };\n  },\n  // Zod schema is used to validate that the FormData includes \"firstName\" and \"lastName\"\n  zod$({\n    firstName: z.string(),\n    lastName: z.string(),\n  })\n);\n\nexport default component$(() => {\n  const action = useAddUser();\n  return (\n    <>\n      <Form action={action}>\n        <input name=\"firstName\" />\n        <input name=\"lastName\" />\n\n        {action.value?.failed && <p>{action.value.fieldErrors?.firstName}</p>}\n        <button type=\"submit\">Add user</button>\n      </Form>\n      {action.value?.success && (\n        <p>User {action.value.userID} added successfully</p>\n      )}\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik Project Metadata in YAML\nDESCRIPTION: This YAML snippet defines metadata for the Qwik project, including contributors and important timestamps. It lists two contributors and specifies when the project was last updated and created.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/troubleshooting/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontributors:\\n  - mhevery\\n  - adamdbradley\\nupdated_at: '2023-04-20T23:06:55Z'\\ncreated_at: '2023-03-20T23:45:13Z'\n```\n\n----------------------------------------\n\nTITLE: PlatformAzure interface definition in TypeScript\nDESCRIPTION: The PlatformAzure interface extends the Partial<Context> interface, representing the Azure platform context available to Qwik City applications when running on Azure Static Web Apps.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-azure-swa/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformAzure extends Partial<Context>\n```\n\n----------------------------------------\n\nTITLE: Running Server-Side Rendering Development Build for Qwik Docs\nDESCRIPTION: Initiates a server-side rendered build with client-side module prefetching. This mode is useful for testing server-side rendered content during development, though it may be slower than client-only builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev.ssr\n```\n\n----------------------------------------\n\nTITLE: Typescript: `RouteLocation` Interface\nDESCRIPTION: Defines the `RouteLocation` interface with properties for accessing route parameters, the URL, and navigation status.  This interface is returned by the `useLocation()` hook.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/qwik-nutshell/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * The current route location returned by `useLocation()`.\n */\nexport interface RouteLocation {\n  readonly params: Readonly<Record<string, string>>;\n  readonly url: URL;\n  readonly isNavigating: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Various 'xlink' Properties in TypeScript\nDESCRIPTION: These properties define various 'xlink' attributes used in SVG, each of type string or undefined.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'xlink:actuate'?: string | undefined;\n'xlink:arcrole'?: string | undefined;\n'xlink:href'?: string | undefined;\n'xlink:role'?: string | undefined;\n'xlink:show'?: string | undefined;\n'xlink:title'?: string | undefined;\n'xlink:type'?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Additional HTML Element Attribute Interfaces\nDESCRIPTION: Defines additional HTML element attributes interfaces for menu, meta, and meter elements, each extending the base Attrs type with element-specific properties.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MenuHTMLAttributes<T extends Element> extends Attrs<'menu', T>\nexport interface MetaHTMLAttributes<T extends Element> extends Attrs<'meta', T>\nexport interface MeterHTMLAttributes<T extends Element> extends Attrs<'meter', T>\n```\n\n----------------------------------------\n\nTITLE: Defining RenderResult Interface - TypeScript\nDESCRIPTION: Defines the RenderResult interface, which includes properties such as isStatic for checking if rendering is static, manifest for optional Qwik manifest, prefetchResources for listing prefetchable resources, and snapshotResult which might be undefined. This interface is intended to encapsulate the result of a render process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderResult\n```\n\n----------------------------------------\n\nTITLE: Defining KeygenHTMLAttributes Interface\nDESCRIPTION: Defines the KeygenHTMLAttributes interface for the obsolete HTML keygen element. This interface extends the base attributes (Attrs) for HTML elements and is marked as obsolete in HTML5.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface KeygenHTMLAttributes<T extends Element> extends Attrs<'base', T>\n```\n\n----------------------------------------\n\nTITLE: Declaring Cloudflare Pages Adapter Types in TypeScript\nDESCRIPTION: Defines the API types for Cloudflare Pages adapter including the adapter function and configuration options interface. The adapter function accepts optional configuration and the interface extends ServerAdapterOptions with additional Cloudflare-specific settings.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/cloudflare-pages/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @public (undocumented)\nexport function cloudflarePagesAdapter(opts?: CloudflarePagesAdapterOptions): any;\n\n// @public (undocumented)\nexport interface CloudflarePagesAdapterOptions extends ServerAdapterOptions {\n    functionRoutes?: boolean;\n    staticPaths?: string[];\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Qwik City Node.js API Definitions in TypeScript\nDESCRIPTION: Generated API report showing the public interfaces and functions for integrating Qwik City with Node.js servers. Includes the createQwikCity function for setting up routing, static file handling, and 404 handling, along with supporting interfaces for Node request handling options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/node/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"node\" />\n\nimport type { ClientConn } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { Http2ServerRequest } from 'node:http2';\nimport type { IncomingMessage } from 'node:http';\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ServerResponse } from 'node:http';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityNodeRequestOptions): {\n    router: (req: IncomingMessage | Http2ServerRequest, res: ServerResponse, next: NodeRequestNextFunction) => Promise<void>;\n    notFound: (req: IncomingMessage | Http2ServerRequest, res: ServerResponse, next: (e: any) => void) => Promise<void>;\n    staticFile: (req: IncomingMessage | Http2ServerRequest, res: ServerResponse, next: (e?: any) => void) => Promise<void>;\n};\n\n// @public (undocumented)\nexport interface NodeRequestNextFunction {\n    // (undocumented)\n    (err?: any): void;\n}\n\n// @public (undocumented)\nexport interface PlatformNode {\n    // (undocumented)\n    incomingMessage?: IncomingMessage | Http2ServerRequest;\n    // (undocumented)\n    node?: string;\n    // (undocumented)\n    ssr?: true;\n}\n\n// @public (undocumented)\nexport interface QwikCityNodeRequestOptions extends ServerRenderOptions {\n    getClientConn?: (req: IncomingMessage | Http2ServerRequest) => ClientConn;\n    getOrigin?: (req: IncomingMessage | Http2ServerRequest) => string | null;\n    // @deprecated (undocumented)\n    origin?: string;\n    static?: {\n        root?: string;\n        cacheControl?: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Labs with npm\nDESCRIPTION: Installs the Qwik Labs package directly from the GitHub repository using npm. This command fetches the latest build from the `main` branch of the `QwikDev/qwik-labs-build` repository.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install github:QwikDev/qwik-labs-build#main\n```\n\n----------------------------------------\n\nTITLE: Defining 'q:slot' Property in TypeScript\nDESCRIPTION: This code defines a 'q:slot' property of type string, which is likely used for handling slots in a component system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'q:slot'?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining AreaHTMLAttributes Interface in TypeScript\nDESCRIPTION: This interface extends Attrs<'area', T> to define attributes specific to area HTML elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AreaHTMLAttributes<T extends Element> extends Attrs<'area', T>\n```\n\n----------------------------------------\n\nTITLE: Declaring routeAction$ constant in Qwik\nDESCRIPTION: This snippet declares a constant `routeAction$` of type `ActionConstructor`. This constant likely represents a function or class used to create route actions within a Qwik City application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nrouteAction$: ActionConstructor;\n```\n\n----------------------------------------\n\nTITLE: Zod Constructor Type Definition\nDESCRIPTION: Defines the type signature for Zod schema constructor that supports both direct schema objects and factory functions with request event context.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ZodConstructor = {\n    <T extends z_2.ZodRawShape>(schema: T): ZodDataValidator<z_2.ZodObject<T>>;\n    <T extends z_2.ZodRawShape>(schema: (zod: typeof z_2.z, ev: RequestEvent) => T): ZodDataValidator<z_2.ZodObject<T>>;\n    <T extends z_2.Schema>(schema: T): ZodDataValidator<T>;\n    <T extends z_2.Schema>(schema: (zod: typeof z_2.z, ev: RequestEvent) => T): ZodDataValidator<T>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PrefetchServiceWorker Function in TypeScript (Obsolete)\nDESCRIPTION: Declares an obsolete function for prefetching service worker, which is no longer needed for new projects but can be used to uninstall existing service workers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nPrefetchServiceWorker: (opts: {\n  base?: string;\n  scope?: string;\n  path?: string;\n  verbose?: boolean;\n  fetchBundleGraph?: boolean;\n  nonce?: string;\n}) => JSXNode<\"script\">;\n```\n\n----------------------------------------\n\nTITLE: Adding Tauri Script to package.json - JSON Configuration\nDESCRIPTION: This JSON snippet shows how to add a custom script to the package.json file for running Tauri commands. Here, 'tauri' is set as a script that can be run using the chosen package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tauri/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"tauri\": \"tauri\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Statement JSX/TSX Components\nDESCRIPTION: Import statements for MDX article components and code sandbox functionality\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/the-qase-for-qwik-love-at-first-tti/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArticleBlock } from '~/routes/(blog)/blog/components/mdx/article-block';\nimport CodeSandbox from '~/components/code-sandbox/index.tsx';\n```\n\n----------------------------------------\n\nTITLE: Defining MinifyMode Type in TypeScript\nDESCRIPTION: Type definition for minify modes, which can be 'simplify' or 'none'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MinifyMode = \"simplify\" | \"none\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Qwik Blog Post\nDESCRIPTION: This snippet shows the import statements for various components used in the Qwik blog post. It includes imports for ArticleBlock, DiscordLink, and CodeSandbox components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-rc-milestone/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArticleBlock } from '~/routes/(blog)/blog/components/mdx/article-block';\nimport { DiscordLink } from '~/routes/(blog)/blog/components/mdx/discord-link';\nimport CodeSandbox from '~/components/code-sandbox/index.tsx';\n```\n\n----------------------------------------\n\nTITLE: Missing Key Prop in Qwik Iterator with Fragment - Incorrect\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingIterKeyUsePrag` case. It demonstrates the incorrect way of trying to assign a key to a shorthand fragment in a Qwik component, highlighting that shorthand fragments do not support keys and should be replaced with `<Fragment>`.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport Card from './Card';\nimport Summary from './Summary';\n\nexport const Person = component$(() => {\n  const person  = {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 32,\n  }\n\n  return (\n    {Object.keys(person).map((color) => (\n      < key={`person-${key}`}>\n        <Card value={person[key]} />\n        <Summary value={person[key]} />\n      </>\n    ))}\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik 1.2.0 Packages\nDESCRIPTION: Package dependency specifications for Qwik 1.2.0 showing the core package, Qwik City, and the ESLint plugin versions to use in package.json.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-1-2-performance-autopilot/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"@builder.io/qwik\": \"~1.2.0\",\n\"@builder.io/qwik-city\": \"~1.2.0\",\n\"eslint-plugin-qwik\": \"~1.2.0\",\n```\n\n----------------------------------------\n\nTITLE: Declaring QwikCityMockProvider Component in Qwik\nDESCRIPTION: This snippet declares a `QwikCityMockProvider` component type in Qwik, importing it from the `@builder.io/qwik` library. The component accepts `QwikCityMockProps` as properties. This component likely provides a mock environment for Qwik City components during testing or development.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nQwikCityMockProvider: import(\"@builder.io/qwik\").Component<QwikCityMockProps>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Pathname in Qwik City\nDESCRIPTION: This middleware retrieves the base pathname of the application where it is mounted, allowing for flexibility in routing when the application is not mounted at the root level.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ basePathname, json }) => {\n  json(200, { basePathname });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Framer Motion Components in a Qwik Route\nDESCRIPTION: Using both simple and complex Framer Motion components in a Qwik route with different client hydration strategies. The FramerQwik component uses client:idle while the ImageGallery uses client:visible for lazy loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// FILE: src/routes/index.tsx\n// ==========================================\n\nimport { component$ } from '@builder.io/qwik';\nimport { FramerQwik } from '~/integrations/react/framer';\nimport { ImageGallery } from '~/integrations/react/image-gallery';\n\nexport default component$(() => {\n  return (\n    <div class=\"flex flex-col gap-4\">\n      <h1 class=\"text-3xl\">Qwik/React Framer Motion</h1>\n      <div class=\"grid place-content-center\">\n        <FramerQwik client:idle />\n      </div>\n      <ImageGallery client:visible />\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Development Server Output\nDESCRIPTION: Example output showing the Vite development server running successfully with local access URL.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/qwikcity-test/src/routes/docs/getting-started/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n  vite v2.8.6 dev server running at:\n\n  > Local: http://localhost:3000/\n  > Network: use `--host` to expose\n\n  ready in 157ms.\n```\n\n----------------------------------------\n\nTITLE: Pausing a Qwik Application with DevTools\nDESCRIPTION: This code snippet demonstrates how to pause a Qwik application using DevTools. The command accesses the Qwik instance on the HTML element, which serves as a Qwik container, and calls the pause method to serialize the current application state.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/the-qase-for-qwik-love-at-first-tti/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$0.qwik.pause()\n```\n\n----------------------------------------\n\nTITLE: Defining TransformFsOptions Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `TransformFsOptions` interface, which extends `TransformOptions`. It includes the `vendorRoots` property, which is an array of strings.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nexport interface TransformFsOptions extends TransformOptions\n```\n```\n\n----------------------------------------\n\nTITLE: versions Constant Definition - TypeScript\nDESCRIPTION: Defines the versions object with readonly properties for qwik and qwikDom, each being a string. It helps maintain the current version info of these components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nversions: {\n    readonly qwik: string;\n    readonly qwikDom: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining createOptimizer Function in TypeScript\nDESCRIPTION: Function signature for creating an optimizer instance, taking optional optimizer options and returning a promise that resolves to an Optimizer object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateOptimizer: (optimizerOptions?: OptimizerOptions) => Promise<Optimizer>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu in Qwik Layout Component\nDESCRIPTION: Demonstrates how to use the useContent() hook to retrieve menu data and render it in a Qwik layout component, including active link highlighting.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/menu/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useLocation, useContent } from '@builder.io/qwik-city';\nexport default component$(() => {\n  const { menu } = useContent();\n  const { url } = useLocation();\n\n  return (\n    <nav class=\"menu\">\n      {menu\n        ? menu.items?.map((item, index) => (\n            <div key={index}>\n              <h5>{item.text}</h5>\n              <ul>\n                {item.items?.map((item, subIndex) => (\n                  <li key={`item-${index}-${subIndex}`}>\n                    <a\n                      href={item.href}\n                      class={{\n                        'is-active': url.pathname === item.href,\n                      }}\n                    >\n                      {item.text}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))\n        : null}\n    </nav>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries Against Turso SQLite Database Using curl\nDESCRIPTION: This command demonstrates how to send SQL queries to a Turso SQLite database endpoint for debugging responses. It uses curl to make a POST request to the pipeline endpoint with a JSON payload containing the SQL query, and includes authentication via a bearer token.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/insights/src/db/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://qwik-bundalyzer-mhevery.turso.io/v2/pipeline \\\n  -d '{\"requests\":[{\"type\": \"execute\", \"stmt\": {\"sql\": \"'$QUERY'\"}}]}'\n  -H \"Authorization: Bearer $PRIVATE_LIBSQL_DB_API_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Server Function Utilities for Qwik City in TypeScript\nDESCRIPTION: Defines utilities for creating server functions in Qwik City, including both regular and QRL versions. These allow defining functions that run exclusively on the server.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const server$: <T extends ServerFunction>(qrl: T, options?: ServerConfig | undefined) => ServerQRL<T>;\n\nexport type ServerFunction = {\n    (this: RequestEventBase, ...args: any[]): any;\n    options?: ServerConfig;\n};\n\nexport type ServerQRL<T extends ServerFunction> = QRL<((abort: AbortSignal, ...args: Parameters<T>) => ReturnType<T>) | ((...args: Parameters<T>) => ReturnType<T>)>;\n\nexport const serverQrl: <T extends ServerFunction>(qrl: QRL<T>, options?: ServerConfig) => ServerQRL<T>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployment Platform in Qwik City\nDESCRIPTION: This middleware allows the retrieval of the deployment platform's specific environment, returning a list of platform features such as Azure or Vercel.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ platform, json }) => {\n  json(200, Object.keys(platform));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GetValidatorType Type in TypeScript\nDESCRIPTION: Defines a type alias that uses GetValidatorOutputType to get the output type of a TypedDataValidator.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GetValidatorType<VALIDATOR extends TypedDataValidator> =\n  GetValidatorOutputType<VALIDATOR>;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Image Usage: Missing Width and Height\nDESCRIPTION: This snippet shows an incorrect usage of the `<img>` element where the `width` and `height` attributes are missing. For performance reasons, ESLint flags this as an error, encouraging developers to always provide these attributes to prevent layout shifts.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\n<img src=\"/static/images/portrait-01.webp\">\n```\n\n----------------------------------------\n\nTITLE: Correct Image Usage: Width and Height Attributes\nDESCRIPTION: This snippet demonstrates the correct usage of `<img>` elements by providing the `width` and `height` attributes. Including these attributes prevents layout shifts and improves page performance. The ESLint rule enforces this practice for all `<img>` elements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n<img width=\"200\" height=\"600\" src=\"/static/images/portrait-01.webp\">\n```\n\n----------------------------------------\n\nTITLE: Redirecting in Qwik City\nDESCRIPTION: This middleware allows redirecting to a new URL by throwing a redirect exception, which prevents further middleware from executing.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/middleware/index.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type RequestHandler } from '@builder.io/qwik-city';\n\nexport const onGet: RequestHandler = async ({ redirect, url }) => {\n  throw redirect(\n    308,\n    new URL('/demo/qwikcity/middleware/status/', url).toString()\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for InOrderStreaming in TypeScript\nDESCRIPTION: Type definition for in-order streaming configurations. It's a union of InOrderAuto, InOrderDisabled, and InOrderDirect interfaces.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InOrderStreaming = InOrderAuto | InOrderDisabled | InOrderDirect;\n```\n\n----------------------------------------\n\nTITLE: Using ArticleBlock Component in MDX\nDESCRIPTION: This snippet shows how the ArticleBlock component is used to wrap the entire content of the blog post, providing consistent styling and layout for the article content.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-next-leap/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ArticleBlock>\n\n## We've got some exciting news to share with you today!\n\nQwik, which started as a small project we really needed for our own product, has grown into a worldwide phenomenon.\n\n[...content omitted for brevity...]\n\nWe're excited to see Qwik become‚Ä¶well‚Ä¶Qwiker! üòäüí™‚ö°\n\n</ArticleBlock>\n```\n\n----------------------------------------\n\nTITLE: Creating a CSP Route Plugin Directory Structure in Qwik\nDESCRIPTION: This bash snippet shows the file structure for implementing a CSP plugin in a Qwik application. The highlighted line indicates the plugin file that runs on every request as a route middleware.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/content-security-policy/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ plugin@csp.ts         # The plugin which runs on every request (route middleware)\n    ‚îú‚îÄ‚îÄ contact/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.mdx         # https://example.com/contact\n    ‚îú‚îÄ‚îÄ about/\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.md          # https://example.com/about\n    ‚îú‚îÄ‚îÄ index.mdx             # https://example.com/\n    ‚îÇ\n    ‚îî‚îÄ‚îÄ layout.tsx            # This layout is used for all pages\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useSignal in Qwik Component\nDESCRIPTION: Demonstrates the correct way to use the useSignal hook within a Qwik component function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Counter = component$(() => {\n  const count = useSignal(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City Firebase API in TypeScript\nDESCRIPTION: This code snippet defines the API for Qwik City Firebase integration. It includes imports, function declarations, and interface definitions for creating a Qwik City instance and handling Firebase-specific options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/firebase/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityFirebaseOptions): (req: any, res: any) => Promise<void>;\n\n// @public (undocumented)\nexport interface PlatformFirebase extends Object {\n}\n\n// @public (undocumented)\nexport interface QwikCityFirebaseOptions extends ServerRenderOptions {\n}\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Multiple Custom 404 Pages in Qwik City\nDESCRIPTION: Shows how to implement multiple custom 404 pages for different sections of a website using Qwik City's directory-based routing. This example includes a specific 404 page for the account section.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/routing/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îî‚îÄ‚îÄ routes/\n    ‚îú‚îÄ‚îÄ account/\n    ‚îÇ   ‚îî‚îÄ‚îÄ 404.tsx        # Custom Account 404\n    ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx      # https://example.com/account/\n    ‚îú‚îÄ‚îÄ 404.tsx            # Custom 404\n    ‚îú‚îÄ‚îÄ layout.tsx         # Default layout\n    ‚îî‚îÄ‚îÄ index.tsx          # https://example.com/\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component in Qwik\nDESCRIPTION: This code snippet demonstrates the correct way to import and use an image component in Qwik. Instead of directly referencing image paths from the public directory, images are imported as ESM modules for optimization and caching benefits. The imported Image component is then rendered.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from '~/media/image.png';\n<Image />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Azure Static Web App with Qwik\nDESCRIPTION: This YAML snippet shows the configuration for GitHub Actions to deploy a Qwik project to Azure Static Web App. It specifies the app location, API location, output directory, and importantly, sets skip_api_build to true to accommodate Qwik's build process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/azure-swa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napp_location: \"/\"\napi_location: \"azure-functions\"\noutput_location: \"dist\"\nskip_api_build: true # <--- add this line\n###### End of Repository/Build Configurations ######\n```\n\n----------------------------------------\n\nTITLE: Accessing currentTarget in Qwik Event Handlers\nDESCRIPTION: Illustrates how to access the currentTarget of an event in Qwik event handlers using the second argument of the handler function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const currentElm = useSignal<HTMLElement|null>(null);\n  const targetElm = useSignal<HTMLElement|null>(null);\n\n  return (\n    <section onClick$={(event, currentTarget) => {\n      currentElm.value = currentTarget;\n      targetElm.value = event.target as HTMLElement;\n    }}>\n      Click on any text <code>target</code> and <code>currentElm</code> of the event.\n      <hr/>\n      <p>Hello <b>World</b>!</p>\n      <hr/>\n      <ul>\n        <li>currentElm: {currentElm.value?.tagName}</li>\n        <li>target: {targetElm.value?.tagName}</li>\n      </ul>\n    </section>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Example Metadata to JSON Configuration\nDESCRIPTION: Diff showing how to update the examples-menu.json file to include a new example with its ID, title, description, and icon.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/examples/apps/README.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n[\n  {\n    \"id\": \"introduction\",\n    \"title\": \"Introduction\",\n    \"apps\": [\n      {\n        \"id\": \"hello-world\",\n        \"title\": \"Hello World\",\n        \"description\": \"The simplest Qwik app.\",\n        \"icon\": \"üåé\"\n      },\n+      {\n+        \"id\": \"my-new-example\",\n+        \"title\": \"New demo\",\n+        \"description\": \"Just some text.\",\n+        \"icon\": \"üôä\"\n+      }\n    ]\n  },\n```\n\n----------------------------------------\n\nTITLE: Disallowing javascript: URLs in Qwik onClick$ handler\nDESCRIPTION: This snippet demonstrates the `jsx-no-script-url` ESLint rule, which disallows the use of `javascript:` URLs in `onClick$` handlers in Qwik components. The incorrect example shows how the rule flags potentially unsafe JavaScript execution.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n<button onClick$=\"javascript:alert('open the door please')\">ring</button>\n```\n\n----------------------------------------\n\nTITLE: Declaring the cloudflarePagesAdapter Function for Qwik City\nDESCRIPTION: Function declaration for the Cloudflare Pages adapter that configures Qwik applications for deployment to Cloudflare Pages. The function accepts an optional configuration object.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-cloudflare-pages/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function cloudflarePagesAdapter(\n  opts?: CloudflarePagesAdapterOptions,\n): any;\n```\n\n----------------------------------------\n\nTITLE: Building Server-Side Modules for Production in Qwik\nDESCRIPTION: Command to create a production build that generates the server-side render (SSR) module used by the server to render HTML.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-auth/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build.server\n```\n\n----------------------------------------\n\nTITLE: Using a Qwik Component\nDESCRIPTION: Example demonstrating how to use a previously defined Qwik component by passing props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyApp = component$(() => {\\n  return (\\n    <main>\\n      <Counter value={100} step={1} />\\n    </main>\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Tauri Development Environment - Shell Commands\nDESCRIPTION: These shell commands are used to start the development environment for a Tauri application. By executing the Tauri dev script, a developer can preview the application. The commands are specific to the package manager in use: pnpm, npm, yarn, or bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tauri/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm run tauri dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run tauri dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run tauri dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run tauri dev\n```\n\n----------------------------------------\n\nTITLE: Setting Basic HTML Attributes in QwikCity SSR\nDESCRIPTION: Demonstrates how to set basic HTML attributes like language using containerAttributes in the SSR entry file. This approach allows setting static attributes that will be applied to the HTML root element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/html-attributes/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function (opts: RenderToStreamOptions) {\n  return renderToStream(<Root />, {\n    manifest,\n    ...opts,\n    // Use container attributes to set attributes on the html tag.\n    containerAttributes: {\n      lang: \"en-us\",\n      ...opts.containerAttributes,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Events Synchronously with sync$() in Qwik\nDESCRIPTION: This example demonstrates how to use the `sync$()` function to process events synchronously in Qwik. The code handles a click event on a link, preventing default behavior when the Ctrl key is pressed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/events/synchronous-sync/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n  <a href=\"/\" \n    onClick$={sync$((event, target) => {\n      if (event.ctrlKey) {\n        event.preventDefault();\n      }\n    })}>\n    link\n  </a>\n```\n\n----------------------------------------\n\nTITLE: Defining Loader Types for Qwik City in TypeScript\nDESCRIPTION: Defines types for loaders in Qwik City, including a Loader type and a LoaderSignal type. These are used for loading data on the server and making it available to components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Loader_2<RETURN> = {\n    (): LoaderSignal<RETURN>;\n};\nexport { Loader_2 as Loader }\n\nexport type LoaderSignal<TYPE> = TYPE extends () => ValueOrPromise<infer VALIDATOR> ? ReadonlySignal<ValueOrPromise<VALIDATOR>> : ReadonlySignal<TYPE>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugins for Qwik Project\nDESCRIPTION: A basic Vite configuration for a Qwik project that includes the qwikCity and qwikVite plugins along with TypeScript path resolution. This is the standard configuration found in a scaffolded Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/vite/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { qwikCity } from '@builder.io/qwik-city/vite';\nimport { qwikVite } from '@builder.io/qwik/optimizer';\nimport tsconfigPaths from 'vite-tsconfig-paths';\n\nexport default defineConfig(() => {\n  return {\n    plugins: [qwikCity(), qwikVite(), tsconfigPaths()],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in MDX Format\nDESCRIPTION: This snippet demonstrates how to import React components (ArticleBlock and CodeSandbox) in MDX format for use in a blog post. These components help structure the layout of the article.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-next-leap/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArticleBlock } from '~/routes/(blog)/blog/components/mdx/article-block';\nimport CodeSandbox from '~/components/code-sandbox/index.tsx';\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Version history and release notes for the Domino library, documenting changes, bug fixes, and new features across multiple releases.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-dom/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# domino x.x.x (not yet released)\n\n# domino 2.1.6 (16 Jul 2020)\n\n- Bumped version of lodash (#169)\n- Performance improvement to DOMTokenList (#166)\n- `mocha` dependency has been updated to 6.x. As a result, we are\n  no longer testing on node 4.\n\n# domino 2.1.5 (30 Apr 2020)\n\n- Bumped version of jquery dev dependency (#163)\n- Omit tests/ directory from NPM package (#161)\n\n[...remaining changelog entries...]\n```\n\n----------------------------------------\n\nTITLE: Declaring routeLoaderQrl constant in Qwik\nDESCRIPTION: This snippet declares a constant `routeLoaderQrl` of type `LoaderConstructorQRL`. This constant likely represents a QRL (Qwik URL) function or class used to create route loaders within a Qwik City application, enabling lazy loading of the loader.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nrouteLoaderQrl: LoaderConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Adding Integrations with bun\nDESCRIPTION: Enable integration addition to a Qwik City application by running a command through bun. It is necessary to have bun installed. Running this command will prompt the user for integration selection.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add\n```\n\n----------------------------------------\n\nTITLE: Validator Return Type Definition\nDESCRIPTION: Defines the return type for validators, which can be either a success or fail result with generic type support.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValidatorReturn<T extends Record<string, any> = {}> = ValidatorReturnSuccess | ValidatorReturnFail<T>;\n```\n\n----------------------------------------\n\nTITLE: MDX Component Integration Directory Structure\nDESCRIPTION: Directory structure showing how to integrate Qwik components with MDX files\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n‚îú‚îÄ‚îÄ components/\n|   ‚îî‚îÄ‚îÄ counter\n‚îÇ       ‚îî‚îÄ‚îÄ  counter.tsx\n‚îî‚îÄ‚îÄ routes/\n    ‚îî‚îÄ‚îÄ some/\n        ‚îî‚îÄ‚îÄ path/\n            ‚îî‚îÄ‚îÄ index.mdx    # https://example.com/some/path\n```\n\n----------------------------------------\n\nTITLE: Colocated Loaders with Authentication\nDESCRIPTION: Demonstrates how to use multiple loaders from different locations and combine them in a component.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-server-functions/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthSessionLoader } from '../../layout.ts';\n\nexport const useGetLoggedInUserMessage = loader$(() => { \n  return { \n    message:'Glad to have you back!'\n  }\n});\n  \nexport default component$(() => {\n  const signal = useAuthSessionLoader();\n  const loggedInUserMessage = useGetLoggedInUserMessage();\n\n  return (\n    <div>\n      { signal.value.isLogin\n        ? loggedInUserMessage.value.message\n        : 'You are NOT logged in'\n      }\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with DOM Structure Change in Qwik\nDESCRIPTION: This example shows a Qwik component that causes a structural change in the DOM (replacing an h1 element with a button), which triggers the use of virtual DOM for rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/faq/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const StructuralChange = component$(() => {\n  const isLoggedIn = useSignal(false);\n  return (\n    <div>\n      {isLoggedIn.value ? <h1>you are logged in!</h1> : <button>Log in</button>}\n    </div>\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Symbols with component$ and onClick$ in Qwik\nDESCRIPTION: Example showing how to create lazy-loadable symbols in Qwik using component$ and onClick$ for a counter component. This creates two symbols that can be independently loaded.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/bundle/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <button onClick$={() => count.value++}>\n      Increment {count.value}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Signal State Management Interface and Hook in Qwik\nDESCRIPTION: Defines the UseSignal interface and useSignal hook for reactive state management in Qwik. This allows components to maintain reactive state that triggers re-renders when changed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport interface UseSignal {\n    // (undocumented)\n    <T>(): Signal<T | undefined>;\n    // (undocumented)\n    <T>(value: T | (() => T)): Signal<T>;\n}\n\n// @public\nexport const useSignal: UseSignal;\n```\n\n----------------------------------------\n\nTITLE: Defining Route Action and Loader Functions for Qwik City in TypeScript\nDESCRIPTION: Declares functions for creating route actions and loaders in Qwik City. These are used to define server-side logic associated with specific routes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const routeAction$: ActionConstructor;\n\nexport const routeActionQrl: ActionConstructorQRL;\n\nexport const routeLoader$: LoaderConstructor;\n\nexport const routeLoaderQrl: LoaderConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Unprojected Content in Qwik\nDESCRIPTION: Shows the HTML output for unprojected content, demonstrating how Qwik maintains unprojected content in a <q:template> element for later use without requiring parent component re-rendering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/slots/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1>‚ñ∂Ô∏é</h1>\n</div>\n<q:template q:slot hidden aria-hidden=\"true\">\n  I am pre-rendered on the Server and hidden until needed.\n</q:template>\n```\n\n----------------------------------------\n\nTITLE: QRL Capturing Rules Example in TypeScript\nDESCRIPTION: Illustrates the rules for capturing variables in QRL expressions, including importability and const requirements.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContextId, useContext, useContextProvider } from '@builder.io/qwik';\n\n// Valid\nconst foo = 12;\nconst bar = $(/* @__PURE__ */ () => foo);\n\n// Invalid\nlet foo = 12;\nconst bar = $(/* @__PURE__ */ () => foo);\n\n// Valid\nimport { foo } from './foo';\nconst bar = $(/* @__PURE__ */ () => foo);\n\n// Invalid\nconst foo = 12;\nconst bar = $(/* @__PURE__ */ () => foo++);\n```\n\n----------------------------------------\n\nTITLE: Person Form Action with Zod Validation\nDESCRIPTION: Example of a route action with Zod validation for a person object with nested address and pets fields.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/advanced/complex-forms/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const addPersonAction = routeAction$(\n  async person => {\n    return { success: true, person };\n  },\n  // Zod schema is used to validate the FormData\n  zod$({\n    person: z.object({\n      name: z.string(),\n      email: z.string().email(),\n      address: z.object({\n        street: z.string(),\n        city: z.string(),\n        state: z.string(),\n        zip: z.coerce.number(),\n      }),\n      pets: z.array(z.string()),\n    }),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Optimized QRL Code After Transformation\nDESCRIPTION: Example showing how the Qwik Optimizer transforms QRL references into lazy-loadable modules.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// Transformed by the Qwik Optimizer\\nconst lazyFunction = qrl('./chunk-abc.js', 'myFunction_0');\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Qwik City AWS Lambda Integration\nDESCRIPTION: Defines the core types and interfaces for Qwik City's AWS Lambda integration, including request handlers, server options, and platform-specific implementations. Contains imports from various Qwik packages and Node.js built-in modules.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/aws-lambda/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"node\" />\n\nimport type { EnvGetter } from '@builder.io/qwik-city/middleware/request-handler';\nimport { Http2ServerRequest } from 'http2';\nimport { IncomingMessage } from 'http';\nimport { NodeRequestNextFunction } from '@builder.io/qwik-city/middleware/node';\nimport type { QwikIntrinsicElements } from '@builder.io/qwik';\nimport type { QwikManifest } from '@builder.io/qwik/optimizer';\nimport type { RequestHandler } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ResolvedManifest } from '@builder.io/qwik/optimizer';\nimport type { ResolveSyncValue } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\nimport { ServerResponse } from 'http';\nimport type { SnapshotResult } from '@builder.io/qwik';\nimport type { StreamWriter } from '@builder.io/qwik';\nimport type { SymbolMapperFn } from '@builder.io/qwik/optimizer';\n\nexport function createQwikCity(opts: AwsOpt): {\n    fixPath: (pathT: string) => string;\n    router: (req: IncomingMessage | Http2ServerRequest, res: ServerResponse<IncomingMessage>, next: NodeRequestNextFunction) => Promise<void>;\n    staticFile: (req: IncomingMessage | Http2ServerRequest, res: ServerResponse<IncomingMessage>, next: (e?: any) => void) => Promise<void>;\n    notFound: (req: IncomingMessage | Http2ServerRequest, res: ServerResponse<IncomingMessage>, next: (e: any) => void) => Promise<void>;\n    handle: (req: any, res: any) => void;\n};\n\nexport interface PlatformAwsLambda extends Object {\n}\n\nexport interface QwikCityAwsLambdaOptions extends ServerRenderOptions {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik City Middleware for Netlify Edge Functions in TypeScript\nDESCRIPTION: The createQwikCity function creates a middleware handler for Netlify Edge Functions. It takes QwikCityNetlifyOptions configuration and returns a function that processes requests in the Netlify Edge environment.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-netlify-edge/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createQwikCity(\n  opts: QwikCityNetlifyOptions,\n): (request: Request, context: Context) => Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS-in-JS Styles with styled-vanilla-extract in Qwik\nDESCRIPTION: Creates a CSS-in-JS style using styled-vanilla-extract, which provides an efficient solution without runtime overhead. The style defines a blue block element.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { style } from 'styled-vanilla-extract/qwik';\n\nexport const blueClass = style({\n  display: 'block',\n  width: '100%',\n  height: '500px',\n  background: 'blue',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing qwik-image using yarn\nDESCRIPTION: Command to install the qwik-image package using yarn package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/image-optimization/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyarn add qwik-image\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia Environment Variables in Qwik\nDESCRIPTION: Sets up environment variables for Algolia integration, including the index name, application ID, and search-only API key. These variables are essential for connecting to the Algolia service.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/cookbook/algolia-search/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nVITE_ALGOLIA_INDEX=\nVITE_ALGOLIA_APP_ID=\nVITE_ALGOLIA_SEARCH_KEY=\n```\n\n----------------------------------------\n\nTITLE: Running Server-Side Rendering Development Build for Qwik React\nDESCRIPTION: Initiates a development build with server-side rendering and client-side module prefetching. This mode is useful for testing SSR during development but may be slower than client-only builds.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev.ssr\n```\n\n----------------------------------------\n\nTITLE: Adding Vercel Edge Adapter with Shell Commands\nDESCRIPTION: Multiple shell commands for integrating the Vercel Edge adapter using various package managers. This step installs necessary dependencies including the Vercel CLI, and updates relevant configuration files.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/vercel-edge/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add vercel-edge\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add vercel-edge\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add vercel-edge\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add vercel-edge\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading with $ Syntax in Qwik\nDESCRIPTION: Demonstration of how $ syntax is used for lazy loading in Qwik. Shows the implementation of a scroll event handler using $ for code splitting and lazy loading.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onScroll(fnQrl: QRL<() => void>) {\n  document.addEventListener('scroll', async () => {\n    const fn = await fnQrl.resolve();\n    fn();\n  });\n}\n\nonScroll($(() => alert('scroll')));\n```\n\n----------------------------------------\n\nTITLE: Tags Component Implementation\nDESCRIPTION: Qwik component demonstrating how to access and display frontmatter data\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useDocumentHead } from '@builder.io/qwik-city';\n\nexport const Tags = component$(() => {\n  const { frontmatter } = useDocumentHead();\n  \n  if (frontmatter.tags.length === 0) {\n    return null;\n  }\n  \n  return (\n    <ul>\n      {frontmatter.tags.map((tag: string) => (\n        <li key={`tag-${tag}`}>{tag}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining QWIK_CITY_SCROLLER constant in Qwik\nDESCRIPTION: This snippet defines a constant `QWIK_CITY_SCROLLER` with the value `\"_qCityScroller\"`.  This constant is probably used as an identifier for a scroller element or service within the Qwik City framework.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nQWIK_CITY_SCROLLER = \"_qCityScroller\";\n```\n\n----------------------------------------\n\nTITLE: Valid and Invalid $ Function Expressions\nDESCRIPTION: Examples of allowed and disallowed expressions in $ functions, including literals, importable identifiers, and closures. This illustrates the rules for using $ syntax in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst bar = 'bar';\nconst foo = 'foo';\n\n// Invalid expressions\nfoo$({ value: bar }); // it contains a local identifier \"bar\"\nfoo$(`Hello, ${bar}`); // it contains a local identifier \"bar\"\nfoo$(count + 1); // it contains a local identifier \"count\"\nfoo$(foo); // foo is not exported, so it's not importable\n\n// Valid expressions\nfoo$(`Hello, bar`); // string literal without local identifiers\nfoo$({ value: 'stuff' }); // object literal without local identifiers\nfoo$(1 + 3); // expression without local identifiers\n```\n\n----------------------------------------\n\nTITLE: Adding Key Prop in Qwik Array - Correct\nDESCRIPTION: This snippet illustrates the `jsx-key` ESLint rule, focusing on the `missingArrayKey` case. It demonstrates the correct way to add a unique `key` prop to list items generated from an array in a Qwik component, improving rendering performance.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const ColorList = component$(() => {\n  const colors = ['red', 'green', 'blue'];\n\n  return (\n    <ul>\n      {colors.map((color) => (\n        <li key={`color-${color}`}>{color}</li>\n      ))}\n    </ul>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Orama via bun\nDESCRIPTION: This snippet features the command to add Orama using bun. It facilitates the integration of the Orama search engine into Qwik applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/orama/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add orama\n```\n\n----------------------------------------\n\nTITLE: Defining EntryStrategy Type in TypeScript\nDESCRIPTION: Type definition for various entry strategies, including inline, hoist, single, hook, segment, component, and smart strategies.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EntryStrategy =\n  | InlineEntryStrategy\n  | HoistEntryStrategy\n  | SingleEntryStrategy\n  | HookEntryStrategy\n  | SegmentEntryStrategy\n  | ComponentEntryStrategy\n  | SmartEntryStrategy;\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Labs with Yarn\nDESCRIPTION: Installs the Qwik Labs package directly from the GitHub repository using Yarn. This command fetches the latest build from the `main` branch of the `QwikDev/qwik-labs-build` repository.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/labs/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add github:QwikDev/qwik-labs-build#main\n```\n\n----------------------------------------\n\nTITLE: QwikCityNetlifyOptions Interface Definition in TypeScript\nDESCRIPTION: The QwikCityNetlifyOptions interface extends ServerRenderOptions with Netlify-specific configuration for Qwik City. This interface is used to configure the createQwikCity function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-netlify-edge/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QwikCityNetlifyOptions extends ServerRenderOptions\n```\n\n----------------------------------------\n\nTITLE: Displaying Qwik Library Project Structure\nDESCRIPTION: Shows the directory structure of a Qwik Library project, including the public and src folders, with emphasis on the components directory and index.ts file.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-labs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n‚îú‚îÄ‚îÄ public/\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îî‚îÄ‚îÄ src/\n    ‚îú‚îÄ‚îÄ components/\n    ‚îÇ   ‚îî‚îÄ‚îÄ ...\n    ‚îî‚îÄ‚îÄ index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Using QRL Types for Lazy References\nDESCRIPTION: Example demonstrating how to use QRL types in function parameters to create lazy-loadable event handlers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/readme.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyProps {\\n  onClick$: QRL<() => void>;\\n}\\n\\n// This registers a callback that won't load until it's needed\\ndocument.addEventListener('mousemove', qrl('./chunk-abc.js', 'handleMouseMove_1'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with Inline Event Handler in Qwik\nDESCRIPTION: Shows how to create a counter component using an inline click event handler to increment a signal value in Qwik.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/events/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, useSignal } from '@builder.io/qwik';\n\nexport default component$(() => {\n  const count = useSignal(0);\n\n  return (\n    <button onClick$={() => count.value++}>\n      Increment {count.value}\n    </button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Capacitor Dependencies\nDESCRIPTION: Commands to install Capacitor core dependencies and initialize Capacitor in your Qwik project. This sets up the bridge between your web app and native functionality.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/capacitor/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @capacitor/cli @capacitor/core\nnpx cap init\n```\n\n----------------------------------------\n\nTITLE: Generated Open Graph HTML\nDESCRIPTION: Example of HTML output generated from Open Graph metadata\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/mdx/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<title>My Title</title>\n<meta name=\"description\" content=\"My Description\" />\n\n<meta property=\"og:title\" content=\"My Custom Title\" />\n<meta property=\"og:description\" content=\"My Description\" />\n\n<meta property=\"og:image\" content=\"https://example.com/rock.jpg\" />\n<meta property=\"og:image:alt\" content=\"A shiny red apple with a bite taken out\" />\n\n<meta property=\"og:image\" content=\"https://example.com/rock2.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Qwik Prefetch Worker Script in TypeScript\nDESCRIPTION: Function signature for retrieving the qwik-prefetch-service-worker.js file as a string. Useful for tooling to inline the qwik-prefetch-service-worker script into HTML.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-server/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getQwikPrefetchWorkerScript(opts?: {\n  debug?: boolean;\n}): string;\n```\n\n----------------------------------------\n\nTITLE: Non-Inlined Route Loader in Qwik City\nDESCRIPTION: Shows a non-recommended pattern of using an external function reference for route loaders instead of inlining the arrow function.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n \nasync function fetcher() {\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product as Product;\n}\n\nexport const useProductDetails = routeLoader$(fetcher);\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with Vite in Qwik\nDESCRIPTION: PostCSS configuration for Qwik projects using Vite, enabling autoprefixer and postcss-preset-env with nesting rules.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n// Configuration with vite\nmodule.exports = {\n  plugins: {\n    autoprefixer: {},\n    \"postcss-preset-env\": {\n      stage: 3,\n      features: {\n        \"nesting-rules\": true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Styled Vanilla Extract with Qwik\nDESCRIPTION: Instructions for installing the styled-vanilla-extract package using different package managers. This allows for easy integration of the styled-vanilla-extract CSS framework into a Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/styled-vanilla-extract/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add styled-vanilla-extract\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add styled-vanilla-extract\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add styled-vanilla-extract\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add styled-vanilla-extract\n```\n\n----------------------------------------\n\nTITLE: Creating HTMLFragment Component in TypeScript\nDESCRIPTION: The HTMLFragment is a functional component designed to render HTML content with 'dangerouslySetInnerHTML'. This component helps in directly injecting HTML while ensuring type safety.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nHTMLFragment: FunctionComponent<{\n  dangerouslySetInnerHTML: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik Framework via Package Managers\nDESCRIPTION: Commands to create a new Qwik project using different JavaScript package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create qwik@latest\n# or\npnpm create qwik@latest\n# or\nyarn create qwik@latest\n# or\nbun create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Using MyComponent with Callback Props\nDESCRIPTION: This example shows how to use the MyComponent with callback props. It demonstrates passing a QRL reference and an inline function as props.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/tutorial/props/closures/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent goodbye$={goodbyeQrl} hello$={() => {...}} />\n```\n\n----------------------------------------\n\nTITLE: Running Deno Server for Qwik Project Preview\nDESCRIPTION: This command starts the Deno server to preview the built Qwik project. It should be executed after a full build has been completed.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/adapters/deno/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Encoding Lexically Scoped Variables in QRL\nDESCRIPTION: Demonstrates how QRLs can encode lexically scoped variables using an array of indexes into the q:obj attribute.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/qrl/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"./path/to/chunk.js#SymbolName[0,1]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Qwik Component with Barrel Structure using PNPM\nDESCRIPTION: This command demonstrates how to create a new component named 'Button' using the barrel file structure with PNPM.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/project-structure/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik new --barrel Button\n```\n\n----------------------------------------\n\nTITLE: Installing @builder.io/qwik with Yarn\nDESCRIPTION: This command uses Yarn to install the `@builder.io/qwik` package, which is required as a peer dependency by `@qwikdev/astro`. This step is only necessary if a warning about a missing `@builder.io/qwik` package is encountered during Astro startup.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/astro/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n\"yarn add @builder.io/qwik\"\n```\n\n----------------------------------------\n\nTITLE: Route Loader with Missing Export in Qwik City\nDESCRIPTION: Shows the incorrect pattern of not exporting a route loader function, which is required for loaders to work properly.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeLoader$ } from '@builder.io/qwik-city';\n \nconst useProductDetails = routeLoader$(async (requestEvent) => {\n  const res = await fetch(`https://.../products/${requestEvent.params.productId}`);\n  const product = await res.json();\n  return product as Product;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest to Qwik project using Yarn\nDESCRIPTION: This command utilizes the Qwik CLI to add Vitest to an existing Qwik project using Yarn. It simplifies the installation and configuration process.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/vitest/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add vitest\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with server$() in Qwik\nDESCRIPTION: Shows how to access environment variables using this.env.get() within a server$() function in Qwik City.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/server$/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const getEnvVariable = server$(\n  function () {\n    const dbKey = this.env.get('DB_KEY');\n    console.log('Database Key:', dbKey);\n    return dbKey;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS to Qwik project using PNPM\nDESCRIPTION: This command uses pnpm to execute the qwik add tailwind script, which automates the process of installing Tailwind CSS and configuring the necessary files in a Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/tailwind/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add tailwind\n```\n\n----------------------------------------\n\nTITLE: Defining Function Component Type in TypeScript\nDESCRIPTION: Specifies the type definition for functional components in Qwik, including the render function signature.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type FunctionComponent<P = unknown> = {\n    renderFn(props: P, key: string | null, flags: number, dev?: DevJSX): JSXOutput;\n}['renderFn'];\n```\n\n----------------------------------------\n\nTITLE: Declaring qwikRollup Function in TypeScript\nDESCRIPTION: Defines the qwikRollup function that takes optional QwikRollupPluginOptions and returns a Rollup plugin configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function qwikRollup(\n  qwikRollupOpts?: QwikRollupPluginOptions,\n): any;\n```\n\n----------------------------------------\n\nTITLE: Creating SnapshotMeta Type for Metadata Storage\nDESCRIPTION: Type definition for storing metadata as a record of string keys to SnapshotMetaValue objects in Qwik's serialization system.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SnapshotMeta = Record<string, SnapshotMetaValue>;\n```\n\n----------------------------------------\n\nTITLE: Declaring ObjectHTMLAttributes Interface in TypeScript\nDESCRIPTION: Defines an interface for HTML attributes specific to the 'object' element, extending the generic Attrs type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ObjectHTMLAttributes<T extends Element> extends Attrs<'object', T>\n```\n\n----------------------------------------\n\nTITLE: Complex Component Correct Split - Chunk A\nDESCRIPTION: Properly implemented first chunk with lexical scope capture.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter_onMount = (props) => {\n  const salutation = 'Hello';\n  return qrl('./chunk-b.js', 'Greeter_onRender', [salutation, props]);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FailOfRest Type in TypeScript\nDESCRIPTION: Defines a conditional type that extracts the error type from an array of DataValidator types.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FailOfRest<REST extends readonly DataValidator[]> =\n  REST extends readonly DataValidator<infer ERROR>[] ? ERROR : never;\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS in Qwik with Package Managers\nDESCRIPTION: Commands for adding PostCSS to a Qwik project using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/components/styles/index.mdx#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npnpm run qwik add postcss\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run qwik add postcss\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run qwik add postcss\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run qwik add postcss\n```\n\n----------------------------------------\n\nTITLE: Implementing Profile Page Route\nDESCRIPTION: Creating a route component for the Profile page at /profile URL path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/profile/index.tsx\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>My profile</h1>\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing About Page Route\nDESCRIPTION: Creating a route component for the About page at /about URL path.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/about/index.tsx\nimport { component$ } from '@builder.io/qwik';\n\nexport default component$(() => {\n  return <h1>About me</h1>\n})\n```\n\n----------------------------------------\n\nTITLE: Adding LeafletJS Map Dependency with Bun\nDESCRIPTION: This command adds the LeafletJS map as a dependency to your Qwik project using Bun. It executes a Qwik add script to install the necessary packages and set up the required files for map integration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/integrations/leaflet-map/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"bun run qwik add leaflet-map\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Event Handler Implementation in Qwik\nDESCRIPTION: Shows the incorrect way of implementing event handlers without wrapping them with $(). Event handlers must be properly wrapped for serialization.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\n\nexport const HelloWorld = component$(() => {\n  const click = () => console.log();\n  return (\n    <button onClick$={click}>log it</button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Virtual Component Implementation\nDESCRIPTION: Shows how Qwik components are internally converted to Virtual components to handle hooks and children\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/core/render/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Virtual onRenderFn={componentFn} props={componentProps}>{componentProps.children}</Virtual>\n```\n\n----------------------------------------\n\nTITLE: Installing Qwik City with PNPM\nDESCRIPTION: Command to create a new Qwik City project using PNPM package manager.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/qwikcity/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Defining validatorQrl Function Type in TypeScript\nDESCRIPTION: Type definition for the validatorQrl function that creates QRL-based validators for server functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nvalidatorQrl: ValidatorConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Installs all required npm dependencies for the Qwik project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/qwikcity-test/src/routes/docs/getting-started/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Launches the Vite development server for the Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/starters/apps/qwikcity-test/src/routes/docs/getting-started/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Qwik Development Server\nDESCRIPTION: Commands to start the development server for a Qwik project using different package managers.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/getting-started/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run start\n```\n\n----------------------------------------\n\nTITLE: Defining FailReturn Type in TypeScript\nDESCRIPTION: Defines a type that combines a generic type T with the Failed type.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FailReturn<T> = T & Failed;\n```\n\n----------------------------------------\n\nTITLE: NodeRequestNextFunction Interface Declaration\nDESCRIPTION: Declares the NodeRequestNextFunction interface used as a parameter type in the createQwikCity middleware functions. This interface likely defines the contract for next() callback functions in middleware chains.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-middleware-node/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NodeRequestNextFunction\n```\n\n----------------------------------------\n\nTITLE: Configuring QwikVite for Custom Build Output Directory (Correct Approach)\nDESCRIPTION: This snippet demonstrates the correct way to change the build output directory in a Qwik project. It uses the QwikVite() configuration to set the 'outDir' in the 'client' object, which will effectively change the output directory to 'resources/'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/custom-build-dir/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { qwikVite } from '@builder.io/qwik/optimizer';\nimport { qwikCity } from '@builder.io/qwik-city/vite';\nimport tsconfigPaths from 'vite-tsconfig-paths';\n\nexport default defineConfig(() => {\n  return {\n    ssr: { target: 'webworker', noExternal: true },\n    plugins: [\n      qwikCity(),\n      qwikVite({\n        client: {\n          outDir: 'resources/', // This is the right setting\n        },\n      }),\n      tsconfigPaths(),\n    ],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Component After Optimization - Main File\nDESCRIPTION: The main file after the Optimizer has extracted the component logic.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter = component(qrl('./chunk-a.js', 'Greeter_onMount'));\n```\n\n----------------------------------------\n\nTITLE: Deploying Qwik City Application for Development\nDESCRIPTION: Shell commands for deploying the Qwik City application in development mode using various package managers. A Vercel account may be required to finalize this deployment step.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/deployments/vercel-edge/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun run deploy\n```\n\n----------------------------------------\n\nTITLE: Setting up Qwik Project - CLI Commands\nDESCRIPTION: Terminal commands to create and start a new Qwik City project.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-city-routing/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create qwik@latest\ncd qwik-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Simple Component After Optimization - Chunk A\nDESCRIPTION: First chunk of the extracted component logic.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter_onMount = () => {\n  return qrl('./chunk-b.js', 'Greeter_onRender');\n};\n```\n\n----------------------------------------\n\nTITLE: Validator QRL Export\nDESCRIPTION: Exports the validator QRL constructor for creating server-side validators.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/runtime/src/api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const validatorQrl: ValidatorConstructorQRL;\n```\n\n----------------------------------------\n\nTITLE: Importing Styles in Qwik\nDESCRIPTION: Imports a CSS file for styling the ESLint rules documentation page.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './styles.css';\n```\n\n----------------------------------------\n\nTITLE: Simple Component After Optimization - Chunk B\nDESCRIPTION: Final chunk containing the render logic.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/dollar/index.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst Greeter_onRender = () => <span>Hello World!</span>;\n```\n\n----------------------------------------\n\nTITLE: Unused server$ function in Qwik - Incorrect\nDESCRIPTION: This snippet demonstrates the `unused-server` ESLint rule. It illustrates the incorrect scenario where a `server$` function is defined but never actually used within the Qwik component, triggering the ESLint rule.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { server$ } from '@builder.io/qwik-city';\n \nconst serverGreeter = server$((firstName: string, lastName: string) => {\n  const greeting = `Hello ${firstName} ${lastName}`;\n  return greeting;\n});\n \nexport default component$(() => (\n    <button\n      onClick$={async () => {\n        const greeting = 'not using the server$ function';\n        alert(greeting);\n      }}\n    >\n      greet\n    </button>\n  );\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Third-Party Library with Qwik Loader\nDESCRIPTION: This snippet shows the implementation of a third-party library component using a Qwik routeLoader$. It demonstrates how to create a loader within the library and use it in a component, which can then be integrated into a Qwik application.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/re-exporting-loaders/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { routeLoader$ } from '@builder.io/qwik-city';\n\nexport const useThirdPartyPaymentLoader = routeLoader$(() => {\n  return { name: 'John Doe' };\n});\n\nexport const ThirdPartyPaymentComponent = component$(() => {\n  const thirdPartyPaymentLoader = useThirdPartyPaymentLoader();\n  return (\n    <div\n      class={[\n        'w-96 h-56 m-auto rounded-xl relative text-white font-bold shadow-2xl',\n        'transition-transform transform hover:scale-110 bg-gray-600',\n      ]}\n    >\n      <div class=\"w-full px-8 absolute top-8\">\n        <div class=\"flex justify-between\">\n          <div class=\"\">\n            <p>Name</p>\n            <p class=\"tracking-widest\">{thirdPartyPaymentLoader.value.name}</p>\n          </div>\n          <img class=\"w-12 h-12\" src=\"/logos/qwik-logo.svg\" />\n        </div>\n        <div class=\"pt-1\">\n          <p class=\"font-medium\">Card Number</p>\n          <p class=\"tracking-wider\">4642 3489 9867 7632</p>\n        </div>\n        <div class=\"pt-6 pr-6\">\n          <div class=\"flex justify-between text-xs\">\n            <div>\n              <p class=\"font-medium\">Valid</p>\n              <p class=\"tracking-wider\">11/15</p>\n            </div>\n            <div>\n              <p class=\"font-medium\">Expiry</p>\n              <p class=\"tracking-wider\">03/25</p>\n            </div>\n            <div>\n              <p class=\"font-medium\">CVV</p>\n              <p class=\"tracking-wider\">¬∑¬∑¬∑</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Running Algolia DocSearch Crawler for Qwik Docs\nDESCRIPTION: Docker command to run the Algolia DocSearch crawler for indexing the local Qwik documentation site. Requires setting up API keys in a .env file and using a configuration file (algolia.json).\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# create apiKey via https://www.algolia.com/account/api-keys\ntouch .env\n# APPLICATION_ID=APPLICATION_ID\n# API_KEY=API_KEY\ndocker run -it --rm --env-file=.env -e \"CONFIG=$(cat ./packages/docs/algolia.json | jq -r tostring)\" algolia/docsearch-scraper\n```\n\n----------------------------------------\n\nTITLE: Defining DiagnosticCategory Type in TypeScript\nDESCRIPTION: Type definition for diagnostic categories, which can be 'error', 'warning', or 'sourceError'.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-optimizer/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DiagnosticCategory = \"error\" | \"warning\" | \"sourceError\";\n```\n\n----------------------------------------\n\nTITLE: Configuring StaticGenerateRenderOptions\nDESCRIPTION: The StaticGenerateRenderOptions interface extends RenderOptions and provides various configuration options for the static site generation rendering process, including file emission controls and route filtering.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-static/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StaticGenerateRenderOptions extends RenderOptions\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Qwik Blog Post\nDESCRIPTION: Import statements for MDX components and code sandbox functionality used in the Qwik v1.0 announcement blog post\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/qwik-v1/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArticleBlock } from '~/routes/(blog)/blog/components/mdx/article-block';\nimport { DiscordLink } from '~/routes/(blog)/blog/components/mdx/discord-link';\nimport CodeSandbox from '~/components/code-sandbox/index.tsx';\n```\n\n----------------------------------------\n\nTITLE: Serving Qwik Docs Locally with Cloudflare Wrangler\nDESCRIPTION: Uses Cloudflare's wrangler CLI to preview a production build of the Qwik docs site locally on port 8787.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm serve\n```\n\n----------------------------------------\n\nTITLE: Defining validator$ Function Type in TypeScript\nDESCRIPTION: Type definition for the validator$ function that creates generic validators for server functions.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator$: ValidatorConstructor;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Background Color Component\nDESCRIPTION: Implements a component that changes background color randomly on button click. Shows state management for multiple related values.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwikcity)/guides/react-cheat-sheet/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport function DynamicBackground() {\n  const [red, setRed] = useState(0);\n  const [green, setGreen] = useState(0);\n  const [blue, setBlue] = useState(0);\n  return (\n    <div\n      style={{\n        background: `rgb(${red}, ${green}, ${blue})`,\n      }}\n    >\n      <button\n        onClick={() => {\n          setRed(Math.random() * 256);\n          setGreen(Math.random() * 256);\n          setBlue(Math.random() * 256);\n        }}\n      >\n        Change background\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CloudRunAdapterOptions Interface in TypeScript\nDESCRIPTION: This interface extends ServerAdapterOptions and defines the configuration options for the Cloud Run adapter in Qwik City applications.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city-vite-cloud-run/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CloudRunAdapterOptions extends ServerAdapterOptions\n```\n\n----------------------------------------\n\nTITLE: Using Class List Syntax in Qwik Components\nDESCRIPTION: Demonstrates the recommended way to use class list syntax in Qwik components, supporting both array and object syntaxes for conditional classes.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/docs/(qwik)/advanced/eslint/index.mdx#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport styles from './MyComponent.module.css';\n \nexport default component$((props) => {\n  // Array syntax example\n  return <div class={[\n    styles.container, \n    'p-8', \n    props.isHighAttention ? 'text-green-500' : 'text-slate-500',\n    { active: true}\n  ]}>Hello world</div>;\n \n  // Object syntax example\n  return <div class={{  \n    'text-green-500': props.isHighAttention,\n    'p-4': true\n  }}>Hello world</div>;\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Enhancement Triaging Process with Mermaid Flowchart\nDESCRIPTION: This flowchart illustrates the decision-making process for triaging enhancement requests in the Qwik repository. It covers steps from initial information check to determining whether the enhancement should be implemented by the core team or the community.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/contributing/TRIAGE.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    start{Missing information?}\n    start --YES--> close1[Tag with\\n'STATUS-2: missing info'\\n\\nBot will auto close if\\n no update for 14 days]\n    start --NO--> dupe{Is duplicate?}\n    dupe --YES--> close2[Close, point to duplicate\\n and tag with\\n'STATUS-3: duplication']\n    dupe --NO--> discussion{Requires further\\ndiscussion?}\n    discussion --YES--> close3[Tag with\\n 'STATUS-2: requires discussion'\\nand 'WAITING FOR: team'\\nor 'WAITING FOR: user']\n    discussion --NO--> implement{Should it be\\nimplemented by core?}\n    implement --NO--> community{Should it be implemented\\nby the community?}\n    community --YES--> incubate[Close and tag with either\\n'STATUS-3: incubation'\\nor 'STATUS-2: waiting for community PR'\\nand 'COMMUNITY: PR is welcomed']\n    community --NO--> wontfix[Close and tag with\\n'STATUS-3: won't be worked on']\n    implement --YES--> doimplement[\"1. Tag with 'STATUS-2: team is working on this'\\n2. Add related feature label if\\napplicable (e.g. 'COMP: runtime')\\n3. Add version \\nlabels (e.g. 'VERSION: upcoming major')\"]\n```\n\n----------------------------------------\n\nTITLE: Defining cloudRunAdapter and CloudRunAdapterOptions in TypeScript for Qwik City\nDESCRIPTION: This code snippet defines the cloudRunAdapter function and CloudRunAdapterOptions interface for use with the Qwik City framework. The cloudRunAdapter function is used to create an adapter for Cloud Run, while CloudRunAdapterOptions extends ServerAdapterOptions for configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/adapters/cloud-run/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerAdapterOptions } from '../../shared/vite';\nimport type { StaticGenerateRenderOptions } from '@builder.io/qwik-city/static';\n\n// @public (undocumented)\nexport function cloudRunAdapter(opts?: CloudRunAdapterOptions): any;\n\n// @public (undocumented)\nexport interface CloudRunAdapterOptions extends ServerAdapterOptions {\n}\n\nexport { StaticGenerateRenderOptions }\n\n// (No @packageDocumentation comment for this package)\n```\n\n----------------------------------------\n\nTITLE: Defining JSONObject Type in TypeScript\nDESCRIPTION: Defines a type for JSON objects, where keys are strings and values are of type JSONValue.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik-city/index.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport type JSONObject = {\n  [x: string]: JSONValue;\n};\n```\n\n----------------------------------------\n\nTITLE: Running tests with make\nDESCRIPTION: Command to run the test suite for qwik-core using make, which executes the test tasks defined in the Makefile.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik/src/optimizer/core/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Defining Qwik City API Types and Functions in TypeScript\nDESCRIPTION: Defines the core types and functions for Qwik City integration. Includes the createQwikCity function that returns router, notFound, and staticFile handlers, along with the QwikCityBunOptions interface for configuration.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/src/middleware/bun/api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ClientConn } from '@builder.io/qwik-city/middleware/request-handler';\nimport type { ServerRenderOptions } from '@builder.io/qwik-city/middleware/request-handler';\n\n// @public (undocumented)\nexport function createQwikCity(opts: QwikCityBunOptions): {\n    router: (request: Request) => Promise<Response | null>;\n    notFound: (request: Request) => Promise<Response>;\n    staticFile: (request: Request) => Promise<Response | null>;\n};\n\n// @public (undocumented)\nexport interface QwikCityBunOptions extends ServerRenderOptions {\n    // (undocumented)\n    getClientConn?: (request: Request) => ClientConn;\n    static?: {\n        root?: string;\n        cacheControl?: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Development Server with Vite\nDESCRIPTION: Command to start the development server using pnpm, which utilizes Vite's development server and performs server-side rendering for Qwik components.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-labs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features in Vite Config\nDESCRIPTION: Configuration example for enabling experimental features like 'valibot' validation in the qwikVite plugin options.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/qwik-city/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\n\nexport default defineConfig(({ command, mode }): UserConfig => {\n  return {\n    plugins: [\n      // ... other plugins like qwikCity() etc\n      qwikVite({\n        experimental: ['valibot']\n        // ... other options\n      }),\n\n    ],\n    // ... rest of the config\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Empty JavaScript Function Declaration\nDESCRIPTION: This snippet shows an empty function declaration named 'yuval'. It doesn't serve any specific purpose in the context of the animation examples.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/framer-motion-qwik/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction yuval() { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Equivalent Functionality in Pure React\nDESCRIPTION: This snippet shows the equivalent functionality implemented in a pure React application using useState for state management. This is used for comparison with the Qwik implementation.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/(blog)/blog/(articles)/resumable-react-how-to-use-react-inside-qwik/index.mdx#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\n\nimport './App.css';\nimport { Button } from '@mui/material';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Regular React component</h2>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setCount(count + 1);\n          }}\n        >\n          I'm a button from react\n        </Button>\n        <p>current count is: {count}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining PrefetchGraph Function in TypeScript (Obsolete)\nDESCRIPTION: Declares an obsolete function for prefetching graph data, which is no longer needed as preloading happens automatically.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nPrefetchGraph: (opts?: {\n  base?: string;\n  manifestHash?: string;\n  manifestURL?: string;\n  nonce?: string;\n}) => JSXOutput;\n```\n\n----------------------------------------\n\nTITLE: Type Definition - QwikWheelEvent\nDESCRIPTION: Type definition for wheel events in Qwik. This API is marked as obsolete and developers should use WheelEvent instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QwikWheelEvent<T = Element> = NativeWheelEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining PropFnInterface Type in TypeScript (Obsolete)\nDESCRIPTION: Defines an obsolete type for a prop function interface, recommending the use of QRL<> instead.\nSOURCE: https://github.com/qwikdev/qwik/blob/main/packages/docs/src/routes/api/qwik/index.mdx#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PropFnInterface<ARGS extends any[], RET> = {\n  __qwik_serializable__?: any;\n  (...args: ARGS): Promise<RET>;\n};\n```"
  }
]