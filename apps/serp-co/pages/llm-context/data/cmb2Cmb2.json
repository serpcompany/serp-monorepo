[
  {
    "owner": "cmb2",
    "repo": "cmb2",
    "content": "TITLE: Displaying Metabox Form on Frontend in PHP\nDESCRIPTION: Introduced the `cmb_metabox_form( $meta_box, $object_id, $echo )` function. This function outputs the complete HTML form for a given CMB2 metabox configuration (`$meta_box`) associated with a specific object ID (`$object_id`), allowing forms on the frontend. The `$echo` parameter controls whether to echo or return the form.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_75\n\nLANGUAGE: php\nCODE:\n```\ncmb_metabox_form( $meta_box, $object_id, $echo = true )\n```\n\n----------------------------------------\n\nTITLE: Controlling Frontend Metabox Display with Filter in PHP\nDESCRIPTION: Introduced the `cmb_allow_frontend` filter (defaulting to true). Setting this filter to false prevents CMB2 metaboxes from being displayed on the frontend using the `cmb_metabox_form` function.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_74\n\nLANGUAGE: php\nCODE:\n```\ncmb_allow_frontend\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Functions in CMB2 Field Parameters - PHP\nDESCRIPTION: This PHP snippet demonstrates the use of an anonymous function (closure) for the 'show_on_cb' field parameter, a new feature which enables using closures for any '*_cb' parameter within CMB2 metaboxes and field definitions. No external dependencies are required beyond PHP 5.3+ and the CMB2 library. The closure receives the CMB2 object instance as an argument and can return a boolean to conditionally display the field or metabox, enhancing customization and dynamic behavior.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/CHANGELOG.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\t...\n\t'show_on_cb' => function( $cmb ) { return has_tag( 'cats', $cmb->object_id ); },\n\t...\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Field Display Callback Using a PHP Closure - WordPress - PHP\nDESCRIPTION: This snippet shows how to use an anonymous PHP function (closure) as a callback for the 'show_on_cb' parameter in CMB2 box/field registration. The closure receives the \\$cmb object and returns true if the current post has the 'cats' tag, thus conditionally displaying the box or field. This enables dynamic, code-driven visibility logic without requiring named functions. Dependencies are CMB2 and WordPress's has_tag function. The main parameter is 'show_on_cb', and output is a boolean controlling display of the box/field.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\t...\\n\\t'show_on_cb' => function( \\$cmb ) { return has_tag( 'cats', \\$cmb->object_id ); },\\n\\t...\\n?>\n```\n\n----------------------------------------\n\nTITLE: Registering a CMB2 Metabox at a Custom Editor Location - WordPress - PHP\nDESCRIPTION: This snippet demonstrates how to register a CMB2 metabox to appear at a specific custom location within the WordPress post editor by setting the 'context' property (here, 'before_permalink'). The example highlights the instantiation of CMB2 metaboxes using the new_cmb2_box function and setting additional properties within the configuration array. Required dependencies include the CMB2 plugin and its loading mechanism, and context options align with available WordPress edit form hooks. Input is an associative array of metabox configuration; output is the successful registration of the metabox UI at the chosen editor location.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\t\\$cmb_demo = new_cmb2_box( array(\\n\\t\\t...\\n\\t\\t'context' => 'before_permalink',\\n\\t) );\\n?>\n```\n\n----------------------------------------\n\nTITLE: Registering a CMB2 Box with 'context' Option - WordPress - PHP\nDESCRIPTION: Demonstrates how to register a new CMB2 metabox and use the 'context' argument to display it at custom locations within the post editor. Requires the CMB2 plugin and WordPress. The 'context' property set to 'before_permalink' positions the metabox before the permalink field in the post edit screen. Additional box parameters would normally be added where indicated by '...'.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/CHANGELOG.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$cmb_demo = new_cmb2_box( array(\\n    ...\\n    'context' => 'before_permalink',\\n) );\\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting CMB2 Field Value in PHP\nDESCRIPTION: Introduced the `cmb_get_field_value` helper function to directly retrieve the saved value of a specific CMB2 field for a given object context (post ID, user ID, term ID, or option key).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\ncmb_get_field_value( $field_id, $object_id, $object_type = 'post', $args = array() )\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sanitization Callback in PHP\nDESCRIPTION: Introduced a `sanitization_cb` field parameter. This allows specifying a custom callback function to sanitize the field's data upon saving, overriding the default sanitization for that field.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n'sanitization_cb' => 'my_custom_sanitization_function',\n```\n\n----------------------------------------\n\nTITLE: Providing CodeMirror Options for textarea_code Field - CMB2 - PHP\nDESCRIPTION: This PHP snippet demonstrates how to override the default CodeMirror settings used by the 'textarea_code' field type in CMB2 by supplying a JSON-encoded array via the 'data-codeeditor' attribute in the 'attributes' parameter. Developers can specify custom CodeMirror configuration (e.g., syntax mode), which is especially useful for enabling syntax highlighting for different languages. Dependencies include PHP, WordPress, and the CMB2 plugin. The key parameter is 'attributes', specifically 'data-codeeditor', which should be set to a JSON object describing CodeMirror options.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n'attributes' => array(\n\t'data-codeeditor' => json_encode( array(\n\t\t'codemirror' => array(\n\t\t\t'mode' => 'css',\n\t\t),\n\t) ),\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Column Display in CMB2 (PHP)\nDESCRIPTION: Introduces the 'column' field parameter to display field data in WordPress admin post-listing columns. Set to `true` to enable with default settings. Use an array to specify 'position' (integer) or 'name' (string for column title, defaults to field 'name'). Applicable to post, comment, user, and term object types.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n'column' => true,\n```\n\nLANGUAGE: php\nCODE:\n```\n'column' => array( 'position' => 2 ),\n```\n\nLANGUAGE: php\nCODE:\n```\n'column' => array( 'name' => 'My Column' ),\n```\n\n----------------------------------------\n\nTITLE: Overriding Option Saving with PHP Filter\nDESCRIPTION: Introduced the `cmb_override_option_save_$option_key` filter. This allows developers to completely override how a specific option value is saved, useful for integration with custom option storage mechanisms. `$option_key` is the key for the specific option being targeted.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_69\n\nLANGUAGE: php\nCODE:\n```\ncmb_override_option_save_$option_key\n```\n\n----------------------------------------\n\nTITLE: Getting CMB2 Field Object in PHP\nDESCRIPTION: Introduced the `cmb_get_field` helper function to retrieve the CMB2 field object for a specific field ID and object context (post ID, user ID, term ID, or option key).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\ncmb_get_field( $field_id, $object_id, $object_type = 'post', $args = array() )\n```\n\n----------------------------------------\n\nTITLE: Defining Field Attributes Parameter in PHP\nDESCRIPTION: Every field type now supports an `attributes` parameter. This parameter accepts an array of key-value pairs to be added as HTML attributes to the field's primary input element.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n'attributes' => array(\n  'attribute_name' => 'attribute_value',\n  // ... more attributes\n),\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation Filter Change in PHP\nDESCRIPTION: The behavior of the `'cmb_validate_{$field['type']}'` filter changed. It now receives a null value instead of the previously saved value. Returning null triggers default sanitization; returning any other value bypasses default sanitization. `$field['type']` represents the specific field type being validated. Note: This was a breaking change.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n'cmb_validate_{$field['type']}'\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Column Display Callback in CMB2 (PHP)\nDESCRIPTION: The 'display_cb' field parameter allows specifying a custom callback function to render the content for an admin column defined using the 'column' parameter. This provides full control over how the field data is presented in the admin list table.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n// If you need to specify the column display callback, set the 'display_cb' parameter\n// to [a callback function](https://github.com/CMB2/CMB2/wiki/Field-Parameters#render_row_cb).\n'display_cb' => 'your_custom_column_display_callback',\n```\n\n----------------------------------------\n\nTITLE: Configuring Character/Word Counters in CMB2 PHP\nDESCRIPTION: These PHP array key strings represent parameters for configuring character or word counters on 'text', 'textarea', and 'wysiwyg' field types in CMB2. 'char_counter' enables the counter (true for characters, 'words' for words), 'char_max' sets a limit, and 'char_max_enforce' applies a maxlength attribute (for text/textarea only).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'char_counter'\n```\n\nLANGUAGE: php\nCODE:\n```\n'char_max'\n```\n\nLANGUAGE: php\nCODE:\n```\n'char_max_enforce'\n```\n\n----------------------------------------\n\nTITLE: Disabling 'None' Option in Taxonomy Fields (PHP)\nDESCRIPTION: The `'show_option_none'` field parameter now works correctly for taxonomy field types (like `taxonomy_select`, `taxonomy_radio`). Explicitly setting it to `false` will prevent the 'None' or empty option from being displayed.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n// 'show_option_none' field parameter now works on taxonomy fields\n// when explicitly setting to false.\n'show_option_none' => false,\n```\n\n----------------------------------------\n\nTITLE: Configuring Date/Time Picker Formats per Field (PHP)\nDESCRIPTION: The JavaScript for the date and time pickers now respects the `'date_format'` and `'time_format'` field parameters. These parameters allow specifying the desired date and time display formats on a per-field basis, using standard PHP date/time format strings.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n// Fix so the date/time-picker javascript respects the 'date_format'\n'date_format' => 'Y-m-d',\n```\n\nLANGUAGE: php\nCODE:\n```\n// and 'time_format' field parameters.\n'time_format' => 'H:i',\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Size for File List Field in PHP\nDESCRIPTION: Added a `preview_size` parameter specifically for the `file_list` field type. This parameter allows specifying the WordPress image size (e.g., 'thumbnail', 'medium', or a custom size array) to use for image previews in the list.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n'preview_size' => 'thumbnail', // Or 'medium', 'large', array( 100, 100 )\n```\n\n----------------------------------------\n\nTITLE: Defining Field Default Values via Callback (PHP)\nDESCRIPTION: Introduced the `'default_cb'` field parameter, which accepts a callback function to dynamically determine a field's default value. This replaces the deprecated usage of passing a callback to the `'default'` parameter. The `CMB2_Field::get_default()` method was added to handle retrieving the default value, respecting `'default_cb'`. \nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n// Introduced new ... 'default_cb' field parameter.\n'default_cb' => 'my_dynamic_default_value_callback',\n```\n\nLANGUAGE: php\nCODE:\n```\n// Introduced new CMB2_Field::get_default() method\n$default_value = $field_object->get_default();\n```\n\n----------------------------------------\n\nTITLE: Modifying Localized JS Data with PHP Filter\nDESCRIPTION: Introduced the `cmb_localized_data` filter, allowing modification of the data array passed from PHP to the CMB2 JavaScript files via `wp_localize_script`.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\ncmb_localized_data\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Sanitization via Filter (PHP)\nDESCRIPTION: The dynamic filter hook `\"cmb2_sanitize_{$field_type}\"` now runs for all field types, not just custom ones. This allows developers to override the default sanitization logic for any built-in or custom field type by hooking into this filter.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n// The \"cmb2_sanitize_{$field_type}\" hook now runs for every field type\n// so you can override the sanitization for all field types via a filter.\nadd_filter( 'cmb2_sanitize_text', 'my_custom_text_sanitization', 10, 5 );\nfunction my_custom_text_sanitization( $override_value, $value, $object_id, $field_args, $sanitizer_object ) {\n    // Return sanitized value or null to fallback to default.\n    return sanitize_text_field( $value ); \n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CMB2 Code Editor (CodeMirror) Settings with Attribute - PHP\nDESCRIPTION: This PHP snippet sets a custom attribute for a CMB2 field, overriding the default CodeMirror editor settings. The 'attributes' array includes a 'data-codeeditor' key, which uses json_encode to set CodeMirror options, such as changing the editor mode to CSS. This parameter should be used during field registration and requires CMB2 as well as WordPress environments where CodeMirror is available. The array can be expanded to include additional CodeMirror or code editor settings as needed.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/CHANGELOG.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'attributes' => array(\n\t'data-codeeditor' => json_encode( array(\n\t\t'codemirror' => array(\n\t\t\t'mode' => 'css',\n\t\t),\n\t) ),\n),\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Escaping Callback in PHP\nDESCRIPTION: Introduced an `escape_cb` field parameter. This allows specifying a custom callback function to escape the field's data before display, overriding the default escaping behavior.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n'escape_cb' => 'my_custom_escaping_function',\n```\n\n----------------------------------------\n\nTITLE: Filtering Data Escaping by Field Type in PHP\nDESCRIPTION: Added a new filter `\"cmb_types_esc_{$field_type}\"` which allows modifying how data is escaped for display, specific to a given field type. `$field_type` represents the type of the field being escaped (e.g., 'text', 'wysiwyg').\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n\"cmb_types_esc_{$field_type}\"\n```\n\n----------------------------------------\n\nTITLE: Action Hooks After Saving Fields in CMB2 (PHP)\nDESCRIPTION: Introduced new action hooks that fire after a field's value has been saved: `'cmb2_save_field'` (fires for every saved field, passes field object, updated status, field ID, and value) and a dynamic version `'cmb2_save_field_{$field_id}'` (fires only for a specific field ID, passes the same arguments).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n// New hooks which hook in after save field action: 'cmb2_save_field'\nadd_action( 'cmb2_save_field', 'my_generic_save_field_action', 10, 4 );\n\n// and \"cmb2_save_field_{$field_id}\".\n$field_id = 'my_field_id';\nadd_action( \"cmb2_save_field_{$field_id}\", 'my_specific_save_field_action', 10, 4 );\n```\n\n----------------------------------------\n\nTITLE: Identifying Field Rows in JavaScript using Data Attribute (HTML/JS)\nDESCRIPTION: A `data-fieldtype` attribute has been added to the field rows (e.g., `<div class=\"cmb-row ...\" data-fieldtype=\"text\">`) in the CMB2 admin interface. This makes it easier to target specific field types using JavaScript or CSS attribute selectors.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<!-- Add a data-fieldtype attribute to the field rows for simpler identification in Javascript. -->\n<div class=\"cmb-row cmb-type-text\" data-fieldtype=\"text\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Repeatable Row Addition with JavaScript Event\nDESCRIPTION: A new JavaScript event `cmb_add_row` is triggered when a new row is added to a repeatable field or group. Allows developers to hook into this event to manipulate the new row's data or elements.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ncmb_add_row\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Classes to CMB2 Metabox Wrapper (PHP)\nDESCRIPTION: The 'classes' and 'classes_cb' parameters for `new_cmb2_box` allow adding custom CSS classes to the main metabox wrapper (`<div class=\"cmb-wrap\">`). 'classes' accepts a string or array of class names. 'classes_cb' accepts a callback function (receiving the CMB2 object `$cmb`) that should return a string or array of class names.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n// The 'classes' parameter can take a string or array\n'classes' => 'extra-class another-class',\n```\n\nLANGUAGE: php\nCODE:\n```\n// and the 'classes_cb' takes a callback which returns a string or array.\n// The callback will receive $cmb as an argument.\n'classes_cb' => 'my_cmb_wrap_classes_callback',\n```\n\n----------------------------------------\n\nTITLE: Handling Repeatable Row Removal with JavaScript Event\nDESCRIPTION: A new JavaScript event `cmb_remove_row` is triggered just before a row is removed from a repeatable field or group. Allows developers to perform actions before the row is deleted.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\ncmb_remove_row\n```\n\n----------------------------------------\n\nTITLE: Filtering CMB2 Metabox Wrapper Classes (PHP)\nDESCRIPTION: The 'cmb2_wrap_classes' filter allows modification of the CSS classes applied to the main metabox wrapper (`<div class=\"cmb-wrap\">`). The filter callback receives the current array of classes as the first argument and the CMB2 object instance (`$cmb`) as the second argument.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// These classes are also passed through a new filter, 'cmb2_wrap_classes',\n// which receives the array of classes as the first argument, and the CMB2 object as the second.\nadd_filter( 'cmb2_wrap_classes', 'my_modify_cmb_wrap_classes', 10, 2 );\nfunction my_modify_cmb_wrap_classes( $classes, $cmb ) {\n    // Modify $classes array\n    return $classes;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Element Attributes with Filter in PHP\nDESCRIPTION: Introduced a new filter `\"cmb_{$element}_attributes\"` that allows modification of an HTML element's attributes within CMB2 fields. `$element` is a placeholder for the specific element being filtered.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n\"cmb_{$element}_attributes\"\n```\n\n----------------------------------------\n\nTITLE: Using Before/After Field Row Hooks in CMB2 PHP\nDESCRIPTION: These PHP string literals represent new action hooks introduced in CMB2 for injecting content before or after a field's entire row markup. They include general hooks (`cmb2_before_field_row`, `cmb2_after_field_row`) and field-type specific hooks (`cmb2_before_{$field_type}_field_row`, `cmb2_after_{$field_type}_field_row`).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n'cmb2_before_field_row'\n```\n\nLANGUAGE: php\nCODE:\n```\n\"cmb2_before_{\\$field_type}_field_row\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"cmb2_after_{\\$field_type}_field_row\"\n```\n\nLANGUAGE: php\nCODE:\n```\n'cmb2_after_field_row'\n```\n\n----------------------------------------\n\nTITLE: Using the cmb2_display_class_{$fieldtype} Filter in PHP\nDESCRIPTION: This PHP string represents a dynamic filter hook in CMB2, `\"cmb2_display_class_{\\$fieldtype}\"`. It allows developers to modify the CSS class used for displaying a specific field type in contexts like admin columns.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n\"cmb2_display_class_{\\$fieldtype}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent CMB2 Object from Field Object (PHP)\nDESCRIPTION: The `CMB2_Field` object instance now includes a `cmb_id` property and a `get_cmb()` method. This allows accessing the parent `CMB2` object instance from within contexts like field callbacks or filters, enabling access to the overall metabox configuration and properties.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n// The CMB2_Field object instances will now have a cmb_id property\n$cmb_id = $field->cmb_id;\n```\n\nLANGUAGE: php\nCODE:\n```\n// and a get_cmb method to enable access to the field's CMB2 parent object's instance\n// in places like field callbacks and filters (e.g. $cmb = $field->get_cmb();).\n$cmb = $field->get_cmb();\n```\n\n----------------------------------------\n\nTITLE: Outputting oEmbed Content via Action Hook in CMB2 (PHP)\nDESCRIPTION: Introduced `cmb2_do_oembed()` function, which wraps a `do_action()` call for 'cmb2_do_oembed'. This allows themes to output oEmbed content using `do_action( 'cmb2_do_oembed', $args )` without needing `function_exists()` checks, ensuring cleaner theme integration.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n// New function, 'cmb2_do_oembed()', which is hooked to 'cmb2_do_oembed'\nfunction cmb2_do_oembed( $args ) {\n    do_action( 'cmb2_do_oembed', $args );\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// so you can use do_action( 'cmb2_do_oembed', $args ) in your themes\n// without function_exists() checks.\ndo_action( 'cmb2_do_oembed', $args );\n```\n\n----------------------------------------\n\nTITLE: Using CMB2::add_field() for Related Links\nDESCRIPTION: The 'CMB2 Related Links' functionality by jtsternberg is implemented not as a standard field type, but by using the `CMB2::add_field()` function in combination with a repeating group and the Post Search field. This approach allows creating a complex field structure for managing related links.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nCMB2::add_field()\n```\n\n----------------------------------------\n\nTITLE: Getting oEmbed Data With Remove Link via AJAX Handler (PHP)\nDESCRIPTION: To retrieve the oEmbed HTML including the 'Remove' link (as previously provided by `cmb2_get_oembed()`), use the `get_oembed()` method of the CMB2 AJAX handler instance directly. Requires passing necessary arguments (`$args`).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n// If you were depending on the \"remove\" link, use cmb2_ajax()->get_oembed( $args ) instead.\n$oembed_output_with_remove = cmb2_ajax()->get_oembed( $args );\n```\n\n----------------------------------------\n\nTITLE: Overriding CMB2 JavaScript Defaults via Event (JavaScript)\nDESCRIPTION: A new JavaScript event, `cmb_pre_init`, is triggered before CMB2's JavaScript initializes. This allows developers to hook in and override default JavaScript settings or behavior.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a cmb_pre_init Javascript event to allow overriding CMB2 defaults via JS.\njQuery( document ).on( 'cmb_pre_init', function( event, cmb ) {\n    // Modify cmb object or settings before initialization\n    // Example: cmb.defaults.media_modal_button_text = 'Select Custom Image';\n} );\n```\n\n----------------------------------------\n\nTITLE: Getting oEmbed Data Without Remove Link in CMB2 (PHP)\nDESCRIPTION: The `cmb2_get_oembed()` function was updated to return only the oEmbed HTML output, excluding the 'Remove' link. This change might affect backward compatibility if the link was previously expected.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n// Updated cmb2_get_oembed() function to NOT return the \"remove\" link,\n// as it's intended for outputting the oembed only.\n$oembed_output = cmb2_get_oembed( $field_args );\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Text Strings via Parameters (PHP)\nDESCRIPTION: Introduced `'text'` and `'text_cb'` field parameters as alternatives to using the `'options'` array for overriding standard CMB2 text strings (like button labels). `'text'` accepts an array of key-value pairs, while `'text_cb'` accepts a callback function returning such an array.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n// Introduce new 'text' ... field parameters for overriding CMB2 text strings\n'text' => array(\n    'add_row_text' => 'Add New Entry',\n),\n```\n\nLANGUAGE: php\nCODE:\n```\n// and 'text_cb' field parameters ... instead of using the 'options' array.\n'text_cb' => 'my_custom_text_callback',\n```\n\n----------------------------------------\n\nTITLE: Setting a CMB2 Metabox Property Programmatically (PHP)\nDESCRIPTION: The `CMB2:set_prop( $property, $value )` method allows direct modification of properties of a CMB2 metabox object instance after its initialization. `$property` is the string name of the property, and `$value` is the new value to assign.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// New method, CMB2:set_prop( $property, $value ), for setting a CMB2 metabox object property.\n$cmb->set_prop( 'title', 'New Metabox Title' );\n```\n\n----------------------------------------\n\nTITLE: Overriding Option Retrieval with PHP Filter\nDESCRIPTION: Introduced the `cmb_override_option_get_$option_key` filter. This allows developers to completely override how a specific option value is retrieved, useful for integration with custom option storage mechanisms like WP Large Options. `$option_key` is the key for the specific option being targeted.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\ncmb_override_option_get_$option_key\n```\n\n----------------------------------------\n\nTITLE: Configuring CMB2 Field to Disable CodeMirror Editor - PHP\nDESCRIPTION: This PHP snippet demonstrates how to disable the default CodeMirror code editor for a 'textarea_code' field type in CMB2 by specifying an 'options' array with 'disable_codemirror' set to true. When this option is set, the field will revert to previous non-CodeMirror behavior. The main parameter is 'options', passed as an associative array to the field registration. This technique is useful when you require a plain textarea instead of the enhanced code editor and requires the CMB2 plugin to be properly installed.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/CHANGELOG.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'options' => array( 'disable_codemirror' => true )\n```\n\n----------------------------------------\n\nTITLE: New CMB2_Utils File/URL/WP Version Utility Methods (PHP)\nDESCRIPTION: Added several public static methods to `CMB2_Utils`: `get_url_from_dir()` to convert a directory path to a URL, `get_file_ext()` to get a file extension, `get_file_name_from_path()` to extract the filename, and `wp_at_least()` to check if the current WordPress version meets a minimum requirement.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$url = CMB2_Utils::get_url_from_dir( $directory_path );\n```\n\nLANGUAGE: php\nCODE:\n```\n$extension = CMB2_Utils::get_file_ext( $file_path );\n```\n\nLANGUAGE: php\nCODE:\n```\n$filename = CMB2_Utils::get_file_name_from_path( $file_path );\n```\n\nLANGUAGE: php\nCODE:\n```\nif ( CMB2_Utils::wp_at_least( '4.4' ) ) {\n    // Code for WP 4.4+\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Row Classes to Group Field Rows (PHP)\nDESCRIPTION: Ensures that the `CMB2_Field::row_classes()` method is called for rows within repeatable groups. This allows standard field row classes (like `cmb-type-text`, `cmb-row`) and any custom classes defined via filters to be correctly applied to group items.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n// Be sure to call CMB2_Field::row_classes() for group field rows.\n// (Internal change, no user code snippet provided in source)\n```\n\n----------------------------------------\n\nTITLE: CMB2 Post Search Ajax Field Identifier\nDESCRIPTION: The field type identifier `post_search_ajax` is used for the 'CMB2 Field Type: Post Search Ajax' plugin by alexis-magina. It enables attaching posts using an Ajax search interface, offering single/multiple selection options and a different UI compared to the standard attached posts field.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npost_search_ajax\n```\n\n----------------------------------------\n\nTITLE: CMB2 Google Maps Field Identifier\nDESCRIPTION: The field type identifier `pw_map` is used for the 'CMB2 Field Type: Google Maps' plugin by mustardBees. This field type provides a Google Maps interface and stores the selected latitude and longitude values, which can be used later to display a map.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npw_map\n```\n\n----------------------------------------\n\nTITLE: CMB2 Select Plus Field Identifier\nDESCRIPTION: The field type identifier `select_plus` is used for the 'CMB2 Field Type: select_plus' plugin by manzoorwanijk. This field extends the default select field by adding support for option groups (`optgroup`) and saving multiple selected values when the `multiple` attribute is used.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nselect_plus\n```\n\n----------------------------------------\n\nTITLE: CMB2 Term Select Configuration Option\nDESCRIPTION: The 'CMB2 Term Select' field type by florianbeck allows configuring whether selected terms are automatically applied to the post or just saved as term IDs using the `'apply_term' => false` option. This is useful for options pages where direct term application isn't needed.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'apply_term' => false\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Arguments to Title Field Type in CMB2 (PHP)\nDESCRIPTION: The 'title' field type in CMB2 was enhanced to accept additional arguments beyond the standard field parameters. This allows for more customization when using this presentational field type.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n// Make the 'title' field type accept extra arguments.\n$cmb->add_field( array(\n    'name' => 'My Section Title',\n    'desc' => 'Optional description for the title.',\n    'id'   => 'wiki_test_title',\n    'type' => 'title',\n    // Potentially custom arguments can be added here depending on implementation\n) );\n```\n\n----------------------------------------\n\nTITLE: Specifying the taxonomy_select_hierarchical Field Type in CMB2 PHP\nDESCRIPTION: This snippet shows the string literal used to specify the 'taxonomy_select_hierarchical' field type when defining a CMB2 field in PHP. This field type allows for selecting taxonomy terms hierarchically.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'taxonomy_select_hierarchical'\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom REST Field Callback in CMB2 PHP\nDESCRIPTION: This PHP string literal represents the 'register_rest_field_cb' box parameter in CMB2. When used, it allows developers to override the default CMB2 handling of `register_rest_field` callbacks and define custom REST API behavior and prefixes for fields.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nregister_rest_field_cb\n```\n\n----------------------------------------\n\nTITLE: Calling CMB2_Field::get_rest_value() Method in PHP\nDESCRIPTION: This references the `CMB2_Field::get_rest_value()` method in PHP. It is now used to retrieve field values specifically for inclusion in the post REST API endpoints, ensuring proper data formatting for the API.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nCMB2_Field::get_rest_value()\n```\n\n----------------------------------------\n\nTITLE: Executing Action After Metabox Table Output in PHP\nDESCRIPTION: Added the `cmb_after_table` action hook. This hook fires after the closing `</table>` tag within the CMB2 metabox output, allowing developers to inject custom HTML or trigger actions after the fields.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_76\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'cmb_after_table', $cmb_id, $object_id, $object_type, $cmb );\n```\n\n----------------------------------------\n\nTITLE: Overriding Character Counter Text Strings in CMB2 PHP\nDESCRIPTION: These PHP array key strings allow customization of the text displayed by the character/word counter feature in CMB2 fields. They define the labels used for remaining counts, general counts, and truncation warnings.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'words_left_text'\n```\n\nLANGUAGE: php\nCODE:\n```\n'words_text'\n```\n\nLANGUAGE: php\nCODE:\n```\n'characters_left_text'\n```\n\nLANGUAGE: php\nCODE:\n```\n'characters_text'\n```\n\nLANGUAGE: php\nCODE:\n```\n'characters_truncated_text'\n```\n\n----------------------------------------\n\nTITLE: Calling CMB2::is_box_type() Method in PHP\nDESCRIPTION: This references the `CMB2::is_box_type()` method in PHP. It was updated to correctly check for taxonomies when a CMB2 box is registered to the 'term' object type, fixing issues with term meta visibility in REST API term endpoints.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nCMB2::is_box_type()\n```\n\n----------------------------------------\n\nTITLE: Filtering Valid Image File Extensions in PHP\nDESCRIPTION: Introduced the `cmb_valid_img_types` filter. This filter allows modification of the array of whitelisted file extensions considered as valid images by CMB2's file and image upload fields.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\ncmb_valid_img_types\n```\n\n----------------------------------------\n\nTITLE: Disabling Sortable Columns in CMB2 PHP Configuration\nDESCRIPTION: This PHP array snippet demonstrates how to disable the default sortable behavior for a specific column within a CMB2 configuration. Setting 'disable_sortable' to true within the 'column' array achieves this.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'column' => array( 'disable_sortable' => true )\n```\n\n----------------------------------------\n\nTITLE: Using the display_class Field Parameter in CMB2 PHP\nDESCRIPTION: This PHP string literal represents the 'display_class' field parameter in CMB2. It allows developers to directly specify a custom CSS class to be used for displaying the field, overriding default or filtered classes.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n'display_class'\n```\n\n----------------------------------------\n\nTITLE: Registering Term Meta Metabox Example Function Name (PHP)\nDESCRIPTION: The documentation references `yourprefix_register_taxonomy_metabox` as the example function name within `example-functions.php` demonstrating how to register a CMB2 metabox for term meta, available since WordPress 4.4.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n// To do so, see the example cmb registration in the `yourprefix_register_taxonomy_metabox` function\n// in [example-functions.php](https://github.com/CMB2/CMB2/blob/master/example-functions.php).\nfunction yourprefix_register_taxonomy_metabox() { /* ... metabox registration ... */ }\n```\n\n----------------------------------------\n\nTITLE: Using Field Argument Filters in CMB2 PHP\nDESCRIPTION: These PHP string literals represent new filter hooks in CMB2 (`'cmb2_field_defaults'`, `'cmb2_field_arguments_raw'`, `'cmb2_field_arguments'`) that allow developers to modify the arguments used when defining or rendering a field.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n'cmb2_field_defaults'\n```\n\nLANGUAGE: php\nCODE:\n```\n'cmb2_field_arguments_raw'\n```\n\nLANGUAGE: php\nCODE:\n```\n'cmb2_field_arguments'\n```\n\n----------------------------------------\n\nTITLE: CMB2 Attached Posts Field Identifier\nDESCRIPTION: The field type identifier `custom_attached_posts` is used for the 'CMB Attached Posts Field' plugin by coreymcollins. This field type allows users to attach other posts to the current post or page.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncustom_attached_posts\n```\n\n----------------------------------------\n\nTITLE: CMB2 User Search Field Identifier\nDESCRIPTION: The field type identifier `user_search_text` is used for the 'CMB2 User Search field' plugin by Mte90. This field adds a user-search dialog specifically for searching and attaching User IDs.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nuser_search_text\n```\n\n----------------------------------------\n\nTITLE: Filtering Default Field Value in PHP\nDESCRIPTION: The `cmb_std_filter` was removed and replaced by `cmb_default_filter`. This filter modifies the default value ('std') for a field before it's used. Note: This was a breaking change from previous versions.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\ncmb_default_filter\n```\n\n----------------------------------------\n\nTITLE: CMB2 Select2 Field Identifiers\nDESCRIPTION: The 'CMB2 Field Type: Select2' plugin by mustardBees provides two field types utilizing the Select2 script: `pw_select` for a single selection with typeahead search, and `pw_multiselect` for multiple selections with typeahead search and reordering capabilities.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npw_select\n```\n\nLANGUAGE: text\nCODE:\n```\npw_multiselect\n```\n\n----------------------------------------\n\nTITLE: Using the rest_value_cb Parameter/Filter in CMB2 PHP\nDESCRIPTION: This PHP string literal `rest_value_cb` refers to a parameter or filter name within CMB2 related to REST API value callbacks. A bug fix corrected the registration of the associated filter.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nrest_value_cb\n```\n\n----------------------------------------\n\nTITLE: Targeting .postbox Elements in CSS/JavaScript\nDESCRIPTION: This refers to the CSS class selector `.postbox`. An enhancement added an 'id' attribute to these divs within CMB2 group fields to improve compatibility with JavaScript libraries or custom scripts that expect elements to have unique IDs.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.postbox\n```\n\n----------------------------------------\n\nTITLE: Calling CMB2_Types::_id() Method in PHP\nDESCRIPTION: This references the `CMB2_Types::_id()` method in PHP. It has been updated to optionally omit the iterator attribute when dealing with repeatable fields, providing more control over field ID generation.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nCMB2_Types::_id()\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Checking Empty Values Allowing Zero (PHP)\nDESCRIPTION: Introduced `CMB2_Utils::notempty()` and `CMB2_Utils::filter_empty()` methods. Both treat `null`, `''` (empty string), and `false` as empty but specifically consider `0` (integer zero) as NOT empty, which is useful for saving '0' as a valid field value.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n// New CMB2_Utils methods, notempty() and filter_empty(), both of which consider null, '' and false as empty, but allow 0\nif ( CMB2_Utils::notempty( $value ) ) {\n    // $value is not null, '', or false (0 is allowed)\n}\n\n$filtered_array = array_filter( $array, 'CMB2_Utils::filter_empty' );\n```\n\n----------------------------------------\n\nTITLE: Tracking Updated Group Field IDs (PHP)\nDESCRIPTION: The `CMB2::$updated` property, which holds an array of field IDs updated during a save operation, now correctly includes the IDs of fields within repeatable groups.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n// The CMB2::$updated parameter ... now also correctly adds group field ids to the array.\n// Access after save:\n$updated_field_ids = $cmb->updated;\n```\n\n----------------------------------------\n\nTITLE: Filtering CMB2 Base URL (PHP)\nDESCRIPTION: The 'cmb2_meta_box_url' filter allows modification of the base URL used by CMB2 for assets. While still functional, enhancements in version 2.2.2 made CMB2 more intelligent about its location, reducing the need for this filter in most cases.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n'cmb2_meta_box_url'\n```\n\n----------------------------------------\n\nTITLE: Escaping Field Data for Display using Method in PHP\nDESCRIPTION: Introduced the `cmb_Meta_Box_types::esc()` method within the CMB2 framework. This method is used internally and can potentially be leveraged externally to handle proper escaping of field data before displaying it on the frontend or backend.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\ncmb_Meta_Box_types::esc( $value, $field_args )\n```\n\n----------------------------------------\n\nTITLE: Using get_user_locale() vs get_locale() in PHP\nDESCRIPTION: This references the PHP functions `get_user_locale()` and `get_locale()`. CMB2 was updated to use `get_user_locale()` within the WordPress admin area for better localization accuracy based on user preferences.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nget_user_locale()\n```\n\nLANGUAGE: php\nCODE:\n```\nget_locale()\n```\n\n----------------------------------------\n\nTITLE: Triggering the cmb2_add_row JavaScript Event\nDESCRIPTION: This snippet refers to the `cmb2_add_row` JavaScript event triggered by CMB2. A bug fix ensures that the newly created row element is correctly passed as an argument to handlers bound to this event.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncmb2_add_row\n```\n\n----------------------------------------\n\nTITLE: Referencing the core/editor JavaScript Object\nDESCRIPTION: This refers to the `core/editor` JavaScript object, likely related to the WordPress block editor (Gutenberg). A bug fix addressed an issue where checking for this object caused errors if it didn't exist, improving compatibility with plugins like Yoast.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ncore/editor\n```\n\n----------------------------------------\n\nTITLE: Calling CMB2 Utility and Save Methods in PHP\nDESCRIPTION: This references the `CMB2_Utils::filter_empty` and `CMB2::save_group_field` methods in PHP. A fix ensures that the value passed from `save_group_field` to `filter_empty` is always an array, preventing potential errors when saving group fields.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nCMB2_Utils::filter_empty\n```\n\nLANGUAGE: php\nCODE:\n```\nCMB2::save_group_field\n```\n\n----------------------------------------\n\nTITLE: Accessing CMB2_Option Class Properties in PHP\nDESCRIPTION: This references the `CMB2_Option` class in PHP. An enhancement made its properties accessible, likely changing their visibility from private/protected to public, allowing easier interaction with option objects.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nCMB2_Option\n```\n\n----------------------------------------\n\nTITLE: Refactored Form Rendering Methods in CMB2 (PHP)\nDESCRIPTION: The main `CMB2::show_form()` method, responsible for rendering the entire metabox form, has been broken down into three smaller, more focused public methods: `CMB2::render_form_open()`, `CMB2::render_field()` (likely meant to be `render_fields()`), and `CMB2::render_form_close()`. This allows for finer control or overriding of specific parts of the form rendering process.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n// CMB2::show_form() is now composed of 3 smaller methods,\n// CMB2::render_form_open(), CMB2::render_field(), CMB2::render_form_close()\n$cmb->render_form_open();\n// $cmb->render_fields(); // Assumed intended method for rendering all fields\n$cmb->render_form_close();\n```\n\n----------------------------------------\n\nTITLE: Renaming CMB2_hookup Class to CMB2_Hookup in PHP\nDESCRIPTION: This indicates a code cleanup change where the PHP class `CMB2_hookup` was renamed to `CMB2_Hookup` for better naming consistency. Due to PHP's case-insensitivity for class names, this change is backward-compatible.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCMB2_hookup\n```\n\nLANGUAGE: php\nCODE:\n```\nCMB2_Hookup\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory to CMB2 - Bash\nDESCRIPTION: This Bash snippet changes the current working directory to the CMB2 project folder. It is used to ensure subsequent commands (such as scripts or test runs) are executed within the project context. Assumes the CMB2 directory exists in the current location.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/tests/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd CMB2\n```\n\n----------------------------------------\n\nTITLE: Manually Running PHPUnit Tests - Bash\nDESCRIPTION: Runs the PHPUnit test suite within the current directory, executing all defined unit tests for CMB2. Requires PHPUnit to be installed and a running MySQL server. Outputs test results to the console. Assumes the WordPress testing environment has already been initialized.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/tests/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphpunit\n```\n\n----------------------------------------\n\nTITLE: Checking for add_action Function Existence in PHP\nDESCRIPTION: This PHP code snippet shows a `function_exists()` check for WordPress's `add_action`. This check was added to the CMB2 bootstrap file to improve compatibility when CMB2 is included via Composer in environments where WordPress functions might not be loaded yet.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction_exists( 'add_action' )\n```\n\n----------------------------------------\n\nTITLE: Initializing WordPress Test Environment - Bash\nDESCRIPTION: This Bash command runs the provided script to install the WordPress testing environment for CMB2. Dependencies include bash, svn, wget, mysql, and an existing CMB2 directory. Key parameters specify the test database name, MySQL user credentials, host, and WordPress version. The script will set up a test database (deleting all its contents) and configure WordPress testing files; only use with test datasets.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/tests/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash tests/bin/install-wp-tests.sh wordpress_test root '' localhost latest\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages and Grunt Git Hooks - Bash\nDESCRIPTION: This pair of Bash commands installs Node.js dependencies and configures git hooks using Grunt. Requires Node.js, npm, and grunt to be installed. \"npm install\" fetches all package.json dependencies, and \"grunt githooks\" sets up automated test runs before each commit. Ensures code quality by preventing commits if PHPUnit tests fail.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/tests/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ngrant githooks\n```\n\n----------------------------------------\n\nTITLE: Cloning CMB2 Repository - Bash\nDESCRIPTION: This Bash snippet clones the CMB2 repository from GitHub into the current directory. The command requires Git to be installed. It is the initial step in setting up the local environment for developing or testing CMB2. The output is a complete local copy of the CMB2 repository, downloaded into the specified path (./).\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:CMB2/CMB2.git ./\n```\n\n----------------------------------------\n\nTITLE: Calling CMB2_Utils::concat_attrs() Method in PHP\nDESCRIPTION: This references the `CMB2_Utils::concat_attrs()` method in PHP, specifically mentioning added test coverage for its handling of nested arrays used as data attributes during HTML attribute concatenation.\nSOURCE: https://github.com/cmb2/cmb2/blob/develop/readme.txt#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nCMB2_Utils::concat_attrs()\n```"
  }
]