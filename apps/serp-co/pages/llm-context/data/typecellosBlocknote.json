[
  {
    "owner": "typecellos",
    "repo": "blocknote",
    "content": "TITLE: Using the useCreateBlockNote Hook in TypeScript\nDESCRIPTION: Function signature and type definition for the useCreateBlockNote hook, which instantiates a new BlockNoteEditor. The hook accepts custom options for configuring the editor and an optional dependency array.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/setup.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useCreateBlockNote(\n  options?: BlockNoteEditorOptions,\n  deps?: React.DependencyList = [],\n): BlockNoteEditor;\n\ntype BlockNoteEditorOptions = {\n  animations?: boolean;\n  collaboration?: CollaborationOptions;\n  comments?: CommentsConfig;\n  defaultStyles?: boolean;\n  dictionary?: Dictionary;\n  disableExtensions?: string[];\n  domAttributes?: Record<string, string>;\n  dropCursor?: (opts: {\n    editor: BlockNoteEditor;\n    color?: string | false;\n    width?: number;\n    class?: string;\n  }) => Plugin;\n  initialContent?: PartialBlock[];\n  pasteHandler?: (context: {\n    event: ClipboardEvent;\n    editor: BlockNoteEditor;\n    defaultPasteHandler: (context: {\n      pasteBehavior?: \"prefer-markdown\" | \"prefer-html\";\n    }) => boolean | undefined;\n  }) => boolean | undefined;\n  resolveFileUrl: (url: string) => Promise<string>\n  schema?: BlockNoteSchema;\n  setIdAttribute?: boolean;\n  sideMenuDetection?: \"viewport\" | \"editor\";\n  tabBehavior?: \"prefer-navigate-ui\" | \"prefer-indent\";\n  tables?: TableFeatures;\n  trailingBlock?: boolean;\n  uploadFile?: (file: File) => Promise<string>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Block Structure in TypeScript for BlockNote\nDESCRIPTION: This snippet defines the TypeScript type for a Block in BlockNote. It includes properties for id, type, props, content, and children, representing the structure of a block in the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/document-structure.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Block = {\n  id: string;\n  type: string;\n  props: Record<string, boolean | number | string>;\n  content: InlineContent[] | TableContent | undefined;\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BlockNote Schema with Alert Block\nDESCRIPTION: Example of creating a BlockNoteSchema that includes both default block specifications and a custom Alert block, which can then be used to instantiate a BlockNote editor with custom functionality.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-blocks.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = BlockNoteSchema.create({\n  blockSpecs: {\n    // enable the default blocks if desired\n    ...defaultBlockSpecs,\n\n    // Add your own custom blocks:\n    alert: Alert,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockNote Editor in React\nDESCRIPTION: This code snippet shows the minimal setup required to create a BlockNote editor component in a React application. It imports necessary dependencies, initializes the editor, and renders it within a div element.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/01-basic/01-minimal/README.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function SimpleBlockNote() {\n  // Creates a new editor instance.\n  const editor = useBlockNote();\n\n  // Renders the editor instance using a React component.\n  return (\n    <div style={{ height: \"100%\" }}>\n      <BlockNoteView editor={editor} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BlockNote Editor in React TSX\nDESCRIPTION: Basic example of how to render a BlockNote editor using the BlockNoteView component. It demonstrates creating an editor instance with useCreateBlockNote and passing it to the BlockNoteView component.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/setup.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst editor = useCreateBlockNote();\n\nreturn <BlockNoteView editor={editor} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Content Types in TypeScript for BlockNote\nDESCRIPTION: This snippet defines TypeScript types for inline content in BlockNote, including Link and StyledText. It demonstrates how rich text content is structured within blocks, including styling and link properties.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/document-structure.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Link = {\n  type: \"link\";\n  content: StyledText[];\n  href: string;\n};\n\ntype StyledText = {\n  type: \"text\";\n  text: string;\n  styles: Styles;\n};\n\ntype InlineContent = Link | StyledText;\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockNote Editor in React with Mantine UI\nDESCRIPTION: This code snippet demonstrates how to implement a basic BlockNote editor in a React application using the Mantine UI package. It imports necessary components and styles, creates an editor instance with useCreateBlockNote hook, and renders the BlockNoteView component.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCreateBlockNote } from \"@blocknote/react\";\nimport { BlockNoteView } from \"@blocknote/mantine\";\nimport \"@blocknote/core/fonts/inter.css\";\nimport \"@blocknote/mantine/style.css\";\n\nfunction App() {\n  const editor = useCreateBlockNote();\n\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Heading Block Type in TypeScript\nDESCRIPTION: Type definition for heading blocks with level property supporting title (1), heading (2), and subheading (3).\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype HeadingBlock = {\n  id: string;\n  type: \"heading\";\n  props: {\n    level: 1 | 2 | 3 = 1;\n  } & DefaultProps;\n  content: InlineContent[];\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Real-time Collaboration in BlockNote with Yjs and WebRTC\nDESCRIPTION: This snippet demonstrates how to set up BlockNote with real-time collaboration using Yjs and the WebRTC provider. It configures the collaboration options including the provider, document fragment, user information, and cursor label display settings.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/real-time-collaboration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Y from \"yjs\";\nimport { WebrtcProvider } from \"y-webrtc\";\n// ...\n\nconst doc = new Y.Doc();\n\nconst provider = new WebrtcProvider(\"my-document-id\", doc); // setup a yjs provider (explained below)\nconst editor = useCreateBlockNote({\n  // ...\n  collaboration: {\n    // The Yjs Provider responsible for transporting updates:\n    provider,\n    // Where to store BlockNote data in the Y.Doc:\n    fragment: doc.getXmlFragment(\"document-store\"),\n    // Information (name and color) for this user:\n    user: {\n      name: \"My Username\",\n      color: \"#ff0000\",\n    },\n    // When to show user labels on the collaboration cursor. Set by default to\n    // \"activity\" (show when the cursor moves), but can also be set to \"always\".\n    showCursorLabels: \"activity\"\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Schema in BlockNote\nDESCRIPTION: This code snippet shows how to create a custom schema in BlockNote by extending the default blocks, inline content, and styles. You can add your own custom implementations while keeping the default ones if desired.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = BlockNoteSchema.create({\n  blockSpecs: {\n    // enable the default blocks if desired\n    ...defaultBlockSpecs,\n\n    // Add your own custom blocks:\n    // customBlock: CustomBlock,\n  },\n  inlineContentSpecs: {\n    // enable the default inline content if desired\n    ...defaultInlineContentSpecs,\n\n    // Add your own custom inline content:\n    // customInlineContent: CustomInlineContent,\n  },\n  styleSpecs: {\n    // enable the default styles if desired\n    ...defaultStyleSpecs,\n\n    // Add your own custom styles:\n    // customStyle: CustomStyle\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockNote Editor in React\nDESCRIPTION: Basic example showing how to initialize and render a BlockNote editor in a React application using the Mantine UI implementation. Requires importing the necessary dependencies and CSS files for styling and fonts.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/react/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCreateBlockNote } from \"@blocknote/react\";\nimport { BlockNoteView } from \"@blocknote/mantine\";\nimport \"@blocknote/core/fonts/inter.css\";\nimport \"@blocknote/mantine/style.css\";\n\nfunction App() {\n  const editor = useCreateBlockNote();\n\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BlockNote with NPM\nDESCRIPTION: Command to install the required BlockNote packages using NPM. This installs the core package along with React and Mantine UI integration packages.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/quickstart.mdx#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install @blocknote/core @blocknote/react @blocknote/mantine\n```\n\n----------------------------------------\n\nTITLE: Defining Numbered List Item Block Type in TypeScript\nDESCRIPTION: Type definition for numbered list item blocks with default properties and content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype NumberedListItemBlock = {\n  id: string;\n  type: \"numberedListItem\";\n  props: DefaultProps;\n  content: InlineContent[];\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Drag Handle Menu Items in BlockNote\nDESCRIPTION: This code shows how to customize the Drag Handle Menu by adding additional menu items while keeping the default Block Side Menu buttons. It passes a customized Drag Handle Menu using the dragHandleMenu prop.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/side-menu.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"ui-components/side-menu-drag-handle-items\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Block Syntax Highlighting in React\nDESCRIPTION: This React component demonstrates how to use the codeBlock option in the useCreateBlockNote hook to enable syntax highlighting for code blocks in BlockNote.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/code-blocks.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { codeBlock } from \"@blocknote/code-block\";\n\nexport default function App() {\n  // Creates a new editor instance.\n  const editor = useCreateBlockNote({\n    codeBlock,\n  });\n\n  // Renders the editor instance using a React component.\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Block Type in TypeScript\nDESCRIPTION: Type definition for image blocks including URL, caption, and preview width properties.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImageBlock = {\n  id: string;\n  type: \"image\";\n  props: {\n    url: string = \"\";\n    caption: string = \"\";\n    previewWidth: number = 512;\n  } & DefaultProps;\n  content: undefined;\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Block Side Menu with Remove Block Button in React\nDESCRIPTION: This code demonstrates how to customize the Block Side Menu by replacing the default add block button with a custom remove block button. It uses the SideMenuController to control positioning and visibility.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/side-menu.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"ui-components/side-menu-buttons\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic BlockNote Editor in React\nDESCRIPTION: Shows how to set up a basic BlockNote editor in a React application using the @blocknote/react and @blocknote/mantine packages. Includes necessary style imports and minimal component setup.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCreateBlockNote } from \"@blocknote/react\";\nimport { BlockNoteView } from \"@blocknote/mantine\";\nimport \"@blocknote/core/fonts/inter.css\";\nimport \"@blocknote/mantine/style.css\";\n\nfunction App() {\n  const editor = useCreateBlockNote();\n\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Code Block Syntax Highlighting in React\nDESCRIPTION: This React component shows how to use a custom Shiki syntax highlighter with specific languages and themes in BlockNote. It demonstrates configuring the codeBlock option with custom settings.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/code-blocks.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createHighlighter } from \"./shiki.bundle.js\";\n\nexport default function App() {\n  // Creates a new editor instance.\n  const editor = useCreateBlockNote({\n    codeBlock: {\n      indentLineWithTab: true,\n      defaultLanguage: \"typescript\",\n      supportedLanguages: {\n        typescript: {\n          name: \"TypeScript\",\n          aliases: [\"ts\"],\n        },\n      },\n      createHighlighter: () =>\n        createHighlighter({\n          themes: [\"light-plus\", \"dark-plus\"],\n          langs: [],\n        }),\n    },\n  });\n\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Event in BlockNote\nDESCRIPTION: The onChange callback is called whenever the editor content changes. This example shows how to listen for changes and retrieve details about what changed.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/events.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\neditor.onChange((editor, { getChanges }) => {\n  console.log(\"Editor updated\");\n  const changes = getChanges();\n  console.log(changes);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Paste Handler in BlockNote\nDESCRIPTION: Example implementation of a custom paste handler that processes a custom format before falling back to default behavior. The handler checks for 'text/my-custom-format' in clipboard data and converts it to markdown before pasting.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/paste-handling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  pasteHandler: ({ event, editor, defaultPasteHandler }) => {\n    if (event.clipboardData?.types.includes(\"text/my-custom-format\")) {\n      // You can do any custom logic here, for example you could transform the clipboard data before pasting it\n      const markdown = customToMarkdown(event.clipboardData.getData(\"text/my-custom-format\"));\n      \n      // The editor is able paste markdown (`pasteMarkdown`), HTML (`pasteHTML`), or plain text (`pasteText`)\n      editor.pasteMarkdown(markdown);\n      // We handled the paste event, so return true, returning false will cancel the paste event\n      return true;\n    }\n\n    // If we didn't handle the paste event, call the default paste handler to do the default behavior\n    return defaultPasteHandler();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mention Component\nDESCRIPTION: Example implementation of a custom mention tag using createReactInlineContentSpec with configuration and rendering logic.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-inline-content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mention = createReactInlineContentSpec(\n  {\n    type: \"mention\",\n    propSchema: {\n      user: {\n        default: \"Unknown\",\n      },\n    },\n    content: \"none\",\n  } as const,\n  {\n    render: (props) => (\n      ...\n    ),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Selection in BlockNote\nDESCRIPTION: Method to retrieve the current selection state in the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/cursor-selections.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelection(): Selection | undefined;\n\n// Usage\nconst selection = editor.getSelection();\n```\n\n----------------------------------------\n\nTITLE: Using React Context with ServerBlockNoteEditor\nDESCRIPTION: This snippet shows how to use the withReactContext function to provide React context to the server-side editor. This enables correct export of custom blocks that depend on React contexts like themes or localization.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/server-processing.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst html = await editor.withReactContext(\n  ({ children }) => (\n    <YourContext.Provider value={true}>{children}</YourContext.Provider>\n  ),\n  async () => editor.blocksToFullHTML(blocks),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Resolution Function\nDESCRIPTION: Implementation of the resolveUsers function required by BlockNote to retrieve user information (username and avatar) based on user IDs for displaying comments.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/comments.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype User = {\n  id: string;\n  username: string;\n  avatarUrl: string;\n};\n\nasync function myResolveUsers(userIds: string[]): Promise<User[]> {\n  // fetch user information from your database / backend\n  // and return an array of User objects\n\n  return await callYourBackend(userIds);\n\n  // Return a list of users\n  return users;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BlockNote Theme CSS Variables\nDESCRIPTION: A comprehensive list of CSS variables that can be customized to change the appearance of the BlockNote editor, including colors, borders, shadows, and font family. These are the values from the default light theme.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/styling-theming/themes.mdx#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--bn-colors-editor-text: #3f3f3f;\n--bn-colors-editor-background: #ffffff;\n--bn-colors-menu-text: #3f3f3f;\n--bn-colors-menu-background: #ffffff;\n--bn-colors-tooltip-text: #3f3f3f;\n--bn-colors-tooltip-background: #efefef;\n--bn-colors-hovered-text: #3f3f3f;\n--bn-colors-hovered-background: #efefef;\n--bn-colors-selected-text: #ffffff;\n--bn-colors-selected-background: #3f3f3f;\n--bn-colors-disabled-text: #afafaf;\n--bn-colors-disabled-background: #efefef;\n\n--bn-colors-shadow: #cfcfcf;\n--bn-colors-border: #efefef;\n--bn-colors-side-menu: #cfcfcf;\n\n--bn-colors-highlights-gray-text: #9b9a97;\n--bn-colors-highlights-gray-background: #ebeced;\n--bn-colors-highlights-brown-text: #64473a;\n--bn-colors-highlights-brown-background: #e9e5e3;\n--bn-colors-highlights-red-text: #e03e3e;\n--bn-colors-highlights-red-background: #fbe4e4;\n--bn-colors-highlights-orange-text: #d9730d;\n--bn-colors-highlights-orange-background: #f6e9d9;\n--bn-colors-highlights-yellow-text: #dfab01;\n--bn-colors-highlights-yellow-background: #fbf3db;\n--bn-colors-highlights-green-text: #4d6461;\n--bn-colors-highlights-green-background: #ddedea;\n--bn-colors-highlights-blue-text: #0b6e99;\n--bn-colors-highlights-blue-background: #ddebf1;\n--bn-colors-highlights-purple-text: #6940a5;\n--bn-colors-highlights-purple-background: #eae4f2;\n--bn-colors-highlights-pink-text: #ad1a72;\n--bn-colors-highlights-pink-background: #f4dfeb;\n\n--bn-font-family: \"Inter\", \"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Open Sans\",\n  \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n  \"Helvetica Neue\", sans-serif;\n--bn-border-radius: 6px;\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Inline Content Types in TypeScript\nDESCRIPTION: Defines TypeScript types for partial inline content, including links and styled text. These types allow for more flexible content manipulation.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PartialLink = {\n  type: \"link\";\n  content: string | StyledText[];\n  href: string;\n};\n\ntype PartialInlineContent = string | (string | PartialLink | StyledText)[];\n```\n\n----------------------------------------\n\nTITLE: Toggling Styles on Selected Text in BlockNoteEditor\nDESCRIPTION: Shows how to toggle multiple styles on or off for the currently selected text using the toggleStyles function.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntoggleStyles(styles: Styles): void;\n\n// Usage\neditor.toggleStyles({ bold: true, italic: true });\n```\n\n----------------------------------------\n\nTITLE: BlockNoteView Props TypeScript Interface\nDESCRIPTION: Complete TypeScript interface for the BlockNoteView component props. Shows all available configuration options including editor instance, editability settings, event handlers, theming options, and UI component toggles.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/setup.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type BlockNoteViewProps = {\n  editor: BlockNoteEditor;\n  editable?: boolean;\n  onSelectionChange?: () => void;\n  onChange?: () => void;\n  theme?:\n    | \"light\"\n    | \"dark\"\n    | Theme\n    | {\n        light: Theme;\n        dark: Theme;\n      };\n  formattingToolbar?: boolean;\n  linkToolbar?: boolean;\n  sideMenu?: boolean;\n  slashMenu?: boolean;\n  emojiPicker?: boolean;\n  filePanel?: boolean;\n  tableHandles?: boolean;\n  comments?: boolean;\n  children?:\n} & HTMLAttributes<HTMLDivElement>;\n```\n\n----------------------------------------\n\nTITLE: Defining BlockNote Theme Type in TypeScript\nDESCRIPTION: TypeScript type definitions for creating a BlockNote theme. Includes types for colors, highlights, border radius, and font family that can be used with the theme prop in BlockNoteView.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/styling-theming/themes.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CombinedColor = Partial<{\n  text: string;\n  background: string;\n}>;\n\ntype ColorScheme = Partial<{\n  editor: CombinedColor;\n  menu: CombinedColor;\n  tooltip: CombinedColor;\n  hovered: CombinedColor;\n  selected: CombinedColor;\n  disabled: CombinedColor;\n  shadow: string;\n  border: string;\n  sideMenu: string;\n  highlights: Partial<{\n    gray: CombinedColor;\n    brown: CombinedColor;\n    red: CombinedColor;\n    orange: CombinedColor;\n    yellow: CombinedColor;\n    green: CombinedColor;\n    blue: CombinedColor;\n    purple: CombinedColor;\n    pink: CombinedColor;\n  }>;\n}>;\n\ntype Theme = Partial<{\n  colors: ColorScheme;\n  borderRadius: number;\n  fontFamily: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Block Config Type Definition for BlockNote Custom Blocks\nDESCRIPTION: Type definition for BlockConfig which specifies the structure required for custom block configuration, including type identifier, content type, property schema, and optional settings for selection and break behavior.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-blocks.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype BlockConfig = {\n  type: string;\n  content: \"inline\" | \"none\";\n  readonly propSchema: PropSchema;\n  isSelectable?: boolean;\n  hardBreakShortcut?: \"shift+enter\" | \"enter\" | \"none\";\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mappings for DOCX Export in BlockNote\nDESCRIPTION: Demonstrates how to create custom mappings for BlockNote schema elements when exporting to DOCX. This example shows how to add a custom block type to the existing default mappings.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-docx.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DOCXExporter,\n  docxDefaultSchemaMappings,\n} from \"@blocknote/xl-docx-exporter\";\nimport { Paragraph, TextRun } from \"docx\";\n\nnew DOCXExporter(schema, {\n  blockMapping: {\n    ...docxDefaultSchemaMappings.blockMapping,\n    myCustomBlock: (block, exporter) => {\n      return new Paragraph({\n        children: [\n          new TextRun({\n            text: \"My custom block\",\n          }),\n        ],\n      });\n    },\n  },\n  inlineContentMapping: docxDefaultSchemaMappings.inlineContentMapping,\n  styleMapping: docxDefaultSchemaMappings.styleMapping,\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Blocks to Markdown in TypeScript\nDESCRIPTION: Function to convert BlockNote Block objects to a Markdown string. This is a lossy conversion as Markdown cannot represent all BlockNote features.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/converting-blocks.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync blocksToMarkdownLossy(blocks?: Block[]): Promise<string>;\n\n// Usage\nconst markdownFromBlocks = await editor.blocksToMarkdownLossy(blocks);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Class to BlockNote Editor Blocks\nDESCRIPTION: This example demonstrates how to add a custom CSS class ('hello-world-block') to every block in a BlockNote editor and apply styling to those elements using CSS. The technique uses BlockNote's capability to add DOM attributes to blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/04-theming/01-theming-dom-attributes/README.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n# Adding CSS Class to Blocks\n\nIn this example, we add a `hello-world-block` class to each block in the editor. We also create a CSS rule to add a border to all elements with that class.\n\n**Relevant Docs:**\n\n- [Adding DOM Attributes](/docs/styling-theming/adding-dom-attributes)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Alert Block with React in BlockNote\nDESCRIPTION: Example of creating a custom alert block using createReactBlockSpec, defining its type, property schema with text alignment, color and alert type options, and specifying that it supports inline content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-blocks.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Alert = createReactBlockSpec(\n  {\n    type: \"alert\",\n    propSchema: {\n      textAlignment: defaultProps.textAlignment,\n      textColor: defaultProps.textColor,\n      type: {\n        default: \"warning\",\n        values: [\"warning\", \"error\", \"info\", \"success\"],\n      },\n    },\n    content: \"inline\",\n  },\n  {\n    render: (props) => {\n      ...\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Buttons to BlockNote Formatting Toolbar (React/JSX)\nDESCRIPTION: This snippet demonstrates how to add custom buttons to the BlockNote Formatting Toolbar, including a button for blue text/background and a toggle for code styles.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/formatting-toolbar.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"ui-components/formatting-toolbar-buttons\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Schema Mappings for ODT Export in React/TSX\nDESCRIPTION: Code example demonstrating how to create custom mappings for BlockNote schema elements when exporting to ODT. This is useful when using a custom schema or when you want to override default conversion behavior.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-odt.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ODTExporter,\n  odtDefaultSchemaMappings,\n} from \"@blocknote/xl-odt-exporter\";\n\nnew ODTExporter(schema, {\n  blockMapping: {\n    ...odtDefaultSchemaMappings.blockMapping,\n    myCustomBlock: (block, exporter) => {\n      return <text:p>My custom block</text:p>;\n    },\n  },\n  inlineContentMapping: odtDefaultSchemaMappings.inlineContentMapping,\n  styleMapping: odtDefaultSchemaMappings.styleMapping,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Liveblocks Project with BlockNote Integration\nDESCRIPTION: Shell command to create a fully-featured example project using Liveblocks with BlockNote. This command generates a Next.js project with the necessary configuration for collaborative text editing backed by Liveblocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/real-time-collaboration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-liveblocks-app@latest --example nextjs-blocknote --api-key\n```\n\n----------------------------------------\n\nTITLE: PropSchema Type Definition\nDESCRIPTION: Type definition for prop schema configuration supporting boolean, number, and string primitive types with default values and optional value constraints.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-inline-content.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PropSchema<\n  PrimitiveType extends \"boolean\" | \"number\" | \"string\"\n> = Record<\n  string,\n  {\n    default: PrimitiveType;\n    values?: PrimitiveType[];\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Cursor Position in BlockNote\nDESCRIPTION: Method to set the text cursor position to the start or end of a specified block.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/cursor-selections.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetTextCursorPosition(\n  targetBlock: BlockIdentifier,\n  placement: \"start\" | \"end\" = \"start\"\n): void;\n\n// Usage\neditor.setTextCursorPosition(targetBlock, placement);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Schema with BlockNote Editor\nDESCRIPTION: This code demonstrates how to initialize a BlockNote editor with a custom schema. The schema is passed to the useCreateBlockNote hook to create an editor instance that supports the custom elements.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = useCreateBlockNote({\n  schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up BlockNote with PartyKit Provider for Development\nDESCRIPTION: This snippet shows how to replace the WebRTC provider with a PartyKit provider for development purposes. It configures the provider to connect to a development server with a unique room name for the application.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/real-time-collaboration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// npm install y-partykit\nimport YPartyKitProvider from \"y-partykit/provider\";\n\nconst provider = new YPartyKitProvider(\n  \"blocknote-dev.yousefed.partykit.dev\",\n  // use a unique name as a \"room\" for your application:\n  \"your-project-name\",\n  doc,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating BlockNote Schema with Custom Inline Content\nDESCRIPTION: Example of creating a BlockNote schema that incorporates custom inline content alongside default specifications.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-inline-content.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = BlockNoteSchema.create({\n  inlineContentSpecs: {\n    // enable the default inline content if desired\n    ...defaultInlineContentSpecs,\n\n    // Add your own custom inline content:\n    mention: Mention,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles to Blocks in BlockNote\nDESCRIPTION: This snippet demonstrates how to add custom styles to specific block types in BlockNote. It uses the `addStyle` method to apply CSS styles to paragraph and heading blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/vanilla-js/react-vanilla-custom-styles/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.addStyle({\n  // Add a red background to paragraphs\n  paragraph: { backgroundColor: \"red\" },\n  // Add a blue border to level 1 headings\n  heading: { level: 1, css: { border: \"1px solid blue\" } },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Block Schema in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a custom block schema for a 'callout' block in BlockNote. It specifies the block type, content structure, and default values.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/react-custom-blocks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockSchema, defaultProps } from \"@blocknote/core\";\n\ntype CalloutBlockSchema = BlockSchema & {\n  type: \"callout\";\n  content: BlockSchema[\"content\"] & {\n    type: string;\n  };\n};\n\nconst calloutBlockSchema: CalloutBlockSchema = {\n  type: \"callout\",\n  content: {\n    type: \"string\",\n  },\n  propSchema: {\n    ...defaultProps,\n    type: {\n      default: \"info\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PasteHandler Type in TypeScript\nDESCRIPTION: TypeScript type definition for the paste handler function, specifying the expected parameters and return type. The handler receives a context object containing the clipboard event, editor instance, and default paste handler function.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/paste-handling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PasteHandler = (context: {\n    event: ClipboardEvent;\n    editor: BlockNoteEditor;\n    defaultPasteHandler: (context?: {\n        prioritizeMarkdownOverHTML?: boolean;\n        plainTextAsMarkdown?: boolean;\n    }) => boolean;\n}) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ODT Exporter in TypeScript\nDESCRIPTION: Basic example of creating an ODTExporter instance and converting BlockNote documents to ODT format. This shows how to import the required components and generate an ODT document as a Blob.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-odt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ODTExporter,\n  odtDefaultSchemaMappings,\n} from \"@blocknote/xl-odt-exporter\";\n\n// Create the exporter\nconst exporter = new ODTExporter(editor.schema, odtDefaultSchemaMappings);\n\n// Convert the blocks to a ODT document (Blob)\nconst odtDocument = await exporter.toODTDocument(editor.document);\n```\n\n----------------------------------------\n\nTITLE: Configuring BlockNote Editor with Custom Alert Block\nDESCRIPTION: This snippet demonstrates how to set up the BlockNote editor with the custom Alert block. It includes the block in the editor's configuration and adds a slash menu item for easy insertion of the Alert block.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/01-alert-block/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nconst AlertMenuItem: ReactSlashMenuItem = {\n  name: \"Alert\",\n  execute: (editor) => {\n    const block = editor.getTextCursorPosition().block;\n    editor.updateBlock(block, { type: \"alert\" });\n  },\n  aliases: [\"alert\", \"warning\", \"info\"],\n  group: \"Other\",\n  icon: <RiAlertLine />,\n  hint: \"Used to emphasize text\",\n};\n\nexport default function App() {\n  const editor = useBlockNote({\n    blockSpecs: {\n      alert: AlertBlock,\n    },\n    slashMenuItems: [AlertMenuItem],\n  });\n\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Block Component in React TSX\nDESCRIPTION: This code creates the React component for the Alert block. It renders the alert with appropriate styling based on the alert type and includes a button to toggle between different alert types.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/01-alert-block/README.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactSlashMenuItem, createReactBlockSpec } from \"@blocknote/react\";\nimport { RiAlertLine } from \"react-icons/ri\";\n\nconst AlertBlock = createReactBlockSpec({\n  type: \"alert\",\n  propSchema: AlertSchema.propSchema,\n  content: \"blocks\",\n  render: ({ block, editor }) => {\n    const alertTypes = [\"info\", \"success\", \"warning\", \"error\"];\n\n    return (\n      <div\n        style={{\n          backgroundColor:\n            block.props.alertType === \"info\"\n              ? \"#e0f2fe\"\n              : block.props.alertType === \"success\"\n              ? \"#dcfce7\"\n              : block.props.alertType === \"warning\"\n              ? \"#fef9c3\"\n              : \"#fee2e2\",\n          borderRadius: 4,\n          padding: \"8px 12px\",\n        }}\n      >\n        <div style={{ display: \"flex\", marginBottom: 8 }}>\n          <button\n            style={{\n              all: \"unset\",\n              cursor: \"pointer\",\n              marginRight: 4,\n              width: 20,\n              height: 20,\n              borderRadius: 4,\n              display: \"inline-flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n            onClick={() => {\n              const currentIndex = alertTypes.indexOf(block.props.alertType);\n              const nextIndex = (currentIndex + 1) % alertTypes.length;\n              editor.updateBlock(block, {\n                props: { alertType: alertTypes[nextIndex] },\n              });\n            }}\n          >\n            !\n          </button>\n          {block.props.alertType}\n        </div>\n        {editor.createReactElements(block.children)}\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Emoji Picker Component in BlockNote\nDESCRIPTION: Demonstrates how to replace the default Emoji Picker component with a custom implementation using GridSuggestionMenuController and a custom gridSuggestionMenuComponent.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/grid-suggestion-menus.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nGridSuggestionMenuController triggerCharacter={\":\"} gridSuggestionMenuComponent={customComponent}\n```\n\n----------------------------------------\n\nTITLE: Using Schema Shorthand Types in TypeScript\nDESCRIPTION: This code shows how to use schema shorthand types for easier type definitions when working with custom schemas in BlockNote. These shortcuts provide correctly typed variants of the editor and block types.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyBlockNoteEditor = typeof schema.BlockNoteEditor;\ntype MyBlock = typeof schema.Block;\ntype MyPartialBlock = typeof schema.PartialBlock;\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockNote Editor with All Table Features\nDESCRIPTION: Creates a BlockNote editor instance with all advanced table features enabled, including split cells, cell background color, cell text color, and headers.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/tables.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  tables: {\n    splitCells: true,\n    cellBackgroundColor: true,\n    cellTextColor: true,\n    headers: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload Function in BlockNote Editor\nDESCRIPTION: This snippet demonstrates the type definition for the uploadFile function required to enable image uploads in BlockNote. The function takes a File object and returns a Promise that resolves to the URL where the uploaded image can be accessed.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/image-toolbar.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype uploadFile = (file: File) => Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grid Mention Menu\nDESCRIPTION: Shows implementation of a custom Grid Suggestion Menu for mentions using the @ trigger character, where each item represents a user's first name character.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/grid-suggestion-menus.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nGridSuggestionMenuController triggerCharacter={\"@\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to Selected Text in BlockNoteEditor\nDESCRIPTION: Illustrates the use of the addStyles function to apply new styles to the currently selected text in the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddStyles(styles: Styles): void;\n\n// Usage\neditor.addStyles({ textColor: \"red\" });\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockNote Editor in TypeScript\nDESCRIPTION: Creates and initializes a new BlockNote editor instance with the provided options. It sets up the editor state, schema, and plugins, and returns an object with methods to interact with the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/editor/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createBlockNoteEditor(options: Partial<BlockNoteEditorOptions> = {}): BlockNoteEditor {\n  const {\n    initialContent,\n    editorDOMAttributes,\n    domAttributes,\n    collaboration,\n    uploadFile,\n    defaultStyles,\n    defaultBlockSpecs,\n    defaultInlineContentSpecs,\n    defaultPartialBlockSpecs,\n    slashMenuItems,\n    customStyles,\n    theme,\n    blockSchema,\n    inlineContentSchema,\n    partialBlockSchema,\n    onEditorReady,\n    onEditorContentChange,\n    onTextCursorPositionChange,\n    onSelectionChange,\n  } = options;\n\n  // ... (additional implementation details)\n\n  return {\n    // ... (returned methods and properties)\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Reset Type Item to BlockNote's Drag Handle Menu\nDESCRIPTION: This code demonstrates how to extend the BlockNote editor's Drag Handle Menu with a custom 'Reset Type' option. When clicked, this option converts the selected block to a paragraph type. The example shows how to implement a custom UI component, integrate it with the editor, and handle the block type update functionality.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/03-ui-components/05-side-menu-drag-handle-items/README.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createReactBlockSpec, ReactSlashMenuItem } from \"@blocknote/react\";\nimport {\n  BlockNoteSchema,\n  BlockSchema,\n  BlockSpecs,\n  defaultBlockSpecs,\n  defaultBlockTypeDropdownItems,\n} from \"@blocknote/core\";\nimport {\n  BlockNoteView,\n  getDefaultReactSlashMenuItems,\n  SideMenuPositioner,\n  useBlockNote,\n} from \"@blocknote/react\";\nimport { RiArrowGoBackLine } from \"react-icons/ri\";\n\nexport default function AddingDragHandleMenuItems() {\n  // Creates a new editor\n  const editor = useBlockNote({\n    // Adds a custom item to the Drag Handle Menu to reset the block type\n    blockSchema: BlockSchema.create({\n      // Use default blocks\n      blockSpecs: defaultBlockSpecs,\n      // Use default block type dropdown items with an additional \"Paragraph\"\n      // option that resets the block type\n      dragHandleMenuItems: [\n        // Keep all default Drag Handle Menu items\n        ...defaultBlockTypeDropdownItems,\n        // Add our custom \"Reset Type\" option\n        {\n          name: \"Reset Type\",\n          // Use the \"back\" icon from React Icons\n          icon: <RiArrowGoBackLine />,\n          // Show the item for all blocks\n          isHidden: () => false,\n          onItemClick: (params) => {\n            // Change the block type to \"paragraph\"\n            params.editor.updateBlock(params.block, {\n              type: \"paragraph\",\n            });\n          },\n        },\n      ],\n    }),\n  });\n\n  return <BlockNoteView editor={editor} theme={\"light\"} />\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Table Headers\nDESCRIPTION: Configures the BlockNote editor to enable header rows and columns in tables.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/tables.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  tables: {\n    headers: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Link in BlockNoteEditor\nDESCRIPTION: Shows how to create a new link in the editor using the createLink function. If text is selected, it will be replaced by the new link.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateLink(url: string, text?: string): void;\n\n// Usage\neditor.createLink(\"https://www.blocknotejs.org/\", \"BlockNote\");\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Block in BlockNote Editor\nDESCRIPTION: This code demonstrates how to register the custom 'callout' block with the BlockNote editor. It includes the block schema, React component, and slash menu items for inserting the block.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/react-custom-blocks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockNoteEditor, PartialBlock } from \"@blocknote/core\";\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\n\nconst editor = useBlockNote({\n  // ...\n  customBlocks: [\n    {\n      type: \"callout\",\n      schema: calloutBlockSchema,\n      component: CalloutBlock,\n      propSchema: calloutBlockSchema.propSchema,\n    },\n  ],\n  slashMenuItems: [\n    ...,\n    {\n      name: \"Callout\",\n      execute: (editor) => {\n        const block = editor.getTextCursorPosition().block;\n        editor.updateBlock(block, { type: \"callout\" });\n      },\n    } as ReactSlashMenuItem,\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing PDF Header and Footer\nDESCRIPTION: Example showing how to add custom header and footer to the PDF output\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-pdf.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from \"@react-pdf/renderer\";\nconst pdfDocument = await exporter.toReactPDFDocument(editor.document, {\n  header: <Text>Header</Text>,\n  footer: <Text>Footer</Text>,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing BlockNote Code Block Package\nDESCRIPTION: This command installs the @blocknote/code-block package, which is required for code block syntax highlighting in BlockNote.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/code-blocks.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @blocknote/code-block\n```\n\n----------------------------------------\n\nTITLE: Defining Table Content Structure in TypeScript for BlockNote\nDESCRIPTION: This snippet defines the TypeScript type for table content in BlockNote. It shows how table cells are represented as arrays of InlineContent objects, structured into rows and cells.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/document-structure.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableContent = {\n  type: \"tableContent\";\n  rows: {\n    cells: InlineContent[][];\n  }[];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Schema Mappings\nDESCRIPTION: Example of creating custom PDF mappings for schema elements\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-pdf.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PDFExporter, pdfDefaultSchemaMappings } from \"@blocknote/xl-pdf-exporter\";\nimport { Text } from \"@react-pdf/renderer\";\n\nnew PDFExporter(schema, {\n    blockMapping: {\n        ...pdfDefaultSchemaMappings.blockMapping,\n        myCustomBlock: (block, exporter) => {\n            return <Text>My custom block</Text>;\n        },\n    },\n    inlineContentMapping: pdfDefaultSchemaMappings.inlineContentMapping,\n    styleMapping: pdfDefaultSchemaMappings.styleMapping,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BlockNoteView for ShadCN Integration in React\nDESCRIPTION: This snippet demonstrates how to import and use BlockNoteView from @blocknote/shadcn for integrating BlockNote with ShadCN and Tailwind CSS.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/shadcn.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"basic/shadcn\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Split Cells in Tables\nDESCRIPTION: Configures the BlockNote editor to enable cell splitting and merging functionality in tables.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/tables.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  tables: {\n    splitCells: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Blocks to Full HTML in TypeScript\nDESCRIPTION: Function to export BlockNote blocks to complete HTML with all structure and styling preserved. Used for static rendering of editor content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/converting-blocks.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync blocksToFullHTML(blocks?: Block[]): Promise<string>;\n\n// Usage\nconst HTMLFromBlocks = await editor.blocksToFullHTML(blocks);\n```\n\n----------------------------------------\n\nTITLE: Basic DOCX Export Implementation in TypeScript\nDESCRIPTION: Demonstrates how to create a DOCXExporter instance and use it to convert BlockNote documents to a docx file. It includes importing necessary modules, creating the exporter, converting blocks to a docxjs document, and writing to a file buffer.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-docx.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DOCXExporter,\n  docxDefaultSchemaMappings,\n} from \"@blocknote/xl-docx-exporter\";\nimport { Packer } from \"docx\";\n\n// Create the exporter\nconst exporter = new DOCXExporter(editor.schema, docxDefaultSchemaMappings);\n\n// Convert the blocks to a docxjs document\nconst docxDocument = await exporter.toDocxJsDocument(editor.document);\n\n// Use docx to write to file:\nawait Packer.toBuffer(docxDocument);\n```\n\n----------------------------------------\n\nTITLE: Customizing ShadCN Components in BlockNote with React\nDESCRIPTION: This code shows how to customize BlockNote to use project-specific ShadCN components instead of the default ones. It demonstrates passing custom components through the shadCNComponents prop of BlockNoteView.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/shadcn.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Button from \"@/components/ui/button\"\nimport * as Select from \"@/components/ui/select\"\n\nreturn (\n  <BlockNoteView editor={editor} shadCNComponents={{\n    Select,\n    Button,\n    ...\n  }} />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Column and ColumnList Blocks in TypeScript for BlockNote\nDESCRIPTION: This snippet defines TypeScript types for Column and ColumnList blocks, which are used to organize content side-by-side in columns. It includes specific properties and restrictions for these block types.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/document-structure.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ColumnBlock = {\n  id: string;\n  type: \"column\";\n  props: { width: number };\n  content: undefined;\n  children: Block[];\n};\n\ntype ColumnListBlock = {\n  id: string;\n  type: \"columnList\";\n  props: {};\n  content: undefined;\n  children: ColumnBlock[];\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML to Blocks in TypeScript\nDESCRIPTION: Function to parse an HTML string into BlockNote Block objects. Converts block-level and inline HTML elements to corresponding BlockNote structures.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/converting-blocks.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync tryParseHTMLToBlocks(html: string): Promise<Blocks[]>;\n\n// Usage\nconst blocksFromHTML = await editor.tryParseHTMLToBlocks(html);\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown to Blocks in TypeScript\nDESCRIPTION: Function to parse a Markdown string into BlockNote Block objects. Not all Markdown symbols may be recognized and will be parsed as plain text.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/converting-blocks.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync tryParseMarkdownToBlocks(markdown: string): Promise<Blocks[]>;\n\n// Usage\nconst blocksFromMarkdown = await editor.tryParseMarkdownToBlocks(markdown);\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockNote Editor\nDESCRIPTION: Basic setup to create and mount a BlockNote editor instance to a DOM element.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/vanilla-js.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockNoteEditor } from \"@blocknote/core\";\n\nconst editor = BlockNoteEditor.create();\n\neditor.mount(document.getElementById(\"root\")); // element to append the editor to\n```\n\n----------------------------------------\n\nTITLE: Creating Custom React Block Spec Function Signature in TypeScript\nDESCRIPTION: Function signature for createReactBlockSpec which takes blockConfig and blockImplementation parameters to define custom block types in BlockNote.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-blocks.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createReactBlockSpec(\n  blockConfig: CustomBlockConfig,\n  blockImplementation: ReactCustomBlockImplementation,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Block Schema in TypeScript\nDESCRIPTION: This snippet defines the schema for the custom Alert block, including its type, props, and content structure. It specifies the alert type and allows for nested blocks within the alert.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/01-alert-block/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockSchema, defaultProps } from \"@blocknote/core\";\n\nconst AlertSchema = {\n  type: \"alert\" as const,\n  propSchema: {\n    ...defaultProps,\n    alertType: {\n      default: \"info\",\n    },\n  },\n  content: \"blocks\",\n} satisfies BlockSchema;\n```\n\n----------------------------------------\n\nTITLE: Converting Blocks to HTML in TypeScript\nDESCRIPTION: Function to convert BlockNote blocks to a simplified HTML string. This is a lossy conversion that unnests certain block structures.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/converting-blocks.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync blocksToHTMLLossy(blocks?: Block[]): Promise<string>;\n\n// Usage\nconst HTMLFromBlocks = await editor.blocksToHTMLLossy(blocks);\n```\n\n----------------------------------------\n\nTITLE: Disabling StrictMode in Next.js for BlockNote Compatibility\nDESCRIPTION: This configuration snippet shows how to disable React StrictMode in next.config.ts to ensure compatibility with BlockNote, as it's not yet compatible with React 19 / Next 15 StrictMode.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/nextjs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n...\nreactStrictMode: false,\n...\n```\n\n----------------------------------------\n\nTITLE: React Custom Block Implementation Interface for BlockNote\nDESCRIPTION: Type definition for ReactCustomBlockImplementation which specifies the required render function and optional HTML conversion and parsing functions for custom blocks in BlockNote.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-blocks.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReactCustomBlockImplementation = {\n  render: React.FC<{\n    block: Block;\n    editor: BlockNoteEditor;\n    contentRef?: (node: HTMLElement | null) => void;\n  }>;\n  toExternalHTML?: React.FC<{\n    block: Block;\n    editor: BlockNoteEditor;\n    contentRef?: (node: HTMLElement | null) => void;\n  }>;\n  parse?: (element: HTMLElement) => PartialBlock[\"props\"] | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: React Inline Content Implementation Type\nDESCRIPTION: Type definition for React component implementation of custom inline content, including render function and content reference handling.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-inline-content.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReactCustomInlineContentImplementation = {\n  render: React.FC<{\n    inlineContent: InlineContent;\n    contentRef?: (node: HTMLElement | null) => void;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring BlockNote Editor with Comments\nDESCRIPTION: Basic configuration to enable comments in a BlockNote editor, requiring a user resolver function, thread store, and real-time collaboration setup.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/comments.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst editor = useCreateBlockNote({\n  resolveUsers: async (userIds: string[]) => {\n    // return user information for the given userIds (see below)\n  },\n  comments: {\n    threadStore: yourThreadStore, // see below\n  },\n  // ...\n  collaboration: {\n    // ... // see real-time collaboration docs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Suggestion Menu Programmatically in TypeScript\nDESCRIPTION: Method for programmatically opening a suggestion menu with a specified trigger character.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/suggestion-menus.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nopenSuggestionMenu(triggerCharacter: string): void;\n\n// Usage\neditor.openSuggestionMenu(\"/\");\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Style Type with createReactStyleSpec in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the createReactStyleSpec function to create a custom font style. It defines the style configuration and implementation, including the render function for the custom style.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-styles.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Font = createReactStyleSpec(\n  {\n    type: \"font\",\n    propSchema: \"string\",\n  },\n  {\n    render: (props) => (\n      <span style={{ fontFamily: props.value }} ref={props.contentRef} />\n    ),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inline Content Type with BlockNote's JS API\nDESCRIPTION: This snippet demonstrates how to define a custom inline content type called 'mention' using BlockNote's JavaScript API. It includes the type definition with required properties and methods for rendering and editing mentions.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/vanilla-js/react-vanilla-custom-inline-content/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  // ...\n  inlineContentTypes: {\n    mention: {\n      type: \"mention\",\n      propSchema: {\n        user: {\n          default: { id: \"\", name: \"\" },\n        },\n      },\n      content: false,\n\n      render: (props) => {\n        const element = document.createElement(\"span\");\n        element.className = \"mention\";\n        element.textContent = `@${props.inlineContent.props.user.name}`;\n        element.contentEditable = \"false\";\n\n        return element;\n      },\n\n      insertMenuItems: (editor) => [\n        {\n          name: \"User Mention\",\n          execute: () => {\n            editor.insertInlineContent(\"mention\", {\n              user: { id: \"1\", name: \"John Doe\" },\n            });\n          },\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing YjsThreadStore for Direct Yjs Storage\nDESCRIPTION: Implementation of YjsThreadStore that stores comment threads directly in the Yjs document, suitable for simple collaborative setups where all users have write access.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/comments.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { YjsThreadStore } from \"@blocknote/core/comments\";\n\nconst threadStore = new YjsThreadStore(\n  userId, // The active user's ID\n  yDoc.getMap(\"threads\"), // Y.Map to store threads\n  new DefaultThreadStoreAuth(userId, \"editor\"), // Authorization information, see below\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Suggestion Menu Item Type in TypeScript\nDESCRIPTION: Type definition for suggestion menu items, including properties for title, click handler, subtext, badge, aliases and grouping.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/suggestion-menus.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultSuggestionItem = {\n  title: string;\n  onItemClick: () => void;\n  subtext?: string;\n  badge?: string;\n  aliases?: string[];\n  group?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Block React Component\nDESCRIPTION: This snippet shows how to create a React component for the custom 'callout' block. It uses the BlockNoteEditor and PartialBlock props to render the block content and handle interactions.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/react-custom-blocks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlockNoteEditor, PartialBlock } from \"@blocknote/core\";\nimport { ReactSlashMenuItem } from \"@blocknote/react\";\n\nconst CalloutBlock = ({\n  block,\n  editor,\n}: {\n  block: PartialBlock<CalloutBlockSchema>;\n  editor: BlockNoteEditor;\n}) => {\n  return (\n    <div\n      style={{\n        background: block.props.type === \"warning\" ? \"#FFF3CD\" : \"#CCE5FF\",\n        borderRadius: \"4px\",\n        padding: \"8px\",\n      }}\n    >\n      {block.content.type === \"warning\" ? \"⚠️\" : \"ℹ️\"} {block.content}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Custom Inline Content in BlockNote\nDESCRIPTION: This snippet demonstrates how to create editable custom inline content using the vanilla JS API. It shows the implementation of a 'mention' type that can be edited, including handling content updates and triggering UI interactions.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/vanilla-js/react-vanilla-custom-inline-content/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  // ...\n  inlineContentTypes: {\n    mention: {\n      type: \"mention\",\n      propSchema: {\n        user: {\n          default: { id: \"\", name: \"\" },\n        },\n      },\n      content: true,\n\n      render: (props) => {\n        const element = document.createElement(\"span\");\n        element.className = \"mention\";\n        element.textContent = `@${props.inlineContent.props.user.name}: ${props.content}`;\n        element.contentEditable = \"false\";\n\n        element.addEventListener(\"click\", () => {\n          // Show UI for editing the mention\n          const newContent = prompt(\"Enter new content\", props.content);\n          if (newContent !== null) {\n            props.updateContent(newContent);\n          }\n        });\n\n        return element;\n      },\n\n      insertMenuItems: (editor) => [\n        {\n          name: \"User Mention\",\n          execute: () => {\n            editor.insertInlineContent(\"mention\", {\n              user: { id: \"1\", name: \"John Doe\" },\n            }, \"Initial content\");\n          },\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Export Implementation\nDESCRIPTION: Core implementation for converting BlockNote documents to PDF using PDFExporter\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-pdf.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  PDFExporter,\n  pdfDefaultSchemaMappings,\n} from \"@blocknote/xl-pdf-exporter\";\nimport * as ReactPDF from \"@react-pdf/renderer\";\n\n// Create the exporter\nconst exporter = new PDFExporter(editor.schema, pdfDefaultSchemaMappings);\n\n// Convert the blocks to a react-pdf document\nconst pdfDocument = await exporter.toReactPDFDocument(editor.document);\n\n// Use react-pdf to write to file:\nawait ReactPDF.render(pdfDocument, `filename.pdf`);\n```\n\n----------------------------------------\n\nTITLE: Configuring DOCXExporter Options in BlockNote\nDESCRIPTION: Illustrates the default options for the DOCXExporter constructor, including a function to resolve external resources and color settings for the DOCX output.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-docx.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions = {\n  // a function to resolve external resources in order to avoid CORS issues\n  // by default, this calls a BlockNote hosted server-side proxy to resolve files\n  resolveFileUrl: corsProxyResolveFileUrl,\n  // the colors to use in the Docx for things like highlighting, background colors and font colors.\n  colors: COLORS_DEFAULT, // defaults from @blocknote/core\n};\n```\n\n----------------------------------------\n\nTITLE: Using the StyleSheet with BlockNoteView Component in React\nDESCRIPTION: Demonstrates how to apply a custom styleSheet to a BlockNoteView component. The example shows the complete integration of custom block specifications and styles in a React component.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/react-custom-styles/README.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst editor = useCreateBlockNote({ blockSpecs });\n\nreturn <BlockNoteView editor={editor} styleSheet={styleSheet} />;\n```\n\n----------------------------------------\n\nTITLE: Custom Side Menu Implementation\nDESCRIPTION: Complete example of implementing a custom side menu UI element, including positioning, styling, and event handling for block manipulation.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/vanilla-js.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockNoteEditor } from \"@blocknote/core\";\n\nconst editor = BlockNoteEditor.create({\n  element: document.getElementById(\"root\")!\n});\n\nexport function createButton(text: string, onClick?: () => void) {\n  const element = document.createElement(\"a\");\n  element.href = \"#\";\n  element.text = text;\n  element.style.margin = \"10px\";\n\n  if (onClick) {\n    element.addEventListener(\"click\", (e) => {\n      onClick();\n      e.preventDefault();\n    });\n  }\n\n  return element;\n}\n\nlet element: HTMLElement;\n\neditor.sideMenu.onUpdate((sideMenuState) => {\n  if (!element) {\n    element = document.createElement(\"div\");\n    element.style.background = \"gray\";\n    element.style.position = \"absolute\";\n    element.style.padding = \"10px\";\n    element.style.opacity = \"0.8\";\n    const addBtn = createButton(\"+\", () => {\n      editor.sideMenu.addBlock();\n    });\n    element.appendChild(addBtn);\n\n    const dragBtn = createButton(\"::\", () => {});\n\n    dragBtn.addEventListener(\"dragstart\", editor.sideMenu.blockDragStart);\n    dragBtn.addEventListener(\"dragend\", editor.sideMenu.blockDragEnd);\n    dragBtn.draggable = true;\n    element.style.display = \"none\";\n    element.appendChild(dragBtn);\n\n    document.getElementById(\"root\")!.appendChild(element);\n  }\n\n  if (sideMenuState.show) {\n    element.style.display = \"block\";\n\n    element.style.top = sideMenuState.referencePos.top + \"px\";\n    element.style.left =\n      sideMenuState.referencePos.x - element.offsetWidth + \"px\";\n  } else {\n    element.style.display = \"none\";\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the ODT Exporter Package with npm\nDESCRIPTION: Command to install the @blocknote/xl-odt-exporter package which provides functionality to export BlockNote documents to ODT format.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-odt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @blocknote/xl-odt-exporter\n```\n\n----------------------------------------\n\nTITLE: Creating a BlockNote Editor with Custom Styles in React/TypeScript\nDESCRIPTION: Demonstrates how to create a BlockNote editor with custom styles using the React API. The example shows how to define a blockSpecs object with custom styles for a heading block type.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/react-custom-styles/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockNoteView, useCreateBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/react/styles.css\";\n\nconst blockSpecs = {\n  heading: {\n    propSchema: {\n      textAlignment: {\n        default: \"left\",\n      },\n      textColor: {\n        default: \"default\",\n      },\n    },\n  },\n};\n\nconst editor = useCreateBlockNote({ blockSpecs });\n\nreturn <BlockNoteView editor={editor} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing RESTYjsThreadStore for Secure Comment Management\nDESCRIPTION: Implementation of RESTYjsThreadStore that combines Yjs storage with a REST API backend, providing secure comment management while maintaining real-time collaboration.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/comments.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  RESTYjsThreadStore,\n  DefaultThreadStoreAuth,\n} from \"@blocknote/core/comments\";\n\nconst threadStore = new RESTYjsThreadStore(\n  \"https://api.example.com/comments\", // Base URL for the REST API\n  {\n    Authorization: \"Bearer your-token\", // Optional headers to add to requests\n  },\n  yDoc.getMap(\"threads\"), // Y.Map to retrieve commend data from\n  new DefaultThreadStoreAuth(userId, \"editor\"), // Authorization rules (see below)\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Inline Content in BlockNoteEditor\nDESCRIPTION: Demonstrates how to use the insertInlineContent function to add new inline content to the editor. The function accepts PartialInlineContent as an argument.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninsertInlineContent(content: PartialInlineContent)\n\n// Usage\neditor.insertInlineContent([\n  \"Hello \",\n  { type: \"text\", text: \"World\", styles: { bold: true } }\n]);\n```\n\n----------------------------------------\n\nTITLE: BlockNote Block Manipulation Documentation Reference\nDESCRIPTION: Markdown documentation showing linked reference to block manipulation documentation and overview of available block manipulation methods.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/01-basic/06-block-manipulation/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Manipulating Blocks\n\nThis example shows 4 buttons to manipulate the first block using the `insertBlocks`, `updateBlock`, `removeBlocks` and `replaceBlocks` methods.\n\n**Relevant Docs:**\n\n- [Block Manipulation](/docs/manipulating-blocks)\n```\n\n----------------------------------------\n\nTITLE: Defining ReactCustomStyleImplementation Type in TypeScript\nDESCRIPTION: This snippet defines the type for ReactCustomStyleImplementation, which is used to specify how the custom style should be rendered to HTML. It includes the render function with its props.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-styles.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReactCustomStyleImplementation = {\n  render: React.FC<{\n    value?: string;\n    contentRef: (node: HTMLElement | null) => void;\n  }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inline Content Type Function Signature\nDESCRIPTION: Function signature for creating custom inline content specifications using createReactInlineContentSpec.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-inline-content.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createReactInlineContentSpec(\n  blockConfig: CustomInlineContentConfig,\n  blockImplementation: ReactInlineContentImplementation,\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Styles in BlockNoteEditor\nDESCRIPTION: Shows how to retrieve the active styles at the current text cursor position or at the end of a selection using the getActiveStyles function.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetActiveStyles(): Styles;\n\n// Usage\nconst styles = editor.getActiveStyles();\n```\n\n----------------------------------------\n\nTITLE: Configuring BlockNote Editor Placeholders in React\nDESCRIPTION: This code snippet shows how to customize placeholder text for different states of a BlockNote editor, including empty documents, default state, and heading blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/01-basic/11-custom-placeholder/README.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function App() {\n  const editor = useBlockNote({\n    initialContent: [],\n    defaultProps: {\n      // Change the default placeholder\n      placeholder: \"Custom default placeholder\",\n    },\n    placeholderContent: \"Start typing..\",\n    // Add custom placeholder for specific blocks\n    blockSchema: {\n      heading: {\n        propSchema: {\n          placeholder: {\n            default: \"Custom heading placeholder\",\n          },\n        },\n      },\n    },\n  });\n\n  return <BlockNoteView editor={editor} theme={\"light\"} />\n}\n```\n\n----------------------------------------\n\nTITLE: Property Schema Type Definition for BlockNote Custom Blocks\nDESCRIPTION: Type definition for PropSchema which defines the structure for property configurations in custom blocks, allowing for default values and optional value constraints for boolean, number, or string types.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-blocks.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PropSchema<\n  PrimitiveType extends \"boolean\" | \"number\" | \"string\"\n> = Record<\n  string,\n  {\n    default: PrimitiveType;\n    values?: PrimitiveType[];\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Dynamic BlockNote Editor in a Next.js Page\nDESCRIPTION: This code shows how to import and use the dynamically loaded BlockNote editor in a Next.js page or app component. The editor is rendered within a div element.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/nextjs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript jsx\nCODE:\n```\nimport { Editor } from \"../components/DynamicEditor\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Editor />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Text in BlockNoteEditor\nDESCRIPTION: Explains how to get the currently selected text from the editor using the getSelectedText function.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelectedText(): string;\n\n// Usage\nconst text = editor.getSelectedText();\n```\n\n----------------------------------------\n\nTITLE: Configuring BlockNote Editor without UI Elements in React\nDESCRIPTION: This code snippet shows how to initialize a BlockNote editor with all menus and toolbars removed. It creates a basic editor with default settings but hides the formatting toolbar, side menu, and slash menu by setting their respective configuration options to false.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/03-ui-components/01-ui-elements-remove/README.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function App() {\n  // Creates a new editor instance.\n  const editor = useBlockNote({\n    // Configures the editor to not show any menus or toolbars.\n    sideMenu: false,\n    slashMenu: false,\n    formattingToolbar: false,\n  });\n\n  // Renders the editor instance.\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Light and Dark Themes Type in TypeScript\nDESCRIPTION: TypeScript type definition for specifying separate light and dark themes in BlockNote. This allows for overwriting CSS variables for light and dark themes separately.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/styling-theming/themes.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype LightAndDarkThemes = {\n  light: Theme;\n  dark: Theme;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling onCreate Event in BlockNote\nDESCRIPTION: The onCreate callback is triggered when the editor is initialized. This example demonstrates how to listen for this event.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/events.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neditor.onCreate(() => {\n  console.log(\"Editor created\");\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Link URL in BlockNoteEditor\nDESCRIPTION: Demonstrates how to retrieve the URL of a link in the current selection using the getSelectedLink function. Returns undefined if no link is selected.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetSelectedLink(): string | undefined;\n\n// Usage\nconst linkUrl = editor.getSelectedLink();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Slash Menu Item in BlockNote with TypeScript and JSX\nDESCRIPTION: This code snippet demonstrates how to add a custom item to the Slash Menu in BlockNote. It creates a new menu item that, when selected, inserts a new block below the current position with bold 'Hello World' text. The example uses the BlockNoteView component and customizes its slashMenuItems prop.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/03-ui-components/06-suggestion-menus-slash-menu-items/README.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlockNoteView, useCreateBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function SimpleEditor() {\n  const editor = useCreateBlockNote();\n\n  return (\n    <BlockNoteView\n      editor={editor}\n      slashMenuItems={[\n        {\n          name: \"Add Hello World\",\n          execute: (editor) => {\n            const cursorPosition = editor.getTextCursorPosition();\n            editor.insertBlocks(\n              [\n                {\n                  content: [\n                    {\n                      type: \"text\",\n                      text: \"Hello World\",\n                      styles: { bold: true },\n                    },\n                  ],\n                },\n              ],\n              cursorPosition.block,\n              \"after\"\n            );\n          },\n        },\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Block Properties in TypeScript\nDESCRIPTION: Type definition for common block properties including background color, text color, and text alignment.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultProps = {\n  backgroundColor: string = \"default\";\n  textColor: string = \"default\";\n  textAlignment: \"left\" | \"center\" | \"right\" | \"justify\" = \"left\";\n};\n```\n\n----------------------------------------\n\nTITLE: Converting BlockNote Document to HTML on Server\nDESCRIPTION: This snippet demonstrates how to create a ServerBlockNoteEditor instance and convert blocks to HTML on the server. It imports the necessary component from @blocknote/server-util.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/server-processing.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ServerBlockNoteEditor } from \"@blocknote/server-util\";\n\nconst editor = ServerBlockNoteEditor.create();\nconst html = await editor.blocksToFullHTML(blocks);\n```\n\n----------------------------------------\n\nTITLE: TextCursorPosition Type Definition in TypeScript\nDESCRIPTION: Defines the structure for cursor position information, including current block and adjacent blocks at the same nesting level.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/cursor-selections.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextCursorPosition = {\n  block: Block;\n  prevBlock: Block | undefined;\n  nextBlock: Block | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding BlockNote Editor Theme CSS Variables in JavaScript\nDESCRIPTION: This code snippet demonstrates how to override the default theme CSS variables in BlockNote editor to create a custom red theme. It sets variables for both light and dark modes, affecting various aspects of the editor's appearance.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/04-theming/04-theming-css-variables/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlockNoteView, useCreateBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function App() {\n  const editor = useCreateBlockNote();\n\n  return (\n    <BlockNoteView\n      editor={editor}\n      theme={{\n        colors: {\n          editor: {\n            text: \"#2E0000\",\n            background: \"#FFF0F0\",\n          },\n          menu: {\n            text: \"#2E0000\",\n            background: \"#FFF0F0\",\n          },\n          tooltip: {\n            text: \"#2E0000\",\n            background: \"#FFF0F0\",\n          },\n          hovered: {\n            text: \"#2E0000\",\n            background: \"#FFCB9A\",\n          },\n          selected: {\n            text: \"#2E0000\",\n            background: \"#FFB38A\",\n          },\n          disabled: {\n            text: \"#4A0000\",\n          },\n          shadow: \"#780000\",\n          border: \"#FF0000\",\n          sideMenu: \"#FF0000\",\n          highlightColors: [\n            { light: \"#FFCCCB\", dark: \"#8B0000\" },\n            { light: \"#FFE4B5\", dark: \"#B8860B\" },\n            { light: \"#98FB98\", dark: \"#006400\" },\n            { light: \"#ADD8E6\", dark: \"#000080\" },\n          ],\n        },\n        borderRadius: 4,\n        fontFamily: \"Helvetica, sans-serif\",\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Paragraph Block Type in TypeScript\nDESCRIPTION: Type definition for the basic paragraph block with default properties and inline content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ParagraphBlock = {\n  id: string;\n  type: \"paragraph\";\n  props: DefaultProps;\n  content: InlineContent[];\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Block Type Select Items in BlockNote Formatting Toolbar (React/JSX)\nDESCRIPTION: This example shows how to modify the Block Type Select dropdown in the BlockNote Formatting Toolbar, specifically adding support for image blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/formatting-toolbar.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"ui-components/formatting-toolbar-block-type-items\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Text Cursor Position in BlockNote\nDESCRIPTION: Method to retrieve the current text cursor position in the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/cursor-selections.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetTextCursorPosition(): TextCursorPosition;\n\n// Usage\nconst textCursorPosition = editor.getTextCursorPosition();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Red Theme for BlockNoteView in React\nDESCRIPTION: This code snippet shows how to create a custom red theme for the BlockNoteView component in both light and dark modes. It demonstrates setting CSS variables for various UI elements to achieve a consistent red color scheme.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/04-theming/05-theming-css-variables-code/README.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockNoteView } from \"@blocknote/react\";\n\nexport default function App() {\n  return (\n    <BlockNoteView\n      theme={{\n        colors: {\n          editor: {\n            text: \"#000000\",\n            background: \"#ffeeee\",\n          },\n          menu: {\n            text: \"#ffffff\",\n            background: \"#ff0000\",\n          },\n          tooltip: {\n            text: \"#ffffff\",\n            background: \"#ff0000\",\n          },\n          hovered: {\n            text: \"#ffffff\",\n            background: \"#ff8888\",\n          },\n          selected: {\n            text: \"#ffffff\",\n            background: \"#ff0000\",\n          },\n          disabled: {\n            text: \"#ff8888\",\n            background: \"#ffdddd\",\n          },\n          shadow: \"#ffcccc\",\n          border: \"#ff0000\",\n        },\n        borderRadius: 4,\n        fontFamily: \"Helvetica Neue, sans-serif\",\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Block Type in TypeScript\nDESCRIPTION: Type definition for table blocks with default properties and table-specific content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableBlock = {\n  id: string;\n  type: \"table\";\n  props: DefaultProps;\n  content: TableContent;\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Emoji Picker Columns in BlockNote\nDESCRIPTION: Shows how to modify the default Emoji Picker to display with 5 columns instead of the default 10 columns. This is achieved by disabling the default picker and adding a custom GridSuggestionMenuController.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/grid-suggestion-menus.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nemojiPicker={false} \nGridSuggestionMenuController triggerCharacter={\":\"} columns={5}\n```\n\n----------------------------------------\n\nTITLE: Selection Type Definition in BlockNote\nDESCRIPTION: Defines the structure for selection information, containing an array of selected blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/cursor-selections.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Selection = {\n  blocks: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Code Block Configuration in React\nDESCRIPTION: Example React component showing how to use the codeBlock option in useCreateBlockNote hook to configure a custom syntax highlighter. It sets TypeScript as the default language and configures the highlighter with light-plus and dark-plus themes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/04-theming/07-custom-code-block/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHighlighter } from \"./shiki.bundle.js\";\n\nexport default function App() {\n  // Creates a new editor instance.\n  const editor = useCreateBlockNote({\n    codeBlock: {\n      indentLineWithTab: true,\n      defaultLanguage: \"typescript\",\n      supportedLanguages: {\n        typescript: {\n          name: \"TypeScript\",\n          aliases: [\"ts\"],\n        },\n      },\n      createHighlighter: () =>\n        createHighlighter({\n          themes: [\"light-plus\", \"dark-plus\"],\n          langs: [],\n        }),\n    },\n  });\n\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bullet List Item Block Type in TypeScript\nDESCRIPTION: Type definition for bullet list item blocks including default properties and content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BulletListItemBlock = {\n  id: string;\n  type: \"bulletListItem\";\n  props: DefaultProps;\n  content: InlineContent[];\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Import for BlockNote in Next.js\nDESCRIPTION: This snippet creates a dynamic import for the BlockNote editor to ensure it's only loaded on the client side. It uses next/dynamic with the ssr: false option to prevent server-side rendering.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/nextjs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript jsx\nCODE:\n```\n\"use client\";\n\nimport dynamic from \"next/dynamic\";\n\nexport const Editor = dynamic(() => import(\"./Editor\"), { ssr: false });\n```\n\n----------------------------------------\n\nTITLE: Setting Selection in BlockNote\nDESCRIPTION: Method to set a selection spanning from one block to another in the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/cursor-selections.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetSelection(startBlock: BlockIdentifier, endBlock: BlockIdentifier): void;\n\n// Usage\neditor.setSelection(startBlockIdentifier, endBlockIdentifier);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles to Text in BlockNote\nDESCRIPTION: This example shows how to add custom styles to text within blocks. It applies different styles to bold and italic text using the `addStyle` method.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/vanilla-js/react-vanilla-custom-styles/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.addStyle({\n  // Make bold text green\n  text: { bold: true, css: { color: \"green\" } },\n  // Add an underline to italic text\n  text: { italic: true, css: { textDecoration: \"underline\" } },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Link Type in TypeScript\nDESCRIPTION: Type definition for link content with href and styled text content.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Link = {\n  type: \"link\";\n  content: StyledText[];\n  href: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Working with TypeScript Types in Custom Schemas\nDESCRIPTION: This example shows how to properly type custom BlockNote elements when using TypeScript. It demonstrates how to create type-safe references to blocks that conform to your custom schema definition.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyBlock = Block<\n  typeof schema.blockSchema,\n  typeof schema.inlineContentSchema,\n  typeof schema.styleSchema\n>;\n```\n\n----------------------------------------\n\nTITLE: Handling onSelectionChange Event in BlockNote\nDESCRIPTION: The onSelectionChange callback is triggered when the editor selection changes. This example shows how to listen for selection changes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/events.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\neditor.onSelectionChange(() => {\n  console.log(\"Editor selection changed\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles to the Editor in BlockNote\nDESCRIPTION: This snippet demonstrates how to add custom styles to the entire BlockNote editor. It uses the `addStyle` method to apply CSS styles to the editor container.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/vanilla-js/react-vanilla-custom-styles/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.addStyle({\n  // Add a border to the editor\n  editor: { border: \"1px solid black\" },\n});\n```\n\n----------------------------------------\n\nTITLE: UI Element Update Handler Type Definition\nDESCRIPTION: Type definition for UI element updates and basic structure for handling UI element state changes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/vanilla-js.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype UIElement =\n  | \"formattingToolbar\"\n  | \"linkToolbar\"\n  | \"filePanel\"\n  | \"sideMenu\"\n  | \"suggestionMenu\"\n  | \"tableHandles\"\n\nconst uiElement: UIElement = ...;\n\neditor[uiElement].onUpdate((uiElementState: ...) => {\n  ...;\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Styles from Selected Text in BlockNoteEditor\nDESCRIPTION: Demonstrates how to remove specific styles from the currently selected text using the removeStyles function.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/manipulating-inline-content.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveStyles(styles: Styles): void;\n\n// Usage\neditor.removeStyles({ bold: true });\n```\n\n----------------------------------------\n\nTITLE: Customizing BlockNote Schema in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom schema for BlockNote by modifying the default schema. It removes the Audio and Image blocks from the available options.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/01-basic/05-removing-default-blocks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BlockNoteSchema, defaultBlockSchema } from \"@blocknote/core\";\n\nconst customSchema: BlockNoteSchema = {\n  // Spread the default schema\n  ...defaultBlockSchema,\n  // Override the blocks property\n  blocks: Object.fromEntries(\n    // Filter out the \"audio\" and \"image\" blocks\n    Object.entries(defaultBlockSchema.blocks).filter(\n      ([blockName]) => !([\"audio\", \"image\"] as const).includes(blockName as any)\n    )\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom Theme in BlockNote\nDESCRIPTION: This example shows how to create a custom theme for BlockNote and apply it to the editor. It defines a theme object with various style properties and uses the `theme` option when creating the editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/vanilla-js/react-vanilla-custom-styles/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst customTheme = {\n  colors: {\n    editor: {\n      text: \"#222222\",\n      background: \"#fafafa\",\n    },\n    menu: {\n      text: \"#ffffff\",\n      background: \"#222222\",\n    },\n    tooltip: {\n      text: \"#ffffff\",\n      background: \"#222222\",\n    },\n    hovered: {\n      text: \"#222222\",\n      background: \"#eeeeee\",\n    },\n    selected: {\n      text: \"#ffffff\",\n      background: \"#1a73e8\",\n    },\n    disabled: {\n      text: \"#cdcdcd\",\n      background: \"#ffffff\",\n    },\n    shadow: \"#8f8f8f\",\n    border: \"#CFCFCF\",\n    sideMenu: \"#515151\",\n    highlightColors: [\"#ff0000\", \"#00ff00\", \"#0000ff\"],\n  },\n  borderRadius: 4,\n  fontFamily: \"Helvetica Neue, sans-serif\",\n};\n\nconst editor = new BlockNoteEditor({\n  theme: customTheme,\n});\n```\n\n----------------------------------------\n\nTITLE: Column Node Definition in TypeScript\nDESCRIPTION: Definition of the Column node, which is used within the ColumnList node. Contains one or more BlockContainer nodes and is part of both bnBlock and childContainer groups.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"column\",\ngroup: \"bnBlock childContainer\",\n// A block always contains content, and optionally a blockGroup which contains nested blocks\ncontent: \"blockContainer+\",\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Block Styles with StyleSheet in BlockNote\nDESCRIPTION: Shows how to create a styleSheet object to define custom styles for blocks in BlockNote. This example demonstrates setting background colors, text colors, and font sizes for different heading levels.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/06-custom-schema/react-custom-styles/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst styleSheet = {\n  // Styles for a heading block when its `textColor` prop is \"red\"\n  heading: {\n    textColor: {\n      red: {\n        backgroundColor: \"#fdd8d8\",\n        color: \"#f00\",\n      },\n    },\n    // Styles that apply to the heading, regardless of props\n    // (in this case, depending on the level of the heading).\n    dom: ({ level }) => ({\n      fontSize: {\n        1: \"1.5em\",\n        2: \"1.3em\",\n        3: \"1.1em\",\n      }[level],\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Style to BlockNoteSchema in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a BlockNoteSchema using the custom style definition. It shows how to include both default style specs and the custom font style in the schema.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-styles.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = BlockNoteSchema.create({\n  styleSpecs: {\n    // enable the default styles if desired\n    ...defaultStyleSpecs,\n\n    // Add your own custom style:\n    font: Font,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockNote Editor in React\nDESCRIPTION: This code snippet shows how to set up a BlockNote editor in a React application. It includes theme customization, initial content setup, and handling editor changes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/playground/README.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function Editor() {\n  // Creates a new editor instance.\n  const editor = useBlockNote({\n    initialContent: [\n      {\n        type: \"paragraph\",\n        content: \"Welcome to this BlockNote editor example!\"\n      }\n    ],\n    onEditorContentChange: (editor) => {\n      // logs the current editor content as HTML whenever it changes\n      console.log(editor.topLevelBlocks)\n    }\n  });\n\n  // Renders the editor instance using a React component.\n  return (\n    <BlockNoteView\n      editor={editor}\n      theme={\"light\"}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for DOCX Export in BlockNote\nDESCRIPTION: Command to install the @blocknote/xl-docx-exporter and docx packages using npm.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-docx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @blocknote/xl-docx-exporter docx\n```\n\n----------------------------------------\n\nTITLE: BlockNote File Upload Documentation\nDESCRIPTION: Markdown documentation explaining how to implement file upload functionality in BlockNote editor with support for multiple file types using tmpfiles.org as storage.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/02-backend/01-file-uploading/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Upload Files\n\nThis example allows users to upload files and use them in the editor. The files are uploaded to [/TMP/Files](https://tmpfiles.org/), and can be used for File, Image, Video, and Audio blocks.\n\n**Try it out:** Click the \"Add Image\" button and see there's now an \"Upload\" tab in the toolbar!\n\n**Relevant Docs:**\n\n- [Editor Setup](/docs/editor-basics/setup)\n- [File Block](/docs/editor-basics/default-schema#file)\n```\n\n----------------------------------------\n\nTITLE: Defining Quote Block Type in TypeScript\nDESCRIPTION: Type definition for quote blocks with default properties and inline content support.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype QuoteBlock = {\n  id: string;\n  type: \"quote\";\n  props: DefaultProps;\n  content: InlineContent[];\n  children: Block[];\n};\n```\n\n----------------------------------------\n\nTITLE: BlockNote Project Directory Structure\nDESCRIPTION: Displays the directory structure of the BlockNote project, showing the organization of core packages, UI implementations, examples, and tests.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nblocknote\n├── packages/core       - The core of the editor\n├── packages/react      - The main library for use in React apps\n├── packages/mantine    - Mantine (default) implementation of BlockNote UI\n├── packages/ariakit    - AriaKit implementation of BlockNote UI\n├── packages/shadcn     - ShadCN / Tailwind / Radix implementation of BlockNote UI\n├── examples            - Example apps\n├── playground          - App to browse the example apps (https://playground.blocknotejs.org)\n└── tests               - Playwright end to end tests\n```\n\n----------------------------------------\n\nTITLE: Installing PDF Export Dependencies\nDESCRIPTION: Command to install required packages for PDF export functionality\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-pdf.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @blocknote/xl-pdf-exporter @react-pdf/renderer\n```\n\n----------------------------------------\n\nTITLE: Customizing DOCX Output in BlockNote Export\nDESCRIPTION: Shows how to customize the DOCX output file by setting document metadata and adding headers and footers. It uses the options parameter of toDocxJsDocument method to specify creator, headers, and footers.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-docx.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Paragraph, TextRun } from \"docx\";\n\nconst doc = await exporter.toDocxJsDocument(testDocument, {\n  documentOptions: {\n    creator: \"John Doe\",\n  },\n  sectionOptions: {\n    headers: {\n      default: {\n        options: {\n          children: [new Paragraph({ children: [new TextRun(\"Header\")] })],\n        },\n      },\n    },\n    footers: {\n      default: {\n        options: {\n          children: [new Paragraph({ children: [new TextRun(\"Footer\")] })],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: BlockGroup Node Definition in TypeScript\nDESCRIPTION: Definition of the BlockGroup node, which is a container node that can contain multiple Blocks. It serves as the root node of the Prosemirror document and as a wrapper for nested blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"blockGroup\",\ngroup: \"childContainer\",\ncontent: \"blockGroupChild+\"\n```\n\n----------------------------------------\n\nTITLE: BlockNote Project Directory Structure\nDESCRIPTION: The directory structure of the BlockNote project showing the organization of different packages including core functionality, UI implementations, examples, and tests.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/react/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nblocknote\n├── packages/core       - The core of the editor\n├── packages/react      - The main library for use in React apps\n├── packages/mantine    - Mantine (default) implementation of BlockNote UI\n├── packages/ariakit    - AriaKit implementation of BlockNote UI\n├── packages/shadcn     - ShadCN / Tailwind / Radix implementation of BlockNote UI\n├── examples            - Example apps\n├── playground          - App to browse the example apps (https://playground.blocknotejs.org)\n└── tests               - Playwright end to end tests\n```\n\n----------------------------------------\n\nTITLE: Creating Example Structure for BlockNote\nDESCRIPTION: Instructions for adding new examples to the BlockNote project, detailing the required file structure that includes App.tsx, .bnexample.json, and README.md files. Template generation is automated through npm run gen command.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nJust create a folder, add an `App.tsx` file, `.bnexample.json` and `README.md` file. Then run `npm run gen` to generate the rest of the template.\n```\n\n----------------------------------------\n\nTITLE: Customizing ODT Output with Header and Footer Options\nDESCRIPTION: Example showing how to customize the ODT output by adding headers and footers. The function accepts both XML strings and XMLDocument objects as parameters.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-odt.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst odt = await exporter.toODTDocument(testDocument, {\n  // XML string\n  footer: \"<text:p>FOOTER</text:p>\",\n  // XMLDocument\n  header: new DOMParser().parseFromString(\n    `<text:p xmlns:text=\"urn:oasis:names:tc:opendocument:xmlns:text:1.0\">HEADER</text:p>`,\n    \"text/xml\",\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: BlockContainer Node Definition in TypeScript\nDESCRIPTION: Definition of the BlockContainer node, which is a container that always contains a blockContent node and optionally a blockGroup node for nested children. Used as a wrapper for most blocks.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"blockContainer\",\ngroup: \"blockGroupChild bnBlock\",\n// A block always contains content, and optionally a blockGroup which contains nested blocks\ncontent: \"blockContent blockGroup?\",\n```\n\n----------------------------------------\n\nTITLE: BlockNote API Block Structure in TypeScript\nDESCRIPTION: The Block structure as exposed in the BlockNote API, showing the key properties including id, type, children, content, and props.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    id: string;\n    type: string;\n    children: Block[];\n    content: InlineContent[] | undefined;\n    props: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Style Config Type in TypeScript\nDESCRIPTION: This snippet shows the type definition for the CustomStyleConfig, which is used to describe the shape of a custom style. It specifies the type and propSchema fields.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-styles.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomStyleConfig = {\n  type: string;\n  readonly propSchema: \"boolean\" | \"string\";\n};\n```\n\n----------------------------------------\n\nTITLE: ColumnList Node Definition in TypeScript\nDESCRIPTION: Definition of the ColumnList node, which is part of the multi-column feature. It contains two or more columns and is part of multiple node groups.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"columnList\",\ngroup: \"childContainer bnBlock blockGroupChild\",\n// A block always contains content, and optionally a blockGroup which contains nested blocks\ncontent: \"column column+\", // min two columns\n```\n\n----------------------------------------\n\nTITLE: Example Document Structure in XML\nDESCRIPTION: An XML representation showing the hierarchical structure of a document with nested blocks, parent-child relationships, and multi-column layouts with their respective node IDs.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<blockGroup>\n    <blockContaine id=\"0\">\n        <blockContent>Parent element 1</blockContent>\n        <blockGroup>\n            <blockContainer id=\"1\">\n                <blockContent>Nested / child / indented item</blockContent>\n            </blockContainer>\n        </blockGroup>\n    </blockContainer>\n    <blockContainer id=\"2\">\n        <blockContent>Parent element 2</blockContent>\n        <blockGroup>\n            <blockContainer id=\"3\">...</blockContainer>\n            <blockContainer id=\"4\">...</blockContainer>\n        </blockGroup>\n    </blockContainer>\n    <blockContainer id=\"5\">\n        <blockContent>Element 3 without children</blockContent>\n    </blockContainer>\n    <columnList id=\"6\">\n        <column id=\"7\">\n            <blockContainer id=\"8\">\n                <blockContent>Column 1</blockContent>\n            </blockContainer>\n        </column>\n        <column id=\"9\">\n            <blockContainer id=\"10\">\n                <blockContent>Column 2</blockContent>\n            </blockContainer>\n        </column>\n    </columnList>\n</blockGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Inline Content Configuration Type Definition\nDESCRIPTION: Type definition for inline content configuration specifying type, content style, and prop schema structure.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/custom-schemas/custom-inline-content.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomInlineContentConfig = {\n  type: string;\n  content: \"styled\" | \"none\";\n  readonly propSchema: PropSchema;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TiptapThreadStore for Tiptap Integration\nDESCRIPTION: Implementation of TiptapThreadStore that integrates with Tiptap's collaboration provider for comment management, designed for use with Tiptap's collaborative editing features.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/collaboration/comments.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TiptapThreadStore,\n  DefaultThreadStoreAuth,\n} from \"@blocknote/core/comments\";\nimport { TiptapCollabProvider } from \"@hocuspocus/provider\";\n\n// Create a TiptapCollabProvider (you probably have this already)\nconst provider = new TiptapCollabProvider({\n  name: \"test\",\n  baseUrl: \"https://collab.yourdomain.com\",\n  appId: \"test\",\n  document: doc,\n});\n\n// Create a TiptapThreadStore\nconst threadStore = new TiptapThreadStore(\n  userId, // The active user's ID\n  provider, // Tiptap collaboration provider\n  new DefaultThreadStoreAuth(userId, \"editor\"), // Authorization rules (see below)\n);\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server for BlockNote Docs\nDESCRIPTION: Command to start the development server for the BlockNote documentation website after building the project.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: BlocksChanged Type Definition for onChange Event\nDESCRIPTION: This type definition describes the structure of changes returned by the getChanges() function in the onChange callback. It includes information about block insertions, deletions, and updates.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/events.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The changes that occurred in the editor.\n */\ntype BlocksChanged = Array<\n  | {\n      // The affected block\n      block: Block;\n      // The source of the change\n      source: BlockChangeSource;\n      type: \"insert\" | \"delete\";\n      // Insert and delete changes don't have a previous block\n      prevBlock: undefined;\n    }\n  | {\n      // The affected block\n      block: Block;\n      // The source of the change\n      source: BlockChangeSource;\n      type: \"update\";\n      // The block before the update\n      prevBlock: Block;\n    }\n>;\n\n/**\n * This attributes the changes to a specific source.\n */\ntype BlockChangeSource = {\n  /**\n   * The type of change source:\n   * - \"local\": Triggered by local user (default)\n   * - \"paste\": From paste operation\n   * - \"drop\": From drop operation\n   * - \"undo\"/\"redo\"/\"undo-redo\": From undo/redo operations\n   * - \"yjs-remote\": From remote user\n   */\n  type:\n    | \"local\"\n    | \"paste\"\n    | \"drop\"\n    | \"undo\"\n    | \"redo\"\n    | \"undo-redo\"\n    | \"yjs-remote\";\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Block Side Menu Images with ThemedImage Component\nDESCRIPTION: This code uses the ThemedImage component to display screenshots of the Block Side Menu with support for both light and dark themes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/side-menu.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n  src=\"/img/screenshots/side_menu.png\"\n  darkImage=\"/img/screenshots/side_menu_dark.png\"\n  alt=\"image\"\n  width={500}\n  height={500}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing GitHub Button and CTA Button Components in React\nDESCRIPTION: This snippet imports the GitHubButton component from 'react-github-btn' and a custom CTAButton component for use in the page.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/about.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GitHubButton from \"react-github-btn\";\nimport CTAButton from \"../components/pages/landing/shared/CTAButton\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering the BlockNote Landing Page Component in React\nDESCRIPTION: This code snippet imports the BlockNoteHome component from the components/pages/landing directory and renders it on the page. It's a simple JSX implementation that displays the main landing page for the BlockNote editor.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BlockNoteHome } from \"../components/pages/landing\";\n\n[//]: # (import \"@/components/pages/landing/gradients.css\";)\n\n<BlockNoteHome />\n```\n\n----------------------------------------\n\nTITLE: Enabling Cell Background Color in Tables\nDESCRIPTION: Configures the BlockNote editor to enable cell background color functionality in tables.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/tables.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  tables: {\n    cellBackgroundColor: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Shiki Highlighter Bundle with CLI\nDESCRIPTION: Command to generate a syntax highlighter bundle using shiki-codegen CLI. This example creates a bundle with JavaScript, TypeScript, and Vue language support, plus light and dark themes using the optimized JavaScript engine.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/04-theming/07-custom-code-block/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shiki-codegen --langs javascript,typescript,vue --themes light,dark --engine javascript --precompiled ./shiki.bundle.ts\n```\n\n----------------------------------------\n\nTITLE: Rendering CTA Button for Email Contact in JSX\nDESCRIPTION: This snippet renders a Call-to-Action button using the custom CTAButton component. It links to an email address for contacting the team.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/about.mdx#2025-04-18_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div className={\"mt-6\"}>\n  <CTAButton href={\"mailto:team@blocknotejs.org\"} size={\"small\"}>\n    Get in touch\n  </CTAButton>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Cell Text Color in Tables\nDESCRIPTION: Configures the BlockNote editor to enable cell text color customization in tables.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/tables.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = new BlockNoteEditor({\n  tables: {\n    cellTextColor: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: PDFExporter Default Options Configuration\nDESCRIPTION: Default configuration options for PDFExporter including emoji source and file URL resolution\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-api/export-to-pdf.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions = {\n  // emoji source, this is passed to the react-pdf library (https://react-pdf.org/fonts#registeremojisource)\n  // these are loaded from cloudflare + twemoji by default\n  emojiSource: {\n    format: \"png\",\n    url: \"https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/72x72/\",\n  },\n  // a function to resolve external resources in order to avoid CORS issues\n  // by default, this calls a BlockNote hosted server-side proxy to resolve files\n  resolveFileUrl: corsProxyResolveFileUrl,\n  // the colors to use in the PDF for things like highlighting, background colors and font colors.\n  colors: COLORS_DEFAULT, // defaults from @blocknote/core\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Personal Data Processing Table in Markdown\nDESCRIPTION: This snippet shows a markdown table outlining the types of personal data processed by BlockNote, the purposes for processing, and the legal bases for doing so.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/legal/privacy-policy.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **(Personal) Data**                                                                                                 | **Purpose(s)**                                                                    | **Legal Basis**                                                                    |\n|---------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|------------------------------------------------------------------------------------|\n| _Contact Data:_<br/>- Email address                                                                                 | _We use these Data:_<br/>- For the delivery or performance of our Services to you | _We process these Data on the basis of:_<br/>- Consent                             |\n| _Payment Data:_<br/>- Payment Data of the paying party                                                              | _We use these Data:_<br/>- To send invoices                                       | _We process these Data on the basis of:_<br/>- A necessity to perform the contract |\n| _Content Data related to the Services:_<br/>- Correspondence or chat messages  \\- Your questions about our Services | _We use these Data:_<br/>- To provide you with an optimal service                 | _We process these Data on the basis of:_<br/>- A necessity to perform the contract |\n```\n\n----------------------------------------\n\nTITLE: Generating Shiki Syntax Highlighter Bundle\nDESCRIPTION: This command uses the shiki-codegen CLI to generate a custom syntax highlighter bundle for specific languages and themes in BlockNote.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/code-blocks.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shiki-codegen --langs javascript,typescript,vue --themes light,dark --engine javascript --precompiled ./shiki.bundle.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Components for BlockNote Pro Pricing Page in React\nDESCRIPTION: Imports necessary components for the pricing page, including SectionHeader, FAQ, and Tiers components.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/pricing.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { SectionHeader } from \"../components/pages/landing/shared/Headings\";\nimport { FAQ } from \"../components/pages/pricing/faq\";\nimport { Tiers } from \"../components/pages/pricing/tiers\";\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Hyperlinks with Bold Text\nDESCRIPTION: Demonstrates two variations of markdown link syntax - one that makes 'Web' bold before linking and another standard link for 'site'.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/link/styled.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**[Web](https://www.website.com)**[site](https://www.website.com)\n```\n\n----------------------------------------\n\nTITLE: Installing BlockNote Core Package\nDESCRIPTION: Command to install the core BlockNote package using NPM, excluding React-specific components.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/vanilla-js.mdx#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install @blocknote/core\n```\n\n----------------------------------------\n\nTITLE: Displaying BlockNote Project Directory Structure\nDESCRIPTION: A tree view of the BlockNote project's directory structure, showing the organization of packages, examples, documentation, and tests.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBlockNote\n├── packages/core        - The core of the editor, which includes all logic to get the editor running in vanilla JS.\n├── packages/react       - A React wrapper and UI for the editor. Requires additional components for the UI.\n├── packages/ariakit     - UI components for the `react` package, made with Ariakit.\n├── packages/mantine     - UI components for the `react` package, made with Mantine.\n├── packages/shadcn      - UI components for the `react` package, made with Shadcn.\n├── packages/server-util - Utilities for converting BlockNote documents into static HTML for server-side rendering.\n├── packages/dev-scripts - A set of tools for converting example editor setups into components for the BlockNote website.\n├── examples             - Example editor setups used for demos in the BlockNote website and playground.\n├── docs                 - Code for the BlockNote website.\n├── playground           - A basic page where you can quickly test each of the example editor setups.\n└── tests                - Playwright end to end tests.\n```\n\n----------------------------------------\n\nTITLE: Creating a 3x4 Markdown Table with Selective Cell Content\nDESCRIPTION: This markdown snippet demonstrates how to create a simple table with header row, formatting row, and data rows. Some cells contain 'Table Cell' text while others are intentionally left empty to show table structure and formatting.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/table/mixedRowspansAndColspans.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            |            |            |\n| ---------- | ---------- | ---------- |\n| Table Cell |            | Table Cell |\n| Table Cell | Table Cell |            |\n|            | Table Cell | Table Cell |\n```\n\n----------------------------------------\n\nTITLE: Defining Styled Text Type in TypeScript\nDESCRIPTION: Type definition for styled text content with formatting options.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype StyledText = {\n  type: \"text\";\n  text: string;\n  styles: Styles;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Sponsor Button in JSX\nDESCRIPTION: This code renders a GitHub Sponsor button using the GitHubButton component. It links to the sponsorship page for one of the project leaders.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/about.mdx#2025-04-18_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<p className=\"nx-mt-6\">\n  <GitHubButton\n    href=\"https://github.com/sponsors/YousefED\"\n    data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n    data-icon=\"octicon-heart\"\n    data-size=\"large\"\n    aria-label=\"Sponsor @YousefED on GitHub\">\n    Sponsor\n  </GitHubButton>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic 3x3 Markdown Table\nDESCRIPTION: Demonstrates how to structure a basic 3x3 table in Markdown syntax with header row, separator line, and uniform cell content. Uses the pipe character (|) to separate columns and hyphens (-) to denote the header row.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/table/basic.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            |            |            |\n| ---------- | ---------- | ---------- |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n```\n\n----------------------------------------\n\nTITLE: BlockContent Example Definition in TypeScript\nDESCRIPTION: Example of a BlockContent node definition (paragraph), showing how block types in the BlockNote API correspond to content node types in Prosemirror.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/packages/core/src/pm-nodes/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nname: \"paragraph\", // name corresponds to the block type in the BlockNote API\ncontent: \"inline*\", // can also be no content (for image blocks)\ngroup: \"blockContent\",\n```\n\n----------------------------------------\n\nTITLE: Defining Color Schemes for BlockNote React Component in TypeScript\nDESCRIPTION: This snippet defines color schemes for the BlockNote component, including light and dark modes. It specifies colors for various UI elements like background, text, and borders.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/pageBreak/basic.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const lightDefaultColors = {\n  background: \"#ffffff\",\n  editor: {\n    text: \"#3f3f3f\",\n    background: \"#ffffff\",\n  },\n  tooltip: {\n    text: \"#3f3f3f\",\n    background: \"#ffffff\",\n  },\n  hovered: {\n    text: \"#3f3f3f\",\n    background: \"#f1f3f5\",\n  },\n  selected: {\n    text: \"#ffffff\",\n    background: \"#5fa9e9\",\n  },\n  disabled: {\n    text: \"#cdcdcd\",\n    background: \"#ffffff\",\n  },\n  shadow: \"#555555\",\n  border: \"#e0e0e0\",\n  sideMenu: \"#f4f4f4\",\n  highlightColors: [\n    \"#ff0000\",\n    \"#ffa500\",\n    \"#ffff00\",\n    \"#00ff00\",\n    \"#00ffff\",\n    \"#0000ff\",\n    \"#ff00ff\",\n  ],\n};\n\nexport const darkDefaultColors = {\n  background: \"#1e1e1e\",\n  editor: {\n    text: \"#ffffff\",\n    background: \"#1e1e1e\",\n  },\n  tooltip: {\n    text: \"#ffffff\",\n    background: \"#1e1e1e\",\n  },\n  hovered: {\n    text: \"#ffffff\",\n    background: \"#2e2e2e\",\n  },\n  selected: {\n    text: \"#ffffff\",\n    background: \"#3e3e3e\",\n  },\n  disabled: {\n    text: \"#999999\",\n    background: \"#1e1e1e\",\n  },\n  shadow: \"#000000\",\n  border: \"#4f4f4f\",\n  sideMenu: \"#252526\",\n  highlightColors: [\n    \"#ff6666\",\n    \"#ffc266\",\n    \"#ffff66\",\n    \"#66ff66\",\n    \"#66ffff\",\n    \"#6666ff\",\n    \"#ff66ff\",\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockNote Editor in React Component\nDESCRIPTION: This code creates a React component that integrates the BlockNote editor. It initializes the editor with custom styles, handles changes, and renders the editor within the component.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/file/button.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BlockNoteView, useBlockNote } from \"@blocknote/react\";\nimport \"@blocknote/core/style.css\";\n\nexport default function Home() {\n  // Creates a new editor instance.\n  const editor = useBlockNote({\n    // This is where you can pass editor configuration options.\n    editable: true, // Makes the editor editable.\n  });\n\n  // Customize editor styling\n  const customStyles = {\n    editorRoot: {\n      width: \"90%\",\n      margin: \"auto\",\n      padding: \"1rem\",\n      border: \"1px solid #ccc\",\n      borderRadius: \"8px\",\n      fontSize: \"16px\",\n      fontFamily: \"Arial, sans-serif\",\n      boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n    },\n  };\n\n  // Handles changes in the editor\n  const handleEditorChange = () => {\n    console.log(\"Editor content changed!\");\n    // You can add more logic here, like saving content to state or a database\n  };\n\n  return (\n    <div>\n      <h1>BlockNote Editor Example</h1>\n      <BlockNoteView\n        editor={editor}\n        theme={\"light\"}\n        style={customStyles}\n        onChange={handleEditorChange}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pricing Tiers for BlockNote Pro in React\nDESCRIPTION: Creates an array of tier objects, each representing a pricing plan with features and pricing details. Includes Starter, Business, and Enterprise tiers.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/pricing.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tiers = [\n  {\n    id: \"tier-starter\",\n    mostPopular: false,\n    title: \"Starter\",\n    description:\n      \"Best for companies and organizations building products with BlockNote.\",\n    price: { month: 90, year: 24 },\n    features: [\n      \"Access to all Pro Examples\",\n      \"Prioritized Bug Reports on GitHub\",\n      \"Keep the open source library running and maintained\",\n      \"XL packages available for open source projects under AGPL-3.0\"\n    ],\n    githubTierId: \"291733\",\n  },\n  {\n    id: \"tier-business\",\n    title: \"Business\",\n    mostPopular: true,\n    description:\n      \"Best for companies that want a direct line to the team.\",\n    price: { month: 390, year: 48 },\n    features: [\n      \"Commercial license for XL packages:\",\n      \"XL: Multi-column layouts\",\n      \"XL: Export to PDF, Docx\",\n      \"Access to all Pro Examples\",\n      \"Prioritized Bug Reports on GitHub\",\n      \"Keep the open source library running and maintained\",\n      \"Logo on our website and repositories\",\n      \"Access to a private Discord channel with the maintainers\",\n      \"Up to 2 hours of individual support per month\",\n    ],\n    githubTierId: \"440968\",\n  },\n  {\n    id: \"tier-enterprise\",\n    title: \"Enterprise\",\n    description:\n      \"Collaborate directly with the BlockNote team on integrating and extending the editor.\",\n    price: \"Tailored pricing\",\n    features: [\n      \"Access to all Pro Examples\",\n      \"Prioritized Bug Reports and Feature Requests on GitHub\",\n      \"Keep the open source library running and maintained\",\n      \"Access to a private Discord or Slack channel with the maintainers\",\n      \"Guidance on integrating BlockNote into your project\",\n      \"Development of BlockNote features required for your organization\",\n      \"Dedicated consulting and support\",\n    ],\n    href: \"/about/\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Displaying Drag Handle Menu Images with ThemedImage Component\nDESCRIPTION: This code uses the ThemedImage component to display screenshots of the Drag Handle Menu with support for both light and dark themes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/side-menu.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n  src=\"/img/screenshots/drag_handle_menu.png\"\n  darkImage=\"/img/screenshots/drag_handle_menu_dark.png\"\n  alt=\"image\"\n  width={250}\n  height={250}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Props for BlockNote React Component in TypeScript\nDESCRIPTION: This snippet defines the prop types for the BlockNote React component. It includes various configuration options such as initial content, editor configurations, and callbacks for different events.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/pageBreak/basic.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type BlockNoteProps = {\n  initialContent?: PartialBlock[];\n  editorDOMAttributes?: Record<string, string>;\n  onEditorReady?: (editor: BlockNoteEditor) => void;\n  onEditorContentChange?: (editor: BlockNoteEditor) => void;\n  onTextCursorPositionChange?: (editor: BlockNoteEditor) => void;\n  onSelectionChange?: (editor: BlockNoteEditor) => void;\n  editable?: boolean;\n  defaultStyles?: boolean;\n  uploadFile?: (file: File) => Promise<string>;\n  useDefaultColors?: boolean;\n  colors?: DeepPartial<typeof lightDefaultColors>;\n  blockspecs?: PartialBlockSpecs;\n  inlinespecs?: PartialInlineContentSpecs;\n  formattingToolbar?: FormattingToolbarProp;\n  sideMenu?: boolean;\n  slashMenu?: boolean;\n  selectionMenu?: boolean;\n  hyperlinkMenu?: boolean;\n  imagePreview?: boolean;\n  textDirectionality?: \"ltr\" | \"rtl\";\n  editorStyle?: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up the BlockNote Project Locally\nDESCRIPTION: Instructions for running the BlockNote project locally, including installing dependencies with pnpm and starting the example project.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install all required npm modules\npnpm install\n\n# Start the example project\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Rendering BlockNote Pro Pricing Page in React\nDESCRIPTION: Defines the Pricing component that renders the pricing page layout, including headers, description, pricing tiers, and FAQ section. Uses JSX for the component structure.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/pricing.mdx#2025-04-18_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function Pricing() {\n  const frequency = \"month\";\n\n  return (\n    <div className=\"flex flex-col items-center py-16 sm:py-16\">\n      <div className=\"flex max-w-screen-xl flex-col items-center px-6 lg:px-8\">\n        <h2 className=\"max-w-6xl text-center text-base font-semibold leading-7 text-indigo-600\">\n          BlockNote Pro\n        </h2>\n        <SectionHeader>Upgrade your BlockNote experience</SectionHeader>\n        <p className=\"mt-6 max-w-screen-lg text-center text-lg text-[#00000080] dark:text-[#FFFFFFB2]\">\n          Thanks for checking out BlockNote Pro! BlockNote is free and open source\n          software that organizations of all sizes are using to add polished editing\n          experiences to their apps.\n        </p>\n        <p className=\"mt-6 max-w-screen-lg text-center text-lg text-[#00000080] dark:text-[#FFFFFFB2]\">\n          With your subscription, you are ensuring the sustainable maintenance and\n          development of the library. It's a great way to support the project and\n          get access to direct support, prioritized feature requests and Pro\n          Examples.\n        </p>\n        <Tiers tiers={tiers} frequency={frequency} />\n        <FAQ />\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Star Button in JSX\nDESCRIPTION: This code renders a GitHub Star button for the BlockNote repository using the GitHubButton component. It includes various attributes for customization.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/about.mdx#2025-04-18_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<p className=\"nx-mt-6\">\n  <GitHubButton\n    href=\"https://github.com/TypeCellOS/BlockNote\"\n    data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n    data-icon=\"octicon-star\"\n    data-size=\"large\"\n    data-show-count=\"true\"\n    aria-label=\"Star TypeCellOS/BlockNote on GitHub\">\n    Star\n  </GitHubButton>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleList Component in React\nDESCRIPTION: Imports the ExampleList component from the example components directory, used to display BlockNote examples.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/examples/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleList } from \"../../components/example/ExampleList\";\n```\n\n----------------------------------------\n\nTITLE: Example Component Import\nDESCRIPTION: JSX component inclusion for demonstrating BlockNote functionality\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/index.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example name=\"basic/minimal\" />\n```\n\n----------------------------------------\n\nTITLE: Outputting Hello World to Console in JavaScript\nDESCRIPTION: Simple example of using console.log() to output a string message to the browser or Node.js console. This is commonly used for basic debugging and demonstration purposes.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/codeBlock/defaultLanguage.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable and Logging to Console in JavaScript\nDESCRIPTION: This snippet demonstrates how to declare a string variable in JavaScript and output its value to the console. It creates a constant variable named 'hello' with the value 'world' and then uses console.log() to display that value.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/codeBlock/contains-newlines.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hello = 'world';\nconsole.log(hello);\n```\n\n----------------------------------------\n\nTITLE: Creating 3x3 Markdown Table\nDESCRIPTION: Creates a 3x3 markdown table with header row separator and uniform cell content. Each cell contains the text 'Table Cell' with proper column alignment.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/table/mixedColWidths.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            |            |            |\n| ---------- | ---------- | ---------- |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello, world!' in Python\nDESCRIPTION: This code snippet uses Python's built-in print function to output the string 'Hello, world!' to the console. It's a common introductory example used to demonstrate basic output in Python programming.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/codeBlock/python.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('Hello, world!')\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Link for BlockNote Website\nDESCRIPTION: This snippet demonstrates how to create a markdown link to the BlockNote project website. It uses standard markdown syntax to embed a URL within text.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/link/basic.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Website](https://www.website.com)\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side BlockNote Editor Component in Next.js\nDESCRIPTION: This code creates a reusable BlockNote editor component with the 'use client' directive to ensure it's only rendered on the client side. It imports required styles and uses the Mantine UI version of BlockNote.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/advanced/nextjs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript jsx\nCODE:\n```\n\"use client\"; // this registers <Editor> as a Client Component\nimport \"@blocknote/core/fonts/inter.css\";\nimport { useCreateBlockNote } from \"@blocknote/react\";\nimport { BlockNoteView } from \"@blocknote/mantine\";\nimport \"@blocknote/mantine/style.css\";\n\n// Our <Editor> component we can reuse later\nexport default function Editor() {\n  // Creates a new editor instance.\n  const editor = useCreateBlockNote();\n\n  // Renders the editor instance using a React component.\n  return <BlockNoteView editor={editor} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Basic markdown structure for the documentation page including frontmatter and import statements\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/index.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Introduction to BlockNote\nimageTitle: Introduction to BlockNote\npath: /docs/introduction\n---\n\nimport { Example } from \"@/components/example\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3x3 Markdown Table\nDESCRIPTION: This snippet demonstrates how to format a basic table in Markdown with three columns and three rows. It includes a header row separated by dashes and two rows of data with cells containing the text 'Table Cell'.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/table/allColWidths.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            |            |            |\n| ---------- | ---------- | ---------- |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n```\n\n----------------------------------------\n\nTITLE: Creating a 3x3 Markdown Table\nDESCRIPTION: This snippet demonstrates how to structure a basic markdown table with three columns and three rows. It includes a header row, separator line, and two data rows, all containing placeholder text.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/table/headerCols.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Table Cell | Table Cell | Table Cell |\n| ---------- | ---------- | ---------- |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Image in React Component\nDESCRIPTION: This code snippet shows how to use a custom ThemedImage component to display different images based on the theme (light/dark mode).\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/ui-components/formatting-toolbar.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n  src=\"/img/screenshots/formatting_toolbar.png\"\n  darkImage=\"/img/screenshots/formatting_toolbar_dark.png\"\n  alt=\"image\"\n  width={600}\n  height={600}\n/>\n```\n\n----------------------------------------\n\nTITLE: Referencing the CodeBlock Option in BlockNote\nDESCRIPTION: Shows how to enable code block syntax highlighting in BlockNote by using the `codeBlock` option in the `useCreateBlockNote` hook. This option is disabled by default to reduce bundle size.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/examples/04-theming/06-code-block/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo enable code block syntax highlighting, you can use the `codeBlock` option in the `useCreateBlockNote` hook. This is excluded by default to reduce bundle size.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure\nDESCRIPTION: A 3x3 table structure in Markdown format with header separator row and uniform 'Table Cell' content. The table includes proper column alignment markers and consistent spacing.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/table/mixedCellColors.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|            |            |            |\n| ---------- | ---------- | ---------- |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n| Table Cell | Table Cell | Table Cell |\n```\n\n----------------------------------------\n\nTITLE: Defining Default Styles in TypeScript\nDESCRIPTION: Type definition for text formatting styles including bold, italic, underline, strike, and colors.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/docs/editor-basics/default-schema.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Styles = {\n  bold: boolean;\n  italic: boolean;\n  underline: boolean;\n  strike: boolean;\n  textColor: string;\n  backgroundColor: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Commented-out Button Component in JSX\nDESCRIPTION: This is a commented-out JSX code snippet that would render a Button component with the text 'Hello'. It's currently not in use.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/about.mdx#2025-04-18_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{/* <Button text=\"Hello\" /> */}\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Link with Caption\nDESCRIPTION: This snippet shows how to create a Markdown link with URL and display text, followed by a separate caption. The link uses square brackets for text and parentheses for the URL.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/tests/src/unit/core/formatConversion/export/__snapshots__/markdown/image/noName.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[exampleURL](exampleURL)\n\nCaption\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Retention Periods Table in Markdown\nDESCRIPTION: This markdown table presents the categories of personal data collected by BlockNote and their respective retention periods.\nSOURCE: https://github.com/typecellos/blocknote/blob/main/docs/pages/legal/privacy-policy.mdx#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Category of Personal Data**              | **Retention period**                                                                                                   |\n|--------------------------------------------|------------------------------------------------------------------------------------------------------------------------|\n| Contact Data                               | We retain your contact information for as long as necessary to provide our Services.                                   |\n| Payment Data                               | We retain your payment data for as long as necessary to meet our financial and tax requirements and obligations.       |\n| Partner and/or supplier Data               | We retain partner or supplier data for as long as it is needed to provide our Services.                                |\n| Data for marketing and promotional reasons | We retain data for marketing and promotional purposes for as long as you wish to use these Services.                   |\n| Content data related to our Services       | We retain content data for as long as necessary to provide you with our Services in an integral and continuous manner. |\n```"
  }
]