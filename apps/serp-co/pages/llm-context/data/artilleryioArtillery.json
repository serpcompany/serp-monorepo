[
  {
    "owner": "artilleryio",
    "repo": "artillery",
    "content": "TITLE: Artillery CLI Command Help Usage\nDESCRIPTION: Demonstrates the main CLI commands and options available in Artillery, including run, quick test, and report generation commands. Shows the basic command structure and help flag usage.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery/man/artillery.1.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nartillery --help\n\n\nUsage: artillery [options] [command]\n\n\nCommands:\n\n  run [options] <script>  Run a test script. Example: `artillery run benchmark.yml`\n  quick [options] <url>   Run a quick test without writing a test script\n  report <file>           Create a report from a JSON file created by \"artillery run\"\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n```\n\n----------------------------------------\n\nTITLE: Listing Artillery Features in Markdown\nDESCRIPTION: This snippet uses Markdown to list the key features of Artillery, including cloud-native testing, Playwright integration, and extensibility.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Features\n\n- **Test at cloud scale.** Cloud-native distributed load testing at scale, **out-of-the box and for free**.\n  - Scale out your load tests on top of AWS Lambda or AWS Fargate. No DevOps needed, zero infrastructure to set up or manage.\n- **Test with Playwright**. Load test with real headless browsers.\n- **Batteries-included.** 20+ integrations for monitoring, observability, and CICD.\n- **Test anything**. HTTP, WebSocket, Socket.io, gRPC, Kinesis, and more.\n- **Powerful workload modeling**. Emulate complex user behavior with request chains, multiple steps, transactions, and more.\n- **Extensible & hackable**. Artillery has a plugin API to allow extending and customization.\n```\n\n----------------------------------------\n\nTITLE: Installing Artillery via NPM\nDESCRIPTION: Command to globally install the Artillery load testing tool using npm package manager.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g artillery\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Inspector Plugin in Artillery YAML Configuration\nDESCRIPTION: YAML configuration example showing how to set up the memory-inspector plugin in an Artillery test script. It demonstrates monitoring multiple processes with custom names and running a basic web request test against a local server.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-memory-inspector/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  target: \"http://localhost:4444\"\n  phases:\n    - duration: 600\n      arrivalRate: 3\n      name: \"Phase 1\"\n  processor: \"./myProcessor.js\"\n  plugins:\n    memory-inspector:\n      - pid: 60754\n        name: memory-leak-express\n      - pid: 11216\n        name: stable-state\n\nscenarios:\n  - flow:\n      - get:\n          url: \"/\"\n```\n\n----------------------------------------\n\nTITLE: Azure Pipelines CI/CD Configuration for Artillery\nDESCRIPTION: Azure Pipelines configuration that automates load testing on code pushes to main branch and runs daily scheduled tests at 12:00 AM UTC. Includes HTML report generation and artifact storage.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/azure-devops/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nazure-pipelines.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing Jenkins Pipeline for Scheduled Artillery Load Testing\nDESCRIPTION: This Jenkins Pipeline configuration sets up a scheduled job to run Artillery load tests daily at midnight. It executes the test, generates an HTML report, and archives the results as artifacts.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/jenkins/README.md#2025-04-21_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nJenkinsfile\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Functional Tests\nDESCRIPTION: This command executes Artillery functional tests using the functional environment configuration, which enables the artillery-plugin-expect plugin for assertions.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/functional-testing-with-expect-plugin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx artillery run --environment functional functional-load-tests.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI Workflow for Artillery Load Testing\nDESCRIPTION: This YAML configuration sets up a CircleCI workflow to run Artillery load tests automatically. It triggers tests on pushes to the main branch and schedules daily tests at 12:00 AM UTC. The workflow generates and stores HTML reports as artifacts.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/circleci/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.circleci/config.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Tests\nDESCRIPTION: This command executes Artillery load tests using the load environment configuration, which generates 25 virtual users per second for 10 minutes.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/functional-testing-with-expect-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx artillery run --environment load functional-load-tests.yml\n```\n\n----------------------------------------\n\nTITLE: Artillery Performance Metrics Output\nDESCRIPTION: Example of the performance metrics output generated by Artillery, showing both backend and browser-level metrics.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-load-testing-playwright/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvusers.created_by_name.Dev account signup: .................. 10\nvusers.created.total: ....................................... 10\nvusers.completed: ........................................... 10\nvusers.session_length:\n  min: ...................................................... 3884.2\n  max: ...................................................... 13846.2\n  median: ................................................... 12711.5\n  p95: ...................................................... 12968.3\n  p99: ...................................................... 12968.3\nbrowser.page_domcontentloaded: ........................... 20\nbrowser.response_time:\n  min: ...................................................... 0\n  max: ...................................................... 1778.8\n  median: ................................................... 37.7\n  p95: ...................................................... 3828.5\n  p99: ...................................................... 3828.5\nbrowser.page_domcontentloaded.dominteractive:\n  min: ...................................................... 297\n  max: ...................................................... 2247\n  median: ................................................... 1002.4\n  p95: ...................................................... 1939.5\n  p99: ...................................................... 1939.5\nbrowser.page_domcontentloaded.dominteractive.https://artillery.io/:\n  min: ...................................................... 427\n  max: ...................................................... 2247\n  median: ................................................... 1130.2\n  p95: ...................................................... 1939.5\n  p99: ...................................................... 1939.5\nbrowser.page_domcontentloaded.dominteractive.https://artillery.io/pro/:\n  min: ...................................................... 297\n  max: ...................................................... 1927\n  median: ................................................... 596\n  p95: ...................................................... 1380.5\n  p99: ...................................................... 1380.5\n```\n\n----------------------------------------\n\nTITLE: Generated Artillery Test Script for Kubernetes Service\nDESCRIPTION: This YAML snippet shows the Artillery test script generated by kubectl-artillery. It includes configuration for the target service and a basic health check scenario.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  target: http://movie-browser-service:80/\n  environments:\n    functional:\n      phases:\n        - duration: 1\n          arrivalCount: 1\n      plugins:\n        expect: {}\nscenarios:\n  - flow:\n      - get:\n          url: http://movie-browser-service:80/healthz\n          expect:\n            - statusCode: 200\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test\nDESCRIPTION: This command executes the Artillery test script (test.yml) to perform load testing on the WebSockets server.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/websockets/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx artillery run test.yml\n```\n\n----------------------------------------\n\nTITLE: Artillery Socket.IO Test Configuration in YAML\nDESCRIPTION: Example Artillery test script configuration for testing a Socket.IO server. The test is accessible via the Artillery REPL and can be executed within Azure Pipelines.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/azure-devops/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests/performance/socket-io.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Test with Custom Metrics\nDESCRIPTION: Command to execute the Artillery test script that includes custom metrics tracking. The script uses afterResponse hooks to track a counter and a histogram of request latency.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/track-custom-metrics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nartillery run custom-metrics.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Artillery Load Test for Socket.IO Server in YAML\nDESCRIPTION: This YAML configuration defines an Artillery load test script for a Socket.IO server. It specifies the target, scenario, and test phases for load testing a Socket.IO application.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/jenkins/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests/performance/socket-io.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test for Socket.IO\nDESCRIPTION: This command executes the Artillery test script (socket-io.yml) to perform load testing on the running Socket.IO server. The script contains various test scenarios for Socket.IO implementation.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/socket-io/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx artillery run socket-io.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test Against GraphQL Server\nDESCRIPTION: Executes the Artillery test script (graphql.yml) that contains scenarios for testing various queries and mutations on the GraphQL server.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/graphql-api-server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx artillery run graphql.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Artillery Load Test for Socket.IO Server\nDESCRIPTION: This YAML file contains an Artillery test script for load testing a Socket.IO server. It defines the test scenarios, configurations, and metrics to be collected during the performance test.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/circleci/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntests/performance/socket-io.yml\n```\n\n----------------------------------------\n\nTITLE: Deploying and Running Artillery Test on Kubernetes\nDESCRIPTION: This shell command applies the Kustomize manifests to deploy and run the Artillery test job on the Kubernetes cluster.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k artillery-manifests\n```\n\n----------------------------------------\n\nTITLE: Sample PostHog Load Testing Configuration in YAML\nDESCRIPTION: Example Artillery configuration script that demonstrates how to set up a load test for PostHog. It includes target configuration, API key setup, test phases, and a scenario that captures events with properties.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-engine-posthog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  target: \"https://posthog.acme.corp\"\n  posthog:\n    apiKey: \"{{ $processEnvironment.POSTHOG_API_KEY }}\"\n  phases:\n    - arrivalCount: 5\n      duration: 10\n  engines:\n    posthog: {}\nscenarios:\n  - name: \"posthog engine test\"\n    engine: posthog\n    flow:\n      - count: 3\n        loop:\n        - capture:\n            distinctId: \"distinct id\"\n            event: \"movie played\"\n            properties:\n              movieId: \"Die Hard\"\n              category: \"Christmas\"\n        - think: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Plugin in Artillery YAML\nDESCRIPTION: This snippet demonstrates the basic configuration for the New Relic plugin in Artillery. It sets the plugin type, API key, metric prefix, and custom attributes for the metrics.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-publish-metrics/lib/newrelic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  plugins:\n    publish-metrics:\n      - type: newrelic\n        apiKey: '{{ $processEnvironment.NEW_RELIC_LICENSE_KEY }}'\n        prefix: 'artillery.'\n        attributes:\n          - 'type:soak-test'\n          - 'service:my-service'\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Job Manifest for Artillery Test\nDESCRIPTION: This YAML snippet shows a portion of the generated Kubernetes Job manifest for running the Artillery test. It includes metadata labels for identifying the test components.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  labels:\n    artillery.io/component: test-worker-master\n    artillery.io/part-of: artilleryio-test\n    artillery.io/test-name: movie-browser-service\n  name: movie-browser-service\n  namespace: default\n...\n```\n\n----------------------------------------\n\nTITLE: Batch Running Multiple Artillery Scenarios\nDESCRIPTION: Shell script to iterate through and execute multiple Artillery scenario files in sequence using a common configuration.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/multiple-scenario-specs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfor scenarioFile in `ls scenarios/*.yml` ; do\n  artillery run --config common-config.yml scenarios/$scenarioFile\ndone\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Tests with Cookie Handling\nDESCRIPTION: Command to execute the Artillery test script (cookies.yml) that demonstrates different ways to work with cookies when testing HTTP services.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/using-cookies/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nartillery run cookies.yml\n```\n\n----------------------------------------\n\nTITLE: Artillery Splunk Plugin Configuration\nDESCRIPTION: YAML configuration example for the Artillery Splunk plugin. Shows how to set up metrics publishing with custom dimensions, event tracking, and environment-based access token configuration.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-publish-metrics/lib/splunk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  plugins:\n    publish-metrics:\n      - type: splunk\n        realm: eu0\n        # SP_ACCESS_TOKEN is an environment variable containing the API key\n        accessToken: '{{ $processEnvironment.SP_ACCESS_TOKEN }}'\n        prefix: 'artillery.publish_metrics_plugin.'\n        dimensions:\n          - 'host:server_1'\n          - 'host_id:1.2.3.4'\n        event:\n          eventType: 'Artillery_load_test'\n          dimensions:\n            - 'environment:production'\n            - 'testId:myTest123'\n          properties:\n            - 'use:QA'\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Tests with Playwright Code\nDESCRIPTION: Command to run the Artillery performance test that uses the same Playwright test code, demonstrating the reuse of test logic between frameworks.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-typescript/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd performance && npx artillery run search-for-ts-doc.yml\n```\n\n----------------------------------------\n\nTITLE: SOAP Metrics Output Example\nDESCRIPTION: Sample output showing custom metrics tracked during SOAP load testing, including request counts, response times, and statistical measurements.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/soap-with-custom-function/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsoap.addNumbers.requests: ...................................................... 8\nsoap.addNumbers.response_time:\n  min: ......................................................................... 2\n  max: ......................................................................... 9\n  mean: ........................................................................ 4.9\n  median: ...................................................................... 2\n  p95: ......................................................................... 7.9\n  p99: ......................................................................... 7.9\nsoap.addNumbers.responses: ..................................................... 8\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Script with Token Authentication\nDESCRIPTION: Command to execute the Artillery script that demonstrates token-based authentication. This command runs the auth-with-token.yml configuration file which implements both shared and VU-specific token generation.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/generating-vu-tokens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nartillery run auth-with-token.yml\n```\n\n----------------------------------------\n\nTITLE: Dynamically Overriding Artillery Test Parameters at Runtime\nDESCRIPTION: Executes an Artillery test with the 'dynamic' environment while overriding the load phase parameters using environment variables ARRIVAL_RATE and DURATION to control the test intensity and length.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/script-overrides/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nARRIVAL_RATE=20 DURATION=600 artillery run -e dynamic test.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Test with Preprod Environment Configuration\nDESCRIPTION: Executes an Artillery test using the 'preprod' environment configuration which applies a higher TPS longer phase for preprod testing with hardcoded values.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/script-overrides/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run -e preprod test.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting the GraphQL Server for Load Testing\nDESCRIPTION: Launches the Apollo GraphQL server that will be the target of Artillery load tests. The server will be available at http://localhost:4000/.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/graphql-api-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Tests on AWS Fargate with Authentication\nDESCRIPTION: Command to run Artillery tests at scale on AWS Fargate with a specified number of workers, including authentication reuse.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-authentication/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run:fargate scenario.yml --count 2\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test Against Twirp Server\nDESCRIPTION: Command to execute the Artillery load test using the scenario file that contains the configuration for testing the Twirp RPC service.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/rpc-twirp-with-custom-function/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx artillery run ./test/scenario.yml\n```\n\n----------------------------------------\n\nTITLE: Viewing Artillery Test Results from Kubernetes Logs\nDESCRIPTION: This shell command retrieves and displays the logs from the Artillery test worker pod, showing the test results and metrics.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs pod/movie-browser-service-9xnsn\n```\n\n----------------------------------------\n\nTITLE: Advanced New Relic Plugin Configuration with Event Settings\nDESCRIPTION: This YAML configuration expands on the basic setup by including event-specific settings. It demonstrates how to configure custom event types, account IDs, and additional event attributes.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-publish-metrics/lib/newrelic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  plugins:\n    publish-metrics:\n      - type: newrelic\n        apiKey: '{{ $processEnvironment.NEW_RELIC_LICENSE_KEY }}'\n        prefix: 'artillery.'\n        attributes:\n          - 'type:soak-test'\n          - 'service:my-service'\n        event:\n          accountId: '{{ $processEnvironment.NEW_RELIC_ACCOUNT_ID }}'\n          eventType: 'Artillery_load_test'\n          attributes:\n            'alertType:info'\n            'priority:low'\n            'testId:myTest123'\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test with TypeScript\nDESCRIPTION: Command to run a simple load test using a Playwright script written in TypeScript.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-load-testing-playwright/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run browser-load-test.ts\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Artillery Test Script from Kubernetes Service\nDESCRIPTION: This shell command uses kubectl-artillery to generate an Artillery test script based on the movie-browser-service Kubernetes Service.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl artillery scaffold movie-browser-service\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Test with Smoke Environment Configuration\nDESCRIPTION: Executes an Artillery test using the 'smoke' environment configuration which applies a low TPS short phase for smoke testing with hardcoded values.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/script-overrides/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run -e smoke test.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test with Automated Checks\nDESCRIPTION: Command to execute the Artillery load test script with automated checks. This runs the test configuration defined in the YAML file.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/automated-checks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nartillery run test-with-automated-checks.yml\n```\n\n----------------------------------------\n\nTITLE: Running a Skytrace Flow with hot-reload\nDESCRIPTION: This command runs a Skytrace flow defined in 'asciiart-flow.yml' with the hot-reload feature enabled (-r flag). Changes to the file will trigger automatic re-runs.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/skytrace/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nskytrace run -r asciiart-flow.yml\n```\n\n----------------------------------------\n\nTITLE: Checking Artillery Test Job Status on Kubernetes\nDESCRIPTION: This shell command retrieves the status of all Kubernetes resources related to the Artillery test job.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get all -l artillery.io/part-of=artilleryio-test\n```\n\n----------------------------------------\n\nTITLE: Running Artillery with Playwright Authentication Reuse\nDESCRIPTION: Command to execute the Artillery test scenario that demonstrates authentication reuse with Playwright.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-authentication/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run scenario.yml\n```\n\n----------------------------------------\n\nTITLE: Health Check Endpoint in Movie Browser Server\nDESCRIPTION: This JavaScript snippet shows the implementation of the health check endpoint in the Movie Browser HTTP test server. It responds with a 200 status if movie data is available.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/healthz', (req, res) => {\n  if (response.length > 0) {\n    res.status(200).send('Ok');\n  } else {\n    res.status(500).send('Movie data is missing');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Single Artillery Scenario\nDESCRIPTION: Command to execute a single Artillery scenario using the --config flag to specify common configuration.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/multiple-scenario-specs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nartillery run --config common-config.yml scenarios/armadillo.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Test\nDESCRIPTION: Command to execute the Artillery test script for SOAP load testing\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/soap-with-custom-function/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx artillery run soap.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Artillery Memory Inspector Plugin via npm\nDESCRIPTION: Command to install the artillery-plugin-memory-inspector package globally using npm. This allows usage of the plugin in Artillery test scripts for memory monitoring.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-memory-inspector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g artillery-plugin-memory-inspector\n```\n\n----------------------------------------\n\nTITLE: Setting up KinD Cluster for Kubernetes Testing\nDESCRIPTION: This shell command runs a script to set up a KinD (Kubernetes in Docker) cluster locally. It's used to prepare a Kubernetes environment for testing.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./hack/kind/kind-with-registry.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Artillery to Include Authentication Storage for Fargate\nDESCRIPTION: YAML configuration snippet showing how to include the storage.json file when running tests on AWS Fargate to ensure proper authentication reuse.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-authentication/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  config:\n    ...\n    includeFiles:\n        - ./storage.json\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Job for Artillery Test\nDESCRIPTION: This shell command uses kubectl-artillery to generate a Kubernetes Job manifest that will run the Artillery test script in the cluster.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl artillery generate movie-browser-service -s artillery-scripts/test-script_movie-browser-service.yaml\n```\n\n----------------------------------------\n\nTITLE: Debugging Artillery Splunk Plugin\nDESCRIPTION: Command to enable debug logging for the Splunk metrics publishing plugin. Sets the DEBUG environment variable to view detailed debugging messages.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-publish-metrics/lib/splunk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=plugin:publish-metrics:splunk artillery run my-script.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies for GraphQL Load Testing\nDESCRIPTION: Installs the required npm packages for the GraphQL server used in Artillery load testing.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/graphql-api-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.IO Load Test in Artillery\nDESCRIPTION: Example Artillery test script for load testing a Socket.IO server. The script defines the test configuration including endpoints, scenarios, and load patterns.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/gitlab-ci-cd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests/performance/socket-io.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test with YAML Configuration\nDESCRIPTION: Command to run a load test using a separate YAML configuration file.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-load-testing-playwright/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run browser-load-test.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Smoke Test with TypeScript\nDESCRIPTION: Command to run a smoke test using a Playwright script written in TypeScript.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-load-testing-playwright/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run browser-smoke-test.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies\nDESCRIPTION: Command to install the required dependencies for the Express.js server application.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-file-uploads/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Skytrace using npm\nDESCRIPTION: This command installs Skytrace globally using npm. It's noted that Homebrew and self-contained binaries will be available in the future.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/skytrace/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g skytrace\n```\n\n----------------------------------------\n\nTITLE: Starting the Express.js API Server\nDESCRIPTION: This command starts the Express.js application that runs an HTTP API using an in-memory SQLite 3 database, making it available at http://localhost:3000/.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/functional-testing-with-expect-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Test Script\nDESCRIPTION: Command to execute the Artillery test script (file-uploads.yml) that performs file upload testing.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-file-uploads/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nartillery run file-uploads.yml\n```\n\n----------------------------------------\n\nTITLE: Starting the Express.js HTTP Server for Artillery Testing\nDESCRIPTION: This command starts the Express.js HTTP server on localhost:3000 that will serve as the target for the Artillery load tests with weighted scenarios.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/scenario-weights/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run app:start\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies with NPM\nDESCRIPTION: This command installs all the dependencies required for the Express.js API server with SQLite 3 database.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/functional-testing-with-expect-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma Database for GraphQL Server\nDESCRIPTION: Creates the SQLite database and sets up required database tables by running the initial Prisma database migration.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/graphql-api-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Setting up and running an Artillery engine example\nDESCRIPTION: Commands for installing dependencies, configuring the NODE_PATH environment variable to include the parent directory, and running the example script with the custom Artillery engine.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/artillery-engine-example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_PATH=$(pwd)/..\n```\n\nLANGUAGE: bash\nCODE:\n```\nartillery run example.yaml\n```\n\n----------------------------------------\n\nTITLE: Redis Connection and Usage with Artillery\nDESCRIPTION: The document describes how to use Redis with Artillery for unique user data access. It explains the process of seeding Redis with users and retrieving them using lpop in a beforeScenario hook.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/using-data-from-redis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Using Data from Redis\n\nDue to Artillery's concurrent nature, there is no way to guarantee that test data used (e.g. using CSV) is uniquely accessed by your virtual users, especially running distributed load tests.\n\nIn some cases, you may require users to be unique. In those cases, using Redis is a simple alternative. You can use your own Redis (e.g. AWS Elasticache), or use a managed solution like Upstash. We recommend Upstash due to its simplicity and serverless nature.\n\nThis example will show you how to connect an Artillery test to an Upstash Redis instance, and pull a unique user each time.\n\n## Pre-requisites\n\n- Create an Upstash account\n- Follow the simple guide to create an [Upstash Redis instance](https://upstash.com/docs/redis/overall/getstarted)\n- Obtain the `endpoint` and `token` from the UI\n\n## How it works\n\nWe'll first seed a Redis database with auto-generated users. Using a [`beforeScenario`](https://www.artillery.io/docs/reference/engines/http#function-actions-and-beforescenario--afterscenario-hooks) hook we pull a unique user per VU from Redis (`using Redis lpop`), and save its username and password in `context.vars`. \n\nThe scenario is then simply logging the username and password to the console to demonstrate that they are unique.\n\n## Running the example\n\n- First, create a `.env` file in this directory, with the same contents as `.env.sample`, filling in the information with your endpoint and token.\n- Run `npm install` in this directory to install the needed dependencies\n- Run `npm run seed` to seed the Redis instance with 100 auto-generated users (username and password)\n\nYou can now run your Artillery test with `npm run test`. You'll see the users printed to the console.\n\n## Additional thoughts\n\n- We seed the database in a separate script. However, you could easily run the seeding step as part of a [`before`](https://www.artillery.io/docs/reference/test-script#before-and-after-sections) hook if desired\n- If you're interested in the additional overhead of pulling the user from Redis, you can run the test with the `SHOW_TIMING=true` variable. Redis is very fast, and typically each call should only add <30 ms to each VU execution (depending on factors like instance sizes, size of the load test, network, etc)\n```\n\n----------------------------------------\n\nTITLE: Running the Artillery Load Test Script with Environment Variable\nDESCRIPTION: Command to execute an Artillery load test script with the PostHog API key passed as an environment variable. This is the final step in the load testing process.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-engine-posthog/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nPOSTHOG_API_KEY=xxx artillery run example.yml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Smoke Test with YAML Configuration\nDESCRIPTION: Command to run a smoke test using a separate YAML configuration file.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-load-testing-playwright/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run browser-smoke-test.yml\n```\n\n----------------------------------------\n\nTITLE: Defining URL Test Cases in CSV\nDESCRIPTION: CSV file containing test URLs and their expected HTTP status codes. Each row defines a URL path and its corresponding expected response code.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/table-driven-functional-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n/,200\n/docs,302\n/dinosaur,404\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Artillery Tests with NPM\nDESCRIPTION: Shell commands for installing dependencies and running the functional tests using NPM scripts.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/table-driven-functional-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# install dependencies:\nnpm install\n# run the Artillery test:\nnpm run functional-test\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Server\nDESCRIPTION: Command to start the Express.js HTTP server that will handle file uploads on port 3000.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-file-uploads/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run app:start\n```\n\n----------------------------------------\n\nTITLE: Referencing AWS CodeBuild Buildspec in YAML\nDESCRIPTION: This snippet indicates the location of the AWS CodeBuild buildspec configuration file. The buildspec is set up to run the load test, generate an HTML report, and store the artifact in an S3 bucket.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/aws-codebuild/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuildspec.yml\n```\n\n----------------------------------------\n\nTITLE: Kustomize Manifest for Artillery Test Configuration\nDESCRIPTION: This YAML snippet shows the Kustomize manifest used to create a ConfigMap for the Artillery test script and configure the test deployment.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Kustomization\napiVersion: kustomize.config.k8s.io/v1beta1\nnamespace: default\nresources:\n  - test-job.yaml\nconfigMapGenerator:\n  - name: movie-browser-service-test-script\n    files:\n      - test-script_movie-browser-service.yaml\ngeneratorOptions:\n  labels:\n    artillery.io/component: artilleryio-test-config\n    artillery.io/part-of: artilleryio-test\n  disableNameSuffixHash: true\n```\n\n----------------------------------------\n\nTITLE: Using Skytrace Ping to test a URL\nDESCRIPTION: This command demonstrates how to use Skytrace Ping to test an HTTP endpoint. The '-bp' flags likely enable specific features of the ping command.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/skytrace/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nskytrace ping http://lab.artillery.io/movies -bp\n```\n\n----------------------------------------\n\nTITLE: Installing WebSockets Server Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the WebSockets server using npm.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/websockets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Artillery with a Custom Plugin Path\nDESCRIPTION: This command runs Artillery with a debug flag and a custom plugin path pointing to the current directory's parent, executing the test.yml file. The DEBUG flag enables debug messages from the hello-world plugin.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/artillery-plugin-hello-world/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nARTILLERY_PLUGIN_PATH=`pwd`/.. DEBUG=plugin:hello-world artillery run test.yml\n```\n\n----------------------------------------\n\nTITLE: Debugging New Relic Plugin in Artillery\nDESCRIPTION: This command demonstrates how to enable debugging for the New Relic plugin in Artillery. It sets the DEBUG environment variable to output helpful messages when sending metrics to New Relic.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-publish-metrics/lib/newrelic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=plugin:publish-metrics:newrelic artillery run my-script.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Artillery with Token Refresh Example\nDESCRIPTION: Command to run the Artillery test script with HTTP debugging enabled to see token refresh in action. The DEBUG=http flag enables detailed logging of HTTP requests.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/refresh-auth-token/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG=http artillery run refresh.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies for Artillery Testing\nDESCRIPTION: Command to install the dependencies required for the API server that will be tested with Artillery.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/track-custom-metrics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies for HTTP Testing\nDESCRIPTION: Command to install the dependencies required for the Express.js HTTP server included in the example.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/using-cookies/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting up GitLab CI/CD Pipeline for Artillery Tests\nDESCRIPTION: GitLab CI/CD configuration that automates load testing on code push, generates HTML reports, and stores test artifacts for later analysis.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/gitlab-ci-cd/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.gitlab-ci.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Artillery for Playwright Tests\nDESCRIPTION: Command to install Artillery via npm, which is a prerequisite for running the authentication reuse example.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-authentication/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install artillery\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Socket.IO Server\nDESCRIPTION: This command installs the necessary dependencies for the Socket.IO server. It should be run in the project directory before starting the server.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/socket-io/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying Movie Browser App to Kubernetes\nDESCRIPTION: This shell command applies a Kubernetes manifest to deploy the Movie Browser HTTP test server to the cluster.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f k8s-deploy.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Project\nDESCRIPTION: Command to install all necessary npm dependencies required to run both the Playwright and Artillery tests.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-typescript/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies\nDESCRIPTION: Command to install the required server dependencies using npm\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-socketio-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Twirp Server\nDESCRIPTION: Command to start the Twirp server after dependencies have been installed.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/rpc-twirp-with-custom-function/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: Command to start the server after dependencies are installed\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-socketio-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Express.js HTTP Server in Artillery Example\nDESCRIPTION: This command installs the necessary Node.js dependencies for running the example Express.js server that will be load tested by Artillery.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/scenario-weights/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Deployment Status\nDESCRIPTION: This shell command retrieves the status of all Kubernetes resources related to the movie-browser application.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/k8s-testing-with-kubectl-artillery/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get all -l app=movie-browser\n```\n\n----------------------------------------\n\nTITLE: Starting the Express.js HTTP Server\nDESCRIPTION: Command to start the Express.js HTTP server that will be used for the cookie testing examples. The server will listen on http://localhost:3000/.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/using-cookies/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run app:start\n```\n\n----------------------------------------\n\nTITLE: Starting SOAP Server\nDESCRIPTION: Command to start the sample SOAP server that provides the AddNumbersService\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/soap-with-custom-function/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: GET Movies List Response\nDESCRIPTION: Sample JSON response from the GET /movies endpoint showing an array of movie objects with details like id, release date, director, title, genre, IMDB rating, and running time\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-socketio-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"releaseDate\": \"Dec 18 1985\",\n    \"director\": \"Terry Gilliam\",\n    \"title\": \"Brazil\",\n    \"genre\": \"Black Comedy\",\n    \"imdbRating\": 8,\n    \"runningTimeMin\": 136\n  },\n  {\n    \"id\": 2,\n    \"releaseDate\": \"Feb 16 1996\",\n    \"director\": \"Harold Becker\",\n    \"title\": \"City Hall\",\n    \"genre\": \"Drama\",\n    \"imdbRating\": 6.1,\n    \"runningTimeMin\": 111\n  }\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Tests with Weighted Scenarios\nDESCRIPTION: This command executes the Artillery test script 'scenario-weights.yml' which demonstrates how to set different weights for scenarios to control virtual user distribution.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/scenario-weights/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nartillery run scenario-weights.yml\n```\n\n----------------------------------------\n\nTITLE: GET Single Movie Response\nDESCRIPTION: Sample JSON response from the GET /movies/:id endpoint showing details for a single movie\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-socketio-server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 35,\n  \"releaseDate\": \"Oct 01 1999\",\n  \"director\": \"David O. Russell\",\n  \"title\": \"Three Kings\",\n  \"genre\": \"Action\",\n  \"imdbRating\": 7.3,\n  \"runningTimeMin\": 115\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Artillery Engine for PostHog via npm\nDESCRIPTION: Command to install the Artillery engine for PostHog globally using npm. This is the first step to use the plugin for load testing.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-engine-posthog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g artillery-engine-posthog\n```\n\n----------------------------------------\n\nTITLE: Testing ASCII Art Service Endpoint\nDESCRIPTION: Command to test the armadillo endpoint of the ASCII art service using skytrace probe.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/multiple-scenario-specs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nskytrace probe http://asciizoo.artillery.io:8080/armadillo -b\n```\n\n----------------------------------------\n\nTITLE: Starting the API Server for Artillery Testing\nDESCRIPTION: Command to start the API server that listens on http://localhost:3000/ which will be the target of Artillery tests.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/track-custom-metrics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Starting the WebSockets Server\nDESCRIPTION: This command starts the WebSockets server, which will listen on ws://localhost:8888.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/websockets/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run server\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Tests Directly\nDESCRIPTION: Alternative command for running Artillery tests directly using npx, with the --solo and -q flags for quiet mode execution.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/table-driven-functional-tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx artillery run --solo -q functional-test.yml\n```\n\n----------------------------------------\n\nTITLE: Installing SOAP Server Dependencies\nDESCRIPTION: Command to install the required dependencies for the SOAP server example\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/soap-with-custom-function/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd server && npm install\n```\n\n----------------------------------------\n\nTITLE: Describing Artillery Licensing in Markdown\nDESCRIPTION: This snippet uses Markdown to explain the licensing terms for Artillery, including MPL 2.0 for most code and BSL for Azure-specific modules.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## License\n\n* Most of the code in this repository is licensed under the terms of the [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/) license.\n* Some Azure-specific modules are licensed under the terms of the [BSL license](https://mariadb.com/bsl-faq-adopting/). See [LICENSE-BSL.txt](./LICENSE-BSL.txt) for details. You may use Artillery on Azure for evaluation and proof-of-concept purposes, but commercial and/or production usage requires a commercial license.\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Artillery Test Organization\nDESCRIPTION: Shows the file layout for organizing Artillery tests with separate config and scenario files.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/multiple-scenario-specs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── README.md\n├── common-config.yml\n└── scenarios\n    ├── armadillo.yml\n    ├── dino.yml\n    └── pony.yml\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests from E2E Directory\nDESCRIPTION: Command to execute the pure Playwright test example located in the e2e directory after installation of dependencies.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/browser-playwright-reuse-typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd e2e && npx playwright run\n```\n\n----------------------------------------\n\nTITLE: Displaying Artillery Logo and Links in Markdown\nDESCRIPTION: This snippet uses Markdown and HTML to create a centered layout for the Artillery logo, title, and important links. It also includes badges for npm downloads.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div align=\"center\">\n  <a href=\"./packages/artillery#readme\"><img src=\"./packages/artillery/artillery-logo.svg\" width=\"80\"></a>\n  <h1>Artillery</h1>\n<p align=\"center\">\n  <a href=\"https://www.artillery.io/docs\">Docs</a> | <a href=\"https://github.com/artilleryio/artillery/discussions\">Discussions</a> | <a href=\"https://twitter.com/artilleryio\">@artilleryio</a>\n</p>\n\n<p align=\"center\">\n  <img alt=\"npm\" src=\"https://img.shields.io/npm/dm/artillery?style=flat-square\">\n</p>\n\n\n<a href=\"https://www.artillery.io/\">\n  <img\n    src=\"https://www.artillery.io/api/og?title=The%20Complete%20Load%20Testing%20Platform\"\n  />\n</a>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example of Conventional Commit Message Format for Artillery.io\nDESCRIPTION: Demonstrates the proper format for commit messages following the commitlint conventional config. Includes a brief one-liner title in imperative mood, followed by an optional detailed explanation wrapped at 72 characters.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfeat: A brief one-liner < 50 chars, use the imperative mood\n\nFollowed by further explanation if needed, this should be wrapped at\naround 72 characters. Most commits should reference an existing\nissue, such as #101 above.\n```\n\n----------------------------------------\n\nTITLE: Referencing Artillery Test Script in YAML\nDESCRIPTION: This snippet shows the file path of the example Artillery test script for Socket.IO servers. The script can be run and visualized on the Artillery REPL.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/cicd/aws-codebuild/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests/performance/socket-io.yml\n```\n\n----------------------------------------\n\nTITLE: Cleaning Uploaded Files\nDESCRIPTION: Command to clean up the uploaded files from the 'uploads' directory after test execution.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-file-uploads/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run uploads:clean\n```\n\n----------------------------------------\n\nTITLE: Starting Netcat Server for Artillery Testing\nDESCRIPTION: This command starts a netcat server in listening mode on port 31337. It's used to receive and display the HTTP requests sent by Artillery, allowing verification of custom headers.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-set-custom-header/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnc -l 31337\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Test with Custom Header\nDESCRIPTION: This command executes the Artillery test script 'set-header.yml', which is configured to send requests with a custom HTTP header. The script likely contains the JavaScript hook function for setting the custom header.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/http-set-custom-header/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nartillery run set-header.yml\n```\n\n----------------------------------------\n\nTITLE: Incompatible With Secondary Licenses Notice Template\nDESCRIPTION: Notice text that must be included when source code is incompatible with secondary licenses under MPL 2.0.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-fake-data/LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is \"Incompatible\nWith Secondary Licenses\", as defined by\nthe Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: Installing Twirp Server Dependencies\nDESCRIPTION: Command to change directory to the twirp folder and install the necessary dependencies for the Twirp server.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/rpc-twirp-with-custom-function/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd twirp && npm install\n```\n\n----------------------------------------\n\nTITLE: Starting Socket.IO Server\nDESCRIPTION: This command starts the Socket.IO server. It runs the app.js file, which sets up a server listening on http://localhost:8080/.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/examples/socket-io/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Artillery Version Support Matrix in Markdown\nDESCRIPTION: Markdown table showing which Artillery versions receive security updates. Version 2.x.x is supported while versions 1.7.x and earlier are not supported.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.x.x   | :white_check_mark: |\n| 1.7.x   | :x:                |\n| < 1.7   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: MPL 2.0 Source Code Form License Notice\nDESCRIPTION: Standard license notice text that must be included in source code files covered by the Mozilla Public License v2.0. This notice informs recipients of the licensing terms and where to find the full license.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/core/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n      This Source Code Form is subject to the\n      terms of the Mozilla Public License, v.\n      2.0. If a copy of the MPL was not\n      distributed with this file, You can\n      obtain one at\n      http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: MPL 2.0 'Incompatible With Secondary Licenses' Notice\nDESCRIPTION: Optional license notice used when source code is designated as incompatible with secondary licenses under the Mozilla Public License v2.0. This notice clarifies the restricted licensing status of the code.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/core/LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      This Source Code Form is \"Incompatible\n      With Secondary Licenses\", as defined by\n      the Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: Source Code Form License Notice Template\nDESCRIPTION: Standard notice text that must be included in source code files to indicate they are licensed under MPL 2.0.\nSOURCE: https://github.com/artilleryio/artillery/blob/main/packages/artillery-plugin-fake-data/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is subject to the\nterms of the Mozilla Public License, v.\n2.0. If a copy of the MPL was not\ndistributed with this file, You can\nobtain one at\nhttp://mozilla.org/MPL/2.0/.\n```"
  }
]