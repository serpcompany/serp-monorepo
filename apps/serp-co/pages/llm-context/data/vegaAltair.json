[
  {
    "owner": "vega",
    "repo": "altair",
    "content": "TITLE: Encoding Channel Shorthand Options in Altair (Python)\nDESCRIPTION: This snippet compares Altair encoding shorthand syntax (e.g., x='name:Q', x='sum(name):Q') to the equivalent explicit channel encoding using alt.X. It serves as a quick reference for expressing data field, data type, and aggregation explicitly in Altair.\n\nDependencies: altair must be installed. Main parameters include the field name, optional aggregate operation, and encoding type. Input should be a valid field or aggregation string, and output will be an Altair encoding object. Limitation: Only covers field, type, and aggregate keyword combinations supported by Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nx='name:Q'  # Equivalent to alt.X('name', type='quantitative')\nx='sum(name)'  # Equivalent to alt.X('name', aggregate='sum')\nx='sum(name):Q'  # Equivalent to alt.X('name', aggregate='sum', type='quantitative')\nx='count():Q'  # Equivalent to alt.X(aggregate='count', type='quantitative')\n```\n\n----------------------------------------\n\nTITLE: Composing Logical Parameters for Multi-User Interval Selection in Altair (Python)\nDESCRIPTION: This code shows how to use logical operators to combine multiple selection parameters as inputs to a single conditional encoding. Two users, Alex and Morgan, each control a different selection box via modifier keys, and Morgan's box uses a custom brush style (BrushConfig). Dependencies are Altair and 'cars'. The rectangles are colored if they fall within either user's selection, with the chart leveraging multiple forms of user-driven input.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nalex = alt.selection_interval(\n    on=\"[pointerdown[event.altKey], pointerup] > pointermove\",\n    name='alex'\n)\nmorgan = alt.selection_interval(\n    on=\"[pointerdown[event.shiftKey], pointerup] > pointermove\",\n    mark=alt.BrushConfig(fill=\"#fdbb84\", fillOpacity=0.5, stroke=\"#e34a33\"),\n    name='morgan'\n)\n\nalt.Chart(cars).mark_rect().encode(\n    x='Cylinders:O',\n    y='Origin:O',\n    color=alt.when(alex | morgan).then(\"count()\")\n                      .otherwise(alt.value(\"grey\")),\n).add_params(\n    alex, morgan\n).properties(\n    width=300,\n    height=180\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Brushing Selection Between Charts in Altair (Python)\nDESCRIPTION: This code demonstrates linked brushing using a selection parameter, where the upper scatter plot chart is used for selection and the lower bar chart is filtered based on that selection. Dependencies include the Altair library and access to the 'cars' dataset. The brush is defined as an interval, attached to the scatter plot, and then used to filter the bar chart by selection. Expected input is the loaded 'cars' dataframe; output is a vertically concatenated interactive chart. Note: select and filter actions occur in separate sub-charts.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nbrush = alt.selection_interval()\n\npoints = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n).add_params(\n    brush\n)\n\nbars = alt.Chart(cars).mark_bar().encode(\n    x='count()',\n    y='Origin:N',\n    color='Origin:N'\n).transform_filter(\n    brush\n)\n\npoints & bars\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown and Highlighting Data\nDESCRIPTION: This snippet demonstrates using a dropdown widget to filter and highlight data points in an Altair chart. It uses `alt.binding_select` to create a dropdown for selecting 'Origin' values and `alt.selection_point` to bind the selection to the chart's data.  The color encoding changes based on the selection.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\n\ninput_dropdown = alt.binding_select(options=['Europe', 'Japan', 'USA'], name='Region ')\nselection = alt.selection_point(fields=['Origin'], bind=input_dropdown)\ncolor =\n    alt.when(selection)\n    .then(alt.Color(\"Origin:N\").legend(None))\n    .otherwise(alt.value(\"lightgray\"))\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=color,\n).add_params(\n    selection\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Input and Highlighting Data\nDESCRIPTION: This code snippet creates an Altair chart with a search input field to filter data points. It uses `alt.binding` with `input='search'` to define the search box,  `alt.selection_point` to bind it, and filters the data's opacity based on the search term. The example utilizes the `Name` field for searching and updates the chart's opacity to highlight matches.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsearch_input = alt.selection_point(\n    fields=['Name'],\n    empty=False,  # Start with no points selected\n    bind=alt.binding(\n        input='search',\n        placeholder=\"Car model\",\n        name='Search ',\n    )\n)\nalt.Chart(data.cars.url).mark_point(size=60).encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    tooltip='Name:N',\n    opacity=alt.when(search_input).then(alt.value(1)).otherwise(alt.value(0.05)),\n).add_params(\n    search_input\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Renderer for Altair in JupyterLab (Python)\nDESCRIPTION: Enables the default Altair renderer using `alt.renderers.enable('default')`. This is the recommended solution when encountering 'VegaLite 4 object' or 'VegaLite 5 object' errors in JupyterLab, which indicate an issue with the mimetype renderer support in the frontend.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable('default')\n```\n\n----------------------------------------\n\nTITLE: Defining a Bar Chart with Adjustable Corner Radius in Altair\nDESCRIPTION: This snippet demonstrates how to create a bar chart in Altair with a configurable corner radius using a range slider bound to a parameter, showcasing interactive customization of the bar shape. It requires Altair and Pandas libraries and defines a data source with categorical labels and numerical values.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ncorner_slider = alt.binding_range(min=0, max=50, step=1)\ncorner_var = alt.param(bind=corner_slider, value=0, name=\"cornerRadius\")\n\nsource = pd.DataFrame(\n    {\n        \"a\": [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"],\n        \"b\": [28, 55, 43, 91, 81, 53, 19, 87, 52],\n    }\n)\n\nalt.Chart(source).mark_bar(cornerRadius=corner_var).encode(\n    x=alt.X(\"a:N\").axis(labelAngle=0),\n    y=\"b:Q\",\n).add_params(corner_var)\n```\n\n----------------------------------------\n\nTITLE: Multi-Series Line Chart Using the Detail Channel in Altair (Python)\nDESCRIPTION: Shows how to create multi-line charts without color encoding by grouping with the 'detail' channel. Dependencies: altair, vega_datasets. Expects a DataFrame with appropriate series fields (e.g., 'symbol'); outputs lines grouped solely by 'detail', preserving color uniformity and emphasizing grouping over decoration.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line().encode(\n    x=\"date\",\n    y=\"price\",\n    detail=\"symbol\",\n)\n```\n\n----------------------------------------\n\nTITLE: Binding Altair Parameter to Dropdown for Dynamic Encoding Channel in Python\nDESCRIPTION: Illustrates how to bind an Altair parameter (`xcol_param`) to a dropdown widget (`alt.binding_select`) to dynamically change the data column mapped to an encoding channel (the x-axis in this case). A `transform_calculate` step uses the parameter's value (the selected column name) to fetch the corresponding data (`datum[{xcol_param.name}]`) for the x-encoding. This allows users to interactively select which variable is plotted on the x-axis. Assumes `data.cars.url` points to a valid data source.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndropdown = alt.binding_select(\n    options=['Horsepower', 'Displacement', 'Weight_in_lbs', 'Acceleration'],\n    name='X-axis column '\n)\nxcol_param = alt.param(\n    value='Horsepower',\n    bind=dropdown\n)\n\nalt.Chart(data.cars.url).mark_circle().encode(\n    x=alt.X('x:Q').title(''),\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n).transform_calculate(\n    x=f'datum[{xcol_param.name}]'\n).add_params(\n    xcol_param\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Bar Chart with Aggregation in Altair (Python)\nDESCRIPTION: Shows how to create a vertical bar chart representing aggregated data. It uses `mark_bar()` and encodes the categorical variable 'a' on the x-axis and the average of 'b' on the y-axis.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_bar().encode(\n    x='a',\n    y='average(b)'\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Z-Scores for Stock Prices using Window Transform in Python/Altair\nDESCRIPTION: This example shows how to normalize stock prices by computing z-scores. It uses window transform to calculate mean and standard deviation for each stock symbol, then uses calculate transform to compute the z-score, making it easier to compare price patterns across stocks with different price ranges.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/window.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nalt.Chart(data.stocks.url).transform_window(\n    mean_price='mean(price)',\n    stdev_price='stdev(price)',\n    frame=[None, None],\n    groupby=['symbol'],\n).transform_calculate(\n    z_score=(alt.datum.price - alt.datum.mean_price) / alt.datum.stdev_price,\n).mark_line().encode(\n    x='date:T',\n    y='z_score:Q',\n    color='symbol:N',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scatter Plot in Altair\nDESCRIPTION: Creates a simple scatter plot visualization using the cars dataset from vega_datasets. The chart displays Horsepower vs Miles_per_Gallon with points colored by Origin.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\n\nalt.Chart(cars).mark_circle().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding custom tooltips to a box plot in Altair\nDESCRIPTION: This code demonstrates how to incorporate custom tooltips into a box plot using Altair, replacing default tooltips with aggregated or unaggregated field information.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/boxplot.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_boxplot(extent=\"min-max\").encode(\n    alt.X(\"Miles_per_Gallon:Q\").scale(zero=False),\n    alt.Y(\"Origin:N\"),\n    alt.Tooltip(\"mean(Miles_per_Gallon)\")\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Ranges with an Altair Ranged Area Chart (Python)\nDESCRIPTION: This example demonstrates how to create a ranged area chart, useful for showing the span between two values (e.g., minimum and maximum) over a dimension. It uses both `alt.Y` (for the upper bound, e.g., `mean(temp_max)`) and `alt.Y2` (for the lower bound, e.g., `mean(temp_min)`) encodings. The chart visualizes the daily temperature range in Seattle. Requires Altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nalt.Chart(source).mark_area(opacity=0.7).encode(\n    alt.X(\"monthdate(date):T\").title(\"Date\"),\n    alt.Y(\"mean(temp_max):Q\").title(\"Daily Temperature Range (C)\"),\n    alt.Y2(\"mean(temp_min):Q\"),\n).properties(width=600, height=300)\n```\n\n----------------------------------------\n\nTITLE: Generating a Basic Area Chart in Altair (Python)\nDESCRIPTION: This example shows how to create a fundamental area chart using Altair. It visualizes the sum of unemployed individuals over time using the `unemployment_across_industries` dataset. The chart uses `mark_area()` and encodes a temporal field ('yearmonth(date)') on the X-axis and a quantitative field ('sum(count)') on the Y-axis. Requires Altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nalt.Chart(source).mark_area().encode(\n    x=\"yearmonth(date):T\",\n    y=\"sum(count):Q\",\n).properties(width=300, height=200)\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Color Encoding with a Selection in Altair\nDESCRIPTION: Creates a chart with conditional coloring based on a selection. Points inside the selection show their Origin color, while points outside the selection are colored light gray.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconditional = alt.when(brush).then(\"Origin:N\").otherwise(alt.value(\"lightgray\"))\n\nalt.Chart(cars).mark_point().encode(\n    x=\"Horsepower:Q\",\n    y=\"Miles_per_Gallon:Q\",\n    color=conditional,\n).add_params(\n    brush\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Renderer for Altair in Jupyter Notebook (Python)\nDESCRIPTION: Enables the default Altair renderer using `alt.renderers.enable('default')`. This is a potential solution when encountering 'VegaLite 4 object' or 'VegaLite 5 object' errors in the classic Jupyter Notebook, usually caused by incorrectly enabling the 'mimetype' renderer.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable('default')\n```\n\n----------------------------------------\n\nTITLE: Linking Selection Across Multiple Charts in Altair\nDESCRIPTION: Creates a compound chart with two panels that share the same selection. This allows brushing in one chart to highlight points in both charts, enabling exploration of relationships across different dimensions.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.when(brush).then(\"Origin:N\").otherwise(alt.value(\"lightgray\")),\n).properties(\n    width=250,\n    height=250\n).add_params(\n    brush\n)\n\nchart | chart.encode(x='Acceleration:Q')\n```\n\n----------------------------------------\n\nTITLE: Using Fold Transform in Altair to Reshape Wide-Form Data\nDESCRIPTION: Example of using Altair's Fold Transform to reshape wide-form data within the chart specification without preprocessing the data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(wide_form).transform_fold(\n    ['AAPL', 'AMZN', 'GOOG'],\n    as_=['company', 'price']\n).mark_line().encode(\n    x='Date:T',\n    y='price:Q',\n    color='company:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting Geographic Points on a Map with Altair (Python)\nDESCRIPTION: Shows how to create a geographic point map by layering airport locations (`mark_circle`) onto a base map of US states (`mark_geoshape`). It uses `longitude` and `latitude` encodings, tooltips, and an `albersUsa` projection. Data is sourced from `vega_datasets` airports and us_10m datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nairports = data.airports()\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\n\n# US states background\nbackground = alt.Chart(states).mark_geoshape(\n    fill=\"lightgray\",\n    stroke=\"white\"\n).properties(\n    width=500,\n    height=300,\n).project(\"albersUsa\")\n\n# airport positions on background\npoints = alt.Chart(airports).mark_circle(\n    size=10,\n    color=\"steelblue\",\n).encode(\n    longitude=\"longitude:Q\",\n    latitude=\"latitude:Q\",\n    tooltip=[\"name\", \"city\", \"state\"],\n)\n\nbackground + points\n```\n\n----------------------------------------\n\nTITLE: Multi-Series Line Chart with Varying Stroke Dashes in Altair (Python)\nDESCRIPTION: Illustrates use of the 'strokeDash' encoding to distinguish multiple lines in a chart by dash pattern, using the 'symbol' field. Prerequisites: altair, vega_datasets. Input: DataFrame with date, price, symbol; produces a chart with lines for each symbol, each using a different dash pattern for accessibility or style preferences.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line().encode(\n    x=\"date\",\n    y=\"price\",\n    strokeDash=\"symbol\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Bars for Standard Error in Altair\nDESCRIPTION: This snippet displays how to set the 'extent' property to 'stderr' to visualize standard error using Altair's error bar mark. The process involves aggregating data around the mean with error rules representing the standard error, suitable for statistical analysis. Dependencies include Altair and Vega datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nerror_bars = alt.Chart(source).mark_errorbar(extent=\"stdev\").encode(\n    x=alt.X(\"yield:Q\").scale(zero=False),\n    y=alt.Y(\"variety:N\"),\n)\n\npoints = alt.Chart(source).mark_point(filled=True, color=\"black\").encode(\n    x=alt.X(\"mean(yield)\"),\n    y=alt.Y(\"variety:N\"),\n)\n\nerror_bars + points\n```\n\n----------------------------------------\n\nTITLE: Histogram Creation by Binning Quantitative Data in Altair\nDESCRIPTION: This snippet demonstrates how to produce a histogram by binning a quantitative IMDB rating from the movies dataset, with the count of movies per bin represented on the y-axis. It provides a way to visualize distributions of continuous data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.movies.url\n\nalt.Chart(source).mark_bar().encode(\n    alt.X(\"IMDB_Rating:Q\").bin(),\n    y='count()',\n)\n```\n\n----------------------------------------\n\nTITLE: Saving an Altair Chart to an HTML File in Python\nDESCRIPTION: Shows how to persist an Altair chart visualization to a standalone HTML file named 'chart.html'. The `save()` method is called on the chart object, embedding the necessary data and Vega-Lite specification.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nchart = alt.Chart(data).mark_bar().encode(\n    x='a',\n    y='average(b)',\n)\nchart.save('chart.html')\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart to HTML using Python\nDESCRIPTION: This Python code demonstrates saving an existing Altair chart object (`chart`) directly into a self-contained HTML file named 'chart.html' using the `chart.save()` method. The resulting HTML file includes the necessary JavaScript libraries (Vega, Vega-Lite, vegaEmbed) loaded from a CDN and the chart specification to render the visualization when opened in a browser.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchart.save('chart.html')\n```\n\n----------------------------------------\n\nTITLE: Creating an Altair Dot Plot in Python\nDESCRIPTION: Shows how to create a simple dot plot using Altair's `mark_point()` by encoding a single quantitative axis (`x`). It uses the `IMDB_Rating` field from the `vega_datasets` movies dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.movies()\nalt.Chart(source).mark_point().encode(\n    x=\"IMDB_Rating:Q\"\n)\n```\n\n----------------------------------------\n\nTITLE: Geo Text Visualization with Altair (Python)\nDESCRIPTION: This code generates a map displaying US state capitals with text labels. It uses geographic data from vega_datasets for both the map and capital locations. States are rendered as light gray shapes, while capital cities are marked with orange circles and labeled with their names, positioned using latitude and longitude coordinates.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/text.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\n\nsource = data.us_state_capitals()\n\nbackground = alt.Chart(states).mark_geoshape(\n    fill=\"lightgray\",\n    stroke=\"white\",\n).properties(\n    width=750,\n    height=500,\n).project(\"albersUsa\")\n\nline = alt.Chart(source).mark_text(dy=-10).encode(\n    latitude=\"lat:Q\",\n    longitude=\"lon:Q\",\n    text=\"city:N\"\n)\n\npoint = alt.Chart(source).mark_circle().encode(\n    latitude=\"lat:Q\",\n    longitude=\"lon:Q\",\n    color=alt.value(\"orange\"),\n)\n\nbackground + line + point\n```\n\n----------------------------------------\n\nTITLE: Multi-Part Line Chart with Custom StrokeDash Mapping in Altair (Python)\nDESCRIPTION: Creates a line chart from a pandas DataFrame with different strokeDash styles for predicted vs. observed values using a boolean field. Needs altair, pandas. Expects fields 'a', 'b', 'predicted'; outputs a chart where parts of the line change dash style, supporting model visualization or segmented trends.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    \"a\": [\"A\", \"B\", \"D\", \"E\", \"E\", \"G\", \"H\"],\n    \"b\": [28, 55, 91, 81, 81, 19, 87],\n    \"predicted\": [False, False, False, False, True, True, True]\n})\n\nalt.Chart(source).mark_line().encode(\n    x=\"a:O\",\n    y=\"b:Q\",\n    strokeDash=\"predicted:N\"\n)\n```\n\n----------------------------------------\n\nTITLE: Imputing Missing Values with Transform - Python\nDESCRIPTION: This example shows how to impute missing values using a transform.  It's equivalent to the constant imputation example from before, but uses `transform_impute` instead of imputing within the encoding. It specifies the `impute`, `key`, `value`, and `groupby` parameters. Dependencies include Altair and pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nchart = alt.Chart(data).transform_impute(\n    impute='value',\n    key='t',\n    value=0,\n    groupby=['variable']\n).mark_line(point=True).encode(\n    x='t:Q',\n    y='value:Q',\n    color='variable:N'\n)\nbackground + chart\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Long-Form Data in Altair\nDESCRIPTION: Example of creating a multi-line chart using long-form data where each row represents a single observation with metadata.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlong_form = pd.DataFrame({'Date': ['2007-10-01', '2007-11-01', '2007-12-01',\n                                    '2007-10-01', '2007-11-01', '2007-12-01',\n                                    '2007-10-01', '2007-11-01', '2007-12-01'],\n                           'company': ['AAPL', 'AAPL', 'AAPL',\n                                       'AMZN', 'AMZN', 'AMZN',\n                                       'GOOG', 'GOOG', 'GOOG'],\n                           'price': [189.95, 182.22, 198.08,\n                                      89.15,  90.56,  92.64,\n                                     707.00, 693.00, 691.48]})\n```\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(long_form).mark_line().encode(\n  x='Date:T',\n  y='price:Q',\n  color='company:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Line Highlighting on Hover in Altair (Python)\nDESCRIPTION: Demonstrates interactivity by using a selection_point object to highlight a line when hovered in a multi-series line chart. Requires altair, vega_datasets. Inputs: DataFrame with date, price, symbol. Outputs an overlaid chart, including invisible points for selection and lines with conditional sizing for the highlighted symbol; suitable for interactive dashboards.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nhighlight = alt.selection_point(\n    on=\"pointerover\", fields=[\"symbol\"], nearest=True\n)\n\nbase = alt.Chart(source).encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    color=\"symbol:N\"\n)\n\npoints = base.mark_circle().encode(\n    opacity=alt.value(0)\n).add_params(\n    highlight\n).properties(\n    width=600\n)\n\nlines = base.mark_line().encode(\n    size=alt.when(~highlight).then(alt.value(1)).otherwise(alt.value(3))\n)\n\npoints + lines\n```\n\n----------------------------------------\n\nTITLE: Using transform_calculate with String Expressions in Altair (Python)\nDESCRIPTION: This snippet demonstrates how to use Altair's `transform_calculate` method to add new fields ('x', 'y') to a Pandas DataFrame. The new fields are defined using string-based Vega expressions involving trigonometric functions (cos, sin) and constants (PI) applied to the existing 't' field. The resulting line chart plots these calculated fields. Requires `altair` and `pandas` libraries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/calculate.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ndata = pd.DataFrame({'t': range(101)})\n\nalt.Chart(data).mark_line().encode(\n    x='x:Q',\n    y='y:Q',\n    order='t:Q'\n).transform_calculate(\n    x='cos(datum.t * PI / 50)',\n    y='sin(datum.t * PI / 25)'\n)\n```\n\n----------------------------------------\n\nTITLE: Using Altair's Interactive() Method for Scale Binding in Python\nDESCRIPTION: Shows a concise way to enable interactive panning and zooming (scale binding) on an Altair chart using the `.interactive()` method. This is a shorthand for creating an interval selection and binding it to the scales as shown in the previous example. Requires a DataFrame named `cars`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N',\n).interactive()\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart as PNG with Custom Scale Factor using Python\nDESCRIPTION: This Python snippet illustrates how to change the physical size of the output PNG image while preserving the default resolution (72 PPI). Using the `scale_factor=2` argument in `chart.save()` results in a 'chart.png' file that is twice the default dimensions. Requires `vl-convert`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchart.save('chart.png', scale_factor=2)\n```\n\n----------------------------------------\n\nTITLE: Using Cartesian Coordinates with Identity Projection\nDESCRIPTION: Shows how to use raw cartesian coordinates instead of geographic projections by using the identity projection type.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_sel).mark_geoshape().project(\n    type='identity',\n    reflectY=True\n)\n```\n\n----------------------------------------\n\nTITLE: Ranged Dot Plot with Line and Point Composition in Altair (Python)\nDESCRIPTION: Constructs a composite visualization of a dot plot augmented with connecting lines, using data filtering and encoding channels for countries and years. Prerequisites: altair, vega_datasets. Inputs: DataFrame with 'country', 'life_expect', 'year'; outputs a chart combining a filtered line for country-year values and colored point markers, demonstrating complex layering and transformation.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.countries()\n\nbase = alt.Chart(source).encode(\n    alt.X(\"life_expect:Q\")\n        .scale(zero=False)\n        .title(\"Life Expectancy (years)\"),\n    alt.Y(\"country:N\")\n        .axis(offset=5, ticks=False, minExtent=70, domain=False)\n        .title(\"Country\")\n).transform_filter(\n    alt.FieldOneOfPredicate(field=\"country\", oneOf=[\"China\", \"India\", \"United States\", \"Indonesia\", \"Brazil\"])\n)\n\nline = base.mark_line().encode(\n    detail=\"country\",\n    color=alt.value(\"#db646f\")\n).transform_filter(\n    alt.FieldOneOfPredicate(field=\"year\", oneOf=[1995, 2000])\n)\n\npoint = base.mark_point(filled=True).encode(\n    alt.Color(\"year\").scale(range=[\"#e6959c\", \"#911a24\"], domain=[1995, 2000]),\n    size=alt.value(100),\n    opacity=alt.value(1),\n)\n\nline + point\n```\n\n----------------------------------------\n\nTITLE: Building a Normalized Stacked Area Chart in Altair (Python)\nDESCRIPTION: This example demonstrates creating a normalized stacked area chart, which shows the proportion of each category over time rather than the absolute value. This is achieved by setting the `stack` property of the Y-axis encoding to `\"normalize\"`. The chart displays the percentage of unemployment across industries. Requires Altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nalt.Chart(source).mark_area().encode(\n    alt.X(\"yearmonth(date):T\").axis(format=\"%Y\", domain=False, tickSize=0),\n    alt.Y(\"sum(count):Q\").stack(\"normalize\"),\n    alt.Color(\"series:N\").scale(scheme=\"category20b\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Threshold Scale Classification for Choropleth in Altair\nDESCRIPTION: Example of using threshold scale type with manually specified cut values to divide a dataset into separate classes. This allows for precise control over class boundaries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nalt.Scale(type='threshold', domain=[0.05, 0.20])\n```\n\n----------------------------------------\n\nTITLE: Creating Layered Charts Using Altair\nDESCRIPTION: This snippet demonstrates how to create layered charts in Altair by overlaying multiple marks (e.g., line and point) on the same axes. It uses the `+` operator or `alt.layer()` function to combine charts, resulting in a `LayerChart` object that allows further interaction and customization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nstocks = data.stocks.url\n\nbase = alt.Chart(stocks).encode(\n    x='date:T',\n    y='price:Q',\n    color='symbol:N'\n).transform_filter(\n    alt.datum.symbol == 'GOOG'\n)\n\nbase.mark_line() + base.mark_point()\n```\n\nLANGUAGE: Python\nCODE:\n```\nalt.layer(\n  base.mark_line(),\n  base.mark_point(),\n  base.mark_rule()\n).interactive()\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Bar with Aggregated Confidence Interval in Altair (Python)\nDESCRIPTION: This code snippet illustrates the creation of an error bar chart, similar to an error band, using Altair with the same cars dataset. It marks the chart with 'mark_errorbar' specifying the confidence interval extent and enables ticks. The encoding matches the error band example with year on the x-axis and 'Miles_per_Gallon' on the y-axis. The snippet serves as a comparative example to error band marks, showing the difference in visual components (ticks instead of borders) and usage pattern.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorband.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nalt.Chart(source).mark_errorbar(extent=\"ci\", ticks=True).encode(\n    x=\"year(Year)\",\n    y=alt.Y(\n        \"Miles_per_Gallon:Q\",\n        scale=alt.Scale(zero=False),\n        title=\"Miles per Gallon (95% CIs)\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Area Chart in Altair (Python)\nDESCRIPTION: This snippet shows how to create a stacked area chart by adding a `Color` encoding to an area chart. Altair automatically stacks the areas based on the specified categorical field ('series' in this case). The example visualizes unemployment data across different industries over time. Requires Altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nalt.Chart(source).mark_area().encode(\n    alt.X(\"yearmonth(date):T\").axis(format=\"%Y\", domain=False, tickSize=0),\n    alt.Y(\"sum(count):Q\"),\n    alt.Color(\"series:N\").scale(scheme=\"category20b\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Renderer with Custom Settings in Altair\nDESCRIPTION: Example of enabling the PNG renderer with custom scale factor and resolution settings. Increases the chart size by the specified scale factor and sets a custom pixels-per-inch resolution.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable(\"png\", scale_factor=2, ppi=144)\n```\n\n----------------------------------------\n\nTITLE: Illustrating 1D and 2D Error Bars with Orientation and Axis Encoding\nDESCRIPTION: This snippet covers how to create 1D vertical error bars and 2D error bars with both continuous and categorical axes, utilizing Altair's encoding channels to specify orientation and error ranges. It provides visual flexibility for different data types and analysis needs. Dependencies include Altair and Vega datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\n# 1D vertical error bar\nerror_bars = alt.Chart(source).mark_errorbar().encode(\n    alt.Y(\"yield:Q\").scale(zero=False)\n)\n\npoints = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\"\n).encode(\n    alt.Y(\"mean(yield)\")\n)\n\nerror_bars + points\n\n# 2D error bar with mixed axes\nerror_bars_2d = alt.Chart(source).mark_errorbar(extent=\"stdev\").encode(\n    alt.Y(\"yield:Q\").scale(zero=False),\n    alt.X(\"variety:N\"),\n)\n\npoints_2d = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\",\n).encode(\n    alt.Y(\"mean(yield)\"),\n    alt.X(\"variety:N\"),\n)\n\nerror_bars_2d + points_2d\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pre-Aggregated Error Band Data with Low and High Ranges in Altair (Python)\nDESCRIPTION: This example demonstrates how to visualize already pre-aggregated data containing lower and upper bounds ('ci0' and 'ci1') for an error band along with center values using Altair. A Pandas DataFrame defines the sample data. The 'mark_errorband' uses 'y' and 'y2' encodings to specify the range, with a scale preventing zero baseline. A line chart with mean center values overlays the band by layering two charts. This approach avoids automatic aggregation and directly renders ranged marks from precomputed error metrics.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorband.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame(\n    {\n        \"ci1\": [23.5007, 25.8214, 26.4472, 27.7074],\n        \"ci0\": [19.6912, 20.8554, 21.9749, 22.6203],\n        \"center\": [21.5735, 23.3750, 24.0611, 25.0931],\n        \"Year\": [189302400000, 220924800000, 252460800000, 283996800000],\n    }\n)\n\nband = alt.Chart(source).mark_errorband().encode(\n    alt.Y(\n        \"ci1:Q\",\n        scale=alt.Scale(zero=False),\n        title=\"Mean of Miles per Gallon (95% CIs)\"\n    ),\n    alt.Y2(\"ci0:Q\"),\n    alt.X(\"year(Year)\"),\n)\n\nline = alt.Chart(source).mark_line().encode(\n    alt.Y(\"center:Q\"),\n    alt.X(\"year(Year)\")\n)\n\nband + line\n```\n\n----------------------------------------\n\nTITLE: Faceted Charts for Subsets of Data\nDESCRIPTION: This snippet introduces faceted charts that create small multiples by partitioning data into subsets. Each facet displays a separate chart based on data filtering, enabling comparative visualization across categories.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\niris = data.iris.url\n\nalt.Chart(iris).mark_point().encode(\n    x='petalLength:Q',\n    y='petalWidth:Q',\n    color='species:N'\n).properties(\n    # Additional facet configuration would appear here\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Wind Vector Map with Altair Point Marks (Python)\nDESCRIPTION: Demonstrates using `mark_point(shape='wedge', filled=True)` along with `latitude`, `longitude`, `color`, `angle`, and `size` encodings to visualize wind direction and speed. It uses the `vega_datasets` windvectors dataset and applies an `equalEarth` map projection.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.windvectors()\n\nalt.Chart(source).mark_point(shape=\"wedge\", filled=True).encode(\n    latitude=\"latitude\",\n    longitude=\"longitude\",\n    color=alt.Color(\"dir\").scale(domain=[0, 360], scheme=\"rainbow\").legend(None),\n    angle=alt.Angle(\"dir\").scale(domain=[0, 360], range=[180, 540]),\n    size=alt.Size(\"speed\").scale(rangeMax=500),\n).project(\"equalEarth\")\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data with Encoding in Altair (Python)\nDESCRIPTION: This snippet demonstrates aggregating data within the encoding of an Altair chart. It creates a bar chart that calculates the mean acceleration grouped by the number of cylinders. It uses the shorthand syntax 'mean(Acceleration):Q' within the x-encoding to specify the aggregation. Requires the altair and vega_datasets libraries and a dataset containing car information.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/aggregate.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\n\nalt.Chart(cars).mark_bar().encode(\n    y='Cylinders:O',\n    x='mean(Acceleration):Q',\n)\n\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data with transform_aggregate in Altair (Python)\nDESCRIPTION: This snippet demonstrates aggregating data using the transform_aggregate method in Altair. It produces a bar chart identical to the previous example but using an explicit aggregation. The code defines 'mean_acc' as the mean of 'Acceleration', grouped by 'Cylinders'. It requires the altair and vega_datasets libraries and the cars dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/aggregate.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(cars).mark_bar().encode(\n    y='Cylinders:O',\n    x='mean_acc:Q'\n).transform_aggregate(\n    mean_acc='mean(Acceleration)',\n    groupby=[\"Cylinders\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nearest Point Selection on Hover in Altair (Python)\nDESCRIPTION: This code configures a point selection that tracks the nearest point to the pointer when hovering over the plot. Dependencies include Altair and access to the function 'make_example'. The selection triggers on 'pointerover' events with 'nearest=True' and is passed to a chart, resulting in highlight of the closest data point.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\npoint_nearest = alt.selection_point(on='pointerover', nearest=True)\nmake_example(point_nearest)\n```\n\n----------------------------------------\n\nTITLE: Filtering with Selection Predicates in Altair\nDESCRIPTION: Example of using interactive selections to filter data between two charts, allowing users to click on bars in the bottom chart to filter data in the top chart.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\npop = data.population.url\n\nselection = alt.selection_point(fields=['year'])\n\ntop = alt.Chart(width=600, height=200).mark_line().encode(\n    x=\"age:O\",\n    y=\"sum(people):Q\",\n    color=\"year:O\"\n).transform_filter(\n    selection\n)\n\ncolor = alt.when(selection).then(alt.value(\"steelblue\")).otherwise(alt.value(\"lightgray\"))\nbottom = alt.Chart(width=600, height=100).mark_bar().encode(\n    x=\"year:O\",\n    y=\"sum(people):Q\",\n    color=color\n).add_params(\n    selection\n)\n\nalt.vconcat(top, bottom, data=pop)\n```\n\n----------------------------------------\n\nTITLE: Plotting Ordered Airport Path with Altair mark_line and Data Lookup in Python\nDESCRIPTION: Constructs an Altair chart to draw a path connecting airports in a specified order by encoding latitude and longitude from the previously defined source DataFrame. The chart uses mark_line and encodes the 'order' property to determine drawing sequence. It applies a lookup transformation to fetch coordinates using airport codes from the LookupData object. This chart overlays as a line over the geographic background, showing the airport route across the US.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nline = alt.Chart(source).mark_line().encode(\n    latitude=\"latitude:Q\",\n    longitude=\"longitude:Q\",\n    order=\"order\"\n).transform_lookup(\n    lookup=\"airport\",\n    from_=lookup_data\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Fold Transform in Altair for Wide-to-Long Data Conversion Using Python\nDESCRIPTION: This snippet demonstrates using the fold transform from Altair to convert a wide-form pandas DataFrame into a long-form structure directly for visualization purposes. It requires numpy and pandas for data preparation and Altair for applying the transform. The example folds columns 'A', 'B', and 'C' into two new fields, 'key' (column names) and 'value' (values), enabling multi-series plotting based on category names. The expected input is a DataFrame with multiple category columns alongside a date field, and the output is an Altair Chart with a line mark encoding date on the x-axis, the folded values on the y-axis, and color by the category key.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/fold.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport altair as alt\n\nrand = np.random.RandomState(0)\ndata = pd.DataFrame({\n    'date': pd.date_range('2019-01-01', freq='D', periods=30),\n    'A': rand.randn(30).cumsum(),\n    'B': rand.randn(30).cumsum(),\n    'C': rand.randn(30).cumsum(),\n})\n\nalt.Chart(data).transform_fold(\n    ['A', 'B', 'C'],\n).mark_line().encode(\n    x='date:T',\n    y='value:Q',\n    color='key:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Random Data Subsets with Altair in Python\nDESCRIPTION: This snippet loads the cars dataset and creates two Altair charts: one displaying the full dataset and another displaying a random sample of 100 rows using the transform_sample method. It demonstrates how to perform a sampling transformation and combine the full and sampled charts side by side using Altair's chart concatenation. Dependencies include Altair and vega_datasets. The sample size is specified as an integer, and the result visualizes variations between the complete data and a randomized subset. Inputs: cars dataset. Outputs: chart visualization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/sample.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n).properties(\n    width=200,\n    height=200\n)\n\nchart | chart.transform_sample(100)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Square Marks Using Altair in Python\nDESCRIPTION: This snippet demonstrates how to generate a scatter plot with square marks using the Altair visualization library. It imports Altair and a dataset from vega_datasets, defines the data source, and constructs a chart by applying the ``mark_square()`` method. The encoding maps quantitative data fields \"Horsepower\" and \"Miles_per_Gallon\" to the x and y axes, respectively. The snippet requires the altair and vega_datasets Python packages.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/square.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_square().encode(\n   x=\"Horsepower:Q\",\n   y=\"Miles_per_Gallon:Q\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Selection Interval in Altair\nDESCRIPTION: Creates an interval selection (brush) parameter that can be used for interactive brushing and highlighting in charts. This allows users to select regions by clicking and dragging.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbrush = alt.selection_interval()\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying an Interval Selection in Altair (Python)\nDESCRIPTION: This code shows how to create a basic interval selection using selection_interval, and apply it to a heatmap using the factory function. It requires Altair, and a predefined function 'make_example'. The interval variable creates an interactive box selection; expected input is a valid dataset and selector, output is a heatmap linked to the selected range.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ninterval = alt.selection_interval()\nmake_example(interval)\n```\n\n----------------------------------------\n\nTITLE: Rendering US States Map Background with Altair mark_geoshape in Python\nDESCRIPTION: Draws a map of US states as the background using Altair's geoshape mark. Requires the states TopoJSON source. The chart is sized at 750x500 pixels, colors the states light gray, and uses white borders. The projection is set to 'albersUsa', suitable for US data visualizations. This chart serves as the base layer for overlaying additional geographic marks.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nbackground = alt.Chart(states).mark_geoshape(\n    fill=\"lightgray\",\n    stroke=\"white\"\n).properties(\n    width=750,\n    height=500,\n).project(\"albersUsa\")\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Span Horizontal Rules to Represent Mean Price with Altair in Python\nDESCRIPTION: This snippet creates an Altair chart visualizing mean stock prices as horizontal rules spanning the width of the plot. It encodes the y-position with mean price and colors by stock symbol. The rule marks have a fixed thickness via size encoding. Dependencies include Altair and Vega datasets. Input is a stocks dataset; output is a layered chart highlighting average values as annotated horizontal lines.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/rule.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_rule().encode(\n    y=\"mean(price):Q\",\n    size=alt.value(2),\n    color=\"symbol:N\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a configurable rectangle with Altair in Python\nDESCRIPTION: This code defines a customizable rectangle chart with interactive range sliders for properties like position, dimensions, and corner radius, enabling dynamic visualization adjustments. It uses Altair's Chart object, mark_rect method, encoding, and parameter binding for interactivity.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/rect.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\nx_slider = alt.binding_range(min=1, max=100, step=1, name=\"x\")\nx_var = alt.param(bind=x_slider, value=25)\n\nx2_slider = alt.binding_range(min=1, max=100, step=1, name=\"x2\")\nx2_var = alt.param(bind=x2_slider, value=75)\n\ny_slider = alt.binding_range(min=1, max=100, step=1, name=\"y\")\ny_var = alt.param(bind=y_slider, value=25)\n\ny2_slider = alt.binding_range(min=1, max=100, step=1, name=\"y2\")\ny2_var = alt.param(bind=y2_slider, value=75)\n\ncornerRadius_slider = alt.binding_range(min=0, max=50, step=1)\ncornerRadius_var = alt.param(bind=cornerRadius_slider, value=0, name=\"cornerRadius\")\n\nalt.Chart().mark_rect(cornerRadius=cornerRadius_var, color=\"orange\").encode(\n    x=alt.XDatum(x_var, type=\"quantitative\", scale=alt.Scale(domain=[0, 100])),\n    x2=alt.X2Datum(x2_var),\n    y=alt.XDatum(y_var, type=\"quantitative\", scale=alt.Scale(domain=[0, 100])),\n    y2=alt.X2Datum(y2_var),\n).add_params(x_var, x2_var, y_var, y2_var, cornerRadius_var)\n```\n\n----------------------------------------\n\nTITLE: Plotting Hourly Temperature Data with Altair\nDESCRIPTION: This snippet demonstrates plotting hourly temperature data in Seattle using Altair. It imports the necessary libraries and creates a line chart with date on the x-axis and temperature on the y-axis. It uses data from vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/timeunit.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ntemps = data.seattle_temps.url\n\nalt.Chart(temps).mark_line().encode(\n    x='date:T',\n    y='temp:Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Encoding with Multiple Parameter Branches in Altair (Python)\nDESCRIPTION: This code demonstrates use of chained conditional logic via Altair's 'when' for branching on multiple parameters. Hovered points are colored yellow, but if clicked, red color takes precedence. Altair, the 'cars' dataset, and two selection parameters are required. The snippet outputs a scatter plot with conditional fill and sizing logic based on pointer state.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nclick = alt.selection_point(empty=False)\nhover = alt.selection_point(on='pointerover', empty=False)\n\npoints = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    fill=(\n        alt.when(click)\n        .then(alt.value('red'))\n        .when(hover)\n        .then(alt.value('gold'))\n    ),\n    size=alt.when(hover).then(alt.value(1000))\n).add_params(\n    click, hover\n)\n\npoints\n```\n\n----------------------------------------\n\nTITLE: Binding Altair Interval Selection to Chart Scales in Python\nDESCRIPTION: Demonstrates binding an Altair interval selection (`alt.selection_interval`) directly to the chart's scales (`bind='scales'`). This enables interactive panning and zooming on the scatter plot, where the selection interval updates automatically based on the visible domain of the x and y axes. Requires a DataFrame named `cars`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nselection = alt.selection_interval(bind='scales')\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N',\n).add_params(\n    selection\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a min-max extent box plot with altair's mark_boxplot()\nDESCRIPTION: This snippet illustrates creating a box plot with extent set to \"min-max\", where whiskers span from minimum to maximum data points with no outliers displayed, encoding both 'Miles_per_Gallon' and 'Origin' variables.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/boxplot.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_boxplot(extent=\"min-max\").encode(\n    alt.X(\"Miles_per_Gallon:Q\").scale(zero=False),\n    alt.Y(\"Origin:N\")\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing Vertical Concatenation with Altair\nDESCRIPTION: This snippet demonstrates vertical concatenation of two charts using the `&` operator or `alt.vconcat()` function. It includes an example of two linked views with a brush interaction, stacked vertically.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.sp500.url\n\nbrush = alt.selection_interval(encodings=['x'])\n\nbase = alt.Chart(source).mark_area().encode(\n    x = 'date:T',\n    y = 'price:Q'\n).properties(\n    width=600,\n    height=200\n)\n\nupper = base.encode(alt.X('date:T').scale(domain=brush))\n\nlower = base.properties(\n    height=60\n).add_params(brush)\n\nalt.vconcat(upper, lower)\n```\n\nLANGUAGE: Python\nCODE:\n```\nupper & lower\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Series Colored Line Chart in Altair (Python)\nDESCRIPTION: Shows how to plot multiple time series in a single chart by encoding 'color' with the 'symbol' field using Altair. Dependencies: altair, vega_datasets. Requires a DataFrame with date, price, and symbol; the output is a multi-line chart with each line colored by symbol for clear group distinction.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line().encode(\n    x=\"date\",\n    y=\"price\",\n    color=\"symbol\",\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Layered Geographical Visualization with Altair in Python\nDESCRIPTION: Combines the US states background and airport route line charts using Altair's layering. The result is a single visualization displaying the US map with a polyline connecting specified airports in order. Depends on all previous chart definitions. The output is a layered Altair chart intended for rendering in supported environments (Jupyter, web, etc.).\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbackground + line\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Map with GeoDataFrame in Altair\nDESCRIPTION: Loads Natural Earth 110m Cultural Vectors dataset using geopandas and creates a basic map using mark_geoshape with default styling and projection.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\nurl = \"https://naciscdn.org/naturalearth/110m/cultural/ne_110m_admin_0_countries.zip\"\ngdf_ne = gpd.read_file(url)  # zipped shapefile\ngdf_ne = gdf_ne[[\"NAME\", \"CONTINENT\", \"POP_EST\", 'geometry']]\n\nalt.Chart(gdf_ne).mark_geoshape()\n```\n\n----------------------------------------\n\nTITLE: Overlaying Custom-Styled Points on a Line Chart in Altair (Python)\nDESCRIPTION: Demonstrates configuration of overlay points with custom fill and stroke (not filled, white center) atop a line chart for visual emphasis. Needs altair, vega_datasets. Input: DataFrame with time series data; output includes lines and non-filled, white-centered points, enabling alternative point styling through OverlayMarkDef.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line(\n    point=alt.OverlayMarkDef(filled=False, fill=\"white\")\n).encode(\n    x=\"year(date)\",\n    y=\"mean(price):Q\",\n    color=\"symbol:N\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using transform_calculate with alt.expr in Altair (Python)\nDESCRIPTION: This snippet illustrates using `transform_calculate` with Altair's `expr` module (`alt.expr`) to construct Vega expressions using Python syntax. It achieves the same result as the string-based example (calculating 'x' and 'y' from 't') but offers benefits like syntax checking and tab completion. Requires the `altair` library and assumes the `data` DataFrame is pre-defined.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/calculate.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Assumes 'data' DataFrame is defined as in the previous example\nalt.Chart(data).mark_line().encode(\n    x='x:Q',\n    y='y:Q',\n    order='t:Q'\n).transform_calculate(\n    x=alt.expr.cos(alt.datum.t * alt.expr.PI / 50),\n    y=alt.expr.sin(alt.datum.t * alt.expr.PI / 25)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Altair Encoding Bin Python\nDESCRIPTION: Demonstrates creating a histogram by applying the `bin()` transform directly to a quantitative ('Q') field ('IMDB_Rating') within the x-axis encoding. The y-axis is set to 'count()' to show frequency. Requires the Altair library and the 'movies' dataset from `vega_datasets`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/bin.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nmovies = data.movies.url\n\nalt.Chart(movies).mark_bar().encode(\n    alt.X(\"IMDB_Rating:Q\").bin(),\n    y='count()',\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Regression Transform in Altair Python\nDESCRIPTION: This Python snippet demonstrates how to generate synthetic data using numpy and pandas, create an Altair chart with scatter points, and then overlay a linear regression line using the `transform_regression` method. It shows the basic setup for plotting both the raw data and the smoothed trend line computed by the transform.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/regression.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(42)\nx = np.linspace(0, 10)\ny = x - 5 + np.random.randn(len(x))\n\ndf = pd.DataFrame({'x': x, 'y': y})\n\nchart = alt.Chart(df).mark_point().encode(\n    x='x',\n    y='y'\n)\n\nchart + chart.transform_regression('x', 'y').mark_line()\n```\n\n----------------------------------------\n\nTITLE: Constructing a Basic Stacked Bar Chart with Altair\nDESCRIPTION: This snippet demonstrates how to create a simple stacked bar chart using Altair by encoding data grouped by 'year' and 'variety', with colors representing different 'site' categories. It sets properties like width for presentation. Dependencies include Altair and vega_datasets. The input is a data source, and the output is a configured bar chart.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/stack.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nalt.Chart(source).mark_bar().encode(\n    column='year:O',\n    x='yield:Q',\n    y='variety:N',\n    color='site:N'\n).properties(width=220)\n```\n\n----------------------------------------\n\nTITLE: Method-Based Channel Options Syntax in Altair\nDESCRIPTION: Demonstrates the method-based syntax for setting channel options, introduced in Altair 5.0. This example sets axis options using method chaining rather than keyword arguments.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    alt.X('Horsepower').axis(tickMinStep=50),\n    alt.Y('Miles_per_Gallon').title('Miles per Gallon'),\n    color='Origin',\n    shape='Origin'\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing a Stacked Bar Chart with Explicit Stacked Values Using transform_stack\nDESCRIPTION: This snippet shows how to manually construct a stacked bar chart by explicitly computing stacked values using the transform_stack method. It specifies parameters like 'stack', 'as_', 'groupby', and 'sort' for customization. Dependencies include Altair and vega_datasets. Inputs include the data source and configuration options; the output is a chart with explicit x and x2 encodings to represent stacked segments.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/stack.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nalt.Chart(source).transform_stack(\n    stack='yield',\n    as_=['yield_1', 'yield_2'],\n    groupby=['year', 'variety'],\n    sort=[alt.SortField('site', 'descending')]\n).mark_bar().encode(\n    column='year:O',\n    x=alt.X('yield_1:Q').title('yield'),\n    x2='yield_2:Q',\n    y='variety:N',\n    color='site:N',\n    tooltip=['site', 'yield', 'variety']\n).properties(width=220)\n```\n\n----------------------------------------\n\nTITLE: Creating a Choropleth Map\nDESCRIPTION: Creates a choropleth map by encoding the POP_EST column to the color channel, allowing visualization of population distribution across regions.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_sel).mark_geoshape().encode(\n    color='POP_EST'\n)\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart with Color Encoding in Altair\nDESCRIPTION: This code creates a stacked bar chart using the barley dataset, encoding the variety on the x-axis, total yield on y, and site as a color channel to differentiate segments. It also mentions customizing the color scale for aesthetic purposes.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nalt.Chart(source).mark_bar().encode(\n    x=\"variety\",\n    y=\"sum(yield)\",\n    color=\"site\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using constant color with 'value' for the rule mark in Altair in Python\nDESCRIPTION: Shows how to color a rule mark with a fixed color independent of the data or scales by using 'alt.value'. Useful for static annotations that should stand out or match specific styling requirements.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nbase = alt.Chart(source)\nlines = base.mark_line().encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    color=\"symbol:N\"\n)\nrule = base.mark_rule(strokeDash=[2, 2]).encode(\n    x=alt.datum(alt.DateTime(year=2006)),\n    color=alt.value(\"red\")\n)\n\nlines + rule\n```\n\n----------------------------------------\n\nTITLE: Accessing Point Selection Parameter State from Altair JupyterChart - Python\nDESCRIPTION: Shows how to create a point selection that is encoded by the 'color' channel and bound to the legend using alt.selection_point. The resulting selection is added as a parameter to the chart and wrapped in a JupyterChart. The current selected points can be accessed via 'jchart.selections.point.value', which holds a list of selected points represented as dictionaries. This data is then used to build a pandas query string to filter the dataset for only selected data points. Dependencies: Altair, vega_datasets, pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\nbrush = alt.selection_point(name=\"point\", encodings=[\"color\"], bind=\"legend\")\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.when(brush).then(\"Origin:N\").otherwise(alt.value(\"grey\")),\n).add_params(brush)\n\njchart = alt.JupyterChart(chart)\njchart\n```\n\n----------------------------------------\n\nTITLE: Filtering Geographical Data with transform_filter\nDESCRIPTION: Demonstrates focusing on a specific region (Africa) using Altair's transform_filter method.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_ne).mark_geoshape().transform_filter(\n    alt.datum.CONTINENT == 'Africa'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Line Chart with Detail Grouping (Python)\nDESCRIPTION: Demonstrates how to use the `detail` channel in Altair to group data points for drawing lines without visually encoding the grouping field. This example creates a line chart showing stock prices, where the 'symbol' field is used for grouping using the `detail` channel.\n\nDependencies: altair, vega_datasets\nInputs: Data loaded from `vega_datasets.data.stocks()`\nOutputs: An Altair chart object configured for display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/channels.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nalt.Chart(source).mark_line().encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    detail=\"symbol:N\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Sharable Vega Editor URL for Altair Chart using Python\nDESCRIPTION: This Python snippet demonstrates how to generate a URL that opens an Altair chart directly in the online Vega editor. It creates a simple scatter plot and then calls the `chart.to_url()` method, which encodes the chart's Vega-Lite specification into a URL parameter, making it easy to share or test the chart online.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nchart = alt.Chart(data.cars.url).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n)\n\nchart.to_url()\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Area Chart with Interpolation and Tension Controls in Altair (Python)\nDESCRIPTION: This snippet demonstrates how to create an interactive area chart where the line interpolation method and tension can be controlled using UI elements. It defines parameters using `alt.param` bound to `alt.binding_select` (dropdown) and `alt.binding_range` (slider). These parameters dynamically update the `interpolate` and `tension` properties of the `mark_area`. Requires Altair and Pandas libraries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ninterpolate_select = alt.binding_select(\n    options=[\n        \"basis\",\n        \"cardinal\",\n        \"catmull-rom\",\n        \"linear\",\n        \"monotone\",\n        \"natural\",\n        \"step\",\n        \"step-after\",\n        \"step-before\",\n    ],\n    name=\"interpolate\",\n)\ninterpolate_var = alt.param(bind=interpolate_select, value=\"linear\")\n\ntension_slider = alt.binding_range(min=0, max=1, step=0.05, name=\"tension\")\ntension_var = alt.param(bind=tension_slider, value=0)\n\nsource = pd.DataFrame({\"u\": [1, 2, 3, 4, 5, 6], \"v\": [28, 55, 42, 34, 36, 38]})\n\nalt.Chart(source).mark_area(interpolate=interpolate_var, tension=tension_var).encode(\n    x=\"u\", y=\"v\"\n).add_params(interpolate_var, tension_var)\n```\n\n----------------------------------------\n\nTITLE: Plotting Mean Monthly Temperature as a Bar Chart (Ordinal)\nDESCRIPTION: This snippet demonstrates plotting the mean monthly temperature as a bar chart using Altair, treating the month as an ordinal (categorical) variable. This is useful for discrete chart types where the x-axis should represent categories rather than continuous values.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/timeunit.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(temps).mark_bar().encode(\n    x='month(date):O',\n    y='mean(temp):Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Joining Original Data with Aggregated Values Using pandas Merge in Python\nDESCRIPTION: This snippet merges the original DataFrame with the aggregated mean values on the 'label' column, joining the mean statistics back into the original rows. It uses pandas.merge with suffixes to create a combined DataFrame, demonstrating the equivalent of Altair's Join Aggregate transform behavior.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/joinaggregate.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npd.merge(df, mean, on='label', suffixes=['', '_mean'])\n```\n\n----------------------------------------\n\nTITLE: 2D Binned Bubble Plot for Aggregated Counts with Altair (Python)\nDESCRIPTION: Creates a two-dimensional histogram (bubble plot) where bins for 'Horsepower' and 'Miles_per_Gallon' are encoded on the x and y axes, and the 'size' channel is used to show the count of records in each bin. Useful for visualizing joint distributions.\n\nDependencies: altair, DataFrame 'cars' with fields 'Horsepower' and 'Miles_per_Gallon'. Parameters include .bin() on both axes and 'size' with 'count()'. Output: point mark chart with bubble sizes. Limitation: Only count aggregation is shown.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    alt.X('Horsepower').bin(),\n    alt.Y('Miles_per_Gallon').bin(),\n    size='count()',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cumulative Frequency Distribution Chart with Window Transform in Python/Altair\nDESCRIPTION: This code demonstrates how to create a cumulative frequency distribution of movie ratings using Altair's window transform. It sorts data by IMDB_Rating, uses a frame to include all movies up to the current one, and calculates a cumulative count.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/window.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nalt.Chart(data.movies.url).transform_window(\n    sort=[{'field': 'IMDB_Rating'}],\n    frame=[None, 0],\n    cumulative_count='count(*)',\n).mark_area().encode(\n    x='IMDB_Rating:Q',\n    y='cumulative_count:Q',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D box plot with continuous and categorical variables in Altair\nDESCRIPTION: This snippet shows how to generate a 2D box plot with one continuous ('Miles_per_Gallon') and one discrete ('Origin') variable, with the box plot oriented horizontally if the continuous field is on the x-axis.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/boxplot.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_boxplot(extent=\"min-max\").encode(\n    alt.X(\"Miles_per_Gallon:Q\").scale(zero=False),\n    alt.Y(\"Origin:N\")\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Geographical Data in GeoDataFrame\nDESCRIPTION: Shows how to focus on a specific region (Africa) by filtering the source GeoDataFrame before visualization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngdf_sel = gdf_ne.query(\"CONTINENT == 'Africa'\")\n\nalt.Chart(gdf_sel).mark_geoshape()\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Default Altair Renderer (Python)\nDESCRIPTION: Imports Altair and explicitly enables the 'default' renderer using `alt.renderers.enable('default')`. This corrects issues caused by inadvertently enabling an incompatible renderer (like 'notebook') in JupyterLab.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.renderers.enable('default')\n```\n\n----------------------------------------\n\nTITLE: Creating a Single-Series Line Chart in Altair (Python)\nDESCRIPTION: Illustrates construction of a simple line chart using Altair and vega_datasets, plotting price vs. date for 'GOOG'. Requires altair, vega_datasets. Expects a DataFrame with 'date', 'price', 'symbol'; outputs a chart showing temporal trends for a filtered symbol, with x and y encoded appropriately.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom altair import datum\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line().encode(\n    x=\"date\",\n    y=\"price\",\n).transform_filter(datum.symbol == \"GOOG\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider and Coloring Data with Selection\nDESCRIPTION: This code snippet demonstrates using a slider with `alt.selection_point` to dynamically color data points based on a cutoff value. The slider is created using `alt.binding_range` and is bound to a selection parameter named 'selector'. A condition, based on the 'cutoff' value from the selection, then changes the color of the points.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\n\nrand = np.random.RandomState(42)\ndf = pd.DataFrame({\n    'xval': range(100),\n    'yval': rand.randn(100).cumsum()\n})\n\nslider = alt.binding_range(min=0, max=100, step=1, name='Cutoff ')\nselector = alt.selection_point(\n    name=\"SelectorName\",\n    fields=['cutoff'],\n    bind=slider,\n    value=[{'cutoff': 50}]\n)\npredicate = alt.datum.xval < selector.cutoff\n\nalt.Chart(df).mark_point().encode(\n    x='xval',\n    y='yval',\n    color=alt.when(predicate).then(alt.value(\"red\")).otherwise(alt.value(\"blue\")),\n).add_params(\n    selector\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Interquartile Range with Altair Error Bars\nDESCRIPTION: This code illustrates how to set the 'extent' parameter to 'iqr' to display interquartile range error bars, which span from the first to third quartile. It helps depict data dispersion non-parametrically. Dependencies include Altair and Vega datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nerror_bars = alt.Chart(source).mark_errorbar(extent=\"iqr\").encode(\n    x=alt.X(\"yield:Q\").scale(zero=False),\n    y=alt.Y(\"variety:N\"),\n)\n\npoints = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\"\n).encode(\n    x=alt.X(\"mean(yield)\"),\n    y=alt.Y(\"variety:N\"),\n)\n\nerror_bars + points\n```\n\n----------------------------------------\n\nTITLE: Geographic Visualization with Lookup Transform in Python\nDESCRIPTION: Creates a choropleth map of US unemployment rates by county using a lookup transform to combine geographical boundary data with unemployment statistics.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/lookup.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncounties = alt.topo_feature(data.us_10m.url, 'counties')\nunemp_data = data.unemployment.url\n\nalt.Chart(counties).mark_geoshape().encode(\n    color='rate:Q'\n).transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(unemp_data, 'id', ['rate'])\n).properties(\n    projection={'type': 'albersUsa'},\n    width=500, height=300\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering with FieldOneOfPredicate in Altair\nDESCRIPTION: Example of using a FieldOneOfPredicate to filter data in an Altair chart, selecting only population data from years 1900, 1950, and 2000.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\npop = data.population.url\n\nalt.Chart(pop).mark_line().encode(\n    x='age:O',\n    y='sum(people):Q',\n    color='year:O'\n).transform_filter(\n    alt.FieldOneOfPredicate(field='year', oneOf=[1900, 1950, 2000])\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling PNG Renderer in Altair\nDESCRIPTION: Code to enable the PNG renderer for Altair charts, which generates static PNG images of charts that can be displayed in IPython-based environments.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable(\"png\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Mean Monthly Temperature with Altair\nDESCRIPTION: This snippet shows how to plot the mean monthly temperature using Altair's timeUnit transform. It discretizes the date by month and calculates the mean temperature for each month. This provides a cleaner visualization compared to plotting hourly data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/timeunit.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(temps).mark_line().encode(\n    x='month(date):T',\n    y='mean(temp):Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Binding Altair Parameters to Color Picker Widgets in Python\nDESCRIPTION: Defines three Altair parameters (`color_usa`, `color_europe`, `color_japan`), each bound to an HTML color input widget using `alt.binding(input='color')`. These parameters control the colors used in the range of the color scale for a scatter plot, allowing users to interactively change the colors assigned to different origins ('USA', 'Europe', 'Japan'). Assumes `data.cars.url` points to a valid data source.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncolor_usa = alt.param(value=\"#317bb4\", bind=alt.binding(input='color', name='USA '))\ncolor_europe = alt.param(value=\"#ffb54d\", bind=alt.binding(input='color', name='Europe '))\ncolor_japan = alt.param(value=\"#adadad\", bind=alt.binding(input='color', name='Japan '))\n\nalt.Chart(data.cars.url).mark_circle().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.Color(\n        'Origin:N',\n        scale=alt.Scale(\n            domain=['USA', 'Europe', 'Japan'],\n            range=[color_usa, color_europe, color_japan]\n        )\n    )\n).add_params(\n    color_usa, color_europe, color_japan\n)\n```\n\n----------------------------------------\n\nTITLE: Quantize Scale Classification for Choropleth in Altair\nDESCRIPTION: Example of using quantize scale type to divide the extent of a dataset into equal intervals. This method creates classes with equal ranges but potentially different counts of values.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nalt.Scale(type='quantize')\n```\n\n----------------------------------------\n\nTITLE: Updating a JupyterChart Instance with a New Chart - Python\nDESCRIPTION: Shows how to update the displayed chart in a JupyterChart instance by assigning a new Altair chart to its 'chart' property. The example modifies the original chart to use crimson colored bars with rounded corners, demonstrating instant chart updates in the notebook UI. Dependencies include Altair library and the previously created JupyterChart instance.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\njchart.chart = chart.mark_bar(color=\"crimson\", cornerRadius=10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Strip Plot with Tick Marks Using Altair in Python\nDESCRIPTION: This snippet creates a strip plot visualizing the distribution of horsepower by number of cylinders using tick marks. It uses the 'cars' dataset from vega_datasets, encodes 'Horsepower' as a quantitative x-axis field and 'Cylinders' as an ordinal y-axis field. The chart requires Altair and vega_datasets, and illustrates combining multiple encoding channels to represent bivariate data distributions with ticks.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/tick.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_tick().encode(\n    x=\"Horsepower:Q\",\n    y=\"Cylinders:O\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Boxplot from Calculated Statistics in Altair\nDESCRIPTION: This code creates a boxplot in Altair using the pre-calculated summary statistics (agg_stats) from the previous pandas processing step. It defines base, rules, bars, ticks, and outliers components to construct the complete boxplot visualization.  The outlier points are transformed using 'transform_flatten' to create point markers, with a custom style.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nbase = alt.Chart(agg_stats).encode(\n    y=\"Origin:N\"\n)\n\nrules = base.mark_rule().encode(\n    x=alt.X(\"lower\").title(\"Miles_per_Gallon\"),\n    x2=\"upper\",\n)\n\nbars = base.mark_bar(size=14).encode(\n    x=\"25%\",\n    x2=\"75%\",\n    color=alt.Color(\"Origin\").legend(None),\n)\n\nticks = base.mark_tick(color=\"white\", size=14).encode(\n    x=\"50%\"\n)\n\noutliers = base.transform_flatten(\n    flatten=[\"outliers\"]\n).mark_point(\n    style=\"boxplot-outliers\"\n).encode(\n    x=\"outliers:Q\",\n    color=\"Origin\",\n)\n\nrules + bars + ticks + outliers\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Field Names in Altair\nDESCRIPTION: Example demonstrating how to escape special characters like periods in field names when creating Altair charts to ensure proper field mapping.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndata = pd.DataFrame({'x.value': [1, 2, 3]})\n\nalt.Chart(data).mark_point().encode(\n    x=r'x\\.value:Q',\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Join Aggregate and Calculate Transforms in Altair for Movie Rating Normalization using Python\nDESCRIPTION: This snippet shows an Altair visualization pipeline that filters a movie dataset to exclude null IMDB and Rotten Tomatoes ratings, applies a join aggregate transform to compute the mean and standard deviation of each rating, and calculates normalized deviation scores. The resultant scatter plot encodes these deviations on X and Y axes using Altair's mark_point and encoding methods. Dependencies include Altair library and vega_datasets package.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/joinaggregate.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nalt.Chart(data.movies.url).transform_filter(\n    'datum.IMDB_Rating != null  && datum.Rotten_Tomatoes_Rating != null'\n).transform_joinaggregate(\n    IMDB_mean='mean(IMDB_Rating)',\n    IMDB_std='stdev(IMDB_Rating)',\n    RT_mean='mean(Rotten_Tomatoes_Rating)',\n    RT_std='stdev(Rotten_Tomatoes_Rating)'\n).transform_calculate(\n    IMDB_Deviation=\"(datum.IMDB_Rating - datum.IMDB_mean) / datum.IMDB_std\",\n    Rotten_Tomatoes_Deviation=\"(datum.Rotten_Tomatoes_Rating - datum.RT_mean) / datum.RT_std\"\n).mark_point().encode(\n    x='IMDB_Deviation:Q',\n    y=\"Rotten_Tomatoes_Deviation:Q\"\n)\n```\n\n----------------------------------------\n\nTITLE: Controlling Map Focus with Scale and Translate\nDESCRIPTION: Shows how to focus on a specific region by adjusting the projection scale (zoom level) and translate (panning) parameters.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_ne).mark_geoshape().project(\n    scale=200,\n    translate=[160, 160]  # lon, lat\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Label Positioning with Text Marks in Altair (Python)\nDESCRIPTION: This code demonstrates how to conditionally position labels in an Altair bar chart based on the value of the bar. It uses Altair's expression language (`alt.expr`) to determine the horizontal offset (`dx`) of the text label, positioning it differently for positive and negative bar values to avoid overlap. Uses pandas DataFrame for data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/text.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    \"a\": [\"A\", \"B\", \"C\"],\n    \"b\": [28, -5, 10]\n})\n\nbar = alt.Chart(source).mark_bar().encode(\n    y=\"a:N\",\n    x=alt.X(\"b:Q\").scale(domain=[-10, 35])\n)\n\ntext_conditioned = bar.mark_text(\n    align=\"left\",\n    baseline=\"middle\",\n    dx=alt.expr(alt.expr.if_(alt.datum.b >= 0, 10, -20))\n).encode(text=\"b\")\n\nbar + text_conditioned\n```\n\n----------------------------------------\n\nTITLE: Observing Changes to Variable Parameters in JupyterChart - Python\nDESCRIPTION: Illustrates registering a callback function using the 'observe' method on the JupyterChart's 'params' property. The example callback prints the new value of the variable parameter 'cutoff' whenever it changes. This facilitates reacting to user interaction with bound widgets. Dependencies include Altair and utilization of JupyterChart instance 'jchart'.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef on_cutoff_change(change):\n    print(change.new)\n\njchart.params.observe(on_cutoff_change, [\"cutoff\"])\n```\n\n----------------------------------------\n\nTITLE: Converting Wide-Form to Long-Form Data with pandas melt\nDESCRIPTION: Example of using pandas melt method to convert wide-form data to long-form data suitable for Altair visualizations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwide_form = pd.DataFrame({'Date': ['2007-10-01', '2007-11-01', '2007-12-01'],\n                          'AAPL': [189.95, 182.22, 198.08],\n                          'AMZN': [89.15, 90.56, 92.64],\n                          'GOOG': [707.00, 693.00, 691.48]})\n```\n\nLANGUAGE: python\nCODE:\n```\nwide_form.melt('Date', var_name='company', value_name='price')\n```\n\n----------------------------------------\n\nTITLE: Combining Line and Rule Marks for Annotated Stock Price Charts with Altair in Python\nDESCRIPTION: This snippet builds a layered chart combining a line chart showing stock prices over time and rule marks indicating average stock prices. It creates a base chart with fixed width, layers a colored line mark by stock symbol, and overlays colored horizontal rules representing average price with set thickness. Required libraries are Altair and Vega datasets. Input dataset is stock prices with date and symbol fields. Output is a multi-layered visualization integrating continuous price trends and summary annotations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/rule.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nbase = alt.Chart(source).properties(width=550)\nline = base.mark_line().encode(\n    x=\"date\",\n    y=\"price\",\n    color=\"symbol\"\n)\nrule = base.mark_rule().encode(\n    y=\"average(price)\",\n    color=\"symbol\",\n    size=alt.value(2)\n)\n\nline + rule\n```\n\n----------------------------------------\n\nTITLE: Sorting chart axes in Altair using the sort property in Python\nDESCRIPTION: Demonstrates how to sort axes in Altair charts by encoding channel with the 'sort' property based on data or field operations. Includes examples for sorting by data field and maximum value, illustrating the use of 'sort' parameter within encoding.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nbarley = data.barley()\nbase = alt.Chart(barley).mark_point().encode(\n    y='yield:Q',\n).properties(width=200)\n\n# Sort according to encoding channel\nsortchannel = base.encode(\n    alt.X('site:N').sort('y')\n).properties(\n    title='By Channel'\n)\n\n# Sort according to another field\nsortfield = base.encode(\n    alt.X('site:N').sort(field='yield', op='max')\n).properties(\n    title='By Max Yield'\n)\n\nsortchannel | sortfield\n```\n\n----------------------------------------\n\nTITLE: Enabling the VegaFusion Data Transformer in Altair\nDESCRIPTION: This snippet shows how to enable the VegaFusion data transformer, which allows working with datasets up to 100,000 rows by pre-evaluating data transformations in Python.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.data_transformers.enable(\"vegafusion\")\n```\n\n----------------------------------------\n\nTITLE: Binning and Count Aggregation with Altair (Python)\nDESCRIPTION: This snippet creates a histogram by binning a field and using Altair's count aggregation. It demonstrates how to define a binned encoding (alt.X('Horsepower').bin()) and use a shorthand 'count()' for the y channel, which counts records per bin.\n\nDependencies: altair, a DataFrame named 'cars' with suitable fields. Parameters: 'Horsepower' for binning/x-axis, 'count()' for y-axis aggregation. Output is a bar chart histogram. Limitation: The count shorthand requires no explicit field.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_bar().encode(\n    alt.X('Horsepower').bin(),\n    y='count()'\n    # could also use alt.Y(aggregate='count', type='quantitative')\n)\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart to Image Formats (PNG, SVG, PDF) using Python\nDESCRIPTION: This Python snippet shows how to save an Altair chart object to different static image formats (PNG, SVG, PDF) using the `chart.save()` method with the appropriate file extension. This functionality requires the `vl-convert` package to interpret the Vega-Lite spec and render the image.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchart.save('chart.png')\nchart.save('chart.svg')\nchart.save('chart.pdf')\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart to Offline HTML using Python\nDESCRIPTION: This Python code demonstrates creating an offline-capable HTML file from an Altair chart. Using the `inline=True` argument in `chart.save()`, all necessary JavaScript libraries (Vega, Vega-Lite, vegaEmbed) are embedded directly into the HTML file, allowing the chart to be viewed without an internet connection. This requires the `vl-convert` package to be installed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchart.save('chart.html', inline=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Encoding with Multiple Channels in Altair\nDESCRIPTION: Creates a scatter plot of car data using four encoding channels: x-axis (Horsepower), y-axis (Miles_per_Gallon), color (Origin), and shape (Origin). This demonstrates the basic encoding functionality of Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\n\ncars = data.cars()\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n    shape='Origin'\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Color and Shape in an Altair Scatter Plot (Python)\nDESCRIPTION: Shows how to enhance a scatter plot by encoding a categorical field (`Origin`) from the `vega_datasets` cars dataset to both the `color` and `shape` channels using `mark_point()`. It also demonstrates disabling automatic zero-scaling on the quantitative axes.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_point().encode(\n    alt.X(\"Miles_per_Gallon:Q\").scale(zero=False),\n    alt.Y(\"Horsepower:Q\").scale(zero=False),\n    color=\"Origin:N\",\n    shape=\"Origin:N\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using When-Then Conditional Without Otherwise in Altair\nDESCRIPTION: Demonstrates using the when-then syntax without an otherwise clause. Selected points are colored goldenrod, while unselected points use the default color.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsource = data.cars()\nbrush = alt.selection_interval()\n\npoints = alt.Chart(source).mark_point().encode(\n    x=\"Horsepower\",\n    y=\"Miles_per_Gallon\",\n    color=alt.when(brush).then(alt.value(\"goldenrod\"))\n).add_params(\n    brush\n)\n\npoints\n```\n\n----------------------------------------\n\nTITLE: Filtering with FieldEqualPredicate in Altair\nDESCRIPTION: Example of using a FieldEqualPredicate to filter data in an Altair chart, selecting only population data from year 2000.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\npop = data.population.url\n\nalt.Chart(pop).mark_line().encode(\n    x='age:O',\n    y='sum(people):Q',\n    color='year:O'\n).transform_filter(\n    alt.FieldEqualPredicate(field='year', equal=2000)\n)\n```\n\n----------------------------------------\n\nTITLE: Overlaying Lines and Points on an Altair Area Chart (Python)\nDESCRIPTION: This snippet demonstrates how to enhance an area chart by overlaying line and point markers. This is achieved by setting the `line` and `point` arguments within `mark_area` to `True`. The example uses the `stocks` dataset, filtered for the 'GOOG' symbol, plotting price over time. Requires Altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks.url\n\nalt.Chart(source).mark_area(line=True, point=True).encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n).transform_filter(\n    alt.datum.symbol == \"GOOG\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Bar Chart with Summed Data in Altair\nDESCRIPTION: This code creates a basic vertical bar chart in Altair representing total population data for the year 2000, using the Vega datasets library for source data. It aggregates data with a sum function and filters for a specific year.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom altair import datum\nfrom vega_datasets import data\n\nsource = data.population.url\n\nalt.Chart(source).mark_bar().encode(\n    alt.X(\"sum(people):Q\").title(\"Population\")\n).transform_filter(\n    datum.year == 2000\n)\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in DataFrame Columns for Altair (Python)\nDESCRIPTION: Demonstrates how to create a pandas DataFrame with column names containing special characters (colon, period, brackets) and encode them properly in Altair charts. Shows the use of raw strings and backslashes to escape special characters in Altair encoding channels, as well as setting axis titles and data types explicitly.\n\nDependencies: pandas, altair; input is a DataFrame with column names having special characters. Key parameters: 'x', 'y', and 'color' encode field names, escaped as needed, with optional type and title. Output is a bar chart. Limitation: Users must manually adjust axis titles to hide backslashes if desired.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nsource = pd.DataFrame({\n    'col:colon': [1, 2, 3],\n    'col.period': ['A', 'B', 'C'],\n    'col[brackets]': range(3),\n})\n\nalt.Chart(source).mark_bar().encode(\n    x=r'col\\:colon',\n    # Remove the backslash in the title\ny=alt.Y(r'col\\.period').title('col.period'),\n    # Specify the data type\n    color=r'col\\[brackets\\]:N',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Q-Q Plot with Normally-Distributed Data in Python using Altair\nDESCRIPTION: This example demonstrates how to create a quantile-quantile plot with normally distributed data using Altair's transform_quantile method. The code generates 200 random values from a normal distribution, applies a quantile transform with a step size of 0.01, and visualizes the result with a point mark.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/quantile.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(42)\ndf = pd.DataFrame({'x': np.random.randn(200)})\n\nalt.Chart(df).transform_quantile(\n    'x', step=0.01\n).mark_point().encode(\n    x='prob:Q',\n    y='value:Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating daily temperature range in Altair using transform_calculate\nDESCRIPTION: This code adds a derived field 'temp_range' computed as the difference between 'temp_max' and 'temp_min' within the chart, enabling visualization of temperature variability across years. Computation occurs client-side during rendering.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_bar().encode(\n    x='mean(temp_range):Q',\n    y='year(date):O'\n).transform_calculate(\n    temp_range=\"datum.temp_max - datum.temp_min\"\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing box plot colors with encoding channels\nDESCRIPTION: This example customizes the color of the box and outlier points using the 'color' encoding channel, applied to a min-max extent box plot showing 'Origin' and 'Miles_per_Gallon'.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/boxplot.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_boxplot(extent=\"min-max\").encode(\n    alt.X(\"Origin:N\"),\n    alt.Y(\"Miles_per_Gallon:Q\").scale(zero=False),\n    alt.Color(\"Origin:N\").legend(None)\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Hover Selection with Order Control in Altair\nDESCRIPTION: Creates a hover selection and uses it to control the order of rendering points. This brings selected points to the foreground by giving them a higher order value than unselected points.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhover = alt.selection_point(on='pointerover', nearest=True, empty=False)\norder = alt.when(hover).then(alt.value(1)).otherwise(alt.value(0))\n```\n\n----------------------------------------\n\nTITLE: Filtering with NOT Operator in Altair\nDESCRIPTION: Example of using the NOT operator (~) to invert a selection, filtering out data from years 1950-1960.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# NOT between 1950-1960\nchart.transform_filter(~between_1950_60)\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data Using pandas GroupBy and Mean in Python\nDESCRIPTION: This snippet performs a group-by aggregation on the sample DataFrame using pandas, grouping the rows by the 'label' column and computing the mean for each group. The result is reset to a flat DataFrame index, mimicking the behavior of Altair's Aggregate transform with mean aggregation.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/joinaggregate.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmean = df.groupby('label').mean().reset_index()\nmean\n```\n\n----------------------------------------\n\nTITLE: Defining Altair Line Connection Order (Python)\nDESCRIPTION: Illustrates using the `order` channel to specify the sequence in which data points are connected by lines in a line chart. This is particularly useful for data where the connection order is not simply based on the x-axis value, such as time series or sequential data points. Here, it uses the 'year' field to define the order.\n\nDependencies: altair, vega_datasets\nInputs: Data loaded from `vega_datasets.data.driving()`\nOutputs: An Altair chart object configured for display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/channels.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ndriving = data.driving()\n\nalt.Chart(driving).mark_line(point=True).encode(\n    alt.X('miles').scale(zero=False),\n    alt.Y('gas').scale(zero=False),\n    order='year'\n)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Charts with Shared Color Scales in Altair (Python)\nDESCRIPTION: This snippet demonstrates the default behavior of altair when concatenating charts where the color scales are shared, using `alt.concat`. It encodes two charts with the same data, `cars()`, but different color encodings ('Origin' and 'Cylinders'), resulting in a single color scale for both.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/scale_resolve.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbase = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n).properties(\n    width=200,\n    height=200\n)\n\nalt.concat(\n    base.encode(color='Origin:N'),\n    base.encode(color='Cylinders:O')\n)\n```\n\n----------------------------------------\n\nTITLE: Using 'value' to assign a constant visual property in Altair in Python\nDESCRIPTION: Demonstrates how to set a fixed visual attribute such as color using 'alt.value' instead of data-driven or datum encoding. Useful for static styling across charts.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nbase = alt.Chart(source)\nlines = base.mark_line().encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    color=\"symbol:N\"\n)\nrule = base.mark_rule(strokeDash=[2, 2]).encode(\n    x=alt.datum(alt.DateTime(year=2006)),\n    color=alt.value(\"red\")\n)\n\nlines + rule\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data and Plotting - Python\nDESCRIPTION: This code snippet generates sample data using pandas and numpy, which includes missing values. It then uses Altair to visualize the data with missing entries, demonstrating how missing values are handled by default in a line plot.  Dependencies include pandas, numpy, and Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\n\ndata = pd.DataFrame({\n    't': range(5),\n    'x': [2, np.nan, 3, 1, 3],\n    'y': [5, 7, 5, np.nan, 4]\n}).melt('t').dropna()\ndata\n```\n\n----------------------------------------\n\nTITLE: Generating a pandas Query String from Point Selection Values - Python\nDESCRIPTION: Provides a method to convert a list of selection dictionaries obtained from 'jchart.selections.point.value' into a boolean query string for filtering a pandas DataFrame. It constructs an OR-separated combination of AND conditions for each selection point's column-value pairs. This allows extraction of the dataset instances included in the current selection using DataFrame.query(). Dependencies include pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilter = \" or \".join([\n    \" and \".join([\n        f\"`{col}` == {repr(val)}\" for col, val in sel.items()\n    ])\n    for sel in jchart.selections.point.value\n])\nsource.query(filter)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot using Altair (Python)\nDESCRIPTION: This Python snippet demonstrates the core workflow for creating a statistical visualization using Altair. It imports necessary libraries, loads a sample dataset, defines a chart, specifies point marks, encodes data columns ('Horsepower', 'Miles_per_Gallon', 'Origin') to visual channels (x-axis, y-axis, color), and enables interactivity. This requires the 'altair' and 'vega_datasets' libraries installed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/overview.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# import altair with an abbreviated alias\nimport altair as alt\n\n# load a sample dataset as a pandas DataFrame\nfrom vega_datasets import data\ncars = data.cars()\n\n# make the chart \nalt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n).interactive()\n```\n\n----------------------------------------\n\nTITLE: Multiple Concurrent Point Selections for Hover and Click in Altair (Python)\nDESCRIPTION: This code combines two point selection parameters for hover and click conditions. Points increase in size on hover and are filled red on click, with 'empty=False' to prevent initial selection. Altair is required and 'cars' dataset must be available. Users interact with the chart to test both selection responses, with results visually encoded by the point's fill and size.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nclick = alt.selection_point(empty=False)\nhover = alt.selection_point(on='pointerover', empty=False)\n\npoints = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    fill=alt.when(click).then(alt.value('red')),\n    size=alt.when(hover).then(alt.value(1000))\n).add_params(\n    click, hover\n)\n\npoints\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Type Effects on Color Scales in Altair\nDESCRIPTION: Creates three charts to demonstrate how specifying different data types (quantitative, ordinal, nominal) for the same data affects color scales and legends.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbase = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n).properties(\n    width=140,\n    height=140\n)\n\nalt.hconcat(\n   base.encode(color='Cylinders:Q').properties(title='quantitative'),\n   base.encode(color='Cylinders:O').properties(title='ordinal'),\n   base.encode(color='Cylinders:N').properties(title='nominal'),\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Jittering to an Altair Dot Plot in Python\nDESCRIPTION: Illustrates how to add jitter (a random offset) to points on a discrete axis (`y`) in a dot plot to mitigate overplotting. This example uses `transform_calculate` to generate random numbers and maps them to the `yOffset` encoding. It uses the `vega_datasets` cars dataset and sets a fixed step height for the y-axis.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_point().encode(\n    x=\"Horsepower:Q\",\n    y=\"Cylinders:O\",\n    yOffset=\"random:Q\",\n).transform_calculate(\n    random=\"random()\"\n).properties(\n    height=alt.Step(50)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Choropleth Map with Selection in Altair\nDESCRIPTION: Implementation of an interactive choropleth map using selection_point to create a clickable US states map that adjusts opacity based on selection and displays population data with tooltips.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\n# load the data\nus_states = gpd.read_file(data.us_10m.url, layer=\"states\")\nus_population = data.population_engineers_hurricanes()[[\"state\", \"id\", \"population\"]]\n\n# define a pointer selection\nclick_state = alt.selection_point(fields=[\"state\"])\n# define a condition on the opacity encoding depending on the selection\nopacity = alt.when(click_state).then(alt.value(1)).otherwise(alt.value(0.2))\n\n# create a choropleth map using a lookup transform\nchoropleth = (\n    alt.Chart(us_states)\n    .mark_geoshape()\n    .transform_lookup(\n        lookup=\"id\", from_=alt.LookupData(us_population, \"id\", [\"population\", \"state\"])\n    )\n    .encode(\n        color=\"population:Q\",\n        opacity=opacity,\n        tooltip=[\"state:N\", \"population:Q\"],\n    )\n    .project(type=\"albersUsa\")\n)\n```\n\n----------------------------------------\n\nTITLE: Verbose Attribute-Based Channel Options in Altair\nDESCRIPTION: Demonstrates how attribute-based syntax can become verbose when using multiple channel options. This example configures axis, binning, and scale properties for the x-axis using nested objects.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    alt.X(\n        'Horsepower',\n        axis=alt.Axis(ticks=False),\n        bin=alt.Bin(maxbins=10),\n        scale=alt.Scale(domain=(30,300), reverse=True)\n    ),\n    alt.Y('Miles_per_Gallon', title='Miles per Gallon'),\n    color='Origin',\n    shape='Origin'\n)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Charts with Independent Color Scales in Altair (Python)\nDESCRIPTION: This code shows how to modify the previous example to use independent color scales. By calling `.resolve_scale(color='independent')` on the concatenated chart, the color scales of the individual charts are no longer shared. This means that each chart's color scale will be determined independently based on its data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/scale_resolve.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbase = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n).properties(\n    width=200,\n    height=200\n)\n\nalt.concat(\n    base.encode(color='Origin:N'),\n    base.encode(color='Cylinders:O')\n).resolve_scale(\n    color='independent'\n)\n```\n\n----------------------------------------\n\nTITLE: Applying LOESS Smoothing to a Random Walk in Python using Altair\nDESCRIPTION: This example demonstrates how to use the LOESS transform in Altair to apply smoothing to data points from a Gaussian random walk. The code creates a scatter plot of the random walk points and overlays a smoothed trend line using the transform_loess method.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/loess.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(42)\n\ndf = pd.DataFrame({\n    'x': range(100),\n    'y': np.random.randn(100).cumsum()\n})\n\nchart = alt.Chart(df).mark_point().encode(\n    x='x',\n    y='y'\n)\n\nchart + chart.transform_loess('x', 'y').mark_line()\n```\n\n----------------------------------------\n\nTITLE: Plotting Pre-Aggregated Data with Center and Error Values\nDESCRIPTION: This code demonstrates plotting error bars based on pre-aggregated data that includes a center value and error margins, by specifying the center as x and error margins with xError and xError2 channels. It supports asymmetric error representations. Dependencies include Altair and Pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    \"yield_error\": [7.5522, 6.9775, 3.9167, 11.9732],\n    \"yield_center\": [32.4, 30.96667, 33.966665, 30.45],\n    \"variety\": [\"Glabron\", \"Manchuria\", \"No. 457\", \"No. 462\"],\n})\n\nbar = alt.Chart(source).mark_errorbar().encode(\n    x=alt.X(\"yield_center:Q\").scale(zero=False).title(\"yield\"),\n    xError=(\"yield_error:Q\"),\n    y=alt.Y(\"variety:N\"),\n)\n\npoint = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\"\n).encode(\n    alt.X(\"yield_center:Q\"),\n    alt.Y(\"variety:N\"),\n)\n\npoint + bar\n```\n\n----------------------------------------\n\nTITLE: Piping Multiple Data Transformers Together\nDESCRIPTION: Demonstrates how to combine multiple data transformers using the pipe function from toolz.curried to create a transformation pipeline.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data_transformers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom altair import limit_rows, to_values\nfrom toolz.curried import pipe\npipe(data, limit_rows(10000), to_values)\n```\n\n----------------------------------------\n\nTITLE: Ordering Altair Stacked Bars Ascendingly (Python)\nDESCRIPTION: Illustrates the use of the `order` channel with `alt.Order(\"site\").sort(\"ascending\")` to control the drawing order of stacked segments within a bar chart. This sorts the stack components alphabetically by the 'site' field in ascending order.\n\nDependencies: altair, vega_datasets\nInputs: Data loaded from `vega_datasets.data.barley()`\nOutputs: An Altair chart object configured for display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/channels.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nbarley = data.barley()\n\nalt.Chart(barley).mark_bar().encode(\n    x='variety:N',\n    y='sum(yield):Q',\n    color='site:N',\n    order=alt.Order(\"site\").sort(\"ascending\")\n)\n```\n\n----------------------------------------\n\nTITLE: Imputing Missing Values with Constant - Python\nDESCRIPTION: This code demonstrates imputing missing values using a constant within the encoding channel. It uses `alt.Y('value:Q').impute(value=0)` to specify the constant value (0) for imputation on the y-axis. Dependencies include Altair and pandas. It also includes a background chart for reference.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbackground = raw.encode(opacity=alt.value(0.2))\nchart = alt.Chart(data).mark_line(point=True).encode(\n    x='t:Q',\n    y=alt.Y('value:Q').impute(value=0),\n    color='variable:N'\n)\nbackground + chart\n```\n\n----------------------------------------\n\nTITLE: Plotting maximum temperature by year and month in Altair\nDESCRIPTION: This snippet creates a line chart of maximum daily temperatures grouped by yearmonth (year and month combined), illustrating seasonal trends, requiring 'temp_max' and 'date' columns.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_line().encode(\n    x='yearmonth(date):T',\n    y='max(temp_max)',\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Heatmap Factory in Altair (Python)\nDESCRIPTION: This function takes a selection parameter as input and returns a heatmap with color encoding driven by the selection. It demonstrates how to encapsulate chart construction in a reusable Python function. Required dependency is Altair and the URL access for the 'cars' dataset. The selector argument expects an Altair Parameter; input and output are selection parameter and Altair Chart object, respectively. The chart's color field switches between a count aggregation and a fallback color based on selection.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef make_example(selector: alt.Parameter) -> alt.Chart:\n    cars = data.cars.url\n\n    return alt.Chart(cars).mark_rect().encode(\n        x=\"Cylinders:O\",\n        y=\"Origin:N\",\n        color=alt.when(selector).then(\"count()\")\n                .otherwise(alt.value(\"lightgray\")),\n    ).properties(\n        width=300,\n        height=180\n    ).add_params(\n        selector\n    )\n```\n\n----------------------------------------\n\nTITLE: Workaround for Faceting Geographic Data in Altair using Concatenation\nDESCRIPTION: A manual workaround for faceting geographic data by filtering the data in pandas and creating a small multiples chart via concatenation, since regular faceting has limitations for geographic visualization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nalt.concat(\n    *(\n        alt.Chart(gdf_comb[gdf_comb.variable == var], title=var)\n        .mark_geoshape()\n        .encode(\n            color=alt.Color(\n                \"value:Q\", legend=alt.Legend(orient=\"bottom\", direction=\"horizontal\")\n            )\n        )\n        .project('albersUsa')\n        .properties(width=180, height=130)\n        for var in gdf_comb.variable.unique()\n    ),\n    columns=3\n).resolve_scale(color=\"independent\")\n```\n\n----------------------------------------\n\nTITLE: Using Extent Transform to Create Bar Chart with Extent Rules in Python\nDESCRIPTION: Creates a bar chart with rules placed at the minimum and maximum values of column 'b' using Altair's extent transform. The transform stores the extent values in a parameter which is then used to position the rules.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/extent.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\n\nbase = alt.Chart(df, title=\"A Simple Bar Chart with Lines at Extents\").transform_extent(\n    extent=\"b\", param=\"b_extent\"\n)\nbars = base.mark_bar().encode(x=\"b\", y=\"a\")\nlower_extent_rule = base.mark_rule(stroke=\"firebrick\").encode(\n    x=alt.value(alt.expr(\"scale('x', b_extent[0])\"))\n)\nupper_extent_rule = base.mark_rule(stroke=\"firebrick\").encode(\n    x=alt.value(alt.expr(\"scale('x', b_extent[1])\"))\n)\nbars + lower_extent_rule + upper_extent_rule\n```\n\n----------------------------------------\n\nTITLE: Transforming Time Unit using Chart.transform_timeunit in Altair\nDESCRIPTION: This snippet demonstrates using the `transform_timeunit` method to discretize the date by month as a top-level transform.  It sets up an axis formatter to ensure that the axis labels are appropriately formatted. This approach is useful when the timeUnit value is reused.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/timeunit.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(temps).mark_line().encode(\n    alt.X('month:T').axis(format='%b'),\n    y='mean(temp):Q'\n).transform_timeunit(\n    month='month(date)'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with pandas DataFrame in Altair\nDESCRIPTION: Example of creating a bar chart using a pandas DataFrame, where Altair automatically detects that x should use a categorical scale and y should use a quantitative scale.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ndata = pd.DataFrame({'x': ['A', 'B', 'C', 'D', 'E'],\n                     'y': [5, 3, 6, 7, 2]})\nalt.Chart(data).mark_bar().encode(\n    x='x',\n    y='y',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Altair Chart with Dynamic Tooltip Python\nDESCRIPTION: This snippet builds an interactive Altair chart featuring a dropdown selector. The dropdown controls which blob area metric ('image1_area' or 'image2_area') is displayed on the y-axis and, crucially, which corresponding base64 image ('image1_base64' or 'image2_base64') is shown in the tooltip. A `transform_calculate` is used to dynamically update the chart's data fields (`image_area` and `image`) based on the dropdown selection using Vega-Lite expressions, demonstrating how to link interactive controls to both data transformation and visual encoding.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/numpy-tooltip-images.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nmetric_dropdown = alt.binding_select(\n    options=['image1_area', 'image2_area'],\n    name='Image metric '\n)\nmetric_param = alt.param(\n    value='image1_area',\n    bind=metric_dropdown\n)\nalt.hconcat(\n    # This first chart is the axis title and is only needed because\n    # Vega-Lite does not yet support passing an expression directly to the axis title\n    alt.Chart().mark_text(angle=270, dx=-150, fontWeight='bold').encode(\n        alt.TextValue(alt.expr(f'{metric_param.name}'))\n    ),\n    alt.Chart(df_plot, width=alt.Step(40)).mark_circle(xOffset=alt.expr('random() * 16 - 8')).encode(\n        x='group',\n        y=alt.Y('image_area:Q').title(''),\n        tooltip=['image:N'],\n        color='group',\n    ).properties(\n        title='Area of blobs'\n    ).transform_calculate(\n        # This first line updates the image_area which is used for the y axis\n        # to correspond to the selected string in the dropdown\n        image_area=f'datum[{metric_param.name}]',\n        # Since altair needs the tooltip field to be called `image`, we need to dynamically\n        # change what's in the `image` field depending on the selection in the dropdown\n        # This is further complicated by the fact that the string in the dropdown is not\n        # an exact match for the column holding the image data so we need\n        # to replace part of the name to match to match the corresponding base 64 image field\n        image=f'datum[replace({metric_param.name}, \"_area\", \"_base64\")]',\n    )\n).add_params(\n    metric_param\n)\n```\n\n----------------------------------------\n\nTITLE: Ordering Altair Stacked Bars Descendingly (Python)\nDESCRIPTION: Shows how to use the `order` channel with `alt.Order(\"site\").sort(\"descending\")` to control the drawing order of stacked segments within a bar chart. This sorts the stack components alphabetically by the 'site' field in descending order, the reverse of the previous example.\n\nDependencies: altair, vega_datasets\nInputs: Data loaded from `vega_datasets.data.barley()`\nOutputs: An Altair chart object configured for display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/channels.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nbarley = data.barley()\n\nalt.Chart(barley).mark_bar().encode(\n    x='variety:N',\n    y='sum(yield):Q',\n    color='site:N',\n    order=alt.Order(\"site\").sort(\"descending\")\n)\n```\n\n----------------------------------------\n\nTITLE: Lookup Data from DataFrame to GeoDataFrame\nDESCRIPTION: Demonstrates how to use transform_lookup to add data from a DataFrame to a GeoDataFrame visualization, creating a US unemployment choropleth map.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\ngdf_us_counties = gpd.read_file(data.us_10m.url, layer=\"counties\")\ndf_us_unemp = data.unemployment()\n\nalt.Chart(gdf_us_counties).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(data=df_us_unemp, key='id', fields=['rate'])\n).encode(\n    alt.Color('rate:Q')\n).project(\n    type='albersUsa'\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering with FieldRangePredicate in Altair\nDESCRIPTION: Example of using a FieldRangePredicate to filter data in an Altair chart, selecting only population data from years between 1960 and 2000.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\npop = data.population.url\n\nalt.Chart(pop).mark_line().encode(\n    x='age:O',\n    y='sum(people):Q',\n    color='year:O'\n).transform_filter(\n    alt.FieldRangePredicate(field='year', range=[1960, 2000])\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Graticule Lines for Geoshape Charts in Altair (Python)\nDESCRIPTION: This code produces graticule (latitude/longitude) lines within a geographic projection using Altair's graticule helper. A graticule is generated with a specified step (interval) between lines and visualized with the orthographic projection and rotation. The output is a geoshape path. Prerequisite: Altair installed. Expected: Simple step-based graticule data integrated as backdrops into geographic visualizations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\ndata = alt.graticule(step=[15, 15])\n\nalt.Chart(data).mark_geoshape(stroke='black').project(\n    'orthographic',\n    rotate=[0, -45, 0]\n)\n```\n\n----------------------------------------\n\nTITLE: Pre-aggregating and Filtering Data with Pandas\nDESCRIPTION: This snippet shows how to subset a dataframe in Pandas before passing the data to Altair.  It creates a bar chart for the 'barley' dataset, summing up 'yield' grouped by 'site'. The code subsets the dataframe to only include 'yield' and 'site' columns to reduce data passed to Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(source[['yield', 'site']]).mark_bar().encode(\n    x=\"sum(yield):Q\",\n    y=alt.Y(\"site:N\").sort(\"-x\")\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing LineString Geometries with Default Settings\nDESCRIPTION: Shows how LineString geometries appear with default mark_geoshape settings where fill color is prioritized.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngs_line = gpd.GeoSeries.from_wkt(['LINESTRING (0 0, 1 1, 0 2, 2 2, -1 1, 1 0)'])\nalt.Chart(gs_line).mark_geoshape().project(\n    type='identity',\n    reflectY=True\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Datasets with Altair's transform_lookup in Python\nDESCRIPTION: Shows how to use Altair's transform_lookup method to join datasets within the chart specification, creating a bar chart of mean age by group.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/lookup.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(groups).mark_bar().encode(\n    x='mean(age):Q',\n    y='group:O'\n).transform_lookup(\n    lookup='person',\n    from_=alt.LookupData(data=people, key='name',\n                         fields=['age', 'height'])\n)\n```\n\n----------------------------------------\n\nTITLE: Binning Continuous Data for Color Encoding Altair Python\nDESCRIPTION: Illustrates using `bin(maxbins=5)` on a quantitative field ('Acceleration') within the color encoding. This bins the continuous data into 5 discrete categories, which are then used to define the color scale for a scatter plot. Requires Altair and the 'cars' dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/bin.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.Color('Acceleration:Q').bin(maxbins=5)\n)\n```\n\n----------------------------------------\n\nTITLE: Marking Global Mean Value on Histogram Using Rules in Altair with Python\nDESCRIPTION: This snippet overlays a red rule mark on a binned histogram to represent the global mean of IMDB ratings. The histogram is built from a movies dataset and shows counts of ratings with bins on the x-axis. The rule marks the mean value as a vertical line with a specified size and color. Dependencies are Altair and Vega datasets. Inputs comprise IMDB_Rating data field; the output chart visually emphasizes central tendency alongside distribution.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/rule.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.movies.url\n\nbase = alt.Chart(source)\nbar = base.mark_bar().encode(\n    x=alt.X(\"IMDB_Rating:Q\").bin().axis(None),\n    y=\"count()\"\n)\nrule = base.mark_rule(color=\"red\").encode(\n    x=\"mean(IMDB_Rating):Q\",\n    size=alt.value(5),\n)\n\nbar + rule\n```\n\n----------------------------------------\n\nTITLE: Visualizing Separate Datasets with Altair in Python\nDESCRIPTION: Creates separate visualizations for two datasets - a scatter plot for people data showing age vs height, and a rectangular plot showing group memberships.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/lookup.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\n\ntop = alt.Chart(people).mark_square(size=200).encode(\n    x=alt.X('age:Q').scale(zero=False),\n    y=alt.Y('height:Q').scale(zero=False),\n    color='name:N',\n    tooltip='name:N'\n).properties(\n    width=400, height=200\n)\n\nbottom = alt.Chart(groups).mark_rect().encode(\n    x='person:N',\n    y='group:O'\n).properties(\n    width=400, height=100\n)\n\nalt.vconcat(top, bottom)\n```\n\n----------------------------------------\n\nTITLE: Applying Jenks Natural Breaks Algorithm for Choropleth Classification in Python\nDESCRIPTION: Implementation of the Fisher-Jenks algorithm (natural breaks) to determine optimal class breaks for choropleth maps. This method maximizes similarity within classes while maximizing differences between classes.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom jenkspy import JenksNaturalBreaks\njnb = JenksNaturalBreaks(5)\njnb.fit(df_us_unemp['rate'])\njnb.inner_breaks_\n# [0.061, 0.088, 0.116, 0.161]\n```\n\n----------------------------------------\n\nTITLE: Correctly Visualizing LineString Geometries\nDESCRIPTION: Shows how to correctly visualize LineString geometries by setting filled=False to prioritize stroke color instead of fill.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ngs_line = gpd.GeoSeries.from_wkt(['LINESTRING (0 0, 1 1, 0 2, 2 2, -1 1, 1 0)'])\nalt.Chart(gs_line).mark_geoshape(\n    filled=False\n).project(\n    type='identity',\n    reflectY=True\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering with Vega Expressions in Altair\nDESCRIPTION: Example of using a Vega expression to filter data in an Altair chart, selecting only population data from year 2000 with sex value of 1.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom altair import datum\n\nfrom vega_datasets import data\npop = data.population.url\n\nalt.Chart(pop).mark_area().encode(\n    x='age:O',\n    y='people:Q',\n).transform_filter(\n    (datum.year == 2000) & (datum.sex == 1)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an X-Axis-Only Selection Interval in Altair\nDESCRIPTION: Modifies a selection interval to only respond to the x-encoding. This creates a vertical brush selection that spans the entire y-axis, focusing the user's attention on the x-dimension.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbrush = alt.selection_interval(encodings=['x'])\n\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.when(brush).then(\"Origin:N\").otherwise(alt.value(\"lightgray\")),\n).properties(\n    width=250,\n    height=250\n).add_params(\n    brush\n)\n\nchart | chart.encode(x='Acceleration:Q')\n```\n\n----------------------------------------\n\nTITLE: Quantile Scale Classification for Choropleth in Altair\nDESCRIPTION: Example of using quantile scale type to divide a dataset into intervals of similar sizes. This classification method ensures each class contains approximately the same number of values or geometries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nalt.Scale(type='quantile')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Polygon Geometries from a GeoPandas GeoDataFrame in Altair (Python)\nDESCRIPTION: This code defines custom polygon geometries as dictionaries and loads them into a GeoPandas GeoDataFrame, which is then compatible as a data source for Altair. It demonstrates color encoding using fixed hex colors and renders the shapes using an identity projection (non-geographic). Dependencies: GeoPandas, Altair, Shapely. Expects a list of dicts with 'geometry' and visual attributes for initialization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom shapely import geometry\nimport geopandas as gpd\nimport altair as alt\n\ndata_geoms = [\n    {\"color\": \"#F3C14F\", \"geometry\": geometry.Polygon([[1.45, 3.75], [1.45, 0], [0, 0], [1.45, 3.75]])},\n    {\"color\": \"#4098D7\", \"geometry\": geometry.Polygon([[1.45, 0], [1.45, 3.75], [2.57, 3.75], [2.57, 0], [2.33, 0], [1.45, 0]])},\n    {\"color\": \"#66B4E2\", \"geometry\": geometry.Polygon([[2.33, 0], [2.33, 2.5], [3.47, 2.5], [3.47, 0], [3.2, 0], [2.57, 0], [2.33, 0]])},\n    {\"color\": \"#A9CDE0\", \"geometry\": geometry.Polygon([[3.2, 0], [3.2, 1.25], [4.32, 1.25], [4.32, 0], [3.47, 0], [3.2, 0]])},\n]\n\ngdf_geoms = gpd.GeoDataFrame(data_geoms)\ngdf_geoms\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Circle Marks using Altair Python\nDESCRIPTION: This snippet demonstrates how to create a basic scatter plot using Altair with `circle` marks. It loads data from the `vega_datasets` cars dataset, specifies the `circle` mark type, and encodes the 'Horsepower' column for the x-axis and 'Miles_per_Gallon' for the y-axis, both treated as quantitative ('Q') data. It requires the `altair` and `vega_datasets` libraries. The output is an Altair chart object representing the scatter plot.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/circle.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nalt.Chart(source).mark_circle().encode(\n   x=(\"Horsepower:Q\"),\n   y=(\"Miles_per_Gallon:Q\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Observing Interval Selection Changes and Updating HTML\nDESCRIPTION: This code demonstrates observing changes to an interval selection and updating the content of an HTML widget. It uses `ipywidgets` and Altair to create a chart. When a selection changes, the `on_select` function is called, which extracts the selection values, generates a pandas query, filters the source data and updates the HTML widget with the filtered data's HTML representation. This displays the data that corresponds to the selection.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets\nfrom IPython.display import display\nfrom ipywidgets import HTML, VBox\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\nbrush = alt.selection_interval(name=\"brush\")\n\nchart_widget = alt.JupyterChart(alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.when(brush).then(\"Cylinders:O\").otherwise(alt.value(\"grey\")),\n).add_params(brush))\n\ntable_widget = HTML(value=source.iloc[:0].to_html())\n\ndef on_select(change):\n    sel = change.new.value\n    if sel is None or 'Horsepower' not in sel:\n        filtered = source.iloc[:0]\n    else:\n        filter_query = (\n            f\"{sel['Horsepower'][0]} <= \\`Horsepower\\` <= {sel['Horsepower'][1]} and \"\n            f\"{sel['Miles_per_Gallon'][0]} <= \\`Miles_per_Gallon\\` <= {sel['Miles_per_Gallon'][1]}\"\n        )\n        filtered = source.query(filter_query)\n\n    table_widget.value = filtered.to_html()\n\nchart_widget.selections.observe(on_select, [\"brush\"])\n\nVBox([chart_widget, table_widget])\n```\n\n----------------------------------------\n\nTITLE: Loading Example Data for Lookup Transform in Python\nDESCRIPTION: Loads sample datasets from vega_datasets that will be used to demonstrate the lookup transform functionality.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/lookup.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vega_datasets import data\npeople = data.lookup_people()\ngroups = data.lookup_groups()\n```\n\n----------------------------------------\n\nTITLE: Focusing Map with Extent and Clipping\nDESCRIPTION: Demonstrates how to focus on a specific region by defining an extent feature for the projection's fit parameter and enabling clipping.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nextent_roi = gdf_ne.query(\"CONTINENT == 'Africa'\")\nxmin, ymin, xmax, ymax = extent_roi.total_bounds\n\n# fit object should be a GeoJSON-like Feature or FeatureCollection \nextent_roi_feature = {\n    \"type\": \"Feature\", \n    \"geometry\": {\"type\": \"Polygon\", \n                 \"coordinates\": [[\n                     [xmax, ymax],\n                     [xmax, ymin],\n                     [xmin, ymin],\n                     [xmin, ymax],\n                     [xmax, ymax]]]},\n    \"properties\": {}\n}\n\nalt.Chart(gdf_ne).mark_geoshape(clip=True).project(\n    fit=extent_roi_feature\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Inline GeoJSON with Ordinal Color Encoding in Altair (Python)\nDESCRIPTION: This displays the previously defined inline GeoJSON as a geoshape chart, mapping a nested string property (properties.location) to the color channel using an ordinal scale. It demonstrates direct referencing of nested attributes and custom color scales. Prerequisite: Altair. Limitation: Data must match GeoJSON structure.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(data_obj_geojson, title=\"Vega-Altair - ordinal scale\").mark_geoshape().encode(\n    alt.Color(\"properties.location:O\").scale(scheme='magma')\n).project(type=\"identity\", reflectY=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Dual Y-Axis Charts in Altair (Python)\nDESCRIPTION: This snippet constructs a dual Y-axis chart by manually setting the colors and axis title colors.  It uses two `mark_line` layers, each mapping a different measure ('average(Horsepower)' and 'average(Miles_per_Gallon)') to the Y-axis and encoding a different color and title color for each. The `resolve_scale` function is then used to set the y-axis scales as independent.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/scale_resolve.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbase = alt.Chart(source).encode(x='year(Year):T')\n\nline_A = base.mark_line(color='#5276A7').encode(\n    alt.Y('average(Horsepower):Q').axis(titleColor='#5276A7')\n)\n\nline_B = base.mark_line(color='#F18727').encode(\n    alt.Y('average(Miles_per_Gallon):Q').axis(titleColor='#F18727')\n)\n\nalt.layer(line_A, line_B).resolve_scale(y='independent')\n```\n\n----------------------------------------\n\nTITLE: Faceting Layered Interactive Chart using .facet - Altair Python\nDESCRIPTION: This advanced example illustrates faceting a complex layered chart that includes interactivity. It defines a base chart with a hover selection, creates point and text layers, combines them, and then applies the `.facet` method to the combined chart to create faceted views across different species.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhover = alt.selection_point(on='pointerover', nearest=True, empty=False)\nwhen_hover = alt.when(hover)\n\nbase = alt.Chart(iris).encode(\n    x='petalLength:Q',\n    y='petalWidth:Q',\n    color=when_hover.then(\"species:N\").otherwise(alt.value(\"lightgray\"))\n).properties(\n    width=180,\n    height=180,\n)\n\npoints = base.mark_point().add_params(hover)\n\ntext = base.mark_text(dy=-5).encode(\n    text=\"species:N\", \n    opacity=when_hover.then(alt.value(1)).otherwise(alt.value(0)),\n)\n\n(points + text).facet(\"species:N\")\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Boxplot Calculations\nDESCRIPTION: This code defines parameters for calculating summary statistics for a boxplot using pandas. It sets 'k' as a multiplier (1.5) for whisker boundaries, defines a 'group_by_column' ('Origin'), and a 'value_column' ('Miles_per_Gallon'). These parameters are utilized in the subsequent calculations for the boxplot.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\nfrom vega_datasets import data\n\nk = 1.5\ngroup_by_column = \"Origin\"\nvalue_column = \"Miles_per_Gallon\"\n```\n\n----------------------------------------\n\nTITLE: Bar Chart with Temporal Axis in Altair\nDESCRIPTION: This example shows how to create a bar chart plotting mean precipitation over months with a temporal x-axis, demonstrating continuous scale usage with date values sourced from the Seattle weather dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nalt.Chart(source).mark_bar().encode(\n    alt.X(\"month(date):T\").title(\"Date\"),\n    alt.Y(\"mean(precipitation):Q\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Summary Statistics for Boxplot\nDESCRIPTION: This snippet calculates summary statistics for a boxplot using pandas. It groups the 'cars' dataset by 'Origin' and calculates describe(), then calculates IQR, min_, max_, lower, upper, and outliers.  These statistics are used to build the boxplot in subsequent Altair code.  The result of this calculation is displayed with print(agg_stats)\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndf = data.cars()\n\nagg_stats = df.groupby(group_by_column)[value_column].describe()\nagg_stats[\"iqr\"] = agg_stats[\"75%\"] - agg_stats[\"25%\"]\nagg_stats[\"min_\"] = agg_stats[\"25%\"] - k * agg_stats[\"iqr\"]\nagg_stats[\"max_\"] = agg_stats[\"75%\"] + k * agg_stats[\"iqr\"]\ndata_points = df[[value_column, group_by_column]].merge(\n    agg_stats.reset_index()[[group_by_column, \"min_\", \"max_\"]]\n)\n# Lowest data point which is still above or equal to min_\n# This will be the lower end of the whisker\nagg_stats[\"lower\"] = (\n    data_points[data_points[value_column] >= data_points[\"min_\"]]\n    .groupby(group_by_column)[value_column]\n    .min()\n)\n# Highest data point which is still below or equal to max_\n# This will be the upper end of the whisker\nagg_stats[\"upper\"] = (\n    data_points[data_points[value_column] <= data_points[\"max_\"]]\n    .groupby(group_by_column)[value_column]\n    .max()\n)\n# Store all outliers as a list\nagg_stats[\"outliers\"] = (\n    data_points[\n        (data_points[value_column] < data_points[\"min_\"])\n        | (data_points[value_column] > data_points[\"max_\"])\n    ]\n    .groupby(group_by_column)[value_column]\n    .apply(list)\n)\nagg_stats = agg_stats.reset_index()\n\n# Show whole dataframe\npd.set_option(\"display.max_columns\", 15)\nprint(agg_stats)\n```\n\n----------------------------------------\n\nTITLE: Interactive Multi-line Chart with Unified Tooltip Using Pivot Transform\nDESCRIPTION: This snippet creates an interactive multi-line chart with a unified tooltip that shows values from all lines at the hovered position. It uses the pivot transform to aggregate values by date for the tooltip display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/pivot.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nbase = alt.Chart(source).encode(x='date:T')\ncolumns = sorted(source.symbol.unique())\nselection = alt.selection_point(\n    fields=['date'], nearest=True, on='pointerover', empty=False, clear='pointerout'\n)\n\nlines = base.mark_line().encode(y='price:Q', color='symbol:N')\npoints = lines.mark_point().transform_filter(selection)\n\nrule = base.transform_pivot(\n    'symbol', value='price', groupby=['date']\n).mark_rule().encode(\n    opacity=alt.when(selection).then(alt.value(0.3)).otherwise(alt.value(0)),\n    tooltip=[alt.Tooltip(c, type='quantitative') for c in columns]\n).add_params(selection)\n\nlines + points + rule\n```\n\n----------------------------------------\n\nTITLE: Use inline expressions with selection parameters in titles\nDESCRIPTION: This snippet demonstrates how to use a selection parameter to update a chart title. It highlights that when using selection parameters, you need to reference both the parameter name and the field specified by the selection (e.g., `selection.Origin`).\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom vega_datasets import data\n\ncars = data.cars.url\ninput_dropdown = alt.binding_select(options=['Europe', 'Japan', 'USA'], name='Region ')\nselection = alt.selection_point(fields=['Origin'], bind=input_dropdown, value='Europe')\n\ntitle = alt.Title(alt.expr(f'\"Cars from \" + {selection.name}.Origin'))\n\nalt.Chart(cars, title=title).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n).add_params(\n    selection\n).transform_filter(\n    selection\n)\n```\n\n----------------------------------------\n\nTITLE: Loading TopoJSON from URL and Extracting Features in Altair (Python)\nDESCRIPTION: This example loads remote TopoJSON using a helper function from the vega_datasets library to obtain a URL, and formats the Data object to extract a named feature collection for visualization. Dependencies: Altair, vega_datasets. Data must be accessible by URL and structured for TopoJSON extraction. Used for complex and hierarchical topo datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nfrom vega_datasets import data\n\nurl_topojson = data.londonBoroughs.url\n\ndata_url_topojson = alt.Data(\n    url=url_topojson, format=alt.DataFormat(feature=\"boroughs\", type=\"topojson\")\n)\n\ndata_url_topojson\n```\n\n----------------------------------------\n\nTITLE: Drawing Mesh Borders from TopoJSON in Altair\nDESCRIPTION: Creates a visualization of London Boroughs as a mesh outline without fill color. This example shows how to load TopoJSON data and extract mesh information for efficient border drawing. The filled=False parameter is used to draw multi-lines without fill.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom vega_datasets import data\n\nurl_topojson = data.londonBoroughs.url\n\ndata_url_topojson_mesh = alt.Data(\n    url=url_topojson, format=alt.DataFormat(mesh=\"boroughs\", type=\"topojson\")\n)\n\nalt.Chart(data_url_topojson_mesh, title=\"Border London-Boroughs\").mark_geoshape(\n    filled=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Step Line Chart with 'step-after' Interpolation in Altair (Python)\nDESCRIPTION: Uses the 'interpolate' mark property with value 'step-after' to generate a stepwise line chart for symbol 'GOOG'. Dependencies: altair, vega_datasets. Requires data with date/price/symbol; output is a line plot reflecting discrete jumps in the time series, suitable for data with stepwise transitions.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line(interpolate=\"step-after\").encode(\n    x=\"date\",\n    y=\"price\"\n).transform_filter(\n    alt.datum.symbol == \"GOOG\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Altair Top-Level Transform Python\nDESCRIPTION: Shows how to create a histogram using the top-level `transform_bin` method. It bins the 'IMDB_Rating' field and assigns the result to a new field 'binned_rating', which is then used in the x-axis encoding. Requires Altair and the 'movies' dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/bin.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nmovies = data.movies.url\n\nalt.Chart(movies).mark_bar().encode(\n    x='binned_rating:O',\n    y='count()',\n).transform_bin(\n    'binned_rating', field='IMDB_Rating'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Boxplot with Altair\nDESCRIPTION: This snippet shows how to create a boxplot using Altair. It uses the 'cars' dataset from vega_datasets.  The boxplot visualizes the distribution of data, specifically 'Miles_per_Gallon' grouped by 'Origin'. The color parameter distinguishes origins, and the legend is turned off.  This is a basic example showcasing boxplot functionality.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ndf = data.cars()\n\nalt.Chart(df).mark_boxplot().encode(\n    x=\"Miles_per_Gallon:Q\",\n    y=\"Origin:N\",\n    color=alt.Color(\"Origin\").legend(None)\n)\n```\n\n----------------------------------------\n\nTITLE: Binding a Parameter to a Slider Widget in Altair\nDESCRIPTION: Creates an interactive chart by binding a parameter to a range slider widget. The slider controls the opacity of points in the scatter plot with a range from 0 to 1.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nslider = alt.binding_range(min=0, max=1, step=0.05, name='opacity:')\nop_var = alt.param(value=0.1, bind=slider)\n\nalt.Chart(cars).mark_circle(opacity=op_var).encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n).add_params(\n    op_var\n)\n```\n\n----------------------------------------\n\nTITLE: Line Chart with Custom Order Channel and Point Overlay in Altair (Python)\nDESCRIPTION: Shows how to control the drawing order of line points (e.g., via a 'year' field) and overlay points using 'order' and 'point' mark properties. Prerequisites: altair, vega_datasets. Requires DataFrame with 'miles', 'gas', 'year'; outputs a line (with points) chart ordered explicitly for time-series analysis, with tooltips for all relevant fields.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.driving()\n\nalt.Chart(source).mark_line(point=True).encode(\n    alt.X(\"miles\").scale(zero=False),\n    alt.Y(\"gas\").scale(zero=False),\n    order=\"year\",\n    tooltip=[\"miles\", \"gas\", \"year\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Generating an Interactive Streamgraph in Altair (Python)\nDESCRIPTION: This snippet creates a streamgraph, a type of stacked area chart centered around a baseline, emphasizing changes in distribution over time. It sets the `stack` property of the Y-axis encoding to `\"center\"` and disables the Y-axis labels. The `.interactive()` method enables zooming and panning. Requires Altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nalt.Chart(source).mark_area().encode(\n    alt.X(\"yearmonth(date):T\").axis(format=\"%Y\", domain=False, tickSize=0),\n    alt.Y(\"sum(count):Q\").stack(\"center\").axis(None),\n    alt.Color(\"series:N\").scale(scheme=\"category20b\"),\n).interactive()\n```\n\n----------------------------------------\n\nTITLE: Accessing Aggregated Data with Altair Transformed Data (Python)\nDESCRIPTION: Demonstrates creating an Altair bar chart that performs a `transform_aggregate` to calculate the mean acceleration grouped by cylinders. The `chart.transformed_data()` method is then called to execute this transformation using VegaFusion in the Python kernel and return the result as a pandas DataFrame. Requires the `vegafusion[embed]` package.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\nchart = alt.Chart(cars).mark_bar().encode(\n    y='Cylinders:O',\n    x='mean_acc:Q'\n).transform_aggregate(\n    mean_acc='mean(Acceleration)',\n    groupby=[\"Cylinders\"]\n)\nchart.transformed_data()\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Band with Aggregated Confidence Interval in Altair (Python)\nDESCRIPTION: This snippet demonstrates creating an error band chart in Altair using a dataset URL (cars dataset from Vega Datasets). It shows how to initialize a mark_errorband with the extent set to a confidence interval ('ci') and border visibility enabled. The x-axis encodes the year, while the y-axis encodes the quantitative 'Miles_per_Gallon' field with a scale that does not start at zero and a descriptive title. Dependencies include importing altair and vega_datasets libraries. Inputs are raw data which Altair automatically aggregates based on the extent. The output is a layered chart showing the error band with 95% confidence intervals.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorband.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nalt.Chart(source).mark_errorband(extent=\"ci\", borders=True).encode(\n    x=\"year(Year)\",\n    y=alt.Y(\n        \"Miles_per_Gallon:Q\",\n        scale=alt.Scale(zero=False),\n        title=\"Miles per Gallon (95% CIs)\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting total monthly precipitation as a line chart in Altair\nDESCRIPTION: This code generates a line chart to show total precipitation per month, binning 'date' as 'month' type for temporal analysis. It visualizes temporal variation and requires pandas timestamp data in 'date' column.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_line().encode(\n    x='month(date):T',\n    y='average(precipitation)'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Pie Chart with Arc Marks in Python\nDESCRIPTION: Demonstrates how to create a simple pie chart using Altair's arc marks. The chart encodes data values to the theta parameter and categories to colors.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/arc.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nimport altair as alt\n\nsource = pd.DataFrame({\"category\": [1, 2, 3, 4, 5, 6], \"value\": [4, 6, 10, 3, 7, 8]})\n\nalt.Chart(source).mark_arc().encode(\n    theta=alt.Theta(field=\"value\", type=\"quantitative\"),\n    color=alt.Color(field=\"category\", type=\"nominal\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Using JupyterChart with VegaFusion for Interactive Charts in Altair\nDESCRIPTION: This snippet shows how to use JupyterChart with the VegaFusion data transformer to enable interactive exploration of large datasets in Jupyter environments.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.data_transformers.enable(\"vegafusion\")\n...\nalt.JupyterChart(chart)\n```\n\n----------------------------------------\n\nTITLE: Installing VegaFusion for Altair using pip\nDESCRIPTION: This snippet shows how to install VegaFusion dependencies using pip. VegaFusion is an external project that provides efficient Rust implementations of Altair's data transformations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install \"vegafusion[embed]\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom JSON Directory Transformer\nDESCRIPTION: Shows how to create a custom data transformer that stores JSON files in a specified directory instead of the working directory, then registers and enables it.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data_transformers.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport altair as alt\nfrom toolz.curried import pipe\n\n\ndef json_dir(data, data_dir='altairdata'):\n    os.makedirs(data_dir, exist_ok=True)\n    return pipe(data, alt.to_json(filename=data_dir + '/{prefix}-{hash}.{extension}') )\n\n\nalt.data_transformers.register('json_dir', json_dir)\nalt.data_transformers.enable('json_dir', data_dir='mydata')\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-resizing with Empty Selection in Altair Image Charts\nDESCRIPTION: This example shows how to create an image chart where images aren't visible initially and the chart area automatically resizes when a selection is made, using the autosize configuration option.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/image.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbrush = alt.selection_interval(empty=False)\npoint = alt.Chart(source).mark_circle(size=100).encode(\n    x='a',\n    y='b',\n).add_params(\n    brush\n)\nimg_faceted = alt.Chart(source, width=50, height=75).mark_image().encode(\n    url='image'\n).facet(\n    alt.Facet('image', title='', header=alt.Header(labelFontSize=0))\n).transform_filter(\n    brush\n)\n\n(point | img_faceted).configure(\n    autosize=alt.AutoSizeParams(resize=True)\n)\n```\n\n----------------------------------------\n\nTITLE: Imputing with Frame - Python\nDESCRIPTION: This snippet demonstrates the use of the `frame` parameter within `transform_impute` to calculate impute values based on a specified window. The `frame` parameter defines the window used for calculating the mean.  The window ranges from -1 to 1. Dependencies include Altair and pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nchart = alt.Chart(data).transform_impute(\n    impute='value',\n    key='t',\n    method='mean',\n    frame=[-1, 1],\n    groupby=['variable']\n).mark_line(point=True).encode(\n    x='t:Q',\n    y='value:Q',\n    color='variable:N'\n)\nbackground + chart\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with URL Data in Altair\nDESCRIPTION: Example of creating a scatter plot by referencing data from a URL, which requires explicit data type specifications in the encoding.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nurl = data.cars.url\n\nalt.Chart(url).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Field/Encoding Interactive Legend Selection in Altair (Python)\nDESCRIPTION: This code expands interactive legend selection to multiple fields ('Origin' and 'Cylinders'), enabling selection of points matching both criteria. It defines a selection parameter, builds corresponding color encoding, and composes two charts: a scatter plot and a grid-style legend. Dependencies include Altair and the 'cars' dataset. The output is a side-by-side chart where users can select by both fields.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nselection = alt.selection_point(fields=['Origin', 'Cylinders'])\ncolor = (\n    alt.when(selection)\n    .then(alt.Color(\"Origin:N\").legend(None))\n    .otherwise(alt.value(\"lightgray\"))\n)\n\nscatter = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=color,\n    tooltip='Name:N'\n)\n\nlegend = alt.Chart(cars).mark_rect().encode(\n    alt.Y('Origin:N').axis(orient='right'),\n    x='Cylinders:O',\n    color=color\n).add_params(\n    selection\n)\n\nscatter | legend\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Trail Mark in Altair (Python)\nDESCRIPTION: This Python snippet demonstrates how to create a line chart using Altair's 'trail' mark, where the line width varies based on the 'price' field. The chart visualizes stock price data from the vega_datasets library. Required dependencies are 'altair' and 'vega_datasets'. The encoding maps 'date' to the x-axis, 'price' to both the y-axis and size (line width), and 'symbol' to line color. Inputs: 'date', 'price', and 'symbol' columns from the provided DataFrame. Outputs: a rendered trail chart with varying line thickness by price. Ensure proper import and dataset availability.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/trail.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_trail().encode(\n    x=\"date\",\n    y=\"price\",\n    color=\"symbol\",\n    size=\"price\",\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline TopoJSON with Color Encoding in Altair (Python)\nDESCRIPTION: This snippet draws TopoJSON geometries extracted from a specified feature object with color encoding based on a property (name), applying an identity projection and y-axis reflection. It requires Altair and assumes the data structure is correct and matches the TopoJSON/GeoJSON expectations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(data_obj_topojson).mark_geoshape(\n).encode(\n    color=\"properties.name:N\"\n).project(\n    type='identity', reflectY=True\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Altair Variable Parameters to ipywidgets IntSlider - Python\nDESCRIPTION: Demonstrates linking an Altair JupyterChart variable parameter 'cutoff' to an ipywidgets IntSlider control using the ipywidgets 'link' function. This allows bidirectional synchronization of parameter value and slider state. The example shows creating an IntSlider, linking it to 'jchart.params.cutoff', and displaying the slider for user manipulation. Dependencies: ipywidgets, Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import IntSlider, link\nslider = IntSlider(23, min=0, max=100)\nlink((slider, \"value\"), (jchart.params, \"cutoff\"))\nslider\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable Parameter in Altair\nDESCRIPTION: Demonstrates creating a variable parameter with a default value that can be reused in a chart specification. This example defines an opacity parameter with a default value of 0.1.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nop_var = alt.param(value=0.1)\n```\n\n----------------------------------------\n\nTITLE: Applying Different Sort Options on Encodings in Altair (Python)\nDESCRIPTION: Demonstrates five approaches to sorting the x-axis of a bar chart using the 'barley' dataset in Altair: ascending alphabetical order, descending order, explicit order via a list of values, sorting by another encoding channel output, and sorting by an aggregated field. Each approach uses alt.X's sort option and showcases how sorted results appear in composite layouts.\n\nDependencies: altair, vega_datasets for sample data. Key parameters: x and y encoding channels, 'sort' in alt.X, and 'mean(yield):Q' for aggregation. Outputs are multiple bar chart variants composed horizontally. Limitation: Compositional layout with alt.concat limited by the number of columns specified.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nbarley = data.barley()\n\nbase = alt.Chart(barley).mark_bar().encode(\n    y='mean(yield):Q',\n    color=alt.Color('mean(yield):Q').legend(None)\n).properties(width=100, height=100)\n\n# Sort x in ascending order\nascending = base.encode(\n    alt.X('site:N').sort('ascending')\n).properties(\n    title='Ascending'\n)\n\n# Sort x in descending order\ndescending = base.encode(\n    alt.X('site:N').sort('descending')\n).properties(\n    title='Descending'\n)\n\n# Sort x in an explicitly-specified order\nexplicit = base.encode(\n    alt.X('site:N').sort(\n        ['Duluth', 'Grand Rapids', 'Morris', 'University Farm', 'Waseca', 'Crookston']\n    )\n).properties(\n    title='Explicit'\n)\n\n# Sort according to encoding channel\nsortchannel = base.encode(\n    alt.X('site:N').sort('y')\n).properties(\n    title='By Channel'\n)\n\n# Sort according to another field\nsortfield = base.encode(\n    alt.X('site:N').sort(field='yield', op='mean')\n).properties(\n    title='By Yield'\n)\n\nalt.concat(\n    ascending,\n    descending,\n    explicit,\n    sortchannel,\n    sortfield,\n    columns=3\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling the MaxRows Check in Altair\nDESCRIPTION: This snippet shows how to disable the MaxRows check in Altair when you want to embed your full untransformed dataset within the visualization specification.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalt.data_transformers.disable_max_rows()\n```\n\n----------------------------------------\n\nTITLE: Using Pre-Aggregated Data with Altair Error Bars\nDESCRIPTION: This snippet shows how to plot error bars when data is pre-aggregated with low and high values, by specifying x and x2 (or y and y2) channels as ranged marks. It is useful for displaying confidence intervals or known ranges directly. Dependencies include Altair and Pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    \"lower_yield\": [23.1311, 23.9503, 24.7778, 21.7823],\n    \"upper_yield\": [43.5522, 38.9775, 46.9167, 48.9732],\n    \"center\": [32.4, 30.96667, 33.966665, 30.45],\n    \"variety\": [\"Glabron\", \"Manchuria\", \"No. 457\", \"No. 462\"],\n})\n\nbar = alt.Chart(source).mark_errorbar().encode(\n    alt.X(\"upper_yield:Q\").scale(zero=False).title(\"yield\"),\n    alt.X2(\"lower_yield:Q\"),\n    alt.Y(\"variety:N\"),\n)\n\npoint = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\"\n).encode(\n    alt.X(\"center:Q\"),\n    alt.Y(\"variety:N\")\n)\n\npoint + bar\n```\n\n----------------------------------------\n\nTITLE: Creating Dual Y-Axis Charts with Legend in Altair (Python)\nDESCRIPTION: This code generates a dual Y-axis chart using a legend and transforms. It utilizes `transform_fold` to combine the 'Horsepower' and 'Miles_per_Gallon' measures into a single 'Value' column, then applies `transform_filter` to create separate layers for each measure. The color encoding is linked to the 'Measure' column, automatically creating a legend.  Finally, it uses `resolve_scale` to make the y-axis scales independent.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/scale_resolve.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbase = alt.Chart(source).mark_line().transform_fold(\n    ['Horsepower', 'Miles_per_Gallon'],\n    as_=['Measure', 'Value']\n).encode(\n    alt.Color('Measure:N'),\n    alt.X('year(Year):T')\n)\n\nline_A = base.transform_filter(\n    alt.datum.Measure == 'Horsepower'\n).encode(\n    alt.Y('average(Value):Q').title('Horsepower')\n)\n\nline_B = base.transform_filter(\n    alt.datum.Measure == 'Miles_per_Gallon'\n).encode(\n    alt.Y('average(Value):Q').title('Miles_per_Gallon')\n)\n\nalt.layer(line_A, line_B).resolve_scale(y='independent')\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart with Offset in Altair Using Pandas DataFrame\nDESCRIPTION: This example illustrates how to create a grouped bar chart with offset positioning by mapping categories to x, groups to xOffset, and values to y, with color indicating groups. It uses Pandas to prepare a dataset of categories, groups, and numerical values.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame(\n    {\n        \"category\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],\n        \"group\": [\"x\", \"y\", \"z\", \"x\", \"y\", \"z\"],\n        \"value\": [0.1, 0.6, 0.9, 0.7, 0.2, 0.6],\n    }\n)\n\nalt.Chart(source).mark_bar().encode(\n    x=alt.X(\"category:N\"),\n    xOffset=\"group:N\",\n    y=alt.Y(\"value:Q\"),\n    color=alt.Color(\"group:N\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Text Labels to a Pie Chart in Python\nDESCRIPTION: Demonstrates how to add text labels to a pie chart by creating a base chart with encoding, then using it to create both the pie and text layers. The text marks are positioned outside the pie slices using the radius parameter.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/arc.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nimport altair as alt\n\nsource = pd.DataFrame(\n    {\"category\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"value\": [4, 6, 10, 3, 7, 8]}\n)\n\nbase = alt.Chart(source).encode(\n    theta=alt.Theta(\"value:Q\").stack(True),\n    color=alt.Color(\"category:N\").legend(None),\n)\n\npie = base.mark_arc(outerRadius=120)\ntext = base.mark_text(radius=140, size=20).encode(\n    text=\"category:N\"\n)\n\npie + text\n```\n\n----------------------------------------\n\nTITLE: Using datum to encode constant domain value in Altair in Python\nDESCRIPTION: Explains how to embed a constant data value into the chart using 'alt.datum' for annotations such as highlighting a threshold with a rule mark. Addresses positioning accuracy and comparison with 'alt.value' for constant visual attributes.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nbase = alt.Chart(source)\nlines = base.mark_line().encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    color=\"symbol:N\"\n)\nrule = base.mark_rule(strokeDash=[2, 2]).encode(\n    y=alt.datum(300)\n)\n\nlines + rule\n```\n\nLANGUAGE: Python\nCODE:\n```\nrule = base.mark_rule(strokeDash=[2, 2]).encode(\n    y=alt.value(300)\n)\n\nlines + rule\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nbase = alt.Chart(source)\nlines = base.mark_line().encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    color=\"symbol:N\"\n)\nrule = base.mark_rule(strokeDash=[2, 2]).encode(\n    x=alt.datum(alt.DateTime(year=2006)),\n    color=alt.datum(\"MSFT\")\n)\n\nlines + rule\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Opacity Bar Chart with Linked Selection in Altair - Python\nDESCRIPTION: This snippet creates an interactive bar chart in Altair, showing the top 15 U.S. states by population, with bar opacity conditionally encoded and linked to selections made on a related map or chart. It uses Altair's Chart, mark_bar, and encode methods as well as a parameter for user interaction. Requires imports of the Altair library, a DataFrame named us_population, and a predefined opacity encoding and click_state parameter.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nbars = (\n    alt.Chart(\n        us_population.nlargest(15, \"population\"), title=\"Top 15 states by population\"\n    )\n    .mark_bar()\n    .encode(\n        x=\"population\",\n        opacity=opacity,\n        color=\"population\",\n        y=alt.Y(\"state\").sort(\"-x\"),\n    )\n)\n\n(choropleth & bars).add_params(click_state)\n```\n\n----------------------------------------\n\nTITLE: Ordering Altair Stacked Areas Ascendingly (Python)\nDESCRIPTION: Demonstrates using the `order` channel with `alt.Order(\"site\").sort(\"ascending\")` to control the drawing order of stacked segments in a stacked area chart. This ensures consistent ordering of areas based on the 'site' field.\n\nDependencies: altair, vega_datasets\nInputs: Data loaded from `vega_datasets.data.barley()`\nOutputs: An Altair chart object configured for display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/channels.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nbarley = data.barley()\n\nalt.Chart(barley).mark_area().encode(\n    x='variety:N',\n    y='sum(yield):Q',\n    color='site:N',\n    order=alt.Order(\"site\").sort(\"ascending\")\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Boroughs from Remote TopoJSON with Encoded Legend in Altair (Python)\nDESCRIPTION: This chart visualizes borough geoshapes from remote TopoJSON with color encoding by their id and an annotated legend with symbol and column limits. Tooltip is enabled for interactive name inspection. Requires prior loading of Altair Data via TopoJSON feature extraction; suited to hierarchical administrative boundaries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(data_url_topojson, title=\"London-Boroughs\").mark_geoshape(\n    tooltip=True\n).encode(\n    alt.Color(\"id:N\").scale(scheme='tableau20').legend(columns=2, symbolLimit=33)\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Notebook Renderer for Altair (Python)\nDESCRIPTION: Imports Altair and enables the specific 'notebook' renderer using `alt.renderers.enable('notebook')`. This is required for rendering charts correctly in the classic Jupyter Notebook environment when encountering the '<Vegalite 3 object>' output, assuming the necessary `vega` package is installed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.renderers.enable('notebook')\n```\n\n----------------------------------------\n\nTITLE: Creating Example Arc Marks for Properties Demonstration in Python\nDESCRIPTION: Creates a visualization to demonstrate various arc mark properties including radius, theta, cornerRadius and padAngle. Uses two side-by-side charts: a single arc with adjustable parameters and a stack of arcs showing category data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/arc.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\nrad_slider = alt.binding_range(min=0, max=100, step=1)\nrad_var = alt.param(bind=rad_slider, value=0, name=\"radius\")\n\nrad2_slider = alt.binding_range(min=0, max=100, step=1)\nrad_var2 = alt.param(bind=rad_slider, value=50, name=\"radius2\")\n\ntheta_slider = alt.binding_range(min=-2 * np.pi, max=2 * np.pi)\ntheta_var = alt.param(bind=theta_slider, value=-0.73, name=\"theta_single_arc\")\n\ntheta_slider2 = alt.binding_range(min=-2 * np.pi, max=2 * np.pi)\ntheta2_var = alt.param(bind=theta_slider, value=0.73, name=\"theta2_single_arc\")\n\ncorner_slider = alt.binding_range(min=0, max=50, step=1)\ncorner_var = alt.param(bind=corner_slider, value=0, name=\"cornerRadius\")\n\npad_slider = alt.binding_range(min=0, max=np.pi / 2)\npad_var = alt.param(bind=pad_slider, value=0, name=\"padAngle\")\n\nsource = pd.DataFrame({\"category\": [1, 2, 3, 4, 5, 6], \"value\": [4, 6, 10, 3, 7, 8]})\n\nc1 = alt.Chart(source, title=\"Single Arc\").mark_arc(\n    radius=rad_var,\n    radius2=rad_var2,\n    theta=theta_var,\n    theta2=theta2_var,\n    cornerRadius=corner_var,\n    padAngle=pad_var,\n)\n\nc2 = (\n    alt.Chart(source, title=\"Stacked Arcs\")\n    .mark_arc(\n        radius=rad_var,\n        radius2=rad_var2,\n        cornerRadius=corner_var,\n        padAngle=pad_var,\n    )\n    .encode(\n        theta=alt.Theta(field=\"value\", type=\"quantitative\"),\n        color=alt.Color(field=\"category\", type=\"nominal\"),\n    )\n)\n\nalt.hconcat(c1.properties(width=200), c2.properties(width=200)).add_params(\n    rad_var, rad_var2, theta_var, theta2_var, corner_var, pad_var\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Generated Vega-Lite JSON in Altair (Python)\nDESCRIPTION: Demonstrates how to view the underlying Vega-Lite JSON specification generated by an Altair chart. The `to_json()` method is called on the chart object, and the resulting JSON string is printed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchart = alt.Chart(data).mark_bar().encode(\n    x='a',\n    y='average(b)',\n)\nprint(chart.to_json())\n```\n\n----------------------------------------\n\nTITLE: Text Mark Properties Customization in Altair (Python)\nDESCRIPTION: This code demonstrates how to customize various properties of the text mark in Altair, such as angle, offset (dx, dy, xOffset, yOffset), font size, alignment, baseline, font family, font weight, font style and limit. Sliders and selectors are used to interactively control these properties, showcasing the flexibility of Altair's text mark.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/text.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nangle_slider = alt.binding_range(min=-180, max=180, step=1)\nangle_var = alt.param(bind=angle_slider, value=0, name=\"angle\")\n\ndx_slider = alt.binding_range(min=-20, max=20, step=1)\ndx_var = alt.param(bind=dx_slider, value=5, name=\"dx\")\n\ndy_slider = alt.binding_range(min=-20, max=20, step=1)\ndy_var = alt.param(bind=dy_slider, value=0, name=\"dy\")\n\nxOffset_slider = alt.binding_range(min=-20, max=20, step=1)\nxOffset_var = alt.param(bind=xOffset_slider, value=0, name=\"xOffset\")\n\nyOffset_slider = alt.binding_range(min=-20, max=20, step=1)\nyOffset_var = alt.param(bind=yOffset_slider, value=0, name=\"yOffset\")\n\nfontSize_slider = alt.binding_range(min=1, max=36, step=1)\nfontSize_var = alt.param(bind=fontSize_slider, value=14, name=\"fontSize\")\n\nlimit_slider = alt.binding_range(min=0, max=150, step=1)\nlimit_var = alt.param(bind=limit_slider, value=0, name=\"limit\")\n\nalign_select = alt.binding_select(options=[\"left\", \"center\", \"right\"])\nalign_var = alt.param(bind=align_select, value=\"left\", name=\"align\")\n\nbaseline_select = alt.binding_select(options=[\"alphabetic\", \"top\", \"middle\", \"bottom\"])\nbaseline_var = alt.param(bind=baseline_select, value=\"midle\", name=\"baseline\")\n\nfont_select = alt.binding_select(options=[\"sans-serif\", \"serif\", \"monospace\"])\nfont_var = alt.param(bind=font_select, value=\"sans-serif\", name=\"font\")\n\nfontWeight_select = alt.binding_select(options=[\"normal\", \"bold\"])\nfontWeight_var = alt.param(bind=fontWeight_select, value=\"normal\", name=\"fontWeight\")\n\nfontStyle_select = alt.binding_select(options=[\"normal\", \"italic\"])\nfontStyle_var = alt.param(bind=fontStyle_select, value=\"normal\", name=\"fontStyle\")\n\nsource = pd.DataFrame(\n    {\n        \"a\": [30, 25, 70],\n        \"b\": [28, 65, 43],\n        \"label\": [\"Andy\", \"Brian\", \"Charlie\"],\n    }\n)\n\nbase = alt.Chart(source).encode(\n    x=alt.X(\"a:Q\").axis(labelAngle=0).scale(domain=[0, 100]),\n    y=alt.Y(\"b:Q\").scale(domain=[0, 100]),\n)\n\npts = base.mark_point()\n\ntext = base.mark_text(\n    dx=dx_var,\n    dy=dy_var,\n    xOffset=xOffset_var,\n    yOffset=yOffset_var,\n    angle=angle_var,\n    align=align_var,\n    baseline=baseline_var,\n    font=font_var,\n    fontSize=fontSize_var,\n    fontStyle=fontStyle_var,\n    fontWeight=fontWeight_var,\n    limit=limit_var,\n).encode(text=\"label:N\")\n\n(pts + text).add_params(\n    dx_var,\n    dy_var,\n    xOffset_var,\n    yOffset_var,\n    angle_var,\n    align_var,\n    baseline_var,\n    font_var,\n    fontSize_var,\n    fontStyle_var,\n    fontWeight_var,\n    limit_var,\n)\n```\n\n----------------------------------------\n\nTITLE: Limitations of 'alt.datum' and 'alt.value' with method-based attribute setting in Altair in Python\nDESCRIPTION: Explains that 'alt.datum' and 'alt.value' do not support method-based property setting such as 'scale' directly because they return plain Python dictionaries or values. Recommends the use of specific classes like 'YDatum' for advanced attribute setting with methods.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\nalt.Chart().mark_bar().encode(\n    y=alt.YDatum(220).scale(domain=(0,500)),\n    color=alt.value(\"darkkhaki\")\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nIf you were to instead use 'y=alt.datum(220).scale(domain=(0,500))',\n an 'AttributeError' would be raised, due to the fact that 'alt.datum(220)' simply returns a Python dictionary and does not possess a 'scale' attribute.\n\n# Recommended usage\nalt.YDatum(220).scale(domain=(0,500))\n```\n\n----------------------------------------\n\nTITLE: Plotting Daily High Temperatures with Altair (Heatmap)\nDESCRIPTION: This snippet creates a heatmap of daily high temperatures in Seattle using Altair. It extracts both the month and the day from the date field and uses them as the x and y axes, respectively. The color represents the maximum temperature.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/timeunit.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(temps).mark_rect().encode(\n    alt.X('date(date):O').title('day'),\n    alt.Y('month(date):O').title('month'),\n    color='max(temp):Q'\n).properties(\n    title=\"2010 Daily High Temperatures in Seattle (F)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Binding Interval Selection to X-Axis and Customizing Empty in Altair (Python)\nDESCRIPTION: This code demonstrates restricting an interval selection to the x-axis and setting its 'empty' behavior. Dependencies include Altair and the 'make_example' function. With encodings=['x'], users can only brush horizontally; empty=False ensures no points selected initially. Expected output is a heatmap responding to only x-axis brushing.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ninterval_x = alt.selection_interval(encodings=['x'], empty=False)\nmake_example(interval_x)\n```\n\n----------------------------------------\n\nTITLE: Creating a Classify Function for Choropleth Maps in Python with Altair\nDESCRIPTION: A utility function that creates a choropleth map of US unemployment statistics using different scale types. The function takes parameters for scale type, domain, nice flag, and title to customize the visualization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\ndef classify(type, domain=None, nice=False, title=None):\n    # define data\n    us_counties = alt.topo_feature(data.us_10m.url, \"counties\")\n    us_unemp = data.unemployment.url\n\n    # define choropleth scale\n    if \"threshold\" in type:\n        scale = alt.Scale(type=type, domain=domain, scheme=\"inferno\")\n    else:\n        scale = alt.Scale(type=type, nice=nice, scheme=\"inferno\")\n\n    # define title\n    if title is None:\n        title = type\n\n    # define choropleth chart\n    choropleth = (\n        alt.Chart(us_counties, title=title)\n        .mark_geoshape()\n        .transform_lookup(\n            lookup=\"id\", from_=alt.LookupData(data=us_unemp, key=\"id\", fields=[\"rate\"])\n        )\n        .encode(\n            alt.Color(\n                \"rate:Q\",\n                scale=scale,\n                legend=alt.Legend(\n                    direction=\"horizontal\", orient=\"bottom\", format=\".1%\"\n                ),\n            )\n        )\n        .project(type=\"albersUsa\")\n    )\n    return choropleth\n\nclassify(type='linear')\n```\n\n----------------------------------------\n\nTITLE: Analyzing weather type distribution over months using stacked bar chart in Altair\nDESCRIPTION: This code creates a stacked bar chart, encoding months on x-axis, count of days on y-axis, and weather types by color, to study seasonal weather patterns. It demonstrates categorical encoding and color mappings.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_bar().encode(\n    x='month(date):N',\n    y='count()',\n    color='weather',\n)\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Template for Embedding Vega-Lite Charts\nDESCRIPTION: Provides a minimal HTML structure for embedding Vega-Lite charts using the Vega-Embed JavaScript library. It includes CDN links for Vega, Vega-Lite, and Vega-Embed, a target div (`#vis`), and a script block to load the chart specification (`spec`) and options (`opt`).\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega@3\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega-lite@2\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/vega-embed@3\"></script>\n  </head>\n  <body>\n    <div id=\"vis\"></div>\n    <script type=\"text/javascript\">\n      var spec = {};  /* JSON dump of your chart's spec */\n      var opt = {\"renderer\": \"canvas\", \"actions\": false};  /* Options for the embedding */\n      vegaEmbed(\"#vis\", spec, opt);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Altair's Flatten Transform\nDESCRIPTION: This snippet demonstrates the use of Altair's `transform_flatten` method to extract the contents of the 'values' array into a column that can be referenced by an encoding. It creates a chart with ticks, encoding 'values' on the x-axis and 'label' on the y-axis. Requires the `df` DataFrame from the previous snippet and the `altair` library.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/flatten.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\n\nalt.Chart(df).transform_flatten(\n    ['values']\n).mark_tick().encode(\n    x='values:Q',\n    y='label:N',\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Browser Renderer in Altair\nDESCRIPTION: Code to enable the browser renderer which automatically opens charts in system web browser tabs, useful for displaying interactive features in non-browser environments.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable(\"browser\")\n```\n\n----------------------------------------\n\nTITLE: Converting Single Numpy Image to Base64 Python\nDESCRIPTION: This snippet defines an updated version of the `create_tooltip_image` function. Unlike the previous version, this one processes a single Numpy image array at a time, converting it directly to a base64 PNG string. It applies this function to the individual 'image1' and 'image2' columns of the DataFrame, creating new columns (`image1_base64`, `image2_base64`) containing the base64 strings for each image separately. Original large image arrays are then dropped.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/numpy-tooltip-images.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef create_tooltip_image(img_arr):\n    \"\"\"Rescale and convert an image to a base64 string.\"\"\"\n    # print(img_arr)\n    # Create a PIL image from the array.\n    # Multiplying by 255 and recasting as uint8 for the images to occupy the entire supported instensity space from 0-255\n    img = Image.fromarray((255 * img_arr).astype('uint8'))\n\n    # Convert to base64 encoded image string that can be displayed in the tooltip\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n    return f\"data:image/png;base64,{img_str}\"\n\n# The column with the base64 image string must be called \"image\" in order for it to trigger the image rendering in the tooltip\ndf[['image1_base64', 'image2_base64']] = df[['image1', 'image2']].map(create_tooltip_image)\n# Dropping the image arrays since they are large an no longer needed\n# Also drop the previous tooltip image for clarity\ndf_plot = df.drop(columns=['image1', 'image2', 'image'])\ndf_plot\n```\n\n----------------------------------------\n\nTITLE: Example Vega-Lite JSON Specification for Altair Chart\nDESCRIPTION: This JSON code block displays the resulting Vega-Lite specification saved to 'chart.json' by the corresponding Python `chart.save()` call. It includes the schema reference, view configuration, data source URL, encoding details for axes and color, and the mark type ('point'). This JSON can be rendered using Vega-Lite compatible tools like vegaEmbed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"config\": {\n    \"view\": {\n      \"continuousHeight\": 300,\n      \"continuousWidth\": 300\n    }\n  },\n  \"data\": {\n    \"url\": \"https://vega.github.io/vega-datasets/data/cars.json\"\n  },\n  \"encoding\": {\n    \"color\": {\n      \"field\": \"Origin\",\n      \"type\": \"nominal\"\n    },\n    \"x\": {\n      \"field\": \"Horsepower\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"field\": \"Miles_per_Gallon\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"mark\": {\"type\": \"point\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Embedded Altair Chart\nDESCRIPTION: This HTML code block shows the content of the 'chart.html' file generated by `chart.save('chart.html')`. It includes HTML boilerplate, script tags to load Vega, Vega-Lite, and vegaEmbed from CDNs, a div element (`#vis`) to contain the chart, and JavaScript code to embed the Vega-Lite specification (stored in the `spec` variable) into the designated div.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega@5\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega-lite@5\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega-embed@7\"></script>\n</head>\n<body>\n  <div id=\"vis\"></div>\n  <script type=\"text/javascript\">\n    var spec = {\n      \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n      \"config\": {\n        \"view\": {\n          \"continuousHeight\": 300,\n          \"continuousWidth\": 300\n        }\n      },\n      \"data\": {\n        \"url\": \"https://vega.github.io/vega-datasets/data/cars.json\"\n      },\n      \"encoding\": {\n        \"color\": {\n          \"field\": \"Origin\",\n          \"type\": \"nominal\"\n        },\n        \"x\": {\n          \"field\": \"Horsepower\",\n          \"type\": \"quantitative\"\n        },\n        \"y\": {\n          \"field\": \"Miles_per_Gallon\",\n          \"type\": \"quantitative\"\n        }\n      },\n      \"mark\": {\"type\": \"point\"}\n    };\n    var opt = {\"renderer\": \"canvas\", \"actions\": false};\n    vegaEmbed(\"#vis\", spec, opt);\n  </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating an IndexSelection and Accessing Selected Rows via Indices - Python\nDESCRIPTION: Illustrates usage of alt.selection_point without fields or encodings, enabling an index-based selection that stores selected row indices. The 'value' property contains a list of selected row indices which can be used to extract corresponding rows via pandas 'iloc'. This approach facilitates row-oriented selection handling in data frames. Dependencies: Altair, vega_datasets, pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\nbrush = alt.selection_point(name=\"point\")\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n```\n\n----------------------------------------\n\nTITLE: Enabling Jupyter Renderer with VegaFusion in Altair\nDESCRIPTION: This snippet demonstrates how to enable the Jupyter renderer with VegaFusion to interactively explore aggregated datasets on the order of millions of rows.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.data_transformers.enable(\"vegafusion\")\nalt.renderers.enable(\"jupyter\")\n...\nchart\n```\n\n----------------------------------------\n\nTITLE: Lookup Geometries from GeoDataFrame to DataFrame\nDESCRIPTION: Shows the alternative approach of using transform_lookup to add geometries from a GeoDataFrame to a DataFrame visualization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(df_us_unemp).mark_geoshape().transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(data=gdf_us_counties, key='id', fields=['geometry', 'type'])\n).encode(\n    alt.Color('rate:Q')\n).project(\n    type='albersUsa'\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting average maximum temperature per year as a bar chart in Altair\nDESCRIPTION: This code produces a horizontal bar chart showing the mean of maximum temperatures per year, using an ordinal encoding for years, to visualize temperature trends over time.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_bar().encode(\n    x='mean(temp_max)',\n    y='year(date):O'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Tick Marks Using Altair in Python\nDESCRIPTION: This snippet demonstrates how to generate a simple dot plot using tick marks to represent the distribution of precipitation values from Seattle weather data. It requires the altair library for charting and vega_datasets for sample data. The chart encodes the quantitative \"precipitation\" field on the x-axis, displaying a tick mark for each data point, thereby effectively showing data distribution.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/tick.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nalt.Chart(source).mark_tick().encode(\n    x=\"precipitation:Q\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating 1D Error Band on Raw Data Using Standard Deviation Extent with Points (Python Altair)\nDESCRIPTION: This snippet shows creating a 1D error band to display the error range of a single continuous field (Miles_per_Gallon) as a standard deviation estimate. It uses the cars dataset and encodes the y-axis with 'Miles_per_Gallon' and extent set to 'stdev' in the error band mark. Additionally, it layers a scatter plot of points to show individual data points using horsepower and miles per gallon. This illustrates how error bands can summarize data variability over raw continuous values.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorband.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nband = alt.Chart(source).mark_errorband(extent=\"stdev\").encode(\n    alt.Y(\"Miles_per_Gallon:Q\").title(\"Miles per Gallon\")\n)\n\npoints = alt.Chart(source).mark_point().encode(\n    x=\"Horsepower:Q\",\n    y=\"Miles_per_Gallon:Q\",\n)\n\nband + points\n```\n\n----------------------------------------\n\nTITLE: Initializing Parameterized Rule Marks with Altair in Python\nDESCRIPTION: This snippet demonstrates how to create an interactive Altair chart using rule marks parameterized by sliders and dropdowns for dynamic control of rule properties such as position, stroke width, stroke cap, and stroke dash styles. It requires Altair and Pandas libraries. Inputs include quantitative slider ranges for x, x2, y, y2, stroke width, and selection for stroke cap and dash pattern. The output is a dynamic rule mark visualization whose attributes update based on user interaction.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/rule.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nx_slider = alt.binding_range(min=1, max=100, step=1)\nx_var = alt.param(bind=x_slider, value=35, name=\"x\")\n\nx2_slider = alt.binding_range(min=1, max=100, step=1)\nx2_var = alt.param(bind=x2_slider, value=75, name=\"x2\")\n\ny_slider = alt.binding_range(min=1, max=100, step=1)\ny_var = alt.param(bind=y_slider, value=25, name=\"y\")\n\ny2_slider = alt.binding_range(min=1, max=100, step=1)\ny2_var = alt.param(bind=y2_slider, value=75, name=\"y2\")\n\nstrokeWidth_slider = alt.binding_range(min=0, max=10, step=0.5)\nstrokeWidth_var = alt.param(bind=strokeWidth_slider, value=2, name=\"strokeWidth\")\n\nstrokeCap_select = alt.binding_select(options=[\"butt\", \"round\", \"square\"])\nstrokeCap_var = alt.param(bind=strokeCap_select, value=\"butt\", name=\"strokeCap\")\n\nstrokeDash_select = alt.binding_select(\n    options=[[1, 0], [8, 8], [8, 4], [4, 4], [4, 2], [2, 1], [1, 1]]\n)\nstrokeDash_var = alt.param(bind=strokeDash_select, value=[1, 0], name=\"strokeDash\")\n\nalt.Chart().mark_rule(\n    color=\"orange\",\n    strokeWidth=strokeWidth_var,\n    strokeCap=strokeCap_var,\n    strokeDash=strokeDash_var,\n).encode(\n    x=alt.datum(x_var, type=\"quantitative\", scale=alt.Scale(domain=[0, 100])),\n    y=alt.datum(y_var, type=\"quantitative\", scale=alt.Scale(domain=[0, 100])),\n    x2=alt.datum(x2_var),\n    y2=alt.datum(y2_var),\n).add_params(\n    x_var,\n    x2_var,\n    y_var,\n    y2_var,\n    strokeWidth_var,\n    strokeCap_var,\n    strokeDash_var,\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Color by Country Name in Geoshape\nDESCRIPTION: Maps the visual property of the NAME column to the color encoding to distinguish different countries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_sel).mark_geoshape().encode(\n    color='NAME:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basemap with Population Bubbles using geoCentroid\nDESCRIPTION: Combines a basemap with population bubbles, using the geoCentroid expression to calculate centroids dynamically.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nbasemap = alt.Chart(gdf_sel).mark_geoshape(\n     fill='lightgray', stroke='white', strokeWidth=0.5\n)\n\nbubbles = alt.Chart(gdf_sel).transform_calculate(\n    centroid=alt.expr.geoCentroid(None, alt.datum)\n).mark_circle(\n    stroke='black'\n).encode(\n    longitude='centroid[0]:Q',\n    latitude='centroid[1]:Q',\n    size=\"POP_EST:Q\"\n)\n\n(basemap + bubbles).project(\n    type='identity', reflectY=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Chart with Image Tooltip Python\nDESCRIPTION: This snippet generates a basic Altair scatter plot visualizing the relationship between blob area and group. The key functionality is encoding the pre-generated 'image' column (containing base64 image strings) into the tooltip. When hovering over a circle mark, the concatenated image of the corresponding row's blobs is displayed in the tooltip, allowing visual inspection alongside quantitative data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/numpy-tooltip-images.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\n# The random() function is used to jitter points in the x-direction\nalt.Chart(df_plot, width=alt.Step(40)).mark_circle(xOffset=alt.expr('random() * 16 - 8')).encode(\n    x='group',\n    y=alt.Y(alt.repeat(), type='quantitative'),\n    tooltip=['image'],\n    color='group',\n).repeat(\n    ['image1_area', 'image2_area']\n).resolve_scale(\n    y='shared'\n).properties(\n    title='Comparison of blob areas'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Title in Altair\nDESCRIPTION: The code demonstrates how to customize the chart title in Altair. It configures the title's font size, font, anchor, and color using `configure_title`. It depends on the Altair library, and the `vega_datasets` for data. The expected output is an Altair chart with the title styled according to the specified configurations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/configuration.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n).properties(\n    title='Cars Data'\n)\n\nchart.configure_title(\n    fontSize=20,\n    font='Courier',\n    anchor='start',\n    color='gray'\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Band Color Using Encoding Channel in Altair (Python)\nDESCRIPTION: This example shows how to customize the visual appearance of an error band by setting the color encoding to a constant black value. Using the cars dataset, the error band chart encodes year on the x-axis and miles per gallon on the y-axis with confidence interval extent and visible borders. The 'color' channel is set via alt.value('black') to override default coloring, demonstrating how to alter band aesthetics through encoding channels.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorband.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nalt.Chart(source).mark_errorband(extent=\"ci\", borders=True).encode(\n    x=\"year(Year)\",\n    y=alt.Y(\"Miles_per_Gallon:Q\")\n        .scale(zero=False)\n        .title(\"Miles per Gallon (95% CIs)\"),\n    color=alt.value(\"black\")\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Line Interpolation with 'monotone' in Altair (Python)\nDESCRIPTION: Demonstrates the 'interpolate' mark property to create a smooth (monotone) line chart, filtering for the 'GOOG' symbol. Needs altair, vega_datasets. Expects stock data; output is a chart using 'monotone' interpolation, helpful for emphasizing curve smoothness in temporal data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line(interpolate=\"monotone\").encode(\n    x=\"date\",\n    y=\"price\",\n).transform_filter(\n    alt.datum.symbol == \"GOOG\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a multi-panel chart with selection in Altair\nDESCRIPTION: This code combines a points chart and a histogram of weather types with shared selection, enabling interactive filtering. Uses concatenation, data transformations, selection, and dynamic styling for complex exploratory visualizations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nbrush = alt.selection_interval()\nscale = alt.Scale(domain=['sun', 'fog', 'drizzle', 'rain', 'snow'],\n                  range=['#e7ba52', '#c7c7c7', '#aec7e8', '#1f77b4', '#9467bd'])\n\ntemp_range = alt.datum[\"temp_max\"] - alt.datum[\"temp_min\"]\n\npoints = alt.Chart(width=600, height=400).mark_point().encode(\n    alt.X('temp_max:Q').title('Maximum Daily Temperature (C)'),\n    alt.Y('temp_range:Q').title('Daily Temperature Range (C)'),\n    color=alt.when(brush).then(alt.Color('weather:N').scale(scale)).otherwise(alt.value('lightgray')),\n    size=alt.Size('precipitation:Q').scale(range=[1, 200])\n).transform_calculate(\n    \"temp_range\", \"datum.temp_max - datum.temp_min\"\n).add_params(\n    brush\n)\n\nbars = alt.Chart(width=600).mark_bar().encode(\n    x='count()',\n    y='weather:N',\n    color=alt.Color('weather:N').scale(scale)\n).transform_calculate(\n    \"temp_range\", \"datum.temp_max - datum.temp_min\"\n).transform_filter(\n    brush\n)\n\nalt.vconcat(points, bars, data=df)\n```\n\n----------------------------------------\n\nTITLE: Converting Numpy Images to Base64 Python\nDESCRIPTION: This snippet defines a function `create_tooltip_image` that takes a row of a Pandas DataFrame containing Numpy image arrays. It concatenates two specified image arrays horizontally with a gap, converts the resulting array to a PIL Image, encodes it into a base64 PNG string, and adds the data URI prefix. This function is applied to the DataFrame to create a new 'image' column specifically for tooltips, and the original large image arrays are dropped to reduce data size.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/numpy-tooltip-images.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom io import BytesIO\nfrom PIL import Image, ImageDraw\nimport base64\n\n\ndef create_tooltip_image(df_row):\n    \"\"\"Concatenate, rescale, and convert images to base64 strings.\"\"\"\n    # Concatenate images to show together in the tooltip\n    # This can be skipped if only one image is to be displayed\n    img_gap = np.ones([df_row['image1'].shape[0], 10])  # 10 px white gap between imgs\n    img_arr = np.concatenate(\n        [\n            df_row['image1'],\n            img_gap,\n            df_row['image2']\n        ],\n        axis=1\n    )\n\n    # Create a PIL image from the array.\n    # Multiplying by 255 and recasting as uint8 for the images to occupy the entire supported instensity space from 0-255\n    img = Image.fromarray((255 * img_arr).astype('uint8'))\n\n    # Optional: Burn in labels as pixels in the images. Can be helpful to keep track of which image is which\n    ImageDraw.Draw(img).text((3, 0), 'im1', fill=255)\n    ImageDraw.Draw(img).text((3 + df_row['image1'].shape[1] + img_gap.shape[1], 0), 'im2', fill=255)\n\n    # Convert to base64 encoded image string that can be displayed in the tooltip\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n    return f\"data:image/png;base64,{img_str}\"\n\n# The column with the base64 image string must be called \"image\" in order for it to trigger the image rendering in the tooltip\ndf['image'] = df[['image1', 'image2']].apply(create_tooltip_image, axis=1)\n\n# Dropping the image arrays since they are large an no longer needed\ndf_plot = df.drop(columns=['image1', 'image2'])\ndf_plot\n```\n\n----------------------------------------\n\nTITLE: Customizing Tick Mark Thickness and Band Size in Altair Using Python\nDESCRIPTION: This code example shows how to customize tick marks' visual appearance by configuring tick thickness and band size in an Altair chart displaying Seattle precipitation data. After defining the tick mark chart, the 'configure_tick' method is called with parameters 'thickness' and 'bandSize' to adjust line thickness and the effective size of the tick band respectively. Dependencies include altair and vega_datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/tick.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nalt.Chart(source).mark_tick().encode(\n    x=\"precipitation:Q\"\n).configure_tick(\n    thickness=2,\n    bandSize=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Nested GeoJSON Objects in Altair\nDESCRIPTION: Demonstrates how to visualize GeoJSON objects that are nested within another dataset. The example uses the shape encoding channel with the :G suffix to process nested features as GeoJSON objects. Custom colors are applied to each polygon shape.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nnested_features = [\n    {\"color\": \"#F3C14F\", \"geo\": {\"type\": \"Feature\", \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[1.45, 3.75], [1.45, 0], [0, 0], [1.45, 3.75]]]}}},\n    {\"color\": \"#4098D7\", \"geo\": {\"type\": \"Feature\", \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[1.45, 0], [1.45, 3.75], [2.57, 3.75], [2.57, 0], [2.33, 0], [1.45, 0]]]}}},\n    {\"color\": \"#66B4E2\", \"geo\": {\"type\": \"Feature\", \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[2.33, 0], [2.33, 2.5], [3.47, 2.5], [3.47, 0], [3.2, 0], [2.57, 0], [2.33, 0]]]}}},\n    {\"color\": \"#A9CDE0\", \"geo\": {\"type\": \"Feature\", \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[3.2, 0], [3.2, 1.25], [4.32, 1.25], [4.32, 0], [3.47, 0], [3.2, 0]]]}}},\n]\ndata_nested_features = alt.Data(values=nested_features)\n\nalt.Chart(data_nested_features, title=\"Vega-Altair\").mark_geoshape().encode(\n    shape=\"geo:G\",\n    color=alt.Color(\"color:N\").scale(None)\n).project(type=\"identity\", reflectY=True)\n```\n\n----------------------------------------\n\nTITLE: Binning Continuous Data for Color with Top-Level Transform Altair Python\nDESCRIPTION: Demonstrates binning a quantitative field ('Acceleration') into a new field 'binned_acc' using the top-level `transform_bin` method with `maxbins=5`. The binned field 'binned_acc' is then used in the color encoding to create a discrete color map for a scatter plot. Requires Altair and the 'cars' dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/bin.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='binned_acc:O'\n).transform_bin(\n    'binned_acc', 'Acceleration', bin=alt.Bin(maxbins=5)\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Image Data Python\nDESCRIPTION: This snippet defines a helper function `create_blobs` to generate synthetic 2D Numpy arrays representing images with simple shapes (circles or squares). It then uses this function to populate a Pandas DataFrame with image arrays and associated metadata like blob area and group labels. The area is calculated as the proportion of pixels exceeding a threshold.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/numpy-tooltip-images.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nfrom scipy import ndimage as ndi\n\nrng = np.random.default_rng([ord(c) for c in 'altair'])\nn_rows = 200\n\ndef create_blobs(blob_shape, img_width=96, n_dim=2, sizes=[0.05, 0.1, 0.15]):\n    \"\"\"Helper function to create blobs in the images\"\"\"\n    shape = tuple([img_width] * n_dim)\n    mask = np.zeros(shape)\n    points = (img_width * rng.random(n_dim)).astype(int)\n    mask[tuple(indices for indices in points)] = 1\n    if blob_shape == 'circle':\n        im = ndi.gaussian_filter(mask, sigma=rng.choice(sizes) * img_width)\n    elif blob_shape == 'square':\n        im = ndi.uniform_filter(mask, size=rng.choice(sizes) * img_width, mode='constant') * rng.normal(4, size=(img_width, img_width))\n    return im / im.max()\n\ndf = pd.DataFrame({\n    'image1': [create_blobs('circle') for _ in range(n_rows)],\n    'image2': [create_blobs('square', sizes=[0.3, 0.4, 0.5]) for _ in range(n_rows)],\n    'group': rng.choice(['a', 'b', 'c'], size=n_rows)\n})\n# Compute the area as the proportion of pixels above a threshold\ndf[['image1_area', 'image2_area']] = df[['image1', 'image2']].map(lambda x: (x > 0.4).mean())\ndf\n```\n\n----------------------------------------\n\nTITLE: Link a parameter to the chart width\nDESCRIPTION: This code links a parameter named 'width' to the chart's width using a binding range. The chart's width will automatically adjust based on the slider value. This demonstrates the special meaning some parameter names have in Vega-Lite.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbind_range = alt.binding_range(min=100, max=300, name='Chart width: ')\nparam_width = alt.param('width', bind=bind_range)\n\nalt.Chart(df).mark_point().encode(\n    alt.X('xval'),\n    alt.Y('yval')\n).add_params(\n    param_width\n)\n```\n\n----------------------------------------\n\nTITLE: Separating Stroke and Fill in Geoshape\nDESCRIPTION: Demonstrates how to separately define stroke and fill properties for polygon geometries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_sel).mark_geoshape(\n    stroke='white',\n    strokeWidth=1.5\n).encode(\n    fill='NAME:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Kernel Density Estimation with Altair in Python\nDESCRIPTION: This snippet demonstrates how to generate a density plot of IMDB ratings from a movies dataset using Altair's transform_density method. It requires importing altair and vega_datasets, applying the transform_density function, and encoding the resulting data into an area chart. The output visualizes the distribution of ratings and serves as an example of single-variable density estimation.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/density.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nalt.Chart(data.movies.url).transform_density(\n    'IMDB_Rating',\n    as_=['IMDB_Rating', 'density'],\n).mark_area().encode(\n    x=\"IMDB_Rating:Q\",\n    y='density:Q',\n)\n```\n\n----------------------------------------\n\nTITLE: Create a regex search widget\nDESCRIPTION: This example demonstrates how to create a regex search input that filters data based on a regular expression.  It uses `alt.expr.regexp` to define the regex pattern and `alt.expr.test` to test it against the `Name` column. A parameter is used instead of `selection_point` to enable more complex filtering logic.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsearch_input = alt.param(\n    value='',\n    bind=alt.binding(\n        input='search',\n        placeholder=\"Car model\",\n        name='Search ',\n    )\n)\nsearch_matches = alt.expr.test(alt.expr.regexp(search_input, \"i\"), alt.datum.Name)\n\nalt.Chart(cars).mark_point(size=60).encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    tooltip='Name:N',\n    opacity=alt.when(search_matches).then(alt.value(1)).otherwise(alt.value(0.05)),\n).add_params(search_input)\n```\n\n----------------------------------------\n\nTITLE: Customizing Color and Opacity of Error Bars in Altair\nDESCRIPTION: This example shows how to set the color property directly in the mark_errorbar() call to customize the visual appearance of error bars, including setting specific colors to enhance chart aesthetics or highlight certain data series. It depends on Altair and Vega datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nerror_bars = alt.Chart(source).mark_errorbar(ticks=True).encode(\n    alt.X(\"yield:Q\").scale(zero=False),\n    alt.Y(\"variety:N\"),\n    color=alt.value(\"#4682b4\"),\n)\n\npoints = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\"\n).encode(\n    alt.X(\"mean(yield)\"),\n    alt.Y(\"variety:N\"),\n)\n\nerror_bars + points\n```\n\n----------------------------------------\n\nTITLE: Creating a Donut Chart with Arc Marks in Python\nDESCRIPTION: Shows how to create a donut chart by setting the innerRadius property of an arc mark. This creates a hole in the center of the pie chart.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/arc.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nimport altair as alt\n\nsource = pd.DataFrame({\"category\": [1, 2, 3, 4, 5, 6], \"value\": [4, 6, 10, 3, 7, 8]})\n\nalt.Chart(source).mark_arc(innerRadius=50).encode(\n    theta=alt.Theta(field=\"value\", type=\"quantitative\"),\n    color=alt.Color(field=\"category\", type=\"nominal\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips to Error Bars in Altair\nDESCRIPTION: This snippet demonstrates how to add custom tooltips to error bars, replacing default tooltips with specific data field information for richer interactivity. The tooltip will display data related to the 'variety' in this case. It requires Altair and Vega datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nalt.Chart(source).mark_errorbar().encode(\n    alt.X(\"yield:Q\").scale(zero=False),\n    alt.Y(\"variety:N\"),\n    tooltip=\"variety:N\",\n)\n```\n\n----------------------------------------\n\nTITLE: Faceting Chart using Column Encoding Channel - Altair Python\nDESCRIPTION: This snippet demonstrates an even simpler method for basic column faceting by including the faceting field ('species:N') directly within the `encode` method as the 'column' channel. This achieves a similar result to using `.facet` for simple charts.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(iris).mark_point().encode(\n    x='petalLength:Q',\n    y='petalWidth:Q',\n    color='species:N',\n    column='species:N'\n).properties(\n    width=180,\n    height=180\n)\n```\n\n----------------------------------------\n\nTITLE: Binned Aggregation with Aggregate Function on Color Channel in Altair (Python)\nDESCRIPTION: Shows use of binned axes for 'Horsepower' and 'Miles_per_Gallon', with point size representing count and color representing the mean of 'Acceleration'. Demonstrates encoding a quantitative aggregate on the color channel for richer visualization.\n\nDependencies: altair, DataFrame 'cars' with relevant fields. Parameters: specify bins and aggregation type ('mean') with type ':Q'. Output: mark_circle chart with both size and color as aggregated values. Limitation: Default color legend applies unless otherwise specified.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_circle().encode(\n    alt.X('Horsepower').bin(),\n    alt.Y('Miles_per_Gallon').bin(),\n    size='count()',\n    color='mean(Acceleration):Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Predicate Arguments in Altair\nDESCRIPTION: Example of passing multiple predicates to transform_filter, which automatically combines them with AND (&).\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchart.transform_filter(datum.year > 1980, datum.age != 90)\n```\n\n----------------------------------------\n\nTITLE: Applying Aggregation (Average) in Altair (Python)\nDESCRIPTION: Demonstrates performing data aggregation within the `encode()` method. It calculates the average of the 'b' column for each category in the 'a' column and maps the result to the y-axis, displaying aggregated values as points.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_point().encode(\n    x='a',\n    y='average(b)'\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Remote GeoJSON as Features via URL in Altair (Python)\nDESCRIPTION: This snippet demonstrates loading a remote GeoJSON file directly via URL and formatting it so Altair treats its features as records. Requires Altair installed and valid web access. Data is referenced through a Data object and the DataFormat property argument. Best for large, hosted datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nurl_geojson = \"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_0_countries.geojson\"\ndata_url_geojson = alt.Data(url=url_geojson, format=alt.DataFormat(property=\"features\"))\ndata_url_geojson\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart to JSON using Python\nDESCRIPTION: This Python snippet illustrates how to save an Altair chart object to a JSON file. It first imports necessary libraries (`altair`, `vega_datasets`), creates a scatter plot using data from `vega_datasets`, and then calls the `chart.save()` method with a '.json' file extension to serialize the chart's Vega-Lite specification into the specified file.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nchart = alt.Chart(data.cars.url).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n)\n\nchart.save('chart.json')\n```\n\n----------------------------------------\n\nTITLE: Generating a Pandas Query from Interval Selection\nDESCRIPTION: This code snippet shows how to generate a pandas query from the interval selection created in the previous snippet. It iterates through the `jchart.selections.interval.value` dictionary, constructing a filter string. The filter string is then used with the `.query()` method of the pandas DataFrame to filter the data based on the selection range.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfilter = \" and \".join([\n    f\"{v[0]} <= \\`{k}\\` <= {v[1]}\"\n    for k, v in jchart.selections.interval.value.items()\n])\nsource.query(filter)\n```\n\n----------------------------------------\n\nTITLE: Creating a Repeated Map using Altair's RepeatChart Pattern\nDESCRIPTION: Demonstration of using Altair's repeat method to create multiple maps displaying different variables (population, engineers, hurricanes) for US states with independent color scales.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nstates = alt.topo_feature(data.us_10m.url, 'states')\nsource = data.population_engineers_hurricanes.url\nvariable_list = ['population', 'engineers', 'hurricanes']\n\nalt.Chart(states).mark_geoshape(tooltip=True).encode(\n    alt.Color(alt.repeat('row'), type='quantitative')\n).transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(source, 'id', variable_list)\n).project(\n    type='albersUsa'\n).repeat(\n    row=variable_list\n).resolve_scale(\n    color='independent'\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Both X and Y Axes in Altair (Python)\nDESCRIPTION: Shows how to map data columns to both x and y axes using the `encode()` method. Column 'a' (nominal) is mapped to x, and column 'b' (quantitative, automatically inferred) is mapped to y, creating a scatter plot.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_point().encode(\n    x='a',\n    y='b'\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Sine Wave Chart with Sequence Generator in Altair (Python)\nDESCRIPTION: This snippet demonstrates the use of Altair's sequence generator to produce tabular data for the variable x, followed by a calculated y column using a sine transformation. The resulting dataset is visualized as a line chart. Dependencies: Altair and NumPy (indirectly, via calculation of sine); pandas may also be referenced if using DataFrame directly. The sequence function takes start, stop, and step arguments. Output is a quantitative (Q) x/y line plot. Limitation: Meant for simple parametric data generation.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\n# Note that the following generator is functionally similar to\n# data = pd.DataFrame({'x': np.arange(0, 10, 0.1)})\ndata = alt.sequence(0, 10, 0.1, as_='x')\n\nalt.Chart(data).transform_calculate(\n    y='sin(datum.x)'\n).mark_line().encode(\n    x='x:Q',\n    y='y:Q',\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Active Altair Renderer (Python)\nDESCRIPTION: Imports Altair and prints the name of the currently active renderer using `alt.renderers.active`. This helps troubleshoot rendering problems in JupyterLab, as only the 'default' or 'jupyterlab' renderers work correctly.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nprint(alt.renderers.active)\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Image Chart with Interactive Selection in Altair\nDESCRIPTION: This example demonstrates an alternative approach to selection-based image display using faceting. It places a faceted image chart beside the original chart to prevent image overlap.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/image.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimg_faceted = alt.Chart(source, width=50, height=75).mark_image().encode(\n    url='image'\n).facet(\n    alt.Facet('image', title='', header=alt.Header(labelFontSize=0))\n).transform_filter(\n    brush\n)\n\npoint | img_faceted\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Type Specification in Altair Encodings (Python)\nDESCRIPTION: Illustrates Altair's shorthand syntax for specifying data types and aggregation within the encoding string. 'average(b):Q' defines the field 'b', aggregation 'average', and type 'quantitative' (Q). The JSON representation is printed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ny = alt.Y('average(b):Q')\nprint(y.to_json())\n```\n\n----------------------------------------\n\nTITLE: Sizing Points with mark_circle and Lat/Lon Coordinates\nDESCRIPTION: Shows how to size points based on a data attribute by using mark_circle with explicit latitude and longitude encodings.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngdf_centroid[\"lon\"] = gdf_centroid.geometry.x\ngdf_centroid[\"lat\"] = gdf_centroid.geometry.y\n\nalt.Chart(gdf_centroid).mark_circle().encode(\n    longitude=\"lon:Q\", latitude=\"lat:Q\", size=\"POP_EST:Q\"\n)\n```\n\n----------------------------------------\n\nTITLE: Persisting Data to Disk and Passing by URL in Altair\nDESCRIPTION: This snippet demonstrates how to save data to a JSON file and then pass it to Altair by URL, which is useful for working with large datasets without embedding them in the chart specification.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nurl = 'data.json'\ndata.to_json(url, orient='records')\n\nchart = alt.Chart(url).mark_line().encode(\n    x='x:Q',\n    y='y:Q'\n)\npprint(chart.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Enabling the Plaintext Renderer and Displaying a Chart (Python)\nDESCRIPTION: Shows how to activate the registered 'plaintext' renderer and construct a simple Altair chart with a 'description' property, resulting in the chart being rendered as a plain text description. Assumes prior registration of the 'plaintext' renderer and availability of 'alt' (Altair). Inputs: enables renderer, builds and displays a chart. No output from the code directly, but changes chart rendering to plaintext in the notebook.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/custom_renderers.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable('plaintext')\n\nalt.Chart('data.txt').mark_point().encode(\n    x='x:Q',\n    y='y:Q'\n).properties(\n    description='This is a simple chart'\n)\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Min and Max Horsepower Using Ranged Rule Marks in Altair with Python\nDESCRIPTION: This snippet uses ranged rules marking the minimum and maximum horsepower values for cars grouped by origin. The rule mark encodes the origin on the x-axis and a vertical line spanning from minimum to maximum horsepower on the y-axis using y and y2 encodings. It relies on Altair and Vega datasets. Input is the cars dataset with horsepower and origin fields. Output is a chart illustrating value ranges compactly with vertical lines for each group.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/rule.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_rule().encode(\n    x=\"Origin\",\n    y=\"min(Horsepower)\",\n    y2=\"max(Horsepower)\",\n)\n```\n\n----------------------------------------\n\nTITLE: Precalculating Sums with Pandas for Altair\nDESCRIPTION: This code precalculates the sum of 'yield' for each 'site' in the 'barley' dataset using Pandas.  It groups the data by 'site', calculates the sum of 'yield', renames the summed column, and resets the index. This reduces data size passed to Altair. The result is a bar chart visualizing the pre-aggregated data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\nsource_aggregated = (\n    source.groupby(\"site\")[\"yield\"].sum().rename(\"sum_yield\").reset_index()\n)\n\nalt.Chart(source_aggregated).mark_bar().encode(\n    x=\"sum_yield:Q\",\n    y=alt.Y(\"site:N\").sort(\"-x\")\n)\n```\n\n----------------------------------------\n\nTITLE: Chained Method-Based Channel Options in Altair\nDESCRIPTION: Shows how to chain multiple method calls to set various channel options. This example configures axis, binning, and scale properties for the x-axis encoding using method chaining.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    alt.X('Horsepower')\n        .axis(ticks=False)\n        .bin(maxbins=10)\n        .scale(domain=(30,300), reverse=True),\n    alt.Y('Miles_per_Gallon').title('Miles per Gallon'),\n    color='Origin',\n    shape='Origin'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button with All Option\nDESCRIPTION: This code defines an Altair chart with a radio button widget for filtering data. The radio buttons filter the data by 'Origin', and an 'All' option is included to show all points. The chart uses  `alt.binding_radio` to create the radio buttons and `alt.selection_point` to bind the selection to a chart parameter. The `transform_filter` method then filters the data according to this parameter.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\n# Make radio button less cramped by adding a space after each label\n# The spacing will only show up in your IDE, not on this doc page\noptions = ['Europe', 'Japan', 'USA']\nlabels = [option + ' ' for option in options]\n\ninput_dropdown = alt.binding_radio(\n    # Add the empty selection which shows all when clicked\n    options=options + [None],\n    labels=labels + ['All'],\n    name='Region: '\n)\nselection = alt.selection_point(\n    fields=['Origin'],\n    bind=input_dropdown,\n)\n\nalt.Chart(data.cars.url).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    # We need to set a constant domain to preserve the colors\n    # when only one region is shown at a time\n    color=alt.Color('Origin:N').scale(domain=options),\n).add_params(\n    selection\n).transform_filter(\n    selection\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Line Chart with Embedded Data in Altair\nDESCRIPTION: This snippet demonstrates creating a simple line chart in Altair using a small dataset and shows how the data is embedded directly in the chart specification.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\ndata = pd.DataFrame({'x': [1, 2, 3], 'y': [2, 1, 2]})\n\nchart = alt.Chart(data).mark_line().encode(\n     x='x',\n     y='y'\n)\n\nfrom pprint import pprint\npprint(chart.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Modify encoding channels using an inline expression\nDESCRIPTION: This example demonstrates how to modify an encoding channel using an inline expression as a value definition. It achieves the same result as the previous example by passing the inline expression to `alt.value` within the encoding definition.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchart.encode(size=alt.value(alt.expr(param_width.name)))\n```\n\n----------------------------------------\n\nTITLE: Registering and Enabling a Plaintext Renderer in Altair (Python)\nDESCRIPTION: Implements and registers a custom renderer that generates a 'text/plain' MIME bundle containing a human-readable chart description. Uses 'spec.get('description', 'none')' to extract the description from the chart specification, and registers this renderer with Altair's renderers registry. Requires 'alt' (Altair) to be imported and accessible. Inputs: chart spec (Python dict), output: 'text/plain' MIME bundle. Limitations: only handles the 'description' property and falls back to 'none' if absent.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/custom_renderers.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef plaintext_mimetype(spec):\n    return {'text/plain': \"description: \" + spec.get('description', 'none')}\n\nalt.renderers.register('plaintext', plaintext_mimetype)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Data Object in Altair\nDESCRIPTION: Example of creating a bar chart using an Altair Data object with JSON-style list of records, which requires explicit encoding type specifications.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\n\ndata = alt.Data(values=[{'x': 'A', 'y': 5},\n                        {'x': 'B', 'y': 3},\n                        {'x': 'C', 'y': 6},\n                        {'x': 'D', 'y': 7},\n                        {'x': 'E', 'y': 2}])\nalt.Chart(data).mark_bar().encode(\n    x='x:N',  # specify nominal data\n    y='y:Q',  # specify quantitative data\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Marks with Interactive Selection in Altair\nDESCRIPTION: This example shows how to display image marks with an interactive interval selection. It creates a combined chart with selectable points and corresponding images that appear only when selected.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/image.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame.from_records(\n    [{'a': 1, 'b': 1, 'image': 'https://altair-viz.github.io/_static/altair-logo-light.png'},\n    {'a': 2, 'b': 2, 'image': 'https://avatars.githubusercontent.com/u/11796929?s=200&v=4'}]\n)\n\nbrush = alt.selection_interval()\npoint = alt.Chart(source).mark_circle(size=100).encode(\n    x='a',\n    y='b',\n).add_params(\n    brush\n)\n\nimg = alt.Chart(source).mark_image(width=50, height=75).encode(\n    x='a',\n    y='b',\n    url='image'\n).transform_filter(\n    brush\n)\n\npoint + img\n```\n\n----------------------------------------\n\nTITLE: Visualizing Earthquake Data on an Orthographic Globe Projection with Altair - Python\nDESCRIPTION: This snippet visualizes earthquakes on a globe using Altair and GeoPandas. It loads earthquake and world boundary data, sets up interactive rotation of the globe, and displays quakes as circles with size by magnitude and fill by depth. The chart layers a disk background, country shapes, and the earthquake points; a hover interaction reveals details for each event. Dependencies include altair, vega_datasets, geopandas, and required data URLs.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\n# load data\ngdf_quakies = gpd.read_file(data.earthquakes.url)\ngdf_world = gpd.read_file(data.world_110m.url, layer=\"countries\")\n\n# define parameters\nrange0 = alt.binding_range(min=-180, max=180, step=5, name='rotate longitude ')\nrotate0 = alt.param(value=120, bind=range0)\nhover = alt.selection_point(on=\"pointerover\", clear=\"pointerout\")\n\n# world disk\nsphere = alt.Chart(alt.sphere()).mark_geoshape(\n    fill=\"aliceblue\", stroke=\"black\", strokeWidth=1.5\n)\n\n# countries as shapes\nworld = alt.Chart(gdf_world).mark_geoshape(\n    fill=\"mintcream\", stroke=\"black\", strokeWidth=0.35\n)\n\n# earthquakes as circles with fill for depth and size for magnitude\n# the hover param is added on the mar_circle only\nquakes = (\n    alt.Chart(gdf_quakies)\n    .mark_circle(opacity=0.35, tooltip=True, stroke=\"black\")\n    .transform_calculate(\n        lon=\"datum.geometry.coordinates[0]\",\n        lat=\"datum.geometry.coordinates[1]\",\n        depth=\"datum.geometry.coordinates[2]\",\n    )\n    .transform_filter(\n        ((rotate0 * -1 - 90 < alt.datum.lon) & (alt.datum.lon < rotate0 * -1 + 90)).expr\n    )\n    .encode(\n        longitude=\"lon:Q\",\n        latitude=\"lat:Q\",\n        strokeWidth=alt.when(hover, empty=False).then(alt.value(1)).otherwise(alt.value(0)),\n        size=alt.Size(\n            \"mag:Q\",\n            scale=alt.Scale(type=\"pow\", range=[1, 1000], domain=[0, 6], exponent=4),\n        ),\n        fill=alt.Fill(\n            \"depth:Q\", scale=alt.Scale(scheme=\"lightorange\", domain=[0, 400])\n        ),\n    )\n    .add_params(hover, rotate0)\n)\n\n# define projection and add the rotation param for all layers\ncomb = alt.layer(sphere, world, quakes).project(\n    type=\"orthographic\",\n    rotate=alt.expr(f\"[{rotate0.name}, 0, 0]\")\n)\ncomb\n```\n\n----------------------------------------\n\nTITLE: Installing vl-convert Dependency using Conda\nDESCRIPTION: This shell command demonstrates how to install the `vl-convert-python` package, a required dependency for saving Altair charts as images or offline HTML, using the Conda package manager from the conda-forge channel.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge vl-convert-python\n```\n\n----------------------------------------\n\nTITLE: Building an Interactive Legend with Point Selection by Field in Altair (Python)\nDESCRIPTION: This code creates a point selection targeting the 'Origin' field and uses it to color points in a scatter plot while building a linked interactive legend. Rather than encoding a color by a direct value, it conditionally maps to Altair's Color encoding or a gray fallback. Requires Altair, the 'cars' dataset, and expects two concatenated charts: scatter and legend. User clicks in the legend propagate selection across the scatter plot.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nselection = alt.selection_point(fields=['Origin'])\ncolor = (\n    alt.when(selection)\n    .then(alt.Color(\"Origin:N\").legend(None))\n    .otherwise(alt.value(\"lightgray\"))\n)\n\nscatter = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=color,\n    tooltip='Name:N'\n)\n\nlegend = alt.Chart(cars).mark_point().encode(\n    alt.Y('Origin:N').axis(orient='right'),\n    color=color\n).add_params(\n    selection\n)\n\nscatter | legend\n```\n\n----------------------------------------\n\nTITLE: Creating a histogram of precipitation with binning in Altair\nDESCRIPTION: This snippet builds a bar chart histogram of precipitation values with binned x-axis encoding and counts on y-axis, allowing visualization of precipitation distribution. Requires Altair and the DataFrame with 'precipitation'.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_bar().encode(\n    alt.X('precipitation').bin(),\n    y='count()'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart View in Altair\nDESCRIPTION: This snippet illustrates how to configure the chart's 'view' using `configure_view`. It sets the continuous height, continuous width, stroke width, fill color, and stroke color of the chart view.  The prerequisites are the Altair library and the `vega_datasets` for the sample data. The output will be an Altair chart with a customized view defined by these settings.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/configuration.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n)\n\nchart.configure_view(\n    continuousHeight=200,\n    continuousWidth=200,\n    strokeWidth=4,\n    fill='#FFEEDD',\n    stroke='red',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Error Band and Line Chart Using Confidence Interval Extent in Altair (Python)\nDESCRIPTION: This snippet builds a 2D error band and overlays it with a line chart using the cars dataset. The error band quantifies uncertainty in miles per gallon across years with confidence interval extent. The x-axis encodes the 'Year', while the y-axis encodes the 'Miles_per_Gallon' field, demonstrating grouping by year. This example illustrates how error bands can represent error in multiple dimensions across time and how to combine them with summary line marks.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorband.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nline = alt.Chart(source).mark_line().encode(\n    x=\"Year\",\n    y=\"mean(Miles_per_Gallon)\"\n)\n\nband = alt.Chart(source).mark_errorband(extent=\"ci\").encode(\n    x=\"Year\",\n    y=alt.Y(\"Miles_per_Gallon\").title(\"Miles/Gallon\"),\n)\n\nband + line\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Text Marks in Altair (Python)\nDESCRIPTION: This code creates a scatter plot where each point is represented by a text mark, displaying the first character of the car's origin. It utilizes the vega_datasets library for data and Altair to define the chart with 'Horsepower', 'Miles_per_Gallon' and 'Origin' for x-axis, y-axis and color respectively. Text channel is mapped to the first character of the origin.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/text.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nfrom altair import datum\n\nsource = data.cars()\n\nalt.Chart(source).mark_text().encode(\n    x=\"Horsepower:Q\",\n    y=\"Miles_per_Gallon:Q\",\n    color=\"Origin:N\",\n    text=\"Origin[0]:N\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Legend in Altair\nDESCRIPTION: This example shows how to customize the chart legend in Altair using the `configure_legend` method. It allows setting properties like stroke color, fill color, padding, corner radius, and orientation. Dependencies include the Altair library and the `vega_datasets` library to load the dataset. The output is an Altair chart where the legend is displayed with the specified visual attributes.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/configuration.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n)\n\nchart.configure_legend(\n    strokeColor='gray',\n    fillColor='#EEEEEE',\n    padding=10,\n    cornerRadius=10,\n    orient='top-right'\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Data Server Transformer in Altair\nDESCRIPTION: This snippet shows how to enable the data server transformer from the altair_data_server package, which serves data from a local threaded server for large datasets.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.data_transformers.enable('data_server')\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame for Extent Transform Example in Python\nDESCRIPTION: Initializes a pandas DataFrame with sample data containing columns 'a' and 'b' for demonstrating the extent transform in Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/extent.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.DataFrame(\n    [\n        {\"a\": \"A\", \"b\": 28},\n        {\"a\": \"B\", \"b\": 55},\n        {\"a\": \"C\", \"b\": 43},\n        {\"a\": \"D\", \"b\": 91},\n        {\"a\": \"E\", \"b\": 81},\n        {\"a\": \"F\", \"b\": 53},\n        {\"a\": \"G\", \"b\": 19},\n        {\"a\": \"H\", \"b\": 87},\n        {\"a\": \"I\", \"b\": 52},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Yearly State Changes with Trail Marks in Altair (Python)\nDESCRIPTION: This Python code snippet illustrates creating a comet chart to compare changes in barley yield between two years using Altair's 'trail' mark. It uses 'vega_datasets' for input data and performs several data transformations such as pivoting, folding, and calculating yield deltas. Dependencies: 'altair' and 'vega_datasets'. Key parameters include grouping by 'variety' and 'site', mapping 'year', 'yield', 'delta', and 'site' to respective visual encodings, and customizing the chart legend and view. Expects columns 'year', 'yield', 'variety', and 'site'; outputs a multi-faceted trail chart where trail width represents yield and color encodes yield delta. Appropriate for comparing state changes across categorical variables.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/trail.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nalt.Chart(data.barley.url).transform_pivot(\n    \"year\",\n    value=\"yield\",\n    groupby=[\"variety\", \"site\"]\n).transform_fold(\n    [\"1931\", \"1932\"],\n    as_=[\"year\", \"yield\"]\n).transform_calculate(\n    calculate=\"datum['1932'] - datum['1931']\",\n    as_=\"delta\"\n).mark_trail().encode(\n    alt.X(\"year:O\").title(None),\n    alt.Y(\"variety:N\").title(\"Variety\"),\n    alt.Size(\"yield:Q\")\n        .scale(range=[0, 12])\n        .legend(values=[20, 60])\n        .title(\"Barley Yield (bushels/acre)\"),\n    alt.Color(\"delta:Q\")\n        .scale(domainMid=0)\n        .title(\"Yield Delta (%)\"),\n    alt.Tooltip([\"year:O\", \"yield:Q\"]),\n    alt.Column(\"site:N\").title(\"Site\"),\n).configure_legend(\n    orient='bottom',\n    direction='horizontal'\n).configure_view(\n    stroke=None\n).properties(\n    title=\"Barley Yield comparison between 1932 and 1931\"\n)\n```\n\n----------------------------------------\n\nTITLE: Binding Variable Parameters to Widgets in Altair JupyterChart - Python\nDESCRIPTION: This snippet demonstrates how to create a variable parameter named 'cutoff' bound to a slider widget using Altair's param and binding system. The variable is used to dynamically filter and color points in a scatter plot based on the cutoff value. It creates a pandas DataFrame with random data and uses Altair to encode color conditionally. The resulting chart is wrapped in a JupyterChart for interactive control. Dependencies: Altair, pandas, numpy.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nrand = np.random.RandomState(42)\n\ndf = pd.DataFrame({\n    'xval': range(100),\n    'yval': rand.randn(100).cumsum()\n})\n\nslider = alt.binding_range(min=0, max=100, step=1)\ncutoff = alt.param(name=\"cutoff\", bind=slider, value=50)\npredicate = alt.datum.xval < cutoff\n\nchart = alt.Chart(df).mark_point().encode(\n    x='xval',\n    y='yval',\n    color=alt.when(predicate).then(alt.value(\"red\")).otherwise(alt.value(\"blue\")),\n).add_params(\n    cutoff\n)\njchart = alt.JupyterChart(chart)\njchart\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Data Transformer in Altair\nDESCRIPTION: This snippet enables the JSON data transformer in Altair.  The transformer processes JSON data internally, handling data type conversions automatically. This approach is suitable for smaller datasets and facilitates portability.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nalt.data_transformers.enable('json')\n```\n\n----------------------------------------\n\nTITLE: Define chart parameters and expressions with JavaScript/Python\nDESCRIPTION: This code defines a slider parameter and two color parameters using both JavaScript and Python expressions. The color changes based on the slider value. The parameters are added to the chart and used to control the axis title color. It showcases how to use both JavaScript and Python syntax to define expressions within Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\nrand = np.random.RandomState(42)\ndf = pd.DataFrame({\n    'xval': range(100),\n    'yval': rand.randn(100).cumsum()\n})\n\nbind_range = alt.binding_range(min=100, max=300, name='Slider value:  ')\nparam_width = alt.param(bind=bind_range)\n\n# Examples of how to write both js and python expressions\nparam_color_js_expr = alt.param(expr=f\"{param_width.name} < 200 ? 'red' : 'black'\")\nparam_color_py_expr = alt.param(expr=alt.expr.if_(param_width < 200, 'red', 'black'))\n\nchart = alt.Chart(df).mark_point().encode(\n    alt.X('xval').axis(titleColor=param_color_js_expr),\n    alt.Y('yval').axis(titleColor=param_color_py_expr)\n).add_params(\n    param_width,\n    param_color_js_expr,\n    param_color_py_expr\n)\nchart\n```\n\n----------------------------------------\n\nTITLE: Generating Random Data with NumPy\nDESCRIPTION: This code snippet generates random data using NumPy. It defines a function `generate_data` that takes an integer `N` as input, generates a normal distribution with random mean and standard deviation, and returns a list of `N` random numbers.  A random state is initialized for reproducibility.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/flatten.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nrand = np.random.RandomState(0)\n\ndef generate_data(N):\n    mean = rand.randn()\n    std = rand.rand()\n    return list(rand.normal(mean, std, N))\n\ndata = [\n    {'label': 'A', 'values': generate_data(20)},\n    {'label': 'B', 'values': generate_data(30)},\n    {'label': 'C', 'values': generate_data(40)},\n    {'label': 'D', 'values': generate_data(50)},\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Geo Lines by Mapping Longitude and Latitude in Altair (Python)\nDESCRIPTION: Introduces the setup for mapping geographic lines by assigning data fields to 'longitude' and 'latitude' encoding channels, using resources like airports and flights. Requires altair, vega_datasets, pandas. Needs geographic datasets in proper format; sets the stage for building charts that connect spatial waypoints.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\nimport pandas as pd\n\nairports = data.airports.url\nflights_airport = data.flights_airport.url\n```\n\n----------------------------------------\n\nTITLE: Creating an interactive scatter plot with multiple encodings in Altair\nDESCRIPTION: This code constructs an interactive point plot showing maximum temperature against temperature range, with point size for precipitation and color for weather, including pan and zoom interactivity. It demonstrates combined encoding, dynamic calculations, and interactivity features.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_point().encode(\n    alt.X('temp_max').title('Maximum Daily Temperature (C)'),\n    alt.Y('temp_range:Q').title('Daily Temperature Range (C)'),\n    color=alt.Color('weather').scale(scale),\n    size=alt.Size('precipitation').scale(range=[1, 200])\n).transform_calculate(\n    \"temp_range\", \"datum.temp_max - datum.temp_min\"\n).properties(\n    width=600,\n    height=400\n).interactive()\n```\n\n----------------------------------------\n\nTITLE: Update chart title with an inline expression\nDESCRIPTION: This snippet shows how to update a chart title using an inline expression to display the current value of a parameter. An f-string is used within the expression to concatenate the parameter value with a string literal.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbind_range = alt.binding_range(min=100, max=300, name='Chart width: ')\nparam_width = alt.param('width', bind=bind_range)\n\n# In Javascript, a number is converted to a string when added to an existing string,\n# which is why we use this nested quotation.\ntitle=alt.Title(alt.expr(f'\"This chart is \" + {param_width.name} + \" px wide\"'))\nalt.Chart(df, title=title).mark_point().encode(\n    alt.X('xval'),\n    alt.Y('yval')\n).add_params(\n    param_width\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Fill and Custom Line Styles to an Altair Area Chart (Python)\nDESCRIPTION: This example illustrates customizing the appearance of an area chart with a gradient fill and specific line styling. It uses `alt.Gradient` to define a linear color gradient for the area fill and sets the overlay line color via the `line` dictionary argument in `mark_area`. The chart displays Google stock prices, loaded directly into a Pandas DataFrame. Requires Altair, vega_datasets, and Pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/area.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).transform_filter(alt.datum.symbol == \"GOOG\").mark_area(\n    line={\"color\": \"darkgreen\"},\n    color=alt.Gradient(\n        gradient=\"linear\",\n        stops=[\n            alt.GradientStop(color=\"white\", offset=0),\n            alt.GradientStop(color=\"darkgreen\", offset=1),\n        ],\n        x1=1,\n        x2=1,\n        y1=1,\n        y2=0,\n    ),\n).encode(\n    alt.X(\"date:T\"),\n    alt.Y(\"price:Q\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Altair with all dependencies (pip)\nDESCRIPTION: This snippet demonstrates the installation of the Altair library and all of its optional dependencies using the pip package manager.  It is crucial for ensuring that all features of Altair are available. The `[all]` suffix is used to specify that all optional dependencies should be installed. Expected output is Altair and its dependencies being installed in the active python environment.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"altair[all]\"\n```\n\n----------------------------------------\n\nTITLE: Loading US States TopoJSON with Altair in Python\nDESCRIPTION: Loads the topology of US states using Altair's topo_feature utility, relying on the provided URL for the US TopoJSON file. This step requires the Altair dataset module (alt.data) to access the 'us_10m' map. The function call extracts only the 'states' geometry. It returns a TopoJSON feature collection suitable for geospatial plotting. The output will be used as a background for further geographic visualizations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Interactive Plots with Altair in Python\nDESCRIPTION: This example illustrates creating two linked interactive visualizations: a scatter plot and a bar chart. It defines an interval selection which controls the scatter plot's color and filters the bar chart data, showcasing Altair's declarative interaction capabilities. This requires Altair and vega_datasets to be installed and typically runs in an environment supporting interactive display (like JupyterLab).\nSOURCE: https://github.com/vega/altair/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbrush = alt.selection_interval()\n\npoints = alt.Chart(source).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color=alt.when(brush).then(\"Origin\").otherwise(alt.value(\"lightgray\"))\n).add_params(\n    brush\n)\n\nbars = alt.Chart(source).mark_bar().encode(\n    y='Origin',\n    color='Origin',\n    x='count(Origin)'\n).transform_filter(\n    brush\n)\n\npoints & bars\n```\n\n----------------------------------------\n\nTITLE: Configuring Chart Header in Altair\nDESCRIPTION: This snippet demonstrates configuring the header of an Altair chart using `configure_header`. It sets the title color, font size, label color, and label font size. Dependencies include the Altair library and the `vega_datasets` library for data. The output is an Altair chart with custom header settings.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/configuration.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars.url\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N',\n    column='Origin:N'\n).properties(\n    width=180,\n    height=180\n)\n\nchart.configure_header(\n    titleColor='green',\n    titleFontSize=14,\n    labelColor='red',\n    labelFontSize=14\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Verbose Encoding Specifications in an Altair Chart (Python)\nDESCRIPTION: Demonstrates using the verbose `alt.X` and `alt.Y` channel objects directly within the `encode` method. This allows for more detailed configuration of encoding channels when needed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_bar().encode(\n    alt.Y('a', type='nominal'),\n    alt.X('b', type='quantitative', aggregate='average')\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing Horizontal Concatenation in Altair\nDESCRIPTION: This snippet shows how to display two charts side-by-side using the `|` operator or `alt.hconcat()` function. The example uses a scatter plot and a histogram of the same data, resulting in an `HConcatChart` object.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\niris = data.iris.url\n\nchart1 = alt.Chart(iris).mark_point().encode(\n    x='petalLength:Q',\n    y='petalWidth:Q',\n    color='species:N'\n).properties(\n    height=300,\n    width=300\n)\n\nchart2 = alt.Chart(iris).mark_bar().encode(\n    x='count()',\n    y=alt.Y('petalWidth:Q').bin(maxbins=30),\n    color='species:N'\n).properties(\n    height=300,\n    width=100\n)\n\nchart1 | chart2\n```\n\nLANGUAGE: Python\nCODE:\n```\nalt.hconcat(chart1, chart2)\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Changes using Git\nDESCRIPTION: This sequence of Git commands adds all modified or updated files, commits the changes with a descriptive message, and pushes the changes to the remote repository. It prepares the changes for the release and makes them available to collaborators. The commands require `git` to be installed and configured for the project repository.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add . -u\ngit commit -m \"chore: Bump version to 5.0.0\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Text Table Heatmap Generation in Altair (Python)\nDESCRIPTION: This code creates a text table heatmap using Altair and data from the vega_datasets library. It aggregates car data by origin and cylinders, visualizes the number of cars with a heatmap, and overlays text marks displaying the counts. Color of the text is determined by a condition based on number of cars.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/text.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbase = alt.Chart(source).transform_aggregate(\n    num_cars=\"count()\",\n    groupby=[\"Origin\", \"Cylinders\"],\n).encode(\n    alt.X(\"Cylinders:O\").scale(paddingInner=0),\n    alt.Y(\"Origin:O\").scale(paddingInner=0),\n)\n\nheatmap = base.mark_rect().encode(\n    alt.Color(\"num_cars:Q\")\n        .scale(scheme=\"viridis\")\n        .legend(direction=\"horizontal\")\n)\n\npredicate = alt.datum.num_cars > 100\ntext = base.mark_text(baseline=\"middle\").encode(\n    text=\"num_cars:Q\",\n    color=alt.when(predicate).then(alt.value(\"black\")).otherwise(alt.value(\"white\")),\n)\n\nheatmap + text\n```\n\n----------------------------------------\n\nTITLE: Including Index Data from DataFrame in Altair\nDESCRIPTION: Example of making DataFrame index data available to an Altair chart by using reset_index() to convert the index into a column.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nrand = np.random.RandomState(0)\n\ndata = pd.DataFrame({'value': rand.randn(100).cumsum()},\n                    index=pd.date_range('2018', freq='D', periods=100))\ndata.head()\n```\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data.reset_index()).mark_line().encode(\n    x='index:T',\n    y='value:Q'\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Bar Mark Properties in Altair\nDESCRIPTION: This snippet outlines the available properties for configuring bar marks in Altair, including size and shape attributes such as width, height, orient, alignment, and various corner radius options. It helps users customize the visual appearance of bar charts.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. altair-object-table:: altair.MarkDef\n   :properties: width height orient align baseline binSpacing cornerRadius cornerRadiusEnd cornerRadiusTopLeft cornerRadiusTopRight cornerRadiusBottomRight cornerRadiusBottomLeft\n```\n\n----------------------------------------\n\nTITLE: Creating Altair Charts Without Variable Assignment\nDESCRIPTION: Example of creating and displaying an Altair chart in a single expression without assigning to a variable, which automatically displays the chart output.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N',\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Datasets with pandas.merge in Python\nDESCRIPTION: Demonstrates how to use pandas.merge to join two datasets and then create a visualization of the combined data showing mean age by group.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/lookup.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nmerged = pd.merge(groups, people, how='left',\n                  left_on='person', right_on='name')\n\nalt.Chart(merged).mark_bar().encode(\n    x='mean(age):Q',\n    y='group:O'\n)\n```\n\n----------------------------------------\n\nTITLE: Shorthand Data Type Specification in Altair\nDESCRIPTION: Shows how to use shorthand syntax to specify data types directly in the encoding string. This example uses 'Q' for quantitative and 'N' for nominal data types.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    x='Acceleration:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Data Transformer Function\nDESCRIPTION: Shows the type signature and structure of a data transformer function that takes a Vega-Lite data dictionary or pandas DataFrame and returns a transformed version.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data_transformers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nData = Union[dict, pd.DataFrame]\n\ndef data_transformer(data: Data) -> Data:\n    # Transform and return the data\n    return transformed_data\n```\n\n----------------------------------------\n\nTITLE: Long-Form Data Type Specification in Altair\nDESCRIPTION: Demonstrates the long-form method of specifying data types using the type parameter. This produces the same result as the shorthand syntax example.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    alt.X('Acceleration', type='quantitative'),\n    alt.Y('Miles_per_Gallon', type='quantitative'),\n    alt.Color('Origin', type='nominal')\n)\n```\n\n----------------------------------------\n\nTITLE: Aligning 'datum' with DateTime objects in Altair using Python\nDESCRIPTION: Shows how to position elements at specific data points, such as a particular year, by combining 'alt.datum' with 'alt.DateTime'. Illustrates setting the x-position of a rule at a specific date and matching its color to a dataset symbol.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\nbase = alt.Chart(source)\nlines = base.mark_line().encode(\n    x=\"date:T\",\n    y=\"price:Q\",\n    color=\"symbol:N\"\n)\nrule = base.mark_rule(strokeDash=[2, 2]).encode(\n    x=alt.datum(alt.DateTime(year=2006)),\n    color=alt.datum(\"MSFT\")\n)\n\nlines + rule\n```\n\n----------------------------------------\n\nTITLE: Defining the Default HTML Renderer in Altair (Python)\nDESCRIPTION: Implements the default renderer function for Altair, which takes a Vega-Lite or Vega chart specification as a Python dictionary and returns a MIME bundle in Jupyter's 'text/html' format along with metadata. Depends on a helper function 'generate_html' to produce HTML from the spec. Input is the chart spec; output is a tuple of (bundle, metadata) for display. Limitations: assumes the presence of 'generate_html' and uses static MIME types.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/custom_renderers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef default_renderer(spec):\n    bundle = {'text/html': generate_html(spec)}\n    metadata = {}\n    return bundle, metadata\n\n```\n\n----------------------------------------\n\nTITLE: Testing Against Minimum Required Python Version\nDESCRIPTION: Command to test your changes against the minimum required Python version.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nuv run task test-min\n```\n\n----------------------------------------\n\nTITLE: Creating a Pandas DataFrame for Altair in Python\nDESCRIPTION: Imports the pandas library and creates a simple DataFrame named 'data'. This DataFrame contains a categorical column 'a' and a numerical column 'b', serving as the input data for subsequent Altair visualizations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndata = pd.DataFrame({'a': list('CCCDDDEEE'),\n                     'b': [2, 7, 4, 1, 2, 6, 8, 4, 7]})\n```\n\n----------------------------------------\n\nTITLE: Updating Jupyter Notebook via Pip/Conda (Shell)\nDESCRIPTION: Provides commands to update Jupyter Notebook using either pip (`pip install -U jupyter notebook`) or conda (`conda update jupyter notebook`), depending on the initial installation method. This can resolve compatibility issues causing rendering problems like the '<Vegalite 3 object>' display.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npip install -U jupyter notebook\n```\n\nLANGUAGE: shell\nCODE:\n```\nconda update jupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Checking JupyterLab Version (Shell)\nDESCRIPTION: Executes `jupyter lab --version` in the shell to display the currently installed JupyterLab version. This helps diagnose issues like the '<VegaLite 3 object>' output, which often occurs with outdated JupyterLab versions (Altair 3.0+ requires JupyterLab 1.0+).\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ jupyter lab --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Altair Point Mark Properties Interactively in Python\nDESCRIPTION: Demonstrates creating an interactive scatter plot using Altair where point properties like shape, angle, size, and strokeWidth can be controlled via bound parameters (sliders and dropdowns). It uses the `vega_datasets` cars dataset and adds the parameters to the chart.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nshape_select = alt.binding_select(\n    options=[\n        \"arrow\",\n        \"circle\",\n        \"square\",\n        \"cross\",\n        \"diamond\",\n        \"triangle\",\n        \"triangle-up\",\n        \"triangle-down\",\n        \"triangle-right\",\n        \"triangle-left\",\n        \"wedge\",\n        \"stroke\",\n        \"M-1,-1H1V1H-1Z\",\n        \"M0,.5L.6,.8L.5,.1L1,-.3L.3,-.4L0,-1L-.3,-.4L-1,-.3L-.5,.1L-.6,.8L0,.5Z\",\n    ],\n    name=\"shape\",\n)\nshape_var = alt.param(bind=shape_select, value=\"circle\")\n\nangle_slider = alt.binding_range(min=-360, max=360, step=1, name=\"angle\")\nangle_var = alt.param(bind=angle_slider, value=0)\n\nsize_slider = alt.binding_range(min=0, max=500, step=10, name=\"size\")\nsize_var = alt.param(bind=size_slider, value=50)\n\nstrokeWidth_slider = alt.binding_range(min=0, max=10, step=0.5, name=\"strokeWidth\")\nstrokeWidth_var = alt.param(bind=strokeWidth_slider, value=2)\n\nalt.Chart(source).mark_point(\n    shape=shape_var,\n    angle=angle_var,\n    size=size_var,\n    strokeWidth=strokeWidth_var,\n).encode(x=\"Horsepower:Q\", y=\"Miles_per_Gallon:Q\").add_params(\n    shape_var, angle_var, size_var, strokeWidth_var\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Against All Python Versions\nDESCRIPTION: Command to test your changes against all supported Python versions in the test matrix.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuv run task test-all\n```\n\n----------------------------------------\n\nTITLE: Properly Formatting Year Data as Temporal in Altair\nDESCRIPTION: Demonstrates the recommended approach for plotting years by converting integer years to strings and specifying a temporal type, which provides proper axis formatting.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npop['year'] = pop['year'].astype(str)\n\nbase.mark_bar().encode(x='year:T').properties(title='temporal')\n```\n\n----------------------------------------\n\nTITLE: Modify chart point size using an inline expression\nDESCRIPTION: This snippet shows how to use an inline expression to modify the size of points in the chart based on a parameter. It uses `alt.expr` to directly specify the parameter's name as the size, without defining a separate conditional statement.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/expressions.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchart.mark_point(size=alt.expr(param_width.name))\n```\n\n----------------------------------------\n\nTITLE: Checking Jupyter Notebook Version (Shell)\nDESCRIPTION: Executes `jupyter notebook --version` in the shell to display the currently installed Jupyter Notebook version. This helps diagnose issues like the '<Vegalite 3 object>' output, which can occur with outdated Notebook versions (version 5.3+ recommended).\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ jupyter notebook --version\n```\n\n----------------------------------------\n\nTITLE: Building Airport Route Source Data with Pandas DataFrame in Python\nDESCRIPTION: Creates a pandas DataFrame containing a sequence of airports and their explicit order for drawing a path. Requires pandas as pd. The source DataFrame has two columns: 'airport' for IATA codes and 'order' for the drawing sequence, which determines line connectivity. This source is used to define the path for the chart.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsource = pd.DataFrame({\n    \"airport\": [\"SEA\", \"SFO\", \"LAX\", \"LAS\", \"DFW\", \"DEN\", \"ORD\", \"JFK\"],\n    \"order\": [1, 2, 3, 4, 5, 6, 7, 8],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Python with UV\nDESCRIPTION: Command to install Python 3.12 using the UV package manager.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nuv python install 3.12\n```\n\n----------------------------------------\n\nTITLE: Checking IPython Kernel Version (Python)\nDESCRIPTION: Imports the IPython module and displays its version using `IPython.__version__`. This is used to diagnose textual chart representation issues in both JupyterLab and Notebook, as Altair requires IPython version 5.X or newer.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport IPython; IPython.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating an Altair Chart with Interval Selection\nDESCRIPTION: This snippet creates an interactive Altair chart with an interval selection. It uses the `alt.selection_interval` function to define an interval selection named \"interval\". The chart encodes the x and y axes with 'Horsepower' and 'Miles_per_Gallon' fields. The color is determined based on the brush selection. The chart is then rendered using the JupyterChart.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\nbrush = alt.selection_interval(name=\"interval\")\n\nchart = alt.Chart(source).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color=alt.when(brush).then(\"Cylinders:O\").otherwise(alt.value(\"grey\")),\n).add_params(brush)\n\njchart = alt.JupyterChart(chart)\njchart\n```\n\n----------------------------------------\n\nTITLE: Visualizing Points from Polygon Centroids\nDESCRIPTION: Creates point geometries from polygon centroids and visualizes them using mark_geoshape.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# .copy() to prevent changing the original `gdf_sel` variable\n# derive centroid in a projected CRS (in meters) and visualize in a geographic CRS (in degrees).\ngdf_centroid = gpd.GeoDataFrame(\n    data=gdf_sel.copy(),\n    geometry=gdf_sel.geometry.to_crs(epsg=3857).centroid.to_crs(epsg=4326)\n)\n\nalt.Chart(gdf_centroid).mark_geoshape()\n```\n\n----------------------------------------\n\nTITLE: Checking Altair Version in Python\nDESCRIPTION: Imports the Altair library and prints its version using `alt.__version__`. This is useful for diagnosing issues like 'JavaScript output is disabled in JupyterLab', which can occur if the Altair version is older than 2.0.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.__version__\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: Git commands to commit changes to your branch and push them to GitHub for a pull request.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\ngit add <modified-file>\ngit commit -m \"Some descriptive message about your change\"\ngit push origin <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Offline Usage for JupyterChart\nDESCRIPTION: This snippet demonstrates how to disable the offline mode for JupyterChart. By calling the `enable_offline()` class method with the `offline=False` argument, JupyterChart reverts to loading its JavaScript dependencies from a CDN.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.JupyterChart.enable_offline(offline=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider and Coloring Data\nDESCRIPTION: This code generates an Altair chart that uses a slider to filter and color data points.  It defines a slider widget using `alt.binding_range`, a parameter `selector` using `alt.param`, and applies a condition to color points based on whether their 'xval' value is less than the slider's value. The 'datum.xval' syntax is used to specify a column in the dataframe for comparison.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\n\nrand = np.random.RandomState(42)\ndf = pd.DataFrame({\n    'xval': range(100),\n    'yval': rand.randn(100).cumsum()\n})\n\nslider = alt.binding_range(min=0, max=100, step=1, name='Cutoff ')\nselector = alt.param(name='SelectorName', value=50, bind=slider)\npredicate = alt.datum.xval < selector\n\nalt.Chart(df).mark_point().encode(\n   x='xval',\n   y='yval',\n   color=alt.when(predicate).then(alt.value(\"red\")).otherwise(alt.value(\"blue\")),\n).add_params(\n   selector\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a tick mark chart for precipitation in Altair\nDESCRIPTION: This code constructs a tick mark chart to visualize the distribution of precipitation data, encoding the precipitation values along the x-axis. It requires the Altair library and a pandas DataFrame with 'precipitation' column.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\nalt.Chart(df).mark_tick().encode(\n    x='precipitation',\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Tooltips in Altair Charts\nDESCRIPTION: This example shows how to render images in tooltips in Altair. It requires using a special column named 'image' and passing it as a list to the tooltip encoding parameter.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/image.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame.from_records(\n    [{'a': 1, 'b': 1, 'image': 'https://altair-viz.github.io/_static/altair-logo-light.png'},\n     {'a': 2, 'b': 2, 'image': 'https://avatars.githubusercontent.com/u/11796929?s=200&v=4'}]\n)\n\nalt.Chart(source).mark_circle(size=200).encode(\n    x='a',\n    y='b',\n    tooltip=['image']  # Must be a list containing a field called \"image\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Build and Serve Tasks (cmd)\nDESCRIPTION: Executes `uv` tasks to clean previous documentation builds, build the documentation, and then start a local server to view the generated HTML files. Requires the `uv` task runner installed and configured for the project.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\nuv run task doc-clean-build\nuv run task doc-serve\n```\n\n----------------------------------------\n\nTITLE: Installing Altair with all dependencies (conda)\nDESCRIPTION: This code snippet shows how to install Altair and all dependencies when using the conda package manager. The `-c conda-forge` specifies the channel from which to install Altair and its dependencies. This ensures the correct packages are installed. The command installs Altair-all, which includes all required and optional dependencies for Altair.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge altair-all\n```\n\n----------------------------------------\n\nTITLE: Binding Altair Selection to Legend Interaction in Python\nDESCRIPTION: Creates an interactive legend by defining an Altair point selection (`alt.selection_point`) bound to the legend (`bind='legend'`). Clicking on legend items corresponding to the 'Origin' field toggles the selection. The opacity of the points in the scatter plot is conditionally set using `alt.when`: selected points have higher opacity (0.8), while unselected points have lower opacity (0.2). Requires a DataFrame named `cars`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nselection = alt.selection_point(fields=['Origin'], bind='legend')\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N',\n    opacity=alt.when(selection).then(alt.value(0.8)).otherwise(alt.value(0.2)),\n).add_params(\n    selection\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing Branch with Head using Git\nDESCRIPTION: This sequence of Git commands ensures the current branch is synchronized with the main branch and checks for any uncommitted changes. It first switches to the `main` branch, pulls the latest changes from the origin, and then checks the status to ensure the working tree is clean. The commands require `git` to be installed and configured for the project repository.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull origin main\ngit status  # Should show \"nothing to commit, working tree clean\"\n```\n\n----------------------------------------\n\nTITLE: Creating Repeated Charts with Altair's Repeat Method\nDESCRIPTION: This snippet illustrates how to generate multi-panel charts with repeated patterns using the `repeat()` method. It simplifies the creation of similar charts varying only in encoding or data subset, improving efficiency compared to manual concatenation.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\niris = data.iris.url\n\nalt.Chart(iris).mark_point().encode(\n    alt.X(alt.repeat('column'), type='quantitative'),\n    alt.Y(alt.repeat('row'), type='quantitative'),\n    color='species:N'\n).properties(\n    width=200,\n    height=200\n).repeat(\n    row=['petalLength', 'petalWidth'],\n    column=['sepalLength', 'sepalWidth']\n).interactive()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Scatter Plot with Altair in Python\nDESCRIPTION: This snippet demonstrates creating a simple scatter plot using the Altair library. It imports `altair` and `vega_datasets`, loads the `cars` dataset, and defines the chart by specifying the mark type (`point`) and encoding channels (x, y, color) using dataset column names. It requires Altair and vega_datasets to be installed.\nSOURCE: https://github.com/vega/altair/blob/main/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\n\n# load a simple dataset as a pandas DataFrame\nfrom vega_datasets import data\ncars = data.cars()\n\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Bar Chart in Altair with Discrete Y-Axis\nDESCRIPTION: This snippet generates a horizontal bar chart by mapping a sum of population to the x-axis and a discrete age category to the y-axis, filtering for the year 2000. It utilizes Vega datasets for example data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/bar.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom altair import datum\nfrom vega_datasets import data\n\nsource = data.population.url\n\nalt.Chart(source).mark_bar().encode(\n    alt.X(\"sum(people):Q\").title(\"Population\"),\n    alt.Y(\"age:O\"),\n).transform_filter(\n    datum.year == 2000\n).properties(height=alt.Step(20))\n```\n\n----------------------------------------\n\nTITLE: Correcting Winding Order for Geometric Shapes in Python\nDESCRIPTION: Shows how to force the left-hand rule winding order on geometric data before using it in Altair. This example uses GeoPandas and the shapely library to reorient geometry objects, ensuring that exterior rings are clockwise and interior rings are counterclockwise.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.ops import orient\ngdf.geometry = gdf.geometry.apply(orient, args=(-1,))\n```\n\n----------------------------------------\n\nTITLE: Sorting legends in Altair using the sort property in Python\nDESCRIPTION: Shows how to sort a legend, such as color, in an Altair chart by specifying a list or data-driven sorting parameters. Includes examples of sorting using a list of categories and by data field with operation and order.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(barley).mark_bar().encode(\n    alt.X('mean(yield):Q'),\n    alt.Y('site:N').sort('x'),\n    alt.Color('site:N').sort([\n        'Morris', 'Duluth', 'Grand Rapids', 'University Farm', 'Waseca', 'Crookston'\n    ])\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(barley).mark_bar().encode(\n    alt.X('mean(yield):Q'),\n    alt.Y('site:N').sort('x'),\n    color=alt.Color('site').sort(field='yield', op='max', order='ascending')\n)\n```\n\n----------------------------------------\n\nTITLE: Applying custom color scale to weather types in Altair\nDESCRIPTION: This code defines a custom color scale for weather categories with specific hex colors, ensuring meaningful color associations for weather types. It uses alt.Scale with domain and range parameters for custom styling.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nscale = alt.Scale(domain=['sun', 'fog', 'drizzle', 'rain', 'snow'],\n                  range=['#e7ba52', '#c7c7c7', '#aec7e8', '#1f77b4', '#9467bd'])\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Altair Charts in Notebooks\nDESCRIPTION: Examples showing how to properly display Altair charts in notebook environments by ensuring the chart object is the last evaluated expression in a cell.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\ncars = data.cars.url\n\nchart = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N',\n)\n\nchart\n```\n\n----------------------------------------\n\nTITLE: Using Local Images as Image Marks with Base64 Encoding in Altair\nDESCRIPTION: This example demonstrates how to display local images in Altair charts by converting them to base64-encoded strings. It loads images from the local filesystem, encodes them, and uses them as image marks.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/image.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nimport altair as alt\nimport pandas as pd\n\nfrom io import BytesIO\nfrom PIL import Image\n\n\nimage_paths = [\"doc/_static/gray-square.png\",\"doc/_static/altair-logo-light.png\"]\nbase64_images = []\n\nfor image_path in image_paths:\n    pil_image = Image.open(image_path)\n    output = BytesIO()\n    pil_image.save(output, format='PNG')\n    base64_images.append(\n        \"data:image/png;base64,\" + base64.b64encode(output.getvalue()).decode()\n    )\n\nsource = pd.DataFrame({\"x\": [1, 2], \"y\": [1, 2], \"image\": base64_images})\nalt.Chart(source).mark_image(\n    width=50,\n    height=50\n).encode(\n    x='x',\n    y='y',\n    url='image'\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Altair Repository in Git\nDESCRIPTION: Command to clone a forked Altair repository to your local machine after forking it on GitHub.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/altair.git\n```\n\n----------------------------------------\n\nTITLE: Installing Altair for saving charts\nDESCRIPTION: This bash command installs Altair, along with dependencies that allow you to save charts to offline HTML files or PNG/SVG/PDF formats. The `[save]` suffix is used to only install dependencies necessary for saving charts. This is useful when you only need the ability to save and export charts from the library.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"altair[save]\"\n```\n\n----------------------------------------\n\nTITLE: Line Chart with Point Markers Overlay in Altair (Python)\nDESCRIPTION: Displays how to overlay point markers on a line chart by setting point=True in mark_line, thereby combining trend lines with explicit data points. Requires altair, vega_datasets. Uses a DataFrame with date, price, symbol; outputs a grouped line chart with point overlays, aiding interpretability for mean value trends across years.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nalt.Chart(source).mark_line(point=True).encode(\n    x=\"year(date)\",\n    y=\"mean(price):Q\",\n    color=\"symbol:N\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for Contributions\nDESCRIPTION: Command to create and checkout a new git branch for your contribution.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\ngit switch -c <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Altair with pip in Bash\nDESCRIPTION: This bash command installs the Vega-Altair library using the pip package manager. It downloads the latest version from the Python Package Index and makes it available in the current Python environment. This requires pip to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/vega/altair/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install altair\n```\n\n----------------------------------------\n\nTITLE: Plotting Data with Missing Values - Python\nDESCRIPTION: This snippet visualizes the previously created data using Altair, showing the impact of missing values on a line plot. The `mark_line` and `encode` methods are used to define the chart's visual properties, specifically highlighting that lines will skip over the missing data points.  The chart's x-axis, y-axis, and color are specified. Dependencies include Altair and pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\nraw = alt.Chart(data).mark_line(point=True).encode(\n    x='t:Q',\n    y='value:Q',\n    color='variable:N'\n)\nraw\n```\n\n----------------------------------------\n\nTITLE: Updating JupyterLab via Pip/Conda (Shell)\nDESCRIPTION: Provides commands to update JupyterLab using either pip (`pip install -U jupyterlab`) or conda (`conda update jupyterlab`), depending on the initial installation method. This is necessary to resolve compatibility issues with newer Altair versions, such as the '<VegaLite 3 object>' display problem.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install -U jupyterlab\n```\n\nLANGUAGE: shell\nCODE:\n```\nconda update jupyterlab\n```\n\n----------------------------------------\n\nTITLE: Rendering a GeoDataFrame with Custom Colors in Altair (Python)\nDESCRIPTION: This snippet visualizes a GeoDataFrame in Altair geoshape charts, mapping each shape to a specific color stored in a string column. It disables the default color scale in Altair, ensuring the user's specified colors are used. Requires prior creation or import of a GeoDataFrame and Altair installed.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(gdf_geoms, title=\"Vega-Altair\").mark_geoshape().encode(\n    alt.Color(\"color:N\").scale(None)\n).project(type=\"identity\", reflectY=True)\n```\n\n----------------------------------------\n\nTITLE: Running Altair Test Suite\nDESCRIPTION: Command to run the Altair test suite, which includes tests, linting, and type checking.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nuv run task test\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Pivot Transform in Altair\nDESCRIPTION: This snippet demonstrates how to use the pivot transform to convert medal data from long-form to wide-form, then visualize it as a bar chart comparing gold medals by country.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/pivot.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ndf = pd.DataFrame.from_records([\n    {\"country\": \"Norway\", \"type\": \"gold\", \"count\": 14},\n    {\"country\": \"Norway\", \"type\": \"silver\", \"count\": 14},\n    {\"country\": \"Norway\", \"type\": \"bronze\", \"count\": 11},\n    {\"country\": \"Germany\", \"type\": \"gold\", \"count\": 14},\n    {\"country\": \"Germany\", \"type\": \"silver\", \"count\": 10},\n    {\"country\": \"Germany\", \"type\": \"bronze\", \"count\": 7},\n    {\"country\": \"Canada\", \"type\": \"gold\", \"count\": 11},\n    {\"country\": \"Canada\", \"type\": \"silver\", \"count\": 8},\n    {\"country\": \"Canada\", \"type\": \"bronze\", \"count\": 10}\n])\n\nalt.Chart(df).transform_pivot(\n    'type',\n    groupby=['country'],\n    value='count'\n).mark_bar().encode(\n    x='gold:Q',\n    y='country:N',\n)\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart as PNG with Custom Resolution (PPI) using Python\nDESCRIPTION: This Python code demonstrates controlling the resolution (pixels per inch) when saving an Altair chart as a PNG image. By providing the `ppi=200` argument to `chart.save()`, the output 'chart.png' will have a resolution of 200 PPI, affecting pixel density while maintaining the chart's physical size. Requires `vl-convert`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nchart.save('chart.png', ppi=200)\n```\n\n----------------------------------------\n\nTITLE: Imputing Missing Values with Mean - Python\nDESCRIPTION: This snippet imputes missing values using the mean of the existing values, again within the encoding channel. It employs `alt.Y('value:Q').impute(method='mean')`.  This example, like the previous one, uses Altair to modify the visualization of data containing missing values. The dependency is Altair and pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nchart = alt.Chart(data).mark_line(point=True).encode(\n    x='t:Q',\n    y=alt.Y('value:Q').impute(method='mean'),\n    color='variable:N'\n)\nbackground + chart\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Changes with Git\nDESCRIPTION: Similar to the previous add/commit/push, these git commands will update files, commit changes, and push the changes to the remote repository. This sequence should be run when the version is updated and the changes are ready to be committed and pushed to the remote repository. `git` must be installed and accessible.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit add . -u\ngit commit -m \"chore: Bump version to 5.1.0dev\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Selecting Data with Vega-Lite Syntax\nDESCRIPTION: This snippet demonstrates a data selection operation using the Vega-Lite syntax. The expression `alex | ~morgan` selects rectangles that are within Alex's selection or outside of Morgan's selection. This uses bitwise operations to include or exclude data based on user selections. No specific dependencies are listed in the provided text.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_23\n\nLANGUAGE: Vega-Lite\nCODE:\n```\nalex | ~morgan\n```\n\n----------------------------------------\n\nTITLE: Manually Faceting Chart using HConcat and Filtering - Altair Python\nDESCRIPTION: This snippet demonstrates manually creating a faceted chart by horizontally concatenating individual charts. Each sub-chart is generated by filtering a base chart for a specific category ('species'). This approach is functional but can be more verbose compared to built-in faceting methods.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwidth=160,\n    height=160\n)\n\nchart = alt.hconcat()\nfor species in ['setosa', 'versicolor', 'virginica']:\n    chart |= base.transform_filter(alt.datum.species == species)\nchart\n```\n\n----------------------------------------\n\nTITLE: Faceting Chart using .facet Method - Altair Python\nDESCRIPTION: This example shows a cleaner way to create a faceted chart using Altair's built-in `.facet` method. It takes a base chart definition and specifies the column to use for faceting ('species:N'), automatically generating separate subplots arranged in columns.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(iris).mark_point().encode(\n    x='petalLength:Q',\n    y='petalWidth:Q',\n    color='species:N'\n).properties(\n    width=180,\n    height=180\n).facet(\n    column='species:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stock Price Line Chart in Python/Altair\nDESCRIPTION: This code creates a simple line chart showing stock prices over time. It uses the stocks dataset from vega_datasets and encodes date on the x-axis, price on the y-axis, and uses different colors for each stock symbol.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/window.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nalt.Chart(data.stocks.url).mark_line().encode(\n    x='date:T',\n    y='price:Q',\n    color='symbol:N',\n)\n```\n\n----------------------------------------\n\nTITLE: Using Inline GeoJSON Data with Altair DataFormat (Python)\nDESCRIPTION: This example uses a Python dictionary representing GeoJSON (FeatureCollection) as inline data and adapts it as an Altair Data object, specifying the features property for proper ingestion. Dependencies: Altair. Suitable for small/medium GeoJSON objects held in memory; properties are preserved for channel encoding.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nobj_geojson = {\n    \"type\": \"FeatureCollection\",\n    \"features\":[\n        {\"type\": \"Feature\", \"properties\": {\"location\": \"left\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[1.45, 3.75], [1.45, 0], [0, 0], [1.45, 3.75]]]}},\n        {\"type\": \"Feature\", \"properties\": {\"location\": \"middle-left\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[1.45, 0], [1.45, 3.75], [2.57, 3.75], [2.57, 0], [2.33, 0], [1.45, 0]]]}},\n        {\"type\": \"Feature\", \"properties\": {\"location\": \"middle-right\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[2.33, 0], [2.33, 2.5], [3.47, 2.5], [3.47, 0], [3.2, 0], [2.57, 0], [2.33, 0]]]}},\n        {\"type\": \"Feature\", \"properties\": {\"location\": \"right\"}, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[3.2, 0], [3.2, 1.25], [4.32, 1.25], [4.32, 0], [3.47, 0], [3.2, 0]]]}}\n    ]\n}\ndata_obj_geojson = alt.Data(values=obj_geojson, format=alt.DataFormat(property=\"features\"))\ndata_obj_geojson\n```\n\n----------------------------------------\n\nTITLE: Loading Data from URL with Altair\nDESCRIPTION: This code snippet demonstrates how to load data from a URL using the vega_datasets library and Altair. It defines 'source' using a URL attribute.  It uses a  'mark_point' to visualize data.  This method is suitable for datasets available online. The output is an interactive point plot.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom vega_datasets import data\nsource = data.cars.url\n\nalt.Chart(source).mark_point() # etc.\n```\n\n----------------------------------------\n\nTITLE: Imputing with Mean Using Transform - Python\nDESCRIPTION: This example uses `transform_impute` to impute missing values with the mean value. It is equivalent to imputing with method='mean', but it does so as a transform.  It defines parameters `impute`, `key`, `method`, and `groupby`. Dependencies include Altair and pandas.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/impute.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nchart = alt.Chart(data).transform_impute(\n    impute='value',\n    key='t',\n    method='mean',\n    groupby=['variable']\n).mark_line(point=True).encode(\n    x='t:Q',\n    y='value:Q',\n    color='variable:N'\n)\nbackground + chart\n```\n\n----------------------------------------\n\nTITLE: Adding a Selection Interval to a Chart\nDESCRIPTION: Demonstrates how to add a selection interval to a chart using the add_params method. This allows users to interactively select regions of the chart by clicking and dragging.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n).add_params(\n    brush\n)\n```\n\n----------------------------------------\n\nTITLE: Building an Altair Bubble Plot in Python\nDESCRIPTION: Explains how to create a bubble plot by adding a third encoding (`size`) to a scatter plot. The size of the points is mapped to the `Acceleration` field from the `vega_datasets` cars dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_point().encode(\n    x=\"Horsepower:Q\",\n    y=\"Miles_per_Gallon:Q\",\n    size=\"Acceleration:Q\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox and Adjusting Point Size\nDESCRIPTION: This code defines an Altair chart that scales the point size based on a checkbox's state. It uses `alt.binding_checkbox` to create the checkbox, and a parameter via `alt.param`. The point size is conditionally set based on the checkbox's boolean value.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/bindings_widgets.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\n\nbind_checkbox = alt.binding_checkbox(name='Scale point size by \"Acceleration\": ')\nparam_checkbox = alt.param(bind=bind_checkbox)\n\nalt.Chart(data.cars.url).mark_point().encode(\n    x='Horsepower:Q',\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Basic Altair Scatter Plot in Python\nDESCRIPTION: Illustrates creating a standard scatter plot in Altair by mapping two quantitative fields (`Horsepower`, `Miles_per_Gallon`) from the `vega_datasets` cars dataset to the `x` and `y` axes using `mark_point()`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_point().encode(\n    x=\"Horsepower:Q\",\n    y=\"Miles_per_Gallon:Q\",\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Grouped Density Estimation with Altair in Python\nDESCRIPTION: This snippet illustrates how to perform density estimation grouped by movie genres, splitting the density curves across the 'Major_Genre' attribute. It involves filtering valid data, computing density per group with specified extent, and creating faceted area charts to compare genre distributions. Dependencies include altair and vega_datasets, and the process enhances understanding of genre-based distribution differences.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/density.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(\n    data.movies.url,\n    width=120,\n    height=80\n).transform_filter(\n    'isValid(datum.Major_Genre)'\n).transform_density(\n    'IMDB_Rating',\n    groupby=['Major_Genre'],\n    as_=['IMDB_Rating', 'density'],\n    extent=[1, 10],\n).mark_area().encode(\n    x=\"IMDB_Rating:Q\",\n    y='density:Q',\n).facet(\n    'Major_Genre:N',\n    columns=4\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Image Marks in Altair\nDESCRIPTION: This example demonstrates how to create a scatter plot with image marks in Altair. It loads external images from URLs and displays them as points on a scatter plot, with control over image dimensions.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/image.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame.from_records(\n    [\n        {\n            \"x\": 0.5,\n            \"y\": 0.5,\n            \"img\": \"https://vega.github.io/vega-datasets/data/ffox.png\",\n        },\n        {\n            \"x\": 1.5,\n            \"y\": 1.5,\n            \"img\": \"https://vega.github.io/vega-datasets/data/gimp.png\",\n        },\n        {\n            \"x\": 2.5,\n            \"y\": 2.5,\n            \"img\": \"https://vega.github.io/vega-datasets/data/7zip.png\",\n        },\n    ]\n)\n\nalt.Chart(source).mark_image(width=50, height=50).encode(x=\"x\", y=\"y\", url=\"img\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Offline Usage for JupyterChart\nDESCRIPTION: This snippet shows how to enable offline usage for JupyterChart.  It uses the `enable_offline()` class method of `JupyterChart` to load JavaScript dependencies from the `vl-convert-python` package, making it possible to use JupyterChart without an active internet connection. To disable offline mode, the same method is used with `offline=False`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nalt.JupyterChart.enable_offline()\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch using Git\nDESCRIPTION: This command creates a new branch named `version_5.0.0` for the release. This branching strategy isolates the release-related changes from the main development branch, allowing for controlled modifications and testing. This command requires `git` to be installed and configured for the project repository.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -c version_5.0.0\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Type Effects on Axis Scales in Altair\nDESCRIPTION: Creates three charts to demonstrate how specifying different data types (ordinal, quantitative, temporal) for year values affects axis scaling and bar representation.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npop = data.population()\n\nbase = alt.Chart(pop).mark_bar().encode(\n    alt.Y('mean(people):Q').title('Total population')\n).properties(\n    width=140,\n    height=140\n)\n\nalt.hconcat(\n    base.encode(x='year:O').properties(title='ordinal'),\n    base.encode(x='year:Q').properties(title='quantitative'),\n    base.encode(x='year:T').properties(title='temporal')\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a vertical 1D box plot with altair\nDESCRIPTION: This example creates a vertical (y-oriented) 1D box plot by encoding the 'Miles_per_Gallon' variable on the y-axis, automatically determining orientation based on the axis choice.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/boxplot.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_boxplot().encode(\n    alt.Y(\"Miles_per_Gallon:Q\").scale(zero=False)\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Altair Chart Appearance (Axes, Color) in Python\nDESCRIPTION: Illustrates customizing chart aesthetics. It sets custom axis titles using the `.title()` method on the `alt.X` and `alt.Y` channel objects and sets the bar color to 'firebrick' via the `color` argument in `mark_bar()`.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_bar(color='firebrick').encode(\n    alt.Y('a').title('category'),\n    alt.X('average(b)').title('avg(b) by category')\n)\n```\n\n----------------------------------------\n\nTITLE: Saving Altair Chart to HTML with SVG Renderer using Python\nDESCRIPTION: This Python snippet shows how to specify the rendering engine when saving an Altair chart to HTML. By passing `embed_options={'renderer':'svg'}` to `chart.save()`, the resulting 'chart.html' file will instruct vegaEmbed to use SVG for rendering the visualization instead of the default canvas renderer.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchart.save('chart.html', embed_options={'renderer':'svg'})\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Documentation using uv\nDESCRIPTION: This command builds and publishes the project's documentation, requiring write access to the designated GitHub pages repository.  The command leverages the `uv` package manager to execute a predefined task named `doc-publish-clean-build`, ensuring the documentation reflects the current version.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv run task doc-publish-clean-build\n```\n\n----------------------------------------\n\nTITLE: Creating a customized bar chart with scales and axis titles in Altair\nDESCRIPTION: This snippet creates a bar chart of weather count per month, with custom axis titles and a scale for weather colors, enhancing clarity and visual appeal. It showcases axis and color scale customizations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(df).mark_bar().encode(\n    x=alt.X('month(date):N').title('Month of the year'),\n    y='count()',\n    color=alt.Color('weather', legend=alt.Legend(title='Weather type'), scale=scale),\n)\n```\n\n----------------------------------------\n\nTITLE: Labeling Bar Chart with Text Marks in Altair (Python)\nDESCRIPTION: This snippet shows how to add labels to a bar chart using Altair's text marks. It defines a bar chart and then overlays text marks with specific alignment and offset (dx) to display the value of each bar. Uses pandas DataFrame to store source data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/text.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    \"a\": [\"A\", \"B\", \"C\"],\n    \"b\": [28, 55, 43]\n})\n\nbar = alt.Chart(source).mark_bar().encode(\n    y=\"a:N\",\n    x=alt.X(\"b:Q\").scale(domain=[0, 60])\n)\ntext = bar.mark_text(\n    align=\"left\",\n    baseline=\"middle\",\n    dx=3\n).encode(text=\"b\")\n\nbar + text\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a JupyterChart with Altair - Python\nDESCRIPTION: Demonstrates how to create a basic bar chart using Altair with a pandas DataFrame as the data source. The chart is wrapped in a JupyterChart instance to enable display in Jupyter Notebook or compatible environments. This snippet uses alt.Chart to build a bar chart encoding columns 'a' and 'b' for x- and y-axes respectively. The JupyterChart constructor automatically displays the chart when it is the last output in a notebook cell. Dependencies include Altair and pandas libraries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/jupyter_chart.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nchart = alt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n\njchart = alt.JupyterChart(chart)\njchart\n```\n\n----------------------------------------\n\nTITLE: Color Encoding Remote GeoJSON by Nested Property in Altair (Python)\nDESCRIPTION: This chart visualizes the countries from a remote GeoJSON file with color encoding based on the properties.continent field. Encoding uses a nominal (N) data type for continent. Prerequisite: A previously defined Altair Data object referencing a remote GeoJSON.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nalt.Chart(data_url_geojson).mark_geoshape().encode(color='properties.continent:N')\n```\n\n----------------------------------------\n\nTITLE: Layering Order and Overlapping Charts\nDESCRIPTION: This snippet explains how the order of layers in a layered chart affects visibility, with examples plotting points over a heatmap. The order in which layers are specified determines which marks are on top, affecting the final visualization.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/compound_charts.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nheatmap + points\n\n# or\n\npoints + heatmap\n```\n\n----------------------------------------\n\nTITLE: Using a Simple Variable Without Parameters\nDESCRIPTION: Shows a simpler way to set opacity without using parameters, for comparison with the param-based approach. This doesn't support interactivity but is more straightforward for static values.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nop_var2 = 0.1\n\nalt.Chart(cars).mark_circle(opacity=op_var2).encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Specification for Altair Encodings (Python)\nDESCRIPTION: Shows the more explicit way to define an encoding channel using the `alt.Y` class constructor with named parameters for field, type, and aggregate. This is equivalent to the shorthand syntax.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ny = alt.Y(field='b', type='quantitative', aggregate='average')\nprint(y.to_json())\n```\n\n----------------------------------------\n\nTITLE: Styling Polygons as LineStrings\nDESCRIPTION: Demonstrates how to style polygons as if they are linestrings by setting filled=False and encoding the stroke property.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_sel).mark_geoshape(\n    filled=False,\n    strokeWidth=1.5\n).encode(\n    stroke='NAME:N'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Filled Altair Scatter Plot in Python\nDESCRIPTION: Demonstrates how to create a scatter plot with filled points instead of the default outlined points by setting the `filled=True` argument within `mark_point()`. It uses the `vega_datasets` cars dataset.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/point.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_point(filled=True).encode(\n    x=\"Horsepower:Q\",\n    y=\"Miles_per_Gallon:Q\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing VegaFusion for Altair Data Access (None)\nDESCRIPTION: Provides the command line instruction to install the VegaFusion library with the required 'embed' extras. This installation is necessary to use the `transformed_data()` method for accessing data transformed within Altair charts directly in Python.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/index.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\npip install \"vegafusion[embed]\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the MaxRowsError in Altair\nDESCRIPTION: This snippet shows how attempting to create a plot with more than 5000 rows of data in Altair results in a MaxRowsError, which is Altair's default limit for embedding data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ndata = pd.DataFrame({\"x\": range(10000)})\nalt.Chart(data).mark_point()\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Selection in Altair (Python)\nDESCRIPTION: This code defines a point selection parameter and passes it to a chart via the 'make_example' function. It requires Altair and the prior-defined 'make_example'. The point selection allows selection of chart points via click; output is a chart responsive to individual point interactions.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\npoint = alt.selection_point()\nmake_example(point)\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Bar Chart with Aggregation in Altair (Python)\nDESCRIPTION: Creates a horizontal bar chart by swapping the encoding channels compared to the vertical bar chart. The categorical variable 'a' is mapped to the y-axis, and the aggregated average of 'b' is mapped to the x-axis.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_bar().encode(\n    y='a',\n    x='average(b)'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Maintenance Branch using Git\nDESCRIPTION: This command creates a new maintenance branch for ongoing development and bug fixes related to a specific version. This command assumes the local repository is configured correctly and that the `git` command is accessible.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -c maint_5.1.0dev\n```\n\n----------------------------------------\n\nTITLE: Layering Sphere and Graticule for Globe Visualization in Altair (Python)\nDESCRIPTION: This snippet shows how to visualize the earth's sphere and overlays graticule lines using Altair. It creates sphere and graticule datasets then layers them using mark_geoshape, with styling for background and graticule lines, and sets a cartographic projection. Dependencies: Altair. Inputs are direct generator outputs; the projection is set to 'naturalEarth1' for realistic geographic rendering.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\n\nsphere_data = alt.sphere()\ngrat_data = alt.graticule(step=[15, 15])\n\nbackground = alt.Chart(sphere_data).mark_geoshape(fill='aliceblue')\nlines = alt.Chart(grat_data).mark_geoshape(stroke='lightgrey')\n\nalt.layer(background, lines).project('naturalEarth1')\n```\n\n----------------------------------------\n\nTITLE: Attribute-Based Channel Options Syntax in Altair\nDESCRIPTION: Shows the traditional attribute-based syntax for setting channel options using keyword arguments. This example sets the same axis options as the earlier method-based example.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/encodings/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(cars).mark_point().encode(\n    alt.X('Horsepower', axis=alt.Axis(tickMinStep=50)),\n    alt.Y('Miles_per_Gallon', title=\"Miles per Gallon\"),\n    color='Origin',\n    shape='Origin'\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding the X-axis in an Altair Chart (Python)\nDESCRIPTION: Illustrates using the `encode()` method to map the 'a' column from the DataFrame to the x-axis visual channel. Altair automatically infers the data type of 'a' as nominal (unordered categorical).\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_point().encode(\n    x='a',\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Point Mark to an Altair Chart in Python\nDESCRIPTION: Demonstrates adding a point mark to an Altair Chart object using the `mark_point()` method. When called without specifying encodings, it plots one point per row in the dataset, resulting in overlapping points.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(data).mark_point()\n```\n\n----------------------------------------\n\nTITLE: Converting VegaFusion Charts to JSON or Dictionary in Altair\nDESCRIPTION: When using the VegaFusion data transformer, this snippet shows how to convert charts to JSON or Python dictionaries by setting the format to 'vega' instead of the default 'vega-lite'.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchart.to_json(format=\"vega\")\nchart.to_dict(format=\"vega\")\n```\n\n----------------------------------------\n\nTITLE: Using a Variable Parameter in a Chart\nDESCRIPTION: Shows how to use a variable parameter in a chart by adding it to the chart specification with add_params and referencing it within the mark properties.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/interactions/parameters.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nop_var = alt.param(value=0.1)\n\nalt.Chart(cars).mark_circle(opacity=op_var).encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q',\n    color='Origin:N'\n).add_params(\n    op_var\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering with Logical Operands in Altair\nDESCRIPTION: Examples of combining multiple predicates using logical operators (&, |, ~) to create complex filtering conditions.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.population.url\nchart = alt.Chart(source).mark_line().encode(\n    x=\"age:O\",\n    y=\"sum(people):Q\",\n    color=\"year:O\"\n).properties(\n    width=600, height=200\n)\n\nbetween_1950_60 = alt.FieldRangePredicate(field=\"year\", range=[1950, 1960])\n```\n\n----------------------------------------\n\nTITLE: Initializing an Altair Chart Object in Python\nDESCRIPTION: Imports the Altair library as 'alt' and initializes a fundamental Chart object. The previously created pandas DataFrame 'data' is passed as the single argument to the Chart constructor.\nSOURCE: https://github.com/vega/altair/blob/main/doc/getting_started/starting.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nchart = alt.Chart(data)\n```\n\n----------------------------------------\n\nTITLE: Quantize Scale with Nice Parameter for Choropleth in Altair\nDESCRIPTION: Enhancement of the quantize scale by using the nice parameter to round domain values before applying quantization, resulting in more visually appealing class breaks.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nalt.Scale(type='quantize', nice=True)\n```\n\n----------------------------------------\n\nTITLE: Using Inline TopoJSON Data with DataFormat Feature in Altair (Python)\nDESCRIPTION: This snippet structures a TopoJSON object in Python, referencing it as inline Altair data and specifying a feature key extracted for plotting. Prereqs: Altair. The TopoJSON must contain a named object matching the feature argument. This reduces data size compared to GeoJSON and supports visualizing shared boundaries.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nobj_topojson = {\n    \"arcs\": [\n        [[1.0, 1.0], [0.0, 1.0], [0.0, 0.0], [1.0, 0.0]],\n        [[1.0, 0.0], [2.0, 0.0], [2.0, 1.0], [1.0, 1.0]],\n        [[1.0, 1.0], [1.0, 0.0]],\n    ],\n    \"objects\": {\n        \"MY_DATA\": {\n            \"geometries\": [\n                {\"arcs\": [[-3, 0]], \"properties\": {\"name\": \"abc\"}, \"type\": \"Polygon\"},\n                {\"arcs\": [[1, 2]], \"properties\": {\"name\": \"def\"}, \"type\": \"Polygon\"},\n            ],\n            \"type\": \"GeometryCollection\",\n        }\n    },\n    \"type\": \"Topology\",\n}\ndata_obj_topojson = alt.Data(\n    values=obj_topojson, format=alt.DataFormat(feature=\"MY_DATA\", type=\"topojson\")\n)\ndata_obj_topojson\n```\n\n----------------------------------------\n\nTITLE: Filtering Using Keyword Arguments in Altair\nDESCRIPTION: Example of using keyword arguments as a simplified way to filter data, selecting only data from year 2000 with sex value of 1.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(source).mark_area().encode(\n    x=\"age:O\",\n    y=\"people:Q\",\n).transform_filter(year=2000, sex=1)\n```\n\n----------------------------------------\n\nTITLE: Enabling SVG Renderer in Altair\nDESCRIPTION: Code to enable the SVG renderer for Altair charts, which uses the vl-convert dependency to generate static SVG images displayable in various IPython environments.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable(\"svg\")\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Predicates in Altair\nDESCRIPTION: Example of combining predicates with AND (&) to filter data that is not between 1950-1960 and has age <= 70.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/filter.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nchart.transform_filter(~between_1950_60 & (datum.age <= 70))\n```\n\n----------------------------------------\n\nTITLE: Creating Error Bars Using Altair's mark_errorbar() in Python\nDESCRIPTION: This snippet demonstrates how to generate error bars in Altair by invoking the mark_errorbar() method. It serves as the foundational approach to adding error bars to statistical charts, with optional properties for customization. Dependencies include the Altair library and Vega datasets for sample data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/errorbar.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.barley()\n\nerror_bars = alt.Chart(source).mark_errorbar().encode(\n    x=alt.X('yield:Q').scale(zero=False),\n    y=alt.Y('variety:N')\n)\n\npoints = alt.Chart(source).mark_point(\n    filled=True,\n    color=\"black\",\n).encode(\n    x=alt.X(\"mean(yield)\"),\n    y=alt.Y(\"variety:N\"),\n)\n\nerror_bars + points\n```\n\n----------------------------------------\n\nTITLE: Creating LookupData for Airport Coordinates with Altair in Python\nDESCRIPTION: Defines a LookupData object to map IATA airport codes to their state, latitude, and longitude using Altair. This requires a DataFrame (airports) containing the columns 'iata', 'state', 'latitude', and 'longitude'. This mapping is used later for lookup transformations in Altair charts, allowing for the dynamic retrieval of geographic data by airport code. The output is intended for linking data via transformations inside the chart specification.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nlookup_data = alt.LookupData(\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Altair's __all__ Import List\nDESCRIPTION: Command to update the __all__ list in the init file after adding new exports.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nuv run task update-init-file\n```\n\n----------------------------------------\n\nTITLE: Generating Schema Wrapper for Altair\nDESCRIPTION: Command to regenerate Altair's automatically generated code after making manual changes.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv run task generate-schema-wrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Mark Properties with Interactivity in Altair (Python)\nDESCRIPTION: Demonstrates interactive configuration of line mark properties—such as interpolation, tension, stroke width, stroke cap, and dash—using Altair parameters and sliders tied to a pandas DataFrame. Dependencies: altair, pandas. Inputs include user-driven form controls, producing a line chart reflecting chosen styles; supports diverse interpolation and stroke options for exploring line aesthetics.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/line.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nimport pandas as pd\n\ninterpolate_select = alt.binding_select(\n    options=[\n        \"basis\",\n        \"basis-open\",\n        \"basis-closed\",\n        \"bundle\",\n        \"cardinal\",\n        \"cardinal-open\",\n        \"cardinal-closed\",\n        \"catmull-rom\",\n        \"linear\",\n        \"linear-closed\",\n        \"monotone\",\n        \"natural\",\n        \"step\",\n        \"step-before\",\n        \"step-after\",\n    ],\n    name=\"interpolate\",\n)\ninterpolate_var = alt.param(bind=interpolate_select, value=\"linear\")\n\ntension_slider = alt.binding_range(min=0, max=1, step=0.05, name=\"tension\")\ntension_var = alt.param(bind=tension_slider, value=0)\n\nstrokeWidth_slider = alt.binding_range(min=0, max=10, step=0.5, name=\"strokeWidth\")\nstrokeWidth_var = alt.param(bind=strokeWidth_slider, value=2)\n\nstrokeCap_select = alt.binding_select(\n    options=[\"butt\", \"round\", \"square\"],\n    name=\"strokeCap\",\n)\nstrokeCap_var = alt.param(bind=strokeCap_select, value=\"butt\")\n\nstrokeDash_select = alt.binding_select(\n    options=[[1, 0], [8, 8], [8, 4], [4, 4], [4, 2], [2, 1], [1, 1]],\n    name=\"strokeDash\",\n)\nstrokeDash_var = alt.param(bind=strokeDash_select, value=[1, 0])\n\nsource = pd.DataFrame({\"u\": [1, 2, 3, 4, 5, 6], \"v\": [28, 55, 42, 34, 36, 38]})\n\nalt.Chart(source).mark_line(\n    interpolate=interpolate_var,\n    tension=tension_var,\n    strokeWidth=strokeWidth_var,\n    strokeCap=strokeCap_var,\n    strokeDash=strokeDash_var,\n).encode(x=\"u\", y=\"v\").add_params(\n    interpolate_var, tension_var, strokeWidth_var, strokeCap_var, strokeDash_var\n)\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on macOS/Linux\nDESCRIPTION: Command to activate the Python virtual environment on macOS or Linux systems.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager\nDESCRIPTION: Command to update UV, a Python package manager used in the Altair development workflow.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nuv self update\n```\n\n----------------------------------------\n\nTITLE: Installing Altair Development Dependencies\nDESCRIPTION: Command to install all project dependencies including development extras using UV.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nuv sync --all-extras\n```\n\n----------------------------------------\n\nTITLE: Customizing Map Appearance with Projection\nDESCRIPTION: Demonstrates how to customize map appearance by setting fill color, stroke, and strokeWidth properties, along with specifying a custom projection type.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/geoshape.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalt.Chart(gdf_ne).mark_geoshape(\n    fill='lightgrey', stroke='white', strokeWidth=0.5\n).project(\n    type='albers'\n)\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: Command to activate the Python virtual environment on Windows systems.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Creating a default box plot using altair's mark_boxplot()\nDESCRIPTION: This code demonstrates how to generate a basic box plot with Altair's mark_boxplot() method, encoding the 'Miles_per_Gallon' variable with a scale that excludes zero.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/marks/boxplot.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_boxplot().encode(\n    alt.X(\"Miles_per_Gallon:Q\").scale(zero=False)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Local Timezone for VegaFusion in Altair\nDESCRIPTION: This snippet demonstrates how to customize VegaFusion's local timezone setting, which affects time-based transformations in Altair charts.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vegafusion as vf\nvf.set_local_tz(\"America/New_York\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Renderer to Fix JS Error in JupyterLab (Python)\nDESCRIPTION: Enables the default Altair renderer using `alt.renderers.enable('default')`. This resolves the 'Javascript Error: require is not defined' in JupyterLab, which occurs when the incompatible 'notebook' renderer has been mistakenly enabled.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/display_frontends.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nalt.renderers.enable('default')\n```\n\n----------------------------------------\n\nTITLE: Loading Seattle weather dataset from vega_datasets\nDESCRIPTION: This code imports the vega_datasets library and loads the Seattle weather data into a pandas DataFrame, which is used for subsequent visualizations. It depends on pandas and vega_datasets modules.\nSOURCE: https://github.com/vega/altair/blob/main/doc/case_studies/exploring-weather.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vega_datasets import data\n\ndf = data.seattle_weather()\n\n# Display first few rows\n\n df.head()\n```\n\n----------------------------------------\n\nTITLE: Creating DataFrame from Nested Data\nDESCRIPTION: This snippet demonstrates how to create a Pandas DataFrame from a list of dictionaries, where each dictionary contains a list of values. The `pd.DataFrame.from_records` method is used to convert the list of dictionaries into a DataFrame, preserving the structure of the nested data.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/flatten.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.DataFrame.from_records(data)\ndf\n```\n\n----------------------------------------\n\nTITLE: Implementing an Empty MIME Bundle Renderer in Altair (Python)\nDESCRIPTION: Demonstrates a renderer function that handles the chart spec with custom display logic but returns an empty MIME bundle. This disables the frontend's display rendering in Jupyter and indicates output is handled elsewhere. Input is the chart spec; output is an empty dictionary. No dependencies or special parameters; core constraint is that the bundle is always empty.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/custom_renderers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef empty_bundle_renderer(spec):\n    # Custom display logic that uses the spec\n    ...\n    # Return empty MIME bundle\n    return {}\n\n```\n\n----------------------------------------\n\nTITLE: Converting Long-Form to Wide-Form Data with pandas pivot\nDESCRIPTION: Example of using pandas pivot method to convert long-form data back to wide-form format.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/data.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlong_form.pivot(index='Date', columns='company', values='price').reset_index()\n```\n\n----------------------------------------\n\nTITLE: Installing Altair with conda in Bash\nDESCRIPTION: This bash command installs the Vega-Altair library using the conda package manager from the specified 'conda-forge' channel. It's an alternative installation method often used within Anaconda or Miniconda environments. This requires conda to be installed and the conda-forge channel to be configured or accessible.\nSOURCE: https://github.com/vega/altair/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda install altair -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Installing vl-convert Dependency using Pip\nDESCRIPTION: This shell command shows the alternative method for installing the `vl-convert-python` package using the Pip package manager. This dependency is necessary for saving Altair charts to image formats (PNG, SVG, PDF) and generating offline HTML files.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/saving_charts.rst#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npip install vl-convert-python\n```\n\n----------------------------------------\n\nTITLE: Installing VegaFusion for Altair using conda\nDESCRIPTION: This snippet shows how to install VegaFusion dependencies using conda. VegaFusion helps process large datasets by pre-evaluating data transformations in Python.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/large_datasets.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge vegafusion vegafusion-python-embed vl-convert-python\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data with pandas and numpy in Python\nDESCRIPTION: This snippet demonstrates creating a sample dataset using pandas DataFrame and numpy for random data generation. It sets a fixed random seed for reproducibility, creates categorical and numerical columns, and produces a DataFrame for subsequent aggregation and visualization operations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/joinaggregate.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\n\nrand = np.random.RandomState(0)\n\ndf = pd.DataFrame({\n    'label': rand.choice(['A', 'B', 'C'], 10),\n    'value': rand.randn(10),\n})\ndf\n```\n\n----------------------------------------\n\nTITLE: Understanding Density Transform Options in Altair\nDESCRIPTION: This snippet refers to the configuration options available in the DensityTransform class within Altair, which powers the transform_density method. It is presented as an object table displaying various parameters, enabling users to customize density estimation operations. Dependencies include Altair's internal classes, and it aids in advanced customization of density computations.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/transform/density.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\naltair.object_table.DensityTransform\n```\n\n----------------------------------------\n\nTITLE: Publishing to PyPI using uv\nDESCRIPTION: This command builds a source distribution and universal wheel, then publishes them to PyPI.  It requires the `uv` package manager and appropriate PyPI owner permissions, along with the `UV_PUBLISH_TOKEN` environment variable set.  This action releases the project to the Python Package Index.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run task publish\n```\n\n----------------------------------------\n\nTITLE: Tagging Release using Git\nDESCRIPTION: This sequence of commands tags the current commit on the main branch with a version number and then pushes the tag to the remote repository. This marks a specific commit as a release point. This requires `git` to be configured and used correctly.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v5.0.0 -m \"Version 5.0.0 release\"\ngit push origin v5.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with UV\nDESCRIPTION: Command to initialize a new Python virtual environment for Altair development.\nSOURCE: https://github.com/vega/altair/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ncd altair/\nuv venv -p 3.12\n```\n\n----------------------------------------\n\nTITLE: Switching to main and Syncing with Git\nDESCRIPTION: This sequence of git commands switches to the main branch and pulls changes from the remote repository. It ensures that the local main branch is up-to-date before any merging or release-related actions. The commands require `git` to be installed and configured for the project repository.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit switch main\ngit pull origin main\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies using uv\nDESCRIPTION: This snippet updates the project's environment with the latest dependencies using the `uv` package manager. It ensures that all extras are installed, providing the project with the necessary packages for development and operation. This command requires `uv` to be installed and configured correctly for the project.\nSOURCE: https://github.com/vega/altair/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-extras\n```\n\n----------------------------------------\n\nTITLE: Plaintext Renderer Output (None)\nDESCRIPTION: Represents the output produced by the plaintext renderer for a chart with a description property set. This is a plain text snippet as rendered by the registered custom renderer in a Jupyter notebook. Input is the chart with a description; output is static text.\nSOURCE: https://github.com/vega/altair/blob/main/doc/user_guide/custom_renderers.rst#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ndescription: This is a simple chart\n\n```"
  }
]