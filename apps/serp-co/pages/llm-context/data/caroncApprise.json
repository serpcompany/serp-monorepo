[
  {
    "owner": "caronc",
    "repo": "apprise",
    "content": "TITLE: Basic Python API Usage for Apprise\nDESCRIPTION: Example of using the Apprise Python API to send notifications programmatically, showing how to create an instance, add notification services, and send notifications.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Add all of the notification services by their server url.\n# A sample email notification:\napobj.add('mailto://myuserid:mypass@gmail.com')\n\n# A sample pushbullet notification\napobj.add('pbul://o.gn5kj6nfhv736I7jC3cj3QLRiyhgl98b')\n\n# Then notify these services any time you desire. The below would\n# notify all of the services loaded into our Apprise object.\napobj.notify(\n    body='what a great notification service!',\n    title='my notification title',\n)\n```\n\n----------------------------------------\n\nTITLE: Using Configuration Files with Apprise Python API\nDESCRIPTION: Shows how to use configuration files with the Apprise Python API using the AppriseConfig object, demonstrating loading from local and remote sources and using tags to target specific notification services.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Create an Config instance\nconfig = apprise.AppriseConfig()\n\n# Add a configuration source:\nconfig.add('/path/to/my/config.yml')\n\n# Add another...\nconfig.add('https://myserver:8080/path/to/config')\n\n# Make sure to add our config into our apprise object\napobj.add(config)\n\n# You can mix and match; add an entry directly if you want too\n# In this entry we associate the 'admin' tag with our notification\napobj.add('mailto://myuser:mypass@hotmail.com', tag='admin')\n\n# Then notify these services any time you desire. The below would\n# notify all of the services that have not been bound to any specific\n# tag.\napobj.notify(\n    body='what a great notification service!',\n    title='my notification title',\n)\n\n# Tagging allows you to specifically target only specific notification\n# services you've loaded:\napobj.notify(\n    body='send a notification to our admin group',\n    title='Attention Admins',\n    # notify any services tagged with the 'admin' tag\n    tag='admin',\n)\n\n# If you want to notify absolutely everything (regardless of whether\n```\n\n----------------------------------------\n\nTITLE: URL Formatting for Notification Services\nDESCRIPTION: Collection of URL formats for various notification services including authentication tokens, API keys, and endpoint configurations. Each service has specific format requirements and supports different parameters for customization.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npbul://accesstoken\npbul://accesstoken/#channel\npbul://accesstoken/A_DEVICE_ID\npbul://accesstoken/email@address.com\npbul://accesstoken/#channel/#channel2/email@address.net/DEVICE\n\npjet://hostname/secret\npjet://hostname:port/secret\npjets://secret@hostname/secret\npjets://hostname:port/secret\n\npush://apikey/\n\npushed://appkey/appsecret/\npushed://appkey/appsecret/#ChannelAlias\npushed://appkey/appsecret/#ChannelAlias1/#ChannelAlias2/#ChannelAliasN\npushed://appkey/appsecret/@UserPushedID\npushed://appkey/appsecret/@UserPushedID1/@UserPushedID2/@UserPushedIDN\n\npushme://Token/\n\npover://user@token\npover://user@token/DEVICE\npover://user@token/DEVICE1/DEVICE2/DEVICEN\n\npsafer://privatekey\npsafers://privatekey/DEVICE\npsafer://privatekey/DEVICE1/DEVICE2/DEVICEN\n\npushy://apikey/DEVICE\npushy://apikey/DEVICE1/DEVICE2/DEVICEN\npushy://apikey/TOPIC\npushy://apikey/TOPIC1/TOPIC2/TOPICN\n\npushdeer://pushKey\npushdeer://hostname/pushKey\npushdeer://hostname:port/pushKey\n\nreddit://user:password@app_id/app_secret/subreddit\nreddit://user:password@app_id/app_secret/sub1/sub2/subN\n\nresend://APIToken:FromEmail/\nresend://APIToken:FromEmail/ToEmail\nresend://APIToken:FromEmail/ToEmail1/ToEmail2/ToEmailN/\n\nrevolt://bottoken/ChannelID\nrevolt://bottoken/ChannelID1/ChannelID2/ChannelIDN\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Usage for Apprise Notifications\nDESCRIPTION: Examples of using Apprise CLI to send notifications to multiple services, including email and Pushbullet, with optional verbosity flags and different input methods.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Send a notification to as many servers as you want\n# as you can easily chain one after another (the -vv provides some\n# additional verbosity to help let you know what is going on):\napprise -vv -t 'my title' -b 'my notification body' \\\n   'mailto://myemail:mypass@gmail.com' \\\n   'pbul://o.gn5kj6nfhv736I7jC3cj3QLRiyhgl98b'\n\n# If you don't specify a --body (-b) then stdin is used allowing\n# you to use the tool as part of your every day administration:\ncat /proc/cpuinfo | apprise -vv -t 'cpu info' \\\n   'mailto://myemail:mypass@gmail.com'\n\n# The title field is totally optional\nuptime | apprise -vv \\\n   'discord:///4174216298/JHMHI8qBe7bk2ZwO5U711o3dV_js'\n```\n\n----------------------------------------\n\nTITLE: Basic Apprise Command Syntax\nDESCRIPTION: Shows the basic command syntax for sending notifications with Apprise CLI and for managing the storage functionality.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n`apprise` [<options>...] <service-url>...<br>\n`apprise` storage [<options>...] [<action>] <url-id>...\n```\n\n----------------------------------------\n\nTITLE: Sending File Attachments with Apprise\nDESCRIPTION: Demonstrates how to send local and remote file attachments using Apprise. Includes examples of sending single attachments and handling remote content caching.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Add at least one service you want to notify\napobj.add('mailto://myuser:mypass@hotmail.com')\n\n# Then send your attachment.\napobj.notify(\n    title='A great photo of our family',\n    body='The flash caused Jane to close her eyes! hah! :)',\n    attach='/local/path/to/my/DSC_003.jpg',\n)\n\n# Send a web based attachment too! In the below example, we connect to a home\n# security camera and send a live image to an email. By default remote web\n# content is cached, but for a security camera we might want to call notify\n# again later in our code, so we want our last image retrieved to expire(in\n# this case after 3 seconds).\napobj.notify(\n    title='Latest security image',\n    attach='http://admin:password@hikvision-cam01/ISAPI/Streaming/channels/101/picture?cache=3'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Notifications with Apprise\nDESCRIPTION: Example showing how to send notifications to specific tagged groups using Apprise API. Uses the 'all' tag to notify all configured services regardless of their tags.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napobj.notify(\n    body='send a notification to our admin group',\n    title='Attention Admins',\n    # notify absolutely everything loaded, regardless on wether\n    # it has a tag associated with it or not:\n    tag='all',\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Plugins in Apprise\nDESCRIPTION: Demonstrates how to load custom notification plugins using AppriseAsset configuration. Shows different methods of specifying plugin paths and loading custom notifications.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom apprise import Apprise\nfrom apprise import AppriseAsset\n\n# Prepare your Asset object so that you can enable the custom plugins to\n# be loaded for your instance of Apprise...\nasset = AppriseAsset(plugin_paths=\"/path/to/scan\")\n\n# OR You can also generate scan more then one file too:\nasset = AppriseAsset(\n    plugin_paths=[\n        # Iterate over all python libraries found in the root of the\n        # specified path. This is NOT a recursive (directory) scan; only\n        # the first level is parsed. HOWEVER, if a directory containing\n        # an __init__.py is found, it will be included in the load.\n        \"/dir/containing/many/python/libraries\",\n\n        # An absolute path to a plugin.py to exclusively load\n        \"/path/to/plugin.py\",\n\n        # if you point to a directory that has an __init__.py file found in\n        # it, then only that file is loaded (it's similar to point to a\n        # absolute .py file. Hence, there is no (level 1) scanning at all\n        # within the directory specified.\n        \"/path/to/dir/library\"\n    ]\n)\n\n# Now that we've got our asset, we just work with our Apprise object as we\n# normally do\naobj = Apprise(asset=asset)\n\n# If our new custom `foobar://` library was loaded (presuming we prepared\n# one like in the examples above).  then you would be able to safely add it\n# into Apprise at this point\naobj.add('foobar://')\n\n# Send our notification out through our foobar://\naobj.notify(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Notification Hooks in Apprise\nDESCRIPTION: Shows how to create custom notification schema handlers in Python using the @notify decorator, allowing developers to extend Apprise with custom notification handlers.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom apprise.decorators import notify\n#\n# The below assumes you want to catch foobar:// calls:\n#\n@notify(on=\"foobar\", name=\"My Custom Foobar Plugin\")\ndef my_custom_notification_wrapper(body, title, notify_type, *args, **kwargs):\n    \"\"\"My custom notification function that triggers on all foobar:// calls\n    \"\"\"\n    # Write all of your code here... as an example...\n    print(\"{}: {} - {}\".format(notify_type.upper(), title, body))\n\n    # Returning True/False is a way to relay your status back to Apprise.\n    # Returning nothing (None by default) is always interpreted as a Success\n```\n\n----------------------------------------\n\nTITLE: Apprise CLI Configuration File Usage\nDESCRIPTION: Examples of using configuration files with Apprise CLI, supporting both local and remote configurations. Shows default config locations and how to specify custom config paths.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# By default if no url or configuration is specified apprise will attempt to load\n# configuration files (if present) from:\n#  ~/.apprise\n#  ~/.apprise.yaml\n#  ~/.config/apprise.conf\n#  ~/.config/apprise.yaml\n#  /etc/apprise.conf\n#  /etc/apprise.yaml\n\n# Also a subdirectory handling allows you to leverage plugins\n#  ~/.apprise/apprise\n#  ~/.apprise/apprise.yaml\n#  ~/.config/apprise/apprise.conf\n#  ~/.config/apprise/apprise.yaml\n#  /etc/apprise/apprise.yaml\n#  /etc/apprise/apprise.conf\n\n# Windows users can store their default configuration files here:\n#  %APPDATA%/Apprise/apprise.conf\n#  %APPDATA%/Apprise/apprise.yaml\n#  %LOCALAPPDATA%/Apprise/apprise.conf\n#  %LOCALAPPDATA%/Apprise/apprise.yaml\n#  %ALLUSERSPROFILE%\\Apprise\\apprise.conf\n#  %ALLUSERSPROFILE%\\Apprise\\apprise.yaml\n#  %PROGRAMFILES%\\Apprise\\apprise.conf\n#  %PROGRAMFILES%\\Apprise\\apprise.yaml\n#  %COMMONPROGRAMFILES%\\Apprise\\apprise.conf\n#  %COMMONPROGRAMFILES%\\Apprise\\apprise.yaml\n\n# The configuration files specified above can also be identified with a `.yml`\n# extension or even just entirely removing the `.conf` extension altogether.\n\n# If you loaded one of those files, your command line gets really easy:\napprise -vv -t 'my title' -b 'my notification body'\n\n# If you want to deviate from the default paths or specify more than one,\n# just specify them using the --config switch:\napprise -vv -t 'my title' -b 'my notification body' \\\n   --config=/path/to/my/config.yml\n\n# Got lots of configuration locations? No problem, you can specify them all:\n# Apprise can even fetch the configuration from over a network!\napprise -vv -t 'my title' -b 'my notification body' \\\n   --config=/path/to/my/config.yml \\\n   --config=https://localhost/my/apprise/config\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Notification Plugin\nDESCRIPTION: Python code example showing the minimum required structure for creating a custom notification plugin with Apprise. It demonstrates the use of the @notify decorator and handler function.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom apprise.decorators import notify\n\n# This example assumes you want your function to trigger on foobar://\n# references:\n@notify(on=\"foobar\", name=\"My Custom Notification\")\ndef my_wrapper(body, title, notify_type, *args, **kwargs):\n\n     print(\"Define your custom code here\")\n\n     # Returning True/False will relay your status back through Apprise\n     # Returning nothing (None by default) is always interpreted as True\n     return True\n```\n\n----------------------------------------\n\nTITLE: Displaying Apprise Notification Services Table in Markdown\nDESCRIPTION: This markdown table lists various notification services supported by Apprise, including their service IDs, default ports, and example syntax for configuration. It provides a quick reference for users to set up different notification channels.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Notification Service | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Apprise API](https://github.com/caronc/apprise/wiki/Notify_apprise_api)  | apprise:// or apprises:// | (TCP) 80 or 443 | apprise://hostname/Token\n| [AWS SES](https://github.com/caronc/apprise/wiki/Notify_ses)  | ses://   | (TCP) 443   | ses://user@domain/AccessKeyID/AccessSecretKey/RegionName<br/>ses://user@domain/AccessKeyID/AccessSecretKey/RegionName/email1/email2/emailN\n| [Bark](https://github.com/caronc/apprise/wiki/Notify_bark)  | bark://   | (TCP) 80 or 443   | bark://hostname<br />bark://hostname/device_key<br />bark://hostname/device_key1/device_key2/device_keyN<br/>barks://hostname<br />barks://hostname/device_key<br />barks://hostname/device_key1/device_key2/device_keyN\n| [BlueSky](https://github.com/caronc/apprise/wiki/Notify_bluesky) | bluesky://  | (TCP) 443   | bluesky://Handle:AppPw<br />bluesky://Handle:AppPw/TargetHandle<br />bluesky://Handle:AppPw/TargetHandle1/TargetHandle2/TargetHandleN\n| [Chanify](https://github.com/caronc/apprise/wiki/Notify_chanify) | chantify://    | (TCP) 443    | chantify://token\n| [Discord](https://github.com/caronc/apprise/wiki/Notify_discord)  | discord://   | (TCP) 443   | discord://webhook_id/webhook_token<br />discord://avatar@webhook_id/webhook_token\n| [Emby](https://github.com/caronc/apprise/wiki/Notify_emby)  | emby:// or embys:// | (TCP) 8096 | emby://user@hostname/<br />emby://user:password@hostname\n| [Enigma2](https://github.com/caronc/apprise/wiki/Notify_enigma2)  | enigma2:// or enigma2s:// | (TCP) 80 or 443 | enigma2://hostname\n| [FCM](https://github.com/caronc/apprise/wiki/Notify_fcm) | fcm://    | (TCP) 443    | fcm://project@apikey/DEVICE_ID<br />fcm://project@apikey/#TOPIC<br/>fcm://project@apikey/DEVICE_ID1/#topic1/#topic2/DEVICE_ID2/\n| [Feishu](https://github.com/caronc/apprise/wiki/Notify_feishu) | feishu://    | (TCP) 443    | feishu://token\n| [Flock](https://github.com/caronc/apprise/wiki/Notify_flock) | flock://    | (TCP) 443    | flock://token<br/>flock://botname@token<br/>flock://app_token/u:userid<br/>flock://app_token/g:channel_id<br/>flock://app_token/u:userid/g:channel_id\n| [Google Chat](https://github.com/caronc/apprise/wiki/Notify_googlechat) | gchat://    | (TCP) 443    | gchat://workspace/key/token\n| [Gotify](https://github.com/caronc/apprise/wiki/Notify_gotify) | gotify:// or gotifys://   | (TCP) 80 or 443    | gotify://hostname/token<br />gotifys://hostname/token?priority=high\n| [Growl](https://github.com/caronc/apprise/wiki/Notify_growl)  | growl://   | (UDP) 23053   | growl://hostname<br />growl://hostname:portno<br />growl://password@hostname<br />growl://password@hostname:port</br>**Note**: you can also use the get parameter _version_ which can allow the growl request to behave using the older v1.x protocol. An example would look like: growl://hostname?version=1\n| [Guilded](https://github.com/caronc/apprise/wiki/Notify_guilded)  | guilded://   | (TCP) 443   | guilded://webhook_id/webhook_token<br />guilded://avatar@webhook_id/webhook_token\n| [Home Assistant](https://github.com/caronc/apprise/wiki/Notify_homeassistant)       | hassio:// or hassios://   | (TCP) 8123 or 443 | hassio://hostname/accesstoken<br />hassio://user@hostname/accesstoken<br />hassio://user:password@hostname:port/accesstoken<br />hassio://hostname/optional/path/accesstoken\n| [IFTTT](https://github.com/caronc/apprise/wiki/Notify_ifttt) | ifttt://    | (TCP) 443    | ifttt://webhooksID/Event<br />ifttt://webhooksID/Event1/Event2/EventN<br/>ifttt://webhooksID/Event1/?+Key=Value<br/>ifttt://webhooksID/Event1/?-Key=value1\n| [Join](https://github.com/caronc/apprise/wiki/Notify_join) | join://   | (TCP) 443    | join://apikey/device<br />join://apikey/device1/device2/deviceN/<br />join://apikey/group<br />join://apikey/groupA/groupB/groupN<br />join://apikey/DeviceA/groupA/groupN/DeviceN/\n| [KODI](https://github.com/caronc/apprise/wiki/Notify_kodi) | kodi:// or kodis://    | (TCP) 8080 or 443   | kodi://hostname<br />kodi://user@hostname<br />kodi://user:password@hostname:port\n| [Kumulos](https://github.com/caronc/apprise/wiki/Notify_kumulos) | kumulos:// | (TCP) 443 | kumulos://apikey/serverkey\n| [LaMetric Time](https://github.com/caronc/apprise/wiki/Notify_lametric) | lametric:// | (TCP) 443 | lametric://apikey@device_ipaddr<br/>lametric://apikey@hostname:port<br/>lametric://client_id@client_secret\n| [Line](https://github.com/caronc/apprise/wiki/Notify_line) | line:// | (TCP) 443 | line://Token@User<br/>line://Token/User1/User2/UserN\n| [LunaSea](https://github.com/caronc/apprise/wiki/Notify_lunasea) | lunasea://  | (TCP) 80 or 443   | lunasea://user:pass@+FireBaseDevice/<br/>lunasea://user:pass@FireBaseUser/<br/>lunasea://user:pass@hostname/+FireBaseDevice/<br/>lunasea://user:pass@hostname/@FireBaseUser/\n| [Mailgun](https://github.com/caronc/apprise/wiki/Notify_mailgun) | mailgun:// | (TCP) 443 | mailgun://user@hostname/apikey<br />mailgun://user@hostname/apikey/email<br />mailgun://user@hostname/apikey/email1/email2/emailN<br />mailgun://user@hostname/apikey/?name=\"From%20User\"\n| [Mastodon](https://github.com/caronc/apprise/wiki/Notify_mastodon) | mastodon:// or mastodons://| (TCP) 80 or 443  | mastodon://access_key@hostname<br />mastodon://access_key@hostname/@user<br />mastodon://access_key@hostname/@user1/@user2/@userN\n| [Matrix](https://github.com/caronc/apprise/wiki/Notify_matrix) | matrix:// or matrixs://  | (TCP) 80 or 443 | matrix://hostname<br />matrix://user@hostname<br />matrixs://user:pass@hostname:port/#room_alias<br />matrixs://user:pass@hostname:port/!room_id<br />matrixs://user:pass@hostname:port/#room_alias/!room_id/#room2<br />matrixs://token@hostname:port/?webhook=matrix<br />matrix://user:token@hostname/?webhook=slack&format=markdown\n| [Mattermost](https://github.com/caronc/apprise/wiki/Notify_mattermost) | mmost:// or mmosts:// | (TCP) 8065 | mmost://hostname/authkey<br />mmost://hostname:80/authkey<br />mmost://user@hostname:80/authkey<br />mmost://hostname/authkey?channel=channel<br />mmosts://hostname/authkey<br />mmosts://user@hostname/authkey<br />\n| [Microsoft Power Automate / Workflows (MSTeams)](https://github.com/caronc/apprise/wiki/Notify_workflows) | workflows://  | (TCP) 443   | workflows://WorkflowID/Signature/\n| [Microsoft Teams](https://github.com/caronc/apprise/wiki/Notify_msteams) | msteams://  | (TCP) 443   | msteams://TokenA/TokenB/TokenC/\n| [Misskey](https://github.com/caronc/apprise/wiki/Notify_misskey) | misskey:// or misskeys://| (TCP) 80 or 443  | misskey://access_token@hostname\n| [MQTT](https://github.com/caronc/apprise/wiki/Notify_mqtt) | mqtt://  or mqtts:// | (TCP) 1883 or 8883   | mqtt://hostname/topic<br />mqtt://user@hostname/topic<br />mqtts://user:pass@hostname:9883/topic\n| [Nextcloud](https://github.com/caronc/apprise/wiki/Notify_nextcloud) | ncloud:// or nclouds:// | (TCP) 80 or 443 | ncloud://adminuser:pass@host/User<br/>nclouds://adminuser:pass@host/User1/User2/UserN\n| [NextcloudTalk](https://github.com/caronc/apprise/wiki/Notify_nextcloudtalk) | nctalk:// or nctalks:// | (TCP) 80 or 443 | nctalk://user:pass@host/RoomId<br/>nctalks://user:pass@host/RoomId1/RoomId2/RoomIdN\n| [Notica](https://github.com/caronc/apprise/wiki/Notify_notica) | notica://  | (TCP) 443   | notica://Token/\n| [Notifiarr](https://github.com/caronc/apprise/wiki/Notify_notifiarr) | notifiarr:// | (TCP) 443 | notifiarr://apikey/#channel<br />notifiarr://apikey/#channel1/#channel2/#channeln\n| [Notifico](https://github.com/caronc/apprise/wiki/Notify_notifico) | notifico://  | (TCP) 443   | notifico://ProjectID/MessageHook/\n| [ntfy](https://github.com/caronc/apprise/wiki/Notify_ntfy) | ntfy://  | (TCP) 80 or 443   | ntfy://topic/<br/>ntfys://topic/\n| [Office 365](https://github.com/caronc/apprise/wiki/Notify_office365) | o365://  | (TCP) 443   | o365://TenantID:AccountEmail/ClientID/ClientSecret<br />o365://TenantID:AccountEmail/ClientID/ClientSecret/TargetEmail<br />o365://TenantID:AccountEmail/ClientID/ClientSecret/TargetEmail1/TargetEmail2/TargetEmailN\n| [OneSignal](https://github.com/caronc/apprise/wiki/Notify_onesignal) | onesignal:// | (TCP) 443 | onesignal://AppID@APIKey/PlayerID<br/>onesignal://TemplateID:AppID@APIKey/UserID<br/>onesignal://AppID@APIKey/#IncludeSegment<br/>onesignal://AppID@APIKey/Email\n| [Opsgenie](https://github.com/caronc/apprise/wiki/Notify_opsgenie) | opsgenie:// | (TCP) 443 | opsgenie://APIKey<br/>opsgenie://APIKey/UserID<br/>opsgenie://APIKey/#Team<br/>opsgenie://APIKey/\\*Schedule<br/>opsgenie://APIKey/^Escalation\n| [PagerDuty](https://github.com/caronc/apprise/wiki/Notify_pagerduty) | pagerduty:// | (TCP) 443 | pagerduty://IntegrationKey@ApiKey<br/>pagerduty://IntegrationKey@ApiKey/Source/Component\n| [PagerTree](https://github.com/caronc/apprise/wiki/Notify_pagertree) | pagertree:// | (TCP) 443 | pagertree://integration_id\n| [ParsePlatform](https://github.com/caronc/apprise/wiki/Notify_parseplatform) | parsep:// or parseps:// | (TCP) 80 or 443 | parsep://AppID:MasterKey@Hostname<br/>parseps://AppID:MasterKey@Hostname\n| [PopcornNotify](https://github.com/caronc/apprise/wiki/Notify_popcornnotify) | popcorn://  | (TCP) 443   | popcorn://ApiKey/ToPhoneNo<br/>popcorn://ApiKey/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/<br/>popcorn://ApiKey/ToEmail<br/>popcorn://ApiKey/ToEmail1/ToEmail2/ToEmailN/<br/>popcorn://ApiKey/ToPhoneNo1/ToEmail1/ToPhoneNoN/ToEmailN\n| [Prowl](https://github.com/caronc/apprise/wiki/Notify_prowl) | prowl://   | (TCP) 443    | prowl://apikey<br />prowl://apikey/providerkey\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Attachments with Apprise\nDESCRIPTION: Shows how to send multiple attachments in a single notification using lists, sets, or tuples. Includes example of renaming attachments using URL parameters.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport apprise\n\n# Create an Apprise instance\napobj = apprise.Apprise()\n\n# Add at least one service you want to notify\napobj.add('mailto://myuser:mypass@hotmail.com')\n\n# Now add all of the entries we're interested in:\nattach = (\n    # ?name= allows us to rename the actual jpeg as found on the site\n    # to be another name when sent to our receipient(s)\n    'https://i.redd.it/my2t4d2fx0u31.jpg?name=FlyingToMars.jpg',\n\n    # Now add another:\n    '/path/to/funny/joke.gif',\n)\n\n# Send your multiple attachments with a single notify call:\napobj.notify(\n    title='Some good jokes.',\n    body='Hey guys, check out these!',\n    attach=attach,\n)\n```\n\n----------------------------------------\n\nTITLE: Using File Attachments with Apprise CLI\nDESCRIPTION: Examples of sending notifications with file attachments using Apprise CLI, supporting both local files and remote URLs as attachments.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Send a funny image you found on the internet to a colleague:\napprise -vv --title 'Agile Joke' \\\n        --body 'Did you see this one yet?' \\\n        --attach https://i.redd.it/my2t4d2fx0u31.jpg \\\n        'mailto://myemail:mypass@gmail.com'\n\n# Easily send an update from a critical server to your dev team\napprise -vv --title 'system crash' \\\n        --body 'I do not think Jim fixed the bug; see attached...' \\\n        --attach /var/log/myprogram.log \\\n        --attach /var/debug/core.2345 \\\n        --tag devteam\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with File Attachments\nDESCRIPTION: Example of sending a notification that includes a file attachment, which will be sent to notification services that support attachments.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise -vv -t \"School Assignment\" -b \"See attached\" \\\n   --attach=Documents/FinalReport.docx\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Storage in API\nDESCRIPTION: Shows how to configure and use persistent storage in the Apprise API, including setting storage paths and operational modes.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom apprise import Apprise\nfrom apprise import AppriseAsset\nfrom apprise import PersistentStoreMode\n\n# Prepare a location the persistent storage can write it's cached content to.\n# By setting this path, this immediately assumes you wish to operate the\n# persistent storage in the operational 'auto' mode\nasset = AppriseAsset(storage_path=\"/path/to/save/data\")\n\n# If you want to be more explicit and set more options, then you may do the\n# following\nasset = AppriseAsset(\n    # Set our storage path directory (minimum requirement to enable it)\n    storage_path=\"/path/to/save/data\",\n\n    # Set the mode... the options are:\n    # 1. PersistentStoreMode.MEMORY\n    #       - disable persistent storage from writing to disk\n    # 2. PersistentStoreMode.AUTO\n    #       - write to disk on demand\n    # 3. PersistentStoreMode.FLUSH\n    #       - write to disk always and often\n    storage_mode=PersistentStoreMode.FLUSH\n\n    # The URL IDs are by default 8 characters in length. You can increase and\n    # decrease it's value here.  The value must be > 2. The default value is 8\n    # if not otherwise specified\n    storage_idlen=8,\n)\n\n# Now that we've got our asset, we just work with our Apprise object as we\n# normally do\naobj = Apprise(asset=asset)\n```\n\n----------------------------------------\n\nTITLE: Managing Persistent Storage via CLI\nDESCRIPTION: Shows CLI commands for managing Apprise's persistent storage, including listing, pruning, and cleaning storage entries.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# List all of the occupied space used by Apprise's Persistent Storage:\napprise storage list\n\n# list is the default option, so the following does the same thing:\napprise storage\n\n# You can prune all of your storage older then 30 days\n# and not accessed for this period like so:\napprise storage prune\n\n# You can do a hard reset (and wipe all persistent storage) with:\napprise storage clean\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Configuration with Tag Filtering\nDESCRIPTION: Example showing how to load a configuration from a remote source and filter notifications to only those tagged as 'devops'.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise -vv -t \"my title\" -b \"my notification body\" \\\n   --config=https://localhost/my/apprise/config \\\n   -t devops\n```\n\n----------------------------------------\n\nTITLE: Loading Notification Configuration from File\nDESCRIPTION: Example demonstrating how to load notification service URLs from a local configuration file to send notifications to all defined services.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise -vv -t \"my title\" -b \"my notification body\" \\\n   --config=~/apprise.yml\n```\n\n----------------------------------------\n\nTITLE: Using Standard Input for Notification Body\nDESCRIPTION: Example showing how to use standard input (stdin) as the notification body content, allowing integration with other command outputs.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /proc/cpuinfo | apprise -vv -t \"cpu info\" \\\n    \"mailto://myemail:mypass@gmail.com\"\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications to Multiple Services\nDESCRIPTION: Example of sending a notification with a title and body to multiple services simultaneously. The verbose flag is used for detailed output.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise -vv -t \"my title\" -b \"my notification body\" \\\n   \"mailto://myemail:mypass@gmail.com\" \\\n   \"pbul://o.gn5kj6nfhv736I7jC3cj3QLRiyhgl98b\"\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Notification Plugins with Apprise CLI\nDESCRIPTION: Shows how to use custom notification plugins with Apprise CLI, including default plugin paths and how to specify custom plugin paths.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# By default if no plugin path is specified apprise will attempt to load\n# all plugin files (if present) from the following directory paths:\n#  ~/.apprise/plugins\n#  ~/.config/apprise/plugins\n#  /var/lib/apprise/plugins\n\n# Windows users can store their default plugin files in these directories:\n#  %APPDATA%/Apprise/plugins\n#  %LOCALAPPDATA%/Apprise/plugins\n#  %ALLUSERSPROFILE%\\Apprise\\plugins\n#  %PROGRAMFILES%\\Apprise\\plugins\n#  %COMMONPROGRAMFILES%\\Apprise\\plugins\n\n# If you placed your plugin file within one of the directories already defined\n# above, then your call simply needs to look like:\napprise -vv --title 'custom override' \\\n        --body 'the body of my message' \\\n        foobar:\\\\\n\n# However you can over-ride the path like so\napprise -vv --title 'custom override' \\\n        --body 'the body of my message' \\\n        --plugin-path /path/to/my/plugin.py \\\n        foobar:\\\\\n```\n\n----------------------------------------\n\nTITLE: Displaying SMS Notification Services Table in Markdown\nDESCRIPTION: A markdown table showing various SMS notification services supported by Apprise, including their service IDs, default ports, and example syntax for configuration.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Notification Service | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Africas Talking](https://github.com/caronc/apprise/wiki/Notify_africas_talking) | atalk://  | (TCP) 443   | atalk://AppUser@ApiKey/ToPhoneNo<br/>atalk://AppUser@ApiKey/ToPhoneNo1/ToPhoneNo2/ToPhoneNoN/\n| [Automated Packet Reporting System (ARPS)](https://github.com/caronc/apprise/wiki/Notify_aprs)  | aprs:// | (TCP) 10152 | aprs://user:pass@callsign<br/>aprs://user:pass@callsign1/callsign2/callsignN\n| [AWS SNS](https://github.com/caronc/apprise/wiki/Notify_sns)  | sns://   | (TCP) 443   | sns://AccessKeyID/AccessSecretKey/RegionName/+PhoneNo<br/>sns://AccessKeyID/AccessSecretKey/RegionName/+PhoneNo1/+PhoneNo2/+PhoneNoN<br/>sns://AccessKeyID/AccessSecretKey/RegionName/Topic<br/>sns://AccessKeyID/AccessSecretKey/RegionName/Topic1/Topic2/TopicN\n```\n\n----------------------------------------\n\nTITLE: Displaying Desktop Notification Services Table in Markdown\nDESCRIPTION: A markdown table showing various desktop notification services supported by Apprise, including their service IDs, default ports, and example syntax for configuration.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Notification Service | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Linux DBus Notifications](https://github.com/caronc/apprise/wiki/Notify_dbus)  | dbus://<br />qt://<br />glib://<br />kde://  | n/a  | dbus://<br />qt://<br />glib://<br />kde://\n| [Linux Gnome Notifications](https://github.com/caronc/apprise/wiki/Notify_gnome) | gnome://    |        n/a          | gnome://\n| [MacOS X Notifications](https://github.com/caronc/apprise/wiki/Notify_macosx) | macosx://    |        n/a          | macosx://\n| [Windows Notifications](https://github.com/caronc/apprise/wiki/Notify_windows) | windows://    |        n/a          | windows://\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Notification Services Table in Markdown\nDESCRIPTION: A markdown table showing email notification services supported by Apprise, including their service IDs, default ports, and example syntax for configuration.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Service ID | Default Port | Example Syntax |\n| ---------- | ------------ | -------------- |\n| [mailto://](https://github.com/caronc/apprise/wiki/Notify_email)  |  (TCP) 25    | mailto://userid:pass@domain.com<br />mailto://domain.com?user=userid&pass=password<br/>mailto://domain.com:2525?user=userid&pass=password<br />mailto://user@gmail.com&pass=password<br />mailto://mySendingUsername:mySendingPassword@example.com?to=receivingAddress@example.com<br />mailto://userid:password@example.com?smtp=mail.example.com&from=noreply@example.com&name=no%20reply\n| [mailtos://](https://github.com/caronc/apprise/wiki/Notify_email) |  (TCP) 587   | mailtos://userid:pass@domain.com<br />mailtos://domain.com?user=userid&pass=password<br/>mailtos://domain.com:465?user=userid&pass=password<br />mailtos://user@hotmail.com&pass=password<br />mailtos://mySendingUsername:mySendingPassword@example.com?to=receivingAddress@example.com<br />mailtos://userid:password@example.com?smtp=mail.example.com&from=noreply@example.com&name=no%20reply\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Notification Services Table in Markdown\nDESCRIPTION: A markdown table showing custom notification services supported by Apprise, including their service IDs, default ports, and example syntax for configuration.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Post Method          | Service ID | Default Port | Example Syntax |\n| -------------------- | ---------- | ------------ | -------------- |\n| [Form](https://github.com/caronc/apprise/wiki/Notify_Custom_Form)       | form:// or forms://   | (TCP) 80 or 443 | form://hostname<br />form://user@hostname<br />form://user:password@hostname:port<br />form://hostname/a/path/to/post/to\n| [JSON](https://github.com/caronc/apprise/wiki/Notify_Custom_JSON)       | json:// or jsons://   | (TCP) 80 or 443 | json://hostname<br />json://user@hostname<br />json://user:password@hostname:port<br />json://hostname/a/path/to/post/to\n| [XML](https://github.com/caronc/apprise/wiki/Notify_Custom_XML)         | xml:// or xmls://   | (TCP) 80 or 443 | xml://hostname<br />xml://user@hostname<br />xml://user:password@hostname:port<br />xml://hostname/a/path/to/post/to\n```\n\n----------------------------------------\n\nTITLE: Listing Available Notifications in Dry-Run Mode\nDESCRIPTION: Example showing how to list all loaded notification services using dry-run mode without actually sending notifications.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise --dry-run --tag=all\n```\n\n----------------------------------------\n\nTITLE: Listing Persistent Storage Details\nDESCRIPTION: Command to list all details about the current persistent storage configuration and stored notification states.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise storage list\n```\n\n----------------------------------------\n\nTITLE: Pruning Old Persistent Storage Entries\nDESCRIPTION: Example of pruning persistent storage entries that haven't been accessed for at least 10 days, freeing up storage space.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/man/apprise.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ apprise storage prune --storage-prune-days=10\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Apprise\nDESCRIPTION: This requirements file specifies the Python package dependencies needed for the Apprise notification service. It includes certifi for root certificate authority, requests and requests-oauthlib for HTTP handling, click for command-line interfaces, markdown for text processing, and PyYAML for configuration parsing.\nSOURCE: https://github.com/caronc/apprise/blob/master/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Root certificate authority bundle\ncertifi\n\n# Application dependencies\nrequests\nrequests-oauthlib\nclick >= 5.0\nmarkdown\nPyYAML\n```\n\n----------------------------------------\n\nTITLE: Defining Apprise Plugin Dependencies in Python\nDESCRIPTION: This code snippet lists the required Python packages for different Apprise plugins. It includes dependencies for FCM and SPush notifications, Growl support, MQTT integration, and PGP-based email and Delta Chat notifications. Note the specific version constraint for paho-mqtt due to a known issue.\nSOURCE: https://github.com/caronc/apprise/blob/master/all-plugin-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#\n# Plugin Dependencies\n#\n\n# Provides fcm:// and spush://\ncryptography\n\n# Provides growl:// support\ngntp\n\n# Provides mqtt:// support\n# use any version other than 2.0.x due to https://github.com/eclipse/paho.mqtt.python/issues/814\npaho-mqtt != 2.0.*\n\n# Pretty Good Privacy (PGP) Provides mailto:// and deltachat:// support\nPGPy\n```\n\n----------------------------------------\n\nTITLE: Installing Apprise Using pip\nDESCRIPTION: Installs the Apprise package from PyPI using pip, which is the easiest installation method.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install apprise\n```\n\n----------------------------------------\n\nTITLE: Installing Apprise Using Package Managers on RHEL/CentOS/Fedora\nDESCRIPTION: Instructions for installing Apprise on RPM-based Linux distributions through EPEL repository using yum or dnf package managers.\nSOURCE: https://github.com/caronc/apprise/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Follow instructions on https://docs.fedoraproject.org/en-US/epel/\n# to get your system connected up to EPEL and then:\n# Redhat/CentOS 7.x users\nyum install apprise\n\n# Redhat/CentOS 8.x+ and/or Fedora Users\ndnf install apprise\n```\n\n----------------------------------------\n\nTITLE: Installing Apprise on RPM-based Systems\nDESCRIPTION: Commands for installing Apprise packages on EPEL-based distributions. Installs both the python3-apprise development package and the apprise administrative tool.\nSOURCE: https://github.com/caronc/apprise/blob/master/packaging/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# python3-apprise: contains all you need to develop with apprise\n# apprise: provides the 'apprise' administrative tool\ndnf install python3-apprise apprise\n```\n\n----------------------------------------\n\nTITLE: Setting Up Apprise Development Environment\nDESCRIPTION: Instructions for installing development dependencies using pip\nSOURCE: https://github.com/caronc/apprise/blob/master/bin/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r dev-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Testing Apprise Notifications\nDESCRIPTION: Example of using the development version of Apprise to send test notifications\nSOURCE: https://github.com/caronc/apprise/blob/master/bin/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/apprise -t title -b body \\\n          mailto://user:pass@example.com\n```\n\n----------------------------------------\n\nTITLE: Running Apprise Unit Tests\nDESCRIPTION: Examples of running unit tests with optional keyword filtering\nSOURCE: https://github.com/caronc/apprise/blob/master/bin/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests:\n./bin/tests.sh\n\n# Run just the tests associated with the rest framework:\n./bin/tests.sh rest\n\n# Run just the Apprise config related unit tests\n./bin/tests.sh config\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality Checks\nDESCRIPTION: Command to perform PEP8 linting and test coverage verification\nSOURCE: https://github.com/caronc/apprise/blob/master/bin/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/checkdone.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Development Tools to PATH\nDESCRIPTION: Commands to add the Apprise development tools directory to system PATH\nSOURCE: https://github.com/caronc/apprise/blob/master/bin/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Update the path to include the bin directory:\nexport PATH=\"$(pwd)/bin:$PATH\"\n\n# Now you can call the scripts identified above from anywhere...\n```\n\n----------------------------------------\n\nTITLE: Testing RPM Builds with Docker\nDESCRIPTION: Commands for testing RPM builds using Docker environments for different distributions\nSOURCE: https://github.com/caronc/apprise/blob/master/bin/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# To test with el9; do the following:\ndocker-compose run --rm rpmbuild.el9 build-rpm.sh\n\n# To test with f39; do the following:\ndocker-compose run --rm rpmbuild.f39 build-rpm.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Python Development Dependencies for Apprise\nDESCRIPTION: A requirements file listing Python packages needed for testing and development, including code coverage (coverage, pytest-cov), linting (flake8), testing (pytest, pytest-mock), and internationalization (babel) tools.\nSOURCE: https://github.com/caronc/apprise/blob/master/dev-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoverage\nflake8\npytest\npytest-cov\npytest-mock\nbabel\n```\n\n----------------------------------------\n\nTITLE: Contribution Format Template in Markdown\nDESCRIPTION: A template showing the expected format for adding new contributors to the list. Contributors should provide their name or handle, email or website, and a brief summary of their contribution with the date.\nSOURCE: https://github.com/caronc/apprise/blob/master/CONTRIBUTIONS.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Your name or handle] <[email or website]>\n  * [Month Year] - [Brief summary of your contribution]\n```"
  }
]