[
  {
    "owner": "ecsyjs",
    "repo": "ecsy",
    "content": "TITLE: Complete ECSY Example in JavaScript\nDESCRIPTION: This comprehensive snippet consolidates all previous examples into a single, functional ECSY application. It includes component definitions (`Acceleration`, `Position`), system definitions (`PositionLogSystem`, `MovableSystem`), world creation, component registration, system registration, entity creation, and the game loop. It requires the `ecsy` library.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { World, System } from 'ecsy';\n\nlet world = new World();\n\nclass Acceleration extends Component {}\n\nAcceleration.schema = {\n  value: { type: Types.Number, default: 0.1 }\n};\n\nclass Position extends Component {}\n\nPosition.schema = {\n  x: { type: Types.Number },\n  y: { type: Types.Number },\n  z: { type: Types.Number }\n};\n\nworld\n  .registerComponent(Acceleration)\n  .registerComponent(Position);\n\nclass PositionLogSystem extends System {\n  init() {}\n  execute(delta, time) {\n    this.queries.position.results.forEach(entity => {\n      let pos = entity.getComponent(Position);\n      console.log(`Entity with ID: ${entity.id} has component Position={x: ${pos.x}, y: ${pos.y}, z: ${pos.z}}`);\n    });\n  }\n}\n\nPositionLogSystem.queries = {\n  position: {\n    components: [Position]\n  }\n}\n\nclass MovableSystem extends System {\n  init() {}\n  execute(delta, time) {\n    this.queries.moving.results.forEach(entity => {\n      let acceleration = entity.getComponent(Acceleration).value;\n      let position = entity.getMutableComponent(Position);\n      position.x += acceleration * delta;\n      position.y += acceleration * delta;\n      position.z += acceleration * delta;\n    });\n  }\n}\n\nMovableSystem.queries = {\n  moving: {\n    components: [Acceleration, Position]\n  }\n}\n\nworld\n  .registerSystem(MovableSystem)\n  .registerSystem(PositionLogSystem)\n\nworld\n  .createEntity()\n  .addComponent(Position);\n\nfor (let i = 0; i < 10; i++) {\n  world\n    .createEntity()\n    .addComponent(Acceleration)\n    .addComponent(Position, { x: Math.random() * 10, y: Math.random() * 10, z: 0});\n}\n\nlet lastTime = performance.now();\nfunction run() {\n  let time = performance.now();\n  let delta = time - lastTime;\n\n  world.execute(delta, time);\n\n  lastTime = time;\n  requestAnimationFrame(run);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Defining ECS Systems in JavaScript\nDESCRIPTION: This example shows how to define an ECS system in ECSY. Systems extend the `System` interface and implement `init` and `execute` methods. The `queries` attribute defines the entities the system is interested in based on their components. `PositionLogSystem` logs the position of entities with the `Position` component, and `MovableSystem` updates the position of entities with both `Acceleration` and `Position` components. ECSY `System` class and `Position` component are required.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass PositionLogSystem extends System {\n  init() { /* Do whatever you need here */ }\n\n  // This method will get called on every frame\n  execute(delta, time) {\n    // Iterate through all the entities on the query\n    this.queries.position.results.forEach(entity => {\n      // Access the component `Position` on the current entity\n      let pos = entity.getComponent(Position);\n\n      console.log(`Entity with ID: ${entity.id} has component Position={x: ${pos.x}, y: ${pos.y}, z: ${pos.z}}`);\n    });\n  }\n}\n\n// Define a query of entities that have the \"Position\" component\nPositionLogSystem.queries = {\n  position: {\n    components: [Position]\n  }\n}\n\nclass MovableSystem extends System {\n  init() { /* Do whatever you need here */ }\n\n  // This method will get called on every frame by default\n  execute(delta, time) {\n\n    // Iterate through all the entities on the query\n    this.queries.moving.results.forEach(entity => {\n\n      // Get the `Acceleration` component as Read-only\n      let acceleration = entity.getComponent(Acceleration).value;\n\n      // Get the `Position` component as Writable\n      let position = entity.getMutableComponent(Position);\n      position.x += acceleration * delta;\n      position.y += acceleration * delta;\n      position.z += acceleration * delta;\n    });\n  }\n}\n\n// Define a query of entities that have \"Acceleration\" and \"Position\" components\nMovableSystem.queries = {\n  moving: {\n    components: [Acceleration, Position]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Class Definition in ECSY (JavaScript)\nDESCRIPTION: This code snippet demonstrates the basic structure of a System in ECSY.  Systems extend the base `System` class and can implement `init()` for initialization and `execute()` for processing entities each frame. The `execute` method receives the `delta` time and `elapsedTime` as arguments.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SystemName extends System {\n  init() {}\n  execute(delta, time) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECS Components in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define ECS components using ES6 class syntax in ECSY. Components are simple objects that hold data. The example shows two components, `Acceleration` and `Position`, with associated schemas that define the data types and default values of their properties. ECSY `Component` is required.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Acceleration extends Component {}\n\nAcceleration.schema = {\n  value: { type: Types.Number, default: 0.1 }\n};\n\nclass Position extends Component {}\n\nPosition.schema = {\n  x: { type: Types.Number },\n  y: { type: Types.Number },\n  z: { type: Types.Number }\n};\n```\n\n----------------------------------------\n\nTITLE: System Queries Definition (JavaScript)\nDESCRIPTION: This snippet shows how to define queries within a system using the static `queries` attribute. Each query specifies the components an entity must have to be included in the query's results. These queries are then accessible within the `execute` method.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystemName.queries = {\n  boxes: { components: [ Box ] },\n  spheres: { components: [ Sphere ] }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Query Definition (JavaScript)\nDESCRIPTION: This example shows the basic syntax for defining a query in ECSY. The `components` attribute specifies an array of components that an entity must possess to be included in the query.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar query = {\n  positions: {\n    components: [ Position, Velocity ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Entities and Adding Components in JavaScript\nDESCRIPTION: This snippet illustrates how to create entities and add components to them in ECSY. It demonstrates the creation of an entity with only the `Position` component and the creation of multiple entities with both `Acceleration` and `Position` components.  Custom parameters are passed to the `Position` component during creation. Requires the prior definition of `World`, `Acceleration`, and `Position`.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar entityA = world\n  .createEntity()\n  .addComponent(Position);\n\nfor (let i = 0; i < 10; i++) {\n  world\n    .createEntity()\n    .addComponent(Acceleration)\n    .addComponent(Position, { x: Math.random() * 10, y: Math.random() * 10, z: 0});\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Query - Added and Removed (JavaScript)\nDESCRIPTION: This snippet demonstrates defining a reactive query using the `listen` attribute with `added` and `removed` set to `true`. This allows systems to react to entities being added to or removed from the query. Requires components `Box` and `Transform`.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystemTest.queries = {\n  boxes: {\n    components: [ Box, Transform ],\n    listen: {\n      added: true,\n      removed: true\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Query with Not Operator (JavaScript)\nDESCRIPTION: This code demonstrates using the `Not` operator in a query definition.  The query will return entities that have the `Enemy` component but do not have the `Dead` component.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystemTest.queries = {\n  activeEnemies: {\n    components: [ Enemy, Not(Dead) ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Components to an Entity in ECSY\nDESCRIPTION: This example shows how to add components to an entity in ECSY using the `addComponent()` method.  It demonstrates adding a component with default values and also adding a component while overriding specific values with provided parameters.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass ComponentA {\n  constructor() {\n    this.number = 10;\n    this.string = \"Hello\";\n  }\n}\n\n// Add the component with the default values\nentity.addComponent(ComponentA);\n\n// Add the component replacing the default values\nentity.addComponent(ComponentA, {number: 20, string: \"Hi\"});\n```\n\n----------------------------------------\n\nTITLE: Registering a System in ECSY (JavaScript)\nDESCRIPTION: This code shows how to register a system with the ECSY world.  Registering a system adds it to the scheduler, allowing it to be initialized and executed each frame. The `registerSystem` method is called on the `world` object with the system class as an argument.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nworld.registerSystem(SystemClass);\n```\n\n----------------------------------------\n\nTITLE: Registering Systems with ECS World in JavaScript\nDESCRIPTION: This snippet registers the `MovableSystem` and `PositionLogSystem` with the ECS `World`.  Requires `World`, `MovableSystem` and `PositionLogSystem` to be defined.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nworld\n  .registerSystem(MovableSystem)\n  .registerSystem(PositionLogSystem);\n```\n\n----------------------------------------\n\nTITLE: Defining a Component with Schema in ECSY\nDESCRIPTION: This snippet demonstrates how to define a component in ECSY using the `Component` class and a schema.  The schema defines the properties of the component, including their types and default values. It leverages the ECSY library and defines a `ComponentA` with a number and string property.  It requires importing `Component` and `Types` from 'ecsy'.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, Types } from 'ecsy';\n\nclass ComponentA extends Component {}\n\nComponentA.schema = {\n  number: { type: Types.Number, default: 10 },\n  string: { type: Types.String, default: \"Hello\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Results in System (JavaScript)\nDESCRIPTION: This code shows how to access entities matching a query within the system's `execute` method. It iterates through the `results` array of each query and retrieves the component data using `entity.getComponent()`. Requires components `Box` and `Sphere` to be defined.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SystemName extends System {\n  execute(delta, time) {\n    this.queries.boxes.results.forEach(entity => {\n      let box = entity.getComponent(Box);\n      // Do whatever you want with box\n    });\n\n    this.queries.Spheres.results.forEach(entity => {\n      let sphere = entity.getComponent(Sphere);\n      // Do whatever you want with Sphere\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ECSY via npm\nDESCRIPTION: This command demonstrates how to install the ECSY package using npm.  This will add ECSY as a dependency to your project.  Run this command in your project's root directory.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save ecsy\n```\n\n----------------------------------------\n\nTITLE: Executing ECS World Systems in JavaScript\nDESCRIPTION: This snippet demonstrates how to execute the ECS world's systems within a game loop using `requestAnimationFrame`. It calculates the delta time between frames and passes it to the `world.execute` method, which executes all registered systems. The code depends on `performance.now()` and `requestAnimationFrame()`.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet  lastTime = performance.now();\nfunction  run() {\n  // Compute delta and elapsed time\n  let time = performance.now();\n  let delta = time - lastTime;\n\n  // Run all the systems\n  world.execute(delta, time);\n\n  lastTime = time;\n  requestAnimationFrame(run);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Reactive Query - Changed (JavaScript)\nDESCRIPTION: This snippet shows how to detect changes to any components in a query by setting `changed: true` in the `listen` attribute.  Requires components `Box` and `Transform` to be part of the query.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystemTest.queries = {\n  boxes: {\n    components: [ Box, Transform ],\n    listen: {\n      added: true,\n      removed: true,\n      changed: true  // Detect that any of the components on the query (Box, Transform) has changed\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a World in ECSY\nDESCRIPTION: This snippet demonstrates how to create a new `World` instance in ECSY. A world acts as a container for entities, components, and systems. No specific dependencies are required beyond the ECSY library itself. The `world` variable will hold a new `World` object.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nworld = new World();\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity in ECSY\nDESCRIPTION: This code demonstrates how to create a new entity within an ECSY `World` context using the `createEntity()` method. The returned entity object is then used to group components together.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet entity = world.createEntity();\n```\n\n----------------------------------------\n\nTITLE: Adding Component to Query Results (JavaScript)\nDESCRIPTION: This code iterates through the results of a query to add a component to each entity. Requires a query to be defined as `playerUnitialized` with components `Player` and `Not(Name)`.  After the component is added, the entity will be removed from the query results.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueries.playerUnitialized.results.forEach(entity => {\n  entity.addComponent(Name, {value: getRandomName()});\n});\n```\n\n----------------------------------------\n\nTITLE: ECSY Integration Example in HTML\nDESCRIPTION: This HTML snippet demonstrates a complete ECSY example, including component definitions, system implementations, and entity creation. It uses ES modules imported from the ECSY GitHub repository. It includes `Velocity`, `Position`, `Shape`, and `Renderable` components. The `MovableSystem` updates the position based on velocity, and `RendererSystem` draws shapes on a canvas.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Hello!</title>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n      html, body: {\n        margin: 0;\n        padding: 0;\n      }\n    </style>\n\n    <script type=\"module\">\n      import { World, System, Component, TagComponent, Types } from \"https://ecsyjs.github.io/ecsy/build/ecsy.module.js\";\n\n      const NUM_ELEMENTS = 50;\n      const SPEED_MULTIPLIER = 0.3;\n      const SHAPE_SIZE = 50;\n      const SHAPE_HALF_SIZE = SHAPE_SIZE / 2;\n\n      // Initialize canvas\n      let canvas = document.querySelector(\"canvas\");\n      let canvasWidth = canvas.width = window.innerWidth;\n      let canvasHeight = canvas.height = window.innerHeight;\n      let ctx = canvas.getContext(\"2d\");\n\n      //----------------------\n      // Components\n      //----------------------\n\n      // Velocity component\n      class Velocity extends Component {}\n\n      Velocity.schema = {\n        x: { type: Types.Number },\n        y: { type: Types.Number }\n      };\n\n      // Position component\n      class Position extends Component {}\n\n      Position.schema = {\n        x: { type: Types.Number },\n        y: { type: Types.Number }\n      };\n\n      // Shape component\n      class Shape extends Component {}\n\n      Shape.schema = {\n        primitive: { type: Types.String, default: 'box' }\n      };\n\n      // Renderable component\n      class Renderable extends TagComponent {}\n\n      //----------------------\n      // Systems\n      //----------------------\n\n      // MovableSystem\n      class MovableSystem extends System {\n        // This method will get called on every frame by default\n        execute(delta, time) {\n          // Iterate through all the entities on the query\n          this.queries.moving.results.forEach(entity => {\n            var velocity = entity.getComponent(Velocity);\n            var position = entity.getMutableComponent(Position);\n            position.x += velocity.x * delta;\n            position.y += velocity.y * delta;\n\n            if (position.x > canvasWidth + SHAPE_HALF_SIZE) position.x = - SHAPE_HALF_SIZE;\n            if (position.x < - SHAPE_HALF_SIZE) position.x = canvasWidth + SHAPE_HALF_SIZE;\n            if (position.y > canvasHeight + SHAPE_HALF_SIZE) position.y = - SHAPE_HALF_SIZE;\n            if (position.y < - SHAPE_HALF_SIZE) position.y = canvasHeight + SHAPE_HALF_SIZE;\n          });\n        }\n      }\n\n      // Define a query of entities that have \"Velocity\" and \"Position\" components\n      MovableSystem.queries = {\n        moving: {\n          components: [Velocity, Position]\n        }\n      }\n\n      // RendererSystem\n      class RendererSystem extends System {\n        // This method will get called on every frame by default\n        execute(delta, time) {\n\n          ctx.fillStyle = \"#d4d4d4\";\n          ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n          // Iterate through all the entities on the query\n          this.queries.renderables.results.forEach(entity => {\n            var shape = entity.getComponent(Shape);\n            var position = entity.getComponent(Position);\n            if (shape.primitive === 'box') {\n              this.drawBox(position);\n            } else {\n              this.drawCircle(position);\n            }\n          });\n        }\n\n        drawCircle(position) {\n          ctx.beginPath();\n          ctx.arc(position.x, position.y, SHAPE_HALF_SIZE, 0, 2 * Math.PI, false);\n          ctx.fillStyle= \"#39c495\";\n          ctx.fill();\n          ctx.lineWidth = 2;\n          ctx.strokeStyle = \"#0b845b\";\n          ctx.stroke();\n        }\n\n        drawBox(position) {\n          ctx.beginPath();\n          ctx.rect(position.x - SHAPE_HALF_SIZE, position.y - SHAPE_HALF_SIZE, SHAPE_SIZE, SHAPE_SIZE);\n          ctx.fillStyle= \"#e2736e\";\n          ctx.fill();\n          ctx.lineWidth = 2;\n          ctx.strokeStyle = \"#b74843\";\n          ctx.stroke();\n        }\n      }\n\n      // Define a query of entities that have \"Renderable\" and \"Shape\" components\n      RendererSystem.queries = {\n        renderables: { components: [Renderable, Shape] }\n      }\n\n      // Create world and register the components and systems on it\n      var world = new World();\n      world\n        .registerComponent(Velocity)\n        .registerComponent(Position)\n        .registerComponent(Shape)\n        .registerComponent(Renderable)\n        .registerSystem(MovableSystem)\n        .registerSystem(RendererSystem);\n\n      // Some helper functions when creating the components\n      function getRandomVelocity() {\n        return {\n          x: SPEED_MULTIPLIER * (2 * Math.random() - 1),\n          y: SPEED_MULTIPLIER * (2 * Math.random() - 1)\n        };\n      }\n\n      function getRandomPosition() {\n        return {\n          x: Math.random() * canvasWidth,\n          y: Math.random() * canvasHeight\n        };\n      }\n\n      function getRandomShape() {\n         return {\n           primitive: Math.random() >= 0.5 ? 'circle' : 'box'\n         };\n      }\n\n      for (let i = 0; i < NUM_ELEMENTS; i++) {\n        world\n          .createEntity()\n          .addComponent(Velocity, getRandomVelocity())\n          .addComponent(Shape, getRandomShape())\n          .addComponent(Position, getRandomPosition())\n          .addComponent(Renderable)\n      }\n\n      // Run!\n      function run() {\n        // Compute delta and elapsed time\n        var time = performance.now();\n        var delta = time - lastTime;\n\n        // Run all the systems\n        world.execute(delta, time);\n\n        lastTime = time;\n        requestAnimationFrame(run);\n      }\n\n      var lastTime = performance.now();\n      run();\n    </script>\n  </head>\n  <body>\n    <canvas width=\"500\" height=\"500\"></canvas>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Deferred Component Removal and Access in ECSY\nDESCRIPTION: This example shows how ECSY handles deferred component removal and how to access the removed component.  The system listens for entities with a removed `Box` component and accesses the component's data using `getRemovedComponent()` before the component is fully disposed. This is a key feature for systems reacting to component removal events.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass SystemFoo extends System {\n  execute() {\n    this.queries.boxes.removed.forEach(entity => {\n      let component = entity.getRemovedComponent(Box);\n      console.log('Component removed:', component, 'on entity: ', entity.id);\n    });\n\n    this.queries.boxes.results.forEach(entity => {\n      console.log('Iterating on entity: ', entity.id);\n    });\n  }\n}\n\nSystemFoo.queries = {\n  boxes: {\n    components: [ Box ],\n    removed: true // To listen for removed entities from the query\n  }\n}\n\nlet entity = world.createEntity().addComponent(Box);\nworld.execute(); // Execute frame 1\nentity.removeComponent(Box);\nworld.execute(); // Execute frame 2\n```\n\n----------------------------------------\n\nTITLE: Reactive Query System for Component Removal (JavaScript)\nDESCRIPTION: This code implements two systems to manage wolf entities that can be awake or sleeping.  The `SystemAwakeWolves` system randomly removes the `Sleeping` component from wolves, and the `SystemWolfReactions` system reacts to the removal of the `Sleeping` component, accessing the removed component's data. Demonstrates reactive queries and component removal events.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// Component to identify a wolf\nclass Wolf extends TagComponent {}\n\n// Component to store how long the wolf is sleeping\nclass Sleeping extends Component {}\n\nSleeping.schema = {\n  startSleepingTime: { type: Types.Number }\n}\n\n// This system will wake up sleeping wolves randomly\nclass SystemAwakeWolves extends System {\n  execute() {\n    this.queries.sleepingWolves.results.forEach(wolf => {\n      if (Math.random() > 0.5) {\n        wolf.removeComponent(Sleeping);\n      }\n    });\n  }\n}\nSystemAwakeWolves.queries = {\n  sleepingWolves: { components: [ Wolf, Sleeping ]}\n};\n\n// This system will implements wolf reactions after just being awake\nclass SystemWolfReactions extends System {\n  execute(delta, elapsedTime) {\n    this.queries.sleepingWolves.removed.forEach(wolf => {\n      // We have to check if the \"Sleeping\" component has been removed\n      // because if the \"Wolf\" component is removed instead, it will trigger\n      // also ths \"removed\" event as is not fulfilling the query anymore either\n      if (wolf.hasRemovedComponent(Sleeping)) {\n        let sleeping = wolf.getRemovedComponent(Sleeping);\n        let duration = elapsedTime - sleeping.startSleepingTime;\n        // Do whatever with the `duration` value\n        // eg: Make the wolf move slower if its was sleeping for so long\n      }\n    });\n  }\n}\nSystemWolfReactions.queries = {\n  sleepingWolves: {\n    components: [ Wolf, Sleeping ],\n    listen: {\n      removed: true\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Query for Uninitialized Entities (JavaScript)\nDESCRIPTION: This snippet utilizes the `Not` operator to find entities with a specific component (`Player`) but missing another component (`Name`). This allows systems to target and initialize these entities. Once `Name` is added, the entity will no longer be in the query.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystemTest.queries = {\n  playerUninitialized: {\n    components: [ Player, Not(Name) ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Added and Removed Entities (JavaScript)\nDESCRIPTION: This code shows how to access the `added` and `removed` lists in a reactive query within the system's `execute` method. It iterates through these lists to process entities that have been added or removed from the query since the last call to `execute`.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SystemTest extends System {\n  execute() {\n    var boxesQuery = this.queries.boxes;\n\n    // All the entities with `Box` and `Transform` components\n    boxesQuery.results.forEach(entity => {});\n\n    // All the entities added to the query since the last call\n    boxesQuery.added.forEach(entity => {});\n\n    // All the entities removed from the query since the last call\n    boxesQuery.removed.forEach(entity => {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Query - Specific Component Changed (JavaScript)\nDESCRIPTION: This code demonstrates how to detect changes to specific components in a query by providing an array of components to the `changed` property in the `listen` attribute. This example will only trigger if the `Box` component changes. Requires components `Box` and `Transform` to be part of the query.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystemTest.queries = {\n  boxes: {\n    components: [ Box, Transform ],\n    listen: {\n      added: true,\n      removed: true,\n      changed: [ Box ]  // Detect that the Box component has changed\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Types in ECSY\nDESCRIPTION: This snippet shows how to create a custom type in ECSY using `createType`.  It defines a `Vector2` class and then creates a custom type `Vector2Type` for it, specifying the `copy` and `clone` functions. This example relies on `createType`, `copyCopyable`, and `cloneClonable` from the `ecsy` library.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy(source) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone() {\n    return new Vector2().set(this.x, this.y);\n  }\n}\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});\n```\n\n----------------------------------------\n\nTITLE: Including ECSY using ES6 Modules in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include ECSY in your project using ES6 modules. This approach allows you to import specific ECSY classes and functions into your JavaScript code using the `import` statement.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Using ES6 modules -->\n<script src=\"https://ecsyjs.github.io/ecsy/build/ecsy.module.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Custom Component Pooling with ObjectPool in ECSY\nDESCRIPTION: This code demonstrates how to implement custom component pooling in ECSY using the `ObjectPool` class. It shows how to register a component with a pre-configured object pool, either using the built-in `ObjectPool` or by creating a custom pool implementation that overrides the `acquire`, `release`, and `expand` methods.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ObjectPool } from 'ecsy';\n\n// Register MyComponent with an ObjectPool that has 1000 initial instances of MyComponent\nworld.registerComponent(MyComponent, new ObjectPool(MyComponent, 1000));\n\n// Use your own custom ObjectPool implementation\nclass MyObjectPool extends ObjectPool {\n  acquire() {\n    // Your implementation\n  }\n\n  release(item) {\n    // Your implementation\n  }\n\n  expand(count) {\n    // Your implementation\n  }\n}\n\nworld.registerComponent(MyComponent, new MyObjectPool(MyComponent, 1000));\n```\n\n----------------------------------------\n\nTITLE: Including ECSY using UMD in HTML\nDESCRIPTION: This HTML snippet shows how to include ECSY in your project using a UMD (Universal Module Definition) build. This will expose a global `ECSY` namespace, making the framework's classes and functions available directly in the browser's scope.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Using UMD (It will expose a global ECSY namespace) -->\n<script src=\"https://ecsyjs.github.io/ecsy/build/ecsy.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Value Component\nDESCRIPTION: This snippet shows how to create a component with a single value and recommends to name the attribute 'value'.\nIt sets the Acceleration component to have a single attribute called 'value' of type number.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Acceleration extends Component {}\n\nAcceleration.schema = {\n  value: { type: Types.Number, default: 0.1 }\n};\n\nlet acceleration = entity.getComponent(Acceleration).value;\n```\n\n----------------------------------------\n\nTITLE: System Priority Registration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to control the order of system execution using the `priority` attribute when registering a system.  Systems are sorted in ascending order of priority, with lower numbers executing earlier. By default, systems have a priority of 0.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nworld\n  .registerSystem(SystemA)\n  .registerSystem(SystemB, { priority: 2 })\n  .registerSystem(SystemC, { priority: -1 })\n  .registerSystem(SystemD)\n  .registerSystem(SystemE);\n```\n\n----------------------------------------\n\nTITLE: Initializing ECS World in JavaScript\nDESCRIPTION: This snippet shows how to create a new ECS `World` instance in ECSY. A world is a container for entities, components, and systems. Most applications only have one world, but multiple worlds can be created, enabled, and disabled as needed. There are no dependencies for this snippet.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nworld = new World();\n```\n\n----------------------------------------\n\nTITLE: Deferred Component and Entity Removal in ECSY (JavaScript)\nDESCRIPTION: This code demonstrates how to remove a component and an entity using the default deferred removal mechanism in ECSY. The `removeComponent` and `remove` methods are called without the immediate flag.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Deferred remove component\nentity.removeComponent(Player);\n\n// Deferred remove entity\nentity.remove();\n```\n\n----------------------------------------\n\nTITLE: Removing Components from an Entity in ECSY\nDESCRIPTION: This snippet demonstrates how to remove a component from an entity in ECSY using the `removeComponent()` method. It also shows how to immediately remove the component by using the `forceImmediate` parameter.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// The component will get removed immediately\nentity.removeComponent(ComponentA, true);\n```\n\n----------------------------------------\n\nTITLE: Registering Components with ECS World in JavaScript\nDESCRIPTION: This snippet demonstrates how to register components with an ECS `World` instance in ECSY. Registering components makes them available for use within the world. This snippet requires `Acceleration` and `Position` component definitions to be defined.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Getting-started.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nworld\n  .registerComponent(Acceleration)\n  .registerComponent(Position);\n```\n\n----------------------------------------\n\nTITLE: Using System State Components in an ECSY System\nDESCRIPTION: This snippet demonstrates how to use System State Components (SSCs) within an ECSY system to manage resources associated with entities. The `GeometrySystem` uses SSCs to store mesh resources created based on the `Geometry` component.  It includes logic to add the SSC when `Geometry` is added, remove the SSC (and free the mesh resources) when `Geometry` is removed, and utilize the SSC during normal system execution. The `Not` query is used to detect added and removed components.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass GeometrySystem extends System {\n  init() {\n    return {\n      queries: {\n        added: { components: [Geometry, Not(StateComponentGeometry)] },\n        remove: { components: [Not(Geometry), StateComponentGeometry] },\n        normal: { components: [Geometry, StateComponentGeometry] },\n      }\n    };\n  },\n  execute() {\n    added.forEach(entity => {\n      var mesh = new Mesh(entity.getComponent(Geometry).primitive);\n      entity.addComponent(StateComponentGeometry, {mesh: mesh});\n    });\n\n    remove.forEach(entity => {\n      var component = entity.getComponent(StateComponentGeometry);\n      // free resources for the mesh\n      component.mesh.dispose();\n\n      entity.removeComponent(StateComponentGeometry);\n    });\n\n    normal.forEach(entity => {\n      // use entity and its components (Geometry and StateComponentGeometry) if needed\n    });\n  }\n}\n\nMySystem.queries = {\n  added: { components: [Geometry, Not(StateComponentGeometry)] },\n  remove: { components: [Not(Geometry), StateComponentGeometry] },\n  normal: { components: [Geometry, StateComponentGeometry] },\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Query Results in Reverse (JavaScript)\nDESCRIPTION: This snippet demonstrates iterating through query results in reverse order when modifying entities within the loop (e.g., removing entities or components).  Iterating in reverse avoids issues caused by modifying the array's length during iteration. Removing entities or components during forward iteration can lead to skipping elements.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet results = this.queries.queryA.results;\nfor (var i = 0; i < results.length; i++) {\n  let entity = results[i];\n  if (i === 1) {\n    // This will cause the results list to be mutated, results.length will be decremented and you won't reach the end elements.\n    entity.remove();\n  }\n}\n\n// The correct way to do it\nlet results = this.queries.queryA.results;\nfor (var i = results.length - 1; i >= 0; i--) {\n  let entity = results[i];\n  if (i === 1) {\n    // This will modify the length of the results but as we are moving backward it won't affect us\n    entity.remove();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Tag Component in ECSY\nDESCRIPTION: This snippet demonstrates how to define a tag component in ECSY by extending `TagComponent`. Tag components are used as markers and do not store data. It requires the `TagComponent` from the `ecsy` library.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Enemy extends TagComponent {}\n\nentity.addComponent(Enemy);\n```\n\n----------------------------------------\n\nTITLE: Extending Entity Class in ECSY (JavaScript)\nDESCRIPTION: This code demonstrates how to extend the default `Entity` class in ECSY to add custom methods.  It imports `_Entity` and `World`, extends `_Entity` to create a `MyEntity` class with a `customMethod`, and then uses the extended entity class in a new `World` instance.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _Entity, World } from \"entity\";\n\nclass MyEntity extends _Entity {\n  customMethod() {}\n}\n\n// Use the new entity class\nlet world = new World({ entityClass: MyEntity });\nlet entity = world.createEntity();\n\n// Call our custom method on our entity class\nentity.customMethod();\n```\n\n----------------------------------------\n\nTITLE: Disable Component Pooling in ECSY\nDESCRIPTION: This snippet shows how to disable component pooling in ECSY when registering a component. It involves extending the `Component` class and then passing `false` as the second argument to the `registerComponent` method of the `world` object. This is useful when components cannot be properly copied or cloned.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass AudioListener extends Component {\n  constructor(props) {\n    super(false);\n    this.listener = props.listener;\n  }\n\n  clone() {\n    throw new Error(\"unimplemented\");\n  }\n\n  copy() {\n    throw new Error(\"unimplemented\");\n  }\n\n  reset() {\n    throw new Error(\"unimplemented\");\n  }\n}\n\n// Pass false to registerComponent to disable component pooling\nworld.registerComponent(AudioListener, false);\n```\n\n----------------------------------------\n\nTITLE: Immediate Component and Entity Removal in ECSY (JavaScript)\nDESCRIPTION: This code demonstrates how to remove a component and an entity immediately in ECSY by passing `true` as an additional parameter to the `removeComponent` and `remove` methods. This is generally not recommended due to potential side effects.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove component immediately\nentity.removeComponent(Player, true);\n\n// Remove entity immediately\nentity.remove(true);\n```\n\n----------------------------------------\n\nTITLE: Unregistering a System in ECSY (JavaScript)\nDESCRIPTION: This code shows how to unregister a system from the ECSY world. Unregistering a system removes it from the execution queue and the world. If you want to only temporarily disable its execution, you should use `System.stop()/play()` instead.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nworld.unregisterSystem(SystemClass);\n```\n\n----------------------------------------\n\nTITLE: Custom Component with Overridden Methods in ECSY\nDESCRIPTION: This code demonstrates how to create a custom component in ECSY by extending the `Component` class and overriding methods like `constructor`, `copy`, and `reset`. It shows how to set initial values, efficiently copy component properties, and reset the component's state for pooling.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass ColorArray extends Component {\n  /**\n   * The constructor should set the initial values for a component.\n   * Override this method to set your own initial values.\n   **/\n  constructor(props) {\n    // Pass false to disable using the schema for default values.\n    super(false);\n\n    // Set your own default values instead\n    this.value = [];\n  }\n\n  /**\n   * The copy method is used when copying properties from one component to another.\n   * Copy is used when copying/cloning entities/components, it is not used in component pooling.\n   * You can re-implement this method to increase performance or deal with complex data structures.\n   **/\n  copy(src) {\n    this.value.length = src.value.length;\n\n    for (let i = 0; i < src.value.length; i++) {\n      const srcColor = src.value[i];\n      const destColor = this.value[i];\n\n      destColor.r = srcColor.r;\n      destColor.g = srcColor.g;\n      destColor.b = srcColor.b;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clone returns a new, identical instance of a component.\n   * We don't need to override clone in this case. However, if you needed to pass an argument\n   * to the constructor, you could override clone to do so.\n   *\n   * clone() {\n   *  return new this.constructor().copy(this);\n   * }\n   **/\n\n  /**\n   * The reset method is used to reset the component back to it's initial state.\n   * It's used in component pools when a component is disposed. It can be called fairly often so it is a common method\n   * to optimize when you are adding/removing a lot of this type of component. You'll want to avoid memory allocation\n   * as much as possible in the reset method. Try to reuse existing data structures whenever possible.\n   **/\n  reset() {\n    this.value.forEach(color => {\n      color.r = 0;\n      color.g = 0;\n      color.b = 0;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining System State Components (SSC) in ECSY\nDESCRIPTION: This example showcases how to define System State Components (SSCs) in ECSY by extending the `SystemStateComponent` class. SSCs are used by systems to hold internal resources for an entity and are not automatically removed when the entity is deleted. The code defines a `StateComponentGeometry` to store mesh resources related to a `Geometry` component.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass StateComponentGeometry extends SystemStateComponent {}\n\nStateComponentGeometry.schema = {\n  meshReference: { type: Types.Ref }\n};\n\nclass Geometry extends Component {}\n\nGeometry.schema = {\n  primitive: { type: Types.String, default: \"box\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing World with Entity Pool Size\nDESCRIPTION: This snippet shows how to initialize a `World` with a specified `entityPoolSize`.  This pre-allocates memory for entities, potentially avoiding garbage collection during runtime if the number of entities stays within the pool size. The snippet creates a `World` instance with an initial pool size of 10000.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// We know we will initially have around 10k enemies in our game so let's allocate 10k enemies initially and expand the pool as needed.\nworld = new World({ entityPoolSize: 10000 });\n```\n\n----------------------------------------\n\nTITLE: Adding Component for Component Pooling\nDESCRIPTION: This snippet illustrates how to add a component to an entity for component pooling optimization.  It leverages component pooling to improve the performance of ECSY applications. It relies on a ComponentA object existing.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nentity.addComponent(ComponentA)\n```\n\n----------------------------------------\n\nTITLE: Processing Changed Entities (JavaScript)\nDESCRIPTION: This code demonstrates how to iterate over the `changed` list of entities in a reactive query. This list contains entities where any component in the query definition has been modified since the last `execute` call. Requires the query to be configured to `listen` for `changed` events.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SystemTest extends System {\n  execute() {\n    let boxesQuery = this.queries.boxes;\n\n    // All the entities with `Box` component\n    boxesQuery.results.forEach(entity => {});\n\n    // All the entities added to the query since the last call\n    boxesQuery.added.forEach(entity => {});\n\n    // All the entities removed from the query since the last call\n    boxesQuery.removed.forEach(entity => {});\n\n    // All the entities which Box or Transform components have changed since the last call\n    boxesQuery.changed.forEach(entity => {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Registration Order (JavaScript)\nDESCRIPTION: This example demonstrates how systems are executed in the order they are registered, unless a priority is specified. The `registerSystem` method is chained to register multiple systems.\nSOURCE: https://github.com/ecsyjs/ecsy/blob/dev/site/docs/manual/Architecture.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nworld\n  .registerSystem(SystemA)\n  .registerSystem(SystemB)\n  .registerSystem(SystemC);\n```"
  }
]