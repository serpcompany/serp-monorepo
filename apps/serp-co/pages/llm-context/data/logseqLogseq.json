[
  {
    "owner": "logseq",
    "repo": "logseq",
    "content": "TITLE: Creating a Logseq Query Table for Pages (Version 2)\nDESCRIPTION: Demonstrates creating a Logseq table from a query that finds pages with the property `table-example` set to `\"true\"`. It uses the query `{{query (page-property \"table-example\" \"true\")}}` and specifies `logseq.table.version:: 2`. Example page links (`[[Page 1]]`, etc.) are provided for context.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n\t- #### Query table for pages\n\t\t- {{query (page-property \"table-example\" \"true\")}} \n\t\t  logseq.table.version:: 2\n\t\t- [[Page 1]]\n\t\t- [[Page 2]]\n\t\t- [[Page 3]]\n```\n\n----------------------------------------\n\nTITLE: Structuring Notes with Blocks and Properties - Logseq Markdown\nDESCRIPTION: Illustrates defining hierarchical notes using blocks (indented lists) and associating each block with unique property metadata, specifically an id. These blocks are intended to be used within a Logseq environment for creating structured, easily referenceable notes. Markdown is extended with Logseq conventions for block properties; inputs are the note content and unique identifiers, outputs are hierarchical note structures within Logseq. Main dependencies: Logseq or a compatible Markdown parser.\nSOURCE: https://github.com/logseq/logseq/blob/master/src/resources/tutorials/dummy-notes-en.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: How to take dummy notes?\n---\n\n- Hello, I'm a block!\n:PROPERTIES:\n:id: 5f713e91-8a3c-4b04-a33a-c39482428e2d\n:END:\n    - I'm a child block!\n    - I'm another child block!\n- Hey, I'm another block!\n:PROPERTIES:\n:id: 5f713ea8-8cba-403d-ac00-9964b1ec7190\n:END:\n```\n\n----------------------------------------\n\nTITLE: Defining a Logseq Page Property\nDESCRIPTION: This line defines a page property named 'table-example' and assigns it the boolean value 'true'. In Logseq, properties are key-value pairs defined using the 'key:: value' syntax. They are used to add metadata to pages or blocks.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/Page 3.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntable-example:: true\n```\n\n----------------------------------------\n\nTITLE: Defining Logseq Table Properties (Markdown)\nDESCRIPTION: Defines various properties available for customizing Logseq tables using a Markdown table format within Logseq. Properties like `logseq.table.version`, `logseq.table.hover`, `logseq.table.compact`, `logseq.table.headers`, `logseq.table.borders`, `logseq.table.stripes`, `logseq.table.max-width`, and `logseq.color` control the appearance and behavior of tables.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- ### Props\n\t- logseq.table.version:: 2\n\t  logseq.table.hover:: row\n\t  logseq.table.stripes:: true\n\t  logseq.table.borders:: false\n\t  | Prop Name | Description | Values |\n\t  | --- | --- | --- |\n\t  | `logseq.table.version` | The version of the table | 1, 2 |\n\t  | `logseq.table.hover` | The hover effect of the table | cell (default), row, col, both, none |\n\t  | `logseq.table.compact` | Whether to show a compact version of the data | false (default), true |\n\t  | `logseq.table.headers` | The casing that should be applied to the header cols | none (default), uppercase, capitalize, capitalize-first, lowercase |\n\t  | `logseq.table.borders` | Whether or not the table should have borders between all cells and rows | true (default), false |\n\t  | `logseq.table.stripes` | Whether or not the table should have alternately colored table rows | false (default), true |\n\t  | `logseq.table.max-width` | The maximum width (in rems) that should be applied to each column | <any number> (default 30) |\n\t  | `logseq.color` | The color accent of the table | red, orange, yellow, green, blue, purple |\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Logseq Markdown Table (Version 2)\nDESCRIPTION: Shows a more complex version 2 Logseq table using Markdown syntax. It includes the `logseq.table.version:: 2` property and demonstrates a table with multiple columns and rows containing both English and Chinese text. The `collapsed:: true` property indicates the block is initially collapsed.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- #### Longer more complicated markdown table, with various widths and input types\n  collapsed:: true\n\t- logseq.table.version:: 2\n\t  | Length | Text | EN | ZH |\n\t  | --- | --- | --- | --- |\n\t  | 70 | Logseq is a new note-taking app that has been making waves in the productivity community. | x |  |\n\t  | 138 | With its unique approach to linking and organizing information, Logseq allows users to create a highly interconnected and personalized knowledge base. | x |  |\n\t  | 194 | Unlike traditional note-taking apps, Logseq encourages users to embrace the power of plain text and markdown formatting, enabling them to easily manipulate and query their notes. | x |  |\n\t  | 246 | From students to researchers, Logseq's flexible and intuitive interface makes it an ideal tool for anyone looking to optimize their note-taking and knowledge management workflow. | x |  |\n\t  | 312 | Whether you're looking to organize your thoughts, collaborate with others, or simply streamline your note-taking process, Logseq offers a revolutionary approach that is sure to revolutionize the way you work. | x |  |\n\t  | 35 | Logseq 是一款在生产力社群中备受瞩目的新型笔记应用。|  | x |\n\t  | 59 | Logseq 以其独特的链接和组织信息方式，使用户能够创建高度互联且个性化的知识库。 |  | x | 86 | 不同于传统笔记应用，Logseq 鼓励用户采用纯文本和 Markdown 格式，使其能够轻松地操作和查询笔记。 |  | x |\n\t  | 123 | 从学生到研究人员，Logseq 灵活直观的界面使其成为任何想要优化笔记和知识管理工作流程的人的理想工具。|  | x |\n\t  | 152 | 无论您是想整理自己的思路、与他人合作，还是简化笔记流程，Logseq 提供的革命性方法肯定会改变您的工作方式。|  | x |\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Logseq Markdown Table (Version 1)\nDESCRIPTION: Demonstrates the creation of a basic version 1 Logseq table using standard Markdown syntax. It includes the `logseq.table.version:: 1` property to specify the table version. The `collapsed:: true` property indicates the block is initially collapsed in the Logseq UI.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- #### Simplest possible markdown table\n  collapsed:: true\n\t- logseq.table.version:: 1\n\t  | Fruit | Color |\n\t  | Apples | Red |\n\t  | Bananas | Yellow |\n```\n\n----------------------------------------\n\nTITLE: Providing Quick User Tips - Org-mode/Markdown\nDESCRIPTION: This snippet introduces a tips block using Org-mode/Markdown markup (#BEGIN_TIP / #+END_TIP) to communicate helpful commands and shortcuts for using Logseq. It lists actions like editing blocks, creating new blocks or lines, and accessing commands via quick keys. No external dependencies are required; the block is interpreted natively in Logseq and recognizable by any Markdown/Org-mode parser. Inputs are static tip text, and outputs are the tips rendered in a styled info block; modification to the list can adjust displayed help.\nSOURCE: https://github.com/logseq/logseq/blob/master/src/resources/tutorials/tutorial-en.md#_snippet_0\n\nLANGUAGE: Org-mode\nCODE:\n```\n#+BEGIN_TIP\nClick to edit any block.\nType `Enter` to create a new block.\nType `Shift+Enter` to create a new line.\nType `/` to show all the commands.\n#+END_TIP\n```\n\n----------------------------------------\n\nTITLE: Invoking External Plugins with Logseq API - TypeScript\nDESCRIPTION: These snippets demonstrate how plugins can call each other's functions or commands using the `logseq.App.invokeExternalPlugin` API. The function expects the plugin function's full key as a string parameter. The first sample references the 'logseq-journals-calendar' plugin, and the second references a command in the 'logseq-plugin-vim-shortcuts' plugin. The API returns a Promise and requires that the target plugin exposes the specified model or command and that the caller updates the SDK as recommended. Inputs: full model/command key (string). Output: depends on the invoked plugin logic.\nSOURCE: https://github.com/logseq/logseq/blob/master/libs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined at https://github.com/xyhp915/logseq-journals-calendar/blob/main/src/main.js#L74\nawait logseq.App.invokeExternalPlugin('logseq-journals-calendar.models.goToToday')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined at https://github.com/vipzhicheng/logseq-plugin-vim-shortcuts/blob/bec05aeee8/src/keybindings/down.ts#L20\nawait logseq.App.invokeExternalPlugin('logseq-plugin-vim-shortcuts.commands.vim-shortcut-down-0')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Basics and Program Structure - Python\nDESCRIPTION: Showcases core Python features including comments, docstrings, imports, constants, staticmethod, class definition and instantiation, error handling, loops, list and generator comprehensions, lambda functions, file I/O, assertion, and decorators. Extensive throughout-commenting clarifies intent. Requires Python standard library; no external dependencies. Inputs and outputs are demonstrated inline (e.g., arithmetic, class methods, exception messages), designed for learning idiomatic Python practices. No specific theming dependencies, illustrative as a primer or testbed.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/contents.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This is a single-line comment\n\"\"\"\nThis is a\nmulti-line comment (docstring)\n\"\"\"\n\n# Import statement\nimport math\n\n# Constant\nCONSTANT = 3.14159\n\n# Function definition, decorators and function call\n@staticmethod\ndef add_numbers(x, y):\n    \"\"\"This function adds two numbers\"\"\"\n    return x + y\n\nresult = add_numbers(5, 7)\n\n# Built-in functions\nprint(f\"Sum is: {result}\")\n\n# Class definition and object creation\nclass MyClass:\n    # Class variable\n    class_var = \"I'm a class variable\"\n\n    def __init__(self, instance_var):\n        # Instance variable\n        self.instance_var = instance_var\n\n    def method(self):\n        return self.instance_var\n\n# Creating object of the class\nobj = MyClass(\"I'm an instance variable\")\nprint(obj.method())\n\n# Control flow - if, elif, else\nnum = 10\nif num > 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n\n# For loop and range function\nfor i in range(5):\n    print(i)\n\n# List comprehension\nsquares = [x**2 for x in range(10)]\n\n# Generator expression\ngen = (x**2 for x in range(10))\n\n# While loop\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n\n# Exception handling\ntry:\n    # Division by zero\n    x = 1 / 0\nexcept ZeroDivisionError as e:\n    print(\"Handling run-time error:\", e)\n\n# Lambda function\ndouble = lambda x: x * 2\nprint(double(5))\n\n# File I/O\nwith open('test.txt', 'r') as file:\n    content = file.read()\n\n# Assert\nassert num > 0, \"Number is not positive\"\n\n```\n\n----------------------------------------\n\nTITLE: Launching Logseq Desktop Development App\nDESCRIPTION: Starts the `shadow-cljs` watcher to compile ClojureScript for both the Electron main process (`:electron`) and the renderer (`:app`). After compilation completes for both targets, it runs `yarn dev-electron-app` in a separate shell to launch the Logseq desktop application in development mode. Requires closing any existing Logseq desktop instances beforehand.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn watch\n# Wait until watch reports `Build Completed.` for `:electron` and `:app`.\n# Then, run the following command in a different shell.\n# If you have opened desktop logseq, you should close it. Otherwise, this command will fail.\nyarn dev-electron-app\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Yarn and shadow-cljs (Bash)\nDESCRIPTION: Executes all unit tests using the shadow-cljs test-runner by invoking 'yarn test'. This assumes test files follow the '-test' namespace naming convention (e.g., 'foo-test'). All required dependencies and shadow-cljs configuration must be present.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Defining and Assigning CSS Color Variables - CSS\nDESCRIPTION: Defines a global CSS custom property --lx-blue-1 with a specific hex color value on the :root element. This enables consistent theme color referencing throughout the CSS, and supports dynamic theming in component libraries. There are no external dependencies, and it can be used wherever CSS custom properties are supported.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/contents.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --lx-blue-1: #123456;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Yarn - Bash\nDESCRIPTION: Demonstrates how to execute all project tests using the 'yarn test' command in bash. This runs the nbb-logseq test suite, integrating both frontend and Electron/command-line checks. No parameters are needed; outputs are test results printed in the console.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/common/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Creating a Logseq Query Table for Blocks (Version 2)\nDESCRIPTION: Illustrates how to generate a Logseq table dynamically using a query that finds blocks tagged with `#table-example/block`. It uses `logseq.table.version:: 2`, sets `query-table:: true`, specifies properties to display (`query-properties:: [:block]`), disables borders (`logseq.table.borders:: false`), and includes the Logseq query `{{query #table-example/block}}`. Example data blocks are provided for context.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n\t- #### Query table for blocks\n\t\t- logseq.table.version:: 2\n\t\t  query-table:: true\n\t\t  query-properties:: [:block]\n\t\t  logseq.table.borders:: false\n\t\t  {{query #table-example/block}}\n\t\t-\n\t\t- #### data\n\t\t\t- Block 1 #table-example/block\n\t\t\t  table-example:: true\n\t\t\t- Block 2 #table-example/block\n\t\t\t  table-example:: true\n\t\t\t- Block 3 #table-example/block\n\t\t\t  table-example:: true\n```\n\n----------------------------------------\n\nTITLE: Installing Logseq Desktop App Dependencies\nDESCRIPTION: Installs the main project dependencies using `yarn install` and then navigates into the `static` directory (which contains Electron-specific configuration) to install its dependencies as well. This prepares the environment for desktop app development.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\ncd static\nyarn install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Creating a Logseq Query Table for Mixed Blocks/Pages (Version 2)\nDESCRIPTION: Shows how to create a Logseq table using a query that finds both blocks and pages having the property `table-example` set to `true`. It uses the query `{{query (property \"table-example\" true)}}`, sets `query-table:: true`, and specifies `logseq.table.version:: 2`.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n\t- #### Query table for mixed pages and blocks\n\t\t- {{query (property \"table-example\" true)}}\n\t\t  query-table:: true\n\t\t  logseq.table.version:: 2\n```\n\n----------------------------------------\n\nTITLE: Building Logseq Desktop Production Release\nDESCRIPTION: Executes the command to build distributable binaries or installers for the Logseq desktop application using Electron build tools. The final output files suitable for distribution will be located in the `static/out/` directory.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn release-electron\n```\n\n----------------------------------------\n\nTITLE: Installing Logseq SDK with Yarn - Shell\nDESCRIPTION: This shell command installs the @logseq/libs package using yarn. The command must be run from the root of your JavaScript/TypeScript project and requires yarn to be installed. It adds the Logseq SDK as a dependency, making its libraries available for import within your project. No additional parameters are required, and the main output is an updated package.json including @logseq/libs.\nSOURCE: https://github.com/logseq/logseq/blob/master/libs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @logseq/libs\n```\n\n----------------------------------------\n\nTITLE: Updating Logseq Desktop App Dependencies\nDESCRIPTION: Fetches the latest changes from the Git repository using `git pull`. Then, it navigates into the `static` directory, runs `yarn install` to update dependencies based on potentially changed `package.json`, and returns to the project root. This step is optional and typically performed if `resources/package.json` has been modified since the last dependency installation.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# pull new changes\ngit pull\n\ncd static && yarn install && cd ..\n```\n\n----------------------------------------\n\nTITLE: Running Tests from REPL (ClojureScript)\nDESCRIPTION: Runs all tests for the currently loaded test namespace interactively within the ClojureScript REPL. Requires that the REPL session is started and the test namespace is loaded. Outputs test results live in the REPL console.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_13\n\nLANGUAGE: clojure\nCODE:\n```\n(cljs.test/run-tests)\n```\n\n----------------------------------------\n\nTITLE: Linting Clojure Code with clj-kondo (Shell)\nDESCRIPTION: Performs linting on all Clojure source code in the 'src' directory using clj-kondo. The '--parallel' flag enables faster linting by leveraging multiple cores, and '--cache false' disables caching to ensure all code is freshly linted. clj-kondo must be installed and configured; see the linked documentation for custom linter settings.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nclojure -M:clj-kondo --parallel --lint src --cache false\n```\n\n----------------------------------------\n\nTITLE: Overriding CSS Color Variable from Javascript - Clojurescript\nDESCRIPTION: Dynamically updates the CSS custom property --lx-blue-1 on the document root using Clojurescript interop with the JavaScript DOM API. This approach allows for live theme adjustments without reloading stylesheets, useful within interactive web applications. Dependency: Clojurescript with JS interop; expects the CSS variable to exist. The key input is the color value, and output is the modified style property.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/contents.md#_snippet_1\n\nLANGUAGE: clojurescript\nCODE:\n```\n(js/document.style.setProperty \"--lx-blue-1\" \"#abcdef\")\n\n```\n\n----------------------------------------\n\nTITLE: Running ClojureScript Tests - Bash\nDESCRIPTION: Displays the command for running the test suite under ClojureScript using 'clojure -M:test'. This is essential for ensuring cross-environment compatibility, especially for browser-targeted code. Outputs test results directly to the console; requires Leiningen or Clojure CLI installed.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/common/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nclojure -M:test\n```\n\n----------------------------------------\n\nTITLE: Running End to End Tests with Yarn and Playwright (Shell)\nDESCRIPTION: Runs Logseq's end-to-end test suite first by starting the application with 'yarn electron-watch', then executing tests with 'yarn e2e-test' or 'npx playwright test' from another shell. This verifies full stack and UI interactions. yarn, Playwright, and all dependencies must be installed.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn electron-watch\n# in another shell\nyarn e2e-test # or npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Publishing App - Shell\nDESCRIPTION: These snippets provide step-by-step instructions to set up, build, and run the Logseq publishing app using Babashka and supporting tools. They rely on node/yarn for frontend dependencies and Babashka tasks to drive the publishing workflow. Options exist for building in release or development mode, as well as for starting a local HTTP server to serve the generated site. Key parameters include source graph directory and publish output directory. Proper environment configuration is required for full functionality.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n# One time setup\\n$ cd scripts && yarn install && cd -\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Build a release publishing app\\n$ bb dev:publishing /path/to/graph-dir tmp/publish\n```\n\nLANGUAGE: sh\nCODE:\n```\n# OR build a dev publishing app that watches frontend changes\\n$ bb dev:publishing /path/to/graph-dir tmp/publish --dev\n```\n\nLANGUAGE: sh\nCODE:\n```\n# View the publishing app in a browser\\n$ python3 -m http.server 8080 -d tmp/publish &; open http://localhost:8080\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Rebuild the publishing backend for dev/release.\\n# Handy when making backend changes in deps/publishing or\\n# to test a different graph\\n$ bb dev:publishing-backend /path/graph-dir tmp/publish\n```\n\n----------------------------------------\n\nTITLE: Linting Namespaces for Documentation (Shell)\nDESCRIPTION: Checks that all Clojure namespaces have docstrings using a Babashka task, enforcing documentation standards. Skips namespaces marked with the ^:no-doc metadata flag. Requires Babashka to be set up; see bb.edn task definition.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbb lint:ns-docstrings\n```\n\n----------------------------------------\n\nTITLE: Auto-running ClojureScript Tests While Developing - Bash\nDESCRIPTION: Illustrates the command 'clojure -M:test -w src' to automatically rerun tests as source files change. This is helpful during active development to get immediate feedback. The '-w src' option enables file watching in the 'src' directory, and outputs test results to the console as they are triggered.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/common/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nclojure -M:test -w src\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Clojure Syntax, Data Structures, and Macros - Clojure\nDESCRIPTION: Features examples of numbers, strings, characters, booleans, collections (lists, vectors, maps, sets), function and macro definitions, exception handling, anonymous functions, and looping in Clojure. Demonstrates immutability, functional programming and Clojure's macro system for advanced control structures. No external dependencies required. Inputs are literals and expressions; outputs are printed results and returned values. Serves as a reference of basic Clojure constructs relevant for Scheme-like DSLs or backend logic.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/contents.md#_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n;; This is a comment\n\n;; Numbers\n42\n2.71828\n\n;; Strings\n\"Hello, world!\"\n\n;; Characters\n\\a\n\n;; Booleans\ntrue\nfalse\n\n;; Lists\n'(1 2 3 4 5)\n\n;; Vectors\n[1 2 3 4 5]\n\n;; Maps\n{:name \"John Doe\" :age 30 :email \"john.doe@example.com\"}\n\n;; Sets\n#{1 2 3 4 5}\n\n;; Functions\n(defn add-numbers [x y]\n  \"This function adds two numbers.\"\n  (+ x y))\n\n(def result (add-numbers 5 7))\n(println \"Sum is: \" result)\n\n;; Anonymous function\n(#(+ %1 %2) 5 7)\n\n;; Conditionals\n(if (> result 0)\n  (println \"Positive number\")\n  (println \"Zero or negative number\"))\n\n;; Loops\n(loop [x 0]\n  (when (< x 5)\n    (println x)\n    (recur (+ x 1))))\n\n;; For\n(for [x (range 5)] (println x))\n\n;; Map over a list\n(map inc '(1 2 3))\n\n;; Exception handling\n(try\n  (/ 1 0)\n  (catch ArithmeticException e\n    (println \"Caught an exception: \" (.getMessage e))))\n\n;; Macros\n(defmacro unless [pred a b]\n  `(if (not ~pred) ~a ~b))\n\n(unless true\n  (println \"This will not print\")\n  (println \"This will print\"))\n\n;; Keywords\n:foo\n:bar/baz\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools with Winget and NVM for Windows (shell)\nDESCRIPTION: This set of Windows shell commands uses Winget (the Windows package manager), NVM for Windows, and NPM to install NVM, set up Node.js 18, globally install Yarn, and install Microsoft OpenJDK 17 and Visual Studio 2022 Community. These steps require administrator privileges and are run sequentially in PowerShell or Command Prompt. The result is a development environment with required Node.js, Java, and build tools for Logseq.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-windows.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwinget install --id CoreyButler.NVMforWindows\\nnvm install 18\\nnvm use 18\\nnpm install -g yarn\\nwinget install --id Microsoft.OpenJDK.17\\nwinget install --id Microsoft.VisualStudio.2022.Community\n```\n\n----------------------------------------\n\nTITLE: Running Focused Tests with Yarn Test - Bash\nDESCRIPTION: Shows how to run only specific tests marked with the ':focus' metadata using 'yarn test -i focus'. This is useful when developing or debugging targeted portions of the codebase. Input is implicit (focused tests), and output is standard console test results for those cases.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/common/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test -i focus\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Chocolatey and NVM for Windows (shell)\nDESCRIPTION: This shell script demonstrates using Chocolatey to install NVM, Visual Studio 2022 Community, Java runtime, and Clojure, as well as installing Node.js 18 via NVM and globally installing Yarn via NPM. These commands are intended to be run from an elevated PowerShell prompt on Windows and assume Chocolatey is installed. The result is the full set of build dependencies for Logseq using Chocolatey-based workflows.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-windows.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchoco install nvm\\nnvm install 18\\nnvm use 18\\nnpm install -g yarn\\nchoco install visualstudio2022community\\nchoco install javaruntime\\nchoco install clojure\n```\n\n----------------------------------------\n\nTITLE: Listing Yarn Test Options - Bash\nDESCRIPTION: Provides the command for listing all testing options available via 'yarn test -H'. This allows developers to discover additional flags or configuration choices when running tests. Outputs a help message to the console.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/common/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test -H\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods using RubyGems (Shell)\nDESCRIPTION: Installs the CocoaPods dependency manager using RubyGems with administrative privileges (`sudo`). This is a prerequisite for managing iOS project dependencies.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-mobile.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Running Nbb Tests with Yarn\nDESCRIPTION: Demonstrates how to execute Nbb tests for the library using Yarn commands via the `nbb-test-runner`. Includes commands to run all tests, display available options using the `-H` flag, and run specific tests tagged with `:focus` metadata using the `-i focus` flag.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/graph-parser/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\n$ yarn test\n# List available options\n$ yarn test -H\n# Run tests with :focus metadata flag\n$ yarn test -i focus\n```\n\n----------------------------------------\n\nTITLE: Running ClojureScript Tests via Clojure CLI\nDESCRIPTION: Executes the ClojureScript test suite using the Clojure CLI tool (`clojure`) with the `:test` alias, which invokes the `cljs-test-runner`. This command runs tests defined for the ClojureScript environment.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/graph-parser/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nclojure -M:test\n```\n\n----------------------------------------\n\nTITLE: Starting Logseq Browser Development Server\nDESCRIPTION: Installs project dependencies using Yarn and then starts the `shadow-cljs` development server in watch mode for browser development. This compiles ClojureScript code and serves the application, typically accessible at `http://localhost:3001`.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools - Shell\nDESCRIPTION: This snippet installs the required Xcode command line tools on a macOS system using the 'xcode-select' utility. Having these tools is a prerequisite for building and signing iOS applications in conjunction with fastlane. No input is required, and successful execution ensures the developer's environment is ready for further fastlane operations.\nSOURCE: https://github.com/logseq/logseq/blob/master/ios/App/fastlane/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Building Logseq Browser Production Release\nDESCRIPTION: Creates a production-ready build of the Logseq browser application using Yarn. The optimized and minified output files are placed in the `static/` directory.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Linting with Babashka Tasks (Shell)\nDESCRIPTION: Invokes all configured linters using a Babashka task for automated code quality checks. Requires Babashka to be installed; see the referenced installation guide to set up. This command ensures consistent linting across the project by running all defined linter tasks in one go.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbb dev:lint\n```\n\n----------------------------------------\n\nTITLE: Running the Storybook Development Server in Shell\nDESCRIPTION: This command executes the `watch:storybook` script, presumably defined in `package.json`, using Yarn from the current working directory. It starts the Storybook development server, which monitors component story files (including those compiled by the ClojureScript watcher) and serves the Storybook UI. This allows developers to interactively browse, view, and test UI components in isolation during development. Requires Yarn and a properly configured Storybook setup within the project.\nSOURCE: https://github.com/logseq/logseq/blob/master/packages/ui/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run watch:storybook\n```\n\n----------------------------------------\n\nTITLE: Detecting Unused Vars with Babashka Carve Task (Shell)\nDESCRIPTION: Runs the 'carve' linter via Babashka to detect unused variables in the codebase. Outputs a report of unused vars, aiding code cleanup and maintainability. Babashka and the carve task must be available for execution.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbb lint:carve\n```\n\n----------------------------------------\n\nTITLE: Adding a New shadcn-ui Component via CLI in Shell\nDESCRIPTION: This command utilizes the `shadcn-ui` CLI tool via `npx` to add a new UI component (specifically the 'button' component in this example) to the Logseq project. It's the recommended method for incorporating new pre-built components from the shadcn-ui library into the Logseq UI system. Requires Node.js and npx to be installed and accessible in the environment.\nSOURCE: https://github.com/logseq/logseq/blob/master/packages/ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx shadcn-ui@latest add button\n```\n\n----------------------------------------\n\nTITLE: Detecting Unused Vars Interactively with Babashka Carve Task (Shell)\nDESCRIPTION: Executes the unused var detection task in interactive mode, prompting the user to keep (ignore) or remove each found unused variable. This aids developers in making informed decisions when cleaning up code. Requires Babashka; arguments are provided as EDN for interactive mode.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbb lint:carve '{:interactive true}'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Logseq - Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video into a Logseq page using double curly braces and the keyword 'youtube' followed by the video URL. The feature is specific to Logseq Markdown/Org-mode syntax but requires no external dependencies. The key parameter is the YouTube URL; inputting a valid URL will render the embedded player within Logseq, while invalid URLs may result in an empty frame or error. Used mainly for in-situ video tutorials to enhance documentation.\nSOURCE: https://github.com/logseq/logseq/blob/master/src/resources/tutorials/tutorial-en.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{{youtube https://www.youtube.com/watch?v=BhHfF0P9A80&ab_channel=ShuOmi}}\n```\n\n----------------------------------------\n\nTITLE: Detecting Large Vars with Babashka Task (Shell)\nDESCRIPTION: Uses a configured Babashka task to report Clojure code variables that have excessive complexity or size, which can hinder maintainability. The task is defined in bb.edn under the specified configuration path. Babashka must be installed and configured accordingly.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbb lint:large-vars\n```\n\n----------------------------------------\n\nTITLE: Triggering iOS Beta Build with fastlane - Shell\nDESCRIPTION: This snippet executes a fastlane lane to deploy a new iOS beta build to TestFlight using the 'fastlane ios beta' command, optionally prefixed with 'bundle exec' for consistency with bundled Ruby dependencies. It assumes fastlane is installed and configured for the project, and that the appropriate App Store credentials and apple developer configurations are present. The input is a shell command executed in the project directory, and the output is an automated build and upload to TestFlight; errors may indicate configuration or authentication issues.\nSOURCE: https://github.com/logseq/logseq/blob/master/ios/App/fastlane/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[bundle exec] fastlane ios beta\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn - Shell\nDESCRIPTION: This snippet shows how to install all required Node.js/yarn dependencies for the Logseq publishing library. Use the command below before running linters and tests to ensure the development environment has all necessary packages. No special arguments are needed and this step is generally required only for development or testing purposes.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/publishing/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running pod install for M1 Macs (Shell)\nDESCRIPTION: Executes `pod install` using the x86_64 architecture emulation (`arch -x86_64`) to correctly install iOS dependencies via CocoaPods on M1 Macs. This command should be executed within the `ios/App` directory after addressing potential `ffi` gem issues.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-mobile.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\narch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Cloning Logseq Repository via Git\nDESCRIPTION: Clones the official Logseq repository from GitHub using Git and changes the current directory to the newly cloned `logseq` folder. This is a required initial step for setting up the development environment.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/logseq/logseq\ncd logseq\n```\n\n----------------------------------------\n\nTITLE: Testing Logseq Publishing with Yarn and nbb-test-runner - Shell\nDESCRIPTION: These commands demonstrate how to run automated tests for the Logseq publishing library using the nbb-logseq and nbb-test-runner tools. The first command executes all tests, the second displays available test runner options, and the third runs only those tests marked with the :focus metadata. These should be run from the project root with all dependencies already installed.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/publishing/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Run all tests\\n$ yarn test\\n# List available options\\n$ yarn test -H\\n# Run tests with :focus metadata flag\\n$ yarn test -i focus\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn (Shell)\nDESCRIPTION: Installs all necessary project dependencies defined in the `package.json` file using the yarn package manager. This is a prerequisite step before running the development server or building the project.\nSOURCE: https://github.com/logseq/logseq/blob/master/tldraw/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn - Bash\nDESCRIPTION: Shows the bash command to install all project dependencies using Yarn. This is a prerequisite step to ensure that all necessary packages for linting and testing are available before proceeding with development or test execution. No input is required; output will be downloaded modules in the 'node_modules' directory.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/common/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running Tldraw Development Server with Yarn (Shell)\nDESCRIPTION: Starts the Vite development server for the custom Tldraw component. This command runs a standalone demo web application accessible at http://127.0.0.1:3031/, with mocked Logseq components for isolated Tldraw feature development.\nSOURCE: https://github.com/logseq/logseq/blob/master/tldraw/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies using Yarn (Shell)\nDESCRIPTION: Installs necessary Yarn dependencies required for running linters and performing other development tasks within the `logseq.db` library project. This command needs to be run once during setup and requires Yarn to be installed. It is not needed for simply running the application.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/db/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Forge Build Script in package.json (JSON)\nDESCRIPTION: This line, intended to be placed within the `scripts` section of `~/logseq/resources/package.json`, configures the `electron:make` command. It instructs Electron Forge to create a Windows (win32) build targeting the x64 architecture and to package the application resources into an ASAR archive.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/Build LogSeq Desktop for windows on Ubuntu.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"electron:make\": \"electron-forge make --platform=win32 --arch=x64 --asar\",\n```\n\n----------------------------------------\n\nTITLE: Building the Tldraw Component with Yarn (Shell)\nDESCRIPTION: Triggers the production build process for the custom Tldraw component. This command typically bundles, minifies, and optimizes the JavaScript code using a tool like Vite, preparing it for integration into the main Logseq application.\nSOURCE: https://github.com/logseq/logseq/blob/master/tldraw/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Winetricks and .NET Framework 4.6 (Shell)\nDESCRIPTION: These commands first install the 'winetricks' utility using apt, and then use winetricks to install the .NET Framework version 4.6 within the Wine environment. This specific .NET version is likely a dependency for the Windows build process.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/Build LogSeq Desktop for windows on Ubuntu.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install winetricks\n\nwinetricks dotnet46\n```\n\n----------------------------------------\n\nTITLE: Spell Checking Source Code with Typos (Bash)\nDESCRIPTION: Installs and runs the 'typos' CLI spell checker, identifying and optionally fixing spelling errors in the source tree. 'brew install' is used for installation, 'typos' checks for issues, and 'typos -w' attempts to fix them. Requires Homebrew and typos-cli to be installed for these commands.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install typos-cli\n# Catch any errors\n$ typos\n# Fix errors\n$ typos -w\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with Yarn\nDESCRIPTION: Installs necessary Node.js dependencies using Yarn. These dependencies are required for running linters and tests during development of the `logseq.graph-parser` library. This step is not needed if only running the frontend application.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/graph-parser/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Electron Dev App Launch - Shell\nDESCRIPTION: This snippet outlines the troubleshooting steps for resolving development app launch failures after upgrading Electron. It involves reinstalling dependencies, starting the watch process, setting up the static directory, and launching the Electron app. The process assumes yarn and node are installed. Killing all Electron processes is required before a normal launch can succeed.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nyarn\\nyarn watch\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd static\\nyarn\\ncd ..\\nyarn dev-electron-app\n```\n\n----------------------------------------\n\nTITLE: Compiling Logseq Application using Yarn (Shell)\nDESCRIPTION: These commands navigate into the cloned 'logseq' directory, install project dependencies using `yarn`, run the core release build (`yarn release`), and then trigger the Electron application build specifically configured for Windows (`yarn release-electron`). The final executable is expected in the `static/out/make/squirrel.windows/x64/` directory.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/Build LogSeq Desktop for windows on Ubuntu.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd logseq\nyarn\nyarn release\nyarn release-electron\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet and Mono on Ubuntu (Shell)\nDESCRIPTION: These commands install the NuGet package manager and the Mono framework (specifically the 'mono-complete' package, which includes the runtime, development tools, and libraries) using apt. These are necessary for handling .NET dependencies and compilation on a Linux system.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/Build LogSeq Desktop for windows on Ubuntu.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install nuget\n\nsudo apt-get install mono-complete\n```\n\n----------------------------------------\n\nTITLE: Listing Logseq Language Translation Status using Babashka\nDESCRIPTION: This shell command utilizes Babashka (`bb`) to execute the `lang:list` task within the Logseq project. It displays a table summarizing the translation status for all configured languages, including the locale code, percentage translated, total translation count, and the language name.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/contributing-to-translations.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bb lang:list\n\n|  :locale | :percent-translated | :translation-count |              :language |\n|----------+---------------------+--------------------+------------------------|\n|      :es |                 100 |                492 |                Español |\n|      :tr |                 100 |                492 |                 Türkçe |\n|      :en |                 100 |                492 |                English |\n|      :uk |                  95 |                466 |             Українська |\n|      :ru |                  95 |                466 |                Русский |\n|      :ko |                  93 |                459 |                    한국어 |\n|      :de |                  93 |                459 |                Deutsch |\n|      :fr |                  92 |                453 |               Français |\n|   :pt-PT |                  92 |                453 |    Português (Europeu) |\n|   :pt-BR |                  92 |                451 | Português (Brasileiro) |\n|      :sk |                  90 |                445 |             Slovenčina |\n|   :zh-CN |                  90 |                441 |                   简体中文 |\n|   :nb-NO |                  75 |                370 |         Norsk (bokmål) |\n|      :ja |                  75 |                368 |                    日本語 |\n|      :pl |                  72 |                353 |                 Polski |\n|      :nl |                  72 |                353 |     Dutch (Nederlands) |\n| :zh-Hant |                  71 |                349 |                   繁體中文 |\n|      :it |                  71 |                349 |               Italiano |\n|      :af |                  22 |                106 |              Afrikaans |\nTotal: 19\n```\n\n----------------------------------------\n\nTITLE: Linting Datalog Rules using Babashka (Shell)\nDESCRIPTION: Executes a Babashka (`bb`) script specifically designed to lint the Datalog rules within the project. This script leverages the `datalog-parser`. Requires Babashka to be installed and development dependencies (potentially installed via `yarn install`) to be available.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/db/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbb lint:rules\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Development Server URL (TypeScript)\nDESCRIPTION: Defines the `server` configuration within `capacitor.config.ts` for development builds on both iOS and Android. The `url` property, initially referencing an environment variable, must be uncommented and replaced with the actual local development server address (e.g., `http://<your-local-ip>:3001`). `cleartext: true` allows HTTP traffic, necessary for local development.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-mobile.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nserver: {\n    url: \"process.env.LOGSEQ_APP_ASERVER_URL\",\n    cleartext: true\n    } \n```\n\n----------------------------------------\n\nTITLE: Importing Logseq SDK as Global Namespace - JavaScript\nDESCRIPTION: This JavaScript import statement loads the Logseq SDK libraries into the project as a global namespace. It assumes that @logseq/libs has been previously installed via yarn or npm. This statement makes all SDK APIs available under the logseq namespace for use in plugin development. It should be placed at the top of your main plugin source file. The import does not return or export any specific value.\nSOURCE: https://github.com/logseq/logseq/blob/master/libs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@logseq/libs\"\n```\n\n----------------------------------------\n\nTITLE: Installing Logseq Dependencies with Scoop on Windows (shell)\nDESCRIPTION: These shell commands use the Scoop package manager to add necessary buckets and install Java OpenJDK, clojure CLI dependencies, babashka, leiningen, and Node.js LTS. Scoop automates retrieval and installation, making setup reproducible and compatible with Command Prompt or PowerShell. Run each command in a terminal on Windows with Scoop installed. No special input is required; outputs are successful installations of all listed packages.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-windows.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscoop bucket add scoop-clojure https://github.com/littleli/scoop-clojure\\nscoop bucket add extras\\nscoop bucket add java\\nscoop install java/openjdk clj-deps babashka leiningen nodejs-lts\n```\n\n----------------------------------------\n\nTITLE: Focusing Tests with clj and Node CLI (Shell, ClojureScript)\nDESCRIPTION: Allows selective test runs by adding ^:focus metadata to test definitions in ClojureScript, monitoring files with clj, and then running focused tests with a Node-based test runner. Enables faster, targeted feedback during test development. Requires clojure, Node.js, and proper test runner scripts.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nclj -M:test watch test\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode static/tests.js -i focus\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode static/tests.js -e focus\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode static/tests.js -r page-property\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode static/tests.js -r page-property -e focus\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode static/tests.js -h\n```\n\n----------------------------------------\n\nTITLE: Watching ClojureScript Stories for Storybook in Shell\nDESCRIPTION: This command runs the `cljs:watch-stories` script defined in the project's `package.json` using Yarn. The underlying command (`clojure -M:cljs watch stories-dev`) initiates the ClojureScript compiler in watch mode, specifically targeting the 'stories-dev' build configuration. This continuously monitors ClojureScript source files for changes and recompiles them, facilitating live updates within the Storybook environment during development. Requires Yarn and a functional Clojure/ClojureScript development setup.\nSOURCE: https://github.com/logseq/logseq/blob/master/packages/ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn run cljs:watch-stories\n\n# cljs:watch-stories: \"clojure -M:cljs watch stories-dev\"\n```\n\n----------------------------------------\n\nTITLE: Basic Logseq Query Template\nDESCRIPTION: Provides the basic template structure for embedding a query within Logseq content using double curly braces `{{query }}`. This is the starting point for creating dynamic content based on search criteria.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/shui___components___table.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- {{query }}\n```\n\n----------------------------------------\n\nTITLE: Displaying ClojureScript Test Runner Options\nDESCRIPTION: Shows how to display help and available options for the ClojureScript test runner (`cljs-test-runner`) using the Clojure CLI. This allows users to see how to run specific tests or namespaces.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/graph-parser/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclojure -M:test --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Clojure CLI Repository Mirror in deps.edn (edn)\nDESCRIPTION: This EDN configuration snippet can be added to the deps.edn file to set up mirrored Maven and Clojars repositories in the Clojure CLI environment. It is intended for developers in regions with restricted network access or custom mirrors. Key-value pairs specify alternative URLs for 'central' and 'clojars' repositories. Inputs are static; apply by editing the deps.edn file accordingly.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-windows.md#_snippet_4\n\nLANGUAGE: edn\nCODE:\n```\n:mvn/repos {\\n  \"central\" {:url \"https://maven.aliyun.com/repository/public\"}\\n  \"clojars\" {:url \"https://mirrors.tuna.tsinghua.edu.cn/clojars\"}\\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Code Performance with with-time-number Macro (Clojure)\nDESCRIPTION: Evaluates code timing using 'util/with-time-number' macro and checks block normalization speed in unit performance tests. The given example is an 'are' test that asserts minimum timeouts for normalization. Requires utility and block namespaces/functions, and Clojure test infrastructure.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_14\n\nLANGUAGE: clojure\nCODE:\n```\n(are [x timeout] (>= timeout (:time (util/with-time-number (block/normalize-block x true))))\n    ... )\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Style Issues with Yarn (Shell)\nDESCRIPTION: Executes a predefined script (likely configured in `package.json`) to automatically format and fix code style inconsistencies according to the project's linting and formatting rules (e.g., using Prettier or ESLint).\nSOURCE: https://github.com/logseq/logseq/blob/master/tldraw/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn fix:style\n```\n\n----------------------------------------\n\nTITLE: Running Logseq Web App with SSL on Docker - Shell\nDESCRIPTION: This shell snippet pulls the latest Logseq web app Docker image and runs it with SSL enabled using Nginx, mounting both certificate files and the Nginx SSL config into the container. The run command maps external port 8443 to container port 443 and mounts the current directory ('pwd') to /etc/nginx/certs and a custom ssl.conf to Nginx's config. Prerequisites: all required files (.pem, .key, ssl.conf) present in the working directory, Docker installed. Exposes the app securely at https://<IP>:8443; ensure firewall/security settings are appropriate.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/docker-web-app-guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/logseq/logseq-webapp:latest\n\ndocker run -d --rm -p 8443:443 -v `pwd`:/etc/nginx/certs -v ./ssl.conf:/etc/nginx/conf.d/ssl.conf ghcr.io/logseq/logseq-webapp:latest\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate with mkcert - Shell\nDESCRIPTION: This snippet uses mkcert to generate a development SSL certificate for a specific IP address or hostname, intended for use with the Logseq deployment. Replace the argument with the public IP or desired domain. Output includes .pem and .key files for use in SSL server configuration. Dependency: mkcert must be installed and root CA must be set up.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/docker-web-app-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkcert 192.168.11.95 # public IP address or hostname of the remote machine\n```\n\n----------------------------------------\n\nTITLE: Validating Config Files via Babashka Task - Shell\nDESCRIPTION: This snippet shows the usage of a Babashka (bb) task to validate a Logseq repository configuration file (config.edn). It requires Babashka to be installed and available in the PATH. The main parameter is the file path to the config.edn to be validated. The expected output is either successful validation or details about validation errors. Only compatible configuration files are supported.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nbb dev:validate-repo-config-edn src/resources/templates/config.edn\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up State After Failed E2E Tests (Shell and Windows Command Prompt)\nDESCRIPTION: Removes configuration and temporary data directories to reset Logseq state if e2e tests fail, supporting consistent test runs. Unix shell commands use 'rm -rdf' for relevant directories, while Windows uses 'rmdir /s'. Paths may require adjustment based on OS and environment.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nrm -rdf ~/.logseq\nrm -rdf ~/.config/Logseq\nrm -rdf <repo dir>/tmp/\n```\n\nLANGUAGE: sh\nCODE:\n```\nrmdir /s %APPDATA%/Electron\n```\n\n----------------------------------------\n\nTITLE: Finding Missing Logseq Translations for a Specific Language using Babashka\nDESCRIPTION: This shell command uses Babashka (`bb`) to run the `lang:missing` task, specifying a language locale (e.g., `es` for Spanish). It outputs a table listing the translation keys that are present in the English dictionary but missing in the specified language's dictionary file (`dicts/es.edn` in this case), along with the original English string that needs translation.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/contributing-to-translations.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bb lang:missing es\n|                      :translation-key |                                  :string-to-translate |         :file |\n|---------------------------------------+-------------------------------------------------------+---------------|\n|    :command.editor/toggle-number-list |                                    Toggle number list | dicts/es.edn  |\n|     :command.whiteboard/bring-forward |                                          Move forward | dicts/es.edn  |\n|    :command.whiteboard/bring-to-front |                                         Move to front | dicts/es.edn  |\n...\n```\n\n----------------------------------------\n\nTITLE: Generating Copyable Missing Logseq Translations using Babashka\nDESCRIPTION: This shell command executes the Babashka (`bb`) task `lang:missing` with a specific language locale (`es`) and the `--copy` flag. Instead of a table, it prints the missing translation keys and their corresponding English source strings in the EDN format required by the language files (e.g., `dicts/es.edn`). This output is intended to be copied and pasted directly into the relevant translation file, although indentation might need manual adjustment.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/contributing-to-translations.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# When pasting this content, be sure to update the indentation to match the file\n$ bb lang:missing es --copy\n\n;; For dicts/es.edn\n:command.editor/toggle-number-list \"Toggle number list\"\n:command.whiteboard/bring-forward \"Move forward\"\n:command.whiteboard/bring-to-front \"Move to front\"\n...\n```\n\n----------------------------------------\n\nTITLE: Validating and Reviewing Translations with Babashka (Shell)\nDESCRIPTION: Calls a Babashka task to validate translation files, checking for common mistakes and formatting issues in translatable strings. The validation task assists both reviewers and contributors in maintaining translation quality. Requires Babashka and proper task setup under 'lang:'.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbb lang:validate-translations\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Collective Sponsors Badge in HTML\nDESCRIPTION: This HTML snippet creates two centered paragraphs. The first contains a link inviting users to become sponsors on Open Collective. The second paragraph displays an SVG image fetched from Open Collective, showing the avatars of the project's sponsors, linked to the Logseq Open Collective page.\nSOURCE: https://github.com/logseq/logseq/blob/master/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://opencollective.com/logseq#sponsor\"> [Become a sponsor]</a>\n</p>\n<p align=\"center\">\n    <a href=\"https://opencollective.com/logseq\" alt=\"Sponsors on Open Collective\">\n        <img src=\"https://opencollective.com/logseq/tiers/sponsors.svg?avatarHeight=42&width=600\"/></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Running Logseq Web App Docker Container - Shell\nDESCRIPTION: This shell snippet demonstrates how to pull the Logseq web app Docker image and run it locally, binding port 3001 on localhost. Dependencies include Docker installed on the host. The key commands pull the latest image and run it detached, auto-removing after exit, and mapping internal port 80 to 3001 externally. Expected result: Logseq web app accessible at http://localhost:3001. No SSL is configured, so it's suitable only for local usage.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/docker-web-app-guide.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/logseq/logseq-webapp:latest\ndocker run -d --rm -p 127.0.0.1:3001:80 ghcr.io/logseq/logseq-webapp:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Nginx for Logseq Web App - Nginx\nDESCRIPTION: This Nginx configuration demonstrates how to set up an HTTPS server for the Logseq web app using the certificates generated by mkcert. The configuration listens on port 443 with SSL, specifies certificate and key paths, and serves static files from /usr/share/nginx/html. Dependency: Nginx installed on the server and valid certificate/key files available at the specified locations. Allows secure access to Logseq over HTTPS; modify server_name and paths for production.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/docker-web-app-guide.md#_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\n# ssl.conf\nserver {\n    listen  443   ssl;\n    ssl_certificate /etc/nginx/certs/192.168.11.95.pem;\n    ssl_certificate_key /etc/nginx/certs/192.168.11.95-key.pem;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mkcert for Certificate Generation - Shell\nDESCRIPTION: This shell snippet provides commands to install mkcert, a utility for generating locally-trusted development SSL certificates. It includes examples for macOS (via Homebrew), Arch Linux (via pacman), and refers to the official installation instructions for other systems. Dependencies: a compatible package manager or access to mkcert's GitHub repository. Outputs an installed mkcert utility required for subsequent certificate generation steps.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/docker-web-app-guide.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# macOS\nbrew install mkcert\n# or archlinux\nsudo pacman -Ss mkcert\n# or follow the install instructions from https://github.com/FiloSottile/mkcert\n```\n\n----------------------------------------\n\nTITLE: Installing mkcert Root CA - Shell\nDESCRIPTION: This shell snippet installs mkcert's local root certificate authority, enabling browsers to trust certificates generated by mkcert. The command must be run after mkcert is installed, and is a prerequisite for creating trusted SSL certificates. Expected output: root CA set up on the local system.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/docker-web-app-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Embedding Product Hunt Review Badge in HTML\nDESCRIPTION: This HTML snippet embeds a Product Hunt review badge for Logseq. The badge is an image fetched from the Product Hunt API, styled with specific dimensions (250x54px) and a dark theme. It links to the Logseq post on Product Hunt, opening in a new tab (`target=\"_blank\"`). UTM parameters are included for tracking.\nSOURCE: https://github.com/logseq/logseq/blob/master/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://www.producthunt.com/posts/logseq?utm_source=badge-review&utm_medium=badge&utm_souce=badge-logseq#discussion-body\"\n    target=\"_blank\"><img\n        src=\"https://api.producthunt.com/widgets/embed-image/v1/review.svg?post_id=298158&theme=dark\"\n        align=\"center\"\n        alt=\"Logseq - Your joyful, private digital garden | Product Hunt\" style=\"width: 250px; height: 54px;\"\n        width=\"250\" height=\"54\"/></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Logseq Repository using Git (Shell)\nDESCRIPTION: This command clones the official Logseq source code repository from GitHub into the current directory. This is the first step to get the source code needed for building the application.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/Build LogSeq Desktop for windows on Ubuntu.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/logseq/logseq/\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS Variable Value in Component Styling - CSS\nDESCRIPTION: Defines a class '.example' and sets the custom property 'something' to the string value of a color token (\\\"#abc123\\\"). Serves as a practical example of referencing CSS variable or color constant within scoped styles for a component or utility class. No dependencies required; best used in conjunction with theming variable definitions.\nSOURCE: https://github.com/logseq/logseq/blob/master/deps/shui/shui-graph/pages/contents.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.example {\n  something: \"#abc123\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing ffi gem for M1 Macs (Shell)\nDESCRIPTION: Installs the `ffi` Ruby gem using the x86_64 architecture emulation (`arch -x86_64`) to resolve compatibility issues on M1 Macs. This command requires administrative privileges and should be executed within the `ios/App` directory.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-mobile.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\narch -x86_64 sudo gem install ffi\n```\n\n----------------------------------------\n\nTITLE: Installing Wine on Ubuntu (Shell)\nDESCRIPTION: These commands configure the system to support i386 architecture, update the package list, and install both 64-bit and 32-bit versions of Wine. Wine is required to run Windows build tools or dependencies on Ubuntu.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/Build LogSeq Desktop for windows on Ubuntu.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo dpkg --add-architecture i386\nsudo apt update\nsudo apt install wine64 wine32\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Windows Development (powershell)\nDESCRIPTION: This PowerShell snippet sets global and Electron-specific proxy-related environment variables to configure HTTP and HTTPS traffic for network-restricted environments. It is designed for developers needing proxy support during Logseq development, especially for Node/Electron and CLI tooling. Replace <proxy-host> and <proxy-port> with your proxy's address and port. These changes apply to the current shell session.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-windows.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:GLOBAL_AGENT_HTTPS_PROXY='http://<proxy-host>:<proxy-port>'\\n$env:ELECTRON_GET_USE_PROXY='true'\\n$env:HTTPS_PROXY='http://<proxy-host>:<proxy-port>'\\n$env:HTTP_PROXY='http://<proxy-host>:<proxy-port>'\n```\n\n----------------------------------------\n\nTITLE: Standard AGPL v3 Source File Notice Template (Plaintext)\nDESCRIPTION: A template notice recommended by the GNU AGPL v3 to be included at the start of source files. It includes placeholders for the program's name, copyright year/author, declares the software is licensed under AGPLv3 (or later), disclaims warranty, and points to the full license text. This notice should be adapted with specific program details.\nSOURCE: https://github.com/logseq/logseq/blob/master/LICENSE.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Autorunning Tests on File Save with Clojure Tasks (Shell)\nDESCRIPTION: Runs test suites automatically on file save using a Clojure process with the --config-merge option. The ':autorun true' parameter enables autorun behavior, and ':ns-regexp' allows targeting specific namespaces. Requires Clojure CLI and correct configuration.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/dev-practices.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nclojure -M:test watch test --config-merge '{:autorun true}'\n```\n\nLANGUAGE: sh\nCODE:\n```\nclojure -M:test watch test --config-merge '{:autorun true :ns-regexp \"frontend.util.page-property-test\"}'\n```\n\n----------------------------------------\n\nTITLE: List of Libraries Granted Additional Linking Permissions (Plaintext)\nDESCRIPTION: A list of libraries for which the licensors grant additional permission to convey the resulting work if the Program is modified by linking or combining it with these libraries (or modified versions), as per GNU GPL version 3 section 7. This addresses potential license compatibility issues, particularly between AGPL and other licenses these libraries might use.\nSOURCE: https://github.com/logseq/logseq/blob/master/LICENSE.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* cider/cider-nrepl\n* clojure-complete\n* com.cemerick/friend\n* compojure\n* environ\n* hiccup\n* medley\n* org.clojure/clojure\n* org.clojure/clojurescript\n* org.clojure/core.async\n* org.clojure/core.cache\n* org.clojure/core.incubator\n* org.clojure/core.logic\n* org.clojure/core.match\n* org.clojure/core.memoize\n* org.clojure/data.csv\n* org.clojure/data.json\n* org.clojure/data.priority-map\n* org.clojure/java.classpath\n* org.clojure/java.jdbc\n* org.clojure/math.numeric-tower\n* org.clojure/tools.analyzer\n* org.clojure/tools.analyzer.jvm\n* org.clojure/tools.logging\n* org.clojure/tools.macro\n* org.clojure/tools.namespace\n* org.clojure/tools.nrepl\n* org.clojure/tools.reader\n* org.tcrawley/dynapath\n* refactor-nrepl\n* slingshot\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Structure - Markdown\nDESCRIPTION: This snippet demonstrates the use of Markdown for maintaining a changelog in a software project. Dependencies are minimal, requiring only a Markdown-compatible viewer. The snippet uses headings for versioning and bulleted lists for change entries, with no code execution involved. Inputs and outputs are text for human readability; no computation occurs.\nSOURCE: https://github.com/logseq/logseq/blob/master/tldraw/packages/utils/intersect/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\n\n# 2.0.0\n\n- New repo.\n```\n\n----------------------------------------\n\nTITLE: Error Message: Android Studio Not Found (Text)\nDESCRIPTION: Displays a potential error message indicating that Capacitor could not launch Android Studio because it wasn't found at the expected path (`/Applications/Android Studio.app`). This can occur on M1 Macs if Android Studio is not moved to the Applications folder after download. The error suggests configuring the `CAPACITOR_ANDROID_STUDIO_PATH` environment variable as a workaround.\nSOURCE: https://github.com/logseq/logseq/blob/master/docs/develop-logseq-on-mobile.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n [error] Unable to launch Android Studio. Is it installed?\n    Attempted to open Android Studio at: /Applications/Android Studio.app\n    You can configure this with the CAPACITOR_ANDROID_STUDIO_PATH environment variable.\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Contributors Image via contrib.rocks in HTML\nDESCRIPTION: This HTML snippet embeds a centered image generated by the `contrib.rocks` service. The image displays avatars of GitHub contributors for the `logseq/logseq` repository, limited to 300 contributors arranged in 14 columns, with a display width of 600 pixels. The image is linked to the project's contributors page on GitHub.\nSOURCE: https://github.com/logseq/logseq/blob/master/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://github.com/logseq/logseq/graphs/contributors\">\n        <img src=\"https://contrib.rocks/image?repo=logseq/logseq&max=300&columns=14\" width=\"600\"/></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Collective Backers Badge in HTML\nDESCRIPTION: This HTML snippet displays a centered SVG image fetched from Open Collective, showing the avatars of the project's backers. The image is linked to the Logseq Open Collective page and is configured to display avatars with a height of 24 pixels and a total width of 600 pixels.\nSOURCE: https://github.com/logseq/logseq/blob/master/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://opencollective.com/logseq\" alt=\"Backers on Open Collective\">\n        <img src=\"https://opencollective.com/logseq/tiers/backers.svg?avatarHeight=24&width=600\"/></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying JetBrains Logo with Link in HTML\nDESCRIPTION: This HTML snippet displays the JetBrains logo, centered on the page. The logo image is sourced from `docs/assets/jetbrains.svg` and is wrapped in a link pointing to the JetBrains website (`https://jetbrains.com`). Requires the image file to be present at the specified path.\nSOURCE: https://github.com/logseq/logseq/blob/master/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://jetbrains.com\" alt=\"JetBrains\">\n        <img src=\"docs/assets/jetbrains.svg\"/></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Changelog - Markdown\nDESCRIPTION: This snippet provides a Markdown template for maintaining a changelog within a project. Dependencies include any Markdown viewer or compatible repository platform (such as GitHub). The content includes version headers and bullet lists for changes, designed for human readers; there are no code parameters, and input/output is not applicable, though limitations include lack of automation or parsing structure.\nSOURCE: https://github.com/logseq/logseq/blob/master/tldraw/packages/utils/curve/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\n\n# 2.0.0\n\n- New repo.\n```\n\n----------------------------------------\n\nTITLE: Declaring DOMPurify License Information in JavaScript Comment\nDESCRIPTION: This multi-line comment block declares the license terms for DOMPurify version 2.3.8. It indicates dual licensing under Apache 2.0 and MPL 2.0, attributes copyright to Cure53 and contributors, and points to the official license file on GitHub. This comment serves as legal and informational metadata for the source code.\nSOURCE: https://github.com/logseq/logseq/blob/master/resources/js/lsplugin.user.js.LICENSE.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*! @license DOMPurify 2.3.8 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.8/LICENSE */\n```"
  }
]