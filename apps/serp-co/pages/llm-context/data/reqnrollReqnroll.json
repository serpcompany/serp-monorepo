[
  {
    "owner": "reqnroll",
    "repo": "reqnroll",
    "content": "TITLE: Implementing Step Definitions for FeatureInfo Verification in Reqnroll (C#)\nDESCRIPTION: This C# code implements step definitions to verify the contents of FeatureInfo in Reqnroll. It includes a custom DTO class, methods to execute a scenario and check FeatureInfo properties, and assertions to validate the information.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/feature-context.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class FeatureInformation\n{\n    public string Title { get; set; }\n    public GenerationTargetLanguage TargetLanguage { get; set; }\n    public string Description { get; set; }\n    public string Language { get; set; }\n    public string[] Tags { get; set; }\n}\n\n[When(@\"I execute any scenario in the feature\")]\npublic void ExecuteAnyScenario() { }\n\n[Then(@\"the FeatureInfo contains the following information\")]\npublic void FeatureInfoContainsInterestingInformation(DataTable table)\n{\n    // Create our small DTO for the info from the step\n    var fromStep =  table.CreateInstance<FeatureInformation>();\n    fromStep.Tags = table.Rows[0][\"Value\"].Split(',');\n\n    var fi = _featureContext.FeatureInfo;\n\n    // Assertions\n    fi.Title.Should().Equal(fromStep.Title);\n    fi.GenerationTargetLanguage.Should().Equal(fromStep.TargetLanguage);\n    fi.Description.Should().StartWith(fromStep.Description);\n    fi.Language.IetfLanguageTag.Should().Equal(fromStep.Language);\n    for (var i = 0; i < fi.Tags.Length - 1; i++)\n    {\n        fi.Tags[i].Should().Equal(fromStep.Tags[i]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Step Definition Using Optionals and Alternatives (Cucumber Expressions in .NET/C#)\nDESCRIPTION: Demonstrates a C# step definition using Cucumber Expressions featuring optional plurals and alternatives. The attribute allows matching various phrasings, such as singular/plural forms or alternative wording like 'belly/tummy'. Requires .NET/C# step definition framework (Reqnroll or SpecFlow). Parameter 'count' is dynamically extracted; input: Gherkin step with integer and permutations of nouns. Output: invocation for each matching step.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/cucumber-expressions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\\\"I have {int} cucumber(s) in my belly/tummy\\\")]\npublic void WhenIHaveCucumbersInMyBelly(int count)\n```\n\n----------------------------------------\n\nTITLE: Step Definition with Regular Expression in C#\nDESCRIPTION: Shows the same step definition implemented using regular expression syntax for parameter matching.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"^I perform a simple search on '(.*)'$\")]\npublic void WhenIPerformASimpleSearchOn(string searchTerm)\n{\n    var controller = new CatalogController();\n    actionResult = controller.Search(searchTerm);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Step Definition Attributes in C#\nDESCRIPTION: Demonstrates how to use multiple attributes for the same step definition method to support different phrasings.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I perform a simple search on {string}\")]\n[When(\"I search for {string}\")]\npublic void WhenIPerformASimpleSearchOn(string searchTerm)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Feature and Scenario Structure in Gherkin\nDESCRIPTION: Demonstrates the basic structure of a Gherkin feature file using `Feature` and `Scenario` keywords. It shows how steps (`When`, `Then`) are defined within scenarios and how comments (`#`) are used for explanation. Recommended indentation (two spaces) is also shown.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n```gherkin\n:caption: GuessTheWord.feature\nFeature: Guess the word\n\n  # The first example has two steps\n  Scenario: Maker starts a game\n    When the Maker starts a game\n    Then the Maker waits for a Breaker to join\n\n  # The second example has three steps\n  Scenario: Breaker joins a game\n    Given the Maker has started a game with the word \"silky\"\n    When the Breaker joins the Maker's game\n    Then the Breaker must guess a word with 5 characters\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Price Calculation Scenarios in Gherkin\nDESCRIPTION: This Gherkin snippet defines a feature for calculating the price of a shopping basket. It includes a scenario that outlines steps for adding items to the basket and asserts the expected total price. This feature follows BDD practices and integrates with Reqnroll for automating the testing process.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Price calculation\n\nThis feature is about calculating the basket price.\n\nWe work with fixed item prices for now:\n* Electric guitar: $180\n* Guitar pick: $1.5\n\nRule: The price for a basket with items can be calculated based on the item prices\n\nScenario: Client has a simple basket\n    Given the client started shopping\n    And the client added 1 pcs of \"Electric guitar\" to the basket\n    When the basket is prepared\n    Then the basket price should be $180\n```\n\n----------------------------------------\n\nTITLE: Basic Step Definition Class Structure in C#\nDESCRIPTION: Shows the basic structure of a step definition class with the required [Binding] attribute.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class StepDefinitions\n{\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Step Definitions with DataTable and DocString in C#\nDESCRIPTION: Shows how to implement step definitions that handle DataTable and DocString arguments.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Given(\"the following books\")]\npublic void GivenTheFollowingBooks(DataTable table)\n{\n  ...\n}\n\n[Given(\"a blog post named {string} with Markdown body\")]\npublic void GivenABlogPostWithMarkdownBody(string postName, string bodyText)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reqnroll Step Definition Using CompareToInstance<T>\nDESCRIPTION: Demonstrates a Reqnroll step definition in C# bound to a Gherkin step. It retrieves a `Person` object (e.g., from `ScenarioContext`) and uses the `table.CompareToInstance<Person>(person)` method to assert that the object's properties match the data provided in the Gherkin `DataTable`. A descriptive error is thrown if discrepancies are found.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class PersonSteps\n{\n    ScenarioContext _scenarioContext;\n\n    public PersonSteps(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [Then(\"the person should have the following values\")]\n    public void ThenThePersonShouldHaveTheFollowingValues(DataTable table){\n        // you don't have to get person this way, this is just for demonstration purposes\n        var person = _scenarioContext.Get<Person>();\n\n        table.CompareToInstance<Person>(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Injection in Step Definitions\nDESCRIPTION: Shows how to use dependency injection to access shared context in step definitions. The example demonstrates injecting and using a CatalogContext instance to manage book data across steps.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/sharing-data-between-bindings.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class BookSteps\n{\n    private readonly CatalogContext _catalogContext;\n\n    public BookSteps(CatalogContext catalogContext)\n    {\n        _catalogContext = catalogContext;\n    }\n\n    [Given(@\"the following books\")]\n    public void GivenTheFollowingBooks(DataTable table)\n    {\n        foreach (var book in table.CreateSet<Book>())\n        {\n            SaveBook(book);\n            _catalogContext.ReferenceBooks.Add(book.Id, book);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Step Definitions in C#\nDESCRIPTION: The C# step definition class provides the automation for Gherkin-defined scenarios, translating each step into executable code. Dependencies include the PriceCalculator class and a test framework like MsTest for assertions. It prepares the basket, calculates prices using the method in PriceCalculator, and verifies the expected output using assertions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ReqnrollQuickstart.Specs.StepDefinitions;\n\n[Binding]\npublic class PriceCalculationStepDefinitions\n{\n    private readonly PriceCalculator _priceCalculator = new();\n    private readonly Dictionary<string, int> _basket = new();\n    private decimal _calculatedPrice;\n\n    [Given(\"the client started shopping\")]\n    public void GivenTheClientStartedShopping()\n    {\n        _basket.Clear();\n        _calculatedPrice = 0.0m;\n    }\n\n    [Given(\"the client added {int} pcs of {string} to the basket\")]\n    public void GivenTheClientAddedPcsOfToTheBasket(int quantity, string product)\n    {\n        _basket.Add(product, quantity);\n    }\n\n    [When(\"the basket is prepared\")]\n    public void WhenTheBasketIsPrepared()\n    {\n        _calculatedPrice = _priceCalculator.CalculatePrice(_basket);\n    }\n\n    [Then(\"the basket price should be ${float}\")]\n    public void ThenTheBasketPriceShouldBe(decimal expectedPrice)\n    {\n        Assert.AreEqual(expectedPrice, _calculatedPrice);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Step Definition with Cucumber Expression in C#\nDESCRIPTION: Demonstrates a step definition using Cucumber expression syntax for parameter matching, implementing a search functionality.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I perform a simple search on {string}\")]\npublic void WhenIPerformASimpleSearchOn(string searchTerm)\n{\n    var controller = new CatalogController();\n    actionResult = controller.Search(searchTerm);\n}\n```\n\n----------------------------------------\n\nTITLE: Async Constructor Injection in Hooks\nDESCRIPTION: Shows how to combine constructor injection with async hook methods.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    private ScenarioContext _scenarioContext;\n\n    public MyHooks(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [BeforeScenario]\n    public async Task SetupTestUsersAsync()\n    {\n        //_scenarioContext...\n        // Example async operation\n        await Task.Delay(1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reqnroll Step Definition Using CompareToSet<T>\nDESCRIPTION: Shows a Reqnroll step definition in C# that uses the `CompareToSet<T>` extension method. It retrieves a collection of `Account` objects (e.g., from `ScenarioContext`) and compares them against the `DataTable` from the Gherkin step using `table.CompareToSet<Account>(accounts)`. By default, this checks that each row in the table matches an object in the collection, ignoring order and extra properties.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class AccountSteps\n{\n    ScenarioContext _scenarioContext;\n\n    public AccountSteps(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [Then(\"I get back the following accounts\")]\n    public void ThenIGetBackTheFollowingAccounts(DataTable table)\n    {\n        // (or get the accounts from the database or web service)\n        var accounts = _scenarioContext.Get<IEnumerable<Account>>();\n\n        table.CompareToSet<Account>(accounts);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculator Addition Feature in Gherkin\nDESCRIPTION: A sample feature file demonstrating how to specify a calculator's addition functionality using Gherkin syntax. It includes a feature description, a rule, and a scenario with Given-When-Then steps to test adding two numbers.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/feature-files.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Calculator\n\nSimple calculator for adding two numbers\n\nRule: Add should calculate the sum of the entered numbers\n\n@mytag\nScenario: Add two numbers\n\tGiven the first number is 50\n\tAnd the second number is 70\n\tWhen the two numbers are added\n\tThen the result should be 120\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions with Context Injection\nDESCRIPTION: Shows how to implement step definitions using constructor injection to share PersonData context between multiple binding classes.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyStepDefs\n{\n  private readonly PersonData personData;\n  public MyStepDefs(PersonData personData) // use it as ctor parameter\n  { \n    this.personData = personData;\n  }\n  \n  [Given] \n  public void The_person_FIRSTNAME_LASTNAME(string firstName, string lastName) \n  {\n    personData.FirstName = firstName; // write into the shared data\n    personData.LastName = lastName;\n    //... do other things you need\n  }\n}\n\n[Binding]\npublic class OtherStepDefs // another binding class needing the person\n{ \n  private readonly PersonData personData;\n  public OtherStepDefs(PersonData personData) // ctor parameter here too\n  { \n    this.personData = personData;\n  }\n  \n  [Then] \n  public void The_person_data_is_properly_displayed() \n  {\n    var displayedData = ... // get the displayed data from the app\n      // read from shared data, to perform assertions\n    Assert.AreEqual(personData.FirstName + \" \" + personData.LastName, \n      displayedData, \"Person name was not displayed properly\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gherkin Step with Data Table\nDESCRIPTION: This C# snippet in the PriceCalculationStepDefinitions class defines a Gherkin step for handling a Data Table containing products and quantities. It utilizes a Gherkin DataTable's CreateSet method for iterating over table entries.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[...]\npublic class PriceCalculationStepDefinitions\n{\n    [...]\n\n    [Given(\"the client added {int} pcs of {string} to the basket\")]\n    public void GivenTheClientAddedPcsOfToTheBasket(int quantity, string product)\n    {\n        _basket.Add(product, quantity);\n    }\n\n    [Given(\"the client added\")]\n    public void GivenTheClientAdded(DataTable itemsTable)\n    {\n        throw new PendingStepException();\n    }\n\n    [When(\"the basket is prepared\")]\n    public void WhenTheBasketIsPrepared()\n    {\n        _calculatedPrice = _priceCalculator.CalculatePrice(_basket);\n    }\n\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MsTest TestContext via Constructor Injection in Reqnroll Step Definitions - C#\nDESCRIPTION: Demonstrates how to inject the MSTest TestContext into Reqnroll step definition classes using constructor injection in C#. This enables test steps and hooks to write diagnostic information or access test execution context. Requires the Microsoft.VisualStudio.TestTools.UnitTesting namespace and the MSTest/Reqnroll integration NuGet packages. The TestContext parameter is automatically provided by Reqnroll when executing tests.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n[Binding]\npublic class MyStepDefs\n{\n    private readonly TestContext _testContext;\n    public MyStepDefs(TestContext testContext) // use it as ctor parameter\n    { \n        _testContext = testContext;\n    }\n\n    [Given(\"a step\")]\n    public void GivenAStep()\n    {\n        //you can access the TestContext injected in the ctor\n        _testContext.WriteLine(_testContext.TestRunDirectory);\n    }\n\n\n    [BeforeScenario()]\n    public void BeforeScenario()\n    {\n        //you can access the TestContext injected in the ctor\n        _testContext.WriteLine(_testContext.TestRunDirectory);\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll.Microsoft.Extensions.DependencyInjection via NuGet Package Manager in C#\nDESCRIPTION: This snippet demonstrates how to install the Reqnroll.Microsoft.Extensions.DependencyInjection NuGet package into your project using the Package Manager Console. This package enables Reqnroll to leverage Microsoft.Extensions.DependencyInjection for dependency management. Use this command in the terminal or Package Manager Console before configuring dependency injection in your project; it is a prerequisite for all subsequent integration steps.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/dependency-injection.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPM> Install-Package Reqnroll.Microsoft.Extensions.DependencyInjection\n```\n\n----------------------------------------\n\nTITLE: Accessing ITestOutputHelper in Reqnroll Bindings (C#)\nDESCRIPTION: This C# code demonstrates how to inject `Xunit.Abstractions.ITestOutputHelper` into a Reqnroll binding class using constructor injection. This allows writing test output (e.g., logs, debug information) that xUnit captures and displays in test results. The `[Binding]` attribute marks the class for Reqnroll's discovery mechanism, and the `[When]` attribute decorates a step definition method that utilizes the injected `_testOutputHelper` to write a specific message.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/xunit.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n``` csharp\n\nusing System;\nusing Reqnroll;\n\n[Binding]\npublic class BindingClass\n{\n    private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;\n    public BindingClass(Xunit.Abstractions.ITestOutputHelper testOutputHelper)\n    {\n        _testOutputHelper = testOutputHelper;\n    }\n\n    [When(@\"I do something\")]\n    public void WhenIDoSomething()\n    {\n        _testOutputHelper.WriteLine(\"EB7C1291-2C44-417F-ABB7-A5154843BC7B\");\n    }\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Obsolete Step Definition in C#\nDESCRIPTION: Shows how to mark a step definition as obsolete using the [Obsolete] attribute.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Given(\"Stuff is done\")]\n[Obsolete]\npublic void GivenStuffIsDone()\n{\n    var x = 2+3;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Page Object Implementation in C#\nDESCRIPTION: A C# class implementing the Page Object Model pattern with a WebDriver instance to find the input element.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/page-object-model.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PageObject\n{\n    private IWebDriver _webDriver;\n\n    public PageObject(IWebDriver webDriver)\n    {\n        _webDriver = webDriver;\n    }\n\n    public IWebElement txtUrl => _webDriver.FindElement(By.Id(\"txtUrl\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ScenarioContext in C# Bindings\nDESCRIPTION: Demonstrates how to access ScenarioContext in C# bindings using dependency injection.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scenario-context.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Binding\n{\n    private ScenarioContext _scenarioContext;\n\n    public Binding(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Type Collection with LINQ in C#\nDESCRIPTION: Sample code demonstrating how to create a collection of anonymous types using LINQ, which is useful when working with data projections across entities. Shows a typical scenario of joining data from different database tables.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nvar collection = from artist in ctx.Artists\n                 where artist.Name == \"Muse\"\n                 join album in ctx.Albums\n                     on album.ArtistId equals artist.ArtistId\n                 select new\n                 {\n                     Artist = artist.Name,\n                     Album = album.Name\n                 };\n```\n\n----------------------------------------\n\nTITLE: WebDriver Support Hook Implementation\nDESCRIPTION: Demonstrates how to customize the dependency injection container to register a Selenium WebDriver instance.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class WebDriverSupport\n{\n  private readonly IObjectContainer objectContainer;\n\n  public WebDriverSupport(IObjectContainer objectContainer)\n  {\n    this.objectContainer = objectContainer;\n  }\n\n  [BeforeScenario]\n  public void InitializeWebDriver()\n  {\n    var webDriver = new FirefoxDriver();\n    objectContainer.RegisterInstanceAs<IWebDriver>(webDriver);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to XmlDocument in Reqnroll\nDESCRIPTION: This example shows a step argument transformation that converts any string input to an XmlDocument. The transformation doesn't specify a regular expression, so it applies to any string argument that needs to be converted to an XmlDocument parameter type.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-argument-conversions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Transforms\n{\n    [StepArgumentTransformation]\n    public XmlDocument XmlTransform(string xml)\n    {\n       XmlDocument result = new XmlDocument();\n       result.LoadXml(xml);\n       return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hook Implementation in C#\nDESCRIPTION: Shows how to implement a basic BeforeScenario hook using the Binding attribute in a C# class.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    [BeforeScenario]\n    public void SetupTestUsers()\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Hook Implementation in C#\nDESCRIPTION: Demonstrates implementation of an asynchronous BeforeScenario hook using async/await pattern.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    [BeforeScenario]\n    public async Task SetupTestUsersAsync()\n    {\n        // Asynchronous setup logic\n        // Example async operation\n        await Task.Delay(1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CreateSet<T> in Step Definition\nDESCRIPTION: Example step definition showing how to convert a DataTable into a collection of objects using the CreateSet<T> extension method. The method returns an IEnumerable<T> of the specified type.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Given(@\"Given these products exist\")]\npublic void GivenTheseProductsExist(DataTable table)\n{\n    var products = table.CreateSet<Product>();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Containment Step Definitions in C#\nDESCRIPTION: C# step definitions implementing containment validation scenarios using LINQ operations. These methods check if collections contain all specified items, don't contain all items, or don't contain any of the specified items.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MusicCollectionSteps\n{\n    ScenarioContext _scenarioContext;\n\n    public MusicCollectionSteps(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [Then(@\"it should contain all items\")]\n    public void ThenItShouldContainAllItems(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n    \n        Assert.IsTrue(table.ToProjection<Item>().Except(collection.ToProjection()).Count() == 0);\n    }\n\n    [Then(@\"it should not contain all items\")]\n    public void ThenItShouldNotContainAllItems(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n    \n        Assert.IsFalse(table.ToProjection<Item>().Except(collection.ToProjection()).Count() == 0);\n    }\n\n    [Then(@\"it should not contain any of items\")]\n    public void ThenItShouldNotContainAnyOfItems(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n    \n        Assert.IsTrue(table.ToProjection<Item>().Except(collection.ToProjection()).Count() == table.RowCount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Retriever Implementation\nDESCRIPTION: Implementation of a custom IValueRetriever for converting color names to hex values.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\npublic class ShirtColorValueRetriever : IValueRetriever\n    {\n        public bool CanRetrieve(KeyValuePair<string, string> keyValuePair, Type targetType, Type propertyType)\n        {\n           if (!keyValuePair.Key.Equals(\"ShirtColor\"))\n           {\n               return false;\n           }\n\n           bool value;\n           if (Color.TryParse(keyValuePair.Value, out value))\n           {\n              return true;\n           }  \n        }\n\n        public object Retrieve(KeyValuePair<string, string> keyValuePair, Type targetType, Type propertyType)\n        {\n            return Color.Parse(keyValuePair.Value).HexCode;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Feature with Description in Gherkin\nDESCRIPTION: Illustrates how to use the `Feature` keyword followed by a colon and a short description. It also shows how to add multi-line free-form text underneath the `Feature` line to provide more context, which is ignored by Reqnroll at runtime but included in reports.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n```gherkin\n:caption: GuessTheWord.feature\nFeature: Guess the word\n\n  The word guess game is a turn-based game for two players.\n  The Maker makes a word for the Breaker to guess. The game\n  is over when the Breaker guesses the Maker's word.\n\n  Scenario: Maker starts a game\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming Relative Time Expressions to DateTime in Reqnroll\nDESCRIPTION: This snippet demonstrates how to create a step argument transformation that converts a relative time expression (e.g., 'in 3 days') into a DateTime object. The transformation uses a regular expression to match and extract the number of days, then returns the current date plus the specified number of days.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-argument-conversions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Transforms\n{\n   [StepArgumentTransformation(@\"in (\\d+) days?\")]\n   public DateTime InXDaysTransform(int days)\n   {\n      return DateTime.Today.AddDays(days);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model Class for DataTable Mapping\nDESCRIPTION: A C# class definition with properties matching the table columns. Properties must have public getters and setters to work with Reqnroll's automatic mapping functionality.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Class used to map table\nclass Account\n{\n    public string Name { get; set; }\n    public int HeightInInches { get; set; }\n    public decimal BankAccountBalance { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Page Object Implementation in C#\nDESCRIPTION: C# classes implementing a hierarchical Page Object Model pattern to handle nested HTML structures.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/page-object-model.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParentPageObject\n{\n    private IWebDriver _webDriver;\n\n    public ParentPageObject(IWebDriver webDriver)\n    {\n        _webDriver = webDriver;\n    }\n\n    public IWebElement WebElement => _webDriver.FindElement(By.ClassName(\"A\"));\n\n    public ChildPageObject Child => new ChildPageObject(WebElement);\n}\n\npublic class ChildPageObject\n{\n    private IWebElement _webElement;\n    private Lazy<IWebElement> _txtUrl;\n\n    public ChildPageObject(IWebElement webElement)\n    {\n        _webElement = webElement;\n    }\n\n    public IWebElement WebElement => _webElement.FindElement(By.ClassName(\"B\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom IValueRetriever and IValueComparer in Reqnroll\nDESCRIPTION: Demonstrates how to register custom implementations of `IValueRetriever` (e.g., `ColorValueRetriever`) and `IValueComparer` (e.g., `ColorValueComparer`) using the Reqnroll `Service.Instance`. This registration typically occurs within a `[BeforeTestRun]` hook, enabling the DataTable helpers to correctly convert and compare custom types like the `Color` class.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic static class Hooks1\n{\n    [BeforeTestRun]\n    public static void BeforeTestRun()\n    {\n        Service.Instance.ValueRetrievers.Register(new ColorValueRetriever());\n        Service.Instance.ValueComparers.Register(new ColorValueComparer());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataTable Extension Methods for Projection in C#\nDESCRIPTION: Implementation of extension methods for DataTable and collections that convert them to EnumerableProjection instances. These methods enable projection operations to work with both known types and anonymous types for comparison purposes.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IEnumerable<Projection<T>> ToProjection<T>(this IEnumerable<T> collection, DataTable table = null)\n{\n    return new EnumerableProjection<T>(table, collection);\n}\n\npublic static IEnumerable<Projection<T>> ToProjection<T>(this DataTable table)\n{\n    return new EnumerableProjection<T>(table);\n}\n\npublic static IEnumerable<Projection<T>> ToProjectionOfSet<T>(this DataTable table, IEnumerable<T> collection)\n{\n    return new EnumerableProjection<T>(table);\n}\n\npublic static IEnumerable<Projection<T>> ToProjectionOfInstance<T>(this DataTable table, T instance)\n{\n    return new EnumerableProjection<T>(table);\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection in Hooks\nDESCRIPTION: Example of using constructor injection to access ScenarioContext in a hook class.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    private ScenarioContext _scenarioContext;\n\n    public MyHooks(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [BeforeScenario]\n    public void SetupTestUsers()\n    {\n        //_scenarioContext...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Price Calculation in C#\nDESCRIPTION: This snippet shows an initial implementation of the PriceCalculator class that calculates a basket's price using a hardcoded price table. Dependencies include the C# standard library and a Dictionary to store product prices. The method takes a dictionary of basket items as input and returns the total price.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ReqnrollQuickstart.App;\n\npublic class PriceCalculator\n{\n    // the item prices are hard coded for now\n    private readonly Dictionary<string, decimal> _priceTable = new()\n    {\n        { \"Electric guitar\", 180.0m },\n        { \"Guitar pick\", 1.5m }\n    };\n\n    public decimal CalculatePrice(Dictionary<string, int> basket)\n    {\n        //TODO: complete the price calculation once we defined more scenarios\n        var item = basket.First();\n        return _priceTable[item.Key];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CreateInstance<T> in Step Definition\nDESCRIPTION: Example step definition showing how to convert a DataTable into a single instance of a class using the CreateInstance<T> extension method. The method handles automatic type conversion from string values.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Given(@\"Given I entered the following data into the new account form:\")]\npublic void GivenIEnteredTheFollowingDataIntoTheNewAccountForm(DataTable table)\n{\n    var account = table.CreateInstance<Account>();\n    //                                 ^^^^^^^\n\n    // account.Name is \"John Galt\"\n    // account.HeightInInches is 72\n    // account.BankAccountBalance is 1234.56\n}\n```\n\n----------------------------------------\n\nTITLE: After Implementation - Step Definition with Driver Pattern\nDESCRIPTION: Refactored step definition using Driver Pattern and Context Injection, showing the simplified binding class with dependency injection.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/driver-pattern.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class SubmissionSteps\n{\n    private readonly SubmissionPageDriver submissionPageDriver;\n\n    public SubmissionSteps(SubmissionPageDriver submissionPageDriver)\n    {\n        this.submissionPageDriver = submissionPageDriver;\n    }\n\n    [Then(@\"it is possible to enter a '(.*)' with label '(.*)'\")] \n    public void ThenItIsPossibleToEnterAWithLabel(string inputType, string expectedLabel)\n    {\n        submissionPageDriver.CheckExistenceOfInputElement(inputType, expectedLabel);\n    }\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with ScenarioContext in C#\nDESCRIPTION: Demonstrates how to use ScenarioContext.TestError to handle errors in AfterScenario hooks in C#.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scenario-context.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"an error occurs in a step\")]\npublic void AnErrorOccurs()\n{\n    \"not correct\".Should().Equal(\"correct\");\n}\n\n[AfterScenario(\"showingErrorHandling\")]\npublic void AfterScenarioHook()\n{\n    if(_scenarioContext.TestError != null)\n    {\n        var error = _scenarioContext.TestError;\n        Console.WriteLine(\"An error ocurred:\" + error.Message);\n        Console.WriteLine(\"It was of type:\" + error.GetType().Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Tabular Data with Gherkin Data Tables\nDESCRIPTION: Shows how to use `Data Tables` (pipe-delimited tables) in Gherkin to pass structured tabular data as an argument to a step definition. This is useful for providing lists of entities or parameters to setup steps like `Given the following users exist:`.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_14\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven the following users exist:\n  | name   | email              | twitter         |\n  | Aslak  | aslak@cucumber.io  | @aslak_hellesoy |\n  | Julien | julien@cucumber.io | @jbpros         |\n  | Matt   | matt@cucumber.io   | @mattwynne      |\n```\n\n----------------------------------------\n\nTITLE: Registering Parameterized Cucumber Expression (.NET/C# Step Definition)\nDESCRIPTION: Defines a Cucumber Expression step definition in C# using the [When] attribute with a typed parameter. This method allows the framework to extract numeric values from step text (e.g., 'When I have 42 cucumbers in my belly') and pass them as method arguments for use in test logic. Dependencies: Reqnroll (or SpecFlow), .NET test infrastructure. Input: number embedded in Gherkin step; Output: method invoked with corresponding integer.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/cucumber-expressions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\\\"I have {int} cucumbers in my belly\\\")]\npublic void WhenIHaveCucumbersInMyBelly(int count) { ... }\n```\n\n----------------------------------------\n\nTITLE: Transforming DataTable to Collection of Objects in Reqnroll\nDESCRIPTION: This snippet demonstrates converting a Reqnroll DataTable into a collection of Book objects using Reqnroll's Assist Helpers. The transformation will automatically map table columns to properties of the Book class when the step method requires an IEnumerable<Book> parameter.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-argument-conversions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Transforms\n{\n    [StepArgumentTransformation]\n    public IEnumerable<Book> BooksTransform(DataTable booksTable)\n    {\n       return booksTable.CreateSet<Books>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Feature and Tag Scopes with AND Logic in C#\nDESCRIPTION: Shows how to combine the feature name and tag scope with AND logic, requiring both conditions to match for the binding to execute.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Scope(Tag = \"thisTag\", Feature = \"myFeature\")]\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Steps with Catalog Context\nDESCRIPTION: Shows how to use the CatalogContext in step definitions for managing book data.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class BookSteps\n{\n    private readonly CatalogContext _catalogContext;\n\n    public BookSteps(CatalogContext catalogContext)\n    {\n        _catalogContext = catalogContext;\n    }\n\n    [Given(@\"the following books\")]\n    public void GivenTheFollowingBooks(DataTable table)\n    {\n        foreach (var book in table.CreateSet<Book>())\n        {\n            SaveBook(book);\n            _catalogContext.ReferenceBooks.Add(book.Id, book);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reqnroll Output Helper with Dependency Injection in C#\nDESCRIPTION: Shows how to set up the IReqnrollOutputHelper interface in a step definition file through dependency injection. This setup is required to use the output API features.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/output-api.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IReqnrollOutputHelper _reqnrollOutputHelper;\n\npublic CalculatorStepDefinitions(IReqnrollOutputHelper outputHelper)\n{\n    _reqnrollOutputHelper = outputHelper;\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Shared Windsor Container Across Reqnroll Scenarios (C#)\nDESCRIPTION: Shows how to configure scenario-specific Windsor containers to inherit registrations from a pre-existing shared root container (`sharedRootContainer`). By setting the `Parent` property of the newly created container, shared services can be resolved from the root container, while scenario-scoped objects (like `ScenarioContext`) are resolved from the new child container. This promotes sharing of common, long-lived services across multiple scenarios.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/windsor.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ScenarioDependencies]\npublic static IWindsorContainer CreateContainer()\n{\n  var container = new WindsorContainer();\n  container.Parent = sharedRootContainer;\n\n  return container;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Scenarios with Rules in Gherkin\nDESCRIPTION: Demonstrates the usage of the `Rule` keyword to group multiple scenarios that belong to a specific business rule within a feature. This example shows two rules, each containing scenarios illustrating the rule. Tags (`@edge_case`) can also be applied to rules.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\n```gherkin\n:caption: Highlander.feature\nFeature: Highlander\n\n  Rule: There can be only One\n\n    Scenario: Only One -- More than one alive\n      Given there are 3 ninjas\n      And there are more than one ninja alive\n      When 2 ninjas meet, they will fight\n      Then one ninja dies (but not me)\n      And there is one ninja less alive\n\n    Scenario: Only One -- One alive\n      Given there is only 1 ninja alive\n      Then he (or she) will live forever ;-)\n\n  @edge_case\n  Rule: There can be Two (in some cases)\n\n    Scenario: Two -- Dead and Reborn as Phoenix\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Tagged Hook Implementation in C#\nDESCRIPTION: Shows how to implement a hook that only executes for scenarios with specific tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    [BeforeScenario(\"@requiresUsers\")]\n    public void SetupTestUsers()\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Steps for Different Tags in C#\nDESCRIPTION: Shows how to define different implementations of the same step pattern based on tags (@web vs @controller) to support both UI and controller-based testing approaches.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"I perform a simple search on '(.*)'\", Scope(Tag = \"controller\"))]\npublic void WhenIPerformASimpleSearchOn(string searchTerm)\n{\n    var controller = new CatalogController();\n    actionResult = controller.Search(searchTerm);\n}\n\n[When(@\"I perform a simple search on '(.*)'\"), Scope(Tag = \"web\")]\npublic void PerformSimpleSearch(string title)\n{\n    selenium.GoToThePage(\"Home\");\n    selenium.Type(\"searchTerm\", title);\n    selenium.Click(\"searchButton\");\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Registration of [Binding] Step Classes in Autofac (C#)\nDESCRIPTION: This code manually registers all classes in an assembly that are decorated with the [BindingAttribute], ensuring only step definition classes are registered with the dependency injection container as singletons. The code uses LINQ's 'Where' to filter types and highlights a flexible approach for precise registration requirements.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder\n  .RegisterAssemblyTypes(typeof(AnyClassInTheReqnrollProject).Assembly)\n  .Where(t => Attribute.IsDefined(t, typeof(BindingAttribute)))\n  .SingleInstance();\n```\n\n----------------------------------------\n\nTITLE: Combining Feature and Scenario Scopes in a Single Attribute in C#\nDESCRIPTION: Shows how to combine feature and scenario scopes in a single Scope attribute to create an AND relationship between the conditions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Scope(Feature = \"feature title\", Scenario = \"scenario title\")]\n```\n\n----------------------------------------\n\nTITLE: Creating Scenario Dependency Configuration with Microsoft.Extensions.DependencyInjection in C#\nDESCRIPTION: This snippet defines a static method, attributed with [ScenarioDependencies], to configure and register dependencies for SpecFlow scenarios using Microsoft.Extensions.DependencyInjection in C#. The method creates a ServiceCollection, adds a singleton service (IMyService implemented by MyService), and returns the configured IServiceCollection. Step definition classes are auto-registered. Requires Microsoft.Extensions.DependencyInjection v6.0.0+, and the Reqnroll.Microsoft.Extensions.DependencyInjection plugin must be installed. Inputs: none; Outputs: IServiceCollection. Replace 'IMyService, MyService' with your actual dependencies.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/dependency-injection.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SetupTestDependencies\n{\n  [ScenarioDependencies]\n  public static IServiceCollection CreateServices()\n  {\n    var services = new ServiceCollection();\n    \n    // TODO: add your test dependencies here\n    services.AddSingleton<IMyService, MyService>();\n\n    return services;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Background in a Gherkin Feature\nDESCRIPTION: Provides an example of the `Background` keyword in a Gherkin feature file (`MultipleSiteSupport.feature`). `Given` steps within `Background` are executed before each `Scenario` in the feature, setting up a common context or prerequisites for all scenarios.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_9\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Multiple site support\n  Only blog owners can post to a blog, except administrators,\n  who can post to all blogs.\n\n  Background:\n    Given a global administrator named \"Greg\"\n    And a blog named \"Greg's anti-tax rants\"\n    And a customer named \"Dr. Bill\"\n    And a blog named \"Expensive Therapy\" owned by \"Dr. Bill\"\n\n  Scenario: Dr. Bill posts to his own blog\n    Given I am logged in as Dr. Bill\n    When I try to post to \"Expensive Therapy\"\n    Then I should see \"Your article was published.\"\n\n  Scenario: Dr. Bill tries to post to somebody else's blog, and fails\n    Given I am logged in as Dr. Bill\n    When I try to post to \"Greg's anti-tax rants\"\n    Then I should see \"Hey! That's not your blog!\"\n\n  Scenario: Greg posts to a client's blog\n    Given I am logged in as Greg\n    When I try to post to \"Expensive Therapy\"\n    Then I should see \"Your article was published.\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from ScenarioContext.Current in C#\nDESCRIPTION: Shows how to migrate from the obsolete ScenarioContext.Current to dependency injection for accessing ScenarioContext.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scenario-context.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Bindings\n{\n    [Given(@\"I have entered (.*) into the calculator\")]\n    public void GivenIHaveEnteredIntoTheCalculator(int number)\n    {\n        ScenarioContext.Current[\"Number1\"] = number;\n    }\n\n    [BeforeScenario()]\n    public void BeforeScenario()\n    {\n        Console.WriteLine(\"Starting \" + ScenarioContext.Current.ScenarioInfo.Title);\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Bindings\n{\n    private readonly ScenarioContext _scenarioContext;\n\n    public Bindings(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [Given(@\"I have entered (.*) into the calculator\")]\n    public void GivenIHaveEnteredIntoTheCalculator(int number)\n    {\n        _scenarioContext[\"Number1\"] = number;\n    }\n\n    [BeforeScenario()]\n    public void BeforeScenario()\n    {\n        Console.WriteLine(\"Starting \" + _scenarioContext.ScenarioInfo.Title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Context Class Definition for Dependency Injection\nDESCRIPTION: Defines a context class that maintains a collection of reference books. This class is designed to be injected into step definition classes via Reqnroll's dependency injection framework.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/sharing-data-between-bindings.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CatalogContext\n{\n    public CatalogContext()\n    {\n        ReferenceBooks = new ReferenceBookList();\n    }\n\n    public ReferenceBookList ReferenceBooks { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Page Object Class in C#\nDESCRIPTION: A basic C# class implementing the Page Object Model pattern for a single input element.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/page-object-model.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PageObject\n{\n    public IWebElement TxtUrl {get;}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C# Property Aliases with TableAliases Attribute\nDESCRIPTION: Demonstrates defining an `Employee` class in C# where the `Surname` property is decorated with the `[TableAliases]` attribute. This attribute accepts regular expressions (\"Last[]?Name\", \"Family[]?Name\") allowing the property to be matched with various column names like \"Surname\", \"Last Name\", \"Lastname\", \"Family Name\", or \"FamilyName\" in Gherkin DataTables.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n    public string FirstName { get; set; }\n    public string MiddleName { get; set; }\n\n    [TableAliases(\"Last[]?Name\", \"Family[]?Name\")]\n    public string Surname { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: TestRun Hook with Dependency Injection\nDESCRIPTION: Demonstrates using dependency injection in TestRun-level hooks.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[BeforeTestRun]\npublic static void BeforeTestRunInjection(ITestRunnerManager testRunnerManager)\n{\n    //All parameters are resolved from the test run (global) container automatically.\n    var location = testRunnerManager.TestAssembly.Location;\n}\n```\n\n----------------------------------------\n\nTITLE: WebDriver Page Hooks with Ninject\nDESCRIPTION: Shows how to implement hooks using Ninject for WebDriver management with proper setup and cleanup.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class WebDriverPageHooks\n{\n    private readonly IKernel _kernel;\n\n    // Inject in our container (using Ninject here)\n    public WebDriverPageHooks(IKernel kernel)\n    { _kernel = kernel; }\n    \n    private IWebDriver SetupWebDriver()\n    {\n        var options = new ChromeOptions();\n        options.AddArgument(\"--start-maximized\");\n        options.AddArgument(\"--disable-notifications\");\n        return new ChromeDriver(options);\n    }\n\n    [BeforeScenario]\n    public void BeforeScenario()\n    {\n        var webdriver = SetupWebDriver();        \n        _kernel.Bind<IWebDriver>().ToConstant(webdriver);\n    }\n\n    [AfterScenario]\n    public void AfterScenario()\n    {\n        var webDriver = _kernel.Get<IWebDriver>();\n        \n        // Output any screenshots or log dumps etc\n        \n        webDriver.Close();\n        webDriver.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Price Calculation Method in C#\nDESCRIPTION: This snippet completes the CalculatePrice method in the PriceCalculator class by adding support for calculating the total price from multiple items in the basket, using their respective quantities and unit prices. The method now iterates over all basket items and updates the total price.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PriceCalculator\n{\n    [...]\n\n    public decimal CalculatePrice(Dictionary<string, int> basket)\n    {\n        decimal price = 0;\n        foreach (var item in basket)\n        {\n            price += _priceTable[item.Key] * item.Value;\n        }\n        return price;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CreateInstance with ValueTuple in C#\nDESCRIPTION: Example showing how to use the CreateInstance method with C# ValueTuples instead of classes. When using tuples, the parameter names don't matter for mapping, but the number and types must match.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Given(@\"Given I entered the following data into the new account form:\")]\npublic void GivenIEnteredTheFollowingDataIntoTheNewAccountForm(DataTable table)\n{\n    var account = table.CreateInstance<(string name, DateTime birthDate, int heightInInches, decimal bankAccountBalance)>();\n\n    // account.name is \"John Galt\"\n    // account.heightInInches is 72\n    // account.bankAccountBalance is 1234.56\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Data Table in PriceCalculationStepDefinitions\nDESCRIPTION: This C# code snippet demonstrates how to handle a Gherkin Data Table in a step definition by converting it into a strongly typed list using CreateSet. The converted list is then used to populate a basket dictionary.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[...]\npublic class PriceCalculationStepDefinitions\n{\n    [...]\n\n    [Given(\"the client added\")]\n    public void GivenTheClientAdded(DataTable itemsTable)\n    {\n        var items = itemsTable.CreateSet<(string Product, int Quantity)>();\n        foreach (var item in items)\n        {\n            _basket.Add(item.Product, item.Quantity);\n        }\n    }\n\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Using And/But for Fluent Gherkin Steps\nDESCRIPTION: Illustrates replacing repetitive `Given`, `When`, or `Then` keywords with `And` and `But` for improved readability and flow in Gherkin scenarios. This makes the feature file read more naturally by connecting sequential steps of the same type.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Multiple Givens\n  Given one thing\n  And another thing\n  And yet another thing\n  When I open my eyes\n  Then I should see something\n  But I shouldn't see something else\n```\n\n----------------------------------------\n\nTITLE: Defining Sequential Gherkin Steps\nDESCRIPTION: Demonstrates writing a Gherkin scenario using successive `Given`, `When`, and `Then` keywords without alternatives like `And` or `But`. This structure clearly separates setup, action, and verification steps, though it can sometimes be verbose for multiple similar steps.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Multiple Givens\n  Given one thing\n  Given another thing\n  Given yet another thing\n  When I open my eyes\n  Then I should see something\n  Then I shouldn't see something else\n```\n\n----------------------------------------\n\nTITLE: Implementing Scenario Skip in Reqnroll Step Definitions\nDESCRIPTION: Demonstrates how to inject and use IUnitTestRuntimeProvider to programmatically skip scenarios in step definitions. The example shows a binding class that uses TestIgnore method to skip scenario execution. Note that behavior may vary across different test runners (xUnit, NUnit, MSTest).\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/skipping-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic sealed class StepDefinitions\n{\n    private readonly IUnitTestRuntimeProvider _unitTestRuntimeProvider;\n\n    public CalculatorStepDefinitions(IUnitTestRuntimeProvider unitTestRuntimeProvider)\n    {\n        _unitTestRuntimeProvider = unitTestRuntimeProvider;\n    }\n\n    [When(\"your binding\")]\n    public void YourBindingMethod()\n    {\n        _unitTestRuntimeProvider.TestIgnore(\"This scenario is always skipped\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Matching Step Definitions in C#\nDESCRIPTION: C# step definitions implementing the collection matching scenarios using LINQ operations. Uses ToProjection and LINQ methods like Except and SequenceEqual to compare collections based on both content and order.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MusicCollectionSteps\n{\n    ScenarioContext _scenarioContext;\n\n    public MusicCollectionSteps(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [When(@\"I have a music collection\")]\n    public void WhenIHaveAMusicCollection(DataTable table)\n    {\n        var collection = table.CreateSet<Item>();\n\n        _scenarioContext.Add(\"Collection\", collection);\n    }\n\n    [Then(@\"it should match\")]\n    public void ThenItShouldMatch(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n    \n        Assert.IsTrue(table.RowCount == collection.Count() && table.ToProjection<Item>().Except(collection.ToProjection()).Count() == 0);\n    }\n\n    [Then(@\"it should exactly match\")]\n    public void ThenItShouldExactlyMatch(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n\n        Assert.IsTrue(table.ToProjection<Item>().SequenceEqual(collection.ToProjection()));\n    }\n\n    [Then(@\"it should not match\")]\n    public void ThenItShouldNotMatch(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n    \n        Assert.IsFalse(table.RowCount == collection.Count() && table.ToProjection<Item>().Except(collection.ToProjection()).Count() == 0);\n    }\n\n    [Then(@\"it should not exactly match\")]\n    public void ThenItShouldNotExactlyMatch(DataTable table)\n    {\n        var collection = _scenarioContext[\"Collection\"] as IEnumerable<Item>;\n    \n        Assert.IsFalse(table.ToProjection<Item>().SequenceEqual(collection.ToProjection()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scenario Outline and Examples in Gherkin\nDESCRIPTION: Demonstrates the `Scenario Outline` keyword (synonym: `Scenario Template`) with an `Examples` table in Gherkin. This allows running the same scenario logic multiple times with different data sets defined in the table rows, using `<>` delimited parameters (`<start>`, `<eat>`, `<left>`) which are substituted before step matching.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_12\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario Outline: eating\n  Given there are <start> cucumbers\n  When I eat <eat> cucumbers\n  Then I should have <left> cucumbers\n\n  Examples:\n    | start | eat | left |\n    |    12 |   5 |    7 |\n    |    20 |   5 |   15 |\n```\n\n----------------------------------------\n\nTITLE: Async Parameter Injection in Hooks\nDESCRIPTION: Shows parameter injection in async hook methods.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    [BeforeScenario]\n    public async Task SetupTestUsersAsync(ScenarioContext scenarioContext)\n    {\n        //scenarioContext...\n        // Example async operation\n        await Task.Delay(1000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Before/AfterFeature Hooks with FeatureContext in Reqnroll (C#)\nDESCRIPTION: This code snippet shows how to implement BeforeFeature and AfterFeature hooks in Reqnroll, accessing FeatureContext as a parameter. It demonstrates logging the feature title at the start and end of feature execution.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/feature-context.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Hooks\n{\n    [BeforeFeature]\n    public static void BeforeFeature(FeatureContext featureContext)\n    {\n        Console.WriteLine(\"Starting \" + featureContext.FeatureInfo.Title);\n    }\n\n    [AfterFeature]\n    public static void AfterFeature(FeatureContext featureContext)\n    {\n        Console.WriteLine(\"Finished \" + featureContext.FeatureInfo.Title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CompareToSet<T> with Order Enforcement in C#\nDESCRIPTION: Illustrates calling the `CompareToSet<T>` method with the optional second argument set to `true`. This modification enforces that the order of items in the C# collection (`accounts`) must exactly match the order of rows in the Gherkin `DataTable`, in addition to comparing property values. An exception is thrown if either the values or the order do not match.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\ntable.CompareToSet<Account>(accounts, true);\n//                                    ^^^^\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Model Class for Set Comparison\nDESCRIPTION: Defines an `Account` class in C# with `Id`, `FirstName`, `LastName`, and `MiddleName` properties. This class is used as the data model when comparing a collection of objects against a Reqnroll `DataTable` using the `CompareToSet<T>` helper method.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Account\n{\n    public string Id { get; set;}\n    public string FirstName { get; set;}\n    public string LastName { get; set;}\n    public string MiddleName { get; set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tag-Scoped BeforeScenario Hook in C#\nDESCRIPTION: Demonstrates how to create a BeforeScenario hook that only executes for scenarios tagged with @web, showing a simplified syntax for tag scoping.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[BeforeScenario(\"web\")]\npublic static void BeforeWebScenario()\n{\n    StartSelenium();\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom ILifetimeScope from Application Container (C#)\nDESCRIPTION: This code illustrates advanced usage where a user-supplied Autofac lifetime scope is used for feature-level dependencies, allowing integration with custom or external application containers. The method tagged with [FeatureDependencies] returns an Autofac ILifetimeScope, while a separate [ScenarioDependencies] method ensures step bindings are registered for scenario execution. Be aware of Reqnroll's nested lifetime scope when using this pattern.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[FeatureDependencies]\npublic static ILifetimeScope GetFeatureLifetimeScope()\n{\n    // TODO: Add any top-level dependencies here, though note that usually step bindings\n\t//       should be declared in the Configure method below, as this will ensure they\n\t//       are in the correct scope to inject ScenarioContext etc.\n    return containerScope.BeginLifetimeScope();\n}\n\n[ScenarioDependencies]\npublic static void ConfigureContainerBuilder(ContainerBuilder containerBuilder)\n{\n    //TODO: add customizations, stubs required for testing\n    containerBuilder.AddReqnrollBindings<SetupTestDependencies>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Parsing Styles in Reqnroll Hooks\nDESCRIPTION: Shows how to customize the date/time parsing behavior of Reqnroll's built-in `DateTimeValueRetriever`. By setting the static `DateTimeStyles` property within a `[BeforeTestRun]` hook, users can control how string values from DataTables are converted into `DateTime` objects, for instance, by adjusting UTC handling.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic static class Hooks1\n{\n    [BeforeTestRun]\n    public static void BeforeTestRun()\n    {\n        DateTimeValueRetriever.DateTimeStyles = DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scenario Examples in C# Step Definitions\nDESCRIPTION: Shows how to access the current set of arguments from scenario examples in C# step definitions using ScenarioInfo.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scenario-context.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScenarioExamplesDemo\n{\n    private ScenarioInfo _scenarioInfo;\n\n    public ScenarioExamplesDemo(ScenarioInfo scenarioInfo)\n    {\n        _scenarioInfo = scenarioInfo;\n    }\n\n    [When(@\"I use examples in my scenario\")]\n    public void IUseExamplesInMyScenario() {}\n\n    [Then(@\"the examples are available in ScenarioInfo\")]\n    public void TheExamplesAreAvailableInScenarioInfo()\n    {\n        var currentArguments = _scenarioInfo.Arguments;\n        var currentSport = currentArguments[\"Sport\"];\n        var currentTeamSize = currentArguments[\"TeamSize\"];\n        Console.WriteLine($\"The current sport is {currentSport}\");\n        Console.WriteLine($\"The current sport allows teams of {currentTeamSize} players\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Plugin Registration\nDESCRIPTION: Example of registering a runtime plugin class using the RuntimePlugin attribute in C#\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: RuntimePlugin(typeof(MyNewPlugin))]\n```\n\n----------------------------------------\n\nTITLE: Driver Class Implementation\nDESCRIPTION: Implementation of the Driver class containing the actual automation logic, moved from the step definition to promote reusability and maintainability.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/driver-pattern.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmissionPageDriver\n{\n    // ...\n\n    public void CheckExistenceOfInputElement(string inputType, string expectedLabel)\n    {\n        var submissionPageObject = new SubmissionPageObject(webDriverDriver);\n\n        switch (inputType.ToUpper())\n        {\n            case \"URL\":\n                submissionPageObject.UrlWebElement.Should().NotBeNull();\n                submissionPageObject.UrlLabel.Should().Be(expectedLabel);\n                break;\n            case \"TYPE\":\n                submissionPageObject.TypeWebElement.Should().NotBeNull();\n                submissionPageObject.TypeLabel.Should().Be(expectedLabel);\n                break;\n            default:\n                throw new NotImplementedException(inputType + \" not implemented\");\n        }\n    }\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Accessing ScenarioInfo in C# Step Definitions\nDESCRIPTION: Demonstrates how to access ScenarioInfo properties in C# step definitions, including title, tags, and combined tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scenario-context.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class ScenarioInformation\n{\n    public string Title { get; set; }\n    public string[] Tags { get; set; }\n    public string[] CombinedTags { get; set; }\n}\n\n[When(@\"I execute any scenario\")]\npublic void ExecuteAnyScenario(){}\n\n[Then(@\"the ScenarioInfo contains the following information\")]\npublic void ScenarioInfoContainsInterestingInformation(DataTable table)\n{\n    // Create our small DTO for the info from the step\n    var fromStep = table.CreateInstance<ScenarioInformation>();\n    fromStep.Tags =  table.Rows[0][\"Value\"].Split(',');\n\n    // Short-hand to the scenarioInfo\n    var si = _scenarioContext.ScenarioInfo;\n\n    // Assertions\n    si.Title.Should().Equal(fromStep.Title);\n    si.Tags.Should().BeEquivalentTo(fromStep.Tags);\n    si.CombinedTags.Should().BeEquivalentTo(fromStep.CombinedTags);\n}\n```\n\n----------------------------------------\n\nTITLE: Async Static Feature Hooks\nDESCRIPTION: Shows implementation of async static feature-level hooks with parameter injection.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Hooks\n{\n    [BeforeFeature]\n    public static async Task SetupStuffForFeaturesAsync(FeatureContext featureContext)\n    {\n        // Example async operation\n        await Task.Delay(1000);\n        Console.WriteLine(\"Starting \" + featureContext.FeatureInfo.Title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Data Using Instance Fields in Reqnroll Step Definitions\nDESCRIPTION: Demonstrates using instance fields to share data between step definitions within a search functionality test scenario. The example shows storing and accessing an MVC ActionResult between When and Then steps.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/sharing-data-between-bindings.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class SearchSteps\n{\n    private ActionResult actionResult;\n\n    [When(@\"I perform a simple search on '(.*)'\")]\n    public void WhenIPerformASimpleSearchOn(string searchTerm)\n    {\n        var controller = new CatalogController();\n        actionResult = controller.Search(searchTerm);\n    }\n\n    [Then(@\"the book list should exactly contain book '(.*)'\")]\n    public void ThenTheBookListShouldExactlyContainBook(string title)\n    {\n         var books = actionResult.Model<List<Book>>();\n         CustomAssert.Any(books, b => b.Title == title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Data Conversion Step Definition\nDESCRIPTION: Step definition showing how to convert table data into single instance or collection of objects.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n    [Given(@\"I have the following people\")]\n    public void x(DataTable table)\n    {\n        var person = table.CreateInstance<Person>();\n        // OR\n        var people = table.CreateSet<Person>();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Color Theme in Reqnroll Test Hooks\nDESCRIPTION: Demonstrates how to customize the test output colors by implementing a BeforeTestRun hook and configuring the IColorOutputTheme. Shows setting custom colors for keywords, errors, and success messages using ANSI color codes and RGB hex values.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/color-output.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Hooks\n{\n    [BeforeTestRun]\n    public static void ConfigureColor(IColorOutputTheme colorOutputTheme)\n    {\n        colorOutputTheme.Keyword = AnsiColor.Reset;\n        colorOutputTheme.Error = AnsiColor.Composite(AnsiColor.Bold, AnsiColor.Foreground(TerminalRgbColor.FromHex(\"FF8EF3\")));\n        colorOutputTheme.Done = AnsiColor.Foreground(TerminalRgbColor.FromHex(\"3A86FF\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Before Implementation - Direct Step Definition\nDESCRIPTION: Original implementation showing step definition directly containing automation logic using Page Object Model, checking WebElement existence and labels.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/driver-pattern.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Then(@\"it is possible to enter a '(.*)' with label '(.*)'\")] \npublic void ThenItIsPossibleToEnterAWithLabel(string inputType, string expectedLabel)\n{\n    var submissionPageObject = new SubmissionPageObject(webDriverDriver);\n\n    switch (inputType.ToUpper())\n    {\n        case \"URL\":\n            submissionPageObject.UrlWebElement.Should().NotBeNull();\n            submissionPageObject.UrlLabel.Should().Be(expectedLabel);\n            break;\n        case \"TYPE\":\n            submissionPageObject.TypeWebElement.Should().NotBeNull();\n            submissionPageObject.TypeLabel.Should().Be(expectedLabel);\n            break;\n        default:\n            throw new NotImplementedException(inputType + \" not implemented\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gherkin Scenario with Price Calculation Feature\nDESCRIPTION: The updated PriceCalculation.feature file in Gherkin includes both a simple basket and multiple items scenario under a rule about calculating basket prices. It depends on the 'Given', 'When', and 'Then' Gherkin steps to be defined elsewhere in the project.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Price calculation\n[...]\nRule: The price for a basket with items can be calculated based on the item prices\n\nScenario: Client has a simple basket\n[...]\n\nScenario: Client has multiple items in their basket\n    Given the client started shopping\n    And the client added\n        | product         | quantity |\n        | Electric guitar | 1        |\n        | Guitar pick     | 10       |\n    When the basket is prepared\n    Then the basket price should be $195.0\n```\n\n----------------------------------------\n\nTITLE: Async TestRun Hook with Dependency Injection\nDESCRIPTION: Shows implementation of async TestRun-level hooks with dependency injection.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[BeforeTestRun]\npublic static async Task BeforeTestRunInjectionAsync(ITestRunnerManager testRunnerManager)\n{\n    var location = testRunnerManager.TestAssembly.Location;\n\n    // Example async operation\n    await Task.Delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Clarifying Step Language for Uniqueness in Gherkin\nDESCRIPTION: Provides an example of improved, less ambiguous step phrasing to avoid the duplicate step issue shown previously. This encourages using a clearer domain language that precisely describes the context or outcome, ensuring unique step definitions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n```gherkin\n:caption: Feature File\nGiven my account has a balance of £430\nThen my account should have a balance of £430\n```\n```\n\n----------------------------------------\n\nTITLE: Value Retriever Registration Hook\nDESCRIPTION: Example of how to register a custom value retriever using test hooks.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\n[Binding]\npublic static class Hooks\n{\n    [BeforeTestRun]\n    public static void BeforeTestRun()\n    {\n        Service.Instance.ValueRetrievers.Register(new MyCustomValueRetriever());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Input Element\nDESCRIPTION: An HTML snippet showing a basic input element with id and name attributes.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/page-object-model.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"txtUrl\" name=\"Url\" type=\"text\" value=\"\">\n```\n\n----------------------------------------\n\nTITLE: Parameter Injection in Hooks\nDESCRIPTION: Demonstrates parameter injection in hook methods for accessing ScenarioContext.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    [BeforeScenario]\n    public void SetupTestUsers(ScenarioContext scenarioContext)\n    {\n        //scenarioContext...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing FeatureContext in Reqnroll Bindings (C#)\nDESCRIPTION: This snippet demonstrates how to access FeatureContext in Reqnroll bindings using dependency injection. It shows the structure of a binding class that receives FeatureContext as a constructor parameter.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/feature-context.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Binding\n{\n    private FeatureContext _featureContext;\n\n    public Binding(FeatureContext featureContext)\n    {\n        _featureContext = featureContext;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous When Step in C#\nDESCRIPTION: This code snippet demonstrates how to create an asynchronous When step definition in Reqnroll. It uses the async and await keywords to handle an asynchronous HTTP GET request.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/asynchronous-bindings.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"I want to get the web page '(.*)'\")]\npublic async Task WhenIWantToGetTheWebPage(string url)\n{\n    var message = await _httpClient.GetAsync(url);\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering [Binding] Step Classes via AddReqnrollBindings Generic Extension (C#)\nDESCRIPTION: This snippet showcases how to use the 'AddReqnrollBindings' generic extension to automatically register all step definition classes marked with the [Binding] attribute from a specified type's assembly. This is commonly used in the scenario dependencies registration phase and reduces the manual work of binding class registration.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncontainerBuilder.AddReqnrollBindings<AnyClassInTheReqnrollProject>()\n```\n\n----------------------------------------\n\nTITLE: Configuring External Binding Assemblies in reqnroll.json\nDESCRIPTION: This JSON configuration example demonstrates how to register an external assembly (SharedStepDefinitions) as a binding source in the reqnroll.json configuration file. The configuration uses the bindingAssemblies array to specify external assemblies that contain step definitions, hooks, or step argument transformations.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/bindings-from-external-assemblies.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n\n  \"bindingAssemblies\": [\n    { \n      \"assembly\": \"SharedStepDefinitions\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Scenario for FeatureInfo in Reqnroll (Gherkin)\nDESCRIPTION: This Gherkin snippet defines a scenario to demonstrate the usage of FeatureInfo in Reqnroll. It specifies steps to execute a scenario and verify the contents of FeatureInfo, including tags, title, target language, and description.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/feature-context.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Showing information of the feature\n\nWhen I execute any scenario in the feature\nThen the FeatureInfo contains the following information\n    | Field          | Value                               |\n    | Tags           | showUpInScenarioInfo, andThisToo    |\n    | Title          | FeatureContext features             |\n    | TargetLanguage | CSharp                              |\n    | Language       | en-US                               |\n    | Description    | In order to                         |\n```\n\n----------------------------------------\n\nTITLE: Configuring NUnit Feature-Level Parallelization\nDESCRIPTION: Assembly-level attribute configuration to enable feature-level parallel test execution in NUnit. Uses ParallelScope.Fixtures to run features in parallel.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/parallel-execution.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\n[assembly: Parallelizable(ParallelScope.Fixtures)]\n```\n\n----------------------------------------\n\nTITLE: Gherkin Feature Steps Matching Various Cucumber Expression Forms\nDESCRIPTION: Shows example Gherkin steps that will be correctly matched by a step definition using optionals and alternatives in its Cucumber Expression. Demonstrates practical usage scenarios where different pluralizations and alternative phrases are handled. No dependencies, just serves as feature file examples. Inputs: human-readable step text; outputs: matched step definitions invoked during test runs.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/cucumber-expressions.md#2025-04-22_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\nWhen I have 42 cucumbers in my belly\nWhen I have 1 cucumber in my belly\nWhen I have 8 cucumbers in my tummy\n```\n\n----------------------------------------\n\nTITLE: Static Feature Hooks with Parameter Injection\nDESCRIPTION: Example of using parameter injection in static feature-level hooks.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Hooks\n{\n    [BeforeFeature]\n    public static void SetupStuffForFeatures(FeatureContext featureContext)\n    {\n        Console.WriteLine(\"Starting \" + featureContext.FeatureInfo.Title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Data Source with Nested Array - Gherkin\nDESCRIPTION: This Gherkin scenario shows how to configure a scenario to source data from a nested object array within a JSON file, targeting the 'varieties' array inside 'products' using the @DataSet:products.varieties tag. The @DataSource:products-nested-dataset.json tag specifies the file, and the parameterization uses values from the nested array for placeholders. Required: Reqnroll and a JSON file with the specified structure. Parameters include 'product' and 'price', which are injected from the nested array entries. The scenario validates that the basket price matches expected data from the JSON.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/externaldata.md#2025-04-22_snippet_1\n\nLANGUAGE: Gherkin\nCODE:\n```\n@DataSource:products-nested-dataset.json @DataSet:products.varieties\\nScenario: The basket price is calculated correctly for products.varieties in nested products json\\n\\tGiven the price of <product> is €<price>\\n\\tAnd the customer has put 1 pcs of <product> to the basket\\n\\tWhen the basket price is calculated\\n\\tThen the basket price should be €<price>\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Gherkin Scenarios for Collection Matching in Reqnroll\nDESCRIPTION: A Gherkin feature file defining various collection matching scenarios to test equality between a music collection and expected sets. It includes tests for exact matching, order-independent matching, and negative matching cases.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_27\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Matching music collections\n    When I have a music collection\n        | Artist     | Album       |\n        | Beatles    | Rubber Soul |\n        | Pink Floyd | Animals     |\n        | Muse       | Absolution  |\n    Then it should match\n        | Artist     | Album       |\n        | Beatles    | Rubber Soul |\n        | Pink Floyd | Animals     |\n        | Muse       | Absolution  |\n    And it should match\n        | Artist     | Album       |\n        | Beatles    | Rubber Soul |\n        | Muse       | Absolution  |\n        | Pink Floyd | Animals     |\n    And it should exactly match\n        | Artist     | Album       |\n        | Beatles    | Rubber Soul |\n        | Pink Floyd | Animals     |\n        | Muse       | Absolution  |\n    But it should not match\n        | Artist  | Album       |\n        | Beatles | Rubber Soul |\n        | Queen   | Jazz        |\n        | Muse    | Absolution  |\n    And it should not match\n        | Artist  | Album       |\n        | Beatles | Rubber Soul |\n        | Muse    | Absolution  |\n    And it should not exactly match\n        | Artist     | Album       |\n        | Beatles    | Rubber Soul |\n        | Muse       | Absolution  |\n        | Pink Floyd | Animals     |\n```\n\n----------------------------------------\n\nTITLE: InstanceCreationOptions Class in C#\nDESCRIPTION: Definition of the InstanceCreationOptions class used to configure the behavior of CreateInstance<T> and CreateSet<T> methods. Options control validation and constructor selection behavior.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class InstanceCreationOptions\n{\n    public bool VerifyAllColumnsBound { get; set; }\n    public bool RequireTableToProvideAllConstructorParameters { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Manual Test Scenarios with Empty Step Implementations in C#\nDESCRIPTION: Demonstrates a technique to create empty step implementations for scenarios tagged with @manual, allowing them to be displayed in traces without execution.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding, Scope(Tag = \"manual\")]\npublic class ManualSteps\n{\n    [Given(\".*\"), When(\".*\"), Then(\".*\")]\n    public void EmptyStep()\n    {\n    }\n\n    [Given(\".*\"), When(\".*\"), Then(\".*\")]\n    public void EmptyStep(string multiLineStringParam)\n    {\n    }\n\n    [Given(\".*\"), When(\".*\"), Then(\".*\")]\n    public void EmptyStep(DataTable tableParam)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex POCO Class Definition\nDESCRIPTION: Example of a more complex C# class structure with nested objects requiring custom value retriever.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n    public class Shirt\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public Color Color { get; set; }\n    }\n\n    public class Color\n    {\n        public string Name { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using ScenarioContext.StepIsPending Helper Method in C#\nDESCRIPTION: Illustrates using the ScenarioContext.StepIsPending() helper method to mark a step as pending. This is a cleaner alternative to throwing PendingStepException directly.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/mark-steps-as-not-implemented.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I set the current ScenarioContext to pending\")]\npublic void WhenIHaveAPendingStep()\n{\n    ScenarioContext.StepIsPending();\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyAllColumnsBound Option\nDESCRIPTION: Example showing how to use the VerifyAllColumnsBound option with CreateInstance<T> to verify that all columns in the DataTable can be bound to properties in the target class.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\ntable.CreateInstance<Person>(new InstanceCreationOptions { VerifyAllColumnsBound = true });\n```\n\n----------------------------------------\n\nTITLE: Filtering Scenarios with Multiple Tags per Scenario in Gherkin\nDESCRIPTION: A feature file example showing scenarios with multiple tags (@done @important) and feature-level tags (@US123), which can be used to demonstrate filtering by multiple tags on a single scenario.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\n@US123\nFeature: Breakfast\n\n@done @important\nScenario: Eating cucumbers\n  Given there are 12 cucumbers\n  When I eat 5 cucumbers\n  Then I should have 7 cucumbers\n\n@automated\nScenario: Use all the sugar\n  Given there is some sugar in the cup\n  When I put all the sugar to my coffee\n  Then the cup is empty\n```\n\n----------------------------------------\n\nTITLE: Using CurrentScenarioBlock in C# Step Definitions\nDESCRIPTION: Shows how to use ScenarioContext.CurrentScenarioBlock to query the type of step (Given, When, or Then) in C# step definitions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scenario-context.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Given(\"I have a (.*) step\")]\n[Given(\"I have another (.*) step\")]\n[When(\"I have a (.*) step\")]\n[Then(\"I have a (.*) step\")]\npublic void ReportStepTypeName(string expectedStepType)\n{\n    var stepType = _scenarioContext.CurrentScenarioBlock.ToString();\n    stepType.Should().Equal(expectedStepType);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Model Class for DataTable Comparison\nDESCRIPTION: Defines a simple `Person` class in C# with `FirstName`, `LastName`, and `YearsOld` properties. This class serves as the data model for comparison against a Reqnroll `DataTable` using the `CompareToInstance<T>` helper method.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public string FirstName { get; set;}  \n    public string LastName { get; set; }\n    public int YearsOld { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definitions with Verify in C#\nDESCRIPTION: This C# snippet provides step definitions for the Gherkin scenario. It uses VerifySettings to manage configuration and Verify to check the test result. Important parameters are integers representing the calculations in the scenario, and the outcome is a verified integer result. The VerifySettings must be injected in multithreaded environments to ensure deterministic results.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/verify.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\ninternal class StepDefinitions\n{\n    private readonly VerifySettings _settings;\n    private int _result;\n\n    public StepDefinitions(VerifySettings settings)\n    {\n        _settings = settings;\n    }\n    \n    [When(\"I calculate (\\d+) + (\\d+)\")]\n    public void WhenICalculate(int v1, int v2)\n    {\n        _result = v1 + v2; // simulate calling the SUT to get the result\n    }\n    \n    [Then(\"I expect the result is correct\")]\n    public void ThenIExpectTheResultIsCorrect()\n    {\n        Verifier.Verify(_result, _settings);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing MsTest TestContext in Static BeforeTestRun/AfterTestRun Hooks - C#\nDESCRIPTION: Shows how to utilize parameter injection for TestContext in static BeforeTestRun and AfterTestRun hooks in Reqnroll with C#. This is useful for one-time setup or teardown logic with access to MSTest test environment details. Requires MSTest and Reqnroll hooks support and Microsoft.VisualStudio.TestTools.UnitTesting.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n[Binding]\npublic class Hooks\n{\n    [BeforeTestRun]\n    public static void BeforeTestRun(TestContext testContext)\n    {\n        //you can access the TestContext injected as parameter\n        testContext.WriteLine(testContext.TestRunDirectory);\n    }\n\n    [AfterTestRun]\n    public static void AfterTestRun(TestContext testContext)\n    {\n        //you can access the TestContext injected as parameter\n        testContext.WriteLine(testContext.DeploymentDirectory);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Background within a Gherkin Rule\nDESCRIPTION: Illustrates the use of the `Background` keyword nested within a `Rule` block in a Gherkin feature file (`OverdueTasks.feature`). These `Given` steps run before each `Scenario` defined within that specific `Rule`, allowing for context setup scoped to a subset of scenarios within a feature.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_10\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Overdue tasks\n  Let users know when tasks are overdue, even when using other\n  features of the app\n\n  Rule: Users are notified about overdue tasks on first use of the day\n    Background:\n      Given I have overdue tasks\n\n    Scenario: First use of the day\n      Given I last used the app yesterday\n      When I use the app\n      Then I am notified about overdue tasks\n\n    Scenario: Already used today\n      Given I last used the app earlier today\n      When I use the app\n      Then I am not notified about overdue tasks\n  ...\n```\n\n----------------------------------------\n\nTITLE: Writing Repetitive Gherkin Scenarios\nDESCRIPTION: Shows two similar Gherkin scenarios with slight variations in data values (`12`/`7` vs `20`/`15` cucumbers), highlighting the repetition that `Scenario Outline` aims to reduce. This serves as a counter-example to demonstrate the need for templating when testing the same logic with different inputs.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_11\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: eat 5 out of 12\n  Given there are 12 cucumbers\n  When I eat 5 cucumbers\n  Then I should have 7 cucumbers\n\nScenario: eat 5 out of 20\n  Given there are 20 cucumbers\n  When I eat 5 cucumbers\n  Then I should have 15 cucumbers\n```\n\n----------------------------------------\n\nTITLE: Creating Catalog Context Class\nDESCRIPTION: Defines a context class for storing book references with initialization logic.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CatalogContext\n{\n    public CatalogContext()\n    {\n        ReferenceBooks = new ReferenceBookList();\n    }\n\n    public ReferenceBookList ReferenceBooks { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Scope Attribute with Multiple Criteria in C#\nDESCRIPTION: Demonstrates how to define a Scope attribute with multiple criteria (tag, feature, and scenario). When multiple criteria are specified in a single Scope attribute, they are combined with AND logic.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Scope(Tag = \"mytag\", Feature = \"feature title\", Scenario = \"scenario title\")]\n```\n\n----------------------------------------\n\nTITLE: Defining a C# Model with a Custom Type (Color)\nDESCRIPTION: Defines a `Shirt` class in C# that includes a `Name` property (string) and a `Color` property of a custom `Color` type (presumably defined elsewhere). This setup is used to illustrate how to handle custom types in DataTable transformations using Reqnroll extensions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Shirt\n{\n    public string Name { get; set; }\n    public Color Color { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataTable with Multiple Rows in Gherkin\nDESCRIPTION: Example of a horizontal DataTable format with multiple data rows, suitable for mapping to collections of objects using CreateSet<T>.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven these products exist\n    | Sku   | Name             | Price |\n    | BOOK1 | Atlas Shrugged   | 25.04 |\n    | BOOK2 | The Fountainhead | 20.15 |\n```\n\n----------------------------------------\n\nTITLE: Implementation of Global and Scenario Dependency Builder Methods (C#)\nDESCRIPTION: This example defines a 'SetupTestDependencies' class containing both global and scenario DI configuration methods tagged with [GlobalDependencies] and [ScenarioDependencies]. The methods demonstrate registering global runtime services and scenario-specific services (with Autofac types), and inclusion of step binding registration. The static methods are required by the Reqnroll plugin architecture for proper DI lifecycle management.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SetupTestDependencies\n{\n  [GlobalDependencies]\n  public static void SetupGlobalContainer(ContainerBuilder containerBuilder)\n  {\n    // Register globally scoped runtime dependencies\n    containerBuilder\n      .RegisterType<MyGlobalService>()\n      .As<IMyGlobalService>()\n      .SingleInstance();\n  }\n\n  [ScenarioDependencies]\n  public static void SetupScenarioContainer(ContainerBuilder containerBuilder)\n  {\n    // Register scenario scoped runtime dependencies\n    containerBuilder\n      .RegisterType<MyService>()\n      .As<IMyService>()\n      .SingleInstance();\n\n    // register binding classes\n    containerBuilder.AddReqnrollBindings<SetupTestDependencies>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gherkin Scenarios for Collection Containment in Reqnroll\nDESCRIPTION: A Gherkin feature file defining scenarios to test containment relationships between collections, including checking if a collection contains all items from another or contains none of the items from another collection.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_29\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Containment\n    When I have a music collection\n        | Artist     | Album       |\n        | Beatles    | Rubber Soul |\n        | Pink Floyd | Animals     |\n        | Muse       | Absolution  |\n    Then it should contain all items\n        | Artist  | Album       |\n        | Beatles | Rubber Soul |\n        | Muse    | Absolution  |\n    But it should not contain all items\n        | Artist  | Album       |\n        | Beatles | Rubber Soul |\n        | Muse    | Resistance  |\n    And it should not contain any of items\n        | Artist  | Album      |\n        | Beatles | Abbey Road |\n        | Muse    | Resistance |\n```\n\n----------------------------------------\n\nTITLE: Implementing Price Calculation in C#\nDESCRIPTION: This C# snippet defines a simple PriceCalculator class containing a hard-coded dictionary of item prices and a CalculatePrice method, which currently throws a NotImplementedException. It requires no external dependencies and serves as the basis for calculating prices in a shopping basket, expecting input as a dictionary of items and their quantities.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ReqnrollQuickstart.App;\n\npublic class PriceCalculator\n{\n    // the item prices are hard coded for now\n    private readonly Dictionary<string, decimal> _priceTable = new()\n    {\n        { \"Electric guitar\", 180.0 },\n        { \"Guitar pick\", 1.5 }\n    };\n\n    public decimal CalculatePrice(Dictionary<string, int> basket)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Gherkin Step for Skeleton Generation (Gherkin)\nDESCRIPTION: This line shows an example Gherkin step written in a feature file: `When I have 42 cucumbers in my belly`. This step is used to illustrate the kind of step definition skeleton Reqnroll might generate by default.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_10\n\nLANGUAGE: gherkin\nCODE:\n```\nWhen I have 42 cucumbers in my belly\n```\n\n----------------------------------------\n\nTITLE: Filtering Scenarios with Single Tag in Gherkin Feature File\nDESCRIPTION: A feature file example showing two scenarios where one has a @done tag and one has no tags, which can be used to demonstrate filtering by a single tag.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Breakfast\n\n@done\nScenario: Eating cucumbers\n  Given there are 12 cucumbers\n  When I eat 5 cucumbers\n  Then I should have 7 cucumbers\n\nScenario: Use all the sugar\n  Given there is some sugar in the cup\n  When I put all the sugar to my coffee\n  Then the cup is empty\n```\n\n----------------------------------------\n\nTITLE: Throwing PendingStepException with Default Message in C#\nDESCRIPTION: Demonstrates how to mark a step as pending by throwing a PendingStepException without a custom message. This approach indicates that the step implementation is not yet complete.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/mark-steps-as-not-implemented.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I set the current ScenarioContext to pending\")]\npublic void WhenIHaveAPendingStep()\n{\n    throw new PendingStepException();\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Verification Feature in Gherkin\nDESCRIPTION: The Gherkin feature declaration outlines a test scenario where the system calculates the sum of two integers, ensuring the result is verified. It does not have dependencies but serves as an entry point for test automation frameworks that recognize Gherkin syntax.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/verify.md#2025-04-22_snippet_0\n\nLANGUAGE: Gherkin\nCODE:\n```\nFeature: Verify feature\n\n    Scenario: Verify scenario\n        When I calculate 1 + 2\n        Then I expect the result is correct\n```\n\n----------------------------------------\n\nTITLE: Ordered Hook Execution\nDESCRIPTION: Example of controlling hook execution order using the Order property.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[BeforeScenario(Order = 0)]\npublic void CleanDatabase()\n{\n    // we need to run this first...\n}\n\n[BeforeScenario(Order = 100)]\npublic void LoginUser()\n{\n    // ...so we can log in to a clean database\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Hierarchical Page Objects\nDESCRIPTION: An HTML snippet demonstrating a nested structure for implementing hierarchical page objects.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/page-object-model.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class='A'>\n    <div class='B'/>\n</div>\n<div class='B'>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Page Object Implementation with Caching in C#\nDESCRIPTION: A C# class implementing the Page Object Model pattern with caching using Lazy<T> to improve performance.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/page-object-model.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PageObject\n{\n    private IWebDriver _webDriver;\n    private Lazy<IWebElement> _txtUrl;\n\n    public PageObject(IWebDriver webDriver)\n    {\n        _webDriver = webDriver;\n        _txtUrl = new Lazy<IWebElement>(() => _webDriver.FindElement(By.Id(\"txtUrl\")));\n    }\n\n    public IWebElement txtUrl => _txtUrl.Value;\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing PendingStepException with Custom Message in C#\nDESCRIPTION: Shows how to mark a step as pending by throwing a PendingStepException with a custom message. This allows providing additional context about why the step is pending.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/mark-steps-as-not-implemented.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I set the current ScenarioContext to pending\")]\npublic void WhenIHaveAPendingStep()\n{\n    throw new PendingStepException(\"custom pendingstep message\");\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Scope Attributes with OR Logic in C#\nDESCRIPTION: Demonstrates two equivalent ways to combine multiple Scope attributes with OR logic, where any matching scope will allow the binding to execute.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Scope(Tag = \"thisTag\")] [Scope(Tag = \"OrThisTag\")]\n[Scope(Tag = \"thisTag\"), Scope(Tag = \"OrThisTag\")]\n```\n\n----------------------------------------\n\nTITLE: Writing Text Output with Reqnroll Output Helper in C#\nDESCRIPTION: Demonstrates how to use the WriteLine method to add text output to the test results.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/output-api.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_reqnrollOutputHelper.WriteLine(\"TEXT\");\n```\n\n----------------------------------------\n\nTITLE: Ordered Async Hook Execution\nDESCRIPTION: Shows how to order async hooks using the Order property.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[BeforeScenario(Order = 0)]\npublic async Task CleanDatabaseAsync()\n{\n    // we need to run this first...\n    // Example async operation\n    await Task.Delay(1000);\n}\n\n[BeforeScenario(Order = 100)]\npublic async Task LoginUserAsync()\n{\n    // ...so we can log in to a clean database\n    // Example async operation\n    await Task.Delay(1000);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Reqnroll Tests Using vstest.console.exe\nDESCRIPTION: Shows how to execute Reqnroll tests using the Visual Studio Test Console tool from a Developer Command Prompt. The command targets a specific test assembly in the build output directory.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-reqnroll-scenarios.md#2025-04-22_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\n> vstest.console.exe .\\bin\\Debug\\net8.0\\MyReqnrollProject.dll\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with vstest.console.exe for Single Tag\nDESCRIPTION: A bash command showing how to execute tests with a specific tag using the vstest.console.exe command-line tool.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nvstest.console.exe \"C:\\Temp\\BookShop.AcceptanceTests.dll\" /TestCaseFilter:\"TestCategory=done\"\n```\n\n----------------------------------------\n\nTITLE: Setting German Language in Reqnroll Feature File\nDESCRIPTION: Example showing how to set German (de-DE) as the language for a feature file using the #language header. This affects both the Gherkin keywords parsing and the default parameter conversion culture.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/feature-language.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n#language: de-DE\nFunktionalität: Addition\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Anonymous Type Comparisons in C#\nDESCRIPTION: Example unit tests demonstrating how to compare DataTables with anonymous type collections and instances. Shows usage of ToProjectionOfSet and ToProjectionOfInstance methods to perform these comparisons with subset matching.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void Table_with_subset_of_columns_with_matching_values_should_match_collection()\n{\n    var table = CreateTableWithSubsetOfColumns();\n    \n    table.AddRow(1.ToString(), \"a\");\n    table.AddRow(2.ToString(), \"b\");\n\n    var query = from x in testCollection\n                select new { x.GuidProperty, x.IntProperty, x.StringProperty };\n\n    Assert.AreEqual(0, table.ToProjectionOfSet(query).Except(query.ToProjection()).Count());\n}\n\n[Test]\npublic void Table_with_subset_of_columns_should_be_equal_to_matching_instance()\n{\n    var table = CreateTableWithSubsetOfColumns();\n    \n    table.AddRow(1.ToString(), \"a\");\n\n    var instance = new { IntProperty = testInstance.IntProperty, StringProperty = testInstance.StringProperty };\n\n    Assert.AreEqual(table.ToProjectionOfInstance(instance), instance);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Multiline Text with Gherkin Doc Strings\nDESCRIPTION: Illustrates how to use `Doc Strings` (triple double-quoted text blocks) in Gherkin to pass multiline string arguments to a step definition. The indentation within the quotes is preserved relative to the opening delimiter, making it suitable for passing formatted text like Markdown or code snippets.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_13\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven a blog post named \"Random\" with Markdown body\n  \"\"\"\n  Some Title, Eh?\n  ===============\n  Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet,\n  consectetur adipiscing elit.\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll Templates via .NET CLI in PowerShell\nDESCRIPTION: This snippet installs Reqnroll templates using the .NET CLI to enable project creation for Reqnroll within a PowerShell environment. Assumes .NET SDK is installed.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-project.md#2025-04-22_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet new install Reqnroll.Templates.DotNet\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Windsor Container for Reqnroll Scenarios (C#)\nDESCRIPTION: Provides a minimal example of a static method using the `[ScenarioDependencies]` attribute, required by `Reqnroll.Windsor`. This method creates and returns a new `IWindsorContainer` instance, which Reqnroll will use to resolve dependencies for test steps within a scenario. Custom registrations and configurations for the container should be added within this method.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/windsor.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ScenarioDependencies]\npublic static IWindsorContainer CreateContainer()\n{\n  var container = new WindsorContainer();\n\n  //TODO: add customizations, stubs required for testing\n\n  return container;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ITestMethodTagDecorator for NUnit Apartment Attribute in C#\nDESCRIPTION: This code snippet demonstrates how to create a custom decorator that implements ITestMethodTagDecorator. It adds an NUnit Apartment attribute to test methods tagged with 'myMethodTagDecorator' in the feature file.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/decorators.md#2025-04-22_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyMethodTagDecorator : ITestMethodTagDecorator\n{\n    public static readonly string TAG_NAME = \"myMethodTagDecorator\";\n    private readonly ITagFilterMatcher _tagFilterMatcher;\n\n    public MyMethodTagDecorator(ITagFilterMatcher tagFilterMatcher)\n    {\n        _tagFilterMatcher = tagFilterMatcher;\n    }\n\n    public bool CanDecorateFrom(string tagName, TestClassGenerationContext generationContext, CodeMemberMethod testMethod)\n    {\n        return _tagFilterMatcher.Match(TAG_NAME, tagName);\n    }\n\n    public void DecorateFrom(string tagName, TestClassGenerationContext generationContext, CodeMemberMethod testMethod)\n    {\n        var attribute = new CodeAttributeDeclaration(\n            \"NUnit.Framework.ApartmentAttribute\",\n            new CodeAttributeArgument(\n                new CodeFieldReferenceExpression(\n                    new CodeTypeReferenceExpression(typeof(System.Threading.ApartmentState)),\n                    \"STA\")));\n\n        testMethod.CustomAttributes.Add(attribute);\n    }\n\n    public int Priority { get; }\n    public bool RemoveProcessedTags { get; }\n    public bool ApplyOtherDecoratorsForProcessedTags { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cucumber Expression Detector Plugin in C#\nDESCRIPTION: This code snippet demonstrates how to create a Reqnroll runtime plugin that overrides the default Cucumber Expression detection strategy. It allows for custom handling of expression detection, including forcing specific patterns to be treated as regex or defaulting all expressions to regex.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/how-to-configure-cucumber-expression-behavior.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.RegularExpressions;\nusing Reqnroll.Bindings.CucumberExpressions;\nusing Reqnroll.Plugins;\nusing Reqnroll.UnitTestProvider;\nusing MyProject;\n\n[assembly:RuntimePlugin(typeof(ForceRegexPlugin))]\n\nnamespace MyProject;\n\npublic class ForceRegexPlugin : IRuntimePlugin\n{\n    public class ForceRegexDetector : ICucumberExpressionDetector\n    {\n        public bool IsCucumberExpression(string cucumberExpressionCandidate)\n        {\n            // TODO: If cucumberExpressionCandidate contains a specific regex pattern you use, \n            // treat it as regex\n            if (Regex.IsMatch(cucumberExpressionCandidate, @\"some-pattern\"))\n                return false;\n            // Otherwise fall back to the default logic \n            // (you can also derive from CucumberExpressionDetector and use 'base')\n            return new CucumberExpressionDetector().IsCucumberExpression(cucumberExpressionCandidate);\n            // In order to force all expressions to be regex, just return false.\n        }\n    }\n\n    public void Initialize(\n        RuntimePluginEvents runtimePluginEvents, \n        RuntimePluginParameters runtimePluginParameters, \n        UnitTestProviderConfiguration unitTestProviderConfiguration)\n    {\n        runtimePluginEvents.CustomizeGlobalDependencies += (_, args) =>\n        {\n            // register our class as ICucumberExpressionDetector\n            args.ObjectContainer.RegisterTypeAs<ForceRegexDetector, ICucumberExpressionDetector>();\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Reqnroll Tests Using dotnet test Command\nDESCRIPTION: Demonstrates how to execute Reqnroll tests using the dotnet test CLI command. Shows typical console output including test results and execution statistics.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-reqnroll-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\n> dotnet test\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n[...]\nStarting test execution, please wait...\n[...]\nPassed! - Failed: 0, Passed: 1, Skipped: 0, Total: 1, Duration: 76 ms - MyReqnrollProject.dll\n```\n\n----------------------------------------\n\nTITLE: Filtering Test Execution by Single Tag\nDESCRIPTION: A bash command showing how to filter and run only the scenario with the @done tag.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTestCategory=done\n```\n\n----------------------------------------\n\nTITLE: Defining a Gherkin DataTable for Instance Comparison\nDESCRIPTION: Shows a Gherkin scenario step using a `DataTable`. This table specifies the expected property values (`Field`, `Value`) for a `Person` object and will be used by the `CompareToInstance<T>` method in the corresponding C# step definition for assertion.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_13\n\nLANGUAGE: gherkin\nCODE:\n```\nThen the person should have the following values\n    | Field      | Value |\n    | First Name | John  |\n    | Last Name  | Galt  |\n    | Years Old  | 54    |\n```\n\n----------------------------------------\n\nTITLE: Configuring NUnit Scenario-Level Parallelization\nDESCRIPTION: Assembly-level attribute configuration to enable scenario-level parallel test execution in NUnit. Uses ParallelScope.Children to run scenarios in parallel.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/parallel-execution.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\n[assembly: Parallelizable(ParallelScope.Children)]\n```\n\n----------------------------------------\n\nTITLE: Registering Decorator in GeneratorPlugin Initialize Method in C#\nDESCRIPTION: This code snippet shows how to register the custom decorator in the Initialize method of a GeneratorPlugin. It sets up the necessary event handling to integrate the decorator into the Reqnroll generation process.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/decorators.md#2025-04-22_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic void Initialize(GeneratorPluginEvents generatorPluginEvents, GeneratorPluginParameters generatorPluginParameters,\nUnitTestProviderConfiguration unitTestProviderConfiguration)\n{\n    // Register the decorator\n    generatorPluginEvents.RegisterDependencies += RegisterDependencies;\n}\n\nprivate void RegisterDependencies(object sender, RegisterDependenciesEventArgs eventArgs)\n{\n    eventArgs.ObjectContainer.RegisterTypeAs<MyMethodTagDecorator, ITestMethodTagDecorator>(MyMethodTagDecorator.TAG_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reqnroll for Regex Step Definition Skeleton Generation (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to customize the step definition skeleton generation style in Reqnroll via the `reqnroll.json` file. By setting the `trace/stepDefinitionSkeletonStyle` property to `RegexAttribute`, developers can instruct Reqnroll to generate skeletons using regular expression attributes (e.g., `[When(@\"^I have (\\d+) cucumbers in my belly$\")]`) instead of the default Cucumber Expressions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n  \"trace\": {\n    \"stepDefinitionSkeletonStyle\": \"RegexAttribute\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Table and DocString Example in Gherkin\nDESCRIPTION: Example of Gherkin syntax showing steps with DataTable and DocString arguments.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-definitions.md#2025-04-22_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven the following books\n  |Author        |Title                          |\n  |Martin Fowler |Analysis Patterns              |\n  |Gojko Adzic   |Bridging the Communication Gap |\nGiven a blog post named \"Random\" with Markdown body\n  \"\"\"\n  Some Title, Eh?\n  ===============\n  Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet,\n  consectetur adipiscing elit.\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: WorkItem Attribute Generated from Tag - C#\nDESCRIPTION: Shows the generated WorkItemAttribute resulting from the @WorkItem tag in a Gherkin feature file. This MSTest attribute associates the test method with a specified work item ID for tracking and reporting purposes. Supported by Microsoft.VisualStudio.TestTools.UnitTesting.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute(123)]\n```\n\n----------------------------------------\n\nTITLE: Configuring MSTest Scenario-Level Parallelization\nDESCRIPTION: Assembly-level attribute configuration to enable scenario-level parallel test execution in MSTest. Sets ExecutionScope to MethodLevel.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/parallel-execution.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n[assembly: Parallelize(Scope = ExecutionScope.MethodLevel)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Using Reqnroll.Assist.Dynamic in C#\nDESCRIPTION: Example of implementing Reqnroll steps using Reqnroll.Assist.Dynamic. This approach is more concise and doesn't require defining a separate class for the test data.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/Plugins/Reqnroll.Assist.Dynamic/README.md#2025-04-22_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n[Binding]\npublic class StepsUsingDynamic\n{\n    private dynamic _instance;\n\n    [Given(@\"I create an instance from this table\")]\n    public void c(dynamic instance) { _instance = instance; }\n\n    [Then(@\"the Name property should equal '(.*)'\")]\n    public void NameShouldBe(string expectedValue) { Assert.AreEqual(expectedValue, _instance.Name);  }\n}\n```\n\n----------------------------------------\n\nTITLE: Person Record with Required Constructor Parameters\nDESCRIPTION: A C# record type definition used to demonstrate the behavior of RequireTableToProvideAllConstructorParameters option in InstanceCreationOptions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic record Person(string FirstName, string LastName, int Age);\n```\n\n----------------------------------------\n\nTITLE: Registering [Binding] Step Classes via AddReqnrollBindings with Assembly Parameter (C#)\nDESCRIPTION: This snippet demonstrates an overload of the 'AddReqnrollBindings' extension where you specify the assembly directly. It simplifies step binding registration when your scenario dependencies span multiple classes within the assembly. It requires 'System.Reflection' namespace for 'Assembly.GetExecutingAssembly\".\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncontainerBuilder.AddReqnrollBindings(Assembly.GetExecutingAssembly())\n```\n\n----------------------------------------\n\nTITLE: Tagging Features with @Owner for MSTest Attribute Generation - Gherkin\nDESCRIPTION: Illustrates the use of a Gherkin tag to specify test ownership in feature files. The tag @Owner:John is parsed by the Reqnroll MSTest generator to produce an MSTest OwnerAttribute in the generated code, associating the test with a particular owner. No special dependencies are required on the Gherkin side, but generation relies on Reqnroll MSTest integration.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\n@Owner:John\n```\n\n----------------------------------------\n\nTITLE: Filtering Test Execution by Multiple Tags on Same Scenario\nDESCRIPTION: A bash command showing how to filter and run scenarios that have both @done AND @important tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTestCategory=done&TestCategory=important\n```\n\n----------------------------------------\n\nTITLE: Using @ignore Tag for Skipping Tests in Reqnroll\nDESCRIPTION: Shows how to mark a feature or scenario to be ignored during test execution by using the @ignore tag. This allows testers to temporarily skip tests without removing them from the test suite.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/test-results.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n@ignore\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments with Reqnroll Output Helper in C#\nDESCRIPTION: Shows how to add file attachments to test results using the AddAttachment method. Note that this feature is supported in MSTest and NUnit but not in xUnit.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/output-api.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n_reqnrollOutputHelper.AddAttachment(\"filePath\");\n```\n\n----------------------------------------\n\nTITLE: Using Vertical DataTable Format in Gherkin\nDESCRIPTION: Example of a vertical two-column DataTable format in Gherkin where the first column contains property names and the second column contains their values. The header row is ignored in this format.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven I entered the following data into the new account form:\n    | Field                | Value             |\n    | Name                 | John Galt         |\n    | Birthdate            | 2/2/1902          |\n    | Height In Inches     | 72                |\n    | Bank Account Balance | 1234.56           |\n#     ^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^\n#        property names       property values\n```\n\n----------------------------------------\n\nTITLE: Owner Attribute Generated from Tag - C#\nDESCRIPTION: Demonstrates the generated C# attribute corresponding to the @Owner tag found in the Gherkin feature file. This attribute ties the MSTest to an individual, supporting filtering and ownership in test results. Requires Microsoft.VisualStudio.TestTools.UnitTesting.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute(\"John\")]\n```\n\n----------------------------------------\n\nTITLE: Defining a Gherkin DataTable for Set Comparison\nDESCRIPTION: Presents a Gherkin scenario step with a `DataTable`. This table lists the expected accounts and a subset of their properties (`Id`, `FirstName`, `LastName`). It's designed for use with the `CompareToSet<T>` method in a C# step definition to verify a collection of `Account` objects.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_16\n\nLANGUAGE: gherkin\nCODE:\n```\nThen I get back the following accounts\n    | Id | First Name | Last Name |\n    | 1  | John       | Galt      |\n    | 2  | Howard     | Roark     |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duplicate Step Ambiguity in Gherkin\nDESCRIPTION: Highlights a potential issue in Gherkin where steps starting with different keywords (`Given`, `Then`) but having identical trailing text are considered duplicates by Reqnroll. This is because keywords are ignored when matching steps to definitions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\n```gherkin\n:caption: Feature File\nGiven there is money in my account\nThen there is money in my account\n```\n```\n\n----------------------------------------\n\nTITLE: Ordered Step Argument Transformations in Reqnroll\nDESCRIPTION: This example shows how to control the order of multiple matching transformations using the Order property. It includes two transformations for the Rating type - one with a regex pattern that takes precedence (Order = 1) and a fallback transformation that uses the default rating when the first one doesn't match.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/step-argument-conversions.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Transforms\n{\n    [StepArgumentTransformation(@\"with (\\d+) score\", Order = 1)]\n    public Rating RatingTransformation(int score)\n    {\n      return new Rating(score);\n    }\n    \n    [StepArgumentTransformation]\n    public Rating GlobalRatingTransformation(string input) \n    {\n        return Rating.DefaultRating;\n    }\n}\n\npublic record Rating(int Value) \n{\n    public static Rating DefaultRating => new Rating(50);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering NullValueRetriever for Custom Null Handling in Reqnroll\nDESCRIPTION: Explains how to register a `NullValueRetriever` instance within a `[BeforeTestRun]` hook using `Service.Instance.ValueRetrievers.Register`. This allows defining a specific string (e.g., \"<null>\") that Reqnroll's DataTable helpers should interpret as a `null` value during data conversion, overriding the default behavior for empty strings.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic static class Hooks1\n{\n    [BeforeTestRun]\n    public static void BeforeTestRun()\n    {\n        Service.Instance.ValueRetrievers.Register(new NullValueRetriever(\"<null>\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Horizontal DataTable Format in Gherkin\nDESCRIPTION: Example of a horizontal DataTable format in Gherkin where the header row contains property names and the data row contains their values. This format is suitable for tables with fewer properties.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven I entered the following data into the new account form:\n    | Name      | Birthdate | Height In Inches | Bank Account Balance | # Header row (property names)\n    | John Galt | 2/2/1902  | 72               | 1234.56              | # Data row (property values)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Gherkin in Norwegian\nDESCRIPTION: Presents a Gherkin scenario written entirely in Norwegian using localized keywords. This demonstrates Gherkin's multi-language support, allowing teams to write feature files in the language most familiar to users and domain experts.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_15\n\nLANGUAGE: gherkin\nCODE:\n```\n# No code available in snippet\n```\n\n----------------------------------------\n\nTITLE: DeploymentItem Attribute Generated from Tag - Simple File Copy - C#\nDESCRIPTION: Shows the MSTest DeploymentItemAttribute generated for a simple file copy scenario, as specified by a feature tag. The attribute ensures that the file is copied alongside the deployed test assemblies when tests are executed. Requires Microsoft.VisualStudio.TestTools.UnitTesting and is used for test resource provisioning.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute(\"test.txt\")]\n```\n\n----------------------------------------\n\nTITLE: Configuring MSTest Feature-Level Parallelization\nDESCRIPTION: Assembly-level attribute configuration to enable feature-level parallel test execution in MSTest. Sets ExecutionScope to ClassLevel.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/parallel-execution.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n[assembly: Parallelize(Scope = ExecutionScope.ClassLevel)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Reqnroll Project with MsTest and .NET 6.0 in PowerShell\nDESCRIPTION: Demonstrates how to create a Reqnroll project with MsTest as the test execution framework and targeting .NET 6.0 using the .NET CLI within PowerShell. Requires Reqnroll templates to be already installed.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-project.md#2025-04-22_snippet_2\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet new reqnroll-project -t mstest -f net6.0\n```\n\n----------------------------------------\n\nTITLE: Filtering Scenarios with Feature-Level Tags in Gherkin\nDESCRIPTION: A feature file example with a tag at the feature level (@US123) and individual scenario tags (@done and @automated), which can be used to demonstrate filtering by combining feature and scenario tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n@US123\nFeature: Breakfast\n\n@done\nScenario: Eating cucumbers\n  Given there are 12 cucumbers\n  When I eat 5 cucumbers\n  Then I should have 7 cucumbers\n\n@automated\nScenario: Use all the sugar\n  Given there is some sugar in the cup\n  When I put all the sugar to my coffee\n  Then the cup is empty\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps DotNetCoreCLI Task for Single Tag\nDESCRIPTION: A YAML configuration example for the DotNetCoreCLI task in Azure DevOps, showing how to filter tests based on a single tag.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet test'\n  inputs:\n    command: test\n    projects: 'BookShop.AcceptanceTests'\n    arguments: '--filter \"TestCategory=done\"'\n```\n\n----------------------------------------\n\nTITLE: C# POCO Class Definition\nDESCRIPTION: C# class definition that maps to the Gherkin table structure with matching properties.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public int Age { get; set; }\n    public bool IsAdmin { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asterisk (*) for List-Like Gherkin Steps\nDESCRIPTION: Demonstrates using the asterisk (`*`) keyword as a replacement for `And` or other step keywords to represent a list of items or actions more concisely in Gherkin. This improves readability, making the steps look like bullet points.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_8\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: All done\n  Given I am out shopping\n  * I have eggs\n  * I have milk\n  * I have butter\n  When I check my list\n  Then I don't need anything\n```\n\n----------------------------------------\n\nTITLE: Registering All Types from Assembly with Autofac (C#)\nDESCRIPTION: This snippet demonstrates how to register all public types from a given assembly for dependency injection using Autofac in a Reqnroll project. It assumes that step definition classes are included within the target assembly and are to be resolved as single instances during test execution. 'YourClassInTheReqnrollProject' acts as an anchor for identifying the assembly at runtime.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.RegisterAssemblyTypes(typeof(YourClassInTheReqnrollProject).Assembly).SingleInstance();\n```\n\n----------------------------------------\n\nTITLE: Filtering Scenarios with Multiple Tags in Gherkin Feature File\nDESCRIPTION: A feature file example showing two scenarios with different tags (@done and @automated), which can be used to demonstrate filtering by multiple tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Breakfast\n\n@done\nScenario: Eating cucumbers\n  Given there are 12 cucumbers\n  When I eat 5 cucumbers\n  Then I should have 7 cucumbers\n\n@automated\nScenario: Use all the sugar\n  Given there is some sugar in the cup\n  When I put all the sugar to my coffee\n  Then the cup is empty\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Cucumber/Reqnroll Integration (JSON)\nDESCRIPTION: This JSON snippet configures Visual Studio Code to nest generated files under feature files, exclude build output folders, and define the locations for Cucumber step definitions and feature files. Dependencies include the 'Cucumber' VS Code extension. The parameters set project paths, file nesting, and file exclusions. The settings are to be placed in the '.vscode/settings.json' file. Input is a JSON object, and these settings facilitate Gherkin feature development with proper navigation and resource organization.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-ide.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"explorer.fileNesting.enabled\\\": true,\\n  \\\"explorer.fileNesting.patterns\\\": {  // shows *.feature.cs files as nested items\\n    \\\"*.feature\\\": \\\"${capture}.feature.cs\\\"\\n  },\\n  \\\"files.exclude\\\": { // excludes compilation result\\n    \\\"**/obj/\\\": true,\\n    \\\"**/bin/\\\": true,\\n  },\\n  \\\"cucumber.glue\\\": [ // sets the location of the step definition classes\\n    \\\"MyReqnrollProject/**/*.cs\\\",\\n  ],\\n  \\\"cucumber.features\\\": [ // sets the location of the feature files\\n    \\\"MyReqnrollProject/**/*.feature\\\",\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Data Source with Named Array - Gherkin\nDESCRIPTION: This Gherkin scenario demonstrates how to configure a scenario to use a JSON file as its data source, targeting a specific object array named 'other products' via the @DataSet:other_products tag. The @DataSource:products.json and @DataSet tags link the scenario with structured data for parameterization. Required: Reqnroll and a well-formed JSON file with an 'other products' array. The scenario uses placeholders for 'product' and 'price' that are parameterized from the JSON data. Inputs are provided per row in the JSON array, outputs are assertions on basket price. Tag names with spaces must use underscores.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/externaldata.md#2025-04-22_snippet_0\n\nLANGUAGE: Gherkin\nCODE:\n```\n@DataSource:products.json @DataSet:other_products\\nScenario: The basket price is calculated correctly for other products\\n\\tGiven the price of <product> is €<price>\\n\\tAnd the customer has put 1 pcs of <product> to the basket\\n\\tWhen the basket price is calculated\\n\\tThen the basket price should be €<price>\\n\n```\n\n----------------------------------------\n\nTITLE: Tagging Features with @Priority for MSTest Attribute Generation - Gherkin\nDESCRIPTION: Shows usage of the @Priority:1 tag in Gherkin feature files to set test execution priority. Supported by the Reqnroll MSTest generator, which outputs a corresponding PriorityAttribute if the value is a valid integer. Useful for controlling test execution order or categorization.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n@Priority:1\n```\n\n----------------------------------------\n\nTITLE: Forcing Regular Expression Matching in C# Step Definition (Reqnroll)\nDESCRIPTION: Provides an example attribute that forces the parser to treat the pattern as a regular expression by using regex markers (^ and $). This ensures that ambiguous expressions are handled correctly in cases where Reqnroll's heuristics might misclassify the intent. Dependency: .NET test project with Reqnroll/SpecFlow. No parameters or inputs are parsed; this is for demonstrating syntax only.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/cucumber-expressions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\\\"^this expression is treated as a regex$\\\")]\n```\n\n----------------------------------------\n\nTITLE: DeploymentItem Tag - Simple File Copy - Gherkin\nDESCRIPTION: Depicts use of the @MsTest:DeploymentItem:test.txt tag for indicating a file to be copied to the deployment directory for tests. The Reqnroll MSTest generator recognizes this syntax and generates the appropriate DeploymentItemAttribute, supporting additional test file deployment requirements.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_8\n\nLANGUAGE: gherkin\nCODE:\n```\n@MsTest:DeploymentItem:test.txt\n```\n\n----------------------------------------\n\nTITLE: Using ScenarioContext for Complex Conditional Hook Logic in C#\nDESCRIPTION: Shows how to use ScenarioContext to implement more complex hook execution conditions beyond simple scopes, checking for multiple tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/scoped-bindings.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class Binding\n{\n    ScenarioContext _scenarioContext;\n\n    public Binding(ScenarioContext scenarioContext)\n    {\n        _scenarioContext = scenarioContext;\n    }\n\n    [BeforeScenario(\"web\")]\n    public static void BeforeWebScenario()\n    {\n        if(_scenarioContext.ScenarioInfo.Tags.Contains(\"automated\"))\n            StartSelenium();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reqnroll Dependencies in C# Project File (XML)\nDESCRIPTION: This XML snippet demonstrates the structure of a `.csproj` file after migrating from SpecFlow to Reqnroll. It shows the required `PackageReference` entries for a test project using MSTest and Reqnroll, including `Microsoft.NET.Test.Sdk`, `MSTest.TestAdapter`, `MSTest.TestFramework`, and `Reqnroll.MsTest`. This configuration is necessary for the project to build and run tests with Reqnroll.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- test project dependencies (MsTest) -->\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" />\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.2.0\" />\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"3.2.0\" />\n\n    <!-- Reqnroll -->\n    <PackageReference Include=\"Reqnroll.MsTest\" Version=\"2.0.0\" />\n  </ItemGroup>\n  [...]\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Expressing Gherkin Steps as a List (Initial)\nDESCRIPTION: Shows a Gherkin scenario where multiple related `And` steps under a `Given` represent a list of items. This is a valid but potentially less elegant way to express lists compared to using the asterisk (`*`) keyword.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/gherkin-reference.md#2025-04-22_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: All done\n  Given I am out shopping\n  And I have eggs\n  And I have milk\n  And I have butter\n  When I check my list\n  Then I don't need anything\n```\n\n----------------------------------------\n\nTITLE: Updating NuGet Packages in C# Project File for Reqnroll Migration\nDESCRIPTION: This XML snippet shows how to update the project file (.csproj) to replace SpecFlow packages with Reqnroll packages. It includes references to the test framework (MsTest in this case) and the Reqnroll packages required for migration.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- test project dependencies (MsTest) -->\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" />\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.2.0\" />\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"3.2.0\" />\n\n    <!-- Reqnroll -->\n    <PackageReference Include=\"Reqnroll.MsTest\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Reqnroll.SpecFlowCompatibility\" Version=\"2.0.0\" />\n  </ItemGroup>\n  [...]\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Filtering Test Execution by AND Condition\nDESCRIPTION: A bash command showing how to filter and run scenarios with both @US123 AND @done tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTestCategory=US123&TestCategory=done\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll.Windsor NuGet Package (PowerShell)\nDESCRIPTION: Demonstrates using the NuGet Package Manager Console command to install the `Reqnroll.Windsor` plugin into a .NET project. This package is required to enable Castle Windsor integration for dependency injection within Reqnroll tests.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/windsor.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package Reqnroll.Windsor\n```\n\n----------------------------------------\n\nTITLE: Defining Person Data Context Class in C#\nDESCRIPTION: Creates a POCO class to hold person data that can be shared between test steps.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonData // the POCO for sharing person data\n{ \n  public string FirstName;\n  public string LastName;\n}\n```\n\n----------------------------------------\n\nTITLE: DeploymentItem Attribute Generated from Tag - File Copy to Sub-directory - C#\nDESCRIPTION: Displays the C# MSTest DeploymentItemAttribute generated for copying a file to a sub-directory relative to the deployment directory, as indicated by the Gherkin tag. This supports deployment of test data files into structured test directories. Requires Microsoft.VisualStudio.TestTools.UnitTesting.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute(\"Resources\\\\DeploymentItemTestFile.txt\", \"Data\")]\n```\n\n----------------------------------------\n\nTITLE: Forcing Regular Expression Matching in Reqnroll Step Definition (C#)\nDESCRIPTION: This C# code snippet demonstrates how to ensure a step definition pattern is interpreted as a regular expression by Reqnroll, overriding the default Cucumber Expression detection. By adding the start (`^`) and end (`$`) anchors to the pattern string within the attribute (e.g., `[When(@\"^pattern$\")]`), developers can resolve ambiguity or prevent misinterpretation when the pattern contains characters significant to Cucumber Expressions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"^this expression is treated as a regex$\")]\n```\n\n----------------------------------------\n\nTITLE: Filtering Test Execution by OR Condition\nDESCRIPTION: A bash command showing how to filter and run scenarios with either @done OR @automated tags.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTestCategory=done|TestCategory=automated\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll.Autofac Plugin via NuGet (C#)\nDESCRIPTION: This code snippet shows how to install the Reqnroll.Autofac package using the NuGet Package Manager console. This step is required to get Autofac integration support within your Reqnroll testing project. The installation ensures that the necessary assemblies and dependencies for Autofac-based DI are available for further setup.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPM> Install-Package Reqnroll.Autofac\n```\n\n----------------------------------------\n\nTITLE: Drafting a New Gherkin Scenario\nDESCRIPTION: This Gherkin code snippet outlines a scenario where a client has multiple items in their basket. The feature and rule provide context for calculating a basket's price. No dependencies, but it requires support for the 'And the client added' step, accompanied by a Data Table.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario: Client has multiple items in their basket\n    Given the client started shopping\n    And the client added\n        | product         | quantity |\n        | Electric guitar | 1        |\n        | Guitar pick     | 10       |\n    When the basket is prepared\n    Then the basket price should be $195.0\n```\n\n----------------------------------------\n\nTITLE: Creating a New Reqnroll Project via Console in PowerShell\nDESCRIPTION: This sequence of commands initializes a new Reqnroll project using the .NET CLI within PowerShell. A new directory is created, and the project is set up with the default test framework (NUnit).\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-project.md#2025-04-22_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\n> mkdir MyReqnrollProject\n> cd MyReqnrollProject\n> dotnet new reqnroll-project\n```\n\n----------------------------------------\n\nTITLE: Priority Attribute Generated from Tag - C#\nDESCRIPTION: Displays the generated C# PriorityAttribute for use with MSTest. The attribute's value is sourced from the tag in the feature file, and should be an integer as parsed with int.TryParse. Supports test ordering and grouping in MSTest.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute(1)]\n```\n\n----------------------------------------\n\nTITLE: Adding Reqnroll MsTest Package to Existing Project via .NET CLI\nDESCRIPTION: This command adds the Reqnroll MsTest NuGet package to an existing .NET test project using .NET CLI. Suitable for integrating Reqnroll into legacy projects.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-project.md#2025-04-22_snippet_4\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet add package Reqnroll.MsTest\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with dotnet test Command for Single Tag\nDESCRIPTION: A bash command showing how to execute tests with a specific tag using the dotnet test command-line tool.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter TestCategory=done\n```\n\n----------------------------------------\n\nTITLE: Fixing Step Definition Error by Adapting to Cucumber Expression (C#)\nDESCRIPTION: This C# code snippet presents Solution 2 for resolving step definition errors post-Reqnroll migration. Instead of forcing regex, the pattern is modified to be a valid Cucumber Expression (`[When(\"I $ something\")]`). In this specific case, the backslash escape for the dollar sign is removed, as `$` doesn't require escaping in Cucumber Expressions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I $ something\")]\n```\n\n----------------------------------------\n\nTITLE: Configuring Reqnroll Settings in reqnroll.json (JSON)\nDESCRIPTION: This JSON snippet exemplifies a `reqnroll.json` configuration file used by Reqnroll. It includes the recommended `$schema` reference for editor autocompletion and demonstrates configuring the feature file language (`language/feature`) and specifying external binding assemblies (`bindingAssemblies`). Migrating from `specflow.json` often involves simply renaming the file and updating the schema reference.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n\n  \"language\": {\n    \"feature\": \"hu-HU\"\n  },\n  \"bindingAssemblies\": [\n    {\n      \"assembly\": \"ExternalStepDefs\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: xUnit Non-Parallelizable Features Collection Definition\nDESCRIPTION: Collection definition class to prevent specific features from running in parallel with other features in xUnit. Automatically added by the xUnit plugin.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/parallel-execution.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[CollectionDefinition(\"ReqnrollNonParallelizableFeatures\", DisableParallelization = true)]\npublic class ReqnrollNonParallelizableFeaturesCollectionDefinition\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic Step Definition After Reqnroll Upgrade (C#)\nDESCRIPTION: This C# snippet shows an example step definition (`[When(@\"I \\$ something\")]`) that might lead to a \"Cucumber Expression has a problem\" error after migrating to Reqnroll. The issue arises because Reqnroll might incorrectly identify the pattern, intended as a regex with an escaped dollar sign, as an invalid Cucumber Expression.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"I \\$ something\")]\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with dotnet test Command for AND Condition\nDESCRIPTION: A bash command showing how to execute tests that match multiple tags using AND logic with the dotnet test command-line tool.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter \"TestCategory=us123&TestCategory=done\"\n```\n\n----------------------------------------\n\nTITLE: Step Definition with Potential Cucumber Expression Alternation Misinterpretation (C#)\nDESCRIPTION: This C# snippet (`[When(@\"I a/b something\")]`) highlights a scenario where a pattern valid as both regex and Cucumber Expression can cause runtime errors (`No matching step definition found`). Reqnroll might interpret `/` as the alternation character in Cucumber Expressions (matching 'a' OR 'b'), contrary to the intended literal match in the original regex.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"I a/b something\")]\n```\n\n----------------------------------------\n\nTITLE: Product Class for DataTable Mapping\nDESCRIPTION: A C# class definition for the Product model that will be used with the CreateSet<T> extension method to map a collection of products from a DataTable.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Product\n{\n    public string Sku { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .csproj to Include .feature Files for Rider/Reqnroll (XML)\nDESCRIPTION: This XML snippet should be added to a C# .csproj project file to ensure all '.feature' files in the directory tree are included as content items. This is a workaround for a Rider compatibility issue with Reqnroll, ensuring the IDE recognizes and processes these files properly. Prerequisite: a .NET project using .csproj structure and the Reqnroll Rider extension. Key parameter is the glob pattern '**/*.feature'. Output is correct IDE recognition of feature files. Add inside the <Project> element of your .csproj file.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-ide.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\\n  <Content Include=\\\"**/*.feature\\\"/>\\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Fixing Alternation Misinterpretation with Cucumber Expression Escaping (C#)\nDESCRIPTION: This C# code snippet demonstrates how to resolve the step matching issue caused by the `/` character being interpreted as alternation in Cucumber Expressions. By escaping the slash (`\\/`) within the pattern (`[When(@\"I a\\/b something\")]`), the pattern becomes a valid Cucumber Expression that correctly matches the literal string \"a/b\".\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"I a\\/b something\")]\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with dotnet test Command for OR Condition\nDESCRIPTION: A bash command showing how to execute tests that match either of multiple tags using OR logic with the dotnet test command-line tool.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter \"TestCategory=done|TestCategory=automated\"\n```\n\n----------------------------------------\n\nTITLE: Defining Given Step Bindings in Reqnroll with F# - F#\nDESCRIPTION: This F# snippet demonstrates how to define a Given step for Reqnroll using regex-based naming within double backticks. The step, decorated with the [<Given>] attribute, matches steps like 'I have entered <number> into the calculator' and pushes the specified number to a Calculator instance. Dependencies include an F# binding project and access to the Calculator module/class, and feature files must be hosted in a C# or VB project configured to link the F# bindings. Input parameter 'number' is extracted from the step via regex capturing; there is an implicit dependency that a Calculator.Push function exists and is imported.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/fsharp.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nlet [<Given>] ``I have entered (.*) into the calculator``(number:int) = \n    Calculator.Push(number)\n```\n\n----------------------------------------\n\nTITLE: Gherkin DataTable Column Naming Example (Flexible)\nDESCRIPTION: Shows an equivalent Gherkin `DataTable` header row using different casing and spacing (`First name`, `Last name`, `Date of birth`, `HAPPINESS rating`). Reqnroll treats this identically to the standard naming convention, demonstrating that whitespace and casing are ignored during column-to-property mapping.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_20\n\nLANGUAGE: gherkin\nCODE:\n```\n| First name | Last name | Date of birth | HAPPINESS rating |\n```\n\n----------------------------------------\n\nTITLE: DeploymentItem Tag - File Copy to Sub-directory - Gherkin\nDESCRIPTION: Demonstrates how to use the @MsTest:DeploymentItem:Resources\\DeploymentItemTestFile.txt:Data tag in Gherkin to specify that a file should be copied to a sub-directory. The Reqnroll MSTest generator parses the tag to produce the relevant DeploymentItemAttribute for advanced deployment scenarios.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_10\n\nLANGUAGE: gherkin\nCODE:\n```\n@MsTest:DeploymentItem:Resources\\DeploymentItemTestFile.txt:Data\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with vstest.console.exe for AND Condition\nDESCRIPTION: A bash command showing how to execute tests that match multiple tags using AND logic with the vstest.console.exe command-line tool.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nvstest.console.exe \"C:\\Temp\\BookShop.AcceptanceTests.dll\" /TestCaseFilter:\"TestCategory=us123&TestCategory=done\"\n```\n\n----------------------------------------\n\nTITLE: Tagging Features with @WorkItem for MSTest Attribute Generation - Gherkin\nDESCRIPTION: Demonstrates tagging a feature with @WorkItem:123 to link a test to a specific work item or ticket. The Reqnroll MSTest generator extracts this tag and generates the corresponding MSTest WorkItemAttribute. This integration improves traceability from tests to project management items.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/mstest.md#2025-04-22_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\n@WorkItem:123\n```\n\n----------------------------------------\n\nTITLE: Gherkin DataTable with Custom Type Values\nDESCRIPTION: Shows a Gherkin `DataTable` intended for creating or comparing `Shirt` objects. The 'Color' column contains string values (\"Blue\", \"Red\") that need to be converted to the custom `Color` type defined in the corresponding C# model when using Reqnroll's DataTable helpers.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_23\n\nLANGUAGE: gherkin\nCODE:\n```\n| Name | Color |\n| XL   | Blue  |\n| L    | Red   |\n```\n\n----------------------------------------\n\nTITLE: Sample Gherkin Table Definition\nDESCRIPTION: Example of a Gherkin table structure defining person data with various data types.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven I have the following people\n| First Name | Last Name | Age | IsAdmin | \n| John       | Guppy     | 40  | true    |\n```\n\n----------------------------------------\n\nTITLE: Test Thread Container Hierarchical Note\nDESCRIPTION: Note indicating that the Test Thread Container's parent is the Global Container. This establishes the inheritance hierarchy for services and dependencies.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/available-containers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nParent Container is the Global Container\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests with vstest.console.exe for OR Condition\nDESCRIPTION: A bash command showing how to execute tests that match either of multiple tags using OR logic with the vstest.console.exe command-line tool.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nvstest.console.exe \"C:\\Temp\\BookShop.AcceptanceTests.dll\" /TestCaseFilter:\"TestCategory=done|TestCategory=automated\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Step Definition Error by Forcing Regex Interpretation (C#)\nDESCRIPTION: This C# code snippet illustrates Solution 1 for fixing step definition errors after a Reqnroll upgrade. By adding regex start (`^`) and end (`$`) markers to the pattern (`[When(@\"^I \\$ something$\")]`), the developer explicitly forces Reqnroll to treat the pattern as a regular expression, resolving potential misinterpretations as a Cucumber Expression.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[When(@\"^I \\$ something$\")]\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Reqnroll Project using CLI\nDESCRIPTION: This command runs all tests for the Reqnroll project using the .NET CLI. It should be executed in a shell after navigating to the project directory.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Importing AddReqnrollBindings Extension Method (C#)\nDESCRIPTION: This snippet provides the import directive required to access the 'AddReqnrollBindings' extension method, which streamlines the registration of all Reqnroll step definition classes (marked with [Binding]) within the Autofac DI container. This import is a prerequisite for using the helper extension methods documented in subsequent snippets.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/autofac.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Reqnroll.Autofac.ReqnrollPlugin;\n```\n\n----------------------------------------\n\nTITLE: Feature Container Hierarchical Note\nDESCRIPTION: Note indicating that the Feature Container's parent is the Test Thread Container. This continues the hierarchical container structure in Reqnroll.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/available-containers.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nParent Container is the Test Thread Container\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a New Feature File to a Reqnroll Project in PowerShell\nDESCRIPTION: Illustrates the use of .NET CLI to add a new feature file named 'MyFeature.feature' to an existing Reqnroll project within PowerShell. Assumes the user is within the project directory.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/setup-project.md#2025-04-22_snippet_3\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet new reqnroll-feature -n MyFeature\n```\n\n----------------------------------------\n\nTITLE: Default Cucumber Expression Step Definition Skeleton Generated by Reqnroll (C#)\nDESCRIPTION: This C# code snippet displays the default step definition skeleton that Reqnroll generates for a new Gherkin step like \"When I have 42 cucumbers in my belly\". It uses a Cucumber Expression (`[When(\"I have {int} cucumbers in my belly\")]`) to capture parameters automatically, simplifying the process of creating bindings.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[When(\"I have {int} cucumbers in my belly\")]\npublic void WhenIHaveCucumbersInMyBelly(int p0)\n...\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing Configuration in Visual Studio\nDESCRIPTION: Instructions for enabling diagnostic tracing in Reqnroll through Visual Studio options menu. When enabled, it adds a dedicated Reqnroll pane to the output window for viewing diagnostic messages.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/help/troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTools | Options | Reqnroll\n```\n\n----------------------------------------\n\nTITLE: External Bindings Configuration\nDESCRIPTION: Configuration to include step definitions from external projects by specifying binding assemblies\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n\n  \"bindingAssemblies\": [\n    { \n      \"assembly\": \"SharedStepDefinitions\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Language Configuration\nDESCRIPTION: Setting the default language for feature files to Hungarian using language configuration\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n\n  \"language\": {\n    \"feature\": \"hu-HU\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scenario Container Hierarchical Note\nDESCRIPTION: Note indicating that the Scenario Container's parent is the Feature Container. This completes the container hierarchy chain in Reqnroll's dependency injection system.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/available-containers.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nParent Container is the Feature Container\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll.Autofac Package\nDESCRIPTION: Command to add the Reqnroll.Autofac package reference using the .NET CLI.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/context-injection.md#2025-04-22_snippet_5\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet add package Reqnroll.Autofac\n```\n\n----------------------------------------\n\nTITLE: Building Reqnroll Project using CLI\nDESCRIPTION: This command builds the Reqnroll project using the .NET CLI. It should be executed in a shell after navigating to the project directory.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Sample Person Class for InstanceCreationOptions\nDESCRIPTION: A sample Person class used to demonstrate the behavior of VerifyAllColumnsBound option in InstanceCreationOptions.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public string FirstName { get; set;}  \n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reqnroll.json for Reqnroll.Assist.Dynamic\nDESCRIPTION: JSON configuration to add Reqnroll.Assist.Dynamic to the stepAssemblies in reqnroll.json.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/Plugins/Reqnroll.Assist.Dynamic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"stepAssemblies\": [\n    {\n      \"assembly\": \"Reqnroll.Assist.DynamSic\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll Templates with .NET CLI\nDESCRIPTION: Commands to install Reqnroll templates and create a new configuration file using the .NET CLI\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet new install Reqnroll.Templates.DotNet\ndotnet new reqnroll-config\n```\n\n----------------------------------------\n\nTITLE: Updating App.config for Reqnroll Compatibility\nDESCRIPTION: This XML snippet demonstrates how to modify the App.config file to make it compatible with Reqnroll. The key change is in the configuration section declaration, where the type attribute is updated to use the Reqnroll compatibility plugin.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"specFlow\" type=\"Reqnroll.SpecFlowCompatibility.ReqnrollPlugin.ConfigurationSectionHandler, Reqnroll.SpecFlowCompatibility.ReqnrollPlugin\" />\n  </configSections>\n  <specFlow>\n    <language feature=\"hu-HU\" />\n    <stepAssemblies>\n      <stepAssembly assembly=\"ExternalStepDefs\" />\n    </stepAssemblies>\n  </specFlow>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Contributors List\nDESCRIPTION: Command to list all recent contributors since the last version tag, excluding automated contributors like renovate, dependabot, and Snyk\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit log --format=format:\"%an <%ae>\" --reverse <last-version-tag>..HEAD  | grep -vEi \"(renovate|dependabot|Snyk)\" | sort| uniq -i\n```\n\n----------------------------------------\n\nTITLE: Adding .NET Framework Reference Assemblies\nDESCRIPTION: XML configuration for adding .NET Framework reference assemblies to enable plugin building on non-Windows machines\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0\">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n    </PackageReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Reqnroll Execution Features in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the Reqnroll execution features documentation using Markdown syntax. It includes links to various subtopics related to scenario execution, test results, debugging, and output options.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nexecuting-reqnroll-scenarios\nexecuting-specific-scenarios\nmark-steps-as-not-implemented\nskipping-scenarios\ntest-results\nparallel-execution\ndebugging\noutput-api\ncolor-output\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring MsTest Scenario Outline Handling in Reqnroll (JSON)\nDESCRIPTION: Configuration example showing how to disable the new DataRow-based scenario outline handling in Reqnroll. This is useful when working with tooling that doesn't fully support MsTest's data-driven tests feature.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n\n  \"generator\": {\n    \"allowRowTests\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reqnroll Framework Support Note\nDESCRIPTION: Note about Reqnroll compatibility with .NET Standard 2.0 frameworks including .NET Core 3.1 and .NET 5.0, with a warning about their support status.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/compatibility.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{note}\nReqnroll can also be installed on any .NET frameworks that supports .NET Standard 2.0, including .NET Core 3.1 and .NET 5.0, but please note that these frameworks are out of support already.\n\n```\n\n----------------------------------------\n\nTITLE: Color Data Gherkin Table\nDESCRIPTION: Example Gherkin table containing color information for processing.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/value-retrievers.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n| First Name | ShirtColor | \n| Scott      | Red        |\n```\n\n----------------------------------------\n\nTITLE: Removed Step Calling Pattern in Reqnroll (C#)\nDESCRIPTION: Example of a step definition pattern that's no longer supported in Reqnroll. This shows how steps were previously called from other steps using string format, which has been removed in Reqnroll (was planned for removal in SpecFlow v4).\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/migrating-from-specflow.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class CallingStepsFromStepDefinitionSteps : Steps\n{\n  [Given(@\"the user (.*) exists\")]\n  public void GivenTheUserExists(string name) { ... }\n\n  [Given(@\"I log in as (.*)\")]\n  public void GivenILogInAs(string name) { ... }\n\n  [Given(@\"(.*) is logged in\")]\n  public void GivenIsLoggedIn(string name)\n  {\n    Given(string.Format(\"the user {0} exists\", name));\n    Given(string.Format(\"I log in as {0}\", name));\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Basic Reqnroll Configuration Schema\nDESCRIPTION: Minimal reqnroll.json configuration file with schema reference for IDE autocompletion\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Test Output for Unimplemented Feature\nDESCRIPTION: The test output indicates that a method in the PriceCalculationFeature is not implemented, throwing a System.NotImplementedException. This serves as a reminder to implement the necessary functionality in the application code.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nTest method ReqnrollQuickstart.Specs.Features.PriceCalculationFeature.ClientHasASimpleBasket threw exception: \nSystem.NotImplementedException: The method or operation is not implemented.\n```\n\n----------------------------------------\n\nTITLE: Displaying Reqnroll Sample Projects Table in Markdown\nDESCRIPTION: A markdown table listing sample Reqnroll projects with their versions, contributors, and descriptions. Includes links to ReqOverflow and ReqPlayWright sample projects.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/help/samples.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{list-table}\n:header-rows: 1\n\n* - Sample\n  - Reqnroll version\n  - Contributors\n  - Description\n* - [ReqOverflow](https://github.com/reqnroll/Sample-ReqOverflow)\n  - 1.0.0\n  - [@gasparnagy](https://github.com/gasparnagy)\n  - Shows different automation strategies for a realistic web application (Q&A site): controller, REST API, Web UI (Selenium).\n* - [ReqPlayWright](https://github.com/ZsoltDunai/ReqnrollTestProjectWithPlayWright)\n  - 1.0.1\n  - [@ZsoltDunai](https://github.com/ZsoltDunai)\n  - Sample PlayWright test project that shows how to setup Reqnroll and PlayWright with modern principles.\n```\n\n----------------------------------------\n\nTITLE: Customizing Windsor Binding Behavior in Reqnroll (C#)\nDESCRIPTION: Explains how to disable the default auto-registration of Reqnroll binding classes (like step definitions and hooks) by setting `AutoRegisterBindings = false` within the `[ScenarioDependencies]` attribute. When this option is used, the developer must manually register all necessary bindings within the `CreateContainer` method.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/windsor.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ScenarioDependencies(AutoRegisterBindings = false)]\npublic static IWindsorContainer CreateContainer()\n{\n    // Register your bindings here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps DotNetCoreCLI Task for AND Condition\nDESCRIPTION: A YAML configuration example for the DotNetCoreCLI task in Azure DevOps, showing how to filter tests that match multiple tags using AND logic.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/execution/executing-specific-scenarios.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreCLI@2\n  displayName: 'dotnet test'\n  inputs:\n    command: test\n    projects: 'BookShop.AcceptanceTests'\n    arguments: '--filter \"TestCategory=us123&TestCategory=done\"'\n```\n\n----------------------------------------\n\nTITLE: Reqnroll Binding Note\nDESCRIPTION: Important note about the scope of bindings in Reqnroll projects, indicating that all bindings including step definitions, hooks, and step argument transformations are global for the entire project.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/bindings.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBindings (step definitions, hooks, step argument transformations) are global for the entire Reqnroll project.\n```\n\n----------------------------------------\n\nTITLE: Configuring Reqnroll Documentation Structure with toctree\nDESCRIPTION: Table of contents configuration using Sphinx toctree directive to organize documentation sections about extending Reqnroll. Specifies a max depth of 1 and lists four key extension topics.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/extend/index.md#2025-04-22_snippet_0\n\nLANGUAGE: toctree\nCODE:\n```\n:maxdepth: 1\n\nvalue-retrievers\nplugins\ndecorators\navailable-containers\n```\n\n----------------------------------------\n\nTITLE: Failed Test Output for Multiple Items Scenario\nDESCRIPTION: The test output shows an assertion failure for the expected price being $195.0 while the actual calculated price is $180.0. This highlights that the current implementation does not cover scenarios with multiple basket items.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/quickstart/index.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nAssert.AreEqual failed. Expected:<195.0>. Actual:<180.0>. \n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Reqnroll Automation Features in Markdown\nDESCRIPTION: This code snippet uses the toctree directive to create a table of contents for various Reqnroll automation features. It includes links to documentation on bindings, step definitions, hooks, and other related concepts.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nbindings\nstep-definitions\nhooks\nstep-argument-conversions\nasynchronous-bindings\nbindings-from-external-assemblies\ncucumber-expressions\nscoped-bindings\ndatatable-helpers\nsharing-data-between-bindings\ncontext-injection\nscenario-context\nfeature-context\n```\n```\n\n----------------------------------------\n\nTITLE: Linking to Reqnroll Support Page in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a hyperlink to the Reqnroll support page. It provides a clear and concise way for users to access support information.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/help/support.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Support page](https://reqnroll.net/support/)\n```\n\n----------------------------------------\n\nTITLE: Reqnroll Plugin Versioning Note\nDESCRIPTION: Note about the different versioning policy for maintained Reqnroll integration plugins like Reqnroll.Autofac.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/compatibility.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{note}\nThe versioning policy is slightly different for the maintained Reqnroll integration plugins (e.g. `Reqnroll.Autofac`). See the detailed policy for these in the section below.\n\n```\n\n----------------------------------------\n\nTITLE: MSBuild Log Prefix Pattern\nDESCRIPTION: Identifies the prefix pattern used for Reqnroll entries in MSBuild logs, which helps in filtering and identifying Reqnroll-specific log messages.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/help/troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Reqnroll]\n```\n\n----------------------------------------\n\nTITLE: Configuring Reqnroll to Use External F# Binding Assemblies - JSON\nDESCRIPTION: This JSON snippet represents the configuration ('reqnroll.json') required for Reqnroll to recognize F# binding assemblies. The 'bindingAssemblies' key lists external assemblies (in this case, 'MyFSharpBindings') that contain step definitions, hooks, or conversions implemented in F#. The file should be included in the main C# or VB project that hosts feature files. Dependencies include specifying the correct assembly name and ensuring that the referenced F# assembly builds and is accessible to the test runner. The expected input is a valid JSON object with the appropriate schema URL; no output is produced by this file, but it enables the runtime discovery of F# bindings.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/integrations/fsharp.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://schemas.reqnroll.net/reqnroll-config-latest.json\",\n\n  \"bindingAssemblies\": [\n    { \n      \"assembly\": \"MyFSharpBindings\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This code snippet defines a table of contents using markdown syntax. It lists several guide topics related to the Reqnroll project, including how to change the test execution framework, migrating from SpecFlow, implementing design patterns, and configuring behavior.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/guides/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nhow-to-change-test-execution-framework\nmigrating-from-specflow\ndriver-pattern\npage-object-model\nhow-to-configure-cucumber-expression-behavior\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Project Dependencies in Plain Text\nDESCRIPTION: This snippet lists the required Python packages for a Sphinx documentation project. It includes the core Sphinx package, the MyST parser for Markdown support, the Furo theme, extensions for copy buttons, auto-rebuild functionality, and Google Analytics integration. These packages need to be installed (e.g., via pip) to build the documentation correctly. The commented-out lines suggest other potential dependencies that are not currently active.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx\nmyst_parser\nfuro\nsphinx-copybutton\nsphinx-autobuild\nsphinxcontrib.googleanalytics\n\n# sphinx-markdown-tables\n# readthedocs-sphinx-search\n# sphinx-sitemap\n# sphinx-rtd-theme\n# recommonmark>=0.6,<1.0\n# sphinx-tabs\n# docutils<0.18\n# markdown\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block that hides the table of contents for this documentation page.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhide-toc: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining NuGet Package Version Constant in C#\nDESCRIPTION: Declares a public static class 'NuGetPackageVersion' with a constant string 'Version' set to 'NUGET_VERSION'. This constant can be used to reference the package version consistently across the system tests.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/Tests/Reqnroll.SystemTests/NuGetPackageVersion.template.cs.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Reqnroll.SystemTests;\n\npublic static class NuGetPackageVersion\n{\n    public const string Version = \"NUGET_VERSION\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents using Sphinx toctree\nDESCRIPTION: This snippet uses the Sphinx `toctree` directive in reStructuredText format to generate a table of contents for the documentation. It includes links to pages detailing project setup (`setup-project`), IDE configuration (`setup-ide`), general configuration (`configuration`), and compatibility information (`compatibility`), limiting the navigation depth to one level. This requires the Sphinx documentation generator.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/installation/index.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:maxdepth: 1\n\nsetup-project\nsetup-ide\nconfiguration\ncompatibility\n```\n\n----------------------------------------\n\nTITLE: Installing Reqnroll.Assist.Dynamic via Package Manager or CLI\nDESCRIPTION: Commands to install the Reqnroll.Assist.Dynamic package using either the Package Manager or .NET CLI.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/Plugins/Reqnroll.Assist.Dynamic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPackage Manager : Install-Package ReqnrollExtra.Assist.Dynamic\nCLI : dotnet add package ReqnrollExtra.Assist.Dynamic\n```\n\n----------------------------------------\n\nTITLE: Building Reqnroll HTML documentation using Sphinx\nDESCRIPTION: This PowerShell command runs the make script to generate HTML documentation for Reqnroll using Sphinx. The resulting files are created in the _build/html directory.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\make.cmd html\n```\n\n----------------------------------------\n\nTITLE: Defining a Value Class in C#\nDESCRIPTION: A minimal class definition for a value object. The class is likely intended as a base or marker class for value objects within the reqnroll project.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/Tests/Reqnroll.SystemTests/Plugins/Resources/VerifyPlugin/Verify Test.Check if Verify is working with Example Tables_2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Automatically rebuilding Reqnroll documentation with Sphinx autobuild\nDESCRIPTION: This PowerShell command starts the Sphinx autobuild process, which monitors file changes and automatically rebuilds the documentation. The result is accessible at http://localhost:8000.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\autobuild.cmd\n```\n\n----------------------------------------\n\nTITLE: Setting up Python environment for Reqnroll documentation\nDESCRIPTION: This PowerShell command navigates to the docs directory and runs a setup script to prepare the Python environment for building Reqnroll documentation.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd .\\docs\n.\\setupenv.ps1\n```\n\n----------------------------------------\n\nTITLE: TOC Configuration for IDE Integration\nDESCRIPTION: Table of contents directive specifying IDE integration sections with max depth of 1, including Visual Studio, Rider, and VSCode integration guides.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/ide-integrations/index.md#2025-04-22_snippet_0\n\nLANGUAGE: toctree\nCODE:\n```\n:maxdepth: 1\n\nvisual-studio/index\nrider/index\nvscode/index\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Changelog Updates\nDESCRIPTION: Command to list all commits since the last version tag for updating the CHANGELOG.md file\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --format=format:\"* %s (%an)\" --reverse <last-version-tag>..HEAD\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Using Static Type in C#\nDESCRIPTION: Example of implementing Reqnroll steps using a static Person type. This approach requires defining a separate Person class and writing more verbose code.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/Plugins/Reqnroll.Assist.Dynamic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n[Binding]\npublic class StepsUsingStaticType\n{\n    private Person _person;\n\n    [Given(@\"I create an instance from this table\")]\n    public void GivenICreateAnInstanceFromThisTable(Table table)\n    {\n        _person = table.CreateInstance<Person>();\n    }\n\n    [Then(@\"the Name property on Person should equal '(.*)'\")]\n    public void PersonNameShouldBe(string expectedValue)\n    {\n        Assert.AreEqual(expectedValue, _person.Name);\n    }\n}\n\n// And then make sure to not forget defining a separate Person class for testing, \n// since you don't want to reuse the one your system under test is using - that's bad practice\n\n// Should probably be in another file too...\n// might need unit tests if the logic is complicated\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public DateTime BirthDate { get; set; }\n    public double LengthInMeters { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Tree Configuration\nDESCRIPTION: Multiple toctree directives defining the documentation structure and navigation hierarchy for different sections.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{toctree}\n:hidden:\n\nquickstart/index\ninstallation/index\nguides/index\n```\n\nLANGUAGE: text\nCODE:\n```\n{toctree}\n:caption: Features\n:hidden:\n\ngherkin/index\nautomation/index\nexecution/index\nextend/index\n```\n\nLANGUAGE: text\nCODE:\n```\n{toctree}\n:caption: Integrations\n:hidden:\n\nintegrations/index\nide-integrations/index\n```\n\nLANGUAGE: text\nCODE:\n```\n{toctree}\n:caption: Help\n:hidden:\n\nhelp/troubleshooting\nhelp/faq\nhelp/samples\nhelp/support\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Structure with Sphinx toctree\nDESCRIPTION: Sphinx toctree directive that defines the documentation structure for Gherkin-related topics with maximum depth of 1 level.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/gherkin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: toctree\nCODE:\n```\n{toctree}\n:maxdepth: 1\n\nfeature-files\nfeature-language\ngherkin-reference\n```\n\n----------------------------------------\n\nTITLE: Warning Admonition Block in Markdown\nDESCRIPTION: A markdown admonition block indicating that the documentation is in progress and inviting contributions through GitHub.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/ide-integrations/rider/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{admonition} Documentation is in progress\n:class: warning\n\nThis documentation page is in progress. Please come back later or help contributing to it in out [open-source GitHub project](https://github.com/reqnroll/Reqnroll).\n```\n\n----------------------------------------\n\nTITLE: Gherkin DataTable Column Naming Example (Standard)\nDESCRIPTION: Provides an example of a Gherkin `DataTable` header row using standard PascalCase naming convention for columns (`FirstName`, `LastName`, `DateOfBirth`, `HappinessRating`). This is used to illustrate Reqnroll's flexibility in matching column names.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/datatable-helpers.md#2025-04-22_snippet_19\n\nLANGUAGE: gherkin\nCODE:\n```\n| FirstName | LastName | DateOfBirth | HappinessRating |\n```\n\n----------------------------------------\n\nTITLE: Tagged Async Hook Implementation in C#\nDESCRIPTION: Demonstrates implementation of a tagged asynchronous hook using async/await pattern.\nSOURCE: https://github.com/reqnroll/reqnroll/blob/main/docs/automation/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Binding]\npublic class MyHooks\n{\n    [BeforeScenario(\"@requiresUsers\")]\n    public async Task SetupTestUsersAsync()\n    {\n        //...\n        // Asynchronous setup logic\n        // Example async operation\n        await Task.Delay(1000);\n    }\n}\n```"
  }
]