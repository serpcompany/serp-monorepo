[
  {
    "owner": "crystalfiction",
    "repo": "pathviz",
    "content": "TITLE: Generating Path Visualizations with CLI Options\nDESCRIPTION: Example commands for generating different visualizations of path data using the CLI, with options for limiting logs, setting orientation, and enabling clustering or heatmap features.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# generate a visual,\n# limit to 10 logs,\n# starting from the earliest log\npython cli.py viz --limit 10 --orient top\n\n# generate a visual\n# limit to 5 logs,\n# starting from the latest log,\n# and generate clusters\npython cli.py viz --limit 5 --orient btm --c\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Configuration for pathViz\nDESCRIPTION: Example of the .env configuration file for pathViz, demonstrating how to set the Dwarf Fortress path and optional data directories. This is required for the tool to know where to find and store data.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# locate the system path to your Dwarf Fortress\n# game directory, then set DF_PATH to the system path\nDF_PATH=\"\"\n# for example...\nEXAMPLE_DF_PATH=\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Dwarf Fortress\"\n\n# optional variables specifying the directory\n# names pathViz will use to write data\nDATA_DIR=\"data/\"\nOUTPUT_DIR=\"output/\"\n```\n\n----------------------------------------\n\nTITLE: Generating Path Statistics with CLI Command\nDESCRIPTION: Command to analyze path data and generate key metrics using the statistics feature. This provides insights into dwarf movement patterns and goals.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# generate some stats\npython cli.py stats\n\n## EXAMPLE OUTPUT\n-----------------------------------\npathViz Stats\n-----------------------------------\n'Total avg dist travelled: 20.1'\n\n           avg_dist         common_goal\nsnapshot\n001000625     12.57  SeekItemForStorage\n001000704     20.00           StoreItem\n001000711     27.71  SeekItemForStorage\n\n'Most common goal: SeekItemForStorage'\n\n                    avg_dist\ngoal\nSeekItemForStorage     28.27\nStoreItem              15.00\nStartGiveFoodWater     11.00\nWorkAtBuilding          5.00\nSeekEatingChair2        0.00\n\n-----------------------------------\n```\n\n----------------------------------------\n\nTITLE: Loading Path Data with CLI Command\nDESCRIPTION: Command to parse and load path log files into the current snapshot using the CLI interface. This processes recorded path data for analysis.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython cli.py load\n```\n\n----------------------------------------\n\nTITLE: Creating Data Snapshots with CLI Command\nDESCRIPTION: Command to create a subset of path data as a snapshot, allowing separation of different time periods or scenarios for comparison. This helps organize collected path data.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython cli.py snapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring the logPaths.lua File Path\nDESCRIPTION: Example of how to modify the logPaths.lua script to properly configure the file path prefix for log storage. This ensures that path data is saved to the correct location.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\n// default\nlocal filePrefix = \"\"\n\n// is updated to (using default directory names)...\nlocal filePrefix = \"C:\\\\<path_to_pathViz>\\\\data\\\\logs\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up pathViz Environment with Full Installation\nDESCRIPTION: Commands to install dependencies and set up the environment for pathViz with full functionality. This includes installing pipenv, required packages, and activating the virtual environment.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# make sure you're in the pathViz directory\ncd <path_to_pathViz>/pathViz\n\n# install pipenv to manage Python packages + venv\npip install pipenv\n\n# install dependencies with pipenv\npipenv install\n\n# finally, start the pipenv virtual environment\npipenv shell\n```\n\n----------------------------------------\n\nTITLE: Starting the pathViz GUI\nDESCRIPTION: Command to launch the pathViz graphical user interface. This provides access to the tool's functionality through a browser-based interface.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython gui.py\n```\n\n----------------------------------------\n\nTITLE: Clearing Current Snapshot Data with CLI Command\nDESCRIPTION: Command to wipe the current snapshot from memory without removing log files. This allows starting fresh without losing previously recorded data.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython cli.py clear\n```\n\n----------------------------------------\n\nTITLE: Reloading DFHack Scripts in Game Console\nDESCRIPTION: Lua command to reload DFHack scripts after setup, ensuring that the logPaths script is recognized by the game. This must be run in the DFHack console.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\n:lua require('script-manager').reload()\n```\n\n----------------------------------------\n\nTITLE: Testing pathViz Setup with Load Command\nDESCRIPTION: Command to verify the setup by attempting to load log data. This is used to check if the basic functionality is working correctly.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython cli.py load\n```\n\n----------------------------------------\n\nTITLE: Installing Node Packages for pathViz GUI\nDESCRIPTION: Commands to install the necessary Node.js packages for the GUI component of pathViz. This is required if planning to use the graphical interface.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# go into the GUI app and install node packages\ncd gui\nnpm install\n\n# return to the root directory\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Starting pathViz Using PowerShell Script\nDESCRIPTION: Command to run the PowerShell script that sets up and launches the pathViz GUI. This is part of the simple setup process for users with minimal programming experience.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./pathViz.ps1\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Version in Terminal\nDESCRIPTION: A simple command to check the installed Python version. This is part of the setup verification process to ensure Python 3.10.11 is correctly installed.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# running this\npython -V\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Full Website Access\nDESCRIPTION: This snippet configures the robots.txt file to allow all user agents full access to the website. It specifies no disallowed paths, effectively permitting crawling of all pages.\nSOURCE: https://github.com/crystalfiction/pathviz/blob/main/gui/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]