[
  {
    "owner": "allianz",
    "repo": "ng-aquila",
    "content": "TITLE: Basic Button Example in HTML\nDESCRIPTION: Demonstrates the usage of a basic button component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for NgX Documentation UI Integration\nDESCRIPTION: This snippet demonstrates how to configure the AppModule to integrate the NgX Documentation UI. It imports the necessary modules and tokens, sets up basic routing with a redirect to the welcome page, and provides the documentation manifest to the module.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NXV_MANIFEST_TOKEN, NxvDocumentationModule } from '@aposin/ngx-docs-ui';\nimport * as NX_MANIFEST from '@aposin/ng-aquila/documentation/manifest.json';\nimport { RouterModule } from '@angular/router';\n\nconst ROUTES = [\n    {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: '/welcome',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(ROUTES, { enableTracing: false }), NxvDocumentationModule.forRoot()],\n    providers: [{ provide: NXV_MANIFEST_TOKEN, useValue: NX_MANIFEST }],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Checkbox Groups\nDESCRIPTION: Demonstrates how to implement dynamically generated checkbox groups.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-dynamic) -->\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Table with Data Only in Angular\nDESCRIPTION: This snippet shows how to create a dynamic table by passing only the data, without column definitions. The table will use property names as column headers and display all data.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dynamic-table/dynamic-table.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(dynamic-table-data) -->\n```\n\n----------------------------------------\n\nTITLE: Adding ng-aquila to Angular Project\nDESCRIPTION: Command to add ng-aquila to an existing Angular project using ng add.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nng add @aposin/ng-aquila\n```\n\n----------------------------------------\n\nTITLE: Integrating Axe Accessibility Testing in TypeScript\nDESCRIPTION: TypeScript example showing how to integrate the Axe accessibility testing library into automated tests. This helps detect accessibility violations during development or testing phases.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accessibility/accessibility.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naxe.run(actual, {}, (error: Error, results: axe.AxeResults) => {\n    if (results.violations.length) {\n        // report violations\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Data into Modal Component in TypeScript\nDESCRIPTION: Shows how to inject data into a modal component using the NX_MODAL_DATA token.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/modal/modal.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Inject } from '@angular/core';\nimport { NX_MODAL_DATA } from '@aposin/ng-aquila/modal';\n\n@Component({\n    selector: 'your-dialog',\n    template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n    constructor(@Inject(NX_MODAL_DATA) readonly data: any) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Button with Reactive Forms\nDESCRIPTION: Implementation of radio buttons using reactive forms approach, demonstrating form control integration.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Recommended: Composable Dropdown Implementation\nDESCRIPTION: Shows the preferred approach for implementing a dropdown using composition. This method provides better flexibility and allows for custom content and event handling.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- ✅ GOOD EXAMPLE: -->\n<nx-dropdown>\n    <nx-dropdown-item value=\"apple\" class=\"my-class\">Apple</nx-dropdown-item>\n    <nx-dropdown-item value=\"banana\" (click)=\"bananaWasClicked()\">\n        <nx-icon size=\"small\" name=\"banana\"></nx-icon>\n        Banana\n    </nx-dropdown-item>\n</nx-dropdown>\n```\n\n----------------------------------------\n\nTITLE: File Type Validation\nDESCRIPTION: Shows how to implement file type restrictions using MIME types and file extensions\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-type-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Table with Column Definitions in Angular\nDESCRIPTION: This example demonstrates how to implement a dynamic table using column definitions. It uses NxDynamicTablColumnDefinition[] to specify ordering, display names, and data types for columns.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dynamic-table/dynamic-table.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(dynamic-table) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Comparison Table Implementation in Angular\nDESCRIPTION: Demonstrates a basic comparison table with rows, cells, and select buttons. Includes options for setting initially selected products and button labels.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table) -->\n```\n\n----------------------------------------\n\nTITLE: Using HTML autocomplete Attribute for Accessibility\nDESCRIPTION: Example of implementing the autocomplete attribute on an email input field to enhance form accessibility and usability. This helps users with assistive technologies to complete forms more easily.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accessibility/accessibility.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"email\" id=\"email\" name=\"email\" autocomplete=\"email\">\n```\n\n----------------------------------------\n\nTITLE: Default Card Implementation\nDESCRIPTION: Basic implementation of the nx-card component\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(card) -->\n```\n\n----------------------------------------\n\nTITLE: Template-driven Checkboxes with ngModel\nDESCRIPTION: Demonstrates using checkboxes with template-driven forms and ngModel for data binding.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-template-driven) -->\n```\n\n----------------------------------------\n\nTITLE: Opening Message Toasts with Different Content Types\nDESCRIPTION: Demonstrates three methods to display toast notifications: using a simple text string, a template reference, or a custom component. Each method returns a NxMessageToastRef that can be used to control the toast.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/message/message.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple message toast with a custom text\nlet toastRef: NxMessageToastRef = messageToastService.open('My message toast text');\n\n// Message toast with a custom template\nlet toastRef: NxMessageToastRef = messageToastService.openFromTemplate(myTemplateRef);\n\n// Message toast from a custom component\nlet toastRef: NxMessageToastRef = messageToastService.openFromComponent(myComponent);\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 18 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 18\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Basic File Uploader Usage\nDESCRIPTION: Demonstrates basic implementation of the file uploader component with built-in HTTP POST functionality and response handling\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Adding ng-aquila Styles to Angular Configuration\nDESCRIPTION: JSON configuration to add ng-aquila base styles and theme to angular.json file.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n    \"options\": {\n      // ...\n      \"styles\": [\n        // ...\n        \"node_modules/@aposin/ng-aquila/css/normalize.css\",\n        \"node_modules/@aposin/ng-aquila/themes/aposin.css\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tokens in Styles\nDESCRIPTION: Demonstrates how to use custom-defined tokens in SCSS styles after importing the theme file.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@import '<path-to-theme-file>/<your-theme>.scss';\n\n.test-class {\n    background: nx-theme(my-new-token);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deletable Tags with Custom Actions\nDESCRIPTION: Demonstrates how to set up deletable tags and utilize the component's addTag and clearTags methods, along with custom business logic and validation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-delete) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Input with Forms\nDESCRIPTION: Example demonstrating how to use the phone input component with Angular forms (both template-driven and reactive). The control expects values in the format '+<country-calling-code><local number>'.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-forms) -->\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Context Menus in Angular\nDESCRIPTION: Shows how to implement sub-menus within a context menu by defining root and sub-menus and setting the nxContextMenuTriggerFor on the nxContextMenuItem that should trigger the sub-menu.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-nested) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to ng-aquila v19.0.0\nDESCRIPTION: Command to automatically migrate breaking changes when updating to ng-aquila v19.0.0.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Project with CLI\nDESCRIPTION: Commands to install Angular CLI globally and create a new Angular project.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g @angular/cli\nng new my-allianz-project\n```\n\n----------------------------------------\n\nTITLE: Making Scrollable Containers Keyboard Accessible with tabindex\nDESCRIPTION: HTML example showing how to make a scrollable container accessible to keyboard users by adding tabindex=\"0\". This allows keyboard users to focus and navigate through scrollable content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accessibility/accessibility.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"i-do-scroll\" tabindex=\"0\">\n    <p> A very long text </p>\n    ...\n    <p> End. </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Progress Indicator in Angular\nDESCRIPTION: Demonstrates how to use the Single Indicator type, which shows a progress bar, current step caption, and hint for the next step. It uses nxStepperPrevious and nxStepperNext directives for navigation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper) -->\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Forms with Single Form in Progress Indicator\nDESCRIPTION: Demonstrates how to use reactive forms with the Progress Indicator, using a single form for the entire indicator.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-reactivesingle) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Auto-Selection Behavior in Aquila Angular\nDESCRIPTION: Demonstrates how to configure tabs to either automatically select when focused (auto-select) or require manual activation with SPACE/ENTER (manual select).\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/tabs/tabs.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Configuration for auto-select vs. manual select\ntabGroup.autoSelect = true; // or false for manual selection\n```\n\n----------------------------------------\n\nTITLE: Reactive Form with Slider Integration\nDESCRIPTION: Demonstrates how to use the slider component within reactive forms for more complex form handling.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-reactive)\n```\n\n----------------------------------------\n\nTITLE: Implementing Right-Click Context Menu in Angular\nDESCRIPTION: Shows how to set the mode of the context menu to 'cursor' to enable opening it via right-click, noting this should be used with a visible button for better usability.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-cursor-mode) -->\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle in Reactive Form\nDESCRIPTION: Example showing Circle Toggle integration with reactive forms.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Container with nxLayout in Angular\nDESCRIPTION: Demonstrates how to use the nxLayout directive to create a grid container, which establishes the necessary spacing for columns and rows.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/grid/grid.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div nxLayout=\"grid\"> [...] </div>\n```\n\n----------------------------------------\n\nTITLE: Importing NgOptimizedImage in Angular\nDESCRIPTION: Shows how to import the NgOptimizedImage directive from @angular/common to enable optimized image capabilities in an Angular application.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/image/image.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgOptimizedImage } from '@angular/common';\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi Progress Indicator in Angular\nDESCRIPTION: Demonstrates the Multi Indicator type, which divides the overall progress bar by step names. It notes that steps without [stepControl] are marked as completed by default after being passed.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-multi) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Modal Settings in TypeScript\nDESCRIPTION: Demonstrates how to set global default options for modals using the NX_MODAL_DEFAULT_CONFIG injection token.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/modal/modal.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {\n        provide: NX_MODAL_DEFAULT_OPTIONS,\n        useValue: { width: 700px, showCloseIcon: true}\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Timefield with Validation\nDESCRIPTION: Implementation of time validation that adds timefieldValueError when time is invalid or inputs are not properly set.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nx-timefield [enableTimeValidation]=\"true\"></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Input Validation\nDESCRIPTION: Example showing how to implement custom validation for phone numbers using libphonenumber-js, which needs to be installed separately.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Reactive Forms with Checkboxes\nDESCRIPTION: Shows how to implement checkboxes within reactive forms in Angular.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-outputs) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Natural Language Form Example\nDESCRIPTION: Shows a basic implementation of Natural Language Form with error handling through popover display when field is touched and blurred.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/natural-language-form/natural-language-form.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(natural-language-form-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Comparison Table with Disabled Columns in Angular\nDESCRIPTION: Demonstrates how to disable specific columns in the comparison table using the 'disabledColumn' input on header cells.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-disabled-columns) -->\n```\n\n----------------------------------------\n\nTITLE: Dynamically Filled Comparison Table in Angular\nDESCRIPTION: Illustrates how to create a comparison table with dynamically loaded content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-dynamic) -->\n```\n\n----------------------------------------\n\nTITLE: Custom Upload Implementation\nDESCRIPTION: Demonstrates custom HTTP request implementation for file uploading\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-with-request) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Radio Button Group Validation\nDESCRIPTION: Implementation of validation and error messages for radio button groups in expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-group-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Small Button Example in HTML\nDESCRIPTION: Shows how to implement a small-sized button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-small) -->\n```\n\n----------------------------------------\n\nTITLE: Template-driven Form with Slider and ngModel\nDESCRIPTION: Shows how to integrate the slider component in template-driven forms using ngModel for two-way data binding.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-template)\n```\n\n----------------------------------------\n\nTITLE: Separate Upload Requests\nDESCRIPTION: Shows how to configure separate upload requests for each file\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-separate-requests) -->\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Theme\nDESCRIPTION: Uses the nx-build-theme mixin to inject the custom theme tokens into the components, which should be done once after registering the theme.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@include nx-build-theme(themeName);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Basic Formfield Implementation\nDESCRIPTION: Example of the basic HTML structure for a formfield component with an input control.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/formfield/formfield.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nx-formfield label=\"Phone number\">\n    <formfield-custom-tel-input-example></formfield-custom-tel-input-example>\n</nx-formfield>\n```\n\n----------------------------------------\n\nTITLE: Using aria-label with Icons for Accessibility\nDESCRIPTION: Examples of how to properly use the aria-label attribute with icons for accessibility, including variable binding, static values, and usage within elements that already have labels.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/icon/icon.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nx-icon [attr.aria-label]=\"myAriaLabelVariable\"></nx-icon>\n```\n\nLANGUAGE: html\nCODE:\n```\n<nx-icon aria-label=\"My icon description string\"></nx-icon>`\n```\n\nLANGUAGE: html\nCODE:\n```\n<button nxButton>\n    <nx-icon aria-hidden=\"true\" name=\"plus\"></nx-icon>\n    Add item\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loaded Tab Content in Aquila Angular\nDESCRIPTION: Demonstrates using the nxTabContent directive to lazily initialize tab content, which improves performance by delaying content creation until a tab is activated.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/tabs/tabs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ng-template nxTabContent>\n  <!-- Lazily loaded content here -->\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Recommended Global Theme Implementation\nDESCRIPTION: Shows the recommended approach for implementing a custom theme globally by importing the necessary files and building the theme in a global SCSS file.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@import '@aposin/ng-aquila/styles/theming';\n@import '<path-to-theme-file>/<your-theme>.scss';\n\n@include nx-build-theme(themeName);\n```\n\n----------------------------------------\n\nTITLE: Configuring NDBX Icons in a Standalone Angular Application\nDESCRIPTION: Example of how to set up NDBX icons in a standalone Angular application using the provideNdbxIcons() provider in the application config.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/icon/icon.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { provideNdbxIcons } from '@allianz/ngx-ndbx/icon';\n\n// in app.config.ts\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNdbxIcons()\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Slider with Textual Values\nDESCRIPTION: Shows how to use formatter functions to create sliders that display textual values instead of numeric ones, mapping text to the numeric slider model.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-textual)\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-clickable Avatar in Angular Aquila\nDESCRIPTION: Example of using the basic non-clickable avatar component. This version of the avatar is used for display purposes only and doesn't respond to user interaction.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/avatar/avatar.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(avatar) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Forms with Number Stepper\nDESCRIPTION: Shows how to use the Number Stepper component in reactive forms.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Multiple File Uploader Categories\nDESCRIPTION: Shows how to implement multiple file uploaders with different configurations for file categories\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-categories) -->\n```\n\n----------------------------------------\n\nTITLE: Timefield with Dropdown Picker\nDESCRIPTION: Implementation of Timefield with an optional timepicker dropdown that appears on icon click or when typing. Requires translation of buttonOpenTimepickerAriaLabel for non-English languages.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nx-timefield [withTimepicker]=\"true\"></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Basic Context Menu Implementation in Angular\nDESCRIPTION: Shows the basic implementation of a context menu which is attached to and opened via the nxContextTriggerFor directive.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Opening a Modal Dialog with Component in TypeScript\nDESCRIPTION: Demonstrates how to open a modal dialog using the NxDialogService, passing data and handling the result.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/modal/modal.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myDialogData: MyDialogData = { /* some data */ };\n\nconst myDialogRef: NxModalRef<MyDialogComponent, MyDialogResult> = this.dialogService.open(MyDialogComponent, {\n    width: '600px',\n    data: myDialogData,\n});\n\n// always support undefined result type for easily closable dialogs\nmyDialogRef.beforeClosed().subscribe(result => {\n    console.log(`Dialog result: ${result}`);\n});\n\n// result parameter is optional, defaults to undefined\nmyDialogRef.close('some dialog result');\n```\n\n----------------------------------------\n\nTITLE: File Uploader Error List\nDESCRIPTION: Demonstrates comprehensive error handling including form control validators and the errors property\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-error-list) -->\n```\n\n----------------------------------------\n\nTITLE: Reactive Forms Card Integration\nDESCRIPTION: Implementation showing integration with Angular's reactive forms\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Progress in Progress Indicator\nDESCRIPTION: Demonstrates how to force users to complete a form before continuing by enabling linear progress and assigning form groups to steps using the [stepControl] Input.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-progress) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Button in Reactive Forms in Angular\nDESCRIPTION: Shows how to use Toggle Buttons within a reactive form, noting that disabling should be done through the form control rather than the disabled property.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Highlight Selectable Card\nDESCRIPTION: Selectable card implementation with highlight header functionality\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(highlight-selectable-card) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox States in Angular\nDESCRIPTION: Demonstrates the six supported states of the checkbox component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-states) -->\n```\n\n----------------------------------------\n\nTITLE: Drop Zone Implementation\nDESCRIPTION: Demonstrates implementation of the file upload drop zone component\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-drop-zone) -->\n```\n\n----------------------------------------\n\nTITLE: Custom Item Template\nDESCRIPTION: Demonstrates how to customize the template for rendering file list entries\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-custom-item) -->\n```\n\n----------------------------------------\n\nTITLE: Importing ng-aquila Utility Styles in Angular CLI Configuration\nDESCRIPTION: Shows how to import ng-aquila utility styles through the Angular CLI configuration file. This includes margin utilities and other CSS helpers.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/layout/layout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"styles\": [\n  \"node_modules/@aposin/ng-aquila/css/utilities.css\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using Template-driven Forms with Number Stepper\nDESCRIPTION: Demonstrates how to use the Number Stepper component in template-driven forms with ngModel.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-template-driven) -->\n```\n\n----------------------------------------\n\nTITLE: Reactive Form with Checkbox Group\nDESCRIPTION: Shows how to use checkbox groups within reactive forms.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Integrating Tag Group with Angular Forms\nDESCRIPTION: Shows how to use tag groups with ngModel or reactive forms for form input.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tag-group-forms) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring AG Grid CSS Imports in Angular.json\nDESCRIPTION: Example of configuring the necessary CSS imports for AG Grid with Aquila theme in the Angular.json file. This includes the base AG Grid styles, Alpine theme, and the Aquila theme overlay.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/ag-grid/ag-grid.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"styles\": [\n  \"node_modules/ag-grid-community/styles/ag-grid.css\",\n  \"node_modules/ag-grid-community/styles/ag-theme-alpine.css\",\n  \"node_modules/@aposin/ng-aquila/themes/ag-theme-aquila.css\",\n  \"src/styles.scss\"\n]\n```\n\n----------------------------------------\n\nTITLE: Large Button Example in HTML\nDESCRIPTION: Shows how to create a large-sized button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-large) -->\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Label Formatters\nDESCRIPTION: Demonstrates how to customize labels on the slider by providing formatter functions that can modify how min, max, and current values are displayed.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-label)\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Column Options in Dynamic Table\nDESCRIPTION: This example shows how to configure various column options in a dynamic table. It illustrates the flexibility in customizing column behavior and appearance.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dynamic-table/dynamic-table.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(dynamic-table-column-options) -->\n```\n\n----------------------------------------\n\nTITLE: Comparison Table with Row Groups in Angular\nDESCRIPTION: Demonstrates grouping rows for tables with many entries, allowing expandable sections with customizable visible rows and button text.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-row-group) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Features in Number Stepper\nDESCRIPTION: Demonstrates how to implement accessibility features in the Number Stepper, including aria-labels for increment and decrement buttons and the input field.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-a11y) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection Menu in Angular\nDESCRIPTION: Demonstrates how to implement a multiple selection menu based on the Context Menu component, allowing users to select multiple items simultaneously.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-select-multiple) -->\n```\n\n----------------------------------------\n\nTITLE: File Uploader Internationalization\nDESCRIPTION: Shows how to customize text strings used in the file uploader component for internationalization\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-intl) -->\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Context Menus in Angular\nDESCRIPTION: Shows how to pass additional context data to the context menu panel via the nxContextMenuTriggerData input, allowing a single menu instance to be rendered with different data depending on the trigger.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-data) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Spinner Announcements in Angular Aquila\nDESCRIPTION: Example showing how to make spinners accessible by implementing ARIA announcements for screen readers, ensuring users with assistive technologies are aware of loading content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/spinner/spinner.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(spinner-aria-announcement) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Form Controls in Comparison Table\nDESCRIPTION: Demonstrates the integration of form controls like dropdowns within the comparison table for expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-form-elements) -->\n```\n\n----------------------------------------\n\nTITLE: Small Stage with Background Images in HTML\nDESCRIPTION: Example demonstrating how to add background images to the small stage component through CSS on the main container for additional visual styling.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/small-stage/small-stage.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(small-stage-w-bg)-->\n```\n\n----------------------------------------\n\nTITLE: Using Tag Group for Multi-select Patterns in Angular\nDESCRIPTION: Demonstrates how to implement a multi-select pattern using nx-tag and nx-tag-group components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tag-group) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Events in Dynamic Table\nDESCRIPTION: This snippet demonstrates how to implement and handle table events in a dynamic table component. It showcases event handling capabilities of the table.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dynamic-table/dynamic-table.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(dynamic-table-event) -->\n```\n\n----------------------------------------\n\nTITLE: Internationalizing Tags with NxTagIntl Provider\nDESCRIPTION: Demonstrates how to use the NxTagIntl provider to translate strings used by tags for different locales.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tag-intl) -->\n```\n\n----------------------------------------\n\nTITLE: Slider with Tick Marks\nDESCRIPTION: Shows how to display tick marks under the slider using the [tickInterval] property which is relative to the [step] value.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-tick)\n```\n\n----------------------------------------\n\nTITLE: Integrating Taglist with Template-driven Forms\nDESCRIPTION: Demonstrates how to use the taglist component within template-driven forms using ngModel.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-templatedriven) -->\n```\n\n----------------------------------------\n\nTITLE: Selectable Card with Radio Buttons\nDESCRIPTION: Implementation of selectable cards using nx-selectable-card-group for radio button behavior\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-radio) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Popover Scroll Strategy with Injection Token\nDESCRIPTION: Demonstrates how to provide a custom scroll strategy for popovers using the NX_POPOVER_SCROLL_STRATEGY injection token with a factory provider. Shows how to choose between reposition, close, block, and noop strategies.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/popover/popover.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(popover-scroll-strategy-provider) -->\n```\n\n----------------------------------------\n\nTITLE: Handling No Data Scenario in Dynamic Table\nDESCRIPTION: This example illustrates how to handle a scenario where no data is provided to the dynamic table. It allows users to add a customized message for empty data sets.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dynamic-table/dynamic-table.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(dynamic-table-without-data) -->\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle in Template-Driven Form\nDESCRIPTION: Example demonstrating how to use Circle Toggle with ngModel in a template-driven form.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-template-driven) -->\n```\n\n----------------------------------------\n\nTITLE: Negative Button Example in HTML\nDESCRIPTION: Shows the implementation of a negative-styled button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Extended Natural Language Form Example\nDESCRIPTION: Demonstrates a Natural Language Form with multiple words and form field types including NxInput and NxDropdown components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/natural-language-form/natural-language-form.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(natural-language-form-extended) -->\n```\n\n----------------------------------------\n\nTITLE: Clickable Card Implementation\nDESCRIPTION: Card implementation with clickable functionality using nxCardMainLink and nxCardSecondaryInfo directives\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(clickable-card) -->\n```\n\n----------------------------------------\n\nTITLE: Using Variable for aria-label with Attribute Binding in Angular\nDESCRIPTION: Demonstrates how to bind a variable to the aria-label attribute using Angular's attribute binding syntax. This ensures proper screen reader functionality with dynamic content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accessibility/accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nx-icon [attr.aria-label]=\"myAriaLabelVariable\"></nx-icon>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Pagination with Unique ARIA Labels\nDESCRIPTION: This example shows how to implement accessible pagination when multiple pagination components are used on the same page. It demonstrates setting a unique ariaLabel to comply with accessibility rules.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/pagination/pagination.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(pagination-a11y) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in Number Stepper\nDESCRIPTION: Demonstrates how to implement validation in the Number Stepper, including step validation and format validation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-validation) -->\n```\n\n----------------------------------------\n\nTITLE: File Size Validation\nDESCRIPTION: Shows implementation of maximum file size validation and server error handling\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Integrating Toggle Button with Template-driven Forms in Angular\nDESCRIPTION: Demonstrates how to use Toggle Buttons within a template-driven form using ngModel.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle-form) -->\n```\n\n----------------------------------------\n\nTITLE: Internationalizing Phone Input\nDESCRIPTION: Example showing how to set different translations for countries and change text labels using either template inputs or the NxPhoneInputIntl provider.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-i18n) -->\n```\n\n----------------------------------------\n\nTITLE: Button with Icon Example in HTML\nDESCRIPTION: Illustrates how to add icons to buttons using nxIconPositionStart or nxIconPositionEnd attributes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-with-icon) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Negative Styling for Links in Angular\nDESCRIPTION: Shows how to apply negative styling to links, which is useful for links that appear on dark backgrounds.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Radio Button Error Message for Retail\nDESCRIPTION: Example of implementing error messages for radio buttons in retail (B2C) applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-error-retail) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Item in Angular Aquila\nDESCRIPTION: The nxMenuItem is used to structure sections within the menu. It can contain multiple nxMenuLink elements and supports two different indentation levels to accommodate various design needs.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/menu/menu.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(menu-item) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Row Header in Angular Aquila\nDESCRIPTION: This snippet demonstrates how to create a header with two rows using the nx-header component. Each row is defined using the nx-header-row element, allowing content to be organized in multiple levels.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/header/header.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<header nx-header>\n    <nx-header-row> First row </nx-header-row>\n    <nx-header-row> Second row </nx-header-row>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Importing NxFormfieldModule Separately\nDESCRIPTION: Shows how to import NxFormfieldModule separately, requiring an additional nxInput control in the HTML template.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/formfield/formfield.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle with Validation\nDESCRIPTION: Example demonstrating form validation with Circle Toggle components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-validation)-->\n```\n\n----------------------------------------\n\nTITLE: Importing NxInputModule with Integrated NxFormfieldModule\nDESCRIPTION: Shows how to import the NxInputModule which already includes the NxFormfieldModule, making it sufficient for most use cases.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/formfield/formfield.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxInputModule } from '@aposin/ng-aquila/input';\n```\n\n----------------------------------------\n\nTITLE: Standard Data Display Implementation in Angular\nDESCRIPTION: Shows the basic implementation of the data display component for creating label-value pairs.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/data-display/data-display.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(data-display-standard) -->\n```\n\n----------------------------------------\n\nTITLE: Responsive Data Display Layout in Angular\nDESCRIPTION: Demonstrates implementing responsive layouts with data display using NxViewportService and the labelColumns input for controlling label:value size ratio in horizontal-columns mode.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/data-display/data-display.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(data-display-responsive) -->\n```\n\n----------------------------------------\n\nTITLE: Using Objects as Input for Taglist\nDESCRIPTION: Shows how to use objects with a nxTaglistLabel property as input for the taglist component, providing flexibility for various use cases.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-objects) -->\n```\n\n----------------------------------------\n\nTITLE: Expert File Uploader\nDESCRIPTION: Shows expert configuration with small-medium button and drop zone component\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-expert) -->\n```\n\n----------------------------------------\n\nTITLE: Creating Black-Styled Links in Angular\nDESCRIPTION: Example of links with black styling, which provides a different color scheme for links that may need to stand out against certain backgrounds.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-black) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Sidepanel Structure in HTML\nDESCRIPTION: Shows the basic structure required to implement a sidepanel, including the outer container that wraps both the main content and sidepanel content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/sidepanel/sidepanel.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nx-sidepanel-outer-container>\n    <!-- Main content of the page -->\n\n    <nx-sidepanel>\n        <!-- Content besides the main area of the page -->\n    </nx-sidepanel>\n</nx-sidepanel-outer-container>\n```\n\n----------------------------------------\n\nTITLE: Simple Binding with Checkbox\nDESCRIPTION: Shows how to implement simple data binding with the checkbox component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-simple-binding) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Premium Breakdown Table in Angular\nDESCRIPTION: Demonstrates a simplified variant of the premium breakdown table for expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(breakdown-table-expert) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Links in Angular\nDESCRIPTION: Example of the default nxLink implementation in Angular. The default styling provides a basic link appearance that can be used for standard navigation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-default) -->\n```\n\n----------------------------------------\n\nTITLE: Applying Formatting to Phone Input\nDESCRIPTION: Example showing how to implement custom formatting for phone numbers using the inputFormatter property. The formatter function is called on the input's blur event.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-formatting) -->\n```\n\n----------------------------------------\n\nTITLE: Importing NDBX Icons Module in an Angular NgModule\nDESCRIPTION: Example of importing the NDBX icon module in a traditional Angular module-based application. This approach is recommended at the root level of the application.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/icon/icon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxIconModule } from '@aposin/ng-aquila/icon';\nimport { NdbxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n    declarations: [\n        // ...\n    ],\n    imports: [\n        // ...\n        NxIconModule,\n        NdbxIconModule,\n    ],\n    // ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Comparison Table with Toggle Sections in Angular\nDESCRIPTION: Illustrates grouping multiple table rows into toggle sections with headers for better organization of content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-with-toggle-sections) -->\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to Angular Grid with nxRow\nDESCRIPTION: Shows how to implement a row within a grid container using the nxRow directive, which creates a flex container for columns.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/grid/grid.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div nxLayout=\"grid\">\n    <div nxRow> [...] </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Accordion Settings in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the EXPANSION_PANEL_DEFAULT_OPTIONS injection token to enable and configure scroll behavior for accordion panels globally.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accordion/accordion.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n    providers: [\n        {\n            provide: EXPANSION_PANEL_DEFAULT_OPTIONS,\n            useValue: {\n                scrollIntoViewActive: true,\n                scrollIntoViewOptions: {\n                    behavior: 'smooth'\n                }\n            }\n        }\n    ]\n\n```\n\n----------------------------------------\n\nTITLE: Expert Small Stage with Narrow Content in HTML\nDESCRIPTION: Example showing the expert small stage with narrow content container, which switches the ratio between content and image containers to 50/50 for better positioning when headlines are short.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/small-stage/small-stage.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(small-stage-expert-content-narrow)-->\n```\n\n----------------------------------------\n\nTITLE: Importing BidiModule for RTL Support in Angular\nDESCRIPTION: Configuration for adding RTL support by importing BidiModule from Angular CDK in the application module. This is a prerequisite for enabling RTL support in ng-aquila components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/rtl/rtl.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport { BidiModule } from '@angular/cdk/bidi';\n\n@NgModule({\n    imports: [\n        // ...\n        BidiModule,\n    ],\n    // ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Layout for Radio Button Group\nDESCRIPTION: Example of horizontally laying out radio buttons in a group using various layout techniques like grid component, custom CSS grid, or flexbox.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-group-horizontal) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Link in Angular Aquila\nDESCRIPTION: The nxMenuLink directive is applied to anchor tags to style them properly within the menu. These links are typically displayed beneath expanded nxMenuButton elements.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/menu/menu.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(menu-link) -->\n```\n\n----------------------------------------\n\nTITLE: Localizing Number Stepper Component\nDESCRIPTION: Shows how to localize the Number Stepper component by subclassing NxNumberStepperIntl and providing translations.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-localize) -->\n```\n\n----------------------------------------\n\nTITLE: Manual Step Completion in Multi Progress Indicator\nDESCRIPTION: Shows how to manually complete steps in a Multi Indicator, including completing the last step using the [complete] Input when [linear]=\"true\" is set.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-form) -->\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to List Items in ng-aquila\nDESCRIPTION: Illustrates how to use the nxListIcon directive to add custom icons to list items. This example shows the flexibility of list styling in ng-aquila.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-icons) -->\n```\n\n----------------------------------------\n\nTITLE: Using a Different Base Theme\nDESCRIPTION: Demonstrates how to import and use a different base theme when creating a custom theme, specifying the base theme as the third argument to nx-register-theme.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@import \"@aposin/ng-aquila/styles/theming\";\n@import \"@aposin/ng-aquila/styles/themes/your-base-theme\";\n...\n$nx-themes: nx-register-theme($my-theme, themeName, baseThemeName);\n```\n\n----------------------------------------\n\nTITLE: Toggling Context Menu Programmatically in Angular\nDESCRIPTION: Demonstrates how to programmatically open and close a context menu using the API exposed by the context menu component. Note that an nxContextMenuTriggerFor directive is still necessary to attach the context menu to a DOM element.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-programmatic) -->\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Display with Formatter Function\nDESCRIPTION: Shows how to use a formatter function to customize the textual representation of tags, which can be useful for translation or other state-dependent displays.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-formatter) -->\n```\n\n----------------------------------------\n\nTITLE: Icon Button Example in HTML\nDESCRIPTION: Demonstrates the usage of an icon-only button using the nxIconButton component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-icon) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Global Message Toast Default Configuration\nDESCRIPTION: Shows how to override the default configuration for all message toasts in an application using the NX_MESSAGE_TOAST_DEFAULT_CONFIG injection token. This example sets a longer duration and changes the default context.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/message/message.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  providers: [\n    {\n      provide: NX_MESSAGE_TOAST_DEFAULT_CONFIG,\n      useValue: { duration: 7000, context: 'info' }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggle Button with Icons in Angular\nDESCRIPTION: Illustrates how to create custom Toggle Buttons, emphasizing the importance of using descriptive ariaLabels for accessibility when using icons.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle-custom) -->\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Layout Options\nDESCRIPTION: Demonstrates different layout options for checkboxes within a group, including grid and flexbox layouts.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-layout) -->\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Tokens with Utility Helpers\nDESCRIPTION: Demonstrates how to use the nx-theme and type-style utility helpers to access custom theme tokens in SCSS files after importing the theme file.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@import '<path-to-theme-file>/<your-theme>.scss';\n\n.test-class {\n    @include type-style(heading-01);\n    background: nx-theme(interactive-primary);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection Menu in Angular\nDESCRIPTION: Shows how to build a single selection menu on top of the Context Menu by using the selectable option on menu items for correct styling and maintaining selection state.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-selection) -->\n```\n\n----------------------------------------\n\nTITLE: General Theming Tokens Example\nDESCRIPTION: Lists the default general theming tokens that can be overwritten in a custom theme, including colors, focus states, text, and semantic tokens.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n  ui-background: #0f2A3D,\n  ui-01: #0F2A3D,\n  ui-02: #143851,\n  ui-03: #194666,\n  ui-04: #2D7FB8,\n  ui-05: #E9F7FB,\n  ui-06: #FFFFFF,\n\n  interactive-text: #27ABD6,\n  interactive-primary: #27ABD6,\n  hover-primary: #3BB4DB,\n  hover-secondary: #194666,\n\n  active-primary: #66C4E3,\n  hover-link: #51BCDF,\n\n  focus-box-shadow: (\n    0 0 0 2px #0F2A3D,\n    0 0 0 6px #27ABD6\n  ),\n\n  focus-inset-box-shadow: (\n    inset 0 0 0 4px #27ABD6,\n    inset 0 0 0 6px #0F2A3D\n  ),\n\n  // typically used on dark backgrounds\n  text-01: #FFFFFF,\n  // typically used on light backgrounds\n  text-02: #0F2A3D, // text, icon color of buttons, checkbox etc\n\n  info: #7C97D0,\n  warning: #EFBE25,\n  danger: #ED6F7C,\n  success: #26AE31,\n\n  accent-01: #00B17F, // emphasis\n  accent-02: #6B8CFF, // cta\n  accent-03: #C7A7EC, // attention\n\n  disabled-01: #969696,\n  disabled-02: #DBDBDB,\n  disabled-03: #EDEDED,\n  disabled-04: rgba(39, 171, 214, 0.35),\n\n  negative: #0F2A3D,\n  negative-accent: #E5E7E6,\n  negative-01: #23628F,\n  negative-02: #2D7FB8,\n  negative-background: #E5E7E6,\n\n  negative-dimmed: rgba(15, 42, 61, 0.4),\n  negative-01-dimmed: #23628F,\n  negative-02-dimmed: #2D7FB8,\n  negative-background-dimmed: rgba(229, 231, 230, 0.4),\n\n  grid-max-width: 1184px,\n\n  readonly-01: rgba(150, 150, 150, 0.35),\n  readonly-02: #969696,\n  readonly-03: #FFFFFF,\n```\n\n----------------------------------------\n\nTITLE: Adding cdkScrollable Directive for Proper Popover Scrolling Behavior\nDESCRIPTION: Shows how to apply the cdkScrollable directive to a container to ensure proper popover behavior during scrolling events. This directive from @angular/cdk/scrolling is required for correct popover positioning and closing behavior.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/popover/popover.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div cdkScrollable></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Pagination in Angular\nDESCRIPTION: This example demonstrates how to implement pagination for a slider using type=\"slider\". This variant supports a maximum of 6 slides.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/pagination/pagination.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(pagination-slider) -->\n```\n\n----------------------------------------\n\nTITLE: Using Toolbar with Divider in Angular\nDESCRIPTION: Example showing how to implement a toolbar with a divider line. The divider can be used when combining a business description with an icon-only back-link.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/toolbar/toolbar.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nx-toolbar-divider>\n```\n\n----------------------------------------\n\nTITLE: Block Button Example in HTML\nDESCRIPTION: Demonstrates how to create a full-width block button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-block) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Localization for Pagination in Angular\nDESCRIPTION: This example demonstrates how to implement localization for the pagination component by creating a custom implementation of the IPaginationTexts interface and providing it with the NX_PAGINATION_TEXTS injection token.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/pagination/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(pagination-localize) -->\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle Layout Options\nDESCRIPTION: Example showing different layout options for structuring Circle Toggle components within a group.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-layout) -->\n```\n\n----------------------------------------\n\nTITLE: Enabling tabindex Setting for Manual Popover Triggers\nDESCRIPTION: A feature addition that allows setting a tabindex for manual triggers in the popover component, improving keyboard accessibility.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n* **popover:** enable setting tabindex for manual trigger ([d729998](https://github.com/allianz/ng-aquila/commit/d729998eb9a917e8bce4ef2243ad9aa0b23fc94c))\n```\n\n----------------------------------------\n\nTITLE: Importing A11y Styles for Screen Reader Compatibility\nDESCRIPTION: Shows how to import the CDK a11y stylesheet to ensure proper accessibility support for message toasts. This import is essential for aria-live announcements to work correctly with screen readers.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/message/message.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@import '@angular/cdk/a11y-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Template Driven Form File Uploader\nDESCRIPTION: Demonstrates using the file uploader in a template-driven form context\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-template-driven) -->\n```\n\n----------------------------------------\n\nTITLE: Selectable Card with Checkbox\nDESCRIPTION: Implementation of selectable cards with checkbox behavior\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Disabling Number Stepper Explicitly\nDESCRIPTION: Demonstrates how to explicitly disable user input on the Number Stepper component by setting the disabled property to true.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-disabled-explicit) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Strategy for Dropdown\nDESCRIPTION: Example showing how to configure a custom scroll strategy for the dropdown component using the NX_DROPDOWN_SCROLL_STRATEGY injection token with a factory provider.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dropdown/dropdown.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(dropdown-scroll-strategy-provider) -->\n```\n\n----------------------------------------\n\nTITLE: Radio Button with Negative Styling\nDESCRIPTION: Implementation of radio buttons with negative styling applied either to individual radio buttons or to the entire radio group. Group-level settings override individual button settings.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Adding Compatibility CSS for ng-aquila v11 Migration\nDESCRIPTION: Code snippet showing how to add the compatibility CSS file to your Angular project's configuration to restore margins that were removed in v11. This should be added to the angular.json file to maintain backward compatibility with previous layouts.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n    \"options\": {\n      // ...\n      \"styles\": [\n        // ...\n        \"node_modules/@aposin/ng-aquila/css/compatibility.css\",\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Lists in ng-aquila\nDESCRIPTION: Demonstrates how to nest different types of lists within each other, showcasing the flexibility of list structures in ng-aquila.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-nesting) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Footer with Custom Copyright in HTML\nDESCRIPTION: This snippet demonstrates how to create a basic footer using the nx-footer component. It includes a custom copyright section and navigation links.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/footer/footer.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(footer-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Introduction of Timepicker Dropdown Feature in Timefield Component\nDESCRIPTION: Documentation for a new opt-in timepicker dropdown feature added to the timefield component that allows users to select a time from a dropdown interface.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n### Timefield new opt-in timepicker\nA new timepicker dropdown was added to the timefield that let's users select a time from a dropdown. This feature is opt-in for now, please see the documentation page for more infos.\n```\n\n----------------------------------------\n\nTITLE: Static Layout Comparison Table in Angular\nDESCRIPTION: Shows how to use the 'view' input to override the default layout auto-set by viewport width for specific layout needs.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-static) -->\n```\n\n----------------------------------------\n\nTITLE: Reactive Form File Uploader\nDESCRIPTION: Shows how to integrate the file uploader with reactive forms in Angular\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Rendering for Context Menus in Angular\nDESCRIPTION: Demonstrates how to defer initialization of context menu content until the menu is opened, by providing content as an ng-template with the nxContextMenuContent attribute.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-lazy) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Label Size\nDESCRIPTION: Demonstrates how to set different label sizes using the [labelSize] property.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-label-size) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Links within Text in Angular\nDESCRIPTION: Shows how to use links within text content using nxStyle=\"text\", which allows the link to inherit the size and line height of its parent text element.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-within-text) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Negative Styling in Number Stepper\nDESCRIPTION: Shows how to apply negative styling to the Number Stepper component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Basic AG Grid HTML with Aquila Theme\nDESCRIPTION: HTML implementation of AG Grid with the required Aquila theme classes. This shows the minimal required classes to apply the Aquila theme to an AG Grid component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/ag-grid/ag-grid.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ag-grid-angular class=\"ag-theme-alpine ag-theme-aquila\"></ag-grid-angular>\n```\n\n----------------------------------------\n\nTITLE: Creating Columns with nxCol Directive in Angular Grid\nDESCRIPTION: Demonstrates using the nxCol directive to create grid columns. An empty nxCol will automatically take up all remaining space in a row.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/grid/grid.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div nxCol> </div>\n```\n\n----------------------------------------\n\nTITLE: Slider with Hidden Min/Max Labels\nDESCRIPTION: Demonstrates how to hide the min/max labels that appear under the slider by setting the [hideLabels] input property to true.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-labels)\n```\n\n----------------------------------------\n\nTITLE: Integrating Icons with Links in Angular\nDESCRIPTION: Shows how to integrate icons with the nxLink component to create links with visual indicators.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-icons) -->\n```\n\n----------------------------------------\n\nTITLE: Comparison Table with Intersection Cells in Angular\nDESCRIPTION: Illustrates the use of intersection cells, which merge multiple cells. Includes handling for mobile view using an extra-light accordion.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-with-intersection) -->\n```\n\n----------------------------------------\n\nTITLE: Radio Button Group Basic Usage\nDESCRIPTION: Implementation of a radio button group using nx-radio-group component. The group requires a name property which is then applied to all radio buttons within the group.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-group) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Unordered List in ng-aquila\nDESCRIPTION: Demonstrates the usage of the default unordered list in ng-aquila. This example shows how to create a basic unordered list using the component library.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-unordered) -->\n```\n\n----------------------------------------\n\nTITLE: Expert Card Implementation\nDESCRIPTION: Expert styling variant of the card component using NxExpertModule\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-expert) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Label for Number Stepper in HTML\nDESCRIPTION: Demonstrates how to use custom markup for the Number Stepper label, including the use of nx-label or label tags for improved accessibility.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-custom-label) -->\n```\n\n----------------------------------------\n\nTITLE: Icon Button with Indicator Example in HTML\nDESCRIPTION: Shows how to add an indicator to an icon button using the nx-indicator component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-icon-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Danger Button Example in HTML\nDESCRIPTION: Illustrates the usage of a danger button for critical actions.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-danger) -->\n```\n\n----------------------------------------\n\nTITLE: Handling Blur/Focus Events in Phone Input\nDESCRIPTION: Example showing how to handle blur and focus events using (focusOut) and (focusIn) event bindings with the phone input component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-focus-out) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Strategy for Modals in TypeScript\nDESCRIPTION: Shows how to set up a custom scroll strategy for modals using the NX_MODAL_SCROLL_STRATEGY injection token.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/modal/modal.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollStrategyFactory(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.close();\n}\n\n@NgModule({\n  /* ... */\n  providers: [{\n    provide: NX_MODAL_SCROLL_STRATEGY,\n    useFactory: scrollStrategyFactory,\n    deps: [Overlay],\n  }],\n}\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: YouTube Video with Custom Preview Image in Angular\nDESCRIPTION: Demonstrates how to override the default YouTube-provided preview image with a custom image using the previewImageSrc input property.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/video/video.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(video-custom) -->\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle Group Example\nDESCRIPTION: Example showing Circle Toggle components wrapped in a circle toggle group, creating a radio group behavior where only one button can be selected at a time.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-group) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Group Usage\nDESCRIPTION: Demonstrates the basic implementation of checkbox groups with a shared label.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar as a Button in Angular Aquila\nDESCRIPTION: Example showing how to use the avatar component as a clickable button element, enabling user interaction with the avatar.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/avatar/avatar.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(avatar-button) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Button Usage Examples\nDESCRIPTION: Examples of radio button implementation in various states including default, checked, and disabled states. The content inside nx-radio tags serves as the button's label.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button) -->\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Context Menu Items in Angular\nDESCRIPTION: Shows how to display nx-icon elements before menu item text in a context menu.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-icons) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 16 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 16\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Button in Angular Aquila\nDESCRIPTION: The nxMenuButton component serves as either a top-level link or an expandable item that reveals the next navigation level. It supports icons placed before the label and displays a chevron icon when marked as expandable.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/menu/menu.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(menu-button) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Country Code in Phone Input\nDESCRIPTION: Example showing how to set an initial country code for the phone input using the countryCode input property. This accepts country codes like 'DE', 'US', or 'AT'.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-country-code) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Toast with Custom Options\nDESCRIPTION: Demonstrates how to customize a message toast by providing configuration options. The example shows setting a duration of 0 (preventing auto-close) and a success context with an announcement message for screen readers.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/message/message.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myCustomOptions: NxMessageToastConfig = {\n    duration: 0,\n    context: 'success',\n    announcementMessage: 'Yay, you see a success message toast',\n};\n\nlet toastRef = messageToastService.open('My message toast text.', myCustomOptions);\n```\n\n----------------------------------------\n\nTITLE: Standalone Circle Toggle Example\nDESCRIPTION: Example of using the Circle Toggle component as a standalone checkbox, allowing multiple selections simultaneously.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-standalone) -->\n```\n\n----------------------------------------\n\nTITLE: Error State in Comparison Table\nDESCRIPTION: Demonstrates how to display an error state for the header and footer of the table using the 'isError' attribute.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-error) -->\n```\n\n----------------------------------------\n\nTITLE: Using Tabs as Navigation Bar in Aquila Angular\nDESCRIPTION: Example of implementing a tab-based navigation system using nx-tab-nav-bar and nxTabLink, which allows tabs to function as navigation controls between routes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/tabs/tabs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nx-tab-nav-bar>\n  <a nxTabLink [active]=\"activeLink === link\" *ngFor=\"let link of links\">\n    <!-- Navigation tab content -->\n  </a>\n</nx-tab-nav-bar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Old vs New Headline Syntax in Angular\nDESCRIPTION: Example showing the transition from old headline syntax to new size-based API for the Headline component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/headline/headline.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- old usage -->\n<h3 nxHeadline=\"section\">\n<!-- new usage -->\n<h3 nxHeadline size=\"2xl\">\n```\n\n----------------------------------------\n\nTITLE: Grouping Steps in Vertical Multi Progress Indicator\nDESCRIPTION: Demonstrates how to group steps in a vertical Multi Indicator using nx-stepper-group tags. Each group requires a label and at least one step.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-multi-groups) -->\n```\n\n----------------------------------------\n\nTITLE: Small Medium Button Example in HTML\nDESCRIPTION: Illustrates the usage of a small-medium sized button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-small-medium) -->\n```\n\n----------------------------------------\n\nTITLE: Slider with Appendix Information\nDESCRIPTION: Shows how to implement a slider with additional information like info icons aligned with the slider line.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-appendix)\n```\n\n----------------------------------------\n\nTITLE: Adding Stepper Label to Single Progress Indicator\nDESCRIPTION: Illustrates the use of <nx-label> to display a label above the Single Indicator for all steps.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-title) -->\n```\n\n----------------------------------------\n\nTITLE: Negative Styling Natural Language Form Example\nDESCRIPTION: Shows how to implement negative styling in a Natural Language Form component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/natural-language-form/natural-language-form.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(natural-language-form-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Non-linear Manual Step Completion in Multi Progress Indicator\nDESCRIPTION: Demonstrates manual control of step completion in a Multi Indicator when not using the [linear] Input.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-nonlinear) -->\n```\n\n----------------------------------------\n\nTITLE: Slider with Decimal Handling\nDESCRIPTION: Shows decimal handling in sliders to mitigate floating point precision errors by rounding values to the closest step size.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-decimal)\n```\n\n----------------------------------------\n\nTITLE: Using Taglist with Reactive Forms\nDESCRIPTION: Shows how to integrate the taglist component within reactive forms in Angular.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-reactive) -->\n```\n\n----------------------------------------\n\nTITLE: Customizing List Item Color in ng-aquila\nDESCRIPTION: Illustrates how to change the color of list item circles by overriding the default color. It's important to ensure the color scheme aligns with branding guidelines.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-custom-color) -->\n```\n\n----------------------------------------\n\nTITLE: Max File Number Validation\nDESCRIPTION: Demonstrates setting and handling maximum number of files restriction\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-max-file-number) -->\n```\n\n----------------------------------------\n\nTITLE: Adding Component Title Decorator in TypeScript\nDESCRIPTION: Shows how to add a title to an example component using a JSDoc comment that will be used in the documentation generation process.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/** @title Component basic example */\n@Component({\n\t...\n```\n\n----------------------------------------\n\nTITLE: Basic Small Stage Implementation in HTML\nDESCRIPTION: Example of a basic small stage implementation with content, start image, end image, and bottom image slots. The component takes the full width of its container and adapts to different viewport sizes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/small-stage/small-stage.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(small-stage-default)-->\n```\n\n----------------------------------------\n\nTITLE: Positioning Content in Toolbar using Flexbox\nDESCRIPTION: Instructions for positioning toolbar content using flexbox row layout. The toolbar component serves as a container without predefined positioning, allowing flexibility in content arrangement.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/toolbar/toolbar.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nx-toolbar-positioning-content>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Orientation for Data Display in Angular\nDESCRIPTION: Shows how to change the orientation of data display to horizontal using orientation=\"horizontal\" or orientation=\"horizontal-columns\" input. Requires treating the nx-data-display-label element as inline.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/data-display/data-display.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(data-display-horizontal) -->\n```\n\n----------------------------------------\n\nTITLE: 12-Hour Format Timefield\nDESCRIPTION: Shows implementation of Timefield with AM/PM toggle using twelveHourFormat input. The model value remains in 24-hour format.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<nx-timefield [twelveHourFormat]=\"true\"></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Input Field in Number Stepper\nDESCRIPTION: Demonstrates how to make the input field readonly while still allowing button interactions, and how to make the entire component readonly.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-readonly-input) -->\n```\n\n----------------------------------------\n\nTITLE: Strict File Type Validation\nDESCRIPTION: Demonstrates enhanced file type validation with strictAcceptValidation option\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-strict-type-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Using nxAction with Angular Router in HTML\nDESCRIPTION: Shows how to use nxAction with Angular Router, including the routerLink and routerLinkActive directives for highlighting the active route.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/action/action.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a nxAction routerLink=\"/path\" routerLinkActive=\"is-selected\">Router Action</a>\n```\n\n----------------------------------------\n\nTITLE: Comparison Table with Hidden Columns in Angular\nDESCRIPTION: Shows how to hide certain columns of the comparison table using the 'hiddenIndexes' input, with considerations for selected columns.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-hidden-columns) -->\n```\n\n----------------------------------------\n\nTITLE: Accessing Data in Custom Message Toast Components\nDESCRIPTION: Shows how to inject and use data in a custom component used for message toasts. This example demonstrates using the NX_MESSAGE_TOAST_COMPONENT_DATA injection token to access data passed to the component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/message/message.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Inject } from '@angular/core';\nimport { NX_MESSAGE_TOAST_COMPONENT_DATA } from '@aposin/ng-aquila/message-toast';\n\n@Component({\n    selector: 'your-message-toast',\n    template: 'passed in {{ data.name }}',\n})\nexport class YourMessageToast {\n    constructor(@Inject(NX_MESSAGE_TOAST_COMPONENT_DATA) readonly data: any) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rating Component Examples in Markdown\nDESCRIPTION: Collection of example placeholders demonstrating different Rating component implementations including basic, disabled, negative styling, binding approaches, and size variations. Also includes accessibility guidelines for keyboard navigation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/rating/rating.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Examples\n\n#### Basic Example\n\n<!-- example(rating-basic) -->\n\n#### Disabled Rating\n\n<!-- example(rating-disabled) -->\n\n#### Negative Styling\n\n<!-- example(rating-negative) -->\n\n#### Simple Binding\n\n<!-- example(rating-simple) -->\n\n#### Template-driven with ngModel\n\n<!-- example(rating-template) -->\n\n#### Reactive\n\n<!-- example(rating-reactive) -->\n\n#### Sizes\n\n<!-- example(rating-sizes) -->\n\n### Accessibility\n\nThe component can be accessed via keyboard. To do that, use the TAB-key to focus on one of the stars and hit the ENTER-key to select it. Alternatively, increase or decrease the selected value by hitting the LEFT-ARROW- or RIGHT-ARROW-key. Moreover, it is possible to provide custom descriptions for each star. Please refer to `ariaLabel` in the API section for more information.\n\n<!-- example(rating-accessibility) -->\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Link Modifiers in Angular\nDESCRIPTION: Demonstrates how to combine multiple modifiers for links, such as negative styling with block letters, to create more customized link appearances.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-multiple) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Pagination in Angular\nDESCRIPTION: This example demonstrates how to implement advanced pagination with numbered controls and arrows. This variant requires proper localization for screen reader labels.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/pagination/pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(pagination-advanced) -->\n```\n\n----------------------------------------\n\nTITLE: Applying Size Variations to Links in Angular\nDESCRIPTION: Demonstrates how to apply different size variations to links using the [size] property. This allows for creating links of varying visual prominence.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/link/link.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(link-size) -->\n```\n\n----------------------------------------\n\nTITLE: Auto Upload Configuration\nDESCRIPTION: Demonstrates automatic file upload functionality configuration\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-auto) -->\n```\n\n----------------------------------------\n\nTITLE: Highlight Card Implementation\nDESCRIPTION: Card component with highlight header functionality enabled\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(highlight-card) -->\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Size in Angular Aquila\nDESCRIPTION: Example demonstrating how to use the [size] property to adjust the dimensions of the avatar component to meet different UI requirements.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/avatar/avatar.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(avatar-size) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Recommendation Table in Angular\nDESCRIPTION: Shows a more neutral variant of the recommendation table for expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(recommendation-table-expert) -->\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Forms with Separate Forms per Step in Progress Indicator\nDESCRIPTION: Shows how to implement reactive forms in the Progress Indicator with a different form for each step.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-reactivemulti) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Indicator with Step-specific Progress Bar\nDESCRIPTION: Shows the Progress Indicator type where all steps are listed horizontally with a single progress bar for the current step. The progress value must be manually provided and updated.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-step) -->\n```\n\n----------------------------------------\n\nTITLE: Disabled Radio Button Group\nDESCRIPTION: Example of managing the disabled state for radio buttons through the radio group component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Disabling Context Menu Items in Angular\nDESCRIPTION: Shows how to disable specific menu items by adding a disabled attribute to the nxContextMenuItem element.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation\nDESCRIPTION: Demonstrates the basic implementation of the slider component. The example is referenced but not shown in the content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-basic)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Theme with SCSS Map\nDESCRIPTION: Creates a custom theme by defining an SCSS map that overwrites default style tokens and registers it using the nx-register-theme function.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$my-theme: (\n    interactive-primary: green,\n    link-color: interactive-primary,\n    heading-01-font-size: 3.625rem,\n    heading-01-line-height: 4rem,\n    heading-01-font-weight: 500,\n    heading-01-letter-spacing: 0.0125rem,\n);\n\n$nx-themes: nx-register-theme($my-theme, themeName);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Multi Progress Indicator\nDESCRIPTION: Shows how to create a vertical layout for the Multi Indicator by setting the direction input to 'vertical'. This is an expert option intended for internal applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-multi-vertical) -->\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Colors in Angular Aquila\nDESCRIPTION: Example showing how to override the default background and text colors of the avatar component. Colors should be from the same color group (rich/soft/vibrant) for design consistency.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/avatar/avatar.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(avatar-colors) -->\n```\n\n----------------------------------------\n\nTITLE: Customizing Step Labels in Single Progress Indicator\nDESCRIPTION: Shows how to change step labels in the Single Indicator, including prefixes for the current and following steps. The currentStepLabel is used for mobile view across all indicators.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/progress-stepper/progress-stepper.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(progress-stepper-custom) -->\n```\n\n----------------------------------------\n\nTITLE: Product Card Implementation\nDESCRIPTION: Special card variant designed for product displays\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-product) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Toggle Button in Angular\nDESCRIPTION: Demonstrates the basic usage of the Toggle Button component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle) -->\n```\n\n----------------------------------------\n\nTITLE: Importing NxFormfieldModule for Dropdown\nDESCRIPTION: Shows how to import the NxFormfieldModule, which is recommended to use in combination with the dropdown component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/dropdown/dropdown.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxFormfieldModule } from '@aposin/ng-aquila/formfield';\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages in ng-aquila\nDESCRIPTION: Examples of properly formatted commit messages for the ng-aquila project. The format follows the convention of type(scope): subject, with additional guidelines for breaking changes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CODING_GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfeat(accordion): Add basic accordion component\n\nfix(release): Downgrade rxjs to prevent an error with the current Angular version\n```\n\n----------------------------------------\n\nTITLE: Implementing ISO Date Adapter\nDESCRIPTION: Import statement for ISO date adapter that works with YYYY-MM-DD string format using dayjs internally.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/datefield/datefield.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxIsoDateModule } from '@aposin/ng-aquila/iso-date-adapter';\n```\n\n----------------------------------------\n\nTITLE: Using NxViewportService for Responsive Component Behavior\nDESCRIPTION: Demonstrates how to use the NxViewportService in a component to react to viewport changes. This example shows a component that changes its visibility based on screen size.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/layout/layout.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxViewportService, NxBreakpoints } from '@aposin/ng-aquila/utils';\nshowComponentX: boolean;\n\nconstructor(private viewportService: NxViewportService) {\n  this.viewportService.max(NxBreakpoints.BREAKPOINT_LARGE)\n    .subscribe(isMaximumLarge => this.showComponentX = isMaximumLarge);\n}\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle with Text Content\nDESCRIPTION: Example showing how to use textual content instead of icons in Circle Toggle with the circleText property. On mobile, this text will be displayed inside the toggle button if no label is provided.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-text) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of nxAction Component in HTML\nDESCRIPTION: Demonstrates the basic usage of the nxAction directive on anchor or button elements. This snippet is referenced but not explicitly shown in the documentation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/action/action.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a nxAction href=\"#\">Action Link</a>\n<button nxAction>Action Button</button>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using New Custom Tokens\nDESCRIPTION: Shows how to add new tokens when creating a custom theme and how to reference existing token values in new tokens.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n$my-theme: (\n    my-new-token: pink,\n    my-new-token-2: primary-action,\n);\n\n$nx-themes: nx-register-theme($my-theme, themeName);\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to Number Stepper in HTML\nDESCRIPTION: Demonstrates how to add prefixes and suffixes to the Number Stepper using nx-number-stepper-prefix and nx-number-stepper-suffix.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-additions) -->\n```\n\n----------------------------------------\n\nTITLE: Basic Timefield Implementation\nDESCRIPTION: Demonstrates the basic usage of the Timefield component with 24-hour format. Accepts time inputs like 23:00, 12:35 with hours between 0-23 and minutes between 0-59.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nx-timefield></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Formatting in Number Stepper\nDESCRIPTION: Shows how to disable the default leading zero in the Number Stepper by setting the leadingZero property to false.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-formatting) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Localization for Advanced Pagination in Angular\nDESCRIPTION: This example shows how to implement localization specifically for the advanced pagination variant, including the optional first and last attributes used for the first and last arrows.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/pagination/pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(pagination-localize-advanced) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Locale via NgModule in Angular Aquila\nDESCRIPTION: Sets the date locale for the Datepicker component by providing the NX_DATE_LOCALE token in the NgModule. This example configures the locale to British English (en-GB).\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/datefield/datefield.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n    providers: [{ provide: NX_DATE_LOCALE, useValue: 'en-GB' }],\n})\nexport class MyApp {}\n```\n\n----------------------------------------\n\nTITLE: Recommendation Table in Angular\nDESCRIPTION: Illustrates how to display the summary of a single offer as a recommendation table.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(recommendation-table) -->\n```\n\n----------------------------------------\n\nTITLE: Indicator with Action Component in HTML\nDESCRIPTION: Shows how to use the indicator component within an Action component. The specific implementation details are not provided in the text.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/indicator/indicator.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(action-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Applying Negative Styling to Lists in ng-aquila\nDESCRIPTION: Shows how to implement negative styling for lists, which can be useful for dark backgrounds or for emphasis.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Basic YouTube Video Implementation in Angular\nDESCRIPTION: Shows how to implement a basic YouTube video with the required videoId parameter, along with accessibility attributes altText and playButtonAriaLabel. The component uses Angular's DomSanitizer to safely embed the YouTube URL.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/video/video.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(video) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Binding in Number Stepper\nDESCRIPTION: Shows how to implement simple data binding with the Number Stepper component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-simple-binding) -->\n```\n\n----------------------------------------\n\nTITLE: Disabled Clickable Card\nDESCRIPTION: Implementation of disabled state for clickable cards with proper ARIA attributes\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(clickable-card-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Using Indicators in Context Menu Items in Angular\nDESCRIPTION: Demonstrates how to mark certain entries of the context menu using the nx-indicator component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Using Global Tab Settings in Aquila Angular\nDESCRIPTION: Shows how to use injection tokens TAB_GROUP_DEFAULT_OPTIONS and TABS_NAV_BAR_DEFAULT_OPTIONS to set global defaults for tab appearance across an application.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/tabs/tabs.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {\n    provide: TAB_GROUP_DEFAULT_OPTIONS,\n    useValue: { appearance: 'expert' }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Disable Common Validators\nDESCRIPTION: Shows how to disable blocking validators and handle validation through the errors property\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/file-uploader/file-uploader.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(file-uploader-disable-common-validators) -->\n```\n\n----------------------------------------\n\nTITLE: Installing Phone Input Dependencies\nDESCRIPTION: The phone input component depends on the i18n-iso-countries package which needs to be installed separately.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install i18n-iso-countries --save\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Stepper Sizes in HTML\nDESCRIPTION: Demonstrates how to use the Number Stepper component in two sizes: big and normal.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-sizes) -->\n```\n\n----------------------------------------\n\nTITLE: Advanced YouTube Video Configuration in Angular\nDESCRIPTION: Shows how to use advanced configuration options for the YouTube video player, including showPlayerControls, allowFullScreen, and interfaceLanguage parameters that map to YouTube iframe API options.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/video/video.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(video-advanced) -->\n```\n\n----------------------------------------\n\nTITLE: Theming Variations for Comparison Table in Angular\nDESCRIPTION: Demonstrates modifying the appearance of the comparison table using theming tokens and custom button styling.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-private-modify-theming, { \"privateExample\": true, \"hideStackblitzButton\": true }) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Menu Container in Angular Aquila\nDESCRIPTION: The nx-menu component creates a collapsible container that covers the viewport below the header. This example shows a complete implementation using a burger button to toggle the menu and nx-tree to render nested navigation items.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/menu/menu.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(menu) -->\n```\n\n----------------------------------------\n\nTITLE: Expert Size Variations for Data Display in Angular\nDESCRIPTION: Demonstrates the condensed version of data display using size=\"small\". By default, expert data display uses size=\"medium\" set via DATA_DISPLAY_DEFAULT_OPTIONS.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/data-display/data-display.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(data-display-condensed) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Deletable Tags in Angular Aquila\nDESCRIPTION: Example of how to create tags that can be deleted by users.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(deletable-tags) -->\n```\n\n----------------------------------------\n\nTITLE: Disabled Timefield\nDESCRIPTION: Example of disabled Timefield implementation where both inputs and radio group are disabled.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<nx-timefield [disabled]=\"true\"></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Radio Button Sample Implementation\nDESCRIPTION: Sample implementation of radio buttons, demonstrating how the content within nx-radio serves as the button's label.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-sample) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Scroll Strategy for Context Menus in Angular\nDESCRIPTION: Demonstrates how to use the NX_CONTEXT_MENU_SCROLL_STRATEGY injection token with a factory provider to set a custom scroll strategy globally for all context menus.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-scroll-strategy-provider) -->\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider Implementation\nDESCRIPTION: Demonstrates a disabled slider that does not react to mouse, touch, or keyboard events.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-disabled)\n```\n\n----------------------------------------\n\nTITLE: Non-Sticky Header Comparison Table in Angular\nDESCRIPTION: Shows how to disable the sticky header feature on desktop view using the 'mayStick' attribute.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-non-sticky-header) -->\n```\n\n----------------------------------------\n\nTITLE: Dynamic Card Management\nDESCRIPTION: Example showing dynamic addition and removal of cards\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-dynamic) -->\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-resizing in Number Stepper\nDESCRIPTION: Shows how to enable auto-resizing of the Number Stepper input field to accommodate larger numbers or decimals.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-auto-resizing) -->\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to Toggle Button in Angular\nDESCRIPTION: Provides an example of implementing custom validation for Toggle Buttons, where only option 'B' is considered correct.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Handling Taglist Output Events\nDESCRIPTION: Demonstrates how to capture and handle click events emitted by tags, including setting tabindex for keyboard navigation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-output) -->\n```\n\n----------------------------------------\n\nTITLE: Adding NxExpertModule to Angular Application\nDESCRIPTION: TypeScript code to import and add NxExpertModule to the app.module.ts file for expert/b2b applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport { NxExpertModule } from '@aposin/ng-aquila/config';\n\n@NgModule({\n    imports: [\n        // ...\n        NxExpertModule,\n    ],\n    // ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Internationalizing Taglist Component\nDESCRIPTION: Demonstrates how to use the NxTagIntl provider to translate strings used by the taglist component for different locales.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-intl) -->\n```\n\n----------------------------------------\n\nTITLE: Signal Button with Different Contexts\nDESCRIPTION: Shows how to implement signal buttons with different contextual states (success, error, warning). The component uses popover functionality with configurable directions and scroll strategies.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/signal-button/signal-button.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nx-signal-button popoverDirection=\"top\" context=\"success\" aria-label=\"Success message\">\n  <!-- Content -->\n</nx-signal-button>\n\n<nx-signal-button popoverDirection=\"bottom\" context=\"error\" aria-label=\"Error message\">\n  <!-- Content -->\n</nx-signal-button>\n\n<nx-signal-button popoverDirection=\"right\" context=\"warning\" aria-label=\"Warning message\">\n  <!-- Content -->\n</nx-signal-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Component Types\nDESCRIPTION: Demonstrates the basic usage of badges with different color types including active, positive, critical, and negative states.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/badge/badge.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Basic\n\nYou can change the color of the badge by setting the `type` to either `active`, `positive`, `critical` or `negative`.\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Number Stepper in HTML\nDESCRIPTION: Shows how to implement a standalone Number Stepper component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-standalone) -->\n```\n\n----------------------------------------\n\nTITLE: Creating Negative Styled Toggle Button in Angular\nDESCRIPTION: Shows how to implement a Toggle Button with negative styling.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Natural Language Form Size Variations\nDESCRIPTION: Demonstrates different size options for Natural Language Form components using the [size] input property.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/natural-language-form/natural-language-form.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(natural-language-form-sizes) -->\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle with Negative Styles\nDESCRIPTION: Example demonstrating Circle Toggle with negative styling applied.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Importing Dayjs Locales in Angular\nDESCRIPTION: This code snippet shows how to import specific locales for dayjs in an Angular application. This is necessary when using the iso-date-adapter after the update.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'dayjs/locales/de';\nimport 'dayjs/locales/es';\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Header Alignment in Aquila Angular\nDESCRIPTION: Example demonstrating how to modify the default centered alignment of tab headers by applying CSS flex properties to the nx-tab-header element.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/tabs/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nnx-tab-header {\n  justify-content: flex-start;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Templates for Tab Labels in Aquila Angular\nDESCRIPTION: Shows how to use the nxTabLabel directive to create complex tab header content beyond simple strings.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/tabs/tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ng-template nxTabLabel>\n  <!-- Complex tab label content here -->\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Strategy for Context Menus in Angular\nDESCRIPTION: Demonstrates how to change the scroll strategy of the context menu from the default 'reposition' to 'close', and how to use a custom scroll container with cdkScrollable.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/context-menu/context-menu.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(context-menu-scroll-strategy) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for ng-aquila Theme\nDESCRIPTION: SCSS code to set the background color for the default ng-aquila theme.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\nbody {\n    background: #0f2a3d;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Pagination in Angular\nDESCRIPTION: This example shows how to implement simple pagination with only previous and next buttons for navigating between pages.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/pagination/pagination.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<!-- example(pagination-simple) -->\n```\n\n----------------------------------------\n\nTITLE: Expert Circle Toggle Group\nDESCRIPTION: Example of Circle Toggle Group with expert appearance styling, intended for internal applications only.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-group-expert)-->\n```\n\n----------------------------------------\n\nTITLE: New Feature in timefield Component\nDESCRIPTION: Added a built-in validator to check if the entered time is valid, enabled by 'enableTimeValidation' setting.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<nx-timefield [enableTimeValidation]=\"true\"></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Premium Breakdown Table in Angular\nDESCRIPTION: Shows how to display data as a premium breakdown table.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(breakdown-table) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Static aria-label in Angular Component\nDESCRIPTION: Shows how to add a static aria-label to an icon component. This provides important context for screen reader users about the icon's meaning and purpose.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accessibility/accessibility.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nx-icon aria-label=\"My icon description string\"></nx-icon>\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Label Content with Templates\nDESCRIPTION: Shows how to override the default value display in tags by providing custom template content.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tag-label-rendering) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 13 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 13\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Radio Button Event Handling\nDESCRIPTION: Implementation showing how to handle events from radio buttons.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-event) -->\n```\n\n----------------------------------------\n\nTITLE: Small Stage with Content Variations in HTML\nDESCRIPTION: Example showing different sizes of headlines and sublines that can be used within the small stage component to achieve different visual effects.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/small-stage/small-stage.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(small-stage-content-variation)-->\n```\n\n----------------------------------------\n\nTITLE: API Documentation Example in TypeScript\nDESCRIPTION: Shows how to write proper documentation strings for component properties that will be used in API documentation generation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/** Whether the checkbox is disabled. */\n@Input()\nset disabled(value: boolean) {\n```\n\n----------------------------------------\n\nTITLE: Importing Theming Utilities in SCSS\nDESCRIPTION: Imports the theming utilities from the ng-aquila library to enable custom theme creation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/theming/theming.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '@aposin/ng-aquila/styles/theming';\n```\n\n----------------------------------------\n\nTITLE: Importing Required CDK Stylesheets for Overlay Component\nDESCRIPTION: SCSS imports needed for Angular CDK components that use the overlay. These stylesheets must be included in your global styles to ensure proper display of overlay-based components like message toast, popover, or dropdown.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/overlay/overlay.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '@angular/cdk/overlay-prebuilt.css';\n@import '@angular/cdk/a11y-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Timefield with Global Configuration\nDESCRIPTION: Shows how to enable the timepicker globally by providing TimefieldDefaultOptions with withTimepicker set to true.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: TIMEFIELD_DEFAULT_OPTIONS,\n  useValue: { withTimepicker: true }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Taglist Accessible with ARIA Labels\nDESCRIPTION: Shows how to improve accessibility by linking a label to the taglist component using ARIA attributes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-a11y) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 15 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 15\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Utilities in Angular CLI Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to import the typography utility CSS file in an Angular project using the angular-cli.json configuration. It adds the utilities.css file from the ng-aquila package to the styles array.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/typography/typography.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"styles\": [\n  \"node_modules/@aposin/ng-aquila/css/utilities.css\"\n]\n```\n\n----------------------------------------\n\nTITLE: Supporting Floating Point Numbers in Number Stepper\nDESCRIPTION: Demonstrates how to enable floating point number support in the Number Stepper by setting the step size to a decimal number.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-floating-point) -->\n```\n\n----------------------------------------\n\nTITLE: High Contrast Mode CSS Example\nDESCRIPTION: Shows how to implement Windows high contrast mode support using CSS system colors.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n@media screen and (-ms-high-contrast: active) {\n    .css-class {\n        color: windowText;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Responsive Circle Toggle Group\nDESCRIPTION: Example demonstrating how to disable the default responsive behavior of Circle Toggle by setting the responsive property to false, maintaining the desktop design across all screen sizes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-responsive) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Strategy for Overlays\nDESCRIPTION: TypeScript code demonstrating how to customize the overlay scroll strategy using dependency injection. This example shows how to provide a custom scroll strategy factory that returns a 'close' strategy that closes the overlay when scrolling occurs.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/overlay/overlay.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollStrategyFactory(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.close();\n}\n\n@NgModule({\n  /* ... */\n  providers: [{\n    provide: NX_OVERLAY_SCROLL_STRATEGY,\n    useFactory: scrollStrategyFactory,\n    deps: [Overlay],\n  }],\n}\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Selectable Card States\nDESCRIPTION: Demonstration of different states available for selectable cards\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(selectable-card-states) -->\n```\n\n----------------------------------------\n\nTITLE: Clickable Card with Raised Content\nDESCRIPTION: Implementation showing how to raise content above the clickable area using nxCardSecondaryInfo\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/card/card.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(clickable-card-raised-content) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 12 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 12\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Importing NxActionModule for Side Navigation\nDESCRIPTION: Imports the NxActionModule which is required to use nxAction items in the sidebar. This module is not automatically imported when importing NxSidebarModule.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/sidebar/sidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxActionModule } from '@aposin/ng-aquila/action';\n```\n\n----------------------------------------\n\nTITLE: Implementing Spinner Sizes in Angular Aquila\nDESCRIPTION: Example showing how to implement spinners in three different sizes: small, medium, and large using the nx-spinner component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/spinner/spinner.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(spinner-sizes) -->\n```\n\n----------------------------------------\n\nTITLE: CSS Token Example for Theming\nDESCRIPTION: Demonstrates how to use CSS custom properties for component theming with global and component-specific tokens.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n--button-primary-background-color: interactive-primary;\n```\n\n----------------------------------------\n\nTITLE: Expert: Customizing Checkbox Group Label Size\nDESCRIPTION: Shows how to configure the label size for checkbox groups using the 'size' property, specifically for expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-label-size) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Full-Width Expandable Area in Comparison Table\nDESCRIPTION: Shows how to set the expandable area to use the full width of the table in expert mode using the 'useFullRowForExpandableArea' attribute.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/comparison-table/comparison-table.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(comparison-table-expandable-area) -->\n```\n\n----------------------------------------\n\nTITLE: AG Grid HTML with Allianz Icons Theme\nDESCRIPTION: HTML implementation for Allianz internal projects that includes the Allianz icons theme class. This configuration overrides the default AG Grid Alpine icons with Allianz icons.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/ag-grid/ag-grid.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ag-grid-angular class=\"ag-theme-alpine ag-theme-aquila ag-theme-allianz-icons\"></ag-grid-angular>\n```\n\n----------------------------------------\n\nTITLE: Implementing High Contrast Mode for SVGs with SCSS\nDESCRIPTION: SCSS code snippet for setting appropriate colors for SVGs in high contrast mode in MS Edge. Uses the windowText system color to ensure visibility in various high contrast themes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/accessibility/accessibility.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@media screen and (-ms-high-contrast: active) {\n    .g-inside-svg {\n        /* proprietary Windows system color value; IE/Edge only */\n        fill: windowText;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ngx-docs-cli via npm\nDESCRIPTION: Command to install the ngx-docs-cli package from npm registry. This is the first step required before using the documentation generation tool.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aposin/ngx-docs-cli\n```\n\n----------------------------------------\n\nTITLE: Disabling Number Stepper Implicitly\nDESCRIPTION: Shows how the Number Stepper is automatically disabled when part of a disabled form.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/number-stepper/number-stepper.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(number-stepper-disabled-implicit) -->\n```\n\n----------------------------------------\n\nTITLE: Slider with Default Values\nDESCRIPTION: Demonstrates a slider with default values of min=0, max=100, and step=1 which apply when no inputs are provided or when inputs are invalid.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-default)\n```\n\n----------------------------------------\n\nTITLE: Importing Date Field Module in TypeScript\nDESCRIPTION: Basic module imports required for using the date field component including the core module and native date module.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/datefield/datefield.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxDatefieldModule } from '@aposin/ng-aquila/datefield';\nimport { NxNativeDateModule } from '@aposin/ng-aquila/datefield';\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 19 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 19\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Adding Expert Theme to Angular Configuration\nDESCRIPTION: Shows how to include the expert theme CSS in angular.json configuration file.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/config/config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"styles\": [\n  \"node_modules/@aposin/ng-aquila/themes/expert.css\"\n]\n```\n\n----------------------------------------\n\nTITLE: Vibrant Badge Styling\nDESCRIPTION: Explains how to implement the vibrant styling variation of the badge using the vibrant input property.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/badge/badge.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Vibrant\n\nIn order to use the vibrant styling of the badge, you can simply apply the `vibrant` input to the badge.\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Customizing Formfield Spacing\nDESCRIPTION: CSS variables provided for customizing the spacing of form fields, allowing for flexibility in adjusting spacing across forms or individual fields.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/formfield/formfield.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n--formfield-bottom-padding: 0;\n--formfield-outline-bottom-padding: 0;\n--formfield-mobile-bottom-padding: 0;\n```\n\n----------------------------------------\n\nTITLE: Character Badge Implementation\nDESCRIPTION: Shows how the badge automatically adjusts to a circular shape when containing only a single character.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/badge/badge.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Character badge\nIf the text contains only one character, the badge will be displayed as a circle.\n```\n\n----------------------------------------\n\nTITLE: Circle Toggle with Simple Binding\nDESCRIPTION: Example showing simple data binding with Circle Toggle components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-simple-binding) -->\n```\n\n----------------------------------------\n\nTITLE: Using notNullable Type Guard in TypeScript Arrays\nDESCRIPTION: Demonstrates the difference between standard TypeScript type narrowing and using the notNullable type guard from ng-aquila. The notNullable guard provides better type inference by correctly narrowing array types to exclude null values.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/utils/utils.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { notNullable } from '@aposin/ng-aquila/utils';\n\nconst result1 = ['str', null].filter(s => s != null); // return type `(string | null)[]`\n\nconst result2 = ['str', null].filter(notNullable); // return type `string[]`\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Utilities via CSS Import\nDESCRIPTION: This snippet demonstrates how to import the typography utility CSS file directly in a CSS file. It's an alternative method for projects not using Angular CLI or preferring a different import location.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/typography/typography.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '@aposin/ng-aquila/css/utilities.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Item with Icons in Angular Aquila\nDESCRIPTION: Example of using the large indentation with nxMenuItem when menu buttons include icons. This provides better visual alignment for menu items with icons.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/menu/menu.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(menu-item-with-icons) -->\n```\n\n----------------------------------------\n\nTITLE: Importing Expert Theme via CSS\nDESCRIPTION: Alternative method to import expert theme using CSS import statement.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/config/config.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import '@aposin/ng-aquila/themes/expert.css';\n```\n\n----------------------------------------\n\nTITLE: Setting Tags to Readonly State\nDESCRIPTION: Demonstrates how to configure tags as readonly elements.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tags-readonly) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Tags\nDESCRIPTION: Shows how to disable tags, noting that for reactive forms you should disable the control via the forms API rather than using the disabled property in the template.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tags-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Disabled Signal Button Implementation\nDESCRIPTION: Demonstrates how to create a disabled signal button using the disabled attribute.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/signal-button/signal-button.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nx-signal-button disabled aria-label=\"Disabled signal button\">\n  <!-- Content -->\n</nx-signal-button>\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 19\nDESCRIPTION: ng-aquila has been updated to support Angular 19.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Update your Angular dependencies to version 19\n```\n\n----------------------------------------\n\nTITLE: RTL Inverted Slider\nDESCRIPTION: Demonstrates how to create a right-to-left oriented slider using the 'inverted' flag, which places the maximum value on the left and minimum on the right.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-inverted)\n```\n\n----------------------------------------\n\nTITLE: Installing Aquila Component Library with Angular CLI\nDESCRIPTION: This command adds the Aquila library to an Angular project using the Angular CLI. It installs the white label variant of the Allianz Angular components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add @aposin/ng-aquila\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Phone Input\nDESCRIPTION: Example showing how to disable the phone input either by using the disabled attribute or through reactive form control.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecation Warning in TypeScript\nDESCRIPTION: Example showing how to implement a deprecation warning in a component constructor using console.warn. Includes JSDoc annotations to mark the deprecation and specify the target version for removal.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @deprecated Use `nx-circle-toggle` instead\n * @deletion-target 8.0.0\n */\nconstructor() {\n  console.warn('`nx-checkbox-circle` is deprecated. Use `nx-circle-toggle` instead.');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing NxViewportService Throttle Time\nDESCRIPTION: Shows how to customize the throttle time for the NxViewportService when subscribing to viewport changes. This allows for fine-tuning the responsiveness of the viewport detection.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/layout/layout.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.viewportService\n    .between(NxBreakpoints.BREAKPOINT_XSMALL, NxBreakpoints.BREAKPOINT_MEDIUM, 500)\n    .subscribe(isMaximumLarge => (this.showComponentX = isMaximumLarge));\n```\n\n----------------------------------------\n\nTITLE: Disabled Circle Toggle in Reactive Form\nDESCRIPTION: Example demonstrating disabled state for Circle Toggle components in a reactive form.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-reactive-disabled) -->\n```\n\n----------------------------------------\n\nTITLE: Using NX_ICON_INITIALIZER for Internal Icons in Angular\nDESCRIPTION: A code reference showing the addition of NX_ICON_INITIALIZER for initializing internal icons within the icon component. This allows for proper initialization of icon components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n* **icon:** add NX_ICON_INITIALIZER for internal icons ([e5595dc](https://github.com/allianz/ng-aquila/commit/e5595dc40479fe818a15e48365563088753a8236))\n```\n\n----------------------------------------\n\nTITLE: Negative Styled Slider\nDESCRIPTION: Shows how to apply negative styling to a slider through the 'negative' property.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-negative)\n```\n\n----------------------------------------\n\nTITLE: Running Aquila Documentation Locally\nDESCRIPTION: These commands set up and start the local documentation server for the Aquila component library. It uses npm to install dependencies and start the server.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Ordered List in ng-aquila\nDESCRIPTION: Shows how to implement a simple ordered list using ng-aquila components. This example illustrates the basic structure of an ordered list in the library.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-ordered) -->\n```\n\n----------------------------------------\n\nTITLE: Breaking Change in number-stepper Component\nDESCRIPTION: The 'readonly' input in number-stepper has been renamed to 'inputFieldReadonly' to clarify its functionality.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Old usage\n<nx-number-stepper readonly=\"true\"></nx-number-stepper>\n\n// New usage\n<nx-number-stepper inputFieldReadonly=\"true\"></nx-number-stepper>\n```\n\n----------------------------------------\n\nTITLE: Incorporating nx-indicator within nxAction in HTML\nDESCRIPTION: Demonstrates how to use the nx-indicator component inside an nxAction item for additional visual cues.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/action/action.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a nxAction>\n  Action with Indicator\n  <nx-indicator>New</nx-indicator>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Expert Module in Angular Imports\nDESCRIPTION: Demonstrates how to add NxExpertModule to the imports array in Angular module configuration.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/config/config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"imports\": [\n  ...,\n  ...,\n  NxExpertModule\n]\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Generation\nDESCRIPTION: Command to run the documentation generation tool. It requires specifying the path to your source code and documentation examples.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx ndx-docs ./path/to/src\n```\n\n----------------------------------------\n\nTITLE: Expert: Radio Button Group Label Sizing\nDESCRIPTION: Example for expert applications showing how to change the styling of the radio button group's label using the size property. Small size is formatted for Expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-group-label-size) -->\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for ng-aquila Theme (CSS)\nDESCRIPTION: CSS code to set the background color for the default ng-aquila theme.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    background: #0f2a3d;\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Button with Different Label Sizes\nDESCRIPTION: Examples of radio buttons with different label size options for visual hierarchy.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-sizes) -->\n```\n\n----------------------------------------\n\nTITLE: Dropdown and Multiselect Flyout Improvements\nDESCRIPTION: Enhancements to dropdown and multiselect components addressing label length limitations and overlay sizing. The changes allow longer labels to line break and introduce new APIs for controlling overlay width.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n### Dropdown and multiselect flyout changes\n\nThe label options inside the dropdown where limited to a certain character length and then cut off. This has been revised and long labels will now line break again. In addition the dropdown overlay size will now always be the size of the dropdown trigger element. As that can sometimes mean the overlay would be very narrow we introduced a new API that lets the overlay grow past the trigger element width if needed. In addition you can also set a max-width that the overlay doesn't get too long.\n```\n\n----------------------------------------\n\nTITLE: Configuring List with Different Copytext Sizes in ng-aquila\nDESCRIPTION: Shows how to set different copytext sizes for list items. Sizes can be 'xsmall', 'small', or 'normal', with 'normal' being the default.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-copytext) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 17 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 17\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine Tests for ng-aquila\nDESCRIPTION: Command to run the Jasmine tests for the library components in development mode. This allows for TDD (Test-Driven Development) by keeping tests running as files are changed.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CODING_GUIDELINES.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:lib\n```\n\n----------------------------------------\n\nTITLE: Slider with Hidden Thumb Label\nDESCRIPTION: Shows how to hide the thumb label that appears on top of the slider by setting the [thumbLabel] input property to false.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/slider/slider.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// example(slider-thumb)\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Example\nDESCRIPTION: Example of frontmatter in markdown files used to specify metadata like title and category for components. This information is used when generating the documentation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Formfield\ncategory: Forms\n---\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Breaking Change Commit Messages in ng-aquila\nDESCRIPTION: Example of a commit message that includes a breaking change notification. The message includes a special BREAKING CHANGE section to highlight the backward-incompatible changes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CODING_GUIDELINES.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfix(card): remove NxSelectableCardModule\n\nBREAKING CHANGE:\n`NxSelectableCardModule` was removed. `NxSelectableCardComponent` was moved to `NxCardModule`.\n```\n\n----------------------------------------\n\nTITLE: Bug Fix in dropdown Component\nDESCRIPTION: Improved keyboard navigation in dropdown by opening flyout and focusing item when characters are typed.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Dropdown now responds to keyboard input for item selection\n```\n\n----------------------------------------\n\nTITLE: Creating Condensed List in ng-aquila\nDESCRIPTION: Demonstrates the usage of the 'condensed' attribute to create a more compact list style. This affects the spacing of list items.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-condensed) -->\n```\n\n----------------------------------------\n\nTITLE: Anchor Button Example in HTML\nDESCRIPTION: Shows how to use an anchor tag styled as a button for navigation purposes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(anchor-button) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Module in TypeScript\nDESCRIPTION: Demonstrates how to register component examples in the examples module by adding them to the EXAMPLES array and components() method.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst EXAMPLES = [\n    // ...\n    ComponentBasicExample,\n];\n\n// ...\nexport class ButtonExamplesModule {\n    static components() {\n        return {\n            // ...\n            'component-basic': ComponentBasicExample,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Negative Styling to Spinners in Angular Aquila\nDESCRIPTION: Example demonstrating how to apply negative styling to spinners using the [negative] property, which is useful for displaying spinners on dark backgrounds.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/spinner/spinner.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(spinner-negative) -->\n```\n\n----------------------------------------\n\nTITLE: Examples Directory Structure\nDESCRIPTION: Example tree structure for organizing Angular example components. Each example should be in its own subfolder containing TypeScript, HTML, and CSS files.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n|- documentation\n|  |- examples\n|  |  |- primary-button\n|  |  |  |- primary-button-example.ts\n|  |  |  |- primary-button-example.html\n|  |  |  |- primary-button-example.css\n```\n\n----------------------------------------\n\nTITLE: Radio Button Group with Template-driven Forms\nDESCRIPTION: Example of using radio button groups with template-driven forms and ngModel. The ngModel is applied to the group rather than individual radio buttons.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-form) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Readonly Checkboxes\nDESCRIPTION: Demonstrates the readonly state for checkboxes, which is only recommended for expert/internal applications due to accessibility limitations.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-readonly) -->\n```\n\n----------------------------------------\n\nTITLE: One Allianz Plain Button Example in HTML\nDESCRIPTION: Demonstrates the One Allianz plain button with new API options for size and variant.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-plain-a1) -->\n```\n\n----------------------------------------\n\nTITLE: Property Inheritance in Checkbox Groups\nDESCRIPTION: Shows how properties can be inherited from checkbox groups to individual checkboxes within the group.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-inheritance) -->\n```\n\n----------------------------------------\n\nTITLE: New Feature in number-stepper\nDESCRIPTION: Error messages are now linked to the input for improved accessibility.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<nx-number-stepper>\n  <nx-error>Error message</nx-error>\n</nx-number-stepper>\n```\n\n----------------------------------------\n\nTITLE: Expert Small Stage Default Implementation in HTML\nDESCRIPTION: Example of the expert version of the small stage component which is designed to use only one image after the content. This is activated by setting appearance=\"expert\".\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/small-stage/small-stage.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(small-stage-expert-default)-->\n```\n\n----------------------------------------\n\nTITLE: Component Package Configuration\nDESCRIPTION: Configuration for setting up a new component as a secondary entry point in the library.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ngPackage\": {\n    \"lib\": {\n      \"entryFile\": \"public-api.ts\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Indicator with Context Menu in HTML\nDESCRIPTION: Illustrates the use of the indicator component within a Context Menu. The actual code is not shown in the provided text.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/indicator/indicator.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(context-menu-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Indicator with Tabs Component in HTML\nDESCRIPTION: Shows the usage of the indicator component within Tabs. This is noted as an Expert styling option for internal applications. The actual code is not shown in the provided text.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/indicator/indicator.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tabs-with-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: AG Grid HTML with Dense Modifier\nDESCRIPTION: Example of applying the dense modifier to the AG Grid component. This creates a more compact row layout which can be useful for displaying more data in a limited space.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/ag-grid/ag-grid.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ag-grid-angular class=\"ag-theme-aquila ag-theme-aquila ag-theme-aquila-dense\"></ag-grid-angular>\n```\n\n----------------------------------------\n\nTITLE: Expert Circle Toggle\nDESCRIPTION: Example of standalone Circle Toggle with expert appearance styling, intended for internal applications only.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-expert)-->\n```\n\n----------------------------------------\n\nTITLE: Inserting Component Example Placeholder in HTML\nDESCRIPTION: Shows how to add an example component placeholder in the documentation markdown files that will be replaced by the CLI tool.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(component-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Negative Styled Timefield\nDESCRIPTION: Implementation of Timefield with negative styling applied.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/timefield/timefield.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<nx-timefield [negative]=\"true\"></nx-timefield>\n```\n\n----------------------------------------\n\nTITLE: Introduction of Clickable Card Component\nDESCRIPTION: A feature addition that introduces a new clickable card component, extending the functionality of the card component to support interaction.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n* **card:** add clickable card ([6859993](https://github.com/allianz/ng-aquila/commit/685999363098622eb66e28f57278600c5e3f48cb))\n```\n\n----------------------------------------\n\nTITLE: Indicator with Icon Button in HTML\nDESCRIPTION: Demonstrates how to incorporate the indicator component with an Icon Button. The specific implementation is not provided in the text.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/indicator/indicator.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-icon-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Recommended: Composable Menu Implementation\nDESCRIPTION: Shows the preferred approach for implementing a menu component using composition and exposing underlying elements directly.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- ✅ GOOD EXAMPLE: -->\n<button nxButton=\"primary small\" nxTooltip=\"Opens the menu\" nxTooltipDelay=\"50\" (click)=\"buttonClicked()\" [nxMenuTriggerFor]=\"menu\"> Menu </button>\n\n<nx-menu #menu>\n    <nx-menu-item>Settings</nx-menu-item>\n    <nx-menu-item>Remove</nx-menu-item>\n</nx-menu>\n```\n\n----------------------------------------\n\nTITLE: Defining Viewport Breakpoints in ng-aquila\nDESCRIPTION: Enumerates the available viewport breakpoints in ng-aquila, which can be used with the NxViewportService for responsive design.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/layout/layout.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum NxBreakpoints {\n    BREAKPOINT_XSMALL = 0,\n    BREAKPOINT_SMALL = 320,\n    BREAKPOINT_MEDIUM = 704,\n    BREAKPOINT_LARGE = 992,\n    BREAKPOINT_XLARGE = 1280,\n    BREAKPOINT_2XLARGE = 1472,\n    BREAKPOINT_3XLARGE = 1760,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Moment.js Date Adapter\nDESCRIPTION: Import statement for Moment.js date adapter implementation that works with Moment instances.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/datefield/datefield.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxMomentDateModule } from '@aposin/ng-aquila/moment-date-adapter';\n```\n\n----------------------------------------\n\nTITLE: Private Example Configuration in HTML\nDESCRIPTION: Demonstrates how to configure a private example with options to hide it from public documentation and disable the Stackblitz button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(component-basic-private, { \"privateExample\": true, \"hideStackblitzButton\": true }) -->\n```\n\n----------------------------------------\n\nTITLE: Importing CDK Overlay and A11y Stylesheets for Message Toast\nDESCRIPTION: Shows how to import the necessary CDK stylesheets for proper display of message toasts. Both overlay and a11y stylesheets are required for the component to function correctly.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/message/message.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '@angular/cdk/overlay-prebuilt.css';\n@import '@angular/cdk/a11y-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Updating Tabs Component CSS Selector in Angular\nDESCRIPTION: CSS selector update required for left-aligned tab groups. This change modifies the CSS selector from a class (.nx-tab-header) to an element (nx-tab-header) to target the tab header properly.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n:host ::ng-deep nx-tab-header {\n  justify-content: flex-start!important;\n}\n```\n\n----------------------------------------\n\nTITLE: Indicator with Navigation Bar Tabs in HTML\nDESCRIPTION: Illustrates how to use the indicator component with Navigation Bar Tabs. The specific implementation details are not provided in the text.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/indicator/indicator.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(tabs-nav-bar-with-indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Build Commands in Shell\nDESCRIPTION: Shell commands for building the library packages and documentation.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Medium Button Example in HTML\nDESCRIPTION: Demonstrates the implementation of a medium-sized button.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-medium) -->\n```\n\n----------------------------------------\n\nTITLE: Importing Expert Module in TypeScript\nDESCRIPTION: Shows how to import the NxExpertModule from ng-aquila config package.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/config/config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxExpertModule } from '@aposin/ng-aquila/config';\n```\n\n----------------------------------------\n\nTITLE: AG Grid Theme Classes HTML\nDESCRIPTION: HTML markup showing how to apply AG Grid theme classes to the grid container\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<ag-grid-angular class=\"ag-theme-alpine ag-theme-aquila\"></ag-grid-angular>\n```\n\n----------------------------------------\n\nTITLE: Installing ng-aquila and Dependencies Manually\nDESCRIPTION: Commands to manually install ng-aquila and its dependencies in an Angular project.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd my-allianz-project\nnpm install @aposin/ng-aquila\nnpm install @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: GitHub Commit Reference Example\nDESCRIPTION: Example of referencing a commit hash in a GitHub repository.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n([91ebb2c](https://github.com/aposin/ng-aquila/commit/91ebb2c46b2bde3b9e381c9f6709ecffedf94dbb))\n```\n\n----------------------------------------\n\nTITLE: Basic Indicator Usage in HTML\nDESCRIPTION: Demonstrates the basic usage of the indicator component. The actual implementation is not shown in the provided text, but it's referenced as an example.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/indicator/indicator.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(indicator) -->\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Dropdown Implementation with Configuration\nDESCRIPTION: Demonstrates a discouraged approach of implementing a dropdown component using configuration. This method limits flexibility and requires library changes for new features.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- 🚫 BAD EXAMPLE: don't do this -->\n<nx-dropdown [items]=\"[{label: 'Apple', value: 'apple'}, {label: 'Banana', value: 'banana'}]\"></nx-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Icons for Open Source Projects\nDESCRIPTION: How to use the NxDocumentationIconModule in open source projects to map internal icon names to Font Awesome icons, allowing code examples to work without the proprietary icon font.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/icon/icon.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxDocumentationIconModule } from '@aposin/ng-aquila/documentation-icons';\n```\n\n----------------------------------------\n\nTITLE: Displaying Schematics CLI Help Information in Bash\nDESCRIPTION: Command to display the help documentation for the schematics command line tool, which provides information about available commands and options for testing schematics locally.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/schematics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nschematics --help\n```\n\n----------------------------------------\n\nTITLE: Listing Features in Markdown\nDESCRIPTION: This snippet demonstrates how new features are listed using Markdown bullet points and links to commit hashes.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **comparison-table:** add recommendation table example ([acf95de](https://github.com/allianz/ng-aquila/commit/acf95de1f1ac21a4def412782fe605fc7e6d6a41))\n* **data-display:** add horizontal column layout ([cd5ea34](https://github.com/allianz/ng-aquila/commit/cd5ea34500d1c6f4cb45a06efbb7eb3b98f03da8))\n```\n\n----------------------------------------\n\nTITLE: Including Examples in Markdown\nDESCRIPTION: Syntax for including examples in markdown documentation files. This directive tells the documentation system to load and render the specified example component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- example(primary-button) -->\n```\n\n----------------------------------------\n\nTITLE: Expert: Readonly Radio Buttons\nDESCRIPTION: Implementation of readonly radio buttons for expert/internal applications. This feature has accessibility restrictions and is not recommended for retail applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-button/radio-button.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-button-readonly) -->\n```\n\n----------------------------------------\n\nTITLE: Installation and Start Commands in Shell\nDESCRIPTION: Commands for installing dependencies and starting the documentation application locally.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# Install all dependencies\nnpm ci\n\n# Run the app with\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Menu Component Template Implementation\nDESCRIPTION: Demonstrates the template implementation of a menu component that incorrectly re-exposes APIs of underlying components.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 🚫 BAD EXAMPLE: don't do this -->\n<button\n    class=\"menu-trigger\"\n    [nxButton]=\"buttonSize + ' ' + menuButtonType\"\n    (click)=\"toggleMenuAndEmitButtonClickEvent()\"\n    [nxTooltip]=\"tooltipText\"\n    [nxTooltipDelay]=\"tooltipDelay\"\n>\n    {{buttonText}}\n</button>\n\n<div class=\"menu-items\">\n    <ng-content></ng-content>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using ng-aquila Margin Helper Classes in HTML\nDESCRIPTION: Example of using ng-aquila margin helper classes to apply margins to HTML elements. The classes follow a specific naming pattern for direction and size.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/layout/layout.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"nx-hidden-xs nx-hidden-s nx-hidden-m\">Hidden on tablet and smaller</p>\n```\n\n----------------------------------------\n\nTITLE: Running Angular Update Commands for ng-aquila v11\nDESCRIPTION: Commands for updating ng-aquila and its dependencies to version 11 using the Angular CLI. This updates Angular core, CDK, and ng-aquila packages with the --force flag to handle any conflicts.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core --force\nng update @angular/cdk --force\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Expert: Readonly Circle Toggle\nDESCRIPTION: Example showing readonly state for Circle Toggle, which is only intended for expert/internal applications due to accessibility restrictions.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/circle-toggle/circle-toggle.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(circle-toggle-readonly) -->\n```\n\n----------------------------------------\n\nTITLE: Source Directory Example Structure\nDESCRIPTION: Example directory structure showing how to organize source files with markdown documentation. Each component folder should contain a markdown file with the same name as the folder.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ngx-docs-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n|- source\n|  |- button\n|  |  |- button.md\n```\n\n----------------------------------------\n\nTITLE: Expert: Checkbox Group Validation\nDESCRIPTION: Shows how to implement validation for checkbox groups using nx-error, which is only available for expert applications.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-group-validation) -->\n```\n\n----------------------------------------\n\nTITLE: Specifying Version and Commit Hash in Markdown\nDESCRIPTION: This snippet shows how version numbers and commit hashes are formatted in the release notes using Markdown syntax.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n## [13.8.0](https://github.com/allianz/ng-aquila/compare/v13.7.0...v13.8.0) (2022-07-15)\n```\n\n----------------------------------------\n\nTITLE: Importing Moment.js Locales in Angular v17+\nDESCRIPTION: Demonstrates how to import specific locale files for moment.js in Angular version 17 and above. This is required when using the moment date adapter with different locales.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/datefield/datefield.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'moment/locale/de';\nimport 'moment/locale/ja';\nimport 'moment/locale/ar';\n```\n\n----------------------------------------\n\nTITLE: Plain Button Example in HTML\nDESCRIPTION: Illustrates the usage of a plain button that requires minimal space.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/button/button.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(button-plain) -->\n```\n\n----------------------------------------\n\nTITLE: Using Basic Swipebar Component in HTML\nDESCRIPTION: Demonstrates the basic usage of the swipebar component as a wrapper for horizontally scrollable content. This component is deprecated and will be removed in v20, with recommendation to use native scrollbars instead.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/swipebar/swipebar.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"docs-deprecation-warning\">\n⚠️ <strong>Important:</strong> This component is deprecated and will be deleted in v20. Please use the native scroll bar instead.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated Taglist Component\nDESCRIPTION: Shows the basic usage of the deprecated nxTaglist component that allows individual values to be deleted on click, with optional configuration to disable deletion.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist) -->\n```\n\n----------------------------------------\n\nTITLE: Using nx-label for Progress Indicator After Breaking Change\nDESCRIPTION: Example showing how to use nx-label element as content to a progress indicator after the 'title' input removal breaking change. The nx-label element should be added as content to the indicator instead of using the deprecated title input.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n  <nx-single-stepper currentStepLabel=\"Step\">\n    <nx-label>My Title</nx-label>\n    ...\n  </nx-single-stepper>\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Toggle Button for Expert Applications in Angular\nDESCRIPTION: Demonstrates the readonly option for Toggle Buttons, noting it's intended for expert/internal applications due to accessibility restrictions.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/radio-toggle/radio-toggle.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(radio-toggle-readonly) -->\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Example\nDESCRIPTION: Shows version comparison syntax using GitHub repository compare view.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n[11.2.0](https://github.com/aposin/ng-aquila/compare/v11.1.0...v11.2.0)\n```\n\n----------------------------------------\n\nTITLE: Importing NxErrorModule in TypeScript\nDESCRIPTION: This code snippet shows how to import the NxErrorModule from the ng-aquila base package. This module is required to use the nx-error component for displaying error messages.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/base/base.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxErrorModule } from '@aposin/ng-aquila/base';\n```\n\n----------------------------------------\n\nTITLE: Basic Taglist Implementation\nDESCRIPTION: Shows a basic implementation of the deprecated taglist component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-basic) -->\n```\n\n----------------------------------------\n\nTITLE: Styling Tags as Keywords\nDESCRIPTION: Demonstrates how to style tags as keywords by setting the isKeywordList option in the deprecated taglist component.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/taglist/taglist.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(taglist-keyword) -->\n```\n\n----------------------------------------\n\nTITLE: New Feature in modal Component\nDESCRIPTION: Added more autofocus options for modal dialogs.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// New autofocus options available in modal configuration\n```\n\n----------------------------------------\n\nTITLE: Importing NxLabelModule in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the NxLabelModule from the ng-aquila base package. This module is necessary to use the nx-label component for displaying styled labels.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/base/base.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxLabelModule } from '@aposin/ng-aquila/base';\n```\n\n----------------------------------------\n\nTITLE: Disabling Masking When deactivate Flag is Enabled\nDESCRIPTION: A bugfix reference that prevents masking functionality when the deactivate option is enabled, avoiding inappropriate masking behavior.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n* **mask:** don't do masking if deactivate is enabled ([13df8ef](https://github.com/allianz/ng-aquila/commit/13df8eff480672dcc25832b8b679c6771f1a26fa))\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Menu Component with Hidden APIs\nDESCRIPTION: Shows an incorrect implementation of a menu component that hides underlying component APIs, requiring re-implementation of features.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/DEVELOPER.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- 🚫 BAD EXAMPLE: don't do this -->\n<nx-menu buttonSize=\"small\" menuButtonType=\"primary\" buttonText=\"Menu\" (buttonClick)=\"buttonClicked()\" tooltipText=\"Opens the menu\" tooltipDelay=\"50\">\n    <nx-menu-item>Settings</nx-menu-item>\n    <nx-menu-item>Remove</nx-menu-item>\n</nx-menu>\n```\n\n----------------------------------------\n\nTITLE: Configuring AG Grid Styles in Angular\nDESCRIPTION: Configuration example showing how to import AG Grid base styles and themes in Angular.json file\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"styles\": [\n  \"node_modules/ag-grid-community/styles/ag-grid.css\",\n  \"node_modules/ag-grid-community/styles/ag-theme-alpine.css\",\n  \"node_modules/@aposin/ng-aquila/themes/ag-theme-aquila.css\",\n  \"src/styles.scss\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered List with Circles in ng-aquila\nDESCRIPTION: Demonstrates the creation of an ordered list with circular markers in ng-aquila. This example showcases a variation of the ordered list style.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/list/list.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(list-circles) -->\n```\n\n----------------------------------------\n\nTITLE: Publishing Angular Schematics to NPM\nDESCRIPTION: Commands for building documentation and publishing the schematic package to NPM registry. The build:docs command generates documentation before publishing the package.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/schematics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:docs\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Importing Text Field Stylesheet for Angular CDK\nDESCRIPTION: CSS import statement required for using the cdkTextareaAutosize directive with textarea elements.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/input/input.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@angular/cdk/text-field-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Version 19.3.2 Changelog Entry\nDESCRIPTION: Markdown changelog entry documenting bug fixes and documentation updates for NgAquila version 19.3.2\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [19.3.2](https://github.com/allianz/ng-aquila/compare/v19.3.1...v19.3.2) (2025-04-16)\n\n### Documentation 📚\n* **input:** reactive error example ([1ddbc81](https://github.com/allianz/ng-aquila/commit/1ddbc8161fba390602ff13364dd155baf972a353))\n\n### Bug Fixes 🐛\n* **date-field:** remove console logging ([e6d6ce4](https://github.com/allianz/ng-aquila/commit/e6d6ce4aab1ed0577d08a6deee6234f17f6f7fd8))\n* **natural-language-form:** access before initalization error ([08f4519](https://github.com/allianz/ng-aquila/commit/08f451982fab6ff75b8b4aca4e4bbeac5826c374))\n```\n\n----------------------------------------\n\nTITLE: Importing ng-aquila Utility Styles in CSS\nDESCRIPTION: Demonstrates how to import ng-aquila utility styles directly in a CSS file, as an alternative to using the Angular CLI configuration.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/layout/layout.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '@aposin/ng-aquila/css/utilities.css';\n```\n\n----------------------------------------\n\nTITLE: Version 19.3.1 Changelog Entry\nDESCRIPTION: Markdown changelog entry documenting bug fixes and deprecation notices for NgAquila version 19.3.1\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### [19.3.1](https://github.com/allianz/ng-aquila/compare/v19.3.0...v19.3.1) (2025-04-10)\n\n### Bug Fixes 🐛\n* **cards:** radio button color ([2a9d008](https://github.com/allianz/ng-aquila/commit/2a9d008bd1b1c9ba47b22f483793cbab7a19ba94))\n* **datepicker:** no modal cutoff on small screens ([ce541c7](https://github.com/allianz/ng-aquila/commit/ce541c7ba6d1786525746234a7068c1bdacde395))\n* **dropdown:** remove cursor style for readonly ([86fa9f8](https://github.com/allianz/ng-aquila/commit/86fa9f8d830fd5cdcb1d19e15ca03e0fc8e91cba))\n* **natural-language-form:** improved error messages ([2945d4d](https://github.com/allianz/ng-aquila/commit/2945d4dfddcf1979bf2784bdaeb205d5b0f18d20))\n* **signal-button:** align icon vertically ([f083974](https://github.com/allianz/ng-aquila/commit/f0839745c9539ebdd81289ccd80451a7c84c334b))\n* **toast:** a11y message does not announce ([1acb1a4](https://github.com/allianz/ng-aquila/commit/1acb1a43535b4531171a5580f6403b2d44a5b6d1))\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Date Module\nDESCRIPTION: Import statement for native date implementation that works with JavaScript Date objects.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/datefield/datefield.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NxNativeDateModule } from '@aposin/ng-aquila/datefield';\n```\n\n----------------------------------------\n\nTITLE: Implementing Footer with Default Copyright in HTML\nDESCRIPTION: This snippet shows how to create a footer using the nx-footer component with a default copyright text. It uses the 'copyright' input for the company name instead of the nx-footer-copyright directive.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/footer/footer.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(footer-default-copyright) -->\n```\n\n----------------------------------------\n\nTITLE: Updating to Angular 14 CLI Commands\nDESCRIPTION: Commands for updating both Angular core/CLI and Ng-Aquila to version 14\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/documentation/guides/releases.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cli @angular/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nng update @aposin/ng-aquila --force\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Input in Expert Mode\nDESCRIPTION: Example showing the expert version of the phone input component, which is automatically applied when using the NxExpertModule.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/phone-input/phone-input.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(phone-input-expert) -->\n```\n\n----------------------------------------\n\nTITLE: Applying Negative Styling to Checkboxes\nDESCRIPTION: Shows how to apply negative styling to checkboxes using the 'negative' input on either individual checkboxes or checkbox groups.\nSOURCE: https://github.com/allianz/ng-aquila/blob/main/projects/ng-aquila/src/checkbox/checkbox.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- example(checkbox-negative) -->\n```"
  }
]