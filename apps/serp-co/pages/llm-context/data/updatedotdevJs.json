[
  {
    "owner": "updatedotdev",
    "repo": "js",
    "content": "TITLE: Initializing Update Client with Session Token - TypeScript\nDESCRIPTION: Demonstrates initializing the Update client in a TypeScript environment by importing createClient and providing configuration options. It sets the publishable key from the environment, defines a getSessionToken function to retrieve the authentication token (customizable via Supabase or a static value), and selects the client environment (test or live) based on NODE_ENV. Required dependencies: @updatedev/js. Inputs are environment variables and authentication provider integration; outputs an initialized Update client instance. Replace 'your-session-token' with real user session logic for production.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@updatedev/js';\n\nexport async function createUpdateClient() {\n  return createClient(process.env.NEXT_PUBLIC_UPDATE_PUBLISHABLE_KEY!, {\n    getSessionToken: async () => {\n      // This must be replaced with your own logic to get your session token\n      // For example, with Supabase:\n      //\n      // import { createSupabaseClient } from '@/utils/supabase/client'\n      // ...\n      // const supabase = createSupabaseClient()\n      // const { data } = await supabase.auth.getSession()\n      // if (data.session == null) return\n      // return data.session.access_token\n\n      // For this example, we'll just return a static token\n      return 'your-session-token';\n    },\n    environment: process.env.NODE_ENV === 'production' ? 'live' : 'test',\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Update Client for Next.js Client-Side - TypeScript\nDESCRIPTION: Shows how to initialize the Update client specifically for client-side use in a Next.js application. The code resides in utils/update/client.ts and closely resembles the general initialization, but should connect to the client-side auth provider logic for session tokens. Relies on @updatedev/js and appropriate environment variables. Customize the getSessionToken logic as needed.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@updatedev/js';\n\nexport async function createUpdateClient() {\n  return createClient(process.env.NEXT_PUBLIC_UPDATE_PUBLISHABLE_KEY!, {\n    getSessionToken: async () => {\n      // This must be replaced with your own logic to get your session token\n      // For example, with Supabase:\n      //\n      // import { createSupabaseClient } from '@/utils/supabase/client'\n      // ...\n      // const supabase = createSupabaseClient()\n      // const { data } = await supabase.auth.getSession()\n      // if (data.session == null) return\n      // return data.session.access_token\n\n      // For this example, we'll just return a static token\n      return 'your-session-token';\n    },\n    environment: process.env.NODE_ENV === 'production' ? 'live' : 'test',\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Update Client for Next.js Server-Side - TypeScript\nDESCRIPTION: Demonstrates server-side initialization of the Update client for Next.js, typically placed in utils/update/server.ts. Designed to work with server-side auth/session retrieval (e.g., using a server-side Supabase client). Requires @updatedev/js and correct environment variables set. The getSessionToken function can be adapted to your server-side authentication mechanism.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@updatedev/js';\n\nexport async function createUpdateClient() {\n  return createClient(process.env.NEXT_PUBLIC_UPDATE_PUBLISHABLE_KEY!, {\n    getSessionToken: async () => {\n      // This must be replaced with your own logic to get your session token\n      // For example, with Supabase:\n      //\n      // import { createSupabaseClient } from '@/utils/supabase/server'\n      // const supabase = await createSupabaseClient()\n      // const { data } = await supabase.auth.getSession()\n      // if (data.session == null) return\n      // return data.session.access_token\n\n      // For this example, we'll just return a static token\n      return 'your-session-token';\n    },\n    environment: process.env.NODE_ENV === 'production' ? 'live' : 'test',\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Update JS Library Using npm - Bash\nDESCRIPTION: Installs the @updatedev/js package via npm, making the Update library available for import into JavaScript or TypeScript projects. Required as a prerequisite for all other examples in this documentation. Ensure that npm and Node.js are installed in your development environment.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @updatedev/js\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Update Project with create-update-app - Bash\nDESCRIPTION: Bootstraps a new Update-powered application using the create-update-app CLI command. This tool scaffolds project files and prompts for the necessary API keys and configuration options, streamlining initial setup. Requires npm; follow additional prompts to select framework and supply credentials.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create update@latest\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products with Update Billing API - TypeScript\nDESCRIPTION: Retrieves the available billing products for the current user by calling client.billing.getProducts(). Inputs: an initialized Update client instance; no additional parameters required. Outputs a data object containing product details or an error object. Handle potential error values as needed.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await client.billing.getProducts();\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Subscriptions with Update Billing API - TypeScript\nDESCRIPTION: Fetches all billing subscriptions for the authenticated user via client.billing.getSubscriptions(). Returns a data object with subscription info. This call requires a valid authentication session token configured in the client.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await client.billing.getSubscriptions();\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkout Session with Update Billing API - TypeScript\nDESCRIPTION: Initiates a Stripe-powered checkout session for the specified priceId and configures a redirect_url for post-payment navigation. Inputs: a priceId string and options including the redirect_url. Outputs data on the session or an error object. Requires an authenticated and initialized client as shown in previous snippets.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await client.billing.createCheckoutSession(priceId, {\n  redirect_url: 'http://localhost:3000/subscription',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Listing Entitlements with Update API - TypeScript\nDESCRIPTION: Retrieves the list of entitlements (access rights/features) available to the authenticated user by calling client.entitlements.list(). Inputs: authorized client. Outputs a data array of entitlements; errors handled with the error variable.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await client.entitlements.list();\n\n```\n\n----------------------------------------\n\nTITLE: Checking a Specific Entitlement with Update API - TypeScript\nDESCRIPTION: Checks if the current user has a specific entitlement (e.g., 'premium') by passing the entitlement key to client.entitlements.check. Inputs: entitlement key ('premium', etc.) and client instance. Outputs include entitlement status data or an error.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await client.entitlements.check('premium');\n\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Subscription with Update Billing API - TypeScript\nDESCRIPTION: Cancels a user subscription at the end of the current billing period by calling client.billing.updateSubscription with the relevant subscription id and cancel_at_period_end: true. Inputs: subscription id and option object. No output returned if successful; errors should be handled as exceptions or result objects.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.billing.updateSubscription(id, {\n  cancel_at_period_end: true,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Reactivating a Subscription with Update Billing API - TypeScript\nDESCRIPTION: Reactivates a canceled subscription by calling client.billing.updateSubscription with cancel_at_period_end: false for the chosen subscription id. Input: subscription id and option object. No direct output, but any error should be managed programmatically.\nSOURCE: https://github.com/updatedotdev/js/blob/main/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.billing.updateSubscription(id, {\n  cancel_at_period_end: false,\n});\n\n```"
  }
]