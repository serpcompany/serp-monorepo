[
  {
    "owner": "bats-core",
    "repo": "bats-core",
    "content": "TITLE: Basic BATS Test Structure\nDESCRIPTION: Simple BATS test that checks if a script can be executed\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@test \"can run our script\" {\n    ./project.sh\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bats Test Cases in Bash\nDESCRIPTION: This snippet demonstrates how to create a Bats test file with two test cases. It shows the syntax for defining test functions and making assertions using standard shell commands.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bats\n\n@test \"addition using bc\" {\n  result=\"$(echo 2+2 | bc)\"\n  [ \"$result\" -eq 4 ]\n}\n\n@test \"addition using dc\" {\n  result=\"$(echo 2 2+p | dc)\"\n  [ \"$result\" -eq 4 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Test Lifecycle Call Order Example\nDESCRIPTION: Demonstrates the execution order of setup and teardown hooks across test suite, files and individual tests.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nsetup_suite # from setup_suite.bash\n  setup_file # from file 1, on entering file 1\n    setup\n      test1\n    teardown\n    setup\n      test2\n    teardown\n  teardown_file # from file 1, on leaving file 1\n  setup_file # from file 2,  on enter file 2\n    setup\n      test3\n    teardown\n  teardown_file # from file 2,  on leaving file 2\nteardown_suite # from setup_suite.bash\n```\n\n----------------------------------------\n\nTITLE: Basic Run Helper Usage in Bats\nDESCRIPTION: Demonstrates using the run helper to execute a command in a test, capturing its exit status and output for assertions. Tests a command with a nonexistent file.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo with a nonexistent file prints an error\" {\n  run foo nonexistent_filename\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"foo: no such file 'nonexistent_filename'\" ]\n  [ \"$BATS_RUN_COMMAND\" = \"foo nonexistent_filename\" ]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assertion Functions in Bats\nDESCRIPTION: Demonstrates the use of assertion functions in Bats for better test output. Comparing the recommended approach using assert_output with a basic bash comparison that provides less useful output on failure.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n@test test {\n    run echo test failed\n    assert_output \"test\"\n    # instead of \n    [ \"$output\" = \"test\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Shared Test Code\nDESCRIPTION: Example of using the load command to import shared test helper code from relative paths.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nload test_helper.bash\n```\n\n----------------------------------------\n\nTITLE: Alternative Comment Syntax for Bats Tests\nDESCRIPTION: Shows the alternative function-based syntax for defining Bats tests that's compatible with external tools like shellcheck and various IDEs which may not support standard .bats syntax.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunction invoking_foo_without_arguments_prints_usage { #@test\n  run foo\n  [ \"$status\" -eq 1 ]\n  [ \"${lines[0]}\" = \"usage: foo <filename>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Teardown in Bats\nDESCRIPTION: A Bats test teardown_file function that ensures the echo server is stopped after tests complete, regardless of success or failure. This prevents port conflicts in subsequent test runs.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nteardown_file() {\n    project.sh stop-echo-server\n}\n```\n\n----------------------------------------\n\nTITLE: Proper function declaration example in Bash\nDESCRIPTION: Example of a recommended function declaration with meaningful parameter names. This demonstrates the proper way to declare and document functions in the Bats-Core codebase.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nformat_summary() {\n  local cmd_name=\"$1\"\n  local summary=\"$2\"\n  local longest_name_len=\"$3\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Output Lines in Bats Tests\nDESCRIPTION: Demonstrates how to access individual lines of output using the lines array in Bats tests, useful for testing multi-line command output.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo without arguments prints usage\" {\n  run -1 foo\n  [ \"${lines[0]}\" = \"usage: foo <filename>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Library Functions in Bats Tests\nDESCRIPTION: Demonstrates how to use functions from helper libraries in a Bats test after loading them. This example shows the assert_output function from bats-assert.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n@test \"test\" {\n    run echo test\n    assert_output \"test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using bats_pipe for Command Piping in Tests\nDESCRIPTION: Demonstrates how to use bats_pipe helper to test commands with pipes while capturing output and status. Shows basic usage with status checking.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo piped to bar\" {\n  run bats_pipe foo \\| bar\n  # asserting foo or bar would return 17 (from foo if bar returns 0).\n  [ \"$status\" -eq 17 ]\n  [ \"$output\" = \"bar output.\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Bats Support Libraries in Test Setup\nDESCRIPTION: Shows how to load Bats support libraries like bats-support and bats-assert in the setup function of your test files. These libraries are included in the official Bats Docker image.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/docker-usage.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsetup() {\n    bats_load_library bats-support\n    bats_load_library bats-assert\n}\n```\n\n----------------------------------------\n\nTITLE: Running Piped Commands in Bats Tests\nDESCRIPTION: Examples showing how to properly use pipes with the 'run' command in Bats tests. Shows both using bash -c and wrapper functions to handle pipes correctly.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/gotchas.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrun echo foo | grep bar\n```\n\nLANGUAGE: bash\nCODE:\n```\nrun bash -c 'echo foo | grep bar'\n```\n\nLANGUAGE: bash\nCODE:\n```\nfun_with_pipes() {\n    echo foo | grep bar\n}\n\nrun fun_with_pipes\n```\n\n----------------------------------------\n\nTITLE: Skipping a Test in Bats\nDESCRIPTION: Shows how to skip a test in Bats by adding the skip command. This allows you to temporarily exclude a test from running without removing or commenting it out.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@test \"Testname\" {\n    # yadayada\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n@test \"Testname\" {\n    skip 'Optional skip message'\n    # yadayada\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests with test_tags in Bats\nDESCRIPTION: Example showing how to tag individual Bats tests using the test_tags directive to categorize a specific test. These tags can be used for filtering test execution.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# bats test_tags=tag:1, tag:2, tag:3\n@test \"first test\" {\n  # ...\n}\n\n@test \"second test\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Helper Libraries in Bats\nDESCRIPTION: Shows how to load helper libraries like bats-assert and bats-support in the setup function. These libraries provide additional testing functionality and must be loaded before use.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsetup() {\n    load 'test_helper/bats-support/load' # this is required by bats-assert!\n    load 'test_helper/bats-assert/load'\n}\n```\n\n----------------------------------------\n\nTITLE: BATS Test Setup Configuration\nDESCRIPTION: Setup function to configure test environment and PATH variables\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsetup() {\n    DIR=\"$( cd \"$( dirname \"$BATS_TEST_FILENAME\" )\" >/dev/null 2>&1 && pwd )\"\n    PATH=\"$DIR/../src:$PATH\"\n}\n```\n\n----------------------------------------\n\nTITLE: BATS Test with Assertions\nDESCRIPTION: Test implementation using bats-assert library for output validation\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsetup() {\n    load 'test_helper/bats-support/load'\n    load 'test_helper/bats-assert/load'\n    DIR=\"$( cd \"$( dirname \"$BATS_TEST_FILENAME\" )\" >/dev/null 2>&1 && pwd )\"\n    PATH=\"$DIR/../src:$PATH\"\n}\n\n@test \"can run our script\" {\n    run project.sh\n    assert_output 'Welcome to our project!'\n}\n```\n\n----------------------------------------\n\nTITLE: Run Helper with Implicit Status Check in Bats\nDESCRIPTION: Shows how to use the run helper with an implicit exit status check (-1) to simplify test assertions when expecting a specific exit status.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo with a nonexistent file prints an error\" {\n  run -1 foo nonexistent_filename\n  [ \"$output\" = \"foo: no such file 'nonexistent_filename'\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: On Failure Hook Example\nDESCRIPTION: Demonstrates how to use the bats::on_failure hook to handle test failures with different error handling strategies.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n@test \"my awesome test\" {\n  simple_test_setup\n\n  bats::on_failure() {\n    handle_simple_error_case\n  }\n\n  complex_test_setup\n\n  bats::on_failure() {\n    print_debug_information_only_on_error\n  }\n\n  do_actual_tests\n\n  check_results\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Command Not Found Error in BATS Run Function\nDESCRIPTION: Examples of how to properly handle exit code 127 (Command not found) in BATS tests. The snippet shows various approaches depending on the expected behavior of the command being tested.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/warnings/BW01.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrun -127 <your command>\n```\n\nLANGUAGE: bash\nCODE:\n```\nrun ! <your command>\n```\n\n----------------------------------------\n\nTITLE: Teardown Failure Modes Examples\nDESCRIPTION: Shows different ways teardown functions can fail tests through return codes and command failures.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nteardown() {\n  false # this will fail the test, as it determines the return code\n}\n\nteardown() {\n  false # this won't fail the test ...\n  echo some more code # ... and this will be executed too!\n}\n\nteardown() {\n  return 1 # this will fail the test, but the rest won't be executed\n  echo some more code\n}\n\nteardown() {\n  if true; then\n    false # this will also fail the test, as it is the last command in this function\n  else\n    true\n  fi\n}\n```\n\n----------------------------------------\n\nTITLE: BATS Test with Helper Function\nDESCRIPTION: Test implementation using a helper function to handle output filtering\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nget_projectsh_welcome_message() {\n    project.sh  2>&1 | grep Welcome\n}\n\n@test \"Check welcome message\" {\n    run get_projectsh_welcome_message\n    assert_output 'Welcome to our project!'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bash-Compliant Function Syntax for Bats Tests\nDESCRIPTION: Alternative syntax for Bats tests that is compatible with Bash tooling. This approach uses standard Bash function declaration with a special comment to mark it as a test.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/gotchas.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfunction bash_compliant_function_name_as_test_name { # @test\n    # your code\n}\n```\n\n----------------------------------------\n\nTITLE: BATS Test with Partial Matching\nDESCRIPTION: Test implementation using partial output matching assertion\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n@test \"Check welcome message\" {\n    run project.sh\n    assert_output --partial 'Welcome to our project!'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bats Test Structure with Shebang\nDESCRIPTION: Example of a basic Bats test file with shebang, showing where parameters might be passed (though not supported directly by Bats).\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/gotchas.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bats\n\n@test \"test\" {\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Binary Output with bats_pipe\nDESCRIPTION: Shows how to handle binary data output using bats_pipe by converting it to hexadecimal format for testing.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo that returns binary data\" {\n  run bats_pipe foo \\| hexdump -v -e \"1/1 \\\"0x%02X \\\"\"\n  [ \"$status\" -eq 17 ]\n  [[ \"$output\" =~ 0xDE\\ 0xAD ]]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bats Tests in Docker Container\nDESCRIPTION: Demonstrates how to mount your project code into a Docker container and run Bats tests. This approach is useful for test suites that need to run in isolation from their project code.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/docker-usage.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -v \"$PWD:/code\" bats/bats:latest /code/test\n```\n\n----------------------------------------\n\nTITLE: Using bats_pipe with Specific Command Status\nDESCRIPTION: Shows how to use bats_pipe with the -N option to always return the status of a specific command in the pipe chain.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo piped to bar always return foo status\" {\n  run bats_pipe -0 foo \\| bar\n  # status of bar is ignored, status is always from foo.\n  [ \"$status\" -eq 2 ]\n  [ \"$output\" = \"bar output.\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Bats' Own Tests in Docker\nDESCRIPTION: Demonstrates how to clone the Bats repository, build a Docker image from it, and run Bats' own tests inside a Docker container. Uses the TAP formatter for test output.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/docker-usage.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bats-core/bats-core.git\nCloning into 'bats-core'...\nremote: Counting objects: 1222, done.\nremote: Compressing objects: 100% (53/53), done.\nremote: Total 1222 (delta 34), reused 55 (delta 21), pack-reused 1146\nReceiving objects: 100% (1222/1222), 327.28 KiB | 1.70 MiB/s, done.\nResolving deltas: 100% (661/661), done.\n\ncd bats-core/\ndocker build --tag bats/bats:latest .\n...\ndocker run -it bats/bats:latest --formatter tap /opt/bats/test\n```\n\n----------------------------------------\n\nTITLE: Using bats_pipe with Returned Status Option\nDESCRIPTION: Demonstrates using bats_pipe with --returned-status option to specify which command's status to return, supporting negative indices.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n@test \"invoking foo piped to bar always return foo status\" {\n  run bats_pipe --returned-status -2 foo \\| bar\n  # status of bar is ignored, status is always from foo.\n  [ \"$status\" -eq 2 ]\n  [ \"$output\" = \"bar output.\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bats Tests with TAP Output\nDESCRIPTION: This command demonstrates how to run Bats tests using the bats executable, specifying the TAP (Test Anything Protocol) output format and the test directory.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/bats --tap test\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Check for BATS Test\nDESCRIPTION: Demonstrates how to use bats_require_minimum_version to ensure compatibility with BATS features that require version 1.5.0 or higher. The example shows usage with the --separate-stderr flag.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/warnings/BW02.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@test test {\n    bats_require_minimum_version 1.5.0\n    # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n    run --separate-stderr some-command \n    [ $output = \"blablabla\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running a single Bats test file\nDESCRIPTION: Command to run a specific Bats test file. This is useful when working on a particular feature or fixing a specific issue.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbin/bats test/file.bats\n```\n\n----------------------------------------\n\nTITLE: Mixed Version Compatibility in BATS Tests\nDESCRIPTION: Shows how to implement multiple tests with different version requirements. The first test requires BATS 1.5.0+ for --separate-stderr feature, while the second test can run on any version.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/warnings/BW02.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n@test test {\n    bats_require_minimum_version 1.5.0\n    # pre 1.5.0 the flag --separate-stderr would be interpreted as command to run\n    run --separate-stderr some-command \n    [ $output = \"blablabla\" ]\n}\n\n@test test2 {\n    run some-other-command # no problem executing on earlier version\n}\n```\n\n----------------------------------------\n\nTITLE: Short function declaration example in Bash\nDESCRIPTION: Example of a short function that may not require named parameters. This shows when it's acceptable to use positional parameters directly.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhas_spaces() {\n  [[ \"$1\" != \"${1//[[:space:]]/}\" ]]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bats tests with terminal output\nDESCRIPTION: Example of running Bats tests with default terminal output that shows checkmarks for passing tests and X marks for failing tests.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/usage.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ bats addition.bats\n ✓ addition using bc\n ✓ addition using dc\n\n2 tests, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Using Proper Return Values in Bash Tests\nDESCRIPTION: Example showing why using 'return 1' as true doesn't work in Bash tests. In Bash, return code 0 indicates success while non-zero values indicate failure.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/gotchas.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreturn 1\n```\n\n----------------------------------------\n\nTITLE: Running Bats tests with TAP output\nDESCRIPTION: Example of forcing TAP (Test Anything Protocol) output format when running Bats tests, which is machine-parsable and human-readable.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/usage.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ bats --formatter tap addition.bats\n1..2\nok 1 addition using bc\nok 2 addition using dc\n```\n\n----------------------------------------\n\nTITLE: Handling Negated Statements in Bats Tests\nDESCRIPTION: Example showing different approaches to handle negated statements in Bats tests. Bash excludes negated return values from causing a pipeline to exit.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/gotchas.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrun !\n```\n\nLANGUAGE: bash\nCODE:\n```\n! x || false\n```\n\nLANGUAGE: bash\nCODE:\n```\nrun\n[ $status != 0 ]\n```\n\n----------------------------------------\n\nTITLE: Running Bats tests with JUnit output\nDESCRIPTION: Example of using the JUnit formatter to generate JUnit-compatible reports when running Bats tests.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/usage.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ bats --formatter junit addition.bats\n1..2\nok 1 addition using bc\nok 2 addition using dc\n```\n\n----------------------------------------\n\nTITLE: Loading files in Bash\nDESCRIPTION: The load function now reads from absolute and relative paths, and $PATH.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nload\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit report files with Bats\nDESCRIPTION: Example of generating a JUnit XML report file when running Bats tests, showing how to specify an output directory.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/usage.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ bats --report-formatter junit addition.bats --output /tmp\n1..2\nok 1 addition using bc\nok 2 addition using dc\n\n$ cat /tmp/report.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"0.073\">\n<testsuite name=\"addition.bats\" tests=\"2\" failures=\"0\" errors=\"0\" skipped=\"0\">\n    <testcase classname=\"addition.bats\" name=\"addition using bc\" time=\"0.034\" />\n    <testcase classname=\"addition.bats\" name=\"addition using dc\" time=\"0.039\" />\n</testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Separating stderr in run output in Bash\nDESCRIPTION: Fills $stderr and $stderr_lines variables when the --separate-stderr flag is used with the run command.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrun --separate-stderr\n```\n\n----------------------------------------\n\nTITLE: Adding Server Stop Command to Project Script\nDESCRIPTION: Additional bash case statement for the project.sh script to handle stopping the echo server. It reads the process ID from the temporary file and kills the process, then removes the PID file.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nstop-echo-server)\n    kill \"$(< \"/tmp/project-echo-server.pid\")\"\n    rm /tmp/project-echo-server.pid\n;;\n```\n\n----------------------------------------\n\nTITLE: Keeping empty lines in run output in Bash\nDESCRIPTION: Retains empty lines in ${lines[@]} when the --keep-empty-lines flag is used with the run command.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrun --keep-empty-lines\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests Basic Example\nDESCRIPTION: Demonstrates basic test skipping functionality using the skip command.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n@test \"A test I don't want to execute for now\" {\n  skip\n  run foo\n  [ \"$status\" -eq 0 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting verbose run mode in Bash\nDESCRIPTION: Makes the run command print $output by default when the --verbose-run flag is used.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrun\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Reason\nDESCRIPTION: Shows how to skip tests while providing an explanatory message.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n@test \"A test I don't want to execute for now\" {\n  skip \"This command will return zero soon, but not now\"\n  run foo\n  [ \"$status\" -eq 0 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading libraries from search path in Bash\nDESCRIPTION: Loads libraries from the BATS_LIB_PATH search path using the bats_load_library function.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbats_load_library\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Skipping\nDESCRIPTION: Example of conditionally skipping tests based on runtime conditions.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n@test \"A test which should run\" {\n  if [ foo != bar ]; then\n    skip \"foo isn't bar\"\n  fi\n\n  run foo\n  [ \"$status\" -eq 0 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting custom test file extension in Bash\nDESCRIPTION: Sets a custom file extension for test files when searching for tests in a directory. Uses the BATS_FILE_EXTENSION environment variable.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBATS_FILE_EXTENSION\n```\n\n----------------------------------------\n\nTITLE: Running Bats using Docker\nDESCRIPTION: Command to run Bats in a Docker container using the official Docker Hub image.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it bats/bats:latest --version\n```\n\n----------------------------------------\n\nTITLE: Running Specific Bats Test Files\nDESCRIPTION: Shows how to run specific test files with Bats by explicitly naming them in the command. This allows selective test execution within a test suite.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bats test/a.bats test/b.bats ...\n```\n\n----------------------------------------\n\nTITLE: Building a Docker image for Bats\nDESCRIPTION: Steps to clone the Bats repository and build a local Docker image for running Bats tests.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/bats-core/bats-core.git\n$ cd bats-core\n$ docker build --tag bats/bats:latest .\n```\n\n----------------------------------------\n\nTITLE: Running All Bats Tests in a Directory\nDESCRIPTION: Shows how to run all Bats test files in a directory. Bats will automatically find and execute all files with the .bats extension.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bats test/\n```\n\n----------------------------------------\n\nTITLE: Running Bats' internal test suite in Docker\nDESCRIPTION: Command to run Bats' internal test suite within the Docker container.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it bats/bats:latest /opt/bats/test\n```\n\n----------------------------------------\n\nTITLE: Running all Bats tests\nDESCRIPTION: Command to run all Bats test files in the project. This is used for comprehensive testing of the entire codebase.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbin/bats test\n```\n\n----------------------------------------\n\nTITLE: Running local tests with Bats in Docker\nDESCRIPTION: Command to mount a local test directory as a volume in the Docker container and run tests with Bats.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it -v \"${PWD}:/code\" bats/bats:latest test\n```\n\n----------------------------------------\n\nTITLE: Extending Bats Docker Image with Additional Dependencies\nDESCRIPTION: Demonstrates how to extend the base Bats Docker image with additional tools using a Dockerfile. This example adds the openssh package using Alpine's package manager.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/docker-usage.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM bats/bats\n\nRUN \\ \n  apk \\\n  --no-cache \\\n  --update \\\n  add \\\n  openssh \n```\n\n----------------------------------------\n\nTITLE: Project Script with Output\nDESCRIPTION: Example script with welcome message and error handling\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\necho \"Welcome to our project!\"\n\necho \"NOT IMPLEMENTED!\" >&2\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Mounting Tests to Bats Docker Container\nDESCRIPTION: Shows how to mount your tests directory into the Bats Docker container for execution. This example mounts the current directory to /opt/bats in the container.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/docker-usage.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -v \"$PWD:/opt/bats\" bats/bats:latest /opt/bats/test\n```\n\n----------------------------------------\n\nTITLE: Successful Test Output in Console\nDESCRIPTION: Console output showing a successful test run where the server is properly initialized and reachable. This represents the first test execution where no previous server instance exists.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ LANG=C ./test/bats/bin/bats test/server.bats \n ✓ server is reachable\n\n1 test, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Installing Bats from source on Windows via Git Bash\nDESCRIPTION: Commands to clone and install Bats from source to the user's home directory on Windows using Git Bash.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/bats-core/bats-core.git\n$ cd bats-core\n$ ./install.sh $HOME\n```\n\n----------------------------------------\n\nTITLE: Failed Test Output in Console\nDESCRIPTION: Console output showing a failed test run when a server instance is already running from a previous test. The error occurs because the port is already in use and the cleanup was not performed properly.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ./test/bats/bin/bats test/server.bats\n ✗ server is reachable\n   (in test file test/server.bats, line 14)\n     `nc -z -w 2 localhost \"$PORT\"' failed\n   2000\n   Ncat: bind to :::2000: Address already in use. QUITTING.\n   nc: port number invalid: 2000\n   Ncat: bind to :::2000: Address already in use. QUITTING.\n\n1 test, 1 failure\n```\n\n----------------------------------------\n\nTITLE: Installing Bats from source on Unix-like systems\nDESCRIPTION: Steps to clone the Bats repository and install it from source to a specified location (e.g., /usr/local) on Unix-like systems.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/bats-core/bats-core.git\n$ cd bats-core\n$ ./install.sh /usr/local\n```\n\n----------------------------------------\n\nTITLE: Commenting Out a Test in Bats\nDESCRIPTION: Demonstrates how to comment out a test in Bats by converting the @test declaration into a regular function. This prevents the test from being recognized and run by Bats.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/faq.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n@test \"Testname\" {\n```\n\nLANGUAGE: bash\nCODE:\n```\ndisabled() { # @test \"Testname\" {\n```\n\n----------------------------------------\n\nTITLE: Installing Bats via npm globally or as project dependency\nDESCRIPTION: Commands to install Bats using npm either globally or as a project development dependency saved in package.json.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# To install globally:\n$ npm install -g bats\n\n# To install into your project and save it as one of the \"devDependencies\" in\n# your package.json:\n$ npm install --save-dev bats\n```\n\n----------------------------------------\n\nTITLE: Using a custom formatter with Bats\nDESCRIPTION: Example of specifying an absolute path to a custom formatter executable when running Bats tests.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/usage.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bats --formatter /absolute/path/to/my-formatter addition.bats\naddition using bc WORKED\naddition using dc FAILED\n```\n\n----------------------------------------\n\nTITLE: Installing Bats via Homebrew on macOS\nDESCRIPTION: Command to install the Bats testing framework using the Homebrew package manager on macOS.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/installation.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install bats-core\n```\n\n----------------------------------------\n\nTITLE: Displaying Bats Warning Example in Bash\nDESCRIPTION: Example output showing how Bats displays warnings after test completion. The example demonstrates warning BW01 which indicates a command not found error within a run statement.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/warnings/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n BW01.bats\n ✓ Trigger BW01\n\n 1 test, 0 failures\n\n\n The following warnings were encountered during tests:\n BW01: `run`'s command `=0 actually-intended-command with some args` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. `run -127`, to fix this message.\n       (from function `run' in file lib/bats-core/test_functions.bash, line 299,\n        in test file test/fixtures/warnings/BW01.bats, line 3)\n```\n\n----------------------------------------\n\nTITLE: Homebrew Formula Update Commands\nDESCRIPTION: Commands to download the release tarball, generate SHA256 hash, and update the Homebrew formula.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/releasing.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz\n$ openssl sha256 v1.1.0.tar.gz\nSHA256(v1.1.0.tar.gz)=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n\n# Add the --dry-run flag to see the individual steps without executing.\n$ brew bump-formula-pr \\\n  --url=https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz \\\n  --sha256=855d8b8bed466bc505e61123d12885500ef6fcdb317ace1b668087364717ea82\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format Example\nDESCRIPTION: Example showing the conversion of Markdown heading format to plain text for changelog entries.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/releasing.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Added\n```\n\n----------------------------------------\n\nTITLE: Alpine Linux Package Update Commands\nDESCRIPTION: Commands to download the release zip file and generate SHA512 hash for Alpine Linux package update.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/releasing.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -LOv https://github.com/bats-core/bats-core/archive/v1.1.0.zip\n$ openssl sha512 v1.1.0.zip\nSHA512(v1.1.0.zip)=accd83cfec0025a2be40982b3f9a314c2bbf72f5c85daffa9e9419611904a8d34e376919a5d53e378382e0f3794d2bd781046d810225e2a77812474e427bed9e\n```\n\n----------------------------------------\n\nTITLE: Python Documentation Dependencies\nDESCRIPTION: Lists required Python packages for documentation generation: sphinxcontrib-programoutput for executing commands and capturing output in documentation, and recommonmark for processing Markdown files in Sphinx.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinxcontrib-programoutput\nrecommonmark\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Tags\nDESCRIPTION: Command to push the new version commit and tags to GitHub.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/releasing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Plain Text Changelog Format\nDESCRIPTION: The plain text format that should be used in the release changelog.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/releasing.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAdded:\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Bats Release\nDESCRIPTION: Command to create a signed and annotated git tag for the new Bats version.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/releasing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag -a -s <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Demonstration of locale-dependent signal handling issue\nDESCRIPTION: Example showing how lowercase signal names can cause errors in certain locales like Turkish. This demonstrates why uppercase signal names should always be used.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"tr_TR.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen tr_TR.UTF-8 # Ubuntu derivatives\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - int && echo success'\nbash: line 0: trap: int: invalid signal specification\n$ LC_CTYPE=tr_TR.UTF-8 LC_MESSAGES=C bash -c 'trap - INT && echo success'\nsuccess\n```\n\n----------------------------------------\n\nTITLE: Setting temporary directory variables in Bash\nDESCRIPTION: Sets BATS_TEST_TMPDIR, BATS_FILE_TMPDIR, and BATS_SUITE_TMPDIR variables for temporary directories.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nBATS_TEST_TMPDIR, BATS_FILE_TMPDIR, BATS_SUITE_TMPDIR\n```\n\n----------------------------------------\n\nTITLE: Reference to unofficial Bash strict mode in bats-core\nDESCRIPTION: A link to the unofficial Bash strict mode documentation that is referenced in the changelog as being supported in version 1.0.0. This mode helps write more robust Bash scripts.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[unofficial strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)\n```\n\n----------------------------------------\n\nTITLE: Suppressing BATS Warning BW03\nDESCRIPTION: Code snippet showing how to suppress the BW03 warning when setup_suite function is intentionally defined in a test file rather than setup_suite.bash\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/warnings/BW03.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBATS_SETUP_SUITE_COMPLETED='suppress BW03'\n```\n\n----------------------------------------\n\nTITLE: Closing File Descriptors in Background Tasks\nDESCRIPTION: Reference to a function that closes non-standard file descriptors in background tasks to prevent them from keeping the pipe to the formatter open.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/gotchas.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nclose_non_std_fds\n```\n\n----------------------------------------\n\nTITLE: Bats-Core Contribution Checklist in Markdown\nDESCRIPTION: Markdown checklist format ensuring contributors have reviewed project guidelines and code of conduct, with links to relevant documentation.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/PULL_REQUEST_TEMPLATE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] I have reviewed the [Contributor Guidelines][contributor].\n- [ ] I have reviewed the [Code of Conduct][coc] and agree to abide by it\n\n[contributor]: https://github.com/bats-core/bats-core/blob/master/docs/CONTRIBUTING.md\n[coc]:         https://github.com/bats-core/bats-core/blob/master/docs/CODE_OF_CONDUCT.md\n```\n\n----------------------------------------\n\nTITLE: Rendering Responsive Logo with Dark/Light Mode Support\nDESCRIPTION: HTML markup for displaying the Bats logo that responds to system color scheme preferences using the picture element with dark and light mode variants.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/assets/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"dark_mode_cube.svg\">\n  <img alt=\"\" src=\"light_mode_cube.svg\">\n</picture>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Management Script in Bash\nDESCRIPTION: A bash script case statement that handles starting an echo server with ncat, storing the process ID for later management. The script binds to port 2000 and echoes back any input it receives.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncase $1 in\n    start-echo-server)\n        echo \"Starting echo server\"\n        PORT=2000\n        ncat -l $PORT -k -c 'xargs -n1 echo' 2>/dev/null & # don't keep open this script's stderr\n        echo $! > /tmp/project-echo-server.pid\n        echo \"$PORT\" >&2\n    ;;\n    *)\n        echo \"NOT IMPLEMENTED!\" >&2\n        exit 1\n    ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Using file_tags and test_tags in Bats\nDESCRIPTION: Example showing how to use both file_tags and test_tags directives to apply tags to multiple tests in a file or to specific tests. Demonstrates tag inheritance and overriding.\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/writing-tests.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n@test \"Zeroth test\" { \n  # will have no tags\n}\n\n# bats file_tags=a:b\n# bats test_tags=c:d\n\n@test \"First test\" { \n  # will be tagged a:b, c:d\n}\n\n# bats file_tags=\n\n@test \"Second test\" {\n  # will have no tags\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Project Script\nDESCRIPTION: Basic bash script template with shebang\nSOURCE: https://github.com/bats-core/bats-core/blob/master/docs/source/tutorial.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n```"
  }
]