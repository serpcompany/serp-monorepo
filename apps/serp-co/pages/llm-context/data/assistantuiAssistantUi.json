[
  {
    "owner": "assistant-ui",
    "repo": "assistant-ui",
    "content": "TITLE: Installing assistant-ui with CLI commands\nDESCRIPTION: Commands to initialize assistant-ui in either a new project or an existing React.js project using the CLI tool.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui@latest create # new project\nnpx assistant-ui@latest init # existing project\n```\n\n----------------------------------------\n\nTITLE: Using useAssistantInstructions Hook in React\nDESCRIPTION: Demonstrates how to import and use the useAssistantInstructions hook in a React component. Shows both simple string usage and configuration object usage.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/use-assistant-instructions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantInstructions } from \"@assistant-ui/react\";\n\nfunction MyComponent() {\n  // Simple string usage\n  useAssistantInstructions(\"You are a helpful form assistant...\");\n\n  // With configuration object\n  useAssistantInstructions({\n    instruction: \"You are a helpful form assistant...\",\n    disabled: false, // Optional: disable the instructions\n  });\n\n  return <div>My Component</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fireworks provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Fireworks in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread and ThreadList Components in React\nDESCRIPTION: This snippet shows how to set up a React component using AssistantRuntimeProvider, ThreadList, and Thread components. It uses the useChatRuntime hook to initialize the runtime with an API endpoint.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\nimport { ThreadList } from \"@/components/assistant-ui/thread-list\";\nimport { Thread } from \"@/components/assistant-ui/thread\";\n\nconst MyApp = () => {\n  const runtime = useChatRuntime({\n    api: \"/api/chat\",\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      <div className=\"grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4\">\n        <ThreadList />\n        <Thread />\n      </div>\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread State in React\nDESCRIPTION: Shows how to use the useThread hook to access thread state directly and extract specific state values using selectors.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThread } from \"@assistant-ui/react\";\n\nconst thread = useThread();\nconst isRunning = useThread((m) => m.isRunning);\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend Client-Side Chat Component with Web Search Tool UI\nDESCRIPTION: This code snippet demonstrates how to create a client-side chat component with a custom Web Search Tool UI using assistant-ui and Vercel AI SDK. It includes the implementation of a WebSearchToolUI component and its integration with the AssistantRuntimeProvider.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport {\n  AssistantCloud,\n  AssistantRuntimeProvider,\n  makeAssistantToolUI,\n  Thread,\n} from \"@assistant-ui/react\";\nimport { GlobeIcon } from \"@radix-ui/react-icons\";\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\n \ntype WebSearchArgs = {\n  query: string;\n};\n \ntype WebSearchResult = {\n  searchResults: {\n    title: string;\n    description: string;\n    url: string;\n  }[];\n};\n\n\nconst WebSearchToolUI = makeAssistantToolUI<WebSearchArgs, WebSearchResult>({\n  toolName: \"web_search\",\n  render: ({ args, status, result }) => {\n    return (\n      <div className=\"rounded-md border bg-muted p-4 space-y-3\">\n        <div className=\"flex items-center gap-2 text-sm font-medium\">\n          <GlobeIcon className=\"h-4 w-4\" />\n          <span>\n            Searching the web for:{\" \"}\n            <span className=\"font-semibold text-blue-600\">{args.query}</span>\n          </span>\n        </div>\n        <div className=\"space-y-2 pl-6\">\n          {result?.searchResults.map((item, index) => (\n            <div key={index} className=\"text-sm\">\n              <a\n                href={item.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-700 hover:underline font-medium\"\n              >\n                {item.title}\n              </a>\n              <p className=\"text-muted-foreground text-xs mt-0.5\">\n                {item.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  },\n});\n\nconst runtime = useChatRuntime({\n  api: \"/api/chat\",\n});\n \n return (\n  <AssistantRuntimeProvider runtime={runtime}>\n    <Thread />\n    <WebSearchToolUI />\n  </AssistantRuntimeProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ContentPart Hook in React TypeScript\nDESCRIPTION: Demonstrates different ways to access content part state using the useContentPart hook. Shows both direct hook usage and state access methods, including selective state selection through selectors.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ContentPartRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContentPart } from \"@assistant-ui/react\";\n\nconst part = useContentPart();\nconst partState = useContentPart.getState();\n\nconst status = useContentPart((m) => m.status);\nconst statusAgain = useContentPart.getState().status;\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Bedrock chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses AWS Bedrock with Claude 3.5 Sonnet model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bedrock } from \"@ai-sdk/amazon-bedrock\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: bedrock(\"anthropic.claude-3-5-sonnet-20240620-v1:0\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Context Providers in TypeScript/React\nDESCRIPTION: Code showing the main runtime context provider components used to access different levels of runtime functionality, including AssistantRuntime, ThreadPrimitive, MessagePrimitive and ComposerPrimitive implementations.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/concepts/runtime-layer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// provides AssistantRuntime, ThreadListRuntime, ThreadRuntime, ComposerRuntime (ThreadComposer)\n<AssistantRuntimeProvider runtime={runtime} />\n\n// renders every message, provides MessageRuntime, ComposerRuntime (EditComposer)\n<ThreadPrimitive.Messages components={{ Message, ... }} />\n\n// renders every content part, provides ContentPartRuntime\n<MessagePrimitive.Content components={{ Text, Reasoning, Image, Audio, UI, tools }} />\n\n// renders every attachment, provides AttachmentRuntime (Thread or EditComposer)\n<ComposerPrimitive.Attachments components={{ Attachment, ... }} />\n\n// renders every attachment, provides AtatchmentRuntime (Message)\n<MessagePrimitive.Attachments components={{ Attachment, ... }} />\n\n// provides a custom TextContentPartRuntime\n<TextContentPartProvider text=\"Hello!\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Picker Tool UI with User Input\nDESCRIPTION: This code snippet shows how to create a Tool UI that allows user input, specifically a date picker. It demonstrates handling user interaction and updating the result based on the selected date.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\nimport { DatePicker } from \"@/components/datepicker\";\n\nconst DatePickerToolUI = makeAssistantToolUI<{}, { date: string }>({\n  toolName: \"date_picker\",\n  render: ({ result, status, addResult }) => {\n    if (result) {\n      return <p>You picked {result.date}</p>;\n    }\n\n    const handleSubmit = (date: Date) => {\n      addResult({ date: date.toISOString() });\n    };\n\n    return <DatePicker onSubmit={handleSubmit} />;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ExternalStoreRuntime Provider in TypeScript/React\nDESCRIPTION: Demonstrates how to create a custom runtime provider that manages message state externally. Shows implementation of message conversion, state management, and handling new messages with a backend API.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/external-store.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MyMessage = {\n  role: \"user\" | \"assistant\";\n  content: string;\n};\nconst backendApi = async (input: string): Promise<MyMessage> => {\n  return { role: \"assistant\", content: \"Hello, world!\" };\n};\n\nimport { useState, ReactNode } from \"react\";\nimport {\n  useExternalStoreRuntime,\n  ThreadMessageLike,\n  AppendMessage,\n  AssistantRuntimeProvider,\n} from \"@assistant-ui/react\";\n\nconst convertMessage = (message: MyMessage): ThreadMessageLike => {\n  return {\n    role: message.role,\n    content: [{ type: \"text\", text: message.content }],\n  };\n};\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [messages, setMessages] = useState<MyMessage[]>([]);\n\n  const onNew = async (message: AppendMessage) => {\n    if (message.content[0]?.type !== \"text\")\n      throw new Error(\"Only text messages are supported\");\n\n    const input = message.content[0].text;\n    setMessages((currentConversation) => [\n      ...currentConversation,\n      { role: \"user\", content: input },\n    ]);\n\n    setIsRunning(true);\n    const assistantMessage = await backendApi(input);\n    setMessages((currentConversation) => [\n      ...currentConversation,\n      assistantMessage,\n    ]);\n    setIsRunning(false);\n  };\n\n  const runtime = useExternalStoreRuntime({\n    isRunning,\n    messages,\n    convertMessage,\n    onNew,\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Azure OpenAI service with custom deployment to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { azure } from \"@ai-sdk/azure\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: azure(\"your-deployment-name\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Vertex AI chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Google Vertex AI's Gemini 1.5 Pro model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vertex } from \"@ai-sdk/google-vertex\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: vertex(\"gemini-1.5-pro\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssistantModal Component in React\nDESCRIPTION: This snippet demonstrates how to use the AssistantModal component in a React application. It includes a comment about running a specific command to add the AssistantModal component. The useChatRuntime hook is used to initialize the runtime with an API endpoint.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n// run `npx shadcn@latest add \"https://r.assistant-ui.com/assistant-modal\"`\n\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\nimport { AssistantModal } from \"@/components/assistant-ui/assistant-modal\";\n\nconst MyApp = () => {\n  const runtime = useChatRuntime({\n    api: \"/api/chat\",\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      <AssistantModal />\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Provider System in React Components\nDESCRIPTION: Demonstrates how to use the context provider system to contribute to the model context. Shows how to define tools, register model context providers, and manage lifecycle with useEffect for proper cleanup.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/model-context.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantRuntime, tool } from \"@assistant-ui/react\";\nimport { useEffect } from \"react\";\nimport { z } from \"zod\";\n\nfunction MyComponent() {\n  const assistantRuntime = useAssistantRuntime();\n\n  // Define tool using the tool() helper\n  const myTool = tool({\n    parameters: z.object({\n      query: z.string(),\n    }),\n    execute: async ({ query }) => {\n      const result = await searchDatabase(query);\n      return { result };\n    },\n  });\n\n  useEffect(() => {\n    // Register context provider\n    return assistantRuntime.registerModelContextProvider({\n      getModelContext: () => ({\n        system: \"You are a helpful search assistant...\",\n        tools: { myTool },\n      }),\n    });\n  }, [assistantRuntime]); // Re-register if runtime changes\n\n  return <div>{/* component content */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Assistant Tools Implementation in React\nDESCRIPTION: Shows how to create and compose multiple assistant tools (email validation and sending) in a single component using makeAssistantTool.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/make-assistant-tool.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantTool, tool } from \"@assistant-ui/react\";\nimport { z } from \"zod\";\n\n// Define tools\nconst validateEmail = tool({\n  parameters: z.object({\n    email: z.string(),\n  }),\n  execute: ({ email }) => {\n    const isValid = email.includes(\"@\");\n    return { isValid, reason: isValid ? \"Valid email\" : \"Missing @\" };\n  },\n});\n\nconst sendEmail = tool({\n  parameters: z.object({\n    to: z.string().email(),\n    subject: z.string(),\n    body: z.string(),\n  }),\n  execute: async (params) => {\n    // Implementation\n    return { sent: true };\n  },\n});\n\n// Create tool components\nconst EmailValidator = makeAssistantTool(validateEmail);\nconst EmailSender = makeAssistantTool(sendEmail);\n\n// Use together\nfunction EmailForm() {\n  return (\n    <div>\n      <form>{/* form fields */}</form>\n      <EmailValidator />\n      <EmailSender />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime APIs with React Hooks\nDESCRIPTION: Example code demonstrating how to access different runtime APIs using React hooks, including assistant, thread, message, and content part runtimes.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/concepts/runtime-layer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst runtime = useAssistantRuntime();\nconst threadRuntime = useThreadRuntime();\nconst messageRuntime = useMessageRuntime();\nconst contentPartRuntime = useContentPartRuntime();\n\n// thread manager has no separate hook (1:1 relationship with assistant runtime)\nconst ThreadListRuntime = useAssistantRuntime().threads;\n\n// composer runtime is multi-use\nconst composerRuntime = useComposerRuntime(); // refers to edit composer if available, otherwise thread composer\n\n// thread manager has no separate hook (1:1 relationship with assistant runtime)\nconst threadComposer = useThreadRuntime().composer;\n\n// thread manager has no separate hook (1:1 relationship with assistant runtime)\nconst editComposerRuntime = useMessageRuntime().composer;\n\n// attachment runtime is multi-use\nconst attachmentRuntime = useAttachmentRuntime(); // refers to the closest attachment runtime\nconst threadComposerAttachmentRuntime = useThreadComposerAttachmentRuntime();\nconst editComposerAttachmentRuntime = useEditComposerAttachmentRuntime();\nconst messageAttachmentRuntime = useMessageAttachmentRuntime();\n```\n\n----------------------------------------\n\nTITLE: Defining MyRuntimeProvider Component in React\nDESCRIPTION: Creates a custom RuntimeProvider component using LocalRuntime and a custom ChatModelAdapter. This component integrates with a custom API for chat functionality.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/local.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport type { ReactNode } from \"react\";\nimport {\n  AssistantRuntimeProvider,\n  useLocalRuntime,\n  type ChatModelAdapter,\n} from \"@assistant-ui/react\";\n\nconst MyModelAdapter: ChatModelAdapter = {\n  async run({ messages, abortSignal }) {\n    // TODO replace with your own API\n    const result = await fetch(\"<YOUR_API_ENDPOINT>\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      // forward the messages in the chat to the API\n      body: JSON.stringify({\n        messages,\n      }),\n      // if the user hits the \"cancel\" button or escape keyboard key, cancel the request\n      signal: abortSignal,\n    });\n\n    const data = await result.json();\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: data.text,\n        },\n      ],\n    };\n  },\n};\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  const runtime = useLocalRuntime(MyModelAdapter);\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Thread Component Structure\nDESCRIPTION: Demonstrates the basic structure and composition of a Thread component using ThreadPrimitive subcomponents including Root, Viewport, Empty, and Messages components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Thread.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreadPrimitive } from \"@assistant-ui/react\";\n\nconst Thread = () => (\n  <ThreadPrimitive.Root>\n    <ThreadPrimitive.Viewport>\n      <ThreadPrimitive.Empty>...</ThreadPrimitive.Empty>\n      <ThreadPrimitive.Messages components={...} />\n    </ThreadPrimitive.Viewport>\n    <Composer />\n  </ThreadPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout with Provider\nDESCRIPTION: Root layout configuration showing how to wrap the application with the runtime provider.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyRuntimeProvider } from '@/app/MyRuntimeProvider';\n\n...\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <MyRuntimeProvider>\n      <html lang=\"en\">\n        <body className={inter.className}>\n          {children}\n        </body>\n      </html>\n    </MyRuntimeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for assistant-ui\nDESCRIPTION: Command to install all required dependencies for the assistant-ui project using PNPM package manager.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Converting from useForm to useAssistantForm in React Hook Form\nDESCRIPTION: Demonstrates how to replace the standard useForm hook from react-hook-form with the useAssistantForm hook from @assistant-ui/react-hook-form. The diff shows the minimal changes required to implement this integration.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/integrations/react-hook-form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { useForm } from \"react-hook-form\";\n+ import { useAssistantForm } from \"@assistant-ui/react-hook-form\";\n\n- useForm({\n+ useAssistantForm({\n    ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tool UI Components with makeAssistantToolUI\nDESCRIPTION: Demonstrates how to create a custom tool UI component using the makeAssistantToolUI utility, specifically for a weather tool that displays arguments and results.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyWeatherToolUI = makeAssistantToolUI({\n  toolName: \"get_weather\",\n  render: function MyWeatherToolUI({ args, result }) {\n    return (\n      <div className=\"mb-4 flex flex-col items-center\">\n        <pre className=\"whitespace-pre-wrap break-all text-center\">\n          get_weather({JSON.stringify(args)})\n        </pre>\n        {\"result\" in result && (\n          <pre className=\"whitespace-pre-wrap break-all text-center\">\n            {JSON.stringify(result.result)}\n          </pre>\n        )}\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Provider Component\nDESCRIPTION: Client-side runtime provider component implementation using useChatRuntime hook.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useChat } from \"ai/react\";\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const runtime = useChatRuntime({\n    api: \"/api/chat\",\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Component Basic Structure\nDESCRIPTION: Demonstrates the basic anatomy of the Thread component with its essential sub-components including Root, Viewport, Empty, Messages and Composer.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/primitives/Thread.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreadPrimitive } from \"@assistant-ui/react\";\n\nconst Thread = () => (\n  <ThreadPrimitive.Root>\n    <ThreadPrimitive.Viewport>\n      <ThreadPrimitive.Empty>...</ThreadPrimitive.Empty>\n      <ThreadPrimitive.Messages components={...} />\n    </ThreadPrimitive.Viewport>\n    <Composer />\n  </ThreadPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Assistant Tool in React\nDESCRIPTION: Demonstrates how to create a basic form submission tool using makeAssistantTool. Shows parameter definition with Zod schema and tool implementation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/make-assistant-tool.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantTool, tool } from \"@assistant-ui/react\";\nimport { z } from \"zod\";\n\n// Define the tool using the tool() helper\nconst submitForm = tool({\n  parameters: z.object({\n    email: z.string().email(),\n    name: z.string(),\n  }),\n  execute: async ({ email, name }) => {\n    // Implementation\n    return { success: true };\n  },\n});\n\n// Create a tool component\nconst SubmitFormTool = makeAssistantTool(submitForm);\n\n// Use in your component\nfunction Form() {\n  return (\n    <div>\n      <form>{/* form fields */}</form>\n      <SubmitFormTool />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Create Assistant UI via NPM\nDESCRIPTION: Command to create a new assistant UI project using the NPM create command. This is the main entry point for using the create-assistant-ui tool.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/create-assistant-ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create assistant-ui\n```\n\n----------------------------------------\n\nTITLE: Implementing System Instructions in React Components\nDESCRIPTION: Demonstrates how to provide system instructions to an assistant using useAssistantInstructions and makeAssistantVisible methods. The latter automatically provides component HTML as system context.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/model-context.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useAssistantInstructions,\n  makeAssistantVisible,\n} from \"@assistant-ui/react\";\n\n// Via useAssistantInstructions\nuseAssistantInstructions(\"You are a helpful assistant...\");\n\n// Via makeAssistantVisible\nconst ReadableComponent = makeAssistantVisible(MyComponent);\n// Automatically provides component HTML as system context\n```\n\n----------------------------------------\n\nTITLE: Implementing PriceSnapshot Visualization Component\nDESCRIPTION: React component for visualizing stock price information with styling and dynamic icons.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { ArrowDownIcon, ArrowUpIcon } from \"lucide-react\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport function PriceSnapshot({\n  ticker,\n  price,\n  day_change,\n  day_change_percent,\n  time,\n}: PriceSnapshotToolArgs & PriceSnapshotToolResult) {\n  const isPositiveChange = day_change >= 0;\n  const changeColor = isPositiveChange ? \"text-green-600\" : \"text-red-600\";\n  const ArrowIcon = isPositiveChange ? ArrowUpIcon : ArrowDownIcon;\n\n  return (\n    <Card className=\"mx-auto w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold\">{ticker}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"col-span-2\">\n            <p className=\"text-3xl font-semibold\">${price?.toFixed(2)}</p>\n          </div>\n          <div>\n            <p className=\"text-muted-foreground text-sm\">Day Change</p>\n            <p\n              className={`flex items-center text-lg font-medium ${changeColor}`}\n            >\n              <ArrowIcon className=\"mr-1 h-4 w-4\" />$\n              {Math.abs(day_change)?.toFixed(2)} (\n              {Math.abs(day_change_percent)?.toFixed(2)}%)\n            </p>\n          </div>\n          <div>\n            <p className=\"text-muted-foreground text-sm\">Last Updated</p>\n            <p className=\"text-lg font-medium\">\n              {new Date(time).toLocaleTimeString()}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring MessagePrimitive.Content with Custom Components\nDESCRIPTION: Shows how to customize the MessagePrimitive.Content component by providing custom components for different types of content parts including text, reasoning, audio, and tool UIs.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessagePrimitive } from \"@assistant/react\";\n\n<MessagePrimitive.Content\n  components={{\n    Text: MyText,\n    Reasoning: MyReasoning,\n    Audio: MyAudio,\n    tools: {\n      by_name: {\n        get_weather: MyWeatherToolUI,\n      },\n      Fallback: MyFallbackToolUI,\n    },\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat API Route\nDESCRIPTION: Backend route setup for handling chat requests using OpenAI and stream handling.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n\n  const result = streamText({\n    model: openai(\"gpt-4o\"),\n    messages: convertToCoreMessages(messages),\n  });\n\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssistantRuntimeProvider in a React Application\nDESCRIPTION: This code snippet demonstrates how to use the AssistantRuntimeProvider component to wrap a React application. It shows the import statement, creation of a runtime using useChatRuntime, and the proper placement of the provider in the component tree.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/context-providers/AssistantRuntimeProvider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\n\nconst MyApp = () => {\n  const runtime = useChatRuntime({ api: \"/api/chat\" });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {/* your app */}\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ComposerPrimitive for New and Edit Messages in React\nDESCRIPTION: This snippet demonstrates how to use ComposerPrimitive to create composers for both new messages and editing existing messages. It shows the structure and subcomponents used in each case.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Composer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComposerPrimitive } from \"@assistant-ui/react\";\n\n// creating a new message\nconst Composer = () => (\n  <ComposerPrimitive.Root>\n    <ComposerPrimitive.Attachments />\n    <ComposerPrimitive.AddAttachment />\n    <ComposerPrimitive.Input />\n    <ComposerPrimitive.Send />\n  </ComposerPrimitive.Root>\n);\n\n// editing an existing message\nconst EditComposer = () => (\n  <ComposerPrimitive.Root>\n    <ComposerPrimitive.Input />\n    <ComposerPrimitive.Send />\n    <ComposerPrimitive.Cancel />\n  </ComposerPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AssistantCloud with React and AI SDK\nDESCRIPTION: Creates an AssistantCloud instance, sets up the chat runtime, and renders the ThreadList and Thread components within an AssistantRuntimeProvider. This code integrates assistant-cloud with the AI SDK for managing chat threads and history.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/persistence/ai-sdk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\nimport {\n  AssistantCloud,\n  AssistantRuntimeProvider,\n  ThreadList,\n  Thread\n} from \"@assistant-ui/react\";\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\n\n\nconst cloud = new AssistantCloud({\n  baseUrl: process.env[\"NEXT_PUBLIC_ASSISTANT_BASE_URL\"]!,\n  anonymous: true,\n});\n\n\nconst runtime = useChatRuntime({\n  api: \"/api/chat\",\n  cloud,\n});\n\n return (\n  <AssistantRuntimeProvider runtime={runtime}>\n    <div className=\"grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4\">\n      <ThreadList />\n      <Thread />\n    </div>\n  </AssistantRuntimeProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Utilities with useMessageUtils Hook in TSX\nDESCRIPTION: Shows how to utilize the useMessageUtils hook to access utility functions for messages, such as copy status. Demonstrates both direct hook usage and selector pattern.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/MessageRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageUtils } from \"@assistant-ui/react\";\n\nconst messageUtils = useMessageUtils();\nconst isCopied = useMessageUtils((m) => m.isCopied);\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Editing with ComposerPrimitive in React\nDESCRIPTION: This code demonstrates how to implement message editing functionality using ComposerPrimitive components. It shows the setup of a Thread component with edit support, a UserMessage component with an edit button, and an EditComposer component that provides the editing interface.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Editing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ComposerPrimitive } from \"@assistant-ui/react\";\n...\n\nconst Thread = () => {\n  return (\n    <ThreadPrimitive.Root>\n      <ThreadPrimitive.Viewport>\n        ...\n        <ThreadPrimitive.Messages components={{\n          ...,\n          EditComposer, // <-- Show our new component during edit mode\n        }} />\n      </ThreadPrimitive.Viewport>\n      ...\n    </ThreadPrimitive.Root>\n  );\n};\n\nconst UserMessage = () => {\n  return (\n    <MessagePrimitive.Root>\n      ...\n      <ActionBarPrimitive.Root>\n        ...\n        <ActionBarPrimitive.Edit /> {/* <-- add a button to enable edit mode */}\n      </ActionBarPrimitive.Root>\n    </MessagePrimitive.Root>\n  );\n};\n\n// define a new component\nconst EditComposer = () => {\n  return (\n    // you can return a MessagePrimitive including a ComposerPrimitive, or only a ComposerPrimitive\n    <MessagePrimitive.Root>\n      ...\n      <ComposerPrimitive.Root>\n        <ComposerPrimitive.Input />\n        <ComposerPrimitive.Cancel />\n        <ComposerPrimitive.Send />\n      </ComposerPrimitive.Root>\n    </MessagePrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MyRuntimeProvider Component\nDESCRIPTION: This React component defines a runtime provider for the Assistant UI, integrating the useAssistant hook from the Vercel AI SDK.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useAssistant } from \"ai/react\";\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useVercelUseAssistantRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const assistant = useAssistant({\n    api: \"/api/assistant\",\n  });\n\n  const runtime = useVercelUseAssistantRuntime(assistant);\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Assistant Runtime with Vercel AI SDK\nDESCRIPTION: Example showing how to convert Vercel AI SDK assistant helpers into an AssistantRuntime using useVercelUseAssistantRuntime hook.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/integrations/vercel-ai-sdk.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVercelUseAssistantRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nconst MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {\n  const assistant = useAssistant();\n  const runtime = useVercelUseAssistantRuntime(assistant);\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Purchase Stock Tool UI Component\nDESCRIPTION: React component implementation for the stock purchase tool UI using makeAssistantToolUI, handling approval confirmation and rejection actions.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { TransactionConfirmationPending } from \"./transaction-confirmation-pending\";\nimport { TransactionConfirmationFinal } from \"./transaction-confirmation-final\";\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\nimport { updateState } from \"@/lib/chatApi\";\n\nexport const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>({\n  toolName: \"purchase_stock\",\n  render: function PurchaseStockUI({ args, result, status, addResult }) {\n    const handleReject = async () => {\n      addResult({ approve: false });\n    };\n\n    const handleConfirm = async () => {\n      addResult({ approve: true });\n    };\n\n    return (\n      <div className=\"mb-4 flex flex-col items-center gap-2\">\n        <div>\n          <pre className=\"whitespace-pre-wrap break-all text-center\">\n            purchase_stock({JSON.stringify(args)})\n          </pre>\n        </div>\n        {!result && status.type !== \"running\" && (\n          <TransactionConfirmationPending\n            {...args}\n            onConfirm={handleConfirm}\n            onReject={handleReject}\n          />\n        )}\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MessagePrimitive for User and Assistant Messages in React\nDESCRIPTION: This snippet demonstrates how to use the MessagePrimitive component to create user and assistant messages in a conversation interface. It shows the basic structure and subcomponents used in both message types.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Message.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessagePrimitive } from \"@assistant-ui/react\";\n\nconst UserMessage = () => (\n  <MessagePrimitive.Root>\n    User: <MessagePrimitive.Content />\n    <BranchPicker />\n    <ActionBar />\n  </MessagePrimitive.Root>\n);\n\nconst AssistantMessage = () => (\n  <MessagePrimitive.Root>\n    Assistant: <MessagePrimitive.Content />\n    <BranchPicker />\n    <ActionBar />\n  </MessagePrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tools with makeAssistantTool\nDESCRIPTION: Shows how to create transaction-specific tools for the assistant using makeAssistantTool. This example creates an analysis tool that examines transaction details and returns information about suspiciousness, merchant ratings, and refund eligibility.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/motivation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantTool, tool } from \"@assistant-ui/react\";\nimport { z } from \"zod\";\n\n// Define a tool to analyze transactions\nconst analyzeTransaction = tool({\n  parameters: z.object({\n    transactionId: z.string(),\n    merchantName: z.string(),\n  }),\n  execute: async ({ transactionId, merchantName }) => {\n    // Analyze transaction patterns, merchant reputation, etc.\n    return {\n      isSuspicious: false,\n      merchantRating: 4.5,\n      similarTransactions: 3,\n      refundEligible: true,\n    };\n  },\n});\n\n// Create a tool component\nconst TransactionAnalyzer = makeAssistantTool(analyzeTransaction);\n\nfunction SmartTransactionHistory() {\n  // Previous instructions...\n  return (\n    <>\n      <TransactionHistory transactions={transactions} />\n      <TransactionAnalyzer />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useAssistantInstructions in a Smart Form Component\nDESCRIPTION: Shows an example of using useAssistantInstructions in a SmartForm component. The hook is used to set detailed instructions for a form assistant, including validation, suggestions, error explanations, and user guidance.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/use-assistant-instructions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SmartForm() {\n  useAssistantInstructions({\n    instruction: `\n      You are a form assistant that:\n      - Validates user input\n      - Provides helpful suggestions\n      - Explains any errors\n      - Guides users through complex fields\n    `,\n  });\n\n  return <form>{/* Your form fields here */}</form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MyRuntimeProvider Component\nDESCRIPTION: React component that sets up the AssistantRuntimeProvider with Vercel's useChat hook integration.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useChat } from \"ai/react\";\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useVercelUseChatRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const chat = useChat({\n    api: \"/api/chat\",\n  });\n\n  const runtime = useVercelUseChatRuntime(chat);\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend API Route for Web Search Tool\nDESCRIPTION: This code snippet shows the implementation of a backend API route for the Web Search Tool using Vercel AI SDK. It defines the tool parameters, execution logic, and returns mock search results.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { anthropic } from \"@ai-sdk/anthropic\";\nimport { streamText, tool } from \"ai\";\nimport { z } from \"zod\";\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: anthropic(\"claude-3-5-sonnet-20240620\"),\n    messages,\n    tools: {\n      web_search: tool({\n        description: 'Search the web',\n        parameters: z.object({\n          query: z.string().describe('The query to search the web for'),\n        }),\n        execute: async ({ query }) => {\n          // run your logic here to search the web using a serp api...\n          return {\n            query,\n            searchResults: [\n              {\n                title: \"Example Site1\",\n                description: \"This is an example site!\",\n                url: \"https://www.example.com\",\n              },\n              {\n                title: \"Example Site2\",\n                description: \"This is another example site!\",\n                url: \"https://www.example.com\",\n              },\n              \n            ],\n          };\n        },\n      }),\n    },\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tools for Assistant Interaction in React\nDESCRIPTION: Shows different approaches to create tools that allow the assistant to interact with the application. Includes examples of clickable components, form submission tools using Zod for parameter validation, and implementation in a form component.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/model-context.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  makeAssistantVisible,\n  makeAssistantTool,\n  tool,\n  useAssistantRuntime,\n} from \"@assistant-ui/react\";\nimport { z } from \"zod\";\n\n// Via makeAssistantVisible's clickable option\nconst ClickableButton = makeAssistantVisible(Button, {\n  clickable: true, // Provides a click tool\n});\n\n// Via makeAssistantTool\nconst submitForm = tool({\n  parameters: z.object({\n    email: z.string().email(),\n    name: z.string(),\n  }),\n  execute: async ({ email, name }) => {\n    // Implementation\n    return { success: true };\n  },\n});\n\nconst SubmitFormTool = makeAssistantTool(submitForm);\n\n// Use in your component\nfunction Form() {\n  return (\n    <div>\n      <form>{/* form fields */}</form>\n      <SubmitFormTool />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tool UI Registry Hooks in React\nDESCRIPTION: Shows how to use the useToolUIs hook to access the tool UI registry and retrieve specific tool UIs, such as the web search tool UI.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/AssistantRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToolUIs } from \"@assistant-ui/react\";\n\nconst toolUIs = useToolUIs();\nconst webSearchToolUI = useToolUIs((m) => m.getToolUI(\"web_search\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing AssistantCloud with Auth Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize AssistantCloud with a function that returns an ID token from an auth provider. This is used for direct integration with auth providers.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/authorization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssistantCloud } from \"@assistant-ui/react\";\n\nconst assistantCloud = new AssistantCloud({\n  authToken: () => JWT_TOKEN\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tool UI Component for Web Search\nDESCRIPTION: This code snippet demonstrates how to create a simple Tool UI component for a web search tool using assistant-ui. It defines the types for arguments and results, and implements a basic render function.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\n\ntype WebSearchArgs = {\n  query: string;\n};\n\ntype WebSearchResult = {\n  title: string;\n  description: string;\n  url: string;\n};\n\nexport const WebSearchToolUI = makeAssistantToolUI<\n  WebSearchArgs,\n  WebSearchResult\n>({\n  toolName: \"web_search\",\n  render: ({ args, status }) => {\n    return <p>web_search({args.query})</p>;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Workflow for Stock Purchase Approval\nDESCRIPTION: Sets up a LangGraph workflow that handles stock purchase approval logic, including state management and conditional edge routing based on user approval.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst purchaseApproval = async (state: typeof GraphAnnotation.State) => {\n  const { messages } = state;\n  const lastMessage = messages[messages.length - 1];\n  if (!(lastMessage instanceof ToolMessage)) {\n    throw new NodeInterrupt(\"Please confirm the purchase before executing.\");\n  }\n};\n\nconst shouldExecutePurchase = (state: typeof GraphAnnotation.State) => {\n  const { messages } = state;\n  const lastMessage = messages[messages.length - 1];\n  if (!(lastMessage instanceof ToolMessage)) {\n    throw new NodeInterrupt(\"Please confirm the purchase before executing.\");\n  }\n\n  const { approve } = JSON.parse(lastMessage.content as string);\n  return approve ? \"execute_purchase\" : \"agent\";\n};\n\nconst workflow = new StateGraph(GraphAnnotation)\n  .addNode(\"agent\", callModel)\n  .addEdge(START, \"agent\")\n  .addNode(\"tools\", toolNode)\n  .addNode(\"prepare_purchase_details\", preparePurchaseDetails)\n  .addNode(\"purchase_approval\", purchaseApproval)\n  .addNode(\"execute_purchase\", executePurchase)\n  .addEdge(\"prepare_purchase_details\", \"purchase_approval\")\n  .addEdge(\"execute_purchase\", END)\n  .addEdge(\"tools\", \"agent\")\n  .addConditionalEdges(\"purchase_approval\", shouldExecutePurchase, [\n    \"agent\",\n    \"execute_purchase\",\n  ])\n  .addConditionalEdges(\"agent\", shouldContinue, [\n    \"tools\",\n    END,\n    \"prepare_purchase_details\",\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Groq chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Groq's Llama 3 70B model via OpenAI-compatible API to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nconst groq = createOpenAI({\n  apiKey: process.env.GROQ_API_KEY ?? \"\",\n  baseURL: \"https://api.groq.com/openai/v1\",\n});\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: groq(\"llama3-70b-8192\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Assistant Modal in React Component\nDESCRIPTION: Example of how to import and use the AssistantModal component within a React/Next.js page component. The modal should be placed within a container that has a defined height.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/AssistantModal.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantModal } from \"@/components/assistant-ui/assistant-modal\";\n\nexport default function Home() {\n  return (\n    <div className=\"h-full\">\n      <AssistantModal />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Chat Runtime\nDESCRIPTION: React/TypeScript code to configure the Assistant UI frontend to connect to the Mastra server endpoint.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { Thread } from \"@/components/assistant-ui/thread\";\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { ThreadList } from \"@/components/assistant-ui/thread-list\";\n\nexport default function Home() {\n  // Point the runtime to the Mastra server endpoint\n  const runtime = useChatRuntime({\n    api: \"http://localhost:4111/api/agents/chefAgent/stream\",\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      <main className=\"grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4\">\n        <ThreadList />\n        <Thread />\n      </main>\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for assistant-ui\nDESCRIPTION: Sample .env file configuration with OpenAI API key and optional chat history URL configuration.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_API_KEY=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n# chat history -- sign up for free on https://cloud.assistant-ui.com\n# NEXT_PUBLIC_ASSISTANT_BASE_URL=\"https://...\"\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Token API Endpoint in Next.js\nDESCRIPTION: This code creates a Next.js API route to generate an auth token based on an authenticated user's orgId and userId. It uses the AssistantCloud SDK with an API key to create the token.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/authorization.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssistantCloud } from \"@assistant-ui/react\";\nimport { auth } from \"@clerk/nextjs/server\";\n \nexport const POST = async (req: Request) => {\n  const { userId, orgId } = await auth();\n \n  if (!userId) throw new Error(\"User not authenticated\");\n \n  const workspaceId = orgId ? `${orgId}:${userId}` : userId;\n  const assistantCloud = new AssistantCloud({\n    apiKey: process.env[\"ASSISTANT_API_KEY\"]!,\n    userId,\n    workspaceId,\n  });\n  const {token} = await assistantCloud.auth.tokens.create();\n\n  return new Response(token);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Composer Attachments - TypeScript React\nDESCRIPTION: This TypeScript snippet shows how to use the ComposerAttachments and ComposerAddAttachment components in a functional React component. Dependencies include React and the relevant attachment imports.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Attachment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ComposerAttachments,\n  ComposerAddAttachment,\n} from \"@/components/assistant-ui/attachment\";\n\nconst Composer: FC = () => {\n  return (\n    <ComposerPrimitive.Root className=\"..\">\n      <ComposerAttachments />\n      <ComposerAddAttachment />\n\n      <ComposerPrimitive.Input\n        autoFocus\n        placeholder=\"Write a message...\"\n        rows={1}\n        className=\"..\"\n      />\n      <ComposerAction />\n    </ComposerPrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fireworks chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Fireworks.ai FireFunction v2 model via OpenAI-compatible API to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nconst fireworks = createOpenAI({\n  apiKey: process.env.FIREWORKS_API_KEY ?? \"\",\n  baseURL: \"https://api.fireworks.ai/inference/v1\",\n});\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: fireworks(\"accounts/fireworks/models/firefunction-v2\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout with Runtime Provider\nDESCRIPTION: Root layout configuration that wraps the application with the custom runtime provider for global chat functionality.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langserve.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from \"react\";\nimport { MyRuntimeProvider } from \"@/app/MyRuntimeProvider\";\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <MyRuntimeProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </MyRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Calling for User Input\nDESCRIPTION: Shows implementation of a date picker tool that enables AI to collect date input from users through a UI component.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\nimport { DatePicker } from \"@/components/datepicker\";\n\nconst DatePickerToolUI = makeAssistantToolUI<{}, { date: string }>({\n  toolName: \"date_picker\",\n  render: ({ result, status, addResult }) => {\n    if (result) {\n      return <p>You picked {result.date}</p>;\n    }\n\n    const handleSubmit = (date: Date) => {\n      addResult({ date: date.toISOString() });\n    };\n\n    return <DatePicker onSubmit={handleSubmit} />;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Assistant UI Components with asChild Pattern - TSX\nDESCRIPTION: Demonstrates two ways to use the Composer.Send component - with its default button element and with a custom Button component using the asChild prop for composition.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/composition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// use the primitive's <button> element\n<Composer.Send>Send</Composer.Send>;\n\n// use your own <Button> component\n<Composer.Send asChild>\n  <Button>Send</Button>\n</Composer.Send>;\n```\n\n----------------------------------------\n\nTITLE: Configuring CompositeAttachmentAdapter with Runtime Hook\nDESCRIPTION: Initial setup for enabling attachments by configuring the CompositeAttachmentAdapter with image and text attachment support in the runtime hook.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Attachments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\nimport {\n  CompositeAttachmentAdapter,\n  SimpleImageAttachmentAdapter,\n  SimpleTextAttachmentAdapter,\n} from \"@assistant-ui/react\";\n\nconst runtime = useChatRuntime({\n  api: \"/api/chat\",\n  adapters: {\n    attachments: new CompositeAttachmentAdapter([\n      new SimpleImageAttachmentAdapter(),\n      new SimpleTextAttachmentAdapter(),\n    ]),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Assistant Component Implementation\nDESCRIPTION: React component implementation for the LangGraph assistant with thread management\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useRef } from \"react\";\nimport { Thread } from \"@/components/assistant-ui\";\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useLangGraphRuntime } from \"@assistant-ui/react-langgraph\";\n\nimport { createThread, getThreadState, sendMessage } from \"@/lib/chatApi\";\n\nexport function MyAssistant() {\n  const threadIdRef = useRef<string | undefined>();\n  const runtime = useLangGraphRuntime({\n    threadId: threadIdRef.current,\n    stream: async (messages) => {\n      if (!threadIdRef.current) {\n        const { thread_id } = await createThread();\n        threadIdRef.current = thread_id;\n      }\n      const threadId = threadIdRef.current;\n      return sendMessage({\n        threadId,\n        messages,\n      });\n    },\n    onSwitchToNewThread: async () => {\n      const { thread_id } = await createThread();\n      threadIdRef.current = thread_id;\n    },\n    onSwitchToThread: async (threadId) => {\n      const state = await getThreadState(threadId);\n      threadIdRef.current = threadId;\n      return {\n        messages: state.values.messages,\n        interrupts: state.tasks[0]?.interrupts,\n      };\n    },\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      <Thread />\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses OpenAI's gpt-4o-mini model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: openai(\"gpt-4o-mini\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohere chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Cohere's Command R Plus model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cohere } from \"@ai-sdk/cohere\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: cohere(\"command-r-plus\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment Adapter Implementation\nDESCRIPTION: Example of creating a custom attachment adapter with specialized handling for specific file types and custom processing logic.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Attachments.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { AttachmentAdapter } from \"@assistant-ui/react\";\n\nclass CustomAttachmentAdapter implements AttachmentAdapter {\n  accept = \"image/*, .pdf\";\n\n  async add({ file }) {\n    // Custom logic for adding an attachment\n    // ...\n  }\n\n  async send(attachment) {\n    // Custom logic for sending an attachment\n    // ...\n  }\n\n  async remove() {\n    // Custom logic for removing an attachment\n    // ...\n  }\n}\n\n// Use it in your CompositeAttachmentAdapter\nconst compositeAdapter = new CompositeAttachmentAdapter([\n  new CustomAttachmentAdapter(),\n  new SimpleTextAttachmentAdapter(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Anonymous Frontend Auth in React\nDESCRIPTION: This example demonstrates how to set up AssistantCloud for anonymous usage without an auth provider. It initializes the cloud instance and uses it in a React component with AssistantRuntimeProvider.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/authorization.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssistantCloud } from \"@assistant-ui/react\";\n\nconst cloud = new AssistantCloud({\n  baseUrl: process.env[\"NEXT_PUBLIC_ASSISTANT_BASE_URL\"]!,\n  anonymous: true,\n});\n\nconst runtime = useChatRuntime({\n  api: \"/api/chat\",\n  cloud,\n});\n\nreturn (\n  <AssistantRuntimeProvider runtime={runtime}>\n    <div className=\"grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4\">\n      <ThreadList />\n      <MyThread />\n    </div>\n  </AssistantRuntimeProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Data with useMessage Hook in TSX\nDESCRIPTION: Demonstrates how to use the useMessage hook to access message object data. Shows both direct access and selector pattern usage.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/MessageRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessage } from \"@assistant-ui/react\";\n\nconst { message } = useMessage();\nconst msg = useMessage((m) => m.message);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of makeAssistantVisible HOC in React\nDESCRIPTION: Demonstrates basic implementation of makeAssistantVisible HOC with a Button component, showing both basic readable configuration and clickable configuration options.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/make-assistant-readable.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantVisible } from \"@assistant-ui/react\";\n\nconst Button = ({ onClick, children }) => (\n  <button onClick={onClick}>{children}</button>\n);\n\n// Basic usage - makes component HTML readable\nconst ReadableButton = makeAssistantVisible(Button);\n\n// With clickable configuration\nconst ClickableButton = makeAssistantVisible(Button, {\n  clickable: true, // Enables the click tool\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing External Store Messages in Component\nDESCRIPTION: Shows how to access and convert ThreadMessages back to custom message types using the getExternalStoreMessages utility function.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/external-store.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyAssistantMessage = () => {\n  const myMessages = useMessage((m) => getExternalStoreMessages(m));\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing LangGraph Runtime Provider with Assistant-Cloud in TypeScript\nDESCRIPTION: This code implements a custom LangGraph runtime provider that uses the assistant-cloud API for thread management. It includes functions for initializing threads, sending messages, and switching between threads.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/persistence/langgraph.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  AssistantCloud,\n  AssistantRuntimeProvider,\n  useCloudThreadListRuntime,\n  useThreadListItemRuntime,\n} from \"@assistant-ui/react\";\nimport { useLangGraphRuntime } from \"@assistant-ui/react-langgraph\";\nimport { createThread, getThreadState, sendMessage } from \"@/lib/chatApi\";\nimport { LangChainMessage } from \"@assistant-ui/react-langgraph\";\nimport { useAuth } from \"@clerk/nextjs\";\nimport { useMemo } from \"react\";\n\nconst useMyLangGraphRuntime = () => {\n  const threadListItemRuntime = useThreadListItemRuntime();\n  const runtime = useLangGraphRuntime({\n    stream: async function* (messages) {\n      const { externalId } = await threadListItemRuntime.initialize();\n      if (!externalId) throw new Error(\"Thread not found\");\n\n      return sendMessage({ threadId: externalId, messages });\n    },\n    onSwitchToThread: async (externalId) => {\n      const state = await getThreadState(externalId);\n      return {\n        messages:\n          (state.values as { messages?: LangChainMessage[] }).messages ?? [],\n      };\n    },\n  });\n\n  return runtime;\n};\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const { getToken } = useAuth();\n\n  const cloud = useMemo(\n    () =>\n      new AssistantCloud({\n        baseUrl: process.env[\"NEXT_PUBLIC_ASSISTANT_BASE_URL\"]!,\n        authToken: async () => getToken({ template: \"assistant-ui\" }),\n      }),\n    [getToken],\n  );\n\n  const runtime = useCloudThreadListRuntime({\n    cloud,\n    runtimeHook: useMyLangGraphRuntime,\n    create: async () => {\n      const { thread_id } = await createThread();\n      return { externalId: thread_id };\n    },\n  });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming in ChatModelAdapter\nDESCRIPTION: Shows how to implement streaming in the ChatModelAdapter by using an AsyncGenerator. This allows for yielding results as they are generated, improving responsiveness.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/local.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyModelAdapter: ChatModelAdapter = {\n  async *run({ messages, abortSignal, context }) {\n    const stream = await backendApi({ messages, abortSignal, context });\n\n    let text = \"\";\n    for await (const part of stream) {\n      text += part.choices[0]?.delta?.content || \"\";\n\n      yield {\n        content: [{ type: \"text\", text }],\n      };\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSpeechSynthesisAdapter for Text-to-Speech in TypeScript React\nDESCRIPTION: This snippet demonstrates how to set up text-to-speech functionality in assistant-ui using the WebSpeechSynthesisAdapter. It shows the configuration of a chat runtime with speech synthesis capabilities.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Speech.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WebSpeechSynthesisAdapter } from \"@assistant-ui/react\";\n\nconst runtime = useChatRuntime({\n  api: \"/api/chat\",\n  adapters: {\n    speech: new WebSpeechSynthesisAdapter(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Resuming a Run with Custom Stream in React\nDESCRIPTION: Demonstrates how to use the experimental unstable_resumeRun method to resume a chat run with a custom stream. This is useful for implementing custom streaming logic or resuming conversations from external sources.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/local.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadRuntime, type ChatModelRunResult } from \"@assistant-ui/react\";\n\n// Get the thread runtime\nconst thread = useThreadRuntime();\n\n// Create a custom stream\nasync function* createCustomStream(): AsyncGenerator<ChatModelRunResult, void, unknown> {\n  let text = \"Initial response\";\n  yield {\n    content: [{ type: \"text\", text }]\n  };\n  \n  // Simulate delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  text = \"Initial response. And here's more content...\";\n  yield {\n    content: [{ type: \"text\", text }]\n  };\n}\n\n// Resume a run with the custom stream\nthread.unstable_resumeRun({\n  parentId: \"message-id\", // ID of the message to respond to\n  stream: createCustomStream() // The stream to use for resuming\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generic Composer Hook in React TypeScript\nDESCRIPTION: Shows how to access the nearest composer state (either edit composer or thread's new message composer) using the useComposer hook. Demonstrates both direct state access and selector pattern.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ComposerRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useComposer } from \"@assistant-ui/react\";\n\nconst composer = useComposer();\nconst text = useComposer((m) => m.text);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Runtime with Vercel AI SDK\nDESCRIPTION: Example showing how to convert Vercel AI SDK chat helpers into an AssistantRuntime using useVercelUseChatRuntime hook.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/integrations/vercel-ai-sdk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVercelUseChatRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nconst MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {\n  const chat = useChat();\n  const runtime = useVercelUseChatRuntime(chat);\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Thread Runtime Hook in React\nDESCRIPTION: Demonstrates how to import and use the useThreadRuntime hook to access the thread runtime object.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadRuntime } from \"@assistant-ui/react\";\n\nconst thread = useThreadRuntime();\n```\n\n----------------------------------------\n\nTITLE: Implementing RSC Runtime with Vercel AI SDK\nDESCRIPTION: Example demonstrating how to convert Vercel RSC runtime into an AssistantRuntime with message handling and state management.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/integrations/vercel-ai-sdk.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVercelRSCRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nconst MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [messages, setMessages] = useUIState<typeof AI>();\n\n  const onNew = async (m: AppendMessage) => {\n    if (m.content[0]?.type !== \"text\")\n      throw new Error(\"Only text messages are supported\");\n\n    const input = m.content[0].text;\n    setMessages((currentConversation) => [\n      ...currentConversation,\n      { id: nanoid(), role: \"user\", display: input },\n    ]);\n\n    const message = await continueConversation(input);\n\n    setMessages((currentConversation) => [...currentConversation, message]);\n  };\n\n  const runtime = useVercelRSCRuntime({ messages, onNew });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Tool UI with React Hooks\nDESCRIPTION: Shows how to use useAssistantToolUI and useInlineRender hooks to create a component with access to tool props and prevent re-mounting.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantToolUI, useInlineRender } from \"@assistant-ui/react\";\n\nconst MyComponent = ({ product_id }) => {\n  useAssistantToolUI({\n    toolName: \"current_product_info\",\n    render: useInlineRender(({ args, status }) => {\n      // you can access component props here\n      return <p>product_info({ product_id })</p>;\n    }),\n  });\n\n  ...\n};\n\nconst MyApp = () => {\n  ...\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      ...\n      <MyComponent product_id=\"123\" />\n      ...\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Suggestion Component\nDESCRIPTION: Shows how to implement a suggestion component within the Thread that sets the composer's value to a predefined prompt when clicked. Includes options for auto-sending and replacement method.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Thread.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreadPrimitive } from \"@assistant-ui/react\";\n\nconst Suggestion = () => {\n  return (\n    <ThreadPrimitive.Suggestion\n      prompt=\"I need help with product search\"\n      method=\"replace\"\n      autoSend\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Chef Agent in TypeScript\nDESCRIPTION: TypeScript code to define an AI agent for cooking assistance using the Mastra core library and OpenAI integration.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { Agent } from \"@mastra/core/agent\";\n\nexport const chefAgent = new Agent({\n  name: \"chef-agent\",\n  instructions:\n    \"You are Michel, a practical and experienced home chef. \" +\n    \"You help people cook with whatever ingredients they have available.\",\n  model: openai(\"gpt-4o-mini\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useThreadList Hook for State Access\nDESCRIPTION: Shows how to use the useThreadList hook to access thread list state and specific thread data. The hook can be used both for accessing the full state and for selecting specific parts using a selector function.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadListRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadList } from \"@assistant-ui/react\";\n\nconst threadList = useThreadList();\nconst threads = useThreadList((m) => m.threads);\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Gemini chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Google's Gemini 2.0 Flash model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { google } from \"@ai-sdk/google\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: google(\"gemini-2.0-flash\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PriceSnapshotTool Types\nDESCRIPTION: Type definitions for the price snapshot tool arguments and result structure.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PriceSnapshotToolArgs = {\n  ticker: string;\n};\n\ntype PriceSnapshotToolResult = {\n  snapshot: {\n    price: number;\n    day_change: number;\n    day_change_percent: number;\n    time: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating PriceSnapshotTool UI Component\nDESCRIPTION: React component implementation for the price snapshot tool UI using makeAssistantToolUI.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\n\nexport const PriceSnapshotTool = makeAssistantToolUI<\n  PriceSnapshotToolArgs,\n  string\n>({\n  toolName: \"price_snapshot\",\n  render: function PriceSnapshotUI({ args, result }) {\n    return (\n      <div className=\"mb-4 flex flex-col items-center\">\n        <pre className=\"whitespace-pre-wrap break-all text-center\">\n          price_snapshot({JSON.stringify(args)})\n        </pre>\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing ThreadListRuntime via useAssistantRuntime Hook\nDESCRIPTION: Demonstrates how to access the thread list runtime through the assistant runtime hook. This provides access to thread list management functionality.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadListRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantRuntime } from \"@assistant-ui/react\";\n\nconst threadListRuntime = useAssistantRuntime().threadList;\n```\n\n----------------------------------------\n\nTITLE: Implementing BranchPickerPrimitive Component in React\nDESCRIPTION: Example implementation of a BranchPicker component using BranchPickerPrimitive from @assistant-ui/react. The component includes Previous and Next navigation buttons along with branch count display.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/BranchPicker.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BranchPickerPrimitive } from \"@assistant-ui/react\";\n\nconst BranchPicker = () => (\n  <BranchPickerPrimitive.Root>\n    <BranchPickerPrimitive.Previous />\n    <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />\n    <BranchPickerPrimitive.Next />\n  </BranchPickerPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating MarkdownText Component in Thread\nDESCRIPTION: Implementation showing how to integrate the MarkdownText component within an AssistantMessage component using MessagePrimitive.Content. Demonstrates proper component composition and styling setup.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Markdown.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MarkdownText } from \"@/components/assistant-ui/markdown-text\";\n\nconst AssistantMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"...\">\n      <div className=\"...\">\n        <MessagePrimitive.Content components={{ Text: MarkdownText }} />\n      </div>\n      <AssistantActionBar />\n\n      <BranchPicker className=\"...\" />\n    </MessagePrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing AssistantRuntime Hook in React\nDESCRIPTION: Demonstrates how to import and use the useAssistantRuntime hook to access the root runtime instance of the application.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/AssistantRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantRuntime } from \"@assistant-ui/react\";\n\nconst runtime = useAssistantRuntime();\n```\n\n----------------------------------------\n\nTITLE: Implementing AssistantModalPrimitive in React\nDESCRIPTION: This snippet demonstrates the basic structure and usage of the AssistantModalPrimitive component. It shows how to compose the Root, Trigger, and Content subcomponents to create a functional assistant modal.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/AssistantModal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantModalPrimitive } from \"@assistant-ui/react\";\n\nconst Thread = () => (\n  <AssistantModalPrimitive.Root>\n    <AssistantModalPrimitive.Trigger>\n      <FloatingAssistantButton />\n    </AssistantModalPrimitive.Trigger>\n    <AssistantModalPrimitive.Content>\n      <Thread />\n    </AssistantModalPrimitive.Content>\n  </AssistantModalPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Part State with useContentPart Hook\nDESCRIPTION: Demonstrates how to use the useContentPart hook to access the state of the current content part.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContentPart } from \"@assistant-ui/react\";\n\nconst contentPart = useContentPart();\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Component in React Application\nDESCRIPTION: Example of importing and using the Thread component in a React page component. Shows basic implementation within a div container with full height.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Thread.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Thread } from \"@/components/assistant-ui/thread\";\n\nexport default function Home() {\n  return (\n    <div className=\"h-full\">\n      <Thread />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thread Composer Hook in React TypeScript\nDESCRIPTION: Demonstrates how to access the thread's new message composer state using the useThreadComposer hook. Shows both direct state access and selector pattern usage.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ComposerRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadComposer } from \"@assistant-ui/react\";\n\nconst composer = useThreadComposer();\nconst text = useThreadComposer((m) => m.text);\n```\n\n----------------------------------------\n\nTITLE: Implementing Branch Picker Component in TSX\nDESCRIPTION: Shows how to integrate the BranchPickerPrimitive component into a message component structure, including the main Message component and a custom BranchPicker component implementation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Branching.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BranchPickerPrimitive } from \"@assistant-ui/react\";\n\n\nconst Message = () => {\n  return (\n    <MessagePrimitive.Root>\n      ...\n      <BranchPicker /> {/* <-- show the branch picker */}\n      ...\n    </EditComposerPrimitive.Root>\n  );\n};\n\n\nconst BranchPicker = () => {\n  return (\n    <BranchPickerPrimitive.Root hideWhenSingleBranch>\n      <BranchPickerPrimitive.Previous />\n      <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />\n      <BranchPickerPrimitive.Next />\n    </BranchPickerPrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Text Rendering with MarkdownTextPrimitive\nDESCRIPTION: Demonstrates how to use the MarkdownTextPrimitive component to render message text as Markdown, requiring the @assistant-ui/react-markdown package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MarkdownTextPrimitive } from \"@assistant-ui/react-markdown\";\n\n<MarkdownTextPrimitive />;\n```\n\n----------------------------------------\n\nTITLE: Accessing AI SDK Messages in React Components\nDESCRIPTION: These code snippets demonstrate how to access AI SDK messages in React components using the getExternalStoreMessages utility.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyAssistantMessage = () => {\n  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));\n  // ...\n};\n\nconst WeatherToolUI = makeAssistantToolUI({\n  render: () => {\n    const aiSDKMessage = useContentPart((p) => getExternalStoreMessages(p)[0]);\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadList in React Application\nDESCRIPTION: Example of how to implement the ThreadList component in a React application page. The code shows the component being used alongside a Thread component in a grid layout.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/ThreadList.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Thread } from \"@/components/assistant-ui/thread\";\nimport { ThreadList } from \"@/components/assistant-ui/thread-list\";\n\nexport default function Home() {\n  return (\n    <div className=\"grid h-full grid-cols-[200px_1fr]\">\n      <ThreadList />\n      <Thread />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thread Conditional Rendering\nDESCRIPTION: Demonstrates conditional rendering within the Thread component using the If subcomponent, showing how to render content based on thread state (empty or running).\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Thread.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Thread.If empty>\n  {/* equivalent to <Thread.Empty> */}\n</Thread.If>\n<Thread.If empty={false}>\n  {/* rendered if thread is not empty */}\n</Thread.If>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Starters in Next.js\nDESCRIPTION: React component implementation for adding conversation starter suggestions to the Thread component, including example prompts for financial queries.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-1.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Home() {\n  return (\n    <div className=\"flex h-full flex-col\">\n      <Thread\n        welcome={{\n          suggestions: [\n            {\n              prompt: \"How much revenue did Apple make last year?\",\n            },\n            {\n              prompt: \"Is McDonald's profitable?\",\n            },\n            {\n              prompt: \"What's the current stock price of Tesla?\",\n            },\n          ],\n        }}\n        assistantMessage={{ components: { Text: MarkdownText } }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useThreadListItemRuntime Hook in React\nDESCRIPTION: This snippet demonstrates how to import and use the useThreadListItemRuntime hook from the @assistant-ui/react package. It returns a threadListItemRuntime object.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadListItemRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadListItemRuntime } from \"@assistant-ui/react\";\n\nconst threadListItemRuntime = useThreadListItemRuntime();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client with Helicone in Vercel AI SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up the OpenAI client using the Vercel AI SDK with Helicone integration. It includes setting the base URL and adding the Helicone-Auth header.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/helicone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAI } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nconst openai = createOpenAI({\n  baseURL: \"https://oai.helicone.ai/v1\",\n  headers: {\n    \"Helicone-Auth\": `Bearer ${process.env.HELICONE_API_KEY}`,\n  },\n});\n\nexport async function POST(req: Request) {\n  const { prompt } = await req.json();\n  return streamText({\n    model: openai(\"gpt-4o\"),\n    prompt,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LangServe Chat API Route\nDESCRIPTION: Backend implementation of the chat API route using RemoteRunnable from LangChain core to handle chat messages and stream responses.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langserve.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RemoteRunnable } from \"@langchain/core/runnables/remote\";\nimport type { RunnableConfig } from \"@langchain/core/runnables\";\nimport { streamText, LangChainAdapter, type Message } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = (await req.json()) as { messages: Message[] };\n\n  // TODO replace with your own langserve URL\n  const remoteChain = new RemoteRunnable<\n    { messages: Message[] },\n    string,\n    RunnableConfig\n  >({\n    url: \"<YOUR_LANGSERVE_URL>\",\n  });\n\n  const stream = await remoteChain.stream({\n    messages,\n  });\n\n  return LangChainAdapter.toDataStreamResponse(stream);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AI SDK Messages\nDESCRIPTION: Example code showing how to convert and access AI SDK messages in components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyAssistantMessage = () => {\n  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));\n  // ...\n};\n\nconst WeatherToolUI = makeAssistantToolUI({\n  render: () => {\n    const aiSDKMessage = useContentPart((p) => getExternalStoreMessages(p)[0]);\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Traditional React Component Structure in TypeScript\nDESCRIPTION: Demonstrates a typical React component for displaying transaction history with logic, structure, and style. The component shows a list of transactions with refund buttons.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/motivation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Traditional React Component\nfunction TransactionHistory({ transactions }) {\n  // 1. Logic (JavaScript/TypeScript)\n  const handleRefund = (transactionId) => {\n    // Process refund...\n  };\n\n  // 2. Structure (JSX/TSX)\n  return (\n    // 3. Style (CSS via className)\n    <div className=\"transaction-list\">\n      {transactions.map((transaction) => (\n        <div key={transaction.id} className=\"transaction-item\">\n          <span>${transaction.amount}</span>\n          <span>{transaction.merchant}</span>\n          <button onClick={() => handleRefund(transaction.id)}>\n            Request Refund\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Suggestion Component Implementation\nDESCRIPTION: Shows how to implement a suggestion button that sets the composer's value to a predefined prompt when clicked. Includes options for auto-sending and replacing existing text.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/primitives/Thread.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThreadPrimitive } from \"@assistant-ui/react\";\n\nconst Suggestion = () => {\n  return (\n    <ThreadPrimitive.Suggestion\n      prompt=\"I need help with product search\"\n      method=\"replace\"\n      autoSend\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Components with Shiki\nDESCRIPTION: Integration of SyntaxHighlighter component into markdown-text.tsx default components\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/SyntaxHighlighting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SyntaxHighlighter } from \"./shiki-highlighter\";\n\nexport const defaultComponents = memoizeMarkdownComponents({\n  SyntaxHighlighter: SyntaxHighlighter, // [!code ++]\n  h1: /* ... */,\n  // ...other elements...\n});\n```\n\n----------------------------------------\n\nTITLE: Using formTools with Vercel AI SDK in React\nDESCRIPTION: Shows how to implement formTools with streaming text APIs like Vercel AI SDK. This is particularly useful for runtimes that don't support client-side tool definitions.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/integrations/react-hook-form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { formTools } from \"@assistant-ui/react-hook-form\";\n\nconst result = streamText({\n  ...\n  tools: {\n    ...formTools,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using User Message Attachments - TypeScript React\nDESCRIPTION: This snippet illustrates how to incorporate UserMessageAttachments within a functional component which represents user messages. It captures necessary imports and React component structure.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Attachment.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserMessageAttachments } from \"@/components/assistant-ui/attachment\";\n\nconst UserMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"..\">\n      <UserActionBar />\n\n      <UserMessageAttachments />\n\n      <div className=\"..\">\n        <MessagePrimitive.Content />\n      </div>\n\n      <BranchPicker className=\"..\" />\n    </MessagePrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Runtime Provider Implementation with CompositeAttachmentAdapter\nDESCRIPTION: Example implementation of a runtime provider component using CompositeAttachmentAdapter for handling both image and text attachments.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Attachments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { useChatRuntime } from \"@assistant-ui/react-ai-sdk\";\nimport {\n  CompositeAttachmentAdapter,\n  SimpleImageAttachmentAdapter,\n  SimpleTextAttachmentAdapter,\n} from \"@assistant-ui/react\";\n\nconst MyRuntimeProvider = () => {\n  const runtime = useChatRuntime({\n    api: \"/api/chat\",\n    adapters: {\n      attachments: new CompositeAttachmentAdapter([\n        new SimpleImageAttachmentAdapter(),\n        new SimpleTextAttachmentAdapter(),\n      ]),\n    },\n  });\n\n  // ... rest of your component\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Route for Chat API\nDESCRIPTION: TypeScript code for setting up a backend route to handle chat requests using OpenAI's GPT-4 model.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n\n  const result = streamText({\n    model: openai(\"gpt-4o\"),\n    messages: convertToCoreMessages(messages),\n  });\n\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Execution Context\nDESCRIPTION: Demonstrates how to implement a tool's execute function with access to toolCallId and abortSignal for handling execution tracking and cancellation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst searchTool = {\n  description: \"Search the web\",\n  parameters: z.object({\n    query: z.string(),\n  }),\n  execute: async (args, { toolCallId, abortSignal }) => {\n    // You can use toolCallId to track or log specific tool executions\n    console.log(`Executing search with ID: ${toolCallId}`);\n\n    // Use abortSignal to handle cancellation\n    const response = await fetch(\n      `/api/search?q=${encodeURIComponent(args.query)}`,\n      {\n        signal: abortSignal,\n      },\n    );\n\n    return response.json();\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Validation Status\nDESCRIPTION: Demonstrates usage of useToolArgsFieldStatus hook for checking validation status of individual tool argument fields.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToolArgsFieldStatus } from \"@assistant-ui/react\";\n\nconst SearchToolUI = makeAssistantToolUI<{ query: string }, SearchResult>({\n  toolName: \"search\",\n  render: ({ args }) => {\n    const status = useToolArgsFieldStatus(\"query\");\n    const isInProgress = status.type === \"running\";\n\n    return (\n      <div>\n        <QueryInput query={args.query} isInProgress={isInProgress} />\n      </div>\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Composer.If for Conditional Rendering in React\nDESCRIPTION: This snippet shows how to use the Composer.If component for conditional rendering based on whether a message is being edited or not.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Composer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Composer.If editing>{/* rendered if message is being edited */}</Composer.If>\n```\n\n----------------------------------------\n\nTITLE: API Proxy Route Implementation\nDESCRIPTION: Next.js API route implementation for proxying requests to LangGraph server with CORS and authentication\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport const runtime = \"edge\";\n\nfunction getCorsHeaders() {\n  return {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, PUT, PATCH, DELETE, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"*\",\n  };\n}\n\nasync function handleRequest(req: NextRequest, method: string) {\n  try {\n    const path = req.nextUrl.pathname.replace(/^/?api\\//, \"\");\n    const url = new URL(req.url);\n    const searchParams = new URLSearchParams(url.search);\n    searchParams.delete(\"_path\");\n    searchParams.delete(\"nxtP_path\");\n    const queryString = searchParams.toString()\n      ? `?${searchParams.toString()}`\n      : \"\";\n\n    const options: RequestInit = {\n      method,\n      headers: {\n        \"x-api-key\": process.env[\"LANGCHAIN_API_KEY\"] || \"\",\n      },\n    };\n\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(method)) {\n      options.body = await req.text();\n    }\n\n    const res = await fetch(\n      `${process.env[\"LANGGRAPH_API_URL\"]}/${path}${queryString}`,\n      options,\n    );\n\n    return new NextResponse(res.body, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: {\n        ...res.headers,\n        ...getCorsHeaders(),\n      },\n    });\n  } catch (e: any) {\n    return NextResponse.json({ error: e.message }, { status: e.status ?? 500 });\n  }\n}\n\nexport const GET = (req: NextRequest) => handleRequest(req, \"GET\");\nexport const POST = (req: NextRequest) => handleRequest(req, \"POST\");\nexport const PUT = (req: NextRequest) => handleRequest(req, \"PUT\");\nexport const PATCH = (req: NextRequest) => handleRequest(req, \"PATCH\");\nexport const DELETE = (req: NextRequest) => handleRequest(req, \"DELETE\");\n\nexport const OPTIONS = () => {\n  return new NextResponse(null, {\n    status: 204,\n    headers: {\n      ...getCorsHeaders(),\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Scrollbar Component Integration\nDESCRIPTION: React component implementation showing how to integrate ScrollArea with Thread components, including the necessary imports and component structure.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Scrollbar.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\nimport { ScrollBar } from \"@/components/ui/scroll-area\";\n\nconst MyThread: FC = () => {\n  return (\n    <ScrollAreaPrimitive.Root asChild>\n      <ThreadPrimitive.Root className=\"...\">\n        <ScrollAreaPrimitive.Viewport className=\"thread-viewport\" asChild>\n          <ThreadPrimitive.Viewport className=\"...\">\n            ...\n          </ThreadPrimitive.Viewport>\n        </ScrollAreaPrimitive.Viewport>\n        <ScrollBar />\n      </ThreadPrimitive.Root>\n    </ScrollAreaPrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using General Attachment Hook in React\nDESCRIPTION: Demonstrates how to use the useAttachment hook to access the current attachment state in a React component. Shows both direct state access and selector pattern usage.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/AttachmentRuntime.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAttachment } from \"@assistant-ui/react\";\n\nconst { attachment } = useAttachment();\nconst att = useAttachment((m) => m.attachment);\n```\n\n----------------------------------------\n\nTITLE: Implementing Assistant Sidebar in React Application\nDESCRIPTION: Example of how to import and use the AssistantSidebar component in a React application page. The component wraps around the main application content to provide a chat sidebar interface.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/AssistantSidebar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantSidebar } from \"@/components/assistant-ui/assistant-sidebar\";\n\nexport default function Home() {\n  return (\n    <div className=\"h-full\">\n      <AssistantSidebar>{/* your app */}</AssistantSidebar>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding assistant-ui components to an existing project\nDESCRIPTION: Command to add thread and thread-list components to an existing project using the assistant-ui CLI.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui add thread thread-list\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread State in TypeScript\nDESCRIPTION: This change demonstrates how to access thread state values using the useThread hook instead of directly from the runtime.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-const isRunning = useThreadRuntime().isRunning; // anti-pattern, your code will not update on change\n+const isRunning = useThread(t => t.isRunning);\n```\n\n----------------------------------------\n\nTITLE: Thread Conditional Rendering Example\nDESCRIPTION: Demonstrates conditional rendering within the Thread component using the If sub-component to show content based on thread state (empty or running).\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/primitives/Thread.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Thread.If empty>\n  {/* equivalent to <Thread.Empty> */}\n</Thread.If>\n<Thread.If empty={false}>\n  {/* rendered if thread is not empty */}\n</Thread.If>\n```\n\n----------------------------------------\n\nTITLE: Chat API Implementation\nDESCRIPTION: Helper functions for managing LangGraph chat threads and message handling\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from \"@langchain/langgraph-sdk\";\nimport { LangChainMessage } from \"@assistant-ui/react-langgraph\";\n\nconst createClient = () => {\n  const apiUrl = process.env[\"NEXT_PUBLIC_LANGGRAPH_API_URL\"] || \"/api\";\n  return new Client({\n    apiUrl,\n  });\n};\n\nexport const createThread = async () => {\n  const client = createClient();\n  return client.threads.create();\n};\n\nexport const getThreadState = async (\n  threadId: string,\n): Promise<ThreadState<{ messages: LangChainMessage[] }>> => {\n  const client = createClient();\n  return client.threads.getState(threadId);\n};\n\nexport const sendMessage = async (params: {\n  threadId: string;\n  messages: LangChainMessage;\n}) => {\n  const client = createClient();\n  return client.runs.stream(\n    params.threadId,\n    process.env[\"NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID\"]!,\n    {\n      input: {\n        messages: params.messages,\n      },\n      streamMode: \"messages\",\n    },\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Message Editing with useEditComposer Hook in TSX\nDESCRIPTION: Illustrates the usage of useEditComposer hook for handling message editing state. Shows how to access the edit composer state and retrieve specific properties like text content.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/MessageRuntime.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditComposer } from \"@assistant-ui/react\";\n\nconst editComposer = useEditComposer();\nconst text = useEditComposer((m) => m.text);\n```\n\n----------------------------------------\n\nTITLE: Using Composer Attachment Hook in React\nDESCRIPTION: Shows implementation of the useComposerAttachment hook specifically for handling attachments within a composer component. Demonstrates both direct state access and selector pattern.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/AttachmentRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useComposerAttachment } from \"@assistant-ui/react\";\n\nconst { attachment } = useComposerAttachment();\nconst composerAttachment = useComposerAttachment((m) => m.attachment);\n```\n\n----------------------------------------\n\nTITLE: Running Assistant UI Migration Codemod for Edge Runtime\nDESCRIPTION: Command to run the migration codemod tool for updating imports from edge runtime components that have been moved to @assistant-ui/react-edge package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-9.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# IMPORTANT: make sure to commit all changes to git / creating a backup before running the codemod\nnpx assistant-ui upgrade\n```\n\n----------------------------------------\n\nTITLE: Using MessagePrimitive.If for Conditional Rendering in React\nDESCRIPTION: This snippet shows how to use the MessagePrimitive.If component for conditional rendering based on message properties. It demonstrates rendering different content for user and assistant messages.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Message.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Message.If user>\n  {/* rendered if message is from the user */}\n</Message.If>\n<Message.If assistant>\n  {/* rendered if message is from the assistant */}\n</Message.If>\n```\n\n----------------------------------------\n\nTITLE: Using Message Attachment Hook in React\nDESCRIPTION: Illustrates the usage of useMessageAttachment hook for managing attachments in message contexts. Shows both direct state access and selector pattern implementation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/AttachmentRuntime.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageAttachment } from \"@assistant-ui/react\";\n\nconst { attachment } = useMessageAttachment();\nconst messageAttachment = useMessageAttachment((m) => m.attachment);\n```\n\n----------------------------------------\n\nTITLE: Using Runtime State Access Hooks\nDESCRIPTION: Examples showing how to access and subscribe to runtime state using helper hooks, with options for selecting specific state updates.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/concepts/runtime-layer.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nuseThreadList(); // get thread manager state\nuseThread(); // get thread state\nuseMessage(); // get message state\nuseContentPart(); // get content part state\nuseComposer(); // get composer state\nuseThreadComposer(); // get thread composer state\nuseEditComposer(); // get edit composer state\nuseAttachment(); // get attachment state\nuseThreadComposerAttachment(); // get thread composer attachment state\nuseEditComposerAttachment(); // get edit composer attachment state\nuseMessageAttachment(); // get message attachment state\n\n// only subscribe to role changes\nconst role = useMessage((state) => message.role);\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Attachments in LangGraph Runtime\nDESCRIPTION: Example of using the new adapters option to configure image attachments in LangGraph runtime, replacing the deprecated unstable_allowImageAttachments option.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-9.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseLangGraphRuntime({\n  adapters: {\n    attachments: new SimpleImageAttachmentAdapter(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AttachmentPrimitive Examples for Messages and Composers in React\nDESCRIPTION: Example implementations of AttachmentPrimitive for both message and composer contexts. The message implementation shows basic attachment display with thumbnail and name, while the composer implementation adds a removal button.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/Attachment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachmentPrimitive } from \"@assistant-ui/react\";\n\nconst MyMessageAttachment = () => (\n  <AttachmentPrimitive.Root>\n    <AttachmentPrimitive.Thumbnail />\n    <AttachmentPrimitive.Name />\n  </AttachmentPrimitive.Root>\n);\n\nconst MyComposerAttachment = () => (\n  <AttachmentPrimitive.Root>\n    <AttachmentPrimitive.Thumbnail />\n    <AttachmentPrimitive.Name />\n    <AttachmentPrimitive.Remove />\n  </AttachmentPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chrome AI chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Chrome AI to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chromeai } from \"chrome-ai\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: chromeai(),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Assistant UI Migration Codemod for AI SDK\nDESCRIPTION: Command to run the migration codemod tool for updating imports from language model converters and runtime components that have been moved to @assistant-ui/react-ai-sdk package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-9.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# IMPORTANT: make sure to commit all changes to git / creating a backup before running the codemod\nnpx assistant-ui upgrade\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Auth Token Retrieval in TypeScript\nDESCRIPTION: This snippet shows how to set up the frontend to retrieve auth tokens from a backend API endpoint. It initializes AssistantCloud with a function that fetches the token from the server.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/authorization.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst cloud = new AssistantCloud({\n  baseUrl: process.env[\"NEXT_PUBLIC_ASSISTANT_BASE_URL\"]!,\n  authToken: () =>\n    fetch(\"/api/assistant-ui-token\", { method: \"POST\" }).then((r) =>\n      r.json().then((data) => data.token)\n    ),\n});\n\nconst runtime = useChatRuntime({\n  api: \"/api/chat\",\n  cloud,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionBarPrimitive for User and Assistant Messages in React\nDESCRIPTION: This snippet demonstrates how to use the ActionBarPrimitive component to create action bars for user and assistant messages. It shows the basic structure and available actions for each message type.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ActionBar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActionBarPrimitive } from \"@assistant-ui/react\";\n\nconst UserMessageBar = () => (\n  <ActionBarPrimitive.Root>\n    <ActionBarPrimitive.Edit />\n    <ActionBarPrimitive.Copy />\n  </ActionBarPrimitive.Root>\n);\n\nconst AssistantMessageBar = () => (\n  <ActionBarPrimitive.Root>\n    <ActionBarPrimitive.Reload />\n    <ActionBarPrimitive.Copy />\n  </ActionBarPrimitive.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Context with useAssistantRuntime\nDESCRIPTION: Demonstrates how to add dynamic context based on the user's transaction patterns. This approach registers a model context provider that supplies information about spending patterns, average transactions, common merchants, and refund history.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/motivation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantRuntime } from \"@assistant-ui/react\";\nimport { useEffect } from \"react\";\n\nfunction SmartTransactionHistory({ userProfile }) {\n  const assistantRuntime = useAssistantRuntime();\n\n  useEffect(() => {\n    return assistantRuntime.registerModelContextProvider({\n      getModelContext: () => ({\n        system: `\n          User spending patterns:\n          - Average transaction: ${userProfile.avgTransaction}\n          - Common merchants: ${userProfile.frequentMerchants.join(\", \")}\n          - Refund history: ${userProfile.refundCount} requests\n        `,\n      }),\n    });\n  }, [assistantRuntime, userProfile]);\n\n  // Previous components...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Assistant Actions to Runtime in TypeScript\nDESCRIPTION: This snippet illustrates the replacement of useAssistantActions with useAssistantRuntime for performing actions like switching to a new thread.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-const switchToNewThread = useAssistantActions(a => a.switchToNewThread);\n+const runtime = useAssistantRuntime();\n+runtime.switchToNewThread();\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Actions\nDESCRIPTION: Server-side implementation of AI conversation handling with OpenAI integration and UI streaming.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use server\";\n\nimport { createAI, getMutableAIState, streamUI } from \"ai/rsc\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { ReactNode } from \"react\";\nimport { z } from \"zod\";\nimport { nanoid } from \"nanoid\";\n\nexport interface ServerMessage {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\nexport interface ClientMessage {\n  id: string;\n  role: \"user\" | \"assistant\";\n  display: ReactNode;\n}\n\nexport async function continueConversation(\n  input: string,\n): Promise<ClientMessage> {\n  \"use server\";\n\n  const history = getMutableAIState();\n\n  const result = await streamUI({\n    model: openai(\"gpt-3.5-turbo\"),\n    messages: [...history.get(), { role: \"user\", content: input }],\n    text: ({ content, done }) => {\n      if (done) {\n        history.done((messages: ServerMessage[]) => [\n          ...messages,\n          { role: \"assistant\", content },\n        ]);\n      }\n\n      return <div>{content}</div>;\n    },\n    tools: {\n      deploy: {\n        description: \"Deploy repository to vercel\",\n        parameters: z.object({\n          repositoryName: z\n            .string()\n            .describe(\"The name of the repository, example: vercel/ai-chatbot\"),\n        }),\n        generate: async function* ({ repositoryName }) {\n          yield <div>Cloning repository {repositoryName}...</div>;\n          await new Promise((resolve) => setTimeout(resolve, 3000));\n          yield <div>Building repository {repositoryName}...</div>;\n          await new Promise((resolve) => setTimeout(resolve, 2000));\n          return <div>{repositoryName} deployed!</div>;\n        },\n      },\n    },\n  });\n\n  return {\n    id: nanoid(),\n    role: \"assistant\",\n    display: result.value,\n  };\n}\n\nexport const AI = createAI<ServerMessage[], ClientMessage[]>({\n  actions: {\n    continueConversation,\n  },\n  initialAIState: [],\n  initialUIState: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Anthropic chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Anthropic's Claude 3.5 Sonnet model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { anthropic } from \"@ai-sdk/anthropic\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: anthropic(\"claude-3-5-sonnet-20240620\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Thread Actions with Runtime in TypeScript\nDESCRIPTION: This snippet illustrates the replacement of useThreadActions with useThreadRuntime for performing actions like reloading a thread.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-const reload = useThreadActions(a => a.reload);\n+const threadRuntime = useThreadRuntime();\n+threadRuntime.reload();\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Validation Error Handling\nDESCRIPTION: Shows how to handle schema validation errors using the experimental_onSchemaValidationError property in a tool definition.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst searchTool = {\n  description: \"Search the web\",\n  parameters: z.object({\n    query: z.string().min(3),\n  }),\n  execute: async (args, context) => {\n    const response = await fetch(`/api/search?q=${args.query}`, {\n      signal: context.abortSignal,\n    });\n    return response.json();\n  },\n  experimental_onSchemaValidationError: async (invalidArgs, context) => {\n    // Handle validation errors gracefully\n    console.warn(`Invalid search query: ${JSON.stringify(invalidArgs)}`);\n    return {\n      error: \"Search query must be at least 3 characters long\",\n      suggestions: [\"Try a longer search term\"],\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ContentPartPrimitive.Text Component in React\nDESCRIPTION: Demonstrates the basic anatomy of using ContentPartPrimitive components, specifically showing how to import and implement a Text content part.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ContentPartPrimitive } from \"@assistant-ui/react\";\n\nconst TextContentPart = () => {\n  return <ContentPartPrimitive.Text />;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Switch to New Thread Hook in TypeScript\nDESCRIPTION: This snippet demonstrates the replacement of useSwitchToNewThread with useAssistantRuntime().switchToNewThread().\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-useSwitchToNewThread();\n+const runtime = useAssistantRuntime()\n+runtime.switchToNewThread(); \n```\n\n----------------------------------------\n\nTITLE: Context Colors Definition - JavaScript\nDESCRIPTION: Defines color mapping for different context levels in the assistant UI, including Assistant, Thread, Composer, Message, ContentPart, Attachment and ThreadListItem contexts.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const contextColors = {\n  \"Assistant Context\": \"#4a86e8\",\n  \"Thread Context\": \"#45a049\",\n  \"Composer Context\": \"#ff9933\",\n  \"Message Context\": \"#bb2244\",\n  \"ContentPart Context\": \"#268bd2\",\n  \"Attachment Context\": \"#FFB6C1\",\n  \"ThreadListItem Context\": \"#c678dd\",\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Thread Viewport State in React\nDESCRIPTION: Illustrates the usage of useThreadViewport hook for managing thread viewport state, such as scroll position tracking.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadRuntime.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadViewport } from \"@assistant-ui/react\";\n\nconst threadViewport = useThreadViewport();\nconst isAtBottom = useThreadViewport((m) => m.isAtBottom);\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Mastra\nDESCRIPTION: Next.js configuration to properly handle Mastra packages as external dependencies.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  serverExternalPackages: [\"@mastra/*\"],\n  // ... other configurations\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: OpenAI environment configuration\nDESCRIPTION: Environment variable configuration for OpenAI API integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_API_KEY=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Binding Purchase Stock Tool to Main Application\nDESCRIPTION: Integration of the PurchaseStockTool component into the main application thread.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PurchaseStockTool } from \"@/components/tools/purchase-stock/PurchaseStockTool\";\n\nexport default function Home() {\n  return (\n    <div className=\"flex h-full flex-col\">\n      <Thread\n        ...\n        tools={[PriceSnapshotTool, PurchaseStockTool]}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToolFallback in MessagePrimitive.Content\nDESCRIPTION: This code snippet demonstrates how to integrate the ToolFallback component into the MessagePrimitive.Content component. The Fallback property within the tools configuration object is set to the ToolFallback component, ensuring that a default UI is displayed when a specific ToolUI is not available.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/ToolFallback.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: /components/assistant-ui/tool-fallback.tsx\nimport { FC } from \"react\";\nexport const ToolFallback: FC = () => null;\n\n// @filename: ./thread.tsx\nimport { FC } from \"react\";\nimport { MessagePrimitive } from \"@assistant-ui/react\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nconst AssistantActionBar: FC = () => null;\nconst BranchPicker: FC<{ className?: string }> = () => null;\n\n// ---cut---\nimport { ToolFallback } from \"@/components/assistant-ui/tool-fallback\";\n\nconst AssistantMessage: FC = () => {\n  return (\n    <MessagePrimitive.Root className=\"...\">\n      <div className=\"...\">\n        <MessagePrimitive.Content\n          components={{ tools: { Fallback: ToolFallback } }}\n        />\n      </div>\n      <AssistantActionBar />\n\n      <BranchPicker className=\"...\" />\n    </MessagePrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Tool UI with External Store\nDESCRIPTION: Demonstrates how to implement a tool UI component that accesses external store messages for individual content parts.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/external-store.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst WeatherToolUI = makeAssistantToolUI({\n  render: () => {\n    const myMessages = useContentPart((p) => getExternalStoreMessages(p));\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating PurchaseStockTool Component in TypeScript React\nDESCRIPTION: This code snippet updates the PurchaseStockTool component to include a new TransactionConfirmationFinal component for displaying approval results. It handles various states of the stock purchase process and renders appropriate UI components based on the current state.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { TransactionConfirmationPending } from \"./transaction-confirmation-pending\";\nimport { TransactionConfirmationFinal } from \"./transaction-confirmation-final\";\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\nimport { updateState } from \"@/lib/chatApi\";\n\ntype PurchaseStockArgs = {\n  ticker: string;\n  companyName: string;\n  quantity: number;\n  maxPurchasePrice: number;\n};\n\ntype PurchaseStockResult = {\n  approve?: boolean;\n  cancelled?: boolean;\n  error?: string;\n};\n\nexport const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>(\n  {\n    toolName: \"purchase_stock\",\n    render: function PurchaseStockUI({ args, result, status, addResult }) {\n      let resultObj: PurchaseStockResult;\n      try {\n        resultObj = result ? JSON.parse(result) : {};\n      } catch (e) {\n        resultObj = { error: result! };\n      }\n\n      const handleReject = () => {\n        addResult({ cancelled: true });\n      };\n\n      const handleConfirm = async () => {\n        addResult({ approve: true });\n      };\n\n      return (\n        <div className=\"mb-4 flex flex-col items-center gap-2\">\n          <div>\n            <pre className=\"whitespace-pre-wrap break-all text-center\">\n              purchase_stock({JSON.stringify(args)})\n            </pre>\n          </div>\n          {!result && status.type !== \"running\" && (\n            <TransactionConfirmationPending\n              {...args}\n              onConfirm={handleConfirm}\n              onReject={handleReject}\n            />\n          )}\n          {resultObj.approve && <TransactionConfirmationFinal {...args} />}\n          {resultObj.approve === false && (\n            <pre className=\"font-bold text-red-600\">User rejected purchase</pre>\n          )}\n          {resultObj.cancelled && (\n            <pre className=\"font-bold text-red-600\">Cancelled</pre>\n          )}\n        </div>\n      );\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Branch Navigation API Hooks in TSX\nDESCRIPTION: Demonstrates the usage of branch-related hooks for checking branch status and navigation between branches within message components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Branching.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst hasBranches = useMessageIf({ hasBranches: true }); // whether branchCount is >= 2\n\n// navigation\nconst goToNextBranch = useGoToNextBranch(); // null if there is no next branch\nconst goToPreviousBranch = useGoToPreviousBranch(); // null if there is no previous branch\n```\n\n----------------------------------------\n\nTITLE: Adding Attachment Component - Shell Script\nDESCRIPTION: This snippet demonstrates how to add the attachment component to the project using a shell command. Requires Node.js and the shadcn package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Attachment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/attachment\"\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI environment configuration\nDESCRIPTION: Environment variable configuration for Azure OpenAI service integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nAZURE_RESOURCE_NAME=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nAZURE_API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Adding System Instructions with useAssistantInstructions\nDESCRIPTION: Demonstrates how to give specific instructions to the assistant about its role in the banking context. The assistant is instructed to help users understand transactions, explain policies, identify suspicious activities, and guide through refund processes.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/motivation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantInstructions } from \"@assistant-ui/react\";\n\nfunction SmartTransactionHistory() {\n  useAssistantInstructions(`\n    You are a helpful banking assistant that:\n    1. Helps users understand their transactions\n    2. Explains refund policies\n    3. Identifies suspicious transactions\n    4. Guides users through the refund process\n  `);\n\n  return <TransactionHistory transactions={transactions} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with MyRuntimeProvider\nDESCRIPTION: This code snippet shows how to wrap the main app component with the MyRuntimeProvider in the root layout file of a Next.js application.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyRuntimeProvider } from '@/app/MyRuntimeProvider';\n\n...\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <MyRuntimeProvider>\n      <html lang=\"en\">\n        <body className={inter.className}>\n          {children}\n        </body>\n      </html>\n    </MyRuntimeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ThreadList and Thread Components in TypeScript JSX\nDESCRIPTION: This snippet shows how to integrate the ThreadList and Thread components into the UI layout using a grid structure.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/persistence/langgraph.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"grid grid-cols-[250px_1fr]\">\n  <ThreadList />\n  <Thread />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updated API Route with Mastra Integration\nDESCRIPTION: Modified API route implementation using Mastra agent for chat functionality.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mastra } from \"@/mastra\"; // Adjust the import path if necessary\n\n// Allow streaming responses up to 30 seconds\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  // Extract the messages from the request body\n  const { messages } = await req.json();\n\n  // Get the chefAgent instance from Mastra\n  const agent = mastra.getAgent(\"chefAgent\");\n\n  // Stream the response using the agent\n  const result = await agent.stream(messages);\n\n  // Return the result as a data stream response\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Copied State in ActionBarPrimitive.Copy Component in React\nDESCRIPTION: This snippet shows two ways to handle the copied state of the Copy button in the ActionBarPrimitive component. It demonstrates using conditional rendering with MessagePrimitive.If and using CSS classes with data attributes.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ActionBar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBarPrimitive.Copy>\n  <MessagePrimitive.If copied={false}>\n    <CopyIcon />\n  </MessagePrimitive.If>\n  <MessagePrimitive.If copied>\n    <CopySuccessIcon />\n  </MessagePrimitive.If>\n</ActionBarPrimitive.Copy>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBarPrimitive.Copy className=\"group\">\n  <CopyIcon className=\"group-data-[copied]:hidden\" />\n  <CheckIcon className=\"hidden group-data-[copied]:block\" />\n</ActionBarPrimitive.Copy>\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Project\nDESCRIPTION: Commands to create a new Next.js project using create-next-app.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock environment configuration\nDESCRIPTION: Environment variable configuration for AWS Bedrock integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nAWS_ACCESS_KEY_ID=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nAWS_SECRET_ACCESS_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nAWS_REGION=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Making Components Readable with makeAssistantVisible\nDESCRIPTION: Shows how to create an intelligent button component using makeAssistantVisible. This allows the assistant to understand the transaction history structure and interact with refund buttons.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/motivation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantVisible } from \"@assistant-ui/react\";\n\n// Make the refund button intelligent\nconst SmartButton = makeAssistantVisible(\n  ({ onClick, children }) => <button onClick={onClick}>{children}</button>,\n  {\n    clickable: true, // Allow the assistant to click the button\n  },\n);\n\nfunction TransactionHistory({ transactions }) {\n  return (\n    <div className=\"transaction-list\">\n      {transactions.map((transaction) => (\n        <div key={transaction.id} className=\"transaction-item\">\n          <span>${transaction.amount}</span>\n          <span>{transaction.merchant}</span>\n          <SmartButton onClick={() => handleRefund(transaction.id)}>\n            Request Refund\n          </SmartButton>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ollama chat API endpoint in Next.js\nDESCRIPTION: TypeScript code for implementing a Next.js API route that uses Ollama with Llama 3 model to handle chat requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ollama } from \"ollama-ai-provider\";\nimport { streamText } from \"ai\";\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const result = streamText({\n    model: ollama(\"llama3\"),\n    messages,\n  });\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction Confirmation Final Component\nDESCRIPTION: React component for displaying the final transaction confirmation status with purchase details and success message.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { CheckCircle } from \"lucide-react\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ntype TransactionConfirmation = {\n  ticker: string;\n  companyName: string;\n  quantity: number;\n  maxPurchasePrice: number;\n};\n\nexport function TransactionConfirmationFinal(props: TransactionConfirmation) {\n  const { ticker, companyName, quantity, maxPurchasePrice } = props;\n\n  return (\n    <Card className=\"mx-auto w-full max-w-md\">\n      <CardHeader className=\"text-center\">\n        <CheckCircle className=\"mx-auto mb-4 h-16 w-16 text-green-500\" />\n        <CardTitle className=\"text-2xl font-bold text-green-700\">\n          Transaction Confirmed\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"rounded-md border border-green-200 bg-green-50 p-4\">\n          <h3 className=\"mb-2 text-lg font-semibold text-green-800\">\n            Purchase Summary\n          </h3>\n          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n            <p className=\"font-medium text-green-700\">Ticker:</p>\n            <p className=\"font-bold text-green-900\">{ticker}</p>\n            <p className=\"font-medium text-green-700\">Company:</p>\n            <p className=\"text-green-900\">{companyName}</p>\n            <p className=\"font-medium text-green-700\">Quantity:</p>\n            <p className=\"text-green-900\">{quantity} shares</p>\n            <p className=\"font-medium text-green-700\">Price per Share:</p>\n            <p className=\"text-green-900\">${maxPurchasePrice?.toFixed(2)}</p>\n          </div>\n        </div>\n        <div className=\"rounded-md border border-green-300 bg-green-100 p-4\">\n          <p className=\"text-lg font-semibold text-green-800\">Total Cost:</p>\n          <p className=\"text-2xl font-bold text-green-900\">\n            ${(quantity * maxPurchasePrice)?.toFixed(2)}\n          </p>\n        </div>\n        <p className=\"text-center text-sm text-green-600\">\n          Your purchase of {quantity} shares of {companyName} ({ticker}) has\n          been successfully processed.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: NPM command to install necessary packages including Assistant UI, Vercel AI SDK, and LangChain core.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langserve.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react @assistant-ui/react-ai-sdk ai ai/react @langchain/core\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Part Runtime with useContentPartRuntime Hook\nDESCRIPTION: Shows how to use the useContentPartRuntime hook to access runtime information about the current content part.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContentPartRuntime } from \"@assistant-ui/react\";\n\nconst contentPartRuntime = useContentPartRuntime();\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for LangGraph Assistant\nDESCRIPTION: Required environment variables configuration for connecting the assistant-ui to the LangGraph stockbroker backend and setting up the assistant ID.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/with-langgraph/README.md#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_API_URL=https://stockbrokeragent-bracesprouls-projects.vercel.app/api\nNEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=stockbroker\n```\n\n----------------------------------------\n\nTITLE: Creating New LangGraph Assistant Project\nDESCRIPTION: Command to create a new project using the LangGraph assistant-ui template\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-assistant-ui@latest -t langgraph my-app\n```\n\n----------------------------------------\n\nTITLE: Using InProgress Component for Loading States\nDESCRIPTION: Shows how to use the InProgress component to conditionally render content only when a content part is still being generated.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ContentPartPrimitive } from \"@assistant/react\";\n\n<ContentPartPrimitive.InProgress>\n  <LoadingIndicator />\n</ContentPartPrimitive.InProgress>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Content Part State with useContentPartText Hook\nDESCRIPTION: Shows how to use the useContentPartText hook to specifically access the text state of a content part.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContentPartText } from \"@assistant-ui/react\";\n\nconst contentPartText = useContentPartText();\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction Confirmation Pending Component\nDESCRIPTION: React component for displaying the transaction confirmation UI with details and approval/rejection buttons.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CheckIcon, XIcon } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\ntype TransactionConfirmation = {\n  ticker: string;\n  companyName: string;\n  quantity: number;\n  maxPurchasePrice: number;\n  onConfirm: () => void;\n  onReject: () => void;\n};\n\nexport function TransactionConfirmationPending(props: TransactionConfirmation) {\n  const {\n    ticker,\n    companyName,\n    quantity,\n    maxPurchasePrice,\n    onConfirm,\n    onReject,\n  } = props;\n\n  return (\n    <Card className=\"mx-auto w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold\">\n          Confirm Transaction\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-2\">\n          <p className=\"text-muted-foreground text-sm font-medium\">Ticker:</p>\n          <p className=\"text-sm font-bold\">{ticker}</p>\n          <p className=\"text-muted-foreground text-sm font-medium\">Company:</p>\n          <p className=\"text-sm\">{companyName}</p>\n          <p className=\"text-muted-foreground text-sm font-medium\">Quantity:</p>\n          <p className=\"text-sm\">{quantity} shares</p>\n          <p className=\"text-muted-foreground text-sm font-medium\">\n            Max Purchase Price:\n          </p>\n          <p className=\"text-sm\">${maxPurchasePrice?.toFixed(2)}</p>\n        </div>\n        <div className=\"bg-muted rounded-md p-3\">\n          <p className=\"text-sm font-medium\">Total Maximum Cost:</p>\n          <p className=\"text-lg font-bold\">\n            ${(quantity * maxPurchasePrice)?.toFixed(2)}\n          </p>\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex justify-end\">\n        <Button variant=\"outline\" onClick={onReject}>\n          <XIcon className=\"mr-2 h-4 w-4\" />\n          Reject\n        </Button>\n        <Button onClick={onConfirm}>\n          <CheckIcon className=\"mr-2 h-4 w-4\" />\n          Confirm\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: NPM command to install Assistant UI, Vercel AI SDK and related packages.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Message Management Implementation\nDESCRIPTION: Code examples for message accumulation and conversion in LangGraph\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  LangGraphMessageAccumulator,\n  appendLangChainChunk,\n} from \"@assistant-ui/react-langgraph\";\n\nconst accumulator = new LangGraphMessageAccumulator({\n  appendMessage: appendLangChainChunk,\n});\n\n// Add new chunks from the server\nif (event.event === \"messages/partial\") accumulator.addMessages(event.data);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Assistant-Cloud in Bash\nDESCRIPTION: Sets the NEXT_PUBLIC_ASSISTANT_BASE_URL environment variable with the Frontend API URL from the assistant-cloud project settings.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/persistence/ai-sdk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ASSISTANT_BASE_URL=[YOUR_FRONTEND_API_URL]\n```\n\n----------------------------------------\n\nTITLE: Accessing Thread List Item State with useThreadListItem Hook in React\nDESCRIPTION: This snippet shows how to use the useThreadListItem hook to access the state of a specific thread list item. It demonstrates both accessing the entire state and selecting a specific property (title).\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/runtimes/ThreadListItemRuntime.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadListItem } from \"@assistant-ui/react\";\n\nconst threadListItem = useThreadListItem();\nconst title = useThreadListItem((m) => m.title);\n```\n\n----------------------------------------\n\nTITLE: Registering Mastra Agent\nDESCRIPTION: Configuration to register the chef agent with the Mastra instance.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mastra } from \"@mastra/core\";\n\nimport { chefAgent } from \"./agents/chefAgent\";\n\nexport const mastra = new Mastra({\n  agents: { chefAgent },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Mastra Agent Configuration\nDESCRIPTION: TypeScript code to register the chef agent with the Mastra server instance.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mastra } from \"@mastra/core\";\nimport { chefAgent } from \"./agents/chefAgent\";\n\nexport const mastra = new Mastra({\n  agents: { chefAgent },\n});\n```\n\n----------------------------------------\n\nTITLE: Using TextContentPartProvider in React\nDESCRIPTION: This snippet demonstrates how to use the TextContentPartProvider component to wrap a custom component (MyMarkdownText) with text content. It imports the necessary provider from the @assistant-ui/react package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/context-providers/TextContentPartProvider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\n\nconst MyApp = () => {\n  return (\n    <TextContentPartProvider text={\"Hello!\"}>\n      <MyMarkdownText />\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Anthropic environment configuration\nDESCRIPTION: Environment variable configuration for Anthropic API integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nANTHROPIC_API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Fallback UI Component Implementation\nDESCRIPTION: Shows how to implement a fallback approach for handling UI components from external sources using content part placeholders and custom text components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst UI_PLACEHOLDER = Object.freeze({\n  type: \"text\",\n  text: \"UI content placeholder\",\n});\nconst convertMessage = (message: MyMessage): ThreadMessageLike => ({\n  content: [\n    // other content parts,\n    UI_PLACEHOLDER,\n  ],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyText: TextContentPartComponent = () => {\n  const isUIPlaceholder = useContentPart((p) => p === UI_PLACEHOLDER);\n\n  // this assumes that you have a `display` field on your original message objects before conversion.\n  const ui = useMessage((m) =>\n    isUIPlaceholder ? getExternalStoreMessage(m).display : undefined,\n  );\n  if (ui) {\n    return ui;\n  }\n\n  return <MarkdownText />; // your default text component\n};\n\n<Thread\n  assistantMessage={{ components: { Text: MyText } }}\n  userMessage={{ components: { Text: MyText } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting the Servers\nDESCRIPTION: This command executes the 'start.sh' script to start all necessary servers for the project to run. Ensure that the script is properly configured.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/search-agent-for-e-commerce/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./start.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Attachment UI Components\nDESCRIPTION: Implementation of UI components for displaying and managing attachments in the composer and user messages.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/Attachments.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ComposerAttachments,\n  ComposerAddAttachment,\n  UserMessageAttachments,\n} from \"@/components/assistant-ui/attachment\";\n\nconst Composer = () => {\n  return (\n    <ComposerPrimitive.Root className=\"...\">\n      <ComposerAttachments />\n      <ComposerAddAttachment />\n      {/* ... other composer elements */}\n    </ComposerPrimitive.Root>\n  );\n};\n\nconst UserMessage = () => {\n  return (\n    <MessagePrimitive.Root className=\"...\">\n      <UserMessageAttachments />\n      {/* ... other message elements */}\n    </MessagePrimitive.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Fallback UI Component\nDESCRIPTION: Generic fallback UI component for displaying tool calls and results with collapsible sections.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToolCallContentPartComponent } from \"@assistant-ui/react\";\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"../ui/button\";\n\nexport const ToolFallback: ToolCallContentPartComponent = ({\n  toolName,\n  argsText,\n  result,\n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  return (\n    <div className=\"mb-4 flex w-full flex-col gap-3 rounded-lg border py-3\">\n      <div className=\"flex items-center gap-2 px-4\">\n        <CheckIcon className=\"size-4\" />\n        <p className=\"\">\n          Used tool: <b>{toolName}</b>\n        </p>\n        <div className=\"flex-grow\" />\n        <Button onClick={() => setIsCollapsed(!isCollapsed)}>\n          {isCollapsed ? <ChevronUpIcon /> : <ChevronDownIcon />}\n        </Button>\n      </div>\n      {!isCollapsed && (\n        <div className=\"flex flex-col gap-2 border-t pt-2\">\n          <div className=\"px-4\">\n            <pre className=\"whitespace-pre-wrap\">{argsText}</pre>\n          </div>\n          {result !== undefined && (\n            <div className=\"border-t border-dashed px-4 pt-2\">\n              <p className=\"font-semibold\">Result:</p>\n              <pre className=\"whitespace-pre-wrap\">\n                {typeof result === \"string\"\n                  ? result\n                  : JSON.stringify(result, null, 2)}\n              </pre>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Message Conversion Utility\nDESCRIPTION: Utility function for converting LangChain messages to assistant-ui format\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convertLangChainMessages } from \"@assistant-ui/react-langgraph\";\n\nconst threadMessage = convertLangChainMessages(langChainMessage);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-theme Shiki Configuration\nDESCRIPTION: Example of configuring multiple themes in the ShikiHighlighter component\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/SyntaxHighlighting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ShikiHighlighter\n  /* ... */\n  theme={{\n    light: \"github-light\",\n    dark: \"github-dark\",\n  }}\n  /* ... */\n>\n```\n\n----------------------------------------\n\nTITLE: Cohere environment configuration\nDESCRIPTION: Environment variable configuration for Cohere API integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nCOHERE_API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Chart Implementation\nDESCRIPTION: Demonstrates the proper way to implement custom chart display using tool calls and makeAssistantToolUI.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst convertMessage = (message: MyMessage): ThreadMessageLike => {\n  return {\n    content: [\n      {\n        type: \"tool-call\",\n        toolName: \"chart\",\n        args: message.chartData,\n      },\n    ],\n  };\n};\n\nconst ChartToolUI = makeAssistantToolUI({\n  toolName: \"chart\",\n  render: ({ args }) => <MyChart data={args} />,\n});\n\n// use tool UI to display the chart\n<Thread tools={[ChartToolUI]} />;\n```\n\n----------------------------------------\n\nTITLE: CSS Theme Configuration for Shiki\nDESCRIPTION: CSS snippets for implementing responsive theme switching with Shiki\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/SyntaxHighlighting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* for class based dark mode */\nhtml.dark .shiki,\nhtml.dark .shiki span {\n  color: var(--shiki-dark) !important;\n  background-color: var(--shiki-dark-bg) !important;\n  /* Optional, if you also want font styles */\n  font-style: var(--shiki-dark-font-style) !important;\n  font-weight: var(--shiki-dark-font-weight) !important;\n  text-decoration: var(--shiki-dark-text-decoration) !important;\n}\n\n/* for query based dark mode */\n@media (prefers-color-scheme: dark) {\n  .shiki,\n  .shiki span {\n    color: var(--shiki-dark) !important;\n    background-color: var(--shiki-dark-bg) !important;\n    /* Optional, if you also want font styles */\n    font-style: var(--shiki-dark-font-style) !important;\n    font-weight: var(--shiki-dark-font-weight) !important;\n    text-decoration: var(--shiki-dark-text-decoration) !important;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Provider Component\nDESCRIPTION: Client-side runtime provider implementation for handling AI messages and state management.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  type AppendMessage,\n  AssistantRuntimeProvider,\n} from \"@assistant-ui/react\";\nimport { useVercelRSCRuntime } from \"@assistant-ui/react-ai-sdk\";\nimport { useActions, useUIState } from \"ai/rsc\";\nimport { nanoid } from \"nanoid\";\n\nimport type { AI } from \"./actions\";\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const { continueConversation } = useActions();\n  const [messages, setMessages] = useUIState<typeof AI>();\n\n  const onNew = async (m: AppendMessage) => {\n    if (m.content[0]?.type !== \"text\")\n      throw new Error(\"Only text messages are supported\");\n\n    const input = m.content[0].text;\n    setMessages((currentConversation) => [\n      ...currentConversation,\n      { id: nanoid(), role: \"user\", display: input },\n    ]);\n\n    const message = await continueConversation(input);\n\n    setMessages((currentConversation) => [...currentConversation, message]);\n  };\n\n  const runtime = useVercelRSCRuntime({ messages, onNew });\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: BranchPicker Primitive Component Structure\nDESCRIPTION: Defines the structure of branch picker components for navigation between branches including previous, current number, and next functionality.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/overview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Component\n  name=\"BranchPickerPrimitive.Root\"\n  docsLink=\"#branch-picker-primitive-root\"\n  tooltip=\"Root component for the branch picker\"\n>\n  <Component\n    name=\"BranchPickerPrimitive.Previous\"\n    docsLink=\"#branch-picker-primitive-previous\"\n    tooltip=\"Navigates to the previous branch\"\n  />\n  <Component\n    name=\"BranchPickerPrimitive.Number\"\n    docsLink=\"#branch-picker-primitive-number\"\n    tooltip=\"Displays the current branch number\"\n  />\n  <Component\n    name=\"BranchPickerPrimitive.Next\"\n    docsLink=\"#branch-picker-primitive-next\"\n    tooltip=\"Navigates to the next branch\"\n  />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: ActionBar Primitive Component Structure\nDESCRIPTION: Defines the structure of action bar components including copy, edit, reload, speak, and feedback functionality.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/overview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Component\n  name=\"ActionBarPrimitive.Root\"\n  docsLink=\"#action-bar-primitive-root\"\n  tooltip=\"Root component for the action bar\"\n>\n  <Component\n    name=\"ActionBarPrimitive.Copy\"\n    docsLink=\"#action-bar-primitive-copy\"\n    tooltip=\"Copies the message content\"\n  />\n  <Component\n    name=\"ActionBarPrimitive.Edit\"\n    docsLink=\"#action-bar-primitive-edit\"\n    tooltip=\"Edits the message\"\n  />\n  <Component\n    name=\"ActionBarPrimitive.Reload\"\n    docsLink=\"#action-bar-primitive-reload\"\n    tooltip=\"Reloads the message\"\n  />\n  <Component\n    name=\"ActionBarPrimitive.Speak\"\n    docsLink=\"#action-bar-primitive-speak\"\n    tooltip=\"Speaks the message content\"\n  />\n  <Component\n    name=\"ActionBarPrimitive.StopSpeaking\"\n    docsLink=\"#action-bar-primitive-stop-speaking\"\n    tooltip=\"Stops speaking the message\"\n  />\n  <Component\n    name=\"ActionBarPrimitive.FeedbackPositive\"\n    docsLink=\"#action-bar-primitive-feedback-positive\"\n    tooltip=\"Provides positive feedback\"\n  />\n  <Component\n    name=\"ActionBarPrimitive.FeedbackNegative\"\n    docsLink=\"#action-bar-primitive-feedback-negative\"\n    tooltip=\"Provides negative feedback\"\n  />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component and Architecture Diagram in Next.js\nDESCRIPTION: This code snippet imports the Image component from Next.js and an architecture diagram image. It then uses the Image component to display the architecture diagram with specific properties.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/concepts/architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from \"next/image\";\nimport architecture from \"@/assets/docs/architecture.png\";\n\n<Image\n  src={architecture}\n  alt=\"Architecture diagram, UI components connected to the runtime layer and the runtime layer connected to LLM and tools\"\n  height={300}\n  className=\"mx-auto my-2 dark:hue-rotate-180 dark:invert\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Fireworks environment configuration\nDESCRIPTION: Environment variable configuration for Fireworks.ai integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nFIREWORKS_API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Updating Tool UI Render Function in TypeScript\nDESCRIPTION: This snippet shows how to update the tool UI render function to access content part properties directly.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n makeAssistantToolUI({\n   ...\n-  render: ({ part: { args } }) => <>{args}</>,\n+  render: ({ args }) => <>{args}</>,\n });\n```\n\n----------------------------------------\n\nTITLE: Using Redirect Component in React JSX\nDESCRIPTION: Renders the imported Redirect component. This is likely used to redirect users to another page, possibly the main GitHub assistant tool page.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/blog/2024-12-15/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Redirect />\n```\n\n----------------------------------------\n\nTITLE: Wrapping App in MyRuntimeProvider in Next.js\nDESCRIPTION: Demonstrates how to wrap the Next.js app in the custom MyRuntimeProvider component to enable chat functionality throughout the application.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/local.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ReactNode } from \"react\";\nimport { MyRuntimeProvider } from \"@/app/MyRuntimeProvider\";\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <MyRuntimeProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </MyRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mastra Agent Configuration\nDESCRIPTION: Implementation of a chef agent using Mastra's Agent class with OpenAI integration.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { Agent } from \"@mastra/core/agent\";\n\nexport const chefAgent = new Agent({\n  name: \"chef-agent\",\n  instructions:\n    \"You are Michel, a practical and experienced home chef. \" +\n    \"You help people cook with whatever ingredients they have available.\",\n  model: openai(\"gpt-4o-mini\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Annotations and Data Packets in TypeScript\nDESCRIPTION: Illustrates the structure for accessing annotations and data packets in assistant messages. This improvement provides more detailed information from AI responses.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/blog/2025-01-31-changelog/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype AssistantMessage = {\n  metadata: {\n    unstable_annotations: [...],\n    unstable_data: [...],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern Example for Custom Chart\nDESCRIPTION: Shows incorrect implementation of custom chart display using UIContentPart, which tightly couples data and presentation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// THIS IS BAD\nconst convertMessage = (message: MyMessage): ThreadMessageLike => {\n  return { content: [{ type: \"ui\", display: <MyChart data={message.chartData} /> }] };\n};\n```\n\n----------------------------------------\n\nTITLE: Extended Example with Form Input Component\nDESCRIPTION: Shows a more complex implementation using a form input component with labels and additional props, demonstrating how makeAssistantVisible maintains component functionality while adding readability.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/copilots/make-assistant-readable.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Create a readable form input\nconst Input = ({ label, ...props }) => (\n  <div>\n    <label>{label}</label>\n    <input {...props} />\n  </div>\n);\n\nconst ReadableInput = makeAssistantVisible(Input);\n\n// Use in your component\nfunction Form() {\n  return (\n    <ReadableInput label=\"Email\" type=\"email\" placeholder=\"Enter your email\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Assistant Form Hook Reference\nDESCRIPTION: Main hook to use for Assistant UI form integration\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-hook-form/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`useAssistantForm`\n```\n\n----------------------------------------\n\nTITLE: Importing Redirect Component in React JSX\nDESCRIPTION: Imports a Redirect component from a local file to be used in the page. This component likely handles redirecting users to another page or URL.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/blog/2024-12-15/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Redirect } from \"./redirect\";\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for LangGraph API configuration in development and production\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# LANGCHAIN_API_KEY=your_api_key # for production\n# LANGGRAPH_API_URL=your_api_url # for production\nNEXT_PUBLIC_LANGGRAPH_API_URL=your_api_url # for development (no api key required)\nNEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=your_graph_id\n```\n\n----------------------------------------\n\nTITLE: Initial API Route Implementation\nDESCRIPTION: Default implementation of the chat API route using OpenAI and the Vercel AI SDK.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\n// Allow streaming responses up to 30 seconds\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n\n  const result = streamText({\n    model: openai(\"gpt-4o-mini\"),\n    messages,\n  });\n\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Google Vertex AI environment configuration\nDESCRIPTION: Environment variable configuration for Google Vertex AI integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nGOOGLE_VERTEX_PROJECT=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nGOOGLE_VERTEX_LOCATION=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nGOOGLE_APPLICATION_CREDENTIALS=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Loading State Implementation\nDESCRIPTION: Shows the correct way to implement loading state by separating UI and data concerns using component props.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst convertMessage = (message: MyMessage): ThreadMessageLike => {\n  if (message.isLoading) {\n    return { content: [] };\n  }\n  // ...\n};\n\n// use the empty content part to show the loading indicator\n<Thread assistantMessage={{ components: { Empty: MyLoader } }} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama API URL\nDESCRIPTION: Environment variable configuration for connecting to local Ollama instance API endpoint.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/local-ollama/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOLLAMA_API_URL=http:/x.x.x.x:11434/api\n```\n\n----------------------------------------\n\nTITLE: Form Hook Replacement Reference\nDESCRIPTION: Reference to the useAssistantForm hook that replaces useForm from React Hook Form\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-hook-form/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`useForm`\n```\n\n----------------------------------------\n\nTITLE: Configuring RSC Display Component\nDESCRIPTION: Setup code for enabling React Server Components display in the Thread component or unstyled primitives. Shows how to integrate RSCDisplay from the AI SDK.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RSCDisplay } from \"@assistant-ui/react-ai-sdk\";\n\n// if you are using the default Thread component\n// add RSCDisplay to assistantMessage.components.Text\n<Thread assistantMessage={{ components: { Text: RSCDisplay } }} />\n\n\n// if you are using unstyled primitives, update MyThread.tsx\n<MessagePrimitive.Content components={{ Text: RSCDisplay }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Backend Route for Assistant API\nDESCRIPTION: This code sets up a backend route for the Assistant API, handling POST requests, creating threads, and streaming responses using OpenAI's API.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AssistantResponse } from \"ai\";\nimport OpenAI from \"openai\";\nimport type { Run } from \"openai/resources/beta/threads/runs/runs\";\n\nconst openai = new OpenAI();\n\n// Allow streaming responses up to 30 seconds\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  // Parse the request body\n  const input: {\n    threadId: string | null;\n    message: string;\n  } = await req.json();\n\n  // Create a thread if needed\n  const threadId = input.threadId ?? (await openai.beta.threads.create({})).id;\n\n  // Add a message to the thread\n  const createdMessage = await openai.beta.threads.messages.create(threadId, {\n    role: \"user\",\n    content: input.message,\n  });\n\n  return AssistantResponse(\n    { threadId, messageId: createdMessage.id },\n    async ({ forwardStream, sendDataMessage }) => {\n      // Run the assistant on the thread\n      const runStream = openai.beta.threads.runs.stream(threadId, {\n        assistant_id:\n          process.env.ASSISTANT_ID ??\n          (() => {\n            throw new Error(\"ASSISTANT_ID is not set\");\n          })(),\n      });\n\n      // forward run status would stream message deltas\n      let runResult: Run = await forwardStream(runStream);\n\n      // status can be: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired\n      while (\n        runResult?.status === \"requires_action\" &&\n        runResult.required_action?.type === \"submit_tool_outputs\"\n      ) {\n        const tool_outputs =\n          runResult.required_action.submit_tool_outputs.tool_calls.map(\n            (toolCall: any) => {\n              const parameters = JSON.parse(toolCall.function.arguments);\n\n              switch (toolCall.function.name) {\n                // configure your tool calls here\n\n                default:\n                  throw new Error(\n                    `Unknown tool call function: ${toolCall.function.name}`,\n                  );\n              }\n            },\n          );\n\n        runResult = await forwardStream(\n          openai.beta.threads.runs.submitToolOutputsStream(\n            threadId,\n            runResult.id,\n            { tool_outputs },\n          ),\n        );\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Page Component Integration\nDESCRIPTION: Next.js page component implementation integrating the MyAssistant component\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyAssistant } from \"@/components/MyAssistant\";\n\nexport default function Home() {\n  return (\n    <main className=\"h-dvh\">\n      <MyAssistant />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Component Property Types Import in TypeScript\nDESCRIPTION: This snippet demonstrates how to update the import and usage of component property types, which are now organized under the component itself.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { ThreadPrimitiveMessagesProps } from \"@assistant-ui/react\";\n+import { ThreadPrimitive } from \"@assistant-ui/react\";\n\n-type Props = ThreadPrimitiveMessagesProps;\n+type Props = ThreadPrimitive.Messages.Props;\n```\n\n----------------------------------------\n\nTITLE: Switching to New Thread in TypeScript\nDESCRIPTION: This change shows how to update the method for switching to a new thread using the thread runtime.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-useThreadRuntime().switchToThread(null);\n+useThreadRuntime().switchToNewThread();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Integration with Custom API Backend using Mermaid\nDESCRIPTION: This diagram shows the architecture for integrating assistant-ui with a custom API backend. It illustrates the flow from frontend components through the runtime and custom API to external services.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/architecture.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Frontend Components] --> B[Runtime]\n    B --> E[Your API Backend]\n    E --> D[External Providers or LLM APIs]\n    \n    \n    classDef default color:#f8fafc,text-align:center\n    \n    style A fill:#e879f9,stroke:#2e1065,stroke-width:2px,color:#2e1065,font-weight:bold\n    style B fill:#93c5fd,stroke:#1e3a8a,stroke-width:2px,color:#1e3a8a,font-weight:bold\n    style D fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold\n    style E fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold\n    \n    class A,B,C,D,E default\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component for React 18 Compatibility\nDESCRIPTION: This snippet shows how to modify the Button component to work with React 18 by wrapping it with forwardRef. It includes both the original and updated versions of the component.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/react-compatibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\n// After\nconst Button = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> &\n    VariantProps<typeof buttonVariants> & {\n      asChild?: boolean;\n    }\n>(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nButton.displayName = \"Button\";\n```\n\n----------------------------------------\n\nTITLE: Installing Assistant UI via NPX\nDESCRIPTION: Commands to initialize Assistant UI in new or existing projects using NPX. The library can be installed using 'npx assistant-ui create' for new projects or 'npx assistant-ui init' for existing ones.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx assistant-ui create\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx assistant-ui init\n```\n\n----------------------------------------\n\nTITLE: Visualizing Direct Integration with External Providers using Mermaid\nDESCRIPTION: This diagram illustrates the architecture for direct integration of assistant-ui with external providers or LLM APIs. It shows the flow from frontend components through the runtime to external services.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Frontend Components] --> B[Runtime]\n    B --> D[External Providers or LLM APIs]\n    \n    \n    classDef default color:#f8fafc,text-align:center\n    \n    style A fill:#e879f9,stroke:#2e1065,stroke-width:2px,color:#2e1065,font-weight:bold\n    style B fill:#93c5fd,stroke:#1e3a8a,stroke-width:2px,color:#1e3a8a,font-weight:bold\n    style D fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold\n    \n    class A,B,C,D,E default\n```\n\n----------------------------------------\n\nTITLE: Custom Scrollbar CSS Styling\nDESCRIPTION: CSS styles for the Radix UI Viewport component's content element, applying flexbox layout and background inheritance.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Scrollbar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.thread-viewport > [data-radix-scroll-area-content] {\n  @apply flex flex-col items-center self-stretch bg-inherit;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Message Append Method in TypeScript\nDESCRIPTION: This change shows how to update the method for appending messages using the thread runtime instead of a separate hook.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-const append = useAppendMessage();\n+const threadRuntime = useThreadRuntime();\n-append(\"hello world\");\n+threadRuntime.append(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with OpenAI in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Using Tool UI Hooks for Web Search\nDESCRIPTION: This code snippet shows how to create a Tool UI hook for a web search tool, providing more flexibility in component implementation. It defines the types and implements a basic render function.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeAssistantToolUI } from \"@assistant-ui/react\";\n\ntype WebSearchArgs = {\n  query: string;\n};\n\ntype WebSearchResult = {\n  title: string;\n  description: string;\n  url: string;\n};\n\nexport const useWebSearchToolUI = makeAssistantToolUI<\n  WebSearchArgs,\n  WebSearchResult\n>({\n  toolName: \"web_search\",\n  render: ({ args, status }) => {\n    return <p>web_search({args.query})</p>;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing assistant-ui CLI for Project Setup\nDESCRIPTION: Command line instructions for setting up assistant-ui in new or existing projects using the CLI tool. The npx commands will initialize the library in your project environment.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx assistant-ui create\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx assistant-ui init\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Cohere in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/cohere\n```\n\n----------------------------------------\n\nTITLE: Installing assistant-ui in a Next.js Project\nDESCRIPTION: Commands to create a Next.js project and install the @assistant-ui/react package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/custom/local.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest my-app\ncd my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react\n```\n\n----------------------------------------\n\nTITLE: Updating Message Access in TypeScript\nDESCRIPTION: This snippet shows how to update the way message content is accessed, as MessageState is now itself a message.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-useMessage(m => m.message.content);\n+useMessage(m => m.content);\n```\n\n----------------------------------------\n\nTITLE: Installing Anthropic provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Anthropic in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/anthropic\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Provider Component\nDESCRIPTION: Client-side runtime provider component that integrates Vercel AI SDK's chat functionality with Assistant UI.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langserve.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useChat } from \"ai/react\";\nimport { AssistantRuntimeProvider } from \"@assistant-ui/react\";\nimport { useVercelUseChatRuntime } from \"@assistant-ui/react-ai-sdk\";\n\nexport function MyRuntimeProvider({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const chat = useChat({\n    api: \"/api/chat\",\n    unstable_AISDKInterop: true,\n  });\n\n  const runtime = useVercelUseChatRuntime(chat);\n\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      {children}\n    </AssistantRuntimeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatOpenAI with Helicone in LangChain (Python)\nDESCRIPTION: This snippet shows how to configure the ChatOpenAI model in LangChain with Helicone integration. It sets the API base URL and adds the Helicone-Auth header to the API requests.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/helicone.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.chat_models import ChatOpenAI\nimport os\n\nllm = ChatOpenAI(\n    model_name=\"gpt-3.5-turbo\",\n    temperature=0,\n    openai_api_base=\"https://oai.helicone.ai/v1\",\n    openai_api_key=os.environ[\"OPENAI_API_KEY\"],\n    openai_api_headers={\"Helicone-Auth\": f\"Bearer {os.environ['HELICONE_API_KEY']}\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: NPM command to install Vercel AI SDK and related packages.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai zod nanoid\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel AI SDK and Assistant UI Packages\nDESCRIPTION: NPM command to install required packages including Vercel AI SDK and Assistant UI components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Updating Content Part Access in TypeScript\nDESCRIPTION: This change demonstrates how to update content part access, as ContentPartState is now itself a content part.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-useContentPart(c => c.part.type);\n+useContentPart(c => c.type);\n```\n\n----------------------------------------\n\nTITLE: Installing AWS provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with AWS in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/amazon-bedrock\n```\n\n----------------------------------------\n\nTITLE: Accessing AI SDK Messages\nDESCRIPTION: Example of using getExternalStoreMessages utility to convert ThreadMessages to AI SDK Messages.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyAssistantMessage = () => {\n  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));\n  // ...\n};\n\nconst WeatherToolUI = makeAssistantToolUI({\n  render: () => {\n    const aiSDKMessage = useContentPart((p) => getExternalStoreMessages(p)[0]);\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Assistant UI in Existing Project\nDESCRIPTION: Command to initialize Assistant UI in an existing project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui@latest init\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel AI SDK and Assistant UI Dependencies\nDESCRIPTION: This command installs the necessary npm packages for integrating Vercel AI SDK and Assistant UI components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react @assistant-ui/react-ai-sdk ai openai\n```\n\n----------------------------------------\n\nTITLE: Replacing Context Hooks with Direct Imports in TypeScript\nDESCRIPTION: This change shows how to replace context-specific hooks like useThreadContext with direct imports from @assistant-ui/react.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-const { useThread } = useThreadContext();\n\n+import { useThread } from \"@assistant-ui/react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Groq provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Groq in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Visualizing Integration with Assistant Cloud using Mermaid\nDESCRIPTION: This diagram depicts the architecture for integrating assistant-ui with Assistant Cloud. It shows the flow from frontend components through the runtime, Assistant Cloud, and optionally a custom API backend to external services.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/architecture.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Frontend Components] --> B[Runtime]\n    B --> C[Cloud]\n    E --> C\n    C --> D[External Providers or LLM APIs]\n    B --> E[Your API Backend]\n    \n    classDef default color:#f8fafc,text-align:center\n    \n    style A fill:#e879f9,stroke:#2e1065,stroke-width:2px,color:#2e1065,font-weight:bold\n    style B fill:#93c5fd,stroke:#1e3a8a,stroke-width:2px,color:#1e3a8a,font-weight:bold\n    style C fill:#86efac,stroke:#064e3b,stroke-width:2px,color:#064e3b,font-weight:bold\n    style D fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold\n    style E fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold\n    \n    class A,B,C,D,E default\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Mastra Integration\nDESCRIPTION: Required folder structure for Mastra configuration files.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n/\n├── mastra/\n│   ├── agents/\n│   │   └── chefAgent.ts\n│   └── index.ts\n└── ... (rest of your project)\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-1.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Gemini provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Gemini in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/google\n```\n\n----------------------------------------\n\nTITLE: Using Plain Text ContentPartPrimitive\nDESCRIPTION: Shows how to import and use the basic text primitive for displaying plain text content parts.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ContentPartPrimitive } from \"@assistant/react\";\n\n<ContentPartPrimitive.Text />;\n```\n\n----------------------------------------\n\nTITLE: Installing Chrome AI provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Chrome AI in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk chrome-ai\n```\n\n----------------------------------------\n\nTITLE: Installing Azure provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Azure in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/azure\n```\n\n----------------------------------------\n\nTITLE: Installing GCP provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Google Cloud Platform in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk @ai-sdk/google-vertex\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the development server for local testing and development.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/local-ollama/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing React Syntax Highlighter\nDESCRIPTION: Command to add the legacy syntax-highlighter component using shadcn\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/SyntaxHighlighting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/syntax-highlighter\"\n```\n\n----------------------------------------\n\nTITLE: Using External Store Messages\nDESCRIPTION: Example of accessing AI SDK messages using the getExternalStoreMessages utility.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyAssistantMessage = () => {\n  const myMessage = useMessage((m) => getExternalStoreMessages(m)[0]);\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Mastra Dependencies\nDESCRIPTION: Command to install required Mastra packages and OpenAI provider.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mastra/core@latest @mastra/memory@latest @ai-sdk/openai\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama provider dependencies\nDESCRIPTION: NPM command to install required dependencies for integrating with Ollama in an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm install ai @assistant-ui/react-ai-sdk ollama-ai-provider\n```\n\n----------------------------------------\n\nTITLE: Creating Mastra Directory Structure\nDESCRIPTION: Commands to create the necessary Mastra directories and files.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p mastra/agents\ntouch mastra/index.ts mastra/agents/chefAgent.ts\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Command to install required shadcn/ui card component.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add card\n```\n\n----------------------------------------\n\nTITLE: Installing Thread Component with shadcn\nDESCRIPTION: Command to add the Thread component to a project using the shadcn CLI. Creates a thread.tsx file in the components directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Thread.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/thread\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stock Purchase Tool Types\nDESCRIPTION: Type definitions for stock purchase tool arguments and results, defining the structure of purchase requests and approval responses.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PurchaseStockArgs = {\n  ticker: string;\n  companyName: string;\n  quantity: number;\n  maxPurchasePrice: number;\n};\n\ntype PurchaseStockResult = {\n  approve?: boolean;\n  cancelled?: boolean;\n  error?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Project with CLI\nDESCRIPTION: This snippet shows how to create a new Next.js project using the create-next-app command-line tool.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Message Primitive Component Structure\nDESCRIPTION: Defines the structure of message components including content, attachments, and conditional rendering capabilities.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Component\n  name=\"MessagePrimitive.Root\"\n  docsLink=\"#message-primitive-root\"\n  tooltip=\"Root component for a message\"\n>\n  <Component\n    name=\"MessagePrimitive.Content\"\n    isContextProvider={true}\n    providedContexts={[\n      {\n        name: \"ContentPart Context\",\n        color: contextColors[\"ContentPart Context\"],\n      },\n    ]}\n    docsLink=\"#message-primitive-content\"\n    tooltip=\"Displays the content of the message\"\n  />\n  <Component\n    name=\"MessagePrimitive.Attachments\"\n    isContextProvider={true}\n    providedContexts={[\n      {\n        name: \"Attachment Context\",\n        color: contextColors[\"Attachment Context\"],\n      },\n    ]}\n    docsLink=\"#message-primitive-attachments\"\n    tooltip=\"Displays attachments in the message\"\n  />\n  <Component\n    name=\"MessagePrimitive.If\"\n    docsLink=\"#message-primitive-if\"\n    tooltip=\"Conditional rendering within the message\"\n  />\n</Component>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with NPX\nDESCRIPTION: Commands to create a new Next.js project and navigate to its directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Assistant Sidebar Component using NPX\nDESCRIPTION: Command to add the assistant-sidebar component to a project using the shadcn package manager. This installs the component at /components/assistant-ui/assistant-sidebar.tsx\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/AssistantSidebar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/assistant-sidebar\"\n```\n\n----------------------------------------\n\nTITLE: Installing ThreadList Component via NPX\nDESCRIPTION: Command to add the thread-list component to your project using shadcn package manager. This will create a thread-list.tsx file in your components directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/ThreadList.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/thread-list\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variable configuration for connecting the frontend to a LangGraph Cloud endpoint with assistant ID settings.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-1.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nLANGGRAPH_API_URL=https://assistant-ui-stockbroker.vercel.app/api\nNEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=stockbroker\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Installation\nDESCRIPTION: Installing required npm packages for Assistant UI with LangGraph integration\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @assistant-ui/react @assistant-ui/react-ui @assistant-ui/react-langgraph @langchain/langgraph-sdk\n```\n\n----------------------------------------\n\nTITLE: Wrapping App in MyRuntimeProvider\nDESCRIPTION: Modification of the Next.js root layout to include the MyRuntimeProvider component.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MyRuntimeProvider } from '@/app/MyRuntimeProvider';\n\n...\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <MyRuntimeProvider>\n      <html lang=\"en\">\n        <body className={inter.className}>\n          {children}\n        </body>\n      </html>\n    </MyRuntimeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the application in development mode\nDESCRIPTION: Command to start the development server for an assistant-ui project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Assistant Modal Component using shadcn\nDESCRIPTION: Command to add the assistant-modal component to your project using shadcn CLI tool. This will create the component file in your project's components directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/AssistantModal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/assistant-modal\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Assistant UI CLI\nDESCRIPTION: Command to execute the Assistant UI CLI tool using npx to add components. This allows running the latest version without a local installation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui@latest add\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable File\nDESCRIPTION: This command creates a '.env' file that stores the OpenAI API key needed for the project. Replace the placeholder with your actual API key to enable functionality that requires it.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/search-agent-for-e-commerce/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nOPENAI_API_KEY=\"skXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with LangGraph Template\nDESCRIPTION: Commands to create a new Next.js project using the LangGraph assistant-ui template and navigate to the project directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-assistant-ui@latest -t langgraph my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern Example for Loading State\nDESCRIPTION: Demonstrates incorrect implementation of loading state using UIContentPart, which couples UI and data layers.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// THIS IS BAD\nconst convertMessage = (message: MyMessage): ThreadMessageLike => {\n  if (message.isLoading) {\n    return { content: [{ type: \"ui\", display:< MyLoader /> }] };\n  }\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Postinstall Script to package.json\nDESCRIPTION: This JSON snippet shows how to add a postinstall script to package.json for applying patches using patch-package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/react-compatibility.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"patch-package\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ThreadList Component with Shadcn in Bash\nDESCRIPTION: This command installs the ThreadList component from the assistant-ui library using the Shadcn package manager.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/persistence/langgraph.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/thread-list\"\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Command to install required shadcn/ui components for the approval interface.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add card button\n```\n\n----------------------------------------\n\nTITLE: Installing Markdown Text Component via Shadcn\nDESCRIPTION: Command to add the markdown-text component to the project using shadcn CLI.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Markdown.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/markdown-text\"\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Scroll Area Package\nDESCRIPTION: Command to install the release candidate version of @radix-ui/react-scroll-area package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Scrollbar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @radix-ui/react-scroll-area@next\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Assistant-Cloud in Bash\nDESCRIPTION: This snippet shows how to set the NEXT_PUBLIC_ASSISTANT_BASE_URL environment variable with the Frontend API URL from assistant-cloud.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/cloud/persistence/langgraph.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ASSISTANT_BASE_URL=https://<your-frontend-api-url>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository with Git\nDESCRIPTION: This command clones the Assistant UI repository from GitHub to the local machine. Ensure that Git is installed in your environment before executing this command.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/search-agent-for-e-commerce/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/assistant-ui/assistant-ui.git\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to navigate into the newly created Mastra project directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd your-mastra-server-directory\n```\n\n----------------------------------------\n\nTITLE: Running Assistant UI Upgrade Codemod in Shell\nDESCRIPTION: Shows the command to run the Assistant UI upgrade codemod. This script updates the codebase to use the new @assistant-ui/react-ui package for styled components.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/blog/2025-01-31-changelog/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with CLI\nDESCRIPTION: Commands to create a new Next.js project and navigate to its directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Migration Codemod for Assistant UI\nDESCRIPTION: Command to run the automated migration tool for updating import paths to the new @assistant-ui/react-ui package. Should be run after backing up or committing changes.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-8.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Components with React Syntax Highlighter\nDESCRIPTION: Integration of legacy SyntaxHighlighter component into markdown-text.tsx default components\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/SyntaxHighlighting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SyntaxHighlighter } from \"./syntax-highlighter\";\n\nexport const defaultComponents = memoizeMarkdownComponents({\n  SyntaxHighlighter: SyntaxHighlighter, // [!code ++]\n  h1: /* ... */,\n  // ...other elements...\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current working directory to the 'assistant-ui/examples/search-agent-for-e-commerce' directory. This is necessary to set up the project in the correct folder.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/search-agent-for-e-commerce/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd assistant-ui/examples/search-agent-for-e-commerce\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Lists required Python packages and their version constraints. Specifies assistant-stream version 0.0.7 and fastapi version 0.115.0 as dependencies.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/python/assistant-stream-hello-world/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nassistant-stream==0.0.7\nfastapi==0.115.0\n```\n\n----------------------------------------\n\nTITLE: Running Example Projects in Development Mode\nDESCRIPTION: Commands to navigate to a specific example project directory and start it in development mode.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/<your-example>\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Assistant UI Projects\nDESCRIPTION: Commands for creating new or initializing existing Assistant UI projects.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx assistant-ui@latest create\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx assistant-ui@latest init\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for Feature Cards in React\nDESCRIPTION: This snippet imports specific icon components from the 'lucide-react' library, which are used to illustrate features of assistant-ui in the documentation.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/about-assistantui.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Sparkles, PanelsTopLeft, Database, Terminal } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Shiki Highlighter Component\nDESCRIPTION: Command to add the shiki-highlighter component to the project using shadcn\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/SyntaxHighlighting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/shiki-highlighter\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Data Structure\nDESCRIPTION: Markdown-formatted changelog entries documenting version updates, patches, bug fixes and dependency updates for the @assistant-ui/react-langgraph package.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-langgraph/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @assistant-ui/react-langgraph\n\n## 0.5.2\n\n### Patch Changes\n\n- fix: ESM without bundler compat\n- Updated dependencies\n  - @assistant-ui/react@0.10.2\n\n## 0.5.1\n\n### Patch Changes\n\n- fix: correctly include Typescript declarations\n- Updated dependencies\n  - @assistant-ui/react@0.10.1\n```\n\n----------------------------------------\n\nTITLE: Updating Attachment Access in TypeScript\nDESCRIPTION: This change illustrates how to update attachment access, as AttachmentState is now itself an attachment.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/migrations/v0-7.mdx#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-useAttachment(a => a.attachment.type);\n+useAttachment(a => a.type);\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirect in Next.js using JSX\nDESCRIPTION: This code snippet uses Next.js's redirect function to automatically navigate users from the documentation landing page to the getting-started section. It's implemented as a Fragment component that executes the redirect when the page is loaded.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\n\n<>{redirect(\"/docs/getting-started\")}</>\n```\n\n----------------------------------------\n\nTITLE: Version 0.10.3 Changelog Entry\nDESCRIPTION: Changelog entry for version 0.10.3 documenting ESM bundler compatibility fix and dependency updates.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-ai-sdk/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.10.3\n\n### Patch Changes\n\n- fix: ESM without bundler compat\n- Updated dependencies\n  - @assistant-ui/react-edge@0.2.2\n  - @assistant-ui/react@0.10.2\n```\n\n----------------------------------------\n\nTITLE: Groq environment configuration\nDESCRIPTION: Environment variable configuration for Groq API integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nGROQ_API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Running Postinstall Script for Patch Application\nDESCRIPTION: This bash command runs the postinstall script to apply the patch created for zustand compatibility with React 17.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/react-compatibility.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run postinstall\n# or\nyarn postinstall\n```\n\n----------------------------------------\n\nTITLE: Installing ToolFallback component using shadcn\nDESCRIPTION: This command uses shadcn to add the ToolFallback component to your project. It fetches the component from the specified URL and integrates it into your component library.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/ToolFallback.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/tool-fallback\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.10.2\nDESCRIPTION: Documents patch changes for version 0.10.2 including ESM bundler compatibility fix and dependency updates\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-syntax-highlighter/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.10.2\n\n### Patch Changes\n\n- fix: ESM without bundler compat\n- Updated dependencies\n  - @assistant-ui/react-markdown@0.10.2\n  - @assistant-ui/react@0.10.2\n```\n\n----------------------------------------\n\nTITLE: Version 0.10.2 Changelog Entry\nDESCRIPTION: Changelog entry for version 0.10.2 documenting TypeScript declarations fix and dependency updates.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-ai-sdk/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.10.2\n\n### Patch Changes\n\n- fix: correctly include Typescript declarations\n- Updated dependencies\n  - @assistant-ui/react-edge@0.2.1\n  - @assistant-ui/react@0.10.1\n```\n\n----------------------------------------\n\nTITLE: Version 0.10.1 Changelog Entry\nDESCRIPTION: Changelog entry for version 0.10.1 documenting addition of AISDKMessageConverter API.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-ai-sdk/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.10.1\n\n### Patch Changes\n\n- feat: AISDKMessageConverter API\n```\n\n----------------------------------------\n\nTITLE: Installing Polyfill Packages for React 17\nDESCRIPTION: This bash command installs the necessary packages for adding a polyfill for the useSyncExternalStore hook, which is required for React 17 compatibility with zustand.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/react-compatibility.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install use-sync-external-store patch-package\n# or\nyarn add use-sync-external-store patch-package\n```\n\n----------------------------------------\n\nTITLE: Installing Components with shadcn CLI in Shell\nDESCRIPTION: Demonstrates how to use the shadcn CLI to install Assistant UI components. This new feature allows for easier integration of components into projects.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/blog/2025-01-31-changelog/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add \"https://r.assistant-ui.com/thread\"\n```\n\n----------------------------------------\n\nTITLE: Google Gemini environment configuration\nDESCRIPTION: Environment variable configuration for Google Gemini AI integration in a .env.local file.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/getting-started.mdx#2025-04-21_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nGOOGLE_GENERATIVE_AI_API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.10.1\nDESCRIPTION: Documents patch changes for version 0.10.1 including Typescript declarations fix and dependency updates\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-syntax-highlighter/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.10.1\n\n### Patch Changes\n\n- fix: correctly include Typescript declarations\n- Updated dependencies\n  - @assistant-ui/react-markdown@0.10.1\n  - @assistant-ui/react@0.10.1\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Structured changelog documenting version changes for create-assistant-ui package, including patch versions and their associated changes.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/create-assistant-ui/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# create-assistant-ui\n\n## 0.0.20\n\n### Patch Changes\n\n- fix: ESM without bundler compat\n\n## 0.0.19\n\n### Patch Changes\n\n- fix: correctly include Typescript declarations\n\n## 0.0.18\n\n### Patch Changes\n\n- 557c3f7: build: drop CJS builds\n\n## 0.0.17\n\n### Patch Changes\n\n- chore: update deps\n\n## 0.0.16\n\n### Patch Changes\n\n- b9c731a: chore: update dependencies\n\n## 0.0.15\n\n### Patch Changes\n\n- 94e9f71: fix: make create CLI work\n\n## 0.0.14\n\n### Patch Changes\n\n- chore: update deps\n\n## 0.0.13\n\n### Patch Changes\n\n- 39aecd7: chore: update dependencies\n\n## 0.0.12\n\n### Patch Changes\n\n- fix: create CLI\n\n## 0.0.11\n\n### Patch Changes\n\n- 72e66db: chore: update dependencies\n\n## 0.0.10\n\n### Patch Changes\n\n- c760cb3: fix: node 20 support\n\n## 0.0.9\n\n### Patch Changes\n\n- 22272e6: chore: update dependencies\n\n## 0.0.8\n\n### Patch Changes\n\n- 345f3d5: chore: update dependencies\n\n## 0.0.7\n\n### Patch Changes\n\n- 4c2bf58: chore: update dependencies\n\n## 0.0.6\n\n### Patch Changes\n\n- 982a6a2: chore: update dependencies\n\n## 0.0.5\n\n### Patch Changes\n\n- ec3b8cc: chore: update dependencies\n\n## 0.0.4\n\n### Patch Changes\n\n- 4c54273: chore: update dependencies\n\n## 0.0.3\n\n### Patch Changes\n\n- 2112ce8: chore: update dependencies\n\n## 0.0.2\n\n### Patch Changes\n\n- 933b8c0: chore: update deps\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/local-ollama/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Mastra Server Project with CLI\nDESCRIPTION: Command to create a new Mastra server project using the create-mastra CLI tool.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-mastra@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Layout\nDESCRIPTION: Root layout configuration with AI and Runtime Provider integration.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AI } from '@/app/actions';\nimport { MyRuntimeProvider } from '@/app/MyRuntimeProvider';\n\n...\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <AI>\n      <MyRuntimeProvider>\n        <html lang=\"en\">\n          <body className={inter.className}>\n            {children}\n          </body>\n        </html>\n      </MyRuntimeProvider>\n    </AI>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with CLI\nDESCRIPTION: Command line instructions for creating a new Next.js project using create-next-app.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langserve.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-next-app@latest my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog with Version History\nDESCRIPTION: Changelog entries documenting version changes, fixes, and dependency updates for @assistant-ui/react-edge package from version 0.1.1 to 0.2.2. Includes patch changes, build updates, and dependency version bumps.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-edge/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @assistant-ui/react-edge\n\n## 0.2.2\n\n### Patch Changes\n\n- fix: ESM without bundler compat\n- Updated dependencies\n  - @assistant-ui/react@0.10.2\n\n## 0.2.1\n\n### Patch Changes\n\n- fix: correctly include Typescript declarations\n- Updated dependencies\n  - @assistant-ui/react@0.10.1\n\n## 0.2.0\n\n### Patch Changes\n\n- 557c3f7: build: drop CJS builds\n- Updated dependencies [557c3f7]\n  - @assistant-ui/react@0.9.7\n\n## 0.1.6\n\n### Patch Changes\n\n- chore: update deps\n- Updated dependencies\n  - @assistant-ui/react@0.9.6\n\n## 0.1.5\n\n### Patch Changes\n\n- 91897ee: fix: circular import causes zod schemas to break\n\n## 0.1.4\n\n### Patch Changes\n\n- chore: bump assistant-stream dependency\n- Updated dependencies\n- Updated dependencies [1ad0696]\n  - @assistant-ui/react@0.9.5\n\n## 0.1.3\n\n### Patch Changes\n\n- b9c731a: chore: update dependencies\n- Updated dependencies [62c2af7]\n- Updated dependencies [b9c731a]\n  - @assistant-ui/react@0.9.3\n\n## 0.1.2\n\n### Patch Changes\n\n- c0c9422: feat: useToolArgsFieldStatus\n- Updated dependencies [553bdff]\n- Updated dependencies [c0c9422]\n- Updated dependencies [675fb20]\n- Updated dependencies [4e86ab4]\n- Updated dependencies [e893985]\n- Updated dependencies [0500584]\n  - @assistant-ui/react@0.9.2\n\n## 0.1.1\n\n### Patch Changes\n\n- chore: update deps\n- Updated dependencies\n  - @assistant-ui/react@0.9.1\n```\n\n----------------------------------------\n\nTITLE: Package Reference for Assistant UI React Hook Form\nDESCRIPTION: Package name reference showing the integration package for React Hook Form with Assistant UI\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-hook-form/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@assistant-ui/react-hook-form`\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Reference\nDESCRIPTION: Referenced package dependency for the core Assistant UI React library\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-hook-form/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`@assistant-ui/react`\n```\n\n----------------------------------------\n\nTITLE: Installing and Running LangGraph Example\nDESCRIPTION: Commands for installing dependencies and starting the development server for the LangGraph assistant example.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/with-langgraph/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building the assistant-ui Project with Turbo\nDESCRIPTION: Command to create an initial build of the assistant-ui project using Turbo. This is necessary as some packages depend on build outputs from other packages.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm turbo build\n```\n\n----------------------------------------\n\nTITLE: Running the Docs Project in Development Mode\nDESCRIPTION: Commands to navigate to the docs directory and start the documentation project in development mode.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd apps/docs\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Package Module Definition in Markdown\nDESCRIPTION: Markdown heading and description defining the react-syntax-highlighter integration module for @assistant-ui/react\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-syntax-highlighter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@assistant-ui/react-syntax-highlighter`\n\n`react-syntax-highlighter` integration for `@assistant-ui/react`.\n```\n\n----------------------------------------\n\nTITLE: Dependency Reference in Markdown\nDESCRIPTION: References the main dependency package using markdown code formatting\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-ai-sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`@assistant-ui/react`\n```\n\n----------------------------------------\n\nTITLE: Cloning Assistant UI Repository\nDESCRIPTION: Commands to clone the assistant-ui repository and navigate to the project directory.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/local-ollama/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/assistant-ui-local-ollama.git\ncd assistant-ui-local-ollama\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn Scroll Area Component\nDESCRIPTION: Command to add the shadcn/ui scroll-area component to the project.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/ui/Scrollbar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx shadcn@latest add scroll-area\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirect with Next.js\nDESCRIPTION: A React component that uses Next.js redirect utility to automatically navigate users to a documentation page about LangGraph tutorials.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\n\n<>\n  {redirect(\n    \"/docs/runtimes/langgraph/tutorial/introduction\",\n  )}\n</>\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Defines the package name and its integration purpose using markdown syntax.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-markdown/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@assistant-ui/react-markdown`\n\n`react-markdown` integration for `@assistant-ui/react`.\n```\n\n----------------------------------------\n\nTITLE: Running Mastra Development Server\nDESCRIPTION: Command to start the Mastra development server.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Changelog entries documenting version updates, fixes, and changes made to the assistant-ui package, including build system changes, CLI improvements, and dependency updates.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# assistant-ui\n\n## 0.0.51\n\n### Patch Changes\n\n- fix: ESM without bundler compat\n\n## 0.0.50\n\n### Patch Changes\n\n- fix: correctly include Typescript declarations\n\n## 0.0.49\n\n### Patch Changes\n\n- 557c3f7: build: drop CJS builds\n\n## 0.0.48\n\n### Patch Changes\n\n- chore: update deps\n\n## 0.0.47\n\n### Patch Changes\n\n- 1ad0696: feat: assistant-ui update CLI command\n\n## 0.0.46\n\n### Patch Changes\n\n- c77ef43: feat: assistant-ui update CLI command\n\n## 0.0.45\n\n### Patch Changes\n\n- b9c731a: chore: update dependencies\n\n## 0.0.44\n\n### Patch Changes\n\n- cli: drop version option\n\n## 0.0.43\n\n### Patch Changes\n\n- 94e9f71: feat(cli): add command tailwind v4 compat\n\n## 0.0.42\n\n### Patch Changes\n\n- chore: update deps\n\n## 0.0.41\n\n### Patch Changes\n\n- cdca350: feat: codemods performance improvement\n\n## 0.0.41\n\n### Patch Changes\n\n- feat: add migration for v0-9\n\n## 0.0.40\n\n### Patch Changes\n\n- d2988ff: fix: init command does not work on empty folders\n- 39aecd7: chore: update dependencies\n\n## 0.0.39\n\n### Patch Changes\n\n- 1d56298: fix: make CLI's add command work w new templates\n\n## 0.0.38\n\n### Patch Changes\n\n- 65a2c7c: feat: assistant-ui init CLI\n\n## 0.0.37\n\n### Patch Changes\n\n- 72e66db: chore: update dependencies\n\n## 0.0.36\n\n### Patch Changes\n\n- 8190d09: fix: fileURLToPath to get codemods\n\n## 0.0.35\n\n### Patch Changes\n\n- 1a42993: fix: always use npx for jscodeshift\n\n## 0.0.34\n\n### Patch Changes\n\n- c760cb3: fix: node 20 support\n\n## 0.0.33\n\n### Patch Changes\n\n- 0a23a70: fix: node 20 support\n\n## 0.0.32\n\n### Patch Changes\n\n- 6703842: feat: codemod to migrate to @assistant-ui/react-ui\n\n## 0.0.31\n\n### Patch Changes\n\n- cefd975: fix: use mjs entrypoint\n\n## 0.0.30\n\n### Patch Changes\n\n- f3368ad: feat: codemod for v0.8 migration\n\n## 0.0.29\n\n### Patch Changes\n\n- 22272e6: chore: update dependencies\n\n## 0.0.28\n\n### Patch Changes\n\n- 345f3d5: chore: update dependencies\n\n## 0.0.27\n\n### Patch Changes\n\n- 4c2bf58: chore: update dependencies\n\n## 0.0.26\n\n### Patch Changes\n\n- 982a6a2: chore: update dependencies\n\n## 0.0.25\n\n### Patch Changes\n\n- ec3b8cc: chore: update dependencies\n\n## 0.0.24\n\n### Patch Changes\n\n- 4c54273: chore: update dependencies\n\n## 0.0.23\n\n### Patch Changes\n\n- 2112ce8: chore: update dependencies\n\n## 0.0.22\n\n### Patch Changes\n\n- 938e734: fix: correctly pass component URLs to shadcn CLI\n\n## 0.0.21\n\n### Patch Changes\n\n- 933b8c0: chore: update deps\n\n## 0.0.20\n\n### Patch Changes\n\n- c59d8b5: chore: update dependencies\n\n## 0.0.18\n\n### Patch Changes\n\n- 1ada091: chore: update deps\n\n## 0.0.17\n\n### Patch Changes\n\n- ff5b86c: chore: update deps\n\n## 0.0.16\n\n### Patch Changes\n\n- d2375cd: build: disable bundling in UI package releases\n\n## 0.0.15\n\n### Patch Changes\n\n- fb32e61: chore: update deps\n\n## 0.0.14\n\n### Patch Changes\n\n- fb46305: chore: update dependencies\n\n## 0.0.13\n\n### Patch Changes\n\n- d8bd40b: chore: update dependencies\n\n## 0.0.12\n\n### Patch Changes\n\n- c438773: feat: allow disabling ComposerInput keyboard shortcuts\n- e1ae3d0: chore: update dependencies\n\n## 0.0.11\n\n### Patch Changes\n\n- 155d6e7: chore: update dependencies\n\n## 0.0.10\n\n### Patch Changes\n\n- c348553: chore: update dependencies\n\n## 0.0.9\n\n### Patch Changes\n\n- 7faa03b: cli: create -t langgraph\n\n## 0.0.8\n\n### Patch Changes\n\n- 7d7bbce: fix: create command windows compatibility\n\n## 0.0.7\n\n### Patch Changes\n\n- 9a55735: chore: update deps\n\n## 0.0.6\n\n### Patch Changes\n\n- ab031a0: fix: make `create` directory argument optional\n\n## 0.0.5\n\n### Patch Changes\n\n- 36f3a1f: chore: update dependencies\n- 1f8cc5e: refactor: make cli package more lightweight\n- 3810443: feat: npx assistant-ui create\n```\n\n----------------------------------------\n\nTITLE: Importing React Redirect Component\nDESCRIPTION: Imports a Redirect component from a local redirect module to handle page redirection.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/blog/2024-09-11/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Redirect } from \"./redirect\";\n\n<Redirect />\n```\n\n----------------------------------------\n\nTITLE: Making Start Script Executable\nDESCRIPTION: This command changes the permissions of the 'start.sh' script to make it executable, allowing it to be run as a program.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/examples/search-agent-for-e-commerce/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x start.sh\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Defines the package name @assistant-ui/react-langgraph using markdown formatting with inline code blocks.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-langgraph/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@assistant-ui/react-langgraph`\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Defines the package name using markdown code formatting\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/packages/react-ai-sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@assistant-ui/react-ai-sdk`\n```\n\n----------------------------------------\n\nTITLE: Implementing PriceSnapshot Backend Tool in TypeScript\nDESCRIPTION: Backend implementation of the price snapshot tool that retrieves stock price data from a financial API endpoint.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const priceSnapshotTool = tool(\n  async (input) => {\n    const data = await callFinancialDatasetAPI<SnapshotResponse>({\n      endpoint: \"/prices/snapshot\",\n      params: {\n        ticker: input.ticker,\n      },\n    });\n    return JSON.stringify(data, null);\n  },\n  {\n    name: \"price_snapshot\",\n    description:\n      \"Retrieves the current stock price and related market data for a given company.\",\n    schema: z.object({\n      ticker: z.string().describe(\"The ticker of the company. Example: 'AAPL'\"),\n    }),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Patching Zustand for React 17 Compatibility\nDESCRIPTION: This diff snippet shows the changes needed to patch the zustand package for React 17 compatibility. It replaces the React import with a polyfill and comments out the useDebugValue call.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/react-compatibility.mdx#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/node_modules/zustand/react.js b/node_modules/zustand/react.js\nindex 7599cfb..64530a8 100644\n--- a/node_modules/zustand/react.js\n+++ b/node_modules/zustand/react.js\n@@ -1,6 +1,6 @@\n 'use strict';\n \n-var React = require('react');\n+var React = require('use-sync-external-store/shim');\n var vanilla = require('zustand/vanilla');\n \n const identity = (arg) => arg;\n@@ -10,7 +10,7 @@ function useStore(api, selector = identity) {\n     () => selector(api.getState()),\n     () => selector(api.getInitialState())\n   );\n-  React.useDebugValue(slice);\n+  //React.useDebugValue(slice);\n   return slice;\n }\n const createImpl = (createState) => {\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Tool UI Hooks for Product Info\nDESCRIPTION: This code snippet demonstrates how to use the useAssistantToolUI hook with useInlineRender for cases where access to component props is needed. It shows an example of displaying product information.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/guides/ToolUI.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAssistantToolUI, useInlineRender } from \"@assistant-ui/react\";\n\nconst MyComponent = ({ product_id }) => {\n  useAssistantToolUI({\n    toolName: \"current_product_info\",\n    render: useInlineRender(({ args, status }) => {\n      return <p>product_info({product_id})</p>;\n    }),\n  });\n\n  // Component logic\n};\n\nconst MyApp = () => {\n  return (\n    <AssistantRuntimeProvider runtime={runtime}>\n      <MyComponent product_id=\"123\" />\n    </AssistantRuntimeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using TextContentPartProvider for Content Part Reuse\nDESCRIPTION: Demonstrates how to use the TextContentPartProvider to reuse content part components outside of a message content part context.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/api-reference/primitives/ContentPart.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextContentPartProvider } from \"@assistant-ui/react\";\n\n<TextContentPartProvider text=\"Hello world\" isRunning={false}>\n  <ContentPart.Text />\n</TextContentPartProvider>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Assistant UI in New Project\nDESCRIPTION: Command to create a new project with Assistant UI using npx.\nSOURCE: https://github.com/assistant-ui/assistant-ui/blob/main/apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx assistant-ui@latest create\n```"
  }
]