[
  {
    "owner": "playfab",
    "repo": "nodesdk",
    "content": "TITLE: Initializing PlayFab SDK and Making LoginWithCustomID API Call in Node.js\nDESCRIPTION: This snippet demonstrates how to set up the PlayFab SDK, create a login request with custom ID, and handle the API response. It includes error handling and a utility function for compiling error reports.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/PlayFabSdk/NodeGettingStarted.md#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar playfab = require('playfab-sdk')\nvar PlayFab = playfab.PlayFab\nvar PlayFabClient = playfab.PlayFabClient\n\nfunction DoExampleLoginWithCustomID() {\n    PlayFab.settings.titleId = \"144\";\n    var loginRequest = {\n        // Currently, you need to look up the correct format for this object in the API-docs:\n        // https://api.playfab.com/Documentation/Client/method/LoginWithCustomID\n        TitleId: PlayFab.settings.titleId,\n        CustomId: \"GettingStartedGuide\",\n        CreateAccount: true\n    };\n\n    PlayFabClient.LoginWithCustomID(loginRequest, LoginCallback);\n}\n\nfunction LoginCallback(error, result) {\n    if (result !== null) {\n        console.log(\"Congratulations, you made your first successful API call!\");\n    } else if (error !== null) {\n        console.log(\"Something went wrong with your first API call.\");\n        console.log(\"Here's some debug information:\");\n        console.log(CompileErrorReport(error));\n    }\n}\n\n// This is a utility function we haven't put into the core SDK yet.  Feel free to use it.\nfunction CompileErrorReport(error) {\n    if (error == null)\n        return \"\";\n    var fullErrors = error.errorMessage;\n    for (var paramName in error.errorDetails)\n        for (var msgIdx in error.errorDetails[paramName])\n            fullErrors += \"\\n\" + paramName + \": \" + error.errorDetails[paramName][msgIdx];\n    return fullErrors;\n}\n\n// Kick off the actual login call\nDoExampleLoginWithCustomID();\n```\n\n----------------------------------------\n\nTITLE: Importing PlayFab NodeSDK 2.x\nDESCRIPTION: Demonstrates the new recommended way to import and use the PlayFab NodeSDK 2.x version. Shows how to access various components of the SDK including client APIs and settings.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/upgrade.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar playfab = require(\"playfab-sdk\");\nvar PlayFabClient = playfab.PlayFabClient;\n// These will replace any existing PlayFab require lines in your SDK\n\nconsole.log(\"PlayFab Exists: \" + (playfab != null));\nconsole.log(\"PlayFab settings Exists: \" + (playfab.settings != null));\nconsole.log(\"PlayFab client Exists: \" + (playfab.PlayFabClient != null));\n\nfor(var each in playfab)\n{\n    console.log(\"Each : \" + each);\n}\n\nfor(var each in playfab.settings)\n{\n    console.log(\"Each.settings : \" + each);\n}\n\nconsole.log(\"Login Function: \" + (PlayFabClient.LoginWithCustomID != undefined));\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginWithCustomID in TypeScript with PlayFab SDK\nDESCRIPTION: This code snippet demonstrates how to set up and execute a LoginWithCustomID API call using the PlayFab JavaScript/TypeScript SDK. It includes error handling and a utility function for compiling error reports.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/TypeScriptGettingStarted.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvar PlayFab: PlayFabModule.IPlayFab = require(\"PlayFab-sdk/Scripts/PlayFab/PlayFab\");\nvar PlayFabClient: PlayFabClientModule.IPlayFabClient = require(\"PlayFab-sdk/Scripts/PlayFab/PlayFabClient\");\n\nfunction DoExampleLoginWithCustomID(): void {\n    PlayFab.settings.titleId = \"144\";\n    var loginRequest: PlayFabClientModels.LoginWithCustomIDRequest = {\n        CustomId: \"GettingStartedGuide\",\n        CreateAccount: true\n    };\n\n    PlayFabClient.LoginWithCustomID(loginRequest, LoginCallback);\n}\n\nfunction LoginCallback(error: PlayFabModule.IPlayFabError, result: PlayFabModule.IPlayFabSuccessContainer<PlayFabClientModels.LoginResult>): void {\n    if (result !== null) {\n        console.log(\"Congratulations, you made your first successful API call!\");\n    } else if (error !== null) {\n        console.log(\"Something went wrong with your first API call.\");\n        console.log(\"Here's some debug information:\");\n        console.log(CompileErrorReport(error));\n    }\n}\n\nfunction CompileErrorReport(error: PlayFabModule.IPlayFabError): string {\n    if (error == null)\n        return \"\";\n    var fullErrors: string = error.errorMessage;\n    for (var paramName in error.errorDetails)\n        for (var msgIdx in error.errorDetails[paramName])\n            fullErrors += \"\\n\" + paramName + \": \" + error.errorDetails[paramName][msgIdx];\n    return fullErrors;\n}\n\nDoExampleLoginWithCustomID();\n```\n\n----------------------------------------\n\nTITLE: Basic PlayFab Client API Usage in Node.js\nDESCRIPTION: Example demonstrating how to initialize the PlayFab Client API with a title ID and make a GetTitleData API call. Shows proper error handling and response processing for PlayFab API calls.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/PlayFabSdk/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar PlayFabClient = require('./Scripts/PlayFab/PlayFabClient.js')\n\nPlayFabClient.settings.titleId = \"F00\";\n\nPlayFabClient.GetTitleData({Keys : [\"Sample\"]}, function(error, result)\n{\n    if(error)\n    {\n        console.log(\"Got an error: \",error);\n        return;\n    }\n\n    console.log(\"Reply: \",result);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Developer Secret Key for PlayFab Admin APIs\nDESCRIPTION: Example showing how to set the developer secret key required for accessing secure PlayFab APIs like Server, Admin, and Matchmaker. This key should never be exposed to players for security reasons.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/PlayFabSdk/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlayFabClient.settings.developerSecretKey = \"your secret key\";\n```\n\n----------------------------------------\n\nTITLE: Installing PlayFab SDK via npm\nDESCRIPTION: Command to install the PlayFab SDK for Node.js applications using npm package manager. Requires Node.js to be properly installed on the system.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/PlayFabSdk/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install playfab-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting Test Title Data Environment Variable\nDESCRIPTION: Command to set an environment variable pointing to the testTitleData.json file required for running the automated tests. This file contains configuration data needed for the test project.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/PlayFabSdk/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset PF_TEST_TITLE_DATA_JSON=\"C:/YOUR_PATH/testTitleData.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing PlayFab Testing Project via npm\nDESCRIPTION: Command to install the PlayFab NodeSDK example automated-testing project using npm. Requires Node.js to be properly installed on the system.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/PlayFabSdk/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install playfab-testing\n```\n\n----------------------------------------\n\nTITLE: Deprecated PlayFab NodeSDK 1.x Import Method\nDESCRIPTION: Shows the old deprecated way of importing PlayFab NodeSDK 1.x version that should be removed and replaced with the new 2.x syntax. This approach used full paths and had potential issues with multiple requires.\nSOURCE: https://github.com/playfab/nodesdk/blob/master/upgrade.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar playfab = require(\"./node_modules/playfab-sdk/scripts/PlayFab/PlayFab.js\");\nvar PlayFabClient = require(\"./node_modules/playfab-sdk/scripts/PlayFab/PlayFabClient.js\");\n// (Replace these two lines with the require lines from the code block above)\n\nfor(var each in playfab)\n{\n    console.log(\"Each : \" + each);\n}\n\nfor(var each in playfab.settings)\n{\n    console.log(\"Each.settings : \" + each);\n}\n\nconsole.log(\"Login Function: \" + (PlayFabClient.LoginWithCustomID != undefined));\n```"
  }
]