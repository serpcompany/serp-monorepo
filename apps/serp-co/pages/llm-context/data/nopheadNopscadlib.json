[
  {
    "owner": "nophead",
    "repo": "nopscadlib",
    "content": "TITLE: Generating Printing-Corrected Polyhole Primitives in OpenSCAD\nDESCRIPTION: This snippet introduces modules and functions to produce 3D printable holes and tubes with corrected dimensions for manufacturing accuracy. It is intended for designers using OpenSCAD who need holes to print 'true to size' regardless of printer idiosyncrasies. Dependencies include OpenSCAD and the NopSCADlib core utility modules. Key parameters include radii, diameters, side counts, chamfering options, twist for poly_cylinder, and length measurements. Outputs include circles, cylinders, rings, and tubes sized for printing, with options for CNC routing, twist compensation, and correct internal diameters. Limitations: Twist increases modeling complexity, and settings may impact print time.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_283\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Polyhole and printing-corrected geometry tools\ncorrected_diameter(d, n=undef)   // Diameter with polygon flats on the circle\ncorrected_radius(r, n=undef)     // Radius for polygon flats\nsides(r, n=undef)                // Optimum polygon sides for printing\nModules:\ndrill(r, h=100, center=true), poly_circle(r, sides=undef), poly_cylinder(r, h, center=false, sides=undef, chamfer=false, twist=0), poly_drill(r, h=100, center=true), poly_ring(or, ir, sides=undef), poly_tube(or, ir, h, center=false), slot(r, l, h=100, center=false)\n// Usage: Adjust parameters for part fit accuracy and printing requirements. See hydraraptor.blogspot.com/2011/02/polyholes.html for rationale.\n```\n\n----------------------------------------\n\nTITLE: Belt calculation and visualization functions\nDESCRIPTION: Contains functions to model timing belts, calculate their length, and generate pulley paths. Includes support for open and closed loops, twists, and different belt types, suitable for parametric belt design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfunction _belt_points_info(type, points, open, twist, auto_twist, start_twist) { ... }\nfunction belt_length(type, points, open = false) { ... }\nfunction belt_pitch_to_back(type) { ... }\nfunction belt_pulley_pr(type, pulley, twisted=false) { ... }\n\nmodule belt(type, points, belt_colour = grey(20), tooth_colour = grey(50), open = false, twist = undef, auto_twist = false, start_twist = false) { ... }\n```\n\n----------------------------------------\n\nTITLE: Gear Profile and Calculation Functions in OpenSCAD\nDESCRIPTION: This collection of functions and modules provides tools for designing involute gears, racks, and worms, including profile calculation, gear dimensions, and center distance computations. It supports advanced gear modeling, including helical and bevel gears, with parameters like module, teeth count, pressure angle, and clearance. Dependencies include external gear formula references and utility modules.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_267\n\nLANGUAGE: scad\nCODE:\n```\n`center_distance(m, z1, z2, pa = 20)`\nCalculates the center distance between gears based on module, teeth count, and pressure angle.\n\n`involute(r, u)`\nCalculates the involute of a circle at radius r and angle u in radians.\n\n`involute_gear_od(m, z, pa = 20)`\nComputes the outside diameter of an involute gear given parameters.\n\n`involute_rack_tooth_profile(m, pa = 20, clearance = undef)`\nGenerates the profile of a rack tooth based on gear parameters.\n\n`involute_worm_profile(m, pa = 20, clearance = undef)`\nProduces a profile suitable for worm gear threading.\n\n`profile_shift(z, pa)`\nCalculates the profile shift for small gears to avoid undercutting.\n\nModules:\n`involute_gear_profile(m, z, pa = 20, clearance = undef, steps = 20)`\nComputes gear profiles for given gear parameters.\n`involute_rack_profile(m, z, w, pa = 20, clearance = undef)`\nCalculates rack profile given module, teeth, and pressure angle.\n\n```\n\n----------------------------------------\n\nTITLE: Generating Nut Models in OpenSCAD\nDESCRIPTION: Uses the `nut()` module to create a 3D model of a nut. Requires the nut type (e.g., `M2_nut`, `M3_nut`) and accepts optional parameters like `nyloc = true` for nyloc nuts.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_35\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M2_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M3_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M4_nut, nyloc = true)\n```\n\n----------------------------------------\n\nTITLE: Generating Fastener Models in OpenSCAD\nDESCRIPTION: Example calls to fastener modules (`nut`, `screw`, `washer`) in nopscadlib. These are used to model hardware like nuts, screws, and washers, often in conjunction with other components like linear rails. Requires type identifier and optionally parameters like `length` or `nyloc`.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_80\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M2_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M3_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M4_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M5_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M2_cap_screw, 10)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M2_cs_cap_screw, 10)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_cap_screw, 10)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_cap_screw, 12)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_cap_screw, 16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_cs_cap_screw, 12)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_cs_cap_screw, 16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_cap_screw, 16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_cap_screw, 20)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_cs_cap_screw, 20)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_cs_cap_screw, 25)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M5_cap_screw, 20)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M5_cs_cap_screw, 25)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M2_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M3_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M4_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M5_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_dome_screw, 10)\n```\n\n----------------------------------------\n\nTITLE: Generating Screw Models in OpenSCAD\nDESCRIPTION: Uses the `screw()` module to generate a 3D model of a screw. Requires the screw type (e.g., `M2_cap_screw`, `M4_dome_screw`) and the screw length as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_36\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M2_cap_screw, 16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_dome_screw, 20)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_dome_screw, 25)\n```\n\n----------------------------------------\n\nTITLE: Constructing Printed Box Property List - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function creates and returns a property list object used to define a printed box. It takes parameters like 'name', 'wall', 'top_t', 'base_t', 'radius', 'size' and optional arguments for 'foot', 'screw', 'short_insert', and 'ridges' to configure the box's dimensions and features.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_207\n\n\n\n----------------------------------------\n\nTITLE: Instantiating Fastener Models in OpenSCAD\nDESCRIPTION: Examples of calling basic fastener modules like `nut`, `screw`, and `washer` used in assemblies within the library.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_96\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M4_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_cap_screw, 16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M4_washer)\n```\n\n----------------------------------------\n\nTITLE: Sweeping 2D Profiles Along 3D Paths\nDESCRIPTION: This section defines utilities for creating swept volumes by sweeping a 2D profile along a 3D path. The code includes functions to create various paths. It supports open or closed paths. Additional twist around the path can be specified. It uses `rounded_path()` to generate paths with rounded corners. `spiral_paths()` generates spiraling paths along a given path.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_281\n\n\n\n----------------------------------------\n\nTITLE: Constructing a Gridfinity Bin\nDESCRIPTION: This function is used to create a Gridfinity bin. It takes `name`, `grid_x`, `grid_y`, and `grid_z` as parameters, where `grid_x`, `grid_y`, and `grid_z` represent the bin size in Gridfinity units.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_181\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_bin(name, grid_x, grid_y, grid_z)\n```\n\n----------------------------------------\n\nTITLE: Drag Chain - Module: drag_chain\nDESCRIPTION: The `drag_chain(name, size, travel, wall = 1.6, bwall = 1.5, twall = 1.5, clearance = 0.1, supports = true, screw = M2_cap_screw, screw_lists = [[1,0,0,1],[1,0,0,1]])` module is the constructor for creating a drag chain. The module takes numerous parameters including `name`, `size`, `travel`, wall thicknesses, clearance, support settings, and screw types.  The `screw_lists` parameter specifies which screw positions are used.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_129\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndrag_chain(name, size, travel, wall = 1.6, bwall = 1.5, twall = 1.5, clearance = 0.1, supports = true, screw = M2_cap_screw, screw_lists = [[1,0,0,1],[1,0,0,1]])\n```\n\n----------------------------------------\n\nTITLE: Generating Washer Models in OpenSCAD\nDESCRIPTION: Uses the `washer()` module to create a 3D model of a washer. Requires the washer type (e.g., `M2_washer`, `M4_washer`) which defines its dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_37\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M2_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M3_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M4_washer)\n```\n\n----------------------------------------\n\nTITLE: Generating Star Washer Models using star_washer in OpenSCAD\nDESCRIPTION: Example call to the `star_washer` module in nopscadlib, typically used in electrical grounding assemblies with ring terminals. Requires the washer type identifier (e.g., `M3_washer`).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_82\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstar_washer(M3_washer)\n```\n\n----------------------------------------\n\nTITLE: Drilling Ribbon Clamp Screw Holes - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the negative space (holes) for screws in a ribbon clamp geometry. It is typically used with difference(). It requires the 'ways' parameter and accepts optional 'h' (height) and 'screw' type parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_246\n\n\n\n----------------------------------------\n\nTITLE: Inserting Heatfit Inserts\nDESCRIPTION: This snippet demonstrates the use of the `insert` module, used for inserting heat-fit inserts of varying sizes (M2, M2.5, M3, M4). The module takes a specific insert type as input (e.g., `F1BM2`, `F1BM2p5`) and is likely responsible for generating the necessary geometry or actions within the OpenSCAD environment to incorporate the insert.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_116\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert(F1BM2)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert(F1BM2p5)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert(F1BM3)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert(F1BM4)\n```\n\n----------------------------------------\n\nTITLE: Modeling Bezier Cable Strips with nopscadlib (OpenSCAD)\nDESCRIPTION: Creates a flexible cable strip model using a Bezier curve via the `bezier_cable_strip` module. Parameters define ways (cable width identifier, e.g., 20), depth (bend radius area), length (total material length), below (vertical offset), extra (additional length), and optional position (bend amount, default 0). Corresponds to a 170mm x 26mm x 0.8mm polypropylene strip.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_27\n\nLANGUAGE: openscad\nCODE:\n```\nbezier_cable_strip(20, 50, 150, 100, 10)\n```\n\n----------------------------------------\n\nTITLE: Constructing Rounded Rectangular Shapes with OpenSCAD Modules\nDESCRIPTION: This snippet provides modules for generating rectangles, cubes, and squares with rounded corners in OpenSCAD, useful for ergonomic and printable designs. Required dependencies are the NopSCADlib and OpenSCAD core modules. Parameters accept vectors for sizes, radii for corner rounding, and boolean options for XY and Z centering. Outputs are 2D and 3D shapes (`cube`-like and `square`-like) with user-controlled rounding and placement. Limitations: Corner radius must be appropriate for supplied shape dimensions; edge-case handling follows OpenSCAD conventions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_284\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Rounded rectangle and cube modules\nrounded_cube_xy(size, r=0, xy_center=false, z_center=false)\nrounded_cube_xz(size, r=0, xy_center=false, z_center=false)\nrounded_cube_yz(size, r=0, xy_center=false, z_center=false)\nrounded_rectangle(size, r, center=false, xy_center=true)\nrounded_square(size, r, center=true)\n// Usage: Pass vector sizes and corner radii as required for the desired shape and rounding.\n```\n\n----------------------------------------\n\nTITLE: Instantiating Ring Terminal Module\nDESCRIPTION: This snippet calls the `ring_terminal` module, likely from a library.  It instantiates the ring terminal with the specified size.  It's used to create a visual representation of a ring terminal in the 3D model.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_98\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`ring_terminal(M3_ringterm)`\n```\n\n----------------------------------------\n\nTITLE: Drawing Ring Terminals using ring_terminal in OpenSCAD\nDESCRIPTION: Example calls to the `ring_terminal` module in nopscadlib to generate 3D models of ring terminals. Requires the terminal type identifier (e.g., `M3_ringterm`, `M3_ringterm_crimp`).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_81\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nring_terminal(M3_ringterm)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nring_terminal(M3_ringterm_cs)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nring_terminal(M3_ringterm_crimp)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Holes and Slicing Utilities in OpenSCAD\nDESCRIPTION: Includes functions to model staircase-sliced horizontal holes using teardrop-shaped layer features. Functions generate the ordinates for modified teardrop layers and modules create cylinders and holes suitable for layer-based printing with specific overhang constraints.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_269\n\nLANGUAGE: scad\nCODE:\n```\n`teardrop_minus_x(r, y, h)`\nCalculates the adjusted x-coordinate of a teardrop layer segment.\n\n`teardrop_plus_x(r, y, h)`\nCalculates the complemented x-coordinate for teardrop modeling.\n\nModules:\n`horicylinder(r, z, h = 0, center = true)`\nCreates horizontal cylinders that are dimensionally accurate without supports.\n`horihole(r, z, h = 0, center = true)`\nModels horizontal holes that do not require support and are precisely dimensioned.\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating Spade Terminal Model in OpenSCAD\nDESCRIPTION: Calls the `spade` module to generate a 3D model of a spade terminal. It requires the spade type and optional height.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_92\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nspade(type, height = 14)\n```\n\n----------------------------------------\n\nTITLE: Positioning Children at Ribbon Clamp Hole Locations - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module translates its children to the calculated positions of the screw holes on a ribbon clamp. It requires the 'ways' parameter and accepts optional 'screw' type and 'side' parameters to specify placement.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_245\n\n\n\n----------------------------------------\n\nTITLE: Positioning All Screws in Fixing Block\nDESCRIPTION: This function returns a list of transformations (transforms) to position all the screws (horizontal and vertical) within the fixing block. It is used to correctly place all the screws within the assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_138\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_holes(screw)\n```\n\n----------------------------------------\n\nTITLE: Assembling Hinge Components\nDESCRIPTION: This module brings together both parts of the hinge to make a whole that can be printed. This includes the pin and the leaves, ready for assembly and use.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_160\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_both(type)\n```\n\n----------------------------------------\n\nTITLE: Using green_terminal Module for 4-Way Terminal Block (OpenSCAD)\nDESCRIPTION: Instantiates a 4-way green terminal block of type `gt_6p35` (0.25\" pitch) using the `green_terminal` module. This module draws various green terminal blocks, allowing pin skipping via the optional `skip` parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_43\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngreen_terminal(gt_6p35, 4)\n```\n\n----------------------------------------\n\nTITLE: Drawing Linear Rail Carriages using carriage in OpenSCAD\nDESCRIPTION: Example calls to the `carriage` module in nopscadlib to generate 3D models of linear rail carriages. Requires the carriage type identifier (e.g., `HGH15CA_carriage`, `MGN12C_carriage`).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_79\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(HGH15CA_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(HGH20CA_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN12C_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN12H_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN15C_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN5C_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN7C_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN7H_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN9C_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(MGN9H_carriage)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncarriage(SSR15_carriage)\n```\n\n----------------------------------------\n\nTITLE: Creating Cable Clip Assembly\nDESCRIPTION: Generates a cable clip assembly with fasteners (screw, insert, or nut). The `screw`, `thickness`, and cable sizes are parameters. The optional `flip`, `insert`, `nut`, and `nyloc` parameters allow fine-tuning.  It creates a cable clip including its fasteners.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_115\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip_assembly(screw, thickness, cable1, cable2 = 0, flip = false, insert = false, nut = false, nyloc = true)\n```\n\n----------------------------------------\n\nTITLE: Modules for bearing block drawing and assembly\nDESCRIPTION: Provides modules to draw individual bearing blocks, their assemblies with screws and nuts, and functions to position holes and fasteners. Facilitates parametric modeling of bearing components.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmodule right_trapezoid(base, top, height, h = 0, center = true) { ... }\nmodule sbr_bearing_block(type) { ... }\nmodule sbr_bearing_block_assembly(type, part_thickness, screw_type) { ... }\nmodule sbr_bearing_block_hole_positions(type) { ... }\nmodule scs_bearing_block(type) { ... }\nmodule scs_bearing_block_assembly(type, part_thickness, screw_type, nut_type) { ... }\nmodule scs_bearing_block_hole_positions(type) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using green_terminal Module for 5-Way Terminal Block (OpenSCAD)\nDESCRIPTION: Instantiates a 5-way green terminal block of type `gt_5p08` (0.2\" pitch) using the `green_terminal` module. This module draws various green terminal blocks, allowing pin skipping via the optional `skip` parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_44\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngreen_terminal(gt_5p08, 5)\n```\n\n----------------------------------------\n\nTITLE: Creating a PCB object in OpenSCAD\nDESCRIPTION: Constructor function for creating PCB objects with various parameters including size, holes, components, and more.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_66\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npcb(name, desc, size, corner_r = 0, hole_d = 0, land_d = 0, colour = \"green\", parts_on_bom = false, holes = [], components = [], accessories = [], grid = undef, polygon = undef, screw = undef)\n```\n\n----------------------------------------\n\nTITLE: Using ax_diode Module (OpenSCAD)\nDESCRIPTION: Draws a through-hole axial diode component. Requires the diode type (e.g., `DO_41`, `DO_35`) and value (e.g., \"1N4007\"). An optional `pitch` parameter determines placement; if zero or omitted, minimum pitch is used, or vertical placement if below minimum.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_diode(DO_41, \"1N4007\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_diode(DO_35, \"1N4148\")\n```\n\n----------------------------------------\n\nTITLE: Generating Printed Box Outer 2D Shape - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates a 2D outline representing the outer shape of a printed box, based on the properties defined by the 'type' parameter. Useful for 2D operations or previews.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_219\n\n\n\n----------------------------------------\n\nTITLE: Defining Linear Bearing Models in OpenSCAD\nDESCRIPTION: This snippet details how to use the `linear_bearing()` module in OpenSCAD to instantiate various linear bearing models. The module takes a specific bearing type (e.g., LM10LUU) as input and generates the corresponding 3D model.  This facilitates the creation of bill-of-materials entries.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_59\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM10LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM10UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM12LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM12UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM16LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM16UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM16UUOP)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM3LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM3UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM4LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM4UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM5LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM5UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM6LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM6UU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM8LUU)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nlinear_bearing(LM8UU)\n```\n\n----------------------------------------\n\nTITLE: Modeling Resistors using resistor Module (OpenSCAD)\nDESCRIPTION: Calls the `resistor` module to represent specific resistor types. The first call models a UB5C 5R6F resistor (`RIE1212UB5C5R6`), and the second models an Epcos B57560G104F thermistor (`Epcos`). These are likely used in hot end assemblies.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_53\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nresistor(RIE1212UB5C5R6)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nresistor(Epcos)\n```\n\n----------------------------------------\n\nTITLE: Modeling Washers with nopscadlib (OpenSCAD)\nDESCRIPTION: Generates models of washers using the `washer` module, specifying the type (e.g., M2_washer, M3_washer, M4_washer). Dimensions like M2x5mmx0.3mm are implied by the type constant.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_23\n\nLANGUAGE: openscad\nCODE:\n```\nwasher(M2_washer)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nwasher(M3_washer)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nwasher(M4_washer)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cable Clip Height\nDESCRIPTION: Calculates the height of the cable clip based on the cable size.  It accounts for the screw type and whether an insert or nut is used. The `cable` parameter is required. Optional `screw`, `insert`, and `nut` parameters modify the calculation.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_110\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip_height(cable, screw = false, insert = false, nut = false)\n```\n\n----------------------------------------\n\nTITLE: Using pcb Module (OpenSCAD)\nDESCRIPTION: Draws a Perfboard PCB component, potentially used alongside axial components. Requires the PCB type (e.g., `PERF60x40`) as a parameter. Referenced within the nopscadlib axials section example.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npcb(PERF60x40)\n```\n\n----------------------------------------\n\nTITLE: Instantiating SMD Ceramic Capacitor Model in OpenSCAD\nDESCRIPTION: Calls the `smd_capacitor` module to generate a 3D model of a standard SMD ceramic capacitor. It takes the package size as a parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_87\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_capacitor(CAP0402)\n```\n\n----------------------------------------\n\nTITLE: Instantiating SMD SOT Transistor Model in OpenSCAD\nDESCRIPTION: Calls the `smd_sot` module to generate a 3D model of an SMD Small Outline Transistor (SOT). It takes the package type and part name as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_91\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_sot(SOT23, \"2N7000\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating SMD Resistor Model in OpenSCAD\nDESCRIPTION: Calls the `smd_resistor` module to generate a 3D model of an SMD resistor or choke. It takes the package type and value as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_89\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_resistor(RES0402, 1R0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Ribbon Clamp Length - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates the length of a ribbon clamp based on the number of 'ways' (cables/strips) it is designed for. It also accepts an optional 'screw' type parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_240\n\n\n\n----------------------------------------\n\nTITLE: Calculating Printed Box Base Ledge Inclusion - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates and returns how far the base ledge extends inwards for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_208\n\n\n\n----------------------------------------\n\nTITLE: Accessing Part Property using OpenSCAD Function\nDESCRIPTION: This OpenSCAD function provides a named accessor for a property within a list (`type`) that defines a parametric part (\"vitamin\"). It retrieves the element at index 1 of the list, which is convention for the outside diameter in this library. The `//!` comment ensures this function is included in the generated documentation.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/docs/usage.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfunction spring_od(type)     = type[1]; //! Outside diameter\n```\n\n----------------------------------------\n\nTITLE: Modeling a Hygrometer using hygrometer Module (OpenSCAD)\nDESCRIPTION: Calls the `hygrometer` module without arguments to draw a model of a standard mini LCD digital thermometer/hygrometer. The library also provides related functions like `hygrometer_or()` for dimensions and `hygrometer_hole()` for creating mounting cutouts.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_58\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhygrometer()\n```\n\n----------------------------------------\n\nTITLE: Using battery Module (OpenSCAD)\nDESCRIPTION: Draws a battery/cell component based on its specified type (e.g., `AACELL`, `S25R18650`, `LUMINTOP`). The module uses properties defined for the type to determine dimensions, color, and terminal details.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(A23CELL)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(AACELL)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(AAACELL)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(CCELL)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(DCELL)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(LUMINTOP)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(S25R18650)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(L16340)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(L32700)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery(L4680)\n```\n\n----------------------------------------\n\nTITLE: Drawing Radial Transistors using rd_transistor in OpenSCAD\nDESCRIPTION: Example calls to the `rd_transistor` module in nopscadlib to generate 3D models of radial lead transistors. Requires the transistor type identifier (e.g., `E_LINE`, `TO92`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_76\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_transistor(E_LINE, \"ZTX853\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_transistor(TO92, \"BC337\")\n```\n\n----------------------------------------\n\nTITLE: Drawing Extrusion Brackets: OpenSCAD\nDESCRIPTION: This module draws extrusion brackets, specifically corner and inner corner brackets, used for joining extrusions.  The  `extrusion_corner_bracket` and `extrusion_inner_corner_bracket` modules, take a type parameter specifying the bracket design. The example includes the use of sliding t-nuts and screws as well. The specific types are linked to particular extrusion profiles.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_32\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2020t, 20.5)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2020t, 28)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2020t, 39.5)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2020t, 48)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4040t, 27.4, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4040t, 40, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4040t, 60.4, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4040t, 80, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion_corner_bracket(E20_corner_bracket)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion_corner_bracket(E40_corner_bracket)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion_inner_corner_bracket(E20_inner_corner_bracket)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion_inner_corner_bracket(E40_inner_corner_bracket)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsliding_t_nut(M4_sliding_t_nut)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsliding_t_nut(M8_sliding_ball_t_nut)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_cap_screw, 8)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M8_cap_screw, 12)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M4_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M8_washer)\n```\n\n----------------------------------------\n\nTITLE: Drag Chain - Module: drag_chain_screw_positions\nDESCRIPTION: The `drag_chain_screw_positions(type, end)` module positions children at the screw positions. It takes the chain `type` and an `end` parameter (0 for start, 1 for end), which specifies which end's screw positions are relevant. This is used to place screws or inserts within the drag chain assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_132\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndrag_chain_screw_positions(type, end)\n```\n\n----------------------------------------\n\nTITLE: Using Washers\nDESCRIPTION: This snippet demonstrates the use of the `washer` module to add washers of different sizes to the design. It utilizes built-in washer definitions, identified by names like `M2_washer` or `M2p5_washer`. The module likely creates the 3D geometry of the washer, and places it correctly in the design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_118\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M2_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M2p5_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M3_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M4_washer)\n```\n\n----------------------------------------\n\nTITLE: Using battery_contact Module (OpenSCAD)\nDESCRIPTION: Draws a battery contact (positive or negative) for a specified battery type. Requires the contact type (e.g., `bcontact`) and a boolean `pos` parameter (true for positive, false for negative, default is true).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery_contact(bcontact, false)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbattery_contact(bcontact, true)\n```\n\n----------------------------------------\n\nTITLE: Fan Guard - Module: fan_guard\nDESCRIPTION: The `fan_guard(type, name = false, thickness = fan_guard_thickness(), spokes = 4, finger_width = 7, grill = false, screws = true)` module is used to generate the STL for a fan guard. It takes the fan `type` as a required parameter, other parameters such as `name`, `thickness`, `spokes`, and `finger_width` offer more customization options. If the `grill` parameter is set to true, a grill is created instead of the finger guard.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_134\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfan_guard(type, name = false, thickness = fan_guard_thickness(), spokes = 4, finger_width = 7, grill = false, screws = true)\n```\n\n----------------------------------------\n\nTITLE: Using antenna Module (OpenSCAD)\nDESCRIPTION: Draws a specified WiFi antenna component using the `antenna` module. Requires the antenna type (e.g., `ESP201_antenna`), thickness, and angle as parameters. Referenced within the nopscadlib antennas section.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nantenna(ESP201_antenna)\n```\n\n----------------------------------------\n\nTITLE: Generating Printed Pulley Assembly STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry for a printed pulley assembly, including the pulley part and potentially fasteners like grub screws in place. It uses properties from 'type' and an optional 'colour' parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_223\n\n\n\n----------------------------------------\n\nTITLE: Generating Microview Display Models in OpenSCAD\nDESCRIPTION: This snippet demonstrates the utilization of the `microview()` module for creating a Microview OLED display model. The module, without parameters, generates the 3D model, enabling its integration into designs. It also supports cutout functionality, and requires files with MIT license.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_63\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmicroview()\n```\n\n----------------------------------------\n\nTITLE: Instantiating SMD SOIC Chip Model in OpenSCAD\nDESCRIPTION: Calls the `smd_soic` module to generate a 3D model of an SMD Small Outline Integrated Circuit (SOIC). It takes the package type and part name as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_90\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_soic(SOIC8, \"SOIC8\")\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge_assembly\nDESCRIPTION: This module, `door_hinge_assembly(top, door_thickness = 6)`, defines the moving assembly which attaches to the door. It takes `top` and `door_thickness` as input, with a default door thickness of 6. The 'top' parameter likely adjusts the positioning of the assembly, and 'door_thickness' allows it to be adapted to different doors.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_121\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge_assembly(top, door_thickness = 6)\n```\n\n----------------------------------------\n\nTITLE: Quadrant Shape Utility in OpenSCAD\nDESCRIPTION: Defines a module to create a square with one corner rounded, with optional centering on the arc's center. Useful for creating stylized quadrants or corner features.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_274\n\nLANGUAGE: scad\nCODE:\n```\n`quadrant(w, r, center = false)`\nDraws a square of width `w` with one rounded corner of radius `r`. When `center` is true, it centers the shape on the arc’s center.\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating SMD Tantalum Capacitor Model in OpenSCAD\nDESCRIPTION: Calls the `smd_tant` module to generate a 3D model of an SMD Tantalum capacitor. It takes the package type and value string as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_86\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_tant(TANT_A, value = \"105e\")\n```\n\n----------------------------------------\n\nTITLE: Creating Sectors of Circles\nDESCRIPTION: The `sector` module generates a sector of a circle between two angles.  The module requires the radius, start angle, and end angle as parameters.  This allows creating partial circular shapes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_279\n\n\n\n----------------------------------------\n\nTITLE: Calculating Gridfinity Bin Size\nDESCRIPTION: This function determines the size of a Gridfinity bin in grid units. It takes the type as input and returns the bin dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_179\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_bin_size(type)\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge_static_assembly\nDESCRIPTION: This module, `door_hinge_static_assembly(top, sheet_thickness = 3)`, constructs the stationary assembly. It takes a `top` parameter for positioning and a `sheet_thickness` parameter, defaulting to 3.  This assembly is meant to be mounted to the printer frame.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_126\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge_static_assembly(top, sheet_thickness = 3)\n```\n\n----------------------------------------\n\nTITLE: Modeling BLDC Motors with nopscadlib (OpenSCAD)\nDESCRIPTION: Utilizes the `BLDC` module to create 3D models of various brushless DC motors specified by type codes (e.g., BLDC0603, BLDC2205). Each call generates a model corresponding to a specific motor listed in the Bill of Materials.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_20\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC0603)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC0802)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC1105)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC1306)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC1804)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC2205)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC2212)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC3548)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nBLDC(BLDC4250)\n```\n\n----------------------------------------\n\nTITLE: Drag Chain - Module: drag_chain_link\nDESCRIPTION: The `drag_chain_link(type, start = false, end = false, check_kids = true)` module creates a single link for the drag chain.  It takes a `type` to define the configuration, plus boolean parameters `start` and `end` for special start and end link configurations. The `check_kids` parameter seems to indicate whether children should be checked.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_131\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndrag_chain_link(type, start = false, end = false, check_kids = true)\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge_parts_stl\nDESCRIPTION: This module, `door_hinge_parts_stl()`, is responsible for generating the STL file containing both parts of the door hinge.  It likely encapsulates the logic to assemble the individual components of the hinge and produce the combined model suitable for 3D printing.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_123\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge_parts_stl()\n```\n\n----------------------------------------\n\nTITLE: Modeling Box Sections with nopscadlib (OpenSCAD)\nDESCRIPTION: Creates models of rectangular box sections using the `box_section` module. Parameters specify the material/dimensions type (e.g., AL12x8x1 for Aluminium 12x8x1mm, CF10x10x1 for Carbon Fiber 10x10x1mm) and the desired length in millimeters (e.g., 100, 80, 60, 40).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_24\n\nLANGUAGE: openscad\nCODE:\n```\nbox_section(AL12x8x1, 100)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nbox_section(AL20x20x2, 80)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nbox_section(AL38p1x25p4x1p6, 60)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nbox_section(AL50p8x38p1x3, 40)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nbox_section(CF10x10x1, 100)\n```\n\n----------------------------------------\n\nTITLE: Generating Printed Box Main Case STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry (STL) for the main case part of a printed box, based on the properties defined by the 'type' parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_215\n\n\n\n----------------------------------------\n\nTITLE: Creating Rounded Polygons\nDESCRIPTION: The code defines functions and modules for creating polygons with rounded corners. The `rounded_polygon` function takes a list of XY coordinates and radii. The radii can be negative for concave corners.  The `circle_tangent` function and others are used to compute tangents and intersections.  This is optimized by allowing pre-calculation of tangent data.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_277\n\n\n\n----------------------------------------\n\nTITLE: Modeling Circular Cable Strips with nopscadlib (OpenSCAD)\nDESCRIPTION: Generates a flexible cable strip model with a semi-circular fold using the `cable_strip` module. Parameters define ways (e.g., 20), depth (fold depth), travel (linear travel range), extra (additional length, default 15), and optional position (bend amount, default 0). Corresponds to a 189mm x 24mm x 0.8mm polypropylene strip.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_28\n\nLANGUAGE: openscad\nCODE:\n```\ncable_strip(20, 25, 100, 30)\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge\nDESCRIPTION: This module, `door_hinge(door_thickness)`, generates the STL for the moving part of the door hinge.  It takes the `door_thickness` as a parameter, likely influencing the hinge's dimensions to accommodate different door thicknesses.  This module is a core component for creating a functional door hinge for a 3D printer enclosure, utilizing OpenSCAD to create the hinge's 3D model.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_120\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge(door_thickness)\n```\n\n----------------------------------------\n\nTITLE: Positioning Children on all Holes\nDESCRIPTION: This module positions children on all holes of the fixing block. It is used to correctly place parts relative to all the holes in the block.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_147\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_holes(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Positioning 2D child on Horizontal Hole\nDESCRIPTION: This module positions a 2D child object on the horizontal hole of the fixing block. This module enables positioning of 2D elements, like text or other flat shapes, on the hole.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_146\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_h_hole_2D(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Calculating Fixing Block Height\nDESCRIPTION: This function determines the height of the fixing block, which is typically equivalent to the depth based on the provided screw size. This allows for consistent dimensioning.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_137\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_height(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Screw Type\nDESCRIPTION: This function returns or defines the default screw type used within the library. It centralizes the screw selection to ensure consistency and easy modification throughout the models.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_139\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_screw()\n```\n\n----------------------------------------\n\nTITLE: Calculating Cable Clip Width\nDESCRIPTION: Calculates the width of the cable clip given the screw and possible insert or nut.  This allows for correct spacing and fit.  `screw` is required and `insert` and `nut` are optional to allow for design flexibility.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_113\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip_width(screw, insert = false, nut = false)\n```\n\n----------------------------------------\n\nTITLE: Determining Cable Clip Insert Type\nDESCRIPTION: Determines the insert type for the cable clip, given the screw type. This facilitates design by selecting the correct insert based on the chosen fastener.  The `screw` and `insert` parameters are used to determine this.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_111\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip_insert(screw, insert = true)\n```\n\n----------------------------------------\n\nTITLE: Creating HT T-Pipes using ht_tpipe Module (OpenSCAD)\nDESCRIPTION: Instantiates models of PVC HT water T-pipes (German standard) using the `ht_tpipe` module. The calls specify the type, like `HT_50_tpipe` for a standard DN50 T-pipe and `HT_50_40_tpipe` for a reducing DN50/DN40 T-pipe.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_57\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_tpipe(HT_50_tpipe)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_tpipe(HT_50_40_tpipe)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cable Clip Offset\nDESCRIPTION: Calculates the offset of the cable from the screw, considering the screw type and cable size.  It can also accommodate inserts or nuts. The  `screw`, `cable` parameters are essential for the calculation. `insert` and `nut` are optional.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_112\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip_offset(screw, cable, insert = false, nut = false)\n```\n\n----------------------------------------\n\nTITLE: Generating Ribbon Clamp STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry (STL) for a ribbon clamp. It requires the 'ways' parameter, which defines the number of ribbon cables or a combination of cable and PP strip it accommodates. An optional 'screw' type parameter is also accepted.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_242\n\n\n\n----------------------------------------\n\nTITLE: Defining Global Utilities and Conversion Functions in OpenSCAD\nDESCRIPTION: This snippet collects global utility functions and modules for OpenSCAD, including unit conversions, mathematical helpers, and commonly required shape operations. Dependencies include the OpenSCAD standard library, and usage requires inclusion of global_defs.scad for core constants. Parameters cover numeric and list input types for conversions, geometric operations, and list handling. Outputs standardize units (cm, m, mm, inch, foot, yard), support slicing and limiting, and provide consistent color and geometry behaviors. Limitations: Functions handle only compatible input types and are primarily intended for internal library use or extension.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_282\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Global constants, functions, and modules\nLen(x)              // Returns length of a list or 0 if not a list\ncm(x), m(x), mm(x), inch(x), foot(x), yard(x)   // Unit conversions to mm\nechoit(x)           // Echoes and returns x (debugging)\ngrey(n)             // Returns grey color shade\nin(list, x)         // Checks if x is in list\nlimit(x, min, max)  // Clamps x in range [min, max]\nno_point(str)       // Replaces decimal point with 'p' in string\nr2sides(r), r2sides4n(r) // Calculates polygon sides from radius\nround_to_layer(z)   // Rounds z to layer boundary\nslice(list, start=0, end=undef) // Python-style list/string slicing\nsqr(x)              // Returns square of x\nModules:\ncircle4n(r, d=undef), ellipse(xr, yr), extrude_if(h, center=true), hflip(flip=true), render_if(render=true, convexity=2), render_manifold(), right_triangle(width, height, h, center=true), semi_circle(r, d=undef), translate_z(z), vflip(flip=true)\n// Usage: Provide appropriate numeric/list arguments as per function/module requirements.\n```\n\n----------------------------------------\n\nTITLE: Defining butt_box Properties\nDESCRIPTION: Defines the properties for a butt_box. Allows customizing box dimensions, screw types, sheet types, and block spacing.  The `screw`, `sheets`, `base_sheet`, `top_sheet`, `span`, and `size` parameters are required. The `name` parameter is optional, and the remaining parameters (`skip_blocks`, `star_washers`, `thin_blocks`, and `short_inserts`) further configure the box.  The purpose is to generate properties that can be passed into the `bbox` function to construct the box.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_108\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbbox(screw, sheets, base_sheet, top_sheet, span, size, name = \"bbox\", skip_blocks = [], star_washers = true, thin_blocks = false, short_inserts = false)\n```\n\n----------------------------------------\n\nTITLE: PCB Utility Functions in OpenSCAD\nDESCRIPTION: Offers modules to generate cylindrical wraps, solder joints, and meniscus shapes for PCB modeling. These utilities simplify the creation of common PCB features with parameters for dimensions and visual effects.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_273\n\nLANGUAGE: scad\nCODE:\n```\n`cylindrical_wrap(r, h = eps)`\nWraps a 2D shape around a cylinder with radius `r` for 3D PCB component modeling.\n\n`solder(ir = 0.3)`\nPotentially adds solder meniscus effects.\n\n`solder_meniscus(ir = 0.3, r = 1, h = 0.7)`\nCreates a solder meniscus shape with specified parameters.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fully Fastened Handle Assembly using OpenSCAD\nDESCRIPTION: This OpenSCAD module represents the complete handle assembly, including the handle with inserts (by calling `handle_assembly`) and the required screws and washers. It calculates the necessary screw length based on the panel thickness. Unlike `handle_assembly`, it does not use the `assembly()` module itself, causing the screws and washers to be listed in the parent assembly's Bill of Materials and build steps.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/docs/usage.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmodule handle_fastened_assembly(thickness) { //! Assembly with fasteners in place\n    screw_length = screw_length(screw, thickness, 2, true, longer = true);\n\n    handle_assembly();\n\n    handle_screw_positions()\n        vflip()\n            translate_z(thickness)\n                screw_and_washer(screw, screw_length, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Children on Vertical Holes\nDESCRIPTION: This module positions children on the vertical holes within the fixing block. This is another crucial step in assembling the part by correctly positioning all elements.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_148\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_v_holes(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Wall Thickness - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the wall thickness property for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_205\n\n\n\n----------------------------------------\n\nTITLE: Creating Fastened Insert Foot Assembly\nDESCRIPTION: This module generates an assembly of a foot with fasteners (screws and inserts) in place. The `t` parameter is the sheet thickness.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_173\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfastened_insert_foot_assembly(t = 3, type = insert_foot)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Sheet Module\nDESCRIPTION: This snippet instantiates the `sheet` module to create a 3D model of an aluminium tooling plate. It's used for creating components such as 3D printer beds, with defined dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_102\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`sheet(AL6, 40, 20, 1)`\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Screw Type (Foot or Base) - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the screw type used for a printed box, returning the foot screw type if feet are present, otherwise returning the base screw type, based on the 'type' definition.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_210\n\n\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Internal Width - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the internal width property of a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_206\n\n\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Top Thickness - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the top thickness property for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_204\n\n\n\n----------------------------------------\n\nTITLE: Instantiating Toggle Switch Module\nDESCRIPTION: This snippet calls the `toggle` module with two parameters, likely specifying the toggle switch type and the panel thickness.  It creates a visual representation of the toggle switch based on the provided parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_104\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`toggle(AP5236, 3)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`toggle(CK7101, 3)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`toggle(CK7105, 3)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`toggle(MS332F, 3)`\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Internal Height - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the internal height property of a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_199\n\n\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Internal Depth - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the internal depth property of a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_197\n\n\n\n----------------------------------------\n\nTITLE: Accessing PSU Shroud Wall Thickness - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the wall thickness property of a PSU shroud definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_231\n\n\n\n----------------------------------------\n\nTITLE: Positioning Children on Horizontal Hole\nDESCRIPTION: This module is used to position children on the horizontal hole. This module allows for other parts to be placed relative to the horizontal hole of the fixing block.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_145\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_h_hole(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Using Screws\nDESCRIPTION: This snippet demonstrates the use of the `screw` module to add screws with different types and lengths to the design. This likely generates the 3D model of the screw, including the head and the threaded shaft, and positions it appropriately in the design.  The code takes two parameters: the screw type (e.g., `M2_cap_screw`, `M2p5_pan_screw`) and the screw length.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_117\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M2_cap_screw, 8)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M2p5_pan_screw, 10)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M3_dome_screw, 10)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_dome_screw, 12)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cable Clip Extent\nDESCRIPTION: Calculates the extent of the cable clip. Depends on the screw type, cable size, and optional insert or nut. This function helps determine the overall size/footprint of the cable clip.  The `screw`, and `cable` parameters are required. The optional `insert` and `nut` parameters affect the returned value.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_109\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip_extent(screw, cable, insert = false, nut = false)\n```\n\n----------------------------------------\n\nTITLE: Calculating Number of Knuckles\nDESCRIPTION: This function returns the number of knuckles in the flat hinge based on the given type. This influences the hinge’s strength and design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_152\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_knuckles(type)\n```\n\n----------------------------------------\n\nTITLE: Calculating Screw-to-Knuckle Margin\nDESCRIPTION: This function computes the margin between the screws and the knuckles in the flat hinge design. This margin helps prevent interference and allows the hinge to open to a full range of motion.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_153\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_margin(type)\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Cylinders\nDESCRIPTION: This section introduces the `rounded_cylinder` module for generating cylinders with rounded ends.  It utilizes the `rounded_corner` module for the 2D version. The module takes radius, height, optional internal radius, and an optional angle as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_276\n\n\n\n----------------------------------------\n\nTITLE: Specifying Number of Screws\nDESCRIPTION: This function returns the number of screws used in the flat hinge based on the hinge type. Controls the number of fasteners needed.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_156\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_screws(type)\n```\n\n----------------------------------------\n\nTITLE: Creating Foot Assembly\nDESCRIPTION: This module generates an assembly of a foot with fasteners in place.  `t` specifies thickness and `type` the foot style, `flip` and `no_washer` provides options.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_175\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_assembly(t = 0, type = foot, flip = false, no_washer = false)\n```\n\n----------------------------------------\n\nTITLE: Working with PCB coordinates and grid positions\nDESCRIPTION: Functions to convert between edge offsets and center-relative coordinates, and to access grid positions on perfboard PCBs.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_68\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npcb_coord(type, p)\npcb_grid_pos(type, x, y, z = 0, i = 0)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Foot with Insert\nDESCRIPTION: This function defines a default foot with an insert, a common and convenient method for fixing feet.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_172\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert_foot()\n```\n\n----------------------------------------\n\nTITLE: Generating Grill with OpenSCAD\nDESCRIPTION: Generates a staggered array of 5mm holes for creating grills in sheets.  The `width` and `height` parameters specify the dimensions of the grill.  The `r` parameter defines the hole spacing, defaulting to 1000.  The `poly` parameter, when set to `true`, is used for 3D printing, while `false` (default) is suitable for milling. The `h` parameter determines the height (thickness).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_107\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngrill(width, height, r = 1000, poly = false, h = 0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Foot Height\nDESCRIPTION: This function determines the total height of the foot. It sets the foot's height, often including features.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_166\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_height(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Positioning Children at PSU Shroud Screw Hole Locations - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module translates its children to the calculated positions of the screw holes on a PSU shroud, based on the shroud 'type'. Useful for placing fastener geometry.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_237\n\n\n\n----------------------------------------\n\nTITLE: Creating a Gridfinity Bin\nDESCRIPTION: This module creates a Gridfinity bin. It takes a `type` parameter to determine the bin's properties and accepts children, which define features to be cut out of the bin. This is for creating the main shape of the bin.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_184\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_bin(type)\n```\n\n----------------------------------------\n\nTITLE: Calculating Gridfinity Bin Name\nDESCRIPTION: This function returns the name for the STL file of a Gridfinity bin based on its type, often using the type's properties to name the file for export.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_178\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_bin_name(type)\n```\n\n----------------------------------------\n\nTITLE: Generating Fan Models in OpenSCAD\nDESCRIPTION: Uses the `fan()` module to generate a 3D model of a specific fan type. The type parameter (e.g., `fan120x25`) references a predefined set of dimensions and properties for that fan size.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_34\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfan(fan120x25)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfan(fan17x8)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfan(fan40x11)\n```\n\n----------------------------------------\n\nTITLE: Calculating Handle Length\nDESCRIPTION: This function calculates the outside length of the handle, i.e., the full length along the bottom. This determines the overall handle's size.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_187\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_length()\n```\n\n----------------------------------------\n\nTITLE: Calculating Handle Width\nDESCRIPTION: This function calculates the width of the handle, typically its diameter. Determines the handle's thickness.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_189\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_width()\n```\n\n----------------------------------------\n\nTITLE: Positioning Screws on the Handle\nDESCRIPTION: This module positions children at the screw positions. This is for mounting or placing the screws.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_193\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_screw_positions()\n```\n\n----------------------------------------\n\nTITLE: Generating the Female Hinge Half\nDESCRIPTION: This module generates the half of the hinge without the pin (the leaf that receives the pin). It is intended to be printed.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_162\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_female(type)\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Foot Assembly\nDESCRIPTION: This module creates an assembly of the insert foot with the insert in place. It is typically used when the foot is to be mounted on something.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_177\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert_foot_assembly(type = insert_foot)\n```\n\n----------------------------------------\n\nTITLE: Modules and examples for belts\nDESCRIPTION: Provides a module to draw the belt path along with example usage and BOM entries for common belt types and pulleys. Supports detailed parametric control of belt geometry.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmodule belt(type, points, belt_colour = grey(20), tooth_colour = grey(50), open = false, twist = undef, auto_twist = false, start_twist = false) { ... }\n```\n\n----------------------------------------\n\nTITLE: Modeling Radial Blowers with nopscadlib (OpenSCAD)\nDESCRIPTION: Uses the `blower` module to generate models of different radial blowers (e.g., PE4020, RB5015, BL30x10, BL40x10). The type parameter specifies the blower model, such as Pengda Technology 4020, Runda RB5015, or generic square radial fans.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_21\n\nLANGUAGE: openscad\nCODE:\n```\nblower(PE4020)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nblower(RB5015)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nblower(BL30x10)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nblower(BL40x10)\n```\n\n----------------------------------------\n\nTITLE: Generating socket box vitamins\nDESCRIPTION: This section lists the vitamins needed for the socket box. These are the external hardware dependencies needed to assemble the socket box. It includes insert, mains sockets, nuts, ring terminals, screws, and star washers.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_254\n\n\n\n----------------------------------------\n\nTITLE: Generating SSR Shroud Vitamins\nDESCRIPTION: This section details the vitamins, or hardware, needed to assemble the SSR shroud. It includes inserts, screws, washers, star washers, and zipties.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_258\n\n\n\n----------------------------------------\n\nTITLE: Assembling SSR Shroud\nDESCRIPTION: This section describes the SSR shroud assemblies. It defines the quantity and name of the assemblies.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_260\n\n\n\n----------------------------------------\n\nTITLE: Calculating PSU Shroud Cable Entry Pitch - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates the required pitch (spacing) between cable entries for a PSU shroud, based on the individual cable diameter ('cable_d').\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_225\n\n\n\n----------------------------------------\n\nTITLE: Generating the Handle STL\nDESCRIPTION: This function generates the STL file for the handle, effectively creating the 3D model.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_194\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_stl()\n```\n\n----------------------------------------\n\nTITLE: Generating the Foot STL\nDESCRIPTION: This module generates the STL file for the foot. It takes a `type` parameter to specify the foot design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_174\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge_hole_positions\nDESCRIPTION: The `door_hinge_hole_positions(dir = 0)` module is used to position child objects at the door hole positions. It takes an optional `dir` parameter, suggesting a possible direction or orientation control. The main purpose is to ensure components (like screws) are correctly placed relative to the hinge holes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_122\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge_hole_positions(dir = 0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Name - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the name property of a printed box definition, identified by 'type'. The name is used to uniquely identify multiple box instances within a single project.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_200\n\n\n\n----------------------------------------\n\nTITLE: Rounding 2D/3D Shapes\nDESCRIPTION: The code defines modules for rounding 2D and 3D shapes.  `round()` rounds 2D children, while `round_3D()` rounds 3D children.  Both support single or separate internal and external radii.  `round_3D()` has an option (`chamfer_base`) to chamfer the base for 3D printing.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_275\n\n\n\n----------------------------------------\n\nTITLE: Door Latch - Module: door_latch_assembly\nDESCRIPTION: The module `door_latch_assembly(sheet_thickness = 3)` creates the complete door latch assembly for a specified sheet thickness, defaulted to 3. This module likely combines other elements to produce the full latch, positioning components based on the specified thickness.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_127\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_latch_assembly(sheet_thickness = 3)\n```\n\n----------------------------------------\n\nTITLE: Generating Microswitch Models in OpenSCAD\nDESCRIPTION: This snippet showcases the use of the `microswitch()` module to render various microswitch models within OpenSCAD. The examples take a microswitch type (e.g., small_microswitch, medium_microswitch, large_microswitch) as input, specifying the specific dimensions and characteristics of the microswitch to be modeled. These models are commonly used for limit switches.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_62\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmicroswitch(small_microswitch)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmicroswitch(medium_microswitch)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmicroswitch(large_microswitch)\n```\n\n----------------------------------------\n\nTITLE: Calculating Printed Box Base Screw Length - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates the required length for the base screws of a printed box, based on the box 'type' and an optional 'panel_thickness' parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_212\n\n\n\n----------------------------------------\n\nTITLE: Instantiating SMD Diode Model in OpenSCAD\nDESCRIPTION: Calls the `smd_diode` module to generate a 3D model of an SMD diode. It takes the package type and value as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_84\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_diode(DO214AC, \"SS34\")\n```\n\n----------------------------------------\n\nTITLE: Creating Handle Assembly\nDESCRIPTION: This module creates an assembly of the handle with the inserts in place. It's for the assembled handle part and often includes the insert placement.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_190\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_assembly()\n```\n\n----------------------------------------\n\nTITLE: Drawing LCD Displays: OpenSCAD\nDESCRIPTION: This module draws LCD displays. It uses the module `display` with a specific display type (`BigTreeTech_TFT35v3_0`, `HDMI5`, `TFT128x160`, `LCD1602A`, `LCD2004A`, `LCDS7282B`, `SSD1963_4p3`) as a parameter. These modules likely define the geometric characteristics of various LCDs, enabling their inclusion within designs.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_31\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(BigTreeTech_TFT35v3_0)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(HDMI5)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(TFT128x160)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(LCD1602A)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(LCD2004A)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(LCDS7282B)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndisplay(SSD1963_4p3)\n```\n\n----------------------------------------\n\nTITLE: CoreXY Improvements in OpenSCAD\nDESCRIPTION: Improvements to the CoreXY mechanism implementation including better default parameters and modification of plain_idler_offset to work in both x and y directions, facilitating the use of larger idler pulleys.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Improvements to core_xy\n// 1. Better default parameters\n// 2. Changed plain_idler_offset to work in x and y, to facilitate larger idler pulleys\n// M.B. commit e71db80\n```\n\n----------------------------------------\n\nTITLE: Calculating Printed Box Base Screw Inset - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates and returns how far the base screws are inset from the edges for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_211\n\n\n\n----------------------------------------\n\nTITLE: Instantiating SMD LED Model in OpenSCAD\nDESCRIPTION: Calls the `smd_led` module to generate a 3D model of an SMD LED. It takes the package type and color as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_85\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_led(LED0603, \"green\")\n```\n\n----------------------------------------\n\nTITLE: Drawing D-type Connectors: OpenSCAD\nDESCRIPTION: This module draws D-type connectors, utilizing parameters for type (DCONN9, DCONN15, DCONN25, DCONN37), and options such as IDC and PCB mounting. It is used to model the physical dimensions of D-type connectors, aiding in the design of enclosures and related projects.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_29\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_plug(DCONN15, idc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_socket(DCONN15, idc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_plug(DCONN25, pcb = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_socket(DCONN25, pcb = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_plug(DCONN37)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_socket(DCONN37)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_plug(DCONN9)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_socket(DCONN9)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nd_pillar()\n```\n\n----------------------------------------\n\nTITLE: Creating Module Models in OpenSCAD\nDESCRIPTION: This snippet uses the `mod()` module to create a model of a DROK buck converter. It accepts a module type as input (drok_buck) and generates the 3D representation according to its specifications. This facilitates the incorporation of electronic modules within other OpenSCAD models. It includes the creation of nut and screw components.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_64\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmod(drok_buck)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(M4_nut, nyloc = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew(M4_dome_screw, 12)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwasher(M4_washer)\n```\n\n----------------------------------------\n\nTITLE: Accessing PSU Shroud Fastener Screw Type - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the type of screw intended to be used for fastening the PSU shroud, based on the shroud 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_230\n\n\n\n----------------------------------------\n\nTITLE: Positioning Children at PSU Shroud Cable Tie Locations - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module translates its children to the calculated positions for cable ties on a PSU shroud. It uses the shroud 'type', 'cable_d', and optional 'cables' parameters to determine placement.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_235\n\n\n\n----------------------------------------\n\nTITLE: Drawing Radial Disc Components using rd_disc in OpenSCAD\nDESCRIPTION: Example calls to the `rd_disc` module in nopscadlib to generate 3D models of radial disc components like ceramic capacitors or varistors. Requires the component type identifier (e.g., `10mm_disc`, `ERZV07D471`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_69\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_disc(10mm_disc, \"1nF Y2\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_disc(6p4mm_disc, \"10nF\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_disc(ERZV07D471, \"470V\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Ribbon Clamp Height - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates the height of a ribbon clamp. It takes an optional 'screw' type parameter and an optional 'ways' parameter, affecting the final height calculation.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_239\n\n\n\n----------------------------------------\n\nTITLE: Drawing DIP Packages: OpenSCAD\nDESCRIPTION: This module draws Dual Inline Package (DIP) components. It creates models of PDIP IC packages with varying pin counts and the components those packages contain.  The `pdip` function takes parameters such as number of pins (`pins`), part name (`part`), and other options, and draws the corresponding 3D model.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_30\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndil_socket(14, 7.62)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(14, 74HC00)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(20, 74HC245)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(28, ATMEGA328)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(8, NE555)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(6, OPTO)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(16, ULN2003)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npdip(18, ULN2803)\n```\n\n----------------------------------------\n\nTITLE: Calculating PSU Shroud Centre Y Offset - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates the Y-axis offset of the PSU shroud's center relative to the PSU's center, based on the shroud 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_226\n\n\n\n----------------------------------------\n\nTITLE: Drawing Radial Electrolytic Capacitors using rd_electrolytic in OpenSCAD\nDESCRIPTION: Example call to the `rd_electrolytic` module in nopscadlib to generate a 3D model of a radial electrolytic capacitor. Requires the capacitor type identifier (e.g., `ECAP8x12`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_72\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_electrolytic(ECAP8x12, \"220uF35V\")\n```\n\n----------------------------------------\n\nTITLE: Modules for BLDC motor drawing and screw positioning\nDESCRIPTION: Includes functionality to draw specified BLDC motor models and determine screw and screw hole positions for assembly, enabling detailed parametric modeling of motor components.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_19\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmodule BLDC(type) { ... }\nmodule BLDC_base_screw_positions(type, n = 4) { ... }\nmodule BLDC_bell_screw_positions(type, n = 4) { ... }\nmodule BLDC_screw_positions(holes, n = 4) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining RPI Case Assembly Components in OpenSCAD\nDESCRIPTION: Lists the vitamins (hardware components) and sub-assemblies required to construct a Raspberry Pi case. Includes 2 M2.5 pan screws and references to two sub-assemblies: RPI_assembly and enviro_case_assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/examples/EnviroPlus/bom/RPI_case_assembly.txt#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nRPI_case_assembly:\nVitamins:\n  2 Screw M2.5 pan x  6.4mm\n\nAssemblies:\n  1 RPI_assembly\n  1 enviro_case_assembly\n```\n\n----------------------------------------\n\nTITLE: Generating PSU Shroud STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry (STL) for a PSU shroud. It requires the shroud 'type', cable diameter ('cable_d'), a 'name', and optionally the number of 'cables' to configure the design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_233\n\n\n\n----------------------------------------\n\nTITLE: Using nut Module for Antenna (OpenSCAD)\nDESCRIPTION: Draws the nut associated with an antenna component using the `nut` module. Requires the nut type (e.g., `ant_nut`) as a parameter. Referenced within the nopscadlib antennas section.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nnut(ant_nut)\n```\n\n----------------------------------------\n\nTITLE: Generating Printed Pulley Teeth STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry specifically for the teeth of a printed pulley, based on the properties defined by the 'type' parameter. This might be used internally by the main pulley module.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_224\n\n\n\n----------------------------------------\n\nTITLE: Positioning Children at Printed Box Screw Locations - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module translates its children to the calculated base screw positions of a printed box, based on the 'type' parameter. Useful for placing screw or insert models.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_220\n\n\n\n----------------------------------------\n\nTITLE: Generating Printable Pulley STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry (STL) for a printable pulley, based on the properties defined by the 'type' parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_222\n\n\n\n----------------------------------------\n\nTITLE: Instantiating Compression Spring Model in OpenSCAD\nDESCRIPTION: Calls the `comp_spring` module to generate a 3D model of a compression spring. It takes the spring type and optional compressed length and centering parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_94\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncomp_spring(batt_spring)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Ttrack Module\nDESCRIPTION: This snippet calls the `ttrack` module, which is used to draw a T-track with specified parameters, including length.  It creates a visual representation of a T-track for 3D modeling.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_106\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`ttrack(type, length, colour = \"LightSlateGray\")`\n```\n\n----------------------------------------\n\nTITLE: Generating Fastened PSU Shroud Assembly STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry for a PSU shroud assembly with fasteners (screws) in place. It requires the shroud 'type', 'cable_d', 'thickness', 'name', and optional 'cables' and 'screw' parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_236\n\n\n\n----------------------------------------\n\nTITLE: Calculating Knuckle Diameter\nDESCRIPTION: This function determines the diameter of the knuckles in the flat hinge design, according to the specified type. It is used to define the size of the hinge's interlocking parts.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_151\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_knuckle_dia(type)\n```\n\n----------------------------------------\n\nTITLE: Accessing PCB component information\nDESCRIPTION: Functions to retrieve component details and positions from a PCB object.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_67\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npcb_component(type, name, index = 0)\npcb_component_position(type, name, index = 0)\n```\n\n----------------------------------------\n\nTITLE: Generating Fastened Ribbon Clamp Assembly STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry for a ribbon clamp assembly with fasteners (screws, washers, star washers) in place. It requires the 'ways' and 'thickness' parameters and accepts an optional 'screw' type parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_244\n\n\n\n----------------------------------------\n\nTITLE: Calculating Gridfinity Corner Radius\nDESCRIPTION: This function calculates the outside corner radius of the Gridfinity bin. This sets the radius for the rounded corners of the bins.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_183\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_corner_r()\n```\n\n----------------------------------------\n\nTITLE: Creating Fixing Block Assembly\nDESCRIPTION: This module generates the assembly of the printed part with the inserts inserted. This module likely combines other modules, like the fixing_block and insert modules, to produce a complete assembled part.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_144\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_assembly(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Modeling Square PCB Buttons with nopscadlib (OpenSCAD)\nDESCRIPTION: Uses the `square_button` module to model PCB-mounted square buttons. Parameters specify the button type (e.g., button_12mm, button_4p5mm, button_6mm, button_6mm_7) and optionally the cap color (e.g., \"yellow\") if the button type includes a cap.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_26\n\nLANGUAGE: openscad\nCODE:\n```\nsquare_button(button_12mm, \"yellow\")\n```\n\nLANGUAGE: openscad\nCODE:\n```\nsquare_button(button_4p5mm)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nsquare_button(button_6mm)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nsquare_button(button_6mm_7)\n```\n\n----------------------------------------\n\nTITLE: Modeling E3D Clone Hot End using e3d_hot_end Module (OpenSCAD)\nDESCRIPTION: Instantiates a model of an E3D clone hot end (aliexpress) for 3mm filament using the `e3d_hot_end` module. This module is part of the hot end modeling capabilities of the library.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_50\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ne3d_hot_end(E3D_clone, 3)\n```\n\n----------------------------------------\n\nTITLE: Using green_terminal Module for 2-Way Terminal Block (OpenSCAD)\nDESCRIPTION: Instantiates a 2-way green terminal block of type `gt_5x17` (5mm pitch) using the `green_terminal` module. This module draws various green terminal blocks, allowing pin skipping via the optional `skip` parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_41\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngreen_terminal(gt_5x17, 2)\n```\n\n----------------------------------------\n\nTITLE: Creating Screw Knob in OpenSCAD\nDESCRIPTION: This section details a customizable screw knob with an embedded hex head screw. It describes properties like flange radius, thickness, and fluting, along with functions and modules for generating the knob, including solid or wall-only flanges, and wave or fluted edges. Dependencies include OpenSCAD, and it shows how to create a screw knob assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_249\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew_knob_flange_r(type)\n// The flange outside radius\nscrew_knob_flange_t(type)\n// The thickness of the flange\nscrew_knob_fluted(type)\n// Fluted instead of sine wave\nscrew_knob_screw(type)\n// The hex screw\nscrew_knob_solid(type)\n// Is the flange solid or just a wall\nscrew_knob_stem_h(type)\n// The stem height below the flange\nscrew_knob_wall(type)\n// Wall thickness\nscrew_knob_wave_amp(type)\n// Wave amplitude\nscrew_knob_waves(type)\n// Number of waves around the flange edge\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nknob_height(type)\n// Total height of the knob\nscrew_knob(screw, wall = 2, stem_h = 6, flange_t = 4, flange_r = 9, solid = true, waves = 5, wave_amp = 2, fluted = false)\n// Constructor\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew_knob(type)\n// Generate the STL for a knob to fit the specified hex screw\nscrew_knob_assembly(type, length)\n// Assembly with the screw in place\n```\n\n----------------------------------------\n\nTITLE: Modeling JHead Mk5 Hot End using jhead_hot_end Module (OpenSCAD)\nDESCRIPTION: Instantiates a model of a JHead MK5 hot end for 3mm filament using the `jhead_hot_end` module. This module is part of the hot end modeling capabilities of the library.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_51\n\nLANGUAGE: OpenSCAD\nCODE:\n```\njhead_hot_end(JHeadMk5, 3)\n```\n\n----------------------------------------\n\nTITLE: Using ball_bearing Module (OpenSCAD)\nDESCRIPTION: Draws a ball bearing component based on its type (e.g., `BB608`, `BBF625`). The module handles different sizes and shield types (ZZ for metal, -2RS for rubber) inferred from the type's properties (`bb_colour`).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB608)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB6200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB6201)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB624)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB6808)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB686)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BB696)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBF623)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBF625)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBF693)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBF695)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBMR63)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBMR83)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBMR85)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBMR93)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBMR95)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nball_bearing(BBSMR95)\n```\n\n----------------------------------------\n\nTITLE: Calculating Foot Thickness\nDESCRIPTION: This function calculates the thickness of the foot under the screw head. This defines how thick the foot is where the screw is attached.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_170\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_thickness(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Calculating Rounded Corner Radius\nDESCRIPTION: This function calculates the rounded corner radius of the foot based on its type. This allows controlling the visual shape.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_167\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_rad(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Assembling ribbon clamp\nDESCRIPTION: This section describes ribbon clamp assemblies, providing their quantity and names. It describes pre-built assemblies, ready to be assembled with their corresponding parts, which are intended to streamline the creation process.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_248\n\n\n\n----------------------------------------\n\nTITLE: Accessing PSU Shroud Outside Width - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the outside width property of a PSU shroud definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_232\n\n\n\n----------------------------------------\n\nTITLE: Generating screw knob stl\nDESCRIPTION: This section lists the screw knob STL files, detailing their quantity and filenames, and it is essential for printing.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_251\n\n\n\n----------------------------------------\n\nTITLE: Calculating PSU Shroud Extension Beyond PSU - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates how far the PSU shroud extends beyond the dimensions of the PSU itself, intended to provide clearance for electrical connections, based on the shroud 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_228\n\n\n\n----------------------------------------\n\nTITLE: Assembling screw knob\nDESCRIPTION: This section describes the screw knob assemblies. It provides the quantity and the name of the assembly for different screw sizes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_252\n\n\n\n----------------------------------------\n\nTITLE: Creating SSR Shroud in OpenSCAD\nDESCRIPTION: This section defines the SSR Shroud component, designed to cover the mains end of an SSR for safety. It lists functions related to cable entry, shroud dimensions, and screw specifications. It includes modules for generating the STL, assemblies, fastened assemblies, screw hole positions, and the holes themselves. Dependencies include OpenSCAD.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_257\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nssr_shroud_cable_x(type, cable_d)\n// Position of cable entry holes\nssr_shroud_extent(type, cable_d)\n// How far it extends beyond the SSR\nssr_shroud_height(type)\n// Outside height\nssr_shroud_screw(type)\n// Screw used to fasten\nssr_shroud_width(type)\n// Outside width of shroud\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nssr_shroud(type, cable_d, name)\n// Generate the STL file for a specified ssr and cable\nssr_shroud_assembly(type, cable_d, name)\n// The printed parts with inserts fitted\nssr_shroud_fastened_assembly(type, cable_d, thickness, name)\n// Assembly with screws in place\nssr_shroud_hole_positions(type)\n// Place children at the screw hole positions\nssr_shroud_holes(type, cable_d)\n// Drill the screw and ziptie holes\n```\n\n----------------------------------------\n\nTITLE: Checking Printed Pulley Inverted State - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function determines if a specific printed pulley configuration ('type') needs to be printed upside down. This is typically done to avoid overhang issues during 3D printing.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_221\n\n\n\n----------------------------------------\n\nTITLE: Generating PCB Models using pcb in OpenSCAD\nDESCRIPTION: Example call to the `pcb` module in nopscadlib to generate a 3D model of a perfboard. Requires the board type identifier (e.g., `PERF70x50`).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_74\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npcb(PERF70x50)\n```\n\n----------------------------------------\n\nTITLE: Generating the Male Hinge Half\nDESCRIPTION: This module generates the half of the hinge with the stationary pin. This half typically houses the pin around which the hinge rotates. The `female` parameter determines if the pin is on the male part or not.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_163\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_male(type, female = false)\n```\n\n----------------------------------------\n\nTITLE: Generating SSR shroud stl\nDESCRIPTION: This section lists the filenames for the SSR shroud STLs. It specifies the printed components.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_259\n\n\n\n----------------------------------------\n\nTITLE: Generating socket box stl\nDESCRIPTION: This section lists the STL files for different socket box variants. The information is used for printing the socket boxes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_255\n\n\n\n----------------------------------------\n\nTITLE: Calculating Foot Diameter\nDESCRIPTION: This function determines the outside maximum diameter of the foot based on the specified type. It is used for determining the foot's size.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_165\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_diameter(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Creating Strap Handle in OpenSCAD\nDESCRIPTION: This section describes the strap handle, including properties like strap extension, panel thickness, screw type, strap thickness, and width. The function constructs a property list for a strap. Modules exist for STL generation, assemblies, end pieces, panel cutouts, and screw positions.  Dependencies include OpenSCAD and flexible filament.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_261\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstrap_extension(type = strap)\n// How much length of the strap that can pull out\nstrap_panel(type = strap)\n// Panel thickness\nstrap_screw(type = strap)\n// Screw type\nstrap_thickness(type = strap)\n// Thickness of strap\nstrap_width(type = strap)\n// Width of strap\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstrap(width = 18, thickness = 2, screw = M3_pan_screw, panel_thickness = 3, extension = 25)\n// Construct a property list for a strap\nstrap_end_width(type = strap)\n// Width of the ends\nstrap_height(type)\n// Height of the ends\nstrap_insert(type)\n// The insert type\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstrap(length, type = strap)\n// Generate the STL for the rubber strap\nstrap_assembly(length, type = strap)\n// Assembly with screws in place\nstrap_end(type = strap)\n// Generate the STL for end piece\nstrap_holes(length, type = strap, h = 100)\n// The panel cut outs\nstrap_screw_positions(length, type = strap)\n// Place children at the screw positions\n```\n\n----------------------------------------\n\nTITLE: Generating strap handle stl\nDESCRIPTION: This section lists the STL files for the strap handle, namely the strap and the strap end.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_263\n\n\n\n----------------------------------------\n\nTITLE: Modeling Screws with nopscadlib (OpenSCAD)\nDESCRIPTION: Employs the `screw` module to model various screws, specifying type (e.g., M2_cap_screw, M3_cap_screw, M4_cap_screw) and length in millimeters (e.g., 8, 10, 20, 25). Used here in conjunction with blower models.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_22\n\nLANGUAGE: openscad\nCODE:\n```\nscrew(M2_cap_screw, 8)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nscrew(M2_cap_screw, 10)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nscrew(M3_cap_screw, 20)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nscrew(M4_cap_screw, 25)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Foot Type - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the type or specification for the printed foot of a box, identified by 'type'. It can be set to false to suppress the inclusion of feet.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_198\n\n\n\n----------------------------------------\n\nTITLE: Drawing PCB Mounted Modules using rd_module in OpenSCAD\nDESCRIPTION: Example calls to the `rd_module` module in nopscadlib to generate 3D models of potted PCB modules like PSUs or relays. Requires the module type identifier (e.g., `LDE10_20B`, `HF33F`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_73\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_module(LDE10_20B, \"12V 900ma\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_module(VCE03, \"12V 250ma\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_module(HF33F, \"012-HSL3F\")\n```\n\n----------------------------------------\n\nTITLE: Layout Utility in OpenSCAD\nDESCRIPTION: Provides a function and module to position multiple objects in a line with adjustable gaps, based on passed widths of items. Useful for organizing components with equal spacing in a 3D layout.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_270\n\nLANGUAGE: scad\nCODE:\n```\n`layout_offset(widths, i, gap = 2)`\nCalculates the offset position for the `i`th element in a line, considering widths and gaps.\n\n`layout(widths, gap = 2, no_offset = false)`\nPositions child objects sequentially with specified gaps, optionally without initial offset.\n\n```\n\n----------------------------------------\n\nTITLE: Documentation and overview of 7_segments OpenSCAD module\nDESCRIPTION: This snippet defines properties and components for rendering 7-segment digit displays in OpenSCAD. It supports single digits or multiple digits, with configurable sizing, pin pitches, and presence of decimal points. Dependencies include the '7_segment' and '7_segments' object definitions, and it utilizes heuristics for segment and decimal point placement. Inputs are size and type parameters; output is a 3D model of a 7-segment digit or display.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n# 7_segments module overview\n// Can be single digits or multiple digits\n// Determines layout by overall width vs digit width\n// Presence and position of decimal point\n\n// Object definitions for digits and segments\n// from vitamins/7_segments.scad and vitamins/7_segment.scad\n\n// Example test code in tests/7_segments.scad\n\n// Properties of 7_segment components\n// - `7_segment_digit_size(type)`: size of digit segments\n// - `7_segment_pin_pitch(type)`: pin spacing and diameter\n// - `7_segment_pins(type)`: pin configuration (none in this case)\n// - `7_segment_size(type)`: size of the entire body of the display\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Sphere Geometry to Ensure Axis Vertices in OpenSCAD\nDESCRIPTION: This snippet redefines the standard sphere module to guarantee vertices at the poles and equator, ensuring compatibility with hulling and Minkowski operations in OpenSCAD. Required dependencies are the OpenSCAD standard sphere module, with this override replacing or wrapping it. Parameters include radius (r) and optional diameter (d). The output is a sphere with `$fn` (facet number) as a multiple of four and consistent axis vertices, preserving intended model dimensions after solid unions. Limitation: Overrides built-in sphere; use only when such guarantees are needed.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_285\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Axis-aligned sphere override\nsphere(r=1, d=undef) // Custom sphere with vertices at all half axes\n// Usage: Replace OpenSCAD's default sphere for models where hull/minkowski dimension precision is required.\n```\n\n----------------------------------------\n\nTITLE: 3D Offset Utility in OpenSCAD\nDESCRIPTION: Implements shape offsetting via Minkowski sum with a sphere, allowing for positive or negative offsets typically used for rounding edges or creating beveled corners. Chamfer options are included for bottom edges, suitable for 3D printing preparations.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_272\n\nLANGUAGE: scad\nCODE:\n```\n`offset_3D(r, chamfer_base = false)`\nOffsets a shape in 3D space by radius `r`, positive or negative, optionally chamfering the bottom edge for better 3D printing compatibility.\n\n```\n\n----------------------------------------\n\nTITLE: Using 7_segment_digit Module (OpenSCAD)\nDESCRIPTION: Draws a single specified 7-segment digit display component. Requires the digit type and accepts optional `colour` and `pin_length` parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n7_segment_digit(type, colour = grey(95), pin_length = 6.4)\n```\n\n----------------------------------------\n\nTITLE: Drawing Crystals using rd_xtal in OpenSCAD\nDESCRIPTION: Example calls to the `rd_xtal` module in nopscadlib to generate 3D models of electronic crystals. Requires the crystal type identifier (e.g., `ACT1100`, `HC49`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_71\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_xtal(ACT1100, \"ACT1100\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_xtal(ACT1700, \"ACT1700\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_xtal(C_002RX, \"C_002RX\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_xtal(HC49, \"HC49\")\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_xtal(HC49_4H, \"HC49_4H\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Hinge Width\nDESCRIPTION: This function returns the width of the flat hinge, based on its type. It is one of the key dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_158\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_width(type)\n```\n\n----------------------------------------\n\nTITLE: Door Latch - Module: door_latch_stl\nDESCRIPTION: The `door_latch_stl()` module generates the STL file for the printed part of the door latch. This module would output the 3D geometry of the latch for 3D printing.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_128\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_latch_stl()\n```\n\n----------------------------------------\n\nTITLE: Instantiating Swiss Clip Module\nDESCRIPTION: This calls the `swiss_clip` module with a specified type.  The `swiss_clip` module is likely defined in the `swiss_clip.scad` file which is used to model the Swiss clip.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_103\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`swiss_clip(UKPFS1008_10)`\n```\n\n----------------------------------------\n\nTITLE: Creating Rounded Triangles\nDESCRIPTION: The `rounded_right_triangle` module creates 3D right triangles with rounded edges. It is designed for embedding in other parts. The module takes x, y, z dimensions, fillet radius, and options for centering and offsetting.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_278\n\n\n\n----------------------------------------\n\nTITLE: Generating Annotation Module in OpenSCAD\nDESCRIPTION: This section describes annotation modules for use in the documentation. Modules are for drawing arrows and text labels. Dependencies include OpenSCAD.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_265\n\nLANGUAGE: OpenSCAD\nCODE:\n```\narrow(length = 20)\n// Draw an arrow that faces downwards\nlabel(str, scale = 0.25, valign = \"baseline\", halign = \"left\")\n// Draw text that always faces the camera\n```\n\n----------------------------------------\n\nTITLE: Creating Socket Box in OpenSCAD\nDESCRIPTION: This section describes the generation of a UK 13A socket box with an earth terminal. The description lists functions to determine the outside depth, and modules for STL generation, assemblies, and fastened assemblies. Dependencies include OpenSCAD and relevant mains socket models.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_253\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsocket_box_depth()\n// Outside depth of the backbox\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsocket_box(type)\n// Generate STL of the backbox for the specified socket\nsocket_box_assembly(type)\n// The box with inserts fitted\nsocket_box_fastened_assembly(type, thickness)\n// The socket and backbox on each side of the specified panel thickness\n```\n\n----------------------------------------\n\nTITLE: Using green_terminal Module for 7-Way Terminal Block (OpenSCAD)\nDESCRIPTION: Instantiates a 7-way green terminal block of type `gt_2p54` (0.1\" pitch) using the `green_terminal` module. This module draws various green terminal blocks, allowing pin skipping via the optional `skip` parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_46\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngreen_terminal(gt_2p54, 7)\n```\n\n----------------------------------------\n\nTITLE: Calculating Pin Diameter\nDESCRIPTION: This function returns the diameter of the pin in the flat hinge. This influences the hinge's function and clearances.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_154\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_pin_dia(type)\n```\n\n----------------------------------------\n\nTITLE: Bezier Curve Function in OpenSCAD\nDESCRIPTION: This section describes functions for Bezier curves, including a function for joining paths using Bezier curves. Dependencies include OpenSCAD.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_266\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbezier_join()\n// joins two paths with a Bezier curve that starts tangential to the end of `path1` and ends tangential to the end of `path2`.\n```\n\n----------------------------------------\n\nTITLE: Interpolating with Splines\nDESCRIPTION: This section implements cubic splines to interpolate 2D points. It includes a `cubic_spline` function to generate points on a cubic spline and a `catmull_rom_spline` function based on the Catmull-Rom method.  Note that Catmull-Rom splines have the limitation that the curve doesn't reach the end points but stops just before them.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_280\n\n\n\n----------------------------------------\n\nTITLE: Defining Handle Screw Type\nDESCRIPTION: This function defines the type of screw to be used for the handle, allowing for consistency in the design. The type sets the screw.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_188\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_screw()\n```\n\n----------------------------------------\n\nTITLE: Positioning Horizontal Screw\nDESCRIPTION: This function returns a transformation (transform) to position the horizontal screw within the fixing block assembly. This is essential for placing screws accurately during the assembly process.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_136\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_h_hole(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge_stat_stl\nDESCRIPTION: This module, `door_hinge_stat_stl()`, generates the STL file for the stationary part of the door hinge. It will likely contain the necessary design to allow the hinge to be fastened to a printer frame. \nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_125\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge_stat_stl()\n```\n\n----------------------------------------\n\nTITLE: Using green_terminal Module for 3-Way Terminal Block (OpenSCAD)\nDESCRIPTION: Instantiates a 3-way green terminal block of type `gt_5x11` (5mm pitch) using the `green_terminal` module. This module draws various green terminal blocks, allowing pin skipping via the optional `skip` parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_42\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngreen_terminal(gt_5x11, 3)\n```\n\n----------------------------------------\n\nTITLE: Modeling a Ziptie using ziptie Module (OpenSCAD)\nDESCRIPTION: Calls the `ziptie` module to represent a small ziptie (`small_ziptie`), likely corresponding to a 2.5mm x 100mm size based on the BOM entry.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_54\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nziptie(small_ziptie)\n```\n\n----------------------------------------\n\nTITLE: Modeling Bulldog Clips with nopscadlib (OpenSCAD)\nDESCRIPTION: Generates simplified models of bulldog clips using the `bulldog` module. The parameter specifies the clip size type (e.g., small_bulldog for 19mm, large_bulldog for 25mm). The second optional parameter `open` defaults to 4mm if omitted.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_25\n\nLANGUAGE: openscad\nCODE:\n```\nbulldog(small_bulldog)\n```\n\nLANGUAGE: openscad\nCODE:\n```\nbulldog(large_bulldog)\n```\n\n----------------------------------------\n\nTITLE: Modeling Heatshrink Tubing using tubing Module (OpenSCAD)\nDESCRIPTION: Calls the `tubing` module to represent heatshrink sleeving. The first call models 1.6mm ID tubing (`HSHRNK16`) with a default length (likely 15mm based on BOM), and the second models 6.4mm ID tubing (`HSHRNK64`) with an explicit length of 60mm.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_47\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntubing(HSHRNK16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntubing(HSHRNK64, 60)\n```\n\n----------------------------------------\n\nTITLE: Properties and models for BLDC motors\nDESCRIPTION: Defines parameters for brushless DC motors including dimensions of base, bell, body, prop shaft, and associated components. Enables parametric generation of motor models.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_18\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfunction BLDC_base_diameter(type) { ... }\nfunction BLDC_base_height_1(type) { ... }\nfunction BLDC_base_height_2(type) { ... }\nfunction BLDC_base_hole_diameter(type) { ... }\nfunction BLDC_base_holes(type) { ... }\nfunction BLDC_base_open(type) { ... }\nfunction BLDC_bell_diameter(type) { ... }\nfunction BLDC_bell_height_1(type) { ... }\nfunction BLDC_bell_height_2(type) { ... }\nfunction BLDC_bell_hole_diameter(type) { ... }\nfunction BLDC_bell_holes(type) { ... }\nfunction BLDC_bell_spokes(type) { ... }\nfunction BLDC_body_colour(type) { ... }\nfunction BLDC_boss_diameter(type) { ... }\nfunction BLDC_boss_height(type) { ... }\nfunction BLDC_diameter(type) { ... }\nfunction BLDC_height(type) { ... }\nfunction BLDC_prop_shaft_diameter(type) { ... }\nfunction BLDC_prop_shaft_length(type) { ... }\nfunction BLDC_prop_shaft_thread_diameter(type) { ... }\nfunction BLDC_prop_shaft_thread_length(type) { ... }\nfunction BLDC_shaft_diameter(type) { ... }\nfunction BLDC_shaft_length(type) { ... }\nfunction BLDC_shaft_offset(type) { ... }\nfunction BLDC_side_colour(type) { ... }\nfunction BLDC_wire_diameter(type) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Teardrop Angle in OpenSCAD\nDESCRIPTION: This change allows configuration of the teardrop angle in OpenSCAD. Teardrop shapes are commonly used in 3D printing to create self-supporting holes. The calculation for teardrop top length was simplified in a subsequent commit.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Allow configuration of teardrop angle\n// M.B. commit 8682d0a\n\n// Simplified teardrop top length calculation\n// C.P. commit 608f0b2\n```\n\n----------------------------------------\n\nTITLE: Using Star Washers\nDESCRIPTION: This snippet uses the `star_washer` module to add star washers to the model. The star washers' sizes are specified using constants (e.g., `M2_washer`, `M2p5_washer`). This likely generates the 3D model of the star washer and positions it according to the design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_119\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstar_washer(M2_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstar_washer(M2p5_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstar_washer(M3_washer)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstar_washer(M4_washer)\n```\n\n----------------------------------------\n\nTITLE: Creating Fastened Handle Assembly\nDESCRIPTION: This module assembles the handle with fasteners in place, taking `thickness` as a parameter (potentially for mounting). It creates the full handle assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_191\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_fastened_assembly(thickness)\n```\n\n----------------------------------------\n\nTITLE: Specifying Hinge Screw Type\nDESCRIPTION: This function specifies the type of screw used to mount the flat hinge, based on the type identifier. Used for mounting the hinge leaves.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_155\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_screw(type)\n```\n\n----------------------------------------\n\nTITLE: Drag Chain - Module: drag_chain_assembly\nDESCRIPTION: The module `drag_chain_assembly(type, pos = 0, render = false)` creates the drag chain assembly, taking `type`, `pos` (position) and `render` as parameters. The `pos` likely defines the position within the chain's travel, while render affects how the object is displayed. This would be used to generate a pre-assembled drag chain.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_130\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndrag_chain_assembly(type, pos = 0, render = false)\n```\n\n----------------------------------------\n\nTITLE: Creating Mains Socket Models in OpenSCAD\nDESCRIPTION: This snippet shows how to use the `mains_socket()` module to generate 3D models of UK 13A mains sockets. It accepts a socket type (e.g., Contactum, PMS9143A, MKLOGIC) as a parameter, which controls the specific socket configuration. The examples are suitable for creating accurate models for 3D printing or other design purposes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_61\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmains_socket(Contactum)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmains_socket(PMS9143A)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmains_socket(MKLOGIC)\n```\n\n----------------------------------------\n\nTITLE: Defining Handle Sub-Assembly with Inserts using OpenSCAD\nDESCRIPTION: This OpenSCAD module defines the geometry for a 3D printed handle with heat-fit inserts already installed. It uses the `assembly()` module to mark itself as a step in the build manual, includes a build instruction comment, and sets a specific pose for its representation in the manual. It does not represent the final assembly with all fasteners.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/docs/usage.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n//\n//! Place inserts in the bottom of the posts and push them home with a soldering iron with a conical bit heated to 200&deg;C.\n//\nmodule handle_assembly() pose([225, 0, 150], [0, 0, 14]) //! Printed part with inserts in place\nassembly(\"handle\", ngb = true) {\n    translate_z(handle_height())\n        stl_colour(pp1_colour) vflip() handle_stl();\n\n    handle_screw_positions()\n        vflip()\n            insert(insert);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supportless Horizontal Holes with Teardrop Shapes in OpenSCAD\nDESCRIPTION: This snippet delivers modules for generating teardrop-shaped slots and holes optimized for 3D printing without requiring support material. It depends on core OpenSCAD and NopSCADlib utilities, and is inspired by layup requirements for horizontal holes. Parameters include height, radius, width, centering booleans, chamfer amount, and plus/truncate options for fine-tuning the teardrop profile. Outputs include holes (teardrop, semi_teardrop), plus versions compensating for layer staircasing, and horizontal or vertical teardrop slots. Limitations: Suitable for holes above certain minimum sizes; use 'plus' for optimal round appearance in cross-section.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_286\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Teardrop and supportless slot modules\nsemi_teardrop(h, r, d=undef, center=true, chamfer=0, chamfer_both_ends=true, plus=false)\nteardrop(h, r, center=true, truncate=true, chamfer=0, chamfer_both_ends=true, plus=false)\nteardrop_plus(h, r, center=true, truncate=true, chamfer=0, chamfer_both_ends=true)\ntearslot(h, r, w, center=true, chamfer=0, chamfer_both_ends=true, plus=false)\nvertical_tearslot(h, r, l, center=true, chamfer=0, chamfer_both_ends=true, plus=false)\nteardrop_chamfer(h, center, chamfer, chamfer_both_ends) // Internal use\n// Usage: Select desired teardrop or slot module, adjust truncation, plus, and chamfer options for printability.\n```\n\n----------------------------------------\n\nTITLE: Drag Chain - Module: screw_lug\nDESCRIPTION: The `screw_lug(screw, h = 0)` module generates a D-shaped lug for a screw.  It takes the `screw` type and an optional height parameter `h`. It is likely used to create the screw mounting lugs within the drag chain links.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_133\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew_lug(screw, h = 0)\n```\n\n----------------------------------------\n\nTITLE: Hanging Hole Utility Module in OpenSCAD\nDESCRIPTION: Provides functionality to create hanging holes in 3D models, enabling the printing of holes that appear to be suspended in mid-air, based on a specified center height and hole radius. It leverages geometric operations to model such features for complex assemblies.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_268\n\nLANGUAGE: scad\nCODE:\n```\n`hanging_hole(z, ir, h = 100, h2 = 100)`\nCreates a hole with radius `ir` positioned at height `z` above a void shape defined by its child geometries. Useful for printing holes that hang in mid-air.\n\n```\n\n----------------------------------------\n\nTITLE: Properties functions for bearings and brackets\nDESCRIPTION: Defines parameter functions for different bearing types (`sbr` and `scs`) and their associated size and hole offsets, screw types, and spacings. Also includes size functions for brackets and modules for drawing bearing blocks and assemblies.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfunction sbr_bearing(type) { ... }\nfunction sbr_circlip(type) { ... }\nfunction sbr_hole_offset(type) { ... }\nfunction sbr_screw(type) { ... }\nfunction sbr_screw_separation_x(type) { ... }\nfunction sbr_screw_separation_z(type) { ... }\nfunction sbr_side_height(type) { ... }\nfunction sbr_spacer(type) { ... }\nfunction scs_bearing(type) { ... }\nfunction scs_block_center_height(type) { ... }\nfunction scs_block_side_height(type) { ... }\nfunction scs_circlip(type) { ... }\nfunction scs_hole_offset(type) { ... }\nfunction scs_screw(type) { ... }\nfunction scs_screw_separation_x(type) { ... }\nfunction scs_screw_separation_z(type) { ... }\nfunction scs_spacer(type) { ... }\n\nfunction sbr_size(type) { ... }\nfunction scs_size(type) { ... }\n```\n\n----------------------------------------\n\nTITLE: Instantiating Washer Module\nDESCRIPTION: These snippets call the `washer` module, to create visual representations of washers in the 3D model. The first uses a standard M3 washer, while the second utilizes a star washer M3.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_101\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`washer(M3_washer)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`star_washer(M3_washer)`\n```\n\n----------------------------------------\n\nTITLE: Generating Nut Models in OpenSCAD\nDESCRIPTION: This section doesn't contain direct code, but details properties for generating nuts. This utility allows for the creation of steel, brass, or nylon nuts. It includes parameters for different nut types.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Base Insert Type - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the type of insert used for the base screws in a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_209\n\n\n\n----------------------------------------\n\nTITLE: Modeling PTFE Tubing using tubing Module (OpenSCAD)\nDESCRIPTION: Calls the `tubing` module to represent PTFE sleeving. The first call models 0.71mm ID tubing (`PTFE07`) with a length of 62mm, and the second models 2mm ID tubing (`PTFE20`) with a length of 45mm.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_52\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntubing(PTFE07, 62)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ntubing(PTFE20, 45)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Solid State Relay (SSR) Model in OpenSCAD\nDESCRIPTION: Calls the `ssr` module to generate a 3D model of a solid state relay. It takes the SSR type as a parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_95\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nssr(SSR25DA)\n```\n\n----------------------------------------\n\nTITLE: Calculating Hinge Thickness\nDESCRIPTION: This function determines the thickness of the hinge leaves in the flat hinge based on the provided type. Used for setting the dimensions of the hinge's parts.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_157\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_thickness(type)\n```\n\n----------------------------------------\n\nTITLE: Generating Ribbon Clamp Assembly STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry for a ribbon clamp assembly, including the printed part with heatfit inserts placed. It requires the 'ways' parameter and accepts an optional 'screw' type parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_243\n\n\n\n----------------------------------------\n\nTITLE: Instantiating SMD Inductor Model in OpenSCAD\nDESCRIPTION: Calls the `smd_inductor` module to generate a 3D model of an SMD inductor. This module is used to represent various SMD inductor packages with specified values.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_83\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_inductor(CDRH104 ,\"10R\")\n```\n\n----------------------------------------\n\nTITLE: Generating Geared Stepper Motor Models in OpenSCAD\nDESCRIPTION: Uses the `geared_stepper()` module to generate a 3D model of a specific geared tin can stepper motor. The type parameter (e.g., `28BYJ_48`) selects the motor model with predefined dimensions and properties.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_40\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngeared_stepper(28BYJ_48)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngeared_stepper(35BYGHJ75)\n```\n\n----------------------------------------\n\nTITLE: Drawing Extrusions: OpenSCAD\nDESCRIPTION: This module is used to draw various types of aluminium extrusions, such as those from the E1515, E2020, E3030, E4040, etc. series. The `extrusion` module accepts parameters for type, length, and optionally, whether to include a center or corner hole. It facilitates the creation of modular mechanical structures.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_33\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E1515, 80)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2020, 80)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2020t, 80)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2040, 80)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2060, 80)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E2080, 80)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E3030, 80, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E3060, 80, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4040, 80, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4040t, 80, cornerHole = true)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nextrusion(E4080, 80, cornerHole = true)\n```\n\n----------------------------------------\n\nTITLE: Placing Printed Box Screws and Feet - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module is used to place the screws and feet components within the context of a printed box assembly, based on the box 'type' and an optional 'thickness' parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_217\n\n\n\n----------------------------------------\n\nTITLE: Instantiating SMD QFP Chip Model in OpenSCAD\nDESCRIPTION: Calls the `smd_qfp` module to generate a 3D model of an SMD Quad Flat Package (QFP) chip. It takes the package definition and part name as parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_88\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nsmd_qfp(QFP50P1200X1200X160_64N, \"ATSAM4S4BA\")\n```\n\n----------------------------------------\n\nTITLE: Drilling PSU Shroud Screw and Ziptie Holes - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the negative space (holes) for screws and zipties in a PSU shroud geometry. It is typically used with difference() and requires the shroud 'type', 'cable_d', and optional 'cables' parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_238\n\n\n\n----------------------------------------\n\nTITLE: Drawing Boxed Film Capacitors using rd_boxc in OpenSCAD\nDESCRIPTION: Example calls to the `rd_boxc` module (aliased from `rd_box_cap`) in nopscadlib to generate 3D models of boxed film capacitors. Requires the capacitor type identifier, a description string, and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_77\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_boxc(BOXC18x5x11, \"X2 rated film capacitor\", \"0.1uF 250V\" )\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_boxc(BOXC18x10x16, \"X2 rated film capacitor\", \"0.47uF 250V\" )\n```\n\n----------------------------------------\n\nTITLE: Calculating Hinge Depth\nDESCRIPTION: This function calculates the depth of each leaf in the flat hinge based on the specified type, which determines its characteristics. This impacts the hinge’s physical dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_150\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_depth(type)\n```\n\n----------------------------------------\n\nTITLE: Creating Unsupported Drag Chain Variant in OpenSCAD\nDESCRIPTION: A new variant of drag chain without supports was added. The unsupported drag chain has conical pin and corresponding horihole and is printed with cutout facing upwards. The clearance was also made a property of the drag chain to allow adjustment for printing chain assemblies.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Added variant of drag chain without supports.\n// Unsupported drag chain has conical pin and corresponding horihole and is printed with cutout facing upwards.\n// Also made clearance a property of the drag chain so it can be altered for printing chain assemblies\n// M.B. commit da55f86\n```\n\n----------------------------------------\n\nTITLE: Calculating Gridfinity Base Height\nDESCRIPTION: This function calculates the height of the base for Gridfinity bins, likely a constant value or based on specific Gridfinity standards.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_180\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_base_z()\n```\n\n----------------------------------------\n\nTITLE: Generating Screw Holes for Handle\nDESCRIPTION: This module drills holes for the screws. `h` sets the height.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_192\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_holes(h = 100)\n```\n\n----------------------------------------\n\nTITLE: Drawing Vertical Coils using rd_coil in OpenSCAD\nDESCRIPTION: Example call to the `rd_coil` module in nopscadlib to generate a 3D model of a vertical coil/inductor. Requires the coil type identifier (e.g., `IND16x10`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_75\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_coil(IND16x10 ,\"4.7uH\")\n```\n\n----------------------------------------\n\nTITLE: Updating knob_for_pot Parameters in OpenSCAD\nDESCRIPTION: This snippet documents changes made to the `knob_for_pot()` module in the NopSCADlib library. It was updated to fix compatibility with potentiometers having a split shaft, and the order of its parameters was modified. Users should consult the latest library documentation for the new parameter order.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nknob_for_pot()\n```\n\n----------------------------------------\n\nTITLE: Using wire_link Module (OpenSCAD)\nDESCRIPTION: Draws a wire jumper link. Parameters include diameter (`d`), length (`l`), height (`h`), tail length (`tail`, defaults to 3), and optional sleeving (`sleeve`). If `l` is zero, a vertical wire is drawn.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwire_link(0.8, 7.62, h = 0.75, sleeve = [1.5, \"red\"])\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwire_link(0.8, 10.16)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nwire_link(0.8, 0, h = 5)\n```\n\n----------------------------------------\n\nTITLE: Running OpenSCAD with Hard Warnings for BOM Generation\nDESCRIPTION: Illustrates invoking the OpenSCAD command-line tool with the `--hardwarnings` flag. This option is used during Bill of Materials (BOM) generation to ensure that the process stops immediately if any warnings are encountered, preventing potential issues downstream.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nopenscad --hardwarnings\n```\n\n----------------------------------------\n\nTITLE: Generating Screw Knob Vitamins\nDESCRIPTION: This section specifies the necessary 'vitamins,' or hardware components, required to assemble the screw knob. These include hex screws in various sizes (M3, M4, M5, and M6), detailed in the BOM entry.  These are required for creating functional screw knob assemblies.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_250\n\n\n\n----------------------------------------\n\nTITLE: Drawing Common Mode Chokes using rd_cm_choke in OpenSCAD\nDESCRIPTION: Example call to the `rd_cm_choke` module in nopscadlib to generate a 3D model of a specific common mode choke. Requires the choke type identifier (e.g., `ATX_CM_CHOKE`) and a value string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_70\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrd_cm_choke(ATX_CM_CHOKE ,\"3.5mH\")\n```\n\n----------------------------------------\n\nTITLE: NopSCADlib Version Release Notes and Commit Updates\nDESCRIPTION: This document summarizes version updates, features, fixes, and code tidying in the NopSCADlib OpenSCAD library, providing context on each release's focus and specific changes made in the codebase. No active code snippets are present; the content comprises release and commit descriptions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Ridges Property - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the ridge properties (wavelength and amplitude) for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_202\n\n\n\n----------------------------------------\n\nTITLE: Generating Strap Handle Vitamins\nDESCRIPTION: This section lists the vitamins, or hardware, needed for the strap handle. It includes inserts, screws, penny washers, and star washers.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_262\n\n\n\n----------------------------------------\n\nTITLE: Drawing Linear Rails using rail in OpenSCAD\nDESCRIPTION: Example calls to the `rail` module in nopscadlib to generate 3D models of linear rails of specified types and lengths. Requires the rail type identifier (e.g., `HGH15CA`, `MGN12`) and the length in mm.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_78\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(HGH15CA, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(HGH20CA, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(MGN12, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(MGN15, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(MGN5, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(MGN7, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(MGN9, 200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nrail(SSR15, 200)\n```\n\n----------------------------------------\n\nTITLE: Generating Fixing Block Depth\nDESCRIPTION: This function calculates the depth of a fixing block based on the screw size. It is a utility function used within the fixing block design to determine the required dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_135\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_depth(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Generating PSU Shroud Assembly STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry for a PSU shroud assembly, including the printed part with inserts fitted. It uses the shroud 'type', 'cable_d', 'name', and optional 'cables' parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_234\n\n\n\n----------------------------------------\n\nTITLE: Adding SOIC SMD Package to PCB Components in NopSCADlib\nDESCRIPTION: This snippet defines the addition of the 'smd_soic' component in the PCB component function, facilitating the creation of surface-mount SOIC packages on PCB layouts. It extends the PCB component library for SMD packages.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: SCAD\nCODE:\n```\nfunction pcb_component(name, params) {\n  // existing component definitions\n  if (name == \"smd_soic\") {\n    // code for surface-mount SOIC component\n  }\n  // other components\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ribbon clamp stl\nDESCRIPTION: This section describes ribbon clamp STL files, including their quantity and filenames. It provides an overview of the printed parts related to ribbon clamps, essential for creating the physical components.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_247\n\n\n\n----------------------------------------\n\nTITLE: Using 7_segment_digits Module (OpenSCAD)\nDESCRIPTION: Draws multiple 7-segment digits side-by-side. Requires the digit type, the number of digits (`n`), and accepts optional `colour`, `pin_length`, and `cutout` parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n7_segment_digits(type, n, colour = grey(70), pin_length = 6.4, cutout = false)\n```\n\n----------------------------------------\n\nTITLE: Adding Lead Sizing Adjustments in NopSCADlib M Code\nDESCRIPTION: This snippet involves adjusting lead dimensions or spacing in the M (Matlab-like) script, providing fine-tuning of lead sizes for components or PCB design elements. It enhances component parameter accuracy.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: M\nCODE:\n```\nfunction adjust_lead_size(params) {\n  % code to modify lead dimensions based on parameters\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling socket box\nDESCRIPTION: This section describes the assemblies for different socket box variants, and describes the quantity and names.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_256\n\n\n\n----------------------------------------\n\nTITLE: Creating HT Pipe Caps using ht_cap Module (OpenSCAD)\nDESCRIPTION: Instantiates models of various PVC HT water pipe caps (German standard) using the `ht_cap` module. Each call specifies a different standard pipe size (e.g., `HT_110_cap`, `HT_125_cap`).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_55\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_110_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_125_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_160_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_32_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_40_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_50_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_75_cap)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_cap(HT_90_cap)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Base Thickness - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the base thickness property for a printed box definition specified by 'type'. The base thickness can be set to zero to omit the base.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_195\n\n\n\n----------------------------------------\n\nTITLE: Fixing poly_drill Center Parameter in OpenSCAD\nDESCRIPTION: This entry describes a fix applied to the `poly_drill()` module. Specifically, the `center` parameter within the module's functionality was corrected to ensure accurate drilling operations.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npoly_drill()\n```\n\n----------------------------------------\n\nTITLE: Assembling strap handle\nDESCRIPTION: This section describes the strap end assemblies. The quantity and name of the assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_264\n\n\n\n----------------------------------------\n\nTITLE: Creating HT Pipes using ht_pipe Module (OpenSCAD)\nDESCRIPTION: Instantiates models of various PVC HT water pipes (German standard) of different diameters and lengths using the `ht_pipe` module. Each call specifies a type combining diameter and length (e.g., `HT_110_pipe_1000` for DN110, 1000mm long).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_56\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_110_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_110_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_110_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_110_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_110_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_110_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_125_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_125_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_125_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_125_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_125_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_125_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_160_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_160_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_160_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_160_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_160_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_160_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_32_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_32_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_32_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_32_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_32_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_32_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_40_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_40_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_40_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_40_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_40_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_40_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_50_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_50_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_50_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_50_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_50_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_50_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_75_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_75_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_75_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_75_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_75_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_75_pipe_500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_90_pipe_1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_90_pipe_150)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_90_pipe_1500)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_90_pipe_2000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_90_pipe_250)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nht_pipe(HT_90_pipe_500)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Transformer Module\nDESCRIPTION: This snippet calls the `transformer` module, indicating the type of transformer to be drawn. It is used to create the 3D models of transformers with specified parameters.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_105\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`transformer(CCM300)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`transformer(SMALLTX)`\n```\n\n----------------------------------------\n\nTITLE: Calculating Ribbon Clamp Width - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates the width of a ribbon clamp. It accepts an optional 'screw' type parameter, which may influence the width calculation.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_241\n\n\n\n----------------------------------------\n\nTITLE: Placing Printed Box Base Inserts - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module is used to place the inserts intended for the base screws within the context of a printed box assembly, based on the box 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_218\n\n\n\n----------------------------------------\n\nTITLE: Defining Foot Screw Type\nDESCRIPTION: This function specifies the screw type for mounting the foot.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_168\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_screw(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Base Screw Type - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the screw type property used for fastening the base of a printed box, specifically applicable when no feet are present.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_196\n\n\n\n----------------------------------------\n\nTITLE: Generating Insert Foot STL\nDESCRIPTION: This module generates the STL for a foot with an insert. This module is for 3D printing and is specific to the insert foot design.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_176\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninsert_foot(type = insert_foot)\n```\n\n----------------------------------------\n\nTITLE: Calculating Foot Slant\nDESCRIPTION: This function determines the taper angle of the foot, determining the amount of slant (degrees) of the foot's side.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_169\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfoot_slant(type = foot)\n```\n\n----------------------------------------\n\nTITLE: Accessing PSU Shroud Outside Height - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the outside height property of a PSU shroud definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_229\n\n\n\n----------------------------------------\n\nTITLE: Calculating Printed Box Total Height - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function calculates and returns the total external height of a printed box, including any overlap from the base, based on the box 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_213\n\n\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Internal Corner Radius - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function is used to retrieve the internal corner radius property for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_201\n\n\n\n----------------------------------------\n\nTITLE: Calculating Hinge Clearance\nDESCRIPTION: This function calculates the clearance between knuckles in the flat hinge design based on a given type, which dictates the properties. It is a utility function to ensure correct hinge functionality.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_149\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_clearance(type)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Base Washer Type - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the type of washer used for the base screws in a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_214\n\n\n\n----------------------------------------\n\nTITLE: Named Parameters Usage in OpenSCAD\nDESCRIPTION: Fixed function parameter ordering in OpenSCAD to ensure named parameters are not followed by positional parameters, which causes issues in OpenSCAD 2021.01 and other versions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Use named parameters after the first named one is used\n// Instead of mixing positional and named parameters\n```\n\n----------------------------------------\n\nTITLE: Generating the Fixing Block STL\nDESCRIPTION: This module generates the STL file for the fixing block. The `screw` parameter is used to specify the type of screw to be used. It's the core module for creating the 3D printable fixing block.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_143\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Accessing Printed Box Short Insert Flag - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the property indicating whether short inserts should be used for a printed box definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_203\n\n\n\n----------------------------------------\n\nTITLE: Modeling E3D V6 Hot End using e3d_hot_end Module (OpenSCAD)\nDESCRIPTION: Instantiates a model of an E3D V6 hot end for 3mm filament using the `e3d_hot_end` module. This module is part of the hot end modeling capabilities of the library.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_49\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ne3d_hot_end(E3Dv6, 3)\n```\n\n----------------------------------------\n\nTITLE: Using star_washer Module for Antenna (OpenSCAD)\nDESCRIPTION: Draws the star washer associated with an antenna component using the `star_washer` module. Requires the washer type (e.g., `ant_washer_washer`) as a parameter. Referenced within the nopscadlib antennas section.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nstar_washer(ant_washer_washer)\n```\n\n----------------------------------------\n\nTITLE: Generating Faston Receptacle Models in OpenSCAD\nDESCRIPTION: Uses the `faston()` module to generate a model of a specific Faston receptacle. The parameter (e.g., `5_160430_7`) likely corresponds to a part number or type defining its geometry for mating with spade connectors.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_38\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfaston(5_160430_7)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Filament Spool Model in OpenSCAD\nDESCRIPTION: Calls the `spool` module to generate a 3D model of a filament spool. It requires the spool type and has optional parameters for filament representation.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_93\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nspool(spool_200x55)\n```\n\n----------------------------------------\n\nTITLE: Instantiating NEMA Stepper Motor Model in OpenSCAD\nDESCRIPTION: Calls the `NEMA` module to generate a 3D model of a NEMA stepper motor. It takes the motor type and optional parameters for shaft angle and connector type.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_97\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nNEMA(type, shaft_angle = 0, jst_connector = false)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cable Clip\nDESCRIPTION: Creates the STL for a single or dual-cable clip. It takes screw information, cable sizes, and optionally inserts or nuts.  `screw` and `cable1` are required.  `cable2` is used for a two-cable clip, and `insert` and `nut` provide further options.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_114\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ncable_clip(screw, cable1, cable2 = 0, insert = false, nut = false)\n```\n\n----------------------------------------\n\nTITLE: Generating Magnet Models in OpenSCAD\nDESCRIPTION: This snippet illustrates the usage of the `magnet()` module to create different magnet models within OpenSCAD. The module takes a magnet type as input (e.g., MAG484) and generates the 3D representation according to its specifications. The provided examples produce various magnet sizes and types. It also demonstrates how to create BOM entries.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_60\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmagnet(MAG484)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmagnet(MAG8x4x4p2)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmagnet(MAG5x8)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nmagnet(MAGRE6x2p5)\n```\n\n----------------------------------------\n\nTITLE: Assembly Components List for Mains Connection in NopSCADLib Project\nDESCRIPTION: A structured list of all components (vitamins) and sub-assemblies needed for a mains connection assembly. It details specific wire colors and lengths, fasteners with dimensions, and other required components like an IEC inlet for ATX power supply integration.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/examples/MainsBreakOutBox/bom/mains_in_assembly.txt#_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nmains_in_assembly:\nVitamins:\n  1 Wire blue 30/0.25mm strands, length 150mm - not shown\n  2 Wire brown 30/0.25mm strands, length 150mm - not shown\n  1 Wire green & yellow 30/0.25mm strands, length 150mm - not shown\n  1 IEC inlet for ATX\n  2 Nut M3 x 2.4mm nyloc\n  2 Screw M3 cs cap x 12mm\n  3 Heatshrink sleeving ID 3.2mm x 15mm - not shown\n  2 Washer  M3 x 7mm x 0.5mm\n\nAssemblies:\n  1 feet_assembly\n```\n\n----------------------------------------\n\nTITLE: Creating Gridfinity Partitions\nDESCRIPTION: This module creates partitions inside a Gridfinity bin. The module accepts `cols`, `rows`, `wall`, `iwall`, `bwall`, and `corner_r` to customize the partition layout. This module allows for a custom interior.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_185\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_partition(type, cols = 1, rows = 1, wall = 1.6, iwall = squeezed_wall, bwall = 1, corner_r = 4)\n```\n\n----------------------------------------\n\nTITLE: Enhancing TO247_size Function in OpenSCAD\nDESCRIPTION: Details regarding updates to the `TO247_size()` function. The function now provides additional information by returning the lead height and the length of the wide section of the TO247 package. The number of leads for TO247 components was fixed at 3, and the lead length information was removed from the TO220 and TO247 'vitamin' string.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nTO247_size()\n```\n\n----------------------------------------\n\nTITLE: Accessing PSU Shroud Outside Depth - OpenSCAD Function\nDESCRIPTION: This OpenSCAD function retrieves the outside depth property of a PSU shroud definition specified by 'type'.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_227\n\n\n\n----------------------------------------\n\nTITLE: Parametrizing atx_psu_cutout in OpenSCAD\nDESCRIPTION: Updates to the `atx_psu_cutout(type)` module are documented here. The cutout is now fully parametric and can be displayed within test environments. The ATX300 PSU model now features a more accurate cutout and grill holes, with the ability to specify the four margins surrounding the grill holes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\natx_psu_cutout(type)\n```\n\n----------------------------------------\n\nTITLE: Generating Fuseholder Models in OpenSCAD\nDESCRIPTION: Uses the `fuseholder()` module to create a model of a 20mm panel mount fuse holder. The integer parameter specifies the thickness of the panel it will be mounted on (e.g., 6mm).\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_39\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfuseholder(6)\n```\n\n----------------------------------------\n\nTITLE: Using green_terminal Module for 6-Way Terminal Block (OpenSCAD)\nDESCRIPTION: Instantiates a 6-way green terminal block of type `gt_3p5` (3.5mm pitch) using the `green_terminal` module. This module draws various green terminal blocks, allowing pin skipping via the optional `skip` parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_45\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngreen_terminal(gt_3p5, 6)\n```\n\n----------------------------------------\n\nTITLE: Using ax_res Module (OpenSCAD)\nDESCRIPTION: Draws a through-hole axial resistor. Requires resistor type (e.g., `res1_8`, `res1_4`, `res1_2`), value (e.g., 1000), optional tolerance (`tol`, defaults to 5%), and optional `pitch`. Similar pitch logic applies as with diodes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_res(res1_8, 1000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_res(res1_8, 2200, tol = 1)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_res(res1_4, 39000, tol = 1)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_res(res1_4, 47000)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_res(res1_2, 8200)\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nax_res(res1_2, 8250, tol = 1)\n```\n\n----------------------------------------\n\nTITLE: Adjusting SOIC Text Size in NopSCADlib C Code\nDESCRIPTION: This snippet pertains to tweaking the text size of SOIC labels within the C code implementation, ensuring better readability and fit on the component layout. It helps in rendering text annotations for SOIC packages.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid tweak_soic_text_size() {\n  // code to adjust text size parameters for SOIC components\n}\n```\n\n----------------------------------------\n\nTITLE: Door Hinge - Module: door_hinge_stat_hole_positions\nDESCRIPTION: The `door_hinge_stat_hole_positions(dir = 0)` module places children at the screw hole positions for the stationary part.  It has an optional parameter `dir`, presumably to control the direction or orientation. This is critical for aligning the hinge to the printer frame.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_124\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ndoor_hinge_stat_hole_positions(dir = 0)\n```\n\n----------------------------------------\n\nTITLE: Enhancing 7_segment Module in OpenSCAD\nDESCRIPTION: Documentation for updates to the `7_segment` module. Single `7_segment` objects can now represent multiple digits, which is determined by comparing the digit size to the overall size. The decimal point is now automatically suppressed if the number of available pins is insufficient. Support for 02531A and 02352A 3-digit displays was added.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n7_segment\n```\n\n----------------------------------------\n\nTITLE: Using bearing_ball Module (OpenSCAD)\nDESCRIPTION: Draws a single steel bearing ball as a silver sphere and creates a BOM entry. Requires the ball diameter (`dia`) as a parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nbearing_ball(3)\n```\n\n----------------------------------------\n\nTITLE: Calculating Handle Height\nDESCRIPTION: This function calculates the total height of the handle. This determines the handle's overall height, typically from the bottom to the top.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_186\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhandle_height()\n```\n\n----------------------------------------\n\nTITLE: Positioning Vertical Screws\nDESCRIPTION: This function returns transformations to position the vertical screws within the fixing block assembly. This is another important part of screw placement during assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_140\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_v_holes(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Adding pot_nut Module in OpenSCAD\nDESCRIPTION: This entry describes the addition of the `pot_nut()` module to the NopSCADlib. This module is designed to facilitate the drawing and modeling of nuts and washers specifically used with potentiometers.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\npot_nut()\n```\n\n----------------------------------------\n\nTITLE: Instantiating Screw Module\nDESCRIPTION: This snippet instantiates the `screw` module with specified parameters for the screw type and length.  It creates a screw with M3 pan head and an 8mm length, likely for assembling parts within the model.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_99\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`screw(M3_pan_screw, 8)`\n```\n\n----------------------------------------\n\nTITLE: Mathematical Utilities in OpenSCAD\nDESCRIPTION: A comprehensive set of functions for vector and matrix operations, including geometric calculations, hyperbolic functions, roots, transformations, and coordinate conversions. Facilitates complex mathematical modeling and geometric analysis.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_271\n\nLANGUAGE: scad\nCODE:\n```\n`angle_between(v1, v2)`\nReturns the angle in radians between two vectors.\n\n`argcosh(x)`\nInverse hyperbolic cosine.\n\n`circle_intersect(c1, r1, c2, r2)`\nCalculates an intersection point of two circles in the X-Z plane.\n\n`degrees(radians)` and `radians(degrees)`\nConvert between degrees and radians.\n\n`euler(R)`\nConverts a rotation matrix to an Euler rotation vector.\n\n`identity(n, x = 1)`\nCreates an identity matrix of size n.\n\n`invert(m)`\nInverts a matrix.\n\n`map(v, func)` and `mapi(v, func)`\nApply functions to vector elements, with optional index.\n\n`nearly_zero(x)`\nChecks if a value is close to zero.\n\n`path_length(path, i = 0, length = 0)`\nCalculates the length along a path.\n\n`quadratic_real_roots(a, b, c)` and `cubic_real_roots(a, b, c, d)`\nFind real roots of quadratic and cubic equations.\n\n`cosh(x)`, `sinh(x)`, `tanh(x)`, and `coth(x)`\nHyperbolic functions.\n\n`reduce(v, func, unity)`\nReduces vector to a single value using a function.\n\n`reverse(v)`\nReverses a vector.\n\n`rot2_z(a)`, `rot3_z(a)`, `rotate(a, v)`\nGenerate rotation matrices.\n\n`scale(v)`, `translate(v)`\nGenerate scaling and translation matrices.\n\n`transform(v, m)`, `transform_points(path, m)`\nApply transformations to vectors and paths.\n\n`unit(v)`\nNormalizes a vector.\n\n`vec2(v)`, `vec3(v)`, `vec4(v)`\nExtract components as vectors.\n\n`xor(a, b)`\nLogical exclusive OR.\n\n```\n\n----------------------------------------\n\nTITLE: Including NopSCADlib and Handling Function Dependencies in OpenSCAD\nDESCRIPTION: Describes a potential issue when including the main NopSCADlib library file (`lib.scad`). A warning occurs because the `screw_boss_diameter` function depends on `nut_radius`, which might not be recognized if the library structure or include path isn't set up correctly. This highlights a dependency management concern within the library usage.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <NopSCADlib/lib.scad>\n```\n\nLANGUAGE: text\nCODE:\n```\nWARNING: Ignoring unknown function 'nut_radius', in file ../../../sw/OpenSCAD/libraries/NopSCADlib/vitamins/screw.scad, line 41.\n```\n\n----------------------------------------\n\nTITLE: Instantiating NEMA Stepper Motor Module\nDESCRIPTION: These snippets call the `NEMA` module, each for a different size of NEMA stepper motor.  They are used to create the 3D models of various stepper motors of different sizes.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_100\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA14_36)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA16_19)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA17_27)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA17_34)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA17_40)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA17_47)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA17_47L80)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA23_51)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA8_30)`\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n`NEMA(NEMA8_30BH)`\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Field of View Display in OpenSCAD\nDESCRIPTION: This enhancement adds the ability to display camera field of view in OpenSCAD models. It was later corrected to improve FOV handling in a subsequent commit.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Added ability to display camera field of view\n// M.B. commit 4138ed4\n\n// Corrected FOV handling\n// M.B. commit 71f935d\n```\n\n----------------------------------------\n\nTITLE: Constructing Flat Hinge Properties\nDESCRIPTION: This function constructs the property list for a flat hinge. It takes several parameters: `name`, `size`, `pin_d`, `knuckle_d`, `knuckles`, `screw`, `screws`, `clearance`, and `margin`. This sets the properties for each hinge.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_159\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nflat_hinge(name, size, pin_d, knuckle_d, knuckles, screw, screws, clearance, margin)\n```\n\n----------------------------------------\n\nTITLE: Adding jack_4mm_flange_radius Module in OpenSCAD\nDESCRIPTION: This snippet notes the addition of a new module, `jack_4mm_flange_radius()`, to the library. This module is intended for generating models related to 4mm jack components, specifically dealing with flange radii.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\njack_4mm_flange_radius()\n```\n\n----------------------------------------\n\nTITLE: Constructing Foot Property List\nDESCRIPTION: This function constructs a property list for a foot, taking parameters like `d` (diameter), `h` (height), `t` (thickness), `r` (radius), `screw`, and `slant`. This defines the foot's characteristics.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_171\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nFoot(d, h, t, r, screw, slant = 10)\n```\n\n----------------------------------------\n\nTITLE: Creating Fastened Fixing Block Assembly\nDESCRIPTION: This module assembles the fixing block with fasteners in place, including screws, washers, and potentially other components. The `thickness` parameter determines the thickness of the material being fixed. `screw`, `screw2`, `thickness2`, `show_block`, and `star_washers` are optional parameters to adjust the assembly.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_142\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfastened_fixing_block_assembly(thickness, screw = def_screw, screw2 = undef, thickness2 = undef, show_block = true, star_washers = true)\n```\n\n----------------------------------------\n\nTITLE: Calculating Fixing Block Width\nDESCRIPTION: This function computes the width of the fixing block based on the specified screw size. This is crucial for proper dimensioning of the part.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_141\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nfixing_block_width(screw = def_screw)\n```\n\n----------------------------------------\n\nTITLE: Updating screw_shorter_than Return Values in OpenSCAD\nDESCRIPTION: Documentation for the `screw_shorter_than()` module. This function was updated to return values 4 or 3 specifically when dealing with short grub screws, indicating a change in its output behavior for this screw type.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nscrew_shorter_than()\n```\n\n----------------------------------------\n\nTITLE: Generating Printed Box Base STL - OpenSCAD Module\nDESCRIPTION: This OpenSCAD module generates the 3D geometry (STL) for the base part of a printed box, based on the properties defined by the 'type' parameter.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_216\n\n\n\n----------------------------------------\n\nTITLE: Positioning Screws on Hinge\nDESCRIPTION: This module is designed to place children objects at the screw positions of the hinge. It is used to place screw holes or other parts relative to the screws.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_164\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_screw_positions(type)\n```\n\n----------------------------------------\n\nTITLE: Calculating Gridfinity Bin Size in mm\nDESCRIPTION: This function calculates the overall size of the Gridfinity bin in millimeters based on the bin's type. It provides the actual dimensions.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_182\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ngridfinity_bin_size_mm(type)\n```\n\n----------------------------------------\n\nTITLE: Creating Fastened Hinge Assembly\nDESCRIPTION: This module assembles the hinge with its fasteners (screws and potentially nuts). The `type` parameter specifies the hinge properties, `thickness1` and `thickness2` define the thickness of the material attached to the leaves, `angle` is for an initial hinge angle, and `show_hinge` controls hinge visibility.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_161\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nhinge_fastened_assembly(type, thickness1, thickness2, angle, show_hinge = true)\n```\n\n----------------------------------------\n\nTITLE: Parameter Naming Convention in OpenSCAD\nDESCRIPTION: Fixed variable naming in OpenSCAD by changing variables that start with digits (2a, 2c) to proper naming convention (ax2, cx2) since variable names starting with digits are deprecated in OpenSCAD.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n// Change from:\n2a, 2c\n\n// To:\nax2, cx2  // (a times 2)\n```\n\n----------------------------------------\n\nTITLE: Modeling E3D V5 Hot End using e3d_hot_end Module (OpenSCAD)\nDESCRIPTION: Instantiates a model of an E3D V5 hot end for 3mm filament using the `e3d_hot_end` module. This module is part of the hot end modeling capabilities of the library.\nSOURCE: https://github.com/nophead/nopscadlib/blob/master/readme.md#_snippet_48\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ne3d_hot_end(E3Dv5, 3)\n```"
  }
]