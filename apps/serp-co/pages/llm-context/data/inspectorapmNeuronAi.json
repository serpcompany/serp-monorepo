[
  {
    "owner": "inspector-apm",
    "repo": "neuron-ai",
    "content": "TITLE: Installing Neuron AI PHP Package via Composer\nDESCRIPTION: Command to install the latest version of the Neuron AI package using Composer package manager. This is the first step to start using the framework in your PHP project.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require inspector-apm/neuron-ai\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG System in PHP with Neuron AI\nDESCRIPTION: Example showing how to create a RAG (Retrieval-Augmented Generation) system by extending the RAG class. This implementation includes configurations for AI provider, embeddings provider, and vector store.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse NeuronAI\\Providers\\AIProviderInterface;\nuse NeuronAI\\Providers\\Anthropic\\Anthropic;\nuse NeuronAI\\RAG\\Embeddings\\EmbeddingsProviderInterface;\nuse NeuronAI\\RAG\\Embeddings\\VoyageEmbeddingProvider;\nuse NeuronAI\\RAG\\RAG;\nuse NeuronAI\\RAG\\VectorStore\\PineconeVectoreStore;\nuse NeuronAI\\RAG\\VectorStore\\VectorStoreInterface;\n\nclass MyChatBot extends RAG\n{\n    public function provider(): AIProviderInterface\n    {\n        return new Anthropic(\n            key: 'ANTHROPIC_API_KEY',\n            model: 'ANTHROPIC_MODEL',\n        );\n    }\n\n    public function embeddings(): EmbeddingsProviderInterface\n    {\n        return new VoyageEmbeddingProvider(\n            key: 'VOYAGE_API_KEY',\n            model: 'VOYAGE_MODEL'\n        );\n    }\n\n    public function vectorStore(): VectorStoreInterface\n    {\n        return new PineconeVectoreStore(\n            key: 'PINECONE_API_KEY',\n            indexUrl: 'PINECONE_INDEX_URL'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Output with PHP Schema Definition\nDESCRIPTION: Demonstrates how to define a structured output schema using PHP classes and attributes, then process natural language input into that structure. Uses SchemaProperty attributes to define validation constraints and field descriptions.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse NeuronAI\\StructuredOutput\\SchemaProperty;\n\n// Define the output structure with a PHP class, including validation constraints.\nclass Person\n{\n    #[SchemaProperty(description: 'The user name')]\n    public string $name;\n\n    #[SchemaProperty(description: 'What the user love to eat')]\n    public string $preference;\n}\n\n\n// Talk to the agent requiring the structured output\n$person = MyAgent::make()->structured(\n    new UserMessage(\"I'm John and I like pizza!\"),\n    Person::class\n);\n\necho $person->name ' like '.$person->preference;\n// John like pizza\n```\n\n----------------------------------------\n\nTITLE: Communicating with an AI Agent in PHP\nDESCRIPTION: Example showing how to instantiate an agent and interact with it using messages. This demonstrates the agent's memory capabilities as it remembers user information between requests.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$agent = YouTubeAgent::make();\n\n$response = $agent->run(new UserMessage(\"Hi, I'm Valerio. Who are you?\"));\necho $response->getContent();\n// I'm a friendly YouTube assistant to help you summarize videos.\n\n\n$response = $agent->run(\n    new UserMessage(\"Do you know my name?\")\n);\necho $response->getContent();\n// Your name is Valerio, as you said in your introduction.\n```\n\n----------------------------------------\n\nTITLE: Implementing Tools and Function Calls for an AI Agent in PHP\nDESCRIPTION: Example showing how to add tools to an agent by implementing the tools method. This includes defining a tool for retrieving YouTube video transcriptions with properties and a callable function.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse NeuronAI\\Agent;\nuse NeuronAI\\SystemPrompt;\nuse NeuronAI\\Providers\\AIProviderInterface;\nuse NeuronAI\\Providers\\Anthropic\\Anthropic;\nuse NeuronAI\\Tools\\Tool;\nuse NeuronAI\\Tools\\ToolProperty;\n\nclass YouTubeAgent extends Agent\n{\n    public function provider(): AIProviderInterface\n    {\n        return new Anthropic(\n            key: 'ANTHROPIC_API_KEY',\n            model: 'ANTHROPIC_MODEL',\n        );\n    }\n\n    public function instructions(): string\n    {\n        return new SystemPrompt(\n            background: [\"You are an AI Agent specialized in writing YouTube video summaries.\"],\n            steps: [\n                \"Get the url of a YouTube video, or ask the user to provide one.\",\n                \"Use the tools you have available to retrieve the transcription of the video.\",\n                \"Write the summary.\",\n            ],\n            output: [\n                \"Write a summary in a paragraph without using lists. Use just fluent text.\",\n                \"After the summary add a list of three sentences as the three most important take away from the video.\",\n            ]\n        );\n    }\n\n    public function tools(): array\n    {\n        return [\n            Tool::make(\n                'get_transcription',\n                'Retrieve the transcription of a youtube video.',\n            )->addProperty(\n                new ToolProperty(\n                    name: 'video_url',\n                    type: 'string',\n                    description: 'The URL of the YouTube video.',\n                    required: true\n                )\n            )->setCallable(function (string $video_url) {\n                // ... retrieve the video transcription\n            })\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a YouTube Video Summary Agent in PHP\nDESCRIPTION: Example of creating a YouTube agent that extends the NeuronAI Agent class. This implementation includes the provider method for connecting to Anthropic and instructions method that defines the agent's behavior using SystemPrompt.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse NeuronAI\\Agent;\nuse NeuronAI\\SystemPrompt;\nuse NeuronAI\\Providers\\AIProviderInterface;\nuse NeuronAI\\Providers\\Anthropic\\Anthropic;\n\nclass YouTubeAgent extends Agent\n{\n    public function provider(): AIProviderInterface\n    {\n        return new Anthropic(\n            key: 'ANTHROPIC_API_KEY',\n            model: 'ANTHROPIC_MODEL',\n        );\n    }\n\n    public function instructions(): string\n    {\n        return new SystemPrompt(\n            background: [\"You are an AI Agent specialized in writing YouTube video summaries.\"],\n            steps: [\n                \"Get the url of a YouTube video, or ask the user to provide one.\",\n                \"Use the tools you have available to retrieve the transcription of the video.\",\n                \"Write the summary.\",\n            ],\n            output: [\n                \"Write a summary in a paragraph without using lists. Use just fluent text.\",\n                \"After the summary add a list of three sentences as the three most important take away from the video.\",\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MCP Server with SEO Agent in PHP\nDESCRIPTION: Example of an SEO agent that connects to an MCP server using the McpConnector component. This demonstrates how to combine MCP server tools with custom tools in an agent implementation.\nSOURCE: https://github.com/inspector-apm/neuron-ai/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse NeuronAI\\Agent;\nuse NeuronAI\\MCP\\McpConnector;\nuse NeuronAI\\Providers\\AIProviderInterface;\nuse NeuronAI\\Providers\\Anthropic\\Anthropic;\nuse NeuronAI\\Tools\\Tool;\nuse NeuronAI\\Tools\\ToolProperty;\n\nclass SEOAgent extends Agent\n{\n    public function provider(): AIProviderInterface\n    {\n        return new Anthropic(\n            key: 'ANTHROPIC_API_KEY',\n            model: 'ANTHROPIC_MODEL',\n        );\n    }\n\n    public function instructions(): string\n    {\n        return new SystemPrompt(\n            background: [\"Act as an expert of SEO (Search Engine Optimization).\"]\n            steps: [\n                \"Analyze a text of an article.\",\n                \"Provide suggestions on how the content can be improved to get a better rank on Google search.\"\n            ],\n            output: [\"Structure your analysis in sections. One for each suggestion.\"]\n        );\n    }\n\n    public function tools(): array\n    {\n        return [\n            // Connect an MCP server\n            ...McpConnector::make([\n                'command' => 'npx',\n                'args' => ['-y', '@modelcontextprotocol/server-everything'],\n            ])->tools(),\n\n            // Implement your custom tools\n            Tool::make(\n                'get_transcription',\n                'Retrieve the transcription of a youtube video.',\n            )->addProperty(\n                new ToolProperty(\n                    name: 'video_url',\n                    type: 'string',\n                    description: 'The URL of the YouTube video.',\n                    required: true\n                )\n            )->setCallable(function (string $video_url) {\n                // ... retrieve the video transcription\n            })\n        ];\n    }\n}\n```"
  }
]