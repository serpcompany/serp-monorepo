[
  {
    "owner": "eliasdabbas",
    "repo": "advertools",
    "content": "TITLE: Installing advertools via pip\nDESCRIPTION: Commands to install the advertools package using pip. Users can choose between pip and pip3 depending on their Python environment setup.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/index.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install advertools\n# OR:\npip3 install advertools\n```\n\n----------------------------------------\n\nTITLE: Installing advertools Package - Python\nDESCRIPTION: Commands to install the advertools package using pip package manager. Can be installed using either pip or pip3 command.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install advertools\n# OR:\npip3 install advertools\n```\n\n----------------------------------------\n\nTITLE: Installing Advertools Package\nDESCRIPTION: Command to install the advertools Python package using pip package manager.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install advertools\n```\n\n----------------------------------------\n\nTITLE: Installing advertools Package with pip\nDESCRIPTION: Command to install the advertools package using pip, which provides access to the command line interface.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.cli.cli.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install advertools\n```\n\n----------------------------------------\n\nTITLE: Installing advertools Package via pip\nDESCRIPTION: Command to install the advertools package using pip with Python3. This is the first step required to get access to the advertools command line interface.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.cli.cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install advertools\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Meta Description for Word Tokenization Module\nDESCRIPTION: RST markup defining the meta description for the documentation page, describing text splitting capabilities.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.word_tokenize.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. meta::\n    :description lang=en:\n        Split a text list in to words / tokens / N-grams of any desired length.\n        A Python function for splitting text.\n```\n\n----------------------------------------\n\nTITLE: Importing Word Tokenization Module in Python\nDESCRIPTION: This snippet shows how to import the word_tokenize module from advertools. The module provides functionality for splitting text into words, tokens, or N-grams of any specified length.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.word_tokenize.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom advertools import word_tokenize\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-LD metadata for advertools\nDESCRIPTION: A JSON-LD script defining metadata for the advertools package, including author information, description, programming language, and keywords. This structured data helps search engines understand the package's context.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/index.rst.txt#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"SoftwareSourceCode\",\n  \"author\": {\n    \"@type\": \"Person\",\n    \"name\": \"Elias Dabbas\",\n    \"sameAs\": [\"https://www.linkedin.com/in/eliasdabbas\",\n               \"https://twitter.com/eliasdabbas\",\n               \"https://github.com/eliasdabbas\"]\n  },\n  \"description\": \"Productivity and analysis tools for online marketing.\",\n  \"name\": \"advertools\",\n  \"license\": \"https://github.com/eliasdabbas/advertools/blob/master/LICENSE\",\n  \"programmingLanguage\": {\n    \"@type\": \"ComputerLanguage\",\n    \"name\": \"Python\"\n  },\n  \"runtimePlatform\": \"Python3\",\n  \"codeRepository\": \"https://github.com/eliasdabbas/advertools\",\n  \"keywords\": [\"marketing\", \"advertising\", \"SEO\", \"SEM\",\n             \"robots.txt\",\n             \"XML sitemaps\", \"AdWords\", \"PPC\", \"Social Media\", \"Twitter\",\n             \"YouTube\", \"Emoji\", \"Text Analysis\"],\n  \"version\": \"0.10.5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Ad Creation Module in Python\nDESCRIPTION: This snippet shows how to import the ad_create module from the advertools package. The module provides functions for creating text ads on a large scale for various online advertising platforms.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.ad_create.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: advertools.ad_create\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing and Using advertools.extract Module in Python\nDESCRIPTION: This snippet shows how to import and use the advertools.extract module. The module provides functionality to extract structured elements from text lists and get basic statistics about them.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.extract.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom advertools import extract\n\n# Example usage (not shown in the original text)\ntext_list = [\"Hello #world\", \"@user123 how are you?\", \"I have 42 apples üçé\"]\nresult = extract(text_list)\n# Result will contain extracted elements and statistics\n```\n\n----------------------------------------\n\nTITLE: Importing advertools.serp Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the advertools.serp module, which contains functions for tracking and analyzing search engine results pages (SERPs) from Google and YouTube.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.serp.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: advertools.serp\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing Twitter API Data Retrieval Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the advertools.twitter module, which contains functions for retrieving Twitter API data. The module is designed to handle multiple results on a large scale and return data in a single pandas DataFrame.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.twitter.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: advertools.twitter\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Accessing advertools CLI Help Documentation\nDESCRIPTION: Commands to display the help documentation for the advertools CLI. These show general help information for all available commands.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.cli.cli.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadvertools --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nadv -h\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Specific advertools Commands\nDESCRIPTION: Examples showing how to access help documentation for specific commands in the advertools CLI, using either the full name or the shortened alias.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.cli.cli.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadvertools <command> --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nadvertools sitemaps --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nadv crawl -h\n```\n\n----------------------------------------\n\nTITLE: Accessing advertools CLI Help Documentation\nDESCRIPTION: Commands to display the help documentation for the advertools CLI. Both the full command and the abbreviated version are shown.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.cli.cli.rst.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadvertools --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nadv -h\n```\n\n----------------------------------------\n\nTITLE: Getting Command-Specific Help in advertools CLI\nDESCRIPTION: Examples showing how to access help documentation for specific commands within the advertools CLI, using both the full command and abbreviated syntax.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.cli.cli.rst.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadvertools <command> --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nadvertools sitemaps --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nadv crawl -h\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for Advertools Knowledge Graph Module\nDESCRIPTION: This Sphinx directive automatically generates documentation for the knowledge_graph module in the advertools library. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.knowledge_graph.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.knowledge_graph\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for advertools.spider Module\nDESCRIPTION: This snippet uses Sphinx directives to configure the auto-generation of documentation for the advertools.spider module. It specifically includes the 'crawl' function, shows undocumented members, and includes inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.spider.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: advertools.spider\n   :members: crawl\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON-LD Schema Markup for FAQ Page\nDESCRIPTION: This snippet contains a JSON-LD schema implementation for a FAQ page about web crawling strategies. It provides structured data for search engines to properly index and display FAQ content about various spider crawling techniques and configurations.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.code_recipes.spider_strategies.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"FAQPage\",\n      \"mainEntity\": [\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How to crawl a list of pages, and those pages only (list mode)?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Simply provide that list as the first argument, for the url_list parameter, and make sure that follow_links=False, which is the default. This simply crawls the given pages, and stops when done.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I crawl a website including its sub-domains?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"The crawl function takes an optional allowed_domains parameter. If not provided, it defaults to the domains of the URLs in url_list. When the crawler goes through the pages of example.com, it follows links to discover pages. If it finds pages on help.exmaple.com it won't crawl them (it's a different domain). The solution, therefore, is to provide a list of domains to the allowed_domains parameter. Make sure you also include the original domain, in this case example.com.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I save a copy of the logs of my crawl for auditing them later?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"It's usually good to keep a copy of the logs of all your crawls to check for errors, exceptions, stats, etc. Pass a path of the file where you want the logs to be saved, in a dictionary to the cutom_settings parameter. A good practice for consistency is to give the same name to the output_file and log file (with a different extension) for easier retreival.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I automatically stop my crawl based on a certain condition?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"There are a few conditions that you can use to trigger the crawl to stop, and they mostly have descriptive names:\\n\\nCLOSESPIDER_ERRORCOUNT: You don't want to wait three hours for a crawl to finish, only to discover that you had errors all over the place. Set a certain number of errors to trigger the crawler to stop, so you can investigate the issue.\\n\\nCLOSESPIDER_ITEMCOUNT: Anything scraped from a page is an \\\"item\\\", h1, title , meta_desc, etc. Set the crawler to stop after getting a certain number of items if you want that.\\n\\nCLOSESPIDER_PAGECOUNT: Stop the crawler after a certain number of pages have been crawled. This is useful as an exploratory technique, especially with very large websites. It might be good to crawl a few thousand pages, get an idea on its structure, and then run a full crawl with those insights in mind.\\n\\nCLOSESPIDER_TIMEOUT: Stop the crawler after a certain number of seconds.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I (dis)obey robots.txt rules?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"The crawler obeys robots.txt rules by default. Sometimes you might want to check the results of crawls without doing that. You can set the ROBOTSTXT_OBEY setting under custom_settings\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How do I set my User-agent while crawling?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Set this parameter under custom_settings dictionary under the key USER_AGENT. The default User-agent can be found by running adv.spider.user_agent\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I control the number of concurrent requests while crawling?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Some servers are set for high sensitivity to automated and/or concurrent requests, that you can quickly be blocked/banned. You also want to be polite and not kill those servers, don't you?\\n\\nThere are several ways to set that under the custom_settings parameter. The available keys are the following:\\n\\nCONCURRENT_ITEMS: default 100\\nCONCURRENT_REQUESTS : default 16\\nCONCURRENT_REQUESTS_PER_DOMAIN: default 8\\nCONCURRENT_REQUESTS_PER_IP: default 0\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I slow down the crawling so I don't hit the websites' servers too hard?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Use the DOWNLOAD_DELAY setting and set the interval to be waited before downloading consecutive page from the same website (in seconds).\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How can I set multiple settings to the same crawl job?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Simply add multiple settings to the custom_settings parameter.\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"I want to crawl a list of pages, follow links from those pages, but only to a certain specified depth\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Set the DEPTH_LIMIT setting in the custom_settings parameter. A setting of 1 would follow links one level after the provided URLs in url_list\"\n          }\n        },\n        {\n          \"@type\": \"Question\",\n          \"name\": \"How do I pause/resume crawling, while making sure I don't crawl the same page twice?\",\n          \"acceptedAnswer\": {\n            \"@type\": \"Answer\",\n            \"text\": \"Handling this is extremely simple, and all you have to do is simply provide a path to a new folder. Make sure it is new and empty, and make sure to only use it for the same crawl job reruns. That's all you have to worry about. The JOBDIR setting handles this.\"\n          }\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for advertools.spider Module\nDESCRIPTION: Sphinx documentation configuration that uses automodule directive to generate documentation for the crawl function from the advertools.spider module. Includes options to document members, undocumented members and show inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.spider.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.spider\n   :members: crawl\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for advertools.regex Module\nDESCRIPTION: This RST directive configures Sphinx to automatically document the advertools.regex module. It includes all members, undocumented members, and shows inheritance information for comprehensive API documentation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.regex.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.regex\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring meta description for Emoji Module in reStructuredText\nDESCRIPTION: This snippet defines a meta description tag for search engines with English language specification, explaining the purpose of the advertools.emoji module, which provides emoji database, regex patterns, and search functionality.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.emoji.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. meta::\n    :description lang=en:\n        The full emoji database, an emoji regular expression, and emoji search\n        functionality in a Python module.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for advertools.emoji Module in reStructuredText\nDESCRIPTION: This snippet configures Sphinx autodoc to automatically generate documentation for the advertools.emoji module. It includes all module members, undocumented members, and inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.emoji.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.emoji\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Directive for URL Analytics Module\nDESCRIPTION: Sphinx directive to automatically generate documentation for the advertools.urlytics module. The directive includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.urlytics.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.urlytics\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for advertools.urlytics Module\nDESCRIPTION: ReStructuredText directive for auto-generating module documentation. It includes all members, undocumented members, and shows inheritance information for the advertools.urlytics module.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.urlytics.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.urlytics\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Knowledge Graph Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to generate documentation for the advertools.knowledge_graph module. It includes all members, undocumented members, and shows inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.knowledge_graph.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: advertools.knowledge_graph\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting the Stopwords Module in reStructuredText\nDESCRIPTION: This directive instructs Sphinx to automatically generate documentation for the advertools.stopwords module, including all members, undocumented members, and inheritance information. The module contains stopword lists for text analysis across multiple languages.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.stopwords.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: advertools.stopwords\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for robotstxt Module\nDESCRIPTION: Sphinx directive to automatically generate documentation for the robotstxt module in the advertools package. The directive includes all members of the module, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.robotstxt.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.robotstxt\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Module Documentation for advertools.robotstxt using Sphinx\nDESCRIPTION: This ReStructuredText directive automatically generates documentation for the advertools.robotstxt module. It includes all members, undocumented members, and shows inheritance information for the module.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.robotstxt.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.robotstxt\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive for Documenting Crawlytics Module in reStructuredText\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the advertools.crawlytics module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.crawlytics.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: advertools.crawlytics\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Including Module Documentation in RST\nDESCRIPTION: Directive to include the modules.rst file which contains module definitions for the advertools library.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/include_changelog.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: modules.rst\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation Directive in RST\nDESCRIPTION: ReStructuredText directive that automatically generates documentation from the advertools.crawlytics Python module, including all members, undocumented members and inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.crawlytics.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.crawlytics\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for advertools.header_spider Module\nDESCRIPTION: Sphinx directive for automatically generating documentation for the header_spider module. The directive includes all module members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.header_spider.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.header_spider\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Directive for Image Spider Module\nDESCRIPTION: This is a reStructuredText (rst) directive that instructs Sphinx to automatically generate documentation for the image_spider module, including all its members, undocumented members, and showing inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.image_spider.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.image_spider\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for YouTube Module\nDESCRIPTION: ReStructuredText documentation configuration for the advertools.youtube module specifying metadata and autodoc settings.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.youtube.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. meta::\n    :description lang=en:\n        YouTube data API in Python. All the GET methods available in the API.\n        Get multiple responses on a large scale in one DataFrame.\n\n.. automodule:: advertools.youtube\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for advertools.logs Module in reStructuredText\nDESCRIPTION: This directive configures the documentation generation for the advertools.logs module. It includes all members, undocumented members, and shows inheritance information in the generated documentation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.logs.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.logs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for the advertools.logs Module\nDESCRIPTION: Sphinx directive to automatically document the advertools.logs module. The directive includes options to show all members, undocumented members, and inheritance relationships in the generated documentation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.logs.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.logs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText AutoModule Directive for word_tokenize\nDESCRIPTION: RST directive to automatically generate module documentation from advertools.word_tokenize, including all members and inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.word_tokenize.rst.txt#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.word_tokenize\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: JSON-LD Schema Definition - JSON\nDESCRIPTION: Schema.org JSON-LD markup defining the software metadata including author information, description, programming language, and supported features.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"SoftwareSourceCode\",\n  \"author\": {\n    \"@type\": \"Person\",\n    \"name\": \"Elias Dabbas\",\n    \"sameAs\": [\"https://www.linkedin.com/in/eliasdabbas\",\n                \"https://twitter.com/eliasdabbas\",\n                \"https://github.com/eliasdabbas\"]\n  },\n  \"description\": \"Productivity and analysis tools for online marketing.\",\n  \"name\": \"advertools\",\n  \"license\": \"https://github.com/eliasdabbas/advertools/blob/master/LICENSE\",\n  \"programmingLanguage\": {\n    \"@type\": \"ComputerLanguage\",\n    \"name\": \"Python\"\n  },\n  \"runtimePlatform\": \"Python3\",\n  \"codeRepository\": \"https://github.com/eliasdabbas/advertools\",\n  \"keywords\": [\"marketing\", \"advertising\", \"SEO\", \"SEM\",\n               \"robots.txt\",\n               \"XML sitemaps\", \"AdWords\", \"PPC\", \"Social Media\", \"Twitter\",\n               \"YouTube\", \"Emoji\", \"Text Analysis\"],\n  \"version\": \"0.10.5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt with Multiple Sitemap Declarations\nDESCRIPTION: A robots.txt file that allows all user agents to crawl the entire site and lists multiple specialized sitemaps for different content types. Includes regular, image, video, news sitemaps and a sitemap index.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_static/sitemap_testing/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://advertools.readthedocs.io/sitemap_testing/image_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/zipped_sitemap.xml.gz\nSitemap: https://advertools.readthedocs.io/sitemap_testing/video_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/regular_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/news_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/sitemap_index.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt with Multiple Sitemaps\nDESCRIPTION: Standard robots.txt configuration that allows all crawlers full access and declares multiple specialized sitemap locations including image, video, news, and regular sitemaps for the advertools documentation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_static/sitemap_testing/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://advertools.readthedocs.io/sitemap_testing/image_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/zipped_sitemap.xml.gz\nSitemap: https://advertools.readthedocs.io/sitemap_testing/video_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/regular_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/news_sitemap.xml\nSitemap: https://advertools.readthedocs.io/sitemap_testing/sitemap_index.xml\n```\n\n----------------------------------------\n\nTITLE: Defining advertools Package Structure in reStructuredText\nDESCRIPTION: This reStructuredText code defines the structure of the advertools package documentation. It lists subpackages and submodules, and includes directives for auto-generating module documentation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nadvertools package\n==================\n\nSubpackages\n-----------\n\n.. toctree::\n   :maxdepth: 4\n\n   advertools.cli_docs\n   advertools.code_recipes\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   advertools.ad_create\n   advertools.ad_from_string\n   advertools.cli\n   advertools.crawlytics\n   advertools.emoji\n   advertools.extract\n   advertools.header_spider\n   advertools.image_spider\n   advertools.knowledge_graph\n   advertools.kw_generate\n   advertools.logs\n   advertools.regex\n   advertools.reverse_dns_lookup\n   advertools.robotstxt\n   advertools.serp\n   advertools.sitemaps\n   advertools.spider\n   advertools.stopwords\n   advertools.twitter\n   advertools.url_builders\n   advertools.urlytics\n   advertools.word_frequency\n   advertools.word_tokenize\n   advertools.youtube\n\nModule contents\n---------------\n\n.. automodule:: advertools\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Defining Package Structure in reStructuredText\nDESCRIPTION: This RST code defines the structure of the advertools.code_recipes package documentation. It includes a section for submodules and module contents, using automodule directive for automatic documentation generation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.code_recipes.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nadvertools.code\\_recipes package\n================================\n\nSubmodules\n----------\n\n.. toctree::\n   :maxdepth: 4\n\n   advertools.code_recipes.spider_strategies\n\nModule contents\n---------------\n\n.. automodule:: advertools.code_recipes\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Directive for advertools.cli\nDESCRIPTION: ReStructuredText directive to auto-generate documentation for the advertools.cli module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.cli.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.cli\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx documentation directive for advertools.cli module\nDESCRIPTION: This RST (reStructuredText) code snippet configures Sphinx to automatically generate documentation for the advertools.cli module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.cli\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation with Sphinx for advertools.cli_docs Package\nDESCRIPTION: ReStructuredText (RST) configuration for documenting the advertools.cli_docs package using Sphinx. Includes a table of contents tree directive and automodule directive to generate API documentation.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.cli_docs.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   advertools.cli_docs.cli\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.cli_docs\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for Advertools\nDESCRIPTION: Sets up the Sphinx documentation table of contents (toctree) directive with a maximum depth of 4 levels, including the advertools module/file as content.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/modules.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   advertools\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation with toctree for advertools\nDESCRIPTION: Sphinx documentation configuration using toctree directive to include the advertools documentation file with a maximum depth of 4 levels.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/modules.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 4\n\n   advertools\n```\n\n----------------------------------------\n\nTITLE: Including README in Sphinx Documentation with ReStructuredText\nDESCRIPTION: This directive tells Sphinx documentation system to include the content of README.rst from the parent directory into the current document. This is a common pattern for maintaining documentation DRY (Don't Repeat Yourself).\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/readme.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Including External RST File in Documentation\nDESCRIPTION: This directive includes the content of the ../README.rst file into the current document. It's a standard reStructuredText directive used in Sphinx documentation to avoid duplication.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/readme.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Including Project History in RST\nDESCRIPTION: Directive to include the project's HISTORY.rst file which contains the changelog and version history.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/include_changelog.rst.txt#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../HISTORY.rst\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Forms Survey with HTML Iframe\nDESCRIPTION: Embeds a Google Forms survey using an iframe element with specific dimensions and styling parameters. The form is set to 640px width and 3550px height with no border or margins.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.survey.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSddQlakm89YSD4emOIlkJn76LVvUV9QvBwROEgUhoH36oUncg/viewform?embedded=true\" width=\"640\" height=\"3550\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading‚Ä¶</iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt Rules for Web Crawlers\nDESCRIPTION: This robots.txt configuration defines crawling permissions for different user agents. It includes general rules for all crawlers, specific rules for Googlebot, and provides a sitemap URL for search engines.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/tests/data/sitemap_testing/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# this is a comment\nUser-agent: *\n\nAllow: /help*\nAllow: /*php$\n\nUser-agent: Googlebot\nDisallow:/dont_crawl\nDisallow: /*php$\nAllow: /*js$\n\nSitemap: https://advertools.readthedocs.io/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A comprehensive list of Python package dependencies covering build tools (pip, wheel), testing frameworks (pytest, tox, coverage), documentation tools (Sphinx), and the main package (advertools). Each package is specified with minimal version constraints except for twine and Sphinx.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/requirements_dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip\nbuild\nwheel\nflake8\ntox\ncoverage\nSphinx>=5.0.0\nsphinx_rtd_theme\ntwine==4.0.1\npytest\npytest-runner\nsphinx-thebe\nadvertools\npytest-cov\n```\n\n----------------------------------------\n\nTITLE: Embedding Google Forms Survey using HTML iframe\nDESCRIPTION: Embeds a Google Forms survey within an HTML iframe to collect user feedback for the advertools project. The iframe sets specific dimensions and styling properties.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/advertools.survey.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSddQlakm89YSD4emOIlkJn76LVvUV9QvBwROEgUhoH36oUncg/viewform?embedded=true\" width=\"640\" height=\"3550\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading‚Ä¶</iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for header_spider in RST\nDESCRIPTION: Sphinx directive to automatically generate documentation for the advertools.header_spider module. The directive includes all members, undocumented members, and inheritance information from the module.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.header_spider.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: advertools.header_spider\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for advertools.regex Module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the advertools.regex module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/eliasdabbas/advertools/blob/master/docs/_build/html/_sources/advertools.regex.rst.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: advertools.regex\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```"
  }
]