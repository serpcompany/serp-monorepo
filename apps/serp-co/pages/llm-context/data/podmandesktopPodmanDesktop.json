[
  {
    "owner": "podman-desktop",
    "repo": "podman-desktop",
    "content": "TITLE: Implementing Extension Activation Logic in TypeScript\nDESCRIPTION: Provides the full implementation of the `activate` function for the sample extension. It registers the command defined in `package.json` using `podmanDesktopAPI.commands.registerCommand`, uses `podmanDesktopAPI.window.showQuickPick` for user input, displays results with `podmanDesktopAPI.window.showInformationMessage`, creates a status bar item linked to the command using `podmanDesktopAPI.window.createStatusBarItem`, and manages disposable resources with `extensionContext.subscriptions.push`.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as podmanDesktopAPI from '@podman-desktop/api';\nexport async function activate(extensionContext: podmanDesktopAPI.ExtensionContext): Promise<void> {\n  // register the command referenced in package.json file\n  const myFirstCommand = podmanDesktopAPI.commands.registerCommand('my.first.command', async () => {\n    // display a choice to the user for selecting some values\n    const result = await podmanDesktopAPI.window.showQuickPick(['un', 'deux', 'trois'], {\n      canPickMany: true, // user can select more than one choice\n    });\n\n    // display an information message with the user choice\n    await podmanDesktopAPI.window.showInformationMessage(`The choice was: ${result}`);\n  });\n\n  // create an item in the status bar to run our command\n  // it will stick on the left of the status bar\n  const item = podmanDesktopAPI.window.createStatusBarItem(podmanDesktopAPI.StatusBarAlignLeft, 100);\n  item.text = 'My first command';\n  item.command = 'my.first.command';\n  item.show();\n\n  // register disposable resources to it's removed when you deactivte the extension\n  extensionContext.subscriptions.push(myFirstCommand);\n  extensionContext.subscriptions.push(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Application with Podman Compose (Shell)\nDESCRIPTION: This snippet starts the multi-container application using 'podman compose up -d', initiating all defined services in detached mode. Dependencies include a valid compose.yaml file, Podman, and the Compose provider. The command's parameters support detached running ('-d') and propagate configuration from the compose file. Output includes real-time status for each container launched. Evaluates readiness of services and can be used after configuration or scaling changes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/getting-started-with-compose.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npodman compose up -d\n>>>> Executing external compose provider \"/usr/local/bin/docker-compose\". Please refer to the documentation for details. <<<<\n\n[+] Running 3/3\n✔ Container redis-replica  Started                                                                        0.0s\n✔ Container web            Started                                                                        0.0s\n✔ Container redis-leader   Started                                                                        0.0s\n```\n\n----------------------------------------\n\nTITLE: Accessing Podman Machine via SSH (Windows/macOS)\nDESCRIPTION: This command uses `podman machine ssh` to open a root shell session within the Podman virtual machine on Windows or macOS. This is necessary for accessing and modifying configuration files like `registries.conf` stored within the VM, particularly when configuring insecure registries. The `[optional-machine-name]` parameter can be used if managing multiple Podman machines.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/registries/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine ssh --username root [optional-machine-name]\n```\n\n----------------------------------------\n\nTITLE: Mocking Complete Modules in Vitest\nDESCRIPTION: Illustrates how to mock an entire module using vi.mock and properly reset mocks between tests with vi.resetAllMocks(). The example shows testing different scenarios by configuring specific mock return values.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CODE-GUIDELINES.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { existsSync } from 'node:fs';\nimport { beforeEach, describe, expect, test, vi } from 'vitest';\n\n// completely mock the fs module, to be sure to\n// run the tests in complete isolation from the filesystem\nvi.mock('node:fs');\n\nbeforeEach(() => {\n  vi.resetAllMocks();\n});\n\ndescribe('the file exists', () => {\n  beforeEach(() => {\n    vi.mocked(existsSync).mockReturnValue(true);\n  });\n\n  test('file exists', () => {\n    // existsSync is mocked to return true\n    expect(codeCheckingIfFileExists('/file/not/found')).toBeTruthy();\n  });\n});\n\ndescribe('the file does not exist', () => {\n  beforeEach(() => {\n    vi.mocked(existsSync).mockReturnValue(false);\n  });\n\n  test('root does not exists', () => {\n    // existsSync is mocked to return false\n    expect(codeCheckingIfFileExists('/')).toBeFalsy();\n  });\n});\n\ntest('file existence is not defined', () => {\n  // a no-op mock returning undefined is called\n  expect(codeCheckingIfFileExists('/file/not/found')).toBeUndefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop via Homebrew on MacOS\nDESCRIPTION: Command to install Podman Desktop using Homebrew package manager on MacOS. This will also install the Podman Engine if not already present.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/macos-install.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman CLI Installation - Shell Session - Shell\nDESCRIPTION: This snippet demonstrates how to check if the Podman CLI is available and to verify its installed version using the \"podman version\" command. The command requires Podman to be installed and accessible in the terminal. A successful output confirms Podman's presence and provides the current version, which is helpful for diagnosing installation or compatibility issues.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman version\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Deployment with YAML\nDESCRIPTION: This snippet defines a Kubernetes Deployment for running two instances of an Nginx container as pods. Required dependency: a running Kubernetes cluster where this YAML can be applied via kubectl or the Podman Desktop UI. The main parameters include the name of the deployment (my-nginx), matching selector and label, the number of replicas (2), the container image (nginx), and the container port (80) to expose. Input is a YAML file; output is a running Deployment object in Kubernetes. Limitation: replicas >0 required; assumes nginx image is publicly available.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/deploying-a-kubernetes-application.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: my-nginx\\nspec:\\n  selector:\\n    matchLabels:\\n      run: my-nginx\\n  replicas: 2\\n  template:\\n    metadata:\\n      labels:\\n        run: my-nginx\\n    spec:\\n      containers:\\n        - name: my-nginx\\n          image: nginx\\n          ports:\\n            - containerPort: 80\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Commands in TypeScript for Podman Desktop Extension\nDESCRIPTION: This TypeScript code snippet shows how to register and implement the custom commands defined in package.json. It demonstrates both asynchronous and synchronous command implementations using the extensionApi.commands.registerCommand method.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst exampleCommand = extensionApi.commands.registerCommand('extension.exampleCommand', async () => {\n  // Implementation logic here\n  console.log('Executing Example Command');\n});\n\nconst anotherCommand = extensionApi.commands.registerCommand('extension.anotherCommand', () => {\n  // Synchronous logic can be used if async processing is not required\n  console.log('Another Command Executed');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Namespace Function Using Client Class - TypeScript\nDESCRIPTION: Implements the 'hello' function from the 'foobar' namespace by integrating it into the core 'extension-loader.ts' file. This snippet shows how to extend the ExtensionLoader class constructor to accept a 'FoobarClient' instance and how to wire up the namespace so that calling 'hello' calls the concrete implementation. Dependencies include the FoobarClient class and TypeScript type management. The key parameter is 'input' passed to the hello function. Only usable after the client is implemented and provided.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// It's recommended you define a class that you retrieve from a separate file\n// see Podman and Kubernetes examples for implementation.\n\n// Add the class to the constructor of the extension loader\nimport type { FoobarClient } from './foobar';\n\nexport class ExtensionLoader {\n  // ...\n  constructor(\n    private foobarClient: FoobarClient,\n    // ...\n  ) {}\n// ..\n}\n\n// Initialize the 'foobar' client\nconst foobarClient = this.foobarClient;\n\n// The \"containerDesktopAPI.foobar\" call is the namespace you previously defined within `extension-api.d.ts`\nconst foobar: typeof containerDesktopAPI.foobar = {\n\n  // Define the function that you are implementing and call the function from the class you created.\n  hello(input: string): void => {\n    return foobarClient.hello(input);\n  },\n};\n\n// Add 'foobar' to the list of configurations being returned by `return <typeof containerDesktopAPI>`\nreturn <typeof containerDesktopAPI>{\n  foobar\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop using Winget package manager\nDESCRIPTION: Command to install Podman Desktop using the Winget package manager for Windows.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/windows-install/index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n> winget install -e --id RedHat.Podman-Desktop\n```\n\n----------------------------------------\n\nTITLE: Declaring Namespace Function in Extension API - TypeScript\nDESCRIPTION: Declares a new namespace 'foobar' and adds a function 'hello' into the TypeScript declaration file (`extension-api.d.ts`). This exposes 'hello' as a callable API from extensions, requiring the function to accept a string input and return void. No external dependencies are needed here; it is intended to be recognized by the API surface when building extensions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport namespace foobar {\n  // ...\n  export function hello(input: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Install NVIDIA Container Toolkit and Generate CDI - Shell - sh\nDESCRIPTION: This shell command installs the NVIDIA Container Toolkit on the Podman Machine, generates a CDI specification, and lists the available CDI devices. It requires internet access and sudo/root privileges inside the Podman machine. Dependencies include curl, yum, and the NVIDIA CLI tools. It pipes the NVIDIA repo file into yum, installs, creates a .yaml CDI spec, and then validates. This is applicable only when run inside the Podman machine, not on the host.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\\\\n tee /etc/yum.repos.d/nvidia-container-toolkit.repo && \\\\\\n yum install -y nvidia-container-toolkit && \\\\\\n nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml && \\\\\\n nvidia-ctk cdi list\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop using Scoop package manager\nDESCRIPTION: Commands to add the extras bucket and install Podman Desktop using the Scoop package manager for Windows.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/windows-install/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n> scoop bucket add extras\n> scoop install podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop from Flathub using Flatpak (Shell)\nDESCRIPTION: Installs the Podman Desktop application (`io.podman_desktop.PodmanDesktop`) from the Flathub repository for the current user using the `flatpak install` command. Requires the Flathub repository to be configured and the `flatpak` tool to be installed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/linux-install/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ flatpak install --user flathub io.podman_desktop.PodmanDesktop\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Pod (YAML)\nDESCRIPTION: This code snippet demonstrates how to define a basic Kubernetes Pod object in YAML. It specifies fundamental metadata (such as pod name), and provides a pod spec with a single container named \\\"my-container\\\" that uses the nginx:1.14.2 image and exposes port 80. Dependencies include a running Kubernetes cluster and appropriate kubectl or compatible tooling for applying YAML. Inputs are the desired pod properties, and the output is the Pod object instantiated in the Kubernetes cluster. This configuration is suitable for reference in Podman Desktop or when manually applying YAML manifests.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kubernetes/configuring-editing-kube-object.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: my-pod\\nspec:\\n  containers:\\n    - name: my-container\\n      image: nginx:1.14.2\\n      ports:\\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Namespace via kubectl (Shell)\nDESCRIPTION: This shell command uses `kubectl` to set the target namespace for the currently active Kubernetes context. Replace `<name-of-the-namespace>` with the specific namespace you want to use for deployments or other operations. It's typically used before deploying resources if the target is not the 'default' namespace. Requires `kubectl` and a configured Kubernetes context.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kubernetes/deploying-a-pod-to-kubernetes.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl config set-context --current --namespace=<name-of-the-namespace>\n```\n\n----------------------------------------\n\nTITLE: Writing Vitest Integration Tests for Redis CRUD Operations with Testcontainers - TypeScript\nDESCRIPTION: Implements setup/teardown logic and test cases for Redis CRUD operations using Vitest and Testcontainers. The snippet starts a Redis container dynamically for each test suite run, flushes the database, sets preset values before each test, and verifies correct behavior for set, get, and delete operations. Dependencies include Vitest, @testcontainers/redis, testcontainers, and redis npm packages. Inputs involve Redis container configuration and key/value pairs for testing. Tests expect defined outputs from module methods and integrate with live container instances.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { afterAll, beforeAll, beforeEach, expect, test } from 'vitest';\nimport { connectRedis, deleteValue, disconnectRedis, getValue, setValue } from '.';\nimport { RedisContainer, StartedRedisContainer } from '@testcontainers/redis';\nimport { Wait } from 'testcontainers';\nimport { createClient } from 'redis';\n\nlet container: StartedRedisContainer;\n\nbeforeAll(async () => {\n  container = await new RedisContainer()\n    .withExposedPorts(6379)\n    .withWaitStrategy(Wait.forLogMessage('Ready to accept connections'))\n    .start();\n\n  await connectRedis(`redis://localhost:${container.getMappedPort(6379)}`);\n});\n\nafterAll(async () => {\n  await disconnectRedis();\n});\n\nbeforeEach(async () => {\n  // Flushind DB and adding to Redis some values before each test\n  const client = createClient({ url: `redis://localhost:${container.getMappedPort(6379)}` });\n  await client.connect();\n\n  await client.flushDb();\n  await client.set('preset-key', 'preset-value');\n  await client.set('preset-key1', 'preset-value1');\n  await client.quit();\n});\n\ntest('set value on server', async () => {\n  // Set value\n  const ret = await setValue('key', 'value');\n  expect(ret).toBe('OK');\n\n  // Update value\n  const ret1 = await setValue('key', 'updated-value');\n  expect(ret1).toBe('OK');\n});\n\ntest('get value from server', async () => {\n  // Get preset value\n  const value = await getValue('preset-key');\n  expect(value).toBe('preset-value');\n\n  // Get not existing value\n  const value1 = await getValue('key');\n  expect(value1).toBeNull();\n});\n\ntest('delete value on server', async () => {\n  // Delete two records in a same time\n  const res = await deleteValue(['preset-key', 'preset-key1']);\n  expect(res).toBe(2);\n\n  // Delete not existing record\n  const res1 = await deleteValue(['key']);\n  expect(res1).toBe(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing System Prompt in LangChain Python Application\nDESCRIPTION: Python code snippet from the custom application that configures the system prompt for the LLM using LangChain's ChatPromptTemplate. It defines how the application will communicate with the model service.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprompt = ChatPromptTemplate.from_messages([\n    (\"system\", \"You are world class technical advisor.\"),\n    MessagesPlaceholder(variable_name=\"history\"),\n    (\"user\", \"{input}\")\n])\n```\n\n----------------------------------------\n\nTITLE: Restarting Podman (Linux Rootless)\nDESCRIPTION: This command uses `pkill podman` to terminate all running Podman processes for the current user. This is the method used to apply changes made to configuration files like `registries.conf` when running Podman in rootless mode on Linux. New Podman processes will pick up the updated configuration when started.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/registries/index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pkill podman\n```\n\n----------------------------------------\n\nTITLE: Completing the Extension's package.json Configuration\nDESCRIPTION: Provides a complete example of the `package.json` file for a sample Podman Desktop extension. It integrates development dependencies, metadata, engine requirements, build/test scripts, the main entry point, and command contributions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@podman-desktop/api\": \"latest\",\n    \"typescript\": \"latest\",\n    \"vite\": \"latest\"\n  },\n  \"name\": \"my-extension\",\n  \"displayName\": \"My Hello World extension\",\n  \"description\": \"How to write my first extension\",\n  \"version\": \"0.0.1\",\n  \"icon\": \"icon.png\",\n  \"publisher\": \"benoitf\",\n  \"engines\": {\n    \"podman-desktop\": \"latest\"\n  },\n  \"scripts\": {\n    \"build\": \"vite build\",\n    \"test\": \"vitest run --coverage\",\n    \"test:watch\": \"vitest watch --coverage\",\n    \"watch\": \"vite build --watch\"\n  },\n  \"main\": \"./dist/extension.js\",\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"my.first.command\",\n        \"title\": \"My First Extension: Hello World\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a rootless Podman Lima Instance - Shell\nDESCRIPTION: Initializes a Lima virtual machine instance named 'podman' using the rootless Podman template. Requires the 'lima' CLI and Podman Desktop installed, and runs on Linux or macOS systems. The template specifies a configuration suitable for unprivileged (rootless) Podman usage inside the managed VM. The command expects no additional parameters and provides a default resource configuration unless overridden.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl start --name=podman template://podman\n```\n\n----------------------------------------\n\nTITLE: Adding Development Dependencies to package.json\nDESCRIPTION: Defines the development dependencies section within `package.json` for a Podman Desktop extension. It includes `@podman-desktop/api` for interacting with the Podman Desktop API, `typescript` for TypeScript compilation, and `vite` as the build tool.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"devDependencies\": {\n   \"@podman-desktop/api\": \"latest\",\n   \"typescript\": \"latest\",\n   \"vite\": \"latest\"\n },\n```\n\n----------------------------------------\n\nTITLE: Resetting Podman Machine - Shell - Shell Script\nDESCRIPTION: Resets and removes all Podman machines forcefully. This step is recommended for fully cleaning up local Podman virtual environments, which deletes any associated pods, containers, and images. The '-f' flag forces the reset operation without prompting for confirmation. No additional dependencies other than a Podman installation are required. Expects 'podman' to be available in the PATH; outputs the reset progress and/or completion information.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman machine reset -f\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Pod YAML for Image Verification\nDESCRIPTION: This YAML file defines a Kubernetes Pod that uses the pushed image. It's used to verify that the image was successfully pushed to the Kind cluster. The file includes placeholders for the pod name, container name, and image details.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/pushing-an-image-to-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: <verify-my-image>\nspec:\n  containers:\n    - name: <my-image>\n      image: <my_image>:<my_tag>\n      imagePullPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Stage Node.js Application Image in Dockerfile\nDESCRIPTION: This Dockerfile defines a multi-stage build process for a Node.js application. It uses build arguments for Node and Alpine versions, installs dependencies, builds the application in one stage, and creates a production-ready image in another stage by copying only necessary files and dependencies. The final image sets the command to run the application using `node app.js`.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/running-a-pod-using-a-container-docker-file.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION\nARG ALPINE_VERSION\n\nFROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base\nWORKDIR /src\n\nFROM base AS build\nCOPY package*.json ./\nRUN npm ci\nRUN npm run build\n\nFROM base AS production\nCOPY package*.json ./\nRUN npm ci --omit=dev && npm cache clean --force\nCOPY --from=build /src/dist/ .\nCMD [\"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes NGINX Deployment in YAML\nDESCRIPTION: This YAML manifest defines a Kubernetes Deployment named 'my-nginx'. It specifies 3 replicas of a Pod running the official 'nginx' image, listening on container port 80. This configuration is provided as an example manifest file that users can create and apply using Podman Desktop if they don't have one readily available. Requires a running Kubernetes cluster managed or accessible by Podman Desktop.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kubernetes/applying-a-yaml-manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx\nspec:\n  selector:\n    matchLabels:\n      run: my-nginx\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        run: my-nginx\n    spec:\n      containers:\n        - name: my-nginx\n          image: nginx\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Onboarding Steps and Completion Events in Podman Desktop (JSON)\nDESCRIPTION: Defines onboarding steps within a JSON configuration, specifying commands, titles, and completion events for each step. Dependencies include valid command registrations and the onboarding step parser. Key parameters include each step's 'id', 'title', 'command', and 'completionEvents'. Inputs are onboarding workflow settings, with step transitions driven by command executions or context changes. Outputs are updated onboarding UI progress. Limitations include strict adherence to schema and proper integration with extension APIs.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [\n    {\n    \"command\": \"podman.onboarding.checkPodmanInstalled\",\n    \"title\": \"Podman: Check podman installation\"\n    },\n],\n\"onboarding\": {\n    \"title\": \"Podman Setup\",\n    \"steps\": [\n    {\n        \"id\": \"checkPodmanInstalled\",\n        \"title\": \"Checking for Podman installation\",\n        \"command\": \"podman.onboarding.checkPodmanInstalled\",\n        \"completionEvents\": [\n            \"onCommand:podman.onboarding.checkPodmanInstalled\"\n        ]\n    },\n    ...\n    ],\n    ...\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [\n    {\n    \"command\": \"podman.onboarding.checkPodmanInstalled\",\n    \"title\": \"Podman: Check podman installation\"\n    },\n],\n\"onboarding\": {\n    \"title\": \"Podman Setup\",\n    \"steps\": [\n    {\n        \"id\": \"checkPodmanInstalled\",\n        \"title\": \"Checking for Podman installation\",\n        \"command\": \"podman.onboarding.checkPodmanInstalled\",\n        \"completionEvents\": [\n            \"onboardingContext:podmanVersion == 4.7.2\"\n        ]\n    },\n    ...\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AI Model Inference Server with Java and Quarkus\nDESCRIPTION: Java code snippet using Quarkus framework to interact with the AI model inference server. This example shows how to send a request and handle the response in a Java application.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/ai-lab/start-inference-server.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/chat\")\npublic class ChatResource {\n\n    @Inject\n    ChatService chatService;\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response chat(ChatRequest request) {\n        String response = chatService.chat(request);\n        return Response.ok(response).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Compose Provider with Podman Compose (Shell)\nDESCRIPTION: This snippet demonstrates running the 'podman compose' command in the shell to confirm availability and view help output. Dependencies include Podman and a compatible compose provider (e.g., docker-compose or podman-compose) installed on the system. Input is the shell command 'podman compose', yielding a descriptive output about the Compose wrapper and supported options; this helps verify the integration and setup of the Compose stack. No parameters are required; ensures environment is properly configured before using Compose features.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/getting-started-with-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npodman compose\nRun compose workloads via an external provider such as docker-compose or podman-compose\n\nDescription:\n  This command is a thin wrapper around an external compose provider such as docker-compose or podman-compose.  This means that podman compose is executing another tool that implements the compose functionality but sets up the environment in a way to let the compose provider communicate transparently with the local Podman socket.  The specified options as well the command and argument are passed directly to the compose provider.\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis CRUD Utility Functions - TypeScript\nDESCRIPTION: Defines asynchronous functions for connecting to Redis, performing set/get/delete operations, and gracefully closing the client connection. This module leverages the official 'redis' npm package and presumes TypeScript support. Key parameters include the Redis server URL for connection, keys, and string values. Inputs are string or string arrays for keys, and outputs are promises resolving to results from Redis. The implementation throws errors if the Redis client is not initialized; all functions are exportable for use in tests or other modules.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, RedisClientType } from 'redis';\n\nlet redisClient: RedisClientType | undefined = undefined;\n\nexport async function connectRedis(url: string) {\n  redisClient = createClient({ url });\n  await redisClient.connect();\n  return redisClient;\n}\n\nexport async function setValue(key: string, value: string): Promise<string | null> {\n  if (!redisClient) {\n    throw new Error('Redis client is not connected');\n  }\n  return await redisClient.set(key, value);\n}\n\nexport async function getValue(key: string): Promise<string | null> {\n  if (!redisClient) {\n    throw new Error('Redis client is not connected');\n  }\n  return redisClient.get(key);\n}\n\nexport async function deleteValue(key: string[]): Promise<number> {\n  if (!redisClient) {\n    throw new Error('Redis client is not connected');\n  }\n  return await redisClient.del(key);\n}\n\nexport async function disconnectRedis() {\n  if (redisClient) {\n    await redisClient.quit();\n    redisClient = undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copy k8s Kubernetes Kubeconfig to Host (YAML)\nDESCRIPTION: Copies the admin kubeconfig from the standard Kubernetes deployment in the Lima guest to the host. guest and host paths are specified, and the copied file is automatically deleted upon instance stop. This enables host tools to access the in-VM Kubernetes cluster securely.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncopyToHost:\n  - guest: '/etc/kubernetes/admin.conf'\n    host: '{{.Dir}}/copied-from-guest/kubeconfig.yaml'\n    deleteOnStop: true\n```\n\n----------------------------------------\n\nTITLE: Regenerate CDI Specification - Shell - shell\nDESCRIPTION: This shell command is used to regenerate the Container Device Interface (CDI) YAML file using NVIDIA's nvidia-ctk tool. Should be run inside the Podman machine whenever MIG devices change or drivers are updated. The primary dependency is the nvidia-ctk CLI utility, part of the NVIDIA Container Toolkit.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\nnvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Lima Instance Resources (YAML)\nDESCRIPTION: Outlines YAML configuration keys for setting CPU count, memory size, and disk size of a Lima instance. 'cpus', 'memory', and 'disk' fields can be set explicitly or left null for using defaults. Configuration can be applied per-instance or as a global default.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# CPUs\n# 🟢 Builtin default: min(4, host CPU cores)\ncpus: null\n\n# Memory size\n# 🟢 Builtin default: min(\"4GiB\", half of host memory)\nmemory: null\n\n# Disk size\n# 🟢 Builtin default: \"100GiB\"\ndisk: null\n```\n\n----------------------------------------\n\nTITLE: Building Rust WebAssembly Image with Podman\nDESCRIPTION: This Dockerfile builds a Rust program as a WebAssembly binary using a multi-stage build process. It installs Rust, compiles the program for the wasm32-wasi target, and creates a minimal image containing only the Wasm binary.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Build using the host platform (and not target platform wasi/wasm)\nFROM --platform=$BUILDPLATFORM docker.io/redhat/ubi9-minimal as builder\n\n# install rust and Wasm/WASI target\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \\\n    && source \"$HOME/.cargo/env\" && rustup target add wasm32-wasi\n\n# copy source code\nCOPY Cargo.toml /app/\nCOPY src /app/src \n\n# change working directory\nWORKDIR /app\n\n# Build\nRUN source \"$HOME/.cargo/env\" && cd /app && cargo build --target wasm32-wasi --release\n\n# now copy the Wasm binary and flag it as the entrypoint\nFROM scratch\nENTRYPOINT [ \"/rust-hello-world.wasm\" ]\nCOPY --from=builder /app/target/wasm32-wasi/release/rust-hello.wasm /rust-hello-world.wasm\n```\n\n----------------------------------------\n\nTITLE: Copy k3s Kubernetes Kubeconfig to Host (YAML)\nDESCRIPTION: Copies the k3s kubeconfig from the Lima guest to the host using YAML provisioning. Defines guest and host file paths, and ensures the copied file is deleted on instance stop. Facilitates host-side kubectl access to the Kubernetes cluster in the VM.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncopyToHost:\n  - guest: '/etc/rancher/k3s/k3s.yaml'\n    host: '{{.Dir}}/copied-from-guest/kubeconfig.yaml'\n    deleteOnStop: true\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Recipe in Podman AI Lab Catalog - JSON\nDESCRIPTION: This JSON code defines a new recipe entry for Podman AI Lab, enabling users to add their own AI model-powered application to the AI Lab catalog. Dependencies include having Podman Desktop and the Podman AI Lab extension installed, as well as the referenced model. The code specifies critical parameters such as recipe ID, description, GitHub repository, supported backend, categories, and recommended models. By saving this JSON to '$HOME/.local/share/containers/podman-desktop/extensions-storage/redhat.ai-lab/user-catalog.json', the application will appear in the Podman AI Lab catalog interface, allowing users to run and share custom recipes easily.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"version\\\": \\\"1.0\\\",\\n  \\\"recipes\\\": [\\n    {\\n      \\\"id\\\": \\\"search-podman-desktop-io\\\",\\n      \\\"description\\\": \\\"Search on Podman-desktop.io website\\\",\\n      \\\"name\\\": \\\"Search Podman-desktop.io\\\",\\n      \\\"repository\\\": \\\"https://github.com/redhat-developer/podman-desktop-demo\\\",\\n      \\\"ref\\\": \\\"main\\\",\\n      \\\"icon\\\": \\\"natural-language-processing\\\",\\n      \\\"categories\\\": [\\\"natural-language-processing\\\"],\\n      \\\"basedir\\\": \\\"ai-lab-demo/recipe\\\",\\n      \\\"readme\\\": \\\"\\\",\\n      \\\"recommended\\\": [\\\"hf.TheBloke.mistral-7b-instruct-v0.2.Q4_K_M\\\"],\\n      \\\"backend\\\": \\\"llama-cpp\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Command Callback in Podman Desktop Extension\nDESCRIPTION: This TypeScript snippet demonstrates how to register a callback function for a command in a Podman Desktop extension. It uses the extensionApi to register the command and show an information message when the command is executed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as extensionApi from '@podman-desktop/api';\n\nextensionContext.subscriptions.push(extensionApi.commands.registerCommand('my.command', async () => {\n    // callback of your command\n    await extensionApi.window.showInformationMessage('Clicked on my command');\n}));\n```\n\n----------------------------------------\n\nTITLE: Exposing Docker Socket with portForwards (YAML)\nDESCRIPTION: Demonstrates forwarding the Docker socket from the guest VM to the host for tooling integration. The YAML specifies guestSocket and hostSocket paths. This enables Docker clients outside the VM to communicate with the Docker daemon. Requires proper permissions and path variable substitution.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nportForwards:\n  - guestSocket: '/var/run/docker.sock'\n    hostSocket: '{{.Dir}}/sock/docker.sock'\n```\n\n----------------------------------------\n\nTITLE: Run NVIDIA CUDA Container for GPU Verification - Shell - sh\nDESCRIPTION: This shell snippet demonstrates how to run the official NVIDIA CUDA Docker container on the host system with Podman, assigning all GPUs to the container and running nvidia-smi inside. Requires that Podman, NVIDIA drivers, and the NVIDIA Container Toolkit are set up correctly; all needed images will be pulled if not present. Outputs information on the GPU devices accessible to the container.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ podman run --rm --device nvidia.com/gpu=all nvidia/cuda:11.0.3-base-ubuntu20.04 nvidia-smi\\n```\n```\n\n----------------------------------------\n\nTITLE: Checking if Docker Socket is a Symlink - Shell Session\nDESCRIPTION: This shell-session command lists details about the '/var/run/docker.sock' file to determine if it is a symbolic link to the Podman socket. This check is specific to macOS and Linux. The required dependencies are a POSIX-compliant shell environment; input is a simple path, and output indicates whether the docker.sock is a symlink to podman.sock.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/customizing-docker-compatibility.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\nls -la /var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Defining a Pod with Custom Image - Kubernetes YAML\nDESCRIPTION: This Kubernetes YAML snippet defines a pod using the image previously pushed to the Lima cluster. The user must replace the placeholder names for the pod and container ('<verify-my-image>' and '<my-image>') and specify the correct image name and tag. The imagePullPolicy is set to Never to prevent Kubernetes from pulling the image from remote registries, relying only on the locally loaded image. This YAML requires a Kubernetes cluster running in Lima, and should be applied through either the Podman Desktop UI or with kubectl.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/pushing-an-image-to-lima.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: <verify-my-image>\\nspec:\\n  containers:\\n    - name: <my-image>\\n      image: <my_image>:<my_tag>\\n      imagePullPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options (tsconfig.json)\nDESCRIPTION: Defines the TypeScript compiler options in `tsconfig.json` for the extension project. Specifies module system (`esnext`), target ECMAScript version (`esnext`), output directory (`dist`), source directory (`src`), source maps, module resolution, and type checking settings.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"lib\": [\"ES2017\"],\n    \"sourceMap\": true,\n    \"rootDir\": \"src\",\n    \"outDir\": \"dist\",\n    \"target\": \"esnext\",\n    \"moduleResolution\": \"Node\",\n    \"allowSyntheticDefaultImports\": true,\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"types\": [\"node\"]\n  },\n  \"include\": [\"src\", \"types/*.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Podman Registries Configuration File\nDESCRIPTION: This command uses the `vi` text editor to open the Podman registries configuration file located at `/etc/containers/registries.conf`. This file is edited to add configuration blocks for insecure registries, allowing Podman to interact with them despite certificate issues. This command should be run with root privileges (obtained via `podman machine ssh` on macOS/Windows or `sudo su -` on Linux).\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/registries/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n# vi /etc/containers/registries.conf\n```\n\n----------------------------------------\n\nTITLE: Defining Onboarding JSON Schema in Podman Desktop Extension\nDESCRIPTION: This JSON schema defines the structure for the onboarding configuration in a Podman Desktop extension. It includes properties for title, description, media, enablement, and steps, with detailed specifications for each field.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"onboarding\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"media\": {\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"altText\": {\n        \"type\": \"string\"\n      }\n    },\n    \"enablement\": {\n      \"type\": \"string\"\n    },\n    \"steps\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"media\": {\n            \"path\": {\n              \"type\": \"string\"\n            },\n            \"altText\": {\n              \"type\": \"string\"\n            }\n          },\n          \"command\": {\n            \"type\": \"string\"\n          },\n          \"completionEvents\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"content\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"value\": {\n                    \"type\": \"string\"\n                  },\n                  \"highlight\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"when\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\"value\"]\n              }\n            }\n          },\n          \"when\": {\n            \"type\": \"string\"\n          },\n          \"component\": {\n            \"type\": \"string\",\n            \"enum\": [\"createContainerProviderConnection\", \"createKubernetesProviderConnection\"]\n          },\n          \"state\": {\n            \"type\": \"string\",\n            \"enum\": [\"completed\", \"failed\"]\n          }\n        },\n        \"required\": [\"id\", \"title\"]\n      }\n    }\n  },\n  \"required\": [\"title\", \"enablement\", \"steps\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Default Podman Connection using Shell\nDESCRIPTION: This command lists Podman system connections again, used here to verify that the intended connection has been successfully set as the default after running the 'podman system connection default' command. Requires Podman to be installed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/setting-podman-machine-default-connection.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system connection ls\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Settings in package.json for Podman Desktop Extension\nDESCRIPTION: This snippet demonstrates how to structure configuration settings within package.json for a Podman Desktop extension. It includes examples of various setting types such as string paths, number ranges, and CPU-related configurations.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/config.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"configuration\": {\n      \"title\": \"Podman\",\n      \"properties\": {\n        \"podman.binary.path\": {\n          \"type\": \"string\",\n          \"format\": \"file\",\n          \"default\": \"\",\n          \"description\": \"Custom path to Podman binary (Default is blank)\"\n        },\n        \"podman.machine.cpus\": {\n          \"type\": \"number\",\n          \"format\": \"cpu\",\n          \"minimum\": 1,\n          \"default\": \"HOST_HALF_CPU_CORES\",\n          \"maximum\": \"HOST_TOTAL_CPU\",\n          \"scope\": \"ContainerConnection\",\n          \"description\": \"CPU(s)\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Podman Socket Service - Shell\nDESCRIPTION: Starts the Podman system service in socket listening mode, enabling API interactions for tools like Testcontainers. This command must be executed before running tests that require Podman as a container runtime. No additional dependencies are required beyond a working Podman installation. No parameters are expected, and the command backgrounds the socket service for further interactions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system service --time=0 &\n```\n\n----------------------------------------\n\nTITLE: Configuring Testcontainers to Use Podman Socket - .testcontainers.properties (macOS)\nDESCRIPTION: Sets the docker host property in the .testcontainers.properties file using the Podman machine's socket path, allowing Testcontainers to connect through Podman's Docker-compatible socket on macOS. The 'docker.host' property should resolve to the Unix socket provided by Podman. The command substitution ensures dynamic adaptation to the active Podman machine configuration.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker.host=unix://$(podman machine inspect --format '{{.ConnectionInfo.PodmanSocket.Path}}')\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile with Platform Specification for Wasm\nDESCRIPTION: Example Dockerfile showing how to specify build platform for multi-stage builds when creating Wasm container images.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM --platform=$BUILDPLATFORM docker.io/redhat/ubi9-minimal as builder\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Commands in package.json for Podman Desktop Extension\nDESCRIPTION: This snippet demonstrates how to add new commands to the package.json file of a Podman Desktop extension. It defines two example commands with unique identifiers and descriptive titles that will appear in the command palette.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"extension.exampleCommand\",\n        \"title\": \"Extension: Example Command\"\n      },\n      {\n        \"command\": \"extension.anotherCommand\",\n        \"title\": \"Extension: Another Command\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Podman Connection using podman system connection add - Shell\nDESCRIPTION: These snippets add a remote Podman connection configuration to the local system using podman system connection add. The command specifies a unique connection name, the identity file (SSH private key), and the SSH URL with the socket path. Different forms are shown for non-root and root users. Requires podman client installed locally, and SSH access/configuration is prerequisite. Adds the new connection to be visible in podman system connection ls.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n# non-root\\n$ podman system connection add my-remote-machine --identity ~/.ssh/id_ed25519 ssh://myuser@my-server-ip/run/user/1000/podman/podman.sock\\n\\n# root\\n$ podman system connection add my-remote-machine --identity ~/.ssh/id_ed25519 ssh://root@my-server-ip/run/podman/podman.sock\\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Example Application (Shell)\nDESCRIPTION: This snippet uses 'git clone' to retrieve a sample repository, then changes directory to the relevant Compose example. It requires Git to be installed and network access to GitHub. Inputs are the repository URL and destination path; output is a local working copy ready for further Compose-based operations. This prepares the environment for application deployment using further Compose commands.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/getting-started-with-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/redhat-developer/podman-desktop-demo\ncd podman-desktop-demo/guestbook-compose\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Registries in TOML\nDESCRIPTION: This TOML configuration snippet shows how to define insecure registries within the `/etc/containers/registries.conf` file. Each `[[registry]]` block specifies a registry location (e.g., `my-registry.tld`) and sets `insecure = true` to authorize Podman to connect despite potential certificate errors (like self-signed certificates). Multiple registries can be configured by adding separate blocks.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/registries/index.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[registry]]\nlocation = \"my-registry.tld\"\ninsecure = true\n\n[[registry]]\nlocation = \"registry.example.com\"\ninsecure = true\n```\n\n----------------------------------------\n\nTITLE: Configuring VM and Mount Types for Lima Instances (YAML)\nDESCRIPTION: Provides YAML configuration fragments for specifying the VM type ('qemu' or 'vz') and mount type ('reverse-sshfs', '9p', 'virtiofs') for Lima instances. The vmType is selected only at creation, while mountType can be changed. Comments indicate defaults and compatibility with different host OS.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# VM type: \"qemu\" or \"vz\" (on macOS 13 and later).\n# The vmType can be specified only on creating the instance.\n# The vmType of existing instances cannot be changed.\n# 🟢 Builtin default: \"qemu\"\nvmType: null\n\n# Mount type for above mounts, such as \"reverse-sshfs\" (from sshocker),\n# \"9p\" (EXPERIMENTAL, from QEMU’s virtio-9p-pci, aka virtfs),\n# or \"virtiofs\" (EXPERIMENTAL, needs `vmType: vz`)\n# 🟢 Builtin default: \"reverse-sshfs\" (for QEMU), \"virtiofs\" (for vz)\nmountType: null\n```\n\n----------------------------------------\n\nTITLE: Defining Tabular Content Layout for Onboarding UI in Podman Desktop (JavaScript)\nDESCRIPTION: Shows how to declare the tabular content structure as nested arrays, where each parent array defines a row, and child arrays define cells. No external dependencies are required for the structure itself. This design allows onboarding content to be rendered in dynamic tables, with each cell potentially containing Markdown or UI components. Only the 'value' field of each content cell is required. Suitable for static UI state.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontent = [\n  ['cell', 'cell'], //row\n  ['cell', 'cell', 'cell'], //row\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifest for Pod Configuration\nDESCRIPTION: The document describes generating a Kubernetes YAML manifest for existing pods or containers, which can be used to create local Kubernetes resources. This configuration includes specifications for both the Redis backend and Python frontend containers in a pod.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-10-05-kubernetes-blog.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# The document refers to a Kubernetes YAML manifest but doesn't include the actual code.\n# The manifest would define a pod with Redis backend and Python frontend containers,\n# including network configuration and resource sharing settings.\n```\n\n----------------------------------------\n\nTITLE: Deleting Podman Configuration and Machine Data - Shell Session - Shell\nDESCRIPTION: This snippet demonstrates manual deletion of Podman configuration and data directories from the user's home folder, followed by reinitialization of a Podman machine. It uses \"rm -rf\" to forcefully remove all files in specific directories and requires proper permissions. The final command recreates the Podman machine. Care is needed to avoid unintended data loss. Only use if previous troubleshooting has failed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ rm -rf ~/.local/share/containers/podman\n$ rm -rf ~/.config/containers/\n$ podman machine init\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Machine to Rootful Mode - Shell Session - Shell\nDESCRIPTION: This snippet shows the command to set a Podman machine to rootful mode using \"podman machine set --rootful\". This adjusts the user context for new containers. The command will affect the default machine unless a specific machine is provided as an option.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine set --rootful\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Service to Expose Deployment - YAML\nDESCRIPTION: This snippet describes a Kubernetes Service object to expose the previously defined deployment (my-nginx) externally. Dependencies include an existing my-nginx deployment in the cluster. The service listens on TCP port 80 and forwards traffic to target port 80 on the pods matching the run: my-nginx selector. Inputs: YAML file; outputs: Service resource in Kubernetes, accessible on port 80 via internal networking or port-forwarding. Limitation: must match existing pod labels; exposes traffic to all matching pods.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/deploying-a-kubernetes-application.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: my-nginx\\n  labels:\\n    run: my-nginx\\nspec:\\n  ports:\\n    - port: 80\\n      protocol: TCP\\n      targetPort: 80\\n  selector:\\n    run: my-nginx\\n\n```\n\n----------------------------------------\n\nTITLE: Copying Extension Assets into OCI Image via Dockerfile\nDESCRIPTION: Copies essential extension files into the OCI image. This includes the `package.json` manifest, the extension's icon (`icon.png`), and the compiled/transpiled distribution code (`dist` directory) into the designated `/extension` path within the image.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/publish/index.md#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY package.json /extension/\nCOPY icon.png /extension/\nCOPY dist /extension/dist\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Item for Image Push in package.json\nDESCRIPTION: This snippet demonstrates how to add a menu item for pushing an image to a Kind cluster in the Podman Desktop extension's package.json file. The menu item appears in the dashboard/image context when the selected image is not currently being pushed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/menu.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"dashboard/image\": [\n        {\n          \"command\": \"kind.image.move\",\n          \"title\": \"Push image to Kind cluster\",\n          \"when\": \"selectedImageId not in imagesPushInProgressToKind\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Compose Version in Terminal\nDESCRIPTION: This command displays the version of the Compose engine installed in the system. It uses the docker-compose command which should be available in the PATH after installation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/setting-up-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker-compose version\n```\n\n----------------------------------------\n\nTITLE: Configure Host KUBECONFIG for k8s Cluster (Bash)\nDESCRIPTION: Exports the KUBECONFIG environment variable for the host, allowing access to the Kubernetes cluster inside the Lima VM via the copied kubeconfig file. The {{.Dir}} placeholder ensures the path is instance-specific. Essential for enabling tools like kubectl to interact with internal clusters.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=\"{{.Dir}}/copied-from-guest/kubeconfig.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Proxy Settings in containers.conf\nDESCRIPTION: TOML configuration to enable HTTP proxy and set proxy environment variables for containers in Podman. This allows containers to access the internet through the proxy.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[containers]\nhttp_proxy = true\nenv = [\"http_proxy=<your.proxy.tld:port>\", \"https_proxy=<your.proxy.tld:port>\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Redis Backend and Python Frontend Application\nDESCRIPTION: The document references Docker images that can be pulled from quay.io registry for both a Redis server backend and a Python frontend application. The workflow describes running these containerized applications locally before deploying to Kubernetes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-10-05-kubernetes-blog.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nquay.io/podman-desktop-demo/podify-demo-backend\n```\n\nLANGUAGE: docker\nCODE:\n```\nquay.io/podman-desktop-demo/podify-demo-frontend\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Menu Configuration in Podman Desktop Extensions\nDESCRIPTION: This JSON schema defines the structure for configuring menus in Podman Desktop extensions. It specifies the format for adding menu items to different contexts, including the command, title, conditional display, and disabled state.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/menu.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"menus\": {\n      \"<MenuContext>\": [\n        {\n          \"command\": \"string\",\n          \"title\": \"string\",\n          \"when\": \"string\",\n          \"disabled\": \"boolean\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman in Rootful Mode for Kind on Windows\nDESCRIPTION: Command to set the default Podman system connection to rootful mode, which is required for running Kind clusters on Windows systems.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-04-19-running-a-local-kubernetes-cluster-with-podman-desktop.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman system connection default podman-machine-default-root\n```\n\n----------------------------------------\n\nTITLE: Adding Flathub Repository using Flatpak (Shell)\nDESCRIPTION: Adds the Flathub repository to the user's Flatpak configuration using the `flatpak remote-add` command. The `--if-not-exists` flag prevents errors if the repository already exists, and `--user` ensures it's added for the current user. This step is necessary before installing applications from Flathub.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/linux-install/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ flatpak remote-add --if-not-exists --user flathub https://flathub.org/repo/flathub.flatpakrepo\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Context Values in Podman Desktop Extensions (JavaScript)\nDESCRIPTION: These snippets show how to set custom context values in Podman Desktop extensions. The first example sets a global value, while the second sets a value with an 'onboarding' scope.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/when-clause-context.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nextensionsAPI.context.setValue('podmanIsInstalled', true);\n\nextensionsAPI.context.setValue('toolInstalled', 'oc.exe', 'onboarding');\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run all unit and component tests for the project using pnpm.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:unit\n```\n\n----------------------------------------\n\nTITLE: Running Compose File with Docker Compose (Alternative)\nDESCRIPTION: Alternative command for older Podman versions, using docker-compose. It requires setting the DOCKER_HOST variable beforehand.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/running-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker-compose --file compose.yaml up --detach\n```\n\n----------------------------------------\n\nTITLE: Customizing Lima Instance Resources (CPUs, Memory, Disk) - Shell\nDESCRIPTION: Supplies additional options to the limactl start command to allocate custom resources (4 CPUs, 4GiB RAM, 100GiB disk) to the newly created Lima instance. These flags must be appended to the limactl start invocation. Adjust values according to workload requirements and host capabilities.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-kubernetes-instance.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n--cpus=4 --memory=4 --disk=100\n```\n\n----------------------------------------\n\nTITLE: Creating an Nginx Container Quadlet Configuration\nDESCRIPTION: This is an example of a Quadlet file for Nginx that starts an nginx container at boot. It configures the container to restart automatically if stopped and publishes port 8080.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2025-01-29-podman-quadlet.md#2025-04-23_snippet_0\n\nLANGUAGE: editorconfig\nCODE:\n```\n# nginx.container\n[Container]\nContainerName=nginx\nImage=nginx\nPublishPort=80:8080\n\n[Service]\nRestart=always\n```\n\n----------------------------------------\n\nTITLE: Restarting Podman Service (Linux Rootful)\nDESCRIPTION: This command uses `sudo systemctl restart podman` to restart the systemd service for Podman. This is the standard way to apply configuration changes (like modifications to `/etc/containers/registries.conf`) when Podman is running as a system service (rootful mode) on Linux. Requires superuser privileges.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/registries/index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo systemctl restart podman\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman Desktop via Flatpak - Shell - Linux\nDESCRIPTION: Removes the Podman Desktop application from Linux systems where it was installed via Flatpak. Assumes Flatpak is installed and the application was installed using the 'io.podman_desktop.PodmanDesktop' identifier. Command removes the Flatpak-managed application and related data containers.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflatpak uninstall io.podman_desktop.PodmanDesktop\n```\n\n----------------------------------------\n\nTITLE: Setting the Main Entry Point in package.json\nDESCRIPTION: Defines the main entry point file for the extension within `package.json`. The `main` property points to the compiled JavaScript file (`./dist/extension.js`) generated by the build process.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n \"main\": \"./dist/extension.js\"\n```\n\n----------------------------------------\n\nTITLE: Importing a Container Archive into Podman\nDESCRIPTION: This command imports a container filesystem from a tar archive (created using `podman save` or `docker export`) into Podman, creating a new image. This allows users to bring their previously saved or exported containers into their Podman environment.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/importing-saved-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman import <your_container_archive>.tar\n```\n\n----------------------------------------\n\nTITLE: Restarting Podman Machine - Shell Session - Shell\nDESCRIPTION: This snippet contains two commands: \"podman machine stop\" followed by \"podman machine start\". They sequentially stop and restart a Podman-managed virtual machine. These commands are useful for resetting the machine state during troubleshooting. Prerequisites include the existence of a Podman machine and installed Podman CLI. Output will indicate stop/start status or errors.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine stop\n$ podman machine start\n```\n\n----------------------------------------\n\nTITLE: Setting Default Podman Connection - Shell Session - Shell\nDESCRIPTION: This snippet sets the default Podman system connection to a specific machine (here named \"podman-machine-default-root\") using \"podman system connection default\". This adjusts CLI and API operations to use the desired rootful or rootless connection. Requires correct naming of the target connection and Podman 4.x or newer.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman system connection default podman-machine-default-root\n```\n\n----------------------------------------\n\nTITLE: Importing Podman Desktop API in TypeScript Extension\nDESCRIPTION: Imports the entire Podman Desktop API module as `podmanDesktopAPI` within the extension's entry point file (`src/extension.ts`). This allows the extension code to access API functions and types.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as podmanDesktopAPI from '@podman-desktop/api';\n```\n\n----------------------------------------\n\nTITLE: Displaying Container Workflow Diagram with Mermaid\nDESCRIPTION: This code snippet embeds a Mermaid diagram as an image to illustrate the workflow for working with containers in Podman Desktop. It includes steps for working with registries, images, starting containers, and creating pods.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Working with containers flow](https://mermaid.ink/img/pako:eNptkt2OmzAQhV_FchVxw0ZAQvi5201VqequtOpWrVpxY_BArDV2ZA_t0ijvXgNNINLe4PGcb47HZk600hxoTlerU6EIEUpgTsaQEE_q5hF-g_Ry4nEou8bz_yt4gBaGdMks3Ga_MyNYKcF6VyMnHY1omen3Wmoz1H1Iy7iqd5fSmfgGbzhTVVUtEAuVVvzWpk5DvlkwCAbFDcKTKKzr92wetOFgZjIIggVWa4WfWCtkP4iWKXtnwYjam4jzsLjPebUqFIoWpFAwRCiB_NDmVaiG_BF4IO40ZE40tlBfoREWjQA7ueTkuSulqC67-849ojOpGLr6Qn1uWTOzD52QfPCtjW7J_uJbCwmznT0MBGrCiJlO62dRymv5Ut4vWpzQF2QGZ1YRMXRSqGfNr8zeAFswxAISXd_c9z3wS1eCUYBgyc_7p0fq0xZMywR3czhOTEHHSSpo7kL3o14L6t7ZcaxD_dKriuZoOvBpd-QM4aNgjWEtzWsmrcsCF6jN0zTY43z79MgUzU_0jeZ3m816k8RRHMfpNgl3qU97mm-y7TrI0iTepmmUhlF89ulfrZ1puA6SLA6iNNplWZJkyWj2a9SGLs7_AF26CAk?type=png)](https://mermaid.live/edit#pako:eNptkt2OmzAQhV_FchVxw0ZAQvi5201VqequtOpWrVpxY_BArDV2ZA_t0ijvXgNNINLe4PGcb47HZk600hxoTlerU6EIEUpgTsaQEE_q5hF-g_Ry4nEou8bz_yt4gBaGdMks3Ga_MyNYKcF6VyMnHY1lemen3Wmoz1H1Iy7iqd5fSmfgGbzhTVVUtEAuVVvzWpk5DvlkwCAbFDcKTKKzr92wetOFgZjIIggVWa4WfWCtkP4iWKXtnwYjam4jzsLjPebUqFIoWpFAwRCiB_NDmVaiG_BF4IO40ZE40tlBfoREWjQA7ueTkuSulqC67-849ojOpGLr6Qn1uWTOzD52QfPCtjW7J_uJbCwmznT0MBGrCiJlO62dRymv5Ut4vWpzQF2QGZ1YRMXRSqGfNr8zeAFswxAISXd_c9z3wS1eCUYBgyc_7p0fq0xZMywR3czhOTEHHSSpo7kL3o14L6t7ZcaxD_dKriuZoOvBpd-QM4aNgjWEtzWsmrcsCF6jN0zTY43z79MgUzU_0jeZ3m816k8RRHMfpNgl3qU97mm-y7TrI0iTepmmUhlF89ulfrZ1puA6SLA6iNNplWZJkyWj2a9SGLs7_AF26CAk)\n```\n\n----------------------------------------\n\nTITLE: Stopping Podman Machine Using Shell Commands - shell-session\nDESCRIPTION: This snippet stops the currently running Podman machine on WSL. It requires Podman to be installed and the command should be executed in an environment where the Podman machine is already running. The command takes no parameters and halts the machine, which is necessary before changing its mode.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/configuring-podman-for-kind-on-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n```shell-session\\n$ podman machine stop\\n```\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Podman via Brew\nDESCRIPTION: This shell command uses Homebrew to install the Podman engine. This is typically performed after cleaning up a previous installation or as part of setting up the Podman environment on macOS.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew install podman\n```\n\n----------------------------------------\n\nTITLE: Starting Podman Machine Using Shell Commands - shell-session\nDESCRIPTION: This snippet restarts the Podman machine on WSL after configuring it to run in rootful mode. It should be run after the configuration changes are applied. Starting the machine applies the rootful mode and prepares the machine for further usage with Kind.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/configuring-podman-for-kind-on-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n```shell-session\\n$ podman machine start\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous activate Function Signature in TypeScript\nDESCRIPTION: Shows the function signature for an asynchronous `activate` function using `async/await` in the extension's entry point (`src/extension.ts`). This allows for non-blocking operations and returns a Promise.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function activate(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Running an Nginx Container with Podman\nDESCRIPTION: This command starts an Nginx container using Podman, which can later be used to generate a Quadlet. It runs the container in detached mode, names it 'nginx-demo', and maps port 8080 of the container to port 80 on the host.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2025-01-29-podman-quadlet.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman run --name nginx-demo -d -p 80:8080 nginx\n```\n\n----------------------------------------\n\nTITLE: Verifying Lima Installation by Listing Instances (Shell)\nDESCRIPTION: This command executes the `limactl list` instruction to display all configured Lima virtual machine instances. It serves as a basic check to confirm that the `lima` CLI was installed correctly and is available in the environment's PATH.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/installing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl list\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Warning Component Items in Onboarding (JSON)\nDESCRIPTION: Outlines the properties and requirements for a warning list item in onboarding content. Mandatory fields are 'state', 'description', and (for 'command') both 'id' and 'title'. The 'docLinks' array supports documentation references grouped by category. The object is used by UI components rendering warnings or status messages. Must conform to this schema when populating context values for warnings.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"object\",\n\"properties\": {\n    \"state\": {\n        \"type\": \"string\"\n    },\n    \"description\": {\n        \"type\": \"string\"\n    },\n    \"command\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"id\": {\n            \"type\": \"string\"\n            },\n            \"title\": {\n            \"type\": \"string\"\n            }\n        },\n        \"required\": [\n            \"id\",\n            \"title\"\n        ]\n    },\n    \"docDescription\": {\n        \"type\": \"string\"\n    },\n    \"docLinks\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n            \"title\": {\n                \"type\": \"string\"\n            },\n            \"url\": {\n                \"type\": \"string\"\n            },\n            \"group\": {\n                \"type\": \"string\"\n            }\n            },\n            \"required\": [\n            \"title\",\n            \"url\",\n            \"group\"\n            ]\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Kubernetes Cluster with kubectl CLI - Shell\nDESCRIPTION: This snippet registers a new Kubernetes cluster in your local kubeconfig using the kubectl CLI. It requires kubectl to be installed and presupposes valid credentials for your cluster. The main parameter <my_kubernetes> is the chosen name for your cluster context, while <my_kubernetes_url> is the endpoint URL of the Kubernetes API server. This command will modify your kubeconfig file and is essential for enabling Podman Desktop and kubectl to interact with the cluster.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kubernetes/existing-kubernetes/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl config set-cluster <my_kubernetes> --server=<my_kubernetes_url>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Activating a Podman Desktop Extension in TypeScript\nDESCRIPTION: This snippet demonstrates the basic structure of a Podman Desktop extension, including the activate and deactivate functions. It shows how to create a provider and register it with the extension context.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as extensionApi from '@podman-desktop/api';\n\n// Activate the extension asynchronously\nexport async function activate(extensionContext: extensionApi.ExtensionContext): Promise<void> {\n  // Create a provider with an example name, ID and icon\n  const provider = extensionApi.provider.createProvider({\n    name: 'FooBar',\n    id: 'foobar',\n    status: 'unknown',\n    images: {\n      icon: './icon.png',\n      logo: './icon.png',\n    },\n  });\n\n  // Push the new provider to Podman Desktop\n  extensionContext.subscriptions.push(provider);\n}\n\n// Deactivate the extension\nexport function deactivate(): void {\n  console.log('stopping FooBar extension');\n}\n```\n\n----------------------------------------\n\nTITLE: Containerfile for Building Rust Wasm Application\nDESCRIPTION: Start of a Containerfile that demonstrates multi-stage build for Rust applications targeting WebAssembly.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Checking Compose Version with Podman\nDESCRIPTION: This command verifies that Podman detects the same Compose version as installed. It uses the podman compose command to display the version information.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/setting-up-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman compose version\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST on macOS using Shell\nDESCRIPTION: Sets the DOCKER_HOST environment variable for the current shell session on macOS using the `export` command. It requires the Podman socket location obtained previously, prefixed with `unix://`. Replace `<your_podman_socket_location>` with the actual path.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export DOCKER_HOST=unix://<your_podman_socket_location>\n```\n\n----------------------------------------\n\nTITLE: Specifying CPU, Memory, and Disk for Lima Instance - Shell\nDESCRIPTION: These flags are appended to the 'limactl start' command to allocate specific CPU count, RAM, and disk space when creating a new Lima instance. Users can specify '--cpus', '--memory', and '--disk' options to override template defaults for performance tuning. Must be used as additional arguments when starting a new VM.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n--cpus=2 --memory=2 --disk=50\n```\n\n----------------------------------------\n\nTITLE: Verifying Kind CLI Installation with Cluster Query\nDESCRIPTION: This command checks for existing Kind clusters, confirming that the Kind CLI is properly installed and functional. It's used as a verification step after installation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/installing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ kind get clusters\n```\n\n----------------------------------------\n\nTITLE: Pushing Extension OCI Image to Registry using Podman\nDESCRIPTION: Pushes the previously built and tagged Podman Desktop extension OCI image to the specified remote OCI image registry using the `podman push` command. This makes the extension image available for download.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/publish/index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman push quay.io/username/my-extension\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context in When Clause (JSON)\nDESCRIPTION: This snippet demonstrates how to use a custom context value in a when clause. It checks if the 'toolInstalled' value in the onboarding context is equal to 'oc.exe'.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/when-clause-context.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"when\": \"onboardingContext:toolInstalled == oc.exe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Lima Instance with k8s Template Using limactl - Shell\nDESCRIPTION: Provokes creation of a new Lima virtual machine running the standard Kubernetes (k8s) distribution. The lima CLI must be present, and this will produce a single-node Kubernetes cluster for experimentation or development. Default hardware allocations are used unless further options are provided.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-kubernetes-instance.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl start template://k8s\n```\n\n----------------------------------------\n\nTITLE: Opening a Shell in a Specific Lima Instance (Shell)\nDESCRIPTION: This sequence first sets the `LIMA_INSTANCE` environment variable to specify the target Lima VM. Then, it runs the `lima` command (which implicitly uses `LIMA_INSTANCE`) to open an interactive shell session inside the designated, currently running Lima instance. A running instance with the specified name `<instance>` is required.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/installing.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ # requires a running instance\n$ export LIMA_INSTANCE=<instance>\n$ lima\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Pod with Exposed Port - YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Pod named 'static-web' that runs an Nginx container with port 80 exposed using the TCP protocol. It is a prerequisite for enabling port forwarding to the pod from your local machine. Required dependencies include a running Kubernetes cluster and appropriate access for applying YAML files. The input to this configuration is a standard Kubernetes API YAML manifest, and the output is the creation of a Pod with a port open for forwarding.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kubernetes/port-forwarding.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: static-web\\nspec:\\n  containers:\\n    - image: nginx\\n      name: web\\n      ports:\\n        - containerPort: 80\\n          name: web\\n          protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with CRI-O and Custom Image\nDESCRIPTION: This command starts a Minikube cluster using Podman as the driver, CRI-O as the container runtime, and a custom kicbase image. It also mounts the Podman storage folder.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nminikube start --driver=podman --container-runtime=cri-o --base-image=quay.io/fbenoit/kicbase:multiarch-2023-11-06 --mount --mount-string \"/var/lib/containers:/host-containers\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Ryuk in Rootless Podman Mode - Bash\nDESCRIPTION: Disables the Ryuk sidecar container (used for resource cleanup) when running Podman in rootless mode to prevent permission issues. The environment variable TESTCONTAINERS_RYUK_DISABLED must be set to 'true' in your environment before running tests with Testcontainers.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport TESTCONTAINERS_RYUK_DISABLED=true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Certificate Authorities for Proxy\nDESCRIPTION: Commands to add custom Certificate Authorities (CA) for proxy authentication to the Podman machine's trust store.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo cp <proxy_ca.pem> /etc/pki/ca-trust/source/anchors/\n$ sudo update-ca-trust\n```\n\n----------------------------------------\n\nTITLE: Updating Certificate Trust in Podman Machine - Shell Script\nDESCRIPTION: This command refreshes the trusted certificates database on the system, allowing newly added certificates to be recognized by system utilities and processes. It should be run after placing certificate files in the correct directory. No arguments are necessary. On completion, updated CA trust is available for applications and containers.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/adding-certificates-to-a-podman-machine.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ update-ca-trust\\n```\n```\n\n----------------------------------------\n\nTITLE: SSH into Podman Machine - Shell - sh\nDESCRIPTION: This snippet demonstrates how to SSH into a Podman Machine instance using the Podman CLI. Required prior steps include having Podman and a Podman machine already installed. No additional parameters are needed; simply executes the ssh command, which opens a shell on the Podman machine. Useful for setup or diagnostic tasks within the VM.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ podman machine ssh\\n```\n```\n\n----------------------------------------\n\nTITLE: Identifying Default Docker Socket Paths for Podman Compatibility\nDESCRIPTION: Specifies the default socket paths used by Docker tools that Podman Desktop maps to for compatibility. `/var/run/docker.sock` is used on macOS and Linux, while `npipe:////./pipe/docker_engine` is used on Windows. Podman Desktop allows Docker tools to connect to these paths to interact with the Podman engine.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/managing-docker-compatibility.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/var/run/docker.sock\n```\n\nLANGUAGE: text\nCODE:\n```\nnpipe:////./pipe/docker_engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Machine Privileges\nDESCRIPTION: Commands to modify the Podman Machine configuration on Windows or macOS, toggling between rootful (with root privileges) and rootless mode. Rootful mode is needed when containers require privileged operations like binding to ports below 1024.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-03-24-5-things-to-know-for-a-docker-user.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman machine set --rootful\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman machine set --rootful=false\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating Configuration Settings in TypeScript\nDESCRIPTION: This snippet shows how to retrieve, update, and check for the existence of configuration settings in TypeScript code for a Podman Desktop extension. It demonstrates interaction with the extension API for configuration management.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/config.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Get configuration for this connection\nconst containerConfiguration = extensionApi.configuration.getConfiguration('podman', containerProviderConnection);\n\n// Set a value\nawait containerConfiguration.update('machine.cpus', machineInfo.cpus);\n\n// Get a value\nawait containerConfiguration.get('machine.cpus');\n\n// Has a value\nawait containerConfiguration.has('machine.cpus');\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman Desktop via Winget - Shell-Session - Windows\nDESCRIPTION: Uninstalls Podman Desktop by its ID using Winget, the Windows package manager. The '-e' flag matches the exact identifier, while '--id' specifies the application ID. Suitable for scripted or unattended removals; user must have Winget installed and properly configured.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\nwinget uninstall -e --id RedHat.Podman-Desktop\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Project with Cargo.toml\nDESCRIPTION: This TOML file defines the Rust project configuration, including the package name, version, and binary target information.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nname = \"rust-hello-world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[[bin]]\nname = \"rust-hello\"\npath = \"src/main.rs\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Rootful Podman Machine\nDESCRIPTION: This command initializes a rootful Podman machine with specified CPU and memory allocations.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman machine init --cpus 4 --memory 6000 --rootful\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Machine via CLI - Shell Session - Shell\nDESCRIPTION: This snippet provides the command to initialize a new Podman machine using the CLI. \"podman machine init\" sets up a local virtual machine for container workloads. This requires the Podman CLI to be installed and accessible. The main parameter is implicit (no argument) but can be customized with machine names or options as documented in Podman CLI references. Output will indicate creation status or errors for troubleshooting.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine init\n```\n\n----------------------------------------\n\nTITLE: Providing Kubernetes Cluster Setup Instructions via Markdown\nDESCRIPTION: This Markdown snippet structures the documentation for creating Kubernetes clusters with Podman Desktop extensions. It outlines the table of extensions and their respective setup guides using Markdown tables, links, and formatting syntax. Dependencies include a markdown-aware documentation renderer and an environment where users can follow the provided procedural links. The snippet does not execute code but instructs users on completing a multi-step process for setting up development clusters locally.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kubernetes/creating-a-kube-cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 11\ntitle: Creating a Kubernetes cluster\ndescription: Creating a Kubernetes cluster\nkeywords: [podman desktop, podman, creating, cluster, kubernetes]\ntags: [creating-kubernetes-cluster, extentions]\n---\n\n# Creating a Kubernetes cluster using extensions\n\nPodman Desktop provides extensions, such as Kind, MiniKube, and others to start a local Kubernetes development cluster. The following table covers the procedural sections for setting up a Kubernetes cluster:\n\n| Extension |                                                                                                                            Procedural sections to follow                                                                                                                            |\n| :-------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n| Kind      |                 [Install the Kind extension](/docs/extensions/install) > [Install the Kind CLI](/docs/kind/installing) > [Configure Podman on WSL](/docs/kind/configuring-podman-for-kind-on-windows) > [Create a Kind cluster](/docs/kind/creating-a-kind-cluster)                 |\n| Minikube  | [Install the Minikube extension](/docs/extensions/install) > [Install the Minikube CLI](/docs/minikube/installing) > [Configure Podman on WSL](/docs/minikube/configuring-podman-for-minikube-on-windows) > [Create a Minikube cluster](/docs/minikube/creating-a-minikube-cluster) |\n| Lima      |                                             [Install the Lima extention](/docs/extensions/install) > [Install the Lima CLI](/docs/lima/installing) > [Create a Lima instance for Kubernetes](/docs/lima/creating-a-kubernetes-instance)                                             |\n\n:::note\n\nThe _Configure Podman on WSL_ procedure is applicable only if you have installed the Podman Desktop application on a Windows machine. For MacOS and Linux, you can skip this procedure.\n\n:::\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenShift Local System Setup on Linux\nDESCRIPTION: This command executes the OpenShift Local (`crc`) setup process on a Linux system. It configures the host machine to run OpenShift Local clusters. This step is necessary after downloading the `crc` binary, extracting it, and placing it in the system's PATH.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/openshift/openshift-local/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ crc setup\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Onboarding Properties in Podman Desktop Extension\nDESCRIPTION: This JSON snippet demonstrates how to set up basic onboarding properties including the icon and title in the package.json file of a Podman Desktop extension.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"icon\": \"icon.png\",\n...\n\"onboarding\": {\n    \"title\": \"Podman Setup\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Machine as Rootful Using Shell Commands - shell-session\nDESCRIPTION: This snippet configures the Podman machine to run in rootful mode on WSL. The command should be executed after stopping the Podman machine. Rootful mode is required for compatibility with Kind. No additional configuration is needed, and the change allows for operations that require root privileges inside the Podman machine.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/configuring-podman-for-kind-on-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n```shell-session\\n$ podman machine set --rootful\\n```\n```\n\n----------------------------------------\n\nTITLE: Spying on Individual Functions with Vitest\nDESCRIPTION: Shows how to spy on specific functions while maintaining the original implementation for other parts of a module. Demonstrates using vi.spyOn and vi.restoreAllMocks() to isolate specific behavior for testing.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CODE-GUIDELINES.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// helpers.ts\nexport function f1(): boolean {\n  return true;\n}\n\n// mymodule.ts\nimport { f1 } from './helpers.js';\n\nexport class MyModuleToTest {\n  f2(): boolean {\n    return f1();\n  }\n}\n\n// mymodule.spec.ts\nimport { beforeEach, describe, expect, test, vi } from 'vitest';\nimport { MyModuleToTest } from './mymodule.js';\nimport * as helpers from './helpers.js';\n\nlet myModuleToTest: MyModuleToTest;\n\nbeforeEach(() => {\n  myModuleToTest = new MyModuleToTest();\n\n  // restore f1 to its original implementation\n  vi.restoreAllMocks();\n});\n\ndescribe('f1 returns false', () => {\n  beforeEach(() => {\n    vi.spyOn(helpers, 'f1').mockReturnValue(false);\n  });\n\n  test('f2 returns false', () => {\n    expect(myModuleToTest.f2()).toBeFalsy();\n    expect(helpers.f1).toHaveBeenCalledOnce();\n  });\n});\n\ntest('f2 returns true', () => {\n  // use the original implementation of f1\n  expect(myModuleToTest.f2()).toBeTruthy();\n  // this won't work, as f1 is not spied for this test\n  // expect(helpers.f1).toHaveBeenCalledOnce();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Host Env Variable (Bash)\nDESCRIPTION: Exports CONTAINER_HOST with a Unix socket address pointing to the Podman engine socket forwarded from the Lima guest. The {{.Dir}} variable must be substituted for the actual instance directory. This connects host-side container tools to Podman in the Lima VM.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport CONTAINER_HOST=\"unix://{{.Dir}}/sock/podman.sock\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Verifying MicroShift Configuration\nDESCRIPTION: Commands to set up the Kubernetes configuration file and verify that MicroShift pods are running correctly. This includes copying the kubeconfig file and checking pod status using kubectl.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ ssh redhat@localhost -p 2222\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir -p ~/.kube\n$ sudo cp /var/lib/microshift/resources/kubeadmin/kubeconfig ~/.kube/config\n$ sudo chown redhat ~/.kube/config\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get pods -A\nNAMESPACE                  NAME                                       READY   STATUS    RESTARTS   AGE\nkube-system                csi-snapshot-controller-856bb8b9bc-9n7lj   1/1     Running   1          3d23h\nkube-system                csi-snapshot-webhook-7c64d4d4d7-98v6l      1/1     Running   1          3d23h\nopenshift-dns              dns-default-n2td4                          2/2     Running   2          3d23h\nopenshift-dns              node-resolver-7cslg                        1/1     Running   1          3d23h\nopenshift-ingress          router-default-7cbc67954b-nqqc6            1/1     Running   1          3d23h\nopenshift-ovn-kubernetes   ovnkube-master-zcqw5                       4/4     Running   5          3d23h\nopenshift-ovn-kubernetes   ovnkube-node-crnn9                         1/1     Running   2          3d23h\nopenshift-service-ca       service-ca-6799f567-k7lsc                  1/1     Running   1          3d23h\n```\n\n----------------------------------------\n\nTITLE: Checking Server Version with Docker and jq - Shell Session\nDESCRIPTION: This shell-session snippet demonstrates how to use the Docker CLI to obtain server version information, format the output as JSON, and extract the version string using jq. Dependencies include Docker, jq, and a running Podman or Docker setup. The primary input is the docker info command with the --format flag; the expected output is the server version. Useful for confirming if Docker compatibility is set up to use Podman rather than Docker.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/customizing-docker-compatibility.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ docker info --format=json | jq -r .ServerVersion\n```\n\n----------------------------------------\n\nTITLE: Listing Images in Lima Cluster - Shell Session\nDESCRIPTION: This snippet demonstrates how to list container images loaded into a Lima-powered Kubernetes cluster using the crictl tool. It requires the crictl utility to be installed inside the Lima instance, the LIMIA_INSTANCE environment variable set to the desired instance, and appropriate privileges to execute commands with sudo. The command outputs all images currently available for the configured Lima instance.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/pushing-an-image-to-lima.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ LIMA_INSTANCE=<name> lima sudo crictl images\n```\n\n----------------------------------------\n\nTITLE: Configuring Testcontainers for Podman on Linux - .testcontainers.properties\nDESCRIPTION: Configures the docker host property specifically for Linux environments so Testcontainers uses Podman's user runtime socket. The 'docker.host' variable references the XDG_RUNTIME_DIR environment variable for discovering the active Podman socket, enabling seamless integration. This should be placed in your .testcontainers.properties file.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker.host=unix://${XDG_RUNTIME_DIR}/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous activate Function Signature in TypeScript\nDESCRIPTION: Shows the function signature for a synchronous `activate` function in the extension's entry point (`src/extension.ts`). This function is called when the extension is activated and executes sequentially.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function activate(): void;\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Podman Socket for Remote Access via systemd - Shell\nDESCRIPTION: These snippets enable and start the podman.socket systemd unit, making the Podman API socket available for remote clients. The commands use systemctl to enable the socket at boot and start it immediately. Podman must be installed and systemd present on the server. After execution, the socket file becomes available for SSH-tunneled connections. May require --user if managing user services.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ systemctl enable podman.socket\\n$ systemctl start podman.socket\\n```\n```\n\n----------------------------------------\n\nTITLE: Copying Certificate Authorities to Podman Machine (Windows/macOS)\nDESCRIPTION: Command to copy a proxy Certificate Authority (CA) file in PEM format to the Podman machine for proxy authentication.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat proxy_ca.pem | podman machine ssh podman-machine-default \"cat > proxy_ca.pem\"\n```\n\n----------------------------------------\n\nTITLE: Building Extension OCI Image using Podman\nDESCRIPTION: Builds the Podman Desktop extension OCI image using the `podman build` command. The `-t` flag tags the image with a specific name and repository location (e.g., `quay.io/username/my-extension`), and `.` specifies the build context (the directory containing the Containerfile).\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/publish/index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman build -t quay.io/username/my-extension .\n```\n\n----------------------------------------\n\nTITLE: Checking OpenShift Local Host Readiness with CRC (Shell)\nDESCRIPTION: This command verifies if the host system meets the requirements to run OpenShift Local without making any changes. It uses the `crc setup` command with the `--check-only` flag to perform various checks like user privileges and required helper executables. The output will indicate success or identify issues.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-openshift-local.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ crc setup --check-only\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Host Env Variable (Bash)\nDESCRIPTION: Exports DOCKER_HOST environment variable to point to the forwarded Docker socket on the host. Substitute {{.Dir}} dynamically to reference the correct path. Enables Docker CLI tools to interact with the Docker engine inside the Lima instance.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_HOST=\"unix://{{.Dir}}/sock/docker.sock\"\n```\n\n----------------------------------------\n\nTITLE: Running a Virtual Machine with QEMU on Linux\nDESCRIPTION: Commands to set up and run the generated raw bootable image on Linux using QEMU. This configuration allocates 8GB of memory and forwards port 2222 to the VM's SSH port 22 for remote access.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cd ~/output\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ qemu-system-x86_64 \\\n    -m 8G \\\n    -cpu Broadwell-v4 \\\n    -nographic \\\n    -netdev user,id=mynet0,hostfwd=tcp::2222-:22 \\\n    -device e1000,netdev=mynet0 \\\n    -snapshot disk.raw\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ ssh redhat@localhost -p 2222\n```\n\n----------------------------------------\n\nTITLE: Defining Port Forwarding and Previews in VS Code DevContainer with JSON\nDESCRIPTION: This JSON snippet configures port forwarding and preview labels within the VS Code DevContainer by defining a 'portsAttributes' section. The port 9000 is labeled for VNC and set to automatically open a preview, while port 3000 is labeled for website rendering. This configuration should be added to the 'devcontainer.json' file to enable seamless browser preview experiences for VNC and the website inside Codespaces or VS Code remote environments.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"portsAttributes\\\": {\\n    \\\"9000\\\": {\\n      \\\"label\\\": \\\"vnc\\\",\\n      \\\"onAutoForward\\\": \\\"openPreview\\\"\\n    },\\n    \\\"3000\\\": {\\n      \\\"label\\\": \\\"website\\\"\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous deactivate Function Signature in TypeScript\nDESCRIPTION: Shows the function signature for an asynchronous `deactivate` function using `async/await` in the extension's entry point (`src/extension.ts`). This allows for non-blocking cleanup operations and returns a Promise.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function deactivate(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Check SELinux Status - Shell - sh\nDESCRIPTION: This command determines if SELinux is active and enforcing, relevant for Fedora family OSes when configuring direct device access for containers. Needs to be run on the host, not in a container. Output informs if further action is needed for device passthrough.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ getenforce\\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Docker CLI Commands via Podman Engine\nDESCRIPTION: Demonstrates running standard Docker commands like `docker run` which, when Docker compatibility is configured in Podman Desktop, are redirected to execute against the Podman engine. This allows developers to use familiar Docker CLI commands without modification.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/managing-docker-compatibility.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run\n```\n\n----------------------------------------\n\nTITLE: Exporting a Docker Container Filesystem to a Tar Archive\nDESCRIPTION: This command exports the filesystem of an existing Docker container as a tar archive. This is useful for migrating a container's contents from Docker to Podman. Note that this exports only the filesystem, not the image layers or metadata like `docker save`.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/importing-saved-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ docker export <your_container> -o <your_container_archive>.tar\n```\n\n----------------------------------------\n\nTITLE: Examining Docker Socket Symlink Target - Shell Session\nDESCRIPTION: This configuration show the expected result when '/var/run/docker.sock' is a symlink pointing to the Podman socket, used to verify Docker compatibility setup on macOS. No inputs or execution required; it's output from 'ls -la'.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/customizing-docker-compatibility.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n/var/run/docker.sock -> /Users/username/.local/share/containers/podman/machine/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Using Color Variables in Podman Desktop UI Components\nDESCRIPTION: Shows how to reference color variables from the color-registry.ts file when adding colorized UI components to Podman Desktop, ensuring consistency with the theme system.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n<Button class=\"bg-[var(--pd-button-primary-bg)]\"/>\n```\n\n----------------------------------------\n\nTITLE: Downloading the MicroShift Containerfile with curl\nDESCRIPTION: Command to download the MicroShift Containerfile from GitHub repository to be used for building the bootable image. This file contains all necessary configurations for setting up a RHEL 9-based BootC image with MicroShift.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ curl https://raw.githubusercontent.com/openshift/microshift/main/docs/config/Containerfile.bootc-rhel9 -o Containerfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Onboarding Step with Built-in Component in Podman Desktop (JSON)\nDESCRIPTION: Configures an onboarding step in JSON to use a built-in component, 'createContainerProviderConnection', for custom wizard integration. The step is shown only when specified 'when' conditions are met and marked complete if the component creates a connection. Prerequisite is that components are only supported as declared types. Inputs are context variables indicating existence of the Podman machine and OS type. Outputs embed the provider creation wizard in the onboarding UI. When using the 'component' field, 'content' should be omitted for this step.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"createPodmanMachine\",\n    \"title\": \"Create a Podman machine\",\n    \"when\": \"!onboardingContext:podmanMachineExists && !isLinux\",\n    \"completionEvents\": [\n        \"onboardingContext:podmanMachineExists\"\n    ],\n    \"component\": \"createContainerProviderConnection\"\n},\n```\n\n----------------------------------------\n\nTITLE: Initializing Extension Project with package.json (Empty)\nDESCRIPTION: Initial empty JSON object representing the start of creating a `package.json` file for a new Podman Desktop extension within its dedicated subdirectory (e.g., `foobar`). This file is fundamental for managing project metadata and dependencies.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman via Homebrew - Shell - Shell Script\nDESCRIPTION: Removes the Podman application from a macOS system using Homebrew. This command assumes Homebrew is already installed and available. Intended as the primary uninstall method for users who originally installed Podman with Homebrew. The command removes the Podman application and associated files managed by Homebrew.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall podman\n```\n\n----------------------------------------\n\nTITLE: Running a Test Container Remotely Using podman run via SSH - Shell\nDESCRIPTION: This snippet runs a test container (quay.io/podman/hello) on the remote machine in detached mode using podman run, executed via SSH. Demonstrates remote container start for connectivity and function testing. Needs SSH access, podman installed server-side, and the quay.io/podman/hello image accessible (internet access required). After execution, the container should appear in Podman Desktop or via CLI.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ssh user@my-server-ip podman run -d quay.io/podman/hello\\n```\n```\n\n----------------------------------------\n\nTITLE: Using the DOCKER_HOST Environment Variable (Windows/Linux)\nDESCRIPTION: Mentions using the `DOCKER_HOST` environment variable to explicitly direct Docker tools to communicate with the Podman socket, particularly relevant on Windows and Linux where automatic compatibility via the default socket path might not be enabled or available.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/managing-docker-compatibility.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDOCKER_HOST\n```\n\n----------------------------------------\n\nTITLE: Installing Lima CLI via Homebrew (Shell)\nDESCRIPTION: This command uses the Homebrew package manager (`brew`) to download and install the Lima (`lima`) command-line interface (`limactl`) on a macOS system. Homebrew must be installed prior to running this command.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/installing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew install lima\n```\n\n----------------------------------------\n\nTITLE: Starting Podman Machine via CLI - Shell Session - Shell\nDESCRIPTION: This snippet shows the command to start a Podman machine using the CLI. \"podman machine start\" boots up the specified (or default) Podman-managed virtual machine. Prerequisites include having a Podman machine already created and the Podman CLI installed. The standard output confirms successful startup or displays error messages.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine start\n```\n\n----------------------------------------\n\nTITLE: Handling Permission Denied and Compose Binary Exit - Console\nDESCRIPTION: Displays typical authentication failure messages output by the Compose binary when registry access is denied, including error responses from the daemon and process exit statuses. These messages help users identify causes such as misconfigured credentials or denied access, guiding troubleshooting actions. No direct dependencies, but Compose and Docker must be installed; errors help inform corrective steps such as deleting or updating ~/.docker/config.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nError response from daemon: {\"message\":\"denied: requested access to the resource is denied\"}\nError: executing /usr/local/bin/docker-compose up: exit status 18\n```\n\n----------------------------------------\n\nTITLE: Starting Lima Instance with k3s Template Using limactl - Shell\nDESCRIPTION: Starts a new Lima virtual machine instance using the k3s Kubernetes distribution as the template. Requires the lima CLI to be installed. This command provisions a single-node Kubernetes cluster suitable for local development. The resulting instance can be further customized or accessed via Podman Desktop. No additional parameters are needed for default resource allocation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-kubernetes-instance.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl start template://k3s\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Cluster Connectivity via kubectl.lima - Shell\nDESCRIPTION: Runs the kubectl.lima wrapper script to check the version of the Kubernetes cluster installed inside the Lima instance. This depends on successful prior cluster creation and proper configuration of KUBECONFIG. Useful for verifying that the cluster is reachable and operational.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-kubernetes-instance.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl.lima version\n```\n\n----------------------------------------\n\nTITLE: Using vi.mocked Instead of Generic Mocks in TypeScript Tests\nDESCRIPTION: Demonstrates how to properly use vi.mocked for better type checking when mocking functions. The example shows how using generic mocks can lead to undetected type errors, while vi.mocked provides proper type checking.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CODE-GUIDELINES.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst windowMethodMock = vi.fn();\n\nObject.defineProperty(global, 'window', {\n  value: {\n    windowMethod: windowMethodMock,\n  },\n});\n\ntest('...', () => {\n  windowMethodMock.mockResolvedValue({ msg: 'a string' }); // here, Typescript is not able to detect that the type is wrong\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nObject.defineProperty(global, 'window', {\n  value: {\n    windowMethod: vi.fn(),\n  },\n});\n\ntest('...', () => {\n  vi.mocked(window.windowMethod).mockResolvedValue('a string');\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Podman User Configuration and Data Files\nDESCRIPTION: These shell commands remove user-specific Podman configuration files, SSH keys for the default machine, and container storage data located in the user's home directory (`~`). This step ensures a thorough cleanup of user-level Podman artifacts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ rm -rf ~/.ssh/podman-machine-default\n$ rm -rf ~/.ssh/podman-machine-default.pub\n$ rm -rf ~/.local/share/containers\n$ rm -rf ~/.config/containers\n```\n\n----------------------------------------\n\nTITLE: Running a Test Container with Podman - Shell Session - Shell\nDESCRIPTION: This snippet demonstrates running a simple test container (\"hello\") using the Podman CLI. The command pulls and executes the \"quay.io/podman/hello\" image, allowing verification of container runtime and network connectivity. It requires Podman to be installed and accessible, and internet access to download the image if not cached locally.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman run quay.io/podman/hello\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST on Linux using Shell\nDESCRIPTION: Sets the DOCKER_HOST environment variable for the current shell session on Linux using the `export` command. It requires the Podman socket location obtained previously, prefixed with `unix://`. Replace `<your_podman_socket_location>` with the actual path.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export DOCKER_HOST=unix://<your_podman_socket_location>\n```\n\n----------------------------------------\n\nTITLE: Example Output of vulkaninfo in Fedora Container - Shell - sh\nDESCRIPTION: This snippet displays typical vulkaninfo output filtered for GPU-related lines, after running the previous verification command in a macOS (Apple Silicon) environment. Shows detected virtual and software GPUs, demonstrating the success of driver and device configuration. Output structure may vary based on host hardware and drivers.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$  podman run --rm -it --device /dev/dri --name gpu-info quay.io/slopezpa/fedora-vgpu vulkaninfo | grep \\\"GPU\\\"\\n  GPU id = 0 (Virtio-GPU Venus (Apple M1 Pro))\\n  GPU id = 1 (llvmpipe (LLVM 17.0.6, 128 bits))\\nGPU0:\\n deviceType        = PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU\\n deviceName        = Virtio-GPU Venus (Apple M1 Pro)\\nGPU1:\\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Podman from a Dynamically Determined Path\nDESCRIPTION: This shell command shows how to forcibly remove the Podman installation directory using a placeholder `path-where-podman-exists`. This path should be replaced with the actual output obtained from the `which podman` command to ensure the correct installation is removed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -rf path-where-podman-exists\n```\n\n----------------------------------------\n\nTITLE: System Prompt for Structured Web Search\nDESCRIPTION: A system prompt that instructs the LLM to always return search results in JSON format regardless of the user's input. This allows the application to use the raw user query without reformatting.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGive me a list of pages in the website podman-desktop.io related to the request as JSON output as an array of objects with 2 fields name and url\n```\n\n----------------------------------------\n\nTITLE: Querying Docker API with Curl over Unix Socket - Shell Session\nDESCRIPTION: This shell-session command queries the Docker API over the Unix socket to retrieve server information, filtering output with jq. Dependencies are curl, jq, and an available Docker (or compatible Podman) unix domain socket. Key parameter is the socket path ('/var/run/docker.sock'); output is the server version, useful for distinguishing Docker from Podman endpoints.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/customizing-docker-compatibility.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\ncurl -s --unix-socket /var/run/docker.sock \"http://v1.41/info\"  | jq -r .ServerVersion\n```\n\n----------------------------------------\n\nTITLE: Deleting and Recreating Podman Machine - Shell Session - Shell\nDESCRIPTION: This snippet shows how to remove an existing Podman machine (\"podman machine rm\") and immediately initialize a new one (\"podman machine init\"). Used when troubleshooting persistent machine issues, this sequence requires installed Podman CLI and deletes all associated data for the machine being removed. The new machine is created with default parameters, but custom names or options can be added if necessary.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine rm\n$ podman machine init\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop using Chocolatey package manager\nDESCRIPTION: Command to install Podman Desktop using the Chocolatey package manager for Windows.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/windows-install/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n> choco install podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Setting up postStart Command Hook\nDESCRIPTION: Defines a script to run after the DevContainer starts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"postStartCommand\": \"${containerWorkspaceFolder}/.devcontainer/postStartCommand.sh\",\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman Lima Instance Connection - Shell\nDESCRIPTION: Confirms the operational status of a running 'podman' Lima instance by querying its version through the podman.lima wrapper. Expects that 'podman.lima' command is available and that the instance is started. The output displays the installed Podman version; errors indicate misconfiguration or non-running instance.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman.lima version\n```\n\n----------------------------------------\n\nTITLE: Building Podman Desktop in onCreate Script\nDESCRIPTION: Script that runs when the DevContainer is created to install dependencies and build Podman Desktop for Linux.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nyarn\n\nMODE=production yarn run build && yarn run electron-builder build --linux --dir --config .electron-builder.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Force Stopping Podman Machine and Killing QEMU Process\nDESCRIPTION: This shell command chain finds and forcibly kills any running QEMU processes associated with the Podman machine and then attempts to gracefully stop the Podman machine. This is a workaround for situations where a failed start leaves a lingering QEMU process, preventing subsequent starts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ ps -edf | grep qemu-system | grep -v grep | awk '{print $2}' | xargs -I{} kill -9 {}; podman machine stop\n```\n\n----------------------------------------\n\nTITLE: Updating WSL Kernel - Shell-Session\nDESCRIPTION: Updates the Windows Subsystem for Linux (WSL) kernel to the latest version. Requires administrator privileges and WSL installed. Ensures the most recent networking and virtualization fixes are present. No direct input or output, but reports progress and any possible update errors.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-windows.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n\nwsl --update\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Helper Binaries Directory in containers.conf\nDESCRIPTION: This shell snippet demonstrates how to configure the `helper_binaries_dir` setting within the `~/.config/containers/containers.conf` file on macOS. This setting tells Podman where to find necessary helper binaries like `gvproxy` and `podman-mac-helper` when using a custom installation path. Replace `/Users/user/example_directory` with the actual path containing the binaries.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[containers]\n\nhelper_binaries_dir=[\"/Users/user/example_directory\"]\n```\n\n----------------------------------------\n\nTITLE: Starting Podman Desktop in Watch Mode\nDESCRIPTION: Command to run the application in watch mode, which tracks file changes and automatically reloads the application during development.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm watch\n```\n\n----------------------------------------\n\nTITLE: Starting a rootful Docker Lima Instance - Shell\nDESCRIPTION: Initializes a Lima VM named 'docker' based on Docker's rootful template, supporting privileged container operations. This scenario fits advanced use cases where Docker needs root-level access inside the Lima-managed VM. The process requires 'lima' CLI setup and grants root user functionality in the Docker instance. Additional instance options can be appended to customize resource allocation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl start --name=docker template://docker-rootful\n```\n\n----------------------------------------\n\nTITLE: Finding Podman Machine QEMU Configuration Directory\nDESCRIPTION: This shell command uses `podman machine info` and pipes the output to `grep` to find the `MachineConfigDir` line. This reveals the directory path where the QEMU configuration files for the Podman machine are stored, which is needed for manual modification in subsequent steps.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine info | grep MachineConfigDir\n```\n\n----------------------------------------\n\nTITLE: Launching Services in postStart Script\nDESCRIPTION: Script that runs after the DevContainer starts to launch the X server, VNC, and Podman Desktop application.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\n# Start all services\n/usr/bin/supervisord -c /etc/supervisord.conf &\n\n# wait X server to be ready or after 2mn exit\necho \"Waiting for X server to be ready\"\ntimeout 120 bash -c 'until xdpyinfo -display :0 &> /dev/null; do printf \".\"; sleep 1; done'\n\n# launch podman desktop\necho \"Launching Podman Desktop\"\ncd dist/linux-unpacked/&& ./podman-desktop &\n\n# Launch the 9000 redirect after 20 seconds\nsleep 20\nwebsockify --web=/usr/share/novnc localhost:9000 localhost:5900 &\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Electron, Podman, and VNC\nDESCRIPTION: Installs all necessary system packages for running Electron applications, Podman container engine, and setting up a VNC server with fluxbox window manager.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nRUN dnf -y update && \\\n    yum -y reinstall shadow-utils && \\\n    yum install -y git \\\n                   # dependencies for Podman Desktop\\\n                   nss \\\n                   atk \\\n                   at-spi2-atk \\\n                   cups-libs \\\n                   gtk3 \\\n                   # for remote Display\\\n                   fluxbox \\\n                   tigervnc-server \\\n                   xorg-x11-fonts-Type1 \\\n                   novnc \\\n                   supervisor \\\n                   xdpyinfo \\\n                   # for podman\\\n                   podman \\\n                   fuse-overlayfs --exclude container-selinux \\\n                   xterm && \\\n    rm -rf /var/cache /var/log/dnf* /var/log/yum.*\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Testcontainers Redis Testing - Bash\nDESCRIPTION: Installs development dependencies including Testcontainers for Node.js, Vitest for testing, the Redis module for Testcontainers, the official Redis client, and TypeScript. This command should be run in your project's root directory after initializing your npm package.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install testcontainers vitest @testcontainers/redis redis typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Testing GPU Support in macOS with Podman Container\nDESCRIPTION: Command to verify GPU support is properly enabled in macOS by running a container with device passthrough to access the GPU. This example uses the vulkaninfo utility to display information about the available GPU.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-08-08-release-1.12.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ podman run --rm -it --device /dev/dri --name gpu-info quay.io/slopezpa/fedora-vgpu vulkaninfo | grep \"GPU\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Podman Machine on macOS\nDESCRIPTION: These shell commands first remove the default Podman machine (`podman-machine-default`) and then initialize a new one. This is often used as a troubleshooting step to resolve issues with a corrupted or misconfigured virtual machine, particularly after resolving underlying problems like brew installation conflicts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine rm podman-machine-default\n$ podman machine init\n```\n\n----------------------------------------\n\nTITLE: Modifying Compose YAML for Scaling Application (YAML)\nDESCRIPTION: This snippet provides an expanded Compose YAML configuration defining multiple Redis replicas and a web service. Dependencies include a Compose-compatible orchestrator (docker-compose or podman-compose) and container images for Redis and the web component. Key parameters are the service definitions, image references, container names, network ports, and custom commands for Redis replicas. Input is this YAML file; output is the deployment of multiple Redis replicas suitable for scaling scenarios. Limitations: The Compose orchestrator must support the defined version and directives; ensure images exist at build or pull time.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/getting-started-with-compose.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  redis-leader:\n    container_name: redis-leader\n    image: redis:latest\n    ports:\n      - '6379'\n\n  redis-replica:\n    container_name: redis-replica\n    image: redis:latest\n    ports:\n      - '6379'\n    command: redis-server --replicaof redis-leader 6379\n\n  redis-replica-2:\n    container_name: redis-replica-2\n    image: redis:latest\n    ports:\n      - '6379'\n    command: redis-server --replicaof redis-leader 6379\n\n  web:\n    container_name: web\n    build: ./web\n    ports:\n      - '8080:8080'\n```\n\n----------------------------------------\n\nTITLE: Displaying QEMU Accelerator Error on Apple Silicon\nDESCRIPTION: This shell session output shows a common error encountered when trying to start a Podman machine on Apple Silicon with a misconfigured Homebrew setup (dual x86_64/arm64 installs). The error indicates QEMU is trying to run an x86_64 process using the incorrect hypervisor (`hvf`) or cannot find the 'host' CPU model.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\nError: qemu exited unexpectedly with exit code 1, stderr: qemu-system-x86_64: invalid accelerator hvf\nqemu-system-x86_64: falling back to tcg\nqemu-system-x86_64: unable to find CPU model 'host'\n```\n\n----------------------------------------\n\nTITLE: Starting a rootless Docker Lima Instance - Shell\nDESCRIPTION: Starts a new Lima VM instance called 'docker' configured with the rootless Docker template. Users must have 'lima' installed and be on a supported OS. This command provisions a VM suitable for standard, non-root Docker workloads. Resource allocation adheres to template defaults unless extra parameters are supplied.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl start --name=docker template://docker\n```\n\n----------------------------------------\n\nTITLE: Rolling Back QEMU Brew Package to v8.0.3\nDESCRIPTION: This sequence of shell commands provides a workaround for issues with QEMU v8.1.0 installed via Homebrew causing Podman machine start failures (like `HV_DENIED`). It first uninstalls the current QEMU, downloads the formula file for v8.0.3, and then installs that specific version.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew uninstall qemu\n$ curl -OSL https://raw.githubusercontent.com/Homebrew/homebrew-core/dc0669eca9479e9eeb495397ba3a7480aaa45c2e/Formula/qemu.rb\n$ brew install ./qemu.rb\n```\n\n----------------------------------------\n\nTITLE: Launching Website Rendering with Yarn in Shell\nDESCRIPTION: This shell snippet initiates the website rendering process by printing a launch message, switching to the 'website' directory, and starting the development server with 'yarn start'. Required dependencies include Node.js, Yarn, and the website source files. The script expects the 'website' folder to exist in the current working directory and will start the development server which listens on the appropriate port for further configuration.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# launch the website rendering\\necho \\\"Launching Website\\\"\\ncd website && yarn start\n```\n\n----------------------------------------\n\nTITLE: Removing Podman Installed via macOS Installer\nDESCRIPTION: This shell command removes the directory where the Podman macOS installer typically places its files (`/opt/podman`). This is part of a cleaning process, often used before reinstalling or when troubleshooting conflicts between different Podman installations (e.g., installer vs. Homebrew).\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo rm -rf opt/podman\n```\n\n----------------------------------------\n\nTITLE: Example Shell Command for Container Interaction\nDESCRIPTION: Demonstrates a basic shell command (`ls -al`) that can be executed within a container's terminal accessed via Podman Desktop. This command lists all files and directories, including hidden ones, in the current working directory inside the container. It serves as an example of interacting with the container's filesystem.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/accessing-the-terminal.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nls -al\n```\n\n----------------------------------------\n\nTITLE: Setting up onCreate Command Hook\nDESCRIPTION: Defines a script to run when the DevContainer is created.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"onCreateCommand\": \"${containerWorkspaceFolder}/.devcontainer/onCreateCommand.sh\",\n```\n\n----------------------------------------\n\nTITLE: Running Compose File with Podman\nDESCRIPTION: Command to run a Compose file using Podman. It uses the 'up' command with the '--detach' flag to start the containers in the background.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/running-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman compose --file compose.yaml up --detach\n```\n\n----------------------------------------\n\nTITLE: Applying OCI Metadata Labels in Dockerfile for Podman Desktop Extension\nDESCRIPTION: Adds mandatory OCI image labels required by Podman Desktop. These labels include the extension's title, description, vendor, and the minimum required Podman Desktop API version (`io.podman-desktop.api.version`).\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/publish/index.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL org.opencontainers.image.title=\"My extension\" \\\n      org.opencontainers.image.description=\"Example of extension\" \\\n      org.opencontainers.image.vendor=\"podman-desktop\" \\\n      io.podman-desktop.api.version=\">= 0.12.0\"\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Socket Status with systemctl --user - Shell\nDESCRIPTION: This snippet checks the status of the podman.socket as a user service via systemctl. The --user flag ensures the status of the user's own podman.socket is queried. It reports whether the socket is active and available for remote control. The command requires systemd and appropriate permissions on the host.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ systemctl status --user podman.socket\\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Installation Path\nDESCRIPTION: This shell command uses `which podman` to determine the exact installation path of the Podman executable on the system. This is useful for troubleshooting when multiple installation methods (e.g., installer vs. Homebrew) might have placed the engine in different locations, or when needing the path for uninstallation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwhich podman\n```\n\n----------------------------------------\n\nTITLE: Starting a rootful Podman Lima Instance - Shell\nDESCRIPTION: Creates a Lima instance named 'podman' with rootful Podman by leveraging the 'podman-rootful' template. Prerequisites include a working 'lima' CLI setup on Linux or macOS. This enables privileged (root) operations inside the Lima VM, suitable for workloads that require elevated permissions such as running Kind. The command uses default configuration unless additional flags are specified.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl start --name=podman template://podman-rootful\n```\n\n----------------------------------------\n\nTITLE: Stopping Podman Machine - Shell-Session\nDESCRIPTION: Demonstrates stopping a Podman Machine using the Podman CLI. Requires Podman to be installed on Windows. The main parameter is the podman machine name (default used here). The command is expected to stop the running Podman virtual machine; errors are shown if the operation fails.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n\n$ podman machine stop\n\n```\n\n----------------------------------------\n\nTITLE: Adding VS Code Extensions for Development\nDESCRIPTION: Includes Svelte and Tailwind CSS extensions for the DevContainer workspace.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": [\"svelte.svelte-vscode\", \"bradlc.vscode-tailwindcss\"]\n```\n\n----------------------------------------\n\nTITLE: Installing C/C++ Compiler on Ubuntu/Debian\nDESCRIPTION: Command to install the GNU C and C++ compiler on Ubuntu/Debian Linux distributions, which is an optional requirement for development.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\napt-get install build-essential\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Podman Engine Proxy Settings\nDESCRIPTION: TOML configuration for setting proxy environment variables for the Podman engine on Linux systems.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[engine]\nenv = [\"http_proxy=<your.proxy.tld:port>\", \"https_proxy=<your.proxy.tld:port>\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Compose Help Information\nDESCRIPTION: Command to display help information for Podman Compose, showing available options and subcommands.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/running-compose.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman compose --help\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Icons in Podman Desktop Extension JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to register a custom icon for a Podman Desktop extension. It defines an icon named 'kind-icon' with its description, font path, and character code.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/adding-icons.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"icons\": {\n  \"kind-icon\": {\n    \"description\": \"Kind icon\",\n    \"default\": {\n      \"fontPath\": \"kind-icon.woff2\",\n      \"fontCharacter\": \"\\\\EA01\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Compose Extension for Podman Desktop in Markdown\nDESCRIPTION: This Markdown snippet provides a brief explanation of the Compose Extension's purpose in Podman Desktop. It states that the extension is responsible for setting up the compose binary to enable 'podman compose' commands.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/extensions/compose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Compose Extension\n\nThe Compose Extension allows to setup compose binary so `podman compose` commands can work.\n```\n\n----------------------------------------\n\nTITLE: Creating a Lima Instance via limactl (Shell-Session)\nDESCRIPTION: Demonstrates how to create a new Lima instance using the limactl CLI. Requires Lima to be installed on the host. Replace <instance> with your desired instance name. The command initializes a new instance with default or user-specified settings.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl create <instance>\n```\n\n----------------------------------------\n\nTITLE: Listing WSL Distributions - Shell-Session\nDESCRIPTION: Lists all active Windows Subsystem for Linux (WSL) distributions on the system via the terminal. Requires WSL to be installed. Displays distribution names, which are essential for managing or unregistering Podman-related VMs.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n\n$ wsl --list\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Podman Configuration Files\nDESCRIPTION: Downloads and adds default Podman configuration files from the official repository.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\n# initialize conf files\nADD https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable/containers.conf /etc/containers/containers.conf\nADD https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable/podman-containers.conf /home/podman-desktop/.config/containers/containers.conf\n```\n\n----------------------------------------\n\nTITLE: Installing bzip2 via Brew\nDESCRIPTION: This shell command uses Homebrew to install the `bzip2` utility. This is listed as a prerequisite step in the workaround for Podman machine startup issues on M3 processors, likely needed for handling compressed files in subsequent steps.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew install bzip2\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Machines - Shell Session - Shell\nDESCRIPTION: This snippet lists all Podman machines available on the system using \"podman machine list\". It requires at least Podman 4.1.0 and a working Podman installation. The output enumerates machine names, statuses, and other details, useful for verifying running machines or diagnosing accessibility problems.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine list\n```\n\n----------------------------------------\n\nTITLE: Finding Podman Pipe Path on Windows using Shell\nDESCRIPTION: Uses the `podman machine inspect` command with a Go template format string to extract the specific path of the named pipe used for communication with the Podman machine on Windows. This path is required for setting the DOCKER_HOST variable.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine inspect --format '{{.ConnectionInfo.PodmanPipe.Path}}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Podman Machine Shell\nDESCRIPTION: Command to open a shell prompt on the Podman machine for configuration purposes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine ssh\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Pod Manifest in YAML\nDESCRIPTION: This YAML manifest defines a simple Kubernetes Pod resource intended for verifying an image pushed to Minikube. The Pod, named `<verify-my-image>`, runs a single container named `<my-image>` using the image `<my_image>:<my_tag>`. The `imagePullPolicy: Never` setting ensures Kubernetes uses the locally available image within the Minikube environment instead of pulling from an external registry. Placeholders for names and image tag must be replaced before use. This file can be applied using Podman Desktop's 'Play Kubernetes YAML' feature.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/pushing-an-image-to-minikube.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: <verify-my-image>\nspec:\n  containers:\n    - name: <my-image>\n      image: <my_image>:<my_tag>\n      imagePullPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Icons for Containers in Podman Desktop (JSON)\nDESCRIPTION: This snippet demonstrates how to use a when clause to add a custom icon to a container based on its label in Podman Desktop. It utilizes the 'containerLabelKeys' context and the 'in' operator.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/when-clause-context.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"views\": {\n   \"icons/containersList\": [\n     {\n       \"when\": \"io.x-k8s.kind.cluster in containerLabelKeys\",\n       \"icon\": \"${kind-icon}\"\n     }\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Remote Podman Connection - Shell\nDESCRIPTION: This snippet sets the specified remote Podman connection as the default for podman CLI operations using podman system connection default. Once set, the podman client will target that remote connection for subsequent commands, unless overridden. Requires a pre-configured connection and podman installed locally.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ podman system connection default my-remote-machine\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpak Dependencies on Linux\nDESCRIPTION: Commands to install Flatpak builder, runtime, and SDK version 24.08, which are optional requirements for Linux development.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflatpak remote-add --if-not-exists flathub --user https://flathub.org/repo/flathub.flatpakrepo\nflatpak install --user flathub org.flatpak.Builder org.freedesktop.Platform//24.08 org.freedesktop.Sdk//24.08\n```\n\n----------------------------------------\n\nTITLE: Editing a Lima Instance via limactl (Shell-Session)\nDESCRIPTION: Shows how to edit an existing Lima instance configuration using limactl. Requires Lima to be installed and configured. Substitute <instance> with the specific instance name to modify its settings or resources as needed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ limactl edit <instance>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Podman Connection using Shell\nDESCRIPTION: This command sets the specified Podman connection (e.g., 'podman-machine-default-root') as the default connection. Tools like Podman Desktop will use this default connection. Requires Podman and the specified connection name to exist. The final argument is the name of the connection to set as default.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/setting-podman-machine-default-connection.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system connection default podman-machine-default-root\n```\n\n----------------------------------------\n\nTITLE: Implementing Rust Hello World Program\nDESCRIPTION: This Rust program prints a multi-line ASCII art greeting message using a raw string literal. It includes information about the Podman project.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nfn main() {\n\n  // use of strings literal for multi-line string\n  // https://doc.rust-lang.org/reference/tokens.html#raw-string-literals\n\n  // ascii art from Máirín Duffy @mairin\n  let hello = r#\"\n!... Hello Podman Wasm World ...!\n\n         .--\"--.       / -     - \\      / (O)   (O) \\   ~~~| -=(,Y,)=- |    .---. /`  \\   |~~ ~/  o  o \\~~~~.----. ~~  | =(X)= |~  / (O (O) \\   ~~~~~~~  ~| =(Y_)=-  |  ~~~~    ~~~|   U      |~~\n\nProject:   https://github.com/containers/podman\nWebsite:   https://podman.io\nDocuments: https://docs.podman.io\nTwitter:   @Podman_io\n\"#;\n  println!(\"{}\", hello);\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Using ReactPlayer for Compose Features Demo\nDESCRIPTION: Embeds a video player showing the new Compose management features (start/stop/delete/restart) for container groups in Podman Desktop.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-07-12-release-1.2.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/6422176/253331226-d80e7637-c223-4bb8-8675-1dcb8d48818f.mov\" width='100%' height='100%' />\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Podman Desktop Extension Configuration\nDESCRIPTION: This snippet provides a JSON schema for defining configuration properties in a Podman Desktop extension. It includes various property types and their attributes such as type, default value, format, range limits, description, scope, and visibility options.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/config.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"configuration\": {\n      \"title\": \"string\",\n      \"properties\": {\n        \"string\": {\n          \"type\": \"string\",\n          \"default\": \"integer if type is integer, string if type is string, etc.\",\n          \"format\": \"string\",\n          \"minimum\": \"string or int\",\n          \"maximum\": \"string or int\",\n          \"description\": \"string\",\n          \"scope\": \"string or array, ex. ['DEFAULT', 'ONBOARDING']\",\n          \"hidden\": \"boolean\",\n          \"placeholder\": \"string\",\n          \"markdownDescription\": \"string\",\n          \"readonly\": \"boolean\",\n          \"enum\": \"array\",\n          \"step\": \"number\",\n          \"when\": \"string\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Context with kubectl CLI - shell-session\nDESCRIPTION: This snippet demonstrates how to use the kubectl command-line tool to check the currently active Kubernetes context. It requires kubectl to be installed and properly configured on the host machine. Running the command outputs the name of the current context, which should match 'minikube' if the steps in the guide have been followed. The snippet aids users in verifying correct environment setup for local Kubernetes cluster access.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/working-with-your-local-minikube-cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl config current-context\n```\n\n----------------------------------------\n\nTITLE: Exposing Podman Socket with portForwards (YAML)\nDESCRIPTION: Shows how to forward the Podman socket from the Lima VM guest to the host for external container engine access. guestSocket and hostSocket specify Unix domain socket paths. Useful for running Podman clients on the host that access the engine in the VM.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nportForwards:\n  - guestSocket: '/run/podman/podman.sock'\n    hostSocket: '{{.Dir}}/sock/podman.sock'\n```\n\n----------------------------------------\n\nTITLE: Using ReactPlayer for Kubernetes Context Demo\nDESCRIPTION: Embeds a video player demonstrating the Kubernetes context selection feature from the status bar in Podman Desktop.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-07-12-release-1.2.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/19958075/243804525-242b02b4-fc3c-415b-be08-24eb1933adc5.mov\" width='100%' height='100%' />\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Lima Instance Connection - Shell\nDESCRIPTION: Checks that the 'docker' Lima instance is running by displaying the Docker version using the docker.lima command. This assumes the Lima-managed VM for Docker is operational and the respective wrapper is invoked from the host. Any connection errors can signal instance or network issues.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/creating-a-lima-instance.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ docker.lima version\n```\n\n----------------------------------------\n\nTITLE: Restarting Podman Machine using Shell\nDESCRIPTION: These commands stop the currently running Podman machine and then start it again. This restart is necessary to ensure that changes to the default connection configuration are applied correctly and recognized by Podman and associated tools like Podman Desktop. Requires a configured Podman machine.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/setting-podman-machine-default-connection.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine stop\n$ podman machine start\n```\n\n----------------------------------------\n\nTITLE: Docker Socket Not Found Error Output - Shell Session\nDESCRIPTION: This shell-session snippet shows the error output when attempting to list '/var/run/docker.sock' after Docker compatibility is disabled on macOS or Linux. The message indicates the file does not exist, which confirms Docker is not linked to Podman. No execution required—this is reference output.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/customizing-docker-compatibility.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\nls: /var/run/docker.sock: No such file or directory\n```\n\n----------------------------------------\n\nTITLE: Rendering Experimental Task Manager Preferences UI\nDESCRIPTION: ThemedImage component implementation displaying the experimental task manager preference settings with both light and dark theme variants.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\nalt=\"task manager experimental preference\"\nsources={{\n    light: require('./img/podman-desktop-release-1.15/experimental-task-manager-preference-light.png').default,\n    dark: require('./img/podman-desktop-release-1.15/experimental-task-manager-preference-dark.png').default,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Applications via Podman Engine\nDESCRIPTION: Shows how to use the `docker compose up` command (v2) with the Podman engine after installing the Compose extension in Podman Desktop. This requires placing the Docker Compose file in a working directory and enables running Compose v2 applications using Podman.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/managing-docker-compatibility.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Locally Signing Brew QEMU Binary\nDESCRIPTION: This shell session demonstrates an alternative workaround for QEMU 8.1.0 issues (`HV_DENIED`) by locally signing the QEMU binary. It first creates an entitlements file (`entitlements.xml`) granting hypervisor access, then uses `codesign` to apply this entitlement to the QEMU executable installed by Homebrew. The `uname -m` and `sed` commands dynamically determine the correct architecture (x86_64 or aarch64).\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat >entitlements.xml <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>com.apple.security.hypervisor</key>\n  <true/>\n</dict>\n</plist>\nEOF\n$ codesign --sign - --entitlements entitlements.xml --force /usr/local/bin/qemu-system-$(uname -m | sed -e s/arm64/aarch64/)\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Machine to Rootful Mode - shell-session\nDESCRIPTION: Configures the Podman machine to operate in rootful mode, which is required by Minikube for proper integration. This command needs to be run after stopping the Podman machine and requires no extra parameters aside from the rootful flag. Prints a confirmation of the mode change or an error if prerequisites are not met.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/configuring-podman-for-minikube-on-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine set --rootful\n```\n\n----------------------------------------\n\nTITLE: Copying MicroShift Kubeconfig Remotely (Shell)\nDESCRIPTION: Uses the Secure Copy Protocol (`scp`) command to securely transfer the `kubeconfig` file from a remote MicroShift instance to the local machine. It specifies the SSH port (`-P 2222`), the remote user and host (`redhat@localhost`), the source file path (`/var/lib/microshift/resources/kubeadmin/kubeconfig`), and the local destination (`~/config`). This file contains the necessary credentials and endpoint information to connect to the MicroShift cluster.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nscp -P 2222 redhat@localhost:/var/lib/microshift/resources/kubeadmin/kubeconfig ~/config\n```\n\n----------------------------------------\n\nTITLE: Listing Podman System Connections using Shell\nDESCRIPTION: This command lists all configured Podman system connections. It displays the name, URI, identity, and default status for each connection, helping users identify available connections and the current default. Requires Podman to be installed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/setting-podman-machine-default-connection.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system connection ls\n```\n\n----------------------------------------\n\nTITLE: Rendering Podman Machine SSH UI\nDESCRIPTION: ThemedImage component showing the Podman machine SSH connection interface with support for both light and dark themes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\nalt=\"task manager experimental preference\"\nsources={{\n    light: require('./img/podman-desktop-release-1.15/podman-machine-ssh-light.png').default,\n    dark: require('./img/podman-desktop-release-1.15/podman-machine-ssh-dark.png').default,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Cloning Podman Desktop Repository\nDESCRIPTION: Command to clone the Podman Desktop repository after forking it on GitHub. This is the first step in the contribution process.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<you>/podman-desktop && cd podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Accessing Apache Server on RHEL WSL Podman Machine\nDESCRIPTION: After pulling and running the httpd image on the RHEL WSL Podman machine, the Apache server can be accessed on localhost:9000.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-08-01-using-rhel-wsl-podman-machine.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Deploying Website with SSH\nDESCRIPTION: Deploys the website using SSH authentication to GitHub pages or similar hosting.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ USE_SSH=true pnpm deploy\n```\n\n----------------------------------------\n\nTITLE: Generating Podman Desktop Release Notes in Markdown\nDESCRIPTION: This snippet provides a comprehensive template for creating release notes for a new version of Podman Desktop. It includes sections for title, description, main features, release details, enhancements, bug fixes, community acknowledgments, and final notes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/RELEASE.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Release Notes - Podman Desktop X.X\ndescription: Podman Desktop X.X has been released!\nslug: podman-desktop-release-X.X\nauthors: [YOURUSERNAME]\ntags: [podman-desktop, release, kubernetes, openshift]\nhide_table_of_contents: false\n<!-- This image link is used for social media previews / thumbnails. Release images are available: https://github.com/containers/podman-desktop-internal/tree/main/release-images -->\nimage: /img/blog/podman-desktop-release-1.X/X.png\n---\n\n<!-- ADD IMPORT REACTPLAYER IF USING VIDEO -->\n<!-- import ReactPlayer from 'react-player' -->\n<!-- EXAMPLE -->\n<!-- <ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/436777/241246481-305d215f-2a5c-46e8-9cc3-ecd90a6bd2bc.mp4\" /> -->\n\nPodman Desktop X.X Release! 🎉\n\n<!-- DESCRIBE IN ONE SENTENCE WHAT THE RELEASE WAS ABOUT -->\n\n<!-- DESCRIBE MAIN FEATURES IN BULLET FORM -->\n\n<!-- EXAMPLE -->\n<!-- - **Podman 4.5.1**: Podman 4.5.1 now included in Windows and Mac installers. -->\n\nPodman Desktop X.X is now available. [Click here to download it](/downloads)!\n\n<!-- IDEALLY, ADD CARTOON SELKIE FOR RELEASE -->\n\n<!-- EXAMPLE -->\n<!-- Release images are available: https://github.com/containers/podman-desktop-internal/tree/main/release-images -->\n<!-- ![Podman-desktop-1-1-hero](img/podman-desktop-release-1.1/podman-desktop-release-1.1.png) -->\n\n---\n\n## Release details\n\n<!-- DESCRIBE MAJOR CHANGES, INCLUDE IMAGES / VIDEO IF APPLICABLE -->\n\n<!-- EXAMPLE -->\n<!-- ### Podman v4.5.1 -->\n<!-- Podman Desktop 1.1 moves up to [Podman 4.5.1](https://github.com/containers/podman/releases/tag/v4.5.1). -->\n\n<!-- WHEN DESCRIBING NAVBAR SECTIONS, INCLUDE ICON -->\n<!-- EXAMPLE -->\n<!-- We've also added options in **<icon icon=\"fa-solid fa-cog\" size=\"lg\" />Settings > Preferences** to automatically check for and install extension updates. -->\n\n---\n\n## Other notable enhancements\n\n<!-- CATCHALL SECTION FOR MINOR ENHANCEMENTS -- >\n<!-- USE BULLET POINTS -->\n<!-- EXAMPLE -->\n<!-- - Show warning when creating a pod with two containers that use the same port [#2671](https://github.com/containers/podman-desktop/pull/2671). -->\n\n---\n\n## Notable bug fixes\n\n<!-- CATCHALL SECTION FOR BUG FIXES -- >\n<!-- USE BULLET POINTS -->\n<!-- EXAMPLE -->\n<!-- - Could not install extensions on Windows 10 [#2762](https://github.com/containers/podman-desktop/pull/2762). -->\n\n---\n\n## Community thank you\n\n🎉 We'd like to say a big thank you to everyone who helped to make Podman Desktop even better. In this\nrelease we received pull requests from the following people:\n\n<!-- INCLUDE SHOUTOUTS TO OUTSIDE CONTRIBUTORS -->\n<!-- EXAMPLE -->\n<!-- - [AsciiWolf](https://github.com/AsciiWolf) in [#2607 - fix typing error in Flathub name](https://github.com/containers/podman-desktop/pull/2607) and [#2609 - fix Flatpak install instructions](https://github.com/containers/podman-desktop/pull/2609) -->\n\n---\n\n## Final notes\n\n<!-- EDIT BELOW VERSION NUMBERS! -->\nThe complete list of issues fixed in this release is available [here](https://github.com/containers/podman-desktop/issues?q=is%3Aclosed+milestone%3AX.X.0) and [here](https://github.com/containers/podman-desktop/issues?q=is%3Aclosed+milestone%3AX.X.0).\n\nGet the latest release from the [Downloads](/downloads) section of the website and boost your development journey with Podman Desktop. Additionally, visit the [GitHub repository](https://github.com/containers/podman-desktop) and see how you can help us make Podman Desktop better.\n```\n\n----------------------------------------\n\nTITLE: Adding Test Script to package.json - JSON\nDESCRIPTION: Augments the package.json file to include a script for running tests with Vitest. This snippet demonstrates the appropriate format for the scripts section, ensuring that 'npm test' invokes Vitest as intended. Place within the 'scripts' block in package.json; the ellipses represent other configuration fields.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n...\n    \"scripts\": {\n    \"test\": \"vitest\"\n    },\n...\n```\n\n----------------------------------------\n\nTITLE: Running Wasm OCI Images with Podman\nDESCRIPTION: Command to run a WebAssembly workload packaged as an OCI container image using Podman with the wasi/wasm platform flag.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman run --platform wasi/wasm quay.io/podman-desktop-demo/wasm-rust-hello-world\n```\n\n----------------------------------------\n\nTITLE: Stopping Podman Machine with Shell Commands - shell-session\nDESCRIPTION: Stops the currently running Podman machine, preparing it for configuration changes. No external dependencies are required beyond Podman being installed. The command requires that a Podman machine is already running. Outputs a confirmation message when the machine is stopped.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/configuring-podman-for-minikube-on-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine stop\n```\n\n----------------------------------------\n\nTITLE: Global Override of Lima Default Configuration (YAML)\nDESCRIPTION: Explains how to globally override Lima builtin defaults by creating a $LIMA_HOME/_config/default.yaml file. This file changes resource and behavioral defaults for all instances under the user's Lima home directory. Also describes precedence using $LIMA_HOME/_config/override.yaml for further override.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# The builtin defaults can be changed globally by creating a $LIMA_HOME/_config/default.yaml\n# file. It will be used by ALL instances under the same $LIMA_HOME, and it\n# will be applied on each `limactl start`, so can affect instance restarts.\n\n# A similar mechanism is $LIMA_HOME/_config/override.yaml, which will take\n# precedence even over the settings in an instances lima.yaml file.\n# It too applies to ALL instances under the same $LIMA_HOME, and is applied\n# on each restart. It can be used to globally override settings, e.g. make\n# the mount of the home directory writable.\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Announcement for Podman Desktop Release in Markdown\nDESCRIPTION: This snippet provides a template for creating an announcement in GitHub discussions for a new Podman Desktop release. It includes links to the release, download section, release notes, and full changelog.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/RELEASE.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHello,\n\nA new release of Podman Desktop is out: [v0.11.0](https://github.com/containers/podman-desktop/milestone/12?closed=1)\n\nDownload it from the [download section](https://podman-desktop.io/downloads) of the [Podman Desktop website](https://podman-desktop.io/)\n\nRelease Notes are available at https://podman-desktop.io/blog/podman-desktop-release-0.11\n\nFull Changelog is available at https://github.com/containers/podman-desktop/releases/tag/v0.11.0\n```\n\n----------------------------------------\n\nTITLE: Accessing AI Model Inference Server with cURL\nDESCRIPTION: Example cURL command to interact with the AI model inference server. This snippet demonstrates how to send a request to the inference server once it's running.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/ai-lab/start-inference-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n  \"model\": \"mistral-7b-instruct-v0.1.Q4_K_M\",\n  \"messages\": [{\n    \"role\": \"user\",\n    \"content\": \"What is the capital of France?\"\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Listing CRI-O Images\nDESCRIPTION: This command lists images available to CRI-O within the Minikube container.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncrictl images\n```\n\n----------------------------------------\n\nTITLE: Structured Error Object for Telemetry Logging\nDESCRIPTION: Example of the recommended structure for error objects when calling logUsage() after external command failures. Includes standard properties like message, statusCode for HTTP calls, and exitCode for processes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/USAGE_DATA.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nerror {\n  message: string,\n  statusCode: number, // for HTTP calls\n  exitCode: number, // for processes\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown\nDESCRIPTION: This code snippet imports the ReactPlayer component, likely used for embedding video content in the release notes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-05-02-release-0.15.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Metadata in package.json\nDESCRIPTION: Specifies essential metadata for the Podman Desktop extension in `package.json`. Includes the extension's internal `name`, user-facing `displayName`, `description`, `version`, `icon` file, and `publisher` identifier.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"name\": \"my-extension\",\n  \"displayName\": \"My Hello World extension\",\n  \"description\": \"How to write my first extension\",\n  \"version\": \"0.0.1\",\n  \"icon\": \"icon.png\",\n  \"publisher\": \"benoitf\",\n```\n\n----------------------------------------\n\nTITLE: Running Extension E2E Tests\nDESCRIPTION: Command to run only the extension-related end-to-end tests.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:e2e:extension\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop silently using Windows Command Prompt\nDESCRIPTION: Command to install Podman Desktop without user interaction using the silent flag '/S' from the Command Prompt.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/windows-install/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> podman-desktop-1.6.4-setup-x64.exe /S\n```\n\n----------------------------------------\n\nTITLE: Copying and Configuring OpenShift Pull Secret\nDESCRIPTION: Commands to transfer the OpenShift pull secret to the virtual machine and configure it for MicroShift. This allows MicroShift to authenticate with Red Hat registries to download container images.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ scp -P 2222 pull-secret.txt redhat@localhost:~/\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ ssh redhat@localhost -p 2222\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo mv pull-secret.txt /etc/crio/openshift-pull-secret\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo systemctl restart microshift\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Context for Podman on macOS using Shell\nDESCRIPTION: Demonstrates an alternative to using DOCKER_HOST by creating a Docker context named 'podman'. This context explicitly points the Docker CLI to the Podman socket location on macOS. The `${HOME}` variable represents the user's home directory.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n`docker context create podman --docker \"host=unix://${HOME}/.local/share/containers/podman/machine/podman.sock\"`\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compatibility Script for Podman\nDESCRIPTION: Instructions to create a script named 'docker' that calls the podman CLI, enabling compatibility with scripts that rely on the docker command. This approach is necessary because shell aliases won't work inside scripts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-03-24-5-things-to-know-for-a-docker-user.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nalias docker=podman\n```\n\n----------------------------------------\n\nTITLE: Initializing Dapr with Podman Container Runtime\nDESCRIPTION: This command initializes Dapr using Podman as the container runtime. It's executed after installing the Dapr CLI to set up Dapr for use with Podman.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-16-cncf-projects.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dapr init --container-runtime podman\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Build Process (vite.config.js) in JavaScript\nDESCRIPTION: Sets up the Vite configuration in `vite.config.js` for building the Podman Desktop extension. It defines the build mode, root directory, aliases, output directory (`dist`), target format (`cjs`), entry point (`src/extension.ts`), external dependencies (`@podman-desktop/api`, Node.js built-ins), and other build options like minification and source maps. Requires `path` and `module` Node.js modules.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/**********************************************************************\n * Copyright (C) 2023 Red Hat, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n ***********************************************************************/\n\nimport { join } from 'path';\nimport { builtinModules } from 'module';\n\nconst PACKAGE_ROOT = __dirname;\n\n/**\n * @type {import('vite').UserConfig}\n * @see https://vitejs.dev/config/\n */\nconst config = {\n  mode: process.env.MODE,\n  root: PACKAGE_ROOT,\n  envDir: process.cwd(),\n  resolve: {\n    alias: {\n      '/@/': join(PACKAGE_ROOT, 'src') + '/',\n    },\n  },\n  build: {\n    sourcemap: 'inline',\n    target: 'esnext',\n    outDir: 'dist',\n    assetsDir: '.',\n    minify: process.env.MODE === 'production' ? 'esbuild' : false,\n    lib: {\n      entry: 'src/extension.ts',\n      formats: ['cjs'],\n    },\n    rollupOptions: {\n      external: ['@podman-desktop/api', ...builtinModules.flatMap(p => [p, `node:${p}`])],\n      output: {\n        entryFileNames: '[name].js',\n      },\n    },\n    emptyOutDir: true,\n    reportCompressedSize: false,\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing C/C++ Compiler on Fedora/RHEL\nDESCRIPTION: Command to install the GNU C and C++ compiler on Fedora/RHEL Linux distributions, which is an optional requirement for development.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndnf install gcc-c++\n```\n\n----------------------------------------\n\nTITLE: Containerfile for Patched MESA Vulkan Driver on macOS - Dockerfile - Dockerfile\nDESCRIPTION: This Containerfile (Dockerfile) sets up a Fedora-based container with a patched MESA Vulkan driver, needed for accessing virtualized GPU functions on macOS Silicon via libkrun and MoltenVK. Dependencies include Fedora 40, dnf, and copr configuration for mesa-krunkit. Key instructions install and version-lock the downgraded mesa-vulkan-drivers, and clean the dnf cache. Should be built with Podman or Docker before use.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n```Dockerfile\\nFROM fedora:40\\nUSER 0\\n\\nRUN dnf -y install dnf-plugins-core && \\\\\\n    dnf -y install dnf-plugin-versionlock && \\\\\\n    dnf -y install mesa-vulkan-drivers vulkan-loader-devel vulkan-headers vulkan-tools vulkan-loader glslc && \\\\\\n    dnf -y copr enable slp/mesa-krunkit fedora-40-aarch64 && \\\\\\n    dnf -y downgrade mesa-vulkan-drivers.aarch64 --repo=copr:copr.fedorainfracloud.org:slp:mesa-krunkit && \\\\\\n    dnf versionlock mesa-vulkan-drivers && \\\\\\n    dnf clean all\\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for libkrun Provider in MacOS\nDESCRIPTION: Command to set an environment variable to use libkrun as the machine provider for Podman on MacOS. This is an alternative to the default Apple HyperVisor provider.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/macos-install.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CONTAINERS_MACHINE_PROVIDER=libkrun\n```\n\n----------------------------------------\n\nTITLE: Configuring Onboarding Steps with State Indicators in Podman Desktop (JSON)\nDESCRIPTION: Specifies onboarding workflow steps in JSON with explicit 'state' properties to indicate failure or successful completion. The 'state' field triggers UI changes, such as displaying a Retry button on failure or marking the workflow as completed. Inputs rely on context variables to designate when each step is shown. This configuration differentiates between failed and completed onboarding end states and should be used to improve user experience for terminal steps.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"podmanFailedInstallation\",\n    \"title\": \"Failed installing Podman\",\n    \"when\": \"onboardingContext:podmanFailedInstallation\",\n    \"state\": \"failed\"\n},\n{\n    \"id\": \"podmanSuccessfullySetup\",\n    \"title\": \"Podman successfully setup\",\n    \"when\": \"onboardingContext:podmanIsInstalled\",\n    \"state\": \"completed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Current Kubernetes Context with kubectl (Shell)\nDESCRIPTION: This shell command uses `kubectl config current-context` to display the name of the currently active Kubernetes context. It's used here to confirm that the context points to the local Kind cluster managed by Podman Desktop, typically identified by a 'kind' suffix.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/working-with-your-local-kind-cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl config current-context\n\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all project dependencies using pnpm package manager after cloning the repository.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Formatting and Lint Checking Commands for Podman Desktop Website in Shell\nDESCRIPTION: These shell commands are used for checking and fixing markdown formatting and lint issues in the Podman Desktop website codebase.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/WEBSITE_CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Markdown formatting\npnpm format:check\npnpm format:fix\n\n# Markdown lint checking\npnpm markdownlint:check\npnpm markdownlint:fix\n```\n\n----------------------------------------\n\nTITLE: Configuring libkrun Provider in containers.conf on MacOS\nDESCRIPTION: Example configuration for setting libkrun as the machine provider in the containers.conf file on MacOS. This file is typically located in the $HOME/.config/containers directory.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/macos-install.md#2025-04-23_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\n...\n[machine]\n  provider = \"libkrun\"\n...\n```\n\n----------------------------------------\n\nTITLE: Structured JSON Output Prompt for Web Search\nDESCRIPTION: An improved prompt requesting the LLM to return search results in a structured JSON format with specific fields. This enables easier processing of the results by the application.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGive me a list of pages in the website podman-desktop.io related to \"build an image\" as JSON output as an array of objects with 2 fields name and url\n```\n\n----------------------------------------\n\nTITLE: Running Podman Desktop installed via Flatpak (Shell)\nDESCRIPTION: Launches the Podman Desktop application installed via Flatpak using the `flatpak run` command followed by the application's unique ID (`io.podman_desktop.PodmanDesktop`). This command verifies that the installation was successful and starts the application.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/linux-install/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ flatpak run io.podman_desktop.PodmanDesktop\n```\n\n----------------------------------------\n\nTITLE: Setting Warning Context Value for Onboarding using Backend Data (JavaScript)\nDESCRIPTION: Shows how to construct a warning object based on runtime assessment and inject it into the onboarding context using the extension API. The code builds an array of warning items, appends new diagnostics, and then sets them for consumption by the frontend component. Dependencies include a valid 'extensionApi' context and conformity to the warning item schema. The inputs are dynamic warning results, outputting an updated onboarding context for warning display.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst warnings = [];\n...\nconst warning = {\n    state: res.successful ? 'successful' : 'failed',\n    description: res.description,\n    docDescription: res.docLinksDescription,\n    docLinks: res.docLinks,\n    command: res.fixCommand,\n};\nwarnings.push(warning);\n\nextensionApi.context.setValue('warningsMarkdown', warnings, 'onboarding');\n```\n\n----------------------------------------\n\nTITLE: Finding Podman Socket Path on Linux using Shell\nDESCRIPTION: Uses the `podman info` command with a Go template format string to extract the path of the remote Unix domain socket used by the Podman service on Linux. This path is required for setting the DOCKER_HOST variable.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman info --format '{{.Host.RemoteSocket.Path}}'\n```\n\n----------------------------------------\n\nTITLE: Saving a Podman Container to a Tar Archive\nDESCRIPTION: This command saves an existing Podman container's image layers and metadata to a specified tar archive file. This is a prerequisite step for later importing the container, potentially on a different system or after resetting Podman.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/importing-saved-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman save <your_container> > <your_container_archive>.tar\n```\n\n----------------------------------------\n\nTITLE: Updating Lock File After Module Addition\nDESCRIPTION: Updates the pnpm-lock.yaml file in the repository root after adding a new module to the website context.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cd ..\n$ git checkout HEAD -- pnpm-lock.yaml\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the blog post defining metadata like title, description, authors, and tags\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-10-31-release-1.14.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Podman Desktop 1.14 Release\ndescription: Podman Desktop 1.14 has been released!\nslug: podman-desktop-release-1.14\nauthors: [gastoner]\ntags: [podman-desktop, release, kubernetes]\nhide_table_of_contents: false\nimage: /img/blog/podman-desktop-release-1.14/banner.png\n---\n```\n\n----------------------------------------\n\nTITLE: Activating Extension and Using New Namespace API - TypeScript\nDESCRIPTION: Shows how to use the new 'foobar.hello' API from within the extension's activation function. It defines a new provider and registers it with the core. The 'foobar.hello' method is then called, outputting to the console. This requires the extensionApi context to be available and the previous steps to be completed so the method exists on the API. The key input is a string ('world'). The function is asynchronous and returns void.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function activate(extensionContext: extensionApi.ExtensionContext): Promise<void> {\n  // Define the provider\n  const provider = extensionApi.provider.createProvider({\n    name: 'FooBar',\n    id: 'foobar',\n    status: 'unknown',\n    images: {\n      icon: './icon.png',\n      logo: './icon.png',\n    },\n  });\n\n  // Push the new provider to Podman Desktop\n  extensionContext.subscriptions.push(provider);\n\n  // Call the \"hello world\" function that'll output to the console\n  extensionContext.foobar.hello('world');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Podman Desktop from Flathub using Flatpak (Shell)\nDESCRIPTION: Updates the Podman Desktop application installed via Flatpak to the latest version available in the Flathub repository using the `flatpak update` command with the `--user` flag and the application ID. This keeps the application up-to-date with the latest features and security patches.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/linux-install/index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ flatpak update --user io.podman_desktop.PodmanDesktop\n```\n\n----------------------------------------\n\nTITLE: Rendering Warning List from Context Value in Onboarding Content (JSON, JavaScript)\nDESCRIPTION: Illustrates dynamic population of onboarding warnings by injecting a context-bound variable into the warning Markdown component. At runtime, '${onboardingContext:warningsMarkdown}' is replaced with context data prepared in the backend. The JavaScript portion builds individual warning objects and updates the context. Inputs are diagnostic results and outputs are the warnings list rendered in the UI. Requires context management support in extension API.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"value\": \":warnings[${onboardingContext:warningsMarkdown}]\"\n```\n\n----------------------------------------\n\nTITLE: Relaunching Application After Scaling (Shell)\nDESCRIPTION: This snippet reruns 'podman compose up -d' after modifying the Compose YAML, verifying that new and existing containers start with updated configuration. Dependencies remain as before with the shell environment, Podman, and a proper Compose provider. Input is the explicit command, output is the status display indicating that four containers—including the new replica—are running. This final step confirms changes are active and the scaling is successful.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/getting-started-with-compose.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npodman compose up -d\n>>>> Executing external compose provider \"/usr/local/bin/docker-compose\". Please refer to the documentation for details. <<<<\n\n[+] Running 4/4\n✔ Container redis-replica-2  Started                                                                      0.0s\n✔ Container redis-leader     Running                                                                      0.0s\n✔ Container web              Started                                                                      0.0s\n✔ Container redis-replica    Running                                                                      0.0s\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Module to Website\nDESCRIPTION: Two-step process for adding a Node.js module to the website context and updating the lock file in the repository root.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cd website\n$ pnpm add <module>\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown\nDESCRIPTION: Importing the ReactPlayer component from the react-player library for embedding videos in the blog post.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-05-17-release-1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Run Fedora-based GPU Info Container - Shell - sh\nDESCRIPTION: This shell command runs a Fedora-based container built for GPU info on macOS with the proper device mapping, outputs Vulkan-detected GPU ids using vulkaninfo piped to grep. Assumes the image is built from the supplied Containerfile, the host has Podman with libkrun support, and the proper /dev/dri is available. Outputs filtered GPU information for validation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$  podman run --rm -it --device /dev/dri --name gpu-info <gpu-container-image>  vulkaninfo | grep \\\"GPU\\\"\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining activate Function with ExtensionContext in TypeScript\nDESCRIPTION: Defines the asynchronous `activate` function signature including the `extensionContext` parameter of type `podmanDesktopAPI.ExtensionContext`. This context provides access to extension-specific utilities, like managing disposable resources.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function activate(extensionContext: podmanDesktopAPI.ExtensionContext): Promise<void> {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Images in Docusaurus\nDESCRIPTION: Example of using ThemedImage component to display different images for light and dark themes, showing the Feedback Form interface.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\nalt=\"Feedback Form\"\nsources={{\n    light: require('./img/podman-desktop-release-1.15/feedback-form-light.png').default,\n    dark: require('./img/podman-desktop-release-1.15/feedback-form-dark.png').default,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Reporting Console Errors in Compose Authentication - Console\nDESCRIPTION: Shows sample error messages related to missing credential helpers and denied resource access encountered when using Compose. No external dependencies are needed to generate these errors, but resolving them may require updating configuration files or ensuring proper binaries are installed. The expected input is a Compose operation; the output is the corresponding authentication error, aiding in diagnosing Compose-related authentication problems.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/compose/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker.credentials.errors.InitializationError: docker-credential-desktop not installed or not available in PATH\n```\n\n----------------------------------------\n\nTITLE: Configure Host KUBECONFIG for k3s Cluster (Bash)\nDESCRIPTION: Sets the KUBECONFIG environment variable on the host to the path containing the k3s yaml copied from the Lima guest. Utilizes variable substitution for {{.Dir}}. Enables host-side kubectl and other tools to interact with the Kubernetes cluster managed inside the instance.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=\"{{.Dir}}/copied-from-guest/kubeconfig.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Listing Images in Minikube via CLI\nDESCRIPTION: This command uses the Minikube CLI to list all container images that have been loaded into the local Minikube cluster's environment. It serves as a verification step to confirm that an image push from Podman Desktop was successful. Requires Minikube to be installed and the corresponding cluster to be running.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/pushing-an-image-to-minikube.md#2025-04-23_snippet_0\n\nLANGUAGE: command\nCODE:\n```\n$ minikube image list\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Images\nDESCRIPTION: This command displays all images available in the Podman environment.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npodman images\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Release Workflow Command\nDESCRIPTION: Command to check PR list for a specific milestone using GitHub CLI, which is useful when creating release notes. This retrieves the list of merged PRs with their titles, numbers, and URLs for inclusion in release documentation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh pr list --limit 300 --repo \"containers/podman-desktop\" --search \"state:closed milestone:1.9.0\" --json title,number,url --template '{{range .}}- {{.title}} [#{{.number}}]({{.url}}){{\"\\n\"}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Rendering Experimental Task Manager UI\nDESCRIPTION: ThemedImage component showing the experimental task manager interface in both light and dark themes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\nalt=\"task manager experimental preference\"\nsources={{\n    light: require('./img/podman-desktop-release-1.15/experimental-task-manager-opened-light.png').default,\n    dark: require('./img/podman-desktop-release-1.15/experimental-task-manager-opened-dark.png').default,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Onboarding Content Cell Entry (JSON)\nDESCRIPTION: Defines the JSON schema for a 'content' cell in onboarding layouts, specifying required and optional properties. Dependencies include use by the onboarding UI renderer and conformance to the schema validator. Required properties include 'value', while 'highlight' and 'when' are optional and allow UI customization. Inputs must match the specified structure to be accepted by the system. Constraints include mandatory 'value' and optional conditional rendering with 'when'.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"type\": \"object\",\n\"properties\": {\n    \"value\": {\n        \"type\": \"string\"\n    },\n    \"highlight\": {\n        \"type\": \"boolean\"\n    },\n    \"when\": {\n        \"type\": \"string\"\n    }\n},\n\"required\": [\"value\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Kubernetes Node Events UI\nDESCRIPTION: ThemedImage component showing the Kubernetes node events interface with support for both light and dark themes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\nalt=\"task manager experimental preference\"\nsources={{\n    light: require('./img/podman-desktop-release-1.15/kubernetes-node-events-light.png').default,\n    dark: require('./img/podman-desktop-release-1.15/kubernetes-node-events-dark.png').default,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Querying Lima Instance Directory (Bash)\nDESCRIPTION: Fetches the directory path associated with a given Lima instance by leveraging the limactl CLI with Go template formatting. Replace <instance> with your instance name. This command outputs the filesystem directory containing instance data.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/lima/customizing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlimactl list <instance> --format '{{.Dir}}'\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker Socket Environment Variable - Bash\nDESCRIPTION: Sets the TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE environment variable to the default Docker socket path, ensuring Testcontainers uses the correct Docker-compatible endpoint provided by Podman on macOS. Run this command in your shell after updating the configuration. The environment variable applies only for that session or child processes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE=/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Development Dependencies for Podman Desktop Tests\nDESCRIPTION: Package.json configuration for using a local development version of the Podman Desktop test framework. Shows how to reference a locally built version of the test package for development purposes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/tests/playwright/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n   \"@podman-desktop/tests-playwright\": \"file:../podman-desktop/tests/playwright\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH ed25519 Keypair for Podman Remote Access - Shell\nDESCRIPTION: This snippet generates an SSH ed25519 keypair for secure authentication with the remote server, which is required for Podman Desktop to establish a remote connection. It uses ssh-keygen to create the key at the specified path, with no interactive prompt for passphrase. Requires the OpenSSH suite installed; the -t flag selects ed25519, and -f sets the destination file. Outputs public/private keys in ~/.ssh/id_ed25519 and ~/.ssh/id_ed25519.pub. User must ensure an existing ~/.ssh/ directory and appropriate file permissions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519\\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Onboarding Command and Setting Context Value in Podman Desktop (JavaScript)\nDESCRIPTION: Implements a command registration using the Podman Desktop extension API and sets a custom context value to signal workflow completion. Requirements include access to 'extensionApi' and proper command ID naming. The function may perform some installation checks before updating the context via 'extensionApi.context.setValue'. Inputs may involve inspection or validation routines, while the output is notification of onboarding flow progression. Ensure the command is registered during extension activation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nextensionApi.commands.registerCommand(\n    'podman.onboarding.checkPodmanInstalled',\n    async () => {\n      // do something\n      ...\n      // set podmanVersion context value so we can mark the step as complete\n      extensionApi.context.setValue('podmanVersion', '4.7.2', 'onboarding');\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Lima Extension in Markdown\nDESCRIPTION: This snippet provides a concise description of the Lima extension for Podman Desktop. It explains that the extension allows for the creation of Lima virtual machines used to run Podman or Docker engines, and includes a link to the Lima project repository for further information.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/extensions/lima/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Lima extension\n\nThis extension allows to create Lima VM used to have a podman or docker engine.\n\nMore information on Lima: https://github.com/lima-vm/lima\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Images for Feedback Categories\nDESCRIPTION: ThemedImage component implementation showing the feedback categories interface with light and dark theme support.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\nalt=\"Feedback categories\"\nsources={{\n    light: require('./img/podman-desktop-release-1.15/feedback-categories-light.png').default,\n    dark: require('./img/podman-desktop-release-1.15/feedback-categories-dark.png').default,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Podman Connection List - Markdown - Table\nDESCRIPTION: This snippet provides example outputs in Markdown table format from the \"podman system connection ls\" command, showing both a rootful and a rootless default connection scenario. It is illustrative and not executable. The table structure includes columns for connection name, URI, identity, and default status, helping users understand expected output and identify current connection modes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nName                        URI                                                         Identity                                      Default\npodman-machine-default      ssh://user@127.0.0.1:54826/run/user/1000/podman/podman.sock c:\\\\Users\\\\username\\\\.ssh\\\\podman-machine-default false\npodman-machine-default-root ssh://root@127.0.0.1:54826/run/podman/podman.sock           c:\\\\Users\\\\username\\\\.ssh\\\\podman-machine-default true\n```\n\nLANGUAGE: markdown\nCODE:\n```\nName                        URI                                                         Identity                                      Default\npodman-machine-default      ssh://user@127.0.0.1:54826/run/user/1000/podman/podman.sock c:\\\\Users\\\\username\\\\.ssh\\\\podman-machine-default true\npodman-machine-default-root ssh://root@127.0.0.1:54826/run/podman/podman.sock           c:\\\\Users\\\\username\\\\.ssh\\\\podman-machine-default false\n```\n\n----------------------------------------\n\nTITLE: Listing Minikube Profiles via CLI - Shell Session\nDESCRIPTION: Demonstrates how to execute the 'minikube profile list' command from a shell session to list existing Minikube profiles. No additional dependencies are required beyond having the Minikube CLI installed and available in your system's PATH. The command outputs a list of profiles, or an error if Minikube is not installed, and serves as a basic verification of CLI functionality.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/installing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ minikube profile list\n```\n\n----------------------------------------\n\nTITLE: Running Testcontainers Tests in Debug Mode - Bash\nDESCRIPTION: Executes all test suites with debug logging enabled for Testcontainers, providing detailed output useful for troubleshooting configuration and runtime integration issues. The DEBUG environment variable scope applies only for the current execution context. This command should be run from the project root and will invoke the test script as defined in package.json.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=testcontainers* npm test\n```\n\n----------------------------------------\n\nTITLE: Gaining Root Privileges (Linux)\nDESCRIPTION: This command uses `sudo su -` to switch to the root user on a Linux host system. This provides the necessary superuser privileges to edit system-wide configuration files such as `/etc/containers/registries.conf` when configuring insecure registries directly on the host.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/containers/registries/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo su -\n```\n\n----------------------------------------\n\nTITLE: Contributing a Command in package.json\nDESCRIPTION: Defines a command contribution within the `contributes` section of `package.json`. This registers a 'Hello World' command with a unique `command` ID ('my.first.command') and a user-visible `title`.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"contributes\": {\n    \"commands\": [\n     {\n       \"command\": \"my.first.command\",\n       \"title\": \"My First Extension: Hello World\"\n     }\n   ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom System Prompt for Search Microservice\nDESCRIPTION: The final implementation of the system prompt in the custom search microservice. It instructs the model to return structured JSON results about podman-desktop.io pages, with no additional text.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprompt = ChatPromptTemplate.from_messages([\n    (\"system\", \"\"\"\n        reply in JSON format with an array of objects with 2 fields name and url\n        (and with no more text than the JSON output),\n        with a list of pages in the website https://www.podman-desktop.io related to my query\n    \"\"\"),\n    MessagesPlaceholder(variable_name=\"history\"),\n    (\"user\", \"{input}\")\n])\n```\n\n----------------------------------------\n\nTITLE: Starting interactive session with Podman machine\nDESCRIPTION: This command starts an interactive SSH session with the default Podman machine. Replace <machine_name> with your actual Podman machine name.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2025-03-06-mirror-registry-configuration-blog.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ podman machine ssh <machine_name>\n```\n\n----------------------------------------\n\nTITLE: Removing Podman User Directories - Shell - Shell Script\nDESCRIPTION: Deletes Podman configuration and data directories for a given user on various platforms. These commands remove all podman-related data, including containers, images, and configuration files, from standard Linux/macOS locations and, where specified, Windows emulated paths. 'rm -rf' is used with caution as it recursively and forcefully deletes entire folders. This is recommended after uninstalling Podman and may require appropriate user permissions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.local/share/containers/podman\nrm -rf ~/.config/containers/\nrm -rf ~/AppData/Roaming/containers\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.local/share/containers/podman\nrm -rf ~/.config/containers/podman\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.local/share/containers/storage\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.local/share/containers/podman-desktop/\nrm -rf ~/AppData/Roaming/Podman Desktop\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/AppData/Roaming/Podman Desktop\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.local/share/containers/podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman Desktop, Podman, and QEMU via Brew\nDESCRIPTION: This set of shell commands uses Homebrew to uninstall Podman Desktop, the Podman engine, and QEMU. This is a common step in completely removing a Homebrew-based Podman environment for troubleshooting or clean reinstallation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ brew uninstall podman-desktop\n$ brew uninstall podman\n$ brew uninstall qemu\n```\n\n----------------------------------------\n\nTITLE: Creating Local .kube Directory (Shell)\nDESCRIPTION: Creates the standard `.kube` directory in the user's home directory using the `mkdir` command. This directory is the conventional location for storing Kubernetes configuration files, such as `kubeconfig`, which Podman Desktop uses to connect to clusters.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir ~/.kube\n```\n\n----------------------------------------\n\nTITLE: AI Lab Recipe Configuration for Chatbot Application\nDESCRIPTION: YAML configuration file (ai-lab.yaml) that defines the containers and settings for a Podman AI Lab recipe. It specifies both the inference server container and the application container with their respective settings.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.0\napplication:\n  type: language\n  name: ChatBot_Streamlit\n  description: Chat with a model service in a web frontend.\n  containers:\n    - name: llamacpp-server\n      contextdir: ../../../model_servers/llamacpp_python\n      containerfile: ./base/Containerfile\n      model-service: true\n      backend:\n        - llama-cpp\n      arch:\n        - arm64\n        - amd64\n      ports:\n        - 8001\n      image: quay.io/ai-lab/llamacpp_python:latest\n    - name: streamlit-chat-app\n      contextdir: app\n      containerfile: Containerfile\n      arch:\n        - arm64\n        - amd64\n      ports:\n        - 8501\n      image: quay.io/ai-lab/chatbot:latest\n```\n\n----------------------------------------\n\nTITLE: Running the Extension Build Watcher using pnpm (Shell)\nDESCRIPTION: Shell command using `pnpm` to start the Podman Desktop development watcher from the root of the cloned Podman Desktop repository. The `--extension-folder` flag points to the directory containing the extension source code (e.g., `./extensions/foobar`), enabling live compilation and reloading during development. Requires `pnpm` to be installed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npnpm watch --extension-folder <path-to-your-extension>\n```\n\n----------------------------------------\n\nTITLE: Switching to Root Shell in Podman (Rootless Mode) - Shell Script\nDESCRIPTION: This shell command elevates the user session to root within the Podman machine's shell. It is typically used when Podman operates in rootless mode and root access is needed for system modifications. There are no required arguments; upon success, user receives a shell prompt as root. Use only if necessary for modifying system files, such as certificate authorities.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/adding-certificates-to-a-podman-machine.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ sudo su -\\n```\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting and Formatting\nDESCRIPTION: Command to run the linter and formatter on staged changes before committing, ensuring code quality standards are met.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npnpm lint-staged\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Machine List (libkrun Issue)\nDESCRIPTION: This shell session output shows the result of running `podman machine list` when a machine created with the `libkrun` provider exists but the environment is not correctly configured (e.g., `CONTAINERS_MACHINE_PROVIDER` is not set). The command fails to list the existing libkrun machine.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine list\nNAME        VM TYPE     CREATED     LAST UP     CPUS        MEMORY      DISK SIZE\n```\n\n----------------------------------------\n\nTITLE: Creating Command Link in Onboarding Content Using Custom Markdown (JSON)\nDESCRIPTION: Shows how to create a clickable link in onboarding content that either executes a command or navigates to a URL, using custom Markdown syntax. No additional dependencies besides renderer support for ':link'. Key properties are 'command' or 'href' within the cell value. Input is the link Markdown string. Outputs a rendered hyperlink or triggers the registered command when clicked.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"value\": \"To install Podman please follow these :link[installation instructions]{href=https://podman.io/docs/installation#installing-on-linux}\"\n```\n\n----------------------------------------\n\nTITLE: Running WebAssembly Image with Podman\nDESCRIPTION: This shell command runs the built WebAssembly image using Podman, which executes the Wasm binary and displays the ASCII art greeting.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ podman run rust-hello-world-wasm\n```\n\n----------------------------------------\n\nTITLE: Initializing Dockerfile with Scratch Image for Podman Desktop Extension\nDESCRIPTION: Specifies the base image for the extension's Containerfile. Using 'FROM scratch' creates a minimal image as the extension binary is self-contained and requires no external runtime.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/publish/index.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\n```\n\n----------------------------------------\n\nTITLE: Viewing E2E Test Results\nDESCRIPTION: Command to open the HTML test report in a browser after executing the E2E tests, allowing visual inspection of test results.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npnpm exec playwright show-report tests/playwright/output/html-results\n```\n\n----------------------------------------\n\nTITLE: Creating podman-desktop User with Proper Permissions\nDESCRIPTION: Creates a user account for running Podman Desktop with proper subuid and subgid ranges for rootless containers.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nRUN useradd -u 1000 podman-desktop && echo podman-desktop:10000:5000 > /etc/subuid && echo podman-desktop:10000:5000 > /etc/subgid\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Desktop from Flatpak Bundle\nDESCRIPTION: This command installs Podman Desktop from a downloaded Flatpak bundle file. The user needs to replace <version> with the actual version number of the downloaded file.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/linux-install/installing-podman-desktop-from-a-flatpak-bundle.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflatpak install --user $HOME/Downloads/podman-desktop-<version>.flatpak\n```\n\n----------------------------------------\n\nTITLE: Checking Running Pods\nDESCRIPTION: This command retrieves and displays pods with the label 'app=nginx'.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -l app=nginx\n```\n\n----------------------------------------\n\nTITLE: Loading ip_tables Module for Linux Systems\nDESCRIPTION: Commands to load and verify the ip_tables module on Linux systems when using the Contour ingress controller with Kind in Podman Desktop.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/installing-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo modprobe ip_tables\nlsmod | grep ip_tables\n```\n\n----------------------------------------\n\nTITLE: Changing to CA Certificate Directory - Shell Script\nDESCRIPTION: This command navigates to the system directory where trusted certificate anchors are stored on most Linux-based Podman machines. It is required prior to adding or managing certificate files, ensuring correct placement for subsequent trust updates. No arguments are needed; the output is the shell prompt in the new directory context.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/adding-certificates-to-a-podman-machine.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ cd /etc/pki/ca-trust/source/anchors\\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-off to Git Commit Messages\nDESCRIPTION: Demonstrates how to add a sign-off line to git commit messages, certifying the contributor's right to submit the patch under the project's open source license.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Configuring User Namespace for Podman\nDESCRIPTION: Sets an environment variable to configure user namespace for Podman.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_8\n\nLANGUAGE: docker\nCODE:\n```\nENV _CONTAINERS_USERNS_CONFIGURED=\"\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Podman Desktop Engine Version in package.json\nDESCRIPTION: Sets the required Podman Desktop engine version compatibility within the `engines` field of `package.json`. Using 'latest' indicates compatibility with the most recent version.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"engines\": {\n    \"podman-desktop\": \"latest\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Displaying Podman Helper Binary Error on macOS\nDESCRIPTION: This shell snippet shows the error message displayed when Podman on macOS cannot find required helper binaries like `gvproxy` after a custom binary path has been set. This indicates that the `helper_binaries_dir` configuration might be missing or incorrect.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nError: unable to start host networking: \"could not find \\\"gvproxy\\\" in one of [/usr/local/opt/podman/libexec /opt/homebrew/bin /opt/homebrew/opt/podman/libexec /usr/local/bin /usr/local/libexec/podman /usr/local/lib/podman /usr/libexec/podman /usr/lib/podman $BINDIR/../libexec/podman].  To resolve this error, set the helper_binaries_dir key in the `[engine]` section of containers.conf to the directory containing your helper binaries.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CRI-O Storage Path in TOML\nDESCRIPTION: This TOML configuration snippet sets the root and runroot paths for CRI-O to use the mounted host containers directory. This allows CRI-O to access Podman images directly.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[crio]\nroot = \"/host-containers/storage\"\nrunroot = \"/host-containers/storage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DISPLAY Environment Variable for Remote Containers in JSON\nDESCRIPTION: This JSON snippet sets the 'DISPLAY' environment variable to ':0' for remote development environments, enabling graphical applications (such as those using VNC) to function correctly. It should be placed within the 'devcontainer.json' file under the 'remoteEnv' key. No additional dependencies are required beyond a containerized development environment that supports the specified environment variable.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"remoteEnv\\\": {\\n    \\\"DISPLAY\\\": \\\":0\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: Installs all required project dependencies using the pnpm package manager.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Socket Path\nDESCRIPTION: Defines the XDG_RUNTIME_DIR environment variable to specify where Podman will create its socket.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_9\n\nLANGUAGE: docker\nCODE:\n```\n# socket path for podman\nENV XDG_RUNTIME_DIR=/run/user/1000\n```\n\n----------------------------------------\n\nTITLE: Running All E2E Tests\nDESCRIPTION: Command to run all end-to-end tests for the project to ensure no regressions are introduced with new features.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Using ReactPlayer for Protocol Handler Demo\nDESCRIPTION: Embeds a video player demonstrating the new protocol handler support that allows launching specific extensions directly from the terminal.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-07-12-release-1.2.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/436777/243304511-b11ad1e4-4c2f-455c-957a-01653d2a93c8.mp4\" width='100%' height='100%' />\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Defining Commands in Podman Desktop Extension\nDESCRIPTION: This JSON schema outlines the structure for defining commands in a Podman Desktop extension. It includes optional fields for category and enablement conditions, allowing for more granular control over command visibility and organization.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/commands.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"string\",\n        \"title\": \"string\",\n        \"category\": \"string (optional cateogry for prefix title)\",\n        \"enablement\": \"myProperty === myValue\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Certificate File via curl - Shell Script\nDESCRIPTION: This shell command uses curl to fetch a certificate from a remote server and save it to a given filename. The -k option is optional, allowing insecure connections (skip TLS verification) during download. Required parameters are the output file path and the source URL. The output is the saved certificate file on disk.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/adding-certificates-to-a-podman-machine.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ curl [-k] -o <my-certificate> https://<my-server.com/my-certificate>\\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH\nDESCRIPTION: Deploys the website using GitHub username authentication instead of SSH.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ GIT_USER=<Your GitHub username> pnpm deploy\n```\n\n----------------------------------------\n\nTITLE: Defining DevContainer Build Configuration\nDESCRIPTION: Specifies the Dockerfile to use for building the DevContainer.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"build\": {\n  \"dockerfile\": \"Containerfile\"\n},\n```\n\n----------------------------------------\n\nTITLE: Importing TelemetryLogger in Podman Desktop Extensions\nDESCRIPTION: Shows how to import the TelemetryLogger from the Podman Desktop API for use in extensions. This is the recommended way for extensions to access telemetry functionality.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/USAGE_DATA.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TelemetryLogger } from '@podman-desktop/api';\n```\n\n----------------------------------------\n\nTITLE: Creating Author Information in YAML for Podman Desktop Blog\nDESCRIPTION: This YAML snippet demonstrates how to add a new author to the list of authors in the blogs/authors.yml file. It includes fields for the author's name, title, URL, and image URL.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/WEBSITE_CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthorid:\n  name: Your Name\n  title: Your Title\n  url: your GitHub link \n  image_url: <your GitHub link>.png\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Contexts - Shell Session\nDESCRIPTION: This snippet runs the docker context list command to display available Docker CLI contexts. It is used for verifying whether Docker is using the correct socket (e.g., 'npipe:////./pipe/docker_engine' on Windows, 'unix:///var/run/docker.sock' on Linux/macOS). No additional dependencies besides Docker are required. Inputs are not needed beyond the command; the table output lists context names and endpoints.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/customizing-docker-compatibility.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\ndocker context list\n```\n\n----------------------------------------\n\nTITLE: Building Production-like Environment for Podman Desktop Website in Shell\nDESCRIPTION: This shell command builds a production-like environment for the Podman Desktop website, allowing developers to test their changes in a more realistic setting.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/WEBSITE_CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm website:prod\n```\n\n----------------------------------------\n\nTITLE: Setting Container User\nDESCRIPTION: Configures the DevContainer to run as the podman-desktop user instead of root.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"containerUser\": \"podman-desktop\"\n```\n\n----------------------------------------\n\nTITLE: Determining Podman Socket Path for root via SSH - Shell\nDESCRIPTION: This snippet is similar to the previous one but runs the command as root via SSH, revealing the system-wide Podman socket path. Useful for system-level administration. The output typically points to /run/podman/podman.sock. Requires root SSH access and podman installed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ssh root@my-server-ip podman info | grep sock\\n   path: /run/podman/podman.sock\\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js/TypeScript Project - Bash\nDESCRIPTION: Initializes a new Node.js project by creating a package.json file with default options. This setup step is required before installing dependencies or adding source files. No parameters are necessary; the '-y' flag auto-confirms prompts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Installing podman-mac-helper - Shell Session - Shell\nDESCRIPTION: This snippet shows the command to install the 'podman-mac-helper' binary on macOS systems. The command \"sudo podman-mac-helper install\" must be run with elevated privileges and is required to set up Docker socket compatibility on Podman for Mac. Prerequisites include having 'podman-mac-helper' downloaded and Podman installed. The output will indicate installation status.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo podman-mac-helper install\n```\n\n----------------------------------------\n\nTITLE: Running Podman Desktop from Flatpak\nDESCRIPTION: This command launches Podman Desktop after installation using Flatpak. It runs the application with its Flatpak identifier.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/linux-install/installing-podman-desktop-from-a-flatpak-bundle.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflatpak run io.podman_desktop.PodmanDesktop\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenShift Local Preset Configuration with CRC (Shell)\nDESCRIPTION: This command retrieves the currently configured preset for OpenShift Local using `crc config get preset`. The preset determines the specific configuration (like allocated resources) for the cluster instance. This command requires the `crc` binary to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-openshift-local.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ crc config get preset\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Documentation Files in Markdown\nDESCRIPTION: This Markdown snippet demonstrates the required metadata structure for documentation files in the Podman Desktop project. It includes fields for title, description, sidebar position, keywords, and tags.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/WEBSITE_CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Your title\ndescription: Small one sentence description\nsidebar_position: 1 # Weight depending on the position you want\nkeywords: [multiple, keywords, as-needed]\ntags: [category]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Run Arguments\nDESCRIPTION: Sets the necessary container run arguments to enable Podman to run containers inside the DevContainer with proper permissions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [\n    \"--cap-add=sys_admin\",\n    \"--security-opt\",\n    \"seccomp=unconfined\",\n    \"--device\",\n    \"/dev/fuse\",\n    \"--security-opt\",\n    \"label=disable\",\n    \"--security-opt\",\n    \"apparmor=unconfined\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: nvidia-smi Error Output Example - Console - console\nDESCRIPTION: This snippet shows the typical error output when a version mismatch prevents initialization of the NVIDIA Management Library (NVML) in a container. It highlights the importance of compatible versions between drivers and CDI specifications. Needs no setup; represents expected output from nvidia-smi in a misconfigured environment.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n```console\\n# nvidia-smi\\nFailed to initialize NVML: N/A\\n```\n```\n\n----------------------------------------\n\nTITLE: Unregistering Podman Machine from WSL - Shell-Session\nDESCRIPTION: Unregisters (removes) a specified Podman Machine from WSL using its distribution name. Requires WSL and a valid distribution identifier. This command fully deletes the selected Podman WSL VM instance, freeing resources and allowing fresh setup if needed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-windows.md#2025-04-23_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n\n$ wsl --unregister podman-machine-default\n\n```\n\n----------------------------------------\n\nTITLE: Running Smoke E2E Tests\nDESCRIPTION: Command to run only the smoke tests subset of the end-to-end tests.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:e2e:smoke\n```\n\n----------------------------------------\n\nTITLE: Setting up Fedora 37 Base Image for DevContainer\nDESCRIPTION: Defines the base image for the DevContainer using Fedora 37.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM quay.io/fedora/fedora:37\n```\n\n----------------------------------------\n\nTITLE: Mounting Workspace in DevContainer\nDESCRIPTION: Specifies how to mount the local workspace into the DevContainer for development.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=${localWorkspaceFolder},target=/workspace,type=bind\",\n\"workspaceFolder\": \"/workspace\",\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Launches a local development server with live reload capabilities for website/documentation development.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating Podman Machine Configuration with Patched EDK2 Path\nDESCRIPTION: This shell command uses `sed` to perform an in-place edit (`-i`) of the Podman machine's JSON configuration file (`podman-machine-default.json`). It finds the line specifying the EDK2 firmware file (`edk2-aarch64-code.fd`) and replaces its path with the path to the manually downloaded and placed patched firmware file (`/path/to/downloaded/edk2-aarch64-code.fd`). The `qemu-config-directory` placeholder must be replaced with the actual path found in the previous step.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sed -i 's@file=.*edk2-aarch64-code.fd@file=/path/to/downloaded/edk2-aarch64-code.fd@g' qemu-config-directory/podman-machine-default.json\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post Metadata in Markdown for Podman Desktop\nDESCRIPTION: This Markdown snippet shows the required metadata for creating a new blog post on the Podman Desktop website. It includes fields for title, description, slug, authors, tags, and image path.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/WEBSITE_CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Title of the blog post\ndescription: Description and short summary of the post\nslug: Unique identifier of the page used for the URL (example: podman-desktop-release-1.11).\nauthors: Your author ID on podman desktop blog\ntags: Tags for the post (example: [podman-desktop, release, podman])\nhide_table_of_contents: false\nimage: Path to the hero image for the post (example: /img/blog/podman-desktop-release-1.11/banner.png).\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Podman Machine with Specific Image in Shell\nDESCRIPTION: This command initializes a Podman machine using a specific image version as a workaround for Mac/Intel users experiencing issues with Podman 5.4.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2025-03-05-release-1.17.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman machine init --image=docker://quay.io/podman/machine-os:5.2\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and Yarn in DevContainer\nDESCRIPTION: Installs Node.js 16.18.1 from the official repository and Yarn package manager.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\n# install Node.js + yarn\nENV NODE_VERSION 16.18.1\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\" && \\\n    tar -xzf \"node-v$NODE_VERSION-linux-x64.tar.gz\" -C /usr/local --strip-components=1 && \\\n    rm \"node-v$NODE_VERSION-linux-x64.tar.gz\" && \\\n    npm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: Testing Initial Prompt with LLM for Web Search\nDESCRIPTION: A simple text prompt to ask the LLM to find pages related to \"build an image\" on the podman-desktop.io website. This represents the initial unstructured approach to querying the model.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-26-ai-lab-first-app.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGive me a list of pages in the website podman-desktop.io related to \"build an image\"\n```\n\n----------------------------------------\n\nTITLE: Exiting Root Shell or Podman Machine - Shell Script\nDESCRIPTION: The exit command terminates the current shell session, either dropping root privileges or exiting the Podman machine entirely, depending on context. It accepts no parameters and is a standard shell built-in. Use after completing certificate configuration or root-level modifications.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/adding-certificates-to-a-podman-machine.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ exit\\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Podman Installed via Installer\nDESCRIPTION: This shell command demonstrates how to forcibly remove the Podman installation directory typically used by the official macOS installer (`/opt/podman`). This is useful for a clean uninstallation, especially when switching between installation methods or resolving conflicts.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo rm -rf /opt/podman\n```\n\n----------------------------------------\n\nTITLE: Running Podman Desktop Website Preview in Shell\nDESCRIPTION: This shell command is used to preview the Podman Desktop website locally during development. It runs a development server that automatically opens the browser to localhost:3000.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/WEBSITE_CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm website:dev\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player in Markdown\nDESCRIPTION: This snippet embeds a video player using the ReactPlayer component, demonstrating the Kind ingress feature in Podman Desktop 0.15.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-05-02-release-0.15.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/6422176/232894496-cbaea036-a14c-46c6-bfa3-bacca629a161.mov\" width='100%' height='100%' />\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in JavaScript\nDESCRIPTION: Imports the ReactPlayer component from the 'react-player' library to enable video playback functionality in the blog post.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-08-16-release-1.3.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman Desktop via Scoop - Shell-Session - Windows\nDESCRIPTION: Uses the Scoop package manager to uninstall Podman Desktop on Windows. Requires Scoop to be installed and configured on the system. Execute in a Windows PowerShell prompt; the command removes the application and relevant Scoop-managed data.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\nscoop uninstall podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Deleting Minikube Cluster Using Shell - shell-session\nDESCRIPTION: This shell command deletes an existing Minikube cluster to resolve issues that arise from instability of the Minikube tool. It requires that Minikube is installed and accessible in the system PATH. The command does not accept parameters in this context and will remove the active cluster; make sure to backup any important data before running it. The output will confirm deletion, and it should be followed by recreating the cluster if desired.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-extension-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ minikube delete\n\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Podman Runtime\nDESCRIPTION: Sets correct permissions for Podman directories and files according to the RedHat guide for running Podman inside a container.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_7\n\nLANGUAGE: docker\nCODE:\n```\n# set permissions\nRUN chown podman-desktop:podman-desktop -R /home/podman-desktop && chmod 644 /etc/containers/containers.conf && \\\n    mkdir -p /var/lib/shared/overlay-images /var/lib/shared/overlay-layers /var/lib/shared/vfs-images /var/lib/shared/vfs-layers; touch /var/lib/shared/overlay-images/images.lock; touch /var/lib/shared/overlay-layers/layers.lock; touch /var/lib/shared/vfs-images/images.lock; touch /var/lib/shared/vfs-layers/layers.lock && \\\n    mkdir -p /run/user/1000 && chown podman-desktop:podman-desktop /run/user/1000\n```\n\n----------------------------------------\n\nTITLE: Running a Virtual Machine with QEMU on macOS Silicon\nDESCRIPTION: Commands to set up and run the generated raw bootable image on macOS Silicon using QEMU. This setup allocates 8GB of memory, 4 CPU cores, and forwards port 2222 to the VM's SSH port 22 for remote access.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-11-08-bootc-microshift.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install qemu\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ cd ~/output\n```\n\nLANGUAGE: sh\nCODE:\n```\n$  qemu-system-aarch64 \\\n    -m 8G \\\n    -M virt \\\n    -accel hvf \\\n    -cpu host \\\n    -smp 4 \\\n    -serial mon:stdio \\\n    -nographic \\\n    -netdev user,id=mynet0,hostfwd=tcp::2222-:22 \\\n    -device e1000,netdev=mynet0 \\\n    -drive file=/opt/homebrew/share/qemu/edk2-aarch64-code.fd,format=raw,if=pflash,readonly=on \\\n    -drive file=disk.raw,if=virtio,cache=writethrough,format=raw\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ ssh redhat@localhost -p 2222\n```\n\n----------------------------------------\n\nTITLE: Adding Podman Desktop Test Dependencies to External Repository\nDESCRIPTION: Package.json configuration showing how to add Podman Desktop test dependencies to an external repository. Includes the required devDependencies and test scripts needed to run Playwright tests against Podman Desktop.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/tests/playwright/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@podman-desktop/tests-playwright\": \"next\",\n  \"@playwright/test\": \"^1.48.1\"\n},\n\"scripts\": {\n  \"test:e2e:setup\": \"xvfb-maybe --auto-servernum --server-args='-screen 0 1280x960x24' --\",\n  \"test:e2e\": \"cross-env npm run test:e2e:setup npx playwright test tests/src\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown\nDESCRIPTION: This code snippet imports the ReactPlayer component, likely for embedding video content within the markdown document.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-03-07-release-1.8.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Sample Output for CRC Host Readiness Check (Shell)\nDESCRIPTION: This snippet shows example output from the `crc setup --check-only` command. It illustrates the kind of information reported, such as the bundle path being used, checks for non-root execution, WSL2 environment detection, and the caching status of the `crc-admin-helper` executable. This helps users interpret the results of the readiness check.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-openshift-local.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nINFO Using bundle path <bundle_path>\nINFO Checking if running as non-root\nINFO Checking if running inside WSL2\nINFO Checking if crc-admin-helper executable is cached\ncrc-admin-helper executable is not cached\n```\n\n----------------------------------------\n\nTITLE: Restarting Podman Processes on Linux\nDESCRIPTION: Command to kill all running Podman processes after proxy configuration to apply the changes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pkill podman\n```\n\n----------------------------------------\n\nTITLE: Setting up Fluxbox Theme\nDESCRIPTION: Copies a custom fluxbox theme configuration file.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\nCOPY fluxbox /usr/share/fluxbox/init\n```\n\n----------------------------------------\n\nTITLE: Error Output When Stopping Podman Machine - Shell-Session\nDESCRIPTION: Shows sample error output when the podman machine stop command fails due to systemd exit issues. No dependencies, but relevant only in the context of a failed stop command. The error indicates troubleshooting may be needed for underlying WSL or systemd integration.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n\nError: Error stopping sysd: exit status 1\n\n```\n\n----------------------------------------\n\nTITLE: React Player Import Statement\nDESCRIPTION: Import statement for the ReactPlayer component used in the blog post\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-10-31-release-1.14.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Formatting Conventional Commit Messages for Podman Desktop\nDESCRIPTION: Shows the correct format for commit messages following the Conventional Commits specification used in Podman Desktop. Includes the type, optional scope, description, optional body, and optional footer.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n----------------------------------------\n\nTITLE: Listing Containers on the Remote Podman Host - Shell\nDESCRIPTION: This snippet runs podman ps to list containers on the remote host, provided the default connection is set. Shows running containers and their details. Requires podman configured with a valid remote connection.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ podman ps\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisord for VNC Server\nDESCRIPTION: Copies the supervisord configuration file to manage VNC server and Window manager processes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nCOPY supervisord.conf /etc/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: Output of GPU Detection in macOS Podman Container\nDESCRIPTION: Sample output of the GPU detection command showing the identified GPU devices including a Virtio-GPU Venus (Apple M1 Pro) and an llvmpipe device, confirming that GPU passthrough is working successfully.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-08-08-release-1.12.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  GPU id = 0 (Virtio-GPU Venus (Apple M1 Pro))\n  GPU id = 1 (llvmpipe (LLVM 17.0.6, 128 bits))\nGPU0:\n deviceType        = PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU\n deviceName        = Virtio-GPU Venus (Apple M1 Pro)\nGPU1:\n```\n\n----------------------------------------\n\nTITLE: Unloading Podman Desktop LaunchAgent\nDESCRIPTION: Command to unload the Podman Desktop service from launchctl to prepare for log truncation\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ launchctl unload  ~/Library/LaunchAgents/io.podman_desktop.PodmanDesktop.plist\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown JSX\nDESCRIPTION: Code that imports React components needed for the blog post, including ReactPlayer for video embedding, useBaseUrl for URL handling, and ThemedImage for dark/light theme image support.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-12-12-release-1.15.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactPlayer from 'react-player'\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport ThemedImage from '@theme/ThemedImage';\n```\n\n----------------------------------------\n\nTITLE: Determining Podman Socket Path with SSH and podman info - Shell\nDESCRIPTION: This snippet invokes the podman info command on the remote server via SSH, piping it to grep to extract the socket path. The command is executed as a regular user to discover the per-user podman socket location. Requires SSH access, podman installed on the server, and grep available. Returns a line indicating the socket path, such as /run/user/1000/podman/podman.sock.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ssh user@my-server-ip podman info | grep sock\\n   path: /run/user/1000/podman/podman.sock\\n```\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Generates static website content in the build directory for deployment to static hosting services.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown\nDESCRIPTION: Imports the ReactPlayer component for use in the markdown file. This is likely used for embedding video content within the blog post.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-04-30-release-1.10.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Finding Podman Socket Path on macOS using Shell\nDESCRIPTION: Uses the `podman machine inspect` command with a Go template format string to extract the specific path of the Unix domain socket used for communication with the Podman machine on macOS. This path is required for setting the DOCKER_HOST variable.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine inspect --format '{{.ConnectionInfo.PodmanSocket.Path}}'\n```\n\n----------------------------------------\n\nTITLE: Using ReactPlayer for Image Renaming Demo\nDESCRIPTION: Embeds a video player showing how to rename container images in Podman Desktop 1.2.0.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-07-12-release-1.2.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/436777/251759557-bd15a631-93ee-4383-a81c-8ef3934dfb59.mp4\" width='100%' height='100%' />\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Class for Namespace Logic - TypeScript\nDESCRIPTION: Defines the 'FoobarClient' class that provides the actual implementation of the 'hello' method, logging a custom greeting to the console. Intended to reside in its own file (`foobar-client.ts`). Requires JavaScript runtime access to 'console.log'. The method accepts a string 'input' and outputs a greeting message, with side effects limited to console output.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FoobarClient {\n  hello(input: string) {\n    console.log('hello ' + input);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman via Setup Utility - Shell - Shell Script\nDESCRIPTION: Executes the Podman macOS helper script to uninstall Podman, removes installed package path references, and recursively deletes the Podman directory under '/opt'. Sequence of commands is intended for users who installed Podman using the Podman Desktop setup and requires superuser privileges via 'sudo'. Corrects system state by removing Podman helper, path settings, and program files.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo /opt/podman/bin/podman-mac-helper uninstall\nsudo rm /etc/paths.d/podman-pkg\nsudo rm -rfv /opt/podman\n```\n\n----------------------------------------\n\nTITLE: Removing Podman Resources and Machines - Shell - Shell Script\nDESCRIPTION: Deletes all existing Podman containers, pods, images, and machines on a Linux system. Each command targets a specific Podman resource type with '-a' for all and '-f' for force, ensuring complete removal with no user confirmation required. Intended for users preparing to uninstall Podman or clean their system of Podman-related state.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman rm -a -f\n```\n\nLANGUAGE: shell\nCODE:\n```\npodman pod rm -a -f\n```\n\nLANGUAGE: shell\nCODE:\n```\npodman rmi -a -f\n```\n\nLANGUAGE: shell\nCODE:\n```\npodman machine reset -f\n```\n\n----------------------------------------\n\nTITLE: Import React Player Component\nDESCRIPTION: Import statement for ReactPlayer component used in the documentation page.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-24-release-1.7.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Compiling Production Binaries\nDESCRIPTION: Command to create a production binary for your local system architecture, outputting the result to the dist/ folder for testing.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npnpm compile:current\n```\n\n----------------------------------------\n\nTITLE: Deploying an Application to Kubernetes\nDESCRIPTION: This command applies a Kubernetes deployment configuration from a remote YAML file.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://k8s.io/examples/application/deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Passing the Client to Loader - TypeScript\nDESCRIPTION: Creates an instance of 'FoobarClient' and passes it to the 'ExtensionLoader' constructor to ensure the new namespace function is wired up for the extension API. This code is meant for the plugin entry point. Requires both classes to be available in scope. There are no parameters or return values beyond object instantiation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst foobarClient = new FoobarClient();\nthis.extensionLoader = new ExtensionLoader(\n  /* ... */\n  foobarClient,\n);\n```\n\n----------------------------------------\n\nTITLE: Running Compose Extension Tests\nDESCRIPTION: Command to run tests specifically for the compose extension, showing test results for a restricted set of tests.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:extensions:compose\n```\n\n----------------------------------------\n\nTITLE: Testing Component Styles with toHaveStyle\nDESCRIPTION: Demonstrates the recommended approach for testing styles applied to HTML elements using the toHaveStyle matcher from testing-library/jest-dom.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CODE-GUIDELINES.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { getByText } = render(<MyComponent>);\n\nconst text = getByText('text in the page');\n// [Good]\nexpect(text).toHaveStyle({ color: '#FFFFF'});\n```\n\n----------------------------------------\n\nTITLE: Running Extension-Specific Tests\nDESCRIPTION: Command to run tests only for the extensions module, providing faster feedback when working on extensions.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:extensions\n```\n\n----------------------------------------\n\nTITLE: Interpreting Testcontainers Debug Log Output - Text\nDESCRIPTION: Sample log output showing Testcontainers successfully loading its configuration file and detecting the correct Docker-compatible socket for Podman. No action needed from the user; presence of these lines confirms correct setup.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/testcontainers-with-podman.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntestcontainers [DEBUG] Loading \".testcontainers.properties\" file...\ntestcontainers [DEBUG] Loaded \".testcontainers.properties\" file\ntestcontainers [DEBUG] Found custom configuration: dockerHost: \"unix:///run/user/1000//podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Extending Package Configuration for UI Settings - JSON (in TS Block)\nDESCRIPTION: Demonstrates how to extend the extension's package.json configuration to introduce a new string property ('podman.binary.path') shown in the Podman Desktop UI settings. The setting determines the path to the Podman binary. Relevant parameters include the property name, display name, type, default value, and description. This change is only recognized after the extension is correctly registered and installed. Configuration is shown inside a pseudo-TypeScript code fence for illustrative purposes.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\n    \"configuration\": {\n      \"title\": \"Podman\",\n      \"properties\": {\n        \"podman.binary.path\": {\n          \"name\": \"Path to Podman Binary\",\n          \"type\": \"string\",\n          \"format\": \"file\",\n          \"default\": \"\",\n          \"description\": \"Custom path to Podman binary (Default is blank)\"\n        },\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Podman Desktop Maintainers\nDESCRIPTION: A markdown table listing all current maintainers of the Podman Desktop Project, showing their names, GitHub usernames, and employer information.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/MAINTAINERS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | GitHub Username | Employer |\n| ---- | --------------- | -------- |\n| Axel Stefanini | @axel7083 | Red Hat|\n| Charlie Drage | @cdrage | Red Hat|\n| Denis Golovin | @dgolovin | Red Hat|\n| Emma Kidney | @ekidneyrh | Red Hat|\n| Evžen Gasta | @gastoner | Red Hat|\n| Florent Benoit | @benoitf | Red Hat|\n| Jeff MAURY | @jeffmaury | Red Hat|\n| Ondrej Dockal | @odockal | Red Hat|\n| Philippe Martin | @feloy | Red Hat|\n| Rujuta Shinde | @rujutashinde | Red Hat|\n| Shipra Singh | @shipsing | Red Hat|\n| Sonia Sandler | @SoniaSandler | Red Hat|\n| Stévan Le Meur | @slemeur | Red Hat|\n| Tim deBoer | @deboer-tim | Red Hat|\n| Vladimir Lazar | @cbr7 | Red Hat|\n| Vladyslav Zhukovskyi | @vzhukovs | Red Hat|\n```\n\n----------------------------------------\n\nTITLE: Configuring Onboarding Command in Podman Desktop Extension\nDESCRIPTION: This JSON snippet demonstrates how to configure a command to be executed during the onboarding process in a Podman Desktop extension. It includes registering the command and specifying it in a step of the onboarding workflow.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"commands\": [\n    {\n    \"command\": \"podman.onboarding.checkPodmanInstalled\",\n    \"title\": \"Podman: Check podman installation\"\n    },\n],\n\"onboarding\": {\n    \"title\": \"Podman Setup\",\n    \"steps\": [\n    {\n        \"id\": \"checkPodmanInstalled\",\n        \"title\": \"Checking for Podman installation\",\n        \"command\": \"podman.onboarding.checkPodmanInstalled\",\n    },\n    ...\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Button in Onboarding Content Using Custom Markdown (JSON)\nDESCRIPTION: Demonstrates embedding a command button in onboarding content by setting the cell 'value' field to custom Markdown syntax. Requires UI support for ':button' Markdown extensions and proper linkage of command name to onboarded command IDs. Key parameter is the 'command' property, referencing a registered command. The button can trigger Podman commands directly from the onboarding UI. Only works as expected when the renderer recognizes the micromark syntax.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"value\": \":button[Check requirements again]{command=podman.onboarding.checkPodmanRequirements}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling WSL and updating for Podman installation\nDESCRIPTION: Commands to update WSL and enable it without installing a default Linux distribution, as preparation for Podman installation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/installation/windows-install/index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n> wsl --update\n> wsl --install --no-distribution\n```\n\n----------------------------------------\n\nTITLE: Podman Docker Compatibility Warning - Markdown - Dashboard Warning Message\nDESCRIPTION: This snippet is a Markdown-formatted warning message that appears on the Podman Desktop dashboard if Docker socket compatibility is not enabled. It uses a custom emoji and calls out potential issues with Docker-specific tooling due to Podman not emulating '/var/run/docker.sock'. The warning is informational for end users and does not require configuration.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdownlint-disable MD040 -->\n⚠️ Docker Socket Compatibility: Podman is not emulating the default Docker socket path: '/var/run/docker.sock'. Docker-specific tools may not work. See troubleshooting page on podman-desktop.io for more information.\n```\n\n----------------------------------------\n\nTITLE: Loading Podman Desktop LaunchAgent\nDESCRIPTION: Command to reload the Podman Desktop service in launchctl after log truncation\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ launchctl load  ~/Library/LaunchAgents/io.podman_desktop.PodmanDesktop.plist\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman and Podman Compose Setup\nDESCRIPTION: Provides example commands (`podman`, `podman compose`) to verify that the Podman engine and its Compose integration are functioning correctly after configuration, typically used for checking Compose applications.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/managing-docker-compatibility.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman\n```\n\nLANGUAGE: shell\nCODE:\n```\npodman compose\n```\n\n----------------------------------------\n\nTITLE: Updating Podman in Minikube KicBase Dockerfile\nDESCRIPTION: This Dockerfile snippet updates Podman to the latest version in the Minikube KicBase image. It adds the necessary repository and installs the latest Podman along with dbus-user-session to resolve potential runtime issues.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-12-06-sharing-podman-images-with-kubernetes-cluster.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN sh -c \"echo 'deb https://downloadcontent.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list\" && \\\n    curl -LO https://downloadcontent.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_22.04/Release.key && \\\n    apt-key add - < Release.key && \\\n    # need to add dbus-user-session else we have\n    # cannot open sd-bus: No such file or directory: OCI runtime attempted to invoke a command that was not found\n    clean-install dbus-user-session podman && \\\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST in Windows Command Prompt\nDESCRIPTION: Sets the DOCKER_HOST environment variable for the current session within the Windows Command Prompt (cmd.exe). It requires the output from the `podman machine inspect` command, prefixed with `npipe://`. Replace `<inspect_command_output>` with the actual path.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nset DOCKER_HOST=npipe://<inspect_command_output>\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST in Git Bash on Windows\nDESCRIPTION: Sets the DOCKER_HOST environment variable for the current session within Git Bash on Windows using the `export` command. It requires the output from the `podman machine inspect` command, prefixed with `npipe://`. Replace `<inspect_command_output>` with the actual path.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_HOST=npipe://<inspect_command_output>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman Desktop via Chocolatey - Shell-Session - Windows\nDESCRIPTION: Uses Chocolatey, a Windows package manager, to uninstall the Podman Desktop application. Run this command in an elevated command prompt or terminal with administrator privileges. Chocolatey must already be installed; the command will handle the removal of Podman Desktop and update the system package database.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/uninstall/index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\nchoco uninstall podman-desktop\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Organizations Using Podman Desktop\nDESCRIPTION: A markdown table listing organizations that use Podman Desktop, their usage status (production/testing), and additional information about their implementation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/ADOPTERS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Organization                     | Status                                                                  | More Information |\n| -------------------------------- | ----------------------------------------------------------------------- | ---------------- |\n| [SAMPLE Acme](https://acme.com/) | ![production](https://img.shields.io/badge/-production-blue?style=flat) |\n| [Amadeus](https://amadeus.com/) | ![production](https://img.shields.io/badge/-production-blue?style=flat) | Migration of 2k+ developers' container engines to Podman Desktop in Jan 2024. Regular collaboration with the Podman Desktop engineering team.\n| [École et observatoire des Sciences de la Terre](https://eost.unistra.fr/) | ![production](https://img.shields.io/badge/-production-blue?style=flat) | Used to improve security on our developer workstations |\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST in Windows Powershell\nDESCRIPTION: Sets the DOCKER_HOST environment variable for the current session within Windows Powershell using the `$env:` scope modifier. The value, which includes the `npipe://` prefix and the path from `podman machine inspect`, must be enclosed in quotes. Replace `<inspect_command_output>` with the actual path.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/migrating-from-docker/using-the-docker_host-environment-variable.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$env:DOCKER_HOST=\"npipe://<inspect_command_output>\"\n```\n\n----------------------------------------\n\nTITLE: Generate NVIDIA CDI Specification File - Shell - sh\nDESCRIPTION: Generates the Container Device Interface YAML file at /etc/cdi using nvidia-ctk from the NVIDIA Container Toolkit. Meant for Linux environments to assist Podman in discovering GPUs. Must be run with sufficient permissions; the output is a YAML file Podman reads during container startup.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Enablement Clause for Onboarding in Podman Desktop Extension\nDESCRIPTION: This JSON snippet shows how to define an enablement clause for the onboarding workflow in a Podman Desktop extension. It uses when clauses to determine when the onboarding should be enabled based on the user's operating system and Podman installation status.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/onboarding-workflow.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"enablement\": \"(isLinux && onboardingContext:podmanIsNotInstalled) || (!isLinux && !onboardingContext:podmanMachineExists)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Commands in package.json for Podman Desktop Extension\nDESCRIPTION: This JSON snippet shows how to declare commands in the package.json file of a Podman Desktop extension. It includes an example of a command with a title, category, and optional enablement condition.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/extensions/developing/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"contributes\": {\n    \"commands\": [\n      {\n        \"command\": \"my.command\",\n        \"title\": \"This is my command\",\n        \"category\": \"Optional category to prefix title\",\n        \"enablement\": \"myProperty === myValue\"\n      },\n    ],\n }\n```\n\n----------------------------------------\n\nTITLE: List Generated CDI Devices - Shell - sh\nDESCRIPTION: This shell snippet lists all CDI devices known to the system using the nvidia-ctk CLI, providing a means to validate successful configuration and visibility of GPU devices within the container environment. Must be run after generating the CDI file.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ nvidia-ctk cdi list\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Markdown Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for the Markdown documentation, including sidebar position, title, description, keywords, and tags.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/kind/building-an-image-and-testing-it-in-kind.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 10\ntitle: Building and testing an image\ndescription: Building an image and testing it in Kind\nkeywords: [podman desktop, podman, containers, pods, building an image, kubernetes, kind]\ntags: [building-an-image, testing-an-image-on-kind]\n---\n```\n\n----------------------------------------\n\nTITLE: Set SELinux Device Access Policy - Shell - sh\nDESCRIPTION: This shell snippet configures SELinux to permit container access to host devices by setting the container_use_devices boolean, persistent across reboots. Requires sudo and only needed if SELinux is 'Enforcing'. Should be executed on an SELinux-enabled, Fedora-derived host where container-to-device communication is blocked by default.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/gpu.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ sudo setsebool -P container_use_devices true\\n```\n```\n\n----------------------------------------\n\nTITLE: Using ReactPlayer for Troubleshooting Page Demo\nDESCRIPTION: Embeds a video player demonstrating the new troubleshooting page in Podman Desktop for viewing logs and diagnosing issues.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-07-12-release-1.2.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactPlayer playing playsinline controls url=\"https://user-images.githubusercontent.com/436777/248210601-e0a5deb0-44ad-4eea-9b24-134754fede80.mp4\" width='100%' height='100%' />\n```\n\n----------------------------------------\n\nTITLE: Copying Public SSH Key to Remote Server for Podman Authentication - Shell\nDESCRIPTION: This snippet copies the user's SSH public key to the remote server to authorize remote access for Podman. It uses ssh-copy-id to append the public key to the server's ~/.ssh/authorized_keys. Dependencies include openssh and network access to the remote server. The -i flag specifies the public key file, and user@my-server-ip is replaced with the actual remote login. Successful execution enables passwordless SSH for subsequent Podman operations.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/podman-remote.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```sh\\n$ ssh-copy-id -i ~/.ssh/id_ed25519.pub user@my-server-ip\\n```\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly Image with Podman\nDESCRIPTION: This shell command builds the WebAssembly image using Podman. It specifies the wasi/wasm platform and tags the image as rust-hello-world-wasm.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2024-01-29-run-webassembly-wasm-workloads-windows-and-macos.md#2025-04-23_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ podman build --platform=wasi/wasm -t rust-hello-world-wasm .\n```\n\n----------------------------------------\n\nTITLE: Enabling WSL without Default Distribution on Windows\nDESCRIPTION: Runs the `wsl` command in the Windows Command Prompt to install the necessary Windows Subsystem for Linux (WSL) components without automatically installing a Linux distribution. This is a preparation step for setting up Podman Desktop in a restricted Windows environment.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/proxy/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n> wsl --install --no-distribution\n```\n\n----------------------------------------\n\nTITLE: Specifying Parent DevContainer Image\nDESCRIPTION: References the pre-built parent image from quay.io repository to avoid rebuilding the base image every time.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2022-11-17-develop-podman-using-codespaces.md#2025-04-23_snippet_11\n\nLANGUAGE: docker\nCODE:\n```\nFROM quay.io/podman-desktop/devcontainer-parent:next\n```\n\n----------------------------------------\n\nTITLE: Installing Patched QEMU EDK2 Firmware for Apple Silicon\nDESCRIPTION: This shell command downloads a compressed EDK2 firmware file (specifically patched for QEMU on Apple Silicon, related to lima-vm), decompresses it using `bunzip2`, and places the resulting `edk2-aarch64-code.fd` file into the specific QEMU installation directory managed by Homebrew (version 8.2.0 shown here). This replaces the default firmware to resolve startup issues on M3 processors.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -sL https://github.com/AkihiroSuda/qemu/raw/704f7cad5105246822686f65765ab92045f71a3b/pc-bios/edk2-aarch64-code.fd.bz2 | bunzip2 > /opt/homebrew/Cellar/qemu/8.2.0/share/qemu/edk2-aarch64-code.fd\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in Markdown/JSX\nDESCRIPTION: Imports the ReactPlayer component which is used throughout the document to display video demonstrations of Podman Desktop features.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-07-12-release-1.2.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Attempting SSH into Podman Machine (libkrun Issue)\nDESCRIPTION: This shell session output demonstrates the error received when trying to SSH into the default Podman machine (`podman machine ssh`) if that machine was created with the `libkrun` provider and the `CONTAINERS_MACHINE_PROVIDER` environment variable is not set to `libkrun`. The command fails because it cannot find the VM under the default provider (QEMU).\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine ssh\nError: vm podman-machine-default not found: podman-machine-default: VM does not exist\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Desktop Log File Sizes\nDESCRIPTION: Command to list and display the sizes of all Podman Desktop log files in the user's Library/Logs directory\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman-on-macos.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ ls -la ~/Library/Logs/Podman\\ Desktop/*.log\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Connections - Shell Session - Shell\nDESCRIPTION: This snippet lists all Podman system connections using \"podman system connection ls\". It displays information about connection names, URIs, identity files, and which is set as default. It is essential for diagnosing whether Podman is using rootful or rootless modes. Requires Podman 4.x or newer.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/troubleshooting/troubleshooting-podman.md#2025-04-23_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman system connection ls\n```\n\n----------------------------------------\n\nTITLE: Starting Podman Machine with Shell Commands - shell-session\nDESCRIPTION: Starts the Podman machine after configuration, enabling it to run in rootful mode as set previously. Assumes Podman is installed and the machine was previously configured in rootful mode. Outputs startup progress and confirmation.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/minikube/configuring-podman-for-minikube-on-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ podman machine start\n```\n\n----------------------------------------\n\nTITLE: Connecting to Podman Machine Shell - Shell Script\nDESCRIPTION: This shell command opens an interactive shell session inside the specified Podman machine. It assumes you have Podman installed and a valid machine name. The command enables users to perform administrative operations inside the dedicated Podman VM. No arguments other than the machine name are required; output is a shell prompt within the VM.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/docs/podman/adding-certificates-to-a-podman-machine.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ podman machine ssh <machine_name>\\n```\n```\n\n----------------------------------------\n\nTITLE: Pulling invalid image to verify mirror configuration\nDESCRIPTION: This command attempts to pull an invalid image from docker.io to verify the mirror configuration. If configured correctly, it should fail with an error message indicating that mirrors have also failed.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2025-03-06-mirror-registry-configuration-blog.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ podman pull docker.io/invalid\n```\n\n----------------------------------------\n\nTITLE: Importing ReactPlayer Component in JavaScript\nDESCRIPTION: Imports the ReactPlayer component from a module, likely for embedding video content in the blog post.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/blog/2023-06-08-release-1.1.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactPlayer from 'react-player'\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous deactivate Function Signature in TypeScript\nDESCRIPTION: Shows the function signature for a synchronous `deactivate` function in the extension's entry point (`src/extension.ts`). This function is called when the extension is deactivated for cleanup tasks.\nSOURCE: https://github.com/podman-desktop/podman-desktop/blob/main/website/tutorial/creating-an-extension.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport function deactivate(): void;\n```"
  }
]