[
  {
    "owner": "mapbox",
    "repo": "mapbox-maps-flutter",
    "content": "TITLE: Creating a Basic Map with MapWidget in Flutter\nDESCRIPTION: Basic setup for integrating a Mapbox map into a Flutter application using MapWidget. Imports necessary packages and initializes a simple map.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart';\n\nvoid main() {\n  runApp(MaterialApp(home: MapWidget()));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MapWidget with Controller in Stateful Widget\nDESCRIPTION: Shows how to implement a MapWidget in a stateful widget and store the MapboxMap controller for later interaction with the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass FullMap extends StatefulWidget {\n  const FullMap();\n\n  @override\n  State createState() => FullMapState();\n}\n\nclass FullMapState extends State<FullMap> {\n  MapboxMap? mapboxMap;\n\n  _onMapCreated(MapboxMap mapboxMap) {\n    this.mapboxMap = mapboxMap;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold(\n        body: MapWidget(\n      key: ValueKey(\"mapWidget\"),\n      onMapCreated: _onMapCreated,\n    ));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GeoJSON Source and Line Layer in Flutter Mapbox\nDESCRIPTION: Demonstrates how to load GeoJSON data from assets and create a line layer with custom styling properties including opacity, color, and width settings.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  var data = await rootBundle.loadString('assets/polyline.geojson');\n  await mapboxMap.style.addSource(GeoJsonSource(id: \"line\", data: data));\n  await mapboxMap.style.addLayer(LineLayer(\n      id: \"line_layer\",\n      sourceId: \"line\",\n      lineJoin: LineJoin.ROUND,\n      lineCap: LineCap.ROUND,\n      lineOpacity: 0.7,\n      lineColor: Colors.red.value,\n      lineWidth: 8.0));\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token in Flutter\nDESCRIPTION: Shows how to configure the Mapbox access token using MapboxOptions. This is required to authenticate with Mapbox services.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  MapboxOptions.setAccessToken(ACCESS_TOKEN);\n```\n\n----------------------------------------\n\nTITLE: Creating Annotations with Geometry in Dart\nDESCRIPTION: Demonstrates how to create point, polygon, and polyline annotations using geometry in Dart. The code shows both the old and new syntax for creating these annotations.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nPointAnnotationOptions(\n  geometry: Point(\n    coordinates: Position(0.381457, 6.687337)\n  )\n)\nPolygonAnnotationOptions(\n  geometry: Polygon(coordinates: [\n    [\n      Position(-3.363937, -10.733102),\n      Position(1.754703, -19.716317),\n      Position(-15.747196, -21.085074),\n      Position(-3.363937, -10.733102)\n    ]\n  ])\n)\nPolylineAnnotationOptions(\n  geometry: LineString(coordinates: [\n    Position(1.0, 2.0),\n    Position(10.0, 20.0)\n  ])\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Point Annotations with Custom Icons\nDESCRIPTION: Demonstrates how to create multiple point annotations on the map with custom icons loaded from app assets.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n  mapboxMap.annotations.createPointAnnotationManager().then((pointAnnotationManager) async {\n    final ByteData bytes =\n        await rootBundle.load('assets/symbols/custom-icon.png');\n    final Uint8List list = bytes.buffer.asUint8List();\n    var options = <PointAnnotationOptions>[];\n    for (var i = 0; i < 5; i++) {\n      options.add(PointAnnotationOptions(\n          geometry: Point.fromJson(createRandomPoint().toJson()), image: list));\n    }\n    pointAnnotationManager.createMulti(options);\n  });\n```\n\n----------------------------------------\n\nTITLE: Loading a Mapbox Style by URI\nDESCRIPTION: Shows how to load a predefined Mapbox style at runtime using the loadStyleURI method on the MapboxMap instance.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nmapboxMap.loadStyleURI(Styles.LIGHT);\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Expression to Line Layer in Flutter Mapbox\nDESCRIPTION: Shows how to apply an interpolated gradient color expression to a line layer using RGB values and line progress.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n  mapboxMap.style.setStyleLayerProperty(\"layer\", \"line-gradient\",\n      '[\"interpolate\",[\"linear\"],[\"line-progress\"],0.0,[\"rgb\",6,1,255],0.5,[\"rgb\",0,255,42],0.7,[\"rgb\",255,252,0],1.0,[\"rgb\",255,30,0]]');\n```\n\n----------------------------------------\n\nTITLE: Updating Camera Position at Runtime in Flutter Mapbox\nDESCRIPTION: Shows how to programmatically update the camera position during runtime using setCamera method.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nMapboxMap.setCamera(CameraOptions(\n  center: Point(coordinates: Position(-80.1263, 25.7845)).toJson(),\n  zoom: 12.0));\n```\n\n----------------------------------------\n\nTITLE: Animating Camera with FlyTo in Flutter Mapbox\nDESCRIPTION: Demonstrates how to animate the camera using flyTo with custom options including anchor point, zoom, bearing, pitch and animation duration.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n  mapboxMap?.flyTo(\n    CameraOptions(\n        anchor: ScreenCoordinate(x: 0, y: 0),\n        zoom: 17,\n        bearing: 180,\n        pitch: 30),\n    MapAnimationOptions(duration: 2000, startDelay: 0));\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Camera Position in Flutter Mapbox\nDESCRIPTION: Configures the initial camera position for a map widget with specific coordinates and zoom level.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nMapWidget(\n  key: ValueKey(\"mapWidget\"),\n  cameraOptions: CameraOptions(\n      center: Point(coordinates: Position(-80.1263, 25.7845)).toJson(),\n      zoom: 12.0),\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Location Puck in Mapbox Flutter\nDESCRIPTION: Example of customizing the user location indicator with a 3D model loaded from a remote URI instead of the default 2D puck.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  mapboxMap.location.updateSettings(LocationComponentSettings(\n      locationPuck: LocationPuck(\n          locationPuck3D: LocationPuck3D(\n              modelUri:\n                  \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Embedded/Duck.gltf\",))));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token from Environment Variables\nDESCRIPTION: Demonstrates how to retrieve the Mapbox access token from environment variables when passed via command line arguments or launch configuration.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nString ACCESS_TOKEN = String.fromEnvironment(\"ACCESS_TOKEN\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MapWidget with CameraViewportState in Dart\nDESCRIPTION: Shows how to use the new viewport support in MapWidget by specifying a CameraViewportState. This example centers the map on specific coordinates with a defined zoom level.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMapWidget(\n  viewport: CameraViewportState(\n    center: Point(coordinates: Position(-117.918976, 33.812092)),\n    zoom: 15.0,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onCameraChangeListener in Dart\nDESCRIPTION: Demonstrates how to use the onCameraChangeListener to observe map camera updates. This function prints the timestamp and camera state when the camera changes.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nonCameraChangeListener(CameraChangedEventData data) {\n  print(\"CameraChangedEventData: timestamp: ${data.timestamp}, cameraState: ${data.cameraState}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Gesture Listeners to MapWidget in Dart\nDESCRIPTION: Introduces gesture listeners for tap, long tap, and scroll events on the MapWidget in version 0.2.0, allowing developers to respond to user interactions with the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Dart\nCODE:\n```\nMapWidget(\n  onTapListener: (point, coordinates) {\n    // Handle tap\n  },\n  onLongTapListener: (point, coordinates) {\n    // Handle long tap\n  },\n  onScrollListener: (beginPoint, endPoint, beginCoordinates, endCoordinates) {\n    // Handle scroll\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Location Puck in Dart\nDESCRIPTION: Shows how to customize the appearance of the location puck (user's location indicator) using DefaultLocationPuck2D. This example demonstrates setting a custom top image and disabling the shadow image.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nmapboxMap?.location.updateSettings(LocationComponentSettings(\n    enabled: true,\n    puckBearingEnabled: true,\n    locationPuck:\n        LocationPuck(locationPuck2D: DefaultLocationPuck2D(topImage: list, shadowImage: Uint8List.fromList([])))\n));\n```\n\n----------------------------------------\n\nTITLE: Taking Snapshots of MapWidget in Dart\nDESCRIPTION: Demonstrates how to take snapshots of the current view of a MapWidget using the snapshot() method. This method captures the current state of the Mapbox map, including all visible layers and markers.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal snapshotImage = await mapboxMap.snapshot();\n```\n\n----------------------------------------\n\nTITLE: Adding TapInteraction for StandardBuildings in Dart\nDESCRIPTION: Demonstrates how to add a TapInteraction to the map that targets the StandardBuildings featureset. When a user taps on a building, it changes the building's state to highlight it and logs the building group.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar tapInteraction = TapInteraction(StandardBuildings(),\n    (_, feature) {\n  mapboxMap.setFeatureStateForFeaturesetFeature(feature, StandardBuildingsState(highlight: true));\n  log(\"Building group: ${feature.group}\");\n});\nmapboxMap.addInteraction(tapInteraction);\n```\n\n----------------------------------------\n\nTITLE: Partial GeoJSON Updates in Mapbox Maps Flutter\nDESCRIPTION: Demonstrates the new API for applying granular, partial GeoJSON updates instead of replacing the entire GeoJSON object, which is especially beneficial for sources with many features.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nmapboxMap.style.addGeoJSONSourceFeatures(sourceId, dataId, features)\nmapboxMap.style.updateGeoJSONSourceFeatures(sourceId, dataId, features)\nmapboxMap.style.removeGeoJSONSourceFeatures(sourceId, dataId, featureIds)\n```\n\n----------------------------------------\n\nTITLE: Using Data-Driven Properties on Annotation Managers\nDESCRIPTION: Shows how to set data-driven properties globally on annotation managers while specifying per-annotation overrides, allowing for more flexible styling of annotations.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal circleAnnotationManager = await mapboxMap.annotations.createCircleAnnotationManager();\nvar annotations = <CircleAnnotationOptions>[];\nfor (var i = 0; i < 2000; i++){\n  var annotation = CircleAnnotationOptions(\n    geometry: createRandomPoint(),\n    circleColor: (i % 2 == 0) ? createRandomColor() : null,\n    );\n\n  annotations.add(annotation);\n}\ncircleAnnotationManager.setCircleColor(Colors.blue.value);\n```\n\n----------------------------------------\n\nTITLE: Clearing Map Data in Mapbox Maps Flutter\nDESCRIPTION: Demonstrates how to clear temporary map data from the data path defined in resource options, which helps reduce disk usage or remove invalid data.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait MapboxMapsOptions.clearData();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Snapshotter in Dart\nDESCRIPTION: Shows how to create and use the Snapshotter class to take snapshots of maps. It includes setting up the Snapshotter with options, applying runtime styling, and starting the snapshot process.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal snapshotter = await Snapshotter.create(\n  options: MapSnapshotOptions(\n      size: Size(width: 400, height: 400),\n      pixelRatio: MediaQuery.of(context).devicePixelRatio),\n  onStyleLoadedListener: (_) {\n    // apply runtime styling\n    final layer = CircleLayer(id: \"circle-layer\", sourceId: \"poi-source\");\n    snapshotter?.style.addLayer(layer);\n  },\n);\nsnapshotter.style.setStyleURI(MapboxStyles.STANDARD);\nsnapshotter.setCamera(CameraOptions(center: Point(...)));\n\n...\n\nfinal snapshotImage = await snapshotter.start()\n```\n\n----------------------------------------\n\nTITLE: Using Typed Constructor for RenderedQueryGeometry in Dart\nDESCRIPTION: Shows the transition from using an untyped default constructor to using a typed constructor for RenderedQueryGeometry, which improves type safety and reduces runtime errors.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Using the untyped default constructor\nfinal geometry = RenderedQueryGeometry(type: Type.SCREEN_COORDINATE, value jsonEncode(screenCoordinate.encode()));\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Using a typed constructor\nfinal geometry = RenderedQueryGeometry.fromScreenCoordinate(screenCoordinate);\n```\n\n----------------------------------------\n\nTITLE: Exposing Turf Helpers Package in Dart\nDESCRIPTION: Exposes the 'package:turf/helpers.dart' in version 0.4.1, providing access to Turf.js geospatial analysis tools in the Flutter plugin.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:turf/helpers.dart';\n```\n\n----------------------------------------\n\nTITLE: Setting TileStore Options in Mapbox Maps Flutter\nDESCRIPTION: Shows how to set additional options to a TileStore, like maximum disk quota, which can be used to control tile storage behavior.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Set the disk quota to zero, so that tile regions are fully evicted\n// when removed.\n// This removes the tiles from the predictive cache.\ntileStore.setDiskQuota(0);\n```\n\n----------------------------------------\n\nTITLE: Updating Camera Methods Parameters in Dart\nDESCRIPTION: Makes the 'padding' parameter optional in cameraForCoordinateBounds() and cameraForCoordinates() methods of MapboxMap class in version 1.0.0-beta.2.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\nMapboxMap.cameraForCoordinateBounds();\nMapboxMap.cameraForCoordinates();\n```\n\n----------------------------------------\n\nTITLE: Updating MapboxMapsOptions Methods in Dart\nDESCRIPTION: Converts several MapboxMapsOptions methods to static methods in version 1.0.0-beta.2. This change affects how base URL, data path, asset path, and tile store usage mode are set and retrieved.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\nMapboxMapsOptions.setBaseUrl();\nMapboxMapsOptions.getDataPath();\nMapboxMapsOptions.setDataPath();\nMapboxMapsOptions.getAssetPath();\nMapboxMapsOptions.setAssetPath();\nMapboxMapsOptions.getTileStoreUsageMode();\nMapboxMapsOptions.setTileStoreUsageMode();\n```\n\n----------------------------------------\n\nTITLE: Renaming MapView to MapWidget in Dart\nDESCRIPTION: Renames the 'MapView' class to 'MapWidget' in version 0.2.0, reflecting its nature as a Flutter widget for displaying maps.\nSOURCE: https://github.com/mapbox/mapbox-maps-flutter/blob/main/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Dart\nCODE:\n```\n// Old\nMapView();\n\n// New\nMapWidget();\n```"
  }
]