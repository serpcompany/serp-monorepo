[
  {
    "owner": "magicstack",
    "repo": "asyncpg",
    "content": "TITLE: Building a Web Service with asyncpg Connection Pool\nDESCRIPTION: This comprehensive example demonstrates how to implement a simple web service using aiohttp and asyncpg's connection pooling. It shows proper initialization of a connection pool, acquiring connections for request handling, and transaction management within request handlers.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\nfrom aiohttp import web\n\n\nasync def handle(request):\n    \"\"\"Handle incoming requests.\"\"\"\n    pool = request.app['pool']\n    power = int(request.match_info.get('power', 10))\n\n    # Take a connection from the pool.\n    async with pool.acquire() as connection:\n        # Open a transaction.\n        async with connection.transaction():\n            # Run the query passing the request argument.\n            result = await connection.fetchval('select 2 ^ $1', power)\n            return web.Response(\n                text=\"2 ^ {} is {}\".format(power, result))\n\n\nasync def init_db(app):\n    \"\"\"Initialize a connection pool.\"\"\"\n     app['pool'] = await asyncpg.create_pool(database='postgres',\n                                             user='postgres')\n     yield\n     await app['pool'].close()\n\n \ndef init_app():\n    \"\"\"Initialize the application server.\"\"\"\n    app = web.Application()\n    # Create a database context\n    app.cleanup_ctx.append(init_db)\n    # Configure service routes\n    app.router.add_route('GET', '/{power:\\d+}', handle)\n    app.router.add_route('GET', '/', handle)\n    return app\n\n\napp = init_app()\nweb.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL and Performing Basic Operations with asyncpg in Python\nDESCRIPTION: This snippet demonstrates how to establish a connection to a PostgreSQL database, create a table, insert data, and fetch results using asyncpg. It showcases the asynchronous nature of the library and basic CRUD operations.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\nimport datetime\n\nasync def main():\n    # Establish a connection to an existing database named \"test\"\n    # as a \"postgres\" user.\n    conn = await asyncpg.connect('postgresql://postgres@localhost/test')\n    # Execute a statement to create a new table.\n    await conn.execute('''\n        CREATE TABLE users(\n            id serial PRIMARY KEY,\n            name text,\n            dob date\n        )\n    ''')\n\n    # Insert a record into the created table.\n    await conn.execute('''\n        INSERT INTO users(name, dob) VALUES($1, $2)\n    ''', 'Bob', datetime.date(1984, 3, 1))\n\n    # Select a row from the table.\n    row = await conn.fetchrow(\n        'SELECT * FROM users WHERE name = $1', 'Bob')\n    # *row* now contains\n    # asyncpg.Record(id=1, name='Bob', dob=datetime.date(1984, 3, 1))\n\n    # Close the connection.\n    await conn.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL and Executing a Query with asyncpg in Python\nDESCRIPTION: This snippet demonstrates how to establish a connection to a PostgreSQL database using asyncpg, execute a parameterized query, and close the connection. It utilizes Python's asyncio framework for asynchronous operation.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\n\nasync def run():\n    conn = await asyncpg.connect(user='user', password='password',\n                                 database='database', host='127.0.0.1')\n    values = await conn.fetch(\n        'SELECT * FROM mytable WHERE id = $1',\n        10,\n    )\n    await conn.close()\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with asyncpg in Python\nDESCRIPTION: This code snippet shows how to use transactions in asyncpg, including nested transactions. It demonstrates creating tables, inserting data, and handling rollbacks within transaction blocks.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/api/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with connection.transaction():\n    await connection.execute('CREATE TABLE mytab (a int)')\n\n    try:\n        # Create a nested transaction:\n        async with connection.transaction():\n            await connection.execute('INSERT INTO mytab (a) VALUES (1), (2)')\n            # This nested transaction will be automatically rolled back:\n            raise Exception\n    except:\n        # Ignore exception\n        pass\n\n    # Because the nested transaction was rolled back, there\n    # will be nothing in `mytab`.\n    assert await connection.fetch('SELECT a FROM mytab') == []\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with asyncpg\nDESCRIPTION: This simple example demonstrates the recommended way to use transactions in asyncpg using async context managers. The code shows how to wrap database operations in a transaction block that will automatically commit on successful completion or rollback on error.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync with connection.transaction():\n    await connection.execute(\"INSERT INTO mytable VALUES(1, 2, 3)\")\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statements with asyncpg in Python\nDESCRIPTION: This snippet demonstrates how to create and execute prepared statements using asyncpg. It connects to a database, prepares a SQL statement for calculating powers of 2, and executes it with different parameters.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/api/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import asyncpg, asyncio\n>>> async def run():\n...     conn = await asyncpg.connect()\n...     stmt = await conn.prepare('''SELECT 2 ^ $1''')\n...     print(await stmt.fetchval(10))\n...     print(await stmt.fetchval(20))\n...\n>>> asyncio.run(run())\n1024.0\n1048576.0\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Cursors with asyncpg in Python\nDESCRIPTION: This example demonstrates how to use cursors in asyncpg to efficiently iterate over large query results. It shows both automatic iteration using async for and manual cursor navigation.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/api/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def iterate(con: Connection):\n    async with con.transaction():\n        # Postgres requires non-scrollable cursors to be created\n        # and used in a transaction.\n        async for record in con.cursor('SELECT generate_series(0, 100)'):\n            print(record)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def iterate(con: Connection):\n    async with con.transaction():\n        # Postgres requires non-scrollable cursors to be created\n        # and used in a transaction.\n\n        # Create a Cursor object\n        cur = await con.cursor('SELECT generate_series(0, 100)')\n\n        # Move the cursor 10 rows forward\n        await cur.forward(10)\n\n        # Fetch one row and print it\n        print(await cur.fetchrow())\n\n        # Fetch a list of 5 rows and print it\n        print(await cur.fetch(5))\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statement Cursors with asyncpg in Python\nDESCRIPTION: This snippet shows how to create and use cursors from prepared statements in asyncpg. It prepares a statement with a parameter and then iterates over the results using a cursor.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/api/index.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def iterate(con: Connection):\n    # Create a prepared statement that will accept one argument\n    stmt = await con.prepare('SELECT generate_series(0, $1)')\n\n    async with con.transaction():\n        # Postgres requires non-scrollable cursors to be created\n        # and used in a transaction.\n\n        # Execute the prepared statement passing `10` as the\n        # argument -- that will generate a series or records\n        # from 0..10.  Iterate over all of them and print every\n        # record.\n        async for record in stmt.cursor(10):\n            print(record)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Record Class with Dot Notation Support in asyncpg\nDESCRIPTION: This snippet demonstrates how to create a custom Record class that implements dot-notation access to record fields. This class can be provided via the record_class argument to connect() or other Record-returning methods.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/faq.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyRecord(asyncpg.Record):\n    def __getattr__(self, name):\n        return self[name]\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Type Conversion with asyncpg\nDESCRIPTION: This snippet demonstrates how to configure asyncpg to automatically encode and decode JSON values using Python's built-in json module. It sets up a type codec for the PostgreSQL 'json' type that converts between Python dictionaries and JSON strings.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\nimport json\n\n\nasync def main():\n    conn = await asyncpg.connect()\n\n    try:\n        await conn.set_type_codec(\n            'json',\n            encoder=json.dumps,\n            decoder=json.loads,\n            schema='pg_catalog'\n        )\n\n        data = {'foo': 'bar', 'spam': 1}\n        res = await conn.fetchval('SELECT $1::json', data)\n\n    finally:\n        await conn.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring PostGIS Geometry Type Conversion in asyncpg\nDESCRIPTION: This snippet demonstrates how to set up automatic conversion of PostGIS geometry types using Shapely. It configures asyncpg to encode any Python object that conforms to the geo interface specification into WKB format for PostgreSQL, and decode WKB back into Shapely geometry objects.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\n\nimport shapely.geometry\nimport shapely.wkb\nfrom shapely.geometry.base import BaseGeometry\n\n\nasync def main():\n    conn = await asyncpg.connect()\n\n    try:\n        def encode_geometry(geometry):\n            if not hasattr(geometry, '__geo_interface__'):\n                raise TypeError('{g} does not conform to '\n                                'the geo interface'.format(g=geometry))\n            shape = shapely.geometry.shape(geometry)\n            return shapely.wkb.dumps(shape)\n\n        def decode_geometry(wkb):\n            return shapely.wkb.loads(wkb)\n\n        await conn.set_type_codec(\n            'geometry',  # also works for 'geography'\n            encoder=encode_geometry,\n            decoder=decode_geometry,\n            format='binary',\n        )\n\n        data = shapely.geometry.Point(-73.985661, 40.748447)\n        res = await conn.fetchrow(\n            '''SELECT 'Empire State Building' AS name,\n                      $1::geometry            AS coordinates\n            ''',\n            data)\n\n        print(res)\n\n    finally:\n        await conn.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Converting PostgreSQL Numeric Type to Python Floats in asyncpg\nDESCRIPTION: This example demonstrates how to override the default decimal.Decimal representation of PostgreSQL numeric types in asyncpg. It configures a type codec to convert numeric values to Python float objects during query execution.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\n\n\nasync def main():\n    conn = await asyncpg.connect()\n\n    try:\n        await conn.set_type_codec(\n            'numeric', encoder=str, decoder=float,\n            schema='pg_catalog', format='text'\n        )\n\n        res = await conn.fetchval(\"SELECT $1::numeric\", 11.123)\n        print(res, type(res))\n\n    finally:\n        await conn.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing hstore Type Conversion in asyncpg\nDESCRIPTION: This snippet shows how to configure asyncpg to work with PostgreSQL's hstore extension type, which stores key-value pairs. It registers a built-in codec to convert between Python dictionaries and hstore values using Connection.set_builtin_type_codec().\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpg\nimport asyncio\n\nasync def run():\n    conn = await asyncpg.connect()\n    # Assuming the hstore extension exists in the public schema.\n    await conn.set_builtin_type_codec(\n        'hstore', codec_name='pg_contrib.hstore')\n    result = await conn.fetchval(\"SELECT 'a=>1,b=>2,c=>NULL'::hstore\")\n    assert result == {'a': '1', 'b': '2', 'c': None}\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Number Type Codec in asyncpg\nDESCRIPTION: This example shows how to configure asyncpg to encode and decode Python complex numbers using a custom PostgreSQL composite type. It creates a custom 'mycomplex' type with real and imaginary components and sets up bidirectional conversion between Python complex objects and PostgreSQL tuples.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/usage.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport asyncpg\n\n\nasync def main():\n    conn = await asyncpg.connect()\n\n    try:\n        await conn.execute(\n            '''\n            CREATE TYPE mycomplex AS (\n                r float,\n                i float\n            );'''\n        )\n        await conn.set_type_codec(\n            'complex',\n            encoder=lambda x: (x.real, x.imag),\n            decoder=lambda t: complex(t[0], t[1]),\n            format='tuple',\n        )\n\n        res = await conn.fetchval('SELECT $1::mycomplex', (1+2j))\n\n    finally:\n        await conn.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing asyncpg using pip in Bash\nDESCRIPTION: This command installs the asyncpg library using pip. It is the recommended installation method when not using GSSAPI/SSPI authentication.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/installation.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install asyncpg\n```\n\n----------------------------------------\n\nTITLE: Installing asyncpg with GSSAPI/SSPI support using pip in Bash\nDESCRIPTION: This command installs asyncpg with GSSAPI/SSPI authentication support. It installs SSPI support on Windows and GSSAPI support on non-Windows platforms.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/installation.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install 'asyncpg[gssauth]'\n```\n\n----------------------------------------\n\nTITLE: Building asyncpg from source using pip in Bash\nDESCRIPTION: This command builds and installs asyncpg from a local source checkout. It requires a working C compiler and CPython header files.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/installation.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Building asyncpg with debug options using pip in Bash\nDESCRIPTION: This command builds asyncpg with additional runtime checks for debugging. It uses the ASYNCPG_DEBUG environment variable to enable the debug build.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/installation.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ env ASYNCPG_DEBUG=1 pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running asyncpg tests using setup.py in Bash\nDESCRIPTION: This command executes the test suite for asyncpg. It requires PostgreSQL to be installed on the system.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/installation.rst#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py test\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for asyncpg Documentation\nDESCRIPTION: This snippet lists the Python packages required for building the asyncpg documentation. It includes sphinxcontrib-asyncio for documenting asyncio code and sphinx_rtd_theme for the ReadTheDocs theme styling.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinxcontrib-asyncio\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in reStructuredText\nDESCRIPTION: This snippet shows how to include project status badges using reStructuredText syntax. It displays badges for GitHub Actions tests and PyPI status.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. image:: https://github.com/MagicStack/asyncpg/workflows/Tests/badge.svg\n   :target: https://github.com/MagicStack/asyncpg/actions?query=workflow%3ATests+branch%3Amaster\n   :alt: GitHub Actions status\n\n.. image:: https://img.shields.io/pypi/status/asyncpg.svg?maxAge=2592000?style=plastic\n    :target: https://pypi.python.org/pypi/asyncpg\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a table of contents in reStructuredText. It uses the 'toctree' directive to specify the structure and depth of the documentation.\nSOURCE: https://github.com/magicstack/asyncpg/blob/master/docs/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   installation\n   usage\n   api/index\n   faq\n```"
  }
]