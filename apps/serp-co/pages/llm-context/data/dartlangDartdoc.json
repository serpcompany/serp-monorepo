[
  {
    "owner": "dart-lang",
    "repo": "dartdoc",
    "content": "TITLE: Generating Dart Documentation Example\nDESCRIPTION: Example showing the command line output when generating documentation with dart doc\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n...\n$ dart doc .\nDocumenting dartdoc...\n...\nInitialized dartdoc with 766 libraries in 63.9 seconds\nGenerating docs for library dartdoc from package:dartdoc/dartdoc.dart...\nValidating docs...\nno issues found\nDocumented 1 public library in 17.9 seconds\nSuccess! Docs generated into <path to dartdoc>/doc/api\n```\n\n----------------------------------------\n\nTITLE: Generated Renderer Example in Dart for Mustachio Templating\nDESCRIPTION: This snippet demonstrates how Mustachio generates a renderer function for a specific type and pre-compiled static template. It includes examples of rendering plain text, variables, and different types of sections.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nString renderUser(User context0) {\n  final buffer = StringBuffer();\n  // ...\n  return buffer.toString();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n  buffer.write('''<h1>''');\n```\n\nLANGUAGE: dart\nCODE:\n```\n  buffer.write(htmlEscape.convert(context0.name.toString()));\n```\n\nLANGUAGE: dart\nCODE:\n```\n  if (context0.isFeatured) {\n    buffer.write('''<strong>Featured</strong>''');\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Local HTTP Server for Documentation\nDESCRIPTION: Commands to serve generated documentation using dhttpd package\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate dhttpd\n$ dart pub global run dhttpd --path doc/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Linking in Dartdoc YAML\nDESCRIPTION: Demonstrates how to set up source code linking in the dartdoc_options.yaml file.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlinkToSource:\n  root: '.'\n  uriTemplate: 'https://github.com/dart-lang/dartdoc/blob/v0.28.0/%f%#L%l%'\n```\n\n----------------------------------------\n\nTITLE: Mustache Template Example\nDESCRIPTION: A sample Mustache template demonstrating variable tags, section tags, and nested content rendering. This template shows how Mustache syntax is used to render dynamic content.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: mustache\nCODE:\n```\n<h1>{{ name }}</h1>\n{{ #hasDetails }}\n<ul>\n  {{ #details }}\n  <li>{{ text }}</li>\n  {{ /details }}\n</ul>\n{{ /hasDetails }}\n```\n\n----------------------------------------\n\nTITLE: Dartdoc Configuration Example\nDESCRIPTION: Example dartdoc_options.yaml configuration file showing various documentation settings including categories, linking, and warning controls\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndartdoc:\n  categories:\n    awesome:\n      markdown: doc/First.md\n      displayName: Awesome\n    great:\n      markdown: doc/Second.md\n      displayName: Great\n  categoryOrder: [awesome, great]\n  includeExternal: ['bin/unusually_located_library.dart']\n  nodoc: ['lib/sekret/*.dart']\n  linkTo:\n    url: \"https://my.dartdocumentationsite.org/dev/%v%\"\n  showUndocumentedCategories: true\n  ignore:\n    - ambiguous-doc-reference\n  errors:\n    - unresolved-doc-reference\n  warnings:\n    - tool-error\n```\n\n----------------------------------------\n\nTITLE: Running Dartdoc Tool Commands with task.dart in Bash\nDESCRIPTION: Various bash commands for testing and serving documentation with dartdoc's task.dart utility. These commands help contributors verify behavior changes, test modifications on packages, and compare performance between versions.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Serve the latest version of the given package locally on port 9000.\ndart run tool/task.dart serve package --name=intl\n\n# Build the SDK docs with the head version and compare its warning\n# output and (rough) performance to the main version.\ndart run tool/task.dart compare sdk-warnings\n\n# Serve the flutter docs built with the head version on port 8001.\ndart run tool/task.dart serve flutter\n\n# Serve the test package (testing/test_package) on port 8002\ndart run tool/task.dart serve testing-package\n```\n\n----------------------------------------\n\nTITLE: Rendering Sections in Dart for Mustachio Templating\nDESCRIPTION: This snippet demonstrates how Mustachio handles section rendering, including conditional sections, repeated sections, and value sections. It shows the logic for determining section type and rendering accordingly.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n    var key = node.key.first;\n    var property = getProperty(key);\n    if (property == null) {\n      if (parent == null) {\n        throw MustachioResolutionError(...);\n      } else {\n        return parent.section(node);\n      }\n    }\n```\n\nLANGUAGE: dart\nCODE:\n```\n    if (property.getBool != null) {\n      var boolResult = property.getBool(context);\n      if ((boolResult && !node.invert) || (!boolResult && node.invert)) {\n        renderBlock(node.children);\n      }\n      return;\n    }\n```\n\nLANGUAGE: dart\nCODE:\n```\n    if (property.renderIterable != null) {\n      var renderedIterable =\n          property.renderIterable(context, this, node.children);\n      if (node.invert && renderedIterable.isEmpty) {\n        // An inverted section is rendered with the current context.\n        renderBlock(node.children);\n      } else if (!node.invert && renderedIterable.isNotEmpty) {\n        var buffer = StringBuffer()..writeAll(renderedIterable);\n        write(buffer.toString());\n      }\n      // Otherwise, render nothing.\n\n      return;\n    }\n```\n\nLANGUAGE: dart\nCODE:\n```\n    if (node.invert && property.isNullValue(context)) {\n      renderBlock(node.children);\n    } else if (!node.invert && !property.isNullValue(context)) {\n      write(property.renderValue(context, this, node.children));\n    }\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for Categorized Dart Class\nDESCRIPTION: Shows the resulting JSON structure generated by Dartdoc for a class with category and subcategory tags.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"name\": \"Icon\",\n    \"qualifiedName\": \"widgets.Icon\",\n    \"href\": \"widgets/Icon-class.html\",\n    \"type\": \"class\",\n    \"categories\": [\n      \"Assets and Icons\",\n      \"Basics\"\n    ],\n    \"subcategories\": [\n      \"Information displays\"\n    ],\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Categories for Dart Class Documentation\nDESCRIPTION: Demonstrates how to use @category and @subCategory tags to categorize a Dart class for documentation purposes.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// {@category Basics}\n/// {@category Assets and Icons}\n/// {@subCategory Information displays}\nclass Icon extends StatelessWidget {}\n```\n\n----------------------------------------\n\nTITLE: Category Documentation Example\nDESCRIPTION: Example showing how to tag a library with a category using the @category annotation\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// Here is my library.\n///\n/// {@category awesome}\nlibrary my_library;\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials in Dart for Mustachio Templating\nDESCRIPTION: This snippet shows how Mustachio handles partial rendering, including resolving partial keys to file paths and templates, and rendering the partial within the current context.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n  void partial(Partial node) {\n    var key = node.key;\n    var partialFile = template.partials[key];\n    var partialTemplate = template.partialTemplates[partialFile];\n    var outerTemplate = _template;\n    _template = partialTemplate;\n    renderBlock(partialTemplate.ast);\n    _template = outerTemplate;\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering Repeated Sections in Dart\nDESCRIPTION: Example of Dart code generated for a Mustache template with a repeated section. The code loops through each item in context0.posts and writes the title to the output buffer.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n  var context1 = context0.posts;\n  if (context1 != null) {\n    for (var context2 in context1) {\n      buffer.write('''<h2>''');\n      buffer.write(htmlEscape.convert(context2.title.toString()));\n      buffer.write('''</h2>''');\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering Value Sections in Dart\nDESCRIPTION: Example of Dart code generated for a Mustache template with a value section. The code checks if context0.featuredPost is not null before writing its title to the output buffer.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n  var context2 = context0.featuredPost;\n  if (context2 != null) {\n    buffer.write('''<h2>''');\n    buffer.write(htmlEscape.convert(context2.title.toString()));\n    buffer.write('''</h2>''');\n  }\n```\n\n----------------------------------------\n\nTITLE: Resolving Variable Keys in Dart for Mustachio Templating\nDESCRIPTION: This snippet shows how Mustachio resolves variable keys, handling multi-part keys and context object properties. It includes error handling for unresolved variables.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n  String getFields(Variable node) {\n    var names = node.key;\n    if (names.length == 1 && names.single == '.') {\n      return context.toString();\n    }\n    var property = getProperty(names.first);\n    if (property != null) {\n      var remainingNames = [...names.skip(1)];\n      try {\n        return property.renderVariable(context, property, remainingNames);\n      } on PartialMustachioResolutionError catch (e) {\n        // The error thrown by [Property.renderVariable] does not have all of\n        // the names required for a decent error. We throw a new error here.\n        throw MustachioResolutionError(...);\n      }\n    } else if (parent != null) {\n      return parent.getFields(node);\n    } else {\n      throw MustachioResolutionError(...);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Macros in Dart Documentation\nDESCRIPTION: Demonstrates how to define and use reusable documentation templates (macros) in Dartdoc comments.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n/// {@template template_name}\n/// Some shared docs\n/// {@endtemplate}\n\n/// Some comment\n/// {@macro template_name}\n/// More comments\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Functions in Dart\nDESCRIPTION: Defines public and private render functions for converting objects into Mustache templates. The public function serves as an interface while the private function handles the actual rendering process.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nString renderUser(User context, Template template) {\n  return _render_User(context, template.ast, template);\n}\n\nString _render_User(User context, List<MustachioNode> ast, Template template,\n    {RendererBase<Object> parent}) {\n  var renderer = _Renderer_User(context, parent, template);\n  renderer.renderBlock(ast);\n  return renderer.buffer.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Using {@inject-html} Directive in Dartdoc\nDESCRIPTION: Example showing how to include unmodified HTML in Dartdoc using the inject-html directive. This directive requires the --inject-html flag and is not available for documentation published on pub.dev.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/doc/directives.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n/// {@inject-html}\n/// <p>Injected HTML.</p>\n/// {@end-inject-html}\n```\n\n----------------------------------------\n\nTITLE: Defining Renderer Class Structure\nDESCRIPTION: Implements the base renderer class structure with property mapping and getter functionality for the User class type.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Renderer_User extends RendererBase<User> {\n  static final Map<String, Property<CT_>> propertyMap<CT_ extends User>() => ...;\n\n  Renderer_User(User context, RendererBase<Object> parent, Template template)\n      : super(context, parent, template);\n\n  @override\n  Property<User> getProperty(String key) {\n    if (propertyMap<User>().containsKey(key)) {\n      return propertyMap<User>()[key];\n    } else {\n      return null;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using {@youtube} Directive in Dartdoc\nDESCRIPTION: Example showing how to embed YouTube videos in Dartdoc documentation. The directive requires width, height, and the YouTube video URL as parameters.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/doc/directives.md#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n/// {@youtube 320 240 https://www.youtube.com/watch?v=oHg5SJYRHA0}\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw HTML in Dart Documentation\nDESCRIPTION: Shows how to inject raw HTML into the documentation output, bypassing Markdown processing.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n  ///     {@inject-html}\n  ///     <p>[The HTML to inject.]()</p>\n  ///     {@end-inject-html}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Tools in Dartdoc YAML\nDESCRIPTION: Shows how to configure external tools in the dartdoc_options.yaml file for use in documentation processing.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndartdoc:\n  tools:\n    drill:\n      command: [\"bin/drill.dart\"]\n      setup_command: [\"bin/setup.dart\"]\n      description: \"Puts holes in things.\"\n      compile_args: [\"--no-sound-null-safety\"]\n    echo:\n      macos: ['/bin/sh', '-c', 'echo']\n      setup_macos: ['/bin/sh', '-c', 'setup.sh']\n      linux: ['/bin/sh', '-c', 'echo']\n      setup_linux: ['/bin/sh', '-c', 'setup.sh']\n      windows: ['C:\\\\Windows\\\\System32\\\\cmd.exe', '/c', 'echo']\n      setup_windows: ['/bin/sh', '-c', 'setup.sh']\n      description: 'Works on everything'\n```\n\n----------------------------------------\n\nTITLE: Using External Tools in Dart Documentation\nDESCRIPTION: Demonstrates how to invoke a configured external tool within a documentation comment.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n/// {@tool drill --flag --option=\"value\" $INPUT}\n/// This is the text that will be sent to the tool as input.\n/// {@end-tool}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodoc Option in YAML\nDESCRIPTION: Adds a 'nodoc' option in dartdoc_options.yaml to prevent all symbols in a file from being documented, similar to using @nodoc.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnodoc: \n```\n\n----------------------------------------\n\nTITLE: RenderIterable Function Implementation\nDESCRIPTION: Demonstrates the implementation of renderIterable for handling repeated sections in templates.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n(CT_ c, RendererBase<CT_> r, List<MustachioNode> ast) {\n  return c.posts.map(\n      (e) => _render_Post(e, ast, r.template, parent: r));\n}\n```\n\n----------------------------------------\n\nTITLE: RenderValue Function Implementation\nDESCRIPTION: Demonstrates the implementation of renderValue for handling non-null value sections.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n(CT_ c, RendererBase<CT_> r, List<MustachioNode> ast) {\n  return _render_UserProfile(c.profile, ast, r.template, parent: r);\n}\n```\n\n----------------------------------------\n\nTITLE: RenderBlock Method Implementation\nDESCRIPTION: Shows the main rendering logic for processing different types of Mustache nodes in the template.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n  /// Renders a block of Mustache template, the [ast], into [buffer].\n  void renderBlock(List<MustachioNode> ast) {\n    for (var node in ast) {\n      if (node is Text) {\n        write(node.content);\n      } else if (node is Variable) {\n        var content = getFields(node);\n        write(content);\n      } else if (node is Section) {\n        section(node);\n      } else if (node is Partial) {\n        partial(node);\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using {@canonicalFor} Directive in Dartdoc\nDESCRIPTION: Example showing how to specify the canonical library for a class using the canonicalFor directive. This overrides Dartdoc's default heuristics for determining the canonical location of an element.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/doc/directives.md#2025-04-22_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n/// {@canonicalFor some_library.SomeClass}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation in Dart Documentation\nDESCRIPTION: Shows how to specify a link to a video that will be handled by an HTML5 player in the documentation.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n/// This widget is a dancing Linux penguin.\n///\n/// {@animation name 100 200 http://host.com/path/to/video.mp4}\n```\n\n----------------------------------------\n\nTITLE: GetBool Function Implementation\nDESCRIPTION: Shows the implementation of a getBool function for handling boolean properties in conditional sections.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n(CT_ c) => c.isPublished == true\n```\n\n----------------------------------------\n\nTITLE: Using {@animation} Directive in Dartdoc\nDESCRIPTION: Example showing how to embed HTML5 videos in Dartdoc documentation using the animation directive. The directive accepts width and height arguments, plus an optional ID parameter.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/doc/directives.md#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n/// {@animation 320 240 URL [id=ID]}\n```\n\n----------------------------------------\n\nTITLE: GetValue Function Example\nDESCRIPTION: Demonstrates the implementation of a getValue function for accessing object properties.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n(CT_ c) => c.name\n```\n\n----------------------------------------\n\nTITLE: Rendering Home Template with Partials in HTML\nDESCRIPTION: An example HTML template demonstrating the use of sections and partials in Mustachio. It includes a loggedInUser section with a nested featuredPost section and an author partial.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<!-- home template -->\n{{ #loggedInUser }}\n  {{ #featuredPost }}\n    {{ #authors }}{{ >author }}{{ /authors }}\n  {{ /featuredPost }}\n{{ /loggedInUser }}\n\n<!-- _author partial -->\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Mustache Template for User Rendering\nDESCRIPTION: A Mustache template designed to render User objects, demonstrating nested object access, conditional sections, and list iteration through the User, UserProfile, and Post classes.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n<h1>{{ name }}</h1>\n{{ #profile }}\n  <img src=\"{{ avatarUrl }}\" />\n  <p>{{ biography }}</p>\n{{ /profile }}\n{{ #posts }}\n  {{ #isPublished }}\n    <div>\n      <h2>{{ title }}</h2>\n      <p>{{ content }}</h2>\n    </div>\n  {{ /isPublished }}\n{{ /posts }}\n```\n\n----------------------------------------\n\nTITLE: Mustache Template with Partial Example\nDESCRIPTION: HTML Mustache template that uses a partial to render posts. It iterates through posts and includes the post partial for each one.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n{{ #posts }}{{ >post }}{{ /posts }}\n```\n\n----------------------------------------\n\nTITLE: Post Partial Template Example\nDESCRIPTION: HTML Mustache template for the post partial that displays a post title and author name.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<h2>{{ title }}</h2>\n<p>by {{ name }}</p>\n```\n\n----------------------------------------\n\nTITLE: Featured Post Template Example\nDESCRIPTION: HTML Mustache template showing how to display a user name and conditionally show a featured post.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ name }}</h1>\n{{ #featuredPost }}{{ >post }}{{ /featuredPost }}\n```\n\n----------------------------------------\n\nTITLE: Generated Renderer Functions for Templates with Partials\nDESCRIPTION: Dart code showing two generated renderer functions: one for the main template and one for the partial. The partial function accepts multiple context parameters to access different scopes.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nString renderUser(User context0) {\n  final buffer = StringBuffer();\n  for (var context1 in context0.posts) {\n    buffer.write(_renderUser_partial_user_post_0(context1, context0));\n  }\n  return buffer.toString();\n}\n\nString _renderUser_partial_user_post_0(Post context1, User context0) {\n  final buffer = StringBuffer();\n  buffer.write('''<h2>''');\n  buffer.write(htmlEscape.convert(context1.title.toString()));\n  buffer.write('''</h2>\\n<p>by ''');\n  buffer.write(htmlEscape.convert(context0.name.toString()));\n  buffer.write('''</p>''');\n  return buffer.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grinder Command for Test Package Documentation\nDESCRIPTION: This command serves the documentation for the testing/test_package at http://localhost:8002/. It demonstrates the base href behavior with specific body tag attributes.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart run grinder serve-test-package-doc\n```\n\n----------------------------------------\n\nTITLE: Serving Pub Package Documentation with Grinder\nDESCRIPTION: This command serves documentation for a specified pub package. It uses environment variables to set the package name and version, and demonstrates different base href behaviors.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPACKAGE_NAME=collection PACKAGE_VERSION=1.17.0 dart run grinder serve-pub-package\n```\n\n----------------------------------------\n\nTITLE: Serving Flutter Documentation with Grinder\nDESCRIPTION: This command serves Flutter documentation, demonstrating the use of base href with a true setting. Note that this process is time-consuming.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub run grinder serve-flutter-docs\n```\n\n----------------------------------------\n\nTITLE: Creating Instance with ResourceProvider in Dart\nDESCRIPTION: Introduces a createInstance method for SnapshotCache and ToolTempFileTracker to handle the new ResourceProvider dependency.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ncreateInstance\n```\n\n----------------------------------------\n\nTITLE: Using ResourceProvider in Dart Classes\nDESCRIPTION: Adds a ResourceProvider field to multiple classes including DartdocFileWriter, SnapshotCache, DartToolDefinition, and others for improved I/O operations.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nResourceProvider resourceProvider\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Function\nDESCRIPTION: A JavaScript example showing function declaration with parameters and a return statement for adding two values.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = function(a, b) {\n  return a + b;  \n};\n```\n\n----------------------------------------\n\nTITLE: Implementing isSdkLibraryDocumented in Dart\nDESCRIPTION: Abstracts over SdkLibrary's isDocumented method, as it throws unimplemented for MockSdkLibrary.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nisSdkLibraryDocumented\n```\n\n----------------------------------------\n\nTITLE: Defining PackageConfigProvider in Dart\nDESCRIPTION: Introduces a new PackageConfigProvider class to abstract over PackageConfig from package_config. Includes PhysicalPackageConfigProvider for real usage and MemoryPackageConfigProvider for tests.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nPackageConfigProvider\n```\n\n----------------------------------------\n\nTITLE: Example Types for Mustachio Rendering\nDESCRIPTION: Defines abstract classes (User, UserProfile, Post) that demonstrate the type hierarchy used in Mustachio rendering examples. These classes show the property structure that would be accessed by Mustache templates.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nabstract class User {\n  String get name;\n  UserProfile get profile;\n  bool get isFeatured;\n  List<Post>? get posts;\n  Post? featuredPost;\n}\n\nabstract class UserProfile {\n  String get avatarUrl;\n  String get biography;\n}\n\nabstract class Post {\n  String get title;\n  String get content;\n  bool? get isPublished;\n}\n```\n\n----------------------------------------\n\nTITLE: Renderer Annotation and User Class Example\nDESCRIPTION: Dart code showing a Renderer annotation that specifies the template to use and the User class structure that will be rendered.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n@Renderer(#renderUser, Context<User>(), 'user')\n```\n\n----------------------------------------\n\nTITLE: User Class Definition for Mustache Templates\nDESCRIPTION: Dart abstract class that defines the User model with properties that will be accessed by Mustache templates.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nabstract class User {\n  String get name;\n  Post? get featuredPost;\n  List<Post> get posts;\n}\n```\n\n----------------------------------------\n\nTITLE: Property Class Interface Definition\nDESCRIPTION: Defines the Property class interface with various function types for handling different rendering scenarios including variables, iterables, and value sections.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Property<T> {\n  final Object Function(T context) getValue;\n  final String Function(T, Property<T>, List<String>) renderVariable;\n  final bool Function(T context) getBool;\n  final Iterable<String> Function(T, RendererBase<T>, List<MustachioNode>)\n      renderIterable;\n  final bool Function(T) isNullValue;\n  final String Function(T, RendererBase<T>, List<MustachioNode>) renderValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Numeric Variable in JavaScript\nDESCRIPTION: This code initializes a variable named 'test' and assigns it the numeric value 1. This is a basic demonstration of variable declaration and assignment in JavaScript.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/examples/test.dart.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar test = 1;\n```\n\n----------------------------------------\n\nTITLE: Renderer Cache Structure Example\nDESCRIPTION: Demonstrates the structure of the renderer cache used to track template compilers and renderer functions. Shows how paths map to renderers and context stacks map to renderer data.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_25\n\nLANGUAGE: none\nCODE:\n```\nrenderer cache: {\n  path1 -> renderers1 {\n                        [context0, context1] => (compiler1, renderer1)\n                        [context0, context1, context2] => (compiler2, renderer2)\n  }\n  path2 -> renderers2 {\n                        [context1, context2, context3] => (compiler3, renderer3)\n                        [context1, context3] => (compiler4, renderer4)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IsNullValue Function Example\nDESCRIPTION: Shows the implementation of isNullValue function for null checking in value sections.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/tool/mustachio/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n(CT_ c) => c.profile == null\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dart Main Function\nDESCRIPTION: A simple Dart main function example that demonstrates basic syntax. It includes a comment regarding Dart's 80-character line length convention.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // in Dart!\n}\n\n/*\n80-characters: to ensure default styles accommodate Dart line length convention.\n01234567890123456789012345678901234567890123456789012345678901234567890123456789\n*/\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Main Function Example\nDESCRIPTION: A simple Dart program showing the main function entry point. This is a minimal example that contains only a commented line indicating it's written in Dart.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package_imported/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // in Dart!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Data Structure\nDESCRIPTION: A YAML configuration example showing different value types including string lists and numeric values.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nand_yaml:\n  - value\n  - \"value\"\n  - 3.14\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: A sample YAML configuration snippet demonstrating different value types in a list. The example shows how to define a YAML map with a key containing an array of various data types including string, quoted string, and numeric values.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package_imported/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nand_yaml:\n  - value\n  - \"value\"\n  - 3.14\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Heading in HTML\nDESCRIPTION: This HTML snippet creates a level 1 heading with the text 'Hello World', where 'World' is bolded. It demonstrates the use of h1 and b tags for basic text formatting in HTML.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/examples/test.html.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Hello <b>World</b>!</h1>\n```\n\n----------------------------------------\n\nTITLE: Simple HTML Hello World\nDESCRIPTION: Basic HTML structure showing a heading with bold text formatting. Uses h1 tag for main heading and b tag for bold text.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/examples/test-template.dart.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Hello <b>World</b>!</h1>\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Content with Nested Elements\nDESCRIPTION: An HTML example showing nested elements including div, strong, and h1 tags for content structuring.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <strong>Hello!</strong>\n  <h1>World!</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Elements with CSS Selectors\nDESCRIPTION: CSS styling example demonstrating ID selectors, class selectors, and element selectors for background colors. References issue 1484 regression.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/testing/test_package/README.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* issue 1484 regression */\n#id {\n  background: green;\n}\n\n.class {\n  background: red;\n}\n\ndiv {\n  background: green;\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Markdown Alert Syntax Link\nDESCRIPTION: Markdown link syntax used in version 8.0.4 changelog entry referencing GitHub's markdown alert documentation\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[GitHub markdown alert syntax]: https://docs.github.com/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts\n```\n\n----------------------------------------\n\nTITLE: Version Number References in Markdown\nDESCRIPTION: Version headers using markdown syntax to denote different release versions of the dartdoc package.\nSOURCE: https://github.com/dart-lang/dartdoc/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 7.0.1\n## 7.0.0\n## 6.3.0\n## 6.2.2\n## 6.2.1\n## 6.2.0\n## 6.1.5\n## 6.1.4\n## 6.1.3\n## 6.1.2\n## 6.1.1\n## 6.1.0\n## 6.0.1\n## 6.0.0\n## 5.1.2\n## 5.1.1\n## 5.1.0\n## 5.0.1\n```"
  }
]