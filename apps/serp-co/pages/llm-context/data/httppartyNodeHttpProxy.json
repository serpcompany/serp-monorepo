[
  {
    "owner": "http-party",
    "repo": "node-http-proxy",
    "content": "TITLE: Setting Up a Basic Stand-alone Proxy Server\nDESCRIPTION: Creates a complete example of a stand-alone proxy server that forwards requests to a target server on localhost:9000. Includes both the proxy and target server implementation.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n//\n// Create your proxy server and set the target in the options.\n//\nhttpProxy.createProxyServer({target:'http://localhost:9000'}).listen(8000); // See (†)\n\n//\n// Create your target server\n//\nhttp.createServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('request successfully proxied!' + '\\n' + JSON.stringify(req.headers, true, 2));\n  res.end();\n}).listen(9000);\n```\n\n----------------------------------------\n\nTITLE: Proxying HTTP Requests in Node.js\nDESCRIPTION: Shows how to proxy HTTP requests by creating a server and using the proxy.web() method to forward requests to a target server. This is the basic pattern for HTTP proxying.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhttp.createServer(function(req, res) {\n  proxy.web(req, res, { target: 'http://mytarget.com:8080' });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTTP Proxy in Node.js\nDESCRIPTION: Demonstrates how to create a proxy server instance using the createProxyServer method. This is the core initialization pattern for node-http-proxy that doesn't create a web server unless listen() is invoked.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpProxy = require('http-proxy');\n\nvar proxy = httpProxy.createProxyServer(options); // See (†)\n```\n\n----------------------------------------\n\nTITLE: Handling Both HTTP and WebSocket Proxy Requests\nDESCRIPTION: Implements a proxy server that handles both standard HTTP requests and WebSocket connections by listening for the 'upgrade' event and using the appropriate proxy methods for each type of request.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n//\n// Setup our server to proxy standard HTTP requests\n//\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 9015\n  }\n});\nvar proxyServer = http.createServer(function (req, res) {\n  proxy.web(req, res);\n});\n\n//\n// Listen to the `upgrade` event and proxy the\n// WebSocket requests as well.\n//\nproxyServer.on('upgrade', function (req, socket, head) {\n  proxy.ws(req, socket, head);\n});\n\nproxyServer.listen(8015);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Proxy Server with Custom Logic\nDESCRIPTION: Creates a proxy server with custom application logic where you can process requests before forwarding them to the target. This pattern allows for request inspection and manipulation.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with custom application logic\n//\nvar proxy = httpProxy.createProxyServer({});\n\n//\n// Create your custom server and just call `proxy.web()` to proxy\n// a web request to the target passed in the options\n// also you can use `proxy.ws()` to proxy a websockets request\n//\nvar server = http.createServer(function(req, res) {\n  // You can define here your custom logic to handle the request\n  // and then proxy the request.\n  proxy.web(req, res, { target: 'http://127.0.0.1:5050' });\n});\n\nconsole.log(\"listening on port 5050\")\nserver.listen(5050);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Listeners on Node-HTTP-Proxy\nDESCRIPTION: Comprehensive example of setting up event listeners on a node-http-proxy instance. Shows how to handle errors, process response headers, monitor WebSocket events, and handle connection closure.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpProxy = require('http-proxy');\n// Error example\n//\n// Http Proxy Server with bad target\n//\nvar proxy = httpProxy.createServer({\n  target:'http://localhost:9005'\n});\n\nproxy.listen(8005);\n\n//\n// Listen for the `error` event on `proxy`.\nproxy.on('error', function (err, req, res) {\n  res.writeHead(500, {\n    'Content-Type': 'text/plain'\n  });\n\n  res.end('Something went wrong. And we are reporting a custom error message.');\n});\n\n//\n// Listen for the `proxyRes` event on `proxy`.\n//\nproxy.on('proxyRes', function (proxyRes, req, res) {\n  console.log('RAW Response from the target', JSON.stringify(proxyRes.headers, true, 2));\n});\n\n//\n// Listen for the `open` event on `proxy`.\n//\nproxy.on('open', function (proxySocket) {\n  // listen for messages coming FROM the target here\n  proxySocket.on('data', hybiParseAndLogMessage);\n});\n\n//\n// Listen for the `close` event on `proxy`.\n//\nproxy.on('close', function (res, socket, head) {\n  // view disconnected websocket connections\n  console.log('Client disconnected');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Proxy Server\nDESCRIPTION: Sets up a proxy server specifically for WebSocket connections by enabling the 'ws' option. This allows the proxy to handle WebSocket upgrade requests properly.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n//\n// Create a proxy server for websockets\n//\nhttpProxy.createServer({\n  target: 'ws://localhost:9014',\n  ws: true\n}).listen(8014);\n```\n\n----------------------------------------\n\nTITLE: Modifying Proxy Response with selfHandleResponse Option\nDESCRIPTION: Example demonstrating how to use the selfHandleResponse option to intercept and modify the proxy response. This code collects response data chunks, processes them, and sends a custom response back to the client.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar option = {\n  target: target,\n  selfHandleResponse : true\n};\nproxy.on('proxyRes', function (proxyRes, req, res) {\n    var body = [];\n    proxyRes.on('data', function (chunk) {\n        body.push(chunk);\n    });\n    proxyRes.on('end', function () {\n        body = Buffer.concat(body).toString();\n        console.log(\"res from proxied server:\", body);\n        res.end(\"my response to cli\");\n    });\n});\nproxy.web(req, res, option);\n```\n\n----------------------------------------\n\nTITLE: Modifying Proxy Request Headers\nDESCRIPTION: Demonstrates how to modify proxy request headers by listening for the 'proxyReq' event. This example adds a custom header to the proxied request before it's sent to the target.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with custom application logic\n//\nvar proxy = httpProxy.createProxyServer({});\n\n// To modify the proxy connection before data is sent, you can listen\n// for the 'proxyReq' event. When the event is fired, you will receive\n// the following arguments:\n// (http.ClientRequest proxyReq, http.IncomingMessage req,\n//  http.ServerResponse res, Object options). This mechanism is useful when\n// you need to modify the proxy request before the proxy connection\n// is made to the target.\n//\nproxy.on('proxyReq', function(proxyReq, req, res, options) {\n  proxyReq.setHeader('X-Special-Proxy-Header', 'foobar');\n});\n\nvar server = http.createServer(function(req, res) {\n  // You can define here your custom logic to handle the request\n  // and then proxy the request.\n  proxy.web(req, res, {\n    target: 'http://127.0.0.1:5050'\n  });\n});\n\nconsole.log(\"listening on port 5050\")\nserver.listen(5050);\n```\n\n----------------------------------------\n\nTITLE: Handling Proxy Errors with Event Emitter API\nDESCRIPTION: Demonstrates how to listen for and handle proxy errors using the Event Emitter API pattern. Errors can occur during proxying due to connection issues or other problems.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nproxy.on('error', function(e) {\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Request Body Buffer with Node-HTTP-Proxy\nDESCRIPTION: Example of buffering a request body and proxying it to a target server using node-http-proxy. This is useful when middleware reads the request stream before it's proxied.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst streamify = require('stream-array');\nconst HttpProxy = require('http-proxy');\nconst proxy = new HttpProxy();\n\nmodule.exports = (req, res, next) => {\n\n  proxy.web(req, res, {\n    target: 'http://localhost:4003/',\n    buffer: streamify(req.rawBody)\n  }, next);\n\n};\n```\n\n----------------------------------------\n\nTITLE: WebSocket Proxy Server Implementation\nDESCRIPTION: Example showing how to create a proxy server that handles both HTTP and WebSocket connections using the ws() method and upgrade event.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/UPGRADING.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 9015\n  }\n});\nvar proxyServer = http.createServer(function (req, res) {\n  proxy.web(req, res);\n});\n\n//\n// Listen to the `upgrade` event and proxy the\n// WebSocket requests as well.\n//\nproxyServer.on('upgrade', function (req, socket, head) {\n  proxy.ws(req, socket, head);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTPS Proxy Server for HTTPS Targets\nDESCRIPTION: Configures an HTTPS proxy server that forwards requests to an HTTPS target. This demonstrates proper SSL configuration for both the proxy server and target connection.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//\n// Create the proxy server listening on port 443\n//\nhttpProxy.createServer({\n  ssl: {\n    key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),\n    cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')\n  },\n  target: 'https://localhost:9010',\n  secure: true // Depends on your needs, could be false.\n}).listen(443);\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Proxy Server in Node.js\nDESCRIPTION: Basic example of creating and starting an HTTP proxy server targeting a local endpoint using the createServer method.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/UPGRADING.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhttpProxy.createServer({\n  target:'http://localhost:9003'\n}).listen(8003);\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTPS Proxy Server for HTTP Targets\nDESCRIPTION: Sets up an HTTPS proxy server that forwards requests to an HTTP target. This example demonstrates how to configure SSL for the proxy server when proxying from HTTPS to HTTP.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//\n// Create the HTTPS proxy server in front of a HTTP server\n//\nhttpProxy.createServer({\n  target: {\n    host: 'localhost',\n    port: 9009\n  },\n  ssl: {\n    key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),\n    cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')\n  }\n}).listen(8009);\n```\n\n----------------------------------------\n\nTITLE: Setting Up an HTTP Proxy Server with HTTPS Target and PKCS12 Client Certificate\nDESCRIPTION: Creates an HTTP proxy server that forwards requests to an HTTPS target using a PKCS12 client certificate. This shows how to authenticate the proxy to the target using client certificates.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n//\n// Create an HTTP proxy server with an HTTPS target\n//\nhttpProxy.createProxyServer({\n  target: {\n    protocol: 'https:',\n    host: 'my-domain-name',\n    port: 443,\n    pfx: fs.readFileSync('path/to/certificate.p12'),\n    passphrase: 'password',\n  },\n  changeOrigin: true,\n}).listen(8000);\n```\n\n----------------------------------------\n\nTITLE: Handling Proxy Errors with Callback API\nDESCRIPTION: Shows how to handle proxy errors using the callback pattern instead of the Event Emitter API. This approach provides an alternative way to capture and process errors.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nproxy.web(req, res, { target: 'http://mytarget.com:8080' }, function(e) { ... });\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Proxy Server with Custom Headers\nDESCRIPTION: Example of creating an HTTP proxy server targeting HTTPS endpoint (Google) with custom agent and headers configuration.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/UPGRADING.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhttpProxy.createProxyServer({\n  target: 'https://google.com',\n  agent : https.globalAgent,\n  headers: {\n    host: 'google.com'\n  }\n}).listen(8011);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Domain Rewrite with Object Mapping in Node-HTTP-Proxy\nDESCRIPTION: This example shows how to configure the cookieDomainRewrite option to map domains in set-cookie headers, demonstrating how to keep one domain unchanged, rewrite another domain, and remove all other domains.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncookieDomainRewrite: {\n  \"unchanged.domain\": \"unchanged.domain\",\n  \"old.domain\": \"new.domain\",\n  \"*\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Server with Simulated Latency\nDESCRIPTION: Implements a proxy server that introduces artificial latency by delaying requests using setTimeout. This can be useful for testing how applications handle network delays.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar http = require('http'),\n    httpProxy = require('http-proxy');\n\n//\n// Create a proxy server with latency\n//\nvar proxy = httpProxy.createProxyServer();\n\n//\n// Create your server that makes an operation that waits a while\n// and then proxies the request\n//\nhttp.createServer(function (req, res) {\n  // This simulates an operation that takes 500ms to execute\n  setTimeout(function () {\n    proxy.web(req, res, {\n      target: 'http://localhost:9008'\n    });\n  }, 500);\n}).listen(8008);\n\n//\n// Create your target server\n//\nhttp.createServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.write('request successfully proxied to: ' + req.url + '\\n' + JSON.stringify(req.headers, true, 2));\n  res.end();\n}).listen(9008);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Path Rewrite with Object Mapping in Node-HTTP-Proxy\nDESCRIPTION: This example shows how to configure the cookiePathRewrite option to map paths in set-cookie headers, demonstrating how to keep one path unchanged, rewrite another path, and remove all other paths.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncookiePathRewrite: {\n  \"/unchanged.path/\": \"/unchanged.path/\",\n  \"/old.path/\": \"/new.path/\",\n  \"*\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in HTTP Proxy Server\nDESCRIPTION: Demonstrates how to implement error handling in an HTTP proxy server using the error event listener with custom error response.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/UPGRADING.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar proxy = httpProxy.createServer({\n  target:'http://localhost:9005'\n});\n\n//\n// Tell the proxy to listen on port 8000\n//\nproxy.listen(8005);\n\n//\n// Listen for the `error` event on `proxy`.\nproxy.on('error', function (err, req, res) {\n  res.writeHead(500, {\n    'Content-Type': 'text/plain'\n  });\n  \n  res.end('Something went wrong. And we are reporting a custom error message.');\n});\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Node-HTTP-Proxy Server\nDESCRIPTION: Example showing how to properly shut down a node-http-proxy server. This is useful when running the proxy within tests or other programs where you need to close connections.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar proxy = new httpProxy.createProxyServer({\n  target: {\n    host: 'localhost',\n    port: 1337\n  }\n});\n\nproxy.close();\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Benchmark Setup Commands\nDESCRIPTION: Commands for running a simple HTTP benchmark scenario using node-http-proxy. This requires three separate terminal sessions: one running the proxy server, one running the target server, and one executing the wrk benchmarking tool with specified parameters.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/benchmark/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode benchmark/scripts/proxy.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode benchmark/scripts/hello.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nwrk -c 20 -d5m -t 2 http://127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: Using wrk HTTP Benchmarking Tool\nDESCRIPTION: Displays the usage information for wrk, a modern HTTP benchmarking tool used for performance testing. This command shows available options for connections, duration, threads, and other parameters needed to properly configure benchmarking tests.\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/benchmark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wrk\nUsage: wrk <options> <url>                            \n  Options:                                            \n    -c, --connections <N>  Connections to keep open   \n    -d, --duration    <T>  Duration of test           \n    -t, --threads     <N>  Number of threads to use   \n                                                      \n    -s, --script      <S>  Load Lua script file       \n    -H, --header      <H>  Add header to request      \n        --latency          Print latency statistics   \n        --timeout     <T>  Socket/request timeout     \n    -v, --version          Print version details      \n                                                      \n  Numeric arguments may include a SI unit (1k, 1M, 1G)\n  Time arguments may include a time unit (2s, 2m, 2h)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Format\nDESCRIPTION: The standard format used for changelog entries showing version, date, and commit information\nSOURCE: https://github.com/http-party/node-http-proxy/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [v0.5.1](https://github.com/http-party/node-http-proxy/compare/v0.5.0...v0.5.1) - 2011-05-10\n\n### Commits\n\n- [dist] Version bump. 0.5.1. Only good on node v0.4.7. See issue #48.\n```"
  }
]