[
  {
    "owner": "cysharp",
    "repo": "zstring",
    "content": "TITLE: Using ZString Methods for String Operations in C#\nDESCRIPTION: Demonstrates basic usage of ZString methods including Concat, Format, Join, StringBuilder operations, and prepared formats. Also shows Unity-specific TextMeshPro integration and UTF8 buffer management.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Cysharp.Text; // namespace\n\nasync void Example(int x, int y, int z)\n{\n    // same as x + y + z\n    _ = ZString.Concat(x, y, z);\n\n    // also can use numeric format strings\n    _ = ZString.Format(\"x:{0}, y:{1:000}, z:{2:P}\",x, y, z);\n\n    _ = ZString.Join(',', x, y, z);\n\n    // for Unity, direct write(avoid string allocation completely) to TextMeshPro\n    tmp.SetTextFormat(\"Position: {0}, {1}, {2}\", x, y, z);\n\n    // create StringBuilder\n    using(var sb = ZString.CreateStringBuilder())\n    {\n        sb.Append(\"foo\");\n        sb.AppendLine(42);\n        sb.AppendFormat(\"{0} {1:.###}\", \"bar\", 123.456789);\n\n        // and build final string\n        var str = sb.ToString();\n\n        // for Unity, direct write to TextMeshPro\n        tmp.SetText(sb);\n\n        // write to destination buffer\n        sb.TryCopyTo(dest, out var written);\n    }\n\n    // prepare format, return value should store to field(like RegexOptions.Compile)\n    var prepared = ZString.PrepareUtf16<int, int>(\"x:{0}, y:{1:000}\");\n    _ = prepared.Format(10, 20);\n\n    // C# 8.0, Using declarations\n    // create Utf8 StringBuilder that build Utf8 directly to avoid encoding\n    using var sb2 = ZString.CreateUtf8StringBuilder();\n\n    sb2.AppendFormat(\"foo:{0} bar:{1}\", x, y);\n\n    // directly write to steam or dest to avoid allocation\n    await sb2.WriteToAsync(stream);\n    sb2.CopyTo(bufferWritter);\n    sb2.TryCopyTo(dest, out var written);\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Comparison in C#\nDESCRIPTION: Code examples demonstrating different string concatenation approaches, showing the performance difference between standard string operations and ZString alternatives. The examples show various methods of combining strings with variables x, y, and z.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"x:\" + x + \" y:\" + y + \" z:\" + z\n```\n\nLANGUAGE: C#\nCODE:\n```\nZString.Concat(\"x:\", x, \" y:\", y, \" z:\", z)\n```\n\nLANGUAGE: C#\nCODE:\n```\nstring.Format(\"x:{0} y:{1} z:{2}\", x, y, z)\n```\n\nLANGUAGE: C#\nCODE:\n```\nZString.Format(\"x:{0} y:{1} z:{2}\", x, y, z)\n```\n\nLANGUAGE: C#\nCODE:\n```\nnew StringBuilder(), Append(), .ToString()\n```\n\nLANGUAGE: C#\nCODE:\n```\nZString.CreateStringBuilder(), Append(), .ToString()\n```\n\n----------------------------------------\n\nTITLE: Safe Usage of Mutable Struct StringBuilders in ZString with C#\nDESCRIPTION: Illustrates the correct way to use Utf16ValueStringBuilder and Utf8ValueStringBuilder, which are mutable structs, using ref and try-finally to avoid unintended copying.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid Build()\n{\n    var sb = ZString.CreateStringBuilder();\n    try\n    {\n        BuildHeader(ref sb);\n        BuildMessage(ref sb);\n    }\n    finally\n    {\n        // when use with `ref`, can not use `using`.\n        sb.Dispose();\n    }\n}\n\n\nvoid BuildHeader(ref Utf16ValueStringBuilder builder)\n{\n    //..\n}\n\nvoid BuildMessage(ref Utf16ValueStringBuilder builder)\n{\n    //..\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ZString.CreateStringBuilder with ThreadStatic Buffer in C#\nDESCRIPTION: Shows the proper way to use ZString.CreateStringBuilder with notNested set to true, returning the buffer immediately to avoid conflicts.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// OK, return buffer immediately.\nusing(var sb = ZString.CreateStringBuilder(true))\n{\n    sb.Append(\"foo\");\n    return sb.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Formatters for ZString in C#\nDESCRIPTION: Demonstrates how to register custom formatters for both Utf16ValueStringBuilder and Utf8ValueStringBuilder to avoid string conversion for custom types.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nUtf16ValueStringBuilder.RegisterTryFormat((MyStruct value, Span<char> destination, out int charsWritten, ReadOnlySpan<char> format) =>\n{\n    // write value to destionation and set size to charsWritten.\n    charsWritten = 0;\n    return true;\n});\n\nUtf8ValueStringBuilder.RegisterTryFormat((MyStruct value, Span<byte> destination, out int written, StandardFormat format) =>\n{\n    written = 0;\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Using ZString.CreateStringBuilder with ThreadStatic Buffer in C#\nDESCRIPTION: Demonstrates the usage of ZString.CreateStringBuilder with the notNested parameter set to true, which uses a ThreadStatic buffer for optimization. It also shows limitations of nested usage and conflicts with other ZString methods.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing(var sb = ZString.CreateStringBuilder(true))\n{\n    sb.Append(\"foo\");\n\n    using var sb2 = ZString.CreateStringBuilder(true); // NG, nested stringbuilder uses conflicted same buffer\n    var str = ZString.Concat(\"x\", 100); // NG, ZString.Concat/Join/Format uses threadstatic buffer\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZString with System.Text.Json Serialization in C#\nDESCRIPTION: Shows how to use Utf8ValueStringBuilder with System.Text.Json serialization, demonstrating proper handling of boxing and unboxing to avoid issues with mutable structs.\nSOURCE: https://github.com/cysharp/zstring/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing var sb = ZString.CreateUtf8StringBuilder();\nIBufferWriter<byte> boxed = sb;\nvar writer = new Utf8JsonWriter(boxed);\nJsonSerializer.Serialize(writer, ....);\n\nusing var unboxed = (Utf8ValueStringBuilder)boxed;\nvar str = unboxed.ToString();\n```\n\n----------------------------------------\n\nTITLE: Defining Unity Editor Version in YAML\nDESCRIPTION: This snippet defines the Unity editor version used for the project. It specifies both the base version (2021.3.41f1) and the full version with revision number (2021.3.41f1 with revision 6c5a9e20c022).\nSOURCE: https://github.com/cysharp/zstring/blob/master/src/ZString.Unity/ProjectSettings/ProjectVersion.txt#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nm_EditorVersion: 2021.3.41f1\nm_EditorVersionWithRevision: 2021.3.41f1 (6c5a9e20c022)\n```"
  }
]