[
  {
    "owner": "refactoringguru",
    "repo": "design-patterns-cpp",
    "content": "TITLE: Creating Decorated Component with Multiple Decorators in C++\nDESCRIPTION: This snippet demonstrates the creation of a decorated component using multiple decorators. It shows how ConcreteDecoratorB and ConcreteDecoratorA are applied to a ConcreteComponent.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Decorator/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n```\n\n----------------------------------------\n\nTITLE: Executing Chain of Responsibility Pattern with Animal Handlers in C++\nDESCRIPTION: This code snippet demonstrates the Chain of Responsibility pattern using animal classes as handlers for different food items. It shows how requests are passed along the chain until they are handled or reach the end unhandled.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/ChainOfResponsibility/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nChain: Monkey > Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Monkey: I'll eat the Banana.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n\nSubchain: Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Banana was left untouched.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Visitor Pattern with ConcreteVisitor1 in C++\nDESCRIPTION: This code snippet shows how client code interacts with ConcreteVisitor1 through the base Visitor interface. It demonstrates the pattern's ability to add new operations to existing object structures without modifying them.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Visitor/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nA + ConcreteVisitor1\nB + ConcreteVisitor1\n```\n\n----------------------------------------\n\nTITLE: Proxy Pattern Execution Log in C++\nDESCRIPTION: Console output from running a Proxy pattern implementation showing the flow of execution between Client, Proxy, and RealSubject. The output demonstrates how the Proxy intercepts calls, performs access control, delegates to the real implementation, and adds logging functionality.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Proxy/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClient: Executing the client code with a real subject:\nRealSubject: Handling request.\n\nClient: Executing the same client code with a proxy:\nProxy: Checking access prior to firing a real request.\nRealSubject: Handling request.\nProxy: Logging the time of request.\n```\n\n----------------------------------------\n\nTITLE: Executing Template Method Pattern with ConcreteClass1 in C++\nDESCRIPTION: This snippet demonstrates the execution flow of the Template Method pattern using ConcreteClass1. It shows how the AbstractClass handles the main algorithm while allowing ConcreteClass1 to implement specific operations.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/TemplateMethod/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nAbstractClass says: I am doing the bulk of the work\nConcreteClass1 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass1 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n```\n\n----------------------------------------\n\nTITLE: Applying Visitor Pattern with ConcreteVisitor2 in C++\nDESCRIPTION: This snippet illustrates the use of ConcreteVisitor2 with the same object structure (A and B). It showcases how the Visitor pattern allows for easy addition of new operations without changing the classes of the elements on which it operates.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Visitor/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nA + ConcreteVisitor2\nB + ConcreteVisitor2\n```\n\n----------------------------------------\n\nTITLE: Iterating over custom class objects using C++ Iterator\nDESCRIPTION: This code snippet illustrates the use of an iterator with a custom class. It iterates through objects with values 100, 1000, and 10000, demonstrating how iterators can be used with user-defined types.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Iterator/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n________________Iterator with custom Class______________________________\n100\n1000\n10000\n```\n\n----------------------------------------\n\nTITLE: Executing Template Method Pattern with ConcreteClass2 in C++\nDESCRIPTION: This snippet illustrates the Template Method pattern's execution using ConcreteClass2. It highlights how ConcreteClass2 can override different operations and hooks while still following the main algorithm defined in AbstractClass.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/TemplateMethod/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nAbstractClass says: I am doing the bulk of the work\nConcreteClass2 says: Implemented Operation1\nAbstractClass says: But I let subclasses override some operations\nConcreteClass2 says: Overridden Hook1\nConcreteClass2 says: Implemented Operation2\nAbstractClass says: But I am doing the bulk of the work anyway\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bridge Pattern Output Structure\nDESCRIPTION: Shows the output format of different concrete implementations when using the Bridge pattern. This includes base and extended operations across platforms A and B.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Bridge/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAbstraction: Base operation with:\nConcreteImplementationA: Here's the result on the platform A.\n\nExtendedAbstraction: Extended operation with:\nConcreteImplementationB: Here's the result on the platform B.\n```\n\n----------------------------------------\n\nTITLE: Displaying Composite Tree Structure\nDESCRIPTION: Demonstrates a nested composite tree structure with multiple branches and leaves.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Composite/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf))\n```\n\n----------------------------------------\n\nTITLE: Executing Subsystem Actions through Facade in C++\nDESCRIPTION: This snippet displays the output when a Facade orders two subsystems to perform actions. It shows how the Facade provides a simplified interface for clients to interact with complex subsystems.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Facade/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nFacade orders subsystems to perform the action:\nSubsystem1: Go!\nSubsystem2: Fire!\n```\n\n----------------------------------------\n\nTITLE: Iterating over integers using C++ Iterator\nDESCRIPTION: This code snippet demonstrates the use of an iterator to traverse through a collection of integers from 0 to 9. It showcases the basic functionality of iterators in C++.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Iterator/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n________________Iterator with int______________________________________\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n\n----------------------------------------\n\nTITLE: Displaying Modified Composite Tree\nDESCRIPTION: Shows an expanded composite tree structure with an additional leaf node, demonstrating transparent handling of both composite and leaf nodes.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Composite/Conceptual/Output.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRESULT: Branch(Branch(Leaf+Leaf)+Branch(Leaf)+Leaf)\n```\n\n----------------------------------------\n\nTITLE: Displaying Singleton Test Results in C++\nDESCRIPTION: This code snippet shows the output of a Singleton pattern test. It prints 'FOO' twice, indicating that the same Singleton instance was successfully reused across multiple accesses.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Singleton/Conceptual/ThreadSafe/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nRESULT:\nFOO\nFOO\n```\n\n----------------------------------------\n\nTITLE: Initializing Subsystems with Facade in C++\nDESCRIPTION: This snippet shows the output when a Facade initializes two subsystems. It demonstrates how the Facade encapsulates the complexity of subsystem initialization.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Facade/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nFacade initializes subsystems:\nSubsystem1: Ready!\nSubsystem2: Get ready!\n```\n\n----------------------------------------\n\nTITLE: Initializing ConcreteComponent in C++\nDESCRIPTION: This snippet shows the creation of a simple ConcreteComponent object. It represents the base component in the Decorator pattern.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Decorator/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nConcreteComponent\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Document Structure\nDESCRIPTION: A simple HTML document structure with a body tag containing a main title (h1), two subtitles (h2), and placeholder text paragraphs.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Builder/RealWorld/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n<h1>Title of the Page</h1>\n<h2>Subtitle A</h2>\n<p>Lorem ipsum dolor sit amet, ...</p>\n<h2>Subtitle B</h2>\n<p>... consectetur adipiscing elit.</p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Displaying Leaf Component Output\nDESCRIPTION: Shows the string representation of a simple leaf component in the composite pattern.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Composite/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRESULT: Leaf\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Items in JSON\nDESCRIPTION: This JSON object defines a menu array containing food and drink items. Each item has properties like item type, name, nutritional information, and dietary labels.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/src/Visitor/RealWorld/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"menu\":[{\"item\":\"food\",\"name\":\"Borscht\",\"calories\":\"160kcal\",\"label\":\"meat\"},{\"item\":\"food\",\"name\":\"Samosa\",\"calories\":\"250kcal\",\"label\":\"vegetarian\"},{\"item\":\"food\",\"name\":\"Sushi\",\"calories\":\"300kcal\",\"label\":\"fish\"},{\"item\":\"food\",\"name\":\"Quinoa\",\"calories\":\"350kcal\",\"label\":\"vegan\"},{\"item\":\"drink\",\"name\":\"Vodka\",\"volume\":\"25ml\",\"label\":\"alcholic\"},{\"item\":\"drink\",\"name\":\"Chai\",\"volume\":\"120ml\",\"label\":\"hot\"},{\"item\":\"drink\",\"name\":\"Sake\",\"volume\":\"180ml\",\"label\":\"alcholic\"},{\"item\":\"drink\",\"name\":\"Kola\",\"volume\":\"355ml\",\"label\":\"cold\"}]}\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Task for C++ Compilation\nDESCRIPTION: JSON configuration for setting up a VSCode build task using g++ compiler with C++17 support. This task configuration enables building C++ files with debugging information enabled.\nSOURCE: https://github.com/refactoringguru/design-patterns-cpp/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"build\",\n            \"type\": \"shell\",\n            \"command\": \"g++ -g -std=c++17 Conceptual/main.cc -o main\",\n            \"group\":{\n                \"kind\": \"build\",\n                \"isDefault\": true    \n            },\n            \"problemMatcher\":\"$gcc\"\n        }\n    ]\n}\n```"
  }
]