[
  {
    "owner": "euler-xyz",
    "repo": "ethereum-vault-connector",
    "content": "TITLE: Executing Calls through EVC in Solidity\nDESCRIPTION: The call function allows users to invoke functions on vaults and other target contracts through the EVC. It handles authentication, context creation, and value forwarding. This function is crucial for maintaining proper authorization and enabling sub-account functionality.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction call(address target, uint256 value, bytes memory data, address onBehalfOfAccount) external payable returns (bytes memory)\n```\n\n----------------------------------------\n\nTITLE: Executing Batched Operations in EVC\nDESCRIPTION: The batch function enables multiple operations to be executed atomically within a single transaction. It provides benefits such as atomicity, gas savings, and deferred status checks. Batches can include calls to both the EVC itself and external contracts.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction batch(BatchItem[] memory items) external payable returns (bytes[] memory)\n```\n\n----------------------------------------\n\nTITLE: Authorization Flow for Account Operations in EVC\nDESCRIPTION: Details how the EVC determines whether a caller is authorized to perform operations on behalf of an account. Includes logic for sub-accounts, operators, and permit-based authorization through the EVC itself.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* If `msg.sender` has never before interacted with the EVC, if it shares the first 19 bytes with the `onBehalfOfAccount`, then `onBehalfOfAccount` is considered to be a *sub-account* of `msg.sender` and therefore `msg.sender` is authorised. Upon that first interaction with the EVC, `msg.sender` address is stored in EVC's storage as an owner of the group of 256 accounts having the same first 19 bytes.\n* If `msg.sender` has interacted with the EVC before and it shares the first 19 bytes with the `onBehalfOfAccount`, its address is supposed to match the one stored in the EVC's storage. If it does, then it is authorised.\n* If `msg.sender` has previously been authorized as an [operator](#operators) for the `onBehalfOfAccount`, it is authorised.\n* If the `msg.sender` is the EVC itself, then this must be from a permit and the effective sender is taken from the execution context\n* In all other cases, the caller is invalid, and the entire transaction will fail.\n```\n\n----------------------------------------\n\nTITLE: Executing Signed Permits in EVC\nDESCRIPTION: The permit function allows execution of signed messages (permits) on behalf of the signer. It supports both ECDSA and ERC-1271 signatures, enabling gasless transactions and interactions with smart contract wallets. Permits can affect multiple sub-accounts and are useful for restricted operator scenarios.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction permit(address signer, address sender, uint256 nonce, uint256 nonceName, uint256 deadline, uint256 value, bytes calldata data, bytes calldata signature) external payable returns (bytes memory)\n```\n\n----------------------------------------\n\nTITLE: Execution Context Management for Deferred Validation\nDESCRIPTION: Explains how the EVC manages execution contexts to defer validation checks until the end of transactions, allowing temporary constraint violations while ensuring final state validity. Includes handling of nested contexts and reentrancy protection.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nWhen the execution context ends, the address sets are iterated over:\n\n* For each address in `accountStatusChecks`, confirm that at most one controller is installed (its `accountControllers` set is of size 0 or 1). If a controller is installed, invoke `checkAccountStatus` on the controller for this account and ensure that the controller is satisfied. If no controller is installed, `checkAccountStatus` is not invoked and the account status is considered valid by default. Hence, [`disableController`](#controller) must be used with care.\n* For each address in `vaultStatusChecks`, call `checkVaultStatus` on the vault address stored in the set and ensure that the vault is satisfied.\n```\n\n----------------------------------------\n\nTITLE: Controlling Collateral in EVC\nDESCRIPTION: The controlCollateral function allows a controller vault to invoke functions on a collateral vault on behalf of an account under its control. This is typically used for liquidations, where the controller can seize collateral assets to repay debt.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction controlCollateral(address target, uint256 value, bytes memory data, address onBehalfOfAccount) external payable returns (bytes memory)\n```\n\n----------------------------------------\n\nTITLE: EVC Account Status Check Interface\nDESCRIPTION: A special function that vaults must implement to enforce account solvency. The function should return its own selector if successful, or throw an exception if the account state is invalid.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checkAccountStatus(address account, address[] calldata collateralVaults) external returns (bytes4)\n```\n\n----------------------------------------\n\nTITLE: Retrieving EVC Execution Context for Vault Authentication\nDESCRIPTION: This code shows how vaults should verify the account on whose behalf a transaction is executed when interacting with the EVC. Vaults should call this function when they detect the EVC as msg.sender to obtain the authenticated account and check controller status.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\ngetCurrentOnBehalfOfAccount\n```\n\n----------------------------------------\n\nTITLE: Implementing Nonce Namespaces for Permit Messages in Ethereum Vault Connector\nDESCRIPTION: Explanation of how the nonceNamespace and nonce fields work within permit messages to enforce transaction sequencing or selectively relax these restrictions. This pattern allows users to choose different approaches to transaction ordering based on their needs.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/whitepaper.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* Always set `nonceNamespace` to `0`, and sign sequentially increasing `nonce`s. These permit messages will function like Ethereum transactions, and must be mined in order, with no gaps.\n* Derive the `nonceNamespace` deterministically from the permit message (for example, a hash of the message fields, excluding `nonceNamespace`), and always set the `nonce` to `0`. These permit messages can be mined in any order, and some may never be mined.\n* Some combination of the two approaches. For example, a user could have \"regular\" and \"high priority\" namespaces. Normal orders would be included in the regular sequence, while high priority permits are allowed to bypass this queue.\n```\n\n----------------------------------------\n\nTITLE: Visualizing EVC Liquidation Flow with Mermaid Sequence Diagram\nDESCRIPTION: A comprehensive sequence diagram that documents the liquidation process in the EVC system. The diagram shows the interaction flow between various actors and contracts, including security checks, asset transfers, and status verifications. It demonstrates the complete lifecycle of a liquidation event from initiation to completion.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/diagrams/Liquidation Interaction Sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor Violator\n    Note right of Violator: Dotted lines mean optional\n    actor Liquidator\n    participant Controller Vault\n    participant EVC\n    participant Collateral Vault\n    participant Price Oracle\n\n    Liquidator->>Controller Vault: liquidate(violator, collateral vault)\n    Controller Vault->>EVC: call(liquidate(violator, collateral vault))\n    EVC->>EVC: set the execution context\n    EVC->>Controller Vault: liquidate(violator, collateral vault)\n\n    Controller Vault->>EVC: liquidator = getCurrentOnBehalfOfAccount(address(vault))\n    Controller Vault->>Controller Vault: is liquidator liquidating itself?\n    Controller Vault->>EVC: isControllerEnabled(violator, Controller Vault)\n    Controller Vault->>Controller Vault: controller must be enabled\n    Controller Vault->>EVC: isAccountStatusCheckDeferred(violator)\n    Controller Vault->>Controller Vault: account status check cannot be deferred\n    Controller Vault-->>Controller Vault: is the requested collateral accepted and trusted?\n    Controller Vault->>Controller Vault: is the violator indeed in violation?\n    Controller Vault-->>Controller Vault: vault snapshot\n    Controller Vault->>Controller Vault: liquidation logic\n    Controller Vault->>Controller Vault: transfer the liability from the violator to the liquidator\n    Controller Vault-->>Controller Vault: if Controller Vault == Collateral Vault, seize violator's collateral\n\n    critical\n        Controller Vault-->>EVC: if Controller Vault != Collateral Vault, controlCollateral(collateral vault, violator, transfer(liquidator, collateral amount))\n        EVC->>Collateral Vault: transfer(liquidator, collateral amount)\n        Collateral Vault->>EVC: getCurrentOnBehalfOfAccount(address(0))\n        Collateral Vault-->>Collateral Vault: vault snapshot\n        Collateral Vault->>Collateral Vault: transfer logic\n        Collateral Vault->>EVC: requireAccountStatusCheck(violator)\n        Collateral Vault->>EVC: requireVaultStatusCheck()\n    end\n\n    Controller Vault-->>EVC: if collateral trusted or action can be verified, forgiveAccountStatusCheck(violator)\n    Controller Vault->>EVC: requireAccountStatusCheck(liquidator)\n    Controller Vault->>EVC: requireVaultStatusCheck()\n\n    critical\n        opt if check not forgiven\n            EVC->>Controller Vault: checkAccountStatus(violator, collaterals)\n            Controller Vault->>Controller Vault: is msg.sender EVC?\n            Controller Vault->>EVC: areChecksInProgress()\n            Controller Vault-->>Price Oracle: getQuote()\n            Controller Vault->>Controller Vault: determine violator's liquidity\n        end\n\n        EVC->>Controller Vault: checkAccountStatus(liquidator, collaterals)\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault-->>Collateral Vault: balanceOf()\n        Controller Vault-->>Price Oracle: getQuote()\n        Controller Vault->>Controller Vault: determine liquidator's liquidity\n\n        EVC->>Collateral Vault: checkVaultStatus()\n        Collateral Vault->>Collateral Vault: is msg.sender EVC?\n        Collateral Vault->>EVC: areChecksInProgress()\n        Collateral Vault->>Collateral Vault: determine vault's health\n\n        EVC->>Controller Vault: checkVaultStatus()\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault->>Controller Vault: determine vault's health\n    end\n\n    EVC->>EVC: clear the execution context\n```\n\n----------------------------------------\n\nTITLE: EVC Batch Operations Sequence Diagram in Mermaid\nDESCRIPTION: A sequence diagram that illustrates the flow of batch operations through the EVC system. It shows how the EVC coordinates the execution of multiple operations, sets execution context, performs vault operations, and conducts status checks for both accounts and vaults using controller vaults and price oracles.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/diagrams/EVC Batch Vault Interaction Sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor User/Operator\n    Note right of User/Operator: Dotted lines mean optional\n    participant EVC\n    participant Any Vault\n    participant Controller Vault\n    participant Price Oracle\n\n    User/Operator->>EVC: batch([operation 1, operation 2, ...])\n    \n    loop\n        EVC->>EVC: set the execution context\n        EVC->>Any Vault: operation i\n        Any Vault->>EVC: getCurrentOnBehalfOfAccount(address(vault)/address(0))\n        Any Vault-->>Any Vault: vault snapshot\n        Any Vault->>Any Vault: operation i logic\n        Any Vault->>EVC: requireAccountStatusCheck(account)\n        Any Vault->>EVC: requireVaultStatusCheck()\n    end\n\n    critical\n        EVC->>Controller Vault: checkAccountStatus(account, collaterals)\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault-->>Any Vault: balanceOf()\n        Controller Vault-->>Price Oracle: getQuote()\n        Controller Vault->>Controller Vault: determine account's liquidity\n\n        EVC->>Any Vault: checkVaultStatus()\n        Any Vault->>Any Vault: is msg.sender EVC?\n        Any Vault->>EVC: areChecksInProgress()\n        Any Vault->>Any Vault: determine vault's health\n    end\n\n    EVC->>EVC: clear the execution context\n```\n\n----------------------------------------\n\nTITLE: Visualizing EVC Operation Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram that illustrates the complete flow of operations in the Ethereum Vault Connector system. It shows the interaction between a Signature Holder, the EVC contract, vaults (both regular and controller types), and price oracles, demonstrating the security checks and contextual operations involved in vault interactions.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/diagrams/EVC Permit Vault Interaction Sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor Signature Holder\n    Note right of Signature Holder: Dotted lines mean optional\n    participant EVC\n    participant Any Vault\n    participant Controller Vault\n    participant Price Oracle\n\n    Signature Holder->>EVC: permit(signer, signature, EVC calldata)\n    EVC->>EVC: signature verification\n    EVC->>EVC: set the execution context\n    EVC->>EVC: address(this).call(EVC calldata)\n\n    loop \n        EVC->>Any Vault: operation\n        Any Vault->>EVC: getCurrentOnBehalfOfAccount(address(vault)/address(0))\n        Any Vault-->>Any Vault: vault snapshot\n        Any Vault->>Any Vault: operation logic\n        Any Vault->>EVC: requireAccountStatusCheck(account)\n        Any Vault->>EVC: requireVaultStatusCheck()\n    end\n\n    critical\n        EVC->>Controller Vault: checkAccountStatus(account, collaterals)\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault-->>Any Vault: balanceOf()\n        Controller Vault-->>Price Oracle: getQuote()\n        Controller Vault->>Controller Vault: determine account's liquidity\n\n        EVC->>Any Vault: checkVaultStatus()\n        Any Vault->>Any Vault: is msg.sender EVC?\n        Any Vault->>EVC: areChecksInProgress()\n        Any Vault->>Any Vault: determine vault's health\n    end\n\n    EVC->>EVC: clear the execution context\n```\n\n----------------------------------------\n\nTITLE: Visualizing EVC Interaction Sequence with Mermaid Diagram\nDESCRIPTION: This mermaid sequence diagram shows the step-by-step interaction between various components in the Ethereum Vault Connector system. It includes enabling collateral and controller, borrowing process, and detailed account and vault status checks.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/diagrams/How EVC Works Example Sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor User/Operator\n    participant EVC\n    participant Controller Vault\n    \n    participant Any Vault\n    participant Price Oracle\n\n    User/Operator->>EVC: enableCollateral(collateral)\n    User/Operator->>EVC: enableController(controller)\n    User/Operator->>EVC: call(controller, account, borrow)\n    EVC->>EVC: set the execution context\n    EVC->>Controller Vault: borrow\n    Controller Vault->>EVC: getCurrentOnBehalfOfAccount(address(vault))\n    Controller Vault->>Controller Vault: vault snapshot\n    Controller Vault->>Controller Vault: borrow logic\n    Controller Vault->>EVC: requireAccountStatusCheck(account)\n    Controller Vault->>EVC: requireVaultStatusCheck()\n\n    critical\n        EVC->>Controller Vault: checkAccountStatus(account, collaterals)\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault->>Any Vault: balanceOf()\n        Controller Vault->>Price Oracle: getQuote()\n        Controller Vault->>Controller Vault: determine account's liquidity\n\n        EVC->>Controller Vault: checkVaultStatus()\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault->>Controller Vault: determine vault's health\n    end\n\n    EVC->>EVC: clear the execution context\n```\n\n----------------------------------------\n\nTITLE: Diagramming Ethereum Vault Connector Interaction Flow in Mermaid\nDESCRIPTION: A sequence diagram showing the interaction flow between User/Operator, EVC, vaults, and price oracles during an operation. It demonstrates account and vault status checks, including liquidity verification and health determination processes.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/diagrams/EVC Call Vault Interaction Sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor User/Operator\n    Note right of User/Operator: Dotted lines mean optional\n    participant EVC\n    participant Any Vault\n    participant Controller Vault\n    participant Price Oracle\n\n    User/Operator->>EVC: call(operation)\n    EVC->>Any Vault: operation\n    Any Vault->>EVC: getCurrentOnBehalfOfAccount(true/false)\n    Any Vault-->>Any Vault: vault snapshot\n    Any Vault->>Any Vault: operation logic\n    Any Vault->>EVC: requireAccountStatusCheck(account)\n    Any Vault->>EVC: requireVaultStatusCheck()\n\n    critical\n        EVC->>Controller Vault: checkAccountStatus(account, collaterals)\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault-->>Any Vault: balanceOf()\n        Controller Vault-->>Price Oracle: getQuote()\n        Controller Vault->>Controller Vault: determine account's liquidity\n\n        EVC->>Any Vault: checkVaultStatus()\n        Any Vault->>Any Vault: is msg.sender EVC?\n        Any Vault->>EVC: areChecksInProgress()\n        Any Vault->>Any Vault: determine vault's health\n    end\n\n    EVC->>EVC: clear the execution context\n```\n\n----------------------------------------\n\nTITLE: Ethereum Vault Connector (EVC) Interaction Sequence Diagram\nDESCRIPTION: This mermaid sequence diagram illustrates the interaction flow between a user, vaults (Any Vault and Controller Vault), EVC (Ethereum Vault Connector), and a Price Oracle. It shows the process of vault operations, account status checks, and vault status checks within the EVC system.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/diagrams/Direct Vault Interaction Sequence.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor User\n    Note right of User: Dotted lines mean optional\n    participant Any Vault\n    participant EVC\n    participant Controller Vault\n    participant Price Oracle\n\n    User->>Any Vault: operation\n    Any Vault->>EVC: call(operation)\n    EVC->>EVC: set the execution context\n    EVC->>Any Vault: operation\n    Any Vault->>EVC: getCurrentOnBehalfOfAccount(address(vault)/address(0))\n    Any Vault-->>Any Vault: vault snapshot\n    Any Vault->>Any Vault: operation logic\n    Any Vault->>EVC: requireAccountStatusCheck(account)\n    Any Vault->>EVC: requireVaultStatusCheck()\n\n    critical\n        EVC->>Controller Vault: checkAccountStatus(account, collaterals)\n        Controller Vault->>Controller Vault: is msg.sender EVC?\n        Controller Vault->>EVC: areChecksInProgress()\n        Controller Vault-->>Any Vault: balanceOf()\n        Controller Vault-->>Price Oracle: getQuote()\n        Controller Vault->>Controller Vault: determine account's liquidity\n\n        EVC->>Any Vault: checkVaultStatus()\n        Any Vault->>Any Vault: is msg.sender EVC?\n        Any Vault->>EVC: areChecksInProgress()\n        Any Vault->>Any Vault: determine vault's health\n    end\n\n    EVC->>EVC: clear the execution context\n```\n\n----------------------------------------\n\nTITLE: Setting Account Operator Function Reference\nDESCRIPTION: Reference to the `setAccountOperator` function which manages operator permissions. The function only affects the state for the specific account and operator targeted in the call.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/specs.md#2025-04-18_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nsetAccountOperator\n```\n\n----------------------------------------\n\nTITLE: Setting General Operator Function Reference\nDESCRIPTION: Reference to the `setOperator` function which manages operator permissions based on address prefix. The function only affects the state for the specific addressPrefix and operator targeted in the call.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/docs/specs.md#2025-04-18_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nsetOperator\n```\n\n----------------------------------------\n\nTITLE: Injecting Authorization Check Bug in EthereumVaultConnector (Solidity)\nDESCRIPTION: This code snippet shows a mutation (CER-68) based on a prior audit report. It modifies the authorization check in the EthereumVaultConnector contract, potentially allowing unauthorized access when the caller is the contract itself.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/certora/mutation/README.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/EthereumVaultConnector.sol b/src/EthereumVaultConnector.sol\nindex 1c0a327..4316f49 100644\n--- a/src/EthereumVaultConnector.sol\n+++ b/src/EthereumVaultConnector.sol\n@@ -310,7 +310,7 @@ contract EthereumVaultConnector is Events, Errors, TransientStorage, IEVC {\n         address owner = haveCommonOwnerInternal(account, msgSender) ? msgSender : getAccountOwnerInternal(account);\n \n         // if it's an operator calling, it can only act for itself and must not be able to change other operators status\n-        if (owner != msgSender && operator != msgSender) {\n+        if (owner != msg.sender && operator != msg.sender && address(this) != msg.sender) {\n             revert EVC_NotAuthorized();\n         }\n \n```\n\n----------------------------------------\n\nTITLE: Displaying Contract Structure for Ethereum Vault Connector\nDESCRIPTION: A directory tree visualization showing the structure of the Ethereum Vault Connector project, including interfaces, utilities, and core contract files.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── interfaces\n│   ├── IERC1271.sol\n│   ├── IEthereumVaultConnector.sol\n│   └── IVault.sol\n├── utils\n│   └── EVCUtil.sol\n├── Errors.sol\n├── EthereumVaultConnector.sol\n├── Events.sol\n├── ExecutionContext.sol\n├── Set.sol\n└── TransientStorage.sol\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Scribble Annotations\nDESCRIPTION: Command to instrument contracts with Scribble annotations and run the test suite, which enables runtime verification of contract properties.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nscribble test/evc/EthereumVaultConnectorScribble.sol --output-mode files --arm && forge test\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage for Ethereum Vault Connector\nDESCRIPTION: Command to generate and view test coverage metrics for the Ethereum Vault Connector using Forge's coverage tool.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nforge coverage\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Ethereum Vault Connector in Default Mode\nDESCRIPTION: Command to execute the test suite for Ethereum Vault Connector using Forge's standard testing mode.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nforge test\n```\n\n----------------------------------------\n\nTITLE: Installing Scribble for Contract Annotations\nDESCRIPTION: Command to install the Scribble tool for contract annotations using npm, which is used for instrumenting contracts with runtime verification checks.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g eth-scribble\n```\n\n----------------------------------------\n\nTITLE: Removing Scribble Instrumentation\nDESCRIPTION: Command to remove Scribble instrumentation from contracts after testing, returning them to their original state.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nscribble test/evc/EthereumVaultConnectorScribble.sol --disarm\n```\n\n----------------------------------------\n\nTITLE: Installing Ethereum Vault Connector with Foundry\nDESCRIPTION: Command for installing the Ethereum Vault Connector in a Foundry project using the forge install command.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforge install euler-xyz/ethereum-vault-connector\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry for Ethereum Vault Connector Testing\nDESCRIPTION: Command to download and install Foundry using the foundryup installation script.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\n----------------------------------------\n\nTITLE: Starting Foundry for Ethereum Vault Connector Testing\nDESCRIPTION: Command to initialize Foundry after installation using foundryup.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Cloning the Ethereum Vault Connector Repository\nDESCRIPTION: Command to clone the Ethereum Vault Connector repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/euler-xyz/ethereum-vault-connector/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/euler-xyz/ethereum-vault-connector.git && cd ethereum-vault-connector\n```"
  }
]