[
  {
    "owner": "spring-projects",
    "repo": "spring-boot",
    "content": "TITLE: Available JAR Tools Commands\nDESCRIPTION: Lists the available commands in JAR tools mode: extract for extracting JAR contents, list-layers for viewing extractable layers, and help for command documentation.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-help-output.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nextract      Extract the contents from the jar\nlist-layers  List layers from the jar that can be extracted\nhelp         Help about any command\n```\n\n----------------------------------------\n\nTITLE: Using Spring Boot Jar Extraction Tool via Command Line\nDESCRIPTION: Command-line usage example for extracting the contents of a Spring Boot executable jar. The command uses the 'jarmode=tools' system property to activate the extraction tool mode and provides various options to customize the extraction process.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-help-extract-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -Djarmode=tools -jar test.jar extract [options]\n```\n\n----------------------------------------\n\nTITLE: Using list-layers Command with Spring Boot JAR\nDESCRIPTION: Command-line example showing how to use the list-layers jarmode tool to extract layer information from a Spring Boot JAR file. This requires setting the jarmode system property to 'tools' when executing the JAR.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-help-list-layers-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=tools -jar test.jar list-layers\n```\n\n----------------------------------------\n\nTITLE: Executing Spring Boot JAR in Tools Mode\nDESCRIPTION: Shows the basic command to run a Spring Boot JAR file in tools mode, which enables access to JAR manipulation utilities. The -Djarmode=tools flag enables tools mode functionality.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-help-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -Djarmode=tools -jar test.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Startup Script for Spring Boot Applications\nDESCRIPTION: This shell script provides a complete launcher for Spring Boot applications on Unix-like systems. It resolves the application home directory, configures Java environment variables, handles platform-specific settings (Darwin/Cygwin/MINGW/NONSTOP), and properly processes command-line arguments before executing the Java application.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/resources/unixStartScript.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\n\n##############################################################################\n##\n##  ${applicationName} start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: \\$0 may be a link\nPRG=\"\\$0\"\n# Need this for relative symlinks.\nwhile [ -h \"\\$PRG\" ] ; do\n    ls=`ls -ld \"\\$PRG\"`\n    link=`expr \"\\$ls\" : '.*-> \\\\(.*\\\\)\\$'`\n    if expr \"\\$link\" : '/.*' > /dev/null; then\n        PRG=\"\\$link\"\n    else\n        PRG=`dirname \"\\$PRG\"`\"/\\$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"\\$PRG\\\"`/${appHomeRelativePath}\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"\\$SAVED\" >/dev/null\n\nAPP_NAME=\"${applicationName}\"\nAPP_BASE_NAME=`basename \"\\$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and ${optsEnvironmentVar} to pass JVM options to this script.\nDEFAULT_JVM_OPTS=${defaultJvmOpts}\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"\\$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"\\$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nJARPATH=$classpath\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"\\$JAVA_HOME\" ] ; then\n    if [ -x \"\\$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"\\$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"\\$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"\\$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: \\$JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"\\$cygwin\" = \"false\" -a \"\\$darwin\" = \"false\" -a \"\\$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ \\$? -eq 0 ] ; then\n        if [ \"\\$MAX_FD\" = \"maximum\" -o \"\\$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"\\$MAX_FD_LIMIT\"\n        fi\n        ulimit -n \\$MAX_FD\n        if [ \\$? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: \\$MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: \\$MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif \\$darwin; then\n    GRADLE_OPTS=\"\\$GRADLE_OPTS \\\\\"-Xdock:name=\\$APP_NAME\\\\\" \\\\\"-Xdock:icon=\\$APP_HOME/media/gradle.icns\\\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif \\$cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"\\$APP_HOME\"`\n    JARPATH=`cygpath --path --mixed \"\\$JARPATH\"`\n    JAVACMD=`cygpath --unix \"\\$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in \\$ROOTDIRSRAW ; do\n        ROOTDIRS=\"\\$ROOTDIRS\\$SEP\\$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^(\\$ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"\\$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"\\$OURCYGPATTERN|(\\$GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"\\$@\" ; do\n        CHECK=`echo \"\\$arg\"|egrep -c \"\\$OURCYGPATTERN\" -`\n        CHECK2=`echo \"\\$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ \\$CHECK -ne 0 ] && [ \\$CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args\\$i`=`cygpath --path --ignore --mixed \"\\$arg\"`\n        else\n            eval `echo args\\$i`=\"\\\"\\$arg\\\"\"\n        fi\n        i=\\$((i+1))\n    done\n    case \\$i in\n        (0) set -- ;;\n        (1) set -- \"\\$args0\" ;;\n        (2) set -- \"\\$args0\" \"\\$args1\" ;;\n        (3) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" ;;\n        (4) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" \"\\$args3\" ;;\n        (5) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" \"\\$args3\" \"\\$args4\" ;;\n        (6) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" \"\\$args3\" \"\\$args4\" \"\\$args5\" ;;\n        (7) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" \"\\$args3\" \"\\$args4\" \"\\$args5\" \"\\$args6\" ;;\n        (8) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" \"\\$args3\" \"\\$args4\" \"\\$args5\" \"\\$args6\" \"\\$args7\" ;;\n        (9) set -- \"\\$args0\" \"\\$args1\" \"\\$args2\" \"\\$args3\" \"\\$args4\" \"\\$args5\" \"\\$args6\" \"\\$args7\" \"\\$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave ( ) {\n    for i do printf %s\\\\\\\\n \"\\$i\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g;1s/^/'/;\\\\\\$s/\\\\\\$/' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/' ; done\n    echo \" \"\n}\nAPP_ARGS=\\$(save \"\\$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- \\$DEFAULT_JVM_OPTS \\$JAVA_OPTS \\$${optsEnvironmentVar} <% if ( appNameSystemProperty ) { %>\"\\\"-D${appNameSystemProperty}=\\$APP_BASE_NAME\\\"\" <% } %>-jar \"\\\"\\$JARPATH\\\"\" \"\\$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"\\$(uname)\" = \"Darwin\" ] && [ \"\\$HOME\" = \"\\$PWD\" ]; then\n  cd \"\\$(dirname \"\\$0\")\"\nfi\n\nexec \"\\$JAVACMD\" \"\\$@\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Windows Environment for Spring Boot Application\nDESCRIPTION: This batch script sets up the necessary environment variables and paths to run a Spring Boot application on Windows. It locates the Java executable, configures JVM options, and prepares the command-line arguments.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/resources/windowsStartScript.txt#2025-04-21_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  ${applicationName} startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\\\n\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%${appHomeRelativePath}\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and ${optsEnvironmentVar} to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=${defaultJvmOpts}\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset JARPATH=$classpath\n\n@rem Execute ${applicationName}\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %${optsEnvironmentVar}% <% if ( appNameSystemProperty ) { %>\"-D${appNameSystemProperty}=%APP_BASE_NAME%\"<% } %> -jar \"%JARPATH%\" %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable ${exitEnvironmentVar} if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%${exitEnvironmentVar}%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n```\n\n----------------------------------------\n\nTITLE: Docker Build Log Output\nDESCRIPTION: Complete build log showing the process of building a Docker image for a Spring Boot application using Cloud Native Buildpacks. Includes pulling builder images, running build steps, and tagging the final image.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/test/resources/org/springframework/boot/buildpack/platform/build/print-stream-build-log.txt#2025-04-21_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nBuilding image 'docker.io/library/my-app:latest'\n\n > Pulling builder image 'docker.io/cnb/builder' ..................................................\n > Pulled builder image '00000001'\n > Pulling run image 'docker.io/cnb/runner' for platform 'linux/arm64/v1' ..................................................\n > Pulled run image '00000002'\n > Executing lifecycle version v0.5.0\n > Using build cache volume 'pack-abc.cache'\n\n > Running alphabet\n    [alphabet]    one\n    [alphabet]    two\n    [alphabet]    three\n\n > Running basket\n    [basket]      spring\n    [basket]      boot\n\nSuccessfully built image 'docker.io/library/my-app:latest'\n\nSuccessfully created image tag 'docker.io/library/my-app:1.0'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Spring Boot REST Controller with GET and POST endpoints\nDESCRIPTION: This code shows how to define a RESTful controller in Spring Boot with both GET and POST endpoints. It includes parameter handling, request mappings, and demonstrates proper HTTP response handling.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/test/resources/metadata/service-metadata-2.1.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/api/v1/users\")\npublic class UserController {\n\n    private final UserService userService;\n\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<UserDTO>> getAllUsers() {\n        return ResponseEntity.ok(userService.findAll());\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<UserDTO> getUserById(@PathVariable Long id) {\n        return userService.findById(id)\n                .map(ResponseEntity::ok)\n                .orElseThrow(() -> new ResourceNotFoundException(\"User not found with id: \" + id));\n    }\n\n    @PostMapping\n    public ResponseEntity<UserDTO> createUser(@Valid @RequestBody UserDTO userDTO) {\n        UserDTO createdUser = userService.create(userDTO);\n        URI location = ServletUriComponentsBuilder.fromCurrentRequest()\n                .path(\"/{id}\")\n                .buildAndExpand(createdUser.getId())\n                .toUri();\n        return ResponseEntity.created(location).body(createdUser);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler for Spring Boot Controller\nDESCRIPTION: This code demonstrates how to create a global exception handler for a Spring Boot application. It captures various types of exceptions and translates them into appropriate HTTP responses with descriptive error messages.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/test/resources/metadata/service-metadata-2.1.0.txt#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(\n                HttpStatus.NOT_FOUND.value(),\n                ex.getMessage(),\n                LocalDateTime.now()\n        );\n        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<ErrorResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getAllErrors().forEach(error -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            errors.put(fieldName, errorMessage);\n        });\n        \n        ErrorResponse error = new ErrorResponse(\n                HttpStatus.BAD_REQUEST.value(),\n                \"Validation failed\",\n                LocalDateTime.now(),\n                errors\n        );\n        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Class for Spring Boot Class Loading\nDESCRIPTION: A minimal Java class definition used for testing class loading mechanisms within Spring Boot. The class doesn't contain any functionality but serves as a placeholder for class loading tests.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/resources/explodedsample/ExampleClass.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage explodedsample;\n\n/**\n * Example class used to test class loading.\n *\n * @author Phillip Webb\n */\npublic class ExampleClass {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Spring Boot Jar Layer Tools\nDESCRIPTION: Command to run Spring Boot's jarmode layertools. This allows for operations on jar layers such as listing and extraction.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-help-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=layertools -jar test.jar\n```\n\n----------------------------------------\n\nTITLE: Using Spring Boot CLI Help Command\nDESCRIPTION: This shows the syntax for using the help command when running a Spring Boot JAR in tools mode. The command accepts an optional parameter to get help about a specific command.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-help-help-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=tools -jar test.jar help [<command>]\n```\n\n----------------------------------------\n\nTITLE: Executing Spring Boot Jar in Tools Mode\nDESCRIPTION: Shows how to run a Spring Boot jar file in tools mode using the jarmode system property. The command exposes a CLI interface with test and help commands.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/help-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -Djarmode=tools -jar test.jar\n```\n\n----------------------------------------\n\nTITLE: Using Spring Boot Layertools Extract Command\nDESCRIPTION: Shows how to use the layertools extract command to extract layers from a JAR file for container image creation. This command is now deprecated in favor of the 'jarmode=tools extract' syntax.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-error-option-unknown-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -Djarmode=layertools -jar test.jar extract [options] [<layer>...]\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Layertools Extract Command Options\nDESCRIPTION: Demonstrates the available option for the layertools extract command, specifically the destination parameter which specifies where extracted files should be placed.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-error-option-unknown-output.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--destination string  The destination to extract files to\n```\n\n----------------------------------------\n\nTITLE: Recommended Replacement for Deprecated Layertools Command\nDESCRIPTION: Shows the recommended replacement command for the deprecated layertools extract functionality, using the newer jarmode=tools syntax.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-error-option-unknown-output.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-Djarmode=tools extract --layers --launcher\n```\n\n----------------------------------------\n\nTITLE: Extracting Layers from Spring Boot Jar (Java CLI)\nDESCRIPTION: Command to extract layers from a Spring Boot jar file for image creation. It requires specifying the jar file and optionally the layers to extract. The --destination option can be used to specify the extraction location.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-error-option-missing-value-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=layertools -jar test.jar extract [options] [<layer>...]\n```\n\n----------------------------------------\n\nTITLE: Using the Spring Boot JAR Extract Command\nDESCRIPTION: Command-line syntax for using the Spring Boot extract tool to extract contents from a JAR file. The command requires Java with a specific jarmode parameter and supports various options for customizing the extraction process.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-error-option-missing-value-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=tools -jar test.jar extract [options]\n```\n\n----------------------------------------\n\nTITLE: Executing Spring Boot Layer Tools JAR Command\nDESCRIPTION: Command syntax for running the Spring Boot layertools jarmode, which provides functionality for working with layered JAR files. This command enables access to layer-related tools and commands.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-error-command-unknown-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -Djarmode=layertools -jar test.jar\n```\n\n----------------------------------------\n\nTITLE: Spring Boot JAR Tool Mode Usage Example\nDESCRIPTION: Shows the correct command syntax for using Spring Boot's jarmode tools feature, which allows for operations on JAR files such as content extraction and layer listing.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-error-command-unknown-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=tools -jar test.jar\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot JAR in Tools Mode\nDESCRIPTION: Shows the correct command syntax for running a Spring Boot JAR in tools mode. This mode allows performing maintenance operations on the JAR file.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-help-unknown-command-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -Djarmode=tools -jar test.jar\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Tool in Tools Jarmode\nDESCRIPTION: Shows how to execute a Spring Boot application in tools jarmode with command parameters and options. This execution pattern uses a system property to specify the jarmode and passes test command with options and parameters.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/help-test-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njava -Djarmode=tools -jar test.jar test [options] parameter1 parameter2\n```\n\n----------------------------------------\n\nTITLE: Deprecated JAR Layer Command with Alternative in Spring Boot\nDESCRIPTION: A deprecation warning for a Spring Boot command with the recommended replacement syntax using the jarmode parameter. This informs users to transition to the newer command format for listing layers.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-list-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWarning: This command is deprecated. Use '-Djarmode=tools list-layers' instead.\n```\n\n----------------------------------------\n\nTITLE: Numeric Sequence in Spring Boot Documentation\nDESCRIPTION: A simple numeric sequence that appears to be line numbers or placeholder content in the Spring Boot documentation or command output.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/layertools-list-output.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0001\n0002\n0003\n```\n\n----------------------------------------\n\nTITLE: Listing Spring Boot Executable JAR Structure Components\nDESCRIPTION: This plain text listing shows the four main components of a Spring Boot executable JAR or WAR file structure. These components define how the Spring Boot loader organizes code and dependencies in a packaged application.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/list-layers-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndependencies\nspring-boot-loader\nsnapshot-dependencies\napplication\n```\n\n----------------------------------------\n\nTITLE: Printing Colorized Welcome Message for Spring Boot Application\nDESCRIPTION: This code snippet defines a welcome message for a Spring Boot sample application. It uses ANSI color codes to display the text in green and includes the Spring Boot version number.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-simple/src/main/resources/banner.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n${Ansi.GREEN} :: Sample application build with Spring Boot${spring-boot.formatted-version} ::${Ansi.DEFAULT}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot ASCII Art Logo and Version Display in Plain Text\nDESCRIPTION: An ASCII art representation of the Spring Boot logo, followed by text that displays the Spring Boot version using the variable ${spring-boot.formatted-version}. This is likely used as a banner that appears in the console when a Spring Boot application starts.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator-noweb/src/main/resources/banner.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   ,--.   ,--.  \n   \\  /-~-\\  /\n    )' a a `(\n   (  ,---.  )\n    `(_o_o_)'\n      )`-'(\n\nSpring Boot${spring-boot.formatted-version}\n```\n\n----------------------------------------\n\nTITLE: Displaying Spring Boot Remote ASCII Art Banner\nDESCRIPTION: An ASCII art banner for Spring Boot Remote applications. The banner includes the Spring Boot logo and text with a version placeholder ('${spring-boot.formatted-version}') that gets replaced with the actual version at runtime.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-devtools/src/main/resources/org/springframework/boot/devtools/remote-banner.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  .   ____          _                                              __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _          ___               _      \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` |        | _ \\___ _ __  ___| |_ ___ \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| []::::::[]   / -_) '  \\/ _ \\  _/ -_) ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, |        |_|_\\___|_|_|_\\___/\\__\\___|/ / / /\n =========|_|==============|___/===================================/_/_/_/\n :: Spring Boot Remote :: ${spring-boot.formatted-version}\n```\n\n----------------------------------------\n\nTITLE: Defining a YAML Data Structure with Nested Arrays\nDESCRIPTION: This YAML snippet defines a simple data structure with three keys (b, a, c), each containing an array of two string values. The structure demonstrates YAML's hierarchical organization capability using dash notation for array items.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/test/resources/org/springframework/boot/loader/tools/LayersIndexTests-writeToWritesLayersInIteratorOrder.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- \"b\":\n  - \"b1\"\n  - \"b2\"\n- \"a\":\n  - \"a1\"\n  - \"a2\"\n- \"c\":\n  - \"c1\"\n  - \"c2\"\n```\n\n----------------------------------------\n\nTITLE: Defining a YAML List of Animals with Hierarchical Structure\nDESCRIPTION: A YAML configuration that defines a key 'a' mapping to a list of animal names. The list is organized in alphabetical order and demonstrates the indentation-based nesting structure typical in YAML files.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/test/resources/org/springframework/boot/loader/tools/LayersIndexTests-writeToWhenSimpleNamesSortsAlphabetically.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- \"a\":\n  - \"aardvark\"\n  - \"cat\"\n  - \"dog\"\n  - \"hamster\"\n  - \"zerbra\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Path Structure in YAML\nDESCRIPTION: A YAML configuration defining a nested hierarchy with three main keys ('a', 'b', 'c'), each containing lists of path strings. This structure could represent directories, namespaces, or other hierarchical organization in a Spring Boot application.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/test/resources/org/springframework/boot/loader/tools/LayersIndexTests-writeToWhenAllFilesInDirectoryAreInNotInSameLayerUsesFiles.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- \"a\":\n  - \"a1/b1/c1\"\n  - \"a2/b1\"\n- \"b\":\n  - \"a1/b1/c2\"\n  - \"a2/b2\"\n- \"c\":\n  - \"a1/b2/\"\n```\n\n----------------------------------------\n\nTITLE: Defining Nested YAML Configuration Structure\nDESCRIPTION: This YAML snippet defines a configuration structure with three top-level keys and their nested values. It showcases the hierarchical nature of YAML and how to represent lists under keys.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/test/resources/org/springframework/boot/loader/tools/LayersIndexTests-writeToWhenLayerNotUsedDoesNotSkipLayer.txt#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- \"a\":\n  - \"a1\"\n  - \"a2\"\n- \"b\":\n- \"c\":\n  - \"c1\"\n  - \"c2\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Maven Parent POM Configuration\nDESCRIPTION: This directive indicates that configurations should be inherited from the parent POM file. In Maven projects, this is used to maintain consistent settings across multiple modules.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-devtools/src/test/resources/org/springframework/boot/devtools/restart/classloader/Parent.txt#2025-04-21_snippet_0\n\nLANGUAGE: maven\nCODE:\n```\nfromparent\n```\n\n----------------------------------------\n\nTITLE: Basic Spring Boot Template String with Variable Substitution\nDESCRIPTION: A simple template string that includes a placeholder variable called 'message'. This syntax is commonly used in Spring Boot templates like Thymeleaf or in property files for dynamic content insertion.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/test/resources/templates/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHello ${message}!\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version - Bash\nDESCRIPTION: Command to verify the installed Java version meets the minimum requirement of JDK v1.8.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/main/content/INSTALL.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shell Completion - Bash\nDESCRIPTION: Commands to create symbolic links for BASH and ZSH shell completion scripts.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/main/content/INSTALL.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nln -s ./shell-completion/bash/spring /etc/bash_completion.d/spring\nln -s ./shell-completion/zsh/_spring /usr/local/share/zsh/site-functions/_spring\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Validator in Spring Boot\nDESCRIPTION: This snippet shows how to create a configuration class that sets up a custom validator in a Spring Boot application. It defines a bean for LocalValidatorFactoryBean and configures it with a custom validator.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/test/resources/dependency-customizer-tests/resource1.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration(proxyBeanMethods = false)\npublic class ValidationAutoConfiguration {\n\n\t@Bean\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tstaticLocalValidatorFactoryBean<?> defaultValidator() {\n\t\tLocalValidatorFactoryBean<?> factoryBean = new LocalValidatorFactoryBean<>();\n\t\tfactoryBean.setMessageInterpolator(new ResourceBundleMessageInterpolator(new PlatformResourceBundleLocator(\"org.springframework.validation.messages\")));\n\t\treturn factoryBean;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Spring Boot CLI Installation - Bash\nDESCRIPTION: Command to verify successful installation of the Spring Boot CLI by checking its version.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-cli/src/main/content/INSTALL.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspring --version\n```\n\n----------------------------------------\n\nTITLE: Declaring Public File in Java for Spring Boot\nDESCRIPTION: This snippet declares a public file or class in Java. It serves as a basic structure for a Java class file, typically used as a starting point for implementing Spring Boot components or utilities.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-devtools/src/main/resources/public/public.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic file\n```\n\n----------------------------------------\n\nTITLE: Implementing readValue method for JDBC encrypted data handling in Java\nDESCRIPTION: Implementation of the readValue method in JdbcBaseManager that reads data using a specified cipher. The method handles column data reading and decryption operations.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/intTest/projects/run-additional-classpath-directory/src/main/additional-elements/another/two.txt#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic <V> V readValue(ResultSet resultSet, String columnName, Class<V> type, Cipher cipher) throws SQLException {\n\tObject columnData = this.jdbcSupplier.getColumnData(resultSet, columnName);\n\treturn readValue(columnData, type, cipher);\n}\n```\n\n----------------------------------------\n\nTITLE: X.509 SSL/TLS Certificate in PEM Format\nDESCRIPTION: PEM-encoded X.509 certificate for a SAML testing server (simplesamlphp.cfapps.io). The certificate contains public key information, issuer details, and validity period (2015-2025).\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-saml2-service-provider/src/main/resources/saml/certificate.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN CERTIFICATE-----\nMIIEEzCCAvugAwIBAgIJAIc1qzLrv+5nMA0GCSqGSIb3DQEBCwUAMIGfMQswCQYD\nVQQGEwJVUzELMAkGA1UECAwCQ08xFDASBgNVBAcMC0Nhc3RsZSBSb2NrMRwwGgYD\nVQQKDBNTYW1sIFRlc3RpbmcgU2VydmVyMQswCQYDVQQLDAJJVDEgMB4GA1UEAwwX\nc2ltcGxlc2FtbHBocC5jZmFwcHMuaW8xIDAeBgkqhkiG9w0BCQEWEWZoYW5pa0Bw\naXZvdGFsLmlvMB4XDTE1MDIyMzIyNDUwM1oXDTI1MDIyMjIyNDUwM1owgZ8xCzAJ\nBgNVBAYTAlVTMQswCQYDVQQIDAJDTzEUMBIGA1UEBwwLQ2FzdGxlIFJvY2sxHDAa\nBgNVBAoME1NhbWwgVGVzdGluZyBTZXJ2ZXIxCzAJBgNVBAsMAklUMSAwHgYDVQQD\nDBdzaW1wbGVzYW1scGhwLmNmYXBwcy5pbzEgMB4GCSqGSIb3DQEJARYRZmhhbmlr\nQHBpdm90YWwuaW8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4cn62\nE1xLqpN34PmbrKBbkOXFjzWgJ9b+pXuaRft6A339uuIQeoeH5qeSKRVTl32L0gdz\n2ZivLwZXW+cqvftVW1tvEHvzJFyxeTW3fCUeCQsebLnA2qRa07RkxTo6Nf244mWW\nRDodcoHEfDUSbxfTZ6IExSojSIU2RnD6WllYWFdD1GFpBJOmQB8rAc8wJIBdHFdQ\nnX8Ttl7hZ6rtgqEYMzYVMuJ2F2r1HSU1zSAvwpdYP6rRGFRJEfdA9mm3WKfNLSc5\ncljz0X/TXy0vVlAV95l9qcfFzPmrkNIst9FZSwpvB49LyAVke04FQPPwLgVH4gph\niJH3jvZ7I+J5lS8VAgMBAAGjUDBOMB0GA1UdDgQWBBTTyP6Cc5HlBJ5+ucVCwGc5\nogKNGzAfBgNVHSMEGDAWgBTTyP6Cc5HlBJ5+ucVCwGc5ogKNGzAMBgNVHRMEBTAD\nAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAvMS4EQeP/ipV4jOG5lO6/tYCb/iJeAduO\nnRhkJk0DbX329lDLZhTTL/x/w/9muCVcvLrzEp6PN+VWfw5E5FWtZN0yhGtP9R+v\nZnrV+oc2zGD+no1/ySFOe3EiJCO5dehxKjYEmBRv5sU/LZFKZpozKN/BMEa6CqLu\nxbzb7ykxVr7EVFXwltPxzE9TmL9OACNNyF5eJHWMRMllarUvkcXlh4pux4ks9e6z\nV9DQBy2zds9f1I3qxg0eX6JnGrXi/ZiCT+lJgVe3ZFXiejiLAiKB04sXW3ti0LW3\nlx13Y1YlQ4/tlpgTgfIJxKV6nyPiLoK0nywbMd+vpAirDt2Oc+hk\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Executing Spring Boot JAR Extract Command in Shell\nDESCRIPTION: Command for extracting contents from a Spring Boot JAR file using the tools jarmode. The command allows various options to customize the extraction process.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-jarmode-tools/src/test/resources/org/springframework/boot/jarmode/tools/tools-error-option-unknown-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -Djarmode=tools -jar test.jar extract [options]\n```\n\n----------------------------------------\n\nTITLE: Defining ExampleClass for Class Loading Tests in Spring Boot (Java)\nDESCRIPTION: This snippet defines a simple Java class named ExampleClass within the explodedsample package. The class is used for testing class loading mechanisms in Spring Boot. It contains no methods or properties, serving as a minimal example for loading tests.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-tools/spring-boot-loader-classic/src/test/resources/explodedsample/ExampleClass.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage explodedsample;\n\n/**\n * Example class used to test class loading.\n *\n * @author Phillip Webb\n */\npublic class ExampleClass {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot License Header Text\nDESCRIPTION: Standard copyright and license header text used in the Spring Boot project, specifying VMware copyright and Apache 2.0 license terms.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/buildSrc/src/main/resources/NOTICE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSpring Boot ${version}\nCopyright (c) 2012-2025 VMware, Inc.\n\nThis product is licensed to you under the Apache License, Version 2.0\n(the \"License\"). You may not use this product except in compliance with\nthe License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header Template for Spring Boot Project\nDESCRIPTION: Standard license header containing copyright notice and Apache License 2.0 terms that appears at the top of source files in the Spring Boot project. The copyright year range dynamically shows from 2012 to the current year of file creation or modification.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/src/checkstyle/checkstyle-header.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n/*\n * Copyright 2012-20XX the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included when applying the Apache License 2.0 to a project. Developers should replace the bracketed fields with their own identifying information.\nSOURCE: https://github.com/spring-projects/spring-boot/blob/main/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]