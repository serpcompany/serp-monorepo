[
  {
    "owner": "facebook",
    "repo": "prophet",
    "content": "TITLE: Importing Prophet and Data in Python\nDESCRIPTION: Imports the necessary libraries and loads the example dataset into a pandas DataFrame.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom prophet import Prophet\n```\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Libraries for Prophet\nDESCRIPTION: Imports pandas for data manipulation and the Prophet class from the prophet library, which are essential components for time series forecasting with Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom prophet import Prophet\n```\n\n----------------------------------------\n\nTITLE: Hyperparameter Tuning with Cross-validation in Python\nDESCRIPTION: This Python code demonstrates how to use cross-validation for tuning hyperparameters of the Prophet model, specifically changepoint_prior_scale and seasonality_prior_scale.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport itertools\nimport numpy as np\nimport pandas as pd\n\nparam_grid = {  \n    'changepoint_prior_scale': [0.001, 0.01, 0.1, 0.5],\n    'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0],\n}\n\n# Generate all combinations of parameters\nall_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\nrmses = []  # Store the RMSEs for each params here\n\n# Use cross validation to evaluate all parameters\nfor params in all_params:\n    m = Prophet(**params).fit(df)  # Fit model with given params\n    df_cv = cross_validation(m, cutoffs=cutoffs, horizon='30 days', parallel=\"processes\")\n    df_p = performance_metrics(df_cv, rolling_window=1)\n    rmses.append(df_p['rmse'].values[0])\n```\n\n----------------------------------------\n\nTITLE: Creating and Fitting a Prophet Model in Python\nDESCRIPTION: Instantiates a Prophet model with default parameters and fits it to the historical time series data, which is the core step in the forecasting process.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet()\nm.fit(df)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Forecast Components in Prophet\nDESCRIPTION: Creates a visualization of the different components of the forecast (trend, yearly seasonality, and weekly seasonality) to understand their individual contributions to the overall forecast.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig2 = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Creating Future Dates for Prediction in Python\nDESCRIPTION: Generates a DataFrame of future dates for making predictions.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfuture = m.make_future_dataframe(periods=365)\nfuture.tail()\n```\n\n----------------------------------------\n\nTITLE: Hyperparameter Grid Search for Prophet Model\nDESCRIPTION: Implements a grid search for optimizing Prophet model hyperparameters. Tests combinations of changepoint_prior_scale and seasonality_prior_scale using cross-validation to find optimal values based on RMSE.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport itertools\nimport numpy as np\nimport pandas as pd\n\nparam_grid = {  \n    'changepoint_prior_scale': [0.001, 0.01, 0.1, 0.5],\n    'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0],\n}\n\n# Generate all combinations of parameters\nall_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\nrmses = []  # Store the RMSEs for each params here\n\n# Use cross validation to evaluate all parameters\nfor params in all_params:\n    m = Prophet(**params).fit(df)  # Fit model with given params\n    df_cv = cross_validation(m, cutoffs=cutoffs, horizon='30 days', parallel=\"processes\")\n    df_p = performance_metrics(df_cv, rolling_window=1)\n    rmses.append(df_p['rmse'].values[0])\n\n# Find the best parameters\ntuning_results = pd.DataFrame(all_params)\ntuning_results['rmse'] = rmses\nprint(tuning_results)\n```\n\n----------------------------------------\n\nTITLE: Fitting Prophet Model in Python\nDESCRIPTION: Creates a Prophet model instance and fits it to the historical data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet()\nm.fit(df)\n```\n\n----------------------------------------\n\nTITLE: Plotting Prophet Components in Python\nDESCRIPTION: Visualizes the components of the forecast (trend, seasonality) using Prophet's component plotting function.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfig2 = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet Package in R\nDESCRIPTION: Use the install.packages function to install Prophet from CRAN. This is the standard method for installing R packages.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages('prophet')\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with Prophet in Python\nDESCRIPTION: Uses the fitted model to make predictions on the future dates.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nforecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()\n```\n\n----------------------------------------\n\nTITLE: Fitting Prophet Model and Performing Cross-validation in Python\nDESCRIPTION: This code fits a Prophet model to the loaded data and performs cross-validation. It demonstrates how to create future dataframes and use the cross_validation function.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=366)\n\nfrom prophet.diagnostics import cross_validation\ndf_cv = cross_validation(\n    m, '365 days', initial='1825 days', period='365 days')\ncutoff = df_cv['cutoff'].unique()[0]\ndf_cv = df_cv[df_cv['cutoff'].values == cutoff]\n```\n\n----------------------------------------\n\nTITLE: Plotting Prophet Forecast in Python\nDESCRIPTION: Visualizes the forecast using Prophet's built-in plotting function.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig1 = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plotly Visualizations of Prophet Forecasts\nDESCRIPTION: Imports and uses Prophet's plotly integration to create interactive visualizations of the forecast, requiring plotly 4.0+ and additional packages like notebook and ipywidgets.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import plot_plotly, plot_components_plotly\n\nplot_plotly(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Weekly Seasonality for Pre and Post COVID Periods\nDESCRIPTION: Configures two separate weekly seasonality components conditioned on the time period. Each seasonality pattern is linked to either the pre_covid or post_covid condition, allowing the model to learn different day-of-week patterns for each period.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nm4.add_seasonality(\n    name='weekly_pre_covid',\n    period=7,\n    fourier_order=3,\n    condition_name='pre_covid',\n)\nm4.add_seasonality(\n    name='weekly_post_covid',\n    period=7,\n    fourier_order=3,\n    condition_name='post_covid',\n);\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with a Fitted Prophet Model\nDESCRIPTION: Uses the fitted model to make predictions on the future dataframe, generating forecast values including the point estimate (yhat) and uncertainty intervals (yhat_lower and yhat_upper).\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nforecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Validation in Prophet (Python)\nDESCRIPTION: Shows how to use the cross_validation function in Python to assess Prophet forecast performance over a 365 day horizon.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom prophet.diagnostics import cross_validation\ndf_cv = cross_validation(m, initial='730 days', period='180 days', horizon = '365 days')\ndf_cv.head()\n```\n\n----------------------------------------\n\nTITLE: Plotting Prophet Forecast in R\nDESCRIPTION: Visualizes the forecast using R's generic plot function.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_12\n\nLANGUAGE: r\nCODE:\n```\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Calculating Performance Metrics in R and Python\nDESCRIPTION: These snippets demonstrate how to calculate performance metrics from cross-validation results in both R and Python. It includes the use of custom performance metrics in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: r\nCODE:\n```\n%%R\ndf.p <- performance_metrics(df.cv)\nhead(df.p)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.diagnostics import performance_metrics\ndf_p = performance_metrics(df_cv)\ndf_p.head()\n\nfrom prophet.diagnostics import register_performance_metric, rolling_mean_by_h\nimport numpy as np\n@register_performance_metric\ndef mase(df, w):\n    \"\"\"Mean absolute scale error\n\n        Parameters\n        ----------\n        df: Cross-validation results dataframe.\n        w: Aggregation window size.\n\n        Returns\n        -------\n        Dataframe with columns horizon and mase.\n    \"\"\"\n    e = (df['y'] - df['yhat'])\n    d = np.abs(np.diff(df['y'])).sum()/(df['y'].shape[0]-1)\n    se = np.abs(e/d)\n    if w < 0:\n        return pd.DataFrame({'horizon': df['horizon'], 'mase': se})\n    return rolling_mean_by_h(\n        x=se.values, h=df['horizon'].values, w=w, name='mase'\n    )\n\ndf_mase = performance_metrics(df_cv, metrics=['mase'])\ndf_mase.head()\n```\n\n----------------------------------------\n\nTITLE: Basic Prophet Time Series Forecasting in Python\nDESCRIPTION: Demonstrates the basic usage of Prophet for time series forecasting. The example shows how to initialize a Prophet model, fit it to a pandas DataFrame containing historical data, generate future dates for prediction, and make forecasts.\nSOURCE: https://github.com/facebook/prophet/blob/main/python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from prophet import Prophet\n>>> m = Prophet()\n>>> m.fit(df)  # df is a pandas.DataFrame with 'y' and 'ds' columns\n>>> future = m.make_future_dataframe(periods=365)\n>>> m.predict(future)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet Model with Custom Changepoints and Flexibility\nDESCRIPTION: Creates a Prophet model with custom lockdown holidays, predefined changepoints, and increased flexibility. The changepoint_prior_scale parameter is set to 1.0 (compared to default 0.05) to allow more flexibility in trend changes during COVID.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Default changepoint_prior_scale is 0.05, so 1.0 will lead to much more flexibility in comparison.\nm3 = Prophet(holidays=lockdowns, changepoints=m3_changepoints, changepoint_prior_scale=1.0)\nm3 = m3.fit(df)\nforecast3 = m3.predict(future2)\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Bayesian Sampling for Seasonality Uncertainty in Python\nDESCRIPTION: Demonstrates how to enable MCMC sampling in Python to generate uncertainty estimates for seasonality components. The show_progress parameter is set to False to suppress progress output.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(mcmc_samples=300)\nforecast = m.fit(df, show_progress=False).predict(future)\n```\n\n----------------------------------------\n\nTITLE: Loading Example Time Series Data in R\nDESCRIPTION: Loads the same Peyton Manning Wikipedia page views dataset in R for comparative analysis between Python and R Prophet implementations.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: r\nCODE:\n```\n%%R\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet Model with Holiday Effects\nDESCRIPTION: Creates and fits a Prophet model with custom holidays and prior scale adjustment for predictions.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(holidays=holidays, holidays_prior_scale=0.05).fit(df)\nforecast = m.predict(future)\nforecast[(forecast['playoff'] + forecast['superbowl']).abs() > 0][\n    ['ds', 'playoff', 'superbowl']][-10:]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiplicative Seasonality in Python\nDESCRIPTION: This snippet shows how to configure Prophet to use multiplicative seasonality in Python for time series where the seasonal pattern increases with the trend value.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nm = Prophet(seasonality_mode='multiplicative')\nm.fit(df)\nforecast = m.predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with a Fitted Prophet Model in R\nDESCRIPTION: Uses the predict function in R to generate forecasts with the fitted Prophet model, similar to the predict method in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: r\nCODE:\n```\n%%R\nforecast <- predict(m, future)\ntail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])\n```\n\n----------------------------------------\n\nTITLE: Implementing Both Floor and Cap for Logistic Growth in Prophet\nDESCRIPTION: Demonstrates setting both a minimum ('floor') and maximum ('cap') saturation level for the forecast. This example transforms the data, sets boundaries, and applies the logistic growth model to constrain predictions within the specified range.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/saturating_forecasts.md#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ndf$y <- 10 - df$y\ndf$cap <- 6\ndf$floor <- 1.5\nfuture$cap <- 6\nfuture$floor <- 1.5\nm <- prophet(df, growth = 'logistic')\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: python\nCODE:\n```\ndf['y'] = 10 - df['y']\ndf['cap'] = 6\ndf['floor'] = 1.5\nfuture['cap'] = 6\nfuture['floor'] = 1.5\nm = Prophet(growth='logistic')\nm.fit(df)\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Plotting the Prophet Forecast Results\nDESCRIPTION: Visualizes the forecast results using Prophet's built-in plotting function, which shows the historical data, the forecast, and uncertainty intervals.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig1 = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Seasonalities in Python\nDESCRIPTION: This snippet demonstrates how to implement conditional seasonalities in Prophet, creating separate on-season and off-season weekly patterns for NFL data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef is_nfl_season(ds):\n    date = pd.to_datetime(ds)\n    return (date.month > 8 or date.month < 2)\n\ndf['on_season'] = df['ds'].apply(is_nfl_season)\ndf['off_season'] = ~df['ds'].apply(is_nfl_season)\n\nm = Prophet(weekly_seasonality=False)\nm.add_seasonality(name='weekly_on_season', period=7, fourier_order=3, condition_name='on_season')\nm.add_seasonality(name='weekly_off_season', period=7, fourier_order=3, condition_name='off_season')\n\nfuture['on_season'] = future['ds'].apply(is_nfl_season)\nfuture['off_season'] = ~future['ds'].apply(is_nfl_season)\nforecast = m.fit(df).predict(future)\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Changepoints in Prophet (R)\nDESCRIPTION: Code to plot the forecast and add changepoints visualization to the plot in R. This helps identify where significant trend changes have been detected.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nplot(m, forecast) + add_changepoints_to_plot(m)\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Changepoints in Prophet (Python)\nDESCRIPTION: Python code to create a Prophet model with manually specified changepoint at '2014-01-01', allowing slope changes only at this specific date rather than using automatic detection.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(changepoints=['2014-01-01'])\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Changepoints in Prophet (Python)\nDESCRIPTION: Python code to create a forecast plot and add changepoints visualization. Imports the helper function and applies it to the plot to show where significant trend changes have been detected.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import add_changepoints_to_plot\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trend Changepoints\nDESCRIPTION: Plots the trend component with detected changepoints to verify that the model is appropriately capturing shifts in behavior during and after COVID-19 lockdowns.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import add_changepoints_to_plot\nfig = m2.plot(forecast2)\na = add_changepoints_to_plot(fig.gca(), m2, forecast2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Future Dates Dataframe for Prediction\nDESCRIPTION: Generates a dataframe with future dates for making predictions, extending 365 days beyond the historical data. This is needed for the predict method to generate forecasts.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfuture = m.make_future_dataframe(periods=365)\nfuture.tail()\n```\n\n----------------------------------------\n\nTITLE: Removing Extreme Outliers to Improve Seasonality Estimates\nDESCRIPTION: Demonstrates how to remove extreme outliers that affect seasonality by setting specific date ranges to NA/None, resulting in improved forecast accuracy.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/outliers.md#2025-04-16_snippet_3\n\nLANGUAGE: R\nCODE:\n```\noutliers <- (as.Date(df$ds) > as.Date('2015-06-01')\n             & as.Date(df$ds) < as.Date('2015-06-30'))\ndf$y[outliers] = NA\nm <- prophet(df)\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf.loc[(df['ds'] > '2015-06-01') & (df['ds'] < '2015-06-30'), 'y'] = None\nm = Prophet().fit(df)\nfig = m.plot(m.predict(future))\n```\n\n----------------------------------------\n\nTITLE: Making Monthly Forecasts with Prophet\nDESCRIPTION: Shows how to properly make monthly forecasts using Prophet by specifying the appropriate frequency in the future dataframe creation.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/non-daily_data.md#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nfuture <- make_future_dataframe(m, periods = 120, freq = 'month')\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: Python\nCODE:\n```\nfuture = m.make_future_dataframe(periods=120, freq='MS')\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Including Holiday Effects in Prophet Model (Python)\nDESCRIPTION: This Python code demonstrates how to include the previously defined holiday effects in a Prophet model during fitting and prediction.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(holidays=holidays)\nforecast = m.fit(df).predict(future)\n```\n\n----------------------------------------\n\nTITLE: Modeling Air Passengers with Multiplicative Seasonality in Python\nDESCRIPTION: Fits a Prophet model with multiplicative seasonality in Python to better handle the increasing seasonal variations in the air passengers dataset.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(seasonality_mode='multiplicative')\nm.fit(df)\nforecast = m.predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Forecast Components with Conditional Seasonality\nDESCRIPTION: Displays the decomposed components of the forecast including trend, seasonal patterns, and holiday effects. This visualization helps identify differences in weekly patterns between pre-COVID and post-COVID periods.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nm4.plot_components(forecast4);\n```\n\n----------------------------------------\n\nTITLE: Fitting Prophet Model with COVID-19 Lockdown Holidays\nDESCRIPTION: Creates and fits a Prophet model that treats COVID-19 lockdown periods as one-off holidays, allowing the model to better handle these shock periods.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nm2 = Prophet(holidays=lockdowns)\nm2 = m2.fit(df)\nfuture2 = m2.make_future_dataframe(periods=366)\nforecast2 = m2.predict(future2)\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Bayesian Sampling for Seasonality Uncertainty\nDESCRIPTION: Configure Prophet to perform MCMC sampling to get uncertainty in seasonality components by setting mcmc_samples parameter (default is 0). This is more computationally intensive but provides more comprehensive uncertainty estimates.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/uncertainty_intervals.md#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, mcmc.samples = 300)\nforecast <- predict(m, future)\n```\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(mcmc_samples=300)\nforecast = m.fit(df, show_progress=False).predict(future)\n```\n\n----------------------------------------\n\nTITLE: Loading Data and Fitting Basic Prophet Model in R\nDESCRIPTION: The R equivalent for loading the Peyton Manning dataset, limiting it to the first six months, creating a Prophet model, fitting it, and preparing a future dataframe for prediction.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlibrary(prophet)\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\ndf <- df[1:180,]\nm <- prophet(df)\nfuture <- make_future_dataframe(m, periods=60)\n```\n\n----------------------------------------\n\nTITLE: Adding NFL Sunday Regressor to Prophet Model\nDESCRIPTION: Shows how to create and add a custom regressor for NFL Sundays with separate implementations for R and Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_14\n\nLANGUAGE: r\nCODE:\n```\nnfl_sunday <- function(ds) {\n  dates <- as.Date(ds)\n  month <- as.numeric(format(dates, '%m'))\n  as.numeric((weekdays(dates) == \"Sunday\") & (month > 8 | month < 2))\n}\ndf$nfl_sunday <- nfl_sunday(df$ds)\n\nm <- prophet()\nm <- add_regressor(m, 'nfl_sunday')\nm <- fit.prophet(m, df)\n\nfuture$nfl_sunday <- nfl_sunday(future$ds)\n\nforecast <- predict(m, future)\nprophet_plot_components(m, forecast)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef nfl_sunday(ds):\n    date = pd.to_datetime(ds)\n    if date.weekday() == 6 and (date.month > 8 or date.month < 2):\n        return 1\n    else:\n        return 0\ndf['nfl_sunday'] = df['ds'].apply(nfl_sunday)\n\nm = Prophet()\nm.add_regressor('nfl_sunday')\nm.fit(df)\n\nfuture['nfl_sunday'] = future['ds'].apply(nfl_sunday)\n\nforecast = m.predict(future)\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Changepoints in Prophet for COVID Time Series Analysis\nDESCRIPTION: Creates a list of custom changepoints with varying density during different time periods to better model the COVID impact. Specifically allocates 10 potential changepoints over 2.5 years of pre-COVID data and 15 potential changepoints over 1.2 years of COVID-affected data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nm3_changepoints = (\n    # 10 potential changepoints in 2.5 years\n    pd.date_range('2017-06-02', '2020-01-01', periods=10).date.tolist() + \n    # 15 potential changepoints in 1 year 2 months\n    pd.date_range('2020-02-01', '2021-04-01', periods=15).date.tolist()\n)\n```\n\n----------------------------------------\n\nTITLE: Comparing Linear and Flat Growth Models in Python\nDESCRIPTION: A comprehensive example that compares counterfactual forecasting with exogenous regressors using linear versus flat growth in Prophet models.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nfrom prophet import Prophet\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nregressor = \"location_4\"\ntarget = \"location_41\"\ncutoff = pd.to_datetime(\"2023-04-17 00:00:00\")\n\ndf = (\n    pd.read_csv(\n        \"https://raw.githubusercontent.com/facebook/prophet/main/examples/example_pedestrians_multivariate.csv\", \n        parse_dates=[\"ds\"]\n    )\n    .rename(columns={target: \"y\"})\n)\ntrain = df.loc[df[\"ds\"] < cutoff]\ntest = df.loc[df[\"ds\"] >= cutoff]\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef fit_model(growth):\n    m = Prophet(growth=growth, seasonality_mode=\"multiplicative\", daily_seasonality=15)\n    m.add_regressor(\"location_4\", mode=\"multiplicative\")\n    m.fit(train)\n    preds = pd.merge(\n        test,\n        m.predict(test),\n        on=\"ds\",\n        how=\"inner\"\n    )\n    mape = ((preds[\"yhat\"] - preds[\"y\"]).abs() / preds_linear[\"y\"]).mean()\n    return m, preds, mape\n```\n\nLANGUAGE: Python\nCODE:\n```\nm_linear, preds_linear, mape_linear = fit_model(\"linear\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nm_flat, preds_flat, mape_flat = fit_model(\"flat\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nm_linear.plot_components(preds_linear);\n```\n\nLANGUAGE: Python\nCODE:\n```\nm_flat.plot_components(preds_flat);\n```\n\nLANGUAGE: Python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(11, 5))\nax.scatter(preds_linear[\"ds\"], preds_linear[\"y\"], color=\"black\", marker=\".\")\nax.plot(preds_linear[\"ds\"], preds_linear[\"yhat\"], label=f\"linear, mape={mape_linear:.1%}\")\nax.plot(preds_flat[\"ds\"], preds_flat[\"yhat\"], label=f\"flat, mape={mape_flat:.1%}\")\nplt.xticks(rotation=60)\nax.legend();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Monthly Seasonality in Python\nDESCRIPTION: This code shows how to add a custom monthly seasonality to a Prophet model in Python, replacing the default weekly seasonality.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(weekly_seasonality=False)\nm.add_seasonality(name='monthly', period=30.5, fourier_order=5)\nforecast = m.fit(df).predict(future)\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Adding Mixed Seasonality Modes in R\nDESCRIPTION: This code shows how to configure Prophet with multiplicative built-in seasonalities while adding custom additive seasonality and regressors in R. This approach is useful when different components need different seasonality types.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_6\n\nLANGUAGE: R\nCODE:\n```\n# R\nm <- prophet(seasonality.mode = 'multiplicative')\nm <- add_seasonality(m, 'quarterly', period = 91.25, fourier.order = 8, mode = 'additive')\nm <- add_regressor(m, 'regressor', mode = 'additive')\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Validation in Prophet (R)\nDESCRIPTION: Demonstrates how to use the cross_validation function in R to assess Prophet forecast performance over a 365 day horizon.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndf.cv <- cross_validation(m, initial = 730, period = 180, horizon = 365, units = 'days')\nhead(df.cv)\n```\n\n----------------------------------------\n\nTITLE: Computing Performance Metrics (Python)\nDESCRIPTION: Shows how to use the performance_metrics function to compute forecast error statistics in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom prophet.diagnostics import performance_metrics\ndf_p = performance_metrics(df_cv)\ndf_p.head()\n```\n\n----------------------------------------\n\nTITLE: Finding Optimal Hyperparameters for Prophet Model in Python\nDESCRIPTION: This code snippet demonstrates how to select the best hyperparameters for a Prophet model by accessing the parameter combination with the lowest RMSE (Root Mean Square Error) from a grid search result.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbest_params = all_params[np.argmin(rmses)]\nprint(best_params)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Prophet Components with Plotly\nDESCRIPTION: Creates an interactive visualization of the forecast components using plotly, providing an alternative to the static component plots for more detailed exploration.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nplot_components_plotly(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Setting Prediction Interval Width in R\nDESCRIPTION: Shows how to adjust the uncertainty interval width in Prophet to 95% (from the default 80%) when using R.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet(df, interval.width = 0.95)\nforecast <- predict(m, future)\n```\n\n----------------------------------------\n\nTITLE: Modeling Air Passengers with Multiplicative Seasonality in R\nDESCRIPTION: Fits a Prophet model with multiplicative seasonality in R to better handle the increasing seasonal variations in the air passengers dataset.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\n%%R -w 10 -h 6 -u in\nm <- prophet(df, seasonality.mode = 'multiplicative')\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Increasing Trend Flexibility in Prophet (R)\nDESCRIPTION: R code to create a Prophet model with increased changepoint prior scale (0.5), which makes the trend more flexible and sensitive to changes in the time series data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, changepoint.prior.scale = 0.5)\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Updating Fitted Prophet Models with Warm-Starting in Python\nDESCRIPTION: Demonstrates how to update a fitted Prophet model with new data by warm-starting from the parameters of the previous model, which can be faster than refitting from scratch.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef warm_start_params(m):\n    \"\"\"\n    Retrieve parameters from a trained model in the format used to initialize a new Stan model.\n    Note that the new Stan model must have these same settings:\n        n_changepoints, seasonality features, mcmc sampling\n    for the retrieved parameters to be valid for the new model.\n\n    Parameters\n    ----------\n    m: A trained model of the Prophet class.\n\n    Returns\n    -------\n    A Dictionary containing retrieved parameters of m.\n    \"\"\"\n    res = {}\n    for pname in ['k', 'm', 'sigma_obs']:\n        if m.mcmc_samples == 0:\n            res[pname] = m.params[pname][0][0]\n        else:\n            res[pname] = np.mean(m.params[pname])\n    for pname in ['delta', 'beta']:\n        if m.mcmc_samples == 0:\n            res[pname] = m.params[pname][0]\n        else:\n            res[pname] = np.mean(m.params[pname], axis=0)\n    return res\n\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\ndf1 = df.loc[df['ds'] < '2016-01-19', :]  # All data except the last day\nm1 = Prophet().fit(df1) # A model fit to all data except the last day\n\n\n%timeit m2 = Prophet().fit(df)  # Adding the last day, fitting from scratch\n%timeit m2 = Prophet().fit(df, init=warm_start_params(m1))  # Adding the last day, warm-starting from m1\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fourier Order for Yearly Seasonality in Python\nDESCRIPTION: This snippet demonstrates how to adjust the Fourier order for yearly seasonality in Prophet to allow for higher-frequency changes.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import plot_yearly\nm = Prophet(yearly_seasonality=20).fit(df)\na = plot_yearly(m)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Seasonality and Regressors in Python\nDESCRIPTION: Demonstrates how to create a model with multiplicative built-in seasonalities while adding a custom additive quarterly seasonality and an additive regressor in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(seasonality_mode='multiplicative')\nm.add_seasonality('quarterly', period=91.25, fourier_order=8, mode='additive')\nm.add_regressor('regressor', mode='additive')\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Cross-validation with Dask in Python\nDESCRIPTION: This code demonstrates how to use Dask for parallel cross-validation in Python, which is useful for large-scale problems that require distributed computing.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dask.distributed import Client\n\nclient = Client()  # connect to the cluster\ndf_cv = cross_validation(m, initial='730 days', period='180 days', horizon='365 days',\n                         parallel=\"dask\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Forecast Components\nDESCRIPTION: Displays the breakdown of the forecast into trend, yearly, and weekly seasonality components for the default model.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nm.plot_components(forecast);\n```\n\n----------------------------------------\n\nTITLE: Fitting Prophet Model with Conditional Seasonality\nDESCRIPTION: Fits the Prophet model using the data with pre-COVID and post-COVID flags. This allows the model to learn different weekly patterns for each period based on the conditional seasonality components defined earlier.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nm4 = m4.fit(df2)\n```\n\n----------------------------------------\n\nTITLE: Fitting Prophet Model in R\nDESCRIPTION: Creates and fits a Prophet model to the historical data in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_9\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet(df)\n```\n\n----------------------------------------\n\nTITLE: Plotting Prophet Forecast with Lockdown Adjustments\nDESCRIPTION: Visualizes the forecast from the model with lockdown holidays, showing how treating COVID-19 periods as one-off events creates a more realistic future projection.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nm2.plot(forecast2)\nplt.axhline(y=0, color='red')\nplt.title('Lockdowns as one-off holidays');\n```\n\n----------------------------------------\n\nTITLE: Using Minmax Scaling in Prophet for Large Y Values\nDESCRIPTION: Shows how to use minmax scaling in Prophet for datasets with very large y values, which can improve model fitting by avoiding compression of scaled y values.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nlarge_y = pd.read_csv(\n    \"https://raw.githubusercontent.com/facebook/prophet/main/python/prophet/tests/data3.csv\", \n    parse_dates=[\"ds\"]\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nm1 = Prophet(scaling=\"absmax\")\nm1 = m1.fit(large_y)\n```\n\nLANGUAGE: Python\nCODE:\n```\nm2 = Prophet(scaling=\"minmax\")\nm2 = m2.fit(large_y)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Performance Metric (Python)\nDESCRIPTION: Demonstrates how to create and register a custom performance metric (Mean Absolute Scaled Error) in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom prophet.diagnostics import register_performance_metric, rolling_mean_by_h\nimport numpy as np\n@register_performance_metric\ndef mase(df, w):\n    \"\"\"Mean absolute scale error\n\n        Parameters\n        ----------\n        df: Cross-validation results dataframe.\n        w: Aggregation window size.\n\n        Returns\n        -------\n        Dataframe with columns horizon and mase.\n    \"\"\"\n    e = (df['y'] - df['yhat'])\n    d = np.abs(np.diff(df['y'])).sum()/(df['y'].shape[0]-1)\n    se = np.abs(e/d)\n    if w < 0:\n        return pd.DataFrame({'horizon': df['horizon'], 'mase': se})\n    return rolling_mean_by_h(\n        x=se.values, h=df['horizon'].values, w=w, name='mase'\n    )\n\ndf_mase = performance_metrics(df_cv, metrics=['mase'])\ndf_mase.head()\n```\n\n----------------------------------------\n\nTITLE: Performing Cross-validation with Custom Parameters in Python\nDESCRIPTION: This Python code shows how to perform cross-validation with custom initial, period, and horizon parameters. It also demonstrates using custom cutoff dates.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.diagnostics import cross_validation\ndf_cv = cross_validation(m, initial='730 days', period='180 days', horizon = '365 days')\n\ncutoffs = pd.to_datetime(['2013-02-15', '2013-08-15', '2014-02-15'])\ndf_cv2 = cross_validation(m, cutoffs=cutoffs, horizon='365 days')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Seasonality to Prophet Model\nDESCRIPTION: Demonstrates how to add custom seasonality with specific prior scales in both R and Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_13\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet()\nm <- add_seasonality(\n  m, name='weekly', period=7, fourier.order=3, prior.scale=0.1)\n```\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet()\nm.add_seasonality(\n    name='weekly', period=7, fourier_order=3, prior_scale=0.1)\n```\n\n----------------------------------------\n\nTITLE: Making Future Predictions with Logistic Growth in Prophet\nDESCRIPTION: Creates a future dataframe for predictions, applies the carrying capacity to future data points, and generates the forecast. The example extends predictions for 5 years (1826 days) into the future.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/saturating_forecasts.md#2025-04-16_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nfuture <- make_future_dataframe(m, periods = 1826)\nfuture$cap <- 8.5\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: python\nCODE:\n```\nfuture = m.make_future_dataframe(periods=1826)\nfuture['cap'] = 8.5\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Creating Holiday Dataframes for Peyton Manning Games in Python\nDESCRIPTION: Creates pandas DataFrames for playoff and superbowl games with date ranges and window parameters in Python. Shows how to structure holiday data for Prophet using pandas.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplayoffs = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2008-01-13', '2009-01-03', '2010-01-16',\n                        '2010-01-24', '2010-02-07', '2011-01-08',\n                        '2013-01-12', '2014-01-12', '2014-01-19',\n                        '2014-02-02', '2015-01-11', '2016-01-17',\n                        '2016-01-24', '2016-02-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nsuperbowls = pd.DataFrame({\n  'holiday': 'superbowl',\n  'ds': pd.to_datetime(['2010-02-07', '2014-02-02', '2016-02-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays = pd.concat((playoffs, superbowls))\n```\n\n----------------------------------------\n\nTITLE: Fitting a Logistic Growth Model in Prophet\nDESCRIPTION: Creates and fits a Prophet model using logistic growth instead of the default linear trend. The growth parameter is set to 'logistic' to enable this behavior.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/saturating_forecasts.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, growth = 'logistic')\n```\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(growth='logistic')\nm.fit(df)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plots with Plotly in Python\nDESCRIPTION: Generates interactive plots of the forecast and components using Plotly.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import plot_plotly, plot_components_plotly\n\nplot_plotly(m, forecast)\n```\n\nLANGUAGE: python\nCODE:\n```\nplot_components_plotly(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Plotting Seasonal Components in R\nDESCRIPTION: This code shows how to visualize the seasonal components of a Prophet model with multiplicative seasonality in R, displaying seasonality as a percentage of the trend.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\n# R\nprophet_plot_components(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Creating Holiday Dataframes in Python for Prophet\nDESCRIPTION: This snippet demonstrates how to create dataframes for playoff and Super Bowl events to be used as holiday effects in a Prophet model. It includes date ranges and window settings for each event type.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplayoffs = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2008-01-13', '2009-01-03', '2010-01-16',\n                        '2010-01-24', '2010-02-07', '2011-01-08',\n                        '2013-01-12', '2014-01-12', '2014-01-19',\n                        '2014-02-02', '2015-01-11', '2016-01-17',\n                        '2016-01-24', '2016-02-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nsuperbowls = pd.DataFrame({\n  'holiday': 'superbowl',\n  'ds': pd.to_datetime(['2010-02-07', '2014-02-02', '2016-02-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays = pd.concat((playoffs, superbowls))\n```\n\n----------------------------------------\n\nTITLE: Plotting Seasonality Components in Python\nDESCRIPTION: Visualizes the decomposed seasonality components from the multiplicative Prophet model in Python, showing seasonality as a percentage of the trend.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Creating Future Dataframe with COVID Period Flags\nDESCRIPTION: Prepares the future prediction dataframe with the same pre-COVID and post-COVID boolean flags. This ensures that the conditional seasonality patterns are correctly applied when forecasting future dates.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfuture4 = m4.make_future_dataframe(periods=366)\nfuture4['pre_covid'] = pd.to_datetime(future4['ds']) < pd.to_datetime('2020-03-21')\nfuture4['post_covid'] = ~future4['pre_covid']\n```\n\n----------------------------------------\n\nTITLE: Generating Predictions with Conditional Seasonality Model\nDESCRIPTION: Creates forecasts using the Prophet model with conditional seasonalities. The model applies different weekly patterns to dates before and after the COVID threshold.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nforecast4 = m4.predict(future4)\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Changepoints in Prophet (R)\nDESCRIPTION: R code to create a Prophet model with manually specified changepoint at '2014-01-01', allowing slope changes only at this specific date rather than using automatic detection.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, changepoints = c('2014-01-01'))\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Forecasting Monthly Data with Prophet\nDESCRIPTION: Illustrates how to use Prophet for monthly data forecasting, highlighting the importance of using the appropriate frequency for predictions to avoid overfitting issues with the continuous-time model.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/non-daily_data.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_retail_sales.csv')\nm <- prophet(df, seasonality.mode = 'multiplicative')\nfuture <- make_future_dataframe(m, periods = 3652)\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_retail_sales.csv')\nm = Prophet(seasonality_mode='multiplicative').fit(df)\nfuture = m.make_future_dataframe(periods=3652)\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Changepoints in Prophet Forecast\nDESCRIPTION: Plots the forecast with identified changepoints shown on the graph. Uses the add_changepoints_to_plot utility function from Prophet to visualize where the model detected significant trend changes.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import add_changepoints_to_plot\nfig = m3.plot(forecast3)\na = add_changepoints_to_plot(fig.gca(), m3, forecast3)\n```\n\n----------------------------------------\n\nTITLE: Adding Mixed Seasonality Modes in Python\nDESCRIPTION: This snippet demonstrates how to set up Prophet with multiplicative default seasonality while adding custom additive quarterly seasonality and an additive regressor in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nm = Prophet(seasonality_mode='multiplicative')\nm.add_seasonality('quarterly', period=91.25, fourier_order=8, mode='additive')\nm.add_regressor('regressor', mode='additive')\n```\n\n----------------------------------------\n\nTITLE: Applying Holiday Effects in Prophet Model - R\nDESCRIPTION: Shows how to incorporate holiday effects into a Prophet model in R using the holidays parameter.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, holidays = holidays)\nforecast <- predict(m, future)\n```\n\n----------------------------------------\n\nTITLE: Plotting Forecast Components with Uncertainty in Python\nDESCRIPTION: Shows how to visualize the forecast components including uncertainty intervals in Python after performing MCMC sampling.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Displaying Holiday Effects in Forecast (R)\nDESCRIPTION: This R code filters the forecast dataframe to show only rows where holiday effects are present, displaying the last 10 such rows.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nforecast %>% \n  select(ds, playoff, superbowl) %>% \n  filter(abs(playoff + superbowl) > 0) %>%\n  tail(10)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Seasonality and Regressors in R\nDESCRIPTION: Demonstrates how to create a model with multiplicative built-in seasonalities while adding a custom additive quarterly seasonality and an additive regressor in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: R\nCODE:\n```\n%%R\nm <- prophet(seasonality.mode = 'multiplicative')\nm <- add_seasonality(m, 'quarterly', period = 91.25, fourier.order = 8, mode = 'additive')\nm <- add_regressor(m, 'regressor', mode = 'additive')\n```\n\n----------------------------------------\n\nTITLE: Adjusting Holiday Prior Scale in Prophet (Python)\nDESCRIPTION: This Python code shows how to adjust the prior scale for holidays to prevent overfitting, setting it to 1 instead of the default 10.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(holidays=holidays, holidays_prior_scale=1).fit(df)\nforecast = m.predict(future)\nforecast[(forecast['playoff'] + forecast['superbowl']).abs() > 0][\n    ['ds', 'playoff', 'superbowl']][-10:]\n```\n\n----------------------------------------\n\nTITLE: Forecasting Sub-Daily Data with Prophet in R and Python\nDESCRIPTION: Demonstrates how to use Prophet for forecasting time series with sub-daily observations. The example uses temperature data from Yosemite with 5-minute resolution.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/non-daily_data.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_yosemite_temps.csv')\nm <- prophet(df, changepoint.prior.scale=0.01)\nfuture <- make_future_dataframe(m, periods = 300, freq = 60 * 60)\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_yosemite_temps.csv')\nm = Prophet(changepoint_prior_scale=0.01).fit(df)\nfuture = m.make_future_dataframe(periods=300, freq='H')\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Plotting Seasonal Components in Python\nDESCRIPTION: This snippet demonstrates how to display the seasonal components of a Prophet model with multiplicative seasonality in Python, where seasonality is shown as a percentage of the trend.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Loading Air Passengers Data and Fitting Default Additive Model in Python\nDESCRIPTION: This snippet shows how to load the example air passengers dataset and fit a default Prophet model with additive seasonality in Python, illustrating the limitations of additive seasonality for this data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Python\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_air_passengers.csv')\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(50, freq='MS')\nforecast = m.predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Prophet Models in Python\nDESCRIPTION: Shows how to serialize a fitted Prophet model to JSON and deserialize it back in Python, which is the recommended method over using pickle.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom prophet.serialize import model_to_json, model_from_json\n\nwith open('serialized_model.json', 'w') as fout:\n    fout.write(model_to_json(m))  # Save model\n\nwith open('serialized_model.json', 'r') as fin:\n    m = model_from_json(fin.read())  # Load model\n```\n\n----------------------------------------\n\nTITLE: Creating Prophet Models with Flat Trend\nDESCRIPTION: Demonstrates how to create Prophet models with a flat trend, which can be useful for time series with strong seasonality patterns or when relying on exogenous regressors.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, growth='flat')\n```\n\nLANGUAGE: Python\nCODE:\n```\nm = Prophet(growth='flat')\n```\n\n----------------------------------------\n\nTITLE: Creating and Fitting a Prophet Model in R\nDESCRIPTION: Creates and fits a Prophet model in R using the prophet function, which is analogous to the Prophet class and fit method in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: r\nCODE:\n```\n%%R\nm <- prophet(df)\n```\n\n----------------------------------------\n\nTITLE: Including Holiday Effects in Prophet Model (R)\nDESCRIPTION: This R code shows how to incorporate the previously defined holiday effects into a Prophet model during model creation and prediction.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet(df, holidays = holidays)\nforecast <- predict(m, future)\n```\n\n----------------------------------------\n\nTITLE: Increasing Trend Flexibility in Prophet (Python)\nDESCRIPTION: Python code to create a Prophet model with increased changepoint prior scale (0.5), which makes the trend more flexible and sensitive to changes in the time series data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(changepoint_prior_scale=0.5)\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Handling Data with Regular Gaps in Prophet\nDESCRIPTION: Shows how to handle time series data with regular gaps, such as observations only from 12am to 6am. It demonstrates the importance of limiting predictions to time windows with historical data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/non-daily_data.md#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ndf2 <- df %>%\n  mutate(ds = as.POSIXct(ds, tz=\"GMT\")) %>%\n  filter(as.numeric(format(ds, \"%H\")) < 6)\nm <- prophet(df2)\nfuture <- make_future_dataframe(m, periods = 300, freq = 60 * 60)\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf2 = df.copy()\ndf2['ds'] = pd.to_datetime(df2['ds'])\ndf2 = df2[df2['ds'].dt.hour < 6]\nm = Prophet().fit(df2)\nfuture = m.make_future_dataframe(periods=300, freq='H')\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Prophet Models in R\nDESCRIPTION: Demonstrates how to save a fitted Prophet model to a file and load it back using R's saveRDS and readRDS functions.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nsaveRDS(m, file=\"model.RDS\")  # Save model\nm <- readRDS(file=\"model.RDS\")  # Load model\n```\n\n----------------------------------------\n\nTITLE: Creating Holiday Dataframes for Peyton Manning Games in R\nDESCRIPTION: Creates dataframes for playoff and superbowl games with date ranges and window parameters in R. Demonstrates how to structure holiday data for Prophet with specific dates and custom windows.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nlibrary(dplyr)\nplayoffs <- data_frame(\n  holiday = 'playoff',\n  ds = as.Date(c('2008-01-13', '2009-01-03', '2010-01-16',\n                 '2010-01-24', '2010-02-07', '2011-01-08',\n                 '2013-01-12', '2014-01-12', '2014-01-19',\n                 '2014-02-02', '2015-01-11', '2016-01-17',\n                 '2016-01-24', '2016-02-07')),\n  lower_window = 0,\n  upper_window = 1\n)\nsuperbowls <- data_frame(\n  holiday = 'superbowl',\n  ds = as.Date(c('2010-02-07', '2014-02-02', '2016-02-07')),\n  lower_window = 0,\n  upper_window = 1\n)\nholidays <- bind_rows(playoffs, superbowls)\n```\n\n----------------------------------------\n\nTITLE: Computing Performance Metrics (R)\nDESCRIPTION: Demonstrates how to use the performance_metrics function to compute forecast error statistics in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ndf.p <- performance_metrics(df.cv)\nhead(df.p)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet Model with Disabled Weekly Seasonality\nDESCRIPTION: Creates a Prophet model with default weekly seasonality disabled. This allows for later implementation of conditional weekly seasonality patterns that can differ between pre-COVID and post-COVID periods.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nm4 = Prophet(holidays=lockdowns, weekly_seasonality=False)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cross-validation Results in Python\nDESCRIPTION: This code creates a plot to visualize the results of cross-validation, showing actual values, predicted values, and confidence intervals.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig = plt.figure(facecolor='w', figsize=(10, 6))\nax = fig.add_subplot(111)\nax.plot(m.history['ds'].values, m.history['y'], 'k.')\nax.plot(df_cv['ds'].values, df_cv['yhat'], ls='-', c='#0072B2')\nax.fill_between(df_cv['ds'].values, df_cv['yhat_lower'],\n                df_cv['yhat_upper'], color='#0072B2',\n                alpha=0.2)\nax.axvline(x=pd.to_datetime(cutoff), c='gray', lw=4, alpha=0.5)\nax.set_ylabel('y')\nax.set_xlabel('ds')\nax.text(x=pd.to_datetime('2010-01-01'),y=12, s='Initial', color='black',\n       fontsize=16, fontweight='bold', alpha=0.8)\nax.text(x=pd.to_datetime('2012-08-01'),y=12, s='Cutoff', color='black',\n       fontsize=16, fontweight='bold', alpha=0.8)\nax.axvline(x=pd.to_datetime(cutoff) + pd.Timedelta('365 days'), c='gray', lw=4,\n           alpha=0.5, ls='--')\nax.text(x=pd.to_datetime('2013-01-01'),y=6, s='Horizon', color='black',\n       fontsize=16, fontweight='bold', alpha=0.8);\n```\n\n----------------------------------------\n\nTITLE: Making Predictions with Prophet in R\nDESCRIPTION: Uses the fitted model to make predictions on the future dates in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_11\n\nLANGUAGE: r\nCODE:\n```\nforecast <- predict(m, future)\ntail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])\n```\n\n----------------------------------------\n\nTITLE: Loading R Prophet Library\nDESCRIPTION: Loads the Prophet library in R using the rpy2 extension in Jupyter.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\n%%R\nlibrary(prophet)\n```\n\n----------------------------------------\n\nTITLE: Making Future Predictions\nDESCRIPTION: Creates future predictions with the logistic growth model, setting up the forecast dataframe and plotting results\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nfuture <- make_future_dataframe(m, periods = 1826)\nfuture$cap <- 8.5\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: python\nCODE:\n```\nfuture = m.make_future_dataframe(periods=1826)\nfuture['cap'] = 8.5\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Creating COVID-19 Lockdown Holiday DataFrame\nDESCRIPTION: Defines COVID-19 lockdown periods as one-off holidays to prevent them from affecting future forecasts. Includes precise date ranges for each lockdown period.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlockdowns = pd.DataFrame([\n    {'holiday': 'lockdown_1', 'ds': '2020-03-21', 'lower_window': 0, 'ds_upper': '2020-06-06'},\n    {'holiday': 'lockdown_2', 'ds': '2020-07-09', 'lower_window': 0, 'ds_upper': '2020-10-27'},\n    {'holiday': 'lockdown_3', 'ds': '2021-02-13', 'lower_window': 0, 'ds_upper': '2021-02-17'},\n    {'holiday': 'lockdown_4', 'ds': '2021-05-28', 'lower_window': 0, 'ds_upper': '2021-06-10'},\n])\nfor t_col in ['ds', 'ds_upper']:\n    lockdowns[t_col] = pd.to_datetime(lockdowns[t_col])\nlockdowns['upper_window'] = (lockdowns['ds_upper'] - lockdowns['ds']).dt.days\nlockdowns\n```\n\n----------------------------------------\n\nTITLE: Loading Example Time Series Data in Python\nDESCRIPTION: Loads a sample dataset containing Wikipedia page views for Peyton Manning from a GitHub repository and displays the first few rows to examine its structure.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Setting Carrying Capacity for Logistic Growth in Prophet\nDESCRIPTION: Adds a carrying capacity column 'cap' to the dataframe, which specifies the maximum possible value for the forecast. This is a required parameter for logistic growth models in Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/saturating_forecasts.md#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ndf$cap <- 8.5\n```\n\nLANGUAGE: python\nCODE:\n```\ndf['cap'] = 8.5\n```\n\n----------------------------------------\n\nTITLE: Adjusting Holiday Prior Scale in Prophet (R)\nDESCRIPTION: This R code demonstrates how to adjust the prior scale for holidays to prevent overfitting, setting it to 1 instead of the default 10.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet(df, holidays = holidays, holidays.prior.scale = 1)\nforecast <- predict(m, future)\nforecast %>% \n  select(ds, playoff, superbowl) %>% \n  filter(abs(playoff + superbowl) > 0) %>%\n  tail(10)\n```\n\n----------------------------------------\n\nTITLE: Implementing Saturating Minimum\nDESCRIPTION: Demonstrates how to set both floor and cap values for logistic growth with a saturating minimum\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ndf$y <- 10 - df$y\ndf$cap <- 6\ndf$floor <- 1.5\nfuture$cap <- 6\nfuture$floor <- 1.5\nm <- prophet(df, growth = 'logistic')\nfcst <- predict(m, future)\nplot(m, fcst)\n```\n\nLANGUAGE: python\nCODE:\n```\ndf['y'] = 10 - df['y']\ndf['cap'] = 6\ndf['floor'] = 1.5\nfuture['cap'] = 6\nfuture['floor'] = 1.5\nm = Prophet(growth='logistic')\nm.fit(df)\nfcst = m.predict(future)\nfig = m.plot(fcst)\n```\n\n----------------------------------------\n\nTITLE: Loading Air Passengers Data and Fitting Default Additive Model in R\nDESCRIPTION: This snippet loads the example air passengers dataset and fits a default Prophet model with additive seasonality, demonstrating why additive seasonality doesn't work well for this data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n# R\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_air_passengers.csv')\nm <- prophet(df)\nfuture <- make_future_dataframe(m, 50, freq = 'm')\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pedestrian Time Series Data\nDESCRIPTION: Creates a time series plot of the pedestrian data to visualize the impact of COVID-19 lockdowns on foot traffic in Melbourne.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf.set_index('ds').plot();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cross Validation Metrics (R)\nDESCRIPTION: Shows how to visualize cross validation performance metrics (MAPE) using plot_cross_validation_metric in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nplot_cross_validation_metric(df.cv, metric = 'mape')\n```\n\n----------------------------------------\n\nTITLE: Plotting Cross-Validation Metrics in Prophet\nDESCRIPTION: Creates a visualization of cross-validation metrics using Prophet's built-in plotting function. The code generates a figure showing the MAPE (Mean Absolute Percentage Error) metric.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import plot_cross_validation_metric\nfig = plot_cross_validation_metric(df_cv, metric='mape')\n```\n\n----------------------------------------\n\nTITLE: Plotting Prophet Model Predictions in Python\nDESCRIPTION: Code snippet demonstrating how to plot predictions from a Prophet model (m1) using the predict method with a dataset named large_y.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Python\nm1.plot(m1.predict(large_y));\n```\n\n----------------------------------------\n\nTITLE: Creating Holiday Dataframes in R for Prophet\nDESCRIPTION: This R code creates dataframes for playoff and Super Bowl events to be used as holiday effects in a Prophet model. It specifies date ranges and window settings for each event type.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(dplyr)\nplayoffs <- data_frame(\n  holiday = 'playoff',\n  ds = as.Date(c('2008-01-13', '2009-01-03', '2010-01-16',\n                 '2010-01-24', '2010-02-07', '2011-01-08',\n                 '2013-01-12', '2014-01-12', '2014-01-19',\n                 '2014-02-02', '2015-01-11', '2016-01-17',\n                 '2016-01-24', '2016-02-07')),\n  lower_window = 0,\n  upper_window = 1\n)\nsuperbowls <- data_frame(\n  holiday = 'superbowl',\n  ds = as.Date(c('2010-02-07', '2014-02-02', '2016-02-07')),\n  lower_window = 0,\n  upper_window = 1\n)\nholidays <- bind_rows(playoffs, superbowls)\n```\n\n----------------------------------------\n\nTITLE: Plotting Seasonality Components in R\nDESCRIPTION: Visualizes the decomposed seasonality components from the multiplicative Prophet model in R, showing seasonality as a percentage of the trend.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: R\nCODE:\n```\n%%R -w 9 -h 6 -u in\nprophet_plot_components(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Creating COVID Period Flags for Conditional Seasonality\nDESCRIPTION: Adds boolean columns to the dataframe to identify pre-COVID and post-COVID periods. These flags will be used to implement conditional seasonality patterns based on the time period.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndf2 = df.copy()\ndf2['pre_covid'] = pd.to_datetime(df2['ds']) < pd.to_datetime('2020-03-21')\ndf2['post_covid'] = ~df2['pre_covid']\n```\n\n----------------------------------------\n\nTITLE: Setting Carrying Capacity\nDESCRIPTION: Sets the carrying capacity (cap) value for the logistic growth model in both R and Python\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ndf$cap <- 8.5\n```\n\nLANGUAGE: python\nCODE:\n```\ndf['cap'] = 8.5\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Uncertainty Interval Width in Prophet\nDESCRIPTION: Configure the width of uncertainty intervals (default is 80%) using the interval_width parameter. The example shows setting it to 95% confidence intervals in both R and Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/uncertainty_intervals.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, interval.width = 0.95)\nforecast <- predict(m, future)\n```\n\nLANGUAGE: python\nCODE:\n```\nforecast = Prophet(interval_width=0.95).fit(df).predict(future)\n```\n\n----------------------------------------\n\nTITLE: Plotting Component Breakdowns of Prophet Forecasts in R\nDESCRIPTION: Displays the decomposed forecast components using the prophet_plot_components function. This takes the fitted model object and forecast dataframe to visualize trend, seasonality, and other components individually.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_13\n\nLANGUAGE: R\nCODE:\n```\nprophet_plot_components(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Parallel Cross-Validation with Dask in Prophet\nDESCRIPTION: Demonstrates how to perform parallel cross-validation using Dask distributed computing. Sets up a client connection and runs cross-validation with specific time windows.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom dask.distributed import Client\n\nclient = Client()  # connect to the cluster\ndf_cv = cross_validation(m, initial='730 days', period='180 days', horizon='365 days',\n                         parallel=\"dask\")\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Prophet Release in R using GitHub\nDESCRIPTION: Commands to install the latest released version of Prophet directly from GitHub. This method provides access to the most recent bug fixes and updated holiday data not available in the CRAN version.\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages('remotes')\nremotes::install_github('facebook/prophet@*release', subdir = 'R')\n```\n\n----------------------------------------\n\nTITLE: Decreasing Trend Flexibility in Prophet (Python)\nDESCRIPTION: Python code to create a Prophet model with decreased changepoint prior scale (0.001), which makes the trend less flexible and more resistant to fitting to noise in the data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(changepoint_prior_scale=0.001)\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiplicative Seasonality in R\nDESCRIPTION: This code demonstrates how to set Prophet to use multiplicative seasonality in R to better model time series where seasonal effects grow with the trend.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/multiplicative_seasonality.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n# R\nm <- prophet(df, seasonality.mode = 'multiplicative')\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Plotting Components with Uncertainty in Prophet\nDESCRIPTION: Visualize the forecast components including uncertainty intervals after performing MCMC sampling. This displays seasonal components with their uncertainty bounds.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/uncertainty_intervals.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nprophet_plot_components(m, forecast)\n```\n\nLANGUAGE: python\nCODE:\n```\nfig = m.plot_components(forecast)\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental cmdstanr Backend in R\nDESCRIPTION: Instructions for setting up the experimental cmdstanr backend as an alternative to rstan. This includes installing necessary packages and setting environment variables.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(c(\"cmdstanr\", \"posterior\"), repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\n\n# If you haven't installed cmdstan before, run:\ncmdstanr::install_cmdstan()\n# Otherwise, you can point cmdstanr to your cmdstan path:\ncmdstanr::set_cmdstan_path(path = <your existing cmdstan>)\n\n# Set the R_STAN_BACKEND environment variable\nSys.setenv(R_STAN_BACKEND = \"CMDSTANR\")\n```\n\n----------------------------------------\n\nTITLE: Performing Cross-validation with Custom Parameters in R\nDESCRIPTION: This R code demonstrates how to perform cross-validation with custom initial, period, and horizon parameters. It also shows how to use custom cutoff dates.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n%%R\ndf.cv <- cross_validation(m, initial = 730, period = 180, horizon = 365, units = 'days')\nhead(df.cv)\n\ncutoffs <- as.Date(c('2013-02-15', '2013-08-15', '2014-02-15'))\ndf.cv2 <- cross_validation(m, cutoffs = cutoffs, horizon = 365, units = 'days')\n```\n\n----------------------------------------\n\nTITLE: Modeling Air Passengers with Additive Seasonality in R\nDESCRIPTION: Loads the air passengers dataset and fits a Prophet model with default additive seasonality in R. Creates a forecast and plots the results.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n%%R -w 10 -h 6 -u in\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_air_passengers.csv')\nm <- prophet(df)\nfuture <- make_future_dataframe(m, 50, freq = 'm')\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Loading the Prophet Library in R\nDESCRIPTION: Loads the Prophet library in R environment using the rpy2 extension to demonstrate the R API for time series forecasting with Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: r\nCODE:\n```\n%%R\nlibrary(prophet)\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Bayesian Sampling for Seasonality Uncertainty in R\nDESCRIPTION: Demonstrates how to enable MCMC sampling in R to generate uncertainty estimates for seasonality components. This approach is more computationally expensive but provides more detailed uncertainty analysis.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet(df, mcmc.samples = 300)\nforecast <- predict(m, future)\n```\n\n----------------------------------------\n\nTITLE: Plotting Alternative Prophet Model Predictions in Python\nDESCRIPTION: Code snippet showing how to plot predictions from a second Prophet model (m2) using the predict method with the same large_y dataset.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Python\nm2.plot(m2.predict(large_y));\n```\n\n----------------------------------------\n\nTITLE: Loading and Forecasting Time Series with Outliers\nDESCRIPTION: Loads Wikipedia page visit data containing outliers and creates a basic Prophet forecast. Shows how outliers can affect the uncertainty intervals of the forecast.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/outliers.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_R_outliers1.csv')\nm <- prophet(df)\nfuture <- make_future_dataframe(m, periods = 1096)\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_R_outliers1.csv')\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=1096)\nforecast = m.predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Importing Prophet in R\nDESCRIPTION: Loads the Prophet library in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nlibrary(prophet)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Holiday Prior Scale in Python\nDESCRIPTION: This code shows how to adjust the prior scale for holidays in Prophet to reduce overfitting.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nm = prophet(df, holidays = holidays, holidays_prior_scale = 0.05)\nforecast = predict(m, future)\nforecast.loc[abs(forecast['playoff'] + forecast['superbowl']) > 0, ['ds', 'playoff', 'superbowl']].tail(10)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cutoffs for Cross Validation (R)\nDESCRIPTION: Demonstrates how to supply custom cutoff dates for cross validation in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ncutoffs <- as.Date(c('2013-02-15', '2013-08-15', '2014-02-15'))\ndf.cv2 <- cross_validation(m, cutoffs = cutoffs, horizon = 365, units = 'days')\n```\n\n----------------------------------------\n\nTITLE: Loading Data and Fitting Basic Prophet Model in Python\nDESCRIPTION: Loads the Peyton Manning dataset, limits it to the first six months, creates a Prophet model, fits it to the data, and prepares a future dataframe for prediction.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\ndf = df.loc[:180,]  # Limit to first six months\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=60)\n```\n\n----------------------------------------\n\nTITLE: Examining Transformed Response Variable in Prophet\nDESCRIPTION: Code showing how to inspect the first 10 values of the transformed response variable (y) after preprocessing in Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Python\ntransformed.y.head(n=10)\n```\n\n----------------------------------------\n\nTITLE: Removing Outliers by Setting them to NA/None\nDESCRIPTION: Demonstrates how to handle outliers by setting their values to NA/None while keeping their dates in the dataset. This allows Prophet to make predictions for those periods without being affected by the outlier values.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/outliers.md#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\noutliers <- (as.Date(df$ds) > as.Date('2010-01-01')\n             & as.Date(df$ds) < as.Date('2011-01-01'))\ndf$y[outliers] = NA\nm <- prophet(df)\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf.loc[(df['ds'] > '2010-01-01') & (df['ds'] < '2011-01-01'), 'y'] = None\nmodel = Prophet().fit(df)\nfig = model.plot(model.predict(future))\n```\n\n----------------------------------------\n\nTITLE: Creating Future Dates for Prediction in R\nDESCRIPTION: Generates a data frame of future dates for making predictions in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_10\n\nLANGUAGE: r\nCODE:\n```\nfuture <- make_future_dataframe(m, periods = 365)\ntail(future)\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Data with Prophet in Python\nDESCRIPTION: Code demonstrating how to preprocess data for Prophet by loading a CSV file, initializing a Prophet model, and transforming the data before fitting.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Python\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\nm = Prophet()\ntransformed = m.preprocess(df)\n```\n\n----------------------------------------\n\nTITLE: Examining Transformed Feature Matrix in Prophet\nDESCRIPTION: Code showing how to inspect the first 10 rows of the transformed feature matrix (X) after preprocessing in Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Python\ntransformed.X.head(n=10)\n```\n\n----------------------------------------\n\nTITLE: Loading Pedestrian Sensor Data\nDESCRIPTION: Loads a dataset of pedestrian counts from Melbourne during COVID-19 period for analysis. The data is retrieved from a GitHub repository.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_pedestrians_covid.csv')\n```\n\n----------------------------------------\n\nTITLE: Calculating Initial Model Parameters in Prophet\nDESCRIPTION: Code demonstrating how to access the initial parameter values that Prophet will use when fitting the model.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/additional_topics.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Python\nm.calculate_initial_params(num_total_regressors=transformed.K)\n```\n\n----------------------------------------\n\nTITLE: Fitting Default Prophet Model\nDESCRIPTION: Creates and fits a basic Prophet model without any adjustments for COVID-19 shocks to establish a baseline forecast.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet()\nm = m.fit(df)\nfuture = m.make_future_dataframe(periods=366)\nforecast = m.predict(future)\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet Package in R from CRAN\nDESCRIPTION: Command to install the Prophet package from CRAN using R's standard package installation function. This provides an older but stable version of Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages('prophet')\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet Environment\nDESCRIPTION: Sets up the Python environment with required imports and configures logging settings for Prophet\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n%matplotlib inline\n\nfrom prophet import Prophet\nimport pandas as pd\nimport logging\nimport warnings\n\nlogging.getLogger('prophet').setLevel(logging.ERROR)\nwarnings.filterwarnings(\"ignore\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Forecast Components in R\nDESCRIPTION: Creates a visualization of the forecast components in R using the prophet_plot_components function, showing trend and seasonal patterns.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: r\nCODE:\n```\n%%R -w 9 -h 9 -u in\nprophet_plot_components(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Holidays DataFrame in Python\nDESCRIPTION: This snippet demonstrates how to create a custom holidays DataFrame for New South Wales, Australia using the make_holidays_df utility function from Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.make_holidays import make_holidays_df\n\nnsw_holidays = make_holidays_df(\n    year_list=[2019 + i for i in range(10)], country='AU', province='NSW'\n)\nnsw_holidays.head(n=10)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet and Loading Data in Python\nDESCRIPTION: This snippet sets up the Prophet library, loads necessary dependencies, and reads the example dataset. It also configures logging and warning suppression.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n%matplotlib inline\nfrom prophet import Prophet\nfrom matplotlib import pyplot as plt\n\nimport pandas as pd\nimport logging\nimport warnings\n\nlogging.getLogger('prophet').setLevel(logging.ERROR)\nwarnings.filterwarnings(\"ignore\")\n```\n\n----------------------------------------\n\nTITLE: Plotting the Prophet Forecast Results in R\nDESCRIPTION: Visualizes the forecast results in R using the generic plot function, which displays the historical data, forecast, and uncertainty intervals.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: r\nCODE:\n```\n%%R -w 10 -h 6 -u in\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Fitting Logistic Growth Model\nDESCRIPTION: Creates and fits the Prophet model with logistic growth in both R and Python\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nm <- prophet(df, growth = 'logistic')\n```\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(growth='logistic')\nm.fit(df)\n```\n\n----------------------------------------\n\nTITLE: Importing Prophet and Setting Up Environment in Python\nDESCRIPTION: Sets up the Python environment by importing the Prophet library along with supporting libraries like matplotlib, pandas, and numpy. It also configures logging to suppress Prophet and cmdstanpy warnings.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n%matplotlib inline\n\nfrom prophet import Prophet\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport logging\nimport warnings\n\nlogging.getLogger('prophet').setLevel(logging.ERROR)\nlogging.getLogger('cmdstanpy').setLevel(logging.ERROR)\nwarnings.filterwarnings('ignore')\n```\n\n----------------------------------------\n\nTITLE: Visualizing Prophet Forecast with Lockdowns and Conditional Seasonality\nDESCRIPTION: Plots the forecast results with a horizontal line at y=0 for reference. The title indicates that this model includes both lockdown holidays and conditional weekly seasonality to handle the COVID impact.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nm4.plot(forecast4)\nplt.axhline(y=0, color='red')\nplt.title('Lockdowns as one-off holidays + Conditional weekly seasonality');\n```\n\n----------------------------------------\n\nTITLE: Handling Extreme Outliers Affecting Seasonality\nDESCRIPTION: Shows how extreme outliers can affect seasonality estimates and impact future predictions. Loads a dataset with significant outliers that affect the forecast pattern.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/outliers.md#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_R_outliers2.csv')\nm <- prophet(df)\nfuture <- make_future_dataframe(m, periods = 1096)\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_R_outliers2.csv')\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=1096)\nforecast = m.predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for Prophet\nDESCRIPTION: Initializes the Python environment by loading required extensions, setting up matplotlib for inline plotting, and configuring logging and warnings to suppress unnecessary messages from Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n%matplotlib inline\n\nimport logging\nimport warnings\n\nlogging.getLogger('prophet').setLevel(logging.ERROR)\nwarnings.filterwarnings('ignore')\n```\n\n----------------------------------------\n\nTITLE: Plotting Default Prophet Forecast\nDESCRIPTION: Generates a plot of the default Prophet model's forecast, highlighting the zero line to better visualize periods with negative values.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nm.plot(forecast)\nplt.axhline(y=0, color='red')\nplt.title('Default Prophet');\n```\n\n----------------------------------------\n\nTITLE: Applying Holiday Effects in Prophet Model - Python\nDESCRIPTION: Shows how to incorporate holiday effects into a Prophet model in Python using the holidays parameter.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(holidays=holidays)\nforecast = m.fit(df).predict(future)\n```\n\n----------------------------------------\n\nTITLE: Creating a Future Dates Dataframe in R\nDESCRIPTION: Generates a dataframe with future dates in R using the make_future_dataframe function, extending 365 days beyond the historical data for prediction.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/quick_start.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: r\nCODE:\n```\n%%R\nfuture <- make_future_dataframe(m, periods = 365)\ntail(future)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Components with Lockdown Adjustments\nDESCRIPTION: Displays the decomposition of the forecast with lockdown adjustments, showing how holiday effects capture the negative impact of lockdowns.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nm2.plot_components(forecast2);\n```\n\n----------------------------------------\n\nTITLE: Filtering and Displaying Holiday Effects in Forecast (Python)\nDESCRIPTION: This Python code filters the forecast dataframe to show only rows where holiday effects are present, displaying the last 10 such rows.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/holiday_effects.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nforecast[(forecast['playoff'] + forecast['superbowl']).abs() > 0][\n        ['ds', 'playoff', 'superbowl']][-10:]\n```\n\n----------------------------------------\n\nTITLE: Plotting Forecast Components with Uncertainty in R\nDESCRIPTION: Shows how to visualize the forecast components including uncertainty intervals in R after performing MCMC sampling. The plot window size is set to 9x6 inches.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nprophet_plot_components(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cutoffs for Cross Validation (Python)\nDESCRIPTION: Shows how to supply custom cutoff dates for cross validation in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/diagnostics.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncutoffs = pd.to_datetime(['2013-02-15', '2013-08-15', '2014-02-15'])\ndf_cv2 = cross_validation(m, cutoffs=cutoffs, horizon='365 days')\n```\n\n----------------------------------------\n\nTITLE: Using MCMC for Uncertainty Estimation in Prophet\nDESCRIPTION: Demonstrates the use of MCMC sampling in Prophet to visualize uncertainty in seasonality components, particularly useful for understanding model behavior with monthly data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/non-daily_data.md#2025-04-16_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, seasonality.mode = 'multiplicative', mcmc.samples = 300)\nfcst <- predict(m, future)\nprophet_plot_components(m, fcst)\n```\n\nLANGUAGE: Python\nCODE:\n```\nm = Prophet(seasonality_mode='multiplicative', mcmc_samples=300).fit(df, show_progress=False)\nfcst = m.predict(future)\nfig = m.plot_components(fcst)\n```\n\n----------------------------------------\n\nTITLE: Importing Data in R\nDESCRIPTION: Reads the example dataset into an R data frame.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/quick_start.md#2025-04-16_snippet_8\n\nLANGUAGE: r\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet and Loading Data in R\nDESCRIPTION: This R code snippet loads the Prophet library, reads the example dataset, and creates a Prophet model with future predictions.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n%%R\nlibrary(prophet)\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\nm <- prophet(df)\nfuture <- make_future_dataframe(m, periods=366)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of Prophet in Python\nDESCRIPTION: Commands to clone the Prophet repository and install the latest code from source. This provides the most recent changes but may not be stable.\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/facebook/prophet.git\ncd prophet/python\npython -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Decreasing Trend Flexibility in Prophet (R)\nDESCRIPTION: R code to create a Prophet model with decreased changepoint prior scale (0.001), which makes the trend less flexible and more resistant to fitting to noise in the data.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/trend_changepoints.md#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(df, changepoint.prior.scale = 0.001)\nforecast <- predict(m, future)\nplot(m, forecast)\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset in R and Python\nDESCRIPTION: Loads the example Wikipedia page visits dataset in both R and Python environments\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\n```\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet with Custom Holidays in Python\nDESCRIPTION: This code shows how to initialize a Prophet model with custom holidays DataFrame in Python.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet import Prophet\n\nm_nsw = Prophet(holidays=nsw_holidays)\n```\n\n----------------------------------------\n\nTITLE: Loading Example Data in R and Python for Prophet Forecasting\nDESCRIPTION: Loads an example dataset containing Wikipedia page visits for the R programming language page, which will be used to demonstrate saturating forecasts in Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/saturating_forecasts.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ndf <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\n```\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')\n```\n\n----------------------------------------\n\nTITLE: Adding Built-in Country Holidays - R\nDESCRIPTION: Demonstrates how to add built-in country holidays to a Prophet model in R using the add_country_holidays function.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nm <- prophet(holidays = holidays)\nm <- add_country_holidays(m, country_name = 'US')\nm <- fit.prophet(m, df)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for Prophet\nDESCRIPTION: Initializes the Python environment for using Prophet with proper imports and logging configuration. Suppresses warnings and error messages to create a cleaner output.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rpy2.ipython\n%matplotlib inline\n\nfrom prophet import Prophet\nfrom matplotlib import pyplot as plt\nimport logging\nimport pandas as pd\nimport numpy as np\nimport warnings\n\nlogging.getLogger('prophet').setLevel(logging.ERROR)\nlogging.getLogger('numexpr').setLevel(logging.ERROR)\nwarnings.filterwarnings(\"ignore\")\n```\n\n----------------------------------------\n\nTITLE: Adding Built-in Country Holidays - Python\nDESCRIPTION: Shows how to add built-in country holidays to a Prophet model in Python using the add_country_holidays method.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/seasonality,_holiday_effects,_and_regressors.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nm = Prophet(holidays=holidays)\nm.add_country_holidays(country_name='US')\nm.fit(df)\n```\n\n----------------------------------------\n\nTITLE: Initializing Prophet Environment and Setup\nDESCRIPTION: Sets up the environment for Prophet time series analysis by importing necessary libraries, configuring matplotlib, and suppressing warning messages.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/handling_shocks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nfrom prophet import Prophet\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport logging\nlogging.getLogger('prophet').setLevel(logging.ERROR)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.rcParams['figure.figsize'] = 9, 6\n```\n\n----------------------------------------\n\nTITLE: Setting Prediction Interval Width in Python\nDESCRIPTION: Shows how to adjust the uncertainty interval width in Prophet to 95% (from the default 80%) when using Python. This example chains model creation, fitting, and prediction into a single line.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/uncertainty_intervals.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nforecast = Prophet(interval_width=0.95).fit(df).predict(future)\n```\n\n----------------------------------------\n\nTITLE: Loading Prophet in R\nDESCRIPTION: Imports the Prophet library in R environment\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/saturating_forecasts.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(prophet)\n```\n\n----------------------------------------\n\nTITLE: Modeling Air Passengers with Additive Seasonality in Python\nDESCRIPTION: Loads the air passengers dataset and fits a Prophet model with default additive seasonality in Python. Creates a forecast and plots the results.\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/multiplicative_seasonality.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_air_passengers.csv')\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(50, freq='MS')\nforecast = m.predict(future)\nfig = m.plot(forecast)\n```\n\n----------------------------------------\n\nTITLE: Including GridBlocks via Liquid Template\nDESCRIPTION: A Liquid template code snippet for including GridBlocks from a data source. This method uses a data file to generate the grid content instead of hardcoding it.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% include content/gridblocks.html data_source=site.data.features imagealign=\"bottom\"%}\n```\n\n----------------------------------------\n\nTITLE: Finding Best Parameters for Prophet Model in Python\nDESCRIPTION: This code snippet demonstrates how to find the best parameters for a Prophet model by analyzing the results of hyperparameter tuning. It prints the tuning results and identifies the best parameters based on the lowest RMSE (Root Mean Square Error).\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Find the best parameters\ntuning_results = pd.DataFrame(all_params)\ntuning_results['rmse'] = rmses\nprint(tuning_results)\n```\n\nLANGUAGE: python\nCODE:\n```\nbest_params = all_params[np.argmin(rmses)]\nprint(best_params)\n```\n\n----------------------------------------\n\nTITLE: Running R Tests for Prophet\nDESCRIPTION: R commands and bash command to run the test suite for Prophet in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_8\n\nLANGUAGE: r\nCODE:\n```\n> install.packages('devtools')\n> devtools::test()\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ Rscript testthat.R\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to Prophet\nDESCRIPTION: Git commands for committing changes and pushing them to the forked repository on GitHub.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ git add path/to/file-to-be-added.py\n$ git commit -m\n$ git push origin new-feature\n```\n\n----------------------------------------\n\nTITLE: Updating R Source Code Documentation\nDESCRIPTION: R command to update function documentation using roxygen when changes are made to R code.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_10\n\nLANGUAGE: r\nCODE:\n```\n> devtools::document()\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Headers for Documentation\nDESCRIPTION: Example of the YAML front matter header structure required for markdown files in the documentation. This header defines document ID, title, layout, and permalink.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndocid: getting-started\ntitle: Getting started with ProjectName\nlayout: docs\npermalink: /docs/getting-started.html\n---\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Feature Branch\nDESCRIPTION: Command to delete the local feature branch after it has been merged into the upstream main branch\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch -d new-feature\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet Package in Python using pip\nDESCRIPTION: Use pip to install Prophet from PyPI. This is the standard method for installing Python packages. Note that Python 2 is no longer supported from v0.6 onwards.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install prophet\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required Ruby gems for the documentation site using Bundler.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# run this in the 'docs' directory\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet Package in Python using Conda\nDESCRIPTION: Install Prophet through conda-forge using the conda package manager. This is an alternative method for Anaconda users.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge prophet\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet in Python via PyPI\nDESCRIPTION: Command to install the Prophet package in Python using pip. The package is available on PyPI and requires Python 3.7+ (as of v1.1).\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install prophet\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Bundler\nDESCRIPTION: Command to install the Bundler gem manager for Ruby dependencies.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# may require sudo\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet in Python via Conda\nDESCRIPTION: Command to install Prophet through conda-forge, an alternative installation method for Python users who prefer Anaconda environments.\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge prophet\n```\n\n----------------------------------------\n\nTITLE: Setting Up Experimental CmdStanR Backend in R\nDESCRIPTION: Instructions for configuring Prophet to use the experimental cmdstanr backend instead of rstan. This includes installing necessary packages and setting environment variables.\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n# We recommend running this in a fresh R session or restarting your current session\ninstall.packages(c(\"cmdstanr\", \"posterior\"), repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\n\n# If you haven't installed cmdstan before, run:\ncmdstanr::install_cmdstan()\n# Otherwise, you can point cmdstanr to your cmdstan path:\ncmdstanr::set_cmdstan_path(path = <your existing cmdstan>)\n\n# Set the R_STAN_BACKEND environment variable\nSys.setenv(R_STAN_BACKEND = \"CMDSTANR\")\n```\n\n----------------------------------------\n\nTITLE: Installing Prophet in Python with Custom CmdStan\nDESCRIPTION: Command to install Prophet while using an existing CmdStan installation instead of the default behavior of downloading a fixed version. This is done by setting an environment variable before installation.\nSOURCE: https://github.com/facebook/prophet/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PROPHET_REPACKAGE_CMDSTAN=False; python -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cross-validation Metrics in R and Python\nDESCRIPTION: These snippets show how to create plots of cross-validation metrics in both R and Python, focusing on the Mean Absolute Percentage Error (MAPE).\nSOURCE: https://github.com/facebook/prophet/blob/main/notebooks/diagnostics.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: r\nCODE:\n```\n%%R -w 10 -h 6 -u in\nplot_cross_validation_metric(df.cv, metric = 'mape')\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom prophet.plot import plot_cross_validation_metric\nfig = plot_cross_validation_metric(df_cv, metric='mape')\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Facebook Prophet Repository\nDESCRIPTION: Commands for forking the Prophet repository, cloning it locally, and adding the upstream remote.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/your-user-name/prophet.git\n$ cd prophet\n$ git remote add upstream https://github.com/facebook/prophet.git\n```\n\n----------------------------------------\n\nTITLE: Initializing R Environment for Prophet Development\nDESCRIPTION: R commands for initializing a new project local environment using renv.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n> setwd(\"path/to/prophet/R\") # set R subdirectory as working directory\n> install.packages('renv')\n> renv::init()\n```\n\n----------------------------------------\n\nTITLE: Pushing Updates to GitHub Branch\nDESCRIPTION: Command to push new changes from local feature branch to GitHub, which automatically updates an existing pull request and triggers CI tests\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin new-feature\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of Prophet in Python\nDESCRIPTION: Command for installing the development version of Prophet in the Python environment.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -e \".[dev,parallel]\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Prophet Installation in Python\nDESCRIPTION: Python commands to verify the installation of the development version of Prophet.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import prophet\n>>> prophet.__version__\n'1.1.2'  # whatever the current github version is\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Feature Branch\nDESCRIPTION: Git commands for creating a new feature branch and updating it with changes from the main branch.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b new-feature\n$ git fetch upstream\n$ git rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of Prophet in R\nDESCRIPTION: Command for building and installing the local version of the Prophet package in R.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ R CMD INSTALL .\n```\n\n----------------------------------------\n\nTITLE: Creating Python Environment for Prophet Development\nDESCRIPTION: Commands for setting up a Python development environment using either Anaconda or venv.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd python\n\n# with Anaconda\n$ conda create -n prophet\n$ conda activate prophet\n\n# with venv\n$ python3 -m venv prophet\n$ source prophet/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests for Prophet\nDESCRIPTION: Command to run the entire test suite for Prophet in Python using pytest.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest prophet/tests/\n```\n\n----------------------------------------\n\nTITLE: Generating Prophet Documentation\nDESCRIPTION: Commands for rebuilding the documentation for Prophet from Jupyter notebooks.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/_docs/contributing.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cd docs\n$ make notebooks\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Jupyter Notebooks\nDESCRIPTION: Commands to rebuild documentation pages from Jupyter notebooks in the Prophet project.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd docs\n$ make notebooks\n```\n\n----------------------------------------\n\nTITLE: Running Jekyll Server\nDESCRIPTION: Various commands for running the Jekyll server locally with different options for full builds, incremental builds, and specifying host IP.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve --incremental\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll serve --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Bundle Dependencies\nDESCRIPTION: Command to update the Github Pages gem and all dependencies to their latest versions.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbundle update\n```\n\n----------------------------------------\n\nTITLE: Creating HTML GridBlocks for Landing Page\nDESCRIPTION: HTML markup for creating a GridBlock layout on the landing page. This example demonstrates how to structure a two-column layout with custom content sections.\nSOURCE: https://github.com/facebook/prophet/blob/main/docs/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"gridBlock\">\n  <div class=\"blockElement twoByGridBlock alignLeft\">\n    <div class=\"blockContent\">\n      <h3>Your Features</h3>\n      <ul>\n        <li>The <a href=\"http://example.org/\">Example</a></li>\n        <li><a href=\"http://example.com\">Another Example</a></li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"blockElement twoByGridBlock alignLeft\">\n    <div class=\"blockContent\">\n      <h3>More information</h3>\n      <p>\n         Stuff here\n      </p>\n    </div>\n  </div>\n</div>\n```"
  }
]