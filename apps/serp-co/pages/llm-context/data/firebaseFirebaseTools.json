[
  {
    "owner": "firebase",
    "repo": "firebase-tools",
    "content": "TITLE: Installing Firebase CLI using npm\nDESCRIPTION: Command to install the Firebase CLI globally using npm (Node Package Manager). This requires Node.js and npm to be installed on the system and provides the globally accessible 'firebase' command.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Hosting for Angular\nDESCRIPTION: Firebase configuration JSON showing how to specify the Angular workspace source directory for hosting.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/angular.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"source\": \"./path-to-your-angular-workspace\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase CLI Authentication Methods\nDESCRIPTION: Overview of authentication methods for Firebase CLI in order of priority, including user tokens, local login, service accounts, and application default credentials\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# User Token (Deprecated)\nfirebase --token=\"<token>\" projects:list\n\n# Local Login\nfirebase login\n\n# Service Account\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json\n\n# Application Default Credentials\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Deploying Flutter Web to Firebase Hosting\nDESCRIPTION: Command to deploy your Flutter web application to Firebase Hosting after initializing your project.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/flutter.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying a Nuxt Application to Firebase\nDESCRIPTION: Command to deploy a Nuxt application to Firebase Hosting after initialization. This will build the Nuxt app and deploy it according to the detected configuration.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: CI System Authentication for Firebase CLI\nDESCRIPTION: Steps to authenticate Firebase CLI in continuous integration environments using service account credentials\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# CI Authentication Steps\n# 1. Create service account\n# 2. Generate service account key\n# 3. Store key securely\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/key.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase.json for Express.js Integration\nDESCRIPTION: Configuration in firebase.json to specify the source directory for an Express.js application instead of using the standard public option.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"source\": \"./path-to-your-express-directory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for SvelteKit\nDESCRIPTION: Command to initialize Firebase Hosting for your SvelteKit project. This interactive command will prompt for configuration options for your web framework deployment.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/sveltekit.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Firebase Deploy Command for Dynamic Content\nDESCRIPTION: Shell command to deploy both static content to Firebase Hosting and dynamic Express application to Cloud Functions.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring firebase.json for Flutter Web Hosting\nDESCRIPTION: Update the hosting configuration in firebase.json to use a 'source' option pointing to your Flutter application directory instead of the standard 'public' option for static content.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/flutter.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"source\": \"./path-to-your-flutter-app\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Deploy Command\nDESCRIPTION: Shell command to deploy the Angular application to Firebase Hosting.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/angular.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Angular SSR Support\nDESCRIPTION: Shell command to add Server-Side Rendering support to an Angular application.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/angular.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng add @angular/ssr\n```\n\n----------------------------------------\n\nTITLE: Deploying a Firebase Hosting Project\nDESCRIPTION: Command to deploy the Vite application to Firebase Hosting after initialization is complete.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/vite.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling Firebase Web Frameworks Preview for Nuxt Deployment\nDESCRIPTION: Command to enable the web frameworks preview feature in Firebase CLI, which is required for Nuxt framework support.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfirebase experiments:enable webframeworks\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for a Project\nDESCRIPTION: Command to initialize Firebase Hosting for a web project, which will start the interactive setup process.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/vite.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Frameworks Preview in Firebase CLI\nDESCRIPTION: Command to enable the experimental web frameworks feature in the Firebase CLI, which is required for Vite integration.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/vite.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfirebase experiments:enable webframeworks\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for an Astro Project\nDESCRIPTION: Command to initialize Firebase Hosting for your Astro web application. This starts the interactive setup process.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/astro.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for a Nuxt Project\nDESCRIPTION: Command to initialize Firebase Hosting for a Nuxt project, which sets up the necessary configuration files.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Complete Package.json with Directories Configuration\nDESCRIPTION: Fully configured package.json with the directories.serve property that tells the Firebase CLI where to find build artifacts for deployment.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"express-app\",\n    \"version\": \"0.0.0\",\n    \"scripts\": {\n        \"build\": \"spack && npm run static && npm run prerender\",\n        \"static\": \"cp static/* dist\",\n        \"prerender\": \"ts-node prerender.ts\"\n    },\n    \"directories\": {\n        \"serve\": \"dist\"\n    },\n    â€¦\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Indexes and Field Overrides for Cloud Firestore in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of a Firestore index configuration file. It includes examples of defining compound indexes and field overrides, which are used to customize indexing behavior for specific collections and fields.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/firestore/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Required, specify compound indexes\n  indexes: [\n    {\n      collectionGroup: \"posts\",\n      queryScope: \"COLLECTION\",\n      fields: [\n        { fieldPath: \"author\", arrayConfig: \"CONTAINS\" },\n        { fieldPath: \"timestamp\", order: \"DESCENDING\" }\n      ]\n    }\n  ],\n\n  // Optional, disable indexes or enable single-field collection group indexes\n  fieldOverrides: [\n    {\n      collectionGroup: \"posts\",\n      fieldPath: \"myBigMapField\",\n      // We want to disable indexing on our big map field, and so empty the indexes array\n      indexes: []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Firebase CLI Repository for Local Development\nDESCRIPTION: Commands to clone the Firebase Tools repository, install dependencies, and link it to your environment for development purposes. This allows the 'firebase' command to execute against your local code instead of the globally installed version.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:firebase/firebase-tools.git\ncd firebase-tools\nnpm install # must be run the first time you clone\nnpm link  # installs dependencies, runs a build, links it into the environment\n```\n\n----------------------------------------\n\nTITLE: Basic Express.js Package.json Configuration\nDESCRIPTION: Initial package.json configuration showing build scripts for an Express application, which needs to be modified for Firebase integration.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"express-app\",\n    \"version\": \"0.0.0\",\n    \"scripts\": {\n        \"build\": \"spack\",\n        \"static\": \"cp static/* dist\",\n        \"prerender\": \"ts-node prerender.ts\"\n    },\n    â€¦\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Static Content Deployment Command\nDESCRIPTION: Shell command to deploy static content to Firebase Hosting after configuring the application.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Indexing with TTL Policy for Firestore Fields in JavaScript\nDESCRIPTION: This snippet illustrates how to maintain default indexing while enabling a TTL policy for a specific field in Firestore. It shows the configuration for ascending, descending, and array-contains indexes with TTL enabled.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/firestore/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"fieldOverrides\": [\n    {\n      \"collectionGroup\": \"yourCollectionGroup\",\n      \"fieldPath\": \"yourFieldPath\",\n      \"ttl\": true,\n      \"indexes\": [\n        { \"order\": \"ASCENDING\", \"queryScope\": \"COLLECTION_GROUP\" },\n        { \"order\": \"DESCENDING\", \"queryScope\": \"COLLECTION_GROUP\" },\n        { \"arrayConfig\": \"CONTAINS\", \"queryScope\": \"COLLECTION_GROUP\" }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Firestore Field Overrides in JavaScript\nDESCRIPTION: This snippet details the JSON schema for field overrides in the Firestore index configuration. It includes properties for specifying collection groups, field paths, TTL policies, and custom indexing configurations for specific fields.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/firestore/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  collectionGroup: string  // Labeled \"Collection ID\" in the Firebase console\n  fieldPath: string\n  ttl?: boolean            // Set specified field to have TTL policy and be eligible for deletion\n  indexes: array           // Set empty array to disable indexes on this collectionGroup + fieldPath\n    queryScope: string     // One of \"COLLECTION\", \"COLLECTION_GROUP\"\n    order?: string         // One of \"ASCENDING\", \"DESCENDING\"; excludes arrayConfig property\n    arrayConfig?: string   // If this parameter used, must be \"CONTAINS\"; excludes order property\n```\n\n----------------------------------------\n\nTITLE: Listing Apps using Firebase Tools - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Firebase CLI as a Node module to list Android apps for a given project. It shows how to handle promises and catch errors, with a focus on providing positional arguments and options in function calls.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = require(\"firebase-tools\");\nclient.apps\n  .list(\"ANDROID\", { project: \"foo\" })\n  .then((data) => {\n    // ...\n  })\n  .catch((err) => {\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Firestore Indexes in JavaScript\nDESCRIPTION: This snippet outlines the JSON schema for defining indexes in the Firestore index configuration file. It specifies the required and optional properties for each index, including collection group, query scope, and field configurations.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/firestore/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  collectionGroup: string  // Labeled \"Collection ID\" in the Firebase console\n  queryScope: string       // One of \"COLLECTION\", \"COLLECTION_GROUP\"\n  fields: array\n    fieldPath: string\n    order?: string         // One of \"ASCENDING\", \"DESCENDING\"; excludes arrayConfig property\n    arrayConfig?: string   // If this parameter used, must be \"CONTAINS\"; excludes order property\n```\n\n----------------------------------------\n\nTITLE: Enabling TTL Policy for Firestore Fields in JavaScript\nDESCRIPTION: This snippet shows how to enable a Time-To-Live (TTL) policy for a specific field in Firestore using the fieldOverrides configuration. It demonstrates disabling indexing while enabling TTL for a field.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/firestore/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Optional, disable index single-field collection group indexes\nfieldOverrides: [\n  {\n    collectionGroup: \"posts\",\n    fieldPath: \"ttlField\",\n    ttl: \"true\", // Explicitly enable TTL on this Field.\n    // Disable indexing so empty the indexes array\n    indexes: [],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Extension Locally\nDESCRIPTION: Command to install a local extension into a Firebase project. Requires specifying the path to the extension directory and a project ID.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/javascript/WELCOME.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase ext:install ./path/to/extension/directory --project=<project-id>\n```\n\n----------------------------------------\n\nTITLE: Custom Angular Build Configuration\nDESCRIPTION: JSON configuration for customizing the Firebase deployment builder with AngularFire.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/angular.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deploy\": {\n    \"builder\": \"@angular/fire:deploy\",\n    \"options\": {\n      \"version\": 2,\n      \"buildTarget\": \"OVERRIDE_YOUR_BUILD_TARGET\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Extensions\nDESCRIPTION: Command to deploy installed extensions to a Firebase project. The --only flag ensures only extensions are deployed.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/javascript/WELCOME.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only extensions\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying Firebase Extension\nDESCRIPTION: Commands to install the extension in a Firebase project and deploy it. Requires a Firebase project setup.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/typescript/WELCOME.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfirebase ext:install ./path/to/extension/directory --project=<project-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only extensions\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Next.js Application with CLI\nDESCRIPTION: Command to deploy a Next.js application to Firebase using the Firebase CLI. This handles both static content and any server-side functionality.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/nextjs.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Exporting Express App for Firebase Functions\nDESCRIPTION: JavaScript code showing how to export an Express application from a function named 'app' so Firebase can properly handle it in Cloud Functions.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// server.js\nexport function app() {\n  const server = express();\n   â€¦\n   return server;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test User Accounts in Firebase Authentication for CLI Testing (TypeScript)\nDESCRIPTION: Function to create a test user account in Firebase Authentication, generating a random email and password if not provided. It returns an object containing the user's email, password, and local ID.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function createTestUser(firebaseToken: string, email?: string, password = \"password\"): Promise<TestUserInfo> {\\n  const apiKey = await getApiKey(firebaseToken);\\n  if (!email) {\\n    email = `${Math.floor(Math.random() * 1000000000)}@test.com`;\\n  }\\n  const resp = await fetch(`https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=${apiKey}`, {\\n    method: \"POST\",\\n    body: JSON.stringify({\\n      email: email,\\n      password: password,\\n      returnSecureToken: true,\\n    }),\\n  });\\n  if (!resp.ok) {\\n    throw new Error(`Failed to create user: ${await resp.text()}`);\\n  }\\n  const respObj = await resp.json();\\n  return {\\n    email: email,\\n    password: password,\\n    localId: respObj.localId,\\n  };\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Express-Style URL Handler\nDESCRIPTION: Alternative approach to export an express-style URL handler named 'handle' for Firebase Cloud Functions integration.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nexport function handle(req, res) {\n   res.send('hello world');\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Project ID from Firebase Token (TypeScript)\nDESCRIPTION: Function to extract the project ID from a Firebase authentication token by decoding its payload and retrieving the project ID from the claims.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getProjectId(firebaseToken: string): string {\\n  const decoded = decode(firebaseToken);\\n  return decoded.claims.project_id;\\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Admin SDK Integration\nDESCRIPTION: TypeScript code showing how to integrate Firebase Admin SDK in an Angular application with proper server/client separation.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/angular.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// your-component.ts\nimport type { app } from 'firebase-admin';\nimport { FIREBASE_ADMIN } from '../app.module';\n\n@Component({...})\nexport class YourComponent {\n\n  constructor(@Optional() @Inject(FIREBASE_ADMIN) admin: app.App) {\n    ...\n  }\n}\n\n// app.server.module.ts\nimport * as admin from 'firebase-admin';\nimport { FIREBASE_ADMIN } from './app.module';\n\n@NgModule({\n  â€¦\n  providers: [\n    â€¦\n    { provide: FIREBASE_ADMIN, useFactory: () => admin.apps[0] || admin.initializeApp() }\n  ],\n})\nexport class AppServerModule {}\n\n// app.module.ts\nimport type { app } from 'firebase-admin';\n\nexport const FIREBASE_ADMIN = new InjectionToken<app.App>('firebase-admin');\n```\n\n----------------------------------------\n\nTITLE: Signing In with Email and Password in Firebase Authentication (TypeScript)\nDESCRIPTION: Function that authenticates a user with email and password credentials against Firebase Authentication. Returns the authentication tokens needed for subsequent API calls.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function signInWithEmailAndPassword(\\n  firebaseToken: string,\\n  email: string,\\n  password: string,\\n): Promise<{ idToken: string; refreshToken: string }> {\\n  const apiKey = await getApiKey(firebaseToken);\\n  const resp = await fetch(\\n    `https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=${apiKey}`,\\n    {\\n      method: \"POST\",\\n      body: JSON.stringify({\\n        email: email,\\n        password: password,\\n        returnSecureToken: true,\\n      }),\\n    },\\n  );\\n  if (!resp.ok) {\\n    throw new Error(`Failed to sign in: ${await resp.text()}`);\\n  }\\n  const respObj = await resp.json();\\n  return {\\n    idToken: respObj.idToken,\\n    refreshToken: respObj.refreshToken,\\n  };\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Firebase App in Next.js with Authentication Context\nDESCRIPTION: Example of how to retrieve the authenticated Firebase App within a Next.js component using the router query parameter that's automatically provided by Firebase's framework integration.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/nextjs.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// get the authenticated Firebase App\nconst firebaseApp = getApp(useRouter().query.__firebaseAppName);\n```\n\n----------------------------------------\n\nTITLE: Deleting Test User Accounts in Firebase Authentication (TypeScript)\nDESCRIPTION: Function to clean up test user accounts by deleting them from Firebase Authentication. It takes an array of user IDs to delete, helping maintain a clean test environment.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function deleteTestUsers(firebaseToken: string, localIds: string[]): Promise<void> {\\n  const project = getProjectId(firebaseToken);\\n  const resp = await fetch(\\n    `https://identitytoolkit.googleapis.com/v1/projects/${project}/accounts:batchDelete`,\\n    {\\n      method: \"POST\",\\n      headers: {\\n        Authorization: `Bearer ${firebaseToken}`,\\n        \"Content-Type\": \"application/json\",\\n      },\\n      body: JSON.stringify({\\n        localIds,\\n        force: true,\\n      }),\\n    },\\n  );\\n  if (!resp.ok) {\\n    throw new Error(`Failed to delete users: ${await resp.text()}`);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Firebase Web Frameworks Preview\nDESCRIPTION: Command to enable the experimental web frameworks feature in Firebase CLI, which is required for SvelteKit deployment support.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/sveltekit.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase experiments:enable webframeworks\n```\n\n----------------------------------------\n\nTITLE: Using Default Arguments with Firebase Tools - JavaScript\nDESCRIPTION: This snippet illustrates two equivalent ways to invoke the Firebase apps list function with default and explicit arguments and options. It highlights how unspecified arguments get default values, ensuring flexibility in function calls.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = require(\"firebase-tools\");\n\n// #1 - No arguments or options, defaults will be inferred\nclient.apps.list();\n\n// #2 - Explicitly provide \"\" for all arguments and {} for options\nclient.apps.list(\"\", {});\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI as a standalone binary\nDESCRIPTION: Command to download and install the Firebase CLI as a standalone binary executable without dependencies using curl. This provides the 'firebase' executable directly without requiring Node.js.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL firebase.tools | bash\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Dynamic Content Serving\nDESCRIPTION: Extended package.json configuration that includes files directive and main entry point for serving dynamic content through Firebase Cloud Functions.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"express-app\",\n    \"version\": \"0.0.0\",\n    \"scripts\": {\n        \"build\": \"spack && npm run static && npm run prerender\",\n        \"static\": \"cp static/* dist\",\n        \"prerender\": \"ts-node tools/prerender.ts\"\n    },\n    \"directories\": {\n        \"serve\": \"dist\"\n    },\n    \"files\": [\"dist\", \"server.js\"],\n    \"main\": \"server.js\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration for Firebase CLI\nDESCRIPTION: Configuration of HTTP and HTTPS proxies for Firebase CLI using environment variables\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Set HTTP/HTTPS Proxy\nexport HTTP_PROXY=http://127.0.0.1:12345\nexport HTTPS_PROXY=http://127.0.0.1:12345\n```\n\n----------------------------------------\n\nTITLE: HTTP Function to Write to Realtime Database in JavaScript\nDESCRIPTION: A Firebase HTTP function that writes data to a Realtime Database reference and returns the snapshot. This function is used to initiate the trigger test flow.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/triggers-end-to-end-tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.writeToRtdb = functions.https.onRequest(async (req, res) => {\n  const ref = admin.database().ref(START_DOCUMENT_NAME);\n  await ref.set({ start: new Date().toISOString() });\n  ref.once(\"value\", (snap) => {\n    res.json({ data: snap });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Build Script in Package.json for Firebase\nDESCRIPTION: Modified package.json with a comprehensive build script that combines multiple steps using the && operator to ensure all necessary build processes run during deployment.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/express.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"express-app\",\n    \"version\": \"0.0.0\",\n    \"scripts\": {\n        \"build\": \"spack && npm run static && npm run prerender\",\n        \"static\": \"cp static/* dist\",\n        \"prerender\": \"ts-node prerender.ts\"\n    },\n    â€¦\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Firebase CLI Command in TypeScript\nDESCRIPTION: Boilerplate code for creating a new command in the Firebase CLI. This demonstrates the Command structure including description, options, and action handler. The TypeScript implementation shows how to define command options and implement the command's functionality.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command } from \"../command\";\n\n// `export default` is used for consistency in command files.\nexport const command = new Command(\"your:command\")\n  .description(\"a one-line description of your command\")\n  // .option(\"-e, --example <requiredValue>\", \"describe the option briefly\")\n  // .before(requireConfig) // add any necessary filters and require them above\n  // .help(text) // additional help to be visible with --help or the help command\n  .action(async (options) => {\n    // options will be available at e.g. options.example\n    // this should return a Promise that resolves to a reasonable result\n  });\n```\n\n----------------------------------------\n\nTITLE: Loading a Firebase CLI Command in JavaScript\nDESCRIPTION: Code snippet demonstrating how to load a new command into the Firebase CLI system. This needs to be added to the commands/index.ts file after creating a new command file.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.use = loadCommand(\"use\");\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Tools for Command Usage - TypeScript\nDESCRIPTION: This snippet imports the firebase-tools library to enable command functionalities such as listing projects and viewing function logs. It allows the CLI to use its namespaced functionality efficiently.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cli from \"firebase-tools\";\ncli.projects.list();\ncli.functions.log();\n```\n\n----------------------------------------\n\nTITLE: Using Central Logger for Output in Firebase CLI - TypeScript\nDESCRIPTION: This snippet demonstrates how to utilize the central logger from the firebase-tools library instead of console.log to display output in a structured manner for the end user.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from \"../logger\";\n\nlogger.info(\"This text will be displayed to the end user.\");\nlogger.debug(\"This text will only show up in firebase-debug.log or running with --debug.\");\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with FirebaseError - TypeScript\nDESCRIPTION: This snippet illustrates the process of handling errors in a command function using FirebaseError. It shows how to throw a friendly error message while preserving the original error context.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bold } from \"colorette\";\nimport { FirebaseError } from \"../error\";\n\nasync function myFunc(projectId: string): void {\n  try {\n    return await somethingThatMayFail(projectId);\n  } catch (err: any) {\n    throw FirebaseError(`Project ${bold(projectId)} caused an issue.', { original: err });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Updating a Specific File\nDESCRIPTION: This snippet provides a concrete example of using the update-single-file command to update a specific file on Firebase Hosting. The example shows how to specify the project ID and the file path to be updated.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/examples/hosting/update-single-file/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app/public/\nupdate-single-file --project my-app team/about.html\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Functions Deployment Test with Project ID\nDESCRIPTION: Command to run the Firebase Functions deployment integration test by setting the Google Cloud project ID as an environment variable. This test verifies function trigger configurations through create/update cycles.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/functions-deploy-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGCLOUD_PROJECT=${PROJECT_ID} npm run test:functions-deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Operations Structure in TypeScript\nDESCRIPTION: Shows how to structure the authentication operations object in the operations.ts file. Each operation is organized hierarchically by service and resource type.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/emulator/auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authOperations: AuthOps = {\n  identitytoolkit: {\n    accounts: {\n      signUp,\n      // ...\n    },\n    // ...\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Linked Firebase-Tools Modules\nDESCRIPTION: Command to verify that firebase-tools is correctly linked to your local repository by listing global linked modules. This helps confirm that your development version is being used instead of the globally installed version.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm ls -g --depth=0 --link=true\n\n# The output might resemble:\n# /Users/{user}/.nvm/versions/node/v8.16.0/lib\n# â””â”€â”€ firebase-tools@7.14.0 -> /Users/{user}/Repositories/firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Functions Deployment Test with Debug Flag\nDESCRIPTION: Command to run the Firebase Functions deployment integration test with debugging enabled. This passes the --debug flag to the Firebase CLI commands during test execution.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/functions-deploy-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGCLOUD_PROJECT=${PROJECT_ID} FIREBASE_DEBUG=true npm run test:functions-deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators\nDESCRIPTION: Command to start the Firebase Emulator suite for local testing. Can be run with a real project ID or demo-test for testing.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/typescript/WELCOME.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --project=<project-id>\n```\n\n----------------------------------------\n\nTITLE: Building Firebase Extension Functions\nDESCRIPTION: Command to compile the extension's function code before testing.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/typescript/WELCOME.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --prefix=functions\n```\n\n----------------------------------------\n\nTITLE: Using Firebase Test Utilities for Mocking in TypeScript\nDESCRIPTION: Example of using the provided Firebase test utilities to simplify mocking in unit tests. This approach automatically handles resetting mocked values after test completion.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// A wrapper around `it`\nfirebaseTest(\"description\", () => {\n  mock(workspace /* whatever */);\n\n  /* Now run the code you want to test */\n  assert.equal(something, somethingElse);\n\n  /* No need to reset values. `mock` automatically handles this. */\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Mocking in Unit Tests with TypeScript\nDESCRIPTION: Example of manually mocking dependencies in unit tests and properly resetting them after the test. This approach requires explicit reset of mocked values.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nit(\"description\", () => {\n  workspace.value =\n    /* whatever */\n    /* Now run the code you want to test */\n    assert.equal(something, somethingElse);\n\n  /* Now reset the value back to normal */\n  workspace.value = vscode.workspace;\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators for Extension Testing\nDESCRIPTION: Command to start the Firebase Emulator suite for testing the greet-the-world extension. Requires specifying a project ID or using the demo-test fake project.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/javascript/WELCOME.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --project=<project-id>\n```\n\n----------------------------------------\n\nTITLE: Executing Watch Mode for Hot Reloading in Firebase VS Code Extension\nDESCRIPTION: Commands to start the watch mode which enables automatic recompilation of the extension when code changes are made.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/README_DEV.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Specifying Firebase Functions Python Package Dependency in requirements.txt\nDESCRIPTION: This requirements.txt entry specifies the firebase_functions Python package dependency with a version constraint of approximately 0.1.0. The tilde (~=) specifier ensures compatibility with versions 0.1.x but not 0.2.0 or higher.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/init/functions/python/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nfirebase_functions~=0.1.0\n```\n\n----------------------------------------\n\nTITLE: Deploying Astro Application to Firebase Hosting\nDESCRIPTION: Command to deploy your Astro application to Firebase Hosting after completing the initialization process.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/astro.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Tools Default Project via Environment Variable\nDESCRIPTION: Example showing how to set the default Firebase project using the FIREBASE_PROJECT environment variable. This eliminates the need to specify the project ID in CLI commands.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport FIREBASE_PROJECT=my-project-id\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to compile the Angular application for production or other environments, with output stored in the dist directory.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/angular/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Executing End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests using a platform of choice, which requires installing a package that supports end-to-end testing first.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/angular/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Setting GOOGLE_APPLICATION_CREDENTIALS Environment Variable\nDESCRIPTION: Example showing how to set the GOOGLE_APPLICATION_CREDENTIALS environment variable to point to a service account key file. This is the standard way to authenticate Google Cloud services with a service account.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=\"path/to/key.json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Functions Emulator Host Environment Variable\nDESCRIPTION: Example showing how to configure a custom host and port for the Cloud Functions emulator using the FUNCTIONS_EMULATOR_HOST environment variable. This is used by various Firebase tools to connect to the emulator.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport FUNCTIONS_EMULATOR_HOST=\"localhost:5001\"\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase Log Directory Environment Variable\nDESCRIPTION: Example showing how to set a custom directory for Firebase logs using the FIREBASE_LOGDIR environment variable. Default is a temporary directory if not specified.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport FIREBASE_LOGDIR=\"path/to/log/dir\"\n```\n\n----------------------------------------\n\nTITLE: Setting FIREBASE_CONFIG Environment Variable for Service Account\nDESCRIPTION: Example showing how to set the FIREBASE_CONFIG environment variable using a service account JSON file. This approach is typically used for CI/CD environments where you need to authenticate Firebase tools without user interaction.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport FIREBASE_CONFIG=$(cat path/to/service-account.json)\n```\n\n----------------------------------------\n\nTITLE: Debugging the Script Execution\nDESCRIPTION: This snippet explains how to enable debugging for HTTP requests made by the update-single-file script. Setting the DEBUG environment variable allows users to view log output during script execution.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/examples/hosting/update-single-file/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=update-single-file\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Emulator Trigger Tests with a Target Project\nDESCRIPTION: Shell command for executing the end-to-end tests, specifying a target project for testing.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/triggers-end-to-end-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ FBTOOLS_TARGET_PROJECT=demo-test npm run test:triggers-end-to-end\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Authentication Token for Test Users (TypeScript)\nDESCRIPTION: Function to obtain a custom authentication token for a given user ID. The token is generated using the Firebase Admin SDK and can be used for authenticating the user in Firebase clients.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function getCustomToken(\\n  firebaseToken: string,\\n  uid: string,\\n  developerClaims?: Record<string, unknown>,\\n): Promise<string> {\\n  const project = getProjectId(firebaseToken);\\n  const resp = await fetch(\\n    `https://identitytoolkit.googleapis.com/v1/projects/${project}/accounts/createSessionCookie`,\\n    {\\n      method: \"POST\",\\n      headers: {\\n        Authorization: `Bearer ${firebaseToken}`,\\n        \"Content-Type\": \"application/json\",\\n      },\\n      body: JSON.stringify({\\n        returnSecureToken: true,\\n        useCustomAuth: true,\\n        localId: uid,\\n        claims: developerClaims,\\n      }),\\n    },\\n  );\\n  if (!resp.ok) {\\n    throw new Error(`Failed to get custom token: ${await resp.text()}`);\\n  }\\n  const respObj = await resp.json();\\n  return respObj.customToken;\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase Debug Environment Variable\nDESCRIPTION: Example showing how to enable debugging in Firebase tools by setting the FIREBASE_DEBUG environment variable. This produces verbose logs for troubleshooting.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport FIREBASE_DEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment for Firebase Tools in Bash\nDESCRIPTION: Series of commands to clone the firebase-tools repository, install dependencies, and link it to your environment for local development. This allows testing code changes against the local repository.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/emulator/storage/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:firebase/firebase-tools.git\ncd firebase-tools\nnpm install # must be run the first time you clone\nnpm link  # installs dependencies, runs a build, links it into the environment\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline.js for Local Firepit Build\nDESCRIPTION: Command to run the pipeline.js script with the path to a local firebase-tools package. This is used to create firepit builds from local firebase-tools versions.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/firepit-builder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./pipeline.js --package=\"/absolute/path/to/firebase-tools\"\n```\n\n----------------------------------------\n\nTITLE: Running the Update Single File Script\nDESCRIPTION: This snippet demonstrates how to execute the update-single-file script from the specified public directory of a Firebase project. Parameters include the project ID and optional site ID to specify the deployment destination.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/examples/hosting/update-single-file/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app/public/\nupdate-single-file --project <project-id> [--site <site-id>] <files...>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Include Syntax in Firebase Documentation\nDESCRIPTION: Shows the syntax used to include content from another file in Firebase documentation. This uses double angle brackets around the path to the file to be included.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<<path/to/file>>\n```\n\n----------------------------------------\n\nTITLE: Showing Required Page Metadata for Firebase Documentation\nDESCRIPTION: Demonstrates the required metadata header that must be included at the beginning of every standalone page in the Firebase documentation. This metadata is used by Firebase's internal publishing system.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nProject: /docs/_project.yaml\nBook: /docs/_book.yaml\n```\n\n----------------------------------------\n\nTITLE: Building the Script using Node.js\nDESCRIPTION: This snippet outlines the steps to build the update-single-file script, which includes changing into the correct directory, installing dependencies, building the project, and linking it to the Node environment. The primary dependencies required are Node.js and npm.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/examples/hosting/update-single-file/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd firebase-tools/scripts/examples/hosting/update-single-file/\nnpm install\nnpm run build\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Extension Parameter Reference Example in Markdown\nDESCRIPTION: Demonstrates how to reference extension parameters using the ${param:PARAMETER_NAME} syntax in the documentation.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"${param:GREETING} World from ${param:EXT_INSTANCE_ID}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Firestore Emulator Host Environment Variable\nDESCRIPTION: Example showing how to configure a custom host and port for the Firestore emulator using the FIRESTORE_EMULATOR_HOST environment variable. This is used by client SDKs to connect to the emulator.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/test/fixtures/config-imports/unsupported.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport FIRESTORE_EMULATOR_HOST=\"localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Application Default Credentials Using gcloud\nDESCRIPTION: This snippet illustrates how to set up application default credentials needed for Firebase Hosting. It is optional for GCP environments. The commands include logging in and setting a quota project for managing API usage.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/examples/hosting/update-single-file/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set up application default credentials using gcloud (optional if in GCP environment).\ngcloud auth application-default login\n# It may be required to set a quota project for the credentials - used to account for the API usage.\ngcloud auth application-default set-quota-project <project-id>\n```\n\n----------------------------------------\n\nTITLE: Displaying ASCII Art Banner for Firebase CLI\nDESCRIPTION: ASCII art representation of the word 'FIREBASE' created using hash/pound symbols, arranged to form large stylized letters. This is likely used as a visual header or banner in console output or documentation.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/banner.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n     ######## #### ########  ######## ########     ###     ######  ########\n     ##        ##  ##     ## ##       ##     ##  ##   ##  ##       ##\n     ######    ##  ########  ######   ########  #########  ######  ######\n     ##        ##  ##    ##  ##       ##     ## ##     ##       ## ##\n     ##       #### ##     ## ######## ########  ##     ##  ######  ########\n```\n\n----------------------------------------\n\nTITLE: Testing Firebase Commands - Bash\nDESCRIPTION: This snippet provides a command-line guide on testing Firebase CLI commands by linking the local version for testing. It explains how to use npm link and test commands with verbose output using the --debug flag.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd firebase-tools\nnpm link\n\ncd path/to/test/project\nfirebase <command> --debug\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Test User Information (TypeScript)\nDESCRIPTION: Interface defining the structure of test user information, including email, password, and local ID. This is returned by the createTestUser function and used throughout the authentication testing utilities.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TestUserInfo {\\n  email: string;\\n  password: string;\\n  localId: string;\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Firebase API Key for Authentication (TypeScript)\nDESCRIPTION: A utility function that retrieves the Firebase project's API key using the provided Firebase token. It caches the API key for future use to avoid unnecessary API calls.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst apiKeyCache: Record<string, string> = {};\\n\\nexport async function getApiKey(firebaseToken: string): Promise<string> {\\n  const project = getProjectId(firebaseToken);\\n  if (apiKeyCache[project]) {\\n    return apiKeyCache[project];\\n  }\\n  const resp = await fetch(`https://firebase.googleapis.com/v1beta1/projects/${project}`, {\\n    headers: {\\n      Authorization: `Bearer ${firebaseToken}`,\\n    },\\n  });\\n  if (!resp.ok) {\\n    throw new Error(`Failed to fetch API key: ${await resp.text()}`);\\n  }\\n  const respObj = await resp.json();\\n  apiKeyCache[project] = respObj.apiKey;\\n  return respObj.apiKey;\\n}\n```\n\n----------------------------------------\n\nTITLE: Running WebFrameworks Deploy Integration Test\nDESCRIPTION: Command to run the webframeworks deploy integration test using a specified Google Cloud project ID. This test deploys a NextJS hosted project with webframeworks enabled.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$  GCLOUD_PROJECT=${PROJECT_ID} npm run test:webframeworks-deploy\n```\n\n----------------------------------------\n\nTITLE: Running WebFrameworks Deploy Test with Debug Mode\nDESCRIPTION: Command to run the webframeworks deploy integration test with debug mode enabled, which passes the --debug flag to the CLI invocation.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$  GCLOUD_PROJECT=${PROJECT_ID} FIREBASE_DEBUG=true npm run test:webframeworks-deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Frameworks Preview in Firebase CLI\nDESCRIPTION: Command to enable the experimental web frameworks feature in Firebase CLI, which is required for Astro integration.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/astro.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfirebase experiments:enable webframeworks\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for End-to-End Tests in JavaScript\nDESCRIPTION: Shell command to install the necessary dependencies for running the triggers end-to-end tests.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/triggers-end-to-end-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ (cd scripts/triggers-end-to-end-tests && npm install)\n```\n\n----------------------------------------\n\nTITLE: RTDB Trigger Function with Cross-Emulator Operations in JavaScript\nDESCRIPTION: A Firebase function triggered by Realtime Database changes that writes to both Realtime Database and Firestore. This demonstrates cross-emulator communication capabilities.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/triggers-end-to-end-tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.rtdbReaction = functions.database.ref(START_DOCUMENT_NAME).onWrite(async (change, ctx) => {\n  console.log(RTDB_FUNCTION_LOG);\n\n  const ref = admin.database().ref(END_DOCUMENT_NAME + \"_from_database\");\n  await ref.set({ done: new Date().toISOString() });\n\n  const firestoreref = admin.firestore().doc(END_DOCUMENT_NAME + \"_from_database\");\n  await firestoreref.set({ done: new Date().toISOString() });\n\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Output with Colorette - TypeScript\nDESCRIPTION: This snippet shows how to use the colorette library for terminal output formatting, including bold and colored text. It illustrates how to create formatted strings for output messages in the CLI.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { green, bold, underline } from \"colorette\";\n\nconst out = \"Formatting is \" + bold(underline(\"fun\")) + \" and \" + green(\"easy\") + \".\";\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Command to execute the integration tests that verify the extension's greeting functionality.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/typescript/WELCOME.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components with CLI\nDESCRIPTION: Command to scaffold new Angular components and other artifacts using the Angular CLI's code generation capabilities.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/angular/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Setting up Firebase VS Code Extension Development Environment\nDESCRIPTION: Steps required to set up the development environment for the Firebase VS Code extension. This includes installing dependencies and configuring the proper directory structure.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/README_DEV.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Alternative Build Commands for Firebase VS Code Extension\nDESCRIPTION: Commands for building the extension without running in watch mode. Compiles the extension code into the dist directory.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/README_DEV.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting up Firebase VSCode Extension Repository\nDESCRIPTION: Commands for installing dependencies using npm in both the parent directory and the firebase-vscode folder. This is required to properly set up the development environment.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\nnpm i\ncd firebase-vscode\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Extension Integration Tests\nDESCRIPTION: Command to run the end-to-end tests that verify the extension responds with the expected greeting. The tests are defined in the integration-test.spec.js file.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/javascript/WELCOME.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Firebase VSCode Extension\nDESCRIPTION: Command for executing end-to-end integration tests for the Firebase VSCode extension. These tests are located in the src/test/integration directory.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Creating a Mockable Module in TypeScript\nDESCRIPTION: Example of creating an indirection layer that allows for mocking dependencies in unit tests. This pattern encapsulates the VSCode workspace API to enable easier testing.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/firebase-vscode/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const workspace = {\n  value: vscode.workspace,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Operation Handler in TypeScript\nDESCRIPTION: Demonstrates how to implement an operation handler function with proper typing for request and response. The function receives project state, request body, and context, then returns a typed response.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/emulator/auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction signUp(\n  state: ProjectState,\n  reqBody: Schemas[\"GoogleCloudIdentitytoolkitV1SignUpRequest\"],\n  ctx: ExegesisContext,\n): Schemas[\"GoogleCloudIdentitytoolkitV1SignUpResponse\"] {\n  return {\n    /* response JSON body */\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Auth API Specification Command\nDESCRIPTION: Command to regenerate the apiSpec.js and schema.ts files from the API discovery documents. Should be run from the root directory of firebase-tools.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/emulator/auth/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate:auth-api\n```\n\n----------------------------------------\n\nTITLE: Running Storage Emulator Integration Tests in Bash\nDESCRIPTION: Command to execute the integration test suite for the Firebase Storage Emulator. This validates the emulator's functionality through comprehensive integration tests.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/emulator/storage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:storage-emulator-integration\n```\n\n----------------------------------------\n\nTITLE: Running Storage Emulator Unit Tests in Bash\nDESCRIPTION: Command to execute the unit test suite specifically for the Firebase Storage Emulator. This targets the unit tests in the src/emulator/storage directory.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/emulator/storage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run mocha src/emulator/storage\n```\n\n----------------------------------------\n\nTITLE: Extension URL Reference Example in Markdown\nDESCRIPTION: Shows how to reference a function URL from a deployed extension using the ${function:VARIABLE_NAME} syntax in the documentation.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/templates/extensions/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n${function:greetTheWorld.url}\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server that serves the application locally at http://localhost:4200 with automatic reload functionality.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/angular/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner, which is the default testing tool for Angular applications.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/angular/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Getting Angular CLI Help\nDESCRIPTION: Command to access the built-in help system of Angular CLI for additional information and documentation about available commands.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/scripts/webframeworks-deploy-tests/angular/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for Web Framework Project\nDESCRIPTION: Command to start the Firebase initialization process for hosting, which will present interactive prompts to configure your web framework project with Firebase.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/_includes/_initialize-firebase.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Frameworks Preview in Firebase CLI\nDESCRIPTION: Command to enable the web frameworks preview feature in the Firebase CLI, which is required before initializing a Firebase project for web frameworks.\nSOURCE: https://github.com/firebase/firebase-tools/blob/master/src/frameworks/docs/_includes/_initialize-firebase.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase experiments:enable webframeworks\n```"
  }
]