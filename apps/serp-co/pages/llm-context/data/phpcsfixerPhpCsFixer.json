[
  {
    "owner": "php-cs-fixer",
    "repo": "php-cs-fixer",
    "content": "TITLE: Complete RemoveCommentsFixer Implementation in PHP\nDESCRIPTION: Full implementation of the RemoveCommentsFixer including class definition, fixer definition, candidate checking, and comment removal logic.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of PHP CS Fixer.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nnamespace PhpCsFixer\\Fixer\\Comment;\n\nuse PhpCsFixer\\AbstractFixer;\nuse PhpCsFixer\\FixerDefinition\\CodeSample;\nuse PhpCsFixer\\FixerDefinition\\FixerDefinition;\nuse PhpCsFixer\\Tokenizer\\Tokens;\n\n/**\n * @author Your name <your@email.com>\n */\nfinal class RemoveCommentsFixer extends AbstractFixer\n{\n    public function getDefinition(): FixerDefinition\n    {\n        return new FixerDefinition(\n            'Removes all comments of the code that are preceded by `;` (semicolon).',\n            [\n                new CodeSample(\n                    \"<?php echo 123; /* Comment */\\n\"\n                ),\n            ]\n        );\n    }\n\n    public function isCandidate(Tokens $tokens): bool\n    {\n        return $tokens->isTokenKindFound(T_COMMENT);\n    }\n\n    protected function applyFix(\\SplFileInfo $file, Tokens $tokens): void\n    {\n        foreach ($tokens as $index => $token) {\n            if (!$token->isGivenKind(T_COMMENT)) {\n                continue;\n            }\n\n            $prevTokenIndex = $tokens->getPrevMeaningfulToken($index);\n            $prevToken = $tokens[$prevTokenIndex];\n\n            if ($prevToken->equals(';')) {\n                $tokens->clearAt($index);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic RemoveCommentsFixer in PHP\nDESCRIPTION: Initial implementation of the RemoveCommentsFixer class that removes comments preceded by semicolons. Uses token traversal to identify and remove qualifying comments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Fixer/Comment/RemoveCommentsFixer.php\n\nfinal class RemoveCommentsFixer extends AbstractFixer\n{\n    // ...\n\n    protected function applyFix(\\SplFileInfo $file, Tokens $tokens): void\n    {\n        foreach ($tokens as $index => $token) {\n            if (!$token->isGivenKind(T_COMMENT)) {\n                continue;\n            }\n\n            $prevTokenIndex = $tokens->getPrevMeaningfulToken($index);\n            $prevToken = $tokens[$prevTokenIndex];\n\n            if ($prevToken->equals(';')) {\n                $tokens->clearAt($index);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying PhpdocToParamType Rule with Default Configuration in PHP\nDESCRIPTION: This example demonstrates the default behavior of the PhpdocToParamType rule. It converts @param annotations to type declarations in function signatures.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_param_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n /**\n  * @param string $foo\n  * @param string|null $bar\n  */\n-function f($foo, $bar)\n+function f(string $foo, ?string $bar)\n {}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP CS Fixer via Composer\nDESCRIPTION: This snippet shows how to install PHP CS Fixer using Composer, the recommended installation method. It provides two options: a standard installation and an alternative for resolving dependency conflicts.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\ncomposer require --dev friendsofphp/php-cs-fixer\n```\n\nLANGUAGE: Console\nCODE:\n```\ncomposer require --dev php-cs-fixer/shim\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Import Statements in PHP\nDESCRIPTION: This code snippet demonstrates the effect of applying the 'no_unused_imports' rule. It removes the unused 'use \\Exception;' statement while keeping the used 'use \\DateTime;' statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/no_unused_imports.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n use \\DateTime;\n-use \\Exception;\n\n new DateTime();\n```\n\n----------------------------------------\n\nTITLE: Installing PHP CS Fixer via Composer\nDESCRIPTION: Commands for installing PHP CS Fixer using Composer. It includes options for both fresh installation and resolving dependency conflicts.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncomposer require --dev friendsofphp/php-cs-fixer\n## or when facing conflicts in dependencies:\ncomposer require --dev php-cs-fixer/shim\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Types Declaration - PHP Example\nDESCRIPTION: Shows how the fixer adds a strict types declaration at the beginning of a PHP file. The diff demonstrates adding 'declare(strict_types=1)' immediately after the PHP opening tag.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/strict/declare_strict_types.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php\n+<?php declare(strict_types=1);\n\\ No newline at end of file\n```\n\n----------------------------------------\n\nTITLE: Example of PSR Autoloading Rule with Custom Directory Configuration\nDESCRIPTION: Demonstrates how the psr_autoloading rule corrects both namespace and class name when configured with a custom source directory './src'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/psr_autoloading.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-namespace PhpCsFixer\\FIXER\\Basic;\n-class InvalidName {}\n+namespace PhpCsFixer\\Fixer\\Basic;\n+class PsrAutoloadingFixer {}\n```\n\n----------------------------------------\n\nTITLE: Applying visibility_required rule with default configuration in PHP\nDESCRIPTION: This snippet demonstrates the application of the 'visibility_required' rule with default configuration. It shows how class elements are modified to include visibility declarations and correct keyword ordering.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/visibility_required.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n abstract class ClassName\n {\n-    const SAMPLE = 1;\n+    public const SAMPLE = 1;\n\n-    var $a;\n+    public $a;\n\n     protected string $foo;\n\n-    static protected int $beep;\n+    protected static int $beep;\n\n-    static public final function bar() {}\n+    final public static function bar() {}\n\n-    protected abstract function zim();\n+    abstract protected function zim();\n\n-    function zex() {}\n+    public function zex() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Registering and Enabling Custom Fixers in PHP CS Fixer Configuration\nDESCRIPTION: This code snippet demonstrates how to register custom fixers and enable them in the PHP CS Fixer configuration file. It shows the structure for creating a new PhpCsFixer\\Config object, registering custom fixers, and setting rules to enable them.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/custom_rules.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\nreturn (new PhpCsFixer\\Config())\n    // ...\n    ->registerCustomFixers([\n        new CustomerFixer1(),\n        new CustomerFixer2(),\n    ])\n    ->setRules([\n        // ...\n        'YourVendorName/custome_rule' => true,\n        'YourVendorName/custome_rule_2' => true,\n    ])\n;\n```\n\n----------------------------------------\n\nTITLE: Converting Array Type Notation in PHPDoc Comments\nDESCRIPTION: Example showing the conversion from T[] notation to array<T> notation in PHPDoc comments. Demonstrates transformation for both single-level and nested array type declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_array_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- * @param int[] $x\n- * @param string[][] $y\n+ * @param array<int> $x\n+ * @param array<array<string>> $y\n  */\n```\n\n----------------------------------------\n\nTITLE: Alphabetical Sorting with Custom Import Order in PHP\nDESCRIPTION: Shows the 'ordered_imports' rule using alphabetical sorting and a custom order for import types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/ordered_imports.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+use const AAAA;\n use const BBB;\n-use const AAAA;\n\n+use AAC;\n use Acme;\n-use AAC;\n use Bar;\n\n+use function CCC\\AA;\n use function DDD;\n-use function CCC\\AA;\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration Spacing in PHP\nDESCRIPTION: Demonstrates default formatting for class method and function declarations, removing excess spaces between function name and parameters.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/function_declaration.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo\n{\n    public static function  bar   ( $baz , $foo )\n    {\n        return false;\n    }\n}\n\nfunction  foo  ($bar, $baz)\n{\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PHPDoc Types to Property Types - Default Configuration\nDESCRIPTION: Demonstrates the default behavior of converting @var annotations to property type declarations for both scalar and object types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_property_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /** @var int */\n-    private $foo;\n+    private int $foo;\n    /** @var \\Traversable */\n-    private $bar;\n+    private \\Traversable $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Trait Use Statements Alphabetically in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'ordered_traits' rule, which sorts trait 'use' statements alphabetically. It's important to note that this rule is considered risky when the order of imports is significant.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_traits.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php class Foo { \nuse Z; use A; }\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php class Foo { \nuse A; use Z; }\n```\n\n----------------------------------------\n\nTITLE: Replacing DateTime with DateTimeImmutable in PHP\nDESCRIPTION: This code snippet demonstrates the transformation enforced by the 'date_time_immutable' rule. It shows how to replace the instantiation of DateTime with DateTimeImmutable. This change is recommended for better immutability and safer date/time handling in PHP.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_usage/date_time_immutable.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-new DateTime();\n+new DateTimeImmutable();\n```\n\n----------------------------------------\n\nTITLE: Custom Operator Alignment Configuration\nDESCRIPTION: Shows alignment configuration with '=' aligned and 'xor' with null strategy.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/binary_operator_spaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $aa=  1;\n-$b=2;\n+$b =2;\n\n $c = $d    xor    $e;\n-$f    -=  1;\n+$f -= 1;\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit Assertions - Default Configuration\nDESCRIPTION: Demonstrates the default behavior of the php_unit_construct rule which converts generic assertion methods to their more specific alternatives. Transforms assertEquals, assertSame, assertNotEquals, and assertNotSame when used with boolean and null values.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_construct.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class FooTest extends \\PHPUnit_Framework_TestCase {\n    public function testSomething() {\n        $this->assertEquals(false, $b);\n        $this->assertSame(true, $a);\n        $this->assertNotEquals(null, $c);\n        $this->assertNotSame(null, $d);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom rules to PSR12 ruleset\nDESCRIPTION: Configuration that extends the PSR12 ruleset with additional custom rules. This example adds strict parameter type checking and requires short array syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/config.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$finder = (new PhpCsFixer\\Finder())\n    ->in(__DIR__)\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'strict_param' => true,\n        'array_syntax' => ['syntax' => 'short'],\n    ])\n    ->setFinder($finder)\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP CS Fixer Options\nDESCRIPTION: This snippet defines configuration options for PHP CS Fixer. It specifies settings for array formatting, including handling of heredoc syntax and various array elements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/Symfony.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n['after_heredoc' => true, 'elements' => ['array_destructuring', 'arrays', 'match', 'parameters']]\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated PHPUnit mock methods in PHP\nDESCRIPTION: This snippet demonstrates the replacement of ->getMock and ->getMockWithoutInvokingTheOriginalConstructor methods with ->createMock and ->createPartialMock in PHPUnit tests. It shows the default configuration behavior of the php_unit_mock rule.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_mock.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testFoo()\n     {\n-        $mock = $this->getMockWithoutInvokingTheOriginalConstructor(\"Foo\");\n-        $mock1 = $this->getMock(\"Foo\");\n-        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]);\n+        $mock = $this->createMock(\"Foo\");\n+        $mock1 = $this->createMock(\"Foo\");\n+        $mock1 = $this->createPartialMock(\"Bar\", [\"aaa\"]);\n         $mock1 = $this->getMock(\"Baz\", [\"aaa\"], [\"argument\"]); // version with more than 2 params is not supported\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example in PHP\nDESCRIPTION: Demonstrates the default ordering of class elements including traits, constants, properties, and methods with their various visibility levels.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_class_elements.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    public static $pubStatProp1;\n    var $pubProp2;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected static $protStatProp;\n    protected $protProp;\n    private static $privStatProp;\n    private $privProp;\n    protected function __construct() {}\n    public function __destruct() {}\n    public function __toString() {}\n    public function pubFunc1() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    protected function protFunc() {}\n    protected static function protStatFunc() {}\n    private static function privStatFunc() {}\n    private function privFunc() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Nested Dirname Calls in PHP\nDESCRIPTION: Demonstrates how multiple nested dirname() calls can be simplified into a single call using the level parameter. The transformation reduces code verbosity while maintaining the same functionality.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/combine_nested_dirname.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-dirname(dirname(dirname($path)));\n+dirname($path, 3);\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Null-safe Operator in PHP\nDESCRIPTION: This snippet demonstrates the application of the 'no_useless_nullsafe_operator' rule. It shows how the rule removes unnecessary use of the null-safe operator '?->' when accessing a method on '$this'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/no_useless_nullsafe_operator.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Foo extends Bar\n{\n    public function test() {\n-        echo $this?->parentMethod();\n+        echo $this->parentMethod();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alpha Sorting of PHPDoc Types\nDESCRIPTION: Demonstrates alphabetical sorting of multiple types including classes with null first.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types_order.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param null|string|int|\\Foo $bar\n */\n// Changes to:\n/**\n * @param null|\\Foo|int|string $bar\n */\n```\n\n----------------------------------------\n\nTITLE: Applying php_unit_strict Rule with Default Configuration in PHP\nDESCRIPTION: This example demonstrates the default behavior of the php_unit_strict rule, which replaces less strict assertion methods with their stricter counterparts in PHPUnit tests.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_strict.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testSomeTest()\n     {\n-        $this->assertAttributeEquals(a(), b());\n-        $this->assertAttributeNotEquals(a(), b());\n-        $this->assertEquals(a(), b());\n-        $this->assertNotEquals(a(), b());\n+        $this->assertAttributeSame(a(), b());\n+        $this->assertAttributeNotSame(a(), b());\n+        $this->assertSame(a(), b());\n+        $this->assertNotSame(a(), b());\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring native_function_invocation Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the native_function_invocation rule which modifies how native PHP functions are called. The configuration includes compiler optimized functions, applies to namespaced code, and uses strict mode.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/SymfonyRisky.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n['include' => ['@compiler_optimized'], 'scope' => 'namespaced', 'strict' => true]\n```\n\n----------------------------------------\n\nTITLE: Replacing Type Casting Functions with Operators in PHP\nDESCRIPTION: This snippet demonstrates how the 'modernize_types_casting' rule replaces function calls like intval(), floatval(), doubleval(), strval(), and boolval() with their corresponding type casting operators. This change improves code readability and potentially performance.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/modernize_types_casting.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-    $a = intval($b);\n-    $a = floatval($b);\n-    $a = doubleval($b);\n-    $a = strval ($b);\n-    $a = boolval($b);\n+    $a = (int) $b;\n+    $a = (float) $b;\n+    $a = (float) $b;\n+    $a = (string) $b;\n+    $a = (bool) $b;\n```\n\n----------------------------------------\n\nTITLE: Applying no_break_comment Rule in PHP (Default Configuration)\nDESCRIPTION: This example demonstrates the default behavior of the 'no_break_comment' rule. It adds a 'no break' comment before fall-through cases and removes it where there is no fall-through.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_break_comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nswitch ($foo) {\n    case 1:\n        foo();\n        // no break\n    case 2:\n        bar();\n        break;\n    case 3:\n        baz();\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Lambda Imports in PHP\nDESCRIPTION: Example showing how the lambda_not_used_import rule removes an unused variable import ($bar) from a lambda function declaration. The rule identifies and removes the 'use' clause when the imported variable is not referenced within the lambda body.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/lambda_not_used_import.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = function() use ($bar) {};\n+$foo = function() {};\n```\n\n----------------------------------------\n\nTITLE: Converting Long Array Syntax to Short Array Syntax in PHP (Default Configuration)\nDESCRIPTION: This example demonstrates the default behavior of the array_syntax rule, which converts the traditional long array syntax (array()) to the short array syntax ([]) introduced in PHP 5.4.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/array_syntax.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-array(1,2);\n+[1,2];\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed Indentation to Spaces - Diff Format - PHP\nDESCRIPTION: This snippet demonstrates how code is transformed when applying the 'indentation_type' rule: tabs are replaced with four spaces for block indentation in PHP files. The diff format clearly shows the removal of the tab character and its replacement with the configured indentation, enhancing code consistency across the project. Inputs must be PHP files with inconsistent indentation, and no runtime dependencies are required.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/indentation_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\\n   +++ New\\n    <?php\\n\\n    if (true) {\\n-<TAB>echo 'Hello!';\\n+    echo 'Hello!';\\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying elseif Rule in PHP Code\nDESCRIPTION: This snippet demonstrates the application of the 'elseif' rule. It replaces 'else if' with 'elseif' to ensure all control keywords look like single words.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/elseif.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif ($a) {\n} elseif ($b) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a simple PHP CS Fixer configuration\nDESCRIPTION: The simplest config file for PHP CS Fixer that specifies paths to analyze and rules to apply. This example applies the PER-CS and PHP82Migration rulesets to all PHP files in the current directory.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/config.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$finder = (new PhpCsFixer\\Finder())\n    ->in(__DIR__)\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PER-CS' => true,\n        '@PHP82Migration' => true,\n    ])\n    ->setFinder($finder)\n;\n```\n\n----------------------------------------\n\nTITLE: Ordering Use Statements in PHP (Default Configuration)\nDESCRIPTION: Demonstrates the default behavior of the 'ordered_imports' rule, which sorts use statements alphabetically.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/ordered_imports.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+use AAA;\n+use const AAB;\n use function AAC;\n-use const AAB;\n-use AAA;\n```\n\n----------------------------------------\n\nTITLE: Using exclusion approach for PHP CS Fixer rules\nDESCRIPTION: Configuration that uses an exclusion approach for rules instead of inclusion. This example applies all PhpCsFixer rules except for align_multiline_comment.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/config.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$finder = (new PhpCsFixer\\Finder())\n    ->in(__DIR__)\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PhpCsFixer' => true,\n        'align_multiline_comment' => false,\n    ])\n    ->setFinder($finder)\n;\n```\n\n----------------------------------------\n\nTITLE: Modernizing strpos calls with default configuration in PHP\nDESCRIPTION: Example showing how the rule transforms strpos() calls to str_starts_with() and str_contains() with default configuration settings. The rule focuses on replacing comparison patterns like '=== 0', '!== 0', '!== false', and '=== false'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/modernize_strpos.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if (strpos($haystack, $needle) === 0) {}\n-if (strpos($haystack, $needle) !== 0) {}\n-if (strpos($haystack, $needle) !== false) {}\n-if (strpos($haystack, $needle) === false) {}\n+if (str_starts_with($haystack, $needle)  ) {}\n+if (!str_starts_with($haystack, $needle)  ) {}\n+if (str_contains($haystack, $needle)  ) {}\n+if (!str_contains($haystack, $needle)  ) {}\n```\n\n----------------------------------------\n\nTITLE: Converting Protected to Private in PHP Classes\nDESCRIPTION: This code snippet demonstrates the effect of applying the 'protected_to_private' rule. It shows how protected variables and methods in a final class are converted to private, as they cannot be extended.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/protected_to_private.rst#2025-04-23_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class Sample\n {\n-    protected $a;\n+    private $a;\n\n-    protected function test()\n+    private function test()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Curly Brace Array Syntax to Square Brackets in PHP\nDESCRIPTION: This example demonstrates how the normalize_index_brace rule transforms array access syntax from using curly braces to square brackets, which is the recommended approach as curly brace syntax was deprecated in PHP 7.4.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/normalize_index_brace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-echo $sample{$index};\n+echo $sample[$index];\n```\n\n----------------------------------------\n\nTITLE: Removing Invisible Characters in PHP (Default Configuration)\nDESCRIPTION: This example demonstrates the default behavior of the 'non_printable_character' rule, which replaces invisible characters with escape sequences in strings.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/non_printable_character.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php echo \"‚ÄãHello World !\";\n+<?php echo \"\\u{200b}Hello\\u{2007}World\\u{a0}!\";\n```\n\n----------------------------------------\n\nTITLE: Converting and/or to &&/|| Operators in PHP\nDESCRIPTION: Demonstrates the conversion of 'and' and 'or' logical operators to their '&&' and '||' equivalents in PHP conditional statements. This transformation is considered risky as it may affect operator precedence.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/logical_operators.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ($a == \"foo\" and ($b == \"bar\" or $c == \"baz\")) {\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ($a == \"foo\" && ($b == \"bar\" || $c == \"baz\")) {\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Concat Operations in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'no_useless_concat_operator' rule, which removes unnecessary string concatenation operations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/no_useless_concat_operator.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$a = 'a'.'b';\n+$a = 'ab';\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Else Case in PHP\nDESCRIPTION: This snippet demonstrates the application of the 'no_useless_else' rule. It removes an unnecessary 'else' block when the 'if' block always terminates execution (e.g., with a return statement).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_useless_else.rst#2025-04-23_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n if ($a) {\n     return 1;\n-} else {\n+}  \n     return 2;\n-}\n+\n```\n\n----------------------------------------\n\nTITLE: Manually Downloading PHP CS Fixer Binary\nDESCRIPTION: Commands for manually downloading the PHP CS Fixer PHAR file, either the latest version or a specific version, and making it executable and accessible system-wide.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nwget https://cs.symfony.com/download/php-cs-fixer-v3.phar -O php-cs-fixer\n# or\ncurl -L https://cs.symfony.com/download/php-cs-fixer-v3.phar -o php-cs-fixer\n```\n\nLANGUAGE: console\nCODE:\n```\nwget https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/releases/download/v3.66.0/php-cs-fixer.phar -O php-cs-fixer\n# or\ncurl -L https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/releases/download/v3.66.0/php-cs-fixer.phar -o php-cs-fixer\n```\n\nLANGUAGE: console\nCODE:\n```\nsudo chmod a+x php-cs-fixer\nsudo mv php-cs-fixer /usr/local/bin/php-cs-fixer\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for curly_braces_position Rule in PHP\nDESCRIPTION: Shows how the rule with default configuration places opening braces for classes and regular functions on the next line, while anonymous functions, control structures, and anonymous classes have braces on the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-class Foo {\n+class Foo\n+{\n }\n\n-function foo() {\n+function foo()\n+{\n }\n\n-$foo = function()\n-{\n+$foo = function() {\n };\n\n-if (foo())\n-{\n+if (foo()) {\n     bar();\n }\n\n-$foo = new class\n-{\n+$foo = new class {\n };\n```\n\n----------------------------------------\n\nTITLE: Complex replacement of 'continue' with 'break' in nested PHP structures\nDESCRIPTION: This example shows how the fixer handles more complex scenarios, including nested loops and conditional statements within a switch case. It replaces 'continue' with 'break', adjusting the break levels accordingly.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/switch_continue_to_break.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nswitch ($foo) {\n    case 1:\n        while($bar) {\n            do {\n-                continue 3;\n+                break 3;\n            } while(false);\n\n            if ($foo + 1 > 3) {\n                continue;\n            }\n\n-            continue 2;\n+            break 2;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying final_class Rule in PHP\nDESCRIPTION: Demonstrates the transformation of a regular class declaration to a final class using the PHP CS Fixer final_class rule. Shows how a basic class definition is modified to include the final keyword.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/final_class.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-class MyApp {}\n+final class MyApp {}\n```\n\n----------------------------------------\n\nTITLE: Converting unset cast to null assignment in PHP\nDESCRIPTION: Demonstrates the conversion of (unset) casting to explicit null assignment. The rule changes expressions using (unset) cast to use direct null assignment instead, which is the preferred approach in modern PHP.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/no_unset_cast.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = (unset) $b;\n+$a =  null;\n```\n\n----------------------------------------\n\nTITLE: Applying no_alias_functions Rule with Default Configuration in PHP\nDESCRIPTION: Demonstrates how the no_alias_functions rule transforms PHP code when using the default configuration. It replaces alias functions like chop() with their master functions like rtrim() across various PHP function categories.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/no_alias_functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = chop($b);\n-close($b);\n-$a = doubleval($b);\n-$a = fputs($b, $c);\n-$a = get_required_files();\n-ini_alter($b, $c);\n-$a = is_double($b);\n-$a = is_integer($b);\n-$a = is_long($b);\n-$a = is_real($b);\n-$a = is_writeable($b);\n-$a = join($glue, $pieces);\n-$a = key_exists($key, $array);\n-magic_quotes_runtime($new_setting);\n-$a = pos($array);\n-$a = show_source($filename, true);\n-$a = sizeof($b);\n-$a = strchr($haystack, $needle);\n-$a = imap_header($imap_stream, 1);\n-user_error($message);\n+$a = rtrim($b);\n+closedir($b);\n+$a = floatval($b);\n+$a = fwrite($b, $c);\n+$a = get_included_files();\n+ini_set($b, $c);\n+$a = is_float($b);\n+$a = is_int($b);\n+$a = is_int($b);\n+$a = is_float($b);\n+$a = is_writable($b);\n+$a = implode($glue, $pieces);\n+$a = array_key_exists($key, $array);\n+set_magic_quotes_runtime($new_setting);\n+$a = current($array);\n+$a = highlight_file($filename, true);\n+$a = count($b);\n+$a = strstr($haystack, $needle);\n+$a = imap_headerinfo($imap_stream, 1);\n+trigger_error($message);\n mbereg_search_getregs();\n```\n\n----------------------------------------\n\nTITLE: Applying operator_linebreak rule with default configuration in PHP\nDESCRIPTION: This example demonstrates the default behavior of the operator_linebreak rule, which places operators at the beginning of the line in multiline expressions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/operator_linebreak.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n function foo() {\n-    return $bar ||\n-        $baz;\n+    return $bar\n+        || $baz;\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Multiple Imports to Single Imports in PHP\nDESCRIPTION: Example showing how the fixer converts multiple comma-separated imports into individual import statements. This is the default behavior of the rule.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/single_import_per_statement.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Foo, Sample, Sample\\Sample as Sample2;\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Foo;\nuse Sample;\nuse Sample\\Sample as Sample2;\n```\n\n----------------------------------------\n\nTITLE: Converting Ternary to Elvis Operator in PHP\nDESCRIPTION: This example demonstrates the conversion of a ternary operator to an Elvis operator. It simplifies the expression '$foo ? $foo : 1' to '$foo ?: 1'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/ternary_to_elvis_operator.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$foo = $foo ? $foo : 1;\n+$foo = $foo ?  : 1;\n```\n\n----------------------------------------\n\nTITLE: Converting return to yield from in iterable functions\nDESCRIPTION: Example showing how the rule transforms explicit array returns to yield from statements in functions with iterable return type. This conversion ensures proper implementation of the iterable interface semantics.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/return_to_yield_from.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php function giveMeData(): iterable {\n-    return [1, 2, 3];\n+    yield from [1, 2, 3];\n }\n```\n\n----------------------------------------\n\nTITLE: Applying single_quote Rule (strings_containing_single_quote_chars: true) in PHP\nDESCRIPTION: Shows the behavior of the 'single_quote' rule using a diff format when the 'strings_containing_single_quote_chars' option is enabled (set to true). Both simple double-quoted strings (`\"sample\"`) and those containing single quotes (`\"sample with 'single-quotes'\"`) are converted to single-quoted strings (`'sample'` and `'sample with \\'single-quotes\\''`), with internal single quotes being escaped.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/single_quote.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n   -$a = \"sample\";\n   -$b = \"sample with 'single-quotes'\";\n   +$a = 'sample';\n   +$b = 'sample with \\'single-quotes\\'';\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines After Class Opening Brace - PHP Example\nDESCRIPTION: Demonstrates the removal of empty lines between a class opening brace and the first class member. Shows both the original code with an empty line and the fixed version without it.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/no_blank_lines_after_class_opening.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class Sample\n {\n-\n    protected function foo()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Uppercase Static References to Lowercase - Example 1\nDESCRIPTION: Demonstrates converting uppercase STATIC, Self, and PaRent references to their lowercase equivalents in method declarations and instance checks.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/lowercase_static_reference.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo extends Bar\n {\n     public function baz1()\n     {\n-        return STATIC::baz2();\n+        return static::baz2();\n     }\n\n     public function baz2($x)\n     {\n-        return $x instanceof Self;\n+        return $x instanceof self;\n     }\n\n-    public function baz3(PaRent $x)\n+    public function baz3(parent $x)\n     {\n         return true;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Long-form Type Casts to Short-form in PHP\nDESCRIPTION: Example showing how the rule converts traditional type casts to their modern shorter equivalents. Converts (boolean) to (bool), (integer) to (int), (double) and (real) to (float), and (binary) to (string).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/short_scalar_cast.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = (boolean) $b;\n-$a = (integer) $b;\n-$a = (double) $b;\n+$a = (bool) $b;\n+$a = (int) $b;\n+$a = (float) $b;\n\n-$a = (binary) $b;\n+$a = (string) $b;\n```\n\n----------------------------------------\n\nTITLE: Applying final Keyword to Public Methods in Abstract Classes\nDESCRIPTION: Demonstrates how the fixer modifies code to add the final keyword to public methods in abstract classes. The example shows the transformation of a method named 'start' in an AbstractMachine class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/final_public_method_for_abstract_class.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n abstract class AbstractMachine\n {\n-    public function start()\n+    final public function start()\n     {}\n }\n```\n\n----------------------------------------\n\nTITLE: Example 1: Removing Extra Blank Line After Namespace\nDESCRIPTION: Demonstrates fixing a case where there are multiple blank lines after the namespace declaration by removing the extra blank line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_line_after_namespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace Sample\\Sample;\n\n-\n $a;\n```\n\n----------------------------------------\n\nTITLE: Converting @test Annotation to Method Prefix (Default Configuration)\nDESCRIPTION: Demonstrates the default behavior of converting @test annotations to 'test' method name prefixes in PHPUnit test classes. This transformation maintains test functionality while following the prefix naming convention.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_test_annotation.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n    /**\n     * @test\n     */\n    public function itDoesSomething() {} }\n```\n\n----------------------------------------\n\nTITLE: Replacing call_user_func with Direct Function Calls in PHP\nDESCRIPTION: This snippet demonstrates how the rule transforms call_user_func and call_user_func_array calls into direct function or method invocations. It also shows how array spreading is used to replace call_user_func_array.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/regular_callable_call.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n <?php\n-    call_user_func(\"var_dump\", 1, 2);\n+    var_dump(1, 2);\n\n-    call_user_func(\"Bar\\Baz::d\", 1, 2);\n+    Bar\\Baz::d(1, 2);\n\n-    call_user_func_array($callback, [1, 2]);\n+    $callback(...[1, 2]);\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer on source files\nDESCRIPTION: This snippet demonstrates how to use PHP CS Fixer to fix PHP files in the 'src' directory after installation. It assumes PHP CS Fixer was installed via Composer in the vendor directory.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n./vendor/bin/php-cs-fixer fix src\n```\n\n----------------------------------------\n\nTITLE: Configuring ordered_class_elements rule for PSR-12\nDESCRIPTION: Configuration for the ordered_class_elements rule that defines the order of 'use_trait' statements according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n['order' => ['use_trait']]\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveCommentsFixer Class - PHP\nDESCRIPTION: Initial class structure for a custom fixer that removes comments. Includes basic method implementations for definition, candidate checking, and fixing logic.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace PhpCsFixer\\Fixer\\Comment;\n\nuse PhpCsFixer\\AbstractFixer;\nuse PhpCsFixer\\FixerDefinition\\FixerDefinition;\nuse PhpCsFixer\\Tokenizer\\Tokens;\n\n/**\n * @author Your name <your@email.com>\n */\nfinal class RemoveCommentsFixer extends AbstractFixer\n{\n    public function getDefinition(): FixerDefinition\n    {\n        // Return a definition of the fixer, it will be used in the documentation.\n    }\n\n    public function isCandidate(Tokens $tokens): bool\n    {\n        // Check whether the collection is a candidate for fixing.\n        // Has to be ultra cheap to execute.\n    }\n\n    protected function applyFix(\\SplFileInfo $file, Tokens $tokens): void\n    {\n        // Add the fixing logic of the fixer here.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Deprecated PHPUnit Assertions in PHP\nDESCRIPTION: This code snippet demonstrates the changes made by the php_unit_assert_new_names rule. It renames deprecated PHPUnit assertions like assertFileNotExists to assertFileDoesNotExist and assertNotIsWritable to assertIsNotWritable.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_assert_new_names.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n-        $this->assertFileNotExists(\"test.php\");\n-        $this->assertNotIsWritable(\"path.php\");\n+        $this->assertFileDoesNotExist(\"test.php\");\n+        $this->assertIsNotWritable(\"path.php\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for braces_position Rule in PHP\nDESCRIPTION: Demonstrates the default behavior of the braces_position rule, showing how it enforces next line braces for classes and functions, while keeping same line braces for anonymous functions, control structures, and anonymous classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-class Foo {\n+class Foo\n+{\n }\n\n-function foo() {\n+function foo()\n+{\n }\n\n-$foo = function()\n-{\n+$foo = function() {\n };\n\n-if (foo())\n-{\n+if (foo()) {\n     bar();\n }\n\n-$foo = new class\n-{\n+$foo = new class {\n };\n```\n\n----------------------------------------\n\nTITLE: Fixing Magic Method Definition Casing in PHP Class\nDESCRIPTION: Demonstrates correcting the casing of a magic method definition within a PHP class. Changes the incorrectly cased __Sleep() method to the proper lowercase __sleep().\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/magic_method_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo\n {\n-    public function __Sleep()\n+    public function __sleep()\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Short Boolean Cast to Explicit Cast in PHP\nDESCRIPTION: Demonstrates the conversion from using double exclamation marks (!!) for boolean casting to using the explicit (bool) cast operator. This change improves code clarity and maintainability by using standard PHP type casting syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/no_short_bool_cast.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = !!$b;\n+$a = (bool)$b;\n```\n\n----------------------------------------\n\nTITLE: Fixing Magic Constant Casing in PHP\nDESCRIPTION: Demonstrates the correction of magic constant casing from incorrect lowercase (__dir__) to proper uppercase format (__DIR__). This rule ensures consistency with PHP's official magic constant syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/magic_constant_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-echo __dir__;\n+echo __DIR__;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating No Trailing Whitespace Removal - Diff/PHP\nDESCRIPTION: This example uses a unified diff format to demonstrate the effect of the 'no_trailing_whitespace_in_string' rule in a PHP file. It shows the transformation from original PHP code containing trailing whitespace in a string literal to the fixed code where the whitespace is removed, preserving only the intended characters. The snippet helps illustrate the rule's impact on PHP string assignments and can be used to verify the behavior of tools enforcing this rule.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/no_trailing_whitespace_in_string.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n-<?php $a = '  \\n-    foo \\n+<?php $a = '\\n+    foo\\n ';\n```\n\n----------------------------------------\n\nTITLE: Applying Pre-increment Style in PHP\nDESCRIPTION: This example demonstrates the default configuration of the 'increment_style' rule, which converts post-increment/decrement operators to pre-increment/decrement operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/increment_style.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a++;\n-$b--;\n+++$a;\n+--$b;\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Order Configuration Example\nDESCRIPTION: Shows the default ordering of PHPDoc annotations with param, throws, and return sequence.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n- * @throws Exception|RuntimeException foo\n * @custom Test!\n- * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n+ * @throws Exception|RuntimeException foo\n+ * @return int  Return the number of changes.\n */\n```\n\n----------------------------------------\n\nTITLE: Applying @internal Annotation to Normal PHPUnit Classes\nDESCRIPTION: Example showing the default configuration where normal and final test classes are marked as internal. The fixer adds the @internal PHPDoc annotation above the test class definition.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_internal_class.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @internal\n */\nclass MyTest extends TestCase {}\n```\n\n----------------------------------------\n\nTITLE: Converting Loose Comparison to Strict Comparison in PHP\nDESCRIPTION: Demonstrates how the fixer converts a loose equality comparison (==) to a strict equality comparison (===). This change enforces type checking in addition to value comparison.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/strict/strict_comparison.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = 1== $b;\n+$a = 1=== $b;\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer without a config file using CLI\nDESCRIPTION: Command to run PHP CS Fixer on the current directory without a configuration file. This will apply the default PSR12 ruleset.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/config.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nphp php-cs-fixer.phar fix .\n```\n\n----------------------------------------\n\nTITLE: Adding void Return Type to PHP Function\nDESCRIPTION: Demonstrates how the void_return rule modifies a function declaration by adding a void return type hint when the function has no return statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/void_return.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo($a) {};\n+function foo($a): void {};\n```\n\n----------------------------------------\n\nTITLE: Applying Single Line Empty Body Rule in PHP\nDESCRIPTION: This example demonstrates how the 'single_line_empty_body' rule modifies PHP code. It abbreviates an empty function body to '{}' and places it on the same line as the function declaration, separated by a single space.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/single_line_empty_body.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php function foo(\n     int $x\n-)\n-{\n-}\n+) {}\n```\n\n----------------------------------------\n\nTITLE: Applying method_chaining_indentation Fix (Diff/PHP)\nDESCRIPTION: This diff example illustrates how the `method_chaining_indentation` rule corrects PHP code. It shows the removal of excessive indentation on a chained method call (`->setPassword`) to ensure it aligns consistently according to the rule's standard.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/method_chaining_indentation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    $user->setEmail('voff.web@gmail.com')\n   -         ->setPassword('233434');\n   +    ->setPassword('233434');\n```\n\n----------------------------------------\n\nTITLE: Replacing 'static' with 'self' in enum constant access\nDESCRIPTION: This example shows how to replace 'static' with 'self' when accessing a constant within an enum's static method.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/self_static_accessor.rst#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nenum Foo\n{\n    public const A = 123;\n\n    public static function bar(): void\n    {\n-        echo static::A;\n+        echo self::A;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PHPDoc Types to Property Types - Disabled Union Types\nDESCRIPTION: Demonstrates behavior when union_types configuration is disabled, showing how union type annotations are preserved while single types are converted.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_property_type.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /** @var int|string */\n    private $foo;\n    /** @var \\Traversable */\n-    private $bar;\n+    private \\Traversable $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Multiline Whitespace Around Double Arrow in PHP Arrays\nDESCRIPTION: This example demonstrates how the rule transforms PHP code by removing multi-line whitespaces around the double arrow (=>) operator in array declarations. It converts a multi-line array assignment with whitespace between the key and the double arrow operator into a single-line format.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/no_multiline_whitespace_around_double_arrow.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = array(1\n-\n-=> 2);\n+$a = array(1 => 2);\n```\n\n----------------------------------------\n\nTITLE: Converting ereg to preg_match in PHP\nDESCRIPTION: This example demonstrates how the ereg_to_preg rule transforms deprecated ereg function calls to the modern preg_match equivalent with appropriate delimiters and modifiers. The /D modifier is added to ensure the pattern matches the entire string.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/ereg_to_preg.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-<?php $x = ereg('[A-Z]');\n+<?php $x = preg_match('/[A-Z]/D');\n```\n\n----------------------------------------\n\nTITLE: Default Binary Operator Spacing Example\nDESCRIPTION: Demonstrates the default configuration which applies single space around binary operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/binary_operator_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a= 1  + $b^ $d !==  $e or   $f;\n+$a = 1 + $b ^ $d !== $e or $f;\n```\n\n----------------------------------------\n\nTITLE: Applying 'explicit_string_variable' Rule in PHP\nDESCRIPTION: Demonstrates the effect of the 'explicit_string_variable' rule. It transforms PHP code using implicit variable interpolation within double-quoted strings (e.g., \\\"$name\\\", \\\"$state->country\\\", \\\"$farm[0]\\\") into explicit syntax (e.g., \\\"{$name}\\\", \\\"{$state->country}\\\", \\\"{$farm[0]}\\\") for better clarity, consistency, and editor highlighting support. The diff format shows the original lines prefixed with '-' and the modified lines prefixed with '+'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/explicit_string_variable.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n   -$a = \"My name is $name !\";\n   -$b = \"I live in $state->country !\";\n   -$c = \"I have $farm[0] chickens !\";\n   +$a = \"My name is {$name} !\";\n   +$b = \"I live in {$state->country} !\";\n   +$c = \"I have {$farm[0]} chickens !\";\n```\n\n----------------------------------------\n\nTITLE: Converting @readonly PHPDoc Comment to Readonly Keyword in PHP\nDESCRIPTION: Demonstrates the conversion of a class marked with @readonly PHPDoc annotation to use the readonly keyword syntax. This transformation is part of PHP 8.2 migration efforts but should be used with caution due to potential inheritance implications.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/phpdoc_readonly_class_comment_to_keyword.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @readonly */\nclass C {\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreadonly class C {\n}\n```\n\n----------------------------------------\n\nTITLE: Applying visibility_required rule with readonly properties in PHP\nDESCRIPTION: This example shows how the 'visibility_required' rule affects classes with readonly properties and final classes. It demonstrates the correct ordering of keywords including 'readonly'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/visibility_required.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n abstract class ClassName\n {\n-    const SAMPLE = 1;\n+    public const SAMPLE = 1;\n\n-    var $a;\n+    public $a;\n\n-    readonly protected string $foo;\n+    protected readonly string $foo;\n\n-    static protected int $beep;\n+    protected static int $beep;\n\n-    static public final function bar() {}\n+    final public static function bar() {}\n\n-    protected abstract function zim();\n+    abstract protected function zim();\n\n-    function zex() {}\n+    public function zex() {}\n }\n\n readonly final class ValueObject\n {\n     // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary sprintf Call in PHP\nDESCRIPTION: This snippet demonstrates the removal of a useless sprintf call where only the first argument is provided. The rule replaces the sprintf call with a simple string assignment.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/no_useless_sprintf.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = sprintf('bar');\n+$foo = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Adding Nullable Type Declaration in PHP\nDESCRIPTION: This snippet demonstrates adding a nullable type declaration to a function parameter with a default null value. It adds a '?' before the type declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/nullable_type_declaration_for_default_null_value.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-function sample(string $str = null)\n+function sample(?string $str = null)\n{}\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Comma in Multiline Array (PHP)\nDESCRIPTION: Demonstrates the default configuration of the rule, which adds a trailing comma to the last element of a multiline array.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/trailing_comma_in_multiline.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n array(\n     1,\n-    2\n+    2,\n );\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Method Calls with Mixed Configuration\nDESCRIPTION: Demonstrates using different call types for specific methods, with assertTrue configured to use $this-> while other assertions use static::.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_test_case_static_method_calls.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n        $this->assertTrue(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing PHP Native Function Casing Example\nDESCRIPTION: Demonstrates how the rule corrects the casing of PHP's built-in strlen() function from uppercase to lowercase. The rule ensures consistent casing across all native PHP function calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_function_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-STRLEN($str);\n+strlen($str);\n```\n\n----------------------------------------\n\nTITLE: Applying fully_qualified_strict_types Rule with Default Configuration in PHP\nDESCRIPTION: Demonstrates how the rule removes leading parts of fully qualified symbol references in class definitions, PHPDoc comments, and method signatures.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/fully_qualified_strict_types.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n use Foo\\Bar;\n use Foo\\Bar\\Baz;\n use Foo\\OtherClass;\n use Foo\\SomeContract;\n use Foo\\SomeException;\n\n /**\n- * @see \\Foo\\Bar\\Baz\n+ * @see Baz\n  */\n-class SomeClass extends \\Foo\\OtherClass implements \\Foo\\SomeContract\n+class SomeClass extends OtherClass implements SomeContract\n {\n     /**\n-     * @var \\Foo\\Bar\\Baz\n+     * @var Baz\n      */\n     public $baz;\n\n     /**\n-     * @param \\Foo\\Bar\\Baz $baz\n+     * @param Baz $baz\n      */\n     public function __construct($baz) {\n         $this->baz = $baz;\n     }\n\n     /**\n-     * @return \\Foo\\Bar\\Baz\n+     * @return Baz\n      */\n     public function getBaz() {\n         return $this->baz;\n     }\n\n-    public function doX(\\Foo\\Bar $foo, \\Exception $e): \\Foo\\Bar\\Baz\n+    public function doX(Bar $foo, Exception $e): Baz\n     {\n         try {}\n-        catch (\\Foo\\SomeException $e) {}\n+        catch (SomeException $e) {}\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting PHP4 Constructor to __construct\nDESCRIPTION: Example showing the conversion of a PHP4-style constructor named after the class to the modern __construct method. The conversion maintains the same parameter signature while updating the method name.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/no_php4_constructor.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo\n {\n-    public function Foo($bar)\n+    public function __construct($bar)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating PHPUnit Data Provider Return Type to Iterable (PHP)\nDESCRIPTION: This snippet demonstrates how the rule changes the return type of a PHPUnit data provider method from 'array' to 'iterable'. The rule ensures that data providers return an iterable type, which is more flexible and aligns with PHPUnit's expectations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_return_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass FooTest extends TestCase {\n    /**\n     * @dataProvider provideSomethingCases\n     */\n    public function testSomething($expected, $actual) {}\n-    public function provideSomethingCases(): array {}\n+    public function provideSomethingCases(): iterable {}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Basic Return Types in PHP Functions\nDESCRIPTION: Demonstrates converting @return annotations to return type declarations for class types, void, and object types using default configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_return_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @return \\My\\Bar */\nfunction f1(): \\My\\Bar\n{}\n\n/** @return void */\nfunction f2(): void\n{}\n\n/** @return object */\nfunction my_foo(): object\n{}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Function Return Statements in PHP\nDESCRIPTION: Demonstrates how the return_assignment rule simplifies function returns by removing unnecessary local variable assignments. The rule transforms code to directly return values instead of assigning to a temporary variable first.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/return_notation/return_assignment.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n function a() {\n-    $a = 1;\n-    return $a;\n+    return 1;\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Backticks to shell_exec in PHP\nDESCRIPTION: Demonstrates the conversion of backtick operators to shell_exec() calls in PHP. The example shows both simple command execution and command execution with variable interpolation. The conversion is performed only when it's safe (no special characters in the command).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/backtick_to_shell_exec.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$plain = `ls -lah`;\n-$withVar = `ls -lah $var1 ${var2} {$var3} {$var4[0]} {$var5->call()}`;\n+$plain = shell_exec(\"ls -lah\");\n+$withVar = shell_exec(\"ls -lah $var1 ${var2} {$var3} {$var4[0]} {$var5->call()}\");\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example of new_with_braces Rule\nDESCRIPTION: Demonstrates the default behavior where both named and anonymous classes must be followed by parentheses when instantiated with 'new'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_with_braces.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n-$x = new X;\n-$y = new class {};\n+$x = new X();\n+$y = new class() {};\n```\n\n----------------------------------------\n\nTITLE: Converting array_push() to Direct Array Assignment in PHP\nDESCRIPTION: This snippet demonstrates how the 'array_push' rule transforms a simple array_push() call into a direct array assignment. It's part of the PhpCsFixer and Symfony risky rule sets, and should be used cautiously if array_push() might be overridden.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/array_push.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-array_push($x, $y);\n+$x[] = $y;\n```\n\n----------------------------------------\n\nTITLE: Custom Method Order Configuration in PHP\nDESCRIPTION: Shows ordering of methods with configuration prioritizing private methods before public methods.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_class_elements.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Example\n{\n    private function B(){}\n    public function A(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Single Line Method Arguments - PHP\nDESCRIPTION: Demonstrates the 'ensure_single_line' configuration that forces all arguments onto a single line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/method_argument_space.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring braces_position rule for PSR-12\nDESCRIPTION: Configuration for the braces_position rule that allows single line empty anonymous classes according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n['allow_single_line_empty_anonymous_classes' => true]\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to Numeric Literals with Default Configuration\nDESCRIPTION: Demonstrates how the rule adds underscores as separators to numeric literals using the default configuration. The example shows an integer value being reformatted with thousands separators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/numeric_literal_separator.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$integer = 1234567890;\n+$integer = 1_234_567_890;\n```\n\n----------------------------------------\n\nTITLE: Removing whitespace before comma in array (Default configuration)\nDESCRIPTION: Example showing how the rule removes whitespace before commas in array declarations with the default configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/no_whitespace_before_comma_in_array.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $x = array(1 , \"2\");\n+<?php $x = array(1, \"2\");\n```\n\n----------------------------------------\n\nTITLE: Applying type_declaration_spaces (Default Config) in PHP\nDESCRIPTION: This diff demonstrates the default behavior of the `type_declaration_spaces` rule. It corrects multiple spaces after type declarations for class properties (`string`, `bool`) and function arguments (`array`) to a single space. The default configuration applies to 'function' and 'property' elements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/type_declaration_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    class Bar\n    {\n   -    private string    $a;\n   -    private bool   $b;\n   +    private string $a;\n   +    private bool $b;\n \n   -    public function __invoke(array   $c) {}\n   +    public function __invoke(array $c) {}\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting Long-form to Shorthand Operators in PHP\nDESCRIPTION: Demonstrates the conversion of a long-form addition operator to its shorthand equivalent. The example shows how '$i = $i + 10' is transformed to '$i += 10' for more concise code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/long_to_shorthand_operator.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$i = $i + 10;\n+$i += 10;\n```\n\n----------------------------------------\n\nTITLE: Replacing dirname(__FILE__) with __DIR__ in PHP\nDESCRIPTION: Demonstrates the transformation of dirname(__FILE__) to the equivalent __DIR__ constant. This change simplifies the code while maintaining the same functionality of getting the current directory path.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/dir_constant.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$a = dirname(__FILE__);\n+$a = __DIR__;\n```\n\n----------------------------------------\n\nTITLE: Converting Return Types with Scalar Types Disabled\nDESCRIPTION: Shows type conversion behavior when scalar_types configuration is set to false, only converting class types while ignoring scalar types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_return_type.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @return Foo */\nfunction foo(): Foo {}\n/** @return string */\nfunction bar() {}\n```\n\n----------------------------------------\n\nTITLE: Applying Whitespace After Comma in Array Rule (Default Configuration)\nDESCRIPTION: This example demonstrates the default behavior of the 'whitespace_after_comma_in_array' rule, which adds a whitespace after each comma in array declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/whitespace_after_comma_in_array.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$sample = array(1,'a',$b,);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$sample = array(1, 'a', $b, );\n```\n\n----------------------------------------\n\nTITLE: Applying null coalescing assignment operator in PHP\nDESCRIPTION: This snippet demonstrates the conversion of a null coalescing operation to the null coalescing assignment operator. It shows how '$foo = $foo ?? 1;' is transformed to '$foo ??= 1;', which is a more concise syntax introduced in PHP 7.4.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/assign_null_coalescing_to_coalesce_equal.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = $foo ?? 1;\n+$foo ??= 1;\n```\n\n----------------------------------------\n\nTITLE: Selectively Converting Comments to PHPDoc Blocks in PHP\nDESCRIPTION: This example shows the rule's behavior when configured to ignore specific tags (in this case, 'todo'). It converts @var annotations to PHPDoc blocks but leaves @todo comments unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/comment_to_phpdoc.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n // @todo do something later\n $foo = 1;\n\n-// @var int $a\n+/** @var int $a */\n $a = foo();\n```\n\n----------------------------------------\n\nTITLE: Updating PHPUnit expectation methods for version 8.4 in PHP\nDESCRIPTION: This example shows the rule's behavior when configured for PHPUnit 8.4. It replaces setExpectedException and setExpectedExceptionRegExp with expectException, expectExceptionMessageMatches, and expectExceptionCode.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_expectation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testFoo()\n     {\n-        $this->setExpectedException(\"RuntimeException\", null, 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionCode(123);\n         foo();\n     }\n\n     public function testBar()\n     {\n-        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"/Msg.*/\", 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionMessageMatches(\"/Msg.*/\");\n+        $this->expectExceptionCode(123);\n         bar();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Applying single_quote Rule (Default Configuration) in PHP\nDESCRIPTION: Demonstrates the default behavior of the 'single_quote' rule in PHP-CS-Fixer using a diff format. Double-quoted strings without internal single quotes (`\"sample\"`) are converted to single-quoted strings (`'sample'`). Strings already containing single quotes (`\"sample with 'single-quotes'\"`) remain unchanged by default.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/single_quote.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n   -$a = \"sample\";\n   +$a = 'sample';\n    $b = \"sample with 'single-quotes'\";\n```\n\n----------------------------------------\n\nTITLE: Converting PHP Core Functions to Constants - Default Configuration\nDESCRIPTION: Demonstrates the default behavior of the function_to_constant rule which converts common PHP functions like phpversion(), pi(), and get_class() to their constant equivalents PHP_VERSION, M_PI, and self::class respectively.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/function_to_constant.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho phpversion();\necho pi();\necho php_sapi_name();\nclass Foo\n{\n    public function Bar()\n    {\n        echo get_class();\n        echo get_called_class();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying No Superfluous Elseif Rule in PHP\nDESCRIPTION: This snippet demonstrates how the 'no_superfluous_elseif' rule transforms code by replacing a superfluous 'elseif' with an 'if' statement. It simplifies the control flow structure without changing the logic.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_superfluous_elseif.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif ($a) {\n    return 1;\n-} elseif ($b) {\n+}\n+if ($b) {\n    return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Standardizing Increment Operator in PHP\nDESCRIPTION: This example demonstrates how the rule replaces the '+= 1' operation with the '++' increment operator. It simplifies the code and uses the more concise increment syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/standardize_increment.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$i += 1;\n+++$i;\n```\n\n----------------------------------------\n\nTITLE: Applying Single Trait Insert Per Statement Rule in PHP\nDESCRIPTION: This example demonstrates how the 'single_trait_insert_per_statement' rule modifies PHP code. It separates multiple trait uses into individual statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/single_trait_insert_per_statement.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class Example\n {\n-    use Foo, Bar;\n+    use Foo;use Bar;\n }\n```\n\n----------------------------------------\n\nTITLE: Applying Default Configuration for Control Structure Continuation in PHP\nDESCRIPTION: This example demonstrates the default configuration of the rule, which places the continuation keyword on the same line as the closing brace of the previous block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/control_structure_continuation_position.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif ($baz == true) {\n    echo \"foo\";\n} else {\n    echo \"bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Converting is_null() to Null Comparison in PHP\nDESCRIPTION: Example showing how the rule transforms is_null($b) function call into a direct null === $b comparison. This transformation improves code consistency and potentially performance, but should be used carefully if is_null() might be overridden.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/is_null.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = is_null($b);\n+$a = null === $b;\n```\n\n----------------------------------------\n\nTITLE: Default Class Definition Formatting\nDESCRIPTION: Shows the default formatting behavior for class, trait and anonymous class definitions with standardized whitespace.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_definition.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-class  Foo  extends  Bar  implements  Baz,  BarBaz\n+class Foo extends Bar implements Baz, BarBaz\n {\n }\n\n-final  class  Foo  extends  Bar  implements  Baz,  BarBaz\n+final class Foo extends Bar implements Baz, BarBaz\n {\n }\n\n-trait  Foo\n+trait Foo\n {\n }\n\n-$foo = new  class  extends  Bar  implements  Baz,  BarBaz {};\n+$foo = new class extends Bar implements Baz, BarBaz {};\n```\n\n----------------------------------------\n\nTITLE: Replacing setExpectedException with expectException in PHP\nDESCRIPTION: This snippet demonstrates the default configuration of the 'php_unit_expectation' rule. It replaces the deprecated setExpectedException method with separate expectException, expectExceptionMessage, and expectExceptionCode method calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_expectation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testFoo()\n     {\n-        $this->setExpectedException(\"RuntimeException\", \"Msg\", 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionMessage(\"Msg\");\n+        $this->expectExceptionCode(123);\n         foo();\n     }\n\n     public function testBar()\n     {\n-        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"/Msg.*/\", 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionMessageMatches(\"/Msg.*/\");\n+        $this->expectExceptionCode(123);\n         bar();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing call_user_func with Direct Anonymous Function Calls in PHP\nDESCRIPTION: This example shows how the rule transforms call_user_func calls with anonymous functions into direct invocations of those functions. It covers both regular and static anonymous functions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/regular_callable_call.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n <?php\n-call_user_func(function ($a, $b) { var_dump($a, $b); }, 1, 2);\n+(function ($a, $b) { var_dump($a, $b); })(1, 2);\n\n-call_user_func(static function ($a, $b) { var_dump($a, $b); }, 1, 2);\n+(static function ($a, $b) { var_dump($a, $b); })(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Defining PER-CS1.0 Rule Set Reference in RST\nDESCRIPTION: ReST documentation defining the PER-CS1.0 rule set, which incorporates PSR-12 rules as its base configuration for PHP code style formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS1.0.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nRule set ``@PER-CS1.0``\n=======================\n\nRules that follow `PER Coding Style 1.0 <https://www.php-fig.org/per/coding-style/>`_.\n\nRules\n-----\n\n- `@PSR12 <./PSR12.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Example Diff for compact_nullable_typehint Rule\nDESCRIPTION: This diff demonstrates the code transformation performed by the `compact_nullable_typehint` rule. It shows how extra spaces around the question mark in nullable parameter and return type hints (`? string`) are removed, resulting in a more compact syntax (`?string`). This rule is specific to PHP 7.1+ syntax but is now deprecated.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/compact_nullable_typehint.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n   -function sample(? string $str): ? string\n   +function sample(?string $str): ?string\n    {}\n\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines in Square Brace Array Blocks (PHP-CS-Fixer, PHP)\nDESCRIPTION: Shows effect of setting the no_extra_blank_lines rule with tokens = ['square_brace_block'], which removes blank lines inside square-bracket style arrays. Only PHP-CS-Fixer is required. Cleans up array definition formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n $foo = [\n-\n     \"foo\"\n-\n ];\n\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Parameters in PHP Functions\nDESCRIPTION: Example showing how the strict_param rule modifies function calls to include the strict parameter. The rule adds true as the strict parameter to array_search, base64_decode, in_array, and mb_detect_encoding function calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/strict/strict_param.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $a = array_keys($b);\n-$a = array_search($b, $c);\n-$a = base64_decode($b);\n-$a = in_array($b, $c);\n-$a = mb_detect_encoding($b, $c);\n+$a = array_search($b, $c, true);\n+$a = base64_decode($b, true);\n+$a = in_array($b, $c, true);\n+$a = mb_detect_encoding($b, $c, true);\n```\n\n----------------------------------------\n\nTITLE: Customized Import Ordering in PHP\nDESCRIPTION: Demonstrates the 'ordered_imports' rule with custom configuration for sorting algorithm and import type order.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/ordered_imports.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+use const BBB;\n use const AAAA;\n-use const BBB;\n\n+use AAC;\n use Bar;\n-use AAC;\n use Acme;\n\n+use function DDD;\n use function CCC\\AA;\n-use function DDD;\n```\n\n----------------------------------------\n\nTITLE: Applying control_structure_braces Rule in PHP\nDESCRIPTION: This example demonstrates the application of the 'control_structure_braces' rule. It shows how a single-line if statement is transformed to include braces around the body.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/control_structure_braces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if (foo()) echo 'Hello!';\n+if (foo()) { echo 'Hello!'; }\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Return Statement in PHP Function\nDESCRIPTION: Example showing how the fixer removes an unnecessary empty return statement at the end of a function. The fixer preserves necessary empty returns within conditional blocks while removing the redundant one at the function's end.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/return_notation/no_useless_return.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n function example($b) {\n     if ($b) {\n         return;\n     }\n-    return;\n+    \n }\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (exit statement) in PHP\nDESCRIPTION: This diff demonstrates the `blank_line_before_statement` rule configured with `['statements' => ['exit']]`. A blank line is added before the `exit(1)` call within the `else` block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    if ($foo === false) {\n        exit(0);\n    } else {\n        $bar = 9000;\n   +\n        exit(1);\n    }\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Attribute Sorting in PHP\nDESCRIPTION: This diff demonstrates how the ordered_attributes rule sorts attributes in a custom order based on the specified configuration. The example shows attributes being reordered according to the priority defined in the 'order' option with namespace aliases being considered.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/attribute_notation/ordered_attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n use A\\B\\Foo;\n use A\\B\\Bar as BarAlias;\n use A\\B as AB;\n\n-#[Foo]\n+#[AB\\Qux(new Bar(5))]\n #[BarAlias(3)]\n-#[AB\\Qux(new Bar(5))]\n #[\\A\\B\\Corge(a: 'test')]\n+#[Foo]\n class Sample1 {}\n```\n\n----------------------------------------\n\nTITLE: Converting PHP Keywords to Lowercase\nDESCRIPTION: Example showing the conversion of uppercase PHP keywords to lowercase format. Demonstrates changes for common keywords like foreach, try, new, while, include, catch, and exit.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/lowercase_keywords.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-    FOREACH($a AS $B) {\n-        TRY {\n-            NEW $C($a, ISSET($B));\n-            WHILE($B) {\n-                INCLUDE \"test.php\";\n+    foreach($a as $B) {\n+        try {\n+            new $C($a, isset($B));\n+            while($B) {\n+                include \"test.php\";\n                }\n-        } CATCH(\\Exception $e) {\n-            EXIT(1);\n+        } catch(\\Exception $e) {\n+            exit(1);\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Formatting Nullable Type Declarations Using Diff in PHP - diff\nDESCRIPTION: This diff code snippet compares the original and modified PHP function declaration to illustrate the impact of the 'compact_nullable_type_declaration' rule. The snippet uses unified diff syntax to show the removal of spaces after the nullable type hint question mark. Inputs are the original and corrected PHP code, and the output is a textual diff highlighting changes. No external dependencies are required beyond understanding diff format conventions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/compact_nullable_type_declaration.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-function sample(? string $str): ? string\\n+function sample(?string $str): ?string\\n{}\n```\n\n----------------------------------------\n\nTITLE: Inline Constructor Arguments\nDESCRIPTION: Demonstrates inline formatting of constructor arguments in anonymous classes with inline_constructor_arguments enabled.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_definition.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = new class(\n-    $bar,\n-    $baz\n-) {};\n+$foo = new class($bar, $baz) {};\n```\n\n----------------------------------------\n\nTITLE: Example of no_trailing_comma_in_singleline Rule with Default Configuration\nDESCRIPTION: This diff example shows how the default configuration of the no_trailing_comma_in_singleline rule removes trailing commas from function arguments, arrays, array destructuring, and group imports when they appear on a single line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/no_trailing_comma_in_singleline.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-foo($a,);\n-$foo = array(1,);\n-[$foo, $bar,] = $array;\n-use a\\{ClassA, ClassB,};\n+foo($a);\n+$foo = array(1);\n+[$foo, $bar] = $array;\n+use a\\{ClassA, ClassB};\n```\n\n----------------------------------------\n\nTITLE: Applying DateTime::createFromFormat Format String Rule in PHP\nDESCRIPTION: This snippet demonstrates the application of the rule that requires the format string in DateTime::createFromFormat to start with '!'. This ensures that the returned DateTime object has a more intuitive time component.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/date_time_create_from_format_call.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php \\DateTime::createFromFormat('Y-m-d', '2022-02-11');\n+<?php \\DateTime::createFromFormat('!Y-m-d', '2022-02-11');\n```\n\n----------------------------------------\n\nTITLE: Converting assertInternalType to Dedicated Assertions - PHPUnit 7.5 Configuration\nDESCRIPTION: Shows the transformation of assertInternalType() calls when configured for PHPUnit 7.5 compatibility. The conversion pattern remains the same but ensures compatibility with PHPUnit 7.5.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_dedicate_assert_internal_type.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testMe()\n    {\n-        $this->assertInternalType(\"array\", $var);\n-        $this->assertInternalType(\"boolean\", $var);\n+        $this->assertIsArray($var);\n+        $this->assertIsBool($var);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Spaces After Function Names in PHP\nDESCRIPTION: Demonstrates the removal of spaces between function names and opening parentheses. Shows corrections for various function call patterns including built-in functions, nested calls, and variable functions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/no_spaces_after_function_name.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-strlen ('Hello World!');\n-foo (test (3));\n-exit  (1);\n-$func ();\n+strlen('Hello World!');\n+foo(test(3));\n+exit(1);\n+$func();\n```\n\n----------------------------------------\n\nTITLE: Converting Anonymous Function to Arrow Function in PHP\nDESCRIPTION: Demonstrates the transformation of a traditional anonymous function with a single return statement into an equivalent arrow function. The example shows how a function that adds two variables gets simplified using arrow function syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/use_arrow_functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-foo(function ($a) use ($b) {\n-    return $a + $b;\n-});\n+foo(fn ($a) => $a + $b);\n```\n\n----------------------------------------\n\nTITLE: Applying visibility_required rule with custom configuration in PHP\nDESCRIPTION: This example demonstrates the application of the 'visibility_required' rule with a custom configuration that only applies to constants.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/visibility_required.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Sample\n {\n-    const SAMPLE = 1;\n+    public const SAMPLE = 1;\n }\n```\n\n----------------------------------------\n\nTITLE: Combining Consecutive Isset Calls in PHP\nDESCRIPTION: This snippet demonstrates how the rule combines multiple consecutive isset() calls into a single call. It improves code readability and potentially performance by reducing redundant checks.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/combine_consecutive_issets.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = isset($a) && isset($b);\n+$a = isset($a, $b)  ;\n```\n\n----------------------------------------\n\nTITLE: Applying no_multiple_statements_per_line Rule in PHP\nDESCRIPTION: This example demonstrates the application of the 'no_multiple_statements_per_line' rule. It shows how multiple statements on a single line are separated into individual lines.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/no_multiple_statements_per_line.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-foo(); bar();\n+foo();\n+bar();\n```\n\n----------------------------------------\n\nTITLE: Adding @coversNothing Annotation to PHPUnit Test Class\nDESCRIPTION: Example showing how the fixer adds a default @coversNothing annotation to a PHPUnit test class that lacks coverage annotations. The fixer inserts the annotation before the class definition while preserving the existing test code structure.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_test_class_requires_covers.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+\n+/**\n+ * @coversNothing\n+ */\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testSomeTest()\n     {\n         $this->assertSame(a(), b());\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Applying Camel Case to PHPUnit Test Methods in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'php_unit_method_casing' rule, which converts snake_case test method names to camelCase in PHPUnit test classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_method_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n-    public function test_my_code() {}\n+    public function testMyCode() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting settype() to Type Casting in PHP\nDESCRIPTION: This example demonstrates how the rule transforms settype() function calls into equivalent type casting operations or direct assignments for null values. It converts integer and string type conversions to their respective casting operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/set_type_to_cast.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-settype($foo, \"integer\");\n-settype($bar, \"string\");\n-settype($bar, \"null\");\n+$foo = (int) $foo;\n+$bar = (string) $bar;\n+$bar = null;\n```\n\n----------------------------------------\n\nTITLE: Basic Property Null Initialization Example\nDESCRIPTION: Demonstrates how the rule removes explicit null initialization from a basic class property. Shows the difference between original and fixed code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/no_null_property_initialization.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo {\n-    public $foo = null;\n+    public $foo;\n }\n```\n\n----------------------------------------\n\nTITLE: Applying Default Class Attributes Separation in PHP\nDESCRIPTION: Demonstrates the default configuration of the 'class_attributes_separation' rule, which separates methods with one blank line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_attributes_separation.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n\n    protected function bar()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Juggling Simple Strings in PHP Concat Operations\nDESCRIPTION: This example shows the behavior of the 'no_useless_concat_operator' rule with the 'juggle_simple_strings' option set to true, allowing for simple string quote juggling to merge more concat operations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/no_useless_concat_operator.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$a = 'a'.\"b\";\n+$a = \"ab\";\n```\n\n----------------------------------------\n\nTITLE: Ordering Interfaces by Length (Descending) in PHP\nDESCRIPTION: Demonstrates interface ordering by length in descending order, combining 'order' set to 'length' and 'direction' set to 'descend'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_interfaces.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfinal class ExampleA implements MuchLonger, Longer, Short {}\n\ninterface ExampleB extends MuchLonger, Longer, Short {}\n```\n\n----------------------------------------\n\nTITLE: Converting Single-line to Multi-line PHPDoc Blocks\nDESCRIPTION: Example showing default configuration that converts single-line PHPDoc blocks to multi-line format for class properties.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_line_span.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n class Foo{\n-    /** @var bool */\n+    /**\n+     * @var bool\n+     */\n     public $var;\n }\n```\n\n----------------------------------------\n\nTITLE: Removing @access Annotation Example - PHP/Diff\nDESCRIPTION: Demonstrates the removal of @access private annotation from a PHPDoc block while preserving other annotations like @internal. The example shows the transformation on a private class property.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_access.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo\n {\n     /**\n      * @internal\n-     * @access private\n      */\n     private $bar;\n }\n```\n\n----------------------------------------\n\nTITLE: Applying php_unit_strict Rule with Custom Configuration in PHP\nDESCRIPTION: This example shows the behavior of the php_unit_strict rule when configured to only replace the assertEquals method, leaving other assertion methods unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_strict.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testSomeTest()\n     {\n         $this->assertAttributeEquals(a(), b());\n         $this->assertAttributeNotEquals(a(), b());\n-        $this->assertEquals(a(), b());\n+        $this->assertSame(a(), b());\n         $this->assertNotEquals(a(), b());\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating no_extra_blank_lines Rule with Default Configuration (PHP-CS-Fixer, PHP)\nDESCRIPTION: Shows how the no_extra_blank_lines rule with default configuration (tokens = ['extra']) removes unnecessary blank lines from a PHP file. No explicit dependencies beyond PHP-CS-Fixer. Demonstrates a typical removal of an extra blank line after an array assignment in PHP, comparing original versus new code format.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n $foo = array(\"foo\");\n\n-\n $bar = \"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: Converting Ternary isset() to Null Coalescing Operator in PHP\nDESCRIPTION: Demonstrates the conversion of a ternary operation using isset() to the null coalescing operator (??) introduced in PHP 7.0. This transformation simplifies the code while maintaining the same functionality of checking for null/undefined values.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/ternary_to_null_coalescing.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$sample = isset($a) ? $a : $b;\n+$sample = $a ?? $b;\n```\n\n----------------------------------------\n\nTITLE: Converting Static Return Types in Class Methods\nDESCRIPTION: Shows conversion of @return static annotation to static return type declaration within a class context.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_return_type.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class Foo {\n    /**\n     * @return static\n     */\n    public function create($prototype): static {\n        return new static($prototype);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Alternative Syntax with Braces in PHP\nDESCRIPTION: This example demonstrates the default behavior of the no_alternative_syntax rule, which replaces the alternative syntax for control structures with braces.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_alternative_syntax.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if(true):echo 't';else:echo 'f';endif;\n+if(true) { echo 't';} else { echo 'f';}\n```\n\n----------------------------------------\n\nTITLE: Removing PHP Closing Tag Example - PHP/Diff\nDESCRIPTION: Demonstrates the removal of the closing PHP tag from a file containing only PHP code. The example shows a simple class definition where the closing ?> tag is removed to comply with coding standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/no_closing_tag.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Sample\n {\n-}\n-?>\n+}\n\\ No newline at end of file\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Comments in PHP Code\nDESCRIPTION: Demonstrates how the no_empty_comment rule removes various types of empty comments including single-line (//, #) and multi-line (/* */) empty comments from PHP code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/no_empty_comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-//\n-#\n-/* */\n+\n+\n+\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Comma in List Function Call (PHP)\nDESCRIPTION: This example demonstrates the effect of the 'no_trailing_comma_in_list_call' rule. It removes the trailing comma in a list function call, improving code consistency.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_trailing_comma_in_list_call.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-list($a, $b,) = foo();\n+list($a, $b) = foo();\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for Single Class Element Rule\nDESCRIPTION: Demonstrates the default behavior where both constants and properties are split into individual declarations. Shows transformation of combined declarations into separate lines.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/single_class_element_per_statement.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class Example\n{\n    const FOO_1 = 1;\n    const FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PHP Heredoc to Nowdoc\nDESCRIPTION: This provides the specific PHP code for converting a heredoc string assignment to a nowdoc assignment. The code first shows use of heredoc with a double-quoted delimiter, then replaces it with nowdoc using single quotes. There are no dependencies except standard PHP, and usage is limited to situations where the string does not contain variables in need of interpolation. The input is a PHP variable assignment using heredoc, and the output uses nowdoc notation, eliminating variable interpolation inside the string.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/heredoc_to_nowdoc.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php $a = <<<\\\"TEST\\\"\\n Foo\\n TEST;\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php $a = <<<'TEST'\\n Foo\\n TEST;\n```\n\n----------------------------------------\n\nTITLE: Alphabetical Method Sorting in PHP\nDESCRIPTION: Demonstrates alphabetical sorting of public methods using the alpha sort algorithm.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_class_elements.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Example\n{\n    public function A(){}\n    public function B(){}\n    public function C(){}\n    public function D(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Array Indentation Fix - Diff Example - diff\nDESCRIPTION: This diff-formatted snippet demonstrates the transformation required to comply with the \"array_indentation\" rule enforced by PHP-CS-Fixer. It highlights changes from the original code, where elements and nested arrays are not properly indented, to the new, compliant code. The example showcases how each array element should be indented exactly once to maintain consistent and readable PHP code structure.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/array_indentation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n $foo = [\\n-   'bar' => [\\n-    'baz' => true,\\n-  ],\\n+    'bar' => [\\n+        'baz' => true,\\n+    ],\\n ];\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Import Alias in PHP\nDESCRIPTION: This snippet demonstrates the effect of the 'no_unneeded_import_alias' rule. It removes the 'as Foo' alias when the alias is the same as the imported class name.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/no_unneeded_import_alias.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-use A\\B\\Foo as Foo;\n+use A\\B\\Foo  ;\n```\n\n----------------------------------------\n\nTITLE: Applying Lowercase Cast Rule in PHP\nDESCRIPTION: This example demonstrates how the 'lowercase_cast' rule transforms uppercase or mixed-case cast operations to lowercase. It covers various data types including boolean, integer, float, string, array, object, unset, and binary.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/lowercase_cast.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n   $a = (boolean) $b;\n   $a = (bool) $b;\n   $a = (integer) $b;\n   $a = (int) $b;\n   $a = (double) $b;\n   $a = (float) $b;\n   $a = (float) $b;\n   $a = (string) $b;\n   $a = (array) $b;\n   $a = (object) $b;\n   $a = (unset) $b;\n   $a = (binary) $b;\n```\n\n----------------------------------------\n\nTITLE: Using print instead of echo in PHP (Custom Configuration)\nDESCRIPTION: Example showing how the rule converts 'echo' statements to 'print' when configured with ['use' => 'print'].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/no_mixed_echo_print.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php echo('example');\n+<?php print('example');\n```\n\n----------------------------------------\n\nTITLE: Applying Default Cast Spaces Configuration in PHP\nDESCRIPTION: This example demonstrates the default configuration of the 'cast_spaces' rule, which adds a single space between cast and variable.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/cast_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$bar = (string) $a;\n$foo = (int) $b;\n```\n\n----------------------------------------\n\nTITLE: Refactoring strlen Empty String Checks - PHP - diff\nDESCRIPTION: This diff snippet demonstrates how the PHP-CS-Fixer's 'string_length_to_empty' rule transforms code that checks for empty strings with strlen into a direct empty string comparison. The original code uses strlen to verify if a variable is an empty string, while the fixed code replaces this with strict equality checks using ''. The snippet shows both the before (original) and after (new) states. No dependencies are required beyond standard PHP and PHP-CS-Fixer integration. Input is PHP code using strlen for emptiness checks; output is the refactored code using direct '' comparison. The transformation is risky if strlen is overridden or if the operands are not string(able).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/string_length_to_empty.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $a = 0 === strlen($b) || \\STRLEN($c) < 1;\n+<?php $a = '' === $b || $c === '';\n\n```\n\n----------------------------------------\n\nTITLE: Correcting Statement Indentation with Default PHP-CS-Fixer Configuration (PHP)\nDESCRIPTION: This diff demonstrates the effect of the 'statement_indentation' rule with default configuration in PHP-CS-Fixer. The code snippet shows how statements inside control flow blocks such as 'if' and 'else' are realigned to a consistent indentation level, ensuring code readability and uniformity. No special configuration is needed for this basic behavior; all PHP source files are eligible as input, and the output is the indented code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/statement_indentation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n if ($baz == true) {\n-  echo \"foo\";\n+    echo \"foo\";\n }\n else {\n-      echo \"bar\";\n+    echo \"bar\";\n }\n\n```\n\n----------------------------------------\n\nTITLE: Applying Static Private Method Rule in PHP\nDESCRIPTION: This example demonstrates how the 'static_private_method' rule converts a private method to static and updates its call. The rule changes the 'baz' method to static and modifies its invocation in the 'bar' method from '$this->baz()' to 'self::baz()'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/static_private_method.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Foo\n{\n    public function bar()\n    {\n-        return $this->baz();\n+        return self::baz();\n    }\n\n-    private function baz()\n+    private static function baz()\n    {\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Removal of Trailing Whitespace with PHP CS Fixer (diff)\nDESCRIPTION: This snippet illustrates the effect of applying the no_trailing_whitespace rule using a unified diff format. It demonstrates removal of extraneous spaces at the end of a PHP statement, which helps in maintaining coding standards conformant with multiple rule sets in PHP CS Fixer. Inputs are PHP source files with trailing whitespace, and outputs are the same files with whitespace removed; there are no additional dependencies except for PHP CS Fixer itself. Limitation: This is an illustrative example and not executable code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_trailing_whitespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = 1;     \n+$a = 1;\n\n```\n\n----------------------------------------\n\nTITLE: Converting yield from array to individual yields in PHP\nDESCRIPTION: This code snippet demonstrates how the yield_from_array_to_yields rule transforms a yield from array statement into individual yield statements. It unpacks the array into separate yields, reducing the array dimension by 1.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/yield_from_array_to_yields.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php function generate() {\n-    yield from [\n-        1,\n-        2,\n-        3,\n-    ];\n+     \n+        yield 1;\n+        yield 2;\n+        yield 3;\n+    \n }\n```\n\n----------------------------------------\n\nTITLE: Correcting PHP Class Reference Casing Example using diff\nDESCRIPTION: Demonstration of how the class_reference_name_casing rule corrects the casing of internal PHP class references. The example shows a fix where 'exception' is changed to 'Exception' in a throw statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/class_reference_name_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-throw new \\exception();\n+throw new \\Exception();\n```\n\n----------------------------------------\n\nTITLE: Ordering Interfaces (Default Configuration) in PHP\nDESCRIPTION: Demonstrates the default behavior of the 'ordered_interfaces' rule, which sorts interfaces alphabetically in ascending order.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_interfaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfinal class ExampleA implements Alpha, Beta, Gamma {}\n\ninterface ExampleB extends Alpha, Beta, Gamma {}\n```\n\n----------------------------------------\n\nTITLE: Applying Default Braces Configuration in PHP\nDESCRIPTION: Demonstrates the default behavior of the 'braces' rule, adjusting brace placement and indentation in a PHP class definition and control structures.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Static Lambda Rule in PHP\nDESCRIPTION: This snippet demonstrates how the 'static_lambda' rule modifies a lambda function to declare it as static when it doesn't reference $this. The rule adds the 'static' keyword to the function declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/static_lambda.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = function () use ($b)\n+$a = static function () use ($b)\n {   echo $b;\n };\n```\n\n----------------------------------------\n\nTITLE: Functions Opening Brace Configuration in PHP\nDESCRIPTION: Demonstrates the functions_opening_brace option set to 'same_line', which places function opening braces on the same line as the function declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo()\n-{\n+function foo() {\n }\n```\n\n----------------------------------------\n\nTITLE: Multiline Method Arguments - PHP\nDESCRIPTION: Shows how the 'ensure_fully_multiline' configuration handles function arguments across multiple lines, requiring one argument per line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/method_argument_space.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,\n    2);\n```\n\n----------------------------------------\n\nTITLE: Customizing `heredoc_closing_marker` with `closing_marker` (PHP)\nDESCRIPTION: This diff illustrates the effect of configuring the `heredoc_closing_marker` rule with `['closing_marker' => 'EOF']`. It modifies the nowdoc opening and closing markers from `TEST` to the specified `EOF`.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/heredoc_closing_marker.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n   -<?php $a = <<<'TEST'\n   +<?php $a = <<<'EOF'\n    Foo\n   -TEST;\n   +EOF;\n```\n\n----------------------------------------\n\nTITLE: Removing Spaces from Namespace Declaration\nDESCRIPTION: Demonstrates fixing namespace declaration by removing unnecessary spaces between namespace segments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/clean_namespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-namespace Foo \\ Bar;\n+namespace Foo\\Bar;\n```\n\n----------------------------------------\n\nTITLE: Applying new_with_parentheses Rule with Default Configuration in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'new_with_parentheses' rule. It adds parentheses after 'new' for both named classes and anonymous classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_with_parentheses.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-$x = new X;\n-$y = new class {};\n+$x = new X();\n+$y = new class() {};\n```\n\n----------------------------------------\n\nTITLE: Applying operator_linebreak rule with 'end' position configuration in PHP\nDESCRIPTION: This example shows the effect of the operator_linebreak rule when configured to place operators at the end of the line in multiline expressions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/operator_linebreak.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n function foo() {\n-    return $bar\n-        || $baz;\n+    return $bar ||\n+        $baz;\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Semicolon After PHP Instruction\nDESCRIPTION: Example showing how the fixer adds a missing semicolon after a PHP echo statement. The fixer ensures proper instruction termination according to PHP syntax standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/semicolon_after_instruction.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php echo 1 ?>\n+<?php echo 1; ?>\n```\n\n----------------------------------------\n\nTITLE: Applying visibility_required rule with complex property declarations in PHP\nDESCRIPTION: This snippet illustrates how the 'visibility_required' rule handles more complex property declarations, including abstract properties and properties with getters and setters.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/visibility_required.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n abstract class ClassName\n {\n-    const SAMPLE = 1;\n+    public const SAMPLE = 1;\n\n-    var $a;\n+    public $a;\n\n-    protected abstract string $bar { get => \"a\"; set; }\n+    abstract protected string $bar { get => \"a\"; set; }\n\n-    readonly final protected string $foo;\n+    final protected readonly string $foo;\n\n-    static protected final int $beep;\n+    final protected static int $beep;\n\n-    static public final function bar() {}\n+    final public static function bar() {}\n\n-    protected abstract function zim();\n+    abstract protected function zim();\n\n-    function zex() {}\n+    public function zex() {}\n }\n\n readonly final class ValueObject\n {\n     // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Property-Only Configuration Example for Single Class Element Rule\nDESCRIPTION: Shows the rule's behavior when configured to only separate property declarations while allowing combined constant declarations. Uses the configuration ['elements' => ['property']].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/single_class_element_per_statement.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing General Extra Blank Lines (PHP-CS-Fixer, PHP)\nDESCRIPTION: Demonstrates the standard use of the no_extra_blank_lines rule with tokens = ['extra'] (also the default), removing redundant blank lines in general. No dependencies besides PHP-CS-Fixer. Applies blanket removal of extra blank lines, ensuring code remains compact.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n $foo = array(\"foo\");\n\n-\n $bar = \"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPDoc Variable Annotation Order in PHP\nDESCRIPTION: Demonstrates the correction of @var annotation order where the type must come before the variable name. The fixer changes /** @var $foo int */ to /** @var int $foo */ to follow the correct documentation standard.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_var_annotation_correct_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var $foo int */\n$foo = 2 + 2;\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var int $foo */\n$foo = 2 + 2;\n```\n\n----------------------------------------\n\nTITLE: Converting Short Echo Tags to Long Format (Default Configuration)\nDESCRIPTION: Demonstrates the default behavior of converting <?= to <?php echo syntax while preserving other PHP echo/print statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/echo_tag_syntax.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?=1?>\n+<?php echo 1?>\n <?php print '2' . '3'; ?>\n <?php /* comment */ echo '2' . '3'; ?>\n <?php print '2' . '3'; someFunction(); ?>\n```\n\n----------------------------------------\n\nTITLE: Applying Default random_api_migration Rule in PHP\nDESCRIPTION: Demonstrates the default configuration of the random_api_migration rule, replacing getrandmax, rand, and srand with their mt_* equivalents.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/random_api_migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$a = getrandmax();\n-$a = rand($b, $c);\n-$a = srand();\n+$a = mt_getrandmax();\n+$a = mt_rand($b, $c);\n+$a = mt_srand();\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace Around Object Operators in PHP\nDESCRIPTION: This example demonstrates the application of the 'object_operator_without_whitespace' rule. It removes spaces before and after the '->' object operator in PHP code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/object_operator_without_whitespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $a  ->  b;\n+<?php $a->b;\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary 'final' Keywords from Methods in PHP\nDESCRIPTION: This example demonstrates the default configuration of the 'no_unneeded_final_method' rule. It removes 'final' keywords from methods in final classes and private methods in non-final classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/no_unneeded_final_method.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class Foo\n {\n-    final public function foo1() {}\n-    final protected function bar() {}\n-    final private function baz() {}\n+    public function foo1() {}\n+    protected function bar() {}\n+    private function baz() {}\n }\n\n class Bar\n {\n-    final private function bar1() {}\n+    private function bar1() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Correcting Iterable and VOID to iterable and void in PHP Function Signature\nDESCRIPTION: This snippet illustrates the correction of 'Iterable' to 'iterable' for a parameter type and 'VOID' to 'void' for the return type in a function declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_function_type_declaration_casing.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction Foo(Iterable $a): VOID\n{\n    echo 'Hello world';\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction Foo(iterable $a): void\n{\n    echo 'Hello world';\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Return Types with Union Types Disabled\nDESCRIPTION: Demonstrates type conversion when union_types configuration is set to false, only converting single types while ignoring union types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_return_type.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @return Foo */\nfunction foo(): Foo {}\n/** @return int|string */\nfunction bar() {}\n```\n\n----------------------------------------\n\nTITLE: Fixing Unreachable Default Argument Values in PHP Functions\nDESCRIPTION: This code snippet demonstrates the application of the 'no_unreachable_default_argument_value' rule. It removes the default value from the first parameter, ensuring that default values do not precede non-default ones in function arguments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/no_unreachable_default_argument_value.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function example($foo = \"two words\", $bar) {}\n+function example($foo, $bar) {}\n```\n\n----------------------------------------\n\nTITLE: Removing Author Annotation Case Insensitive\nDESCRIPTION: Example demonstrating removal of @author annotations regardless of case when case_sensitive is set to false.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_annotation_remove.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * @internal\n- * @author John Doe\n- * @AuThOr Jane Doe\n  */\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Blank Lines in Curly Brace Blocks (PHP-CS-Fixer, PHP)\nDESCRIPTION: Shows effect of configuring the no_extra_blank_lines rule with tokens = ['curly_brace_block'], which removes extra blank lines within curly brace blocks such as loops. Only requires PHP-CS-Fixer configured appropriately. Simplifies and tightens code by removing vertical whitespace inside code blocks.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n for ($i = 0; $i < 9000; ++$i) {\n-\n     echo $i;\n-\n }\n\n```\n\n----------------------------------------\n\nTITLE: Simplifying Function Return Statements in PHP\nDESCRIPTION: Shows multiple function scenarios where null returns are simplified. Only modifies returns in void functions or untyped functions, while preserving null returns in functions with explicit return types like int or ?int.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/return_notation/simplified_null_return.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo() { return null; }\n+function foo() { return; }\n function bar(): int { return null; }\n function baz(): ?int { return null; }\n-function xyz(): void { return null; }\n+function xyz(): void { return; }\n```\n\n----------------------------------------\n\nTITLE: Full Import Configuration Example\nDESCRIPTION: Shows importing of classes, constants, and functions when all import options are set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/global_namespace_import.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Foo;\nuse DateTimeImmutable;\nuse function count;\nuse const M_PI;\n\nif (count($x)) {\n    /** @var DateTimeImmutable $d */\n    $d = new DateTimeImmutable();\n    $p = M_PI;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic get_class conversion example\nDESCRIPTION: Demonstrates the basic conversion of a get_class() call to the ::class keyword syntax on a variable.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/get_class_to_class_keyword.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-get_class($a);\n+$a::class;\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Spaces in Switch Case Statements (PHP)\nDESCRIPTION: This code snippet demonstrates the effect of applying the 'switch_case_space' rule. It removes extra spaces between the colon and case value in switch statements, improving code consistency and readability.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/switch_case_space.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n     switch($a) {\n-        case 1   :\n+        case 1:\n             break;\n-        default     :\n+        default:\n             return 2;\n     }\n```\n\n----------------------------------------\n\nTITLE: Applying switch_case_semicolon_to_colon Rule in PHP\nDESCRIPTION: This snippet demonstrates the application of the 'switch_case_semicolon_to_colon' rule. It shows how semicolons after case statements are replaced with colons in a switch block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/switch_case_semicolon_to_colon.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n     switch ($a) {\n-        case 1;\n+        case 1:\n             break;\n-        default;\n+        default:\n             break;\n     }\n```\n\n----------------------------------------\n\nTITLE: Converting Octal Literals to 0o Notation in PHP\nDESCRIPTION: This example demonstrates how the octal_notation rule transforms traditional octal literals to the modern 0o prefix notation. It converts 0123 (old style octal) to 0o123 (new style octal).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/octal_notation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $foo = 0123;\n+<?php $foo = 0o123;\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Blank Lines After break Statements (PHP-CS-Fixer, PHP)\nDESCRIPTION: Illustrates the behavior when the no_extra_blank_lines rule is configured with tokens = ['break'], targeting extra blank lines following the break statement within a switch block. No dependencies except PHP-CS-Fixer. Removes the blank line after a break, resulting in cleaner code structure.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n switch ($foo) {\n     case 41:\n         echo \"foo\";\n         break;\n-\n     case 42:\n         break;\n }\n\n```\n\n----------------------------------------\n\nTITLE: Default Yoda Style Configuration Example\nDESCRIPTION: Demonstrates the default configuration that converts standard conditionals to Yoda style comparisons, where literals are placed on the left side of the comparison operator.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/yoda_style.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-    if ($a === null) {\n+    if (null === $a) {\n        echo \"null\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Leading Slash in PHP Use Statements\nDESCRIPTION: This code snippet demonstrates the effect of applying the 'no_leading_import_slash' rule. It removes the leading slash from the 'use' statement in a PHP namespace.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/no_leading_import_slash.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace Foo;\n-use \\Bar;\n+use Bar;\n```\n\n----------------------------------------\n\nTITLE: Correcting CALLABLE to callable in PHP Function Parameter\nDESCRIPTION: This snippet demonstrates correcting the case of the 'callable' type hint in a function parameter from uppercase to lowercase.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_function_type_declaration_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Bar {\n    public function Foo(CALLABLE $bar)\n    {\n        return 1;\n    }\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Bar {\n    public function Foo(callable $bar)\n    {\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying string_implicit_backslashes (Config: single_quoted='escape')\nDESCRIPTION: Shows the rule's effect when configured to `escape` backslashes in single-quoted strings. This changes `'\\\"'` to `'\\\\\"'` and `'My\\Prefix\\\\'` to `'My\\\\Prefix\\\\'`, ensuring all backslashes are explicitly escaped. Double-quoted strings and heredocs follow the default 'escape' behavior as seen in Example #1.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/string_implicit_backslashes.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n   -$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n   +$singleQuoted = 'String with \\\\\" and My\\\\Prefix\\\\';\n\n   -$doubleQuoted = \"Interpret my \\n but not my \\a\";\n   +$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n    $hereDoc = <<<HEREDOC\n   -Interpret my \\100 but not my \\999\n   +Interpret my \\100 but not my \\\\999\n    HEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Removing @package and @subpackage Annotations in PHP\nDESCRIPTION: Example showing how the rule removes @package and @subpackage annotations from PHPDoc comments while preserving other docblock content. The rule specifically targets and removes these legacy annotations while maintaining the rest of the documentation structure.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_package.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @internal\n- * @package Foo\n- * subpackage Bar\n */\nclass Baz\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Applying 'final_internal_class' Rule with Custom Configuration\nDESCRIPTION: This example shows the rule's behavior with a custom configuration. It adds 'final' to a class with '@CUSTOM' annotation, but not to a class with both '@CUSTOM' and '@not-fix' annotations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/final_internal_class.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * @CUSTOM\n */\n-class A{}\n+final class A{}\n\n/**\n * @CUSTOM\n * @not-fix\n */\nclass B{}\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines in switch/case/default Blocks (PHP-CS-Fixer, PHP)\nDESCRIPTION: Demonstrates application of the no_extra_blank_lines rule with tokens = ['switch', 'case', 'default'], removing redundant blank lines within switch-case-default code blocks. Only PHP-CS-Fixer with configured tokens is needed. Ensures consistent and compact switch block structure.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n switch($a) {\n-\n     case 1:\n-\n     default:\n-\n         echo 3;\n }\n\n```\n\n----------------------------------------\n\nTITLE: Length-Based Sorting of Use Statements in PHP\nDESCRIPTION: Illustrates the 'ordered_imports' rule sorting use statements by length instead of alphabetically.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/ordered_imports.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+use Bar;\n+use Acme;\n+use Bar1;\n use Acme\\Bar;\n-use Bar1;\n-use Acme;\n-use Bar;\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Blank Line Before Namespace Declaration in PHP\nDESCRIPTION: This example demonstrates the application of the 'single_blank_line_before_namespace' rule. It adds a single blank line before the namespace declaration, improving code readability and adhering to coding standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/single_blank_line_before_namespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php  namespace A {}\n+<?php\n+\n+namespace A {}\n```\n\n----------------------------------------\n\nTITLE: Applying Single Blank Line at EOF Transformation with PHP CS Fixer (diff)\nDESCRIPTION: Demonstrates how the single_blank_line_at_eof rule transforms PHP files by ensuring a single newline at the end when there is no PHP closing tag. This diff-based snippet shows both the original (lacking a newline) and the corrected file with the newline, facilitating direct observation of the enforced standard. It is relevant when working with PHP CS Fixer to maintain PSR-2 and PSR-12 code styles.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/single_blank_line_at_eof.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-$a = 1;\\n\\ No newline at end of file\\n+$a = 1;\\n\n```\n\n----------------------------------------\n\nTITLE: Removing Invisible Characters in PHP (Custom Configuration)\nDESCRIPTION: This example shows the behavior of the 'non_printable_character' rule when configured to remove invisible characters without using escape sequences.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/non_printable_character.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php echo \"‚ÄãHello World !\";\n+<?php echo \"Hello World !\";\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines After Return Statements (PHP-CS-Fixer, PHP)\nDESCRIPTION: Demonstrates application of the no_extra_blank_lines rule with tokens = ['return'], targeting extra blank lines following a return statement in a function. Requires only PHP-CS-Fixer. Helps keep function bodies concise and standardized.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n function foo($bar)\n {\n     return $bar;\n-\n }\n\n```\n\n----------------------------------------\n\nTITLE: Applying constant_case Rule with Default Configuration in PHP\nDESCRIPTION: This example demonstrates the default behavior of the constant_case rule, which changes the casing of PHP constants to lowercase.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/constant_case.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$a = false;\n$b = true;\n$c = null;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Single Line Throw Rule in PHP\nDESCRIPTION: This example shows the transformation of a multi-line exception throw to a single-line throw. It illustrates how the 'single_line_throw' rule modifies the code to comply with the single-line requirement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/single_line_throw.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-throw new Exception(\n-    'Error.',\n-    500\n-);\n+throw new Exception('Error.', 500);\n```\n\n----------------------------------------\n\nTITLE: Converting All Tags to Short Format\nDESCRIPTION: Shows conversion of all PHP echo/print statements to short tags regardless of complexity when shorten_simple_statements_only is false.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/echo_tag_syntax.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?=1?>\n-<?php print '2' . '3'; ?>\n-<?php /* comment */ echo '2' . '3'; ?>\n-<?php print '2' . '3'; someFunction(); ?>\n+<?= '2' . '3'; ?>\n+<?=/* comment */ '2' . '3'; ?>\n+<?= '2' . '3'; someFunction(); ?>\n```\n\n----------------------------------------\n\nTITLE: Fixing Class Constant Type Declaration Casing in PHP\nDESCRIPTION: Shows the correction of type declaration casing for a class constant. Changes INT to int in the constant type declaration to maintain consistent lowercase type naming.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_type_declaration_casing.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo\n {\n-    const INT BAR = 1;\n+    const int BAR = 1;\n }\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Type Ordering\nDESCRIPTION: Demonstrates default configuration behavior where null is placed first in type declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param string|null $bar\n */\n// Changes to:\n/**\n * @param null|string $bar\n */\n```\n\n----------------------------------------\n\nTITLE: Fixing Whitespace After Semicolon - Default Configuration\nDESCRIPTION: Demonstrates the default behavior of the space_after_semicolon rule which adds a single space after semicolons and fixes spacing in for loop expressions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/space_after_semicolon.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-                        sample();     $test = 1;\n-                        sample();$test = 2;\n-                        for ( ;;++$sample) {\n+                        sample(); $test = 1;\n+                        sample(); $test = 2;\n+                        for ( ; ; ++$sample) {\n                            }\n```\n\n----------------------------------------\n\nTITLE: Applying Whitespace After Comma in Array Rule (Ensure Single Space)\nDESCRIPTION: This example shows the rule's behavior with the 'ensure_single_space' option set to true, which ensures exactly one space after each comma in array declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/whitespace_after_comma_in_array.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$sample = [1,2, 3,  4,    5];\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$sample = [1, 2, 3, 4, 5];\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (continue statement) in PHP\nDESCRIPTION: This diff illustrates the `blank_line_before_statement` rule configured with `['statements' => ['continue']]`. A blank line is inserted before the `continue` statement inside the `foreach` loop.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    foreach ($foo as $bar) {\n        if ($bar->isTired()) {\n            $bar->sleep();\n   +\n            continue;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Correcting Line Endings with PHP-CS-Fixer (diff)\nDESCRIPTION: Shows a diff example of applying the line_ending rule in PHP-CS-Fixer. Demonstrates conversion of mixed or incorrect line endings (e.g., carriage return characters) to consistent line feed usage in PHP files. Inputs are the original and new PHP code sections as seen in a typical diff format; output is the set of changes to be applied. No external dependencies aside from PHP-CS-Fixer and the rule itself are required.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/line_ending.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php $b = \\\" $a ^M\\n- 123\\\"; $a = <<<TEST^M\\n-AAAAA ^M\\n- |^M\\n+ 123\\\"; $a = <<<TEST\\n+AAAAA \\n+ |\\n TEST;\n```\n\n----------------------------------------\n\nTITLE: Adding Required Blank Line After Import Statements - PHP\nDESCRIPTION: Example showing how the fixer adds a missing blank line after the use statements block before the class declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/single_line_after_imports.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace Foo;\n\n use Bar;\n use Baz;\n+\n final class Example\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Fixing Implode Arguments Order Example 1\nDESCRIPTION: Demonstrates correcting the argument order of implode() function by placing the glue string as first argument and array as second argument.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/implode_call.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-implode($pieces, '');\n+implode('', $pieces);\n```\n\n----------------------------------------\n\nTITLE: Formatting Array Offset Braces in PHP Using PHP-CS-Fixer (diff) - Default Configuration\nDESCRIPTION: Demonstrates the application of the 'no_spaces_around_offset' rule with its default configuration (both 'inside' and 'outside') using a diff. Spaces inside and outside array offset braces are removed. Inputs are PHP source code with spaces around offset braces, and the output is the corrected code without those spaces. No additional dependencies are required besides PHP-CS-Fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_spaces_around_offset.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\\n   +++ New\\n    <?php\\n   -$sample = $b [ 'a' ] [ 'b' ];\\n   +$sample = $b['a']['b'];\n```\n\n----------------------------------------\n\nTITLE: Applying Unary Operator Spaces Rule in PHP (only_dec_inc: false)\nDESCRIPTION: This example shows the rule application with 'only_dec_inc' set to false. It removes spaces for all unary operators, including increment and decrement operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/unary_operator_spaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo($a, ...   $b) { return (--   $a) * ($b   ++);}\n+function foo($a, ...$b) { return (--$a) * ($b++);}\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace Before Semicolons in PHP\nDESCRIPTION: Example showing the removal of whitespace before a semicolon in a single-line PHP method call. The fixer removes the space between the closing parenthesis and semicolon.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/no_singleline_whitespace_before_semicolons.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $this->foo() ;\n+<?php $this->foo();\n```\n\n----------------------------------------\n\nTITLE: No Sorting with Custom Import Order in PHP\nDESCRIPTION: Illustrates the 'ordered_imports' rule when configured to not sort imports but still group them by type.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/ordered_imports.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n use const BBB;\n use const AAAA;\n\n-use function DDD;\n-use function CCC\\AA;\n-\n use Acme;\n use AAC;\n+\n use Bar;\n+use function DDD;\n+use function CCC\\AA;\n```\n\n----------------------------------------\n\nTITLE: Replacing non-multibyte string functions with mb_ equivalents in PHP\nDESCRIPTION: This diff demonstrates how PHP-CS-Fixer transforms standard string functions to their multibyte-safe equivalents. The conversion includes functions like strlen, strpos, substr, and various case manipulation functions to ensure proper handling of multibyte character sets.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/mb_str_functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = strlen($a);\n-$a = strpos($a, $b);\n-$a = strrpos($a, $b);\n-$a = substr($a, $b);\n-$a = strtolower($a);\n-$a = strtoupper($a);\n-$a = stripos($a, $b);\n-$a = strripos($a, $b);\n-$a = strstr($a, $b);\n-$a = stristr($a, $b);\n-$a = strrchr($a, $b);\n-$a = substr_count($a, $b);\n+$a = mb_strlen($a);\n+$a = mb_strpos($a, $b);\n+$a = mb_strrpos($a, $b);\n+$a = mb_substr($a, $b);\n+$a = mb_strtolower($a);\n+$a = mb_strtoupper($a);\n+$a = mb_stripos($a, $b);\n+$a = mb_strripos($a, $b);\n+$a = mb_strstr($a, $b);\n+$a = mb_stristr($a, $b);\n+$a = mb_strrchr($a, $b);\n+$a = mb_substr_count($a, $b);\n```\n\n----------------------------------------\n\nTITLE: Reordering fopen flags in PHP\nDESCRIPTION: This snippet demonstrates the effect of the 'fopen_flag_order' rule. It reorders the flags in an 'fopen' call, moving 'b' to the end of the flag string. This ensures consistent flag ordering across 'fopen' calls in the codebase.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/fopen_flag_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$a = fopen($foo, 'br+');\n+$a = fopen($foo, 'r+b');\n```\n\n----------------------------------------\n\nTITLE: Single Line Anonymous Functions Configuration in PHP\nDESCRIPTION: Demonstrates how allow_single_line_anonymous_functions configuration permits single-line anonymous functions with simple return statements, but expands more complex ones.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $foo = function () { return true; };\n-$bar = function () { $result = true;\n-    return $result; };\n+$bar = function () {\n+$result = true;\n+    return $result;\n+};\n```\n\n----------------------------------------\n\nTITLE: Applying Unary Operator Spaces Rule in PHP (only_dec_inc: true)\nDESCRIPTION: This example demonstrates the rule application with 'only_dec_inc' set to true. It only removes spaces for increment and decrement operators, leaving other unary operators unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/unary_operator_spaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo($a, ...   $b) { return (--   $a) * ($b   ++);}\n+function foo($a, ...   $b) { return (--$a) * ($b++);}\n```\n\n----------------------------------------\n\nTITLE: Applying No Space Cast Configuration in PHP\nDESCRIPTION: This example illustrates the 'cast_spaces' rule with the 'none' space configuration, which removes all spaces between casts and variables.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/cast_spaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$bar = (string)$a;\n$foo = (int)$b;\n```\n\n----------------------------------------\n\nTITLE: Null Adjustment Type Ordering Example\nDESCRIPTION: Demonstrates type ordering with null adjustment set to always_last, affecting both union and intersection types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_types.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n interface Foo\n {\n-    public function bar(null|string|int $foo): string|int;\n+    public function bar(int|string|null $foo): int|string;\n\n-    public function foo(\\Stringable&\\Countable $obj): int;\n+    public function foo(\\Countable&\\Stringable $obj): int;\n }\n```\n\n----------------------------------------\n\nTITLE: Formatting PHP Include/Require Statements\nDESCRIPTION: Shows how to properly format include and require statements in PHP. Removes extra spaces and parentheses around file paths, maintaining a single space between the statement and file path.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/include.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-require (\"sample1.php\");\n-require_once  \"sample2.php\";\n-include       \"sample3.php\";\n-include_once(\"sample4.php\");\n+require \"sample1.php\";\n+require_once \"sample2.php\";\n+include \"sample3.php\";\n+include_once \"sample4.php\";\n```\n\n----------------------------------------\n\nTITLE: Default Empty Loop Condition Style (while)\nDESCRIPTION: Demonstrates the default configuration which converts empty for loops and do-while loops to while(true) syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/empty_loop_condition.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-for(;;) {\n+while (true) {\n    foo();\n}\n\n-do {\n+while (true) {\n    foo();\n-} while(true); // do while\n+}  // do while\n```\n\n----------------------------------------\n\nTITLE: Demonstrating full_opening_tag rule application in PHP\nDESCRIPTION: This diff snippet shows the application of the full_opening_tag rule. It replaces the short PHP opening tag <?  with the full <?php tag.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/full_opening_tag.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?\n+<?php\n\n echo \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Converting Array Types to List Types in PHPDoc Comments\nDESCRIPTION: Demonstrates the conversion of array type hints to list type hints in PHPDoc comments. This transformation applies when dealing with sequential arrays without explicit keys. The example shows both single-level and nested type conversions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_list_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n- * @param array<int> $x\n- * @param array<array<string>> $y\n+ * @param list<int> $x\n+ * @param list<list<string>> $y\n */\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Unset Calls Example in PHP\nDESCRIPTION: Demonstrates how the rule transforms multiple consecutive unset() calls into a single unset() call with multiple parameters. This optimization improves code readability and reduces redundancy.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/combine_consecutive_unsets.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-unset($a); unset($b);\n+unset($a, $b); \n```\n\n----------------------------------------\n\nTITLE: Applying Default ('none') Spacing to Union Types in Catch Blocks (PHP)\nDESCRIPTION: Shows how the `types_spaces` rule, with default configuration (`space`='none'), removes spaces around the pipe `|` operator in a `catch` block handling multiple exception types (`ErrorA|ErrorB`).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/types_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    try\n    {\n        new Foo();\n   -} catch (ErrorA | ErrorB $e) {\n   +} catch (ErrorA|ErrorB $e) {\n    echo'error';}\n```\n\n----------------------------------------\n\nTITLE: Formatting NOT Operator Spacing in PHP\nDESCRIPTION: Example showing the correct formatting of logical NOT operator (!) in PHP code. The rule requires one trailing whitespace after the NOT operator for improved readability.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/not_operator_with_successor_space.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-if (!$bar) {\n+if (! $bar) {\n     echo \"Help!\";\n }\n```\n\n----------------------------------------\n\nTITLE: Applying Default Doctrine Annotation Array Assignment in PHP\nDESCRIPTION: This snippet demonstrates the default behavior of the rule, which changes the assignment operator in Doctrine annotations from ':' to '='.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_array_assignment.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n- * @Foo({bar : \"baz\"})\n+ * @Foo({bar = \"baz\"})\n */\nclass Bar {}\n```\n\n----------------------------------------\n\nTITLE: Separating Properties Only If Meta in PHP\nDESCRIPTION: Shows the 'only_if_meta' configuration for properties, adding blank lines only when there are doc comments or attributes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_attributes_separation.rst#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Sample\n{\n    public $a;\n\n    #[SetUp]\n    public $b;\n\n    /** @var string */\n    public $c;\n\n    /** @internal */\n    #[Assert\\String()]\n    public $d;\n    public $e;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Single Line @var PHPDoc Comments in PHP\nDESCRIPTION: Demonstrates the correct spacing for single line @var PHPDoc comments. The fixer removes excessive spaces between @var, the type declaration, and the variable name.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_single_line_var_spacing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php /**@var   MyClass   $a   */\n+<?php /** @var MyClass $a */\n $a = test();\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for fopen_flags Rule\nDESCRIPTION: Demonstrates the default behavior where 't' flag is removed and 'b' flag is added to fopen() calls. The default configuration sets b_mode to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/fopen_flags.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$a = fopen($foo, 'rwt');\n+$a = fopen($foo, 'rwb');\n```\n\n----------------------------------------\n\nTITLE: Static Property Null Initialization Example\nDESCRIPTION: Shows how the rule handles explicit null initialization of static class properties. The fixer removes unnecessary null initialization.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/no_null_property_initialization.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo {\n-    public static $foo = null;\n+    public static $foo;\n }\n```\n\n----------------------------------------\n\nTITLE: Applying PHPDoc Trim Rule Example - PHP/Diff\nDESCRIPTION: Demonstrates how the phpdoc_trim rule removes unnecessary empty comment lines from the beginning and end of a PHPDoc block while preserving the actual content. The example shows a docblock for a final class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_trim.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- *\n  * Foo must be final class.\n- *\n- *\n  */\n final class Foo {}\n```\n\n----------------------------------------\n\nTITLE: Fixing Magic Method Call Casing in PHP\nDESCRIPTION: Shows the correction of a magic method call's casing. Changes the incorrectly cased __INVOKE() call to the proper lowercase __invoke().\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/magic_method_casing.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo->__INVOKE(1);\n+$foo->__invoke(1);\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (Default Configuration) in PHP\nDESCRIPTION: This diff shows the effect of the `blank_line_before_statement` rule with its default configuration. A blank line is inserted before the `return` statement inside the function `A`. The default configuration includes `return` among the statements requiring a preceding blank line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    function A() {\n        echo 1;\n   +\n        return 1;\n    }\n```\n\n----------------------------------------\n\nTITLE: Renaming PHPDoc Tags with Inline Fixing Disabled\nDESCRIPTION: Example showing PHPDoc tag renaming with inline fixing disabled, only affecting annotation tags.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_tag_rename.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @inheritDocs\n * {@inheritdocs}\n */\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Extra Space Between Array Typehint and Parameter\nDESCRIPTION: Example showing how the fixer normalizes multiple spaces between the array typehint and parameter name to a single space.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/function_typehint_space.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function sample(array  $a)\n+function sample(array $a)\n {}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example\nDESCRIPTION: Demonstrates the default behavior of removing superfluous PHPDoc tags that don't provide additional information beyond what's already in the PHP type declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_superfluous_phpdoc_tags.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /**\n     * @param Bar $bar\n     * @param mixed $baz\n     *\n     * @return Baz\n     */\n    public function doFoo(Bar $bar, $baz): Baz {}\n```\n\n----------------------------------------\n\nTITLE: Default Concatenation Spacing Configuration Example\nDESCRIPTION: Demonstrates the default behavior of the concat_space rule which removes spaces around concatenation operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/concat_space.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$foo = 'bar' . 3 . 'baz'.'qux';\n+$foo = 'bar'. 3 .'baz'.'qux';\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Space Between Array Typehint and Parameter\nDESCRIPTION: Example showing how the fixer adds a required space between the array typehint and parameter name when missing.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/function_typehint_space.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function sample(array$a)\n+function sample(array $a)\n {}\n```\n\n----------------------------------------\n\nTITLE: Configuring method_argument_space Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the method_argument_space rule in the PSR-2 rule set. It specifies how to handle attribute placement and multiline arguments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR2.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n['attribute_placement' => 'ignore', 'on_multiline' => 'ensure_fully_multiline']\n```\n\n----------------------------------------\n\nTITLE: Converting Uppercase Static References to Lowercase - Example 2\nDESCRIPTION: Shows the conversion of SELF to self in method return type declarations and nullable parameter types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/lowercase_static_reference.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Foo extends Bar\n {\n-    public function baz(?self $x) : SELF\n+    public function baz(?self $x) : self\n     {\n         return false;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Applying new_with_parentheses Rule with Named Class Configuration in PHP\nDESCRIPTION: This example illustrates the rule's behavior when configured with 'named_class' set to false. It removes parentheses after 'new' for named classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_with_parentheses.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-$x = new X();\n+$x = new X;\n```\n\n----------------------------------------\n\nTITLE: Applying constant_case Rule with Upper Case Configuration in PHP\nDESCRIPTION: This example shows the constant_case rule behavior when configured to use uppercase for PHP constants.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/constant_case.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$a = FALSE;\n$b = TRUE;\n$c = NULL;\n```\n\n----------------------------------------\n\nTITLE: Fixing Single Argument Implode Call Example 2\nDESCRIPTION: Shows how the fixer adds the missing empty string glue argument when implode is called with only the array parameter.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/implode_call.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-implode($pieces);\n+implode('', $pieces);\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_between_import_groups Rule (Example 3) in PHP\nDESCRIPTION: Similar to Example 2, this diff shows the rule grouping multiple imports of the same type (constants, classes, functions) and inserting blank lines (+) between the distinct groups. The order within the groups may be influenced by other fixer rules.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_between_import_groups.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    use const BBB;\n    use const AAAA;\n   +\n    use Acme;\n    use AAC;\n    use Bar;\n   +\n    use function DDD;\n    use function CCC\\AA;\n```\n\n----------------------------------------\n\nTITLE: Converting Asterisk Comments Only\nDESCRIPTION: Example with configuration ['comment_types' => ['asterisk']] that converts only asterisk-style comments to // syntax while leaving other comment types unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/single_line_comment_style.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-/* first comment */\n+// first comment\n $a = 1;\n\n-/*\n- * second comment\n- */\n+// second comment\n $b = 2;\n\n /*\n  * third\n  * comment\n  */\n $c = 3;\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example\nDESCRIPTION: Shows the default behavior of adding two blank lines before namespace declaration\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_lines_before_namespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php  namespace A {}\n+<?php\n+\n+namespace A {}\n```\n\n----------------------------------------\n\nTITLE: One Space Before Colon Configuration - PHP Return Type Spacing\nDESCRIPTION: Illustrates the rule's behavior with 'space_before' => 'one' configuration, which adds spaces both before and after the colon.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/return_type_declaration.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo(int $a):string {};\n+function foo(int $a) : string {};\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Comma in Single-line PHP Array\nDESCRIPTION: Demonstrates the removal of a trailing comma from a single-line array declaration in PHP. The rule transforms an array with a trailing comma to one without it, improving code consistency.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/no_trailing_comma_in_singleline_array.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = array('sample',  );\n+$a = array('sample');\n```\n\n----------------------------------------\n\nTITLE: Converting Method Prefix to @test Annotation\nDESCRIPTION: Shows how the rule converts test method prefixes to @test annotations when configured with style='annotation'. This transformation maintains test functionality while following the annotation-based approach.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_test_annotation.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\npublic function testItDoesSomething() {}}\n```\n\n----------------------------------------\n\nTITLE: Removing BOM from PHP File\nDESCRIPTION: This diff example demonstrates the removal of the Byte Order Mark (BOM) from the beginning of a PHP file. The rule ensures that PHP code uses only UTF-8 encoding without BOM.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/encoding.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-Ôªø<?php\n+<?php\n\n echo \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Replacing 'static' with 'self' in final class method\nDESCRIPTION: This example demonstrates replacing 'static' with 'self' for accessing class members within a final class method. It affects class name, static method, and static property access.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/self_static_accessor.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class Sample\n{\n    private static $A = 1;\n\n    public function getBar()\n    {\n-        return static::class.static::test().static::$A;\n+        return self::class.self::test().self::$A;\n    }\n\n    private static function test()\n    {\n        return 'test';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying no_alias_functions Rule with @mbreg Configuration in PHP\nDESCRIPTION: Shows how the no_alias_functions rule transforms PHP code when configured to only fix mbstring regular expression functions. It leaves non-mbstring alias functions untouched while replacing mbstring aliases.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/no_alias_functions.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $a = is_double($b);\n-mbereg_search_getregs();\n+mb_ereg_search_getregs();\n```\n\n----------------------------------------\n\nTITLE: Fixing Method Parameter and Return Type Casing in PHP\nDESCRIPTION: Demonstrates correcting the casing of callable parameter type and int return type in a PHP method declaration. Changes CALLABLE to callable and INT to int to follow proper PHP type declaration conventions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_type_declaration_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class Bar {\n-    public function Foo(CALLABLE $bar): INT\n+    public function Foo(callable $bar): int\n     {\n         return 1;\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Applying new_with_parentheses Rule with Anonymous Class Configuration in PHP\nDESCRIPTION: This example shows the rule's behavior when configured with 'anonymous_class' set to false. It removes parentheses after 'new' for anonymous classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_with_parentheses.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-$y = new class() {};\n+$y = new class {};\n```\n\n----------------------------------------\n\nTITLE: Applying Multiline Comment Opening/Closing Rule in PHP\nDESCRIPTION: This snippet demonstrates the changes made by the 'multiline_comment_opening_closing' rule. It adjusts the opening and closing of multiline comments and DocBlocks to ensure consistent formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/multiline_comment_opening_closing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-/******\n+/*\n  * Multiline comment with arbitrary asterisks count\n- ******/\n+ */\n\n-/**\\\n+/*\\\n  * Multiline comment that seems a DocBlock\n  */\n\n /**\n  * DocBlock with arbitrary asterisk count at the end\n- **/\n+ */\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPDoc Annotation Periods in PHP Comments\nDESCRIPTION: Demonstrates how the fixer removes the period from PHPDoc annotation descriptions. The example shows a function parameter documentation being modified to remove the trailing period while preserving the description content.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_annotation_without_dot.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- * @param string $bar Some string.\n+ * @param string $bar some string\n  */\n function foo ($bar) {}\n```\n\n----------------------------------------\n\nTITLE: Converting Comments to PHPDoc Blocks in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'comment_to_phpdoc' rule, which converts single-line comments with annotations to PHPDoc blocks.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/comment_to_phpdoc.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php /* header */ $x = true; /* @var bool $isFoo */ $isFoo = true;\n+<?php /* header */ $x = true; /** @var bool $isFoo */ $isFoo = true;\n```\n\n----------------------------------------\n\nTITLE: Simplifying Standalone Null Return in PHP\nDESCRIPTION: Demonstrates simplifying a standalone return null statement to just return. This transformation is applied when the return value is not explicitly typed and void is implied.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/return_notation/simplified_null_return.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php return null;\n+<?php return;\n```\n\n----------------------------------------\n\nTITLE: Including Custom Constants in native_constant_invocation Rule for PHP\nDESCRIPTION: This snippet demonstrates how to include custom constants in the rule's application using the 'include' configuration option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/constant_notation/native_constant_invocation.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n+<?php var_dump(\\PHP_VERSION, \\M_PI, \\MY_CUSTOM_PI);\n```\n\n----------------------------------------\n\nTITLE: Vertical PHPDoc Tag Alignment\nDESCRIPTION: Demonstrates vertical alignment configuration with ['align' => 'vertical'].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_align.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\n * @return Foo description foo\n *\n * @throws Foo description foo\n *             description foo\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Converting Grouped Imports to Single Imports in PHP\nDESCRIPTION: Example demonstrating how the fixer handles grouped imports with configuration 'group_to_single_imports' set to true, converting them into individual import statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/single_import_per_statement.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Space\\Models\\ {\n    TestModelA,\n    TestModelB,\n    TestModel,\n};\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Space\\Models\\TestModelA;\nuse Space\\Models\\TestModelB;\nuse Space\\Models\\TestModel;\n```\n\n----------------------------------------\n\nTITLE: Symfony Rule Set Configuration - Blank Line Before Statement\nDESCRIPTION: Configuration for adding blank lines before specific statements, targeting only return statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/Symfony.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['statements' => ['return']]\n```\n\n----------------------------------------\n\nTITLE: No-Space Concatenation Configuration Example\nDESCRIPTION: Shows the effect of setting spacing='none' which removes all spaces around concatenation operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/concat_space.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$foo = 'bar' . 3 . 'baz'.'qux';\n+$foo = 'bar'. 3 .'baz'.'qux';\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Separators in Numeric Literals\nDESCRIPTION: Shows how the rule reformats a numeric literal that already contains underscores when the 'override_existing' option is set to true. The example demonstrates reorganizing the separators according to the rule's standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/numeric_literal_separator.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $var = 24_40_21;\n+<?php $var = 244_021;\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines Between use Statements (PHP-CS-Fixer, PHP)\nDESCRIPTION: Illustrates the no_extra_blank_lines rule configured with tokens = ['use'], targeting and removing unnecessary blank lines between use statements in a namespace. No dependencies beyond PHP-CS-Fixer. Results in grouped, consecutive use statements as per code style guidelines.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n namespace Foo;\n\n use Bar\\Baz;\n-\n use Baz\\Bar;\n\n class Bar\n {\n }\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating string_line_ending Rule Effect (Diff)\nDESCRIPTION: This diff illustrates how the `string_line_ending` rule modifies a PHP multi-line string. It removes Carriage Return characters (`^M`, representing `\\r`) preceding Line Feed characters (`\\n`), effectively converting Windows-style line endings (CRLF) or classic Mac-style endings (CR) to Unix-style line endings (LF) within the string literal. This ensures consistency but might alter string comparison results or output, hence it's considered risky.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/string_line_ending.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n   -<?php $a = 'my^M\n   +<?php $a = 'my\n    multi\n   -line^M\n   +line\n    string';^M\n```\n\n----------------------------------------\n\nTITLE: Ordering Interfaces by Length in PHP\nDESCRIPTION: Illustrates interface ordering when the 'order' configuration is set to 'length', sorting from shortest to longest.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_interfaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfinal class ExampleA implements Short, Longer, MuchLonger {}\n\ninterface ExampleB extends Short, Longer, MuchLonger {}\n```\n\n----------------------------------------\n\nTITLE: Applying fully_qualified_strict_types Rule with import_symbols Option in PHP\nDESCRIPTION: Demonstrates how the rule automatically imports FQCNs and removes leading parts when the import_symbols option is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/fully_qualified_strict_types.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n namespace Foo\\Test;\n+use Other\\BaseClass;\n+use Other\\CaughtThrowable;\n+use Other\\FunctionArgument;\n+use Other\\FunctionReturnType;\n+use Other\\Interface1;\n+use Other\\Interface2;\n+use Other\\PropertyPhpDoc;\n+use Other\\StaticFunctionCall;\n\n-class Foo extends \\Other\\BaseClass implements \\Other\\Interface1, \\Other\\Interface2\n+class Foo extends BaseClass implements Interface1, Interface2\n {\n-    /** @var \\Other\\PropertyPhpDoc */\n+    /** @var PropertyPhpDoc */\n     private $array;\n-    public function __construct(\\Other\\FunctionArgument $arg) {}\n-    public function foo(): \\Other\\FunctionReturnType\n+    public function __construct(FunctionArgument $arg) {}\n+    public function foo(): FunctionReturnType\n     {\n         try {\n-            \\Other\\StaticFunctionCall::bar();\n-        } catch (\\Other\\CaughtThrowable $e) {}\n+            StaticFunctionCall::bar();\n+        } catch (CaughtThrowable $e) {}\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Space Trimming in PHP\nDESCRIPTION: Shows the before and after comparison of array declarations where unnecessary spaces are removed between array parentheses. The rule ensures arrays are formatted consistently without leading or trailing spaces.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/trim_array_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$sample = array( );\n-$sample = array( 'a', 'b' );\n+$sample = array();\n+$sample = array('a', 'b');\n```\n\n----------------------------------------\n\nTITLE: Applying type_declaration_spaces (Properties Only) in PHP\nDESCRIPTION: This diff illustrates the `type_declaration_spaces` rule with the configuration `['elements' => ['property']]`. It corrects spacing only for class property type declarations (`int`), leaving function argument spacing (`string`) untouched.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/type_declaration_spaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    class Foo\n    {\n   -    public int   $bar;\n   +    public int $bar;\n \n        public function baz(string     $a) {}\n    }\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for declare_equal_normalize\nDESCRIPTION: Demonstrates the default behavior where spaces around the equal sign in declare statements are removed.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/declare_equal_normalize.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(ticks=1);\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_after_opening_tag Rule in PHP\nDESCRIPTION: This snippet demonstrates the effect of applying the 'blank_line_after_opening_tag' rule. It ensures there is no code on the same line as the PHP open tag and adds a blank line after it.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/blank_line_after_opening_tag.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $a = 1;\n+<?php\n+\n+$a = 1;\n $b = 1;\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit Annotations to FQCN Format\nDESCRIPTION: Example showing how the fixer converts PHPUnit annotations to use fully qualified class names. The fixer adds leading backslashes to class references in @expectedException, @covers, @coversDefaultClass, and @uses annotations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_fqcn_annotation.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @expectedException \\InvalidArgumentException\n     * @covers \\Project\\NameSpace\\Something\n     * @coversDefaultClass \\Project\\Default\n     * @uses \\Project\\Test\\Util\n     */\n    public function testSomeTest()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Ordering of Use Statements in PHP\nDESCRIPTION: Shows how the 'ordered_imports' rule behaves when configured with case-sensitive sorting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/ordered_imports.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+use const AA;\n use function Aaa;\n-use const AA;\n```\n\n----------------------------------------\n\nTITLE: Custom PHPDoc Order with param, custom, throws, return\nDESCRIPTION: Demonstrates PHPDoc annotation ordering with custom annotation placement specified in the sequence.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_order.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n+ * @param string $foo\n+ * @param bool   $bar Bar\n+ * @custom Test!\n * @throws Exception|RuntimeException foo\n- * @custom Test!\n * @return int  Return the number of changes.\n- * @param string $foo\n- * @param bool   $bar Bar\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Parentheses to New Expressions in PHP\nDESCRIPTION: This example demonstrates the rule's behavior when configured to add parentheses to 'new' expressions with a further call.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_expression_parentheses.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-new Foo()->bar();\n+(new Foo())->bar();\n```\n\n----------------------------------------\n\nTITLE: Removing Nullable Type Declaration in PHP\nDESCRIPTION: This snippet shows removing a nullable type declaration from a function parameter with a default null value. It removes the '?' before the type declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/nullable_type_declaration_for_default_null_value.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-function sample(?string $str = null)\n+function sample(string $str = null)\n{}\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Scalar Type Conversion\nDESCRIPTION: Demonstrates the default configuration of the phpdoc_scalar rule that converts all supported scalar types to their short forms. Converts 'integer' to 'int', 'boolean' to 'bool', 'real' to 'float', and 'double' to 'float' in PHPDoc comments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_scalar.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param integer $a\n * @param boolean $b\n * @param real $c\n *\n * @return double\n */\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Parameter List Spacing in Function Declarations - diff\nDESCRIPTION: This snippet provides a diff output for a function declaration with parameters, where the 'no_spaces_inside_parenthesis' rule is applied. The example shows the correction from spaced to unspaced parameter lists in function definitions in PHP. As with the prior example, this requires no additional dependencies beyond PHP-CS-Fixer, and focuses on PHP code formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_spaces_inside_parenthesis.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-function foo( $bar, $baz )\\n+function foo($bar, $baz)\\n {\\n }\n```\n\n----------------------------------------\n\nTITLE: Enforcing Heredoc/Nowdoc Indentation with Default Configuration in PHP (Diff Format)\nDESCRIPTION: This snippet, presented as a unified diff, demonstrates how the PHP-CS-Fixer with the 'heredoc_indentation' rule (default configuration) changes heredoc and nowdoc string literals in PHP from unindented or misaligned format to properly indented forms. The left column shows the original PHP code with heredoc and nowdoc blocks, while the right column shows the corrected code after applying the rule. Applies to .php files and targets heredoc and nowdoc syntax for code readability and consistency.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/heredoc_indentation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n     $heredoc = <<<EOD\n-abc\n-    def\n-EOD;\n+        abc\n+            def\n+        EOD;\n\n     $nowdoc = <<<'EOD'\n-abc\n-    def\n-EOD;\n+        abc\n+            def\n+        EOD;\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Integer Literal Case in PHP\nDESCRIPTION: Demonstrates the correction of hexadecimal and binary integer literal case formatting. Converts uppercase 'X' in hex literals to lowercase 'x' and uppercase 'B' in binary literals to lowercase 'b'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/integer_literal_case.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = 0Xff;\n-$bar = 0B11111111;\n+$foo = 0xFF;\n+$bar = 0b11111111;\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Parentheses - Default Configuration\nDESCRIPTION: Example showing code transformation with default configuration that removes unnecessary parentheses from break, clone, continue, echo/print, return, switch case, and yield statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_unneeded_control_parentheses.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwhile ($x) { while ($y) { break 2; } }\nclone $a;\nwhile ($y) { continue 2; }\necho \"foo\";\nprint \"foo\";\nreturn 1 + 2;\nswitch ($a) { case $x; }\nyield 2;\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Comma After Heredoc in Array (PHP)\nDESCRIPTION: Shows the rule's behavior with 'after_heredoc' configuration set to true, adding a trailing comma after a heredoc in a multiline array.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/trailing_comma_in_multiline.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n     $x = [\n         'foo',\n         <<<EOD\n             bar\n-            EOD\n+            EOD,\n     ];\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Spacing in PHP\nDESCRIPTION: Demonstrates spacing adjustment for arrow functions with 'closure_fn_spacing' set to 'none'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/function_declaration.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$f = fn () => null;\n```\n\n----------------------------------------\n\nTITLE: Applying Unary Operator Spaces Rule in PHP (Default Configuration)\nDESCRIPTION: This example demonstrates the application of the 'unary_operator_spaces' rule with default configuration. It removes spaces between unary operators and their operands.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/unary_operator_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$sample ++;\n--- $sample;\n-$sample = ! ! $a;\n-$sample = ~  $c;\n-function & foo(){}\n+$sample++;\n+--$sample;\n+$sample = !!$a;\n+$sample = ~$c;\n+function &foo(){}\n```\n\n----------------------------------------\n\nTITLE: Removing Double Semicolon in PHP Assignment\nDESCRIPTION: Demonstrates fixing redundant semicolon after variable assignment statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/no_empty_statement.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $a = 1;;\n+<?php $a = 1;\n```\n\n----------------------------------------\n\nTITLE: Anonymous Class Configuration Example\nDESCRIPTION: Shows behavior when anonymous classes are configured to not require parentheses using ['anonymous_class' => false].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_with_braces.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n-$y = new class() {};\n+$y = new class {};\n```\n\n----------------------------------------\n\nTITLE: Basic Spacing Fix Example\nDESCRIPTION: Demonstrates fixing multiple spaces between throw and new constructs to a single space\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_around_construct.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-throw  new  \\Exception();\n+throw new \\Exception();\n```\n\n----------------------------------------\n\nTITLE: Custom Inline Tag Configuration Example\nDESCRIPTION: Shows how to configure the rule to convert regular annotations to inline format, specifically for the @inheritdoc tag.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_tag_type.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n- * @inheritdoc\n+ * {@inheritdoc}\n */\n```\n\n----------------------------------------\n\nTITLE: Removing Parentheses from New Expressions in PHP\nDESCRIPTION: This example demonstrates the default behavior of the rule, which removes parentheses from 'new' expressions with a further call.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_expression_parentheses.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-(new Foo())->bar();\n+new Foo()->bar();\n```\n\n----------------------------------------\n\nTITLE: Named Class Configuration Example\nDESCRIPTION: Demonstrates behavior when named classes are configured to not require parentheses using ['named_class' => false].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_with_braces.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n-$x = new X();\n+$x = new X;\n```\n\n----------------------------------------\n\nTITLE: Applying Single Line Comment Spacing Rule in PHP\nDESCRIPTION: This snippet demonstrates the effect of applying the 'single_line_comment_spacing' rule. It shows how the rule adds proper spacing after comment symbols and within inline comments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/single_line_comment_spacing.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-//comment 1\n-#comment 2\n-/*comment 3*/\n+// comment 1\n+# comment 2\n+/* comment 3 */\n```\n\n----------------------------------------\n\nTITLE: Converting <> Operator to != in PHP\nDESCRIPTION: Demonstrates the transformation of the <> comparison operator to the more standard != operator. This change maintains the same logical meaning while using more commonly recognized syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/standardize_not_equals.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = $b <> $c;\n+$a = $b != $c;\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines Before Namespace Declaration in PHP\nDESCRIPTION: This example demonstrates the effect of applying the 'no_blank_lines_before_namespace' rule. It removes three blank lines that precede the namespace declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/no_blank_lines_before_namespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-\n-\n-\n namespace Example;\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Comma in Function Parameters (PHP)\nDESCRIPTION: Demonstrates the rule adding a trailing comma to the last parameter in a multiline function declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/trailing_comma_in_multiline.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n function foo(\n     $x,\n-    $y\n+    $y,\n )\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Blank Lines in PHPDoc Comments\nDESCRIPTION: Demonstrates how the fixer removes redundant blank lines in PHPDoc comments while preserving the essential structure. It shows the cleanup of extra blank lines after the summary, within the description, and before annotations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_trim_consecutive_blank_line_separation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * Summary.\n  *\n- *\n  * Description that contain 4 lines,\n  *\n  *\n  * while 2 of them are blank!\n  *\n- *\n  * @param string $foo\n- *\n  *\n  * @dataProvider provideFixCases\n  */\n function fnc($foo) {}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Functions Opening Brace Configuration in PHP\nDESCRIPTION: Shows how to configure anonymous_functions_opening_brace to place anonymous function opening braces on the next line instead of the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = function () {\n+$foo = function ()\n+{\n };\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Example for PHPDoc Return Self Reference\nDESCRIPTION: Shows how the rule behaves with custom configuration where 'this' is replaced with 'self'. The configuration option 'replacements' is set to ['this' => 'self'].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_return_self_reference.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Sample\n{\n    /**\n     * @return self\n     */\n    public function test1()\n    {\n        return $this;\n    }\n\n    /**\n     * @return $self\n     */\n    public function test2()\n    {\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_between_import_groups Rule (Example 4) in PHP\nDESCRIPTION: This diff illustrates the `blank_line_between_import_groups` rule inserting blank lines (+) even when there are single import statements for each type (constant, class, function), effectively separating each type into its own block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_between_import_groups.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    use const AAAA;\n    use const BBB;\n   +\n    use Acme;\n   +\n    use function DDD;\n   +\n    use AAC;\n   +\n    use function CCC\\AA;\n   +\n    use Bar;\n```\n\n----------------------------------------\n\nTITLE: Updating Explicit String Variable Interpolation in PHP Double-Quoted Strings - Diff\nDESCRIPTION: Demonstrates how the ‚Äúsimple_to_complex_string_variable‚Äù rule modifies explicit variable references in double-quoted strings in PHP. Specifically, it replaces syntax using ${var} with {$var}. Dependencies include PHP code using double-quoted strings and assumes usage with PHP-CS-Fixer. The example shows both the original and fixed code in unified diff format, allowing users to visually compare changes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/simple_to_complex_string_variable.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $name = 'World';\n-echo \"Hello ${name}!\";\n+echo \"Hello {$name}!\";\n```\n\n----------------------------------------\n\nTITLE: Removing Comments from Namespace Usage\nDESCRIPTION: Shows how the fixer removes inline comments from namespace usage in function calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/clean_namespace.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-echo foo /* comment */ \\ bar();\n+echo foo\\bar();\n```\n\n----------------------------------------\n\nTITLE: ORM and Assert Annotations Example\nDESCRIPTION: Shows grouping of Doctrine ORM and Assert annotations using wildcard patterns in the configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_separation.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @ORM\\Id\n * @ORM\\GeneratedValue\n *\n * @Assert\\NotNull\n * @Assert\\Type(\"string\")\n */\n```\n\n----------------------------------------\n\nTITLE: Non-Yoda Style Configuration Example\nDESCRIPTION: Shows how to enforce non-Yoda style with configuration: equal=false, identical=false, less_and_greater=false.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/yoda_style.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n    // Enforce non-Yoda style.\n-    if (null === $a) {\n+    if ($a === null) {\n        echo \"null\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring paths in PHP CS Fixer\nDESCRIPTION: Configuration that customizes which paths to include or exclude from formatting. This example shows how to exclude specific directories and files from being processed.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/config.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$finder = (new PhpCsFixer\\Finder())\n    ->in(__DIR__)\n    ->exclude([\n        'autogenerated_content',\n        'tests/fixtures',\n    ])\n    ->notPath([\n        'dump.php',\n        'src/exception_file.php',\n    ])\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PhpCsFixer' => true,\n    ])\n    ->setFinder($finder)\n;\n```\n\n----------------------------------------\n\nTITLE: Applying Post-increment Style in PHP\nDESCRIPTION: This example shows the 'increment_style' rule configured to use post-increment/decrement style, converting pre-increment/decrement operators to post-increment/decrement operators.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/increment_style.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-++$a;\n---$b;\n+$a++;\n+$b--;\n```\n\n----------------------------------------\n\nTITLE: Upgrading PHP CS Fixer via PHIVE\nDESCRIPTION: Command for upgrading an existing PHP CS Fixer installation using PHIVE.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nphive update php-cs-fixer\n```\n\n----------------------------------------\n\nTITLE: Formatting PHPDoc Variable Annotations in PHP Class Properties\nDESCRIPTION: Demonstrates the removal of property names from @var and @type annotations in class property docblocks. The rule simplifies PHPDoc by keeping only the type information.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_var_without_name.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class Foo\n{\n    /**\n     * @var int\n     */\n    public $bar;\n\n    /**\n     * @type float\n     */\n    public $baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Error Suppression from Function Calls in PHP\nDESCRIPTION: This example shows the rule's behavior with 'noise_remaining_usages' set to true, which removes the '@' operator from function calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/error_suppression.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-@mkdir($dir);\n-@unlink($path);\n+mkdir($dir);\n+unlink($path);\n```\n\n----------------------------------------\n\nTITLE: Separating Constants with One Blank Line in PHP\nDESCRIPTION: Illustrates the configuration to separate constants with one blank line using the 'elements' option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_attributes_separation.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Sample\n{\n    const A = 1;\n\n    /** seconds in some hours */\n    const B = 3600;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluded Functions Configuration Example\nDESCRIPTION: Demonstrates excluding specific functions (json_encode) from receiving the leading backslash modification.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n function baz($options)\n {\n-    if (!array_key_exists(\"foo\", $options)) {\n+    if (!\\array_key_exists(\"foo\", $options)) {\n         throw new \\InvalidArgumentException();\n     }\n\n     return json_encode($options);\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_data_provider_name Rule with Custom Prefix and Suffix in PHP\nDESCRIPTION: This example shows how to configure the rule with a custom prefix 'data_' and an empty suffix, renaming the data provider method accordingly.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_name.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass FooTest extends TestCase {\n    /**\n     * @dataProvider data_feature\n     */\n    public function test_feature($expected, $actual) {}\n    public function data_feature() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying native_constant_invocation Rule to Namespaced Code in PHP\nDESCRIPTION: This example shows how the rule behaves when configured with 'scope' => 'namespaced'. It only adds leading backslashes to constants within a namespace.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/constant_notation/native_constant_invocation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace space1 {\n-    echo PHP_VERSION;\n+    echo \\PHP_VERSION;\n }\n namespace {\n     echo M_PI;\n }\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Tag Casing Configuration Example\nDESCRIPTION: Demonstrates the default behavior of the PHPDoc tag casing fixer, which standardizes the @inheritDoc tag casing.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_tag_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @inheritdoc\n * @inheritDoc\n */\n```\n\n----------------------------------------\n\nTITLE: Simplifying Continue Statement in PHP Loop\nDESCRIPTION: Illustrates removal of unnecessary level specification in continue statement within a while loop.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/no_empty_statement.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n <?php while(foo()){\n-    continue 1;\n+    continue ;\n }\n```\n\n----------------------------------------\n\nTITLE: Basic Group Import Example\nDESCRIPTION: Demonstrates the default behavior of the group_import rule by combining multiple use statements from the same namespace into a grouped import.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/group_import.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-use Foo\\Bar;\n-use Foo\\Baz;\n+use Foo\\{Bar, Baz};\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example - PHP Return Type Spacing\nDESCRIPTION: Demonstrates the default behavior of the return_type_declaration rule which adds a space after the colon but none before it.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/return_type_declaration.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo(int $a):string {};\n+function foo(int $a): string {};\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Alphabetical Ordering of Interfaces in PHP\nDESCRIPTION: Shows the default case-insensitive alphabetical ordering of interfaces.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_interfaces.rst#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfinal class ExampleA implements IgNoReCaSeA, IgnorecaseB, IgnoreCaseC {}\n\ninterface ExampleB extends IgNoReCaSeA, IgnorecaseB, IgnoreCaseC {}\n```\n\n----------------------------------------\n\nTITLE: Mixed Yoda Style Configuration Example\nDESCRIPTION: Shows different handling of equal, identical, and comparison operators with configuration: equal=true, identical=false, less_and_greater=null.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/yoda_style.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-    $b = $c != 1;  // equal\n-    $a = 1 === $b; // identical\n+    $b = 1 != $c;  // equal\n+    $a = $b === 1; // identical\n    $c = $c > 3;   // less than\n```\n\n----------------------------------------\n\nTITLE: Upgrading PHP CS Fixer via Composer\nDESCRIPTION: Commands for upgrading an existing PHP CS Fixer installation using Composer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncomposer upgrade friendsofphp/php-cs-fixer\n## or\ncomposer upgrade php-cs-fixer/shim\n```\n\n----------------------------------------\n\nTITLE: Modifying PHPUnit Test Method Visibility in PHP\nDESCRIPTION: Demonstrates the transformation of setUp() and tearDown() method visibility from public to protected in a PHPUnit test class. The example shows how the fixer modifies these method declarations while preserving the implementation logic.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_set_up_tear_down_visibility.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    private $hello;\n    public function setUp()\n    {\n        $this->hello = \"hello\";\n    }\n\n    public function tearDown()\n    {\n        $this->hello = null;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    private $hello;\n    protected function setUp()\n    {\n        $this->hello = \"hello\";\n    }\n\n    protected function tearDown()\n    {\n        $this->hello = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Spaces Around Double Colon in PHP\nDESCRIPTION: Example showing the removal of spaces around the double colon operator when accessing the ::class constant. The fixer removes unnecessary spaces between the class name and the scope resolution operator.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/no_space_around_double_colon.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-echo Foo\\Bar :: class;\n+echo Foo\\Bar::class;\n```\n\n----------------------------------------\n\nTITLE: Associating Comments with Subsequent Control Statements in Statement Indentation with stick_comment_to_next_continuous_control_statement Enabled (PHP)\nDESCRIPTION: This diff illustrates code transformation with 'stick_comment_to_next_continuous_control_statement' set to true. Here, comments at the end of a code block are treated as belonging to the next continuous control statement, affecting how comments are positioned relative to blocks like 'elseif(1)', and changing which lines get indented or moved. The input is a PHP code block with various comments and control statements, and the output reflects the reorganization of comments for clarity and association. PHP-CS-Fixer must be configured accordingly.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/statement_indentation.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-        // foo\n+// foo\n if ($foo) {\n     echo \"foo\";\n-        // this is treated as comment of `elseif(1)` block, as `stick_comment_to_next_continuous_control_statement` is enabled\n+// this is treated as comment of `elseif(1)` block, as `stick_comment_to_next_continuous_control_statement` is enabled\n } elseif(1) {\n     echo \"bar\";\n } elseif(2) {\n-        // this is treated as comment of `elseif(2)` block, as the only content of that block\n+    // this is treated as comment of `elseif(2)` block, as the only content of that block\n } elseif(3) {\n     $aaa = 1;\n-        // this is treated as comment of `elseif(3)` block, as it is a comment in the final block\n+    // this is treated as comment of `elseif(3)` block, as it is a comment in the final block\n }\n\n```\n\n----------------------------------------\n\nTITLE: Separating Properties with One Blank Line in PHP\nDESCRIPTION: Shows the effect of configuring the rule to separate properties with one blank line using the 'elements' option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_attributes_separation.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Sample\n{\nprivate $a; // foo\n\n    /** second in a hour */\n    private $b;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting unset() to null Assignment for Class Properties in PHP\nDESCRIPTION: Demonstrates how the rule transforms unset() calls on class properties to null assignments. This transformation is risky with PHP 7.4+ typed properties and affects property enumeration and references.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/no_unset_on_property.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-unset($this->a);\n+$this->a = null;\n```\n\n----------------------------------------\n\nTITLE: Compiler Optimized Functions Example\nDESCRIPTION: Demonstrates modification of compiler-optimized functions only, affecting get_class() but not str_repeat().\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $a .= str_repeat($a, 4);\n-$c = get_class($d);\n+$c = \\get_class($d);\n```\n\n----------------------------------------\n\nTITLE: Anonymous Classes Opening Brace Configuration in PHP\nDESCRIPTION: Demonstrates how to configure anonymous classes to have opening braces on the next line instead of the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = new class {\n+$foo = new class\n+{\n };\n```\n\n----------------------------------------\n\nTITLE: Basic Type Ordering Example with Default Configuration\nDESCRIPTION: Demonstrates the default behavior of the ordered_types rule, which alphabetically sorts types in catch blocks.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_types.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n try {\n     cache()->save($foo);\n-} catch (\\RuntimeException|CacheException $e) {\n+} catch (CacheException|\\RuntimeException $e) {\n     logger($e);\n\n     throw $e;\n }\n```\n\n----------------------------------------\n\nTITLE: Updating PHPUnit expectation methods for version 5.6 in PHP\nDESCRIPTION: This example demonstrates the rule's changes when configured for PHPUnit 5.6. It replaces setExpectedException and setExpectedExceptionRegExp with expectException, expectExceptionMessageRegExp, and expectExceptionCode.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_expectation.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testFoo()\n     {\n-        $this->setExpectedException(\"RuntimeException\", null, 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionCode(123);\n         foo();\n     }\n\n     public function testBar()\n     {\n-        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"/Msg.*/\", 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionMessageRegExp(\"/Msg.*/\");\n+        $this->expectExceptionCode(123);\n         bar();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Braces - Default Configuration\nDESCRIPTION: Example showing how the rule removes unnecessary braces around standalone code blocks and case statements with default configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_unneeded_braces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php {\n+<?php \n     echo 1;\n-}\n\n+\n switch ($b) {\n-    case 1: {\n+    case 1: \n         break;\n-    }\n+    \n }\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPDoc Summary Punctuation in PHP\nDESCRIPTION: Demonstrates how the phpdoc_summary rule automatically adds a period at the end of PHPDoc summary comments that are missing proper punctuation. The rule ensures documentation consistency by enforcing that summaries end with either a full stop, exclamation mark, or question mark.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_summary.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n- * Foo function is great\n+ * Foo function is great.\n */\nfunction foo () {}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP CS Fixer via Homebrew\nDESCRIPTION: Command for installing PHP CS Fixer globally using Homebrew package manager.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nbrew install php-cs-fixer\n```\n\n----------------------------------------\n\nTITLE: Array Push Conversion Example\nDESCRIPTION: Demonstrates conversion of array_push() to array bracket notation for simpler array appending.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray_push($x, $y); // converted to\n$x[] = $y;\n```\n\n----------------------------------------\n\nTITLE: Separating Constants Only If Meta in PHP\nDESCRIPTION: Demonstrates the 'only_if_meta' configuration for constants, which adds a blank line only when there's a doc comment or attribute.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_attributes_separation.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Sample\n{\n    /** @var int */\n    const SECOND = 1;\n\n    /** @var int */\n    const MINUTE = 60;\n    const HOUR = 3600;\n    const DAY = 86400;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying self_accessor Rule in PHP Class\nDESCRIPTION: This snippet demonstrates the application of the 'self_accessor' rule in a PHP class. It replaces direct class name references with 'self' for constant and method access.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/self_accessor.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass Sample\n{\n    const BAZ = 1;\n-    const BAR = Sample::BAZ;\n+    const BAR = self::BAZ;\n\n    public function getBar()\n    {\n-        return Sample::BAR;\n+        return self::BAR;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating PHP CS Fixer in GitHub Actions\nDESCRIPTION: YAML configuration for integrating PHP CS Fixer as a check step in GitHub Actions using a Docker container.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: PHP-CS-Fixer\n  uses: docker://ghcr.io/php-cs-fixer/php-cs-fixer:3-php8.3\n    with:\n      args: check\n      # use `check .` if your repository not having paths configured in .php-cs-fixer[.dist].php\n```\n\n----------------------------------------\n\nTITLE: Risky Conversion of Ternary to Elvis Operator in PHP\nDESCRIPTION: This example shows a risky conversion where a function call is involved. After fixing, 'a()' is only called once, which may change the behavior if the function has side effects.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/ternary_to_elvis_operator.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n-<?php $foo = $bar[a()] ? $bar[a()] : 1; # \"risky\" sample, \"a()\" only gets called once after fixing\n+<?php $foo = $bar[a()] ?  : 1; # \"risky\" sample, \"a()\" only gets called once after fixing\n```\n\n----------------------------------------\n\nTITLE: Basic Method Argument Space Formatting - PHP\nDESCRIPTION: Demonstrates default configuration that enforces one space after commas and no space before commas in method arguments and calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/method_argument_space.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example - Single Space After Throw\nDESCRIPTION: Demonstrates the default configuration fixing multiple spaces after the 'throw' construct to a single space.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_after_construct.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nthrow  new  \\Exception();\n// Fixes to:\nthrow new \\Exception();\n```\n\n----------------------------------------\n\nTITLE: Removing Null from Union Type Declaration in PHP\nDESCRIPTION: This snippet demonstrates removing '|null' from a union type declaration for a function parameter with a default null value.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/nullable_type_declaration_for_default_null_value.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-function sample(string|int|null $str = null)\n+function sample(string|int $str = null)\n{}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Functions Opening Brace Configuration in PHP\nDESCRIPTION: Demonstrates how to configure anonymous functions to have opening braces on the next line instead of the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = function () {\n+$foo = function ()\n+{\n };\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines Inside Parenthesis-Brace Blocks (PHP-CS-Fixer, PHP)\nDESCRIPTION: Shows how configuring the no_extra_blank_lines rule with tokens = ['parenthesis_brace_block'] removes blank lines inside parenthesis-brace code blocks, such as multi-line array definitions. Requires PHP-CS-Fixer with the corresponding tokens option. Results in a more vertically compact block structure.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n $foo = array(\n-\n     \"foo\"\n-\n );\n\n```\n\n----------------------------------------\n\nTITLE: Removing Separators from Numeric Literals with no_separator Strategy\nDESCRIPTION: Shows how the rule removes existing underscores from various numeric literals when the 'no_separator' strategy is configured. Examples include decimal, octal, binary, and hexadecimal numbers.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/numeric_literal_separator.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$integer = 1234_5678;\n-$octal = 01_234_56;\n-$binary = 0b00_10_01_00;\n-$hexadecimal = 0x3D45_8F4F;\n+$integer = 12345678;\n+$octal = 0123456;\n+$binary = 0b00100100;\n+$hexadecimal = 0x3D458F4F;\n```\n\n----------------------------------------\n\nTITLE: Example of Alphabetical Attribute Sorting in PHP\nDESCRIPTION: This diff shows how the ordered_attributes rule sorts attributes alphabetically by default. Attributes like #[Bar], #[Corge], #[Foo], and #[Qux] are rearranged both for single-line attribute declarations and multi-line attribute declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/attribute_notation/ordered_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n+#[Bar(3)]\n+#[Corge(a: 'test')]\n #[Foo]\n-#[Bar(3)]\n #[Qux(new Bar(5))]\n-#[Corge(a: 'test')]\n class Sample1 {}\n\n #[\n+    Bar(3),\n+    Corge(a: 'test'),\n     Foo,\n-    Bar(3),\n     Qux(new Bar(5)),\n-    Corge(a: 'test'),\n ]\n class Sample2 {}\n```\n\n----------------------------------------\n\nTITLE: Control Structures Opening Brace Configuration in PHP\nDESCRIPTION: Shows how to configure the control_structures_opening_brace option to place opening braces for control structures on the next line instead of the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if (foo()) {\n+if (foo())\n+{\n     bar();\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring 'no_unneeded_final_method' Rule for Private Methods in PHP\nDESCRIPTION: This example shows the rule's behavior when configured with 'private_methods' set to false. It only removes 'final' keywords from methods in final classes, preserving them for private methods in non-final classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/no_unneeded_final_method.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class Foo\n {\n-    final private function baz() {}\n+    private function baz() {}\n }\n\n class Bar\n {\n     final private function bar1() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Leading Whitespace from Namespace Declarations in PHP\nDESCRIPTION: This code snippet demonstrates the effect of applying the 'no_leading_namespace_whitespace' rule. It removes leading whitespace from namespace declaration lines, improving code consistency and adherence to coding standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/no_leading_namespace_whitespace.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n- namespace Test8a;\n-    namespace Test8b;\n+namespace Test8a;\n+namespace Test8b;\n```\n\n----------------------------------------\n\nTITLE: Adding Leading Backslash to Internal Constants in PHP\nDESCRIPTION: This snippet demonstrates the default behavior of the native_constant_invocation rule. It adds a leading backslash to internal PHP constants to speed up resolving.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/constant_notation/native_constant_invocation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n+<?php var_dump(\\PHP_VERSION, \\M_PI, MY_CUSTOM_PI);\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Line Closure in PHP CS Fixer Braces Rule\nDESCRIPTION: Shows the effect of enabling the 'allow_single_line_closure' option in the 'braces' rule configuration, allowing single-line lambda functions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n    return $item < 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images in Parallel\nDESCRIPTION: Command to build all Docker images defined in the compose configuration in parallel.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker compose build --parallel\n```\n\n----------------------------------------\n\nTITLE: Adding Null to Union Type Declaration in PHP\nDESCRIPTION: This example adds '|null' to a union type declaration for a function parameter with a default null value.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/nullable_type_declaration_for_default_null_value.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-function sample(string|int $str = null)\n+function sample(string|int|null $str = null)\n{}\n```\n\n----------------------------------------\n\nTITLE: Applying type_declaration_spaces (Functions Only) in PHP\nDESCRIPTION: This diff shows the `type_declaration_spaces` rule applied with the configuration `['elements' => ['function']]`. It enforces a single space after type declarations only within function arguments (`string`, `bool` in the arrow function), leaving property declarations (`int`) unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/type_declaration_spaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    class Foo\n    {\n        public int   $bar;\n \n   -    public function baz(string     $a)\n   +    public function baz(string $a)\n        {\n   -        return fn(bool    $c): string => (string) $c;\n   +        return fn(bool $c): string => (string) $c;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Parentheses from Anonymous Class Instantiation in PHP\nDESCRIPTION: This example shows the default behavior applied to an anonymous class instantiation with a method call.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_expression_parentheses.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-(new class {})->bar();\n+new class {}->bar();\n```\n\n----------------------------------------\n\nTITLE: Adding Null to Intersection Type Declaration in PHP\nDESCRIPTION: This example adds '|null' to an intersection type declaration for a function parameter with a default null value.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/nullable_type_declaration_for_default_null_value.rst#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-function sample(\\Foo&\\Bar $str = null)\n+function sample((\\Foo&\\Bar)|null $str = null)\n{}\n```\n\n----------------------------------------\n\nTITLE: Standardizing Decrement Operator in PHP\nDESCRIPTION: This example shows how the rule replaces the '-= 1' operation with the '--' decrement operator. It simplifies the code and uses the more concise decrement syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/standardize_increment.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$i -= 1;\n+--$i;\n```\n\n----------------------------------------\n\nTITLE: Removing @return void Annotation Example\nDESCRIPTION: Shows how the rule removes an unnecessary @return void annotation from a function's PHPDoc comment.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_empty_return.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- * @return void\n */\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Applying 'final_internal_class' Rule to PHP Class (Default Configuration)\nDESCRIPTION: This example demonstrates the default behavior of the 'final_internal_class' rule. It adds the 'final' keyword to a class marked with the '@internal' annotation.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/final_internal_class.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * @internal\n */\n-class Sample\n+final class Sample\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Namespace Braces - With namespaces=true Configuration\nDESCRIPTION: Example demonstrating the removal of braces from namespace declarations when the 'namespaces' option is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_unneeded_braces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-namespace Foo {\n+namespace Foo;\n     function Bar(){}\n-}\n+\n```\n\n----------------------------------------\n\nTITLE: Correcting INT and Bool to int and bool in PHP Function Signature\nDESCRIPTION: This example shows the correction of both parameter and return type declarations from uppercase to lowercase for built-in types 'int' and 'bool'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_function_type_declaration_casing.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction Foo(INT $a): Bool\n{\n    return true;\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction Foo(int $a): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Configured random_api_migration Rule in PHP\nDESCRIPTION: Shows the application of the random_api_migration rule with a custom configuration that only replaces getrandmax with mt_getrandmax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/random_api_migration.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-$a = getrandmax();\n+$a = mt_getrandmax();\n$a = rand($b, $c);\n$a = srand();\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Blank Lines After continue Statements (PHP-CS-Fixer, PHP)\nDESCRIPTION: Demonstrates use of the no_extra_blank_lines rule with tokens = ['continue'], which removes unnecessary blank lines immediately following a continue statement in a for loop. No dependencies except PHP-CS-Fixer. Results in more compact loop structures.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n for ($i = 0; $i < 9000; ++$i) {\n     if (true) {\n         continue;\n-\n     }\n }\n\n```\n\n----------------------------------------\n\nTITLE: Applying fully_qualified_strict_types Rule with leading_backslash_in_global_namespace in PHP\nDESCRIPTION: Shows how the rule adds leading backslashes to FQCNs in global namespace context when the leading_backslash_in_global_namespace option is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/fully_qualified_strict_types.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n class SomeClass\n {\n-    public function doY(Foo\\NotImported $u, \\Foo\\NotImported $v)\n+    public function doY(\\Foo\\NotImported $u, \\Foo\\NotImported $v)\n     {\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adjusting Brace Position for Functions and OOP Constructs in PHP\nDESCRIPTION: Illustrates the impact of setting 'position_after_functions_and_oop_constructs' to 'same' in the 'braces' rule configuration, affecting brace placement in class and function definitions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Not Operator with Space Rule in PHP\nDESCRIPTION: This snippet demonstrates the application of the 'not_operator_with_space' rule. It shows how the logical NOT operator (!) should be surrounded by spaces for better readability.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/not_operator_with_space.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-if (!$bar) {\n+if ( ! $bar) {\n     echo \"Help!\";\n }\n```\n\n----------------------------------------\n\nTITLE: Applying type_declaration_spaces (Constants Only) in PHP\nDESCRIPTION: This diff demonstrates the `type_declaration_spaces` rule configured with `['elements' => ['constant']]`. It ensures a single space after the type declaration (`string`) specifically for class constants, while other elements would be ignored under this configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/type_declaration_spaces.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    class Foo\n    {\n   -    public  const string   BAR = \"\";\n   +    public  const string BAR = \"\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Echo Construct Configuration Example\nDESCRIPTION: Shows how the rule fixes spacing when configured specifically for the 'echo' construct.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_after_construct.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho  \"Hello!\";\n// Fixes to:\necho \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPDoc Type Cases - Default Configuration\nDESCRIPTION: Example showing how the rule corrects the case of PHP types in PHPDoc comments using default configuration. It transforms uppercase STRING and String to lowercase string, and inT to int.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param STRING|String[] $bar\n * @param string|string[] $bar\n *\n * @return inT[]\n * @return int[]\n */\n```\n\n----------------------------------------\n\nTITLE: Applying Camel Case to PHPUnit Test Methods with Attributes in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'php_unit_method_casing' rule when PHPUnit test methods are annotated with attributes, converting snake_case to camelCase.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_method_casing.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse \\PHPUnit\\Framework\\Attributes\\Test;\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    #[PHPUnit\\Framework\\Attributes\\Test]\n-    public function test_my_code() {}\n+    public function testMyCode() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Yield From Alternative Example\nDESCRIPTION: Another example of fixing spaces around yield from construct\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_around_construct.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-yield  from  baz();\n+yield from baz();\n```\n\n----------------------------------------\n\nTITLE: Removing Author Annotation with Case Sensitivity\nDESCRIPTION: Example showing removal of @author annotation while preserving case sensitivity. Only exact case matches are removed.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_annotation_remove.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * @internal\n- * @author John Doe\n  * @AuThOr Jane Doe\n  */\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Linebreak After PHP Opening Tag - Diff Example\nDESCRIPTION: Shows a diff comparison demonstrating how the rule moves code to a new line after the PHP opening tag. The fixer ensures a line break is added after '<?php' tag.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/linebreak_after_opening_tag.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $a = 1;\n+<?php\n+$a = 1;\n $b = 3;\n```\n\n----------------------------------------\n\nTITLE: Correcting Object to object in PHP Function Parameter\nDESCRIPTION: This example demonstrates the correction of the 'Object' type hint to lowercase 'object' in a function parameter declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/casing/native_function_type_declaration_casing.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction Foo(Object $a)\n{\n    return 'hi!';\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction Foo(object $a)\n{\n    return 'hi!';\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ConfigurableFixerInterface in PHP\nDESCRIPTION: The ConfigurableFixerInterface has been updated with new methods or changes to existing methods. This may require implementations to be adjusted accordingly.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nConfigurableFixerInterface\n```\n\n----------------------------------------\n\nTITLE: Replacing Homoglyph Characters in PHP Variable Names\nDESCRIPTION: Example showing the replacement of a non-ASCII 'a' character in a variable name with its ASCII equivalent. The fixer detects homoglyphs in variable names and replaces them with standard ASCII characters to prevent potential issues.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/naming/no_homoglyph_names.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $n–∞m–µ = 'wrong \"a\" character';\n+<?php $name = 'wrong \"a\" character';\n```\n\n----------------------------------------\n\nTITLE: Example 2: Adding Missing Blank Line After Namespace\nDESCRIPTION: Shows adding a required blank line between the namespace declaration and the class definition when it's missing.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_line_after_namespace.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace Sample\\Sample;\n+\n Class Test{}\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (break statement) in PHP\nDESCRIPTION: This diff demonstrates the `blank_line_before_statement` rule configured with `['statements' => ['break']]`. A blank line is added before the `break` statement within the `switch` construct.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    switch ($foo) {\n        case 42:\n            $bar->process();\n   +\n            break;\n        case 44:\n            break;\n    }\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPDoc Block Indentation in PHP Class\nDESCRIPTION: Example showing how the rule corrects docblock indentation to match the documented constant's indentation level within a class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_indent.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DocBlocks\n{\n/**\n * Test constants\n */\n    const INDENT = 1;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DocBlocks\n{\n    /**\n     * Test constants\n     */\n    const INDENT = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PHP Core Functions to Constants - Custom Configuration\nDESCRIPTION: Shows the rule's behavior with custom configuration that only converts specific functions (get_called_class, get_class_this, phpversion) while leaving others unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/function_to_constant.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho phpversion();\necho pi();\nclass Foo\n{\n    public function Bar()\n    {\n        echo get_class();\n        get_class($this);\n        echo get_called_class();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Parentheses - Custom Configuration\nDESCRIPTION: Example showing code transformation with custom configuration that only removes parentheses from break and continue statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_unneeded_control_parentheses.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwhile ($x) { while ($y) { break 2; } }\nclone($a);\nwhile ($y) { continue 2; }\n```\n\n----------------------------------------\n\nTITLE: Classes Opening Brace Configuration in PHP\nDESCRIPTION: Demonstrates the classes_opening_brace option set to 'same_line', which places class opening braces on the same line as the class declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-class Foo\n-{\n+class Foo {\n }\n```\n\n----------------------------------------\n\nTITLE: Applying Snake Case to PHPUnit Test Methods in PHP\nDESCRIPTION: This example shows the 'php_unit_method_casing' rule with the 'snake_case' configuration, which converts camelCase test method names to snake_case in PHPUnit test classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_method_casing.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n-    public function testMyCode() {}\n+    public function test_my_code() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_mock rule for PHPUnit 5.4 in PHP\nDESCRIPTION: This example shows the behavior of the php_unit_mock rule when configured with the target set to '5.4'. It replaces ->getMock with ->createMock for single-parameter calls but leaves multi-parameter calls unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_mock.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testFoo()\n     {\n-        $mock1 = $this->getMock(\"Foo\");\n+        $mock1 = $this->createMock(\"Foo\");\n         $mock1 = $this->getMock(\"Bar\", [\"aaa\"]); // version with multiple params is not supported\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating no_blank_lines_after_phpdoc Rule Effect (Diff)\nDESCRIPTION: This diff illustrates the effect of the `no_blank_lines_after_phpdoc` rule. It shows how the fixer removes the empty lines (-) that were originally present between the PHPDoc block (`/** ... */`) and the `class Bar {}` definition in PHP code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_blank_lines_after_phpdoc.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n    /**\n     * This is the bar class.\n     */\n   -\n   -\n    class Bar {}\n```\n\n----------------------------------------\n\nTITLE: PHPDoc Type Ordering with Null Last\nDESCRIPTION: Shows type ordering with null_adjustment set to 'always_last' configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types_order.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param null|string $bar\n */\n// Changes to:\n/**\n * @param string|null $bar\n */\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_between_import_groups Rule (Example 1) in PHP\nDESCRIPTION: This diff shows the `blank_line_between_import_groups` rule adding blank lines (+) between `use function`, `use const`, and standard `use` statements for classes/namespaces in PHP code. It separates each distinct import type group.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_between_import_groups.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n    use function AAC;\n   +\n    use const AAB;\n   +\n    use AAA;\n```\n\n----------------------------------------\n\nTITLE: Simplifying If-Return Statements in PHP\nDESCRIPTION: This code snippet demonstrates how the 'simplified_if_return' rule transforms a simple if-else return statement into a more concise boolean cast expression. It simplifies the control structure while maintaining the same logical outcome.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/simplified_if_return.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if ($foo) { return true; } return false;\n+return (bool) ($foo)      ;\n```\n\n----------------------------------------\n\nTITLE: Always Move Variable Configuration Example\nDESCRIPTION: Demonstrates the always_move_variable=true configuration which ensures variables are always on the non-assignable side in Yoda style comparisons.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/yoda_style.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-return $foo === count($bar);\n+return count($bar) === $foo;\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Tag Alignment\nDESCRIPTION: Shows the default vertical alignment behavior for PHPDoc tags including @param, @return, and @throws.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_align.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\n * @return Foo description foo\n *\n * @throws Foo description foo\n *             description foo\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Applying Default ('none') Spacing to Union Types in Function Parameters (PHP)\nDESCRIPTION: Shows the default behavior of the `types_spaces` rule (`space`='none') applied to a union type hint (`int|string`) in a function definition, removing surrounding spaces.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/types_spaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n   -function foo(int | string $x)\n   +function foo(int|string $x)\n    {\n    }\n```\n\n----------------------------------------\n\nTITLE: Renaming PHPDoc Tags with Basic Configuration\nDESCRIPTION: Example showing PHPDoc tag renaming with replacements configuration set to rename 'inheritDocs' to 'inheritDoc' for both annotation and inline tags.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_tag_rename.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @inheritDocs\n * {@inheritdocs}\n */\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Constants from native_constant_invocation Rule in PHP\nDESCRIPTION: This snippet demonstrates how to exclude specific constants from the rule's application using the 'exclude' configuration option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/constant_notation/native_constant_invocation.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n+<?php var_dump(\\PHP_VERSION, M_PI, MY_CUSTOM_PI);\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Whitespace in PHP Comments Example\nDESCRIPTION: Demonstrates the removal of trailing whitespace from PHP comment lines. The fixer removes spaces at the end of each comment line while preserving the actual comment content.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/no_trailing_whitespace_in_comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-// This is \n-// a comment. \n+// This is\n+// a comment.\n```\n\n----------------------------------------\n\nTITLE: Configured Data Provider Method Placement (Before Test)\nDESCRIPTION: Example showing the configuration with placement set to 'before', where data provider methods are placed before the test method that uses them. The rule moves the dataProvider() method before its associated test method.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_method_order.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class FooTest extends TestCase {\n+    public function dataProvider() {}\n     /**\n      * @dataProvider dataProvider\n      */\n     public function testSomething($expected, $actual) {}\n-    public function dataProvider() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Functions Opening Brace Configuration in PHP\nDESCRIPTION: Shows how to configure functions to have opening braces on the same line rather than the next line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo()\n-{\n+function foo() {\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Braces from Doctrine Annotations in PHP\nDESCRIPTION: This example demonstrates the default behavior of the 'doctrine_annotation_braces' rule, which removes braces from Doctrine annotations without arguments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_braces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- * @Foo()\n+ * @Foo\n  */\n class Bar {}\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to Numeric Literals with use_separator Strategy\nDESCRIPTION: Demonstrates how the rule adds underscores as separators to various numeric literals with the 'use_separator' strategy. The example includes reformatting decimal, octal, binary, and hexadecimal numbers.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/numeric_literal_separator.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$integer = 12345678;\n-$octal = 0123456;\n-$binary = 0b0010010011011010;\n-$hexadecimal = 0x3D458F4F;\n+$integer = 12_345_678;\n+$octal = 0123_456;\n+$binary = 0b00100100_11011010;\n+$hexadecimal = 0x3D_45_8F_4F;\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (return statement) in PHP\nDESCRIPTION: This diff demonstrates the `blank_line_before_statement` rule configured with `['statements' => ['return']]`. A blank line is inserted before the `return;` statement inside the `if` block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n    if (true) {\n        $foo = $bar;\n   +\n        return;\n    }\n```\n\n----------------------------------------\n\nTITLE: Long Format Echo Tags with Print Function\nDESCRIPTION: Shows conversion using the 'print' function instead of 'echo' when converting short tags to long format.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/echo_tag_syntax.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?=1?>\n+<?php print 1?>\n <?php print '2' . '3'; ?>\n <?php /* comment */ echo '2' . '3'; ?>\n <?php print '2' . '3'; someFunction(); ?>\n```\n\n----------------------------------------\n\nTITLE: Echo Spacing Fix\nDESCRIPTION: Shows correction of multiple spaces after echo construct\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_around_construct.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-echo  \"Hello!\";\n+echo \"Hello!\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Array Offset Braces in PHP Using PHP-CS-Fixer (diff) - Outside Only\nDESCRIPTION: Illustrates the 'no_spaces_around_offset' rule with the 'positions' configuration set to ['outside']. Spaces outside offset braces are removed, leaving spaces inside untouched. The diff highlights changes made to meet the rule requirements. The only dependency is PHP-CS-Fixer with the correct configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_spaces_around_offset.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\\n   +++ New\\n    <?php\\n   -$sample = $b [ 'a' ] [ 'b' ];\\n   +$sample = $b[ 'a' ][ 'b' ];\n```\n\n----------------------------------------\n\nTITLE: Correcting Parenthesis Spacing with PHP-CS-Fixer Rule - diff\nDESCRIPTION: This snippet displays a diff showing the change made by the 'no_spaces_inside_parenthesis' rule: spaces after an opening parenthesis and before a closing parenthesis are removed in PHP control statements and method calls. It illustrates the effect of applying the fixer on a code block that uses spaces inside parentheses. There are no explicit code dependencies, but it relates to usage of PHP-CS-Fixer with this specific rule.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_spaces_inside_parenthesis.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-if ( $a ) {\\n-    foo( );\\n+if ($a) {\\n+    foo();\\n }\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (goto statement) in PHP\nDESCRIPTION: This diff illustrates the `blank_line_before_statement` rule configured with `['statements' => ['goto']]`. A blank line is inserted before the `goto b;` statement within the `else` block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    a:\n\n    if ($foo === false) {\n        goto a;\n    } else {\n        $bar = 9000;\n   +\n        goto b;\n    }\n```\n\n----------------------------------------\n\nTITLE: Renaming PHPDoc Tags with Annotation Fixing Disabled\nDESCRIPTION: Example demonstrating PHPDoc tag renaming with annotation fixing disabled, only affecting inline tags.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_tag_rename.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @inheritDocs\n * {@inheritdocs}\n */\n\n```\n\n----------------------------------------\n\nTITLE: Using echo instead of print in PHP (Default Configuration)\nDESCRIPTION: Example showing how the rule converts 'print' statements to 'echo' with the default configuration setting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/no_mixed_echo_print.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php print 'example';\n+<?php echo 'example';\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Curly Braces in PHP (Default Configuration)\nDESCRIPTION: This example demonstrates the default behavior of the 'no_unneeded_curly_braces' rule, which removes superfluous curly braces that are not part of a control structure's body.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_unneeded_curly_braces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php {\n+<?php \n     echo 1;\n-}\n\n+\n switch ($b) {\n-    case 1: {\n+    case 1: \n         break;\n-    }\n+    \n }\n```\n\n----------------------------------------\n\nTITLE: Default Small Group Test Class Annotation\nDESCRIPTION: Example showing default configuration adding @small annotation to a PHPUnit test class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_size_class.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @small\n */\nclass MyTest extends TestCase {}\n```\n\n----------------------------------------\n\nTITLE: Single-Space Concatenation Configuration Example\nDESCRIPTION: Illustrates the effect of setting spacing='one' which adds a single space before and after each concatenation operator.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/concat_space.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$foo = 'bar' . 3 . 'baz'.'qux';\n+$foo = 'bar' . 3 . 'baz' . 'qux';\n```\n\n----------------------------------------\n\nTITLE: Lambda Use Spacing Fix\nDESCRIPTION: Illustrates fixing spaces around use keyword in lambda functions\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_around_construct.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-$foo = function& ()use($bar) {\n+$foo = function& () use ($bar) {\n };\n```\n\n----------------------------------------\n\nTITLE: Converting PHPDoc Types to Property Types - Disabled Scalar Types\nDESCRIPTION: Shows type conversion behavior when scalar_types configuration is set to false, only converting object types while leaving scalar type annotations unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_property_type.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /** @var int */\n    private $foo;\n    /** @var \\Traversable */\n-    private $bar;\n+    private \\Traversable $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (if statement) in PHP\nDESCRIPTION: This diff shows the `blank_line_before_statement` rule configured with `['statements' => ['if']]`. A blank line is added before the `if (true)` statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    $a = 9000;\n   +\n    if (true) {\n        $foo = $bar;\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Token and Tokens Classes in PHP\nDESCRIPTION: The Token and Tokens classes have been made final. This means they can no longer be extended, which may affect any custom implementations that were previously extending these classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class Token\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfinal class Tokens\n```\n\n----------------------------------------\n\nTITLE: Control Structures Opening Brace Configuration in PHP\nDESCRIPTION: Demonstrates how to configure control structures to have opening braces on the next line rather than the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if (foo()) {\n+if (foo())\n+{\n     bar();\n }\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example\nDESCRIPTION: Demonstrates the default behavior of adding missing @param annotations for untyped parameters only\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_add_missing_param_annotation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * @param int $bar\n+ * @param mixed $baz\n  *\n  * @return void\n  */\n function f9(string $foo, $bar, $baz) {}\n```\n\n----------------------------------------\n\nTITLE: Removing Blank Lines After throw Statements (PHP-CS-Fixer, PHP)\nDESCRIPTION: Demonstrates use of the no_extra_blank_lines rule with tokens = ['throw'], targeting extra blank lines following a throw statement in a function. Ensures function closing is directly after exception throwing, requiring only PHP-CS-Fixer. Promotes tight exception handling formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_extra_blank_lines.rst#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n function foo($bar)\n {\n     throw new \\Exception(\"Hello!\");\n-\n }\n\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit PHPDoc to Attributes - Default Configuration\nDESCRIPTION: Demonstrates the default behavior of converting PHPUnit PHPDoc annotations to PHP 8 attributes. Removes original PHPDoc annotations and replaces them with equivalent PHPUnit attributes for test class and method definitions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n- * @covers \\VendorName\\Foo\n * @internal\n */\n+#[\\PHPUnit\\Framework\\Attributes\\CoversClass(\\VendorName\\Foo::class)]\nfinal class FooTest extends TestCase {\n    /**\n     * @param int $expected\n     * @param int $actual\n-     * @dataProvider giveMeSomeData\n-     * @requires PHP 8.0\n     */\n+    #[\\PHPUnit\\Framework\\Attributes\\DataProvider('giveMeSomeData')]\n+    #[\\PHPUnit\\Framework\\Attributes\\RequiresPhp('>= 8.0')]\n    public function testSomething($expected, $actual) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom PHPDoc Order with param, throws, return\nDESCRIPTION: Demonstrates PHPDoc annotation ordering with explicit configuration matching the default order.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_order.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n- * @throws Exception|RuntimeException foo\n * @custom Test!\n- * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n+ * @throws Exception|RuntimeException foo\n+ * @return int  Return the number of changes.\n */\n```\n\n----------------------------------------\n\nTITLE: Applying PhpdocToParamType Rule with Scalar Types Disabled in PHP\nDESCRIPTION: This example shows the behavior of the PhpdocToParamType rule when scalar_types configuration is set to false. It only applies the rule to non-scalar types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_param_type.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n /** @param Foo $foo */\n-function foo($foo) {}\n+function foo(Foo $foo) {}\n /** @param string $foo */\n function bar($foo) {}\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_between_import_groups Rule (Example 2) in PHP\nDESCRIPTION: This diff demonstrates the `blank_line_between_import_groups` rule grouping multiple constant imports (`use const`) and multiple class/namespace imports (`use`), then separating these groups and the function imports (`use function`) with blank lines (+).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_between_import_groups.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    use const AAAA;\n    use const BBB;\n   +\n    use Bar;\n    use AAC;\n    use Acme;\n   +\n    use function CCC\\AA;\n    use function DDD;\n```\n\n----------------------------------------\n\nTITLE: Applying @internal Annotation to Final PHPUnit Classes Only\nDESCRIPTION: Example showing configuration where only final test classes are marked as internal. The fixer adds @internal annotation only to final classes while leaving normal and abstract classes unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_internal_class.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyTest extends TestCase {}\n/**\n * @internal\n */\nfinal class FinalTest extends TestCase {}\nabstract class AbstractTest extends TestCase {}\n```\n\n----------------------------------------\n\nTITLE: Minimum Line Breaks with Comment\nDESCRIPTION: Illustrates adding required blank lines when min_line_breaks is 2, even with existing comments\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_lines_before_namespace.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n /** Some comment */\n+\n namespace A{}\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Tag Configuration Example\nDESCRIPTION: Demonstrates the default behavior of converting inline tags to regular annotation format using the @api tag as an example.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_tag_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n- * {@api}\n+ * @api\n */\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for PHPDoc Return Self Reference\nDESCRIPTION: Demonstrates the default behavior of the rule which converts various self-reference return types to standardized formats. Changes 'this' to '$this' and '$self' to 'self' in PHPDoc return annotations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_return_self_reference.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Sample\n{\n    /**\n     * @return $this\n     */\n    public function test1()\n    {\n        return $this;\n    }\n\n    /**\n     * @return self\n     */\n    public function test2()\n    {\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (do statement) in PHP\nDESCRIPTION: This diff shows the `blank_line_before_statement` rule configured with `['statements' => ['do']]`. A blank line is added before the `do` statement of the `do-while` loop.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    $i = 0;\n   +\n    do {\n        echo $i;\n    } while ($i > 0);\n```\n\n----------------------------------------\n\nTITLE: Referencing pow_to_exponentiation Rule in RST Format\nDESCRIPTION: A reStructuredText (RST) link to the documentation for the 'pow_to_exponentiation' rule, which is the only rule included in the @PHP56Migration:risky rule set.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP56MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n`pow_to_exponentiation <./../rules/alias/pow_to_exponentiation.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Adding Comment After Declare Strict Types in PHP\nDESCRIPTION: Illustrates adding a header comment after the 'declare(strict_types=1);' statement in a PHP file.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/header_comment.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n declare(strict_types=1);\n\n+/*\n+ * Made with love.\n+ */\n+\n namespace A\\B;\n\n echo 1;\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant Statement Separator in PHP Echo\nDESCRIPTION: Shows removal of unnecessary statement separator between echo statement and number literal.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/no_empty_statement.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php echo 1;2;\n+<?php echo 1;\n```\n\n----------------------------------------\n\nTITLE: Applying string_implicit_backslashes (Default Configuration)\nDESCRIPTION: Demonstrates the default behavior of the `string_implicit_backslashes` rule. By default, it escapes unnecessary backslashes in double-quoted strings (`\\a`) and heredocs (`\\999`), while the default 'unescape' for single-quoted strings leaves the example unchanged as it contains already necessary escapes (`\\\"`, `\\\\`). This ensures non-special character sequences preceded by a backslash are explicitly escaped for clarity.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/string_implicit_backslashes.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n    $singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n   -$doubleQuoted = \"Interpret my \\n but not my \\a\";\n   +$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n    $hereDoc = <<<HEREDOC\n   -Interpret my \\100 but not my \\999\n   +Interpret my \\100 but not my \\\\999\n    HEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Replacing 'continue' with 'break' in PHP switch statement\nDESCRIPTION: This snippet demonstrates the conversion of 'continue' to 'break' in a simple switch statement. The fixer ensures that switch cases end with 'break' for better control flow and readability.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/switch_continue_to_break.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nswitch ($foo) {\n    case 1:\n-        continue;\n+        break;\n}\n```\n\n----------------------------------------\n\nTITLE: No Space Before Colon Configuration - PHP Return Type Spacing\nDESCRIPTION: Shows the rule's behavior with explicit 'space_before' => 'none' configuration, which adds a space after the colon but none before it.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/return_type_declaration.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-function foo(int $a):string {};\n+function foo(int $a): string {};\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Loop Condition Style (for)\nDESCRIPTION: Shows how loops are transformed when configured to use for(;;) syntax instead of while(true).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/empty_loop_condition.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-while(true) {\n+for(;;) {\n    foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to Short Echo Tags\nDESCRIPTION: Demonstrates converting long-format PHP tags to short echo tags for simple statements while preserving complex ones.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_tag/echo_tag_syntax.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?=1?>\n-<?php print '2' . '3'; ?>\n-<?php /* comment */ echo '2' . '3'; ?>\n+<?= '2' . '3'; ?>\n+<?=/* comment */ '2' . '3'; ?>\n <?php print '2' . '3'; someFunction(); ?>\n```\n\n----------------------------------------\n\nTITLE: Classes Opening Brace Configuration in PHP\nDESCRIPTION: Shows how to configure classes to have opening braces on the same line rather than the next line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-class Foo\n-{\n+class Foo {\n }\n```\n\n----------------------------------------\n\nTITLE: Ordering @covers Tags in PHPDoc Comments\nDESCRIPTION: Example showing how the rule orders @covers tags alphabetically in PHPDoc comments using default configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_order_by_value.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @covers Bar\n * @covers Foo\n */\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n```\n\n----------------------------------------\n\nTITLE: Using 'self' instead of 'static' in anonymous class\nDESCRIPTION: This snippet demonstrates the use of 'self' instead of 'static' when accessing the class name within an anonymous class method.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/self_static_accessor.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$a = new class() {\n    public function getBar()\n    {\n-        return static::class;\n+        return self::class;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Include Internal Functions Example\nDESCRIPTION: Shows modification of only internal PHP functions using the @internal directive.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n myGlobalFunction();\n-count();\n+\\count();\n```\n\n----------------------------------------\n\nTITLE: Configuring visibility_required Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the visibility_required rule in the PSR-2 rule set. It specifies which elements require explicit visibility declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR2.rst#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n['elements' => ['method', 'property']]\n```\n\n----------------------------------------\n\nTITLE: Customizing Doctrine Annotation Array Assignment Operator in PHP\nDESCRIPTION: This example shows how to configure the rule to use ':' as the assignment operator instead of the default '='.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_array_assignment.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n- * @Foo({bar = \"baz\"})\n+ * @Foo({bar : \"baz\"})\n */\nclass Bar {}\n```\n\n----------------------------------------\n\nTITLE: Configuring trailing_comma_in_multiline Rule for PHP 7.3\nDESCRIPTION: Configuration for trailing_comma_in_multiline rule to properly handle heredoc syntax in multiline structures\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP73Migration.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n['after_heredoc' => true]\n```\n\n----------------------------------------\n\nTITLE: No Line Breaks Configuration\nDESCRIPTION: Demonstrates removing all blank lines when min_line_breaks and max_line_breaks are set to 0\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_lines_before_namespace.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php\n-\n-namespace A{}\n+<?php namespace A{}\n```\n\n----------------------------------------\n\nTITLE: Heredoc Argument Spacing - PHP\nDESCRIPTION: Demonstrates handling of heredoc syntax in method arguments with the after_heredoc configuration option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/method_argument_space.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nsample(\n    <<<EOD\n        foo\n        EOD\n    ,\n    'bar'\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Double-Quoted Multiline String with Variable Interpolation to Heredoc with PHP-CS-Fixer (diff)\nDESCRIPTION: Illustrates how the PHP-CS-Fixer rule transforms a double-quoted multiline string containing variable interpolation into heredoc syntax. No runtime dependencies are required; the fixer applies this conversion during code formatting. The main input is a double-quoted multiline string with embedded variables, which is reformatted as a heredoc block using <<<EOD. This approach makes complex string interpolation clearer and more manageable, while preserving PHP's evaluation of expressions within the string. The output is a diff patch showing the conversion.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/multiline_string_to_heredoc.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = \"line1\n-{$obj->getName()}\";\n+$a = <<<EOD\n+line1\n+{$obj->getName()}\n+EOD;\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_mock Rule for PHPUnit 5.4 in PHP\nDESCRIPTION: This snippet shows the configuration for the php_unit_mock rule within the @PHPUnit54Migration:risky rule set. It sets the target version to 5.4 for PHPUnit mock object compatibility.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit54MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '5.4']\n```\n\n----------------------------------------\n\nTITLE: Converting Heredoc Syntax to Nowdoc in PHP Diff Format\nDESCRIPTION: This snippet illustrates the transformation of PHP code from heredoc to nowdoc syntax using the diff format, as applied by the 'heredoc_to_nowdoc' fixer rule in PHP-CS-Fixer. The original code uses a heredoc with the identifier 'TEST', which is replaced with a nowdoc by changing the delimiter to single quotes. This change prevents variable interpolation inside the string. No external dependencies beyond standard PHP are required. Input is a PHP source file, and the output is a modified PHP file with the stricter nowdoc syntax; key parameter is the heredoc/nowdoc delimiter, and the limitation is that only eligible heredoc instances are converted.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/heredoc_to_nowdoc.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n-<?php $a = <<<\\\"TEST\\\"\\n+<?php $a = <<<'TEST'\\n Foo\\n TEST;\n```\n\n----------------------------------------\n\nTITLE: Alpha Sorting without Null Adjustment\nDESCRIPTION: Demonstrates alphabetical sorting with null_adjustment set to 'none'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types_order.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param null|string|int|\\Foo $bar\n */\n// Changes to:\n/**\n * @param \\Foo|int|null|string $bar\n */\n```\n\n----------------------------------------\n\nTITLE: Maximum Line Breaks Configuration\nDESCRIPTION: Shows behavior when max_line_breaks is set to 2, removing excess blank lines\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_lines_before_namespace.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n declare(strict_types=1);\n\n-\n-\n namespace A{}\n```\n\n----------------------------------------\n\nTITLE: Author-Throws-Custom Grouping Example\nDESCRIPTION: Illustrates grouping of author, throws, and custom annotations together, with parameters and return types in a separate group.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_separation.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n * @author John Doe\n * @custom Test!\n * @throws Exception|RuntimeException foo\n *\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n */\n```\n\n----------------------------------------\n\nTITLE: Custom Groups Configuration Example\nDESCRIPTION: Shows PHPDoc annotation grouping with custom group configuration for deprecated, link, see, since tags and other specific groups.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_separation.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n * @author John Doe\n *\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n *\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n */\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for PHPUnit Static Method Calls\nDESCRIPTION: Demonstrates the default behavior of the rule which converts all PHPUnit assertion calls to use static:: syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_test_case_static_method_calls.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n        static::assertTrue(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no_alias_functions Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration array for the no_alias_functions rule, which prevents using alias functions. This configuration applies the rule to all available sets of alias functions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PhpCsFixerRisky.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n['sets' => ['@all']]\n```\n\n----------------------------------------\n\nTITLE: Method Arguments with Attributes - PHP\nDESCRIPTION: Shows different attribute placement options (ignore, same_line, standalone) for method arguments with PHP 8 attributes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/method_argument_space.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction sample(#[Foo] #[Bar] $a=10,\n    $b=20,$c=30) {}\nsample(1,  2);\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Unit Data Provider Static Rule\nDESCRIPTION: Configuration for the php_unit_data_provider_static rule that forces data providers to be static methods, required for PHPUnit 10.0 compatibility.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit100MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['force' => true]\n```\n\n----------------------------------------\n\nTITLE: Converting Single-Quoted Multiline String to Nowdoc with PHP-CS-Fixer (diff)\nDESCRIPTION: Demonstrates how the PHP-CS-Fixer rule converts a single-quoted multiline string to nowdoc syntax. No runtime dependencies are required; the transformation is handled statically by the fixer tool. The key parameter is a single-quoted string literal spanning multiple lines, which is replaced by a nowdoc block using <<<\\'EOD\\'. This change improves readability and prevents potential parsing issues in multiline strings. Input is a diff patch illustrating the change; output is the updated PHP source code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/multiline_string_to_heredoc.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = 'line1\n-line2';\n+$a = <<<'EOD'\n+line1\n+line2\n+EOD;\n```\n\n----------------------------------------\n\nTITLE: Converting Hash Comments Only\nDESCRIPTION: Example with configuration ['comment_types' => ['hash']] that converts only hash-style comments to // syntax while leaving other comment types unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/single_line_comment_style.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php # comment\n+<?php // comment\n```\n\n----------------------------------------\n\nTITLE: Controlling Comment Association in Statement Indentation with stick_comment_to_next_continuous_control_statement Disabled (PHP)\nDESCRIPTION: This diff shows how comment positioning changes when 'stick_comment_to_next_continuous_control_statement' is set to false in PHP-CS-Fixer. Comments preceding a control statement ('if') are moved flush left, and comments within blocks maintain standard indentation. This behavior clarifies comment scope and avoids associating comments with subsequent control statements. No external dependencies are required beyond PHP-CS-Fixer; the input is a PHP code block, and the output is the reformatted version.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/statement_indentation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-        // foo\n+// foo\n if ($foo) {\n     echo \"foo\";\n-        // this is treated as comment of `if` block, as `stick_comment_to_next_continuous_control_statement` is disabled\n+    // this is treated as comment of `if` block, as `stick_comment_to_next_continuous_control_statement` is disabled\n } else {\n     $aaa = 1;\n }\n\n```\n\n----------------------------------------\n\nTITLE: Skip Unlisted Annotations Example\nDESCRIPTION: Demonstrates behavior when skip_unlisted_annotations is set to true, affecting how unlisted annotations are handled in the grouping.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_separation.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n * @author John Doe\n *\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n */\n```\n\n----------------------------------------\n\nTITLE: Applying Default `heredoc_closing_marker` Rule (PHP)\nDESCRIPTION: This diff shows the default transformation applied by the `heredoc_closing_marker` rule. It changes the heredoc opening and closing markers from `TEST` (with quotes around the opening marker) to the default `EOD` (without quotes).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/heredoc_closing_marker.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n   -<?php $a = <<<\"TEST\"\n   +<?php $a = <<<EOD\n    Foo\n   -TEST;\n   +EOD;\n```\n\n----------------------------------------\n\nTITLE: Alpha Sorting with Null Last\nDESCRIPTION: Shows alphabetical sorting with null_adjustment set to 'always_last' configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types_order.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param null|string|int|\\Foo $bar\n */\n// Changes to:\n/**\n * @param \\Foo|int|string|null $bar\n */\n```\n\n----------------------------------------\n\nTITLE: Case Sensitive Type Ordering Example\nDESCRIPTION: Shows type ordering with case sensitivity enabled, affecting how uppercase and lowercase type names are sorted.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_types.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n interface Foo\n {\n-    public function bar(\\Aaa|\\AA $foo): string|int;\n+    public function bar(\\AA|\\Aaa $foo): int|string;\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace in Blank Lines - Diff Output - diff\nDESCRIPTION: This snippet shows a unified diff that results from applying the 'no_whitespace_in_blank_line' PHP CS Fixer rule. It demonstrates the removal of a line containing only spaces, converting it to a truly blank line in PHP code. The example highlights the original and new state of a file, specifically how a blank line is normalized. No dependencies required; the input is a PHP file and the output is its diff after the fix is applied.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_whitespace_in_blank_line.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-   \\n+\\n $a = 1;\n```\n\n----------------------------------------\n\nTITLE: Yield From Construct Configuration Example\nDESCRIPTION: Demonstrates spacing correction when configured for the 'yield_from' construct.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_after_construct.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nyield  from  baz();\n// Fixes to:\nyield from baz();\n```\n\n----------------------------------------\n\nTITLE: Updating PHPUnit Class References to Namespaced Versions in PHP\nDESCRIPTION: This snippet demonstrates the default configuration of the php_unit_namespaced rule. It shows how non-namespaced PHPUnit class references are updated to their namespaced equivalents.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_namespaced.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-final class MyTest extends \\PHPUnit_Framework_TestCase\n+final class MyTest extends \\PHPUnit\\Framework\\TestCase\n {\n     public function testSomething()\n     {\n-        PHPUnit_Framework_Assert::assertTrue(true);\n+        PHPUnit\\Framework\\Assert::assertTrue(true);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring single_space_around_construct Rule for PER-CS2.0\nDESCRIPTION: Defines specific language constructs that should be followed or preceded by a single space, ensuring consistent spacing around various PHP constructs.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS2.0.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n['constructs_followed_by_a_single_space' => ['abstract', 'as', 'case', 'catch', 'class', 'const', 'const_import', 'do', 'else', 'elseif', 'enum', 'final', 'finally', 'for', 'foreach', 'function', 'function_import', 'if', 'insteadof', 'interface', 'match', 'named_argument', 'namespace', 'new', 'private', 'protected', 'public', 'readonly', 'static', 'switch', 'trait', 'try', 'type_colon', 'use', 'use_lambda', 'while'], 'constructs_preceded_by_a_single_space' => ['as', 'else', 'elseif', 'use_lambda']]\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit Assertions - Custom Configuration\nDESCRIPTION: Shows the rule behavior with custom configuration that only transforms assertSame and assertNotSame methods while leaving assertEquals and assertNotEquals unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_construct.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class FooTest extends \\PHPUnit_Framework_TestCase {\n    public function testSomething() {\n        $this->assertEquals(false, $b);\n        $this->assertSame(true, $a);\n        $this->assertNotEquals(null, $c);\n        $this->assertNotSame(null, $d);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_data_provider_static Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration array for the php_unit_data_provider_static rule, which forces PHPUnit data providers to be declared as static methods.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PhpCsFixerRisky.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n['force' => true]\n```\n\n----------------------------------------\n\nTITLE: Converting File Operation Assertions in PHPUnit Tests\nDESCRIPTION: Shows transformation of file operation assertions using assertTrue() into dedicated PHPUnit methods like assertDirectoryExists(), assertIsWritable(), and assertIsReadable(). Uses configuration targeting PHPUnit 5.6.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_dedicate_assert.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n-        $this->assertTrue(is_dir($a));\n-        $this->assertTrue(is_writable($a));\n-        $this->assertTrue(is_readable($a));\n+        $this->assertDirectoryExists($a);\n+        $this->assertIsWritable($a);\n+        $this->assertIsReadable($a);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (throw statement) in PHP\nDESCRIPTION: This diff shows the `blank_line_before_statement` rule configured with `['statements' => ['throw']]`. A blank line is inserted before the `throw new \\UnexpectedValueException(...)` statement inside the `if` block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    if (null === $a) {\n        $foo->bar();\n   +\n        throw new \\UnexpectedValueException(\"A cannot be null.\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Null from Intersection Type Declaration in PHP\nDESCRIPTION: This snippet shows removing '|null' from an intersection type declaration for a function parameter with a default null value.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/nullable_type_declaration_for_default_null_value.rst#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n-function sample((\\Foo&\\Bar)|null $str = null)\n+function sample(\\Foo&\\Bar $str = null)\n{}\n```\n\n----------------------------------------\n\nTITLE: Applying string_implicit_backslashes (Config: double_quoted='unescape')\nDESCRIPTION: Illustrates the rule when `double_quoted` is set to `unescape`. Since the original double-quoted string `\"Interpret my \\n but not my \\a\"` does not contain unnecessarily escaped backslashes (like `\\\\a`), the 'unescape' setting has no effect on it in this example. Single-quoted strings follow the default 'unescape' behavior, and heredocs follow the default 'escape' behavior (`\\999` becomes `\\\\999`).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/string_implicit_backslashes.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n    $singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n    $doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n    $hereDoc = <<<HEREDOC\n   -Interpret my \\100 but not my \\999\n   +Interpret my \\100 but not my \\\\999\n    HEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Left-aligned PHPDoc Tags\nDESCRIPTION: Shows left alignment configuration with ['align' => 'left'].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_align.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param EngineInterface $templating\n * @param string $format\n * @param int $code an HTTP response status code\n * @param bool $debug\n * @param mixed &$reference a parameter passed by reference\n *\n * @return Foo description foo\n *\n * @throws Foo description foo\n *             description foo\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Custom Param Tag Spacing\nDESCRIPTION: Shows configuration with custom spacing for param tags ['align' => 'left', 'spacing' => ['param' => 2]].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_align.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param  EngineInterface  $templating\n * @param  string  $format\n * @param  int  $code  an HTTP response status code\n * @param  bool  $debug\n * @param  mixed  &$reference  a parameter passed by reference\n *\n * @return Foo description foo\n *\n * @throws Foo description foo\n *             description foo\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Single Line Empty Anonymous Classes Configuration in PHP\nDESCRIPTION: Shows the behavior with allow_single_line_empty_anonymous_classes set to true, allowing empty anonymous classes to be on a single line while forcing multi-line for non-empty ones.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $foo = new class { };\n-$bar = new class { private $baz; };\n+$bar = new class {\n+private $baz;\n+};\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (try statement) in PHP\nDESCRIPTION: This diff demonstrates the `blank_line_before_statement` rule configured with `['statements' => ['try']]`. A blank line is added before the `try` statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    $a = 9000;\n   +\n    try {\n        $foo->bar();\n    } catch (\\Exception $exception) {\n        $a = -1;\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Binary Prefix from Heredoc String (PHP)\nDESCRIPTION: This diff example illustrates the `no_binary_string` rule removing the `b` prefix from a PHP heredoc string literal. The original code `b<<<EOT ... EOT;` is corrected to `<<<EOT ... EOT;`. This fixer enforces the standard string notation for heredoc syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/no_binary_string.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n.. code-block:: diff\n\n   --- Original\n   +++ New\n   -<?php $a = b<<<EOT\n   +<?php $a = <<<EOT\n    foo\n    EOT;\n```\n\n----------------------------------------\n\nTITLE: Updating PHPUnit Class References with Specific Target Version in PHP\nDESCRIPTION: This snippet shows the php_unit_namespaced rule configured with a target version of '4.8'. It updates the TestCase class reference but leaves the Assert class unchanged due to the specified version.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_namespaced.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-final class MyTest extends \\PHPUnit_Framework_TestCase\n+final class MyTest extends \\PHPUnit\\Framework\\TestCase\n {\n     public function testSomething()\n     {\n         PHPUnit_Framework_Assert::assertTrue(true);\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring no_alias_functions Rule for PHP 8.0 Migration\nDESCRIPTION: Configuration for the no_alias_functions rule which removes all alias functions to use the master functions instead. This specific configuration applies all available sets of function replacements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP80MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n['sets' => ['@all']]\n```\n\n----------------------------------------\n\nTITLE: PHPDocs-like Comment Alignment Example\nDESCRIPTION: Shows how the rule handles comment alignment when configured with phpdocs_like option. Applies to any multi-line comment that uses asterisk prefixes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/align_multiline_comment.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    /*\n-            * This is a doc-like multiline comment\n-*/\n+     * This is a doc-like multiline comment\n+     */\n```\n\n----------------------------------------\n\nTITLE: Custom PHPDoc Tag Replacement Configuration\nDESCRIPTION: Shows how to customize tag replacements using configuration, specifically replacing @link with @website while keeping other tags unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_alias_tag.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @property string $foo\n * @property-read string $bar\n *\n- * @link baz\n+ * @website baz\n */\nfinal class Example\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing @expectedException annotations with setExpectedException methods in PHP\nDESCRIPTION: This snippet demonstrates how the rule replaces @expectedException annotations with corresponding setExpectedException method calls in PHPUnit test cases. It includes handling of exception message regular expressions and exception codes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_no_expectation_annotation.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n-     * @expectedException FooException\n-     * @expectedExceptionMessageRegExp /foo.*$/\n-     * @expectedExceptionCode 123\n     */\n    function testAaa()\n    {\n+        $this->setExpectedExceptionRegExp(\\FooException::class, '/foo.*$/', 123);\n+\n        aaa();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing 'static' with 'self' in instanceof check within final class\nDESCRIPTION: This example illustrates the replacement of 'static' with 'self' when performing an instanceof check inside a final class method.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/self_static_accessor.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class Foo\n{\n    public function isBar()\n    {\n-        return $foo instanceof static;\n+        return $foo instanceof self;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting assertInternalType to Dedicated Assertions - Default Configuration\nDESCRIPTION: Demonstrates the default behavior of converting PHPUnit assertInternalType() calls to their dedicated assertion equivalents. Shows transformation of array and boolean type assertions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_dedicate_assert_internal_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testMe()\n    {\n-        $this->assertInternalType(\"array\", $var);\n-        $this->assertInternalType(\"boolean\", $var);\n+        $this->assertIsArray($var);\n+        $this->assertIsBool($var);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selectively Removing Error Suppression in PHP\nDESCRIPTION: This example demonstrates the rule's behavior with 'noise_remaining_usages' set to true and 'noise_remaining_usages_exclude' configured to exclude the 'unlink' function.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/error_suppression.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-@mkdir($dir);\n+mkdir($dir);\n @unlink($path);\n```\n\n----------------------------------------\n\nTITLE: Single Line Class Definition\nDESCRIPTION: Demonstrates single line formatting for class definitions with the single_line configuration option enabled.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_definition.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-class Foo\n-extends Bar\n-implements Baz, BarBaz\n+class Foo extends Bar implements Baz, BarBaz\n {}\n```\n\n----------------------------------------\n\nTITLE: Removing whitespace after heredoc with 'after_heredoc' option enabled\nDESCRIPTION: Example demonstrating how the rule removes whitespace between heredoc end and comma when the 'after_heredoc' configuration option is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/no_whitespace_before_comma_in_array.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n     $x = [<<<EOD\nfoo\n-EOD\n-        , 'bar'\n+EOD, 'bar'\n     ];\n```\n\n----------------------------------------\n\nTITLE: Custom PHPDoc Order with param, return, throws\nDESCRIPTION: Shows PHPDoc annotation ordering with throws moved after return in the sequence.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_order.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n- * @throws Exception|RuntimeException foo\n * @custom Test!\n- * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n+ * @return int  Return the number of changes.\n+ * @throws Exception|RuntimeException foo\n */\n```\n\n----------------------------------------\n\nTITLE: Renaming PHPDoc Tags with Case Sensitive Matching\nDESCRIPTION: Example illustrating PHPDoc tag renaming with case sensitive matching enabled, only replacing exact case matches.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_tag_rename.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @inheritDocs\n * {@inheritdocs}\n */\n\n```\n\n----------------------------------------\n\nTITLE: Align Single Space Operator Configuration\nDESCRIPTION: Demonstrates += operator with align_single_space configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/binary_operator_spaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = $b +=$c;\n-$d = $ee+=$f;\n+$a = $b  += $c;\n+$d = $ee += $f;\n\n-$g = $b     +=$c;\n-$h = $ee+=$f;\n+$g = $b     += $c;\n+$h = $ee    += $f;\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_no_expectation_annotation rule for PHPUnit 3.2 in PHP\nDESCRIPTION: This example shows the rule's behavior when configured for PHPUnit 3.2. It demonstrates how different types of @expectedException annotations are handled, including cases where not all annotation types can be converted to method calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_no_expectation_annotation.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n-     * @expectedException FooException\n-     * @expectedExceptionCode 123\n     */\n    function testBbb()\n    {\n+        $this->setExpectedException(\\FooException::class, null, 123);\n+\n        bbb();\n    }\n\n    /**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp /foo.*$/\n     */\n    function testCcc()\n    {\n        ccc();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getClassyElements Method in TokensAnalyzer Class in PHP\nDESCRIPTION: The getClassyElements method of the TokensAnalyzer class no longer accepts the $returnTraitsImports parameter. It now always returns trait import information.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nTokensAnalyzer::getClassyElements($returnTraitsImports)\n```\n\n----------------------------------------\n\nTITLE: Applying Error Suppression to Deprecation Notices in PHP\nDESCRIPTION: This example demonstrates the default configuration of the 'error_suppression' rule, which adds the '@' operator to deprecation notices.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/error_suppression.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-trigger_error('Warning.', E_USER_DEPRECATED);\n+@trigger_error('Warning.', E_USER_DEPRECATED);\n```\n\n----------------------------------------\n\nTITLE: Left-aligned PHPDoc Tags with Custom Spacing\nDESCRIPTION: Demonstrates left alignment with custom spacing configuration ['align' => 'left', 'spacing' => 2].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_align.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param  EngineInterface  $templating\n * @param  string  $format\n * @param  int  $code  an HTTP response status code\n * @param  bool  $debug\n * @param  mixed  &$reference  a parameter passed by reference\n *\n * @return  Foo  description foo\n *\n * @throws  Foo  description foo\n *               description foo\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Removing @inheritdoc from Class Method\nDESCRIPTION: Example showing how the rule removes an unnecessary @inheritdoc tag from a method in a class that doesn't inherit from any parent class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_useless_inheritdoc.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Sample\n{\n    /**\n     * @inheritdoc\n     */\n    public function Test()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Single Space Cast Configuration in PHP\nDESCRIPTION: This example shows the 'cast_spaces' rule with the 'single' space configuration, which is equivalent to the default behavior.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/cast_notation/cast_spaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$bar = (string) $a;\n$foo = (int) $b;\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Annotation Grouping Example\nDESCRIPTION: Demonstrates the default configuration behavior where annotations are grouped by type with single blank lines between different groups.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_separation.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Hello there!\n *\n * @author John Doe\n *\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n *\n * @param string $foo\n * @param bool   $bar Bar\n *\n * @return int  Return the number of changes.\n */\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example\nDESCRIPTION: Demonstrates the default behavior of the global_namespace_import rule where classes are imported by default.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/global_namespace_import.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Foo;\nuse DateTimeImmutable;\n\n$d = new DateTimeImmutable();\n```\n\n----------------------------------------\n\nTITLE: Formatting Array Offset Braces in PHP Using PHP-CS-Fixer (diff) - Inside Only\nDESCRIPTION: Shows how the 'no_spaces_around_offset' rule behaves with the configuration 'positions' set to ['inside']. Spaces inside offset braces are removed, while spaces outside are preserved. The diff displays the transformation from original to fixed code. Requires only PHP-CS-Fixer with the specified configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/no_spaces_around_offset.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\\n   +++ New\\n    <?php\\n   -$sample = $b [ 'a' ] [ 'b' ];\\n   +$sample = $b ['a'] ['b'];\n```\n\n----------------------------------------\n\nTITLE: Single Item Single Line Formatting\nDESCRIPTION: Shows formatting when single_item_single_line configuration is enabled for classes with single inheritance/implementation.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_definition.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-class Foo\n-extends Bar\n-implements Baz\n+class Foo extends Bar implements Baz\n {}\n```\n\n----------------------------------------\n\nTITLE: No Space Configuration for Pipe Operator\nDESCRIPTION: Examples of pipe operator with no_space configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/binary_operator_spaces.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = \\json_encode($bar, JSON_PRESERVE_ZERO_FRACTION | JSON_PRETTY_PRINT);\n+$foo = \\json_encode($bar, JSON_PRESERVE_ZERO_FRACTION|JSON_PRETTY_PRINT);\n```\n\n----------------------------------------\n\nTITLE: Namespaced Scope Configuration Example\nDESCRIPTION: Demonstrates the rule's behavior when scope is set to 'namespaced', only modifying function calls within namespaced contexts.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace space1 {\n-    echo count([1]);\n+    echo \\count([1]);\n }\n namespace {\n     echo count([1]);\n }\n```\n\n----------------------------------------\n\nTITLE: Formatting Parenthesis Whitespace using Diff (PHP CS Fixer) in diff\nDESCRIPTION: Each code snippet illustrates the transformation performed by the 'spaces_inside_parentheses' rule in PHP CS Fixer using unified diff formatting. The original and fixed PHP code lines show the effects of different whitespace configurations within parentheses. These diffs are intended for documentation purposes, showcasing before-and-after results of code formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/spaces_inside_parentheses.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-if ( $a ) {\\n-    foo( );\\n+if ($a) {\\n+    foo();\\n }\n```\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-function foo( $bar, $baz )\\n+function foo($bar, $baz)\\n {\\n }\n```\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-if ($a) {\\n-    foo( );\\n+if ( $a ) {\\n+    foo();\\n }\n```\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n-function foo($bar, $baz)\\n+function foo( $bar, $baz )\\n {\\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring single_space_around_construct Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the single_space_around_construct rule in the PSR-2 rule set. It defines which constructs should be followed and preceded by a single space.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR2.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n['constructs_followed_by_a_single_space' => ['abstract', 'as', 'case', 'catch', 'class', 'do', 'else', 'elseif', 'final', 'for', 'foreach', 'function', 'if', 'interface', 'namespace', 'private', 'protected', 'public', 'static', 'switch', 'trait', 'try', 'use_lambda', 'while'], 'constructs_preceded_by_a_single_space' => ['as', 'else', 'elseif', 'use_lambda']]\n```\n\n----------------------------------------\n\nTITLE: Multi-line Extends Formatting\nDESCRIPTION: Demonstrates multi-line formatting for interface inheritance with multi_line_extends_each_single_line enabled.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_definition.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n interface Bar extends\n-    Bar, BarBaz, FooBarBaz\n+    Bar,\n+    BarBaz,\n+    FooBarBaz\n {}\n```\n\n----------------------------------------\n\nTITLE: Enabling `explicit_heredoc_style` for `heredoc_closing_marker` (PHP)\nDESCRIPTION: This diff shows the result of configuring the `heredoc_closing_marker` rule with `['explicit_heredoc_style' => true]`. The heredoc opening marker `EOD` is wrapped in double quotes (`\"EOD\"`) as specified by the configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/heredoc_closing_marker.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n   -<?php $a = <<<EOD\n   +<?php $a = <<<\"EOD\"\n    Foo\n    EOD;\n```\n\n----------------------------------------\n\nTITLE: Targeted PHPDoc Boolean Type Conversion\nDESCRIPTION: Shows a specific configuration that only converts 'boolean' to 'bool' while leaving other scalar types unchanged. This example uses the configuration ['types' => ['boolean']] to limit the scope of the fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_scalar.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param integer $a\n * @param boolean $b\n * @param real $c\n */\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Default Configuration for php_unit_data_provider_name Rule in PHP\nDESCRIPTION: This snippet demonstrates the default behavior of the rule, which renames the data provider method to match the test method name with a 'provide' prefix and 'Cases' suffix.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_name.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass FooTest extends TestCase {\n    /**\n     * @dataProvider provideSomethingCases\n     */\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PHPDoc to Comment - Ignored Tags Configuration\nDESCRIPTION: Shows how the rule behaves when certain tags are ignored using the 'ignored_tags' configuration option set to ['todo'].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_to_comment.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$first = true;// needed because by default first docblock is never fixed.\n\n/** This should be a comment */\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n\n/** @todo This should be a PHPDoc as the tag is on \"ignored_tags\" list */\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n```\n\n----------------------------------------\n\nTITLE: Modernizing strpos and stripos calls with extended configuration in PHP\nDESCRIPTION: Example showing how the rule transforms both strpos() and stripos() calls when the 'modernize_stripos' configuration option is set to true. The stripos() transformations include strtolower() calls on both parameters to maintain case-insensitivity.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/modernize_strpos.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-if (strpos($haystack, $needle) === 0) {}\n-if (strpos($haystack, $needle) !== 0) {}\n-if (strpos($haystack, $needle) !== false) {}\n-if (strpos($haystack, $needle) === false) {}\n-if (stripos($haystack, $needle) === 0) {}\n-if (stripos($haystack, $needle) !== 0) {}\n-if (stripos($haystack, $needle) !== false) {}\n-if (stripos($haystack, $needle) === false) {}\n+if (str_starts_with($haystack, $needle)  ) {}\n+if (!str_starts_with($haystack, $needle)  ) {}\n+if (str_contains($haystack, $needle)  ) {}\n+if (!str_contains($haystack, $needle)  ) {}\n+if (str_starts_with(strtolower($haystack), strtolower($needle))  ) {}\n+if (!str_starts_with(strtolower($haystack), strtolower($needle))  ) {}\n+if (str_contains(strtolower($haystack), strtolower($needle))  ) {}\n+if (!str_contains(strtolower($haystack), strtolower($needle))  ) {}\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit PHPDoc to Attributes - Keep Annotations\nDESCRIPTION: Shows the transformation when the 'keep_annotations' configuration is set to true. Adds PHP 8 attributes while preserving the original PHPDoc annotations, useful for maintaining backward compatibility.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @covers \\VendorName\\Foo\n * @internal\n */\n+#[\\PHPUnit\\Framework\\Attributes\\CoversClass(\\VendorName\\Foo::class)]\nfinal class FooTest extends TestCase {\n    /**\n     * @param int $expected\n     * @param int $actual\n     * @dataProvider giveMeSomeData\n     * @requires PHP 8.0\n     */\n+    #[\\PHPUnit\\Framework\\Attributes\\DataProvider('giveMeSomeData')]\n+    #[\\PHPUnit\\Framework\\Attributes\\RequiresPhp('>= 8.0')]\n    public function testSomething($expected, $actual) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing rand with random_int in PHP\nDESCRIPTION: Illustrates the use of the random_api_migration rule configured to replace rand with random_int for improved randomness.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/random_api_migration.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n-<?php $a = rand($b, $c);\n+<?php $a = random_int($b, $c);\n```\n\n----------------------------------------\n\nTITLE: All Multiline Comment Alignment Example\nDESCRIPTION: Demonstrates comment alignment when configured to handle all multiline comments, including those without consistent asterisk prefixes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/align_multiline_comment.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    /*\n-            * This is a doc-like multiline comment\n+     * This is a doc-like multiline comment\n with a line not prefixed with asterisk\n\n-   */\n+     */\n```\n\n----------------------------------------\n\nTITLE: Minimal Space Alignment for === Operator\nDESCRIPTION: Shows === operator with align_single_space_minimal configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/binary_operator_spaces.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$a = $b===$c;\n-$d = $f   ===  $g;\n-$h = $i===  $j;\n+$a = $b === $c;\n+$d = $f === $g;\n+$h = $i === $j;\n```\n\n----------------------------------------\n\nTITLE: Configured Group Import with Classy Type Only\nDESCRIPTION: Shows how the rule behaves when configured to only group 'classy' type imports while leaving function imports unchanged. Uses the configuration ['group_types' => ['classy']].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/group_import.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n-use A\\Foo;\nuse function B\\foo;\n-use A\\Bar;\n+use A\\{Bar, Foo};\nuse function B\\bar;\n```\n\n----------------------------------------\n\nTITLE: Ordering Interfaces (Descending) in PHP\nDESCRIPTION: Shows how interfaces are ordered when the 'direction' configuration is set to 'descend'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_interfaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfinal class ExampleA implements Gamma, Beta, Alpha {}\n\ninterface ExampleB extends Gamma, Beta, Alpha {}\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_expectation Rule for PHPUnit 5.6 Migration\nDESCRIPTION: Configuration for the php_unit_expectation rule targeting PHPUnit 5.6 compatibility. This rule transforms PHPUnit expectations to utilize methods available in PHPUnit 5.6.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit56MigrationRisky.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n['target' => '5.6']\n```\n\n----------------------------------------\n\nTITLE: List Syntax Default Configuration Example\nDESCRIPTION: Demonstrates the default behavior of the list_syntax rule which converts long list() syntax to short [] syntax for array destructuring.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/list_notation/list_syntax.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-list($sample) = $array;\n+[$sample] = $array;\n```\n\n----------------------------------------\n\nTITLE: Configuring ordered_imports rule for PSR-12\nDESCRIPTION: Configuration for the ordered_imports rule that defines the import order (class, function, const) without sorting within groups according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n['imports_order' => ['class', 'function', 'const'], 'sort_algorithm' => 'none']\n```\n\n----------------------------------------\n\nTITLE: Fixing PHPDoc Type Cases - Custom Configuration\nDESCRIPTION: Example demonstrating type case correction with custom configuration ['groups' => ['simple', 'alias']]. Shows transformation of BOOL to bool while leaving MIXED unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param BOOL $foo\n * @param bool $foo\n *\n * @return MIXED\n */\n```\n\n----------------------------------------\n\nTITLE: Removing @inheritdoc from Non-Inheriting Class\nDESCRIPTION: Example showing how the rule removes an unnecessary {@inheritdoc} tag from a class that doesn't inherit from any parent class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_useless_inheritdoc.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** {@inheritdoc} */\nclass Sample\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Case Sensitive PHPDoc Type Ordering\nDESCRIPTION: Shows type ordering with case_sensitive set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_types_order.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param Aaa|AA $bar\n */\n// Changes to:\n/**\n * @param AA|Aaa $bar\n */\n```\n\n----------------------------------------\n\nTITLE: Default Data Provider Method Placement (After Test)\nDESCRIPTION: Example showing the default configuration where data provider methods are placed after the test method that uses them. The rule moves the dataProvider() method after its associated test method.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_method_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class FooTest extends TestCase {\n-    public function dataProvider() {}\n     /**\n      * @dataProvider dataProvider\n      */\n     public function testSomething($expected, $actual) {}\n+    public function dataProvider() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Example of no_trailing_comma_in_singleline Rule with Custom Configuration\nDESCRIPTION: This diff example shows how the rule behaves when configured to only fix array destructuring. Notice that only the trailing comma in the array destructuring is removed, while the trailing comma in the function call remains.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/no_trailing_comma_in_singleline.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n foo($a,);\n-[$foo, $bar,] = $array;\n+[$foo, $bar] = $array;\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Alphabetical Method Sorting in PHP\nDESCRIPTION: Shows case-sensitive alphabetical sorting of public methods with mixed case method names.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_class_elements.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Example\n{\n    public function AA(){}\n    public function AWs(){}\n    public function Aa(){}\n    public function AwS(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Doctrine Annotation Indentation with Mixed Lines in PHP\nDESCRIPTION: Shows the behavior of the 'doctrine_annotation_indentation' rule when 'indent_mixed_lines' is set to true, indenting lines with content before closing parenthesis.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_indentation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- *  @Foo({@Bar,\n- *   @Baz})\n+ * @Foo({@Bar,\n+ *     @Baz})\n  */\n class Bar {}\n```\n\n----------------------------------------\n\nTITLE: List Syntax Long Configuration Example\nDESCRIPTION: Shows how the list_syntax rule behaves when configured to use long syntax, converting short [] syntax to list() syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/list_notation/list_syntax.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-[$sample] = $array;\n+list($sample) = $array;\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Alphabetical Ordering of Interfaces in PHP\nDESCRIPTION: Demonstrates case-sensitive alphabetical ordering of interfaces when 'case_sensitive' is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_interfaces.rst#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfinal class ExampleA implements CaseSensitiveA, CasesensitiveA, Casesensitivea {}\n\ninterface ExampleB extends CaseSensitiveA, CasesensitiveA, Casesensitivea {}\n```\n\n----------------------------------------\n\nTITLE: Configuring single_import_per_statement rule for PSR-12\nDESCRIPTION: Configuration for the single_import_per_statement rule that disallows grouping imports according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n['group_to_single_imports' => false]\n```\n\n----------------------------------------\n\nTITLE: Symfony Rule Set Configuration - Empty Loop Body\nDESCRIPTION: Configuration for empty loop body style, requiring braces for empty loops.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/Symfony.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n['style' => 'braces']\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer in Future Mode\nDESCRIPTION: Command to run PHP CS Fixer in future mode to identify upcoming changes\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPHP_CS_FIXER_FUTURE_MODE=1 php-cs-fixer fix\n```\n\n----------------------------------------\n\nTITLE: Remove InheritDoc Configuration Example\nDESCRIPTION: Demonstrates removal of @inheritDoc tags when remove_inheritdoc is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_superfluous_phpdoc_tags.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /**\n     * @inheritDoc\n     */\n    public function doFoo(Bar $bar, $baz) {}\n```\n\n----------------------------------------\n\nTITLE: Ordering @author Tags in PHPDoc Comments\nDESCRIPTION: Example demonstrating how the rule orders @author tags alphabetically when configured with ['annotations' => ['author']].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_order_by_value.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @author Alice\n * @author Bob\n */\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n```\n\n----------------------------------------\n\nTITLE: Example of PSR Autoloading Rule with Default Configuration\nDESCRIPTION: Shows how the psr_autoloading rule transforms a class with an invalid name to match PSR-4 autoloading conventions using default configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/psr_autoloading.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace PhpCsFixer\\FIXER\\Basic;\n-class InvalidName {}\n+class PsrAutoloadingFixer {}\n```\n\n----------------------------------------\n\nTITLE: Adding Curly Braces to Indirect Variables in PHP\nDESCRIPTION: Example showing how the fixer transforms indirect variable access by adding curly braces for clarity. The transformation affects variable variables, array access with variable indices, and object property access with variable names.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/explicit_indirect_variable.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-echo $$foo;\n-echo $$foo['bar'];\n-echo $foo->$bar['baz'];\n-echo $foo->$callback($baz);\n+echo ${$foo};\n+echo ${$foo}['bar'];\n+echo $foo->{$bar}['baz'];\n+echo $foo->{$callback}($baz);\n```\n\n----------------------------------------\n\nTITLE: Adding Iterable Return Type to PHPUnit Data Provider (PHP)\nDESCRIPTION: This example shows how the rule adds the 'iterable' return type to a PHPUnit data provider method that previously had no specified return type. This change ensures type consistency and improves code clarity.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_return_type.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass FooTest extends TestCase {\n    /**\n     * @dataProvider provideSomethingCases\n     */\n    public function testSomething($expected, $actual) {}\n-    public function provideSomethingCases() {}\n+    public function provideSomethingCases(): iterable {}\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example\nDESCRIPTION: Shows how the rule behaves with default configuration settings. Demonstrates escaping in single-quoted, double-quoted strings and heredocs.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/escape_implicit_backslashes.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n-$doubleQuoted = \"Interpret my \\n but not my \\a\";\n+$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\n-Interpret my \\100 but not my \\999\n+Interpret my \\100 but not my \\\\999\nHEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Configuring single_space_around_construct rule for PSR-12\nDESCRIPTION: Complex configuration for the single_space_around_construct rule that defines which language constructs should be followed or preceded by a single space according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n['constructs_followed_by_a_single_space' => ['abstract', 'as', 'case', 'catch', 'class', 'const_import', 'do', 'else', 'elseif', 'final', 'finally', 'for', 'foreach', 'function', 'function_import', 'if', 'insteadof', 'interface', 'namespace', 'new', 'private', 'protected', 'public', 'static', 'switch', 'trait', 'try', 'use', 'use_lambda', 'while'], 'constructs_preceded_by_a_single_space' => ['as', 'else', 'elseif', 'use_lambda']]\n```\n\n----------------------------------------\n\nTITLE: Ensuring Single Trailing Newline at EOF in PHP Files with PHP CS Fixer (diff)\nDESCRIPTION: Illustrates another example where the single_blank_line_at_eof rule removes extra end-of-file blank lines, ensuring only a single newline remains. The snippet clarifies how PHP CS Fixer adjusts trailing whitespace for consistency, which is required for adherence to various PHP community coding standards. Primarily used when fixing codebases with inconsistent EOF line endings.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/single_blank_line_at_eof.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\\n+++ New\\n <?php\\n $a = 1;\\n-\\n\n```\n\n----------------------------------------\n\nTITLE: All Parameters Configuration\nDESCRIPTION: Demonstrates behavior when only_untyped is set to false, adding @param annotations for all parameters regardless of type hints\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_add_missing_param_annotation.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * @param int $bar\n+ * @param string $foo\n+ * @param mixed $baz\n  *\n  * @return void\n  */\n function f9(string $foo, $bar, $baz) {}\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Sorting of Trait Use Statements in PHP\nDESCRIPTION: This example shows the behavior of the 'ordered_traits' rule when configured with 'case_sensitive' set to true. In this case, the sorting of trait 'use' statements is done in a case-sensitive manner.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_traits.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php class Foo { \nuse Aaa; use AA; }\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php class Foo { \nuse AA; use Aaa; }\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-CS-Fixer for PHPUnit 6.0 Migration\nDESCRIPTION: Configuration for the php_unit_namespaced rule targeting PHPUnit 6.0 compatibility. This rule helps convert PHPUnit class references to use namespaced versions compatible with PHPUnit 6.0.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit60MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['target' => '6.0']\n```\n\n----------------------------------------\n\nTITLE: Configuring no_whitespace_before_comma_in_array Rule for PHP 7.3\nDESCRIPTION: Configuration for no_whitespace_before_comma_in_array rule to handle heredoc syntax in array notation\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP73Migration.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n['after_heredoc' => true]\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (yield statement) in PHP\nDESCRIPTION: This diff illustrates the `blank_line_before_statement` rule configured with `['statements' => ['yield']]`. Blank lines are inserted before the second and third `yield` statements within the generator function `getValues`.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    function getValues() {\n        yield 1;\n   +\n        yield 2;\n   +\n        // comment\n        yield 3;\n    }\n```\n\n----------------------------------------\n\nTITLE: Allow Unused Parameters Configuration Example\nDESCRIPTION: Demonstrates handling of unused parameters in PHPDoc when allow_unused_params is set to true.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_superfluous_phpdoc_tags.rst#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /**\n     * @param Bar $bar\n     * @param mixed $baz\n     * @param string|int|null $qux\n     * @param mixed $foo\n     */\n    public function doFoo(Bar $bar, $baz /*, $qux = null */) {}\n```\n\n----------------------------------------\n\nTITLE: Single Line Anonymous Functions Configuration in PHP\nDESCRIPTION: Demonstrates allow_single_line_anonymous_functions set to true, allowing single-line anonymous functions with simple expressions while reformatting multi-statement functions to multiple lines.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $foo = function () { return true; };\n-$bar = function () { $result = true;\n-    return $result; };\n+$bar = function () {\n+$result = true;\n+    return $result;\n+};\n```\n\n----------------------------------------\n\nTITLE: Converting Comment Styles - Default Configuration\nDESCRIPTION: Example showing default configuration behavior where both asterisk and hash comments are converted to // style. Multi-line comments with actual content spanning multiple lines are preserved.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/single_line_comment_style.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-/* asterisk comment */\n+// asterisk comment\n $a = 1;\n\n-# hash comment\n+// hash comment\n $b = 2;\n\n /*\n  * multi-line\n  * comment\n  */\n $c = 3;\n```\n\n----------------------------------------\n\nTITLE: All Scope Configuration Example\nDESCRIPTION: Shows how the rule affects function calls in all scopes when scope is set to 'all', modifying count() function calls in both namespaced and global contexts.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace space1 {\n-    echo count([1]);\n+    echo \\count([1]);\n }\n namespace {\n-    echo count([1]);\n+    echo \\count([1]);\n }\n```\n\n----------------------------------------\n\nTITLE: Making PHPUnit Data Providers Static in PHP\nDESCRIPTION: This example demonstrates the default behavior of the php_unit_data_provider_static rule, which changes a non-static data provider method to a static one.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_static.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class FooTest extends TestCase {\n     /**\n      * @dataProvider provideSomethingCases\n      */\n     public function testSomething($expected, $actual) {}\n-    public function provideSomethingCases() {}\n+    public static function provideSomethingCases() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Removing Unneeded Curly Braces in PHP Namespaces\nDESCRIPTION: This example shows the behavior of the 'no_unneeded_curly_braces' rule when configured with 'namespaces' => true, which removes unnecessary curly braces from bracketed namespaces.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_unneeded_curly_braces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-namespace Foo {\n+namespace Foo;\n     function Bar(){}\n-}\n+\n```\n\n----------------------------------------\n\nTITLE: Configuring class_definition rule for PSR-12\nDESCRIPTION: Configuration for the class_definition rule that disables inline constructor arguments and requires a space before parenthesis according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n['inline_constructor_arguments' => false, 'space_before_parenthesis' => true]\n```\n\n----------------------------------------\n\nTITLE: Removing Empty PHPDoc Blocks in PHP\nDESCRIPTION: Example showing how the fixer removes an empty PHPDoc comment block from PHP code. The fixer removes the empty /** */ comment while preserving the PHP opening tag.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_empty_phpdoc.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php /**  */\n+<?php \n```\n\n----------------------------------------\n\nTITLE: Enforcing Heredoc/Nowdoc Indentation with 'same_as_start' Configuration in PHP (Diff Format)\nDESCRIPTION: This unified diff demonstrates the effect of the 'heredoc_indentation' rule with the 'indentation' configuration set to 'same_as_start'. The original code shows nowdoc blocks starting at a certain indentation level, and the transformed output aligns the contents and ending delimiter with the starting token's indentation. This snippet helps PHP developers understand the impact of configuration options on heredoc/nowdoc formatting.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/heredoc_indentation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n     $nowdoc = <<<'EOD'\n-abc\n-    def\n-EOD;\n+    abc\n+        def\n+    EOD;\n\n```\n\n----------------------------------------\n\nTITLE: Normalizing PHPDoc Tags - Default Configuration\nDESCRIPTION: Example showing the default behavior of the phpdoc_inline_tag_normalizer rule, which normalizes various inline PHPDoc tags including TUTORIAL, link, and inheritDoc tags.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_inline_tag_normalizer.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @{TUTORIAL}\n * {{ @link }}\n * @inheritDoc\n */\n```\n\n----------------------------------------\n\nTITLE: Running Code Style Fixer\nDESCRIPTION: Command to fix code style issues in the PHP CS Fixer project itself.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncomposer cs:fix\n```\n\n----------------------------------------\n\nTITLE: Configuring function_declaration Rule for PER-CS2.0\nDESCRIPTION: Sets the closure_fn_spacing option to 'none', affecting the spacing in function declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS2.0.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n['closure_fn_spacing' => 'none']\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_dedicate_assert Rule for PHPUnit 5.6 Migration\nDESCRIPTION: Configuration for the php_unit_dedicate_assert rule targeting PHPUnit 5.6 compatibility. This rule transforms PHPUnit assertions into more specific assertion methods that were available in PHPUnit 5.6.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit56MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['target' => '5.6']\n```\n\n----------------------------------------\n\nTITLE: Selectively Making PHPUnit Data Providers Static in PHP\nDESCRIPTION: This example illustrates the behavior of the php_unit_data_provider_static rule with the 'force' option set to false, which only makes data provider methods static if they don't use $this.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_static.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class FooTest extends TestCase {\n     /**\n      * @dataProvider provideSomething1Cases\n      * @dataProvider provideSomething2Cases\n      */\n     public function testSomething($expected, $actual) {}\n     public function provideSomething1Cases() { $this->getData1(); }\n-    public function provideSomething2Cases() { self::getData2(); }\n+    public static function provideSomething2Cases() { self::getData2(); }\n }\n```\n\n----------------------------------------\n\nTITLE: Updating Explicit String Variable Interpolation in PHP Heredoc Syntax - Diff\nDESCRIPTION: Shows the transformation applied by the ‚Äúsimple_to_complex_string_variable‚Äù rule to explicit variable references within heredoc syntax in PHP, changing instances of ${var} to {$var}. This ensures consistent variable interpolation across different PHP string formats. The snippet uses the diff format to illustrate the conversion, targeting projects using PHP-CS-Fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/simple_to_complex_string_variable.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $name = 'World';\n echo <<<TEST\n-Hello ${name}!\n+Hello {$name}!\n TEST;\n```\n\n----------------------------------------\n\nTITLE: get_class conversion with DateTimeImmutable object\nDESCRIPTION: Shows how the rule converts get_class() when used with a concrete object instance stored in a variable.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/get_class_to_class_keyword.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$date = new \\DateTimeImmutable();\n-$class = get_class($date);\n+$class = $date::class;\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Example for fopen_flags Rule\nDESCRIPTION: Shows how the rule behaves with b_mode set to false, where both 't' and 'b' flags are removed from fopen() calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/fopen_flags.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n-$a = fopen($foo, 'rwt');\n+$a = fopen($foo, 'rw');\n```\n\n----------------------------------------\n\nTITLE: Removing Package and Subpackage Annotations\nDESCRIPTION: Example showing removal of multiple annotation types (@package and @subpackage) while preserving other annotations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/general_phpdoc_annotation_remove.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * @author John Doe\n- * @package ACME API\n- * @subpackage Authorization\n  * @version 1.0\n  */\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example - PHP DocBlock Alignment\nDESCRIPTION: Demonstrates the default behavior of the align_multiline_comment rule with phpdocs_only configuration. Shows how DocBlocks are automatically aligned with proper asterisk prefixes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/align_multiline_comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    /**\n-            * This is a DOC Comment\n-with a line not prefixed with asterisk\n-\n-   */\n+     * This is a DOC Comment\n+     * with a line not prefixed with asterisk\n+     *\n+     */\n```\n\n----------------------------------------\n\nTITLE: Configuring native_constant_invocation Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the native_constant_invocation rule which handles how native PHP constants are called. This configuration sets strict mode to false which affects constant resolution behavior.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/SymfonyRisky.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n['strict' => false]\n```\n\n----------------------------------------\n\nTITLE: Removing Unwanted Header Comment in PHP\nDESCRIPTION: Shows how to remove an existing header comment from a PHP file using an empty header configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/header_comment.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n declare(strict_types=1);\n\n-/*\n- * Comment is not wanted here.\n- */\n-\n namespace A\\B;\n\n echo 1;\n```\n\n----------------------------------------\n\nTITLE: Normalizing PHPDoc Tags - Custom Configuration\nDESCRIPTION: Example demonstrating the rule's behavior with custom configuration that only normalizes the TUTORIAL tag while leaving other tags unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_inline_tag_normalizer.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @{TUTORIAL}\n * {{ @link }}\n * @inheritDoc\n */\n```\n\n----------------------------------------\n\nTITLE: Converting Multi-line to Single-line PHPDoc Blocks\nDESCRIPTION: Example with property configuration set to 'single' that converts multi-line PHPDoc blocks to single-line format for class properties.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_line_span.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n class Foo{\n-    /**\n-    * @var bool\n-    */\n+    /** @var bool */\n     public $var;\n }\n```\n\n----------------------------------------\n\nTITLE: Opening Shell in Docker Container\nDESCRIPTION: Command to open a shell in a Docker container with PHP 7.4 for executing multiple commands.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker compose run php-7.4 sh\n/fixer vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_namespaced Rule for PHPUnit 5.7 in PHP\nDESCRIPTION: This snippet shows the configuration for the php_unit_namespaced rule targeting PHPUnit 5.7 compatibility. It sets the 'target' option to '5.7' to ensure namespacing is updated appropriately for this version.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit57MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '5.7']\n```\n\n----------------------------------------\n\nTITLE: Adding PHPDoc Header Comment in PHP\nDESCRIPTION: Shows how to add a PHPDoc-style header comment to a PHP file using custom configuration options.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/header_comment.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n+/**\n+ * Made with love.\n+ */\n+\n declare(strict_types=1);\n\n namespace A\\B;\n\n echo 1;\n```\n\n----------------------------------------\n\nTITLE: Allow Mixed Type Configuration Example\nDESCRIPTION: Shows how the rule behaves when allow_mixed is set to true, preserving @param tags with mixed type hints.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_superfluous_phpdoc_tags.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /**\n     * @param Bar $bar\n     * @param mixed $baz\n     */\n    public function doFoo(Bar $bar, $baz) {}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for Doctrine Annotation Spaces\nDESCRIPTION: Demonstrates the default behavior of the doctrine_annotation_spaces rule, showing how it handles spaces around parentheses, commas, and assignment operators in Doctrine annotations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @Foo ( )\n */\nclass Bar {}\n\n/**\n * @Foo(\"bar\" ,\"baz\")\n */\nclass Bar2 {}\n\n/**\n * @Foo(foo = \"foo\", bar = {\"foo\":\"foo\", \"bar\"=\"bar\"})\n */\nclass Bar3 {}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Dedicated Assert Rule for 3.0 Migration\nDESCRIPTION: Configuration array for the php_unit_dedicate_assert rule targeting PHPUnit 3.0 compatibility. This setting ensures assertions are updated to match PHPUnit 3.0 syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit30MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['target' => '3.0']\n```\n\n----------------------------------------\n\nTITLE: Removing multiple attributes with PHP-CS-Fixer\nDESCRIPTION: This example shows removing multiple attributes (\\A\\B\\Foo and A\\B\\Bar) from a PHP function using the 'general_attribute_remove' rule with configuration ['attributes' => ['\\A\\B\\Foo', 'A\\B\\Bar']].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/attribute_notation/general_attribute_remove.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n use A\\B\\Bar as BarAlias;\n\n-#[\\A\\B\\Foo]\n-#[BarAlias]\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Space Before Parenthesis\nDESCRIPTION: Shows formatting with space_before_parenthesis configuration enabled for anonymous class instantiation.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/class_definition.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = new class(){};\n+$foo = new class () {};\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_namespaced Rule for PHPUnit 4.8 in PHP\nDESCRIPTION: This snippet shows the configuration for the php_unit_namespaced rule, which is part of the @PHPUnit48Migration:risky rule set. It sets the target version to 4.8, ensuring compatibility with PHPUnit 4.8.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit48MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '4.8']\n```\n\n----------------------------------------\n\nTITLE: Configuring no_extra_blank_lines rule for PSR-12\nDESCRIPTION: Configuration for the no_extra_blank_lines rule that specifically targets 'use' statements according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n['tokens' => ['use']]\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_test_case_static_method_calls Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration array for the php_unit_test_case_static_method_calls rule, which controls how PHPUnit assertion methods are called. This configuration forces using 'self' for static method calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PhpCsFixerRisky.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n['call_type' => 'self']\n```\n\n----------------------------------------\n\nTITLE: Default PHPDoc Tag Replacement Example\nDESCRIPTION: Demonstrates the default configuration behavior where property-read is replaced with property and link is replaced with see tags in PHPDoc comments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_alias_tag.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @property string $foo\n- * @property-read string $bar\n+ * @property string $bar\n *\n- * @link baz\n+ * @see baz\n */\nfinal class Example\n{\n}\n```\n\n----------------------------------------\n\nTITLE: PER-CS1.0 Risky Ruleset Reference\nDESCRIPTION: Shows the inclusion of PSR12 risky ruleset as part of PER-CS1.0 risky ruleset specification. This indicates that PER-CS1.0:risky builds upon PSR12's risky rules.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS1.0Risky.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- `@PSR12:risky <./PSR12Risky.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Configuring random_api_migration Rule for PHP 7.0 Compatibility\nDESCRIPTION: Configuration for the random_api_migration rule, which replaces mt_rand and rand functions with random_int for improved randomness in PHP 7.0.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP70MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['replacements' => ['mt_rand' => 'random_int', 'rand' => 'random_int']]\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Blank Lines After Import Statements - PHP\nDESCRIPTION: Example showing how the fixer removes extra blank lines after the use statements block, maintaining only one blank line as required.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/single_line_after_imports.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n namespace Foo;\n\n use Bar;\n use Baz;\n\n-\n final class Example\n {\n }\n```\n\n----------------------------------------\n\nTITLE: Reordering PHPDoc @param Annotations Example\nDESCRIPTION: Demonstrates how the fixer reorders @param annotations in a DocBlock to match the order of parameters in the method signature. The example shows moving the array parameter annotation to maintain consistency with the function declaration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_param_order.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * Annotations in wrong order\n  *\n  * @param int   $a\n+ * @param array $b\n  * @param Foo   $c\n- * @param array $b\n  */\n function m($a, array $b, Foo $c) {}\n```\n\n----------------------------------------\n\nTITLE: Closure Function Spacing in PHP\nDESCRIPTION: Shows spacing adjustment for closure functions with 'closure_function_spacing' set to 'none'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/function_declaration.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$f = function () {};\n```\n\n----------------------------------------\n\nTITLE: Installing PHP CS Fixer via PHIVE\nDESCRIPTION: Command for installing PHP CS Fixer using PHIVE (PHP Installation and Verification Environment).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nphive install php-cs-fixer\n```\n\n----------------------------------------\n\nTITLE: Converting pow() to ** Operator in PHP\nDESCRIPTION: This code snippet demonstrates the conversion of the pow() function to the ** exponentiation operator. The rule replaces pow($a, 1) with $a ** 1, which is equivalent in standard PHP implementations but more concise.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/pow_to_exponentiation.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n <?php\n- pow($a, 1);\n+ $a** 1;\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Example for Doctrine Annotation Spaces\nDESCRIPTION: Shows the rule's behavior with custom configuration where after_array_assignments_equals and before_array_assignments_equals are set to false.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_spaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @Foo(foo = \"foo\", bar = {\"foo\":\"foo\", \"bar\"=\"bar\"})\n */\nclass Bar {}\n```\n\n----------------------------------------\n\nTITLE: Standardizing Spaces Around Ternary Operator in PHP\nDESCRIPTION: This code snippet demonstrates the application of the 'ternary_operator_spaces' rule. It shows how the rule standardizes spaces around the ternary operator, improving code readability and consistency.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/ternary_operator_spaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php $a = $a   ?1 :0;\n+<?php $a = $a ? 1 : 0;\n```\n\n----------------------------------------\n\nTITLE: Integrating PHP CS Fixer in Gitlab-CI\nDESCRIPTION: YAML configuration for integrating PHP CS Fixer as a check step in Gitlab-CI using a Docker image.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nphp-cs-fixer:\n  image: ghcr.io/php-cs-fixer/php-cs-fixer:${FIXER_VERSION:-3-php8.3}\n  script:\n    php-cs-fixer check # --format gitlab ## specify format if not using PHP_CS_FIXER_FUTURE_MODE or v4+\n    # use `check .` if your repository not having paths configured in .php-cs-fixer[.dist].php\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixer Definition and Token Handling - PHP\nDESCRIPTION: Final implementation showing the definition setup and token handling logic for the RemoveCommentsFixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfinal class RemoveCommentsFixer extends AbstractFixer\n{\n    public function getDefinition(): FixerDefinition\n    {\n        return new FixerDefinition(\n            'Removes all comments of the code that are preceded by `;` (semicolon).', \n            [\n                new CodeSample(\n                    \"<?php echo 123; /* Comment */\\n\"\n                ),\n            ]\n        );\n    }\n\n    public function isCandidate(Tokens $tokens): bool\n    {\n        return $tokens->isTokenKindFound(T_COMMENT);\n    }\n\n    protected function applyFix(\\SplFileInfo $file, Tokens $tokens): void\n    {\n        foreach ($tokens as $index => $token) {\n            if (!$token->isGivenKind(T_COMMENT)) {\n                continue;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing @return null Annotation Example\nDESCRIPTION: Demonstrates how the rule removes an unnecessary @return null annotation from a function's PHPDoc comment.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_no_empty_return.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- * @return null\n */\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Converting PHPDoc to Comment - Basic Example\nDESCRIPTION: Demonstrates the default configuration where docblocks on non-structural elements are converted to regular comments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_to_comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$first = true;// needed because by default first docblock is never fixed.\n\n/** This should be a comment */\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing PHP 7.1 Migration Rule Set\nDESCRIPTION: This code snippet demonstrates how to reference the @PHP71Migration rule set in PHP CS Fixer configuration. It includes rules for PHP 7.0 migration and additional rules for list syntax and visibility requirements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP71Migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n``@PHP71Migration``\n```\n\n----------------------------------------\n\nTITLE: Configuring binary_operator_spaces rule for PSR-12\nDESCRIPTION: Configuration for the binary_operator_spaces rule that requires at least a single space around binary operators according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['default' => 'at_least_single_space']\n```\n\n----------------------------------------\n\nTITLE: Applying blank_line_before_statement Rule (switch statement) in PHP\nDESCRIPTION: This diff illustrates the `blank_line_before_statement` rule configured with `['statements' => ['switch']]`. A blank line is added before the `switch ($a)` statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/blank_line_before_statement.rst#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    $a = 9000;\n   +\n    switch ($a) {\n        case 42:\n            break;\n    }\n```\n\n----------------------------------------\n\nTITLE: Only Untyped Parameters Configuration\nDESCRIPTION: Shows behavior when only_untyped is set to true, adding @param annotations only for parameters without type hints\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_add_missing_param_annotation.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n  * @param int $bar\n+ * @param mixed $baz\n  *\n  * @return void\n  */\n function f9(string $foo, $bar, $baz) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring native_constant_invocation Rule for Custom Constants Only in PHP\nDESCRIPTION: This example shows how to apply the rule only to custom constants by setting 'fix_built_in' to false and specifying custom constants in the 'include' option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/constant_notation/native_constant_invocation.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n+<?php var_dump(PHP_VERSION, M_PI, \\MY_CUSTOM_PI);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Cases for RemoveCommentsFixer - PHP\nDESCRIPTION: Implementation of test cases to define the behavior of the RemoveCommentsFixer, including both change and no-change scenarios.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic static function provideFixCases()\n{\n    return [\n        [\n            '<?php echo \"This should be changed\"; ', // This is expected output\n            '<?php echo \"This should be changed\"; /* Comment */', // This is input\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a single attribute with PHP-CS-Fixer\nDESCRIPTION: This example demonstrates removing a single attribute (\\A\\B\\Foo) from a PHP function using the 'general_attribute_remove' rule with configuration ['attributes' => ['\\A\\B\\Foo']].\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/attribute_notation/general_attribute_remove.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-#[\\A\\B\\Foo]\n function foo() {}\n```\n\n----------------------------------------\n\nTITLE: Converting PHPDoc to Comment - Allow Before Return Statement\nDESCRIPTION: Illustrates the behavior when 'allow_before_return_statement' is set to true, allowing PHPDoc comments before return statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_to_comment.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$first = true;// needed because by default first docblock is never fixed.\n\n/** This should be a comment */\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n\nfunction returnClassName() {\n    /** @var class-string */\n    return \\StdClass::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example for Multiline Whitespace Before Semicolons\nDESCRIPTION: Demonstrates the default behavior of the rule which removes multiline whitespace before semicolons in PHP code.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/multiline_whitespace_before_semicolons.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction foo() {\n    return 1 + 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Self-updating PHP CS Fixer Binary\nDESCRIPTION: Command for self-updating a manually installed PHP CS Fixer binary.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nsudo php-cs-fixer self-update\n```\n\n----------------------------------------\n\nTITLE: Configuring method_argument_space Rule for PHP 7.3\nDESCRIPTION: Configuration for method_argument_space rule to handle heredoc syntax in PHP 7.3\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP73Migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['after_heredoc' => true]\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Method Calls with $this Configuration\nDESCRIPTION: Shows how the rule behaves when configured to use $this-> syntax for all PHPUnit assertion calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_test_case_static_method_calls.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        $this->assertSame(1, 2);\n        $this->assertSame(1, 2);\n        $this->assertSame(1, 2);\n        $this->assertTrue(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Line Empty Anonymous Classes Configuration in PHP\nDESCRIPTION: Shows how the allow_single_line_empty_anonymous_classes configuration allows empty anonymous classes to be on a single line, but expands non-empty ones.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/curly_braces_position.rst#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n $foo = new class { };\n-$bar = new class { private $baz; };\n+$bar = new class {\n+private $baz;\n+};\n```\n\n----------------------------------------\n\nTITLE: Backtick to Shell Exec Conversion\nDESCRIPTION: Shows conversion of backtick operators to shell_exec() function calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n`command`; // converted to\nshell_exec('command');\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Blank Lines Before Namespace Declaration in PHP\nDESCRIPTION: This example shows how the 'single_blank_line_before_namespace' rule removes extra blank lines before the namespace declaration, ensuring exactly one blank line is present.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/single_blank_line_before_namespace.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-\n namespace A{}\n```\n\n----------------------------------------\n\nTITLE: Custom PHPDoc Tag Casing Configuration Example\nDESCRIPTION: Shows how the fixer behaves with a custom configuration that targets the @foo tag, demonstrating the ability to specify custom tags for casing standardization.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/phpdoc_tag_casing.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @inheritdoc\n * @Foo\n * @foo\n */\n```\n\n----------------------------------------\n\nTITLE: Power Operator Conversion\nDESCRIPTION: Demonstrates conversion of pow() function to ** operator for exponential operations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npow($x, 2); // converted to\n$x ** 2;\n```\n\n----------------------------------------\n\nTITLE: Removing Spaces Around Declare Statement Parentheses in PHP\nDESCRIPTION: This code snippet demonstrates the effect of applying the 'declare_parentheses' rule. It removes spaces between the 'declare' keyword and its parentheses, as well as inside the parentheses.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/declare_parentheses.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n-<?php declare ( strict_types=1 );\n+<?php declare(strict_types=1);\n```\n\n----------------------------------------\n\nTITLE: Symfony Rule Set Configuration - Class Attributes Separation\nDESCRIPTION: Configuration for separating class elements, specifically requiring one line between methods.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/Symfony.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n['elements' => ['method' => 'one']]\n```\n\n----------------------------------------\n\nTITLE: Symfony Rule Set Configuration - Braces Position\nDESCRIPTION: Configuration for brace positioning that allows single-line anonymous functions and classes.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/Symfony.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n['allow_single_line_anonymous_functions' => true, 'allow_single_line_empty_anonymous_classes' => true]\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer Console Command\nDESCRIPTION: Console command to run PHP CS Fixer on the codebase to ensure compliance with coding standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nphp php-cs-fixer fix\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_dedicate_assert Rule for PHPUnit 3.5 in PHP\nDESCRIPTION: This snippet shows the configuration for the php_unit_dedicate_assert rule, targeting PHPUnit 3.5 compatibility. It's part of the @PHPUnit35Migration:risky rule set in PHP CS Fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit35MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '3.5']\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of php_unit_data_provider_name Rule in PHP\nDESCRIPTION: This snippet demonstrates a more complex scenario with multiple tests and data providers, using a custom 'provides' prefix and 'Data' suffix for the rule configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_name.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass FooTest extends TestCase {\n    /**\n     * @dataProvider dataProviderUsedInMultipleTests\n     */\n    public function testA($expected, $actual) {}\n    /**\n     * @dataProvider dataProviderUsedInMultipleTests\n     */\n    public function testB($expected, $actual) {}\n    /**\n     * @dataProvider providesCData\n     */\n    public function testC($expected, $actual) {}\n    /**\n     * @dataProvider dataProviderUsedAsFirstInTest\n     * @dataProvider dataProviderUsedAsSecondInTest\n     */\n    public function testD($expected, $actual) {}\n\n    public function dataProviderUsedInMultipleTests() {}\n    public function providesCData() {}\n    public function dataProviderUsedAsFirstInTest() {}\n    public function dataProviderUsedAsSecondInTest() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header Comment in PHP\nDESCRIPTION: Demonstrates adding a header comment to a PHP file using the 'header_comment' rule with default configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/header_comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n declare(strict_types=1);\n\n+/*\n+ * Made with love.\n+ */\n+\n namespace A\\B;\n\n echo 1;\n```\n\n----------------------------------------\n\nTITLE: Applying Default Doctrine Annotation Indentation in PHP\nDESCRIPTION: Demonstrates the default behavior of the 'doctrine_annotation_indentation' rule, which indents Doctrine annotations with four spaces.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_indentation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- *  @Foo(\n- *   foo=\"foo\"\n- *  )\n+ * @Foo(\n+ *     foo=\"foo\"\n+ * )\n  */\n class Bar {}\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveCommentsFixerTest Class - PHP\nDESCRIPTION: Test class structure for testing the RemoveCommentsFixer implementation. Includes setup for test cases and data providers.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/cookbook_fixers.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace PhpCsFixer\\Tests\\Fixer\\Comment;\n\nuse PhpCsFixer\\Tests\\Test\\AbstractFixerTestCase;\n\n/**\n * @author Your name <your@email.com>\n *\n * @internal\n *\n * @covers \\PhpCsFixer\\Fixer\\Comment\\RemoveCommentsFixer\n */\nfinal class RemoveCommentsFixerTest extends AbstractFixerTestCase\n{\n    /**\n     * @dataProvider provideFixCases\n     */\n    public function testFix(string $expected, ?string $input = null): void\n    {\n        $this->doTest($expected, $input);\n    }\n\n    public static function provideFixCases()\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Hidden Parameters Configuration Example\nDESCRIPTION: Shows behavior when allow_hidden_params is true, handling documentation for parameters that are commented out in the method signature.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/phpdoc/no_superfluous_phpdoc_tags.rst#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {\n    /**\n     * @param Bar $bar\n     * @param mixed $baz\n     * @param string|int|null $qux\n     * @param mixed $foo\n     */\n    public function doFoo(Bar $bar, $baz /*, $qux = null */) {}\n```\n\n----------------------------------------\n\nTITLE: Applying 'Next Line' Configuration for Control Structure Continuation in PHP\nDESCRIPTION: This example shows the rule's behavior when configured with 'position' => 'next_line', placing the continuation keyword on the next line after the closing brace of the previous block.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/control_structure_continuation_position.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif ($baz == true) {\n    echo \"foo\";\n}\nelse {\n    echo \"bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_mock Rule for PHPUnit 5.5 in PHP\nDESCRIPTION: This snippet shows the configuration for the php_unit_mock rule, targeting PHPUnit version 5.5. It's part of the @PHPUnit55Migration:risky rule set in PHP CS Fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit55MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '5.5']\n```\n\n----------------------------------------\n\nTITLE: Configuring native_constant_invocation Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration array for the native_constant_invocation rule, which specifies how PHP native constants should be referenced. The configuration disables fixing built-in constants except for specific ones like DIRECTORY_SEPARATOR, and sets the scope to namespaced with strict mode enabled.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PhpCsFixerRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['fix_built_in' => false, 'include' => ['DIRECTORY_SEPARATOR', 'PHP_INT_SIZE', 'PHP_SAPI', 'PHP_VERSION_ID'], 'scope' => 'namespaced', 'strict' => true]\n```\n\n----------------------------------------\n\nTITLE: Removing getSetDefinitionNames Method from RuleSet Class in PHP\nDESCRIPTION: The getSetDefinitionNames method of the RuleSet class has been removed. Users should now use RuleSets::getSetDefinitionNames() instead to retrieve set definition names.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nRuleSet::getSetDefinitionNames()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nRuleSets::getSetDefinitionNames()\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Generation with Composer\nDESCRIPTION: Command to update documentation for PHP CS Fixer using Composer. Requires the highest supported PHP version.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncomposer docs\n```\n\n----------------------------------------\n\nTITLE: Applying string_implicit_backslashes (Config: heredoc='unescape')\nDESCRIPTION: Demonstrates the rule with `heredoc` set to `unescape`. Similar to the previous example, the original heredoc `\"Interpret my \\100 but not my \\999\"` contains no unnecessarily escaped backslashes, so the 'unescape' setting doesn't alter it. Single-quoted strings follow the default 'unescape' behavior, and double-quoted strings follow the default 'escape' behavior (`\\a` becomes `\\\\a`).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/string_implicit_backslashes.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n\n    $singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n   -$doubleQuoted = \"Interpret my \\n but not my \\a\";\n   +$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n    $hereDoc = <<<HEREDOC\n    Interpret my \\100 but not my \\999\n    HEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Adding Braces to Doctrine Annotations in PHP\nDESCRIPTION: This example shows the behavior of the 'doctrine_annotation_braces' rule when configured to add braces to Doctrine annotations without arguments.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/doctrine_annotation/doctrine_annotation_braces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n /**\n- * @Foo\n+ * @Foo()\n  */\n class Bar {}\n```\n\n----------------------------------------\n\nTITLE: Converting Type Assertions in PHPUnit Tests\nDESCRIPTION: Demonstrates converting generic assertTrue() calls with type checks into dedicated PHPUnit assertion methods like assertInternalType() and assertNan(). Uses the default configuration targeting the newest PHPUnit version.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_dedicate_assert.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n-        $this->assertTrue(is_float( $a), \"my message\");\n-        $this->assertTrue(is_nan($a));\n+        $this->assertInternalType('float', $a, \"my message\");\n+        $this->assertNan($a);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring whitespace settings in PHP CS Fixer\nDESCRIPTION: Configuration that customizes whitespace handling, such as indentation and line endings. This example sets tabs for indentation and Windows-style CRLF line endings.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/config.rst#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$finder = (new PhpCsFixer\\Finder())\n    ->in(__DIR__)\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@Symfony' => true,\n    ])\n    ->setFinder($finder)\n    ->setIndent(\"\\t\")\n    ->setLineEnding(\"\\r\\n\")\n;\n```\n\n----------------------------------------\n\nTITLE: Include All Functions Example\nDESCRIPTION: Demonstrates including all global functions for modification using the @all directive.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-myGlobalFunction();\n-count();\n+\\myGlobalFunction();\n+\\count();\n```\n\n----------------------------------------\n\nTITLE: Converting PHP Class Keyword to FQCN String\nDESCRIPTION: Demonstrates the conversion of a ::class keyword expression to its equivalent fully qualified class name string. In this example, Baz::class is converted to 'Foo\\Bar\\Baz' based on the use statement.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/class_keyword_remove.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n use Foo\\Bar\\Baz;\n\n-$className = Baz::class;\n+$className = 'Foo\\Bar\\Baz';\n```\n\n----------------------------------------\n\nTITLE: Referencing PHPUnit 9.1 Migration Risky Rule Set in PHP CS Fixer\nDESCRIPTION: This code snippet demonstrates how to reference the @PHPUnit91Migration:risky rule set in a PHP CS Fixer configuration. It includes two specific rules: the PHPUnit 8.4 Migration risky rule set and the php_unit_assert_new_names rule.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit91MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n- `@PHPUnit84Migration:risky <./PHPUnit84MigrationRisky.rst>`_\n- `php_unit_assert_new_names <./../rules/php_unit/php_unit_assert_new_names.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Removing ConfigurationDefinitionFixerInterface in PHP\nDESCRIPTION: The ConfigurationDefinitionFixerInterface has been removed and its functionality is now part of the updated ConfigurableFixerInterface. Implementations should be updated to use the new interface.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nConfigurationDefinitionFixerInterface\n```\n\n----------------------------------------\n\nTITLE: Updating PHPUnit expectation methods for version 5.2 in PHP\nDESCRIPTION: This example shows the rule's behavior when configured for PHPUnit 5.2. It replaces setExpectedException with expectException, expectExceptionMessage, and expectExceptionCode, but leaves setExpectedExceptionRegExp unchanged.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_expectation.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n final class MyTest extends \\PHPUnit_Framework_TestCase\n {\n     public function testFoo()\n     {\n-        $this->setExpectedException(\"RuntimeException\", \"Msg\", 123);\n+        $this->expectException(\"RuntimeException\");\n+        $this->expectExceptionMessage(\"Msg\");\n+        $this->expectExceptionCode(123);\n         foo();\n     }\n\n     public function testBar()\n     {\n         $this->setExpectedExceptionRegExp(\"RuntimeException\", \"/Msg.*/\", 123);\n         bar();\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: No Import Configuration Example\nDESCRIPTION: Demonstrates fully qualified names when all import options are set to false.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/import/global_namespace_import.rst#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Foo;\n\nuse DateTimeImmutable;\nuse function count;\nuse const M_PI;\n\nif (\\count($x)) {\n    /** @var \\DateTimeImmutable $d */\n    $d = new \\DateTimeImmutable();\n    $p = \\M_PI;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring fopen_flags Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the fopen_flags rule which modifies file opening modes. The configuration disables b_mode parameter which affects how binary file operations are handled.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/SymfonyRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['b_mode' => false]\n```\n\n----------------------------------------\n\nTITLE: Fixing For Loop Semicolons - Custom Configuration\nDESCRIPTION: Shows how the rule behaves when remove_in_empty_for_expressions is set to true, removing spaces after semicolons in empty for loop expressions.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/space_after_semicolon.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-for ($i = 0; ; ++$i) {\n+for ($i = 0;; ++$i) {\n }\n```\n\n----------------------------------------\n\nTITLE: Yield From Spacing Fix\nDESCRIPTION: Shows correction of spacing around yield from construct with custom configuration\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/single_space_around_construct.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-function foo() { yield  from  baz(); }\n+function foo() { yield from baz(); }\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Generation with Docker\nDESCRIPTION: Alternative command to update documentation using Docker when the highest supported PHP version is not available locally.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose run php-8.2 php dev-tools/doc.php\n```\n\n----------------------------------------\n\nTITLE: Converting PHPUnit Mock Return Methods to Short Syntax\nDESCRIPTION: Demonstrates the conversion of PHPUnit mock methods from the longer will($this->return*()) syntax to their shorter willReturn*() equivalents. This includes transformations for returnSelf, returnValue, returnArgument, returnCallback, and returnValueMap methods.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_mock_short_will_return.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $someMock = $this->createMock(Some::class);\n        $someMock->method(\"some\")->will($this->returnSelf());\n        $someMock->method(\"some\")->will($this->returnValue(\"example\"));\n        $someMock->method(\"some\")->will($this->returnArgument(2));\n        $someMock->method(\"some\")->will($this->returnCallback(\"str_rot13\"));\n        $someMock->method(\"some\")->will($this->returnValueMap([\"a\",\"b\",\"c\"]));\n    }\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $someMock = $this->createMock(Some::class);\n        $someMock->method(\"some\")->willReturnSelf();\n        $someMock->method(\"some\")->willReturn(\"example\");\n        $someMock->method(\"some\")->willReturnArgument(2);\n        $someMock->method(\"some\")->willReturnCallback(\"str_rot13\");\n        $someMock->method(\"some\")->willReturnMap([\"a\",\"b\",\"c\"]);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Validated Header Comment in PHP\nDESCRIPTION: Demonstrates adding a header comment with a custom validator to ensure specific content is included.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/comment/header_comment.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n declare(strict_types=1);\n+\n /*\n  * Made with love.\n  *\n  * Extra content.\n  */\n+\n namespace A\\B;\n\n echo 1;\n```\n\n----------------------------------------\n\nTITLE: Single Space Configuration Example for declare_equal_normalize\nDESCRIPTION: Shows how the rule behaves when configured with space='single', adding single spaces around the equal sign in declare statements.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/declare_equal_normalize.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(ticks = 1);\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer with Docker\nDESCRIPTION: Command to run PHP CS Fixer using a pre-built Docker image. It mounts the current directory and fixes the 'src' directory.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker run -it --rm -v $(pwd):/code ghcr.io/php-cs-fixer/php-cs-fixer:${FIXER_VERSION:-3-php8.3} fix src\n```\n\n----------------------------------------\n\nTITLE: Using 'self' instead of 'static' for object instantiation in final class\nDESCRIPTION: This snippet shows how to replace 'new static()' with 'new self()' when instantiating an object within a final class method.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/self_static_accessor.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfinal class Foo\n{\n    public function bar()\n    {\n-        return new static();\n+        return new self();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: No Sort Algorithm with Null Adjustment Example\nDESCRIPTION: Shows type ordering when sort_algorithm is set to none but null_adjustment is still active.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/class_notation/ordered_types.rst#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n interface Bar\n {\n-    public function bar(null|string|int $foo): string|int;\n+    public function bar(string|int|null $foo): string|int;\n }\n```\n\n----------------------------------------\n\nTITLE: Using Xdebug with Docker\nDESCRIPTION: Command to run PHPUnit with Xdebug enabled in a PHP 8.2 Docker container for debugging.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker compose run php-8.2 xdebug vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Applying no_break_comment Rule in PHP (Custom Configuration)\nDESCRIPTION: This example shows the behavior of the 'no_break_comment' rule with a custom configuration. The 'comment_text' option is set to 'some comment', which changes the text used for the fall-through comment.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_break_comment.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nswitch ($foo) {\n    case 1:\n        foo();\n        // some comment\n    case 2:\n        foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Example - Adding Empty Parentheses\nDESCRIPTION: Shows the behavior when configured to add empty parentheses to attributes. With use_parentheses = true, the fixer adds empty parentheses to all attribute declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/attribute_notation/attribute_empty_parentheses.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n-#[Foo]\n+#[Foo()]\nclass Sample1 {}\n\n-#[Bar, Baz]\n+#[Bar(), Baz()]\nclass Sample2 {}\n```\n\n----------------------------------------\n\nTITLE: Applying Snake Case to PHPUnit Test Methods with Attributes in PHP\nDESCRIPTION: This example shows the 'php_unit_method_casing' rule with the 'snake_case' configuration when PHPUnit test methods are annotated with attributes, converting camelCase to snake_case.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_method_casing.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse \\PHPUnit\\Framework\\Attributes\\Test;\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    #[PHPUnit\\Framework\\Attributes\\Test]\n-    public function testMyCode() {}\n+    public function test_my_code() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing RuleSetInterface in PHP\nDESCRIPTION: The PhpCsFixer\\RuleSetInterface has been replaced by \\PhpCsFixer\\RuleSet\\RuleSetInterface. Any code using the old interface should be updated to use the new one.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nPhpCsFixer\\RuleSetInterface\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\PhpCsFixer\\RuleSet\\RuleSetInterface\n```\n\n----------------------------------------\n\nTITLE: Removing Create Method from Config Class in PHP\nDESCRIPTION: The create method of the Config class has been removed. Users should now use the constructor instead. Refer to the configuration documentation for more details on how to create a Config object.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nConfig::create()\n```\n\n----------------------------------------\n\nTITLE: Referencing @PER-CS2.0:risky Rule Set in PHP CS Fixer\nDESCRIPTION: This code snippet shows how to reference the @PER-CS2.0:risky rule set, which is the specific version of the PER-CS risky rules currently aliased by @PER-CS:risky.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CSRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n- `@PER-CS2.0:risky <./PER-CS2.0Risky.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Single Quoted Configuration Example\nDESCRIPTION: Demonstrates rule behavior when single_quoted option is set to true, affecting how backslashes are escaped in single-quoted strings.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/escape_implicit_backslashes.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n+$singleQuoted = 'String with \\\\\" and My\\\\Prefix\\\\';\n\n-$doubleQuoted = \"Interpret my \\n but not my \\a\";\n+$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\n-Interpret my \\100 but not my \\999\n+Interpret my \\100 but not my \\\\999\nHEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Medium Group Test Class Annotation\nDESCRIPTION: Example showing configuration with group set to 'medium', adding @medium annotation to a PHPUnit test class.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_size_class.rst#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @medium\n */\nclass MyTest extends TestCase {}\n```\n\n----------------------------------------\n\nTITLE: Upgrading PHP CS Fixer via Homebrew\nDESCRIPTION: Command for upgrading an existing global installation of PHP CS Fixer using Homebrew.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/installation.rst#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nbrew upgrade php-cs-fixer\n```\n\n----------------------------------------\n\nTITLE: Removing Create Method from RuleSet Class in PHP\nDESCRIPTION: The create method of the RuleSet class has been removed. Users should now use the constructor instead. Refer to the custom rules documentation for more information on how to create a RuleSet object.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nRuleSet::create()\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_no_expectation_annotation rule for PHPUnit 3.2 compatibility\nDESCRIPTION: Configuration for the php_unit_no_expectation_annotation rule targeting PHPUnit 3.2. This configuration removes expectation annotations and replaces them with equivalent method calls for compatibility with PHPUnit 3.2.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit32MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['target' => '3.2']\n```\n\n----------------------------------------\n\nTITLE: Double Quoted Disabled Example\nDESCRIPTION: Shows rule behavior when double_quoted option is set to false, leaving double-quoted strings unmodified.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/escape_implicit_backslashes.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\n-Interpret my \\100 but not my \\999\n+Interpret my \\100 but not my \\\\999\nHEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit with Specific PHP Version in Docker\nDESCRIPTION: Command to run PHPUnit tests using PHP 8.2 in a Docker container.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker compose run php-8.2 vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Updating FixerInterface in PHP\nDESCRIPTION: The FixerInterface has been updated to include methods previously defined in DefinedFixerInterface, which has been removed. Implementations of FixerInterface may need to be updated with these additional methods.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nFixerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_dedicate_assert Rule for PHPUnit 5.0 Migration\nDESCRIPTION: Configuration setting for the php_unit_dedicate_assert rule targeting PHPUnit 5.0 compatibility. This rule transforms generic PHPUnit assertions to more specific ones.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit50MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n['target' => '5.0']\n```\n\n----------------------------------------\n\nTITLE: Heredoc Disabled Example\nDESCRIPTION: Demonstrates rule behavior when heredoc_syntax option is set to false, leaving heredoc strings unmodified.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/escape_implicit_backslashes.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n-$doubleQuoted = \"Interpret my \\n but not my \\a\";\n+$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n```\n\n----------------------------------------\n\nTITLE: Forcing Static Data Providers in PHPUnit Tests (PHP)\nDESCRIPTION: This example shows the behavior of the php_unit_data_provider_static rule with the 'force' option set to true, which makes all data provider methods static, even those with dynamic calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/php_unit/php_unit_data_provider_static.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n class FooTest extends TestCase {\n     /**\n      * @dataProvider provideSomethingCases1\n      * @dataProvider provideSomethingCases2\n      */\n     public function testSomething($expected, $actual) {}\n-    public function provideSomethingCases1() { $this->getData1(); }\n-    public function provideSomethingCases2() { self::getData2(); }\n+    public static function provideSomethingCases1() { $this->getData1(); }\n+    public static function provideSomethingCases2() { self::getData2(); }\n }\n```\n\n----------------------------------------\n\nTITLE: Replacing PHP language construct alias with master construct\nDESCRIPTION: This snippet demonstrates the application of the 'no_alias_language_construct_call' rule. It replaces the 'die' language construct alias with its master construct 'exit'.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/alias/no_alias_language_construct_call.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-die;\n+exit;\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_expectation Rule for PHPUnit 8.4 in PHP\nDESCRIPTION: This snippet shows the configuration for the php_unit_expectation rule, targeting PHPUnit 8.4 compatibility. It's part of the @PHPUnit84Migration:risky rule set in PHP CS Fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit84MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '8.4']\n```\n\n----------------------------------------\n\nTITLE: Configuring concat_space Rule for PER-CS2.0\nDESCRIPTION: Sets the spacing option for string concatenation to 'one', ensuring one space around the concatenation operator.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS2.0.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['spacing' => 'one']\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_dedicate_assert_internal_type Rule for PHPUnit 7.5\nDESCRIPTION: This snippet shows the configuration for the php_unit_dedicate_assert_internal_type rule, setting the target version to 7.5 for PHPUnit compatibility.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit75MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n['target' => '7.5']\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Comma in Function Arguments (PHP)\nDESCRIPTION: Illustrates the rule's effect when configured to add trailing commas to function arguments in multiline calls.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/trailing_comma_in_multiline.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n foo(\n     1,\n-    2\n+    2,\n );\n```\n\n----------------------------------------\n\nTITLE: Configuring new_with_parentheses Rule for PER-CS2.0\nDESCRIPTION: Disables the use of parentheses for anonymous class instantiation.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS2.0.rst#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n['anonymous_class' => false]\n```\n\n----------------------------------------\n\nTITLE: Configuring php_unit_expectation Rule for PHPUnit 5.2 Compatibility\nDESCRIPTION: Configuration for the php_unit_expectation rule targeting PHPUnit 5.2 compatibility. This setting helps migrate test expectations to be compatible with PHPUnit 5.2 syntax.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit52MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n['target' => '5.2']\n```\n\n----------------------------------------\n\nTITLE: Configuring trailing_comma_in_multiline Rule for PER-CS2.0\nDESCRIPTION: Enables trailing commas in multiline structures, including after heredocs, and specifies the elements where this should be applied.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS2.0.rst#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n['after_heredoc' => true, 'elements' => ['arguments', 'array_destructuring', 'arrays', 'match', 'parameters']]\n```\n\n----------------------------------------\n\nTITLE: Referencing PER-CS1.0:risky Rule Set in reStructuredText\nDESCRIPTION: This snippet creates a link to the PER-CS1.0:risky rule set documentation using reStructuredText syntax. It's part of the Rules section, indicating that the PER-CS2.0:risky set includes all rules from PER-CS1.0:risky.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PER-CS2.0Risky.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n- `@PER-CS1.0:risky <./PER-CS1.0Risky.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer in Verbose Mode\nDESCRIPTION: Command to run PHP CS Fixer in verbose mode to identify deprecations\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/UPGRADE-v3.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp-cs-fixer fix -v\n```\n\n----------------------------------------\n\nTITLE: PHP 7.4 Migration Ruleset Reference Links\nDESCRIPTION: List of rule references and links for PHP 7.4 migration ruleset including base PHP 7.3 migration rules, null coalescing operator conversion, array notation normalization, and scalar casting rules.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP74Migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n- `@PHP73Migration <./PHP73Migration.rst>`_\n- `assign_null_coalescing_to_coalesce_equal <./../rules/operator/assign_null_coalescing_to_coalesce_equal.rst>`_\n- `normalize_index_brace <./../rules/array_notation/normalize_index_brace.rst>`_\n- `short_scalar_cast <./../rules/cast_notation/short_scalar_cast.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Included Rules for PHP 7.1 Migration\nDESCRIPTION: This code snippet lists the rules included in the @PHP71Migration rule set. It references the PHP 7.0 migration rules and adds specific rules for list syntax and visibility requirements in PHP 7.1.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHP71Migration.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n- `@PHP70Migration <./PHP70Migration.rst>`_\n- `list_syntax <./../rules/list_notation/list_syntax.rst>`_\n- `visibility_required <./../rules/class_notation/visibility_required.rst>`_\n```\n\n----------------------------------------\n\nTITLE: Include Specific Function Example\nDESCRIPTION: Shows how to include specific global functions for modification using the include configuration option.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-myGlobalFunction();\n+\\myGlobalFunction();\n count();\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit No Expectation Annotation Rule\nDESCRIPTION: Configuration setting for php_unit_no_expectation_annotation rule targeting PHPUnit 4.3 compatibility. Sets the target version to 4.3.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PHPUnit43MigrationRisky.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['target' => '4.3']\n```\n\n----------------------------------------\n\nTITLE: Removing Trailing Comma in Singleline Function Call (PHP)\nDESCRIPTION: This example demonstrates the application of the 'no_trailing_comma_in_singleline_function_call' rule. It shows how a trailing comma after the last argument in a single-line function call is removed.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/no_trailing_comma_in_singleline_function_call.rst#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n--- Original\n+++ New\n <?php\n-foo($a,);\n+foo($a);\n```\n\n----------------------------------------\n\nTITLE: Chained Calls Configuration Example for Multiline Whitespace Before Semicolons\nDESCRIPTION: Shows how the rule behaves with the 'new_line_for_chained_calls' strategy, which moves semicolons to new lines in method chains.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/semicolon/multiline_whitespace_before_semicolons.rst#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$object->method1()\n    ->method2()\n    ->method(3)\n;\n```\n\n----------------------------------------\n\nTITLE: Fixing Non-Monolithic Code with Inline HTML in PHP\nDESCRIPTION: This example shows the rule's behavior when configured with 'fix_non_monolithic_code' set to true, which allows it to fix code with inline HTML.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/control_structure/no_alternative_syntax.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php if ($condition): ?>\n+<?php if ($condition) { ?>\n Lorem ipsum.\n-<?php endif; ?>\n+<?php } ?>\n```\n\n----------------------------------------\n\nTITLE: Converting Short Array Syntax to Long Array Syntax in PHP (Custom Configuration)\nDESCRIPTION: This example shows how to configure the rule to use the long array syntax, converting modern short array syntax back to the traditional array() notation with the 'syntax' => 'long' configuration.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/array_notation/array_syntax.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-[1,2];\n+array(1,2);\n```\n\n----------------------------------------\n\nTITLE: Applying 'single' Spacing to Union Types in Catch Blocks (PHP)\nDESCRIPTION: Illustrates the effect of configuring `types_spaces` with `['space' => 'single']`. It ensures a single space exists around the pipe `|` operator in a `catch` block handling multiple exception types (`ErrorA | ErrorB`).\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/whitespace/types_spaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   --- Original\n   +++ New\n    <?php\n    try\n    {\n        new Foo();\n   -} catch (ErrorA|ErrorB $e) {\n   +} catch (ErrorA | ErrorB $e) {\n    echo'error';}\n```\n\n----------------------------------------\n\nTITLE: Removing Binary Prefix from Single-Quoted String (PHP)\nDESCRIPTION: This diff example demonstrates the `no_binary_string` rule removing the `b` prefix from a single-quoted PHP string literal. The original code `b'foo'` is transformed into `'foo'`. This ensures compatibility and consistency by avoiding the binary string notation.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/string_notation/no_binary_string.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n.. code-block:: diff\n\n   --- Original\n   +++ New\n   -<?php $a = b'foo';\n   +<?php $a = 'foo';\n```\n\n----------------------------------------\n\nTITLE: Adding Parentheses to Anonymous Class Instantiation in PHP\nDESCRIPTION: This example shows the rule adding parentheses to an anonymous class instantiation with a method call when configured to do so.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/operator/new_expression_parentheses.rst#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n-new class {}->bar();\n+(new class {})->bar();\n```\n\n----------------------------------------\n\nTITLE: Converting FQCN strings to ::class keywords in PHP\nDESCRIPTION: This example demonstrates how the class_keyword rule transforms fully qualified class name strings into ::class syntax. It converts both single-quoted and double-quoted strings to the ::class format.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/language_construct/class_keyword.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n-$foo = 'PhpCsFixer\\Tokenizer\\Tokens';\n-$bar = \"\\PhpCsFixer\\Tokenizer\\Tokens\";\n+$foo = \\PhpCsFixer\\Tokenizer\\Tokens::class;\n+$bar = \\PhpCsFixer\\Tokenizer\\Tokens::class;\n```\n\n----------------------------------------\n\nTITLE: Configuring single_class_element_per_statement Rule in PHP-CS-Fixer\nDESCRIPTION: Configuration for the single_class_element_per_statement rule in the PSR-2 rule set. It specifies which elements should be on separate lines.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR2.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n['elements' => ['property']]\n```\n\n----------------------------------------\n\nTITLE: Configuring unary_operator_spaces rule for PSR-12\nDESCRIPTION: Configuration for the unary_operator_spaces rule that only applies to increment and decrement operators according to PSR-12 standards.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/ruleSets/PSR12.rst#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n['only_dec_inc' => true]\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example - PHP Function Invocation\nDESCRIPTION: Shows how the rule adds leading backslashes to function calls with default configuration settings. Focuses on array_key_exists() function call.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/native_function_invocation.rst#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n function baz($options)\n {\n-    if (!array_key_exists(\"foo\", $options)) {\n+    if (!\\array_key_exists(\"foo\", $options)) {\n         throw new \\InvalidArgumentException();\n     }\n\n     return json_encode($options);\n }\n```\n\n----------------------------------------\n\nTITLE: Applying PhpdocToParamType Rule with Union Types Disabled in PHP\nDESCRIPTION: This example illustrates the behavior of the PhpdocToParamType rule when union_types configuration is set to false. It only applies the rule to non-union types.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/function_notation/phpdoc_to_param_type.rst#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n\n /** @param Foo $foo */\n-function foo($foo) {}\n+function foo(Foo $foo) {}\n /** @param int|string $foo */\n function bar($foo) {}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Example - Removing Empty Parentheses\nDESCRIPTION: Demonstrates the default behavior where empty parentheses are removed from PHP attributes. The default configuration (use_parentheses = false) removes empty parentheses from attribute declarations.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/attribute_notation/attribute_empty_parentheses.rst#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n-#[Foo()]\n+#[Foo]\nclass Sample1 {}\n\n-#[Bar(), Baz()]\n+#[Bar, Baz]\nclass Sample2 {}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Classes Opening Brace Configuration in PHP\nDESCRIPTION: Shows how to configure anonymous_classes_opening_brace to place anonymous class opening braces on the next line instead of the same line.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/basic/braces_position.rst#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n <?php\n-$foo = new class {\n+$foo = new class\n+{\n };\n```\n\n----------------------------------------\n\nTITLE: Single Line Break Configuration\nDESCRIPTION: Demonstrates configuration with min_line_breaks set to 1\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/doc/rules/namespace_notation/blank_lines_before_namespace.rst#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- Original\n+++ New\n-<?php  namespace A {}\n+<?php\n+namespace A {}\n```\n\n----------------------------------------\n\nTITLE: Running Quality Assurance Suite\nDESCRIPTION: Command to run the complete quality assurance suite for PHP CS Fixer.\nSOURCE: https://github.com/php-cs-fixer/php-cs-fixer/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncomposer qa\n```"
  }
]