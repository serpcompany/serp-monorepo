[
  {
    "owner": "txpipe",
    "repo": "oura",
    "content": "TITLE: Oura Full Configuration Example\nDESCRIPTION: This is a complete example of an Oura configuration file.  It specifies a Node-to-Node source, two filters (Fingerprint and Selection), and a Kafka sink. This configuration demonstrates a practical setup for extracting specific events from the blockchain and sending them to a Kafka topic.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/daemon.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n\n[[filters]]\ntype = \"Fingerprint\"\n\n[[filters]]\ntype = \"Selection\"\npredicate = \"variant_in\"\nargument = [\"Block\", \"Transaction\"]\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"127.0.0.1:53147\"]\ntopic = \"testnet\"\n```\n\n----------------------------------------\n\nTITLE: Oura Full Configuration Example\nDESCRIPTION: This TOML snippet provides a complete Oura configuration example. It uses a Node-to-Node (N2N) source to connect to a Cardano mainnet relay and a Kafka sink to output events to a Kafka topic named `mainnet`.  It also defines `SplitBlock` and `ParseCbor` filters to process the data.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/daemon.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\npeers = [\"relays-new.cardano-mainnet.iohk.io:3001\"]\n\n[intersect]\ntype = \"Tip\"\n\n[[filters]]\ntype = \"SplitBlock\"\n\n[[filters]]\ntype = \"ParseCbor\"\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"127.0.0.1:53147\"]\ntopic = \"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration\nDESCRIPTION: This TOML configuration file is used by Oura to specify the source (Cardano node) and sink (Kafka topic) for data streaming. The source section defines the connection to the Cardano node via a Unix socket, including the network magic. The sink section configures the Kafka producer, including broker addresses and the target topic.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/guides/cardano_2_kafka.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"testnet\"\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"kafka-broker-0:9092\"]\ntopic = \"cardano-events\"\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Mainnet via N2N\nDESCRIPTION: Example TOML configuration for connecting to a remote Cardano node on mainnet using TCP sockets. It sets the `type` to \"N2N\", specifies the mainnet relay address, and sets the `magic` value to \"mainnet\".  This configuration enables Oura to receive block data from a mainnet node.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2n.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Testnet via N2N\nDESCRIPTION: Example TOML configuration for connecting to a remote Cardano node on testnet using TCP sockets. It sets the `type` to \"N2N\", specifies the testnet relay address, and sets the `magic` value to \"testnet\". This configuration allows Oura to receive block data from a testnet node.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2n.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"testnet\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Daemon Mode - Shell\nDESCRIPTION: This command runs the Oura binary in daemon mode using the specified configuration file. It also sets the RUST_LOG environment variable to \"info\" to control the logging level. The oura command will process the cardano2kafka.toml configuration to stream data from Cardano to Kafka.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/guides/cardano_2_kafka.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nRUST_LOG=info oura daemon --config cardano2kafka.toml\n```\n\n----------------------------------------\n\nTITLE: N2C Source Configuration Example (TOML)\nDESCRIPTION: This snippet demonstrates a basic configuration for the N2C source in TOML format. It defines the type as \"N2C\" and specifies the path to the Cardano node's socket file. This configuration is essential for establishing a connection to the Cardano node and retrieving block data.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sources/n2c.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\nsocket_path = \"<socket location>\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Mainnet Cardano Node (TOML)\nDESCRIPTION: This example demonstrates connecting to a local Cardano node running on mainnet via Unix sockets. The `type` is set to `N2C`, the `address` points to the socket file, and the `magic` is set to `mainnet`.  This configuration allows Oura to start fetching block data from the specified mainnet node.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2c.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"mainnet\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Sink Configuration Example\nDESCRIPTION: This TOML snippet demonstrates the configuration of a RabbitMQ sink.  It specifies the sink type, connection URI, exchange name, and routing key for publishing Cardano events to RabbitMQ. The 'uri' parameter specifies the connection string, 'exchange' defines the target exchange, and 'routing_key' sets the routing key for messages.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/rabbitmq.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Rabbitmq\"\nuri = \"amqp://rabbitmq:rabbitmq@127.0.0.1:5672\"\nexchange = \"events.exchange\"\nrouting_key = \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain Information\nDESCRIPTION: This code snippet provides an example TOML configuration for defining chain information within Oura's daemon configuration file. The `[chain]` section includes parameters such as network type, magic number, epoch lengths, slot lengths, and known block hashes/times. These values are essential for Oura to establish a connection to custom Cardano networks, when the network isn't hardcoded into the application itself.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/custom_network.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[chain]\ntype = \"custom\"\nmagic = 764824073\nbyron_epoch_length  = 432000\nbyron_slot_length = 20\nbyron_known_slot = 0\nbyron_known_time = 1506203091\nbyron_known_hash = \"f0f7892b5c333cffc4b3c4344de48af4cc63f55e44936196f365a9ef2244134f\"\nshelley_epoch_length = 432000\nshelley_slot_length = 1\nshelley_known_slot = 4492800\nshelley_known_hash = \"aa83acbf5904c0edfe4d79b3689d3d00fcfc553cf360fd2229b98d464c28e9de\"\nshelley_known_time = 1596059091\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Sink in TOML\nDESCRIPTION: This TOML configuration defines a Kafka sink. It specifies the sink type as \"Kafka\", the brokers' addresses, and the topic to which events should be sent. The `brokers` array contains the hostname and port of the Kafka brokers. The `topic` field indicates the Kafka topic for outbound messages.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/kafka.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Kafka\"\nbrokers = [\"kafka-broker-0:9092\"]\ntopic = \"cardano-events\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Stream Sink in TOML\nDESCRIPTION: This code snippet demonstrates how to configure the Redis stream sink in a TOML file. It shows the required parameters such as `type`, `url`, and `stream_name`. The `url` specifies the connection details for the Redis instance, and `stream_name` determines the name of the Redis stream to which events are sent.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/redis.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Redis\"\nurl = \"redis://localhost:6379\"\nstream_name = \"mystream\"\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration for Kafka - TOML\nDESCRIPTION: This configuration file instructs Oura to stream data from a Cardano node (via a Unix socket) to a Kafka topic. It defines the source as a Cardano node accessible via N2C mini-protocols and the sink as a Kafka broker. The configuration specifies the socket path, Kafka broker addresses, and the target Kafka topic.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/guides/cardano_2_kafka.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\nsocket_path = \"/opt/cardano/cnode/sockets/node0.socket\"\n\n[sink]\ntype = \"Kafka\"\nbrokers = [\"kafka-broker-0:9092\"]\ntopic = \"cardano-events\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AwsS3 Sink\nDESCRIPTION: Configuration settings for the AwsS3 sink, defining the type, AWS region, bucket name, and object prefix. The `type` field must be set to `AwsS3`. The `region` specifies the AWS region. The `bucket` specifies the AWS S3 bucket name. The `prefix` adds a prefix to each object's key.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/aws_s3.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsS3\"\nregion = \"us-west-2\"\nbucket = \"my-bucket\"\nprefix = \"mainnet/\"\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Sink Configuration TOML\nDESCRIPTION: This TOML configuration defines an Elasticsearch sink in Oura. It specifies the Elasticsearch URL, index name, and basic authentication credentials. The `type` field indicates the sink type (Elastic) and the credentials type (Basic).\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/elastic.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Elastic\"\nurl = \"https://localhost:9200\"\nindex = \"oura.sink.v0.mainnet\"\n\n[sink.credentials]\ntype = \"Basic\"\nusername = \"oura123\"\npassword = \"my very secret stuff\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SQS Sink with TOML\nDESCRIPTION: This TOML configuration snippet shows how to configure the AWS SQS sink in Oura. It defines the sink type, AWS region, queue URL, FIFO settings, group ID for FIFO queues, and maximum retry attempts. The sink sends each event as a message to the specified SQS queue.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/aws_sqs.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsSqs\"\nregion = \"us-west-2\"\nqueue_url = \"https://sqs.us-west-2.amazonaws.com/xxxxxx/my-queue\"\nfifo = true\ngroup_id = \"my_group\"\nmax_retries = 5\n```\n\n----------------------------------------\n\nTITLE: AwsS3 Sink Configuration Example in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to configure the AwsS3 sink in Oura. It includes settings for the AWS region, bucket name, prefix, naming convention, content encoding, and maximum retries.  The sink saves the CBOR content of blockchain blocks to an S3 bucket.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/aws_s3.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"AwsS3\"\nregion = \"us-west-2\"\nbucket = \"my-bucket\"\nprefix = \"mainnet/\"\nnaming = \"SlotHash\"\ncontent = \"Cbor\"\nmax_retries = 5\n```\n\n----------------------------------------\n\nTITLE: AWS SQS Sink Configuration Example (TOML)\nDESCRIPTION: This TOML configuration snippet shows how to configure the AWS SQS sink in Oura. It specifies the sink type, AWS region, SQS queue URL, and group ID for FIFO queues. The `type` must be 'AwsSqs', `region` is the AWS region, `queue_url` is the SQS queue URL, and `group_id` is a fixed group ID for FIFO queues.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/aws_sqs.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsSqs\"\nregion = \"us-west-2\"\nqueue_url = \"https://sqs.us-west-2.amazonaws.com/xxxxxx/my-queue.fifo\"\ngroup_id = \"my_group\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Sink Configuration TOML\nDESCRIPTION: Configures a Webhook sink in TOML format.  This sink sends events to the specified URL using HTTP POST. It includes settings for authorization, timeout, error policy, retry policy, and custom headers.  The `url` parameter specifies the endpoint, and the `retry_policy` defines how failed requests are retried.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/webhook.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Webhook\"\nurl = \"https://endpoint:5000/events\"\nauthorization = \"user:pass\"\ntimeout = 30000\nerror_policy = \"Continue\"\n\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Sink Configuration TOML\nDESCRIPTION: Configures a Webhook sink to send events as HTTP POST requests. It specifies the endpoint URL, optional authorization, custom headers, and error handling policy. The timeout for HTTP responses is also configured.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/webhook.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Webhook\"\nurl = \"https://endpoint:5000/events\"\nauthorization = \"user:pass\"\ntimeout = 30000\nerror_policy = \"Continue\"\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n```\n\n----------------------------------------\n\nTITLE: GcpPubSub Sink Configuration\nDESCRIPTION: This TOML configuration sets up the GcpPubSub sink. The `type` parameter must be set to \"GcpPubSub\", and the `topic` parameter specifies the short name of the PubSub topic to send messages to. The sink encodes each event as a JSON message and sends it to the specified topic.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/gcp_pubsub.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"GcpPubSub\"\ntopic = \"test\"\n```\n\n----------------------------------------\n\nTITLE: Configure GcpCloudFunction Sink in TOML\nDESCRIPTION: This TOML snippet configures the GcpCloudFunction sink to send events to a specified Google Cloud Function URL. It sets the URL, timeout, authorization header, and additional custom headers. The `type` must be `GcpCloudFunction`.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/gcp_cloudfunction.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"GcpCloudFunction\"\nurl = \"https://REGION-PROJECT_ID.cloudfunctions.net/FUNCTION_NAME\"\ntimeout = 30000\nauthorization = true\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Oura Cursor in TOML\nDESCRIPTION: This snippet demonstrates the TOML configuration for enabling and setting up the Oura cursor feature.  It specifies the cursor type and the file path where the cursor position will be persisted. Enabling the cursor allows Oura to resume from the last known position after a restart.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/stateful_cursor.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[cursor]\ntype = \"File\"\npath = \"/var/oura/cursor\"\n```\n\n----------------------------------------\n\nTITLE: Chain Configuration Example for Testnet - TOML\nDESCRIPTION: This TOML snippet demonstrates the configuration required within the `[chain]` section of the Oura daemon configuration file to connect to the Cardano Testnet. It specifies parameters such as epoch lengths, slot lengths, known block hashes and times, address human-readable part (HRP), and the AdaHandle policy.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/custom_network.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[chain]\nbyron_epoch_length  = 432000\nbyron_slot_length = 20\nbyron_known_slot = 0\nbyron_known_hash = \"8f8602837f7c6f8b8867dd1cbc1842cf51a27eaed2c70ef48325d00f8efb320f\"\nbyron_known_time = 1564010416\nshelley_epoch_length = 432000\nshelley_slot_length = 1\nshelley_known_slot = 1598400\nshelley_known_hash = \"02b1c561715da9e540411123a6135ee319b02f60b9a11a603d3305556c04329f\"\nshelley_known_time = 1595967616\naddress_hrp = \"addr_test\"\nadahandle_policy = \"8d18d786e92776c824607fd8e193ec535c79dc61ea2405ddf3b09fe3\"\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Sink Configuration TOML\nDESCRIPTION: This TOML configuration defines the settings for an Elasticsearch sink. It specifies the sink type, URL, index, and credentials for authentication. The `sink.credentials` section can be omitted for clusters without authentication.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/elasticsearch.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Elastic\"\nurl = \"https://localhost:9200\"\nindex = \"oura.sink.v0.mainnet\"\n\n[sink.credentials]\ntype = \"Basic\"\nusername = \"oura123\"\npassword = \"my very secret stuff\"\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Sink Configuration\nDESCRIPTION: This TOML configuration defines a RabbitMQ sink. It specifies the connection URI, exchange name, and routing key for publishing events. The `type` field must be set to \"Rabbitmq\".\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/rabbitmq.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Rabbitmq\"\nuri = \"amqp://rabbitmq:rabbitmq@127.0.0.1:5672\"\nexchange = \"events.exchange\"\nrouting_key = \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Stream Sink - Single Stream TOML\nDESCRIPTION: This TOML configuration defines a Redis sink that sends all events to a single Redis stream named 'mystream'. It connects to a Redis instance running on localhost at port 6379.  The 'type' is set to 'Redis', 'redis_server' specifies the connection string, and 'stream_name' specifies the target Redis stream.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/redis_streams.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Redis\"\nredis_server = \"redis://localhost:6379\"\nstream_name = \"mystream\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UtxoRPC Source - TOML\nDESCRIPTION: This code snippet demonstrates the basic configuration of an UtxoRPC source in TOML format. It defines the source type, URL, and maximum number of items per page. The 'url' parameter specifies the Dolos gRPC endpoint, and 'max_items_per_page' controls the number of blocks requested from Dolos.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sources/utxorpc.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"UtxoRPC\"\nurl = \"https://<hostname>\"\nmax_items_per_page = 20\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Sink in TOML\nDESCRIPTION: This TOML configuration snippet defines the settings for an AWS Lambda sink. It specifies the sink type, AWS region, and the ARN of the Lambda function to invoke. The sink processes events sequentially, retrying on dispatch failures but not on function execution failures.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/aws_lambda.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"AwsLambda\"\nregion = \"us-east-1\"\nfunction_name = \"my-lambda\"\n```\n\n----------------------------------------\n\nTITLE: Enabling SplitBlock filter in daemon config\nDESCRIPTION: This TOML snippet configures the `SplitBlock` filter in the Oura daemon, enabling it as part of the pipeline. This filter decodes each CBOR block and maps each transaction within the block to the CborTx format.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/split_block.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"SplitBlock\"\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Configuration - TOML\nDESCRIPTION: Configures Oura's chain sync process to start reading from a specified intersection point.  The `type` field defines the strategy (Origin, Tip, Point, or Fallbacks), and the `value` field provides the corresponding point(s). This snippet demonstrates the basic structure for defining the intersection point strategy in Oura's TOML configuration.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/intersect_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source.intersect]\ntype = <Type>\nvalue = <Value>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasm Plugin in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to add the `WasmPlugin` filter to the Oura pipeline.  It specifies the type as \"WasmPlugin\" and provides the path to the wasm binary. This configuration enables the filter to be used within the pipeline.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/wasm.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[[filters]]\n type = \"WasmPlugin\"\n path = \"./extract_fee/plugin.wasm\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Dolos Node - TOML\nDESCRIPTION: This code snippet shows an example configuration for connecting to a remote Dolos node in preprod through gRPC using TOML. It specifies the UtxoRPC source type, the URL of the Dolos gRPC endpoint, and the maximum number of items per page.  The URL points to a specific preprod Dolos instance.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sources/utxorpc.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"UtxoRPC\"\nurl = \"https://50051-romantic-calmness-b55bqg.us1.demeter.run\"\nmax_items_per_page = 20\n```\n\n----------------------------------------\n\nTITLE: Match Tx Output By Address, Asset, Datum\nDESCRIPTION: This TOML snippet configures the 'Select' filter to match a transaction that has an output simultaneously pointing to a specific address and containing a particular asset, as well as having a specific datum.  It shows how to refine matching to specific outputs.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[filters.predicate.match.output]\naddress = \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\"\nassets = [\"asset17jd78wukhtrnmjh3fngzasxm8rck0l2r4hhyyt\"]\ndatum = \"datum1httkxyxp8x0dlpdt3k6cwng5pxj3j\"\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Address\nDESCRIPTION: This TOML snippet demonstrates how to configure the 'Select' filter to match any transaction that interacts with a specific address.  The predicate is set to the address string.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\npredicate = \"addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgse35a3x\"\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Metadata Label\nDESCRIPTION: This TOML snippet demonstrates how to configure the 'Select' filter to match any transaction that holds a specific metadata label. The predicate is set to the metadata label string.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\npredicate = \"#127\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with any_of Predicate\nDESCRIPTION: This snippet demonstrates using the `any_of` predicate to filter events that match either of two different policies. The `any_of` predicate yields true if any of its child predicates are true, effectively implementing a boolean 'or'. Each child predicate is a `policy_equals` check with a different policy ID.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[filters.check]\n predicate = \"any_of\"\n\n[[filters.check.argument]]\n predicate = \"policy_equals\"\n argument = \"4bf184e01e0f163296ab253edd60774e2d34367d0e7b6cbc689b567d\"\n\n[[filters.check.argument]]\n predicate = \"policy_equals\"\n argument = \"a5bb0e5bb275a573d744a021f9b3bff73595468e002755b447e01559\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with all_of Predicate\nDESCRIPTION: This snippet demonstrates using the `all_of` predicate to filter only 'OutputAsset' events presenting a particular policy. The `all_of` predicate yields true if all of its child predicates are true, effectively implementing a boolean 'and'. The first predicate checks if the event is an 'OutputAsset', and the second checks if its policy equals a specific ID.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[filters.check]\n predicate = \"all_of\"\n\n[[filters.check.argument]]\n predicate = \"variant_in\"\n argument = [\"OutputAsset\"]\n\n[[filters.check.argument]]\n predicate = \"policy_equals\"\n argument = \"a5bb0e5bb275a573d744a021f9b3bff73595468e002755b447e01559\"\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Address, Asset, Label\nDESCRIPTION: This TOML snippet demonstrates matching a transaction that simultaneously interacts with a specific address, holds a specific asset, and has a specific metadata label.  It uses the `all` key under `filters.predicate` to specify a list of predicates.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[filters.predicate]\nall = [\n    \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\",\n    \"asset17jd78wukhtrnmjh3fngzasxm8rck0l2r4hhyyt\",\n    \"#789\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with variant_not_in Predicate\nDESCRIPTION: This snippet configures the Selection filter to allow all events except 'Transaction' events. The `variant_not_in` predicate checks if the event's variant is *not* present in the provided string array. It specifies the predicate and the variant to exclude.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"variant_not_in\"\n argument = [\"Transaction\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Oura as a Standalone Kubernetes Deployment\nDESCRIPTION: This YAML configuration defines Oura as a standalone Kubernetes Deployment, along with a ConfigMap for configuring the Oura daemon. It specifies resource requests and limits, environment variables (RUST_LOG), command-line arguments ('daemon'), and a volume mount for the configuration. Note that the replicas is set to 1 because Oura instances do not coordinate.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/kubernetes.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: oura\ndata:\n  daemon.toml: |-\n    [source]\n    # REDACTED: here goes your `source` configuration options\n\n    [[filters]]\n    # REDACTED: here goes your `filters` configuration options\n\n    [sink]\n    # REDACTED: here goes your `sink` configuration options\n---apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: oura\n  labels:\n    app: oura\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: oura\n  template:\n    metadata:\n      labels:\n        app: oura\n    spec:\n      containers:\n      - name: main\n        image: ghcr.io/txpipe/oura:latest\n        env:\n          - name: \"RUST_LOG\"\n            value: \"info\"\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n          limits:\n            memory: 200Mi\n            cpu: 200m\n        args:\n          - \"daemon\"\n        volumeMounts:\n          - mountPath: /etc/oura\n            name: config\n      volumes:\n      - name: config\n        configMap:\n          name: oura\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Stake Address\nDESCRIPTION: This TOML snippet demonstrates how to configure the 'Select' filter to match any transaction that interacts with a specific stake address.  The predicate is set to the stake address string.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\npredicate = \"stake178phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcccycj5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mithril Source in TOML\nDESCRIPTION: This TOML snippet configures Oura to use Mithril as its data source.  It specifies the aggregator URL from which to fetch data, the genesis verification key to validate the chain, and the local directory to store the downloaded snapshot. The `skip_validation` parameter determines whether to validate the chain snapshot.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sources/mithril.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"Mithril\"\naggregator = \"https://aggregator.pre-release-preview.api.mithril.network/aggregator\"\ngenesis_key = \"5b3132372c37332c3132342c3136312c362c3133372c3133312c3231332c3230372c3131372c3139382c38352c3137362c3139392c3136322c3234312c36382c3132332c3131392c3134352c31332c3233322c3234332c34392c3232392c322c3234392c3230352c3230352c33392c3233352c34345d\"\nsnapshot_download_dir = \"./snapshot\"\nskip_validation = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with policy_equals Predicate\nDESCRIPTION: This snippet shows how to configure the Selection filter to select events where the policy ID matches a specified value. The `policy_equals` predicate is used to compare the policy ID of the event with the provided argument. Applicable event variants include Transaction, Mint, CIP25Asset, and OutputAsset.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"policy_equals\"\n argument = \"<policy_id>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with v_key_witnesses_includes Predicate\nDESCRIPTION: This snippet demonstrates configuring the Selection filter to select events where at least one of the vkeys matches the specified value. This requires setting `include_transaction_details = true` in the source mapper configuration. This `v_key_witnesses_includes` predicate is used with VKeyWitness and Transaction events.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[source.mapper]\ninclude_transaction_details = true\n\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"v_key_witnesses_includes\"\n argument = \"<vkey>\"\n```\n\n----------------------------------------\n\nTITLE: Match Tx By All Addresses\nDESCRIPTION: This TOML snippet configures the 'Select' filter to match any transaction interacting with *all* of the provided addresses *simultaneously*. It uses the `all` key under `filters.predicate` to specify a list of addresses.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[filters.predicate]\nall = [\n    \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\",\n    \"stake178phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcccycj5\",\n]\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Any Addresses\nDESCRIPTION: This TOML snippet configures the 'Select' filter to match any transaction interacting with *any* of the provided addresses.  It uses the `any` key under `filters.predicate` to specify a list of addresses.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[filters.predicate]\nany = [\n    \"addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgse35a3x\",\n    \"addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx\",\n    \"addr1vx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzers66hrl8\",\n]\n```\n\n----------------------------------------\n\nTITLE: Hydra Source Configuration\nDESCRIPTION: This TOML snippet demonstrates the configuration required for a Hydra source in txpipe.  It specifies the source type as \"Hydra\" and provides the websocket URL for connecting to the Hydra server. The `ws_url` must point to a running Hydra instance with websocket support enabled.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sources/hydra.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"Hydra\"\nws_url = \"ws://127.0.0.1:4001\"\n```\n\n----------------------------------------\n\nTITLE: N2C Source Configuration Example (TOML)\nDESCRIPTION: This snippet shows an example of how to set up a typical N2C source in Oura using TOML configuration. It includes the `type`, `address`, `magic`, `intersect`, and `mapper` sections. The `type` must be set to `N2C`, `address` specifies the socket location, `magic` sets the network magic, and `intersect` and `mapper` allow further customization.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2c.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"<socket location>\"]\nmagic = <network magic>\n\n[source.intersect]\ntype = <intersect strategy>\nvalue = <intersect argument>\n\n[source.mapper]\ninclude_block_end_events = <bool>\ninclude_transaction_details = <bool>\ninclude_transaction_end_events = <bool>\ninclude_block_cbor = <bool>\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with asset_equals Predicate\nDESCRIPTION: This snippet illustrates how to select events based on matching asset (token name).  The `asset_equals` predicate checks if the asset name of an event matches the given argument. Applicable event variants include CIP25Asset, Transaction, OutputAsset, and Mint.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"asset_equals\"\n argument = \"<asset>\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output\nDESCRIPTION: This is an example output from the /metrics endpoint. It shows various metrics such as chain tip, rollback count, sink/source slot, and event counts. These metrics are formatted for Prometheus consumption.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/pipeline_metrics.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# HELP chain_tip the last detected tip of the chain (height)\n# TYPE chain_tip gauge\nchain_tip 6935733\n# HELP rollback_count number of rollback events occurred\n# TYPE rollback_count counter\nrollback_count 1\n# HELP sink_current_slot last slot processed by the sink of the pipeline\n# TYPE sink_current_slot gauge\nsink_current_slot 2839340\n# HELP sink_event_count number of events processed by the sink of the pipeline\n# TYPE sink_event_count counter\nsink_event_count 2277714\n# HELP source_current_height last height (block #) processed by the source of the pipeline\n# TYPE source_current_height gauge\nsource_current_height 2837810\n# HELP source_current_slot last slot processed by the source of the pipeline\n# TYPE source_current_slot gauge\nsource_current_slot 2839340\n# HELP source_event_count number of events processed by the source of the pipeline\n# TYPE source_event_count counter\nsource_event_count 2277715\n```\n\n----------------------------------------\n\nTITLE: Starting from a Specific Point in the Chain (TOML)\nDESCRIPTION: This configuration demonstrates how to instruct Oura to start reading events from a specific point in the Cardano chain.  It uses the `source.intersect` section with `type` set to `Point` and `value` set to a tuple of slot and block hash. This allows Oura to resume processing from a known point in the chain.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2c.mdx#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"mainnet\"\n\n[source.intersect]\ntype = \"Point\"\nvalue = [48896539, \"5d1f1b6149b9e80e0ff44f442e0cab0b36437bb92eacf987384be479d4282357\"]\n```\n\n----------------------------------------\n\nTITLE: Including Transaction Details and Block CBOR (TOML)\nDESCRIPTION: This example shows how to configure Oura to include detailed transaction information and the block's CBOR representation in the events.  This is achieved by setting `include_transaction_details` and `include_block_cbor` to `true` within the `source.mapper` section.  This increases the verbosity of the events but provides more comprehensive data.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2c.mdx#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"mainnet\"\n\n\n[source.mapper]\ninclude_transaction_details = true\ninclude_block_cbor = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with metadata_label_equals Predicate\nDESCRIPTION: This snippet demonstrates selecting events where the root label of a metadata entry matches a specific value. The `metadata_label_equals` predicate is used for Metadata and Transaction events. It checks if the top-level label of the metadata matches the argument.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"metadata_label_equals\"\n argument = \"<label>\"\n```\n\n----------------------------------------\n\nTITLE: Starting from a Specific Point in Chain\nDESCRIPTION: Example TOML configuration demonstrating how to start reading chain events from a specific point in the Cardano blockchain using the `intersect` option.  It defines the `type` as \"Point\" and provides a `value` consisting of a slot number and block hash. It enables Oura to resume processing from a specified point in the chain.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2n.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n\n[source.intersect]\ntype = \"Point\"\nvalue = [48896539, \"5d1f1b6149b9e80e0ff44f442e0cab0b36437bb92eacf987384be479d4282357\"]\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Asset\nDESCRIPTION: This TOML snippet demonstrates how to configure the 'Select' filter to match any transaction that interacts with a specific asset. The predicate is set to the asset string.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\npredicate = \"asset17jd78wukhtrnmjh3fngzasxm8rck0l2r4hhyyt\"\n```\n\n----------------------------------------\n\nTITLE: N2N Source Configuration Example\nDESCRIPTION: Example TOML configuration demonstrating the basic structure of an N2N source. It outlines the required fields such as `type`, `address`, and `magic`, as well as optional sections like `intersect` and `mapper`.  The configuration determines how Oura connects to a Cardano node and retrieves block data.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2n.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"<hostname:port>\"]\nmagic = <network magic>\n\n[source.intersect]\ntype = <intersect strategy>\nvalue = <intersect argument>\n\n[source.mapper]\ninclude_block_end_events = <bool>\ninclude_transaction_details = <bool>\ninclude_transaction_end_events = <bool>\ninclude_block_cbor = <bool>\n```\n\n----------------------------------------\n\nTITLE: Running Oura with WASM Plugin\nDESCRIPTION: This command runs the Oura daemon, enabling the WASM feature and using the provided configuration file (`daemon.toml`).  The configuration file should point to the compiled WASM module. Requires the `wasm` Cargo feature to be enabled.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/wasm_basic/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --features wasm --bin oura -- daemon --config ./daemon.toml\n```\n\n----------------------------------------\n\nTITLE: Retry Policy Configuration TOML\nDESCRIPTION: This TOML configuration block demonstrates how to set retry policies for a sink in Oura. It defines the maximum number of retries, the initial backoff unit, the backoff factor, and the maximum backoff delay. The configuration is placed under the `[sink.retry_policy]` section in the `daemon.toml` file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/retry_policy.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n```\n\n----------------------------------------\n\nTITLE: Match Tx By Datum\nDESCRIPTION: This TOML snippet demonstrates how to configure the 'Select' filter to match any transaction that holds a specific datum. The predicate is set to the datum string.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\npredicate = \"datum1httkxyxp8x0dlpdt3k6cwng5pxj3j\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Oura Cursor in TOML\nDESCRIPTION: This code snippet shows how to configure the stateful cursor feature in Oura's daemon TOML file. It specifies the cursor type as 'File' and sets the path to the cursor file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/stateful_cursor.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[cursor]\ntype = \"File\"\npath = \"/var/oura/cursor\"\n```\n\n----------------------------------------\n\nTITLE: Oura Daemon Configuration (Redis)\nDESCRIPTION: This TOML snippet shows the configuration for the Oura daemon, specifying Redis as the cursor persistence mechanism. The `type` is set to \"Redis\", `key` defines the Redis key for storing cursor information, and `url` provides the connection string to the Redis cluster. This configuration enables Oura to maintain cursor state in Redis.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/redis_cursor/README.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[cursor]\n  type = \"Redis\"\n  key = \"key\"\n  url = \"the connection string to connect with Redis\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Daemon Mode with Custom Config\nDESCRIPTION: This command runs the Oura Docker image in daemon mode, mounting a custom configuration file. It maps the `daemon.toml` file in the current directory to `/etc/oura/daemon.toml` within the container.  This allows for customized daemon configuration using a local file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/docker.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -v $(pwd)/daemon.toml:/etc/oura/daemon.toml \\\n    ghcr.io/txpipe/oura:latest daemon\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Policy in TOML\nDESCRIPTION: This TOML snippet configures Oura's retry policy.  It sets the maximum number of retries, the initial backoff unit, the backoff factor, the maximum backoff duration, and whether retries are dismissible.  These settings are defined within the `[retries]` section of the `daemon.toml` file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/retry_policy.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[retries]\nmax_retries = 3\nbackoff_unit_sec = 10\nbackoff_factor = 3\nmax_backoff_sec = 10\ndismissible = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with metadata_any_sub_label_equals Predicate\nDESCRIPTION: This snippet demonstrates selecting events where at least one of the sub-labels (keys in the JSON map) of a metadata entry matches a specific value. The `metadata_any_sub_label_equals` predicate operates on Metadata events and checks for matching sub-labels within the metadata.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"metadata_any_sub_label_equals\"\n argument = \"<label>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RollbackBuffer in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to configure the `RollbackBuffer` filter in Oura. It sets the `min_depth` parameter, which determines the minimum depth a block must have before being sent down the pipeline. Higher `min_depth` values reduce the chances of rollback events at the cost of increased latency. The configuration is defined within a `filters` array.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/rollback_buffer.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"RollbackBuffer\"\nmin_depth = 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapper Options in daemon.toml\nDESCRIPTION: This code snippet shows the configuration options available for the mapper in Oura's source stage. These options control the inclusion of potentially expensive data in the events emitted by Oura. They are configured in the `daemon.toml` file and determine if block end events, transaction details, transaction end events and block CBOR are included.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/mapper_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[source.mapper]\ninclude_block_end_events = <bool>\ninclude_transaction_details = <bool>\ninclude_transaction_end_events = <bool>\ninclude_block_cbor = <bool>\n```\n\n----------------------------------------\n\nTITLE: Include Transaction Details in Events\nDESCRIPTION: Example TOML configuration showing how to include transaction details and block CBOR data in Oura events using the `mapper` options.  It sets `include_transaction_details` and `include_block_cbor` to `true`. This allows for more detailed analysis of transactions and blocks.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2n.mdx#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\n\n\n[source.mapper]\ninclude_transaction_details = true\ninclude_block_cbor = true\n```\n\n----------------------------------------\n\nTITLE: ParseCbor Filter Configuration\nDESCRIPTION: This TOML configuration enables the `ParseCbor` filter within the Oura pipeline.  It specifies the filter type as \"ParseCbor\", instructing Oura to use this filter for processing data records. No additional parameters are needed.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/parse_cbor.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"ParseCbor\"\n```\n\n----------------------------------------\n\nTITLE: Building WASM Plugin with TinyGo\nDESCRIPTION: This command compiles the Golang source code into a WASM module using TinyGo, targeting the WASI environment. The output is a `plugin.wasm` file, which can then be used as a plugin for Oura. Requires tinygo to be installed.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/wasm_basic/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntinygo build -o plugin.wasm -target wasi main.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Filter\nDESCRIPTION: This TOML snippet shows how to configure the 'Select' filter within the Oura daemon config file. It specifies the filter type as 'Select', enables the 'skip_uncertain' option, and defines a 'predicate' for matching transactions.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/select.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Select\"\nskip_uncertain = true\npredicate = <match>\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Redis Configuration\nDESCRIPTION: This shell command executes the Oura binary with the `redis` feature enabled, specifying the `daemon` subcommand and using the `daemon.toml` configuration file. This command initiates Oura, leveraging the Redis configuration to persist cursor information. It requires cargo and the Oura project to be set up.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/redis_cursor/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --bin oura --features redis daemon --config daemon.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Stream Sink - Stream By Event Type TOML\nDESCRIPTION: This TOML configuration defines a Redis sink that sends events to different Redis streams, where the stream name is derived from the event type. It connects to a Redis instance running on localhost at port 6379. The 'type' is set to 'Redis', 'redis_server' specifies the connection string, and 'stream_strategy' is set to 'ByEventType'.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/redis_streams.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Redis\"\nredis_server = \"redis://localhost:6379\"\nstream_strategy = \"ByEventType\"\n```\n\n----------------------------------------\n\nTITLE: FileRotate Sink Configuration Example\nDESCRIPTION: This configuration snippet demonstrates the usage of the FileRotate sink. It defines the sink type, output path, output format (JSONL), maximum bytes per file, maximum total files, and whether to compress files after rotation.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/file_rotate.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"FileRotate\"\noutput_path = \"/var/oura/mainnet\"\noutput_format = \"JSONL\"\nmax_bytes_per_file = 1_000_000\nmax_total_files = 10\ncompress_files = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingerprint Filter in TOML\nDESCRIPTION: This TOML configuration snippet shows how to enable the Fingerprint filter in the Oura data pipeline. The `type` parameter must be set to \"Fingerprint\". This configuration enables the filter to calculate a unique fingerprint for each event.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/fingerprint.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\ntype = \"Fingerprint\"\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Config File with Oura in Docker\nDESCRIPTION: This command runs the Oura Docker image in daemon mode with a custom configuration file. It mounts the `daemon.toml` file from the host machine to the `/etc/oura/daemon.toml` location inside the container, allowing Oura to use the specified configuration.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/docker.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -v $(pwd)/daemon.toml:/etc/oura/daemon.toml \\\n    ghcr.io/txpipe/oura:latest daemon\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with not and variant_in Predicates\nDESCRIPTION: This snippet demonstrates the use of the `not` predicate to negate the `variant_in` predicate, effectively allowing all events except 'Transaction' events to pass. The `not` predicate takes another predicate as its argument.  This provides a more complex way to achieve the same result as `variant_not_in`.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"not\"\n\n[filters.check.argument]\n predicate = \"variant_in\"\n argument = [\"Transaction\"]\n```\n\n----------------------------------------\n\nTITLE: Logs Sink Configuration Example\nDESCRIPTION: This configuration example shows how to configure the Logs sink. It defines the type as \"Logs\", specifies the output path, sets the output format to JSONL, limits the maximum file size, restricts the total number of files, and enables file compression.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/logs.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Logs\"\noutput_path = \"/var/oura/mainnet\"\noutput_format = \"JSONL\"\nmax_bytes_per_file = 1_000_000\nmax_total_files = 10\ncompress_files = true\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon\nDESCRIPTION: This command starts Oura in daemon mode, processing data in the background. It can optionally load a custom TOML configuration file or start from a specific point in the chain using a cursor.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/daemon.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\noura daemon\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Selection Filters\nDESCRIPTION: This snippet demonstrates a complex, real-world example using nested filters. It uses `any_of` to combine filters for `RollBack` events, `CIP25Asset` events with either `<policy_a>` or `<policy_b>`, and `Transaction` events that include a specific `<vkey>`.  This example showcases the flexibility of combining different predicates for advanced filtering logic. It filters events based on a combination of variant types, policy IDs, and VKey witnesses.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"any_of\"\n\n[[filters.check.argument]]\n predicate = \"variant_in\"\n argument = [\"RollBack\"]\n\n[[filters.check.argument]]\n predicate = \"all_of\"\n\n[[filters.check.argument.argument]]\n predicate = \"variant_in\"\n argument = [\"CIP25Asset\"]\n\n[[filters.check.argument.argument]]\n predicate = \"any_of\"\n\n[[filters.check.argument.argument.argument]]\n predicate = \"policy_equals\"\n argument = \"<policy_a>\"\n\n[[filters.check.argument.argument.argument]]\n predicate = \"policy_equals\"\n argument = \"<policy_b>\"\n\n[[filters.check.argument]]\n predicate = \"all_of\"\n\n[[filters.check.argument.argument]]\n predicate = \"variant_in\"\n argument = [\"Transaction\"]\n\n[[filters.check.argument.argument]]\n predicate = \"v_key_witnesses_includes\"\n argument = \"<vkey>\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Watch Mode\nDESCRIPTION: This command runs Oura in watch mode, connecting to a Cardano node to display the latest blockchain events. The `<socket>` argument specifies the connection details, which can be a TCP address or a Unix socket path. Options like `--bearer`, `--magic`, `--since`, `--throttle`, and `--wrap` allow customization of the connection and output.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\noura watch [OPTIONS] <socket>\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics in daemon.toml\nDESCRIPTION: This TOML configuration enables the metrics endpoint for Oura. It specifies the address where the HTTP server will listen for requests and the endpoint path where the metrics will be exposed. The absence of this section disables the metrics feature.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/pipeline_metrics.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# daemon.toml file\n\n[metrics]\naddress = \"0.0.0.0:9186\"\nendpoint = \"/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Parsed CborBlock Output Example\nDESCRIPTION: This JSON object represents the structured data output by the `parse_cbor` filter when processing a CborBlock. It includes the event type, point (slot and hash), and the parsed block record with header and body fields.  The example shows the basic structure of the data that is forwarded to the sink.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/parse_cbor.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 0,\n    \"hash\": \"\"\n  },\n  \"record\": {\n    \"header\": {},\n    \"body\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Oura in Watch Mode\nDESCRIPTION: This is the base command to start Oura in watch mode. It requires a socket argument to specify the connection to the Cardano node.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\noura watch [OPTIONS] <socket>\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From A Remote Relay Node\nDESCRIPTION: Connects to a remote Cardano relay node using TCP bearer. The relay node address and port are specified directly in the command.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noura watch relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Oura from Source using Cargo\nDESCRIPTION: This snippet details the steps to clone the Oura repository, navigate into it, and build and install it using Cargo. The `--all-features` flag enables all optional features during the build process. This requires the Rust toolchain to be installed and configured.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/from_source.mdx#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ngit clone git@github.com:txpipe/oura.git\ncd oura\ncargo install --all-features --path .\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Configuration Template\nDESCRIPTION: This TOML snippet defines the basic structure for configuring the intersect options in Oura's `daemon.toml` file. It includes the `type` and `value` parameters, where `type` specifies the intersection strategy (e.g., Origin, Tip, Point, Breadcrumbs), and `value` provides the corresponding arguments (e.g., a point or array of points).\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/intersect_options.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[intersect]\ntype = <Type>\nvalue = <Value>\n```\n\n----------------------------------------\n\nTITLE: Oura Intersect Configuration\nDESCRIPTION: This TOML snippet shows how to configure Oura to use a specific point in the blockchain as the intersection point. The `type` is set to \"Point\" and the `value` is an array containing the slot number and block hash. This configuration allows Oura to start processing the blockchain from the specified point instead of the tip or origin.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/intersect_options.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[intersect]\ntype = \"Point\"\nvalue = [\n    4493860,\n    \"ce7f821d2140419fea1a7900cf71b0c0a0e94afbb1f814a6717cff071c3b6afc\",\n]\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From A Local Node Via Unix Socket\nDESCRIPTION: Connects to a local Cardano node using a Unix socket. The socket path is provided as an argument, and the bearer is explicitly set to 'unix'.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\noura watch /opt/cardano/cnode/sockets/node0.socket --bearer unix\n```\n\n----------------------------------------\n\nTITLE: Watch Data Starting At A Particular Block\nDESCRIPTION: Connects to a remote Cardano node and starts reading data from a specific block identified by its slot and hash.  This uses TCP bearer.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\noura watch relays-new.cardano-mainnet.iohk.io:3001 \\\n    --bearer tcp \\\n    --since 49159253,d034a2d0e4c3076f57368ed59319010c265718f0923057f8ff914a3b6bfd1314\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration File Skeleton\nDESCRIPTION: This TOML configuration file provides the basic structure for configuring Oura's data pipeline. It includes sections for defining the data source, filters to apply, and the destination sink. An optional cursor section is also included.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/daemon.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"X\" # the type of source to use\n\n# custom config fields for this source type\nfoo = \"abc\"\nbar = \"xyz\"\n\n[[filters]]\ntype = \"Y\" # the type of filter to use\n\n# custom config fields for this filter type\nfoo = \"123\"\nbar = \"789\"\n\n[sink]\n# the type of sink to use\ntype = \"Z\"\n\n# custom config fields for this sink type\nfoo = \"123\"\nbar = \"789\"\n\n# optional cursor settings, remove seaction to disable feature\n[cursor]\ntype = \"File\"\npath = \"/var/oura/cursor\"\n```\n\n----------------------------------------\n\nTITLE: Oura Fallback Intersect Configuration - TOML\nDESCRIPTION: Configures Oura to use a set of fallback intersection points. The chain sync process will attempt to intersect at the first point. If not found, it will proceed to the next and so on. If none are found the process will exit. Each point is defined as a list of `[slot, hash]`.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/intersect_options.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[source.intersect]\ntype = \"Fallbacks\"\nvalue = [\n    [4449598, \"2c9ba2611c5d636ecdb3077fde754413c9d6141c6288109922790e53bbb938b5\"],\n    [43159, \"f5d398d6f71a9578521b05c43a668b06b6103f94fcf8d844d4c0aa906704b7a6\"],\n    [0, \"f0f7892b5c333cffc4b3c4344de48af4cc63f55e44936196f365a9ef2244134f\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From Pre-Production Testnet\nDESCRIPTION: Connects to the Cardano \"Pre-Production\" testnet and displays live blockchain data. The `--magic preprod` option must be set for the `preprod` testnet.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\noura watch preprod-node.world.dev.cardano.org:30000 --bearer tcp --magic preprod\n```\n\n----------------------------------------\n\nTITLE: Initialize Docker Compose\nDESCRIPTION: This command initializes and starts the services defined in the docker-compose.yml file. It sets up the PostgreSQL database environment as described in the file, creating necessary containers and networks.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/postgresql/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Oura Configuration TOML Skeleton\nDESCRIPTION: This TOML snippet represents the basic structure of an Oura configuration file. It includes the `source`, `intersect`, `filters` and `sink` sections, each with a `type` field that determines the specific component to use. Custom configuration fields can be added under each section, depending on the component type.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/daemon.mdx#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[source]\ntype = \"X\" # the type of source to use\n\n# custom config fields for this source type\nfoo = \"abc\"\nbar = \"xyz\"\n\n[intersect]\ntype = \"W\" # the type of source intersect chain\n\n[[filters]]\ntype = \"Y\" # the type of filter to use\n\n# custom config fields for this filter type\nfoo = \"123\"\nbar = \"789\"\n\n[sink]\n# the type of sink to use\ntype = \"Z\"\n\n# custom config fields for this sink type\nfoo = \"123\"\nbar = \"789\"\n```\n\n----------------------------------------\n\nTITLE: Oura Finalize Configuration - TOML\nDESCRIPTION: Configures Oura to stop syncing the blockchain when it reaches a specific block hash. The `until_hash` field specifies the block hash at which Oura should gracefully exit. This configuration is defined in the `[source.finalize]` section of the TOML configuration file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/intersect_options.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[source.finalize]\nuntil_hash = <BlockHash>\n```\n\n----------------------------------------\n\nTITLE: Dump Data to Stdout\nDESCRIPTION: Dumps blockchain data from a remote Cardano relay node to standard output (stdout). The `--bearer tcp` option specifies the use of TCP for the connection.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/dump.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Dump Data to Rotating Files\nDESCRIPTION: Dumps blockchain data from a remote Cardano relay node into a set of rotating log files. The `--bearer tcp` option specifies the use of TCP, and `--output ./mainnet-logs` sets the output directory and filename prefix.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/dump.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp --output ./mainnet-logs\n```\n\n----------------------------------------\n\nTITLE: Configuring LegacyV1 Filter in TOML\nDESCRIPTION: This code snippet demonstrates how to configure the LegacyV1 filter within the Oura daemon configuration file using TOML. It shows the basic structure and available boolean options to control the data included in the filter's output.  The default values are all set to false to minimize the amount of data produced.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/legacy_v1.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[[filters]]\n type = \"LegacyV1\"\n include_block_end_events = false\n include_transaction_details = false\n include_transaction_end_events = false\n include_block_details = false\n include_block_cbor = false\n```\n\n----------------------------------------\n\nTITLE: Connecting to Testnet Cardano Node (TOML)\nDESCRIPTION: This example shows how to connect to a local Cardano node running on testnet using Unix sockets.  The `type` is set to `N2C`, the `address` specifies the location of the socket, and `magic` is set to `testnet`. This configuration allows Oura to connect to and fetch block data from a Cardano testnet node.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sources/n2c.mdx#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\naddress = [\"Unix\", \"/opt/cardano/cnode/sockets/node0.socket\"]\nmagic = \"testnet\"\n```\n\n----------------------------------------\n\nTITLE: Pipe Data to Shell Command\nDESCRIPTION: Dumps blockchain data from a remote Cardano relay node and pipes it to another shell command (grep).  The `--bearer tcp` option specifies the TCP connection, and the pipe (`|`) redirects stdout to the grep command.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/dump.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp | grep block\n```\n\n----------------------------------------\n\nTITLE: Example of transaction data sent to sink\nDESCRIPTION: This JSON snippet shows the data format sent to the sink for each transaction after splitting the CBOR block. Each transaction is represented as an event with the action (`event`), slot/hash point (`point`), and transaction data in hex format (`record`).\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/split_block.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 0,\n    \"hash\": \"\"\n  },\n  \"record\": {\n    \"hex\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Oura Origin Intersect and Finalize Configuration - TOML\nDESCRIPTION: Configures Oura to start syncing from the origin (beginning) of the chain and stop syncing when it reaches a specified block hash. This example demonstrates syncing the entire Byron era by setting the intersect type to \"Origin\" and specifying the `until_hash` in the `[source.finalize]` section.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/intersect_options.mdx#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[source.intersect]\ntype = \"Origin\"\n\n[source.finalize]\nuntil_hash = \"aa83acbf5904c0edfe4d79b3689d3d00fcfc553cf360fd2229b98d464c28e9de\"\n```\n\n----------------------------------------\n\nTITLE: Oura Dump Command\nDESCRIPTION: Executes Oura in dump mode, connecting to a specified Cardano node socket. The <socket> argument is required and specifies the connection details (TCP address or Unix socket path). Options can be used to customize the connection and output.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/dump.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\noura dump [OPTIONS] <socket>\n```\n\n----------------------------------------\n\nTITLE: Parsed CborTx Output Example\nDESCRIPTION: This JSON object represents the structured data output by the `parse_cbor` filter when processing a CborTx.  It includes the event type, point (slot and hash), and the parsed transaction record with inputs and outputs fields.  This is generated after the cbor block has been split in transactions using the split_cbor filter.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/parse_cbor.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 0,\n    \"hash\": \"\"\n  },\n  \"record\": {\n    \"inputs\": [],\n    \"outputs\": [],\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Valid Transaction Events\nDESCRIPTION: This snippet shows the event when a transaction is deemed valid in the Hydra Head.  Key properties include the headId, sequence number, tag (TxValid), timestamp and the transaction details including cborHex, txId, description and type.  This is important for understanding the transaction flow within the head.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"seq\":7,\"tag\":\"TxValid\",\"timestamp\":\"2024-10-08T13:22:44.316966394Z\",\"transaction\":{\"cborHex\":\"84a300d9010281825820f0a39560ea80ccc68e8dffb6a4a077c8927811f06c5d9058d0fa2d1a8d047d2000018282581d600d45f2b310a98e766cee2ab2f6756c91719bd7b35929cef058365b651a001e848082581d600d45f2b310a98e766cee2ab2f6756c91719bd7b35929cef058365b651a015ef3c00200a100d90102818258200f193a88190f6dace0a3db1e0e50797a6e28cd4b6e289260dc96b5a8d7934bf858407342c0c4de1b55bc9e56c86829a1fb5906e964f109fd698d37d5933ed230b1a878bfee20980bb90b48aa32c472fdd465c2eb770551b84de7041838415faed502f5f6\",\"description\":\"Ledger Cddl Format\",\"txId\":\"65d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e51617\",\"type\":\"Witnessed Tx ConwayEra\"}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"seq\":9,\"tag\":\"TxValid\",\"timestamp\":\"2024-10-08T13:23:18.169555579Z\",\"transaction\":{\"cborHex\":\"84a300d901028182582065d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e5161701018282581d600d45f2b310a98e766cee2ab2f6756c91719bd7b35929cef058365b651a0016e36082581d600d45f2b310a98e766cee2ab2f6756c91719bd7b35929cef058365b651a014810600200a100d90102818258200f193a88190f6dace0a3db1e0e50797a6e28cd4b6e289260dc96b5a8d7934bf85840b991c62af8e2b2d06f821fb6064f98c2fc8909b0b2d81435c7e075a61fc92ee6c9224f23d817de35d5529f54034c2ab8dfaded387e99fc525344846bb5dc860af5f6\",\"description\":\"Ledger Cddl Format\",\"txId\":\"a8117ebbc21da57e580d95bcda7c316eff492c977e61a68fd0aea251348eb4af\",\"type\":\"Witnessed Tx ConwayEra\"}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"seq\":11,\"tag\":\"TxValid\",\"timestamp\":\"2024-10-08T13:24:09.770902618Z\",\"transaction\":{\"cborHex\":\"84a300d90102818258207b27f432e04984dc21ee61e8b1539775cd72cc8669f72cf39aebf6d87e35c69700018282581d605e4e214a6addd337126b3a61faad5dfe1e4f14f637a8969e3a05eefd1a00a7d8c082581d605e4e214a6addd337126b3a61faad5dfe1e4f14f637a8969e3a05eefd1a025317c00200a100d9010281825820aa268d154185c9ea06ea73442fd8143c34c1dd543b7142bcb132aac0d1ed6ece5840fc6e2b0750259deedd5a73eeadf481138bf82edc3425614871a0ef09bfcf8cae52a80240fb895a7e6a8ad94d4acb32dffe567ed0d338afcd7878f745737f420df5f6\",\"description\":\"Ledger Cddl Format\",\"txId\":\"de33eeedc890f11fab3c1d827974fbc69e96cfdce2418573b30c9e0844a738ce\",\"type\":\"Witnessed Tx ConwayEra\"}}\n```\n\n----------------------------------------\n\nTITLE: Installing Oura via Cargo crate\nDESCRIPTION: This snippet demonstrates how to add the Oura library to a Rust project using the `cargo add` command. This is the recommended method for managing dependencies.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/library.mdx#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ncargo add oura\n```\n\n----------------------------------------\n\nTITLE: Oura Finalize Configuration\nDESCRIPTION: Defines the `finalize` configuration section within the `daemon.toml` file for Oura. This section allows specifying either a block hash (`until_hash`) or a maximum block slot (`max_block_slot`) at which Oura should stop syncing the blockchain. The configuration is used to limit the range of blocks processed by Oura.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/finalize_options.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[finalize]\nuntil_hash = <BlockHash>\nmax_block_slot = <SlotNumber>\n```\n\n----------------------------------------\n\nTITLE: Dumping Data to Stdout via TCP - Bash\nDESCRIPTION: This command instructs Oura to connect to a Cardano node at the specified TCP address and port, and output the received blockchain data to standard output. The `--bearer tcp` option explicitly defines that the connection should be established using the TCP protocol.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/dump.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Analyzing Snapshot Confirmation Event\nDESCRIPTION: This snippet focuses on events related to snapshot confirmation. It displays the headId, associated signatures, snapshot details (confirmed transactions, snapshot number, UTxOs), and UTxOs to decommit. Snapshots represent the state of the Hydra Head at a given point and their confirmation signifies the agreement among participants on that state.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"seq\":8,\"signatures\":{\"multiSignature\":[\"e9eaa5edf35b35872c94d9b11b1074e8dc737a24ad5956a7c982ee7eb3d2bfe31def724b8a8e586e30806b50ed55984e331a3fae986bc12e6e705e1138164400\",\"7058aca64e437169677db810048bbfc1e0714bbf348cd43c37c46f3d836dc251e09ca7d2a2d6c89e87b2e7d7f4b110024ecbcec59f694370079a069df1903d03\",\"e55bfb59691c93dfd6343a034cf9c78b03261e7d51a16e61e8fd7257378b563b8de6568abd88ddeb532d109e3ad33c6454b268b6ee6b29849786ac5691898603\"]},\"snapshot\":{\"confirmedTransactions\":[\"65d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e51617\"],\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"snapshotNumber\":1,\"utxo\":{\"65d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e51617#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":2000000}},\"65d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e51617#1\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":23000000}},\"7b27f432e04984dc21ee61e8b1539775cd72cc8669f72cf39aebf6d87e35c697#0\":{\"address\":\"addr_test1vp0yug22dtwaxdcjdvaxr74dthlpunc57cm639578gz7algset3fh\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":50000000}},\"c9a5fb7ca6f55f07facefccb7c5d824eed00ce18719d28ec4c4a2e4041e85d97#0\":{\"address\":\"addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":100000000}}},\"utxoToDecommit\":null,\"version\":0},\"tag\":\"SnapshotConfirmed\",\"timestamp\":\"2024-10-08T13:22:44.360477345Z\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"seq\":10,\"signatures\":{\"multiSignature\":[\"5897602f543c3692cfb691119b2e9feb22e2302333b3200f95fa65feffaa0846abeb293afc8dcbd4ba2ac4b0ba1df729730d2e3b5e69a652f99b52fa15729209\",\"d2268afebbbde31886cf8ce1c7b827f92a1c675bc9dee5603d6d87d7c30d9f7ae46d596095a6e03624d2526fe101b026c9c765abb7e2603b06ffb4fa6ecc6b0e\",\"b3342f10a0678c24bff40ab5d394b8d7382419b826bfbbc3c019a8c4fd20d6d4db9eec29d72fb58ceb09dfe6720ae5c8ade77fd49e2a4b7e884beeb93f027b00\"]},\"snapshot\":{\"confirmedTransactions\":[\"a8117ebbc21da57e580d95bcda7c316eff492c977e61a68fd0aea251348eb4af\"],\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"snapshotNumber\":2,\"utxo\":{\"65d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e51617#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":2000000}},\"7b27f432e04984dc21ee61e8b1539775cd72cc8669f72cf39aebf6d87e35c697#0\":{\"address\":\"addr_test1vp0yug22dtwaxdcjdvaxr74dthlpunc57cm639578gz7algset3fh\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":50000000}},\"a8117ebbc21da57e580d95bcda7c316eff492c977e61a68fd0aea251348eb4af#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":1500000}},\"a8117ebbc21da57e580d95bcda7c316eff492c977e61a68fd0aea251348eb4af#1\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":21500000}},\"c9a5fb7ca6f55f07facefccb7c5d824eed00ce18719d28ec4c4a2e4041e85d97#0\":{\"address\":\"addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":100000000}}},\"utxoToDecommit\":null,\"version\":0},\"tag\":\"SnapshotConfirmed\",\"timestamp\":\"2024-10-08T13:23:18.220733933Z\"}\n```\n\n----------------------------------------\n\nTITLE: UTXO Snapshot Data\nDESCRIPTION: This snippet represents a snapshot of UTXOs (Unspent Transaction Outputs) at a specific point in time within the Oura head. It includes the address, and value (in lovelace) for each UTXO, along with datum and script reference information. This data is essential for tracking asset ownership and state within the Oura head.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"65d64ade1fa9da5099107e3ab9efeea6f305c3c831ca8b9c8f87594289e51617#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":2000000}},\"a8117ebbc21da57e580d95bcda7c316eff492c977e61a68fd0aea251348eb4af#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":1500000}},\"a8117ebbc21da57e580d95bcda7c316eff492c977e61a68fd0aea251348eb4af#1\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":21500000}},\"c9a5fb7ca6f55f07facefccb7c5d824eed00ce18719d28ec4c4a2e4041e85d97#0\":{\"address\":\"addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":100000000}},\"de33eeedc890f11fab3c1d827974fbc69e96cfdce2418573b30c9e0844a738ce#0\":{\"address\":\"addr_test1vp0yug22dtwaxdcjdvaxr74dthlpunc57cm639578gz7algset3fh\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":11000000}},\"de33eeedc890f11fab3c1d827974fbc69e96cfdce2418573b30c9e0844a738ce#1\":{\"address\":\"addr_test1vp0yug22dtwaxdcjdvaxr74dthlpunc57cm639578gz7algset3fh\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":39000000}}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cursor Information from Redis\nDESCRIPTION: These shell commands connect to the Redis instance using the `redis-cli` and retrieve the cursor information stored under the specified key. First, the command `docker exec -it redis redis-cli` is used to execute the redis-cli inside the redis docker container. The `GET key` command then fetches the value associated with the key, representing the persisted cursor information. This allows verifying that Oura correctly persisted the cursor in Redis.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/redis_cursor/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker exec -it redis redis-cli\n127.0.0.1:6379> GET key\n```\n\n----------------------------------------\n\nTITLE: Piping Data to Shell Command via TCP - Bash\nDESCRIPTION: This command pipes the blockchain data received from the Cardano node, connected via TCP, directly into another shell command. In the example provided, the output from `oura dump` is piped to `grep block`. This allows for real-time filtering and processing of the blockchain data stream.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/dump.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp | grep block\n```\n\n----------------------------------------\n\nTITLE: Installing Oura via Git dependency\nDESCRIPTION: This snippet shows how to add the Oura library as a Git dependency directly in the `Cargo.toml` file. This approach can be used to track the latest changes from the repository.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/library.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\noura = { git = \"https://github.com/txpipe/oura.git\" }\n```\n\n----------------------------------------\n\nTITLE: Deploying Oura as Sidecar Container (YAML)\nDESCRIPTION: This YAML configuration demonstrates deploying Oura as a sidecar container within the same pod as a Cardano node. It leverages shared volumes to enable Oura to access the Cardano node's unix socket.  The StatefulSet configuration includes an additional container for Oura and volume mounts for sharing the unix socket and Oura configuration.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/kubernetes.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: cardano-node\nspec:\n\n  # REDACTED: here goes your normal cardano node sts / deployment spec\n\n  template:\n    spec:\n\n      # REDACTED: here goes your normal cardano node pod specs\n\n      containers:\n      - name: main\n\n        # REDACTED: here goes your normal cardano node container properties\n\n        # add a new volume mount to enable the socket to be\n        # consumed by the 2nd container in the pod (Oura)\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n\n      # add a 2nd container pointing to the _Oura_ image\n      - name: oura\n        image: ghcr.io/txpipe/oura:latest\n\n        # we mount the same volume that the main container uses as the source\n        # for the Cardano node unix socket.\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n        - mountPath: /etc/oura\n          name: oura-config\n\n      volumes:\n\n      # REDACTED: here goes any required volume for you normal cardano node setup\n\n      # empty-dir volume to share the unix socket between containers\n      - name: unix-socket\n        emptyDir: {}\n\n      # a config map resource with Oura's config particular for your requirements\n      - name: oura-config\n        configMap:\n          name: oura-config\n```\n\n----------------------------------------\n\nTITLE: Standalone Oura Deployment - ConfigMap (YAML)\nDESCRIPTION: This YAML configuration defines a ConfigMap for Oura's configuration. The ConfigMap contains the `daemon.toml` file, which includes configuration options for the data source, filters, and sink.  It's designed to be used with the standalone Oura deployment.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/kubernetes.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: oura\ndata:\n  daemon.toml: |-\n    [source]\n    # REDACTED: here goes your `source` configuration options\n\n    [[filters]]\n    # REDACTED: here goes your `filters` configuration options\n\n    [sink]\n    # REDACTED: here goes your `sink` configuration options\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From the \"Pre-Production\" testnet\nDESCRIPTION: Connects to the Cardano \"Pre-Production\" testnet node via TCP, specifying the network magic as 'preprod'.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\noura watch preprod-node.world.dev.cardano.org:30000 --bearer tcp --magic preprod\n```\n\n----------------------------------------\n\nTITLE: Standalone Oura Deployment - Deployment (YAML)\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment for Oura. The deployment consists of a single replica, configured with resource requests and limits, environment variables, and volume mounts. The `args` section specifies the \"daemon\" command to start Oura in daemon mode.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/kubernetes.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: oura\n  labels:\n    app: oura\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: oura\n  template:\n    metadata:\n      labels:\n        app: oura\n    spec:\n      containers:\n      - name: main\n        image: ghcr.io/txpipe/oura:latest\n        env:\n          - name: \"RUST_LOG\"\n            value: \"info\"\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n          limits:\n            memory: 200Mi\n            cpu: 200m\n        args:\n          - \"daemon\"\n        volumeMounts:\n          - mountPath: /etc/oura\n            name: config\n      volumes:\n      - name: config\n        configMap:\n          name: oura\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Oura\nDESCRIPTION: This snippet clones the Oura repository, navigates to the Oura directory, and installs the application using cargo. The `--all-features` flag enables all features during installation, and `--path .` specifies the current directory as the source.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/from_source.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:txpipe/oura.git\ncd oura\ncargo install --all-features --path .\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From Preview Testnet\nDESCRIPTION: Connects to the Cardano \"Preview\" testnet and displays live blockchain data.  The `--magic preview` option must be set for the `preview` testnet.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\noura watch preview-node.world.dev.cardano.org:30002 --bearer tcp --magic preview\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Filter with variant_in Predicate\nDESCRIPTION: This snippet demonstrates how to configure the Selection filter to only allow 'Block' and 'Transaction' events to pass through the pipeline.  The `variant_in` predicate checks if the event's variant is present in the provided string array. It requires the `type` to be set to \"Selection\" and specifies the `variant_in` predicate with the desired variants as arguments.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/filters/selection.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[filters]]\n type = \"Selection\"\n\n[filters.check]\n predicate = \"variant_in\"\n argument = [\"Block\", \"Transaction\"]\n```\n\n----------------------------------------\n\nTITLE: Configure GCP Cloud Function Sink (TOML)\nDESCRIPTION: Configures the Oura sink to send events to a Google Cloud Function.  Specifies the function's name, project ID, region, timeout, error policy, authorization, and custom headers.  It also defines a retry policy with maximum retries, backoff unit, factor, and maximum backoff time.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/gcp_cloudfunction.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"GcpCloudFunction\"\nname = \"oura\"\nproject_id = \"XXX\"\nregion = \"us-west-2\"\ntimeout = 30000\nerror_policy = \"Continue\"\nauthorization = \"user:pass\"\n\n[sink.headers]\nextra_header_1 = \"abc\"\nextra_header_2 = \"123\"\n\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n```\n\n----------------------------------------\n\nTITLE: N2C Source Configuration with Socket Path (TOML)\nDESCRIPTION: This snippet shows an example configuration for connecting to a local Cardano node through unix sockets using the N2C source in TOML. It sets the 'type' to \"N2C\" and provides a specific 'socket_path' to the Cardano node's socket file, enabling the connection and data retrieval.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sources/n2c.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2C\"\nsocket_path = \"/opt/cardano/cnode/sockets/node0.socket\"\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From Local Testnet Node\nDESCRIPTION: Connects to a local Cardano testnet node via a Unix socket and displays live blockchain data. The `--magic testnet` option specifies the testnet network.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\noura watch /opt/cardano/cnode/sockets/node0.socket --bearer unix --magic testnet\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From the \"Preview\" testnet\nDESCRIPTION: Connects to the Cardano \"Preview\" testnet node via TCP, specifying the network magic as 'preview'.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\noura watch preview-node.world.dev.cardano.org:30002 --bearer tcp --magic preview\n```\n\n----------------------------------------\n\nTITLE: Dumping Data to Rotating Files via TCP - Bash\nDESCRIPTION: This command configures Oura to connect to a Cardano node via TCP and write blockchain data into a set of rotating log files.  The `--output ./mainnet-logs` option specifies a directory where log files will be created with a timestamp suffix. The files are rotated, and old files are compressed with gzip. This setup is suitable for data archival purposes.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/dump.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noura dump relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp --output ./mainnet-logs\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From The Tip Of A Local Testnet Node\nDESCRIPTION: Connects to a local Cardano testnet node using a Unix socket. The network magic is set to 'testnet' to ensure compatibility.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/watch.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\noura watch /opt/cardano/cnode/sockets/node0.socket --bearer unix --magic testnet\n```\n\n----------------------------------------\n\nTITLE: Adding Oura dependency via Git in Cargo.toml\nDESCRIPTION: This shows how to add Oura as a dependency directly from the GitHub repository in your `Cargo.toml` file. This method allows you to use the latest version of the library or a specific branch. Ensure your project is set up to manage Rust dependencies correctly.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/pages/v2/usage/library.mdx#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\noura = { git = \"https://github.com/txpipe/oura.git\" }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Head Initialization Event\nDESCRIPTION: This snippet represents the initialization of a Hydra Head. It contains the headId, the list of participating parties (identified by their vkeys), the sequence number, the tag (HeadIsInitializing), and the timestamp. This is a crucial step in setting up a new Hydra Head.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"parties\":[{\"vkey\":\"b37aabd81024c043f53a069c91e51a5b52e4ea399ae17ee1fe3cb9c44db707eb\"},{\"vkey\":\"f68e5624f885d521d2f43c3959a0de70496d5464bd3171aba8248f50d5d72b41\"},{\"vkey\":\"7abcda7de6d883e7570118c1ccc8ee2e911f2e628a41ab0685ffee15f39bba96\"}],\"seq\":2,\"tag\":\"HeadIsInitializing\",\"timestamp\":\"2024-10-08T13:22:05.725778923Z\"}\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From Remote Relay Node\nDESCRIPTION: Connects to a remote Cardano relay node using TCP and displays live blockchain data.  It uses the default `mainnet` magic number.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noura watch relays-new.cardano-mainnet.iohk.io:3001 --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Adding Oura dependency via Cargo\nDESCRIPTION: This command demonstrates how to add the Oura library as a dependency to your Rust project using the `cargo add` command.  This assumes you have cargo installed and configured correctly. It will download the crate from crates.io and add it to your `Cargo.toml` file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/pages/v2/usage/library.mdx#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ncargo add oura\n```\n\n----------------------------------------\n\nTITLE: Running Oura in daemon mode\nDESCRIPTION: This shell command starts Oura in daemon mode using the specified configuration file. The `RUST_LOG=info` environment variable sets the logging level to info. The command executes the Oura binary with the `daemon` subcommand and provides the path to the configuration file.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/guides/cardano_2_kafka.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nRUST_LOG=info oura daemon --config cardano2kafka.toml\n```\n\n----------------------------------------\n\nTITLE: Analyzing Head Is Open Event\nDESCRIPTION: This snippet shows the event when a Hydra Head transitions to the open state.  It shows the headId, the sequence number, the tag (HeadIsOpen), the timestamp, and the combined UTxOs available in the Head. This event signifies that the initial commitment phase is complete and transactions can now be submitted.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"seq\":6,\"tag\":\"HeadIsOpen\",\"timestamp\":\"2024-10-08T13:22:30.520745142Z\",\"utxo\":{\"7b27f432e04984dc21ee61e8b1539775cd72cc8669f72cf39aebf6d87e35c697#0\":{\"address\":\"addr_test1vp0yug22dtwaxdcjdvaxr74dthlpunc57cm639578gz7algset3fh\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":50000000}},\"c9a5fb7ca6f55f07facefccb7c5d824eed00ce18719d28ec4c4a2e4041e85d97#0\":{\"address\":\"addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":100000000}},\"f0a39560ea80ccc68e8dffb6a4a077c8927811f06c5d9058d0fa2d1a8d047d20#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":25000000}}}}\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Command-Line Arguments\nDESCRIPTION: This command runs the Oura Docker image and passes specific command-line arguments to the Oura executable. It monitors the specified relay and uses the TCP bearer. This allows for customized Oura behavior within the Docker container.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/docker.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it ghcr.io/txpipe/oura:latest \\\n    watch relays-new.cardano-mainnet.iohk.io:3001 \\\n    --bearer tcp\n```\n\n----------------------------------------\n\nTITLE: Analyzing Committed UTxO Events\nDESCRIPTION: This snippet describes a UTxO commitment event within a Hydra Head. It includes the headId, the party making the commitment (identified by their vkey), the sequence number, the tag (Committed), the timestamp, and details about the committed UTxO. Understanding commitment events is essential for tracking the assets locked within the Hydra Head.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"party\":{\"vkey\":\"b37aabd81024c043f53a069c91e51a5b52e4ea399ae17ee1fe3cb9c44db707eb\"},\"seq\":3,\"tag\":\"Committed\",\"timestamp\":\"2024-10-08T13:22:11.016254447Z\",\"utxo\":{\"c9a5fb7ca6f55f07facefccb7c5d824eed00ce18719d28ec4c4a2e4041e85d97#0\":{\"address\":\"addr_test1vp5cxztpc6hep9ds7fjgmle3l225tk8ske3rmwr9adu0m6qchmx5z\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":100000000}}}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"party\":{\"vkey\":\"f68e5624f885d521d2f43c3959a0de70496d5464bd3171aba8248f50d5d72b41\"},\"seq\":4,\"tag\":\"Committed\",\"timestamp\":\"2024-10-08T13:22:18.915120931Z\",\"utxo\":{\"7b27f432e04984dc21ee61e8b1539775cd72cc8669f72cf39aebf6d87e35c697#0\":{\"address\":\"addr_test1vp0yug22dtwaxdcjdvaxr74dthlpunc57cm639578gz7algset3fh\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":50000000}}}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"headId\":\"84e657e3dd5241caac75b749195f78684023583736cc08b2896290ab\",\"party\":{\"vkey\":\"7abcda7de6d883e7570118c1ccc8ee2e911f2e628a41ab0685ffee15f39bba96\"},\"seq\":5,\"tag\":\"Committed\",\"timestamp\":\"2024-10-08T13:22:30.313144555Z\",\"utxo\":{\"f0a39560ea80ccc68e8dffb6a4a077c8927811f06c5d9058d0fa2d1a8d047d20#0\":{\"address\":\"addr_test1vqx5tu4nzz5cuanvac4t9an4djghrx7hkdvjnnhstqm9kegvm6g6c\",\"datum\":null,\"datumhash\":null,\"inlineDatum\":null,\"referenceScript\":null,\"value\":{\"lovelace\":25000000}}}}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Oura in Docker\nDESCRIPTION: This command runs the Oura Docker image and passes the 'daemon --help' arguments to the Oura executable. This allows users to access specific features or commands within the Docker container.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/docker.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it ghcr.io/txpipe/oura:latest \\\n    daemon --help\n```\n\n----------------------------------------\n\nTITLE: Analyzing Greetings Event\nDESCRIPTION: This snippet logs a Greetings event, providing information about the Hydra node version, head status, and the node's verification key (vkey). Understanding this data allows verification of node compatibility and operational state.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"headStatus\":\"Idle\",\"hydraNodeVersion\":\"0.19.0-1ffe7c6b505e3f38b5546ae5e5b97de26bc70425\",\"me\":{\"vkey\":\"b37aabd81024c043f53a069c91e51a5b52e4ea399ae17ee1fe3cb9c44db707eb\"},\"seq\":2,\"tag\":\"Greetings\",\"timestamp\":\"2024-10-08T13:21:28.141876427Z\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Versioned Oura Docker Image\nDESCRIPTION: This example demonstrates how to specify a specific version of the Oura Docker image by replacing the `latest` tag with the desired version (e.g., `v2.0.0-alpha.1`). This is recommended for production environments to avoid unexpected behavior from new releases.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/docker.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nghcr.io/txpipe/oura:v2.0.0-alpha.1\n```\n\n----------------------------------------\n\nTITLE: Oura Byron Era Finalize Example\nDESCRIPTION: Illustrates how to configure Oura to stop syncing at a specific block hash within the Byron era. The `until_hash` parameter is set to the block hash, effectively limiting Oura's synchronization to blocks preceding this hash. This example demonstrates stopping the sync at a specific point in the Byron era chain.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/advanced/finalize_options.mdx#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[finalize]\nuntil_hash = \"aa83acbf5904c0edfe4d79b3689d3d00fcfc553cf360fd2229b98d464c28e9de\"\n```\n\n----------------------------------------\n\nTITLE: Example LegacyV1 Output in JSON\nDESCRIPTION: This JSON snippet illustrates the data structure output by the LegacyV1 filter with all `include_*` settings disabled. It includes the event type, point (slot and hash), and record containing context information like block and transaction details. The `...` indicates that the record contains additional data.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/filters/legacy_v1.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"event\": \"apply\",\n  \"point\": {\n    \"slot\": 100110525,\n    \"hash\": \"c808fc4142c5f10a2a6d0922edbd23972100d7d22e2255206bd05e968cc045f1\"\n  },\n  \"record\": {\n    \"context\": {\n      \"block_hash\": \"c808fc4142c5f10a2a6d0922edbd23972100d7d22e2255206bd05e968cc045f1\",\n      \"block_number\": 9142145,\n      \"slot\": 100110525,\n      \"timestamp\": 1691676816,\n      \"tx_idx\": 6,\n      \"tx_hash\": \"4329140c6711f2197c8c81bfff4b75fb95892375050dafda30ba146476ca3d65\",\n      \"input_idx\": null,\n      \"output_idx\": null,\n      \"output_address\": null,\n      \"certificate_idx\": null\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon with Config\nDESCRIPTION: This command starts Oura in daemon mode using a custom configuration file specified by the `--config` option.  The `my_config.toml` file must exist and contain valid Oura configuration settings for source, intersect, filters, and sink.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/daemon.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noura daemon --config my_config.toml\n```\n\n----------------------------------------\n\nTITLE: Transaction CBOR Hex Decoding\nDESCRIPTION: This snippet represents the CBOR hex encoding of a transaction within the Oura context. It's a hexadecimal string that represents the serialized transaction data, ready to be decoded and processed. The 'description' field indicates it adheres to the Ledger Cddl Format.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"cborHex\":\"84a300d9010281825820c9a5fb7ca6f55f07facefccb7c5d824eed00ce18719d28ec4c4a2e4041e85d9700018282581d6069830961c6af9095b0f2648dff31fa9545d8f0b6623db865eb78fde81a00c65d4082581d6069830961c6af9095b0f2648dff31fa9545d8f0b6623db865eb78fde81a052f83c00200a100d9010281825820f953b2d6b6f319faa9f8462257eb52ad73e33199c650f0755e279e21882399c05840ac8f1632d9a636d3627328ffd09cd32e1b654cbf318f0ce499a9870b05530041aa0badf07cd43fec8f1456537ada71227bea8123c1ed641ae3cb22b7313d5f08f5f6\",\"description\":\"Ledger Cddl Format\",\"txId\":\"bf4ba0d28cc39abee99b7b2bda7d104871e3e979ebfdc531ec34c490f85d1d74\",\"type\":\"Witnessed Tx ConwayEra\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon with Custom Config\nDESCRIPTION: This command starts Oura in daemon mode and specifies a custom TOML configuration file to use. The configuration file defines the source, filters, and sink for the data pipeline.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/daemon.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noura daemon --config my_config.toml\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon with Cursor\nDESCRIPTION: This command starts Oura in daemon mode and specifies a custom cursor to use as the starting point in the chain. The cursor is a reference to a specific slot and block hash.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/usage/daemon.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\noura daemon --cursor 56134714,2d2a5503c16671ac7d5296f8e6bfeee050b2c2900a7d8c97b36c434667eb99d9\n```\n\n----------------------------------------\n\nTITLE: Starting Oura Daemon\nDESCRIPTION: This command starts Oura in daemon mode using the default configuration file located at `/etc/oura/daemon.toml`. It runs Oura in the background, processing data without live output.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/daemon.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\noura daemon\n```\n\n----------------------------------------\n\nTITLE: Watch Data Starting At Particular Block\nDESCRIPTION: Connects to a remote Cardano node and starts displaying data from a specific block identified by its slot and hash. Requires the `--bearer tcp` option.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\noura watch relays-new.cardano-mainnet.iohk.io:3001 \\\n    --bearer tcp \\\n    --since 49159253,d034a2d0e4c3076f57368ed59319010c265718f0923057f8ff914a3b6bfd1314\n```\n\n----------------------------------------\n\nTITLE: Configuring Min Depth for N2N Source Stage in Oura (TOML)\nDESCRIPTION: This configuration snippet demonstrates how to set the `min_depth` parameter for a node-to-node (N2N) source stage in Oura using TOML. The `min_depth` setting controls how many blocks deep a block must be before it is processed, reducing the chance of rollbacks at the cost of increased latency. The address, magic, and type also determine network connectivity and operational mode.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/advanced/rollback_buffer.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[source]\ntype = \"N2N\"\naddress = [\"Tcp\", \"relays-new.cardano-mainnet.iohk.io:3001\"]\nmagic = \"mainnet\"\nmin_depth = 6\n```\n\n----------------------------------------\n\nTITLE: Watch Live Data From Local Node Via Unix Socket\nDESCRIPTION: Connects to a local Cardano node via a Unix socket.  The `--bearer unix` option is used. It uses the default `mainnet` magic number.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/usage/watch.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\noura watch /opt/cardano/cnode/sockets/node0.socket --bearer unix\n```\n\n----------------------------------------\n\nTITLE: Installing Oura Binary Release on MacOS\nDESCRIPTION: Downloads and installs Oura's binary release for MacOS using curl to fetch the release, tar to extract it, and mv to move the executable to /usr/local/bin.  Requires curl and tar utilities to be installed.  Downloads the binary release from a URL, extracts the archive, and places the 'oura' executable in the /usr/local/bin directory.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/binary_release.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2iH | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Terminal Sink Configuration\nDESCRIPTION: This TOML snippet configures a Terminal sink. It specifies the sink type as \"Terminal\", sets a minimum throttle span of 500 milliseconds, and enables text wrapping for long output lines.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/terminal.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Terminal\"\nthrottle_min_span_millis = 500\nwrap = true\n```\n\n----------------------------------------\n\nTITLE: Installing Oura Binary Release on GNU/Linux\nDESCRIPTION: Downloads and installs Oura's binary release for GNU/Linux using curl to fetch the release, tar to extract it, and mv to move the executable to /usr/local/bin. Requires curl and tar utilities to be installed. Downloads the binary release from a URL, extracts the archive, and places the 'oura' executable in the /usr/local/bin directory.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/binary_release.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2ix | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Installing Oura Binary on GNU/Linux\nDESCRIPTION: This shell command downloads, extracts, and installs the Oura binary for GNU/Linux. It uses curl to download the tarball, tar to extract it, and mv to move the executable to /usr/local/bin. Requires curl and tar.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/binary_release.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2ix | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Terminal Sink Configuration TOML\nDESCRIPTION: This TOML configuration defines the settings for a Terminal sink. It includes the type, throttle duration, and text wrapping behavior. The 'type' is mandatory, while 'throttle_min_span_millis' and 'wrap' are optional parameters that control the output frequency and display style, respectively.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/terminal.mdx#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[sink]\ntype = \"Terminal\"\nthrottle_min_span_millis = 500\nwrap = true\n```\n\n----------------------------------------\n\nTITLE: Installing Oura Binary on MacOS\nDESCRIPTION: This shell command downloads, extracts, and installs the Oura binary for MacOS. It uses curl to download the tarball, tar to extract it, and mv to move the executable to /usr/local/bin. Requires curl and tar.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/binary_release.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://git.io/JD2iH | \\\n    tar xz -C /tmp && mv /tmp/oura /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: GCP PubSub Sink Configuration TOML\nDESCRIPTION: Defines the configuration for the GcpPubSub sink, including the topic name and retry policy. The retry policy specifies the maximum number of retries, the backoff unit, the backoff factor, and the maximum backoff time.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/sinks/gcp_pubsub.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"GcpPubSub\"\ntopic = \"test\"\n\n[sink.retry_policy]\nmax_retries = 30\nbackoff_unit =  5000\nbackoff_factor = 2\nmax_backoff = 100000\n```\n\n----------------------------------------\n\nTITLE: Running Oura with Docker\nDESCRIPTION: This command pulls and runs the latest Oura Docker image from Github Packages. It executes the Oura executable, displaying the command-line help message.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/docker.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run ghcr.io/txpipe/oura:latest\n```\n\n----------------------------------------\n\nTITLE: Stdout Sink Configuration\nDESCRIPTION: This TOML configuration defines a sink of type \"Stdout\".  The `type` parameter is set to \"Stdout\" to indicate that the sink should output data to the standard output stream.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/sinks/stdout.mdx#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[sink]\ntype = \"Stdout\"\n```\n\n----------------------------------------\n\nTITLE: Running Oura Docker Image\nDESCRIPTION: This command pulls and runs the latest Oura Docker image from Github Packages.  It executes the Oura executable and displays the command-line help message. No specific configuration or arguments are passed, relying on default settings.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v1/installation/docker.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run ghcr.io/txpipe/oura:latest\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Tables\nDESCRIPTION: This command connects to a PostgreSQL database on localhost, port 5432, using the 'postgres' user. It executes the SQL commands in the 'init.sql' file to create the required tables.\nSOURCE: https://github.com/txpipe/oura/blob/main/examples/postgresql/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\npsql -h localhost -p 5432 -U postgres -f init.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Oura as a Sidecar Container in Kubernetes\nDESCRIPTION: This YAML defines Oura as a sidecar container within a Kubernetes StatefulSet alongside a Cardano node. It focuses on sharing the Unix socket between the main Cardano node container and the Oura container via volume mounts. The configuration allows Oura to access the Cardano node's socket for monitoring.\nSOURCE: https://github.com/txpipe/oura/blob/main/docs/v2/installation/kubernetes.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: cardano-node\nspec:\n\n  # REDACTED: here goes your normal cardano node sts / deployment spec\n\n  template:\n    spec:\n\n      # REDACTED: here goes your normal cardano node pod specs\n\n      containers:\n      - name: main\n\n        # REDACTED: here goes your normal cardano node container properties\n\n        # add a new volume mount to enable the socket to be\n        # consumed by the 2nd container in the pod (Oura)\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n\n      # add a 2nd container pointing to the _Oura_ image\n      - name: oura\n        image: ghcr.io/txpipe/oura:latest\n\n        # we mount the same volume that the main container uses as the source\n        # for the Cardano node unix socket.\n        volumeMounts:\n        - mountPath: /opt/cardano/cnode/sockets/node0.socket\n          name: unix-socket\n        - mountPath: /etc/oura\n          name: oura-config\n\n      volumes:\n\n      # REDACTED: here goes any required volume for you normal cardano node setup\n\n      # empty-dir volume to share the unix socket between containers\n      - name: unix-socket\n        emptyDir: {}\n\n      # a config map resource with Oura's config particular for your requirements\n      - name: oura-config\n        configMap:\n          name: oura-config\n```\n\n----------------------------------------\n\nTITLE: Analyzing Peer Connection Events\nDESCRIPTION: This snippet represents peer connection events within the Hydra Head.  It records the peer ID, sequence number, tag (PeerConnected), and timestamp of the connection event.  These events are essential for understanding the network topology and connectivity within the Hydra Head.\nSOURCE: https://github.com/txpipe/oura/blob/main/tests/hydra/scenario_2.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"peer\":\"2\",\"seq\":0,\"tag\":\"PeerConnected\",\"timestamp\":\"2024-10-08T13:19:06.954897681Z\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"peer\":\"3\",\"seq\":1,\"tag\":\"PeerConnected\",\"timestamp\":\"2024-10-08T13:19:06.98647342Z\"}\n```"
  }
]