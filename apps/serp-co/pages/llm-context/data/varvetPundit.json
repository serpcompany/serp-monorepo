[
  {
    "owner": "varvet",
    "repo": "pundit",
    "content": "TITLE: Including Pundit Authorization in Application Controller\nDESCRIPTION: Code to include the Pundit authorization module in your Rails application controller. This enables authorization functionality throughout your application.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  include Pundit::Authorization\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Pundit via Bundler in Ruby\nDESCRIPTION: Command to install the Pundit gem using Bundler. This adds the gem to your Gemfile and installs it.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbundle add pundit\n```\n\n----------------------------------------\n\nTITLE: Generating Pundit Installation Files with Rails Generator\nDESCRIPTION: Command to run the Pundit installer generator which creates an application policy with useful defaults.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrails g pundit:install\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Post Policy Class in Ruby\nDESCRIPTION: Example of a basic Pundit policy class for Post objects. This policy allows updating a post if the user is an admin or if the post is unpublished.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy\n  attr_reader :user, :post\n\n  def initialize(user, post)\n    @user = user\n    @post = post\n  end\n\n  def update?\n    user.admin? || !post.published?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Application Policy\nDESCRIPTION: Sets up a base ApplicationPolicy with user authentication checking for both policies and scopes\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationPolicy\n  def initialize(user, record)\n    raise Pundit::NotAuthorizedError, \"must be logged in\" unless user\n    @user   = user\n    @record = record\n  end\n\n  class Scope\n    attr_reader :user, :scope\n\n    def initialize(user, scope)\n      raise Pundit::NotAuthorizedError, \"must be logged in\" unless user\n      @user = user\n      @scope = scope\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing a User in a Controller Action\nDESCRIPTION: Example of using Pundit's authorize method in a controller action to check if the current user is allowed to update a post.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef update\n  @post = Post.find(params[:id])\n  authorize @post\n  if @post.update(post_params)\n    redirect_to @post\n  else\n    render :edit\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Policy that Inherits from ApplicationPolicy\nDESCRIPTION: Example of a Pundit policy that inherits from ApplicationPolicy, allowing for shared functionality between policies.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  def update?\n    user.admin? or not record.published?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy Scope for Filtering Records\nDESCRIPTION: Example of a Pundit policy scope class that filters posts based on user permissions. Admin users see all posts while regular users only see published posts.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  class Scope\n    def initialize(user, scope)\n      @user  = user\n      @scope = scope\n    end\n\n    def resolve\n      if user.admin?\n        scope.all\n      else\n        scope.where(published: true)\n      end\n    end\n\n    private\n\n    attr_reader :user, :scope\n  end\n\n  def update?\n    user.admin? or not record.published?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Policy Scopes in Controllers\nDESCRIPTION: Examples of using Pundit's policy_scope method in controller actions to filter records based on user permissions.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  @posts = policy_scope(Post)\nend\n\ndef show\n  @post = policy_scope(Post).find(params[:id])\nend\n```\n\n----------------------------------------\n\nTITLE: Using Pundit Policies in Views for Conditional Display\nDESCRIPTION: Example of using Pundit's policy method in a view to conditionally show a link based on user permissions.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_12\n\nLANGUAGE: erb\nCODE:\n```\n<% if policy(@post).update? %>\n  <%= link_to \"Edit post\", edit_post_path(@post) %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authorization Verification in Rails\nDESCRIPTION: Sets up basic authorization verification in ApplicationController using Pundit's verify_authorized method\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  include Pundit::Authorization\n  after_action :verify_authorized\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying a Different Permission to Check in Pundit\nDESCRIPTION: Example of using Pundit's authorize method with a specific permission name that differs from the action name.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef publish\n  @post = Post.find(params[:id])\n  authorize @post, :update?\n  @post.publish!\n  redirect_to @post\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Authorization Errors in Rails\nDESCRIPTION: Sets up error handling for Pundit authorization failures with custom error messages\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  include Pundit::Authorization\n\n  rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized\n\n  private\n\n  def user_not_authorized\n    flash[:alert] = \"You are not authorized to perform this action.\"\n    redirect_back_or_to(root_path)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Permitted Attributes in Pundit Policy\nDESCRIPTION: Demonstrates how to define a permitted_attributes method in a policy to control which attributes a user can update. This integrates Pundit with Rails' strong parameters feature.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\n# app/policies/post_policy.rb\nclass PostPolicy < ApplicationPolicy\n  def permitted_attributes\n    if user.admin? || user.owner_of?(post)\n      [:title, :body, :tag_list]\n    else\n      [:tag_list]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Permitted Attributes from Controller Using Policy\nDESCRIPTION: Shows how to retrieve permitted attributes from a policy in a controller action. This demonstrates one way to integrate Pundit's permitted attributes with Rails controllers.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/posts_controller.rb\nclass PostsController < ApplicationController\n  def update\n    @post = Post.find(params[:id])\n    if @post.update(post_params)\n      redirect_to @post\n    else\n      render :edit\n    end\n  end\n\n  private\n\n  def post_params\n    params.require(:post).permit(policy(@post).permitted_attributes)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Pundit's Permitted Attributes Helper in Controllers\nDESCRIPTION: Demonstrates Pundit's permitted_attributes helper method, which simplifies retrieval of permitted attributes from policies. This provides a more concise way to use permitted attributes.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/posts_controller.rb\nclass PostsController < ApplicationController\n  def update\n    @post = Post.find(params[:id])\n    if @post.update(permitted_attributes(@post))\n      redirect_to @post\n    else\n      render :edit\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Headless Policy Without a Corresponding Model\nDESCRIPTION: Example of a Pundit policy that doesn't correspond to a model class, used for authorization that doesn't involve a specific record type.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# app/policies/dashboard_policy.rb\nclass DashboardPolicy\n  attr_reader :user\n\n  # `_record` in this example will be :dashboard\n  def initialize(user, _record)\n    @user = user\n  end\n\n  def show?\n    user.admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Headless Policies in Controllers\nDESCRIPTION: Example of using a headless Pundit policy in a controller by passing a symbol instead of a model instance.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# In controllers\ndef show\n  authorize :dashboard, :show?\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Headless Policies in Views\nDESCRIPTION: Example of using a headless Pundit policy in a view to conditionally display UI elements based on permissions.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_15\n\nLANGUAGE: erb\nCODE:\n```\n# In views\n<% if policy(:dashboard).show? %>\n  <%= link_to 'Dashboard', dashboard_path %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Overriding the Policy Class in Pundit\nDESCRIPTION: Example of using Pundit's authorize method with a specified policy class that differs from the default naming convention.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  @publication = find_publication # assume this method returns any model that behaves like a publication\n  # @publication.class => Post\n  authorize @publication, policy_class: PublicationPolicy\n  @publication.publish!\n  redirect_to @publication\nend\n```\n\n----------------------------------------\n\nTITLE: Chaining Pundit's Authorize Method in Controllers\nDESCRIPTION: Examples showing how to chain Pundit's authorize method with other operations since it returns the authorized instance.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  @user = authorize User.find(params[:id])\nend\n\n# return the record even for namespaced policies\ndef show\n  @user = authorize [:admin, User.find(params[:id])]\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy Scope that Inherits from ApplicationPolicy::Scope\nDESCRIPTION: Example of a Pundit policy scope that inherits from a base scope class for shared functionality.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  class Scope < ApplicationPolicy::Scope\n    def resolve\n      if user.admin?\n        scope.all\n      else\n        scope.where(published: true)\n      end\n    end\n  end\n\n  def update?\n    user.admin? or not record.published?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding the Policy Scope Class in Controllers\nDESCRIPTION: Example of using Pundit's policy_scope method with a specified scope class that differs from the default naming convention.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  # publication_class => Post\n  @publications = policy_scope(publication_class, policy_scope_class: PublicationPolicy::Scope)\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing with Namespaced Policies in Pundit\nDESCRIPTION: Shows how to use namespaced policies with Pundit's authorize and policy_scope helpers. Demonstrates accessing regular policies, admin policies, and deeply nested namespaced policies.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nauthorize(post)                   # => will look for a PostPolicy\nauthorize([:admin, post])         # => will look for an Admin::PostPolicy\nauthorize([:foo, :bar, post])     # => will look for a Foo::Bar::PostPolicy\n\npolicy_scope(Post)                # => will look for a PostPolicy::Scope\npolicy_scope([:admin, Post])      # => will look for an Admin::PostPolicy::Scope\npolicy_scope([:foo, :bar, Post])  # => will look for a Foo::Bar::PostPolicy::Scope\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Controllers with Automatic Namespacing in Pundit\nDESCRIPTION: Demonstrates how to override the policy_scope and authorize helpers in an AdminController to automatically apply namespacing. This simplifies using namespaced policies in admin controllers.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass AdminController < ApplicationController\n  def policy_scope(scope)\n    super([:admin, scope])\n  end\n\n  def authorize(record, query = nil)\n    super([:admin, record], query)\n  end\nend\n\nclass Admin::PostController < AdminController\n  def index\n    policy_scope(Post)\n  end\n\n  def show\n    post = authorize Post.find(params[:id])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authorizing a Controller Action Without a Model Instance\nDESCRIPTION: Example of using Pundit's authorize method with a class instead of an instance when no specific record is being authorized.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndef admin_list\n  authorize Post # we don't have a particular post to authorize\n  # Rest of controller action\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy Method for Class-Level Authorization\nDESCRIPTION: Example of a Pundit policy method used for authorizing actions that don't involve a specific model instance.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostPolicy < ApplicationPolicy\n  def admin_list?\n    user.admin?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Policy Scopes in Views\nDESCRIPTION: Example of using Pundit's policy_scope method in a view to iterate over a filtered collection of records.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_21\n\nLANGUAGE: erb\nCODE:\n```\n<% policy_scope(@user.posts).each do |post| %>\n  <p><%= link_to post.title, post_path(post) %></p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Policy Verification\nDESCRIPTION: Demonstrates how to conditionally verify policies based on action type using verify_policy_scoped and verify_authorized\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  include Pundit::Authorization\n  after_action :verify_pundit_authorization\n\n  def verify_pundit_authorization\n    if action_name == \"index\"\n      verify_policy_scoped\n    else\n      verify_authorized\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Authorization Bypass Example\nDESCRIPTION: Shows how to skip authorization verification conditionally within a controller action\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  record = Record.find_by(attribute: \"value\")\n  if record.present?\n    authorize record\n  else\n    skip_authorization\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Pundit User\nDESCRIPTION: Demonstrates how to customize the user object used by Pundit for authorization\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\ndef pundit_user\n  User.find_by_other_means\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef pundit_user\n  Current.user\nend\n```\n\n----------------------------------------\n\nTITLE: Handling User Switching in Pundit\nDESCRIPTION: Implements user switching functionality with proper Pundit context reset\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController\n  include Pundit::Authorization\n\n  def switch_user_to(user)\n    terminate_session if authenticated?\n    start_new_session_for user\n    pundit_reset!\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Context for Pundit\nDESCRIPTION: Shows how to create a custom context object that wraps both user and IP address for authorization. This demonstrates extending Pundit to handle more complex authorization requirements.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserContext\n  attr_reader :user, :ip\n\n  def initialize(user, ip)\n    @user = user\n    @ip   = ip\n  end\nend\n\nclass ApplicationController\n  include Pundit::Authorization\n\n  def pundit_user\n    UserContext.new(current_user, request.ip)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Action-Specific Permitted Attributes in Pundit Policies\nDESCRIPTION: Shows how to define different permitted attributes based on the current controller action. This allows for more granular control of attribute permissions.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n# app/policies/post_policy.rb\nclass PostPolicy < ApplicationPolicy\n  def permitted_attributes_for_create\n    [:title, :body]\n  end\n\n  def permitted_attributes_for_edit\n    [:body]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Manual Policy Scope Instantiation in Controllers\nDESCRIPTION: Example of how to manually instantiate a Pundit policy scope, equivalent to using the policy_scope helper method.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  @publications = PublicationPolicy::Scope.new(current_user, Post).resolve\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Policy Class\nDESCRIPTION: Demonstrates how to explicitly specify a policy class for a model using class and instance methods\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post\n  def self.policy_class\n    PostablePolicy\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post\n  def policy_class\n    PostablePolicy\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Pundit Policies\nDESCRIPTION: Command to generate new policy files using Rails generator\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nrails g pundit:policy post\n```\n\n----------------------------------------\n\nTITLE: Implementing NilClass Policy\nDESCRIPTION: Creates a policy for handling nil objects with defined scope and show behavior\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass NilClassPolicy < ApplicationPolicy\n  class Scope < ApplicationPolicy::Scope\n    def resolve\n      raise Pundit::NotDefinedError, \"Cannot scope NilClass\"\n    end\n  end\n\n  def show?\n    false # Nobody can see nothing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages with I18n\nDESCRIPTION: Implements internationalized custom error messages for authorization failures\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized\n\n private\n\n def user_not_authorized(exception)\n   policy_name = exception.policy.class.to_s.underscore\n\n   flash[:error] = t \"#{policy_name}.#{exception.query}\", scope: \"pundit\", default: :default\n   redirect_back_or_to(root_path)\n end\nend\n```\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n pundit:\n   default: 'You cannot perform this action.'\n   post_policy:\n     update?: 'You cannot edit this post!'\n     create?: 'You cannot create posts!'\n```\n\n----------------------------------------\n\nTITLE: Manual Policy Retrieval\nDESCRIPTION: Shows how to manually retrieve policies and scopes outside controllers\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nPundit.policy!(user, post)\nPundit.policy(user, post)\n\nPundit.policy_scope!(user, Post)\nPundit.policy_scope(user, Post)\n```\n\n----------------------------------------\n\nTITLE: Overriding Pundit Parameter Methods in Controllers\nDESCRIPTION: Demonstrates how to override the pundit_params_for method to customize parameter handling. Includes examples for non-required parameters and JSON API spec compatibility.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\ndef pundit_params_for(record)\n  params.require(PolicyFinder.new(record).param_key)\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Pundit Parameter Handling Examples\nDESCRIPTION: Shows different approaches to customizing parameter handling in Pundit, including working with optional parameters and JSON API format.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n# If you don't want to use require\ndef pundit_params_for(record)\n  params.fetch(PolicyFinder.new(record).param_key, {})\nend\n\n# If you are using something like the JSON API spec\ndef pundit_params_for(_record)\n  params.fetch(:data, {}).fetch(:attributes, {})\nend\n```\n\n----------------------------------------\n\nTITLE: Pundit Authorization Underlying Implementation Example\nDESCRIPTION: Illustration of what Pundit's authorize method does under the hood, showing how it instantiates a policy class and checks the appropriate permission.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nunless PostPolicy.new(current_user, @post).update?\n  raise Pundit::NotAuthorizedError, \"not allowed to PostPolicy#update? this Post\"\nend\n```\n\n----------------------------------------\n\nTITLE: Writing RSpec Tests for Pundit Policies\nDESCRIPTION: Demonstrates how to write expressive tests for Pundit policies using RSpec. The example tests access permissions based on post publication status and user admin status.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe PostPolicy do\n  subject { described_class }\n\n  permissions :update?, :edit? do\n    it \"denies access if post is published\" do\n      expect(subject).not_to permit(User.new(admin: false), Post.new(published: true))\n    end\n\n    it \"grants access if post is published and user is an admin\" do\n      expect(subject).to permit(User.new(admin: true), Post.new(published: true))\n    end\n\n    it \"grants access if post is unpublished\" do\n      expect(subject).to permit(User.new(admin: false), Post.new(published: false))\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring Pundit RSpec Integration\nDESCRIPTION: Shows how to include Pundit's RSpec integration in your test setup. This enables the use of Pundit's mini-DSL for writing policy tests.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"pundit/rspec\"\n```\n\n----------------------------------------\n\nTITLE: Customizing RSpec Matcher Descriptions for Pundit Tests\nDESCRIPTION: Shows how to customize the description in Pundit RSpec matchers to make test output more readable. Demonstrates both static strings and dynamic blocks for descriptions.\nSOURCE: https://github.com/varvet/pundit/blob/main/README.md#2025-04-13_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n# static alternative: Pundit::RSpec::Matchers.description = \"permit the user\"\nPundit::RSpec::Matchers.description = ->(user, record) do\n  \"permit user with role #{user.role} to access record with ID #{record.id}\"\nend\n```"
  }
]