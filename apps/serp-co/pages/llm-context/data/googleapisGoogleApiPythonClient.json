[
  {
    "owner": "googleapis",
    "repo": "google-api-python-client",
    "content": "TITLE: Using Application Default Credentials in Python\nDESCRIPTION: Code example that demonstrates how to use Application Default Credentials to automatically detect and use credentials from the environment. This approach works across Google Cloud environments and locally with the Google Cloud SDK installed.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport google.auth\n\nSCOPES = ['https://www.googleapis.com/auth/sqlservice.admin']\n\ncredentials, project = google.auth.default(scopes=SCOPES)\n```\n\n----------------------------------------\n\nTITLE: Using OAuth 2.0 Credentials with Google API Services in Python\nDESCRIPTION: Demonstrates the complete flow of obtaining OAuth 2.0 credentials and using them to build Google API service clients. This example authenticates a user, creates Calendar API client, and retrieves the user's email.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\n\nflow = InstalledAppFlow.from_client_secrets_file(\n    'client_secrets.json',\n    scopes=['openid', 'https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile'])\n\nflow.run_local_server()\ncredentials = flow.credentials\n\nservice = build('calendar', 'v3', credentials=credentials)\n\n# Optionally, view the email address of the authenticated user.\nuser_info_service = build('oauth2', 'v2', credentials=credentials)\nuser_info = user_info_service.userinfo().get().execute()\nprint(user_info['email'])\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Credentials for Google APIs in Python\nDESCRIPTION: Initializes OAuth 2.0 service account credentials from a key file and scopes them for Google Cloud Platform access. Service accounts are used for server-to-server API calls without end-user involvement.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom google.oauth2 import service_account\n\ncredentials = service_account.Credentials.from_service_account_file(\n    '/path/to/key.json')\n\nscoped_credentials = credentials.with_scopes(\n    ['https://www.googleapis.com/auth/cloud-platform'])\n```\n\n----------------------------------------\n\nTITLE: Complete Example of OAuth 2.0 Service Account Authentication in Python\nDESCRIPTION: A full working example that demonstrates the entire flow of authenticating with a service account, building a service object for the Cloud SQL Admin API, making an authenticated request, and printing the response.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom google.oauth2 import service_account\nimport googleapiclient.discovery\n\nSCOPES = ['https://www.googleapis.com/auth/sqlservice.admin']\nSERVICE_ACCOUNT_FILE = '/path/to/service.json'\n\ncredentials = service_account.Credentials.from_service_account_file(\n        SERVICE_ACCOUNT_FILE, scopes=SCOPES)\nsqladmin = googleapiclient.discovery.build('sqladmin', 'v1beta3', credentials=credentials)\nresponse = sqladmin.instances().list(project='exemplary-example-123').execute()\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Running Local Server OAuth Flow in Python\nDESCRIPTION: Initiates OAuth flow using a local web server to automatically capture the authorization code. Configurable with custom host, port, and messages.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-installed.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncredentials = flow.run_local_server(host='localhost',\n    port=8080, \n    authorization_prompt_message='Please visit this URL: {url}', \n    success_message='The auth flow is complete; you may close this window.',\n    open_browser=True)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google OAuth and Listing Drive Files in Python\nDESCRIPTION: This snippet demonstrates how to authenticate using Google OAuth 2.0 credentials and retrieve a list of the five most recently modified files from the user's Google Drive. It includes setting up authentication flow, building a service object, and making an API request with specific parameters.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-installed.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport pprint\n\nimport google.oauth2.credentials\n\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\npp = pprint.PrettyPrinter(indent=2)\n\n# The CLIENT_SECRETS_FILE variable specifies the name of a file that contains\n# the OAuth 2.0 information for this application, including its client_id and\n# client_secret.\nCLIENT_SECRETS_FILE = \"client_secret.json\"\n\n# This access scope grants read-only access to the authenticated user's Drive\n# account.\nSCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']\nAPI_SERVICE_NAME = 'drive'\nAPI_VERSION = 'v3'\n\ndef get_authenticated_service():\n  flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)\n  credentials = flow.run_console()\n  return build(API_SERVICE_NAME, API_VERSION, credentials = credentials)\n\ndef list_drive_files(service, **kwargs):\n  results = service.files().list(\n    **kwargs\n  ).execute()\n\n  pp.pprint(results)\n\nif __name__ == '__main__':\n  # When running locally, disable OAuthlib's HTTPs verification. When\n  # running in production *do not* leave this option enabled.\n  os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'\n  service = get_authenticated_service()\n  list_drive_files(service,\n                   orderBy='modifiedByMeTime desc',\n                   pageSize=5)\n```\n\n----------------------------------------\n\nTITLE: Using Domain-wide Delegation with Service Account in Python\nDESCRIPTION: Code demonstrating how to use domain-wide delegation with a service account to access user data within a G Suite domain. The 'subject' parameter specifies which user the service account should impersonate.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom google.oauth2 import service_account\n\nSCOPES = ['https://www.googleapis.com/auth/sqlservice.admin']\nSERVICE_ACCOUNT_FILE = '/path/to/service.json'\n\ncredentials = service_account.Credentials.from_service_account_file(\n        SERVICE_ACCOUNT_FILE, scopes=SCOPES, subject='user@domain.com')\n```\n\n----------------------------------------\n\nTITLE: Implementing InstalledAppFlow for OAuth 2.0 Authorization in Python\nDESCRIPTION: Creates an OAuth 2.0 flow for installed applications using InstalledAppFlow class, loads client secrets from a JSON file, and runs a local server to complete the authorization process. This approach is suitable for desktop applications or local development.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\nflow = InstalledAppFlow.from_client_secrets_file(\n    'client_secrets.json',\n    scopes=['profile', 'email'])\n\nflow.run_local_server()\n```\n\n----------------------------------------\n\nTITLE: Making Google API Request with Authentication in Python\nDESCRIPTION: Example demonstrating how to make an authenticated request to the Google Cloud SQL Admin API. This snippet lists Cloud SQL instances in a specified Google Cloud project using the previously created service object.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = sqladmin.instances().list(project='example-123').execute()\n```\n\n----------------------------------------\n\nTITLE: Initializing Google API Service with Close\nDESCRIPTION: Demonstrates how to build a service object for Google Drive API v3 and properly close it to avoid leaving sockets open.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\n\nservice = build('drive', 'v3')\n# ...\nservice.close()\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth 2.0 Authorization URL in Python\nDESCRIPTION: Generates the authorization URL to redirect users for OAuth 2.0 consent. This URL is where users will grant or deny permission to your application to access their data.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nauth_uri = flow.authorization_url()\n# Redirect the user to auth_uri on your platform.\n```\n\n----------------------------------------\n\nTITLE: Creating Credentials from Service Account File in Python\nDESCRIPTION: Example showing how to create credentials from a service account key file. This approach is used when running on platforms outside of Google Cloud or when you need more explicit control over authentication.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.oauth2 import service_account\n\nSCOPES = ['https://www.googleapis.com/auth/sqlservice.admin']\nSERVICE_ACCOUNT_FILE = '/path/to/service.json'\n\ncredentials = service_account.Credentials.from_service_account_file(\n        SERVICE_ACCOUNT_FILE, scopes=SCOPES)\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth 2.0 Credentials for Web Application in JSON\nDESCRIPTION: This JSON structure defines the OAuth 2.0 credentials for a web application. It includes the client ID, client secret, redirect URIs, and authentication endpoints.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/client-secrets.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web\": {\n    \"client_id\": \"asdfjasdljfasdkjf\",\n    \"client_secret\": \"1912308409123890\",\n    \"redirect_uris\": [\"https://www.example.com/oauth2callback\"],\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Google API Service Object in Python\nDESCRIPTION: Example showing how to build a service object for a Google API (specifically the Cloud SQL Admin API) using the credentials object. This service object is used to make authenticated requests to the API.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport googleapiclient.discovery\n\nsqladmin = googleapiclient.discovery.build('sqladmin', 'v1beta3', credentials=credentials)\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Object for Web Server Application in Python\nDESCRIPTION: This Python code shows how to create a Flow object for a web server application using the client_secrets.json file. It uses the Flow class from google_auth_oauthlib.flow and sets the redirect URI.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/client-secrets.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport google.oauth2.credentials\nimport google_auth_oauthlib.flow\n\nflow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(\n    'path_to_directory/client_secret.json',\n    scopes=['https://www.googleapis.com/auth/calendar'])\n\nflow.redirect_uri = 'https://www.example.com/oauth2callback'\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for OAuth 2.0 Token in Python\nDESCRIPTION: Exchanges the authorization code received from the OAuth 2.0 consent flow for access and refresh tokens. The authorization code is manually entered and passed to the fetch_token method.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The user will get an authorization code. This code is used to get the\n# access token.\ncode = input('Enter the authorization code: ')\nflow.fetch_token(code=code)\n```\n\n----------------------------------------\n\nTITLE: Listing Google Drive Files Using API in Python\nDESCRIPTION: Demonstrates how to use the authenticated service object to list files from Google Drive.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-installed.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfiles = drive_service.files().list().execute()\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Flow from Client Secrets in Python\nDESCRIPTION: Creates an OAuth flow object from client secrets file requesting read-only access to Google Drive. Uses InstalledAppFlow for handling the OAuth 2.0 flow for installed applications.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-installed.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\nflow = InstalledAppFlow.from_client_secrets_file(\n    'client_secret.json',\n    scopes=['https://www.googleapis.com/auth/drive.metadata.readonly'])\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Batch Requests with Individual Callbacks in Python\nDESCRIPTION: This snippet demonstrates how to create a batch request with multiple API calls, each with its own callback function. It uses the 'farm' API as an example, making requests to list animals and farmers.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/batch.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef list_animals(request_id, response, exception):\n  if exception is not None:\n    # Do something with the exception\n    pass\n  else:\n    # Do something with the response\n    pass\n\ndef list_farmers(request_id, response):\n  \"\"\"Do something with the farmers list response.\"\"\"\n  pass\n\nservice = build('farm', 'v2')\n\nbatch = service.new_batch_http_request()\n\nbatch.add(service.animals().list(), callback=list_animals)\nbatch.add(service.farmers().list(), callback=list_farmers)\nbatch.execute()\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth 2.0 Flow from Client Secrets File in Python\nDESCRIPTION: Initializes an OAuth 2.0 Flow object using client secrets from a JSON file. This example specifies multiple scopes for user information access and uses a redirect URI for the OAuth 2.0 Out-of-Band flow.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google_auth_oauthlib.flow import Flow\n...\nflow = Flow.from_client_secrets_file(\n    'path/to/client_secrets.json',\n    scopes=['openid', 'https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile'],\n    redirect_uri='urn:ietf:wg:oauth:2.0:oob')\n```\n\n----------------------------------------\n\nTITLE: Processing Paginated Results in Google API Python Client\nDESCRIPTION: This code demonstrates how to process paginated results from the Google Plus activities API. It iterates through all pages by using the list_next() method to get subsequent pages until no more results are available.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nactivities = service.activities()\nrequest = activities.list(userId='someUserId', collection='public')\n\nwhile request is not None:\n  activities_doc = request.execute()\n\n  # Do something with the activities\n\n  request = activities.list_next(request, activities_doc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread-Safe HTTP Requests in Google API Python Client\nDESCRIPTION: Demonstrates two approaches for handling thread-safe HTTP requests: creating a new Http() object for every request using a request builder, and manually passing a new Http() instance for each request. This implementation ensures thread safety by avoiding shared Http() instances across threads.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/thread_safety.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport google.auth\nimport googleapiclient\nimport google_auth_httplib2\nimport httplib2\nfrom googleapiclient import discovery\n\n# Create a new Http() object for every request\ndef build_request(http, *args, **kwargs):\n  new_http = google_auth_httplib2.AuthorizedHttp(credentials, http=httplib2.Http())\n  return googleapiclient.http.HttpRequest(new_http, *args, **kwargs)\nauthorized_http = google_auth_httplib2.AuthorizedHttp(credentials, http=httplib2.Http())\nservice = discovery.build('api_name', 'api_version', requestBuilder=build_request, http=authorized_http)\n\n# Pass in a new Http() manually for every request\nservice = discovery.build('api_name', 'api_version')\nhttp = google_auth_httplib2.AuthorizedHttp(credentials, http=httplib2.Http())\nservice.stamps().list().execute(http=http)\n```\n\n----------------------------------------\n\nTITLE: Initializing Google API Service with Context Manager\nDESCRIPTION: Shows how to use a context manager to automatically handle service cleanup when working with Google APIs.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\n\nwith build('drive', 'v3') as service:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Executing API Request with Error Handling\nDESCRIPTION: Demonstrates how to execute an API request and handle potential HTTP errors.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response = request.execute()\nexcept HttpError as e:\n    print('Error response status code : {0}, reason : {1}'.format(e.status_code, e.error_details))\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching with httplib2 in Python for Google API Client\nDESCRIPTION: This snippet shows how to enable caching at the httplib2 level by passing a cache implementation to the Http constructor. It demonstrates using a directory for caching.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhttp = httplib2.Http(cache=\".cache\")\n```\n\n----------------------------------------\n\nTITLE: Creating API Request\nDESCRIPTION: Shows how to create an API request object with parameters.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequest = collection.list(cents=5)\n```\n\n----------------------------------------\n\nTITLE: Building Google API Service Object in Python\nDESCRIPTION: Creates a service object for interacting with Google Drive API v3 using authenticated credentials.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-installed.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\n\ndrive_service = build('drive', 'v3', credentials=credentials)\n```\n\n----------------------------------------\n\nTITLE: Executing API Request Inline\nDESCRIPTION: Shows how to create and execute an API request in a single line.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = service.stamps().list(cents=5).execute()\n```\n\n----------------------------------------\n\nTITLE: Initializing Google API Service with API Key in Python\nDESCRIPTION: Demonstrates how to create a Google API service object using the build() function with an API key for authentication. The example shows initialization of the Books API v1 service.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/api-keys.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbooks_service = build('books', 'v1', developerKey='api_key')\n```\n\n----------------------------------------\n\nTITLE: Accessing API Response Data\nDESCRIPTION: Shows how to access specific fields from an API response object.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint('Num 5 cent stamps: %d'.format(response['count']))\nprint('First stamp name: %s'.format(response['items'][0]['name']))\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Object for Installed Application in Python\nDESCRIPTION: This Python code demonstrates how to create a Flow object for an installed application using the client_secrets.json file. It uses the InstalledAppFlow class from google_auth_oauthlib.flow.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/client-secrets.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n...\nflow = InstalledAppFlow.from_client_secrets_file(\n    'path_to_directory/client_secret.json',\n    scopes=['https://www.googleapis.com/auth/calendar'])\n```\n\n----------------------------------------\n\nTITLE: Printing API Response\nDESCRIPTION: Demonstrates how to print a formatted JSON response from an API call.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\n...\nprint(json.dumps(response, sort_keys=True, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Waiting for Compute Engine Operations\nDESCRIPTION: Helper function to wait for Compute Engine operations to complete, with error handling and status checking.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef wait_for_operation(compute, project, zone, operation):\n    print('Waiting for operation to finish...')\n    while True:\n        result = compute.zoneOperations().get(\n            project=project,\n            zone=zone,\n            operation=operation).execute()\n\n        if result['status'] == 'DONE':\n            print(\"done.\")\n            if 'error' in result:\n                raise Exception(result['error'])\n            return result\n\n        time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Requesting Partial Response in Python using Google API Client\nDESCRIPTION: This snippet demonstrates how to use the 'fields' parameter to request a partial response from a fictitious stamps API. It limits the response to only include the count and names of 5-cent stamps.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = service.stamps.list(cents=5, fields='count,items/name').execute()\n```\n\n----------------------------------------\n\nTITLE: Listing Compute Engine Instances\nDESCRIPTION: Function to list all Compute Engine instances in a specified project and zone.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_instances(compute, project, zone):\n    result = compute.instances().list(project=project, zone=zone).execute()\n    return result.get('items')\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Batch Requests with a Single Callback in Python\nDESCRIPTION: This snippet shows how to create a batch request with multiple API calls using a single callback function for all responses. It demonstrates inserting multiple animals into the 'farm' API.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/batch.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef insert_animal(request_id, response, exception):\n  if exception is not None:\n    # Do something with the exception\n    pass\n  else:\n    # Do something with the response\n    pass\n\nservice = build('farm', 'v2')\n\nbatch = service.new_batch_http_request(callback=insert_animal)\n\nbatch.add(service.animals().insert(name=\"sheep\"))\nbatch.add(service.animals().insert(name=\"pig\"))\nbatch.add(service.animals().insert(name=\"llama\"))\nbatch.execute()\n```\n\n----------------------------------------\n\nTITLE: Simulating Google Books API Request with HttpMock in Python\nDESCRIPTION: This example demonstrates how to use HttpMock to simulate a request to the Google Books API. It mocks both the discovery document retrieval and the actual API request.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/mocks.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\nfrom googleapiclient.http import HttpMock\nimport pprint\n\nhttp = HttpMock('books-discovery.json', {'status': '200'})\napi_key = 'your_api_key'\nservice = build('books', 'v1', http=http, developerKey=api_key)\nrequest = service.volumes().list(source='public', q='android')\nhttp = HttpMock('books-android.json', {'status': '200'})\nresponse = request.execute(http=http)\npprint.pprint(response)\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed HTTP Traffic Logging with httplib2\nDESCRIPTION: This snippet shows how to enable detailed HTTP request and response logging by setting the debuglevel of the httplib2 module, which provides more comprehensive information for troubleshooting.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport httplib2\nhttplib2.debuglevel = 4\n```\n\n----------------------------------------\n\nTITLE: Running system tests for Google API Python Client\nDESCRIPTION: These commands demonstrate how to run system tests against an actual Google Cloud project using nox. It shows how to run all system tests or target a specific test with a specific Python version.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Run all system tests\n$ nox -s system\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run a single system test\n$ nox -s system-3.8 -- -k <name of test>\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Logging for Google API Client\nDESCRIPTION: This snippet demonstrates how to set up logging at the INFO level when using the Google Translate API. It initializes a logger, sets the log level, and makes a translation request that outputs basic logging information.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom googleapiclient.discovery import build\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndef main():\n  service = build('translate', 'v2', developerKey='your_api_key')\n  print service.translations().list(\n      source='en',\n      target='fr',\n      q=['flower', 'car']\n    ).execute()\n\nif __name__ == '__main__':\n  main()\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Client on Windows\nDESCRIPTION: Commands to install the Google API Python client library in a virtual environment on Windows systems. Creates an isolated Python environment using virtualenv and installs the library using pip.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\npip install virtualenv\nvirtualenv <your-env>\n<your-env>\\Scripts\\activate\n<your-env>\\Scripts\\pip.exe install google-api-python-client\n```\n\n----------------------------------------\n\nTITLE: Using HttpMockSequence for Multiple Google API Requests in Python\nDESCRIPTION: This example shows how to use HttpMockSequence to simulate multiple HTTP responses in sequence, including the discovery document and an API request response.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/mocks.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\nfrom googleapiclient.http import HttpMockSequence\n\nbooks_discovery = # Saved data from a build response\nbooks_android = # Saved data from a request to list android volumes\n\nhttp = HttpMockSequence([\n    ({'status': '200'}, books_discovery),\n    ({'status': '200'}, books_android)])\napi_key = 'your_api_key'\nservice = build('books', 'v1',\n                http=http,\n                developerKey=your_api_key)\nrequest = service.volumes().list(source='public', q='android')\nresponse = request.execute()\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: These commands create a new Python virtual environment named 'env' and activate it. The virtual environment isolates the project dependencies from the system-wide Python installation.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/install_deps.tmpl.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv env\n$ source env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Using discovery.build() After v2.0.0 for Public and Private APIs\nDESCRIPTION: Example showing how to use the discovery.build() function in v2.0.0+, demonstrating both the default behavior for public APIs (using cached discovery documents) and the approach for private APIs (setting static_discovery=False).\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/UPGRADING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\n\n# Retrieve discovery artifacts from the client library\nwith build('drive', 'v3') as service:\n    # ...\n\n# Retrieve discovery artifacts from the internet for a private API\nwith build('drive', 'v3', static_discovery=False, developerKey=XXXXX) as service:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using code formatting and linting tools with Google API Python Client\nDESCRIPTION: These commands show how to run the black formatter and linting tools using nox sessions to ensure code quality and PEP8 compliance. It also includes setting environment variables to speed up the linting process.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s blacken\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_CLOUD_TESTING_REMOTE=\"upstream\"\nexport GOOGLE_CLOUD_TESTING_BRANCH=\"main\"\n```\n\n----------------------------------------\n\nTITLE: Using discovery.build() Before v2.0.0\nDESCRIPTION: Example showing how to use the discovery.build() function in versions prior to 2.0.0, where discovery artifacts were retrieved dynamically from the internet.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/UPGRADING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom googleapiclient.discovery import build\n\n# Retrieve discovery artifacts from the internet\nwith build('drive', 'v3') as service:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit hooks for Google API Python Client\nDESCRIPTION: This command installs pre-commit hooks to automatically run linters during git commits, ensuring code quality checks are performed before code is committed to the repository.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Using Memcache for Caching in Google App Engine with Python\nDESCRIPTION: This code example illustrates how to use memcache as a cache object for httplib2 in a Google App Engine environment.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.appengine.api import memcache\nhttp = httplib2.Http(cache=memcache)\n```\n\n----------------------------------------\n\nTITLE: Sample Logging Output from Google API Client\nDESCRIPTION: This shows the expected output from the logging configuration above, displaying INFO level logs that show the URLs being requested during API discovery and the actual translation API call.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nINFO:root:URL being requested: https://www.googleapis.com/discovery/v1/apis/translate/v2/rest\nINFO:root:URL being requested: https://www.googleapis.com/language/translate/v2?q=flower&q=car&source=en&alt=json&target=fr&key=your_api_key\n{u'translations': [{u'translatedText': u'fleur'}, {u'translatedText': u'voiture'}]}\n```\n\n----------------------------------------\n\nTITLE: Running Console-Based OAuth Flow in Python\nDESCRIPTION: Executes the OAuth flow through console interaction, requiring manual user input of the authorization code.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-installed.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncredentials = flow.run_console()\n```\n\n----------------------------------------\n\nTITLE: Enabling Cloud Storage API\nDESCRIPTION: Command to enable the Google Cloud Storage API for the project.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable storage.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Creating API Collection Object\nDESCRIPTION: Shows how to create a collection object from a service to access specific API resources.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollection = service.stamps()\n```\n\n----------------------------------------\n\nTITLE: Installing python-dev on Debian/Ubuntu for development prerequisites\nDESCRIPTION: This command installs the Python development headers on Debian/Ubuntu systems, which might be needed for certain dependencies to compile correctly when encountering \"Python.h not found\" errors.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install python-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Nested API Collection\nDESCRIPTION: Demonstrates how to create nested collection objects for accessing hierarchical API resources.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnested_collection = service.featured().stamps()\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Making API Requests in Python\nDESCRIPTION: This code demonstrates how to authenticate and make API requests using the Google API Python Client library. It includes importing necessary modules, setting up credentials, and making a sample API call to the Google Drive API.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/testing/constraints-3.11.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport pickle\nimport os.path\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import Flow\nfrom google.auth.transport.requests import Request\n\n# If modifying these scopes, delete the file token.pickle.\nSCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']\n\ndef main():\n    creds = None\n    # The file token.pickle stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.pickle'):\n        with open('token.pickle', 'rb') as token:\n            creds = pickle.load(token)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = Flow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.pickle', 'wb') as token:\n            pickle.dump(creds, token)\n\n    service = build('drive', 'v3', credentials=creds)\n\n    # Call the Drive v3 API\n    results = service.files().list(\n        pageSize=10, fields=\"nextPageToken, files(id, name)\").execute()\n    items = results.get('files', [])\n\n    if not items:\n        print('No files found.')\n    else:\n        print('Files:')\n        for item in items:\n            print(u'{0} ({1})'.format(item['name'], item['id']))\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Initializing Compute Engine API Client\nDESCRIPTION: Code to initialize the Google Compute Engine API client using application default credentials.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport googleapiclient.discovery\ncompute = googleapiclient.discovery.build('compute', 'v1')\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Google API Python Client Testing\nDESCRIPTION: This requirements file specifies exact versions of dependencies needed for testing a new version of google-auth against the minimum supported version of google-api-core (1.31.5). It pins versions for httplib2, google-auth-httplib2, and uritemplate while allowing the latest google-auth version.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/testing/constraints-3.8.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# Test a new version of google-auth against the minimum supported version of api-core.\nhttplib2==0.19.0\ngoogle-auth\ngoogle-auth-httplib2==0.2.0\ngoogle-api-core==1.31.5\nuritemplate==3.0.1\n```\n\n----------------------------------------\n\nTITLE: Deleting Compute Engine Instance\nDESCRIPTION: Function to delete a specific Compute Engine instance by name in a given project and zone.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef delete_instance(compute, project, zone, name):\n    return compute.instances().delete(\n        project=project,\n        zone=zone,\n        instance=name).execute()\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Google API Python Client\nDESCRIPTION: This code snippet lists the required Python packages and their versions for the Google API Python Client project. It includes specific versions for httplib2, google-auth-httplib2, google-api-core, and uritemplate, while leaving google-auth unspecified to use the latest version.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/testing/constraints-3.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhttplib2==0.19.0\ngoogle-auth\ngoogle-auth-httplib2==0.2.0\ngoogle-api-core==2.15.0\nuritemplate==3.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth 2.0 Credentials for Installed Application in JSON\nDESCRIPTION: This JSON structure defines the OAuth 2.0 credentials for an installed application. It includes the client ID, client secret, redirect URIs (including localhost), and authentication endpoints.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/client-secrets.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"installed\": {\n    \"client_id\": \"837647042410-75ifg...usercontent.com\",\n    \"client_secret\":\"asdlkfjaskd\",\n    \"redirect_uris\": [\"http://localhost\", \"urn:ietf:wg:oauth:2.0:oob\"],\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PortAudio with Homebrew on Mac OS X\nDESCRIPTION: Command to install PortAudio using Homebrew package manager on Mac OS X. PortAudio is required by PyAudio for audio streaming functionality.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/install_portaudio.tmpl.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install portaudio\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Client on Mac/Linux\nDESCRIPTION: Commands to install the Google API Python client library in a virtual environment on Mac/Linux systems. Creates an isolated Python environment using virtualenv and installs the library using pip.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install virtualenv\nvirtualenv <your-env>\nsource <your-env>/bin/activate\n<your-env>/bin/pip install google-api-python-client\n```\n\n----------------------------------------\n\nTITLE: Running Python Sample in Bash\nDESCRIPTION: This bash command demonstrates how to run a Python sample file. It's included in the README template to provide users with instructions on executing the sample code.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/README.tmpl.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python {{sample.file}}\n```\n\n----------------------------------------\n\nTITLE: Installing Required OAuth2 Libraries for Python\nDESCRIPTION: Command to install the necessary Python packages for OAuth 2.0 authentication with Google APIs. Includes google-auth for authentication, google-auth-httplib2 for HTTP requests, and google-api-python-client for the API client library.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/docs/oauth-server.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install google-auth google-auth-httplib2 google-api-python-client\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: This command installs all the dependencies listed in the requirements.txt file, which are necessary for running the Google API Python Client samples.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/install_deps.tmpl.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Python Client Library\nDESCRIPTION: Command to install the google-api-python-client library using pip package manager.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade google-api-python-client\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment with Git for Google API Python Client\nDESCRIPTION: This snippet shows how to fork, clone, and configure the Google API Python Client repository for development work. It sets up proper remote configurations to fetch updates from the upstream repository.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ${HOME}\n$ git clone git@github.com:USERNAME/google-api-python-client.git hack-on-google-api-python-client\n$ cd hack-on-google-api-python-client\n# Configure remotes such that you can pull changes from the googleapis/google-api-python-client\n# repository into your local repository.\n$ git remote add upstream git@github.com:googleapis/google-api-python-client.git\n# fetch and merge changes from upstream into main\n$ git fetch upstream\n$ git merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Running tests with nox for Google API Python Client\nDESCRIPTION: This snippet demonstrates how to use nox to run unit tests for the Google API Python Client. It includes commands for running all unit tests and for targeting a specific test with a specific Python version.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s unit\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s unit-3.13 -- -k <name of test>\n```\n\n----------------------------------------\n\nTITLE: Running sample tests for Google API Python Client\nDESCRIPTION: These commands show how to run tests for the code samples in the 'samples/' directory. It demonstrates running all tests in a folder or targeting a specific sample test with a specific Python version.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests in a folder\n$ cd samples/snippets\n$ nox -s py-3.8\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run a single sample test\n$ cd samples/snippets\n$ nox -s py-3.8 -- -k <name of test>\n```\n\n----------------------------------------\n\nTITLE: Building documentation for Google API Python Client\nDESCRIPTION: This command shows how to build the HTML documentation for the Google API Python Client library using nox, which is important when adding or modifying API features.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/CONTRIBUTING.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s docs\n```\n\n----------------------------------------\n\nTITLE: Local Discovery Artifact Update Commands\nDESCRIPTION: Sequence of shell and Python commands to update discovery artifacts locally, including environment setup, repository operations, and artifact generation.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyenv virtualenv updateartifacts\n```\n\nLANGUAGE: bash\nCODE:\n```\npyenv activate updateartifacts\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -e ../\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b update-discovery-artifacts-manual\n```\n\nLANGUAGE: python\nCODE:\n```\npython3 updatediscoveryartifacts.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n./createcommits.sh\n```\n\nLANGUAGE: python\nCODE:\n```\npython3 buildprbody.py\n```\n\n----------------------------------------\n\nTITLE: Running Instance Creation Script\nDESCRIPTION: Command line example showing how to run the instance creation script with required parameters.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython python-example.py --name example-instance --zone us-central1-a example-project my-gcs-bucket\n```\n\n----------------------------------------\n\nTITLE: Generating README with Jinja2 for Google API Python Client\nDESCRIPTION: This Jinja2 template generates a README file for Google API Python client samples. It includes sections for product description, setup instructions, sample code descriptions, and usage instructions.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/README.tmpl.rst#2025-04-23_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{# The following line is a lie. BUT! Once jinja2 is done with it, it will\n    become truth! #}\n.. This file is automatically generated. Do not edit this file directly.\n\n{{product.name}} Python Samples\n===============================================================================\n\n.. image:: https://gstatic.com/cloudssh/images/open-btn.png\n   :target: https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/python-docs-samples&page=editor&open_in_editor={{folder}}/README.rst\n\n\nThis directory contains samples for {{product.name}}. {{product.description}}\n\n{{description}}\n\n.. _{{product.name}}: {{product.url}}\n\n{% if required_api_url %}\nTo run the sample, you need to enable the API at: {{required_api_url}}\n{% endif %}\n\n{% if required_role %}\nTo run the sample, you need to have `{{required_role}}` role.\n{% endif %}\n\n{{other_required_steps}}\n\n{% if setup %}\nSetup\n-------------------------------------------------------------------------------\n\n{% for section in setup %}\n\n{% include section + '.tmpl.rst' %}\n\n{% endfor %}\n{% endif %}\n\n{% if samples %}\nSamples\n-------------------------------------------------------------------------------\n\n{% for sample in samples %}\n{{sample.name}}\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n{% if not sample.hide_cloudshell_button %}\n.. image:: https://gstatic.com/cloudssh/images/open-btn.png\n   :target: https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/python-docs-samples&page=editor&open_in_editor={{folder}}/{{sample.file}},{{folder}}/README.rst\n{% endif %}\n\n\n{{sample.description}}\n\nTo run this sample:\n\n.. code-block:: bash\n\n    $ python {{sample.file}}\n{% if sample.show_help %}\n\n    {{get_help(sample.file)|indent}}\n{% endif %}\n\n\n{% endfor %}\n{% endif %}\n\n{% if cloud_client_library %}\n\nThe client library\n-------------------------------------------------------------------------------\n\nThis sample uses the `Google Cloud Client Library for Python`_.\nYou can read the documentation for more details on API usage and use GitHub\nto `browse the source`_ and  `report issues`_.\n\n.. _Google Cloud Client Library for Python:\n    https://googlecloudplatform.github.io/google-cloud-python/\n.. _browse the source:\n    https://github.com/GoogleCloudPlatform/google-cloud-python\n.. _report issues:\n    https://github.com/GoogleCloudPlatform/google-cloud-python/issues\n\n{% endif %}\n\n.. _Google Cloud SDK: https://cloud.google.com/sdk/\n```\n\n----------------------------------------\n\nTITLE: Installing PyAudio with Custom Flags on Mac OS X\nDESCRIPTION: Command for installing PyAudio with custom build flags to resolve common portaudio.h not found errors on Mac OS X. These flags specify the include and library directories for the compiler.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/install_portaudio.tmpl.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --global-option='build_ext' \\\n    --global-option='-I/usr/local/include' \\\n    --global-option='-L/usr/local/lib' \\\n    pyaudio\n```\n\n----------------------------------------\n\nTITLE: Installing PortAudio Dependencies on Debian/Ubuntu Linux\nDESCRIPTION: Command to install PortAudio development packages and Python dependencies on Debian/Ubuntu Linux systems using apt-get package manager.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/install_portaudio.tmpl.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt-get install portaudio19-dev python-all-dev\n```\n\n----------------------------------------\n\nTITLE: Cloning python-docs-samples Repository\nDESCRIPTION: This command clones the python-docs-samples repository from GitHub, which contains sample code for Google Cloud Platform services.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/readme-gen/templates/install_deps.tmpl.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/GoogleCloudPlatform/python-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Defining Google API Python Client Dependencies\nDESCRIPTION: Specifies exact versions of required Python packages for using the Google API Python Client. Includes the client library (version 2.134.0), Google Auth library (version 2.30.0), and Google Auth HTTP Library extension (version 0.2.0).\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngoogle-api-python-client==2.134.0\ngoogle-auth==2.30.0\ngoogle-auth-httplib2==0.2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Testing Dependencies with Version Constraints\nDESCRIPTION: Specifies required Python package versions for testing, using conditional version requirements based on Python version. Includes pytest with version-specific constraints and flaky package for handling flaky tests.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/samples/compute/requirements-test.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\npytest==7.4.4; python_version == '3.7'\npytest==8.2.2; python_version >= '3.8'\nflaky==3.8.1\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Package Versions for Google API Python Client\nDESCRIPTION: This snippet lists the minimum required versions for the project's dependencies. It includes core libraries like httplib2, google-auth, and google-api-core, along with their specific versions.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/testing/constraints-3.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nhttplib2==0.19.0\ngoogle-auth==1.32.0\ngoogle-auth-httplib2==0.2.0\ngoogle-api-core==1.31.5\nuritemplate==3.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies for Google API Python Client Testing\nDESCRIPTION: Requirements file that specifies exact versions of dependencies needed to test compatibility between an older google-auth version and the latest google-api-core. Includes core authentication and HTTP libraries with specific version pins.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/testing/constraints-3.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttplib2==0.19.0\ngoogle-auth==1.32.0\ngoogle-auth-httplib2==0.2.0\ngoogle-api-core\nuritemplate==3.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Python Client via pip\nDESCRIPTION: This snippet shows how to install the Google API Python Client library using pip, the Python package installer.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/testing/constraints-3.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install google-api-python-client\n```\n\n----------------------------------------\n\nTITLE: Specifying Pandas Package Version Requirement\nDESCRIPTION: Defines the required version of pandas package to be exactly 2.2.2 using pip requirements format.\nSOURCE: https://github.com/googleapis/google-api-python-client/blob/main/scripts/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npandas==2.2.2\n```"
  }
]