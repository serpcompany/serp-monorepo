[
  {
    "owner": "yamadashy",
    "repo": "repomix",
    "content": "TITLE: Setting Up Local Development Environment for Repomix\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and running the Repomix CLI locally. Requires Node.js, Git, and npm to be installed on the system.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone repository\ngit clone https://github.com/yamadashy/repomix.git\ncd repomix\n\n# Install dependencies\nnpm install\n\n# Run CLI\nnpm run repomix\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix globally with npm\nDESCRIPTION: Installing Repomix globally on your system using npm package manager.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g repomix\n```\n\n----------------------------------------\n\nTITLE: Using Repomix Low-Level APIs for File Analysis\nDESCRIPTION: Example of using Repomix's core components directly for more control. It demonstrates file searching, collection, processing, and token counting functionality.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { searchFiles, collectFiles, processFiles, TokenCounter } from 'repomix';\n\nasync function analyzeFiles(directory) {\n  // Encontrar e coletar arquivos\n  const { filePaths } = await searchFiles(directory, { /* configuração */ });\n  const rawFiles = await collectFiles(filePaths, directory);\n  const processedFiles = await processFiles(rawFiles, { /* configuração */ });\n  \n  // Contar tokens\n  const tokenCounter = new TokenCounter('o200k_base');\n  \n  // Retornar resultados da análise\n  return processedFiles.map(file => ({\n    path: file.path,\n    tokens: tokenCounter.countTokens(file.content)\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Repomix CLI\nDESCRIPTION: The basic command to pack an entire repository using repomix. This is the simplest form of the command with no additional options.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix\n```\n\n----------------------------------------\n\nTITLE: Basic Repomix Command-Line Examples\nDESCRIPTION: Various command-line examples showing how to use Repomix with different options, such as custom output paths, ignoring files, using custom configurations, and processing remote repositories.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nrepomix -o custom-output.txt\nrepomix -i \"*.log,tmp\" -v\nrepomix -c ./custom-config.json\nrepomix --style xml\nrepomix --remote https://github.com/user/repo\nnpx repomix src\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Compression in Repomix\nDESCRIPTION: Commands for enabling code compression, which can be used with both local and remote repositories to reduce the output size.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --compress\n\n# You can also use it with remote repositories:\nrepomix --remote yamadashy/repomix --compress\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Repomix via Package Managers\nDESCRIPTION: Commands for installing Repomix globally using npm, yarn, or Homebrew, and basic usage instructions.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install using npm\nnpm install -g repomix\n\n# Alternatively using yarn\nyarn global add repomix\n\n# Alternatively using Homebrew (macOS/Linux)\nbrew install repomix\n\n# Then run in any project directory\nrepomix\n```\n\n----------------------------------------\n\nTITLE: Using Repomix CLI via npx\nDESCRIPTION: Instant usage of Repomix without installation using npx in any project directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx repomix\n```\n\n----------------------------------------\n\nTITLE: Repomix Main Configuration Schema\nDESCRIPTION: Complete configuration schema for Repomix showing all available options including output settings, ignore patterns, and security configurations.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"filePath\": \"repomix-output.xml\",\n    \"style\": \"xml\",\n    \"parsableStyle\": true,\n    \"compress\": false,\n    \"headerText\": \"Custom header text\",\n    \"instructionFilePath\": \"repomix-instruction.md\",\n    \"fileSummary\": true,\n    \"directoryStructure\": true,\n    \"removeComments\": false,\n    \"removeEmptyLines\": false,\n    \"topFilesLength\": 5,\n    \"showLineNumbers\": false,\n    \"copyToClipboard\": false,\n    \"includeEmptyDirectories\": false,\n    \"git\": {\n      \"sortByChanges\": true,\n      \"sortByChangesMaxCommits\": 100\n    }\n  },\n  \"include\": [\"**/*\"],\n  \"ignore\": {\n    \"useGitignore\": true,\n    \"useDefaultPatterns\": true,\n    \"customPatterns\": [\"tmp/\", \"*.log\"]\n  },\n  \"security\": {\n    \"enableSecurityCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix Globally\nDESCRIPTION: Commands for installing Repomix globally using npm, yarn, or Homebrew for repeated use across projects.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install using npm\nnpm install -g repomix\n\n# Alternatively using yarn\nyarn global add repomix\n\n# Alternatively using Homebrew (macOS/Linux)\nbrew install repomix\n\n# Then run in any project directory\nrepomix\n```\n\n----------------------------------------\n\nTITLE: Running Repomix via NPX in bash\nDESCRIPTION: This command runs Repomix in the current project directory, generating an AI-friendly file of the entire repository.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx repomix\n```\n\n----------------------------------------\n\nTITLE: Example Usage of RepomMix CLI Commands\nDESCRIPTION: Demonstrates various ways to use the RepomMix tool through command line examples, including basic usage, custom output options, compression, filtering specific files, and working with remote repositories.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/command-line-options.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Basic usage\nrepomix\n\n# Custom output\nrepomix -o output.xml --style xml\n\n# Custom output with compression\nrepomix --compress\n\n# Process specific files\nrepomix --include \"src/**/*.ts\" --ignore \"**/*.test.ts\"\n\n# Remote repository with branch\nrepomix --remote https://github.com/user/repo/tree/main\n\n# Remote repository with commit\nrepomix --remote https://github.com/user/repo/commit/836abcd7335137228ad77feb28655d85712680f1\n\n# Remote repository with shorthand\nrepomix --remote user/repo\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix using npx\nDESCRIPTION: Running Repomix without requiring installation by using npx, which is included with npm.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx repomix\n```\n\n----------------------------------------\n\nTITLE: Processing Remote Git Repositories with Repomix\nDESCRIPTION: Examples of how to process remote Git repositories with Repomix without manual cloning, including specifying branches, tags, or commit hashes.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --remote https://github.com/yamadashy/repomix\n```\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --remote yamadashy/repomix\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Using --remote-branch option\nrepomix --remote https://github.com/yamadashy/repomix --remote-branch main\n\n# Using branch's URL\nrepomix --remote https://github.com/yamadashy/repomix/tree/main\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Using --remote-branch option\nrepomix --remote https://github.com/yamadashy/repomix --remote-branch 935b695\n\n# Using commit's URL\nrepomix --remote https://github.com/yamadashy/repomix/commit/836abcd7335137228ad77feb28655d85712680f1\n```\n\n----------------------------------------\n\nTITLE: Packing Remote Repositories with Repomix\nDESCRIPTION: Commands demonstrating how to pack remote GitHub repositories with various options for branch, tag, or commit specification.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --remote https://github.com/yamadashy/repomix\n\n# You can also use GitHub shorthand:\nrepomix --remote yamadashy/repomix\n\n# You can specify the branch name, tag, or commit hash:\nrepomix --remote https://github.com/yamadashy/repomix --remote-branch main\n\n# Or use a specific commit hash:\nrepomix --remote https://github.com/yamadashy/repomix --remote-branch 935b695\n\n# Another convenient way is specifying the branch's URL\nrepomix --remote https://github.com/yamadashy/repomix/tree/main\n\n# Commit's URL is also supported\nrepomix --remote https://github.com/yamadashy/repomix/commit/836abcd7335137228ad77feb28655d85712680f1\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview for Repomix\nDESCRIPTION: A representation of the Repomix project directory structure, showing the main components including CLI implementation, configuration handling, core functionality, and shared utilities.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsrc/\n├── cli/          # CLI implementation\n├── config/       # Configuration handling\n├── core/         # Core functionality\n└── shared/       # Shared utilities\n```\n\n----------------------------------------\n\nTITLE: Code Quality Assessment Prompt\nDESCRIPTION: A prompt template for assessing code quality and suggesting improvements, focusing on naming conventions, organization, error handling, and commenting practices.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nAssess code quality and suggest improvements:\n1. Review naming conventions\n2. Check code organization\n3. Evaluate error handling\n4. Review commenting practices\n\nProvide specific examples of good and problematic patterns.\n```\n\n----------------------------------------\n\nTITLE: Running Repomix as an MCP Server\nDESCRIPTION: Command to run Repomix as a Model Context Protocol (MCP) server, enabling AI assistants to directly interact with your codebase.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --mcp\n```\n\n----------------------------------------\n\nTITLE: Using Repomix runCli Function for Basic Processing\nDESCRIPTION: Example of using the runCli function to process the current directory with custom options. The function returns processing results including file counts, character counts, and token counts.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runCli, type CliOptions } from 'repomix';\n\n// Processar o diretório atual com opções personalizadas\nasync function packProject() {\n  const options = {\n    output: 'output.xml',\n    style: 'xml',\n    compress: true,\n    quiet: true\n  } as CliOptions;\n  \n  const result = await runCli(['.'], process.cwd(), options);\n  return result.packResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Specific Files with Glob Patterns in Repomix\nDESCRIPTION: Command to include only files matching specific glob patterns. This example includes all TypeScript files in the src directory and all Markdown files anywhere in the repository.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --include \"src/**/*.ts,**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: Running Repomix as MCP Server in Bash\nDESCRIPTION: Command to start Repomix in MCP server mode, making it available for AI assistants that support the Model Context Protocol.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --mcp\n```\n\n----------------------------------------\n\nTITLE: Using File System Tools in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to use the file_system_read_file and file_system_read_directory tools to safely interact with the local file system.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Ler um arquivo\nconst fileContent = await tools.file_system_read_file({\n  path: '/absolute/path/to/file.txt'\n});\n\n// Listar conteúdo do diretório\nconst dirContent = await tools.file_system_read_directory({\n  path: '/absolute/path/to/directory'\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Repomix Core Components Directly\nDESCRIPTION: Demonstrates using Repomix's low-level APIs directly for more granular control. This example shows how to search for files, collect and process them, and perform token counting with custom configuration options.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { searchFiles, collectFiles, processFiles, TokenCounter } from 'repomix';\n\nasync function analyzeFiles(directory) {\n  // Find and collect files\n  const { filePaths } = await searchFiles(directory, { /* config */ });\n  const rawFiles = await collectFiles(filePaths, directory);\n  const processedFiles = await processFiles(rawFiles, { /* config */ });\n  \n  // Count tokens\n  const tokenCounter = new TokenCounter('o200k_base');\n  \n  // Return analysis results\n  return processedFiles.map(file => ({\n    path: file.path,\n    tokens: tokenCounter.countTokens(file.content)\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Remote GitHub Repositories with Repomix\nDESCRIPTION: Shows how to clone and process a remote GitHub repository using Repomix's CLI wrapper functionality. The function accepts a repository URL and returns the processing results.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runCli, type CliOptions } from 'repomix';\n\n// Clone and process a GitHub repo\nasync function processRemoteRepo(repoUrl) {\n  const options = {\n    remote: repoUrl,\n    output: 'output.xml',\n    compress: true\n  } as CliOptions;\n  \n  return await runCli(['.'], process.cwd(), options);\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Repomix Processing\nDESCRIPTION: Command to exclude specific files or directories from processing. This example excludes all log files and the tmp directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --ignore \"**/*.log,tmp/\"\n```\n\n----------------------------------------\n\nTITLE: Generating Comprehensive Output with Markdown Instruction\nDESCRIPTION: This markdown snippet contains an instruction template for generating comprehensive output from code repositories without abbreviation. It's designed to be included in a repomix-instruction.md file.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n# Generate Comprehensive Output\n\n- Include all content without abbreviation, unless specified otherwise\n- Optimize for handling large codebases while maintaining output quality\n```\n\n----------------------------------------\n\nTITLE: Running Repomix on a Specific Directory\nDESCRIPTION: Command to run Repomix on a specific directory path instead of the current directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrepomix path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Initializing Repomix Configuration File\nDESCRIPTION: Command to create a new Repomix configuration file (repomix.config.json) for customized settings.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init\n```\n\n----------------------------------------\n\nTITLE: Including Specific Files with Glob Patterns\nDESCRIPTION: Command to include only specific files or directories in the Repomix output using glob patterns.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --include \"src/**/*.ts,**/*.md\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Compression Example with Repomix\nDESCRIPTION: An example showing how TypeScript code is compressed by Repomix, where implementation details are replaced with '⋮----' while preserving function signatures, imports, and interfaces.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShoppingItem } from './shopping-item';\n\n/**\n * Calculate the total price of shopping items\n */\nconst calculateTotal = (\n  items: ShoppingItem[]\n) => {\n  let total = 0;\n  for (const item of items) {\n    total += item.price * item.quantity;\n  }\n  return total;\n}\n\n// Shopping item interface\ninterface Item {\n  name: string;\n  price: number;\n  quantity: number;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShoppingItem } from './shopping-item';\n⋮----\n/**\n * Calculate the total price of shopping items\n */\nconst calculateTotal = (\n  items: ShoppingItem[]\n) => {\n⋮----\n// Shopping item interface\ninterface Item {\n  name: string;\n  price: number;\n  quantity: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Repomix Configuration in JSON5\nDESCRIPTION: A comprehensive example of the repomix.config.json file showing all available configuration options with their values. The file supports JSON5 syntax which allows comments, trailing commas, unquoted property names, and relaxed string syntax.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_32\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"output\": {\n    \"filePath\": \"repomix-output.xml\",\n    \"style\": \"xml\",\n    \"parsableStyle\": true,\n    \"compress\": false,\n    \"headerText\": \"Custom header information for the packed file.\",\n    \"fileSummary\": true,\n    \"directoryStructure\": true,\n    \"removeComments\": false,\n    \"removeEmptyLines\": false,\n    \"showLineNumbers\": false,\n    \"copyToClipboard\": true,\n    \"topFilesLength\": 5,\n    \"includeEmptyDirectories\": false,\n    \"git\": {\n      \"sortByChanges\": true,\n      \"sortByChangesMaxCommits\": 100\n    }\n  },\n  \"include\": [\n    \"**/*\"\n  ],\n  \"ignore\": {\n    \"useGitignore\": true,\n    \"useDefaultPatterns\": true,\n    // Patterns can also be specified in .repomixignore\n    \"customPatterns\": [\n      \"additional-folder\",\n      \"**/*.log\"\n    ],\n  },\n  \"security\": {\n    \"enableSecurityCheck\": true\n  },\n  \"tokenCount\": {\n    \"encoding\": \"o200k_base\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Repomix Configuration\nDESCRIPTION: Command to initialize a global configuration file that applies to all Repomix projects on the system.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init --global\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Repomix Output\nDESCRIPTION: Command to exclude specific files or directories from the Repomix output.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --ignore \"**/*.log,tmp/\"\n```\n\n----------------------------------------\n\nTITLE: Processing Repositories with Repomix Using URL or GitHub Shorthand\nDESCRIPTION: Demonstrates how to process public repositories using Repomix with either a full URL or GitHub's shorthand notation (username/repository).\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/remote-repository-processing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using full URL\nrepomix --remote https://github.com/user/repo\n\n# Using GitHub shorthand\nrepomix --remote user/repo\n```\n\n----------------------------------------\n\nTITLE: Sample Repomix Configuration in JSON Format\nDESCRIPTION: Complete example of a repomix.config.json file showing all available configuration options including output settings, inclusion/exclusion patterns, and security settings.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"filePath\": \"repomix-output.xml\",\n    \"style\": \"xml\",\n    \"parsableStyle\": true,\n    \"compress\": false,\n    \"headerText\": \"Texto personalizado do cabeçalho\",\n    \"instructionFilePath\": \"repomix-instruction.md\",\n    \"fileSummary\": true,\n    \"directoryStructure\": true,\n    \"removeComments\": false,\n    \"removeEmptyLines\": false,\n    \"topFilesLength\": 5,\n    \"showLineNumbers\": false,\n    \"copyToClipboard\": false,\n    \"includeEmptyDirectories\": false,\n    \"git\": {\n      \"sortByChanges\": true,\n      \"sortByChangesMaxCommits\": 100\n    }\n  },\n  \"include\": [\"**/*\"],\n  \"ignore\": {\n    \"useGitignore\": true,\n    \"useDefaultPatterns\": true,\n    \"customPatterns\": [\"tmp/\", \"*.log\"]\n  },\n  \"security\": {\n    \"enableSecurityCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repomix Git Integration Configuration\nDESCRIPTION: Example configuration for Git integration features including file sorting based on change history.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"git\": {\n      \"sortByChanges\": true,\n      \"sortByChangesMaxCommits\": 100\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Comments from Output in Repomix\nDESCRIPTION: Command to strip comments from the code in the output, producing cleaner and more concise results.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --remove-comments\n```\n\n----------------------------------------\n\nTITLE: Working with Remote Repositories in Repomix\nDESCRIPTION: Commands for processing remote repositories. Examples show using full GitHub URLs, shorthand notation, and specifying branches, tags, or commits.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Using GitHub URL\nrepomix --remote https://github.com/user/repo\n\n# Using shorthand\nrepomix --remote user/repo\n\n# Specific branch/tag/commit\nrepomix --remote user/repo --remote-branch main\nrepomix --remote user/repo --remote-branch 935b695\n```\n\n----------------------------------------\n\nTITLE: Sample prompt for AI with Repomix output\nDESCRIPTION: This example shows how to introduce a Repomix output file to an AI assistant with a prompt requesting code review and refactoring.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThis file contains all the files in the repository combined into one.\nI want to refactor the code, so please review it first.\n```\n\n----------------------------------------\n\nTITLE: Configuring Repomix MCP in Cline Extension\nDESCRIPTION: JSON configuration for adding Repomix as an MCP server in the Cline VS Code extension. This should be added to the cline_mcp_settings.json file.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"repomix\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"repomix\",\n        \"--mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing Output with Repomix\nDESCRIPTION: Commands for using the code compression feature to reduce token count while preserving structure.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --compress\n\n# You can also use it with remote repositories:\nrepomix --remote yamadashy/repomix --compress\n```\n\n----------------------------------------\n\nTITLE: Example Custom Instruction File Content\nDESCRIPTION: Sample markdown content for a custom instruction file. This example provides guidelines for analyzing the repository code, highlighting important directories and files to focus on or ignore.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/custom-instructions.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Instruções do Repositório\n\nEste repositório contém o código-fonte da ferramenta Repomix. Por favor, siga estas diretrizes ao analisar o código:\n\n1. Concentre-se na funcionalidade principal no diretório `src/core`.\n2. Preste atenção especial às verificações de segurança em `src/core/security`.\n3. Ignore quaisquer arquivos no diretório `tests`.\n```\n\n----------------------------------------\n\nTITLE: Example AI Prompt for Repomix Output\nDESCRIPTION: Sample prompt to use when sending a Repomix-generated file to an AI assistant for code review.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nThis file contains all the files in the repository combined into one.\nI want to refactor the code, so please review it first.\n```\n\n----------------------------------------\n\nTITLE: Configuring Cline MCP Settings\nDESCRIPTION: JSON configuration for setting up Repomix as an MCP server in the Cline VS Code extension by editing the cline_mcp_settings.json file.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"repomix\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"repomix\",\n        \"--mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Compression in JSON\nDESCRIPTION: JSON configuration option to enable code compression in the configuration file.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/code-compress.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"compress\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of read_repomix_output MCP Tool\nDESCRIPTION: Example JSON parameters for the read_repomix_output tool, which reads content from a previously generated Repomix output file using its ID.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"outputId\": \"8f7d3b1e2a9c6054\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Repomix CLI Wrapper with Custom Options\nDESCRIPTION: Demonstrates how to use the runCli function to process the current directory with custom options like output format, style, and compression settings. Returns processing results including file counts and token statistics.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runCli, type CliOptions } from 'repomix';\n\n// Process current directory with custom options\nasync function packProject() {\n  const options = {\n    output: 'output.xml',\n    style: 'xml',\n    compress: true,\n    quiet: true\n  } as CliOptions;\n  \n  const result = await runCli(['.'], process.cwd(), options);\n  return result.packResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Parameters for pack_remote_repository MCP Tool\nDESCRIPTION: JSON parameters example for the pack_remote_repository tool, which fetches, clones, and packages a GitHub repository for AI analysis.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote\": \"yamadashy/repomix\",\n  \"compress\": true,\n  \"includePatterns\": \"src/**/*.ts,**/*.md\",\n  \"ignorePatterns\": \"**/*.log,tmp/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Repomix Configuration\nDESCRIPTION: Command to create a new Repomix configuration file in the current directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init\n```\n\n----------------------------------------\n\nTITLE: Packing Specific Directories with Repomix\nDESCRIPTION: Command to pack only a specific directory within your repository. This allows selective packaging of content rather than the entire repository.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrepomix path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Options in Repomix\nDESCRIPTION: Demonstrates how to control Repomix's output by specifying custom output locations, changing the output format to XML, or removing comments from the processed files.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/remote-repository-processing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Custom output location\nrepomix --remote user/repo -o custom-output.xml\n\n# With XML format\nrepomix --remote user/repo --style xml\n\n# Remove comments\nrepomix --remote user/repo --remove-comments\n```\n\n----------------------------------------\n\nTITLE: Example Usage of pack_codebase MCP Tool\nDESCRIPTION: Example JSON parameters for the pack_codebase tool, which packages a local code directory for AI analysis with options for compression and file pattern filtering.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directory\": \"/path/to/your/project\",\n  \"compress\": true,\n  \"includePatterns\": \"src/**/*.ts,**/*.md\",\n  \"ignorePatterns\": \"**/*.log,tmp/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Repomix Configuration File Example\nDESCRIPTION: Example configuration file (repomix.config.json) showing various customization options.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"style\": \"markdown\",\n    \"filePath\": \"custom-output.md\",\n    \"removeComments\": true,\n    \"showLineNumbers\": true,\n    \"topFilesLength\": 10\n  },\n  \"ignore\": {\n    \"customPatterns\": [\"*.test.ts\", \"docs/**\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AI Prompt for Library Overview\nDESCRIPTION: Example prompt for AI tools to provide a high-level understanding of a library's purpose and architecture.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nThis file contains the entire codebase of library. Please provide a comprehensive overview of the library, including its main purpose, key features, and overall architecture.\n```\n\n----------------------------------------\n\nTITLE: Configuring Repomix MCP Server in LLM Client Settings\nDESCRIPTION: JSON configuration block to add to your LLM client's settings file (such as Cline, Roo Code, Claude Desktop, or Cursor) to enable the Repomix MCP server. It uses npx to run Repomix without requiring a global installation.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/llms-install.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"repomix\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"repomix\",\n        \"--mcp\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Parameters for pack_codebase MCP Tool\nDESCRIPTION: JSON parameters example for the pack_codebase tool, which packages a local code directory into a consolidated file for AI analysis.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directory\": \"/path/to/your/project\",\n  \"compress\": true,\n  \"includePatterns\": \"src/**/*.ts,**/*.md\",\n  \"ignorePatterns\": \"**/*.log,tmp/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Repomix Configuration File\nDESCRIPTION: Command to create a configuration file for repomix, allowing for persistent settings across multiple runs without specifying command-line options each time.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init\n```\n\n----------------------------------------\n\nTITLE: Repomix Remote Repository Commands\nDESCRIPTION: Commands for packing remote repositories using different URL formats and commit references.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Using shorthand format\nnpx repomix --remote yamadashy/repomix\n\n# Using full URL (supports branches and specific paths)\nnpx repomix --remote https://github.com/yamadashy/repomix\nnpx repomix --remote https://github.com/yamadashy/repomix/tree/main\n\n# Using commit's URL\nnpx repomix --remote https://github.com/yamadashy/repomix/commit/836abcd7335137228ad77feb28655d85712680f1\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Docker on Specific Directory\nDESCRIPTION: Docker command to run Repomix on a specific directory path using volume mounting.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Example Parameters for read_repomix_output MCP Tool\nDESCRIPTION: JSON parameters example for the read_repomix_output tool, which reads the contents of a Repomix output file by ID when direct file access is not possible.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"outputId\": \"8f7d3b1e2a9c6054\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instructions Path in JSON\nDESCRIPTION: JSON configuration to specify the path to the custom instructions markdown file in repomix.config.json.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/custom-instructions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"instructionFilePath\": \"repomix-instruction.md\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Integration Configuration Example\nDESCRIPTION: JSON configuration example showing how to setup Git integration to sort files based on their change history.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"git\": {\n      \"sortByChanges\": true,\n      \"sortByChangesMaxCommits\": 100\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Docker for remote repository\nDESCRIPTION: Using Docker to run Repomix on a remote repository without installation.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix --remote yamadashy/repomix\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix MCP Server in VS Code via Command Line\nDESCRIPTION: Command to add Repomix as an MCP server in VS Code. This configures VS Code to use npx to run Repomix in MCP mode.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncode --add-mcp '{\"name\":\"repomix\",\"command\":\"npx\",\"args\":[\"-y\",\"repomix\",\"--mcp\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring instructionFilePath in repomix.config.json\nDESCRIPTION: JSON5 configuration snippet that demonstrates how to add the instructionFilePath option to the repomix.config.json file. This option specifies the path to a custom instruction file that will be included in the output.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_36\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"output\": {\n    \"instructionFilePath\": \"repomix-instruction.md\",\n    // other options...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Output Structure Example\nDESCRIPTION: Example of XML output format showing file summary, directory structure, and file contents organization.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nThis file is a merged representation of the entire codebase...\n\n<file_summary>\n(Metadata and AI instructions)\n</file_summary>\n\n<directory_structure>\nsrc/\n  index.ts\n  utils/\n    helper.ts\n</directory_structure>\n\n<files>\n<file path=\"src/index.ts\">\n// File contents here\n</file>\n</files>\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Branches, Tags, or Commits with Repomix\nDESCRIPTION: Shows how to process specific branches, tags, or commit hashes when using Repomix to analyze remote repositories.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/remote-repository-processing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Specific branch\nrepomix --remote user/repo --remote-branch main\n\n# Tag\nrepomix --remote user/repo --remote-branch v1.0.0\n\n# Commit hash\nrepomix --remote user/repo --remote-branch 935b695\n```\n\n----------------------------------------\n\nTITLE: Running Repomix in Docker Container\nDESCRIPTION: Provides examples of using Repomix within a Docker container, including volume mounting to output results to the host filesystem.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/remote-repository-processing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Process and output to current directory\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix \\\n  --remote user/repo\n\n# Output to specific directory\ndocker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix \\\n  --remote user/repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instructions in Repomix Configuration File\nDESCRIPTION: JSON configuration that specifies the path to a custom instruction file in the repomix.config.json file. This tells Repomix where to find the instruction file that should be included in the output.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/custom-instructions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"instructionFilePath\": \"repomix-instruction.md\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Repomix as MCP Server in Bash\nDESCRIPTION: Command to start Repomix in MCP server mode, making it available for AI assistants that support the Model Context Protocol.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --mcp\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code MCP Server via Command Line\nDESCRIPTION: Commands to add Repomix as an MCP server in VS Code and VS Code Insiders through the command line interface.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode --add-mcp '{\"name\":\"repomix\",\"command\":\"npx\",\"args\":[\"-y\",\"repomix\",\"--mcp\"]}'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-insiders --add-mcp '{\"name\":\"repomix\",\"command\":\"npx\",\"args\":[\"-y\",\"repomix\",\"--mcp\"]}'\n```\n\n----------------------------------------\n\nTITLE: Processing Remote Repository with Docker\nDESCRIPTION: Docker command to process a remote repository and output the result to a specific directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix --remote https://github.com/yamadashy/repomix\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Docker\nDESCRIPTION: Docker commands to run Repomix in an isolated container environment with volume mounting for local directories.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Functions for Greeting in JavaScript\nDESCRIPTION: Utility module that exports a greet function which accepts a name parameter and returns a formatted greeting string using template literals.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nmodule.exports = {\n  greet,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in VS Code via Command Line\nDESCRIPTION: Commands to add Repomix as an MCP server in VS Code or VS Code Insiders through the command line interface.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode --add-mcp '{\"name\":\"repomix\",\"command\":\"npx\",\"args\":[\"-y\",\"repomix\",\"--mcp\"]}'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncode-insiders --add-mcp '{\"name\":\"repomix\",\"command\":\"npx\",\"args\":[\"-y\",\"repomix\",\"--mcp\"]}'\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Docker in specific directory\nDESCRIPTION: Using Docker to run Repomix in a specific directory without installation.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix path/to/directory\n```\n\n----------------------------------------\n\nTITLE: Docker-based Development for Repomix\nDESCRIPTION: Commands for building a Docker image and running Repomix in a Docker container. This approach isolates the development environment and ensures consistency across different systems.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build image\ndocker build -t repomix .\n\n# Run container\ndocker run -v ./:/app -it --rm repomix\n```\n\n----------------------------------------\n\nTITLE: Repomix Ignore Patterns Example\nDESCRIPTION: Example .repomixignore file showing common patterns for excluding files and directories from processing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# Cache directories\n.cache/\ntmp/\n\n# Build outputs\ndist/\nbuild/\n\n# Logs\n*.log\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Cline via JSON\nDESCRIPTION: JSON configuration for adding Repomix as an MCP server in the Cline VS Code extension by editing the cline_mcp_settings.json file.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"repomix\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"repomix\",\n        \"--mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Commands for Repomix\nDESCRIPTION: Docker commands for running Repomix in a containerized environment with various options.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix path/to/directory\ndocker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix --remote https://github.com/yamadashy/repomix\n```\n\n----------------------------------------\n\nTITLE: Configuring Comment Removal in Repomix\nDESCRIPTION: JSON configuration to enable the comment removal feature in Repomix through the repomix.config.json file. Setting 'removeComments' to true will activate this functionality.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/comment-removal.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"removeComments\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output Structure Example\nDESCRIPTION: Example of plain text output format showing file summary, directory structure, and file contents organization.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThis file is a merged representation of the entire codebase...\n\n================\nFile Summary\n================\n(Metadata and AI instructions)\n\n================\nDirectory Structure\n================\nsrc/\n  index.ts\n  utils/\n    helper.ts\n\n================\nFiles\n================\n\n================\nFile: src/index.ts\n================\n// File contents here\n```\n\n----------------------------------------\n\nTITLE: Configuring Repomix with JSON Configuration\nDESCRIPTION: Configuration file for Repomix tool that specifies output settings including file path, header text, and various formatting options, as well as file ignore patterns for the repository.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"output\": {\n    \"filePath\": \"repomix-output.txt\",\n    \"headerText\": \"This repository is simple-project\",\n    \"removeComments\": false,\n    \"removeEmptyLines\": false,\n    \"topFilesLength\": 5,\n    \"showLineNumbers\": false\n  },\n  \"ignore\": {\n    \"useGitignore\": true,\n    \"useDefaultPatterns\": true,\n    \"customPatterns\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Repomix in Docker Container\nDESCRIPTION: Command to run Repomix in a Docker container, mounting the current directory to /app. This allows for using Repomix in an isolated environment.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v ./:/app -it --rm repomix\n```\n\n----------------------------------------\n\nTITLE: Copying Repomix Output to Clipboard\nDESCRIPTION: Command to automatically copy the generated output to the system clipboard, facilitating easy sharing or pasting.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --copy\n```\n\n----------------------------------------\n\nTITLE: Repomix Default Ignore Patterns\nDESCRIPTION: Common ignore patterns that are included by default in Repomix configuration.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nnode_modules/**\n.git/**\ncoverage/**\ndist/**\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Output with Repomix\nDESCRIPTION: Command to generate Markdown-formatted output using Repomix. Markdown format offers readable formatting and includes file summaries, directory structures, and file contents.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/fr/guide/output.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style markdown\n```\n\nLANGUAGE: markdown\nCODE:\n```\nCe fichier est une représentation fusionnée de toute la base de code...\n# Résumé du fichier\n(Métadonnées et instructions pour l'IA)\n# Structure des répertoires\n```\nsrc/\nindex.ts\nutils/\nhelper.ts\n```\n# Fichiers\n## Fichier: src/index.ts\n```typescript\n// Contenu du fichier ici\n```\n```\n\n----------------------------------------\n\nTITLE: Building Repomix Docker Image\nDESCRIPTION: Command to build a Docker image for Repomix. This provides a containerized environment for development and testing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t repomix .\n```\n\n----------------------------------------\n\nTITLE: Using Code Compression in Repomix\nDESCRIPTION: Example showing how to use the --compress option in Repomix, which performs intelligent code extraction to reduce token count while preserving important structural information.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --compress\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Markdown Output Style\nDESCRIPTION: Command line example showing how to generate output in Markdown format using the --style option.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style markdown\n```\n\n----------------------------------------\n\nTITLE: Setting XML Output Format in Repomix\nDESCRIPTION: Command to generate output in XML format, which is optimized for AI processing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style xml\n```\n\n----------------------------------------\n\nTITLE: Using Code Compression with Remote Repositories in Bash\nDESCRIPTION: Command to enable code compression when analyzing remote repositories.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/code-compress.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --remote user/repo --compress\n```\n\n----------------------------------------\n\nTITLE: Generating XML Output with Repomix\nDESCRIPTION: Command to generate XML-formatted output using Repomix. XML format is optimized for AI processing and includes file summaries, directory structures, and file contents.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/fr/guide/output.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style xml\n```\n\nLANGUAGE: xml\nCODE:\n```\nCe fichier est une représentation fusionnée de toute la base de code...\n<file_summary>\n(Métadonnées et instructions pour l'IA)\n</file_summary>\n<directory_structure>\nsrc/\n  index.ts\n  utils/\n    helper.ts\n</directory_structure>\n<files>\n<file path=\"src/index.ts\">\n// Contenu du fichier ici\n</file>\n</files>\n```\n\n----------------------------------------\n\nTITLE: Repomix Configuration File\nDESCRIPTION: JSON configuration file for setting default output format and file path.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"style\": \"xml\",\n    \"filePath\": \"output.xml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Code Compression with Command Line in Bash\nDESCRIPTION: Basic usage of the code compression feature using the --compress flag in the command line.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/code-compress.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --compress\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting for Repomix\nDESCRIPTION: Commands for running tests, generating test coverage reports, and performing various linting operations on the Repomix codebase. These help maintain code quality and identify potential issues.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests\nnpm run test\n\n# Test coverage\nnpm run test-coverage\n\n# Linting\nnpm run lint-biome\nnpm run lint-ts\nnpm run lint-secretlint\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix MCP Server in VS Code Insiders via Command Line\nDESCRIPTION: Command to add Repomix as an MCP server in VS Code Insiders. This is similar to the standard VS Code configuration but targets the Insiders build.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncode-insiders --add-mcp '{\"name\":\"repomix\",\"command\":\"npx\",\"args\":[\"-y\",\"repomix\",\"--mcp\"]}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Repomix Output Format\nDESCRIPTION: JSON configuration to set the default output format for Repomix. This example sets XML as the default format and specifies the output file path.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/fr/guide/output.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"style\": \"xml\",\n    \"filePath\": \"output.xml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Packing Local Codebase with Repomix\nDESCRIPTION: Example JSON parameters for the pack_codebase tool, which packages a local code directory into a consolidated file for AI analysis. Parameters include the directory path, compression option, and file inclusion/exclusion patterns.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/llms-install.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directory\": \"/path/to/your/project\",\n  \"compress\": true,\n  \"includePatterns\": \"src/**/*.ts,**/*.md\",\n  \"ignorePatterns\": \"**/*.log,tmp/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage\nDESCRIPTION: Command to run tests with coverage reporting. This helps identify areas of code that may need additional testing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-coverage\n```\n\n----------------------------------------\n\nTITLE: Setting Markdown Output Format in Repomix\nDESCRIPTION: Command to generate output in Markdown format, useful for documentation purposes or when working with platforms that support Markdown.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style markdown\n```\n\n----------------------------------------\n\nTITLE: Setting Plain Text Output Format in Repomix\nDESCRIPTION: Command to generate output in plain text format, providing a simple representation without formatting.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style plain\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix with Homebrew\nDESCRIPTION: Installing Repomix on macOS or Linux systems using the Homebrew package manager.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install repomix\n```\n\n----------------------------------------\n\nTITLE: Packing Remote GitHub Repository with Repomix\nDESCRIPTION: Example JSON parameters for the pack_remote_repository tool, which fetches, clones, and packages a GitHub repository for AI analysis. Parameters include the repository URL, compression option, and file inclusion/exclusion patterns.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/llms-install.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote\": \"yamadashy/repomix\",\n  \"compress\": true,\n  \"includePatterns\": \"src/**/*.ts,**/*.md\",\n  \"ignorePatterns\": \"**/*.log,tmp/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix as a Dependency with npm\nDESCRIPTION: Command to install Repomix as a dependency in a Node.js project using npm.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install repomix\n```\n\n----------------------------------------\n\nTITLE: Generating Plain Text Output with Repomix\nDESCRIPTION: Command to generate plain text output using Repomix. Plain text format provides a simple structure with sections for file summary, directory structure, and file contents.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/fr/guide/output.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style plain\n```\n\nLANGUAGE: text\nCODE:\n```\nCe fichier est une représentation fusionnée de toute la base de code...\n================\nRésumé du fichier\n================\n(Métadonnées et instructions pour l'IA)\n================\nStructure des répertoires\n================\nsrc/\n  index.ts\n  utils/\n    helper.ts\n================\nFichiers\n================\n================\nFichier: src/index.ts\n================\n// Contenu du fichier ici\n```\n\n----------------------------------------\n\nTITLE: Setting Markdown Output Format in Repomix\nDESCRIPTION: Command to generate output in Markdown format for readable documentation.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style markdown\n```\n\n----------------------------------------\n\nTITLE: Reading Repomix Output in Web Environments\nDESCRIPTION: Example JSON parameters for the read_repomix_output tool, which reads the contents of a previously generated Repomix output file using its ID. This is useful in environments where direct file access is not possible.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/llms-install.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"outputId\": \"8f7d3b1e2a9c6054\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Repomix Configuration File with CLI\nDESCRIPTION: Command to create a new Repomix configuration file in the current directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init\n```\n\n----------------------------------------\n\nTITLE: Setting Plain Text Output Format in Repomix\nDESCRIPTION: Command to generate output in plain text format for universal compatibility.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style plain\n```\n\n----------------------------------------\n\nTITLE: Repomix Output Format Commands\nDESCRIPTION: Commands for specifying different output formats including XML, Markdown, and plain text.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# XML format (default)\nrepomix --style xml\n\n# Markdown format\nrepomix --style markdown\n\n# Plain text format\nrepomix --style plain\n```\n\n----------------------------------------\n\nTITLE: Using File System MCP Tools in TypeScript\nDESCRIPTION: TypeScript code example demonstrating how to use the file_system_read_file and file_system_read_directory tools to safely interact with the local file system.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/mcp-server.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Reading a file\nconst fileContent = await tools.file_system_read_file({\n  path: '/absolute/path/to/file.txt'\n});\n\n// Listing directory contents\nconst dirContent = await tools.file_system_read_directory({\n  path: '/absolute/path/to/directory'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Global Repomix Configuration\nDESCRIPTION: Command to create a global configuration file that applies to all projects unless overridden by a local configuration.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init --global\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Plain Text Output Style\nDESCRIPTION: Command line example showing how to generate output in plain text format using the --style option.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style plain\n```\n\n----------------------------------------\n\nTITLE: Architecture Review Prompt for Code Analysis\nDESCRIPTION: A prompt template for requesting an architectural analysis of a codebase, focusing on structure, potential issues, scalability improvements, and best practices identification.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAnalyze this codebase's architecture:\n1. Evaluate the overall structure and patterns\n2. Identify potential architectural issues\n3. Suggest improvements for scalability\n4. Note areas that follow best practices\n\nFocus on maintainability and modularity.\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix as a Dependency\nDESCRIPTION: Command to install Repomix as a dependency in a Node.js project using npm.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install repomix\n```\n\n----------------------------------------\n\nTITLE: Running Repomix with Docker in current directory\nDESCRIPTION: Using Docker to run Repomix in the current directory without installation.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v .:/app -it --rm ghcr.io/yamadashy/repomix\n```\n\n----------------------------------------\n\nTITLE: Generating Plain Text Format Output with Repomix\nDESCRIPTION: Example of the plain text output format from Repomix, which structures the codebase content with section headers for file summary, directory structure, files, and custom instructions.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nThis file is a merged representation of the entire codebase, combining all repository files into a single document.\n\n================================================================\nFile Summary\n================================================================\n(Metadata and usage AI instructions)\n\n================================================================\nDirectory Structure\n================================================================\nsrc/\n  cli/\n    cliOutput.ts\n    index.ts\n  config/\n    configLoader.ts\n\n(...remaining directories)\n\n================================================================\nFiles\n================================================================\n\n================\nFile: src/index.js\n================\n// File contents here\n\n================\nFile: src/utils.js\n================\n// File contents here\n\n(...remaining files)\n\n================================================================\nInstruction\n================================================================\n(Custom instructions from `output.instructionFilePath`)\n```\n\n----------------------------------------\n\nTITLE: Test Coverage Analysis Prompt\nDESCRIPTION: A prompt template for reviewing test coverage, focusing on identifying untested components, suggesting additional test cases, reviewing test quality, and recommending testing strategies.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nReview the test coverage:\n1. Identify untested components\n2. Suggest additional test cases\n3. Review test quality\n4. Recommend testing strategies\n```\n\n----------------------------------------\n\nTITLE: Setting up Repomix for Local Development using Git\nDESCRIPTION: Instructions for cloning the Repomix repository and installing dependencies to begin local development. This is the first step for anyone looking to contribute to the project.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yamadashy/repomix.git\ncd repomix\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Repomix globally with Yarn\nDESCRIPTION: Installing Repomix globally on your system using Yarn package manager.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add repomix\n```\n\n----------------------------------------\n\nTITLE: Markdown Output Structure Example\nDESCRIPTION: Example of Markdown output format showing file summary, directory structure, and file contents organization.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/output.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nThis file is a merged representation of the entire codebase...\n\n# File Summary\n(Metadata and AI instructions)\n\n# Directory Structure\n```\nsrc/\nindex.ts\nutils/\nhelper.ts\n```\n\n# Files\n\n## File: src/index.ts\n```typescript\n// File contents here\n```\n```\n\n----------------------------------------\n\nTITLE: Architecture Documentation Generation Prompt\nDESCRIPTION: A prompt template for documenting system architecture, including high-level overview, component interactions, data flow diagrams, design decisions, and system constraints.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nDocument the system architecture:\n1. High-level overview\n2. Component interactions\n3. Data flow diagrams\n4. Design decisions and rationale\n5. System constraints and limitations\n```\n\n----------------------------------------\n\nTITLE: Running Repomix Locally\nDESCRIPTION: Command to run the Repomix application in a local development environment after setup. This allows testing changes directly.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run repomix\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Vitest\nDESCRIPTION: Command to run the test suite using Vitest. This verifies that changes don't break existing functionality.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing Repomix Configuration with CLI\nDESCRIPTION: Command to create a default repomix.config.json file in your project root.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init\n```\n\n----------------------------------------\n\nTITLE: Developer Guide Generation Prompt\nDESCRIPTION: A prompt template for creating a developer guide that covers setup instructions, project structure, development workflow, testing approach, and troubleshooting steps.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nCreate a developer guide covering:\n1. Setup instructions\n2. Project structure overview\n3. Development workflow\n4. Testing approach\n5. Common troubleshooting steps\n```\n\n----------------------------------------\n\nTITLE: Running Repomix Development Commands for Testing and Linting\nDESCRIPTION: Essential npm commands for Repomix development workflow, including running the CLI tool, executing tests with coverage, and linting the codebase.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run CLI\nnpm run repomix\n\n# Run tests\nnpm run test\nnpm run test-coverage\n\n# Lint code\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Disabling Security Checks via CLI in Repomix\nDESCRIPTION: Command-line option to disable the default security checks in Repomix. Used when you want to bypass the automatic detection of sensitive information.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/security.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --no-security-check\n```\n\n----------------------------------------\n\nTITLE: Creating Global Repomix Configuration\nDESCRIPTION: Command to create a global configuration file that applies to all projects when no local configuration is present.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --init --global\n```\n\n----------------------------------------\n\nTITLE: AI Prompt for Test Case Generation\nDESCRIPTION: Example prompt for AI tools to suggest comprehensive unit tests including edge cases and error scenarios.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nAnalyze the code in this file and suggest a comprehensive set of unit tests for the main functions and classes. Include edge cases and potential error scenarios.\n```\n\n----------------------------------------\n\nTITLE: Testing and Building Repomix for Release\nDESCRIPTION: Commands for running tests with coverage and building the project before publishing a new release. Ensures the release candidate passes all tests and produces a valid build.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-coverage\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting XML Output Format in Repomix\nDESCRIPTION: Command to specify XML as the output style, which is the default format for repomix output.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --style xml\n```\n\n----------------------------------------\n\nTITLE: Example .repomixignore File Pattern Format\nDESCRIPTION: Sample content for a .repomixignore file showing how to specify directories and file patterns to exclude from Repomix processing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# Diretórios de cache\n.cache/\ntmp/\n\n# Saídas de build\ndist/\nbuild/\n\n# Logs\n*.log\n```\n\n----------------------------------------\n\nTITLE: Example Custom Instructions in Markdown\nDESCRIPTION: Sample markdown content showing how to structure repository analysis instructions with guidelines for code review focus areas.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/custom-instructions.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Repository Instructions\n\nThis repository contains the source code for the Repomix tool. Please follow these guidelines when analyzing the code:\n\n1. Focus on the core functionality in the `src/core` directory.\n2. Pay special attention to the security checks in `src/core/security`.\n3. Ignore any files in the `tests` directory.\n```\n\n----------------------------------------\n\nTITLE: Starting Website Development Server\nDESCRIPTION: Command to run the Repomix website locally during development. This requires Docker and makes the site available at http://localhost:5173/.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Prerequisites: Docker must be installed on your system\n\n# Start the website development server\nnpm run website\n\n# Access the website at http://localhost:5173/\n```\n\n----------------------------------------\n\nTITLE: Example AI Prompt for Repomix Output\nDESCRIPTION: A sample prompt in German to send to an AI assistant along with the generated repository file for code review and refactoring suggestions.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/de/guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDiese Datei enthält alle Dateien im Repository in einer Datei zusammengefasst.\nIch möchte den Code refaktorieren, bitte überprüfen Sie ihn zuerst.\n```\n\n----------------------------------------\n\nTITLE: Example Custom Instruction for Repomix\nDESCRIPTION: Example of a custom instruction file that can be referenced using the output.instructionFilePath configuration option. This provides context about the project for AI systems analyzing the code.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n# Coding Guidelines\n\n- Follow the Airbnb JavaScript Style Guide\n- Suggest splitting files into smaller, focused units when appropriate\n- Add comments for non-obvious logic. Keep all text in English\n- All new features should have corresponding unit tests\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Output with Custom Instructions\nDESCRIPTION: Example of how the custom instructions appear in the final Repomix output file. The content is wrapped in an <instruction> XML tag that systems processing the repository can recognize and handle appropriately.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/custom-instructions.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<instruction>\n# Instruções do Repositório\n\nEste repositório contém o código-fonte da ferramenta Repomix. Por favor, siga estas diretrizes ao analisar o código:\n\n1. Concentre-se na funcionalidade principal no diretório `src/core`.\n2. Preste atenção especial às verificações de segurança em `src/core/security`.\n3. Ignore quaisquer arquivos no diretório `tests`.\n</instruction>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Repomix Website\nDESCRIPTION: This snippet shows how to start the development server for the Repomix website. It uses npm to run the 'website' script, which likely starts a local development server. The website can then be accessed at http://localhost:5173/.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start the website development server\nnpm run website\n\n# Access the website at http://localhost:5173/\n```\n\n----------------------------------------\n\nTITLE: Updating Version for Repomix Release\nDESCRIPTION: Command for incrementing the version number in preparation for a new release of Repomix. Supports patch, minor, or major version increments following semantic versioning conventions.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm version patch  # or minor/major\n```\n\n----------------------------------------\n\nTITLE: Showing Line Numbers in Repomix Output\nDESCRIPTION: Command to include line numbers in the output, which can be helpful for reference and debugging purposes.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --output-show-line-numbers\n```\n\n----------------------------------------\n\nTITLE: Dependency Testing Pattern in TypeScript\nDESCRIPTION: Demonstrates the recommended pattern for dependency injection in TypeScript functions to improve testability.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/repomix-instruction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const functionName = async (\n  param1: Type1,\n  param2: Type2,\n  deps = {\n    defaultFunction1,\n    defaultFunction2,\n  }\n) => {\n  // Use deps.defaultFunction1() instead of direct call\n};\n```\n\n----------------------------------------\n\nTITLE: Repomix CLI Commands and Options\nDESCRIPTION: Various CLI commands for using Repomix with different options including directory targeting and glob patterns.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrepomix\nrepomix path/to/directory\nrepomix --include \"src/**/*.ts,**/*.md\"\nrepomix --ignore \"**/*.log,tmp/\"\n```\n\n----------------------------------------\n\nTITLE: Building Repomix Website for Production\nDESCRIPTION: This snippet demonstrates how to build the Repomix website for production deployment. It uses npm to run the 'website:build' script, which likely compiles and optimizes the website. The resulting files are output to the 'client/dist' directory.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run website:build\n```\n\n----------------------------------------\n\nTITLE: Disabling Security Check in Repomix\nDESCRIPTION: Command to bypass the built-in security checks, which may be necessary in certain trusted environments or specific use cases.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/usage.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --no-security-check\n```\n\n----------------------------------------\n\nTITLE: Original TypeScript Code Example Before Compression\nDESCRIPTION: An example of TypeScript code before compression, including imports, function implementation, and interface definition.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/code-compress.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShoppingItem } from './shopping-item';\n\n/**\n * Calculate the total price of shopping items\n */\nconst calculateTotal = (\n  items: ShoppingItem[]\n) => {\n  let total = 0;\n  for (const item of items) {\n    total += item.price * item.quantity;\n  }\n  return total;\n}\n\n// Shopping item interface\ninterface Item {\n  name: string;\n  price: number;\n  quantity: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating XML Format Output with Repomix\nDESCRIPTION: Example of the XML output format from Repomix, which structures the codebase content in a hierarchical manner with tags for file summary, directory structure, files, and custom instructions.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\nThis file is a merged representation of the entire codebase, combining all repository files into a single document.\n\n<file_summary>\n  (Metadata and usage AI instructions)\n</file_summary>\n\n<directory_structure>\nsrc/\ncli/\ncliOutput.ts\nindex.ts\n\n(...remaining directories)\n</directory_structure>\n\n<files>\n<file path=\"src/index.js\">\n  // File contents here\n</file>\n\n(...remaining files)\n</files>\n\n<instruction>\n(Custom instructions from `output.instructionFilePath`)\n</instruction>\n```\n\n----------------------------------------\n\nTITLE: Publishing Repomix Package\nDESCRIPTION: Command for publishing the Repomix package to the npm registry after version update, testing, and building are complete. Makes the new version available for public installation.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/setup.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Updating Repomix with npm and yarn\nDESCRIPTION: Commands for updating a globally installed Repomix package using npm or yarn package managers.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm update -g repomix\n\n# Using yarn\nyarn global upgrade repomix\n```\n\n----------------------------------------\n\nTITLE: Compressed TypeScript Code Example\nDESCRIPTION: The same TypeScript code after compression, showing how implementation details are removed while preserving structural elements like function signatures and interfaces.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/code-compress.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShoppingItem } from './shopping-item';\n⋮----\n/**\n * Calculate the total price of shopping items\n */\nconst calculateTotal = (\n  items: ShoppingItem[]\n) => {\n⋮----\n// Shopping item interface\ninterface Item {\n  name: string;\n  price: number;\n  quantity: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Format Output with Repomix\nDESCRIPTION: Example of the Markdown output format from Repomix, which structures the codebase content with headings for file summary, repository structure, files, and custom instructions.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nThis file is a merged representation of the entire codebase, combining all repository files into a single document.\n\n# File Summary\n\n(Metadata and usage AI instructions)\n\n# Repository Structure\n\n```\nsrc/\n  cli/\n    cliOutput.ts\n    index.ts\n```\n\n(...remaining directories)\n\n# Repository Files\n\n## File: src/index.js\n\n```\n// File contents here\n```\n\n(...remaining files)\n\n# Instruction\n\n(Custom instructions from `output.instructionFilePath`)\n```\n\n----------------------------------------\n\nTITLE: Generated XML Output Format\nDESCRIPTION: Example of how the custom instructions appear in the final XML output, wrapped in instruction tags.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/custom-instructions.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<instruction>\n# Repository Instructions\n\nThis repository contains the source code for the Repomix tool. Please follow these guidelines when analyzing the code:\n\n1. Focus on the core functionality in the `src/core` directory.\n2. Pay special attention to the security checks in `src/core/security`.\n3. Ignore any files in the `tests` directory.\n</instruction>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example with Comments\nDESCRIPTION: Example JavaScript code containing both single-line and multi-line comments that would be processed by Repomix's comment removal feature.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/comment-removal.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This is a single-line comment\nfunction test() {\n  /* This is a\n     multi-line comment */\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AI Prompt Usage with Repomix Output\nDESCRIPTION: Example prompt for using the generated repomix-output.txt file with AI assistants.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis file contains all the files in the repository combined into one.\nI want to refactor the code, so please review it first.\n```\n\n----------------------------------------\n\nTITLE: Verifying Repomix installation\nDESCRIPTION: Commands to verify that Repomix is correctly installed and working by checking version and help information.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrepomix --version\nrepomix --help\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de código JavaScript con comentarios\nDESCRIPTION: Muestra un ejemplo de código JavaScript que contiene tanto comentarios de una sola línea como comentarios multilínea que serían eliminados por Repomix.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/es/guide/comment-removal.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Este es un comentario de una sola línea\nfunction test() {\n  /* Este es un\n     comentario multilínea */\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: AI Prompt Example for Code Review\nDESCRIPTION: Example prompt for AI tools to perform a comprehensive code review and suggest refactoring opportunities.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nThis file contains my entire codebase. Please review the overall structure and suggest any improvements or refactoring opportunities, focusing on maintainability and scalability.\n```\n\n----------------------------------------\n\nTITLE: Performance Review Prompt for Code Analysis\nDESCRIPTION: A prompt template for requesting a performance review of a codebase, focusing on bottleneck identification, resource utilization, algorithmic efficiency, and caching strategies assessment.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nReview the codebase for performance:\n1. Identify performance bottlenecks\n2. Check resource utilization\n3. Review algorithmic efficiency\n4. Assess caching strategies\n\nInclude specific optimization recommendations.\n```\n\n----------------------------------------\n\nTITLE: Configurando la eliminación de comentarios en Repomix\nDESCRIPTION: Muestra cómo habilitar la opción de eliminación de comentarios mediante la configuración 'removeComments' en el archivo repomix.config.json.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/es/guide/comment-removal.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"removeComments\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AI Prompt for Code Quality Assessment\nDESCRIPTION: Example prompt for AI tools to evaluate code quality and suggest improvements based on best practices.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nReview the codebase for adherence to coding best practices and industry standards. Identify areas where the code could be improved in terms of readability, maintainability, and efficiency. Suggest specific changes to align the code with best practices.\n```\n\n----------------------------------------\n\nTITLE: API Documentation Generation Prompt\nDESCRIPTION: A prompt template for generating comprehensive API documentation, including endpoint listings, request/response formats, usage examples, and limitation notes.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nGenerate comprehensive API documentation:\n1. List and describe all public endpoints\n2. Document request/response formats\n3. Include usage examples\n4. Note any limitations or constraints\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Options in Repomix Config File\nDESCRIPTION: JSON configuration to disable security checks in the repomix.config.json file. This provides a persistent configuration option rather than specifying it on the command line each time.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/security.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": {\n    \"enableSecurityCheck\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Security Review Prompt for Code Analysis\nDESCRIPTION: A prompt template for requesting a security review of a codebase, focusing on identifying vulnerabilities, security anti-patterns, error handling, and dependency security assessment.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPerform a security review of this codebase:\n1. Identify potential security vulnerabilities\n2. Check for common security anti-patterns\n3. Review error handling and input validation\n4. Assess dependency security\n\nProvide specific examples and remediation steps.\n```\n\n----------------------------------------\n\nTITLE: AI Prompt for Documentation Generation\nDESCRIPTION: Example prompt for AI tools to generate project documentation based on Repomix output.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nBased on the codebase in this file, please generate a detailed README.md that includes an overview of the project, its main features, setup instructions, and usage examples.\n```\n\n----------------------------------------\n\nTITLE: Reading Files with Secure Validation\nDESCRIPTION: Example JSON parameters for the file_system_read_file tool, which reads a file using an absolute path with security validation. This tool implements security checks to prevent access to sensitive information.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/llms-install.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/absolute/path/to/file.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Analysis Prompt\nDESCRIPTION: A prompt template for analyzing project dependencies, including identification of outdated packages, security vulnerability checks, alternative package suggestions, and usage pattern reviews.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/prompt-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nAnalyze the project dependencies:\n1. Identify outdated packages\n2. Check for security vulnerabilities\n3. Suggest alternative packages\n4. Review dependency usage patterns\n\nInclude specific upgrade recommendations.\n```\n\n----------------------------------------\n\nTITLE: Configuring File Ignores with .repomixignore\nDESCRIPTION: Ignore configuration file for Repomix that specifies build directories should be excluded from processing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n**/build/**\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents Securely\nDESCRIPTION: Example JSON parameters for the file_system_read_directory tool, which lists the contents of a directory using an absolute path. This tool provides safe directory traversal with proper error handling.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/llms-install.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"/absolute/path/to/directory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Ignore Patterns in Repomix\nDESCRIPTION: List of common directory and file patterns that Repomix ignores by default when processing repository content.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nnode_modules/**\n.git/**\ncoverage/**\ndist/**\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Directory Ignores\nDESCRIPTION: Ignore configuration for the resources directory that specifies ignored-data.txt should be excluded from processing.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nignored-data.txt\n```\n\n----------------------------------------\n\nTITLE: Starting the Project with NPM\nDESCRIPTION: Command to start the project which outputs a greeting message to the console.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/inputs/simple-project/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Security Check Output Example in Repomix\nDESCRIPTION: Example output showing how Repomix reports security issues found during scanning. The output identifies suspicious files and the specific security concerns detected in each file.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/security.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n🔍 Security Check:\n──────────────────\n2 suspicious file(s) detected and excluded:\n1. config/credentials.json\n  - Found AWS access key\n2. .env.local\n  - Found database password\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Layout\nDESCRIPTION: Shows the complete directory structure of the Repomix project, including source code, tests, and documentation organization.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/repomix-instruction.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrepomix/\n├── src/ # Main source code\n│   ├── cli/ # Command-line interface logic (argument parsing, command handling, output)\n│   ├── config/ # Configuration loading, schema, and defaults\n│   ├── core/ # Core logic of Repomix\n│   │   ├── file/ # File handling (reading, processing, searching, tree structure generation, git commands)\n│   │   ├── metrics/ # Calculating code metrics (character count, token count)\n│   │   ├── output/ # Output generation (different styles, headers, etc.)\n│   │   ├── packager/ # Orchestrates file collection, processing, output, and clipboard operations.\n│   │   ├── security/ # Security checks to exclude sensitive files\n│   │   ├── tokenCount/ # Token counting using Tiktoken\n│   │   └── tree-sitter/ # Code parsing using Tree-sitter and language-specific queries\n│   └── shared/ # Shared utilities and types (error handling, logging, helper functions)\n├── tests/ # Unit and integration tests (organized mirroring src/)\n│   ├── cli/\n│   ├── config/\n│   ├── core/\n│   ├── integration-tests/\n│   ├── shared/\n│   └── testing/\n└── website/ # Documentation website (VitePress)\n    ├── client/      # Client-side code (Vue.js components, styles, configuration)\n    │   ├── .vitepress/  # VitePress configuration and theme\n    │   │   ├── config/  # Site configuration files (navigation, sidebar, etc.)\n    │   │   └── theme/   # Custom theme and styles\n    │   ├── components/ # Vue.js components for the website\n    │   └── src/        # Markdown files for the documentation in various languages (en, ja, etc.)\n    └── server/      # Server-side API (for remote repository processing)\n        └── src/       # Server source code (API endpoints, request handling)\n```\n\n----------------------------------------\n\nTITLE: Executing Repomix via NPX in Bash\nDESCRIPTION: This command runs Repomix in your project directory to generate an AI-friendly representation of your repository.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/de/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx repomix\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Package with package.json\nDESCRIPTION: Package configuration for the simple-project with basic metadata, main entry point configuration, and a start script that runs the application with Node.js.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"simple-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple project for testing Repomix\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"node src/index.js\"\n  },\n  \"keywords\": [\"simple\", \"test\"],\n  \"author\": \"Test Author\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Project Verification Commands\nDESCRIPTION: Commands for verifying code style compliance and running tests before submitting changes.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/repomix-instruction.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint  # Ensure code style compliance\nnpm run test  # Verify all tests pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Application Entry Point in JavaScript\nDESCRIPTION: Main entry point for the application that imports the greet function from the utils module and calls it with 'World' as the parameter. The result is logged to the console.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { greet } = require('./utils');\n\nfunction main() {\n  console.log(greet('World'));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Updating Repomix via NPM\nDESCRIPTION: Command to update the Repomix package to the latest version globally using npm package manager.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/repomix-instruction.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm update -g repomix\n```\n\n----------------------------------------\n\nTITLE: Documenting Project Usage with Markdown README\nDESCRIPTION: README file that provides an overview of the simple project and instructions for running it using npm start, which will output a greeting message to the console.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/tests/integration-tests/fixtures/packager/outputs/simple-project-output.txt#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n# Simple Project\n\nThis is a simple project used for testing Repomix.\n\n## Usage\n\nTo run the project:\n\n```\nnpm start\n```\n\nThis will output a greeting message to the console.\n```\n\n----------------------------------------\n\nTITLE: Running Linting with Biome\nDESCRIPTION: Command to run linting using Biome. This ensures code follows the project's style guidelines before submission.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue and PR Verification Commands\nDESCRIPTION: Shows the GitHub CLI commands for verifying issue and pull request content when writing release notes.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/repomix-instruction.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh issue view <issue-number>  # For checking issue content\ngh pr view <pr-number>        # For checking PR content\n```\n\n----------------------------------------\n\nTITLE: Processing Remote GitHub Repositories with Repomix\nDESCRIPTION: Example demonstrating how to clone and process a remote repository using Repomix's runCli function with the remote option.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/development/using-repomix-as-a-library.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runCli, type CliOptions } from 'repomix';\n\n// Clonar e processar um repositório GitHub\nasync function processRemoteRepo(repoUrl) {\n  const options = {\n    remote: repoUrl,\n    output: 'output.xml',\n    compress: true\n  } as CliOptions;\n  \n  return await runCli(['.'], process.cwd(), options);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of pack_remote_repository MCP Tool\nDESCRIPTION: Example JSON parameters for the pack_remote_repository tool, which fetches, clones, and packages a GitHub repository for AI analysis with filtering options.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/pt-br/guide/mcp-server.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote\": \"yamadashy/repomix\",\n  \"compress\": true,\n  \"includePatterns\": \"src/**/*.ts,**/*.md\",\n  \"ignorePatterns\": \"**/*.log,tmp/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Repomix Development Environment with Git and npm\nDESCRIPTION: Commands to clone the Repomix repository and install dependencies using npm. This is the first step for contributors to get the project running locally.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/development/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yamadashy/repomix.git\ncd repomix\nnpm install\n```\n\n----------------------------------------\n\nTITLE: JavaScript After Comment Removal\nDESCRIPTION: The result of the comment removal process on the JavaScript example, showing how all comments are stripped while preserving the functional code.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/en/guide/comment-removal.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test() {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Resultado de JavaScript después de eliminar comentarios\nDESCRIPTION: Muestra el resultado del código JavaScript después de que Repomix ha procesado y eliminado los comentarios, dejando solo el código funcional.\nSOURCE: https://github.com/yamadashy/repomix/blob/main/website/client/src/es/guide/comment-removal.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test() {\n  return true;\n}\n```"
  }
]