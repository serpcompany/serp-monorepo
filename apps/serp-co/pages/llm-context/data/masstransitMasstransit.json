[
  {
    "owner": "masstransit",
    "repo": "masstransit",
    "content": "TITLE: Defining IConsumer Interface in C#\nDESCRIPTION: This code snippet defines the `IConsumer<TMessage>` interface, which is the base interface for all message consumers in MassTransit. The interface includes a single `Consume` method that takes a `ConsumeContext<TMessage>` as a parameter and returns a `Task`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/2.consumers.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IConsumer<in TMessage> :\n    IConsumer\n    where TMessage : class\n{\n    Task Consume(ConsumeContext<TMessage> context);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Record in MassTransit using C#\nDESCRIPTION: This snippet demonstrates how to define a message contract using a C# record for MassTransit. Records are immutable by default which aligns with message contracts that should only consist of properties without behavior. The code includes properties like CommandId, Timestamp, and various address fields. This snippet requires .NET and the MassTransit library to be used effectively.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Company.Application.Contracts\n{\n\tusing System;\n\n\tpublic record UpdateCustomerAddress\n\t{\n\t\tpublic Guid CommandId { get; init; }\n\t\tpublic DateTime Timestamp { get; init; }\n\t\tpublic string CustomerId { get; init; }\n\t\tpublic string HouseNumber { get; init; }\n\t\tpublic string Street { get; init; }\n\t\tpublic string City { get; init; }\n\t\tpublic string State { get; init; }\n\t\tpublic string PostalCode { get; init; }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Consumer in MassTransit with RabbitMQ in C#\nDESCRIPTION: This snippet explains how to register a consumer with MassTransit and setup a receive endpoint using RabbitMQ. By registering a 'SubmitOrderConsumer', and configuring endpoints, MassTransit prepares for message processing with an automatically determined endpoint name by the formatter. Requires MassTransit and RabbitMQ integration, and makes use of MassTransit's consumer registration methods.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n    \n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Docker Container for ARM Architecture\nDESCRIPTION: Command to run the MassTransit RabbitMQ Docker image specifically for ARM-based platforms like Apple Silicon. Sets the platform flag and exposes the necessary ports.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/2.rabbitmq.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --platform linux/arm64 -p 15672:15672 -p 5672:5672 masstransit/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Interface in MassTransit using C#\nDESCRIPTION: This snippet shows how to define a message contract using a C# interface in MassTransit. Interfaces enable MassTransit to create dynamic classes for serialization, which helps in handling get-only properties. Properties such as CommandId, Timestamp, and address-related fields are included. The snippet requires .NET and the MassTransit library.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Company.Application.Contracts\n{\n\tusing System;\n\n\tpublic interface UpdateCustomerAddress\n\t{\n\t\tGuid CommandId { get; }\n\t\tDateTime Timestamp { get; }\n\t\tstring CustomerId { get; }\n\t\tstring HouseNumber { get; }\n\t\tstring Street { get; }\n\t\tstring City { get; }\n\t\tstring State { get; }\n\t\tstring PostalCode { get; }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka Message Producer in MassTransit\nDESCRIPTION: Implements a Kafka message producer that publishes messages to a specified topic. This example shows how to register a producer, start the bus, and produce messages interactively from user input, demonstrating the message production workflow.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/10.kafka.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace KafkaProducer;\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddMassTransit(x =>\n        {\n            x.UsingInMemory();\n\n            x.AddRider(rider =>\n            {\n                rider.AddProducer<KafkaMessage>(\"topic-name\");\n\n                rider.UsingKafka((context, k) => { k.Host(\"localhost:9092\"); });\n            });\n        });\n\n        var provider = services.BuildServiceProvider();\n\n        var busControl = provider.GetRequiredService<IBusControl>();\n\n        await busControl.StartAsync(new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token);\n        try\n        {\n            var producer = provider.GetRequiredService<ITopicProducer<KafkaMessage>>();\n            do\n            {\n                string value = await Task.Run(() =>\n                {\n                    Console.WriteLine(\"Enter text (or quit to exit)\");\n                    Console.Write(\"> \");\n                    return Console.ReadLine();\n                });\n\n                if (\"quit\".Equals(value, StringComparison.OrdinalIgnoreCase))\n                    break;\n\n                await producer.Produce(new\n                {\n                    Text = value\n                });\n            } while (true);\n        }\n        finally\n        {\n            await busControl.StopAsync();\n        }\n    }\n\n    public record KafkaMessage\n    {\n        public string Text { get; init; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with RabbitMQ in C#\nDESCRIPTION: This snippet demonstrates how to configure MassTransit for .NET applications using RabbitMQ as the transport. The example shows how to register MassTransit services and configure RabbitMQ through the 'UsingRabbitMq' method. Requires the MassTransit package from NuGet and proper setup within an ASP.NET Core or .NET Generic Host environment. Key parameters include service context and RabbitMQ configurator. This setup does not start the bus automatically.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing MassTransit;\n\nservices.AddMassTransit(x =>\n{\n    // A Transport\n    x.UsingRabbitMq((context, cfg) =>\n    {\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating DbContext Transaction Filter\nDESCRIPTION: This snippet implements an action filter for managing database transactions in ASP.NET Core. It encapsulates the boilerplate for starting and committing transactions automatically for controller actions.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DbContextTransactionFilter : TypeFilterAttribute\n{\n    public DbContextTransactionFilter()\n        : base(typeof(DbContextTransactionFilterImpl))\n    {\n    }\n\n    // This will be scoped per http request\n    private class DbContextTransactionFilterImpl : IAsyncActionFilter\n    {\n        private readonly MyDbContext _db;\n        private readonly ILogger _logger;\n        private readonly ITransactionalBus _transactionalBus;\n\n        public DbContextTransactionFilterImpl(\n            MyDbContext db,\n            ILogger<DbContextTransactionFilter> logger,\n            ITransactionalBus transactionalBus)\n        {\n            _db = db;\n            _logger = logger;\n            _transactionalBus = transactionalBus;\n        }\n\n        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)\n        {\n            using var transaction = await _db.Database.BeginTransactionAsync();\n\n            try\n            {\n                var actionExecuted = await next();\n                if (actionExecuted.Exception != null && !actionExecuted.ExceptionHandled)\n                {\n                    await transaction.RollbackAsync();\n                }\n                else\n                {\n                    await transaction.CommitAsync();\n                    await _transactionalBus.Release(); // Immediately after CommitAsync\n                }\n            }\n            catch (Exception)\n            {\n                try\n                {\n                    await transaction.RollbackAsync();\n                }\n                catch (Exception e)\n                {\n                    // Swallow failed rollback\n                    _logger.LogWarning(e, \"Tried to rollback transaction but failed, swallow exception.\");\n                }\n\n                throw;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Host in C#\nDESCRIPTION: This code snippet demonstrates how to configure an Azure Service Bus host using MassTransit with a connection string. The snippet shows how to setup the MassTransit services in a console application using Microsoft.Extensions.Hosting.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/3.azure-service-bus.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ServiceBusConsoleListener;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.Hosting;\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        await Host.CreateDefaultBuilder(args)\n            .ConfigureServices((hostContext, services) =>\n            {\n                services.AddMassTransit(x =>\n                {\n                    x.UsingAzureServiceBus((context, cfg) =>\n                    {\n                        cfg.Host(\"connection-string\");\n                    });\n                });\n            })\n            .Build()\n            .RunAsync();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga Repository with PostgreSQL\nDESCRIPTION: This code snippet configures the saga repository to use PostgreSQL.  It adds a saga state machine, configures the Entity Framework repository, sets the concurrency mode (Optimistic or Pessimistic), and adds a DbContext using `UseNpgsql`. It also calls `UsePostgres()` to enable PostgreSQL features.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .EntityFrameworkRepository(r =>\n        {\n            r.ConcurrencyMode = ConcurrencyMode.Optimistic; // or use Pessimistic, which does not require RowVersion\n\n            r.AddDbContext<DbContext, OrderStateDbContext>((provider,builder) =>\n            {\n                builder.UseNpgsql(connectionString, m =>\n                {\n                    m.MigrationsAssembly(Assembly.GetExecutingAssembly().GetName().Name);\n                    m.MigrationsHistoryTable($\"__{nameof(OrderStateDbContext)}\");\n                });\n            });\n\n            //This line is added to enable PostgreSQL features\n            r.UsePostgres();\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Order State and State Machine for Processing Orders\nDESCRIPTION: The snippet defines the state and the state machine for order processing, including event definitions and how to handle order submission and processing with request and response patterns.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState : SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n    public Guid? ProcessingId { get; set; }\n    public Guid? RequestId { get; set; }\n    public Uri ResponseAddress { get; set; }\n    public Guid OrderId { get; set; }\n}\n\npublic class OrderStateMachine : MassTransitStateMachine<OrderState>\n{\n    public State Created { get; set; }\n    \n    public State Cancelled { get; set; }\n    \n    public Event<CreateOrder> OrderSubmitted { get; set; }\n    \n    public Request<OrderState, ProcessOrder, OrderProcessed> ProcessOrder { get; set; }\n    \n    public OrderStateMachine()\n    {\n        InstanceState(m => m.CurrentState);\n        Event(() => OrderSubmitted);\n        Request(() => ProcessOrder, order => order.ProcessingId, config => { config.Timeout = TimeSpan.Zero; });\n\n        Initially(\n            When(OrderSubmitted)\n                .Then(context =>\n                {\n                    context.Saga.CorrelationId = context.Message.CorrelationId;\n                    context.Saga.ProcessingId = Guid.NewGuid();\n\n                    context.Saga.OrderId = Guid.NewGuid();\n\n                    context.Saga.RequestId = context.RequestId;\n                    context.Saga.ResponseAddress = context.ResponseAddress;\n                })\n                .Request(ProcessOrder, context => new ProcessOrder(context.Saga.OrderId, context.Saga.ProcessingId!.Value))\n                .TransitionTo(ProcessOrder.Pending));\n        \n        During(ProcessOrder.Pending,\n            When(ProcessOrder.Completed)\n                .TransitionTo(Created)\n                .ThenAsync(async context =>\n                {\n                    var endpoint = await context.GetSendEndpoint(context.Saga.ResponseAddress);\n                    await endpoint.Send(context.Saga, r => r.RequestId = context.Saga.RequestId);\n                }),\n            When(ProcessOrder.Faulted)\n                .TransitionTo(Cancelled)\n                .ThenAsync(async context =>\n                {\n                    var endpoint = await context.GetSendEndpoint(context.Saga.ResponseAddress);\n                    await endpoint.Send(new OrderCancelled(context.Saga.OrderId, \"Faulted\"), r => r.RequestId = context.Saga.RequestId);\n                }),\n            When(ProcessOrder.TimeoutExpired)\n                .TransitionTo(Cancelled)\n                .ThenAsync(async context =>\n                {\n                    var endpoint = await context.GetSendEndpoint(context.Saga.ResponseAddress);\n                    await endpoint.Send(new OrderCancelled(context.Saga.OrderId, \"Time-out\"), r => r.RequestId = context.Saga.RequestId);\n                }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Message with TransactionContext in C#\nDESCRIPTION: Illustrates the implementation of a transactional consumer that enlists a SQL connection in a transaction retrieved from the ConsumeContext. This ensures that database commands are part of the same transaction scope.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TransactionalConsumer :\n    IConsumer<UpdateCustomerAddress>\n{\n    readonly SqlConnection _connection; // ctor injected\n\n    public async Task Consume(ConsumeContext<UpdateCustomerAddress> context)\n    {\n        var transactionContext = context.GetPayload<TransactionContext>();\n\n        _connection.EnlistTransaction(transactionContext.Transaction);\n\n        using (SqlCommand command = new SqlCommand(sql, _connection))\n        {\n            using (var reader = await command.ExecuteReaderAsync())\n            {\n            }\n        }\n\n        // the connection lifetime should be managed by a container\n        // or perhaps another more specific middleware component.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Outbox with Redelivery and Retry in MassTransit\nDESCRIPTION: Demonstrates how to configure an in-memory outbox with delayed redelivery and immediate message retry for message consumers using MassTransit and dependency injection\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.AddConfigureEndpointsCallback((context,name,cfg) =>\n    {\n        cfg.UseDelayedRedelivery(r => r.Intervals(TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(15), TimeSpan.FromMinutes(30)));\n        cfg.UseMessageRetry(r => r.Immediate(5));\n        cfg.UseInMemoryOutbox(context);\n    });\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Message Consumer in C#\nDESCRIPTION: This code demonstrates a simple implementation of a message consumer.  It consumes the `SubmitOrder` message type and publishes an `OrderSubmitted` message. It uses the `ConsumeContext` to access the message and publish a new message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/2.consumers.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubmitOrderConsumer :\n    IConsumer<SubmitOrder>\n{\n    public async Task Consume(ConsumeContext<SubmitOrder> context)\n    {\n        await context.Publish<OrderSubmitted>(new\n        {\n            context.Message.OrderId\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Out-of-Order Messages\nDESCRIPTION: This code snippet demonstrates how to handle out-of-order messages by defining behavior for events that may arrive in unexpected states.  The `Ignore` method is used to ignore events that are not relevant in the current state. This helps to ensure that the state machine remains in a consistent state, even when messages arrive out of order.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .TransitionTo(Submitted),\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n\n        During(Submitted,\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n\n        During(Accepted,\n            Ignore(SubmitOrder));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with Amazon SQS in C#\nDESCRIPTION: Demonstrates how to set up MassTransit with Amazon SQS using a minimal configuration. It includes setting the AWS region, access key, and secret key.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/4.amazon-sqs.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace AmazonSqsConsoleListener;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.Hosting;\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        await Host.CreateDefaultBuilder(args)\n            .ConfigureServices((hostContext, services) =>\n            {\n                services.AddMassTransit(x =>\n                {\n                    x.UsingAmazonSqs((context, cfg) =>\n                    {\n                        cfg.Host(\"us-east-2\", h =>\n                        {\n                            h.AccessKey(\"your-iam-access-key\");\n                            h.SecretKey(\"your-iam-secret-key\");\n                        });\n                    });\n                });\n            })\n            .Build()\n            .RunAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard MassTransit Bus Configuration in C#\nDESCRIPTION: This snippet configures a single MassTransit bus using RabbitMQ. It demonstrates registering a consumer and a request client for RabbitMQ endpoints, ensuring that the bus can start, stop, and perform health checks via the MassTransit hosted service. Key parameters include the `SubmitOrderConsumer` and `SubmitOrder` client.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/multibus.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n    x.AddRequestClient<SubmitOrder>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Request/Response Message Contracts in C#\nDESCRIPTION: Creates the message contracts for a request/response pattern. The CheckOrderStatus record represents the request with an OrderId property, while OrderStatusResult represents the response with order details including status information.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record CheckOrderStatus\n{\n    public string OrderId { get; init; }\n}\n\npublic record OrderStatusResult\n{\n    public string OrderId { get; init; }\n    public DateTime Timestamp { get; init; }\n    public short StatusCode { get; init; }\n    public string StatusText { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bus with Transaction Middleware in C#\nDESCRIPTION: Shows how to configure a MassTransit bus with transaction middleware to share a single committable transaction across consumers. This configuration includes settings for transaction timeout and isolation level.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nBus.Factory.CreateUsingRabbitMq(cfg =>\n{\n    cfg.ReceiveEndpoint(\"event_queue\", e =>\n    {\n        e.UseTransaction(x =>\n        {\n            Timeout = TimeSpan.FromSeconds(90);\n            IsolationLevel = IsolationLevel.ReadCommitted;\n        });\n\n        e.Consumer<UpdateCustomerAddressConsumer>();\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bus Outbox with Entity Framework Core\nDESCRIPTION: This snippet demonstrates how to configure the bus outbox in MassTransit using Entity Framework with PostgreSQL as the database engine. It specifies the use of the outbox and the database lock provider.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddEntityFrameworkOutbox<RegistrationDbContext>(o =>\n{\n\t// configure which database lock provider to use (Postgres, SqlServer, or MySql)\n\to.UsePostgres();\n\n\t// enable the bus outbox\n\to.UseBusOutbox();\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a Command from a MassTransit Saga\nDESCRIPTION: This snippet shows how to send a command from a MassTransit saga state machine using the Send activity.  It creates a new UpdateAccountHistoryCommand with the saga's CorrelationId as the OrderId and sends it to the specified AccountServiceAddress.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface UpdateAccountHistory\n{\n    Guid OrderId { get; }    \n}\n\npublic class UpdateAccountHistoryCommand :\n    UpdateAccountHistory\n{\n    public UpdateAccountHistoryCommand(Guid orderId)\n    {\n        OrderId = orderId;\n    }\n\n    public Guid OrderId { get; }    \n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine(OrderStateMachineSettings settings)\n    {\n        Initially(\n            When(SubmitOrder)\n                .Send(settings.AccountServiceAddress, context => new UpdateAccountHistoryCommand(context.Saga.CorrelationId))\n                .TransitionTo(Submitted));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Retry on a Specific Endpoint in MassTransit\nDESCRIPTION: Setting up message retry on a manually configured receive endpoint, allowing for more granular control over retry policies for specific consumers or endpoints.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ReceiveEndpoint(\"submit-order\", e =>\n        {\n            e.UseMessageRetry(r => r.Immediate(5));\n\n            e.ConfigureConsumer<SubmitOrderConsumer>(context);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending an Order Message Using ISendEndpointProvider in C#\nDESCRIPTION: This snippet demonstrates how to obtain a send endpoint from a send endpoint provider and use it to send a SubmitOrder message. It defines a simple SubmitOrder record with an OrderId property and shows the proper async pattern for sending messages.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record SubmitOrder\n{\n    public string OrderId { get; init; }\n}\n\npublic async Task SendOrder(ISendEndpointProvider sendEndpointProvider)\n{\n    var endpoint = await sendEndpointProvider.GetSendEndpoint(_serviceAddress);\n\n    await endpoint.Send(new SubmitOrder { OrderId = \"123\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Service Bus Queue Configuration in C#\nDESCRIPTION: This snippet provides a configuration example for an Azure Service Bus receive endpoint using MassTransit. It sets up properties like PrefetchCount, ConcurrentMessageLimit, LockDuration, and MaxAutoRenewDuration. The code requires MassTransit and a valid connection string.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/3.azure-service-bus.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingAzureServiceBus((context, cfg) =>\n    {\n        cfg.Host(\"connection-string\");\n\n        cfg.ReceiveEndpoint(\"input-queue\", e =>\n        {\n            // all of these are optional!!\n\n            e.PrefetchCount = 100;\n\n            // number of messages to deliver concurrently\n            e.ConcurrentMessageLimit = 100;\n\n            // default, but shown for example\n            e.LockDuration = TimeSpan.FromMinutes(5);\n\n            // lock will be renewed up to 30 minutes\n            e.MaxAutoRenewDuration = TimeSpan.FromMinutes(30);\n        });\n    });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Test Harness in C#\nDESCRIPTION: This example demonstrates how to set up the MassTransit Test Harness using C#. The code block shows the configuration of a service collection with business services and the test harness, and a unit test verifying that a consumer is functioning as expected. Ensure MassTransit and related dependencies are installed. Inputs are `SubmitOrder` requests, and expected outputs are the successful consumption and response as an `OrderSubmitted` message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test] \npublic async Task An_example_unit_test() \n{\n    await using var provider = new ServiceCollection()\n        .AddYourBusinessServices() // register all of your normal business services\n        .AddMassTransitTestHarness(x =>\n        {\n            x.AddConsumer<SubmitOrderConsumer>();\n        })\n        .BuildServiceProvider(true);\n\n    var harness = provider.GetRequiredService<ITestHarness>();\n\n    await harness.Start();\n\n    var client = harness.GetRequestClient<SubmitOrder>();\n\n    var response = await client.GetResponse<OrderSubmitted>(new\n    {\n        OrderId = InVar.Id,\n        OrderNumber = \"123\"\n    });\n\n    Assert.IsTrue(await harness.Sent.Any<OrderSubmitted>());\n\n    Assert.IsTrue(await harness.Consumed.Any<SubmitOrder>());\n\n    var consumerHarness = harness.GetConsumerHarness<SubmitOrderConsumer>();\n\n    Assert.That(await consumerHarness.Consumed.Any<SubmitOrder>());\n\n    // test side effects of the SubmitOrderConsumer here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Endpoint Conventions to Send Messages from a Controller\nDESCRIPTION: This example demonstrates sending a message using endpoint conventions from an API controller. Once the convention is configured, the bus can directly send messages of the mapped type without explicitly specifying the destination endpoint.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Post(SubmitOrderRequest request)\n{\n    if (AllGoodWith(request))\n        await _bus.Send(ConvertToCommand(request));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Request Consumer in MassTransit\nDESCRIPTION: Defines a consumer that handles CheckOrderStatus requests and responds with OrderStatusResult messages. It retrieves order information from a repository and either returns the result or throws an exception if the order isn't found.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CheckOrderStatusConsumer(IOrderRepository orderRepository) :\n    IConsumer<CheckOrderStatus>\n{\n    public async Task Consume(ConsumeContext<CheckOrderStatus> context)\n    {\n        var order = await orderRepository.Get(context.Message.OrderId);\n        if (order == null)\n            throw new InvalidOperationException(\"Order not found\");\n        \n        await context.RespondAsync<OrderStatusResult>(new \n        {\n            OrderId = order.Id,\n            order.Timestamp,\n            order.StatusCode,\n            order.StatusText\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoints Automatically\nDESCRIPTION: This code snippet illustrates the automatic configuration of endpoints in MassTransit by simply calling ConfigureEndpoints, which creates default endpoints for all registered consumers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    // Step 1: Add Consumers Here\n\n    // Step 2: Select a Transport\n    x.Using[Transport]((context, cfg) => {\n        // Step 3: Configure the Transport\n\n        // Step 4: Configure Endpoints\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Outbox for Saga Message Processing\nDESCRIPTION: Implements an in-memory outbox to manage message publishing and sending during saga state persistence to prevent concurrency issues\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/3.persistence.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nc.ReceiveEndpoint(\"queue\", e =>\n{\n    e.UseInMemoryOutbox();\n    // other endpoint configuration here\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MassTransit Templates - Bash\nDESCRIPTION: This snippet shows how to install the MassTransit templates necessary for creating new projects.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install MassTransit.Templates\n```\n\n----------------------------------------\n\nTITLE: Implementing a Message Consumer with Send Functionality\nDESCRIPTION: This code defines a consumer for SubmitOrder messages that processes the order and then sends a StartDelivery message using the configured endpoint convention. It demonstrates the proper pattern for sending related messages from within a consumer.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmitOrderConsumer : \n    IConsumer<SubmitOrder>\n{\n    private readonly IOrderSubmitter _orderSubmitter;\n\n    public SubmitOrderConsumer(IOrderSubmitter submitter)\n        => _orderSubmitter = submitter;\n\n    public async Task Consume(IConsumeContext<SubmitOrder> context)\n    {\n        await _orderSubmitter.Process(context.Message);\n\n        await context.Send(new StartDelivery(context.Message.OrderId, DateTime.UtcNow));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callback for MassTransit Endpoint Configuration in C#\nDESCRIPTION: Demonstrates how to apply configurations such as message retry policies to all MassTransit receive endpoints through a callback. Uses 'AddConfigureEndpointsCallback' to register configuration logic, including conditional transport-specific settings using pattern matching. Flexible and powerful for applying global endpoint configurations without altering individual setups directly.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConfigureEndpointsCallback((name, cfg) =>\n{\n    cfg.UseMessageRetry(r => r.Immediate(2));\n});\n```\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConfigureEndpointsCallback((name, cfg) =>\n{\n    if (cfg is IRabbitMqReceiveEndpointConfigurator rmq)\n        rmq.SetQuorumQueue(3);\n        \n    cfg.UseMessageRetry(r => r.Immediate(2));        \n});\n```\n\n----------------------------------------\n\nTITLE: Transitioning States in OrderStateMachine - C#\nDESCRIPTION: This snippet illustrates the setup of event handling in the OrderStateMachine, specifically how the machine transitions to the Submitted state when an OrderSubmitted event is consumed.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/1.state.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderSubmitted(Guid OrderId, string CustomerNumber);\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Event<OrderSubmitted> OrderSubmitted { get; private set; } = null!;\n    \n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public OrderStateMachine() \n    {\n        Initially(\n            // Event is consumed, new instance is created in Initial state\n            When(OrderSubmitted)\n                // copy some data from the event to the saga\n                .Then(context => context.Saga.CustomerNumber = context.Message.CustomerNumber)\n                // transition to the Submitted state\n                .TransitionTo(Submitted)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Consumer Options\nDESCRIPTION: This code outlines the setup for a batch consumer in MassTransit, including configuration options such as message limit and concurrency for the consumer, tailored for handling multiple messages simultaneously.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nAddConsumer<MyBatchConsumer>(cfg =>\n{\n    cfg.Options<BatchOptions>(options => options\n        .SetMessageLimit(100)\n        .SetTimeLimit(s: 1)\n        .SetTimeLimitStart(BatchTimeLimitStart.FromLast)\n        .GroupBy<MyMessage, string>(x => x.CustomerId)\n        .SetConcurrencyLimit(10));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with RabbitMQ in a .NET Host Application\nDESCRIPTION: A minimal example showing how to configure MassTransit to use RabbitMQ in a .NET host application. The example sets up the RabbitMQ connection with host, virtual path, and credentials for connecting to the broker.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace RabbitMqConsoleListener;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.Hosting;\n\npublic static class Program\n{\n    public static async Task Main(string[] args)\n    {\n        await Host.CreateDefaultBuilder(args)\n            .ConfigureServices(services =>\n            {\n                services.AddMassTransit(x =>\n                {\n                    x.UsingRabbitMq((context, cfg) =>\n                    {\n                        cfg.Host(\"localhost\", \"/\", h =>\n                        {\n                            h.Username(\"guest\");\n                            h.Password(\"guest\");\n                        });\n                    });\n                });\n            })\n            .Build()\n            .RunAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Request/Response with MassTransit Test Harness\nDESCRIPTION: This snippet shows the testing of a request/respond pattern using the MassTransit Test Harness. It sets up a handler for `SubmitOrder` requests and verifies responses, ensuring that the 'OrderResponse' has the expected status. Prerequisites include setting up MassTransit and the necessary service collection.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task ASampleTest()\n{\n    await using var provider = new ServiceCollection()\n        .AddMassTransitTestHarness(cfg =>\n        {\n            cfg.Handler<SubmitOrder>(async cxt => \n            {\n                await cxt.RespondAsync(new OrderResponse(\"OK\"));\n            });\n        })\n        .BuildServiceProvider(true);\n\n    var harness = provider.GetRequiredService<ITestHarness>();\n\n    await harness.Start();\n\n    var client = harness.GetRequestClient<SubmitOrder>();\n\n    var response = await client.GetResponse<OrderResponse>(new SubmitOrder\n    {\n        OrderNumber = \"123\"\n    });\n\n    Assert.That(response.Message.Status, Is.EqualTo(\"OK\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Sagas in MassTransit Configuration\nDESCRIPTION: This code demonstrates different approaches to registering sagas within the AddMassTransit configuration. Options include registering individual sagas, sagas with matching definitions, configuring saga pipelines, and scanning assemblies for saga types. The example shows how to control concurrency and filter sagas by type name.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/4.registration.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg => \n{\n    cfg.AddSaga<MySaga>();\n    cfg.AddSaga(typeof(MySaga));\n\n    // Adds a saga with a matching saga definition\n    cfg.AddSaga<MySaga, MySagaDefinition>();\n    cfg.AddSaga(typeof(MySaga), typeof(MySagaDefinition));\n\n    // Adds a saga with a matching saga definition\n    // and configures the saga pipeline.\n    cfg.AddSaga<MySaga, MySagaDefinition>(cfg =>\n    {\n        cfg.ConcurrentMessageLimit = 8;\n    });\n\n    // Adds the specified sagas and saga definitions.\n    // When saga definitions are included they will \n    // be added with the matching saga type.\n    // AddSagas(params Type[] types);\n    cfg.AddSagas(typeof(MySaga), typeof(MyOtherSagaDefinition));\n\n    // Adds all sagas and saga definitions in the specified \n    // an assembly or assemblies. \n    // AddSagas(params Assembly[] assemblies);\n    cfg.AddSagas(typeof(Program).Assembly)\n\n    // Adds the sagas and any matching saga definitions \n    // in the specified an assembly or assemblies that pass\n    // the filter. The filter is only called for saga types.\n    // AddSagas(Func<Type, bool> filter, params Assembly[] assemblies);\n    cfg.AddSagas(\n        t => t.Name.StartsWith(\"S\"),\n        typeof(Program).Assembly\n    )\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Configured Consumer\nDESCRIPTION: This snippet illustrates how to add a consumer with a specific consumer definition and configure the consumer pipeline, allowing for a limit on concurrent message processing.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAddConsumer<MyConsumer, MyConsumerDefinition>(cfg =>\n{\n    cfg.ConcurrentMessageLimit = 8;\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Multiple Message Types with MassTransit in C#\nDESCRIPTION: This snippet demonstrates how to create a consumer class in MassTransit that handles multiple message types by implementing the IConsumer interface for each message type. This approach allows a single consumer to process messages of different types coming from the same queue.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AddressConsumer :\n    IConsumer<CreateAddress>,\n    IConsumer<UpdateAddress>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using Marten Repository Provider for All Sagas in MassTransit\nDESCRIPTION: Configuration to set Marten as the default saga repository provider for all sagas in the application. This approach automatically configures Marten repositories for all discovered sagas.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMarten(options =>\n{\n    const string connectionString = \"host=localhost;port=5432;database=orders;username=web;password=webpw;\";\n    \n    options.Connection(connectionString);\n});\n\nservices.AddMassTransit(x =>\n{\n    x.SetMartenSagaRepositoryProvider();\n\n    var entryAssembly = System.Reflection.Assembly.GetEntryAssembly();\n    \n    x.AddSagaStateMachines(entryAssembly);\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Request Client in an API Controller\nDESCRIPTION: Shows how to inject and use a request client in an API controller. The controller uses the injected client to send CheckOrderStatus requests and awaits the OrderStatusResult response, supporting cancellation via a CancellationToken.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequestController(IRequestClient<CheckOrderStatus> client) :\n    Controller\n{\n    [HttpGet(\"{orderId}\")]\n    public async Task<IActionResult> Get(string orderId, CancellationToken cancellationToken)\n    {\n        var response = await client.GetResponse<OrderStatusResult>(new { orderId }, cancellationToken);\n\n        return Ok(response.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit for SignalR in ASP.NET Core\nDESCRIPTION: This code snippet shows how to configure MassTransit to work with SignalR in an ASP.NET Core application. It adds SignalR, configures MassTransit to use RabbitMQ, and registers hub endpoints. The `AddSignalRHub` method is used to register each SignalR hub, creating consumers for the backplane events.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/1.signalr.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    // other config...\n    \n    services.AddSignalR();\n\n    // Other config perhaps...\n\n    // creating the bus config\n    services.AddMassTransit(x =>\n    {\n        // Add this for each Hub you have\n        x.AddSignalRHub<ChatHub>(cfg => {/*Configure hub lifetime manager*/});\n\n        x.UsingRabbitMq((context, cfg) =>\n        {\n            cfg.Host(\"localhost\", \"/\", h =>\n            {\n                h.Username(\"guest\");\n                h.Password(\"guest\");\n            });\n          \n            // register consumer' and hub' endpoints\n            cfg.ConfigureEndpoints(context);\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with RabbitMQ Transport in Program.cs\nDESCRIPTION: C# code snippet showing how to configure MassTransit to use RabbitMQ as the transport. Sets up the host connection with credentials and configures endpoints.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/2.rabbitmq.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .ConfigureServices((hostContext, services) =>\n        {\n            services.AddMassTransit(x =>\n            {\n                // elided...\n\n                x.UsingRabbitMq((context,cfg) =>\n                {\n                    cfg.Host(\"localhost\", \"/\", h => {\n                        h.Username(\"guest\");\n                        h.Password(\"guest\");\n                    });\n\n                    cfg.ConfigureEndpoints(context);\n                });\n            });\n\n            services.AddHostedService<Worker>();\n        });\n```\n\n----------------------------------------\n\nTITLE: Scheduling Events on Order Acceptance\nDESCRIPTION: This snippet details the process of scheduling an event for order completion based on the order acceptance event, demonstrating the flexibility of handling delays based on incoming message data.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderAccepted\n{\n    Guid OrderId { get; }    \n    TimeSpan CompletionTime { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        During(Submitted,\n            When(OrderAccepted)\n                .Schedule(OrderCompletionTimeout, context => context.Init<OrderCompletionTimeoutExpired>(new { OrderId = context.Saga.CorrelationId }),\n                    context => context.Message.CompletionTime)\n                .TransitionTo(Accepted));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Endpoint with Amazon SQS and SNS in C#\nDESCRIPTION: Demonstrates how to configure a receive endpoint with Amazon SQS and SNS, including subscribing to a specific topic and setting topic attributes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/4.amazon-sqs.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingAmazonSqs((context, cfg) =>\n    {\n        cfg.Host(\"us-east-2\", h =>\n        {\n            h.AccessKey(\"your-iam-access-key\");\n            h.SecretKey(\"your-iam-secret-key\");\n        });\n\n        cfg.ReceiveEndpoint(\"input-queue\", e =>\n        {\n            // disable the default topic binding\n            e.ConfigureConsumeTopology = false;\n\n            e.Subscribe(\"event-topic\", s =>\n            {\n                // set topic attributes\n                s.TopicAttributes[\"DisplayName\"] = \"Public Event Topic\";\n                s.TopicSubscriptionAttributes[\"some-subscription-attribute\"] = \"some-attribute-value\";\n                s.TopicTags.Add(\"environment\", \"development\");\n            });\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Transport in MassTransit\nDESCRIPTION: Code showing how to configure MassTransit to use Azure Service Bus as the transport. Includes host configuration and endpoint setup within the CreateHostBuilder method.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/3.azure-service-bus.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .ConfigureServices((hostContext, services) =>\n        {\n            services.AddMassTransit(x =>\n            {\n                // elided ...\n                x.UsingAzureServiceBus((context,cfg) =>\n                {\n                    cfg.Host(\"your connection string\");\n\n                    cfg.ConfigureEndpoints(context);\n                });\n            });\n\n            services.AddHostedService<Worker>();\n        });\n```\n\n----------------------------------------\n\nTITLE: Defining a Consumer Definition in C#\nDESCRIPTION: This code defines a consumer definition class that extends `ConsumerDefinition<SubmitOrderConsumer>`. It overrides the default endpoint name and sets a concurrent message limit. It also configures message retry and in-memory outbox using the provided configurators.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/2.consumers.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmitOrderConsumerDefinition :\n    ConsumerDefinition<SubmitOrderConsumer>\n{\n    public SubmitOrderConsumerDefinition()\n    {\n        // override the default endpoint name, for whatever reason\n        EndpointName = \"ha-submit-order\";\n\n        // limit the number of messages consumed concurrently\n        // this applies to the consumer only, not the endpoint\n        ConcurrentMessageLimit = 4;\n    }\n\n    protected override void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator,\n        IConsumerConfigurator<DiscoveryPingConsumer> consumerConfigurator)\n    {\n        endpointConfigurator.UseMessageRetry(r => r.Interval(5, 1000));\n        endpointConfigurator.UseInMemoryOutbox();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Optimistic Concurrency in Marten Saga Repository\nDESCRIPTION: Configuration to enable Marten's built-in optimistic concurrency for saga persistence. This uses an eTag-like version metadata field to detect concurrent updates without requiring additional fields in the saga class.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .MartenRepository(r => r.UseOptimisticConcurrency(true));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Response Types in a MassTransit Consumer\nDESCRIPTION: Shows how to modify a consumer to handle different response scenarios by returning different message types. This example returns either OrderStatusResult or OrderNotFound depending on whether the order exists.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CheckOrderStatusConsumer : \n    IConsumer<CheckOrderStatus>\n{\n    public async Task Consume(ConsumeContext<CheckOrderStatus> context)\n    {\n        var order = await _orderRepository.Get(context.Message.OrderId);\n        if (order == null)\n            await context.RespondAsync<OrderNotFound>(context.Message);\n        else        \n            await context.RespondAsync<OrderStatusResult>(new \n            {\n                OrderId = order.Id,\n                order.Timestamp,\n                order.StatusCode,\n                order.StatusText\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Host Options in C#\nDESCRIPTION: This snippet shows how to configure MassTransit's host options using the Options pattern in C#. This includes settings for controlling broker connections and timeouts, ensuring the MassTransit Hosted Service behaves as expected during application start and stop. No specific dependencies except general .NET Options configuration practices. Key parameters can include setting booleans and TimeSpan values for various operations.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOptions<MassTransitHostOptions>()\n    .Configure(options =>\n    {\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Consumer in MassTransit in C#\nDESCRIPTION: This code snippet shows how to configure a job consumer in MassTransit using dependency injection. It defines options such as job timeout and concurrency limits.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<ConvertVideoJobConsumer>(cfg =>\n    {\n        cfg.Options<JobOptions<ConvertVideo>>(options => options\n            .SetJobTimeout(TimeSpan.FromMinutes(15))\n            .SetConcurrentJobLimit(10));\n    });\n\n    x.AddDelayedMessageScheduler();\n    \n    x.SetKebabCaseEndpointNameFormatter();\n\n    // in this case, just use the in-memory saga repository, \n    // but an actual database should be used\n    x.SetInMemorySagaRepositoryProvider();\n    \n    x.AddJobSagaStateMachines();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.UseDelayedMessageScheduler();\n        \n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Endpoints with MassTransit in C#\nDESCRIPTION: This snippet demonstrates configuring a temporary receive endpoint with MassTransit, where consumers need to handle messages only while they are connected. This feature is useful when published messages can be discarded if consumers are offline.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.ReceiveEndpoint(new TemporaryEndpointDefinition(), e =>\n        {\n            e.ConfigureConsumer<SubmitOrderConsumer>(context);\n        });\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer-Specific Outbox and Retry Strategy\nDESCRIPTION: Shows how to apply retry and redelivery configurations to a specific consumer endpoint using MassTransit's configuration API\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ReceiveEndpoint(\"submit-order\", e =>\n        {\n            e.ConfigureConsumer<SubmitOrderConsumer>(context, c =>\n            {\n                c.UseDelayedRedelivery(r => r.Intervals(TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(15), TimeSpan.FromMinutes(30)));\n                c.UseMessageRetry(r => r.Immediate(5));\n                c.UseInMemoryOutbox(context);\n            });\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Worker Project - Bash\nDESCRIPTION: This snippet demonstrates how to create a new worker service project using MassTransit via the command line.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet new mtworker -n GettingStarted\n$ cd GettingStarted\n$ dotnet new mtconsumer\n```\n\n----------------------------------------\n\nTITLE: Handling AcceptOrder Event in Multiple States (C#)\nDESCRIPTION: This snippet improves event handling by allowing AcceptOrder to be processed in both the Submitted and Accepted states, thus adding idempotency to the state machine's behavior.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public Event<AcceptOrder> AcceptOrder { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        During(Submitted, Accepted,\n            When(AcceptOrder)\n                .Then(context => \n                {\n                    context.Saga.AcceptedAt ??= context.SentTime ?? DateTime.UtcNow;\n                })\n                .TransitionTo(Accepted)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a State Machine using MassTransitStateMachine\nDESCRIPTION: This code snippet demonstrates how to define a state machine by inheriting from the `MassTransitStateMachine<T>` class, where `T` is the type of the state machine instance. The state machine class will contain the states, events, and behaviors that define the state machine's logic.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: MultiBus Configuration in MassTransit with C#\nDESCRIPTION: This configuration shows adding a second bus instance to a .NET application using MassTransit. It involves creating an `ISecondBus` interface for differentiation and configuring consumers and clients for different bus instances. RabbitMQ is used to host and manage endpoints for `AllocateInventoryConsumer` and `AllocateInventory`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/multibus.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ISecondBus :\n    IBus\n{\n}\n\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n    x.AddRequestClient<SubmitOrder>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n\nservices.AddMassTransit<ISecondBus>(x =>\n{\n    x.AddConsumer<AllocateInventoryConsumer>();\n    x.AddRequestClient<AllocateInventory>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.Host(\"remote-host\");\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Kill Switch in MassTransit (C#)\nDESCRIPTION: Example of how to configure the Kill Switch middleware filter on a bus to prevent failing consumers from moving all messages to the error queue. This sets activation threshold, trip threshold, and restart timeout parameters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/1.filters.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.UseKillSwitch(options => options\n    .SetActivationThreshold(10)\n    .SetTripThreshold(0.15)\n    .SetRestartTimeout(m: 1));\n```\n\n----------------------------------------\n\nTITLE: Configuring Outbox for Consumers Using Callback\nDESCRIPTION: This snippet shows how to add the Entity Framework outbox to all consumers using a configure endpoints callback, ensuring the transactional outbox functionalities are available across endpoints.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConfigureEndpointsCallback((context, name, cfg) =>\n{\n    cfg.UseEntityFrameworkOutbox<RegistrationDbContext>(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OrderStateMachine with Completed State Handling - C#\nDESCRIPTION: This snippet demonstrates how to define an OrderStateMachine class that includes states and utilizes the SetCompletedWhenFinalized method to remove instances from the repository when they reach the Final state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/1.state.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public OrderStateMachine() \n    {\n        SetCompletedWhenFinalized();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Integer Instance State - C#\nDESCRIPTION: This snippet demonstrates a variant of the OrderState definition, where CurrentState is defined as an integer, facilitating more efficient storage compared to string values.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/1.state.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState : \n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n\n    public int CurrentState { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public OrderStateMachine() \n    {\n        InstanceState(x => x.CurrentState, Submitted, Accepted);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Response Types with MassTransit Request Client\nDESCRIPTION: Demonstrates how to use a request client to handle multiple possible response types. This code shows how to check which response type was received using the Is method with out parameters for type checking.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.GetResponse<OrderStatusResult, OrderNotFound>(new { OrderId = id});\n\nif (response.Is(out Response<OrderStatusResult> responseA))\n{\n    // do something with the order\n}\nelse if (response.Is(out Response<OrderNotFound> responseB))\n{\n    // the order was not found\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga Instance Properties using SagaClassMap\nDESCRIPTION: This code snippet shows how to configure instance properties using a `SagaClassMap`. It configures the maximum length for the `CurrentState` property, maps the `OrderDate` property, and specifies the `RowVersion` property for optimistic concurrency using `.IsRowVersion()`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMap :\n    SagaClassMap<OrderState>\n{\n    protected override void Configure(EntityTypeBuilder<OrderState> entity, ModelBuilder model)\n    {\n        entity.Property(x => x.CurrentState).HasMaxLength(64);\n        entity.Property(x => x.OrderDate);\n\n        // If using Optimistic concurrency, otherwise remove this property\n        entity.Property(x => x.RowVersion).IsRowVersion();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Saga Instance Insertion with MassTransit\nDESCRIPTION: This snippet demonstrates how to configure an event to directly insert into a saga repository using MassTransit. It utilizes the _Initially_ block and specifies a saga factory to create a new OrderState with the CorrelationId set to the OrderId from the SubmitOrder event.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface SubmitOrder\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => SubmitOrder, e => \n        {\n            e.CorrelateById(context => context.Message.OrderId));\n\n            e.InsertOnInitial = true;\n            e.SetSagaFactory(context => new OrderState\n            {\n                CorrelationId = context.Message.OrderId\n            })\n        });\n\n        Initially(\n            When(SubmitOrder)\n                .TransitionTo(Submitted));\n    }\n\n    public Event<SubmitOrder> SubmitOrder { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Property Initializers in MassTransit with C#\nDESCRIPTION: This snippet demonstrates the initialization of an `OrderUpdated` message with properties that require async initialization by awaiting an asynchronous method that loads customer information.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<CustomerInfo> LoadCustomer(Guid orderId)\n{\n    // work happens up in here\n}\n\nawait context.Publish<OrderUpdated>(new\n{\n    InVar.CorrelationId,\n    InVar.Timestamp,\n    OrderId = context.Message.OrderId,\n    Customer = LoadCustomer(context.Message.OrderId)\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Consumers from Assembly\nDESCRIPTION: This snippet demonstrates how to add all consumers and consumer definitions from a specified assembly, either directly or through filtering methods for selective registration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvoid AddConsumers(params Type[] types);\n\nvoid AddConsumers(params Assembly[] assemblies);\n\nvoid AddConsumers(Func<Type, bool> filter, params Assembly[] assemblies);\n```\n\n----------------------------------------\n\nTITLE: Creating a MassTransit Consumer and Message\nDESCRIPTION: Command to create a Consumer, ConsumerDefinition, and example message for MassTransit. Places files in the ~/Consumers and ~/Contracts folders respectively.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtconsumer\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Consumer with Exception in MassTransit\nDESCRIPTION: Example of a consumer that throws an exception when processing a message. This demonstrates the basic error handling flow in MassTransit where exceptions are caught by middleware and messages are moved to an error queue.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmitOrderConsumer :\n    IConsumer<SubmitOrder>\n{\n    public Task Consume(ConsumeContext<SubmitOrder> context)\n    {\n        throw new Exception(\"Very bad things happened\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State Machine Instance\nDESCRIPTION: This code snippet demonstrates how to define a state machine instance by implementing the `SagaStateMachineInstance` interface.  The instance contains the data for a specific state machine instance, including the CorrelationId and the current state. The `InstanceState` method is used to specify the property that stores the current state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        InstanceState(x => x.CurrentState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with PostgreSQL Transport\nDESCRIPTION: Code snippet showing how to configure MassTransit to use PostgreSQL as a transport, including connection settings, credentials, and migration setup.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/5.postgresql.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .ConfigureServices((hostContext, services) =>\n        {\n            services.AddOptions<SqlTransportOptions>().Configure(options =>\n            {\n                  options.Host = \"localhost\";\n                  options.Database = \"sample\";\n                  options.Schema = \"transport\";\n                  options.Role = \"transport\";\n                  options.Username = \"masstransit\";\n                  options.Password = \"H4rd2Gu3ss!\";\n                  \n                  // credentials to run migrations\n                  options.AdminUsername = \"migration-user\";\n                  options.AdminPassword = \"H4rderTooGu3ss!!\";\n            });\n            // MassTransit will run the migrations on start up\n            services.AddPostgresMigrationHostedService();\n            services.AddMassTransit(x =>\n            {\n                // elided...\n\n                x.UsingPostgres((context,cfg) =>\n                {\n                    cfg.ConfigureEndpoints(context);\n                });\n            });\n\n            services.AddHostedService<Worker>();\n        });\n```\n\n----------------------------------------\n\nTITLE: Configuring All Sagas on a Receive Endpoint - C#\nDESCRIPTION: This code snippet provides a simple method to configure all sagas that haven't yet been configured on a given receive endpoint. This method ensures that all relevant sagas are properly set up without needing to explicitly define each one. Dependencies include the MassTransit framework.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/0.overview.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nConfigureSagas(context);\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State Class with Marten in C#\nDESCRIPTION: Example of a saga state class compatible with Marten persistence. MassTransit automatically configures the CorrelationId property as the primary key without requiring additional attributes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Request Client in Dependency Injection\nDESCRIPTION: Demonstrates how to configure a request client in the dependency injection container. This example configures a consumer on a specific endpoint and sets up a request client to send requests directly to that endpoint instead of publishing them.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    // configure the consumer on a specific endpoint address\n    x.AddConsumer<CheckOrderStatusConsumer>()\n        .Endpoint(e => e.Name = \"order-status\");\n        \n    // Sends the request to the specified address, instead of publishing it\n    x.AddRequestClient<CheckOrderStatus>(new Uri(\"exchange:order-status\"));\n    \n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Conversion Job Consumer in C#\nDESCRIPTION: This code snippet presents an implementation of a Job Consumer for converting video. It demonstrates how to use async methods and waits for a specified delay to simulate a long-running task.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConvertVideoJobConsumer : \n    IJobConsumer<ConvertVideo>\n{\n    public async Task Run(JobContext<ConvertVideo> context)\n    {\n        await Task.Delay(30000, context.CancellationToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Handling with Multiple Response Types in C#\nDESCRIPTION: The code demonstrates how a request client can handle multiple response types using MassTransit's asynchronous response mechanism. It features dependency on MassTransit library and C# Async/Await pattern. The snippet identifies how to handle exceptions when new response types are added.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.GetResponse<OrderCanceled, OrderNotFound>(new CancelOrder());\n\nif (response.Is(out Response<OrderCanceled> canceled))\n{\n    return Ok();\n}\nelse if (response.Is(out Response<OrderNotFound> responseB))\n{\n    return NotFound();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing for ASP.NET Core Application - C#\nDESCRIPTION: This code snippet demonstrates how to set up OpenTelemetry tracing in an ASP.NET Core application using MassTransit. The setup includes adding necessary services and configuring a resource for tracing when messages are handled.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(ConfigureResource)\n    .WithTracing(b => b\n        .AddSource(DiagnosticHeaders.DefaultListenerName) // MassTransit ActivitySource\n        .AddConsoleExporter() // Any OTEL suportable exporter can be used here\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit to Use Amazon SQS Transport\nDESCRIPTION: C# code snippet showing how to configure MassTransit to use Amazon SQS transport instead of in-memory transport. Includes host configuration with AWS region and credentials.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/4.amazon-sqs.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .ConfigureServices((hostContext, services) =>\n        {\n            services.AddMassTransit(x =>\n            {\n                // elided ...\n                x.UsingAmazonSqs((context, cfg) =>\n                {\n                    cfg.Host(\"us-east-1\", h => {\n                        h.AccessKey(\"your-iam-access-key\");\n                        h.SecretKey(\"your-iam-secret-key\");\n                    });\n\n                    cfg.ConfigureEndpoints(context);\n                });\n            });\n\n            services.AddHostedService<Worker>();\n        });\n```\n\n----------------------------------------\n\nTITLE: Razor Page with MultiBus in MassTransit\nDESCRIPTION: This Razor Page code snippet utilizes dependency injection to publish messages from a user interface context. Using `Bind<ISecondBus, IPublishEndpoint>`, the page model is able to send messages using the specified bus instance. Each bus instance requires a distinct interface to avoid cross-message issues.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/multibus.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class InventoryPage : PageModel\n{\n    public async void OnPost([FromServices] Bind<ISecondBus, IPublishEndpoint> publishEndpoint)\n    {\n        await publishEndpoint.Value.Publish<AllocateInventory>(new \n        {\n            SomeData = { }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Assertions with MassTransit Test Harness\nDESCRIPTION: This code snippet shows how to perform message assertions using the SelectAsync method of the MassTransit Test Harness. Used to confirm that messages have been sent and received as expected, typically by using assertions like `Assert.AreEqual`. Handle how many messages are considered to prevent long wait times due to default test timeouts during debugging.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar messageSent = await harness.Sent.SelectAsync<OrderSubmitted>()\n    .FirstOrDefault();\n\nAssert.AreEqual(orderId, messageSent?.Context.Message.OrderId);\n```\n\n----------------------------------------\n\nTITLE: Defining Job Consumer Interface in C#\nDESCRIPTION: This code snippet defines the IJobConsumer<TJob> interface, which is necessary for implementing a Job Consumer in MassTransit. It declares a Run method that takes a JobContext<TJob> as a parameter, which is used during job execution.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IJobConsumer<in TJob> :\n    IConsumer\n    where TJob : class\n{\n    Task Run(JobContext<TJob> context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Batch Consumer in C#\nDESCRIPTION: This code demonstrates how to implement a batch consumer in MassTransit. The consumer implements `IConsumer<Batch<Message>>`, which allows it to receive and process messages in batches. The code iterates through the messages in the batch and processes each message individually.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/2.consumers.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass BatchMessageConsumer :\n    IConsumer<Batch<Message>>\n{\n    public async Task Consume(ConsumeContext<Batch<Message>> context)\n    {\n        for(int i = 0; i < context.Message.Length; i++)\n        {\n            ConsumeContext<Message> message = context.Message[i];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transactional Bus in Controller Action\nDESCRIPTION: This code snippet demonstrates how to use the transactional bus within an ASP.NET Core controller to handle transactions and publish messages after database changes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : ControllerBase\n{\n    private readonly ITransactionalBus _transactionalBus;\n    private readonly MyDbContext _dbContext;\n\n    public ValuesController(ITransactionalBus transactionalBus, MyDbContext dbContext)\n    {\n        _transactionalBus = transactionalBus;\n        _dbContext = dbContext;\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> Post([FromBody] string value)\n    {\n        using(var transaction = await _dbContext.Database.BeginTransactionAsync())\n        {\n            try\n            {\n                _dbContext.Posts.Add(new Post{...});\n                await _dbContext.SaveChangesAsync();\n\n                await _transactionalBus.Publish(new PostCreated{...});\n\n                await transaction.CommitAsync();\n                await _transactionalBus.Release(); // Immediately after CommitAsync\n            }\n            catch (Exception)\n            {\n                transaction.Rollback();\n            }\n\n        }\n\n        return Ok();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with Amazon SQS Scoping in C#\nDESCRIPTION: Shows how to configure MassTransit with Amazon SQS using scoping to prefix all SQS queues and SNS topics with a specific value.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/4.amazon-sqs.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingAmazonSqs((context, cfg) =>\n    {\n        cfg.Host(\"us-east-2\", h =>\n        {\n            h.AccessKey(\"your-iam-access-key\");\n            h.SecretKey(\"your-iam-secret-key\");\n\n            // specify a scope for all topics\n            h.Scope(\"dev\", true);\n        });\n\n        // additionally include the queues\n        cfg.ConfigureEndpoints(context, new DefaultEndpointNameFormatter(\"dev-\", false));\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Concrete Filter for Multiple Message Types\nDESCRIPTION: Creating a concrete filter that handles multiple specific message types and configuring it globally for all receive endpoints. This approach allows implementing different filtering logic for different message types.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMessageConsumeFilter :\n    IFilter<ConsumeContext<MessageA>>,\n    IFilter<ConsumeContext<MessageB>>\n    where T : class\n{\n    public MyConsumeFilter(IMyDependency dependency) { }\n      \n    public async Task Send(ConsumeContext<MessageA> context, IPipe<ConsumeContext<MessageA>> next)\n    {\n        await next.Send(context);\n    }\n      \n    public async Task Send(ConsumeContext<MessageB> context, IPipe<ConsumeContext<MessageB>> next)\n    {\n        await next.Send(context);\n    }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddScoped<IMyDependency, MyDependency>();\n        \n        services.AddMassTransit(x =>\n        {\n            x.AddConsumer<MyConsumer>();\n\n            x.UsingRabbitMq((context, cfg) =>\n            {\n                cfg.UseConsumeFilter<MyMessageConsumerFilter>(context);\n                \n                cfg.ConfigureEndpoints(context);\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext for Entity Framework Outbox\nDESCRIPTION: This snippet defines the DbContext for Entity Framework, adding the necessary tables for managing the transactional outbox, including inbox and outbox states.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RegistrationDbContext :\n    DbContext\n{\n    public RegistrationDbContext(DbContextOptions<RegistrationDbContext> options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n\n        modelBuilder.AddInboxStateEntity();\n        modelBuilder.AddOutboxMessageEntity();\n        modelBuilder.AddOutboxStateEntity();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization for MassTransit\nDESCRIPTION: This snippet demonstrates how to configure custom JSON serializer options for MassTransit using 'System.Text.Json'. Specific options can be defined within the configuration method.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg =>\n{\n    cfg.Using[Broker](broker => \n    {\n        broker.ConfigureJsonSerializerOptions(options =>\n        {\n            // customize the JsonSerializerOptions here\n            return options;\n        });\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Consumer with Definition\nDESCRIPTION: This snippet shows how to add a consumer along with its consumer definition, providing more fine-grained control over the consumer's setup and behavior while leveraging MassTransit's capabilities.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAddConsumer<MyConsumer, MyConsumerDefinition>();\nAddConsumer(typeof(MyConsumer), typeof(MyConsumerDefinition));\n```\n\n----------------------------------------\n\nTITLE: Configuring NHibernate as Saga Repository in C# for MassTransit\nDESCRIPTION: This code demonstrates how to configure NHibernate as the saga repository using the AddMassTransit container extension. It sets up NHibernate to connect to a local instance and use optimistic concurrency.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/nhibernate.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// the session factory should be registered as a single instance\ncontainer.RegisterSingleInstance<ISessionFactory>(...);\n\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .NHibernateRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Routing Slips\nDESCRIPTION: This code snippet demonstrates how to configure routing slips in a MassTransit application by adding execute and compensating activities. It includes the registration of these activities with the configured transport and sets up the necessary endpoints for routing slip execution.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/7.routing-slips/0.overview.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg => \n{\n    // Execute Only Activities\n    cfg.AddExecuteActivity<SampleExecuteActivity, SampleAgentArgs>();\n\n    // Activities that have an execute and a compensation\n    cfg.AddActivity<SampleCompensatingActivity, SampleCompensatingArgs, SampleCompensatingLog>();\n\n    cfg.Using[Transport]((context, transport) => \n    {\n        // Register the Activties with the Transport\n        transport.ConfigureEndpoints(context);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Consume and Send Filters with Shared Dependencies\nDESCRIPTION: Implementation showing how to use both consume and send filters that share a dependency to transfer data from incoming to outgoing messages. This pattern is useful for propagating context information.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyConsumeFilter<T> :\n    IFilter<ConsumeContext<T>>\n    where T : class\n{\n    public MyConsumeFilter(MyDependency dependency) { }\n      \n    public async Task Send(ConsumeContext<T> context, IPipe<ConsumeContext<T>> next) { }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class MySendFilter<T> :\n    IFilter<SendContext<T>>\n    where T : class\n{\n    public MySendFilter(MyDependency dependency) { }\n      \n    public async Task Send(SendContext<T> context, IPipe<SendContext<T>> next) { }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class MyDependency \n{\n    public string SomeValue { get; set; }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddScoped<MyDependency>();\n\n        services.AddMassTransit(x =>\n        {\n            x.AddConsumer<MyConsumer>();\n\n            x.UsingRabbitMq((context, cfg) =>\n            {\n                cfg.UseSendFilter(typeof(MySendFilter<>), context);\n\n                cfg.ReceiveEndpoint(\"input-queue\", e =>\n                {\n                    e.UseConsumeFilter(typeof(MyConsumeFilter<>), context);\n                    e.ConfigureConsumer<MyConsumer>(context);\n                });\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs with Properties in MassTransit .NET\nDESCRIPTION: Demonstrates submitting a job while including additional job properties using an IRequestClient. Inputs include a job path and properties like tenantId. Requires MassTransit integration, and outputs a JSON object with the jobId and path. It's useful for extending job submissions with context-specific properties.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost(\"{path}\")]\npublic async Task<IActionResult> SubmitJob(string path, [FromServices] IRequestClient<SubmitJob<ConvertVideo>> client)\n{\n    var jobId = NewId.NextGuid();\n        \n    await client.SubmitJob(jobId, new ConvertVideo\n    {\n        Path = path\n    }, x => x.Set(\"TenantId\", _tenantId));\n\n    return Ok(new\n    {\n        jobId,\n        path\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MassTransit PostgreSQL Package\nDESCRIPTION: Command to add the MassTransit PostgreSQL transport package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/5.postgresql.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package MassTransit.SqlTransport.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Connecting Temporary Receive Endpoints in MassTransit C#\nDESCRIPTION: The snippet shows how to connect a temporary receive endpoint and specify an endpoint definition with MassTransit. It's often used for consumers that listen to fan-out events, enabling quick setup without persistent storage requirements.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar connector = provider.GetRequiredService<IReceiveEndpointConnector>();\nvar endpointNameFormatter = provider.GetService<IEndpointNameFormatter>() ?? DefaultEndpointNameFormatter.Instance;\n\nvar handle = connector.ConnectReceiveEndpoint(new TemporaryEndpointDefinition(), endpointNameFormatter, (context, cfg) =>\n{\n    cfg.ConfigureConsumer<UpdateCacheEventConsumer>(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Behavior for an Event\nDESCRIPTION: This code snippet demonstrates how to define the initial behavior for an event using the `Initially` and `When` methods.  When a `SubmitOrder` message is consumed and an instance with a `CorrelationId` matching the `OrderId` is not found, a new instance will be created in the `Initial` state. The `TransitionTo` activity transitions the instance to the `Submitted` state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .TransitionTo(Submitted));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga Registration in MassTransit C#\nDESCRIPTION: This snippet shows how to configure the MassTransit service to add a saga with the 'AddSaga' method and an in-memory repository for state management.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/1.consumer-sagas.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSaga<OrderSaga>()\n        .InMemoryRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State Definition in C#\nDESCRIPTION: This snippet demonstrates how to create a saga definition for managing order states using MassTransit. It sets a limit on concurrent messages to optimize endpoint performance and configures message handling for order-related events including 'SubmitOrder', 'OrderAccepted', and 'OrderCanceled'. Dependencies include MassTransit library for C#.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/0.index.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateDefinition :\n    SagaDefinition<OrderState>\n{\n    public OrderStateDefinition()\n    {\n        // specify the message limit at the endpoint level, which influences\n        // the endpoint prefetch count, if supported\n        Endpoint(e => e.ConcurrentMessageLimit = 16);\n    }\n\n    protected override void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator<OrderState> sagaConfigurator)\n    {\n        var partition = endpointConfigurator.CreatePartitioner(16);\n\n        sagaConfigurator.Message<SubmitOrder>(x => x.UsePartitioner(partition, m => m.Message.CorrelationId));\n        sagaConfigurator.Message<OrderAccepted>(x => x.UsePartitioner(partition, m => m.Message.CorrelationId));\n        sagaConfigurator.Message<OrderCanceled>(x => x.UsePartitioner(partition, m => m.Message.CorrelationId));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating NewId Identifiers in .NET\nDESCRIPTION: This code snippet demonstrates how to generate a sequential unique identifier using NewId and Guid objects in .NET. NewId generates identifiers that are both unique and sequential, which helps in reducing database index fragmentation when used as a primary key.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/12.newid.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nNewId newId = NewId.Next();\n\nGuid guid = NewId.NextGuid();\n```\n\n----------------------------------------\n\nTITLE: Configuring Quartz.NET with MassTransit\nDESCRIPTION: This code shows how to configure Quartz.NET and MassTransit together. It sets up Quartz to use Microsoft's dependency injection and configures MassTransit to use Quartz for message scheduling.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddQuartz(q =>\n{\n    q.UseMicrosoftDependencyInjectionJobFactory();\n});\n\nservices.AddMassTransit(x =>\n{\n    x.AddPublishMessageScheduler();\n\n    x.AddQuartzConsumers();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.UsePublishMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Retry at Bus Level in MassTransit\nDESCRIPTION: Setting up message retry at the bus level using Immediate retry policy. This configuration applies the retry policy to all receive endpoints, attempting to deliver a message 5 times before giving up.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.AddConfigureEndpointsCallback((context,name,cfg) =>\n    {\n        cfg.UseMessageRetry(r => r.Immediate(5));\n    });\n\n    x.UsingRabbitMq((context,cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Saga Instance with Entity Framework\nDESCRIPTION: This code snippet shows a sample saga instance `OrderState` which is orchestrated using an Automatonymous state machine. The `CorrelationId` is the primary key, and `CurrentState` is used to store the current state of the saga instance. The `RowVersion` property is required for Optimistic concurrency.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n\n    // If using Optimistic concurrency, this property is required\n    public byte[] RowVersion { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Recurring Job Immediately in MassTransit\nDESCRIPTION: This code snippet shows how to force a recurring job to run immediately using the `RunRecurringJob` method in MassTransit. It triggers the `RoutineMaintenanceCommand` regardless of its scheduled time.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic async Task RunJobNow(IPublishEndpoint publishEndpoint)\n{\n    await publishEndpoint.RunRecurringJob<RoutineMaintenanceCommand>(\"RoutineMaintenance\");\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Consumer Endpoint Configuration with MassTransit\nDESCRIPTION: Demonstrates how to configure consumer endpoints with custom naming, using RabbitMQ as the message broker and configuring endpoint settings\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer, SubmitOrderConsumerDefinition>()\n        .Endpoint(e =>\n        {\n            e.Name = \"order-service-extreme\";\n        });\n\n    x.UsingRabbitMq((context, cfg) => cfg.ConfigureEndpoints(context));\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Fault Messages in MassTransit\nDESCRIPTION: Demonstrates how to create a consumer that handles fault messages for specific message types, enabling custom error tracking and handling\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DashboardFaultConsumer :\n    IConsumer<Fault<SubmitOrder>>\n{\n    public async Task Consume(ConsumeContext<Fault<SubmitOrder>> context)\n    {\n        // update the dashboard\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionId for Message Grouping\nDESCRIPTION: Demonstrates how to use a SessionId formatter to group related messages and ensure ordered processing\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic record UpdateUserStatus\n{\n    public Guid UserId { get; init; }\n    public string Status { get; init; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.Send<UpdateUserStatus>(x =>\n{\n    x.UseSessionIdFormatter(context => context.Message.UserId);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Redelivery in MassTransit\nDESCRIPTION: Setting up delayed redelivery for handling longer-lasting failures, with both immediate retry and delayed redelivery at specific intervals. This is useful for situations where services might be down for extended periods.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.AddConfigureEndpointsCallback((context,name,cfg) =>\n    {\n        cfg.UseDelayedRedelivery(r => r.Intervals(TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(15), TimeSpan.FromMinutes(30)));\n        cfg.UseMessageRetry(r => r.Immediate(5));\n    });\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Quartz/Hangfire Scheduler in MassTransit with RabbitMQ\nDESCRIPTION: This snippet demonstrates how to configure MassTransit to use a Quartz or Hangfire scheduler with RabbitMQ. It adds a message scheduler with a specified endpoint and configures RabbitMQ to use this scheduler.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    Uri schedulerEndpoint = new Uri(\"queue:scheduler\");\n\n    x.AddMessageScheduler(schedulerEndpoint);\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.UseMessageScheduler(schedulerEndpoint);\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Message Record for Order Submission in C#\nDESCRIPTION: Defines a record type 'SubmitOrder' with properties for order identification, date, and amount. This is used to encapsulate order details effectively.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic record SubmitOrder\n{\n    public string OrderId { get; init; }\n    public DateTime OrderDate { get; init; }\n    public decimal OrderAmount { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Saga with Concurrency Settings in MassTransit C#\nDESCRIPTION: This snippet shows how to define a saga configuration using MassTransit that includes concurrency settings. It specifies the queue name and prefetch count while configuring the endpoints necessary for message processing.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/guidance.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class OrderStateSagaDefinition : SagaDefinition<OrderState>\n{\n    private const int ConcurrencyLimit = 20; // this can go up, depending upon the database capacity\n\n    public OrderStateSagaDefinition()\n    {\n        // specify the message limit at the endpoint level, which influences\n        // the endpoint prefetch count, if supported.\n        Endpoint(e =>\n        {\n            e.Name = \"saga-queue\";\n            e.PrefetchCount = ConcurrencyLimit;\n        });\n    }\n\n    protected override void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, ISagaConfigurator<OrderState> sagaConfigurator)\n    {\n        endpointConfigurator.UseMessageRetry(r => r.Interval(5, 1000));\n        endpointConfigurator.UseInMemoryOutbox();\n\n        var partition = endpointConfigurator.CreatePartitioner(ConcurrencyLimit);\n\n        sagaConfigurator.Message<SubmitOrder>(x => x.UsePartitioner(partition, m => m.Message.OrderId));\n        sagaConfigurator.Message<OrderAccepted>(x => x.UsePartitioner(partition, m => m.Message.OrderId));\n        sagaConfigurator.Message<OrderCanceled>(x => x.UsePartitioner(partition, m => m.Message.OrderId));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga with Entity Framework Repository\nDESCRIPTION: This snippet configures a saga state machine using Entity Framework, detailing how to add an existing DbContext and specify the use of PostgreSQL.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddSagaStateMachine<RegistrationStateMachine, RegistrationState, RegistrationStateDefinition>()\n    .EntityFrameworkRepository(r =>\n    {\n        r.ExistingDbContext<RegistrationDbContext>();\n        r.UsePostgres();\n    });\n```\n\n----------------------------------------\n\nTITLE: Using EntityName Attribute to Override Default Entity Names in MassTransit\nDESCRIPTION: This snippet shows how to use the EntityName attribute to override the default entity name for a message type. The message will use 'order-submitted' as its topic or exchange name.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[EntityName(\"order-submitted\")]\npublic record LegacyOrderSubmittedEvent\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Saga Factory in C# with MassTransit\nDESCRIPTION: This code snippet shows how to set a custom factory for saga instantiation in a MassTransit state machine. It allows for complex logic when creating a new saga instance, such as ensuring required properties are available. This is especially useful for handling SQL scenarios with not-null columns.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Event<SubmitOrder> SubmitOrder { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        Event(\n            () => SubmitOrder, \n            e => \n            {\n                e.CorrelateById(cxt => cxt.Message.OrderId)\n                e.SetSagaFactory(cxt =>\n                {\n                    // complex constructor logic\n                    return new OrderState \n                    {\n                        CorrelationId = cxt.Message.OrderId \n                    };\n                });\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Contract with Properties in C#\nDESCRIPTION: This code shows an example of defining a message contract using a C# record with public properties and init accessors.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic record SubmitOrder\n{\n\tpublic string Sku { get; init; }\n\tpublic int Quantity { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Messages Using IMessageScheduler in MassTransit\nDESCRIPTION: This snippet shows how to schedule messages using IMessageScheduler from a container scope. It demonstrates scheduling a publish operation for a future time.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var scope = provider.CreateAsyncScope();\n\nvar scheduler = scope.ServiceProvider.GetRequiredService<IMessageScheduler>();\n\nawait scheduler.SchedulePublish<SendNotification>(\n    DateTime.UtcNow + TimeSpan.FromSeconds(30), new()\n    {\n        EmailAddress = \"frank@nul.org\",\n        Body = \"Thank you for signing up for our awesome newsletter!\"\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Hangfire with MassTransit\nDESCRIPTION: This snippet demonstrates how to configure Hangfire and MassTransit together. It sets up Hangfire with memory storage and configures MassTransit to use Hangfire for message scheduling.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddHangfire(h =>\n{\n    h.UseRecommendedSerializerSettings();\n    h.UseMemoryStorage();\n});\n\nservices.AddMassTransit(x =>\n{\n    x.AddPublishMessageScheduler();\n\n    x.AddHangfireConsumers();\n\n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.UsePublishMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Generic Filter for Specific Message Types\nDESCRIPTION: Using an open generic filter but limiting its application to specific message types using a conditional expression. This example shows how to apply a filter only to messages implementing the ICommand interface.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCommandFilter<T> :\n    IFilter<ConsumeContext<T>>\n    where T : class, ICommand\n{\n    public MyCommandFilter(IMyDependency dependency) { }\n      \n    public async Task Send(ConsumeContext<T> context, IPipe<ConsumeContext<T>> next)\n    {\n        await next.Send(context);\n    }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddScoped<IMyDependency, MyDependency>();\n        \n        services.AddMassTransit(x =>\n        {\n            x.AddConsumer<MyConsumer>();\n\n            x.UsingRabbitMq((context, cfg) =>\n            {\n                // Specify a conditional expression to only \n                // add the filter for certain message types \n                cfg.UseConsumeFilter(typeof(MyCommandFilter<>), context,\n                    x => x.Include(type => type.HasInterface<ICommand>()));\n                \n                cfg.ConfigureEndpoints(context);\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderState with Current State - C#\nDESCRIPTION: This snippet shows the OrderState class definition which includes properties for CorrelationId and CurrentState, where CurrentState is used to track the state of the saga instance.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/1.state.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState : \n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n\n    /// <summary>\n    /// The saga state machine instance current state\n    /// </summary>\n    public string CurrentState { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Configuring MassTransit Receive Endpoints in C#\nDESCRIPTION: This example demonstrates how to explicitly configure a receive endpoint in MassTransit, including setting specific properties like PrefetchCount and ConcurrentMessageLimit. Manual configuration of endpoints may override or complement the default endpoint setup.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n    \n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ReceiveEndpoint(\"order-service\", e =>\n        {\n            e.ConfigureConsumer<SubmitOrderConsumer>(context);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Transport for MassTransit Test Harness\nDESCRIPTION: This snippet demonstrates configuring the MassTransit Test Harness to use RabbitMQ as a transport. Configure RabbitMQ with defaults such as a broker running on `localhost`, using 'guest' as username and password. The setup is crucial for integration tests needing interaction with RabbitMQ in a testing environment.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n.AddMassTransitTestHarness(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n    \n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Retry Policies for an Endpoint in MassTransit\nDESCRIPTION: Example of applying multiple retry policies to a single endpoint, with different policies for the endpoint and consumer levels, each with specific exception filters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ReceiveEndpoint(\"submit-order\", e =>\n        {\n            e.UseMessageRetry(r =>\n            {\n                r.Immediate(5);\n                r.Handle<DataException>(x => x.Message.Contains(\"SQL\"));\n            });\n\n            e.ConfigureConsumer<SubmitOrderConsumer>(context, c => c.UseMessageRetry(r =>\n            {\n                r.Interval(10, TimeSpan.FromMilliseconds(200));\n                r.Ignore<ArgumentNullException>();\n                r.Ignore<DataException>(x => x.Message.Contains(\"SQL\"));\n            }));\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OnMissingInstance Behavior for Events (C#)\nDESCRIPTION: This snippet details how to configure the behavior of a saga state machine when an event is received that does not correlate to an existing instance, allowing custom responses when no instance is found.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic record RequestOrderCancellation(Guid OrderId);\npublic record OrderNotFound(Guid OrderId);\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderCancellationRequested, e =>\n        {\n            e.CorrelateById(context => context.Message.OrderId);\n\n            e.OnMissingInstance(m =>\n            {\n                return m.ExecuteAsync(x => x.RespondAsync(new OrderNotFound(x.OrderId)));\n            });\n        });\n    }\n\n    public Event<RequestOrderCancellation> OrderCancellationRequested { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Job Progress with Job Consumer in C#\nDESCRIPTION: This snippet illustrates how to track progress within a job consumer. It uses the SetJobProgress method to save progress values during the processing of a long-running job.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConvertVideoJobConsumer : \n    IJobConsumer<ConvertVideo>\n{\n    public async Task Run(JobContext<ConvertVideo> context)\n    {\n        // some aspects of the content being process\n        long length = File.Length;\n        \n        await context.SetJobProgress(0, length);\n        \n        for (int index = 1; index <= length; index++)\n        {\n            // do something\n            \n            context.SetJobProgress(index, length);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Migration Hosted Service for Postgres\nDESCRIPTION: This code snippet registers a hosted service for database migrations, ensuring that required database elements are created before MassTransit starts. It's vital for initial setup or changing existing databases.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddPostgresMigrationHostedService();\n// OR\nservices.AddSqlServerMigrationHostedService();\n```\n\n----------------------------------------\n\nTITLE: Custom Attribute Usage for Message URN\nDESCRIPTION: This code shows how to define a custom message URN using the MessageUrn attribute. It allows specifying either a default prefixed URN or a fully customized one without a prefix.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[MessageUrn(\"publish-command\")]\npublic record PublishCommand\n{\n    // Will generate a urn of: urn:messages:publish-command\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[MessageUrn(\"scheme:publish-command\", useDefaultPrefix: false)]\npublic record PublishCommand\n{\n    // Will generate a urn of: scheme:publish-command\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Entity with TransactionScope in C#\nDESCRIPTION: Demonstrates how to save an entity using a TransactionScope to ensure database operations are wrapped within a transaction. This method blocks the thread while waiting for the database operation to complete.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Repository\n{\n    public void Save(Entity entity)\n    {\n        using(var scope = new TransactionScope())\n        {\n            SaveEntity(entity);\n\n            scope.Complete();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Custom Activity for MassTransit State Machine\nDESCRIPTION: This snippet shows how to implement a custom activity for a specific event type in MassTransit. The activity implements IStateMachineActivity<TInstance, TData> interface and includes dependency injection through constructor, Execute and Faulted methods for handling normal and exception flows, and required Probe and Accept methods.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/9.custom.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderClosedActivity :\n    IStateMachineActivity<OrderState, OrderClosed>\n{\n    readonly ISomeService _service;\n\n    public OrderClosedActivity(ISomeService service)\n    {\n        _service = service;\n    }\n\n    public async Task Execute(\n        BehaviorContext<OrderState, OrderClosed> context,\n        IBehavior<OrderState, SubmitOrder> next)\n    {\n        await _service.OnOrderClosed(context.Saga.CorrelationId);\n        \n        // always call the next activity in the behavior\n        await next.Execute(context).ConfigureAwait(false);\n    }\n\n    public Task Faulted<TException>(\n        BehaviorExceptionContext<OrderState, OrderClosed, TException> context, \n        IBehavior<OrderState, OrderClosed> next\n        )\n        where TException : Exception\n    {\n        // always call the next activity in the behavior\n        return next.Faulted(context);\n    }\n\n\n    public void Probe(ProbeContext context)\n    {\n        context.CreateScope(\"publish-order-closed\");\n    }\n\n    public void Accept(StateMachineVisitor visitor)\n    {\n        visitor.Visit(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Topic Endpoint Consumer in MassTransit\nDESCRIPTION: Sets up a MassTransit Kafka consumer that connects to a specific topic. This code configures a Rider that consumes messages from a Kafka topic using a specified consumer group, with a consumer class that handles the message processing.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/10.kafka.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace KafkaConsumer;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddMassTransit(x =>\n        {\n            x.UsingInMemory();\n\n            x.AddRider(rider =>\n            {\n                rider.AddConsumer<KafkaMessageConsumer>();\n\n                rider.UsingKafka((context, k) =>\n                {\n                    k.Host(\"localhost:9092\");\n\n                    k.TopicEndpoint<KafkaMessage>(\"topic-name\", \"consumer-group-name\", e =>\n                    {\n                        e.ConfigureConsumer<KafkaMessageConsumer>(context);\n                    });\n                });\n            });\n        });\n    }\n\n    class KafkaMessageConsumer :\n        IConsumer<KafkaMessage>\n    {\n        public Task Consume(ConsumeContext<KafkaMessage> context)\n        {\n            return Task.CompletedTask;\n        }\n    }\n\n    public record KafkaMessage\n    {\n        public string Text { get; init; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Publish Filter with Dependency Injection\nDESCRIPTION: Implementation of a scoped publish filter that receives dependencies from the container. This filter is applied to all outgoing messages published through the bus.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyPublishFilter<T> :\n    IFilter<PublishContext<T>>\n    where T : class\n{\n    public MyPublishFilter(IMyDependency dependency) { }\n      \n    public async Task Send(PublishContext<T> context, IPipe<PublishContext<T>> next) \n    {\n        await next.Send(context);\n    }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddScoped<IMyDependency, MyDependency>();\n          \n        services.AddMassTransit(x =>\n        {\n            x.UsingRabbitMq((context, cfg) =>\n            {\n              cfg.UsePublishFilter(typeof(MyPublishFilter<>), context);\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Jobs in MassTransit .NET\nDESCRIPTION: Shows how to schedule jobs for later execution using the ScheduleJob method with an IRequestClient. Requires MassTransit v8.3.0 and proper configuration in a .NET context. Inputs include a path and a DateTimeOffset for scheduling, offering flexible job submission times.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost(\"{path}\")]\npublic async Task<IActionResult> SubmitJob(string path, [FromServices] IRequestClient<SubmitJob<ConvertVideo>> client)\n{\n    await client.ScheduleJob(DateTimeOffset.Now.AddMinutes(15), new ConvertVideo\n    {\n        Path = path\n    });\n\n    return Ok(new\n    {\n        jobId,\n        path\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Connecting Receive Endpoints in MassTransit C#\nDESCRIPTION: This example illustrates dynamically configuring a receive endpoint on an existing bus in MassTransit by resolving the IReceiveEndpointConnector interface. Dynamically connected endpoints allow for flexible message handling configurations and can be adjusted at runtime.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar connector = provider.GetRequiredService<IReceiveEndpointConnector>();\n\nvar handle = connector.ConnectReceiveEndpoint(\"queue-name\", (context, cfg) =>\n{\n    cfg.ConfigureConsumer<MyConsumer>(context);\n});\n\n// optional, the handle can be used to wait for the receive endpoint to finish connecting\nawait handle.Ready;\n```\n\n----------------------------------------\n\nTITLE: Defining Behavior During a State\nDESCRIPTION: This code snippet demonstrates how to define behavior during a specific state using the `During` and `When` methods. When an `OrderAccepted` message is consumed while the instance is in the `Submitted` state, the `TransitionTo` activity transitions the instance to the `Accepted` state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderAccepted\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderAccepted, x => x.CorrelateById(context => context.Message.OrderId));\n\n        During(Submitted,\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n    }\n\n    public Event<OrderAccepted> OrderAccepted { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Marten as a Saga Repository in MassTransit\nDESCRIPTION: Configuration code to set up Marten as a saga repository for a specific state machine and state class. Includes setting up the PostgreSQL connection and registering the saga with MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMarten(options =>\n{\n    const string connectionString = \"host=localhost;port=5432;database=orders;username=web;password=webpw;\";\n    \n    options.Connection(connectionString);\n});\n\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .MartenRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Using IScopedClientFactory to Create Request Clients\nDESCRIPTION: Demonstrates the use of IScopedClientFactory to create MassTransit request clients. Useful when the scope-dependent service address must be dynamically resolved.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IScopedClientFactory\n{\n    IRequestClient<T> CreateRequestClient<T>(RequestTimeout timeout = default)\n        where T : class;\n\n    IRequestClient<T> CreateRequestClient<T>(Uri destinationAddress, RequestTimeout timeout = default)\n        where T : class;\n}\n\n// Usage example\n[HttpGet]\npublic async Task<IActionResult> HandleGet(string tenantId, int id, [FromServices] IScopedClientFactory clientFactory)\n{    \n    var serviceAddress = new Uri($\"exchange:check-order-status-{tenantId}\");\n    \n    var client = clientFactory.CreateRequestClient<CheckOrderStatus>(serviceAddress);\n\n    var response = await client.GetResponse<OrderStatusResult>(new { OrderId = id});\n    \n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing for Console Application - C#\nDESCRIPTION: This code snippet demonstrates how to set up OpenTelemetry tracing in a Console application using MassTransit. The configuration includes initializing a tracer provider and setting up the resource and telemetry sources.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nSdk.CreateTracerProviderBuilder()\n    .ConfigureResource(ConfigureResource)\n    .AddSource(DiagnosticHeaders.DefaultListenerName) // MassTransit ActivitySource\n    .AddConsoleExporter() // Any OTEL suportable exporter can be used here\n    .Build()\n```\n\n----------------------------------------\n\nTITLE: Sending an Order Message Using Anonymous Object in C#\nDESCRIPTION: This snippet shows how to send a `SubmitOrder` message using an anonymous object to set its properties while leveraging MassTransit methods for message handling.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait endpoint.Send<SubmitOrder>(new  // <-- notice no ()\n{\n    OrderId = NewId.NextGuid(),\n    OrderDate = DateTime.UtcNow,\n    OrderNumber = \"18001\",\n    OrderAmount = 123.45m\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Request and State Classes for Order Processing in C#\nDESCRIPTION: This snippet defines the interfaces and classes needed for an order processing state machine. It includes the request and response interfaces, the state class, and the basic structure of the state machine.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ProcessOrder\n{\n    Guid OrderId { get; }    \n}\n\npublic interface OrderProcessed\n{\n    Guid OrderId { get; }\n    Guid ProcessingId { get; }\n}\n\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public Guid? ProcessOrderRequestId { get; set; }\n    public Guid? ProcessingId { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine(OrderStateMachineSettings settings)\n    {\n        Request(\n            () => ProcessOrder,\n            x => x.ProcessOrderRequestId, // Optional\n            r => {\n                r.ServiceAddress = settings.ProcessOrderServiceAddress;\n                r.Timeout = settings.RequestTimeout;\n            });\n    }\n\n    public Request<OrderState, ProcessOrder, OrderProcessed> ProcessOrder { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AcceptOrder Event in Submitted State (C#)\nDESCRIPTION: This snippet shows how the AcceptOrder event can be handled within the Submitted state of the saga state machine, capturing the time at which the order was accepted and transitioning to the Accepted state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public Event<AcceptOrder> AcceptOrder { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        During(Submitted,\n            When(AcceptOrder)\n                .Then(context => \n                {\n                    context.Saga.AcceptedAt = context.SentTime ?? DateTime.UtcNow;\n                })\n                .TransitionTo(Accepted)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Health Check Options\nDESCRIPTION: Demonstrates how to customize health check configuration including name, minimal failure status, and tags using ConfigureHealthCheckOptions.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMassTransit(bus =>\n{\n    bus.ConfigureHealthCheckOptions(options =>\n    {\n        options.Name = \"masstransit\";\n        options.MinimalFailureStatus = HealthStatus.Unhealthy;\n        options.Tags.Add(\"health\");\n    });\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Data Time to Live\nDESCRIPTION: Shows how to set default time-to-live and extra time for message data\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMessageDataDefaults.TimeToLive = TimeSpan.FromDays(2);\nMessageDataDefaults.ExtraTimeToLive = TimeSpan.FromMinutes(5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Consumer Options\nDESCRIPTION: This snippet shows how to set up a job consumer with specific job options in MassTransit, custom-tailored for long-running job executions including timeout and retry policies.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nAddConsumer<MyJobConsumer>(cfg =>\n{\n    cfg.Options<JobOptions<MyJob>>(options => options\n        .SetJobTimeout(TimeSpan.FromMinutes(15))\n        .SetConcurrentJobLimit(10)\n        .SetRetry(r => r.Interval(5,30000)));\n});\n```\n\n----------------------------------------\n\nTITLE: Using ExcludeFromTopology Attribute to Prevent Topic/Exchange Creation in MassTransit\nDESCRIPTION: This example shows the ExcludeFromTopology attribute which prevents a topic or exchange from being created for the message type when publishing an implementing type or sub-type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ExcludeFromTopology]\npublic interface ICommand\n{\n}\n\npublic record ReformatHardDrive :\n    ICommand\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in Mediator - C#\nDESCRIPTION: This snippet demonstrates how to configure middleware filters in the MassTransit mediator setup. It shows the example of adding the 'ValidateOrderStatusFilter' to the mediator's configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ConfigureMediator((context, mcfg) =>\n{\n    mcfg.UseSendFilter(typeof(ValidateOrderStatusFilter<>), context);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Consumers with MassTransit Test Harness\nDESCRIPTION: Provides an example for testing a consumer using the MassTransit Test Harness. The code initiates a test of a `SubmitOrderConsumer`, ensuring that it correctly processes and sends expected responses. Requires setting up business services and appropriate test harness configuration before execution.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task ASampleTest() \n{\n    await using var provider = new ServiceCollection()\n        .AddMassTransitTestHarness(cfg =>\n        {\n            cfg.AddConsumer<SubmitOrderConsumer>();\n        })\n        .BuildServiceProvider(true);\n\n    var harness = provider.GetRequiredService<ITestHarness>();\n\n    await harness.Start();\n\n    var client = harness.GetRequestClient<SubmitOrder>();\n\n    await client.GetResponse<OrderSubmitted>(new\n    {\n        OrderId = InVar.Id,\n        OrderNumber = \"123\"\n    });\n\n    Assert.IsTrue(await harness.Sent.Any<OrderSubmitted>());\n\n    Assert.IsTrue(await harness.Consumed.Any<SubmitOrder>());\n\n    var consumerHarness = harness.GetConsumerHarness<SubmitOrderConsumer>();\n\n    Assert.That(await consumerHarness.Consumed.Any<SubmitOrder>());\n\n    // test side effects of the SubmitOrderConsumer here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScheduleNotificationConsumer in MassTransit\nDESCRIPTION: This snippet demonstrates how to implement a consumer that schedules a notification message. It uses the ConsumeContext to schedule a send operation for a future time.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScheduleNotificationConsumer :\n    IConsumer<ScheduleNotification>\n{\n    public async Task Consume(ConsumeContext<ScheduleNotification> context)\n    {\n        Uri notificationService = new Uri(\"queue:notification-service\");\n\n        await context.ScheduleSend<SendNotification>(notificationService,\n            context.Message.DeliveryTime, new()\n            {\n                EmailAddress = context.Message.EmailAddress,\n                Body = context.Message.Body\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Jobs in MassTransit .NET\nDESCRIPTION: Demonstrates finalizing jobs in a canceled or faulted state using the FinalizeJob method on an IPublishEndpoint. Dependencies include MassTransit setup in a .NET project. Takes a jobId as input and removes the job from the saga repository, returning an HTTP status.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPut(\"{jobId}\")]\npublic async Task<IActionResult> FinalizeJob(Guid jobId, [FromServices] IPublishEndpoint publishEndpoint)\n{\n    var jobId = await publishEndpoint.FinalizeJob(jobId);\n\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Partition Key During Message Publishing\nDESCRIPTION: Demonstrates how to manually set a partition key when publishing a message using the Publish method with a specific customer identifier\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait publishEndpoint.Publish(new CustomerUpdatedEvent(NewId.NextGuid()),\n    x => x.SetPartitionKey(\"CustomerA\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics with OpenTelemetry in C#\nDESCRIPTION: Sets up OpenTelemetry metrics exporter for Prometheus with service resource configuration and scraping endpoint\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(ConfigureResource)\n    .WithMetrics(b => b\n        .AddMeter(InstrumentationOptions.MeterName)\n        .AddPrometheusExporter()\n    );\n    \nvar app = builder.Build();\n\napp.UseOpenTelemetryPrometheusScrapingEndpoint();\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Endpoint\nDESCRIPTION: Demonstrates how to create a subscription endpoint for a specific message type with a consumer\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SubscriptionEndpoint<MessageType>(\"subscription-name\", e =>\n{\n    e.ConfigureConsumer<MyConsumer>(provider);\n})\n```\n\n----------------------------------------\n\nTITLE: Building a Routing Slip with Activities and Variables\nDESCRIPTION: This C# snippet demonstrates how to use the `RoutingSlipBuilder` to create a routing slip. It adds two activities, \"DownloadImage\" and \"FilterImage\", with specified execution addresses and arguments for the first activity. It also adds a variable named \"WorkPath\" to the routing slip.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddActivity(\"DownloadImage\", new Uri(\"rabbitmq://localhost/execute_downloadimage\"), \n    new\n    {\n        ImageUri = new Uri(\"http://images.google.com/someImage.jpg\")\n    });\nbuilder.AddActivity(\"FilterImage\", new Uri(\"rabbitmq://localhost/execute_filterimage\"));\nbuilder.AddVariable(\"WorkPath\", @\"\\dfs\\work\");\n\nvar routingSlip = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Using Cosmos DB Emulator for Saga State in C#\nDESCRIPTION: Configures MassTransit to use the Cosmos DB emulator for development and testing. This setup includes database identification and relies on the emulator's predefined settings for simplicity and quick iteration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-cosmos.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .CosmosRepository(r =>\n        {\n            r.ConfigureEmulator();\n\n            r.DatabaseId = \"test\";\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SubmitOrder and OrderSaga with MassTransit C#\nDESCRIPTION: This snippet defines a 'SubmitOrder' message and an 'OrderSaga' class that consumes the message. The saga manages order submission state using a correlation identifier.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/1.consumer-sagas.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record SubmitOrder :\n    CorrelatedBy<Guid>\n{\n    public Guid CorrelationId { get; init; }\n    public DateTime OrderDate { get; init; }\n}\n\npublic class OrderSaga :\n    ISaga,\n    InitiatedBy<SubmitOrder>\n{\n    public Guid CorrelationId { get; set; }\n\n    public DateTime? SubmitDate { get; set; }\n    public DateTime? AcceptDate { get; set; }\n\n    public async Task Consume(ConsumeContext<SubmitOrder> context)\n    {\n        SubmitDate = context.Message.OrderDate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Order Status Consumer Implementation - C#\nDESCRIPTION: This snippet implements the 'OrderStatusConsumer', which processes the 'GetOrderStatus' request. It responds asynchronously with the order status, encapsulated in the 'OrderStatus' record.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass OrderStatusConsumer :\n    IConsumer<GetOrderStatus>\n{\n    public async Task Consume(ConsumeContext<GetOrderStatus> context)\n    {\n        await context.RespondAsync<OrderStatus>(new\n        {\n            context.Message.OrderId,\n            Status = \"Pending\"\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring States in a State Machine\nDESCRIPTION: This code snippet demonstrates how to declare states in a state machine.  States are initialized by the `MassTransitStateMachine` base class constructor. States represent previously consumed events resulting in an instance being in a current state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; }\n    public State Accepted { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an ASP.NET Core API Controller with MultiBus\nDESCRIPTION: This snippet is part of an ASP.NET Core API controller setup demonstrating how to bind a specific bus instance to a publish endpoint. The `InventoryController` uses dependency injection to access `_publishEndpoint`, allowing for message publication via `ISecondBus`. It's essential that consumers are aware of the bus instance used.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/multibus.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ApiController]\n[Route(\"/inventory\")]\npublic class InventoryController : ControllerBase\n{\n    readonly Bind<ISecondBus, IPublishEndpoint> _publishEndpoint;\n\n    public InventoryController(Bind<ISecondBus, IPublishEndpoint> publishEndpoint)\n    {\n        _publishEndpoint = publishEndpoint;\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> Post() \n    {\n        // .. do stuff\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Batch Publishing in MassTransit\nDESCRIPTION: Example demonstrating how to configure batch publishing options for RabbitMQ in MassTransit. This allows for buffering messages before sending them to RabbitMQ to increase message throughput, with configurable batch size and timeout parameters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nx.UsingRabbitMq((context, cfg) =>\n{\n    cfg.Host(\"localhost\", h =>\n    {\n        h.ConfigureBatchPublish(x =>\n        {\n            x.Enabled = true;\n            x.Timeout = TimeSpan.FromMilliseconds(2);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with Autofac\nDESCRIPTION: This code demonstrates how to configure MassTransit using Autofac container. It sets up a consumer and RabbitMQ transport within a service collection and builds a provider using Autofac.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar collection = new ServiceCollection();\n\ncollection.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.UsingRabbitMq((context, cfg) => \n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\nvar factory = new AutofacServiceProviderFactory();\nvar container = factory.CreateBuilder(collection);\n\nreturn factory.CreateServiceProvider(container);\n```\n\n----------------------------------------\n\nTITLE: Setting Message Headers in MassTransit with C#\nDESCRIPTION: This snippet illustrates how to set custom headers using an anonymous object by employing the double underscore notation to specify properties for message encapsulation.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await requestClient.GetResponse<OrderStatus>(new \n{\n    __Header_X_B3_TraceId = zipkinTraceId,\n    __Header_X_B3_SpanId = zipkinSpanId,\n    OrderId = orderId,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a MassTransit Worker Project\nDESCRIPTION: Command to create a new MassTransit Worker project. The template includes project references and an example Program.cs configured as a MassTransit Worker.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtworker -n <YOUR NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Saga State Machine with Dependency Injection\nDESCRIPTION: This code snippet demonstrates how to configure a saga state machine using dependency injection. The `AddMassTransit` method is used to configure MassTransit, and the `AddSagaStateMachine` method is used to register the state machine and its repository. The `InMemoryRepository` method is used to use an in-memory repository for the state machine instances.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .InMemoryRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga for Monitoring Routing Slip in MassTransit\nDESCRIPTION: This snippet shows the definition of a Saga, `MonitorRoutingSlip`, that will be used to track the state of the Routing Slip.  The `InstanceState` method configures the property that stores the current state of the Saga. This Saga needs to be configured to handle the RoutingSlip events to update the state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/7.routing-slips/monitor-via-saga.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MonitorRoutingSlip :\n  MassTransitStateMachine<MonitorState>\n{\n  public MonitorRoutingSlip()\n  {\n    InstanceState(x => x.CurrentState);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redelivering Messages on Missing Saga Instance in C# with MassTransit\nDESCRIPTION: This code snippet defines a saga state machine that redelivers a message if a matching saga state machine instance is not found. The redelivery configuration allows for five attempts at intervals of one second before producing a fault if unsuccessful. It showcases the handling of events and correlation of message IDs.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderAddressValidated(Guid OrderId);\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderAddressValidated, e =>\n        {\n            e.CorrelateById(context => context.Message.OrderId);\n\n            e.OnMissingInstance(m => m.Redeliver(r =>\n            {\n                r.Interval(5, 1000);\n                r.OnRedeliveryLimitReached(n => n.Fault());\n            }));\n        });\n    }\n\n    public Event<OrderAddressValidated> OrderAddressValidated { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Class in MassTransit using C#\nDESCRIPTION: This code snippet illustrates how to define a message contract using a C# class for use in MassTransit. Classes provide flexibility in property mutability, though MassTransit recommends against using properties with 'private set' for serialization compatibility. Key properties include CommandId, Timestamp, and customer address data. The snippet requires .NET and MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Company.Application.Contracts\n{\n\tusing System;\n\n\tpublic class UpdateCustomerAddress\n\t{\n\t\tpublic Guid CommandId { get; set; }\n\t\tpublic DateTime Timestamp { get; set; }\n\t\tpublic string CustomerId { get; set; }\n\t\tpublic string HouseNumber { get; set; }\n\t\tpublic string Street { get; set; }\n\t\tpublic string City { get; set; }\n\t\tpublic string State { get; set; }\n\t\tpublic string PostalCode { get; set; }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Queue Name Formatter\nDESCRIPTION: This snippet shows how to set a custom temporary queue name formatter using `PrefixTemporaryQueueNameFormatter`.  This formatter adds a prefix to the generated temporary queue names.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/5.activemq.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SetTemporaryQueueNameFormatter( new PrefixTemporaryQueueNameFormatter(\"mycustomnamespace.\"));\n```\n\n----------------------------------------\n\nTITLE: Publishing to All Hub Connections via MassTransit\nDESCRIPTION: This code snippet demonstrates how to publish a message to all connections of a specific SignalR hub using MassTransit. It creates an `All<THub>` message with a dictionary of protocol-specific messages. The `ToProtocolDictionary` extension method is used to serialize the message for the SignalR protocol.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/1.signalr.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait busControl.Publish<All<ChatHub>>(new\n{\n    Messages = protocols.ToProtocolDictionary(\"broadcastMessage\", new object[] { \"backend-process\", \"Hello\" })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Consume Filter with Dependencies\nDESCRIPTION: Full implementation of a generic consume filter with dependency injection that can be used for any message type. The filter receives its dependencies from the container when the message is processed.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyConsumeFilter<T> :\n    IFilter<ConsumeContext<T>>\n    where T : class\n{\n    public MyConsumeFilter(IMyDependency dependency) { }\n      \n    public async Task Send(ConsumeContext<T> context, IPipe<ConsumeContext<T>> next)\n    {\n        await next.Send(context);\n    }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddScoped<IMyDependency, MyDependency>();\n        \n        services.AddMassTransit(x =>\n        {\n            x.AddConsumer<MyConsumer>();\n            \n            x.UsingRabbitMq((context, cfg) =>\n            {\n                cfg.ReceiveEndpoint(\"input-queue\", e =>\n                {\n                    e.UseConsumeFilter(typeof(MyConsumeFilter<>), context);\n\n                    e.ConfigureConsumer<MyConsumer>();\n                });\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Configuring CorrelationId Property in C#\nDESCRIPTION: Example showing how to explicitly configure which property to use as the CorrelationId when the default naming conventions don't match. This configures the OrderId property to be used as the CorrelationId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/conventions.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderSubmitted\n{\n    public Guid OrderId { get; init; }\n    public Guid CustomerId { get; init; }\n}\n\nBus.Factory.CreateUsingRabbitMq(..., cfg =>\n{\n    cfg.Send<OrderSubmitted>(x =>\n    {\n        x.UseCorrelationId(context => context.Message.OrderId);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using MassTransit Test Harness with Web Application Factory\nDESCRIPTION: Illustrates the integration of MassTransit Test Harness with Web Application Factory for testing ASP.NET applications. This configuration allows seamless setup of testing fixtures, making it suitable for unit and integration tests that necessitate web application simulations.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var application = new WebApplicationFactory<Program>()\n    .WithWebHostBuilder(builder => \n        builder.ConfigureServices(services => \n            services.AddMassTransitTestHarness()));\n\nvar testHarness = application.Services.GetTestHarness();\n\nusing var client = application.CreateClient();\n\nvar orderId = NewId.NextGuid();\n\nvar submitOrderResponse = await client.PostAsync(\"/Order\", JsonContent.Create(new Order\n{\n    OrderId = orderId\n}));\n\nvar consumerTestHarness = testHarness.GetConsumerHarness<SubmitOrderConsumer>();\n\nAssert.That(await consumerTestHarness.Consumed.Any<SubmitOrder>(x => x.Context.Message.OrderId == orderId), Is.True);\n```\n\n----------------------------------------\n\nTITLE: Capturing Data from Events\nDESCRIPTION: This code snippet demonstrates how to capture data from events and store it in the state machine instance. The `Then` method is used to execute an action that copies data from the message to the instance. This allows the state machine to track important information from the events that it processes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface SubmitOrder\n{\n    Guid OrderId { get; }\n\n    DateTime OrderDate { get; }\n}\n\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .Then(x => x.Saga.OrderDate = x.Message.OrderDate)\n                .TransitionTo(Submitted),\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n\n        During(Submitted,\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n\n        During(Accepted,\n            When(SubmitOrder)\n                .Then(x => x.Saga.OrderDate = x.Message.OrderDate));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CorrelationId using SendContext in MassTransit C#\nDESCRIPTION: This snippet shows how to set the CorrelationId for a message using the SendContext when sending a message via MassTransit. It demonstrates setting the CorrelationId based on a property of the consumed message, specifically the OrderId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait endpoint.Send<SubmitOrder>(new { OrderId = InVar.Id }, sendContext =>\n    sendContext.CorrelationId = context.Message.OrderId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Message Scheduler in MassTransit with Amazon SQS\nDESCRIPTION: This code demonstrates how to set up MassTransit with a delayed message scheduler for Amazon SQS. It adds and configures the delayed message scheduler for use with Amazon SQS.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddDelayedMessageScheduler();\n\n    x.UsingAmazonSqs((context, cfg) =>\n    {\n        cfg.UseDelayedMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange Binding Properties in C#\nDESCRIPTION: This snippet allows configuration of specific properties for the exchange binding, such as durability and exchange type, when creating a receive endpoint.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", e =>\n{\n    e.Bind(\"exchange-name\", x =>\n    {\n        x.Durable = false;\n        x.AutoDelete = true;\n        x.ExchangeType = \"direct\";\n        x.RoutingKey = \"8675309\";\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Outbox with State Machine Saga in MassTransit (C#)\nDESCRIPTION: This code snippet demonstrates how to configure the In-Memory Outbox with a state machine saga using MassTransit. It shows a receive endpoint configured to use the in-memory outbox along with a state machine saga that uses `TrashStateMachine` and `TrashState`. It specifies that the outbox will hold messages until the saga instance is saved to the database.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/10.in-memory-outbox.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"r-trashy-saga\", e =>\n{\n    e.UseInMemoryOutbox();\n\n    e.StateMachineSaga<TrashStateMachine, TrashState>(machine, repository);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Concrete Consume Filter in C#\nDESCRIPTION: Example of how to define a concrete consume filter for a specific message type that implements IFilter<ConsumeContext<MyMessage>>.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMessageConsumeFilter :\n    IFilter<ConsumeContext<MyMessage>>\n```\n\n----------------------------------------\n\nTITLE: Adding an Activity with RoutingSlipBuilder in C#\nDESCRIPTION: This code snippet demonstrates how to add an activity to a routing slip using the RoutingSlipBuilder. It initializes a builder with a unique tracking number, adds an activity with a name, address, and arguments, and then builds the routing slip. The activity represents a specific step in the itinerary.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/7.routing-slips/2.routing_slip.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddActivity(\"Name\", new Uri(\"address\"), new {\n  // args\n});\nvar slip = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Topic Subscription with Routing Key\nDESCRIPTION: This snippet sets up a subscription with a routing key, allowing filtering of messages based on the provided routing key. It includes code to disable automatic topology configuration when using routing keys.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ne.ConfigureConsumeTopology = false;\n\ne.Subscribe<CustomerUpdatedEvent>(m =>\n{\n    m.SubscriptionType = SqlSubscriptionType.RoutingKey;\n    m.RoutingKey = \"8675309\";\n});\n\nawait publishEndpoint.Publish(new CustomerUpdatedEvent(NewId.NextGuid()),\n    x => x.SetRoutingKey(\"8675309\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Saga State in C#\nDESCRIPTION: Defines a saga state class that implements ISagaVersion interface required for Redis storage. The Version property is used for optimistic concurrency control.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/redis.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance,\n    ISagaVersion\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n\n    public int Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscription to a Routing Slip for Saga Integration in MassTransit\nDESCRIPTION: This code demonstrates adding a subscription to a Routing Slip that sends all Routing Slip events to a specified Saga queue. This enables the Saga to monitor the progress and state of the Routing Slip as it executes. The `RoutingSlipEvents.All` specifies that all routing slip events should be sent.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/7.routing-slips/monitor-via-saga.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\n\n// ... add activities and variables as normal\n\n// ⭐️ KEY ITEM\nbuilder.AddSubscription(new Uri(\"<the saga queue>\"), RoutingSlipEvents.All);\n\nvar routingSlip = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Filters for Message Retry in MassTransit\nDESCRIPTION: Example of configuring exception filters to customize which exceptions trigger retry behavior. This allows for handling specific exceptions differently based on type or properties.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ne.UseMessageRetry(r =>\n{\n    r.Handle<ArgumentNullException>();\n    r.Ignore(typeof(InvalidOperationException), typeof(InvalidCastException));\n    r.Ignore<ArgumentException>(t => t.ParamName == \"orderTotal\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mediator with Consumers - C#\nDESCRIPTION: This snippet demonstrates how to configure the MassTransit mediator by adding consumer classes to the configuration. It sets up the mediator within the service collection, allowing the application to use the defined consumers immediately.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMediator(cfg =>\n{\n    cfg.AddConsumer<SubmitOrderConsumer>();\n    cfg.AddConsumer<OrderStatusConsumer>();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Routing Slip Activity with MassTransit Test Harness\nDESCRIPTION: Demonstrates setting up and testing a routing slip activity using MassTransit Test Harness, executing a routing slip, and verifying activity completion\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task ASampleTest()\n{\n    await using var provider = new ServiceCollection()\n        .AddMassTransitTestHarness(cfg =>\n        {\n            cfg.AddActivity<MyActivity, MyActivityArgs, MyActivityLog>();\n        })\n        .BuildServiceProvider(true);\n\n    var harness = provider.GetRequiredService<ITestHarness>();\n\n    await harness.Start();\n\n    var addr = harness.GetExecuteActivityAddress<MyActivity, MyActivityArgs>();\n    var builder = new RoutingSlipBuilder(NewId.NextGuid());\n    builder.AddActivity(\"test\", addr, new {\n        OrderNumber = \"ORDER123\"\n    })\n    \n    await harness.Bus.Execute(builder.Build())\n\n    await harness.Published.Any<RoutingSlipActivityCompleted>();\n\n    // test side effects of MyActivity here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CorrelationId Provider during Bus Configuration in MassTransit C#\nDESCRIPTION: This snippet illustrates how to specify a correlation ID provider during bus configuration in MassTransit. This approach applies to the configured bus instance, using the OrderId property of the SubmitOrder message to set the CorrelationId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SendTopology.UseCorrelationId<SubmitOrder>(x => x.OrderId);\n```\n\n----------------------------------------\n\nTITLE: Making an asynchronous request using MassTransit Request Client in C#\nDESCRIPTION: This snippet showcases the usage of MassTransit to send a request asynchronously and await the response. It highlights how requests are correlated using a request ID and response address.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/9.durable-futures.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await client.GetResponse<TResponse>(new Request());\n```\n\n----------------------------------------\n\nTITLE: Declaring Events and Correlation\nDESCRIPTION: This code snippet demonstrates how to declare events and correlate them to an instance.  The `Event<T>` is generic, where `T` must be a valid message type. The `CorrelateById` method is used to correlate the event to an instance based on the `OrderId` property of the message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface SubmitOrder\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => SubmitOrder, x => x.CorrelateById(context => context.Message.OrderId));\n    }\n\n    public Event<SubmitOrder> SubmitOrder { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Message Scheduler in MassTransit with ActiveMQ\nDESCRIPTION: This code illustrates how to set up MassTransit with a delayed message scheduler for ActiveMQ. It adds and configures the delayed message scheduler for use with ActiveMQ.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddDelayedMessageScheduler();\n\n    x.UsingActiveMq((context, cfg) =>\n    {\n        cfg.UseDelayedMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Topic Name for Messages in RabbitMQ with MassTransit\nDESCRIPTION: This snippet demonstrates how to change the default topic name used by a message type in MassTransit when using RabbitMQ. The example shows setting a custom entity name for the OrderSubmitted message type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.Message<OrderSubmitted>(x =>\n        {\n            x.SetEntityName(\"omg-we-got-one\");\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Order Processing Consumer Implementation\nDESCRIPTION: This snippet implements a consumer that responds to 'ProcessOrder' messages and sends back a response indicating that the order was processed. It demonstrates basic handling of messages in a state transition context.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic record CreateOrder(Guid CorrelationId) : CorrelatedBy<Guid>;\n\npublic record ProcessOrder(Guid OrderId, Guid ProcessingId);\n\npublic record OrderProcessed(Guid OrderId, Guid ProcessingId);\n\npublic record OrderCancelled(Guid OrderId, string Reason);\n\npublic class ProcessOrderConsumer : IConsumer<ProcessOrder>\n{\n    public async Task Consume(ConsumeContext<ProcessOrder> context)\n    {\n        await context.RespondAsync(new OrderProcessed(context.Message.OrderId, context.Message.ProcessingId));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Command using Message Initializer in MassTransit Saga\nDESCRIPTION: This snippet demonstrates how to send a command from a MassTransit saga state machine using a message initializer, eliminating the need for a separate command class. It uses `context.Init<UpdateAccountHistory>` to create the command with OrderId from the saga's CorrelationId and sends it to the specified AccountServiceAddress.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface UpdateAccountHistory\n{\n    Guid OrderId { get; }    \n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine(OrderStateMachineSettings settings)\n    {\n        Initially(\n            When(SubmitOrder)\n                .SendAsync(settings.AccountServiceAddress, context => context.Init<UpdateAccountHistory>(new { OrderId = context.Saga.CorrelationId }))\n                .TransitionTo(Submitted));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Saga State Machine with MassTransit Test Harness\nDESCRIPTION: Demonstrates setting up and testing a saga state machine using MassTransit Test Harness, publishing an event, and verifying saga instance creation and state transitions\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task ASampleTest()\n{\n    await using var provider = new ServiceCollection()\n        .AddMassTransitTestHarness(cfg =>\n        {\n            cfg.AddSagaStateMachine<OrderStateMachine, OrderState>();\n        })\n        .BuildServiceProvider(true);\n\n    var harness = provider.GetRequiredService<ITestHarness>();\n\n    await harness.Start();\n\n    var sagaId = Guid.NewGuid();\n    var orderNumber = \"ORDER123\";\n\n    await harness.Bus.Publish(new OrderSubmitted\n    {\n        CorrelationId = sagaId,\n        OrderNumber = orderNumber\n    });\n\n    Assert.That(await harness.Consumed.Any<OrderSubmitted>());\n\n    var sagaHarness = harness.GetSagaStateMachineHarness<OrderStateMachine, OrderState>();\n\n    Assert.That(await sagaHarness.Consumed.Any<OrderSubmitted>());\n\n    Assert.That(await sagaHarness.Created.Any(x => x.CorrelationId == sagaId));\n\n    var instance = sagaHarness.Created.ContainsInState(sagaId, sagaHarness.StateMachine, sagaHarness.StateMachine.Submitted);\n    Assert.IsNotNull(instance, \"Saga instance not found\");\n    Assert.That(instance.OrderNumber, Is.EqualTo(orderNumber));\n\n    Assert.IsTrue(await harness.Published.Any<OrderApprovalRequired>());\n\n    // test side effects of OrderState here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Indexing in Marten Repository\nDESCRIPTION: Configuration to create an index on a saga property to improve query performance. This example sets up indexing for the OrderNumber property in the OrderState saga class.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMarten(options =>\n{\n    const string connectionString = \"host=localhost;port=5432;database=orders;username=web;password=webpw;\";\n    \n    options.Connection(connectionString);\n});\n\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .MartenRepository(r => r.Index(x => x.OrderNumber));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State with MongoDB Support in C#\nDESCRIPTION: Demonstrates how to create a saga state class that implements ISagaVersion interface for MongoDB storage. The Version property is used for optimistic concurrency.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/mongodb.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance,\n    ISagaVersion\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n\n    public int Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Transport Options via Dependency Injection\nDESCRIPTION: Example showing how to configure RabbitMQ transport options using dependency injection with the Options pattern. This approach allows for configuration of connection settings like host, port, credentials, and SSL usage.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOptions<RabbitMqTransportOptions>()\n    .Configure(options =>\n    {\n        // configure options manually, but usually bind them to a configuration section\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Send Filter with Dependency Injection\nDESCRIPTION: Complete implementation of a scoped send filter that receives dependencies from the container. This filter is applied to all outgoing messages sent through the bus.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySendFilter<T> :\n    IFilter<SendContext<T>>\n    where T : class\n{\n    public MySendFilter(IMyDependency dependency) { }\n      \n    public async Task Send(SendContext<T> context, IPipe<SendContext<T>> next)\n    {\n        await next.Send(context);\n    }\n      \n    public void Probe(ProbeContext context) { }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddScoped<IMyDependency, MyDependency>();\n          \n        services.AddMassTransit(x =>\n        {\n            x.UsingRabbitMq((context, cfg) =>\n            {\n              cfg.UseSendFilter(typeof(MySendFilter<>), context);\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring String Instance State - C#\nDESCRIPTION: This snippet configures the OrderStateMachine to use a string property CurrentState for instance state management, allowing maintenance of the current state of the saga instance.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/1.state.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public OrderStateMachine() \n    {\n        InstanceState(x => x.CurrentState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Circuit Breaker in MassTransit (C#)\nDESCRIPTION: Example of how to add a circuit breaker to a receive endpoint in MassTransit. This configures tracking period, trip threshold, active threshold, and reset interval to protect resources from being overloaded when in a failure state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/1.filters.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.UseCircuitBreaker(cb =>\n{\n    cb.TrackingPeriod = TimeSpan.FromMinutes(1);\n    cb.TripThreshold = 15;\n    cb.ActiveThreshold = 10;\n    cb.ResetInterval = TimeSpan.FromMinutes(5);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a MassTransit Bus with MongoDbSagaRepository in C#\nDESCRIPTION: Configures an in-memory MassTransit bus and attaches a MongoDbSagaRepository to an endpoint, facilitating saga storage and management. It requires MassTransit.Bus and MassTransit.MongoDbIntegration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar busControl = Bus.Factory.CreateUsingInMemory(configurator =>\n    {\n        configurator.ReceiveEndpoint(\"my_awesome_endpoint\", endpoint =>\n        {\n            //Normal receive endpoint config...\n\n            endpoint.Saga(new MongoDbSagaRepository<SimpleSaga>(new MongoUrl(\"mongodb://localhost/masstransitTest\")));\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ with MassTransit\nDESCRIPTION: This snippet shows how to configure MassTransit to use ActiveMQ. It includes setting the host, enabling SSL, and configuring username and password for authentication. The configuration is done within the `AddMassTransit` method.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/5.activemq.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ActiveMqConsoleListener;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.Hosting;\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        await Host.CreateDefaultBuilder(args)\n            .ConfigureServices(services =>\n            {\n                services.AddMassTransit(x =>\n                {\n                    x.UsingActiveMq((context, cfg) =>\n                    {\n                        cfg.Host(\"localhost\", h =>\n                        {\n                            h.UseSsl();\n\n                            h.Username(\"admin\");\n                            h.Password(\"admin\");\n                        });\n                    });\n                });\n            })\n            .Build()\n            .RunAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Message with MessageData Property\nDESCRIPTION: Demonstrates how to consume a message with a MessageData property and asynchronously access its value\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class IndexDocumentConsumer :\n    IConsumer<IndexDocumentContent>\n\npublic async Task Consume(ConsumeContext<IndexDocumentContent> context)\n{\n    byte[] document = await context.Message.Document.Value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quorum Queue with RabbitMQ Receive Endpoint\nDESCRIPTION: Demonstrates how to configure a receive endpoint to use a quorum queue with a specified replication factor of 3 in MassTransit\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nx.UsingRabbitMq((context, cfg) =>\n{\n    cfg.ReceiveEndpoint(\"queue-name\", e =>\n    {\n        e.SetQuorumQueue(3); // replication factor of 3\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs with Fire-and-Forget using MassTransit .NET\nDESCRIPTION: Illustrates submitting a job as fire-and-forget via an IPublishEndpoint. Dependencies include MassTransit integration in a .NET project. Takes a job path as input and provides a job identifier and path as output. One limitation is the lack of feedback after submission.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPut(\"{path}\")]\npublic async Task<IActionResult> FireAndForgetSubmitJob(string path, [FromServices] IPublishEndpoint publishEndpoint)\n{\n    var jobId = await publishEndpoint.SubmitJob<ConvertVideo>(new ConvertVideo\n    {\n        Path = path\n    });\n\n    return Ok(new\n    {\n        jobId,\n        path\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Job Distribution Strategy in MassTransit\nDESCRIPTION: This code snippet demonstrates how to register a custom job distribution strategy in MassTransit using the `TryAddJobDistributionStrategy` method. It adds the `MachineTypeJobDistributionStrategy` to the service collection.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nservices.TryAddJobDistributionStrategy<MachineTypeJobDistributionStrategy>();\n```\n```\n\n----------------------------------------\n\nTITLE: Event Correlation by Custom Property\nDESCRIPTION: Demonstrates correlating an event using a custom property when default correlation methods are not applicable\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ExternalOrderSubmitted\n{\n    string OrderNumber { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => ExternalOrderSubmitted, e => e\n            .CorrelateBy(i => i.OrderNumber, x => x.Message.OrderNumber)\n            .SelectId(x => NewId.NextGuid()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Messages Partitioned in SQL\nDESCRIPTION: Uses partitioned receive mode with `fetch_messages_partitioned` to retrieve messages. This function enhances the basic `fetch_messages` by allowing concurrency and ordering options.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nfetch_messages_partitioned(queue_name text,\n               fetch_consumer_id uuid,\n               fetch_lock_id uuid,\n               lock_duration interval,\n               fetch_count integer DEFAULT 1,\n               concurrent_count integer DEFAULT 1,\n               ordered integer DEFAULT 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapper as a Saga Repository in MassTransit\nDESCRIPTION: Example showing how to configure Dapper as the saga repository using the AddMassTransit container extension. This snippet demonstrates the integration of a saga state machine with Dapper repository.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/dapper.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .DapperRepository(connectionString);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Message Scheduler in MassTransit\nDESCRIPTION: This snippet illustrates how to configure MassTransit to use Azure Service Bus message scheduler. It adds the Service Bus message scheduler and configures it for use with Azure Service Bus.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddServiceBusMessageScheduler();\n\n    x.UsingAzureServiceBus((context, cfg) =>\n    {\n        cfg.UseServiceBusMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Saga State Model in C#\nDESCRIPTION: Defines a saga state class for tracking order state with correlation ID and current state properties. Used for managing saga instance state in Azure Service Bus.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-service-bus.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Switch Expressions with Multiple MassTransit Response Types\nDESCRIPTION: Shows advanced C# techniques for handling multiple response types using switch statements and expressions with tuple deconstruction. This approach provides a more concise way to handle different response scenarios.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nResponse response = await client.GetResponse<OrderStatusResult, OrderNotFound>(new { OrderId = id});\n\n// Using a regular switch statement\nswitch (response)\n{\n    case (_, OrderStatusResult a) responseA:\n        // order found\n        break;\n    case (_, OrderNotFound b) responseB:\n        // order not found\n        break;\n}\n\n// Or using a switch expression\nvar accepted = response switch\n{\n    (_, OrderStatusResult a) => true,\n    (_, OrderNotFound b) => false,\n    _ => throw new InvalidOperationException()\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Saga Options in MassTransit .NET\nDESCRIPTION: This snippet demonstrates how to configure job saga options in MassTransit by adding job saga state machines. Required dependencies include MassTransit configured in a .NET project. Key options allow for setting message concurrency limits, heartbeat timeouts, and retry counts for suspect jobs. Inputs include customizable options for handling job states.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddJobSagaStateMachines(options =>\n{\n    options.FinalizeCompleted = true;\n    options.ConcurrentMessageLimit = 32;\n    options.HeartbeatTimeout = TimeSpan.FromMinutes(5);\n    options.SlotWaitTime = TimeSpan.FromSeconds(30);\n    options.SuspectJobRetryCount = 2;\n    options.SuspectJobRetryDelay = TimeSpan.FromMinutes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Message Entity Name Formatter in MassTransit Configuration\nDESCRIPTION: This code demonstrates how to apply a custom entity name formatter for a specific message type during MassTransit configuration. It uses the FancyNameFormatter for the OrderSubmitted message type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.Message<OrderSubmitted>(x =>\n        {\n            x.SetEntityNameFormatter(new FancyNameFormatter<OrderSubmitted>());\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Saga Registration with MassTransit\nDESCRIPTION: Shows multiple methods for registering state machine and consumer sagas with various repository and configuration options\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(r =>\n{\n    r.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .InMemoryRepository();\n\n    r.AddSaga<OrderSaga>()\n        .InMemoryRepository();\n\n    r.AddSaga(typeof(OrderSaga));\n\n    r.AddSagaStateMachine(typeof(OrderState), typeof(OrderStateDefinition));\n\n    r.AddSagaStateMachines(Assembly.GetExecutingAssembly());\n\n    r.AddSagas(Assembly.GetExecutingAssembly());\n\n    r.AddSagasFromNamespaceContaining<OrderSaga>();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Saga Repository with Entity Framework Core in MassTransit\nDESCRIPTION: This code snippet demonstrates how to configure the job saga repository using Entity Framework Core and Postgres in MassTransit. It adds the job saga state machines and specifies the database context and Postgres lock statement provider.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nx.AddJobSagaStateMachines()\n    .EntityFrameworkRepository(r =>\n    {\n        r.ExistingDbContext<JobServiceSagaDbContext>();\n        r.UsePostgres();\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Saga State Machine and Definition to MassTransit (C#)\nDESCRIPTION: This snippet configures MassTransit by adding the saga state machine and its definition to the service collection. It registers the `FilteredSagaStateMachine`, `FilteredSaga`, and `FilteredSagaDefinition` with MassTransit for saga management.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<FilteredSagaStateMachine, FilteredSaga, FilteredSagaDefinition>();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Timeout with CancellationToken in C#\nDESCRIPTION: This code demonstrates how to set a timeout when sending a message using MassTransit. It creates a CancellationTokenSource with a 30-second timeout and passes its token to the Send method, which will throw an OperationCanceledException if the timeout is reached.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar timeout = TimeSpan.FromSeconds(30);\nusing var source = new CancellationTokenSource(timeout);\n\nawait endpoint.Send(new SubmitOrder { OrderId = \"123\" }, source.Token);\n```\n\n----------------------------------------\n\nTITLE: Processing Queue Metrics in SQL\nDESCRIPTION: A background process, `process_metrics`, updates queue metrics, including consumed and dead-letter message counts. It is automatically triggered by idle receiving endpoints.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nprocess_metrics(row_limit int DEFAULT 10000)\n```\n\n----------------------------------------\n\nTITLE: Moving Message to Another Queue in SQL\nDESCRIPTION: Move messages to a new queue using `move_message`. It involves specifying the message, lock ID, and target queue, adding headers in the process; typically used for moving to dead-letter or error queues.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nmove_message(message_delivery_id bigint, \n             lock_id uuid, \n             queue_name text, \n             queue_type integer, \n             headers jsonb)\n```\n\n----------------------------------------\n\nTITLE: Purging Topology in SQL\nDESCRIPTION: Run `purge_topology` to clear out auto-delete queues reaching the idle threshold. It operates automatically via idle endpoints, managing queue retention in the transport topology.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\npurge_topology()\n```\n\n----------------------------------------\n\nTITLE: Setting Receive Endpoint Preferences in MassTransit C#\nDESCRIPTION: This snippet shows how to configure global and per-endpoint settings such as PrefetchCount and ConcurrentMessageLimit in MassTransit. These settings control how messages are delivered from the broker to consumers, impacting performance and resource utilization.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n    \n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.PrefetchCount = 32; // applies to all receive endpoints\n        \n        cfg.ReceiveEndpoint(\"order-service\", e =>\n        {\n            e.ConcurrentMessageLimit = 28; // only applies to this endpoint\n            e.ConfigureConsumer<SubmitOrderConsumer>(context);\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Job Distribution Strategy in MassTransit\nDESCRIPTION: This code snippet demonstrates how to implement a custom job distribution strategy in MassTransit using the `IJobDistributionStrategy` interface.  It uses the `CustomerType` header to determine the `MachineType` for job assignment, prioritizing \"Premium\" customers to \"S-Class\" machines.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic class MachineTypeJobDistributionStrategy :\n    IJobDistributionStrategy\n{\n    public Task<ActiveJob?> IsJobSlotAvailable(ConsumeContext<AllocateJobSlot> context, JobTypeInfo jobTypeInfo)\n    {\n        object? strategy = null;\n        jobTypeInfo.Properties?.TryGetValue(\"DistributionStrategy\", out strategy);\n\n        return strategy switch\n        {\n            \"MachineType\" => MachineType(context, jobTypeInfo),\n            _ => DefaultJobDistributionStrategy.Instance.IsJobSlotAvailable(context, jobTypeInfo)\n        };\n    }\n\n    Task<ActiveJob?> MachineType(ConsumeContext<AllocateJobSlot> context, JobTypeInfo jobTypeInfo)\n    {\n        var customerType = context.GetHeader(\"CustomerType\");\n        \n        var machineType = customerType switch \n        {\n            \"Premium\" => \"S-Class\",\n            _ => \"E-Class\"\n        };\n\n        var instances = from i in jobTypeInfo.Instances\n            join a in jobTypeInfo.ActiveJobs on i.Key equals a.InstanceAddress into ai\n            where (ai.Count() < jobTypeInfo.ConcurrentJobLimit\n                    && string.IsNullOrEmpty(dataCenter))\n                || (i.Value.Properties.TryGetValue(\"MachineType\", out var mt) && mt is string mtext && mtext == machineType)\n            orderby ai.Count(), i.Value.Used\n            select new\n            {\n                Instance = i.Value,\n                InstanceAddress = i.Key,\n                InstanceCount = ai.Count()\n            };\n\n        var firstInstance = instances.FirstOrDefault();\n        if (firstInstance == null)\n            return Task.FromResult<ActiveJob?>(null);\n\n        return Task.FromResult<ActiveJob?>(new ActiveJob\n        {\n            JobId = context.Message.JobId,\n            InstanceAddress = firstInstance.InstanceAddress\n        });\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer for Submitted Orders in C#\nDESCRIPTION: This snippet provides an implementation of a consumer that handles SubmitOrder messages, demonstrating how to consume messages in MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderConsumer :\n    IConsumer<SubmitOrder>\n{\n    public async Task Consume(ConsumeContext<SubmitOrder> context)\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting an Order with a Consumer in C#\nDESCRIPTION: This snippet defines the class `SubmitOrderConsumer` which implements the consumer interface for handling the `SubmitOrder` message and publishes an `OrderSubmitted` message after processing the order submission.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmitOrderConsumer : IConsumer<SubmitOrder>\n{\n    private readonly IOrderSubmitter _orderSubmitter;\n\n    public SubmitOrderConsumer(IOrderSubmitter submitter)\n        => _orderSubmitter = submitter;\n\n    public async Task Consume(IConsumeContext<SubmitOrder> context)\n    {\n        await _orderSubmitter.Process(context.Message);\n\n        await context.Publish<OrderSubmitted>(new()\n        {\n            OrderId = context.Message.OrderId,\n            OrderDate = DateTime.UtcNow\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Consumers at Runtime - C#\nDESCRIPTION: This snippet illustrates how to connect a consumer to the mediator during runtime, allowing dynamic interaction with the message handling process. The connected consumer can later be disconnected using the handle returned from the connection method.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar handle = mediator.ConnectConsumer<SubmitOrderConsumer>();\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Configuration for MassTransit\nDESCRIPTION: Command to add Docker configuration to a MassTransit project. Creates a Dockerfile and docker-compose.yml file configured for RabbitMQ.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtdocker\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs with Response using RequestClient in MassTransit .NET\nDESCRIPTION: This code shows how to submit a job and wait for a response using IRequestClient<T>. The system automatically generates a JobId using the RequestClient's RequestId. Required dependencies include IRequestClient and MassTransit configuration. The method takes a job path and returns a JSON object with the jobId and path.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost(\"{path}\")]\npublic async Task<IActionResult> SubmitJob(string path, [FromServices] IRequestClient<ConvertVideo> client)\n{    \n    var jobId = await client.SubmitJob(new ConvertVideo\n    {\n        Path = path\n    });\n\n    return Ok(new\n    {\n        jobId,\n        path\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Event Hub Message Handler Function\nDESCRIPTION: Azure Function for processing messages from Azure Event Hub using MassTransit, with event handling and consumer configuration\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/21.azure-functions.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing MassTransit.WebJobs.EventHubsIntegration;\nusing Microsoft.Azure.EventHubs;\nusing Microsoft.Azure.WebJobs;\n\npublic class AuditOrderFunctions\n{\n    const string AuditOrderEventHubName = \"input-hub\";\n    readonly IEventReceiver _receiver;\n\n    public AuditOrderFunctions(IEventReceiver receiver)\n    {\n        _receiver = receiver;\n    }\n\n    [FunctionName(\"AuditOrder\")]\n    public Task AuditOrderAsync([EventHubTrigger(AuditOrderEventHubName, Connection = \"AzureWebJobsEventHub\")]\n        EventData message, CancellationToken cancellationToken)\n    {\n        return _receiver.HandleConsumer<AuditOrderConsumer>(AuditOrderEventHubName, message, cancellationToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Consumers to Receive Endpoints in C#\nDESCRIPTION: This snippet binds consumer implementations to specific receive endpoints in MassTransit, ensuring messages are grouped and routed effectively.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"priority-orders\", x =>\n{\n    x.ConfigureConsumeTopology = false;\n\n    x.Consumer<OrderConsumer>();\n\n    x.Bind(\"submitorder\", s => \n    {\n        s.RoutingKey = \"PRIORITY\";\n        s.ExchangeType = ExchangeType.Direct;\n    });\n});\n\ncfg.ReceiveEndpoint(\"regular-orders\", x =>\n{\n    x.ConfigureConsumeTopology = false;\n\n    x.Consumer<OrderConsumer>();\n\n    x.Bind(\"submitorder\", s => \n    {\n        s.RoutingKey = \"REGULAR\";\n        s.ExchangeType = ExchangeType.Direct;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Discarding Faulted Messages in MassTransit\nDESCRIPTION: Demonstrates how to configure a receive endpoint to discard faulted messages instead of moving them to the error queue\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", ec =>\n{\n    ec.DiscardFaultedMessages();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Functions host.json Settings\nDESCRIPTION: Configuration file for Azure Functions with MassTransit-specific settings for Service Bus and Event Hub message processing, including prefetch count, concurrent calls, and logging levels\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/21.azure-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0\",\n  \"logging\": {\n    \"applicationInsights\": {\n      \"samplingSettings\": {\n        \"isEnabled\": true\n      }\n    },\n    \"logLevel\": {\n      \"MassTransit\": \"Debug\",\n      \"Sample.AzureFunctions.ServiceBus\": \"Information\"\n    }\n  },\n  \"extensions\": {\n    \"serviceBus\": {\n      \"prefetchCount\": 32,\n      \"messageHandlerOptions\": {\n        \"autoComplete\": true,\n        \"maxConcurrentCalls\": 32,\n        \"maxAutoRenewDuration\": \"00:30:00\"\n      }\n    },\n    \"eventHub\": {\n      \"maxBatchSize\": 64,\n      \"prefetchCount\": 256,\n      \"batchCheckpointFrequency\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Event Hub Consumer with MassTransit\nDESCRIPTION: This example demonstrates how to configure MassTransit to consume messages from an Azure Event Hub. It shows service registration, bus configuration with Azure Service Bus, and Event Hub Rider setup with consumer registration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/11.azure-event-hub.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace EventHubConsumer;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddMassTransit(x =>\n        {\n            x.UsingAzureServiceBus((context, cfg) =>\n            {\n                cfg.Host(\"connection-string\");\n\n                cfg.ConfigureEndpoints(context);\n            });\n\n            x.AddRider(rider =>\n            {\n                rider.AddConsumer<EventHubMessageConsumer>();\n\n                rider.UsingEventHub((context, k) =>\n                {\n                    k.Host(\"connection-string\");\n\n                    k.Storage(\"connection-string\");\n\n                    k.ReceiveEndpoint(\"input-event-hub\", c =>\n                    {\n                        c.ConfigureConsumer<EventHubMessageConsumer>(context);\n                    });\n                });\n            });\n        });\n    }\n\n    class EventHubMessageConsumer :\n        IConsumer<EventHubMessage>\n    {\n        public Task Consume(ConsumeContext<EventHubMessage> context)\n        {\n            return Task.CompletedTask;\n        }\n    }\n\n    public record EventHubMessage\n    {\n        public string Text { get; init; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Endpoint Conventions for Message Types\nDESCRIPTION: This snippet shows how to map a message type (StartDelivery) to an endpoint address stored in application configuration. This allows the application to send messages to configured endpoints without explicitly obtaining send endpoints.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nEndpointConvention.Map<StartDelivery>(new Uri(ConfigurationManager.AppSettings[\"deliveryServiceQueue\"]));\n```\n\n----------------------------------------\n\nTITLE: Sending Requests and Handling Responses in State Machine\nDESCRIPTION: Demonstrates how to send requests from a state machine and handle different response scenarios, including successful and failed responses\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/3.requests.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Request<OrderState, ValidateOrder, OrderValidated> \n        ValidateOrder { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        Initially(\n            When(OrderSubmitted)\n                .Request(ValidateOrder,\n                    x => new ValidateOrder(x.Saga.CorrelationId))\n                .TransitionTo(ValidateOrder.Pending)\n        );\n\n        During(ValidateOrder.Pending,\n            When(ValidateOrder.Completed)\n                .TransitionTo(Completed),\n\n            When(ValidateOrder.Faulted)\n                .TransitionTo(Failed)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Routing Slip\nDESCRIPTION: This C# snippet demonstrates how to execute a routing slip using the `Execute` extension method on the `IBus` interface. This sends the routing slip to the first activity's execution address.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nawait bus.Execute(routingSlip);\n```\n\n----------------------------------------\n\nTITLE: Using Azure Managed Identity with Azure Service Bus in C#\nDESCRIPTION: This example demonstrates configuring Azure Service Bus with an Azure Managed Identity. The Host method is used to specify the service bus namespace URI. Ensure that the Azure Active Directory user has the necessary permissions as specified.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/3.azure-service-bus.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingAzureServiceBus((context, cfg) =>\n    {\n        cfg.Host(new Uri(\"sb://your-service-bus-namespace.servicebus.windows.net\"));\n    });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead-letter Queues in Azure Service Bus with C#\nDESCRIPTION: This snippet configures MassTransit to utilize Azure Service Bus's built-in dead-letter queues for handling skipped and faulted messages. Requires service bus namespace URI and MassTransit configured for the environment.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/3.azure-service-bus.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConfigureEndpointsCallback((_, cfg) =>\n    {\n        if (cfg is IServiceBusReceiveEndpointConfigurator sb)\n        {\n            sb.ConfigureDeadLetterQueueDeadLetterTransport();\n            sb.ConfigureDeadLetterQueueErrorTransport();\n        }\n    });    \n    \n    x.UsingAzureServiceBus((context, cfg) =>\n    {\n        cfg.Host(new Uri(\"sb://your-service-bus-namespace.servicebus.windows.net\"));\n        \n        cfg.ConfigureEndpoints(context);\n    });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Policy for SQS and SNS Access\nDESCRIPTION: JSON policy that grants necessary permissions for a user to interact with Amazon SQS and SNS services. Includes permissions for queue and topic management, message operations, and listing topics.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/4.amazon-sqs.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SqsAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sqs:SetQueueAttributes\",\n                \"sqs:ReceiveMessage\",\n                \"sqs:CreateQueue\",\n                \"sqs:DeleteMessage\",\n                \"sqs:SendMessage\",\n                \"sqs:GetQueueUrl\",\n                \"sqs:GetQueueAttributes\",\n                \"sqs:ChangeMessageVisibility\",\n                \"sqs:PurgeQueue\",\n                \"sqs:DeleteQueue\",\n                \"sqs:TagQueue\"\n            ],\n            \"Resource\": \"arn:aws:sqs:*:YOUR_ACCOUNT_ID:*\"\n        },{\n            \"Sid\": \"SnsAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sns:GetTopicAttributes\",\n                \"sns:CreateTopic\",\n                \"sns:Publish\",\n                \"sns:Subscribe\"\n            ],\n            \"Resource\": \"arn:aws:sns:*:YOUR_ACCOUNT_ID:*\"\n        },{\n            \"Sid\": \"SnsListAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sns:ListTopics\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Jobs in MassTransit .NET\nDESCRIPTION: Illustrates how to retry a faulted or canceled job using the RetryJob extension method with an IPublishEndpoint. Prerequisites include MassTransit configured into a .NET project. Inputs a jobId and sends a retry command, with the method outputting an HTTP status indicating success.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPut(\"{jobId}\")]\npublic async Task<IActionResult> RetryJob(Guid jobId, [FromServices] IPublishEndpoint publishEndpoint)\n{\n    var jobId = await publishEndpoint.RetryJob(jobId);\n\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Compensating an Activity\nDESCRIPTION: This C# snippet shows how to implement the `Compensate` method for an `IActivity`. It retrieves the compensation log data and performs the necessary actions to undo the activity's effects, such as deleting a downloaded image. It then returns a `CompensationResult` using the `Compensated` method.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nTask<CompensationResult> Compensate(CompensateContext<DownloadImageLog> compensation)\n{\n    DownloadImageLog log = compensation.Log;\n    File.Delete(log.ImageSavePath);\n\n    return compensation.Compensated();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleNotification and SendNotification Records in C#\nDESCRIPTION: This code defines two record types used for scheduling and sending notifications. ScheduleNotification includes delivery time and message details, while SendNotification contains the email address and message body.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic record ScheduleNotification\n{\n    public DateTime DeliveryTime { get; init; }\n    public string EmailAddress { get; init; }\n    public string Body { get; init; }\n}\n\npublic record SendNotification\n{\n    public string EmailAddress { get; init; }\n    public string Body { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Topic Subscription in MassTransit Kafka\nDESCRIPTION: Demonstrates how to subscribe to multiple Kafka topics using a regex pattern (wildcard). This approach allows consuming messages from any topic that matches the specified pattern, all handled by the same consumer class.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/10.kafka.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace KafkaWildcardConsumer;\n\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddMassTransit(x =>\n        {\n            x.UsingInMemory();\n\n            x.AddRider(rider =>\n            {\n                rider.AddConsumer<KafkaMessageConsumer>();\n\n                rider.UsingKafka((context, k) =>\n                {\n                    k.Host(\"localhost:9092\");\n\n                    k.TopicEndpoint<KafkaMessage>(\"^topic-[0-9]*\", \"consumer-group-name\", e =>\n                    {\n                        e.ConfigureConsumer<KafkaMessageConsumer>(context);\n                    });\n                });\n            });\n        });\n    }\n\n    class KafkaMessageConsumer :\n        IConsumer<KafkaMessage>\n    {\n        public Task Consume(ConsumeContext<KafkaMessage> context)\n        {\n            return Task.CompletedTask;\n        }\n    }\n\n    public record KafkaMessage\n    {\n        public string Text { get; init; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making an asynchronous HTTP GET request in C#\nDESCRIPTION: This code snippet illustrates how to make an asynchronous GET request using the HttpClient class. It shows the use of the 'await' keyword, enhancing readability and simplicity when handling asynchronous operations.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/9.durable-futures.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar responseMessage = await httpClient.GetAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining FileReceived and CustomerDataReceived Interfaces in C#\nDESCRIPTION: These C# interfaces define the contract for `FileReceived` and `CustomerDataReceived` events. The `FileReceived` interface includes properties for `FileId`, `Timestamp`, and `Location`, while `CustomerDataReceived` includes properties for `Timestamp`, `CustomerId`, `SourceAddress`, and `Location`. These interfaces serve as message contracts for consumers to handle file and customer data events.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic interface FileReceived\n{\n    Guid FileId { get; }\n    DateTime Timestamp { get; }\n    Uri Location { get; }\n}\n\npublic interface CustomerDataReceived\n{\n    DateTime Timestamp { get; }\n    string CustomerId { get; }\n    string SourceAddress { get; }\n    Uri Location { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Event Hub Producer with MassTransit\nDESCRIPTION: This example shows how to configure MassTransit to produce messages to an Azure Event Hub. It includes service registration, bus configuration, starting the bus, and obtaining a producer to send messages to the event hub.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/11.azure-event-hub.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace EventHubProducer;\n\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MassTransit;\nusing Microsoft.Extensions.DependencyInjection;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddMassTransit(x =>\n        {\n            x.UsingAzureServiceBus((context, cfg) =>\n            {\n                cfg.Host(\"connection-string\");\n\n                cfg.ConfigureEndpoints(context);\n            });\n\n            x.AddRider(rider =>\n            {\n                rider.UsingEventHub((context, k) =>\n                {\n                    k.Host(\"connection-string\");\n\n                    k.Storage(\"connection-string\");\n                });\n            });\n        });\n\n        var provider = services.BuildServiceProvider(true);\n\n        var busControl = provider.GetRequiredService<IBusControl>();\n\n        await busControl.StartAsync(new CancellationTokenSource(10000).Token);\n\n        var serviceScope = provider.CreateScope();\n\n        var producerProvider = serviceScope.ServiceProvider.GetRequiredService<IEventHubProducerProvider>();\n        var producer = await producerProvider.GetProducer(\"some-event-hub\");\n\n        await producer.Produce<EventHubMessage>(new { Text = \"Hello, Computer.\" });\n    }\n\n    public record EventHubMessage\n    {\n        public string Text { get; init; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Job with Saved State in C#\nDESCRIPTION: This snippet demonstrates how to use previously saved job state to continue processing a job. It checks for the existence of saved state and resumes from the last completed index.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConvertVideoJobConsumer : \n    IJobConsumer<ConvertVideo>\n{\n    public async Task Run(JobContext<ConvertVideo> context)\n    {\n        // some aspects of the content being process\n        long length = File.Length;\n        \n        int index = context.TryGetJobState(out ConsumerState? state)\n            ? state.LastIndex + 1\n            : 1;\n\n        // elided, see above\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to MassTransit Request Messages\nDESCRIPTION: Shows two approaches for adding headers to request messages: using an execute filter in the request pipeline and using message initializers with special property naming conventions for headers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.GetResponse<OrderStatusResult>(new GetOrderStatus{ OrderId = orderId }, \n    x => x.UseExecute(context => context.Headers.Set(\"tenant-id\", \"some-value\")));\n```\n\n----------------------------------------\n\nTITLE: Main Program Example with TransactionalEnlistmentBus in C#\nDESCRIPTION: Provides an example of a Console App using a TransactionalEnlistmentBus to manage transactions around business logic and message publishing. The example ensures that the transaction is completed upon successful execution of commands.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Program\n{\n    public static async Task Main()\n    {\n        var bus = Bus.Factory.CreateUsingRabbitMq(sbc =>\n        {\n            sbc.Host(\"rabbitmq://localhost\");\n        });\n\n        await bus.StartAsync(); // This is important!\n\n        var transactionalBus = new TransactionalEnlistmentBus(bus);\n\n        while(/*some condition*/)\n        {\n            using(var transaction = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))\n            {\n                // Do whatever business logic you need.\n\n                await transactionalBus.Publish(new ReportQueued{...});\n                await transactionalBus.Send(new CalculateReport{...});\n\n                // Maybe other business logic\n\n                transaction.Complete();\n            }\n        }\n\n        Console.WriteLine(\"Press any key to exit\");\n        await Task.Run(() => Console.ReadKey());\n\n        await bus.StopAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Topic Publish Topology with Partitioning\nDESCRIPTION: Demonstrates how to enable partitioning for a specific message type during bus configuration using the publish topology\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.Publish<OrderSubmitted>(x =>\n{\n    x.EnablePartitioning = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a BigMessage with MongoMessageDataRepository in C#\nDESCRIPTION: Illustrates how to create and send a BigMessage incorporating a large payload stored using the MongoMessageDataRepository. Ensures payload efficiency in message-driven systems.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar blob = new byte[] {111, 2, 234, 12, 99};\n\nvar bigPayload = await repository.PutBytes(blob);\n\nvar message = new BigMessage\n{\n    SomeProperty1 = \"Other property that will get passed on message queue\",\n    SomeProperty2 = 12,\n    BigPayload =  bigPayload\n};\n```\n\n----------------------------------------\n\nTITLE: Composite Event Configuration\nDESCRIPTION: Demonstrates creating a composite event that triggers when multiple specific events have been consumed\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n    public int ReadyEventStatus { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        CompositeEvent(() => OrderReady, x => x.ReadyEventStatus, SubmitOrder, OrderAccepted);\n\n        DuringAny(\n            When(OrderReady)\n                .Then(context => Console.WriteLine(\"Order Ready: {0}\", context.Saga.CorrelationId)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw JSON Deserializer on Endpoint\nDESCRIPTION: Configures a receive endpoint to use raw JSON deserialization as the default content type. This allows receiving raw JSON messages without specific headers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nendpointConfigurator.UseRawJsonDeserializer(isDefault: true);\n```\n\n----------------------------------------\n\nTITLE: Defining Message Contracts - C#\nDESCRIPTION: This snippet defines the 'GetOrderStatus' and 'OrderStatus' message contracts used within the MassTransit mediator. Each record structure represents the data exchanged between consumers and clients.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic record GetOrderStatus\n{\n    public Guid OrderId { get; init; }\n}\n\npublic record OrderStatus\n{\n    public Guid OrderId { get; init; }\n    public string Status { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Kafka Producer with Topic Provider\nDESCRIPTION: Demonstrates dynamic producer resolution using ITopicProducerProvider in MassTransit, allowing runtime topic selection and message production\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/10.kafka.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingInMemory();\n\n    x.AddRider(rider =>\n    {\n        rider.UsingKafka((context, k) => { k.Host(\"localhost:9092\"); });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring a Saga on a Receive Endpoint - C#\nDESCRIPTION: This code snippet demonstrates how to manually configure a saga on a MassTransit receive endpoint. It shows the necessary settings for configuring the endpoint-specific settings, middleware, and the saga itself. The configuration should be performed before calling ConfigureEndpoints. Dependencies include MassTransit and configuration classes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/0.overview.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg => \n{\n    cfg.Using[Transport]((context, transport) => \n    {\n        transport.ReceiveEndpoint(\"manually-configured\", e =>\n        {\n            // configure endpoint-specific settings first\n            e.SomeEndpointSetting = someValue;\n            \n            // configure any required middleware components next\n            e.UseMessageRetry(r => r.Interval(5, 1000));\n            \n            // configure the saga last\n            e.ConfigureSaga<MySaga>(context);\n        });\n\n        // configure any remaining consumers, sagas, etc.\n        transport.ConfigureEndpoints(context);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga with Message Retry in C#\nDESCRIPTION: This snippet demonstrates how to configure a saga in MassTransit with message retry capabilities while utilizing the new IRegistrationContext parameter for proper dependency injection.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/obsolete.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void ConfigureSaga(IReceiveEndpointConfigurator configurator, \n    ISagaConfigurator<JobAttemptSaga> sagaConfigurator,\n    IRegistrationContext context)\n{\n    configurator.UseMessageRetry(r => r.Intervals(100, 1000, 2000, 5000));\n\n    // use the new overload, not the obsolete one\n    configurator.UseInMemoryOutbox(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmos DB Saga Repository in C#\nDESCRIPTION: Shows how to configure Azure Cosmos DB as the saga repository using the AddMassTransit extension in C#. This snippet sets the database and collection identifiers crucial for Cosmos DB integration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-cosmos.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .CosmosRepository(endpointUri, key, r =>\n        {\n            r.DatabaseId = \"production-db\"; // required\n\n            // kebab case formatter is used by default if not specified (OrderState -> order-state)\n            r.CollectionId = \"sagas\";\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Raw Json Deserializer in MassTransit C#\nDESCRIPTION: This snippet shows how to add the `RawJsonSerializer` to support `application/json` in MassTransit. It modifies the serializer to accept standard JSON content-types instead of MassTransit's custom content-type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/external-systems.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nendpointConfigurator.UseRawJsonDeserializer();\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Outbox\nDESCRIPTION: This snippet demonstrates the configuration of the MongoDB outbox in MassTransit, setting various parameters such as query delay and duplicate detection window.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddMongoDbOutbox(o =>\n{\n    o.QueryDelay = TimeSpan.FromSeconds(1);\n    \n    o.ClientFactory(provider => provider.GetRequiredService<IMongoClient>());\n    o.DatabaseFactory(provider => provider.GetRequiredService<IMongoDatabase>());\n\n    o.DuplicateDetectionWindow = TimeSpan.FromSeconds(30);\n\n    o.UseBusOutbox();        \n});\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Repository Configuration in MassTransit\nDESCRIPTION: Shows the basic configuration for adding Redis as a saga repository using the local Redis instance on default port with optimistic concurrency.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/redis.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    const string configurationString = \"127.0.0.1\";\n\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .RedisRepository(configurationString);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Monitor Telemetry in C#\nDESCRIPTION: Sets up OpenTelemetry tracing and metrics exporters for Azure Monitor with service resource configuration\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nSdk.CreateTracerProviderBuilder()\n    .ConfigureResource(ConfigureResource)\n    .AddSource(DiagnosticHeaders.DefaultListenerName)\n    .AddAzureMonitorTraceExporter(\n    {\n        o.ConnectionString = \"<Your Connection String>\";\n    })\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Consumer Definition Example\nDESCRIPTION: This snippet provides an example of a consumer definition in MassTransit, which allows configuring aspects like endpoint name and concurrency limits for a specific consumer in a highly reusable format.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmitOrderConsumerDefinition :\n    ConsumerDefinition<SubmitOrderConsumer>\n{\n    public SubmitOrderConsumerDefinition()\n    {\n        EndpointName = \"ha-submit-order\";\n        ConcurrentMessageLimit = 4;\n    }\n\n    protected override void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator,\n        IConsumerConfigurator<DiscoveryPingConsumer> consumerConfigurator)\n    {\n        endpointConfigurator.UseMessageRetry(r => r.Interval(5, 1000));\n        endpointConfigurator.UseInMemoryOutbox();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Order State Machine with SubmitOrder Event (C#)\nDESCRIPTION: This snippet illustrates how to handle the SubmitOrder event within the Initial state of a saga state machine, resulting in a new saga instance creation and setting properties based on the incoming message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n\n    public Event<SubmitOrder> SubmitOrder { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .Then(context => \n                {\n                    context.Saga.CustomerNumber = context.Message.CustomerNumber;\n                })\n                .TransitionTo(Submitted)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Bus Instance Configuration in MassTransit C#\nDESCRIPTION: The snippet introduces advanced bus type configuration by defining `IThirdBus` and `ThirdBus`, allowing for custom bus instances with additional services. It demonstrates injecting `IBusControl` for bus operation management, which is compelled to align with the base class requirements and dependency injection principles.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/multibus.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IThirdBus :\n    IBus\n{\n}\n\nclass ThirdBus :\n    BusInstance<IThirdBus>,\n    IThirdBus\n{\n    public ThirdBus(IBusControl busControl, ISomeService someService)\n        : base(busControl)\n    {\n        SomeService = someService;\n    }\n\n    public ISomeService SomeService { get; }\n}\n\npublic interface ISomeService\n{\n}\n\nservices.AddMassTransit<IThirdBus>(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.Host(\"third-host\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Saga with Additional Middleware - C#\nDESCRIPTION: This code snippet illustrates how to configure a saga on a receive endpoint with additional saga-specific middleware using a lambda expression. This method allows for the application of custom middleware logic specific to the saga. Its prerequisite is the MassTransit library and the saga class definition.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/0.overview.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nConfigureSaga<T>(context, saga => \n{\n    // configure saga-specific middleware\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling and Canceling Recurring Messages in MassTransit\nDESCRIPTION: This snippet demonstrates how to schedule and cancel recurring messages using IRecurringMessageScheduler. It shows scheduling a recurring send operation and how to cancel it later.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar scheduler = scope.ServiceProvider.GetService<IRecurringMessageScheduler>();\n\nvar message = await scheduler.ScheduleRecurringSend(\n    InputQueueAddress, new PollExternalSystemSchedule(), new PollExternalSystem());\n\nawait scheduler.CancelScheduledRecurringMessage(\"PollExternalSystem\", null);\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Saga Repository with Marten Provider\nDESCRIPTION: Example showing how to override the repository configuration for a specific saga type when using the global Marten repository provider. This allows customizing repository settings for individual sagas.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.SetMartenSagaRepositoryProvider();\n\n    var entryAssembly = System.Reflection.Assembly.GetEntryAssembly();\n    \n    x.AddSagaStateMachines(entryAssembly);\n    \n    x.AddSagaRepository<OrderState>()\n        .MartenRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Partitioner in MassTransit (C#)\nDESCRIPTION: Example showing how to limit concurrent message consumption by partition key on a bus instance using the partitioner filter. This requires specifying a partition key provider for each message type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/1.filters.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar partition = new Partitioner(16, new Murmur3UnsafeHashGenerator());\n\ne.UsePartitioner<JobSubmitted>(partition, p => p.Message.JobId);\ne.UsePartitioner<JobSlotAllocated>(partition, p => p.Message.JobId);\n\ne.UsePartitioner<JobSlotUnavailable>(partition, p => p.Message.JobId);\ne.UsePartitioner<Fault<AllocateJobSlot>>(partition, p => p.Message.Message.JobId);\n\ne.UsePartitioner<JobAttemptCreated>(partition, p => p.Message.JobId);\ne.UsePartitioner<Fault<StartJobAttempt>>(partition, p => p.Message.Message.JobId);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint with Message Session\nDESCRIPTION: Shows how to configure a receive endpoint to require a message session and configure a saga, enabling session-based message processing and state management.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-service-bus.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nsbc.ReceiveEndpoint(\"order-state\", ep =>\n{\n    ep.RequiresSession = true;\n    ep.ConfigureSaga<OrderState>(provider);\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying MassTransit Topology Using IBusControl\nDESCRIPTION: Shows how to use IBusControl to deploy the configured topology with a timeout. Includes error handling and deployment confirmation logging.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/deploy.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar busControl = provider.GetRequiredService<IBusControl>();\n\ntry\n{\n    using var source = new CancellationTokenSource(TimeSpan.FromMinutes(2));\n    \n    await busControl.DeployAsync(source.Token);\n\n    Console.WriteLine(\"Topology Deployed\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(\"Failed to deploy topology: {0}\", ex);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Message Scheduler in MassTransit with PostgreSQL\nDESCRIPTION: This snippet shows how to configure MassTransit to use SQL message scheduler with PostgreSQL. It adds the SQL message scheduler and configures it for use with PostgreSQL.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSqlMessageScheduler();\n\n    x.UsingPostgres((context, cfg) =>\n    {\n        cfg.UseSqlMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: AmazonMQ RabbitMQ Configuration\nDESCRIPTION: Demonstrates how to configure MassTransit with AmazonMQ RabbitMQ using AMQPS endpoint, username, and password\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.Host(new Uri(\"amqps://b-12345678-1234-1234-1234-123456789012.mq.us-east-2.amazonaws.com:5671\"), h =>\n        {\n            h.Username(\"username\");\n            h.Password(\"password\");\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fault Handling in State Machines\nDESCRIPTION: Shows how to configure fault handling within a state machine by correlating fault messages with original message identifiers\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nEvent(() => SubmitOrderFaulted, x => x\n    .CorrelateById(m => m.Message.Message.OrderId)\n    .SelectId(m => m.Message.Message.OrderId));\n\npublic Event<Fault<SubmitOrder>> SubmitOrderFaulted { get; private set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Saga Repository in MassTransit using C#\nDESCRIPTION: Shows how to configure MongoDB as a saga repository using the AddMassTransit container extension. It sets up a connection to a local MongoDB instance and specifies the database name.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/mongodb.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .MongoDbRepository(r =>\n        {\n            r.Connection = \"mongodb://127.0.0.1\";\n            r.DatabaseName = \"orderdb\";\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State with Additional Correlation Property\nDESCRIPTION: Extended saga state class that includes an additional OrderNumber property that can be used for correlation and indexing to improve query performance when looking up sagas by OrderNumber.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public string OrderNumber { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending OrderSaga to Handle OrderAccepted Event in MassTransit C#\nDESCRIPTION: This snippet extends the 'OrderSaga' to include the handling of 'OrderAccepted' events, allowing the saga to manage its state based on the acceptance event.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/1.consumer-sagas.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderAccepted :\n    CorrelatedBy<Guid>\n{\n    public Guid CorrelationId { get; init; }\n    public DateTime Timestamp { get; init; }\n}\n\npublic class OrderSaga :\n    ISaga,\n    InitiatedBy<SubmitOrder>,\n    Orchestrates<OrderAccepted>,\n{\n    public Guid CorrelationId { get; set; }\n\n    public DateTime? SubmitDate { get; set; }\n    public DateTime? AcceptDate { get; set; }\n\n    public async Task Consume(ConsumeContext<SubmitOrder> context) {...}\n\n    public async Task Consume(ConsumeContext<OrderAccepted> context)\n    {\n        AcceptDate = context.Message.Timestamp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Entity Name Formatter in MassTransit Configuration\nDESCRIPTION: This snippet demonstrates how to apply a custom entity name formatter to the entire message topology in MassTransit. It replaces the default formatter with a custom implementation.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.MessageTopology.SetEntityNameFormatter(new FancyNameFormatter());\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Order Cancellation Interfaces and State Machine\nDESCRIPTION: This snippet defines interfaces for handling order cancellation requests and responses. It also implements a state machine for managing the order cancellation lifecycle using MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface RequestOrderCancellation\n{    \n    Guid OrderId { get; }\n}\n\npublic interface OrderCanceled\n{\n    Guid OrderId { get; }\n}\n\npublic interface OrderNotFound\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderCancellationRequested, e =>\n        {\n            e.CorrelateById(context => context.Message.OrderId);\n\n            e.OnMissingInstance(m =>\n            {\n                return m.ExecuteAsync(x => x.RespondAsync<OrderNotFound>(new { x.OrderId }));\n            });\n        });\n\n        DuringAny(\n            When(OrderCancellationRequested)\n                .RespondAsync(context => context.Init<OrderCanceled>(new { OrderId = context.Saga.CorrelationId }))\n                .TransitionTo(Canceled));\n    }\n\n    public State Canceled { get; private set; }\n    public Event<RequestOrderCancellation> OrderCancellationRequested { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Consumer in C#\nDESCRIPTION: This code shows how to add a consumer to MassTransit using the `AddConsumer` method and configure endpoints using the `ConfigureEndpoints` method. It configures the consumer to use the InMemory transport.  It requires MassTransit and dependency injection to be set up.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/2.consumers.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>();\n\n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Request Configurations with Service Address and Async Message Factory\nDESCRIPTION: Demonstrates advanced request configuration techniques, including specifying service addresses and creating request messages asynchronously\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/3.requests.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n.Request(ValidateOrder, serviceAddress, \n    context => new ValidateOrder(context.Saga.CorrelationId))\n\n.Request(ValidateOrder, context => context.Saga.ServiceAddress, \n    context => new ValidateOrder(context.Saga.CorrelationId))\n\n.Request(ValidateOrder,  \n    async context => new ValidateOrder(context.Saga.CorrelationId))\n\n.Request(ValidateOrder, async context => \n{\n    await Task.Delay(1); // some async method \n    return new ValidateOrder();\n});\n```\n\n----------------------------------------\n\nTITLE: CloudAMQP RabbitMQ Configuration with SSL\nDESCRIPTION: Shows how to configure MassTransit with CloudAMQP, specifying host, virtual host, username, password, and SSL protocol\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.Host(\"wombat.rmq.cloudamqp.com\", 5671, \"your_vhost\", h =>\n        {\n            h.Username(\"your_vhost\");\n            h.Password(\"your_password\");\n\n            h.UseSsl(s =>\n            {\n                s.Protocol = SslProtocols.Tls12;\n            });\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Message Contract with MessageData Property\nDESCRIPTION: Demonstrates how to define a message interface with a MessageData property for storing large byte array data\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IndexDocumentContent\n{\n    Guid DocumentId { get; }\n    MessageData<byte[]> Document { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Event Type (C#)\nDESCRIPTION: This snippet defines a custom event type, `OrderProcessingCompleted`, as a record with specific properties. This is used as the event type for a custom subscription.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// first, define the event type in your assembly\npublic record OrderProcessingCompleted\n{\n    public Guid TrackingNumber { get; init; }\n    public DateTime Timestamp { get; init; }\n\n    public string OrderId { get; init; }\n    public string OrderApproval { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NServiceBus Endpoint with RabbitMQ\nDESCRIPTION: This code configures an NServiceBus endpoint named \"Gateway.Producer\" to use the Newtonsoft JSON serializer and RabbitMQ transport. It also enables installers and sets up conventional routing topology with a connection string to a local RabbitMQ instance.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/nsb.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar endpointConfiguration = new EndpointConfiguration(\"Gateway.Producer\");\nendpointConfiguration.UseSerialization<NewtonsoftSerializer>();\nendpointConfiguration.EnableInstallers();\n\nvar transport = endpointConfiguration.UseTransport<RabbitMQTransport>();\ntransport.UseConventionalRoutingTopology();\ntransport.ConnectionString(\"host=localhost\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Transactional Enlistment Bus in C#\nDESCRIPTION: Describes how to add a transactional enlistment bus to a MassTransit configuration, ensuring that outgoing messages are deferred until their transaction is committed.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n    });\n\n    x.AddTransactionalEnlistmentBus();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Session Saga Repository without Container\nDESCRIPTION: Illustrates how to manually create a message session saga repository and configure a receive endpoint without using a dependency injection container.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-service-bus.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar sagaStateMachine = new OrderStateMachine();\nvar repository = MessageSessionSagaRepository.Create<OrderState>();\ncfg.ReceiveEndpoint(\"order-state\", ep =>\n{\n    ep.RequiresSession = true;\n    ep.StateMachineSaga(sagaStateMachine, repository);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics for ASP.NET Core Application - C#\nDESCRIPTION: This code snippet illustrates how to set up OpenTelemetry metrics collection in an ASP.NET Core application with MassTransit. It demonstrates adding a meter to collect metrics and exporting them via console exporter.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(ConfigureResource)\n    .WithMetrics(b => b\n        .AddMeter(InstrumentationOptions.MeterName) // MassTransit Meter\n        .AddConsoleExporter() // Any OTEL suportable exporter can be used here\n    );\n```\n\n----------------------------------------\n\nTITLE: Publishing an Event from a MassTransit Saga\nDESCRIPTION: This snippet shows how to publish an event from a MassTransit saga state machine using the Publish activity.  It creates a new OrderSubmittedEvent within the Publish activity, using the saga's CorrelationId as the OrderId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderSubmitted\n{\n    Guid OrderId { get; }    \n}\n\npublic class OrderSubmittedEvent :\n    OrderSubmitted\n{\n    public OrderSubmittedEvent(Guid orderId)\n    {\n        OrderId = orderId;\n    }\n\n    public Guid OrderId { get; }    \n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .Publish(context => (OrderSubmitted)new OrderSubmittedEvent(context.Saga.CorrelationId))\n                .TransitionTo(Submitted));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Service Bus Message Handler Function\nDESCRIPTION: Azure Function using MassTransit for handling Service Bus messages with a specific consumer, demonstrating message receiving and processing\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/21.azure-functions.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing MassTransit.WebJobs.ServiceBusIntegration;\nusing Microsoft.Azure.ServiceBus;\nusing Microsoft.Azure.WebJobs;\n\npublic class SubmitOrderFunctions\n{\n    const string SubmitOrderQueueName = \"input-queue\";\n    readonly IMessageReceiver _receiver;\n\n    public SubmitOrderFunctions(IMessageReceiver receiver)\n    {\n        _receiver = receiver;\n    }\n\n    [FunctionName(\"SubmitOrder\")]\n    public Task SubmitOrderAsync([ServiceBusTrigger(SubmitOrderQueueName)]\n        Message message, CancellationToken cancellationToken)\n    {\n        return _receiver.HandleConsumer<SubmitOrderConsumer>(SubmitOrderQueueName, message, cancellationToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Scheduled Order Completion Events\nDESCRIPTION: This snippet provides the implementation for consuming scheduled events related to order completion, handling the received event, and finalizing the order state based on the scheduled timeout.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderCompleted\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        During(Accepted,\n            When(OrderCompletionTimeout.Received)\n                .PublishAsync(context => context.Init<OrderCompleted>(new { OrderId = context.Saga.CorrelationId }))\n                .Finalize());\n    }\n\n    public Schedule<OrderState, OrderCompletionTimeoutExpired> OrderCompletionTimeout { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Saga Configuration with Partitioned Receive Mode\nDESCRIPTION: Demonstrates configuring job saga state machines with partitioned receive mode and partition key formatters in a MassTransit setup\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSqlMessageScheduler();\n\n    x.AddJobSagaStateMachines()\n        .SetPartitionedReceiveMode()\n        .EntityFrameworkRepository(r =>\n        {\n            r.ExistingDbContext<JobServiceSagaDbContext>();\n            r.UsePostgres();\n        });\n    \n    x.UsingPostgres((context, cfg) =>\n    {\n        cfg.UseSqlMessageScheduler();\n        cfg.UseJobSagaPartitionKeyFormatters();\n    \n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Missing Instance Event Handling\nDESCRIPTION: Shows how to configure custom behavior when an event is received for a non-existent state machine instance\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderCancellationRequested, e =>\n        {\n            e.CorrelateById(context => context.Message.OrderId);\n\n            e.OnMissingInstance(m =>\n            {\n                return m.ExecuteAsync(x => x.RespondAsync<OrderNotFound>(new { x.OrderId }));\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Concurrent Requests with IRequestClient in C#\nDESCRIPTION: Illustrates handling multiple requests concurrently using MassTransit's IRequestClient. This pattern improves response time when dealing with multiple asynchronous requests. Dependencies include MassTransit and C# Async/Await.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequestController(IRequestClient<RequestA> clientA, IRequestClient<RequestB> clientB)\n    : Controller\n{\n    public async Task<ActionResult> Get()\n    {\n        var resultA = clientA.GetResponse(new RequestA());\n        var resultB = clientB.GetResponse(new RequestB());\n\n        await Task.WhenAll(resultA, resultB);\n\n        var a = await resultA;\n        var b = await resultB;\n\n        var model = new Model(a.Message, b.Message);\n\n        return View(model);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Saga Definition with Explicit Subscription (MassTransit, C#)\nDESCRIPTION: This snippet shows how to add a saga definition for the saga and explicitly subscribe to the event type using `Subscribe`. It configures the subscription with a rule that filters messages based on the `ClientId` property using a `SqlRuleFilter` to only receive messages where `ClientId = 47`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FilteredSagaDefinition :\n    SagaDefinition<FilteredSaga>\n{\n    protected virtual void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator, \n        ISagaConfigurator<FilteredSaga> sagaConfigurator)\n    {\n        if(endpointConfigurator is IServiceBusReceiveEndpointConfigurator sb)\n        {\n            sb.Subscribe<Filtered>(\"subscription-name\", x =>\n            {\n                x.Rule = new CreateRuleOptions(\"Only47\", new SqlRuleFilter(\"ClientId = 47\"));\n            });\n        }\n    }\n}    \n```\n\n----------------------------------------\n\nTITLE: Extended Consumer with Shipped Order Check\nDESCRIPTION: An extended consumer handling `CancelOrder` requests, checks if the order is shipped. It accommodates additional response types and handles exceptions when unsupported types are not found. It is built on MassTransit with dependencies on repository and order objects.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Consume(ConsumeContext<CancelOrder> context)\n{\n    var order = _repository.Load(context.Message.OrderId);\n    if(order == null)\n    {\n        await context.ResponseAsync<OrderNotFound>(new { context.Message.OrderId });\n        return;\n    }\n\n    if(order.HasShipped)\n    {\n        if (context.IsResponseAccepted<OrderAlreadyShipped>())\n        {\n            await context.RespondAsync<OrderAlreadyShipped>(new { context.Message.OrderId, order.ShipDate });\n            return;\n        }\n        else\n            throw new InvalidOperationException(\"The order has already shipped\"); // to throw a RequestFaultException in the client\n    }\n\n    order.Cancel();\n\n    await context.RespondAsync<OrderCanceled>(new { context.Message.OrderId });\n}\n```\n\n----------------------------------------\n\nTITLE: Using ConfigureConsumeTopology Attribute to Control Exchange/Topic Creation in MassTransit\nDESCRIPTION: This snippet demonstrates the ConfigureConsumeTopology attribute that controls whether a topic or exchange for a message type should be created and subscribed to when consumed on a receive endpoint.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ConfigureConsumeTopology(false)]\npublic record DeleteRecord\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Data Inline Threshold\nDESCRIPTION: Demonstrates how to configure message data threshold and storage behavior\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMessageDataDefaults.Threshold = 8192;\nMessageDataDefaults.AlwaysWriteToRepository = false;\n```\n\n----------------------------------------\n\nTITLE: Binding an Exchange to a Receive Endpoint in C#\nDESCRIPTION: This snippet illustrates how to bind an exchange to a receive endpoint using MassTransit, managing the relationship between the exchange and the queue.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", e =>\n{\n    e.Bind(\"exchange-name\");\n    e.Bind<MessageType>();\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumers for Message Contracts in C#\nDESCRIPTION: Defines a series of consumer classes (`ProcessFileConsumer`, `FileReceivedConsumer`, `CustomerAuditConsumer`) that implement the `IConsumer` interface for the respective contracts `ProcessFile` and `FileReceivedEvent`. These consumers are intended to handle incoming messages and perform appropriate actions based on the contract type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/4.amazon-sqs.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclass ProcessFileConsumer :\n    IConsumer<ProcessFile>\n{\n}\n\nclass FileReceivedConsumer :\n    IConsumer<FileReceivedEvent>\n{\n}\n\nclass CustomerAuditConsumer :\n    IConsumer<FileReceivedEvent>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing an Event using Message Initializer in MassTransit Saga\nDESCRIPTION: This snippet demonstrates how to publish an event from a MassTransit saga state machine using a message initializer, eliminating the need for a separate event class.  It uses `context.Init<OrderSubmitted>` to create the event with OrderId from the saga's CorrelationId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderSubmitted\n{\n    Guid OrderId { get; }    \n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .PublishAsync(context => context.Init<OrderSubmitted>(new { OrderId = context.Saga.CorrelationId }))\n                .TransitionTo(Submitted));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware Filters - C#\nDESCRIPTION: This snippet shows how to create a middleware filter in the MassTransit mediator pipeline. The 'ValidateOrderStatusFilter' checks for valid order IDs before passing the message to the next component in the pipeline.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ValidateOrderStatusFilter<T> :\n    IFilter<SendContext<T>>\n    where T : class\n{\n    public void Probe(ProbeContext context)\n    {\n    }\n\n    public Task Send(SendContext<T> context, IPipe<SendContext<T>> next)\n    {\n        if (context.Message is GetOrderStatus getOrderStatus && getOrderStatus.OrderId == Guid.Empty)\n            throw new ArgumentException(\"The OrderId must not be empty\");\n\n        return next.Send(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to a SignalR Group Excluding Connections\nDESCRIPTION: This code snippet shows how to publish a message to a specific group in a SignalR hub, while excluding certain connection IDs.  It creates a `Group<THub>` message, specifying the group name and an array of connection IDs to exclude from receiving the message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/1.signalr.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait busControl.Publish<Group<ChatHub>>(new\n{\n\tGroupName = \"ServiceDeskEmployees\",\n\tExcludedConnectionIds = new [] { \"11b9c749-69a2-4f3e-8a8b-968122156220\", \"1737778b-c836-4023-a255-51c2e4898c43\" },\n    Messages = protocols.ToProtocolDictionary(\"broadcastMessage\", new object[] { \"backend-process\", \"Hello\" })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SubmitOrder Consumer and Consumer Definition\nDESCRIPTION: Defines a consumer for processing order submissions with logging and event publishing, including a custom consumer definition with endpoint and retry configuration\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nclass SubmitOrderConsumer :\n    IConsumer<SubmitOrder>\n{\n    readonly ILogger<SubmitOrderConsumer> _logger;\n\n    public SubmitOrderConsumer(ILogger<SubmitOrderConsumer> logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task Consume(ConsumeContext<SubmitOrder> context)\n    {\n        _logger.LogInformation(\"Order Submitted: {OrderId}\", context.Message.OrderId);\n\n        await context.Publish<OrderSubmitted>(new\n        {\n            context.Message.OrderId\n        });\n    }\n}\n\nclass SubmitOrderConsumerDefinition :\n    ConsumerDefinition<SubmitOrderConsumer>\n{\n    public SubmitOrderConsumerDefinition()\n    {\n        EndpointName = \"order-service\";\n        ConcurrentMessageLimit = 8;\n    }\n\n    protected override void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator,\n        IConsumerConfigurator<SubmitOrderConsumer> consumerConfigurator, IRegistrationContext context)\n    {\n        endpointConfigurator.UseMessageRetry(r => r.Intervals(100,200,500,800,1000));\n        endpointConfigurator.UseInMemoryOutbox(context);\n    }\n```\n\n----------------------------------------\n\nTITLE: Receiving a BigMessage in C#\nDESCRIPTION: Provides configuration instructions for receiving BigMessage types using a specific endpoint, ensuring the integration with the MessageData repository for payload handling.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar busControl = MassTransit.Bus.Factory.CreateUsingInMemory(cfg =>\n{\n    cfg.ReceiveEndpoint(\"my_awesome_endpoint\", ep =>\n    {\n        // Normal Receive Endpoint Config...\n\n        ep.UseMessageData<BigMessage>(repository);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Exception Logger Filter Implementation\nDESCRIPTION: Comprehensive middleware filter for logging exceptions during message processing with stateful tracking\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExceptionLoggerFilter<T> :\n    IFilter<T>\n    where T : class, PipeContext\n{\n    public async Task Send(T context, IPipe<T> next)\n    {\n        try\n        {\n            await next.Send(context);\n        }\n        catch (Exception ex)\n        {\n            await Console.Out.WriteLineAsync($\"An exception occurred: {ex.Message}\");\n            throw;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Response Types in Request\nDESCRIPTION: Demonstrates how to declare a request with multiple potential response types, including primary and secondary response messages\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/3.requests.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Request<OrderState, ValidateOrder, OrderValidated, OrderNotValid> \n        ValidateOrder { get; private set; } = null!;\n    \n    public OrderStateMachine()\n    {\n        Request(() => ValidateOrder, o =>\n        {\n            o.Timeout = TimeSpan.FromMinutes(30);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs with Specific JobId in MassTransit .NET\nDESCRIPTION: This snippet shows how to submit a job with a specified JobId using IRequestClient<SubmitJob<TJob>>. It requires MassTransit set up in a .NET environment. The client sets a jobId, which the method then uses to submit the job, and outputs a JSON object containing the jobId and path.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost(\"{path}\")]\npublic async Task<IActionResult> SubmitJob(string path, [FromServices] IRequestClient<SubmitJob<ConvertVideo>> client)\n{\n    var jobId = NewId.NextGuid();\n        \n    await client.SubmitJob(jobId, new ConvertVideo\n    {\n        Path = path\n    });\n\n    return Ok(new\n    {\n        jobId,\n        path\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Definition for MongoDB Outbox\nDESCRIPTION: This snippet provides the configuration for a consumer definition to use the MongoDB outbox, including message retry configurations.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ValidateRegistrationConsumerDefinition :\n    ConsumerDefinition<ValidateRegistrationConsumer>\n{\n    protected override void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator,\n        IConsumerConfigurator<ValidateRegistrationConsumer> consumerConfigurator, IRegistrationContext context)\n    {\n        endpointConfigurator.UseMessageRetry(r => r.Intervals(10, 50, 100, 1000, 1000, 1000, 1000, 1000));\n\n        endpointConfigurator.UseMongoDbOutbox(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Queue Subscription in SQL\nDESCRIPTION: The function `create_queue_subscription` sets up a subscription from a topic to a queue. It is adaptable with routing and filtering options based on the provided parameters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate_queue_subscription(source_topic_name text, \n                          destination_queue_name text, \n                          type integer,\n                          routing_key text DEFAULT '',\n                          filter jsonb DEFAULT '{{}}')\n```\n\n----------------------------------------\n\nTITLE: Setting Headers with Message Initializers in MassTransit\nDESCRIPTION: Demonstrates how to set headers using message initializers with the special __Header_ prefix naming convention, which allows setting headers directly in the anonymous object used to initialize the message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.GetResponse<OrderStatusResult>(new \n{ \n    orderId,\n    __Header_Tenant_Id = \"some-value\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Scope with InMemoryOutbox for Scoped Filters\nDESCRIPTION: Configuration example showing the correct order of middleware components when using scoped filters with the InMemoryOutbox. This setup is essential to maintain the container scope for delayed publishing/sending operations.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", e =>\n{\n    e.UseMessageRetry(r => r.Intervals(100, 500, 1000, 2000));\n    e.UseMessageScope(context);\n    e.UseInMemoryOutbox();\n\n    e.UseConsumeFilter(typeof(MyConsumeFilter<>), context);\n    e.ConfigureConsumer<MyConsumer>(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Order Completion Timeout in State Machine\nDESCRIPTION: The snippet demonstrates how to set up event scheduling in a MassTransit state machine to handle order completion timeouts. It includes defining the scheduled event and managing the state associated with it.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderCompletionTimeoutExpired\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public Guid? OrderCompletionTimeoutTokenId { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Schedule(() => OrderCompletionTimeout, instance => instance.OrderCompletionTimeoutTokenId, s =>\n        {\n            s.Delay = TimeSpan.FromDays(30);\n\n            s.Received = r => r.CorrelateById(context => context.Message.OrderId);\n        });\n    }\n\n    public Schedule<OrderState, OrderCompletionTimeoutExpired> OrderCompletionTimeout { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Explicit Activity Arguments to Routing Slip\nDESCRIPTION: This C# snippet demonstrates how to add an activity with an explicit argument using the `RoutingSlipBuilder`. The `AddActivity` method is called with the activity name, execution address, and an anonymous object containing the argument, `ImageUri` in this case.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddActivity(\"DownloadImage\", new Uri(\"rabbitmq://localhost/execute_downloadimage\"), new\n    {\n        ImageUri = new Uri(\"http://images.google.com/someImage.jpg\")\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Topology for Message Routing in C#\nDESCRIPTION: This code configures global topology settings for message routing using MassTransit, allowing for conventions on routing key formatting and consumer setup.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalTopology.Send.TryAddConvention(new RoutingKeySendTopologyConvention());\n\nGlobalTopology.Send.UseRoutingKeyFormatter<ICanHasRoutingKey>(x => x.Message.RoutingKey.ToString());\n```\n\n----------------------------------------\n\nTITLE: Example JSON Message Envelope\nDESCRIPTION: This JSON structure represents a typical message envelope encapsulated by MassTransit. It includes relevant metadata about the message, such as IDs and addresses for message tracking.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messageId\": \"181c0000-6393-3630-36a4-08daf4e7c6da\",\n    \"requestId\": \"ef375b18-69ee-4a9e-b5ec-44ee1177a27e\",\n    \"correlationId\": null,\n    \"conversationId\": null,\n    \"initiatorId\": null,\n    \"sourceAddress\": \"rabbitmq://localhost/source\",\n    \"destinationAddress\": \"rabbitmq://localhost/destination\",\n    \"responseAddress\": \"rabbitmq://localhost/response\",\n    \"faultAddress\": \"rabbitmq://localhost/fault\",\n    \"messageType\": [\n        \"urn:message:Company.Project:SubmitOrder\"\n    ],\n    \"message\": {\n        \"orderId\": \"181c0000-6393-3630-36a4-08daf4e7c6da\",\n        \"timestamp\": \"2023-01-12T21:55:53.714Z\"\n    },\n    \"expirationTime\": null,\n    \"sentTime\": \"2023-01-12T21:55:53.715882Z\",\n    \"headers\": {\n        \"Application-Header\": \"SomeValue\"\n    },\n    \"host\": {\n        \"machineName\": \"MyComputer\",\n        \"processName\": \"dotnet\",\n        \"processId\": 427,\n        \"assembly\": \"TestProject\",\n        \"assemblyVersion\": \"2.11.1.93\",\n        \"frameworkVersion\": \"6.0.7\",\n        \"massTransitVersion\": \"8.0.10.0\",\n        \"operatingSystemVersion\": \"Unix 12.6.2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Revising Routing Slip Itinerary in C#\nDESCRIPTION: Demonstrates dynamically modifying the routing slip's activities during execution, adding or rearranging activities\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> execution)\n{\n    DownloadImageArguments args = execution.Arguments;\n    string imageSavePath = Path.Combine(args.WorkPath, \n        execution.TrackingNumber.ToString());\n\n    await _httpClient.GetAndSave(args.ImageUri, imageSavePath);\n\n    return execution.ReviseItinerary(builder => \n    {\n        builder.AddActivity(\"Deviation\", new Uri($\"exchange:{optionalAddress}\"));\n        builder.AddActivitiesFromSourceItinerary();\n        builder.AddActivity(\"Deviation\", new Uri($\"exchange:{optionalAddress}\"));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with PostgreSQL\nDESCRIPTION: This code snippet demonstrates how to configure MassTransit to use PostgreSQL as the message transport. It sets up a message scheduler and configures endpoints within the service collection.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSqlMessageScheduler();\n    \n    x.UsingPostgres((context, cfg) =>\n    {\n        cfg.UseSqlMessageScheduler();\n        \n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Message Consumers in C#\nDESCRIPTION: These C# classes define consumers for the `FileReceived`, `CustomerDataReceived`, and `ProcessFile` message contracts. Each consumer implements the `IConsumer<T>` interface, where `T` is the message contract. These consumers handle incoming messages of their respective types.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nclass FileReceivedConsumer :\n    IConsumer<FileReceived>\n{\n}\n\nclass CustomerAuditConsumer :\n    IConsumer<CustomerDataReceived>\n{\n}\n\nclass ProcessFileConsumer :\n    IConsumer<ProcessFile>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Recurring Job with Cron Expression in MassTransit\nDESCRIPTION: This code snippet demonstrates how to schedule a recurring job using MassTransit's `AddOrUpdateRecurringJob` method. It uses a cron expression to define the schedule for the `RoutineMaintenanceCommand`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic async Task ConfigureRecurringJobs(IPublishEndpoint endpoint)\n{\n    await endpoint.AddOrUpdateRecurringJob(\"RoutineMaintenance\",\n        new RoutineMaintenanceCommand(), \"0 0,15,30,45 * * * 1,3,5\");\n}\n\npublic record RoutingMaintenanceCommand;\n```\n```\n\n----------------------------------------\n\nTITLE: Handling a Message in NServiceBus\nDESCRIPTION: This code defines an NServiceBus message handler for the `ClockSynchronized` message.  It logs the host information contained in the message upon receipt, demonstrating how NServiceBus consumes messages published by MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/nsb.md#2025-04-18_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ClockSynchronizedHandler :\n    IHandleMessages<ClockSynchronized>\n{\n    readonly ILogger<ClockSynchronizedHandler> _logger;\n\n    public ClockSynchronizedHandler(ILogger<ClockSynchronizedHandler> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task Handle(ClockSynchronized message, IMessageHandlerContext context)\n    {\n        _logger.LogInformation(\"Clock synchronized: {Host}\", message.Host);\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Consume Topology Configuration\nDESCRIPTION: Prevents MassTransit from creating exchanges or topics for message types consumed on the endpoint, useful for reducing infrastructure overhead.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nendpointConfigurator.ConfigureConsumeTopology = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Outbox on Receive Endpoint\nDESCRIPTION: This snippet illustrates the configuration of the outbox on a receive endpoint using a SagaDefinition for MassTransit, including the setup of message retry intervals and the use of Entity Framework outbox.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RegistrationStateDefinition :\n    SagaDefinition<RegistrationState>\n{\n    protected override void ConfigureSaga(IReceiveEndpointConfigurator endpointConfigurator,\n        ISagaConfigurator<RegistrationState> consumerConfigurator, IRegistrationContext context)\n    {\n        endpointConfigurator.UseMessageRetry(r => r.Intervals(100, 500, 1000, 1000, 1000, 1000, 1000));\n\n        endpointConfigurator.UseEntityFrameworkOutbox<RegistrationDbContext>(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OrderPaymentSaga for OrderInvoiced Event in MassTransit C#\nDESCRIPTION: This snippet introduces the 'OrderPaymentSaga' which can initiate or orchestrate events based on 'OrderInvoiced'. It manages invoice details and amounts.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/1.consumer-sagas.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderInvoiced :\n    CorrelatedBy<Guid>\n{\n    public Guid CorrelationId { get; init; }\n    public DateTime Timestamp { get; init; }\n    public decimal Amount { get; init; }\n}\n\npublic class OrderPaymentSaga :\n    ISaga,\n    InitiatedByOrOrchestrates<OrderInvoiced>\n{\n    public Guid CorrelationId { get; set; }\n\n    public DateTime? InvoiceDate { get; set; }\n    public decimal? Amount { get; set; }\n\n    public async Task Consume(ConsumeContext<OrderInvoiced> context)\n    {\n        InvoiceDate = context.Message.Timestamp;\n        Amount = context.Message.Amount;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Machine Behavior for Order Processing in C#\nDESCRIPTION: This snippet demonstrates how to configure the behavior of the order processing state machine. It shows how to initiate the request, handle its completion, fault, and timeout scenarios.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        During(Submitted,\n            When(OrderAccepted)\n                .Request(ProcessOrder, x => x.Init<ProcessOrder>(new { OrderId = x.Saga.CorrelationId}))\n                .TransitionTo(ProcessOrder.Pending));\n\n        During(ProcessOrder.Pending,\n            When(ProcessOrder.Completed)\n                .Then(context => context.Saga.ProcessingId = context.Message.ProcessingId)\n                .TransitionTo(Processed),\n            When(ProcessOrder.Faulted)\n                .TransitionTo(ProcessFaulted),\n            When(ProcessOrder.TimeoutExpired)\n                .TransitionTo(ProcessTimeoutExpired));\n    }\n\n    public State Processed { get; private set; }\n    public State ProcessFaulted { get; private set; }\n    public State ProcessTimeoutExpired { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Endpoint Name Formatter in MassTransit C#\nDESCRIPTION: This snippet shows how to configure MassTransit with a custom endpoint name formatter that uses kebab-case with an optional prefix. Customizing endpoint name formatting is beneficial when multiple developers share a single broker to ensure that endpoint names remain distinct.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nx.SetEndpointNameFormatter(new KebabCaseEndpointNameFormatter(prefix: \"Dev\", includeNamespace: false));\n```\n\n----------------------------------------\n\nTITLE: Registering MassTransit with Transactional Bus in ASP.NET Core\nDESCRIPTION: This snippet shows how to register the MassTransit library with RabbitMQ and add the transactional bus for handling messaging within an ASP.NET Core application.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingRabbitMq((context, cfg) =>\n    {\n    });\n\n    x.AddTransactionalBus();\n});\n```\n\n----------------------------------------\n\nTITLE: Ignore Event in Specific State\nDESCRIPTION: Shows how to ignore an event in a specific state to prevent fault generation or message routing to skipped queue\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Initially(\n            When(SubmitOrder)\n                .TransitionTo(Submitted),\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n\n        During(Submitted,\n            When(OrderAccepted)\n                .TransitionTo(Accepted));\n\n        During(Accepted,\n            Ignore(SubmitOrder));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Versioned Cosmos DB Saga State in C#\nDESCRIPTION: This snippet represents a versioned saga state class for Cosmos DB in C#. It uses JSON property attributes for integration with Cosmos DB, ensuring that both the document ID and ETag are properly managed.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-cosmos.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance,\n    IVersionedSaga\n{\n    [JsonProperty(\"id\")]\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n\n    [JsonProperty(\"_etag\")]\n    public string ETag { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bus with Message Data Repository\nDESCRIPTION: Shows how to create a bus configuration and set up a message data repository using RabbitMQ and an in-memory repository\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageDataRepository messageDataRepository = new InMemoryMessageDataRepository();\n\nvar busControl = Bus.Factory.CreateUsingRabbitMq(cfg =>\n{\n    cfg.UseMessageData(messageDataRepository);\n\n    cfg.ReceiveEndpoint(\"document-service\", e =>\n    {\n        e.Consumer<IndexDocumentConsumer>();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Azure Functions Startup\nDESCRIPTION: Startup class for Azure Functions that configures MassTransit, registers consumers, and adds scoped function dependencies using dependency injection\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/21.azure-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing MassTransit;\nusing Microsoft.Azure.Functions.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection;\n\n[assembly: FunctionsStartup(typeof(Sample.AzureFunctions.ServiceBus.Startup))]\n\nnamespace Sample.AzureFunctions.ServiceBus\n{\n    public class Startup :\n        FunctionsStartup\n    {\n        public override void Configure(IFunctionsHostBuilder builder)\n        {\n            builder.Services\n                .AddScoped<SubmitOrderFunctions>() // add your functions as scoped\n                .AddMassTransitForAzureFunctions(cfg =>\n                {\n                    cfg.AddConsumersFromNamespaceContaining<ConsumerNamespace>();\n                });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance State with Integer Values\nDESCRIPTION: This code snippet demonstrates how to configure the instance state with integer values. This is useful when the state needs to be represented as an integer, which can save space and improve performance. The `InstanceState` method is used to specify the property that stores the current state, along with the possible state values.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public int CurrentState { get; set; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        InstanceState(x => x.CurrentState, Submitted, Accepted);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Logger Middleware Configuration Extension Method\nDESCRIPTION: Extension method for configuring exception logging middleware in MassTransit message processing pipeline\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ExampleMiddlewareConfiguratorExtensions\n{\n    public static void UseExceptionLogger<T>(this IPipeConfigurator<T> configurator)\n        where T : class, PipeContext\n    {\n        configurator.AddPipeSpecification(new ExceptionLoggerSpecification<T>());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit to use NServiceBus JSON Serializer\nDESCRIPTION: This code configures MassTransit to use the NServiceBus JSON serializer when using RabbitMQ. It also configures the endpoints using the provided context, enabling MassTransit to interoperate with NServiceBus using a compatible serialization format.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/nsb.md#2025-04-18_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<TimeConsumer>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.UseNServiceBusJsonSerializer();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Consumer\nDESCRIPTION: This code snippet demonstrates how to add a basic consumer using MassTransit by calling the AddConsumer method. This approach allows for default configuration without additional parameters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAddConsumer<MyConsumer>();\nAddConsumer(typeof(MyConsumer));\n```\n\n----------------------------------------\n\nTITLE: Creating a Marker Hub for Backend Services\nDESCRIPTION: This code snippet illustrates how to create a marker hub in a backend service for publishing messages to SignalR clients without requiring the backend service to have knowledge of the hub's dependencies. This allows backend services to publish messages that are namespace-compliant, which are then picked up by the SignalR integration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/1.signalr.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace YourNamespace.Should.Match.The.Hubs\n{\n    public class ProductHub : Hub\n    {\n        // That's it, nothing more needed.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Routing Slip Without Argument and Adding Variable in Activity\nDESCRIPTION: This C# snippet shows how to build a routing slip without an `ImageUri` and then add the variable on completion of `DownloadImage`. This `ImageUri` can then be used by `ProcessImage` activity.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddActivity(\"DownloadImage\", new Uri(\"rabbitmq://localhost/execute_downloadimage\"));\nbuilder.AddActivity(\"ProcessImage\", new Uri(\"rabbitmq://localhost/execute_processimage\"));\nbuilder.AddVariable(\"ImageUri\", \"http://images.google.com/someImage.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a SimpleSaga in C#\nDESCRIPTION: Shows how to implement a SimpleSaga class that reacts to the InitiateSimpleSaga message. The saga class contains a consume method to handle incoming messages, requiring MassTransit and appropriate saga interfaces.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass SimpleSaga :\n        InitiatedBy<InitiateSimpleSaga>,\n        IVersionedSaga\n    {\n        public Guid CorrelationId { get; set; }\n\n        public int Version { get; set; }\n\n        public Task Consume(ConsumeContext<InitiateSimpleSaga> context)\n        {\n            //Do some cool stuff...\n            Console.WriteLine($\"{nameof(InitiateSimpleSaga)} consumed\");\n\n            return Task.FromResult(0);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using TransactionScope in MVC Action in C#\nDESCRIPTION: Demonstrates how to utilize TransactionScope within an MVC Action to manage database operations and publish an event. This implementation ensures that both operations are part of a transaction.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : ControllerBase\n{\n    private readonly IPublishEndpoint _publishEndpoint;\n    private readonly MyDbContext _dbContext;\n\n    public ValuesController(IPublishEndpoint publishEndpoint, MyDbContext dbContext)\n    {\n        _publishEndpoint = publishEndpoint;\n        _dbContext = dbContext;\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> Post([FromBody] string value)\n    {\n        using(var transaction = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))\n        {\n            _dbContext.Posts.Add(new Post{...});\n            await _dbContext.SaveChangesAsync();\n\n            await _publishEndpoint.Publish(new PostCreated{...});\n\n            transaction.Complete();\n        }\n\n        return Ok();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Order with Custom Fault Address in C#\nDESCRIPTION: Sends an order message using MassTransit, specifying a fault address in the context when sending the message. This allows for control over where faults are sent when exceptions occur.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task SendOrder(ISendEndpoint endpoint)\n{\n    await endpoint.Send<SubmitOrder>(new\n    {\n        OrderId = \"27\",\n        OrderDate = DateTime.UtcNow,\n        OrderAmount = 123.45m\n    }, context => context.FaultAddress = new Uri(\"rabbitmq://localhost/order_faults\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Metrics for Console Application - C#\nDESCRIPTION: This code snippet shows how to set up OpenTelemetry metrics in a Console application with MassTransit. It involves initializing the meter for collecting metrics and exporting the results.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nSdk.CreateTracerProviderBuilder()\n    .ConfigureResource(ConfigureResource)\n    .AddMeter(InstrumentationOptions.MeterName) // MassTransit Meter\n    .AddConsoleExporter() // Any OTEL suportable exporter can be used here\n    .Build()\n```\n\n----------------------------------------\n\nTITLE: Message Inheritance Example in C#\nDESCRIPTION: This example shows how message inheritance might be used but explains the consequences.  If you try and consume a `Batch<CoreEvent>` and expect to get a variety of types, one of which would be `SubmitOrder`. In OOP land, that makes all the sense in the world, but in MassTransit contract design it does not.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic record CoreEvent\n{\n\tpublic string User { get; init; }\n}\n\npublic record SubmitOrder :\n    CoreEvent\n{\n\tpublic string Sku { get; init; }\n\tpublic int Quantity { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rate Limiter in MassTransit (C#)\nDESCRIPTION: Example of configuring a rate limiter on a receive endpoint to restrict the number of messages processed within a time period. This limits processing to 1000 messages per 5 seconds.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/1.filters.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"customer_update_queue\", e =>\n{\n    e.UseRateLimit(1000, TimeSpan.FromSeconds(5));\n    // other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pipe with Context and Filters\nDESCRIPTION: Example of constructing a custom pipe with specific context and adding filters to the pipeline\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIPipe<CustomContext> pipe = Pipe.New<CustomContext>(x =>\n{   \n    x.UseFilter(new CustomFilter(...));\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring a SubmitOrder Event in MassTransitStateMachine (C#)\nDESCRIPTION: This snippet demonstrates how to declare an event in a saga state machine, specifically a SubmitOrder event, which is used to correlate to an instance based on the OrderId. The event utilizes the MassTransit library to manage state transitions.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record SubmitOrder(Guid OrderId);\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Event<SubmitOrder> SubmitOrder { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        Event(() => SubmitOrder,\n            e => e.CorrelateById(x => x.Message.OrderId)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Saga Instance with PostgreSQL RowVersion\nDESCRIPTION: This code snippet shows the original OrderState model, using a PostgreSQL RowVersion. It defines the RowVersion property as a `uint` instead of a `byte[]`, which will map to the `xmin` column in PostgreSQL.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n\n    // If using Optimistic concurrency, this property is required\n    public uint RowVersion { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MassTransit Activities\nDESCRIPTION: This code snippet demonstrates how to register MassTransit activities and execute-only activities within the `AddMassTransit` configuration using different `AddActivity` and `AddExecuteActivity` methods. It shows how to specify activity, arguments, and log types, as well as using activity definitions for configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/7.routing-slips/1.registration.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg => \n{\n    cfg.AddActivity<MyActivity, MyActivityArgs, MyActivityLog>();\n    cfg.AddActivity<MyActivity, MyActivityArgs, MyActivityLog>(typeof(MyActivityDefinition));\n    cfg.AddActivity(typeof(MyActivityDefinition));\n\n    // Execution Only Activities\n    cfg.AddExecuteActivity<MyExecuteActivity, MyExecuteActivityArgs>();\n    cfg.AddExecuteActivity(typeof(MyExecuteActivityDefinition));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Saga with Existing DbContext\nDESCRIPTION: This code snippet shows how to configure Job Saga repositories using an existing DbContext. It adds the `JobServiceSagaDbContext` to the container and then configures the saga repositories for `JobSaga`, `JobTypeSaga`, and `JobAttemptSaga` to use the existing DbContext and PostgreSQL.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddDbContext<JobServiceSagaDbContext>(builder =>\n    builder.UseNpgsql(Configuration.GetConnectionString(\"JobService\"), m =>\n    {\n        m.MigrationsAssembly(Assembly.GetExecutingAssembly().GetName().Name);\n        m.MigrationsHistoryTable($\"__{nameof(JobServiceSagaDbContext)}\");\n    }));\n\nservices.AddMassTransit(x =>\n{\n    x.AddSagaRepository<JobSaga>()\n        .EntityFrameworkRepository(r =>\n        {\n            r.ExistingDbContext<JobServiceSagaDbContext>();\n            r.UsePostgres();\n        });\n    x.AddSagaRepository<JobTypeSaga>()\n        .EntityFrameworkRepository(r =>\n        {\n            r.ExistingDbContext<JobServiceSagaDbContext>();\n            r.UsePostgres();\n        });\n    x.AddSagaRepository<JobAttemptSaga>()\n        .EntityFrameworkRepository(r =>\n        {\n            r.ExistingDbContext<JobServiceSagaDbContext>();\n            r.UsePostgres();\n        });\n\n    // other configuration, such as consumers, etc.\n});\n```\n\n----------------------------------------\n\nTITLE: ASP.NET Core Receive Endpoint Configuration\nDESCRIPTION: Demonstrates configuring a receive endpoint for a specific consumer directly in the MassTransit configuration using RabbitMQ transport\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<EventConsumer>();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ReceiveEndpoint(\"event-listener\", e =>\n        {\n            e.ConfigureConsumer<EventConsumer>(context);\n        });\n    });\n});\n\nclass EventConsumer :\n    IConsumer<ValueEntered>\n{\n    ILogger<EventConsumer> _logger;\n\n    public EventConsumer(ILogger<EventConsumer> logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task Consume(ConsumeContext<ValueEntered> context)\n    {\n        _logger.LogInformation(\"Value: {Value}\", context.Message.Value);\n    }\n```\n\n----------------------------------------\n\nTITLE: Completing Activity and Adding Variables\nDESCRIPTION: This C# snippet shows how to complete an activity using `CompletedWithVariables`. This allows you to add variables to the routing slip that can be used by subsequent activities.  In this case, `ImagePath` is added.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> context)\n{\n    ...\n    return context.CompletedWithVariables(new { ImagePath = ...});\n}\n```\n\n----------------------------------------\n\nTITLE: Telemetry Example JSON Report\nDESCRIPTION: A sample JSON report demonstrating the structure of collected usage telemetry data, including bus configuration, host details, and endpoint information\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/usage-telemetry.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"bd740008-ebb8-e450-a00a-08dd60e7bc9c\",\n  \"bus\": [\n    {\n      \"name\": \"IBus\",\n      \"created\": \"2025-03-11T16:57:37.4587070-05:00\",\n      \"started\": \"2025-03-11T16:57:37.9216500-05:00\",\n      \"endpoints\": [\n        {\n          \"name\": \"odd-job\",\n          \"type\": \"RabbitMQ\",\n          \"consumer_count\": 5,\n          \"prefetch_count\": 64,\n          \"job_consumer_count\": 1\n        },\n        {\n          \"name\": \"odd-job-completed\",\n          \"type\": \"RabbitMQ\",\n          \"consumer_count\": 1,\n          \"prefetch_count\": 1,\n          \"concurrent_message_limit\": 1\n        },\n        {\n          \"name\": \"job-type\",\n          \"type\": \"RabbitMQ\",\n          \"prefetch_count\": 64,\n          \"concurrent_message_limit\": 16,\n          \"saga_state_machine_count\": 1\n        },\n        {\n          \"name\": \"job\",\n          \"type\": \"RabbitMQ\",\n          \"prefetch_count\": 64,\n          \"concurrent_message_limit\": 16,\n          \"saga_state_machine_count\": 1\n        },\n        {\n          \"name\": \"job-attempt\",\n          \"type\": \"RabbitMQ\",\n          \"prefetch_count\": 64,\n          \"concurrent_message_limit\": 16,\n          \"saga_state_machine_count\": 1\n        }\n      ],\n      \"configured\": \"2025-03-11T16:57:37.8701060-05:00\"\n    }\n  ],\n  \"host\": {\n     \"commit_hash\": \"c0977e09482f7f5e3585c9a59e67941a89fd2963\",\n     \"time_zone_info\": \"(UTC-06:00) Central Time (Chicago)\",\n    \"framework_version\": \"9.0.0\",\n    \"mass_transit_version\": \"1.0.0.0\",\n    \"operating_system_version\": \"Unix 14.7.2\"\n  },\n  \"created\": \"2025-03-12T16:57:37.4572470-05:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Instances in Request-Response Scenarios in C#\nDESCRIPTION: This snippet shows how to configure handlers for scenarios where the saga instance is missing when receiving a response, fault, or timeout for a request. It demonstrates discarding these messages for all three cases.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nRequest(() => ProcessOrder, x => x.ProcessOrderRequestId, r =>\n{\n    r.Completed = m => m.OnMissingInstance(i => i.Discard());\n    r.Faulted = m => m.OnMissingInstance(i => i.Discard());\n    r.TimeoutExpired = m => m.OnMissingInstance(i => i.Discard());\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Background Worker Service - C#\nDESCRIPTION: This snippet contains the implementation of a background service that periodically publishes a GettingStarted message to the message bus.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace GettingStarted;\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Contracts;\nusing MassTransit;\nusing Microsoft.Extensions.Hosting;\n\npublic class Worker : BackgroundService\n{\n    readonly IBus _bus;\n\n    public Worker(IBus bus)\n    {\n        _bus = bus;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            await _bus.Publish(new GettingStarted { Value = $\"The time is {DateTimeOffset.Now}\" }, stoppingToken);\n\n            await Task.Delay(1000, stoppingToken);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Transport-Specific Topology in C#\nDESCRIPTION: This snippet demonstrates how to access transport-specific topology features using pattern matching on the IBus.Topology property. It checks if the topology is of type IServiceBusBusTopology for Azure Service Bus specific operations.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/0.index.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nif (bus.Topology is IServiceBusBusTopology serviceBusTopology)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PollExternalSystemSchedule and PollExternalSystem in C#\nDESCRIPTION: This code defines a recurring schedule for polling an external system. It sets up a schedule ID and a cron expression for running every minute.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PollExternalSystemSchedule : \n    DefaultRecurringSchedule\n{\n    public PollExternalSystemSchedule()\n    {\n        ScheduleId = \"PollExternalSystem\";\n        CronExpression = \"0 0/1 * 1/1 * ? *\"; // this means every minute\n    }\n}\n\npublic record PollExternalSystem;\n```\n\n----------------------------------------\n\nTITLE: Specifying MongoDB Collection Name for Saga Repository in C#\nDESCRIPTION: Demonstrates how to set a custom collection name for storing saga instances in MongoDB. This overrides the default naming convention.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/mongodb.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n.MongoDbRepository(r =>\n{\n    r.Connection = \"mongodb://127.0.0.1\";\n    r.DatabaseName = \"orderdb\";\n\n    r.CollectionName = \"orders\";\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MassTransit Templates for .NET\nDESCRIPTION: Command to install MassTransit templates into the dotnet new CLI. This enables access to all MassTransit project and component templates.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new install MassTransit.Templates\n```\n\n----------------------------------------\n\nTITLE: Defining Custom BsonClassMap for Saga in C#\nDESCRIPTION: Demonstrates how to create a custom BsonClassMap for a saga state class. This example shows how to set a custom serializer for a DateTime property to ensure UTC storage.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/mongodb.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass OrderStateClassMap :\n    BsonClassMap<OrderState>\n{\n    public OrderStateClassMap()\n    {\n        MapProperty(x => x.OrderDate)\n            .SetSerializer(new DateTimeSerializer(DateTimeKind.Utc));\n    }\n}\n\nservices.AddSingleton<BsonClassMap<OrderState>, OrderStateClassMap>();\n```\n\n----------------------------------------\n\nTITLE: Adding a Variable with RoutingSlipBuilder in C#\nDESCRIPTION: This code snippet demonstrates how to add a variable to a routing slip using the RoutingSlipBuilder. It initializes a builder with a unique tracking number, adds a variable with a key and value, and then builds the routing slip. Variables are shared across activities and can be used to pass data between them.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/7.routing-slips/2.routing_slip.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddVariable(\"Key\", \"Value\")\nvar slip = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Adding User-Defined Payloads to SendContext in C#\nDESCRIPTION: The third snippet showcases an example of adding a custom payload to a SendContext using the GetOrAddPayload method. It creates a new instance of SomePayload with an initial value and demonstrates context propagation down a pipeline. Dependencies include the defined class SomePayload and usage of GreenPipes' SendContext.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomePayload\n{\n    public int Value { get; set; }\n}\n\npublic async Task Send(SendContext context, IPipe<SendContext> next)\n{\n    var payload = context.GetOrAddPayload(() => new SomePayload{Value = 27});\n\n    return next.Send(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Saga State Machines with Existing DbContext\nDESCRIPTION: This code snippet shows how to configure Job Saga state machines using an existing DbContext. It uses the `AddJobSagaStateMachines` extension method and configures the Entity Framework repository to use the `JobServiceSagaDbContext` and PostgreSQL.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddJobSagaStateMachines()\n    .EntityFrameworkRepository(r =>\n    {\n        r.ExistingDbContext<JobServiceSagaDbContext>();\n        r.UsePostgres();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring a Routing Key for Messages in C#\nDESCRIPTION: This snippet showcases how to specify routing keys for published messages based on a property of the message, ensuring messages are routed correctly.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.Send<SubmitOrder>(x =>\n{\n    // use customerType for the routing key\n    x.UseRoutingKeyFormatter(context => context.Message.CustomerType);\n\n    // multiple conventions can be set, in this case also CorrelationId\n    x.UseCorrelationId(context => context.Message.TransactionId);\n});\n\n// Keeping in mind that the default exchange config for your published type will be the full typename of your message\n// we explicitly specify which exchange the message will be published to. So it lines up with the exchange we are binding our\n// consumers too.\ncfg.Message<SubmitOrder>(x => x.SetEntityName(\"submitorder\"));\n\n// Also if your publishing your message: because publishing a message will, by default, send it to a fanout queue.\n// We specify that we are sending it to a direct queue instead. In order for the routingkeys to take effect.\ncfg.Publish<SubmitOrder>(x => x.ExchangeType = ExchangeType.Direct);\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiBus Endpoints with a Custom Formatter in C#\nDESCRIPTION: This snippet illustrates how to configure MassTransit with multiple buses, each using a different endpoint name formatter. Customizing the formatter for each bus can help maintain clarity when managing message routing across complex infrastructures.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ConfigureEndpoints(context, new KebabCaseEndpointNameFormatter(prefix: \"Mobile\", includeNamespace: false));\n```\n\n----------------------------------------\n\nTITLE: Defining Consumers for FileReceived, CustomerDataReceived, and ProcessFile (C#)\nDESCRIPTION: These C# classes define consumers for the `FileReceived`, `CustomerDataReceived`, and `ProcessFile` messages.  Each class implements the `IConsumer<T>` interface, where `T` is the message type it consumes.  The actual consumption logic is not shown in this snippet.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\nclass FileReceivedConsumer :\n    IConsumer<FileReceived>\n{\n}\n\nclass CustomerAuditConsumer :\n    IConsumer<CustomerDataReceived>\n{\n}\n\nclass ProcessFileConsumer :\n    IConsumer<ProcessFile>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Message Data Repository\nDESCRIPTION: Shows how to create an Azure Storage message data repository with optional compression\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new BlobServiceClient(\"<storage account connection string>\");\n_repository = client.CreateMessageDataRepository(\"message-data\", compress: true);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Request in MassTransit State Machine\nDESCRIPTION: Defines a request with request and response message types, configures timeout, and demonstrates basic request declaration in a state machine\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/3.requests.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Request<OrderState, ValidateOrder, OrderValidated> \n        ValidateOrder { get; private set; } = null!;\n    \n    public OrderStateMachine()\n    {\n        Request(() => ValidateOrder, o =>\n        {\n            o.Timeout = TimeSpan.FromMinutes(30);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Recurring Job with Expression Builder in MassTransit\nDESCRIPTION: This snippet shows how to schedule a recurring job using the expression builder in MassTransit, providing a more readable alternative to cron expressions. It configures the `RoutineMaintenanceCommand` to run every 15 minutes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic async Task ConfigureRecurringJobs(IPublishEndpoint endpoint)\n{\n    await endpoint.AddOrUpdateRecurringJob(\"RoutineMaintenance\",\n        new RoutineMaintenanceCommand(), x => x.Every(minutes: 15));\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Configured MassTransit RabbitMQ Application\nDESCRIPTION: Command to run the .NET application with the MassTransit RabbitMQ integration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/2.rabbitmq.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Filters\nDESCRIPTION: Demonstrates how to apply SQL-based rule filters to subscription message filtering\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", e =>\n{\n    e.Subscribe(\"topic-name\", x =>\n    {\n        x.Filter = new SqlRuleFilter(\"1 = 1\");\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Routing Slip in MassTransit\nDESCRIPTION: This code snippet demonstrates how to create a basic Routing Slip using `RoutingSlipBuilder`. It adds two activities, `DownloadImage` and `FilterImage`, to the slip. It also adds a variable named `WorkPath` to store the work path. The `Build()` method is then called to finalize the Routing Slip.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/7.routing-slips/monitor-via-saga.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\n\n// add your activities as normal\nbuilder.AddActivity(\"DownloadImage\", new Uri(\"rabbitmq://localhost/execute_downloadimage\"), \n    new\n    {\n        ImageUri = new Uri(\"http://images.google.com/someImage.jpg\")\n    });\nbuilder.AddActivity(\"FilterImage\", new Uri(\"rabbitmq://localhost/execute_filterimage\"));\nbuilder.AddVariable(\"WorkPath\", @\"\\dfs\\work\");\n\nvar routingSlip = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Events in MassTransit State Machine (C#)\nDESCRIPTION: This snippet demonstrates the configuration of a read-only event, which reduces resource usage by preventing updates when state information is requested without changes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic record GetOrderState(Guid OrderId);\npublic record OrderState(Guid OrderId, string CurrentState);\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Event<GetOrderState> OrderStateRequested { get; private set; } = null!;\n\n    public OrderStateMachine()\n    {\n        Event(() => GetOrderState, e =>\n        {\n             e.CorrelateById(x => x.Message.OrderId);\n             \n             e.ReadOnly = true;\n        });\n        \n        DuringAny(\n            When(OrderStateRequested)\n                .RespondAsync(async context => new OrderState(\n                    context.Saga.CorrelationId, \n                    await Accessor.Get(context).Name))\n        );                \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Saga Repository\nDESCRIPTION: Configuration example showing how to set up DynamoDB as a saga repository using MassTransit's dependency injection extensions. Demonstrates setting the table name and context factory configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/dynamodb.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .DynamoDbRepository(config =>\n        {\n            // required\n            config.TableName = \"Orders\";\n             // required. Refer to AWS SDK docs for how to create a context.\n            config.ContextFactory(provider => new DynamoDBContext(dynamoDbClient));\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Job State during Cancellation in C#\nDESCRIPTION: This code snippet shows how to save job state in the event of a cancellation. It ensures that the consumer can resume its job correctly by saving the last processed index.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConvertVideoJobConsumer : \n    IJobConsumer<ConvertVideo>\n{\n    public async Task Run(JobContext<ConvertVideo> context)\n    {\n        // some aspects of the content being process\n        long length = File.Length;\n        \n        int index = 1;\n        try\n        {\n            await context.SetJobProgress(0, length);\n            \n            for (; index <= length; index++)\n            {\n                context.CancellationToken.ThrowIfCancellationRequested();\n                \n                // do something\n                \n                context.SetJobProgress(index, length);\n            }\n        }\n        catch (OperationCanceledException) when (context.CancellationToken.IsCancellationRequested)\n        {\n            await context.SaveJobState(new ConsumerState { LastIndex = index });\n            throw;\n        }\n    }\n    \n    class ConsumerState\n    {\n        public long LastIndex { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Saga ETag for Concurrency in C#\nDESCRIPTION: Demonstrates how to obtain the saga's ETag value from the SagaConsumeContext for concurrency control in saga management. It attempts to extract the ETag from the provided context payload.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-cosmos.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring eTag = context.TryGetPayload<SagaETag>(out var payload) ? payload.ETag : null;\n```\n\n----------------------------------------\n\nTITLE: Using ExcludeFromImplementedTypes Attribute to Prevent Scope Filter Creation in MassTransit\nDESCRIPTION: This example demonstrates the ExcludeFromImplementedTypes attribute which prevents scope filters from being created for a base message type in MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ExcludeFromImplementedTypes]\npublic interface ICommand\n{\n}\n\npublic record ReformatHardDrive :\n    ICommand\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File System Message Data Repository\nDESCRIPTION: Shows how to create a file system message data repository\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageDataRepository CreateRepository(string path)\n{\n    var dataDirectory = new DirectoryInfo(path);\n\n    return new FileSystemMessageDataRepository(dataDirectory);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced MassTransit Test Harness Configuration with In-Memory Transport\nDESCRIPTION: Shows how to further configure the MassTransit Test Harness with an in-memory transport setup. This configuration adds a delayed message scheduler and sets up consumers and endpoints with default settings. Suitable for cases where in-memory transport is required for testing asynchronous messages without external message brokers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n.AddMassTransitTestHarness(x =>\n{\n    x.AddDelayedMessageScheduler();\n    \n    x.AddConsumer<SubmitOrderConsumer>();\n    \n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.UseDelayedMessageScheduler();\n        \n        cfg.ConfigureEndpoints(context);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Running the MassTransit Project with PostgreSQL\nDESCRIPTION: Command to run the configured .NET project with MassTransit and PostgreSQL integration, and example of the expected console output.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/5.postgresql.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscription with RoutingSlipBuilder in C#\nDESCRIPTION: This code snippet shows how to add a subscription to a routing slip using the RoutingSlipBuilder. It initializes a builder with a unique tracking number, adds a subscription to an address for all routing slip events, and then builds the routing slip. Adding a subscription is recommended to route routing slip events to a specific endpoint.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/7.routing-slips/2.routing_slip.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddSubscription(new Uri(\"address\"), RoutingSlipEvents.All)\nvar slip = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga Repository with Microsoft Dependency Injection\nDESCRIPTION: This code snippet configures the saga repository using Microsoft Dependency Injection extensions. It adds a saga state machine, configures the Entity Framework repository, sets the concurrency mode (Pessimistic or Optimistic), and adds a DbContext using `UseSqlServer`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .EntityFrameworkRepository(r =>\n        {\n            r.ConcurrencyMode = ConcurrencyMode.Pessimistic; // or use Optimistic, which requires RowVersion\n\n            r.AddDbContext<DbContext, OrderStateDbContext>((provider,builder) =>\n            {\n                builder.UseSqlServer(connectionString, m =>\n                {\n                    m.MigrationsAssembly(Assembly.GetExecutingAssembly().GetName().Name);\n                    m.MigrationsHistoryTable($\"__{nameof(OrderStateDbContext)}\");\n                });\n            });\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Tombstone Messages with Custom Serializer\nDESCRIPTION: Implements a tombstone message producer using a custom serializer that generates empty byte arrays, useful for logical record deletion in Kafka\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/10.kafka.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait producer.Produce(\"key\", new { }, Pipe.Execute<KafkaSendContext<string, KafkaMessage>>(context =>\n{\n    context.ValueSerializer = new TombstoneSerializer<KafkaMessage>();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ ReplyTo Request Client Factory\nDESCRIPTION: Demonstrates how to configure MassTransit to use the RabbitMQ ReplyTo address for request client responses\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.SetRabbitMqReplyToRequestClientFactory();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Publish Observer in C#\nDESCRIPTION: Shows methods for adding a publish observer to monitor published messages\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddPublishObserver<PublishObserver>();\n\nservices.AddPublishObserver(provider => new PublishObserver());\n```\n\n----------------------------------------\n\nTITLE: Creating Queue in SQL\nDESCRIPTION: This function, `create_queue`, creates a queue with an optional auto_delete parameter. It also creates associated error and dead-letter queues. Each queue maintains its own type. No prerequisites are needed for this function, and it accepts a queue name and an optional auto-delete parameter.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate_queue(queue_name text, \n             auto_delete integer DEFAULT NULL)\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Client for Local Development\nDESCRIPTION: Example of creating an AmazonDynamoDBClient instance configured for local development using a local DynamoDB instance running on port 4566.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/dynamodb.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar dynamoDbClient = new AmazonDynamoDBClient(new AmazonDynamoDBConfig { ServiceURL = \"http://localhost:4566\" });\n```\n\n----------------------------------------\n\nTITLE: Include instance map in DbContext class\nDESCRIPTION: This code snippet shows how to include the instance map in a `DbContext` class that will be used by the saga repository. The `OrderStateDbContext` inherits from `SagaDbContext` and overrides the `Configurations` property to return a new `OrderStateMap`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateDbContext :\n    SagaDbContext\n{\n    public OrderStateDbContext(DbContextOptions options)\n        : base(options)\n    {\n    }\n\n    protected override IEnumerable<ISagaClassMap> Configurations\n    {\n        get { yield return new OrderStateMap(); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Topology to set CorrelationId in MassTransit C#\nDESCRIPTION: This snippet showcases how to use the global topology to configure a correlation ID provider for a specific message type (SubmitOrder) in MassTransit. It uses the OrderId property of the SubmitOrder message to set the CorrelationId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Use the OrderId as the message CorrelationId\nGlobalTopology.Send.UseCorrelationId<SubmitOrder>(x => x.OrderId);\n\n// Previous approach, which now calls the new way above\nMessageCorrelation.UseCorrelationId<SubmitOrder>(x => x.OrderId);\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessFileCommand Record in C#\nDESCRIPTION: This C# record, `ProcessFileCommand`, implements the `ProcessFile` interface. It includes properties for `FileId` and `Location`. This record is used by the command sender to send `ProcessFile` commands.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic record ProcessFileCommand :\n    ProcessFile\n{\n    public Guid FileId { get; init; }\n    public Uri Location { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Example IAM Policy for Amazon SQS and SNS Access\nDESCRIPTION: Provides an example IAM policy JSON that grants necessary permissions for SQS and SNS operations, including queue and topic management, message sending and receiving.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/4.amazon-sqs.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SqsAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sqs:SetQueueAttributes\",\n                \"sqs:ReceiveMessage\",\n                \"sqs:CreateQueue\",\n                \"sqs:DeleteMessage\",\n                \"sqs:SendMessage\",\n                \"sqs:GetQueueUrl\",\n                \"sqs:GetQueueAttributes\",\n                \"sqs:ChangeMessageVisibility\",\n                \"sqs:PurgeQueue\",\n                \"sqs:DeleteQueue\",\n                \"sqs:TagQueue\"\n            ],\n            \"Resource\": \"arn:aws:sqs:*:YOUR_ACCOUNT_ID:*\"\n        },{\n            \"Sid\": \"SnsAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sns:GetTopicAttributes\",\n                \"sns:CreateTopic\",\n                \"sns:Publish\",\n                \"sns:Subscribe\"\n            ],\n            \"Resource\": \"arn:aws:sns:*:YOUR_ACCOUNT_ID:*\"\n        },{\n            \"Sid\": \"SnsListAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sns:ListTopics\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Global Topology Configuration for SessionId and PartitionKey\nDESCRIPTION: Shows how to configure global topology conventions for SessionId and PartitionKey across message types\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalTopology.Send.TryAddConvention(new SessionIdSendTopologyConvention());\nGlobalTopology.Send.TryAddConvention(new PartitionKeySendTopologyConvention());\n\nGlobalTopology.Send.UseSessionIdFormatter<ICanHasSessionId>(x => x.Message.SessionId.ToString());\n```\n\n----------------------------------------\n\nTITLE: Using Optimistic Concurrency Attribute with Marten Saga Class\nDESCRIPTION: Alternative approach to enable optimistic concurrency by applying the UseOptimisticConcurrency attribute directly to the saga state class. This achieves the same result as configuring it in the repository setup.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/marten.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[UseOptimisticConcurrency]\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a BigMessage in C#\nDESCRIPTION: Shows the implementation of a consumer for the BigMessage class, illustrating how to access and process the large payload received from the message.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BigMessageConsumer : IConsumer<BigMessage>\n{\n    public async Task Consume(ConsumeContext<BigMessage> context)\n    {\n        var bigPayload = await context.Message.BigPayload.Value;\n\n        // Do something with the big payload...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint for Non-MassTransit Systems in C#\nDESCRIPTION: This code snippet demonstrates how to exclude an endpoint from topology mapping using MassTransit configuration in C#. It disables the default topology configuration for an endpoint defined by another system.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/external-systems.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nendpointConfigurator.ConfigureConsumeTopology = false;\n```\n\n----------------------------------------\n\nTITLE: Generic Consumer and Endpoint Configuration\nDESCRIPTION: Configures a generic consumer with a logger, sets a kebab case endpoint name formatter, and uses RabbitMQ as the message transport\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<ValueEnteredEventConsumer>();\n\n    x.SetKebabCaseEndpointNameFormatter();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n});\n\nclass ValueEnteredEventConsumer :\n    IConsumer<ValueEntered>\n{\n    ILogger<ValueEnteredEventConsumer> _logger;\n\n    public ValueEnteredEventConsumer(ILogger<ValueEnteredEventConsumer> logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task Consume(ConsumeContext<ValueEntered> context)\n    {\n        _logger.LogInformation(\"Value: {Value}\", context.Message.Value);\n    }\n```\n\n----------------------------------------\n\nTITLE: Managing RabbitMqSendContext in C# with PipeContext\nDESCRIPTION: The second snippet demonstrates how to use the TryGetPayload method to manage a RabbitMqSendContext within a SendContext. This highlights a dynamic approach to checking and modifying payload-specific properties, such as adjusting message priority. No external dependencies are required beyond GreenPipes' SendContext and RabbitMqSendContext components.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Send(SendContext context, IPipe<SendContext> next)\n{\n    if(context.TryGetPayload<RabbitMqSendContext>(out var rabbitMqSendContext))\n        rabbitMqSendContext.Priority = 3;\n\n    return next.Send(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Global Topology Partition Key Configuration\nDESCRIPTION: Shows how to configure global topology conventions for partition key formatting using the GlobalTopology configuration\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalTopology.Send.TryAddConvention(new PartitionKeySendTopologyConvention());\n\nGlobalTopology.Send.UsePartitionKeyFormatter<ICanHasPartitionKey>(x => x.Message.PartitionKey.ToString());\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Saga Instance Insertion with External Correlation\nDESCRIPTION: This snippet shows how to correlate a saga instance using a property other than CorrelationId and insert the instance on initial event consumption. It uses CorrelateBy to match instances based on OrderNumber and ensures that the database has a unique constraint on this property.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ExternalOrderSubmitted\n{\n    string OrderNumber { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => ExternalOrderSubmitted, e => \n        {\n            e.CorrelateBy(i => i.OrderNumber, x => x.Message.OrderNumber)\n            e.SelectId(x => NewId.NextGuid());\n\n            e.InsertOnInitial = true;\n            e.SetSagaFactory(context => new OrderState\n            {\n                CorrelationId = context.CorrelationId ?? NewId.NextGuid(),\n                OrderNumber = context.Message.OrderNumber,\n            })\n        });\n\n        Initially(\n            When(SubmitOrder)\n                .TransitionTo(Submitted));\n    }\n\n    public Event<ExternalOrderSubmitted> ExternalOrderSubmitted { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GettingStarted Contract - C#\nDESCRIPTION: This code snippet defines a record for the GettingStarted message contract to be used with MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace GettingStarted.Contracts;\npublic record GettingStarted() \n{\n    public string Value { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessFile Interface in C#\nDESCRIPTION: This C# interface defines the contract for a `ProcessFile` command. It includes properties for `FileId` and `Location`. This interface acts as a message contract for consumers that process received files.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic interface ProcessFile\n{\n    Guid FileId { get; }\n    Uri Location { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Artemis Compatibility\nDESCRIPTION: This snippet shows how to enable Artemis compatibility when using the ActiveMQ transport provider with an Artemis broker. It initializes the necessary features to make MassTransit work with Artemis. This is done by calling the `EnableArtemisCompatibility()` method.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/5.activemq.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.UsingActiveMq((context, cfg) =>\n    {\n        cfg.Host(\"localhost\", 61618, cfgHost =>\n        {\n            cfgHost.Username(\"admin\");\n            cfgHost.Password(\"admin\");\n        });\n\n        cfg.EnableArtemisCompatibility();        \n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Events and Topology\nDESCRIPTION: Shows how to configure request events with advanced options like disabling consume topology for response events\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/3.requests.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public Request<OrderState, ValidateOrder, OrderValidated> \n        ValidateOrder { get; private set; } = null!;\n    \n    public OrderStateMachine()\n    {\n        Request(() => ValidateOrder, r =>\n        {\n            r.Timeout = TimeSpan.FromMinutes(30);\n            \n            r.Completed = e => e.ConfigureConsumeTopology = false;\n            r.Faulted = e => e.ConfigureConsumeTopology = false;\n            r.TimeoutExpired = e => e.ConfigureConsumeTopology = false;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Class Mapping for Saga in C#\nDESCRIPTION: Shows how to configure custom class mapping for a saga using an Action<BsonClassMap>. This allows for fine-grained control over how saga properties are mapped to MongoDB documents.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/mongodb.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n.MongoDbRepository(r =>\n{\n    r.Connection = \"mongodb://127.0.0.1\";\n    r.DatabaseName = \"orderdb\";\n\n    r.ClassMap(m => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscription to a Routing Slip for All Events (C#)\nDESCRIPTION: This snippet demonstrates how to add a subscription to a routing slip that sends all routing slip events to a specified endpoint using the RoutingSlipBuilder.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSubscription(new Uri(\"rabbitmq://localhost/log-events\"), \n    RoutingSlipEvents.All);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics and Configuring Subscription Properties\nDESCRIPTION: Shows how to subscribe to topics and configure subscription-specific properties like auto-delete idle time\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", e =>\n{\n    e.Subscribe(\"topic-name\");\n    e.Subscribe<MessageType>();\n})\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", e =>\n{\n    e.Subscribe(\"topic-name\", x =>\n    {\n        x.AutoDeleteOnIdle = TimeSpan.FromMinutes(60);\n    });\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message from NServiceBus Endpoint\nDESCRIPTION: This snippet shows how to publish a `ClockUpdated` message from an NServiceBus endpoint using the `IMessageSession` interface. It creates a new instance of the `ClockUpdated` message with the current UTC time and publishes it with default publish options.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/nsb.md#2025-04-18_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar session = _provider.GetRequiredService<IMessageSession>();\nawait session.Publish(new ClockUpdated {CurrentTime = DateTime.UtcNow}, new PublishOptions());\n```\n\n----------------------------------------\n\nTITLE: Running Docker Image to Display Options\nDESCRIPTION: This command runs the Docker image in a container named 'mt-bench' and executes it with the '-?' option. The '--rm' flag ensures that the container is removed after it exits. This is useful to view command line options.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Benchmark/README.md#2025-04-18_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm --name mt-bench \\<your-tag> -?\n```\n\n----------------------------------------\n\nTITLE: Tweak Content of Routing Slip Events (C#)\nDESCRIPTION: This snippet shows how to configure a routing slip event subscription to eliminate the variables, reducing the message size and traffic on the message broker.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSubscription(new Uri(\"rabbitmq://localhost/log-events\"), \n    RoutingSlipEvents.Completed, RoutingSlipEventContents.None);\n```\n\n----------------------------------------\n\nTITLE: Unlocking Message in SQL\nDESCRIPTION: Changes a message's enqueue time with a delay using `unlock_message`, releasing previously fetched messages. Includes options to add delay and headers, useful for redeliveries or error handling.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nunlock_message(message_delivery_id bigint, \n               lock_id uuid,\n               delay interval,\n               headers jsonb)\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga Instance Properties with PostgreSQL xmin\nDESCRIPTION: This code snippet shows how to modify the state mapping to use the `xmin` column of PostgreSQL. It configures the `RowVersion` property to use the column name `xmin` and the column type `xid` and specifies it's a row version.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/entity-framework.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMap :\n    SagaClassMap<OrderState>\n{\n    protected override void Configure(EntityTypeBuilder<OrderState> entity, ModelBuilder model)\n    {\n        entity.Property(x => x.CurrentState).HasMaxLength(64);\n        entity.Property(x => x.OrderDate);\n\n        // If using Optimistic concurrency, otherwise remove this property\n        entity.Property(x => x.RowVersion)\n            .HasColumnName(\"xmin\")\n            .HasColumnType(\"xid\")\n            .IsRowVersion()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Commands and Requests - C#\nDESCRIPTION: This snippet demonstrates how to send commands and requests using the MassTransit mediator. It shows how to send a 'SubmitOrder' command and then request the order status, highlighting the asynchronous handling of responses.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/mediator.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nGuid orderId = NewId.NextGuid();\n\nawait mediator.Send<SubmitOrder>(new { OrderId = orderId });\n\nvar client = mediator.CreateRequestClient<GetOrderStatus>();\n\nvar response = await client.GetResponse<OrderStatus>(new { OrderId = orderId });\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Outbox for All Endpoints\nDESCRIPTION: This snippet demonstrates how to apply the MongoDB outbox configuration to all configured receive endpoints via a configure endpoints callback.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/3.outbox.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConfigureEndpointsCallback((context, name, cfg) =>\n{\n    cfg.UseMongoDbOutbox(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a MassTransit Routing Slip Activity\nDESCRIPTION: Command to create a Routing Slip Activity for MassTransit. Creates an Activity, ActivityArguments, and ActivityLog classes in the ~/Activities folder.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtactivity\n```\n\n----------------------------------------\n\nTITLE: Consuming and Publishing Messages in MassTransit\nDESCRIPTION: This code defines a MassTransit consumer, `TimeConsumer`, that consumes `ClockUpdated` messages and publishes `ClockSynchronized` messages. It logs the current time from the consumed message and then publishes a `ClockSynchronized` message containing the host's machine name.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/nsb.md#2025-04-18_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nclass TimeConsumer :\n    IConsumer<ClockUpdated>\n{\n    readonly ILogger<TimeConsumer> _logger;\n\n    public TimeConsumer(ILogger<TimeConsumer> logger)\n    {\n        _logger = logger;\n    }\n\n    public async Task Consume(ConsumeContext<ClockUpdated> context)\n    {\n        _logger.LogInformation(\"Clock was updated: {CurrentTime}\", context.Message.CurrentTime);\n\n        await context.Publish(new ClockSynchronized\n        {\n            Host = HostMetadataCache.Host.MachineName\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Redis Repository Configuration in MassTransit\nDESCRIPTION: Demonstrates comprehensive Redis configuration options including concurrency mode, key prefix, lock suffix, and timeout settings.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/redis.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    const string configurationString = \"127.0.0.1\";\n\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .RedisRepository(r =>\n        {\n            r.DatabaseConfiguration(configurationString);\n\n            // Default is Optimistic\n            r.ConcurrencyMode = ConcurrencyMode.Pessimistic;\n\n            // Optional, prefix each saga instance key with the string specified\n            // resulting dev:c6cfd285-80b2-4c12-bcd3-56a00d994736\n            r.KeyPrefix = \"dev\";\n\n            // Optional, to customize the lock key\n            r.LockSuffix = \"-lockage\";\n\n            // Optional, the default is 30 seconds\n            r.LockTimeout = TimeSpan.FromSeconds(90);\n        });;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit with SQL Server\nDESCRIPTION: This code snippet shows how to set up MassTransit with SQL Server as the message transport. Similar to the PostgreSQL configuration, it involves adding a message scheduler and configuring endpoints.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSqlMessageScheduler();\n    \n    x.UsingSqlServer((context, cfg) =>\n    {\n        cfg.UseSqlMessageScheduler();\n        \n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Topology for Correlation ID (C#)\nDESCRIPTION: This snippet shows how to globally configure the correlation ID for the SubmitOrder message using GlobalTopology, allowing all saga state machines access without needing individual configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/2.event.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalTopology.Send.UseCorrelationId<SubmitOrder>(x => x.OrderId);\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Large Data\nDESCRIPTION: Shows how to send a message with a large byte array using message initializer\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nGuid documentId = NewId.NextGuid();\nbyte[] document = new byte[100000]; // get byte array, or a big string\n\nawait endpoint.Send<IndexDocumentContent>(new\n{\n    DocumentId = documentId,\n    Document = document\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Session Saga Repository with Container\nDESCRIPTION: Demonstrates how to configure a message session saga repository using MassTransit's container extension method. Sets up saga state machine and message session repository.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-service-bus.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .MessageSessionRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Scheduled Message in SQL\nDESCRIPTION: `delete_scheduled_message` removes a scheduled message using its token ID, helping manage messages that are no longer needed as per the transport schedule.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ndelete_scheduled_message(token_id uuid)\n```\n\n----------------------------------------\n\nTITLE: Creating Request Handles in MassTransit with C#\nDESCRIPTION: Shows how to create and dispose of request handles in MassTransit's charging patterns. Useful in complex scenarios where direct request object manipulation is necessary. Assumes adherence to MassTransit’s request timeout taxonomy with the availability of RequestHandle<T>.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IRequestClient<TRequest>\n    where TRequest : class\n{\n    RequestHandle<TRequest> Create(TRequest request, CancellationToken cancellationToken, RequestTimeout timeout);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State in C#\nDESCRIPTION: This snippet defines a basic saga state using C#. It includes properties for correlation, current state, and order date. No special Cosmos DB handling properties (_etag) are required as MassTransit manages these.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-cosmos.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscription for Specific Events (C#)\nDESCRIPTION: This snippet shows how to subscribe to only specific routing slip events, such as `RoutingSlipCompleted` and `RoutingSlipFaulted`, by specifying the enumeration values for those events.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSubscription(new Uri(\"rabbitmq://localhost/log-events\"), \n    RoutingSlipEvents.Completed | RoutingSlipEvents.Faulted);\n```\n\n----------------------------------------\n\nTITLE: Defining FileReceived and CustomerDataReceived Interfaces (C#)\nDESCRIPTION: These C# interfaces define the contract for events related to file reception and customer data. `FileReceived` includes `FileId`, `Timestamp`, and `Location`, while `CustomerDataReceived` includes `Timestamp`, `CustomerId`, `SourceAddress`, and `Location`. These interfaces are used to define the structure of the messages consumed by consumers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic interface FileReceived\n{\n    Guid FileId { get; }\n    DateTime Timestamp { get; }\n    Uri Location { get; }\n}\n\npublic interface CustomerDataReceived\n{\n    DateTime Timestamp { get; }\n    string CustomerId { get; }\n    string SourceAddress { get; }\n    Uri Location { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Storing Message Data\nDESCRIPTION: Demonstrates manually storing message data in the repository when using a message class\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass IndexDocumentContentMessage :\n    IndexDocumentContent\n{\n    public Guid DocumentId { get; set; }\n    public MessageData<byte[]> Document { get; set; }\n}\n\nGuid documentId = NewId.NextGuid();\nbyte[] document = new byte[100000]; // get byte array, or a big string\n\nawait endpoint.Send<IndexDocumentContent>(new IndexDocumentContentMessage\n{\n    DocumentId = documentId,\n    Document = await repository.PutBytes(document, TimeSpan.FromDays(1))\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Repository with Custom Key Formatter in MassTransit\nDESCRIPTION: Example showing how to configure an Azure Table saga repository with a custom key formatter for improved partitioning strategy and scale-out capability.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-table.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTableClient cloudTable;\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .AzureTableRepository(endpointUri, key, r =>\n        {\n           cfg.ConnectionFactory(() => cloudTable);\n           cfg.KeyFormatter(() => new ConstRowSagaKeyFormatter<OrderState>(typeof(OrderState).Name)))\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Entity Name Formatter for MassTransit\nDESCRIPTION: This snippet shows how to create a custom IEntityNameFormatter that can be applied to the entire message topology. It delegates to the original formatter for message types that don't require special handling.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass FancyNameFormatter :\n    IEntityNameFormatter\n{\n    public FancyNameFormatter(IEntityNameFormatter original)\n    {\n        _original = original;\n    }\n\n    public string FormatEntityName<T>()\n    {\n        if(T is OrderSubmitted)\n            return \"we-got-one\";\n\n        return _original.FormatEntityName<T>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Recurring Job with Start and End Dates in MassTransit\nDESCRIPTION: This code snippet demonstrates how to confine a recurring job to a specific period using start and end dates. It uses `DateTimeOffset` to define the start and end times for the `RoutineMaintenanceCommand`, ensuring it only runs within that window, every 30 minutes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic async Task ConfigureRecurringJobs(IPublishEndpoint endpoint)\n{\n    await endpoint.AddOrUpdateRecurringJob(\"RoutineMaintenance\",\n        new RoutineMaintenanceCommand(), x =>\n        {\n            x.Start = new DateTimeOffset(2024, 1, 1, 0, 0, 0, TimeSpan.Zero);\n            x.End = new DateTimeOffset(2025, 1, 1, 0, 0, 0, TimeSpan.Zero);\n            x.Every(minutes: 30);\n        });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Probe Method for Filter Introspection\nDESCRIPTION: Example of implementing the Probe method to describe filter behavior in a developer-friendly manner\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Probe(ProbeContext context)\n{\n    context.CreateFilterScope(\"transaction\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State with Nullable DateTime Property in C#\nDESCRIPTION: Example of a saga state class definition with a nullable DateTime property to avoid 400 bad requests from Table Storage when updating saga state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-table.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Requeuing Single Message in SQL\nDESCRIPTION: Facilitating message restoration with `requeue_message`, this function moves individual messages back to their originating queue, optionally controlling delivery delay and redelivery count.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nrequeue_message(message_delivery_id bigint,\n                target_queue_type int,\n                delay interval DEFAULT INTERVAL '0 seconds',\n                redelivery_count int DEFAULT 10)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Message Sending with Direct Header Assignment in C#\nDESCRIPTION: Demonstrates a simplified approach to sending an order message with a direct assignment of headers in the message object. By prefixing headers with '__', it handles fault addresses concisely.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task SendOrder(ISendEndpoint endpoint)\n{\n    await endpoint.Send<SubmitOrder>(new\n    {\n        OrderId = \"27\",\n        OrderDate = DateTime.UtcNow,\n        OrderAmount = 123.45m,\n\n        // header names are prefixed with __, and types are converted as needed\n        __FaultAddress = \"rabbitmq://localhost/order_faults\"\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Leveraging IClientFactory for Root Client Access\nDESCRIPTION: Explains the use of IClientFactory in MassTransit for creating request clients when scoped contexts are unavailable. Highlights limited compatibility with scoped publish or send filters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IClientFactory \n{\n    IRequestClient<T> CreateRequestClient<T>(ConsumeContext context, Uri destinationAddress, RequestTimeout timeout);\n\n    IRequestClient<T> CreateRequestClient<T>(Uri destinationAddress, RequestTimeout timeout);\n}\n\n// Usage example\npublic async Task WorkerMethod(IServiceProvider provider)\n{\n    var clientFactory = provider.GetRequiredService<IClientFactory>();\n    \n    var serviceAddress = new Uri(\"exchange:check-order-status\");\n    \n    var client = clientFactory.CreateRequestClient<CheckOrderStatus>(serviceAddress);\n\n    var response = await client.GetResponse<OrderStatusResult>(new { OrderId = id});\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Completed Result in Activity\nDESCRIPTION: This C# snippet demonstrates how to return a completed result from an activity, including data that will be stored in the activity log. The `Completed` method is called on the `context` object to indicate successful completion.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nreturn context.Completed(new LogModel {\n    SomeData = \"abc\"\n})\n```\n\n----------------------------------------\n\nTITLE: Defining FileReceivedEvent Record in C#\nDESCRIPTION: This C# record, `FileReceivedEvent`, implements both the `FileReceived` and `CustomerDataReceived` interfaces. It includes properties such as `FileId`, `Timestamp`, `Location`, `CustomerId`, and `SourceAddress`. This record is used by the event producer to publish `FileReceived` events that also include customer data.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic record FileReceivedEvent :\n    FileReceived,\n    CustomerDataReceived\n{\n    public Guid FileId { get; init; }\n    public DateTime Timestamp { get; init; }\n    public Uri Location { get; init; }\n    public string CustomerId { get; init; }\n    public string SourceAddress { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Storage as Saga Repository in MassTransit\nDESCRIPTION: Container integration example showing how to configure Azure Table Storage as a saga repository using the AddMassTransit container extension.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/azure-table.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTableClient cloudTable;\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .AzureTableRepository(endpointUri, key, r =>\n        {\n           cfg.ConnectionFactory(() => cloudTable);\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Saga State Model with Dapper Attributes in C#\nDESCRIPTION: Example of a saga state class that uses Dapper's ExplicitKey attribute for the CorrelationId. This model demonstrates how to properly define a state class that can be used with Dapper for persistence.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/dapper.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    [ExplicitKey]\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: MassTransit Unit Testing with In-Memory Transport\nDESCRIPTION: This testing snippet demonstrates how to use MassTransit's in-memory transport for unit testing. It includes a basic test to verify that certain messages are sent and consumed. It depends on `Microsoft.Extensions.DependencyInjection` and MassTransit's testing tools.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task The_consumer_should_respond_to_the_request()\n{\n    await using var provider = new ServiceCollection()\n        .AddMassTransitTestHarness(x =>\n        {\n            x.AddConsumer<SubmitOrderConsumer>();\n        })\n        .BuildServiceProvider(true);\n\n    var harness = provider.GetTestHarness();\n\n    await harness.Start();\n\n    var client = harness.GetRequestClient<SubmitOrder>();\n\n    await client.GetResponse<OrderSubmitted>(new\n    {\n        OrderId = InVar.Id,\n        OrderNumber = \"123\"\n    });\n\n    Assert.IsTrue(await harness.Sent.Any<OrderSubmitted>());\n\n    Assert.IsTrue(await harness.Consumed.Any<SubmitOrder>());\n\n    var consumerHarness = harness.GetConsumerHarness<SubmitOrderConsumer>();\n\n    Assert.That(await consumerHarness.Consumed.Any<SubmitOrder>());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Completed Instance Removal Condition\nDESCRIPTION: This snippet demonstrates how to configure a saga state machine to use a custom condition to determine when an instance is completed. It uses the SetCompleted method with an asynchronous lambda expression that checks if the instance's current state is equal to the Completed state.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderCompleted\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderCompleted, x => x.CorrelateById(context => context.Message.OrderId));\n\n        DuringAny(\n            When(OrderCompleted)\n                .TransitionTo(Completed));\n\n        SetCompleted(async instance => \n        {\n            State<TInstance> currentState = await this.GetState(instance);\n\n            return Completed.Equals(currentState);\n        });\n    }\n\n    public State Completed { get; private set; }\n    public Event<OrderCompleted> OrderCompleted { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Activity in MassTransit State Machine\nDESCRIPTION: This snippet demonstrates how to call a custom activity in a MassTransit state machine. It shows the basic structure of a state machine class with state and event declarations, and how to use the Activity method to invoke a custom activity when handling an event.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/9.custom.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n\n    public Event<OrderClosed> OrderClosed { get; private set; } = null!;\n\n    public OrderStateMachine() \n    {\n        // Tell the saga where to store the current state\n        InstanceState(x => x.CurrentState);\n\n        Initially(\n            When(OrderClosed)\n                .Activity(x => x.OfType<OrderClosedActivity>())\n                .TransitionTo(Submitted)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription with Pattern Matching\nDESCRIPTION: This code snippet creates a subscription that uses a regular expression pattern to filter messages. It similarly requires disabling automatic topology configuration for proper message routing.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ne.ConfigureConsumeTopology = false;\n\ne.Subscribe<CustomerUpdatedEvent>(m =>\n{\n    m.SubscriptionType = SqlSubscriptionType.Pattern;\n    m.RoutingKey = \"^[A-Z]+$\";\n});\n\nawait publishEndpoint.Publish(new CustomerUpdatedEvent(NewId.NextGuid()),\n    x => x.SetRoutingKey(\"ABCDEFG\"));\n```\n\n----------------------------------------\n\nTITLE: Making a synchronous service call using request/response in C#\nDESCRIPTION: This snippet demonstrates a basic synchronous request/response call to a service method. It illustrates how a response is obtained from a service using a request object.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/9.durable-futures.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = service.Method(request);\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom ConsumerEndpointQueueNameFormatter\nDESCRIPTION: This snippet shows how to set a custom `IActiveMqConsumerEndpointQueueNameFormatter` to tweak the queue name generation.  This allows for customization of the queue names based on the receive/consumer endpoint name and topic.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/5.activemq.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SetConsumerEndpointQueueNameFormatter(new MyCustomConsumerEndpointQueueNameFormatter());\n```\n\n----------------------------------------\n\nTITLE: Non-Compensating Activity Implementation in C#\nDESCRIPTION: Creates an execute-only activity without compensation support, suitable for simple, non-reversible operations\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DownloadImageActivity :\n    IExecuteActivity<DownloadImageArguments>\n{\n    Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> context);\n}\n```\n\n----------------------------------------\n\nTITLE: C# Record Definition for MyCustomArgs\nDESCRIPTION: This code snippet defines a C# record called `MyCustomArgs` with properties for Name, Quantity, and Sku. This record is used as an example of custom arguments that can be passed to an activity in a routing slip. Data binding prioritizes argument payload over variables.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/7.routing-slips/2.routing_slip.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic record MyCustomArgs(string Name, int Quantity, string Sku);\n```\n\n----------------------------------------\n\nTITLE: Supported Correlation Expressions for Dapper Repository\nDESCRIPTION: Examples of supported correlation expressions for Dapper repository with MassTransit. These expressions demonstrate the types of conditions that can be used for saga correlation.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/dapper.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nx => x.CorrelationId == someGuid;\nx => x.IsDone;\nx => x.CorrelationId == someGuid && x.IsDone;\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ Docker Container for x86 Architecture\nDESCRIPTION: Command to run the official MassTransit RabbitMQ Docker image with management interface enabled. Exposes ports 15672 for the management UI and 5672 for the AMQP connection.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/2.rabbitmq.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 15672:15672 -p 5672:5672 masstransit/rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemory Saga Repository with Container Integration\nDESCRIPTION: Demonstrates how to register an in-memory saga repository using container extension method for simple saga state management\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/3.persistence.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncontainer.AddMassTransit(cfg =>\n{\n    cfg.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .InMemoryRepository();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Activity Arguments\nDESCRIPTION: This C# snippet shows how to access the activity arguments within the `Execute` method of an activity.  The `context.Arguments` property is used to access the arguments, such as `ImagePath` in this case.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<ExecutionResult> Execute(ExecuteContext<ProcessImageArguments> context)\n{\n    var path = context.Arguments.ImagePath;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Implicit Activity Arguments to Routing Slip as Variables\nDESCRIPTION: This C# snippet shows how to specify an implicit activity argument by adding a variable to the routing slip with the same name and type as the activity argument.  The `AddVariable` method is used to add the `ImageUri` variable, which will be available to the `DownloadImage` activity.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = new RoutingSlipBuilder(NewId.NextGuid());\nbuilder.AddActivity(\"DownloadImage\", new Uri(\"rabbitmq://localhost/execute_downloadimage\"));\nbuilder.AddVariable(\"ImageUri\", \"http://images.google.com/someImage.jpg\");\n```\n\n----------------------------------------\n\nTITLE: Defining an Open Generic Consume Filter in C#\nDESCRIPTION: Example of how to define a scoped open generic consume filter that implements IFilter<ConsumeContext<TMessage>>.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/2.scoped.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TFilter<TMessage> :\n    IFilter<ConsumeContext<TMessage>>\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server for local testing and content authoring of the Docus site.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Deleting Fetched Message in SQL\nDESCRIPTION: The function `delete_message` provides a way to remove a previously fetched message using its delivery ID and lock ID, ensuring message integrity and order. This operation presumes valid lock usage.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ndelete_message(message_delivery_id bigint, \n               lock_id uuid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Conventions in MassTransit\nDESCRIPTION: This snippet shows how to configure endpoint conventions in MassTransit by mapping a message type to a specific endpoint URI. This approach eliminates the need to obtain a send endpoint before sending each message, simplifying the code required to send messages.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nEndpointConvention.Map<SubmitOrder>(new Uri(\"rabbitmq://mq.acme.com/order/order_processing\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Saga State Machine Event Filter (MassTransit, C#)\nDESCRIPTION: This snippet demonstrates how to configure an event within a MassTransit saga state machine to prevent automatic consumption topology configuration. This is done by setting `ConfigureConsumeTopology` to `false` for the `FilteredEvent`. This configuration requires manual subscription configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FilteredSagaStateMachine :\n    MassTransitStateMachine<FilteredSaga>\n{\n    public FilteredSagaStateMachine()\n    {\n        Event(() => FilteredEvent, x => x.ConfigureConsumeTopology = false);\n    }\n    \n    public Event<Filtered> FilteredEvent { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscription with a Custom Event (C#)\nDESCRIPTION: This snippet shows how to add a subscription with a custom event, specifying the event type and the properties to be sent in the message.  It merges the base `RoutingSlipCompleted` event with the custom properties.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// then, add the subscription with the custom properties\nbuilder.AddSubscription(new Uri(\"rabbitmq://localhost/order-events\"), \n    RoutingSlipEvents.Completed, \n    x => x.Send<OrderProcessingCompleted>(new\n    {\n        OrderId = \"BFG-9000\",\n        OrderApproval = \"ComeGetSome\"\n    }));\n```\n\n----------------------------------------\n\nTITLE: Adding Receive Observer in C#\nDESCRIPTION: Demonstrates methods for adding a receive observer to monitor messages as they are received by the transport\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddReceiveObserver<ReceiveObserver>();\n\nservices.AddReceiveObserver(provider => new ReceiveObserver());\n```\n\n----------------------------------------\n\nTITLE: Creating Topic Subscription in SQL\nDESCRIPTION: Creates a subscription between two topics using `create_topic_subscription`. It facilitates message routing based on a defined type, routing key, and filter. Inputs include source and destination topic names, type, and optional routing filters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate_topic_subscription(source_topic_name text, \n                          destination_topic_name text, \n                          type integer,\n                          routing_key text DEFAULT '',\n                          filter jsonb DEFAULT '{{}}')\n```\n\n----------------------------------------\n\nTITLE: Installing MassTransit.AmazonSQS Package\nDESCRIPTION: Command to add the MassTransit.AmazonSQS NuGet package to the project, which provides the necessary dependencies for using Amazon SQS with MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/4.amazon-sqs.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package MassTransit.AmazonSQS\n```\n\n----------------------------------------\n\nTITLE: Manual InMemory Saga Repository Configuration\nDESCRIPTION: Shows how to manually create and configure an in-memory saga repository without container integration\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/3.persistence.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderStateMachine = new OrderStateMachine();\nvar repository = new InMemorySagaRepository<OrderState>();\n\nvar busControl = Bus.Factory.CreateUsingInMemory(x =>\n{\n    x.ReceiveEndpoint(\"order-state\", e =>\n    {\n        e.StateMachineSaga(orderStateMachine, repository);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CorrelationId using Message Initializer in MassTransit C#\nDESCRIPTION: This snippet demonstrates how to set the CorrelationId for a message using a message initializer when sending a message via MassTransit.  It shows that the `__CorrelationId` property can be used within the initializer to set the correlation ID.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/1.messages.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait endpoint.Send<SubmitOrder>(new\n{\n    OrderId = context.Message.OrderId,\n    __CorrelationId = context.Message.OrderId\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting .NET Generic Host Shutdown Timeout for C#\nDESCRIPTION: This example illustrates how to configure the shutdown timeout for the .NET Generic Host to give the MassTransit bus enough time to stop gracefully. The configuration involves setting the host options through dependency injection. The shutdown timeout is specified using TimeSpan, and ensures that the bus or related services have the adequate time to complete their shutdown routines.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<HostOptions>(\n    options => options.ShutdownTimeout = TimeSpan.FromMinutes(1));\n```\n\n----------------------------------------\n\nTITLE: Canceling Jobs in MassTransit .NET\nDESCRIPTION: This snippet provides an example of canceling a job using the CancelJob extension method with an IPublishEndpoint in MassTransit. It requires MassTransit setup in a .NET project. Accepts a jobId and sends a cancel command to the IPublishEndpoint, outputting an HTTP status indicating success.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPut(\"{jobId}\")]\npublic async Task<IActionResult> CancelJob(Guid jobId, [FromServices] IPublishEndpoint publishEndpoint)\n{\n    var jobId = await publishEndpoint.CancelJob(jobId);\n\n    return Ok();\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Built Site Locally\nDESCRIPTION: Command to preview the production build of the Docus site locally before deployment.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn preview\n```\n\n----------------------------------------\n\nTITLE: Defining IFilter Interface in MassTransit\nDESCRIPTION: Core interface for creating middleware filters with Probe and Send methods for interrogating and processing pipeline contexts\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFilter<T>\n    where T : class, PipeContext\n{\n    void Probe(ProbeContext context);\n    Task Send(T context, IPipe<T> next);\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Consumer for Cancel Order\nDESCRIPTION: A simple consumer in MassTransit that responds to `CancelOrder` messages with either `OrderNotFound` or `OrderCanceled`. It relies on asynchronous message handling and assumes existence of a repository and order objects.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/6.requests.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Consume(ConsumeContext<CancelOrder> context)\n{\n    var order = _repository.Load(context.Message.OrderId);\n    if(order == null)\n    {\n        await context.ResponseAsync<OrderNotFound>(new { context.Message.OrderId });\n        return;\n    }\n\n    order.Cancel();\n\n    await context.RespondAsync<OrderCanceled>(new { context.Message.OrderId });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Endpoints\nDESCRIPTION: This snippet shows how to manually configure a consumer on a specific receive endpoint, including setting configurations specific to the consumer and middleware required for processing messages.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.consumers.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"manually-configured\", e =>\n{\n    // configure endpoint-specific settings first\n    e.SomeEndpointSetting = someValue;\n    \n    // configure any required middleware components next\n    e.UseMessageRetry(r => r.Interval(5, 1000));\n    \n    // configure the consumer last\n    e.ConfigureConsumer<MyConsumer>(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Global Quorum Queue Configuration with Configure Endpoints Callback\nDESCRIPTION: Shows how to configure all receive endpoints to use quorum queues globally using a configure endpoints callback in MassTransit\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/2.rabbitmq.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConfigureEndpointsCallback((name, cfg) =>\n    {\n        if (cfg is IRabbitMqReceiveEndpointConfigurator rmq)\n            rmq.SetQuorumQueue(3);        \n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding a MassTransit Consumer from Endpoint Configuration in C#\nDESCRIPTION: This code snippet illustrates how to exclude a MassTransit consumer, such as 'SubmitOrderConsumer', from automatic endpoint configuration using the 'ExcludeFromConfigureEndpoints' extension method or attribute. This can be useful when tailoring specific behavior or configurations for certain consumer types, with minimal direct dependency requirements.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConsumer<SubmitOrderConsumer>()\n    .ExcludeFromConfigureEndpoints()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[ExcludeFromConfigureEndpoints]\npublic class SubmitOrderConsumer :\n    IConsumer<SubmitOrder>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Messages from Queue in SQL\nDESCRIPTION: Fetch messages from a specified queue with `fetch_messages`. It uses locking mechanisms with UUIDs to ensure message order and includes options for lock duration and the number of messages to fetch.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nfetch_messages(queue_name text,\n               fetch_consumer_id uuid,\n               fetch_lock_id uuid,\n               lock_duration interval,\n               fetch_count integer DEFAULT 1)\n```\n\n----------------------------------------\n\nTITLE: Registering the Worker Service - C#\nDESCRIPTION: This code snippet registers the background worker service within the dependency injection container in the Program.cs file.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddHostedService<Worker>();\n```\n\n----------------------------------------\n\nTITLE: Binding Endpoint to RabbitMQ Topic in C#\nDESCRIPTION: This example provides a conditional binding of an endpoint to a specific RabbitMQ topic using MassTransit. It checks if the configurator is a RabbitMQ receive endpoint and applies the binding.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/external-systems.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif(endpointConfigurator is IRabbitMqReceiveEndpointConfigurator rabbit) \n{\n    rabbit.Bind(\"your-target-topic\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Receive Mode for Consumer Endpoint\nDESCRIPTION: Demonstrates how to set a receive mode (specifically Partitioned) for a consumer endpoint using configuration callbacks\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConsumer<CustomerCrudConsumer>()\n    .Endpoint(e => e.AddConfigureEndpointCallback(cfg =>\n    {\n        if (cfg is ISqlReceiveEndpointConfigurator sql)\n            sql.SetReceiveMode(SqlReceiveMode.Partitioned);\n    }));\n```\n\n----------------------------------------\n\nTITLE: Defining a Message with Automatic CorrelationId in C#\nDESCRIPTION: A simple message record that contains a CorrelationId property which MassTransit will automatically detect and use for the CorrelationId header without requiring explicit configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/conventions.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderCreated\n{\n    public Guid CorrelationId { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing OrderShipped Event in OrderSaga with MassTransit C#\nDESCRIPTION: This snippet extends 'OrderSaga' to observe and consume 'OrderShipped' events, updating the saga state with shipping details. It also defines a correlation expression.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/1.consumer-sagas.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderShipped\n{\n    public Guid OrderId { get; init; }\n    public DateTime ShipDate { get; init; }\n}\n\npublic class OrderSaga :\n    ISaga,\n    InitiatedBy<SubmitOrder>,\n    Orchestrates<OrderAccepted>,\n    Observes<OrderShipped, OrderSaga>\n{\n    public Guid CorrelationId { get; set; }\n\n    public DateTime? SubmitDate { get; set; }\n    public DateTime? AcceptDate { get; set; }\n    public DateTime? ShipDate { get; set; }\n\n    public async Task Consume(ConsumeContext<SubmitOrder> context) {...}\n    public async Task Consume(ConsumeContext<OrderAccepted> context) {...}\n\n    public async Task Consume(ConsumeContext<OrderShipped> context)\n    {\n        ShipDate = context.Message.ShipDate;\n    }\n\n    public Expression<Func<OrderSaga, OrderShipped, bool>> CorrelationExpression =>\n        (saga,message) => saga.CorrelationId == message.OrderId;\n}\n```\n\n----------------------------------------\n\nTITLE: Raw JSON Deserializer with All Message Types\nDESCRIPTION: Configures raw JSON deserialization to return all message types consumed by a consumer, typically used when the consumer has a single IConsumer<T> interface and lacks Message-Type headers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nendpointConfigurator.UseRawJsonDeserializer(RawSerializerOptions.All, isDefault: true);\n```\n\n----------------------------------------\n\nTITLE: Publishing a BigMessage in C#\nDESCRIPTION: Details how to publish a BigMessage, which includes a large payload stored externally in MongoDB. Ensures seamless transmission of big data messages.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbusControl.Publish(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Receive Endpoint for Saga with MassTransit in C#\nDESCRIPTION: This snippet demonstrates how to configure a MassTransit receive endpoint for handling saga concurrency issues using a MongoDB repository. It sets up message retries and partitioning to manage concurrent message processing safely.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/guidance.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddSagaStateMachine<OrderStateMachine, OrderState>()\n        .MongoDbRepository(r =>\n        {\n            r.Connection = \"mongodb://127.0.0.1\";\n            r.DatabaseName = \"orderdb\";\n        });\n\n    x.UsingRabbitMq((context,cfg) =>\n    {\n        cfg.ReceiveEndpoint(\"saga-queue\", e =>\n        {\n            const int ConcurrencyLimit = 20; // this can go up, depending upon the database capacity\n\n            e.PrefetchCount = ConcurrencyLimit;\n\n            e.UseMessageRetry(r => r.Interval(5, 1000));\n            e.UseInMemoryOutbox();\n\n            e.ConfigureSaga<OrderState>(context, s =>\n            {\n                var partition = s.CreatePartitioner(ConcurrencyLimit);\n\n                s.Message<SubmitOrder>(x => x.UsePartitioner(partition, m => m.Message.OrderId));\n                s.Message<OrderAccepted>(x => x.UsePartitioner(partition, m => m.Message.OrderId));\n                s.Message<OrderCanceled>(x => x.UsePartitioner(partition, m => m.Message.OrderId));\n            });\n        });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Terminating Routing Slip in C#\nDESCRIPTION: Shows how to terminate a routing slip with or without an additional reason, stopping further activity execution\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> execution)\n{\n    return execution.Terminate(new { Reason = \"Not a good time, dude.\"});\n}\n```\n\n----------------------------------------\n\nTITLE: Unscheduling Events in State Machine\nDESCRIPTION: This snippet demonstrates how to unschedule an event within the state machine when an order cancellation request is received, ensuring that no further processing occurs for the scheduled event.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderAccepted\n{\n    Guid OrderId { get; }    \n    TimeSpan CompletionTime { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        DuringAny(\n            When(OrderCancellationRequested)\n                .RespondAsync(context => context.Init<OrderCanceled>(new { OrderId = context.Saga.CorrelationId }))\n                .Unschedule(OrderCompletionTimeout)\n                .TransitionTo(Canceled));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Contracts for Interoperability\nDESCRIPTION: These code snippets define two message contracts, `ClockUpdated` and `ClockSynchronized`, as .NET events. These contracts are used for exchanging time synchronization information between MassTransit and NServiceBus.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/nsb.md#2025-04-18_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n public class ClockUpdated :\n    IEvent\n{\n    public DateTime CurrentTime { get; set; }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class ClockSynchronized :\n    IEvent\n{\n    public string Host {get;set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Filters in MassTransit\nDESCRIPTION: Shows how to configure custom error filters for a receive endpoint, though this is typically not recommended unless necessary\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", ec =>\n{\n    ec.ConfigureError(x =>\n    {\n        x.UseFilter(new GenerateFaultFilter());\n        x.UseFilter(new ErrorTransportFilter());\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Content Type for Messages in MassTransit C#\nDESCRIPTION: This snippet sets a default content type to `application/json` for incoming messages without a specified content-type. It ensures the correct deserializer is used for content-type-less messages.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/integrations/external-systems.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nendpointConfigurator.DefaultContentType = new ContentType(\"application/json\");\nendpointConfigurator.UseRawJsonDeserializer();\n```\n\n----------------------------------------\n\nTITLE: Creating a MassTransit Consumer Saga\nDESCRIPTION: Command to create a Consumer Saga implementation for MassTransit. Creates a Saga and SagaDefinition in ~/Sagas, along with supporting messages in ~/Contracts.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtsaga\n```\n\n----------------------------------------\n\nTITLE: Adding Send Observer in C#\nDESCRIPTION: Demonstrates methods for adding a send observer to monitor outgoing messages\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSendObserver<SendObserver>();\n\nservices.AddSendObserver(provider => new SendObserver());\n```\n\n----------------------------------------\n\nTITLE: Implementing Compensating Activity in C#\nDESCRIPTION: Defines a compensating activity with argument and log types, supporting both execute and compensate operations for distributed transactions\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DownloadImageActivity :\n    IActivity<DownloadImageArguments, DownloadImageLog>\n{\n    Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> context);\n    Task<CompensationResult> Compensate(CompensateContext<DownloadImageLog> context);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order State in C# Saga\nDESCRIPTION: Defines a basic saga state machine instance with correlation ID and current state tracking for order processing\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/3.persistence.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event with CorrelatedBy Interface\nDESCRIPTION: Demonstrates how to declare an event using the built-in CorrelatedBy<Guid> interface for automatic correlation in a state machine\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderCanceled :\n    CorrelatedBy<Guid>\n{\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderCanceled);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Activity with Successful Completion in C#\nDESCRIPTION: Demonstrates executing an activity, saving an image, and completing without a compensation log\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> execution)\n{\n    DownloadImageArguments args = execution.Arguments;\n    string imageSavePath = Path.Combine(args.WorkPath, \n        execution.TrackingNumber.ToString());\n\n    await _httpClient.GetAndSave(args.ImageUri, imageSavePath);\n\n    return execution.Completed();\n}\n```\n\n----------------------------------------\n\nTITLE: Message Filter Configuration Observer\nDESCRIPTION: Configuration observer for creating message type-specific filters in the MassTransit pipeline\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MessageFilterConfigurationObserver :\n    ConfigurationObserver,\n    IMessageConfigurationObserver\n{\n    public void MessageConfigured<TMessage>(IConsumePipeConfigurator configurator)\n        where TMessage : class\n    {\n        var specification = new MessageFilterPipeSpecification<TMessage>();\n        configurator.AddPipeSpecification(specification);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TransitionTo Anti-Pattern - C#\nDESCRIPTION: This snippet highlights a potential anti-pattern within saga state machines indicating that if additional activities occur after a TransitionTo call, they may prevent the instance from being persisted correctly due to thrown exceptions.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/1.state.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public State Submitted { get; private set; } = null!;\n    public State Accepted { get; private set; } = null!;\n\n    public OrderStateMachine() \n    {\n        Initially(\n            When(OnSubmit)\n                .Then(context => context.Saga.CustomerNumber = context.Message.CustomerNumber)\n                .TransitionTo(Submitted)\n                .Then(context => throw new InvalidOperationException()) \n                .TransitionTo(Accepted)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDbSagaRepository in C#\nDESCRIPTION: Initializes a new instance of MongoDbSagaRepository using a MongoDB URL. Dependencies include a valid MongoDB URL and MassTransit.MongoDbIntegration package.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar repository = new MongoDbSagaRepository(new MongoUrl(\"mongodb://localhost/masstransitTest\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring LogContext with ILoggerFactory in MassTransit\nDESCRIPTION: This code snippet configures the LogContext for MassTransit with an instance of ILoggerFactory, enabling logging capabilities. It should be executed before bus configuration to ensure that logging is set up correctly.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nLogContext.ConfigureCurrentLogContext(loggerFactory);\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Insights with OpenTelemetry for ASP.NET Core Application - C#\nDESCRIPTION: This code snippet demonstrates how to configure Application Insights in an ASP.NET Core application with OpenTelemetry. It outlines setting up the required connection string for both tracing and metrics before exporting telemetry data.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nvoid ConfigureResource(ResourceBuilder r)\n{\n    r.AddService(\"Service Name\",\n        serviceVersion: \"Version\",\n        serviceInstanceId: Environment.MachineName);\n}\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(ConfigureResource)\n    .WithTracing(b => b\n        .AddSource(DiagnosticHeaders.DefaultListenerName) // MassTransit ActivitySource\n        .AddAzureMonitorTraceExporter(\n        {\n            o.ConnectionString = \"<Your Connection String>\";\n        }))\n    .WithMetrics(b => b\n        .AddMeter(InstrumentationOptions.MeterName) // MassTransit Meter\n        .AddAzureMonitorMetricExporter(o =>\n        {\n            o.ConnectionString = \"<Your Connection String>\";\n        }));\n```\n\n----------------------------------------\n\nTITLE: Creating Message-Specific Entity Name Formatter in MassTransit\nDESCRIPTION: This snippet shows how to implement IMessageEntityNameFormatter<T> to create a custom naming formatter for a specific message type. The example implementation returns the name of the message type as the entity name.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass FancyNameFormatter<T> :\n    IMessageEntityNameFormatter<T>\n{\n    public string FormatEntityName()\n    {\n        // seriously, please don't do this, like, ever.\n        return type(T).Name.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Quorum Queues in MassTransit\nDESCRIPTION: This code snippet demonstrates how to set job consumer options for RabbitMQ in MassTransit, allowing the creation of quorum queues. This configuration is essential for ensuring compatibility with recent RabbitMQ changes regarding temporary queues.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nx.SetJobConsumerOptions()\n    .Endpoint(e =>\n    {\n        e.AddConfigureEndpointCallback(cfg =>\n        {\n            if (cfg is IRabbitMqReceiveEndpointConfigurator rmq)\n                rmq.SetQuorumQueue();\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Deleting Expired GridFS Data Using C#\nDESCRIPTION: C# code example for a hosted service that deletes expired GridFS data using MongoDB.Bson library and GridFSBucket. It can be scheduled or executed as needed to maintain data hygiene.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMongoClient client = new MongoClient(connectionString);\nIMongoDatabase database = client.GetDatabase(databaseName);\nvar bucket = new GridFSBucket(database);\n\nDateTime now = DateTime.UtcNow;\n\nvar filter = Builders<GridFSFileInfo>.Filter.Lte(x => x.Metadata[\"expiration\"], now);\nvar sort = Builders<GridFSFileInfo>.Sort.Descending(x => x.Length);\nvar options = new GridFSFindOptions\n{\n    Sort = sort\n};\n\nusing (var cursor = await bucket.FindAsync(filter, options))\n{\n    await cursor.ForEachAsync(async file =>\n    {\n        await bucket.DeleteAsync(file.Id);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container\nDESCRIPTION: Command to run the official PostgreSQL Docker image on the default port 5432, with an alternative command for ARM platforms.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/5.postgresql.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 5432:5432 postgres\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --platform linux/arm64 -p 5432:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Using DbContext Transaction Filter in Controller Action\nDESCRIPTION: This snippet illustrates how to apply the database context transaction filter to a controller action for automatic transaction handling, simplifying the code by eliminating manual transaction management.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/transactions.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyController : ControllerBase\n{\n    private readonly ITransactionalBus _transactionalBus;\n    private readonly MyDbContext _dbContext;\n\n    public ValuesController(ITransactionalBus transactionalBus, MyDbContext dbContext)\n    {\n        _transactionalBus = transactionalBus;\n        _dbContext = dbContext;\n    }\n\n    [HttpPost]\n    [DbContextTransactionFilter]\n    public async Task<IActionResult> Post([FromBody] string value)\n    {\n        _dbContext.Posts.Add(new Post{...});\n        await _dbContext.SaveChangesAsync();\n\n        await _transactionalBus.Publish(new PostCreated{...});\n\n        return Ok();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Convention Extension Method\nDESCRIPTION: Provides an extension method to centralize partition key formatter configuration for multiple message types, simplifying bus configuration\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MessageConventionExtensions\n{\n    public static void UseMessagePartitionKeyFormatters(this IBusFactoryConfigurator cfg)\n    {\n        cfg.SendTopology.UsePartitionKeyFormatter<CustomerCreatedEvent>(x => x.Message.CustomerId);\n        cfg.SendTopology.UsePartitionKeyFormatter<CustomerUpdatedEvent>(x => x.Message.CustomerId);\n        cfg.SendTopology.UsePartitionKeyFormatter<CustomerDeletedEvent>(x => x.Message.CustomerId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Message Data Repository\nDESCRIPTION: Demonstrates how to create a MongoDB GridFS message data repository\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/8.claim-check.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nIMessageDataRepository CreateRepository(string connectionString, string databaseName)\n{\n    return new MongoDbMessageDataRepository(connectionString, databaseName);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an InitiateSimpleSaga Message Class in C#\nDESCRIPTION: Defines a message class for initiating a saga, implementing the CorrelatedBy interface. It requires a correlation ID of type Guid and is used to trigger saga processes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nclass InitiateSimpleSaga :\n        CorrelatedBy<Guid>\n    {\n        public InitiateSimpleSaga(Guid correlationId)\n        {\n            CorrelationId = correlationId;\n        }\n\n        public Guid CorrelationId { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Bus Observer in C#\nDESCRIPTION: Demonstrates two methods for adding a bus observer to the service collection for monitoring bus lifecycle events\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddBusObserver<BusObserver>();\n\nservices.AddBusObserver(provider => new BusObserver());\n```\n\n----------------------------------------\n\nTITLE: Adding Consume Observer in C#\nDESCRIPTION: Shows methods for adding a consume observer to monitor message consumption events\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddConsumeObserver<ConsumeObserver>();\n\nservices.AddConsumeObserver(provider => new ConsumeObserver());\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Consumer Session Options in C#\nDESCRIPTION: This code snippet demonstrates how to configure session-based batch options for a MassTransit consumer using the `SetServiceBusSessionBatchOptions` method. It sets the message limit per session, the maximum number of concurrent sessions, the session idle timeout, and the overall time limit for the batch.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/3.azure-service-bus.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nAddConsumer<MyBatchConsumer>(cfg =>\n{\n    cfg.SetServiceBusSessionBatchOptions(o =>            \n        o.SetMessageLimitPerSession(8)\n            .SetMaxConcurrentSessions(4)\n            .SetSessionIdleTimeout(TimeSpan.FromSeconds(30))\n            .SetTimeLimit(TimeSpan.FromSeconds(5))\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Endpoints in ASP.NET\nDESCRIPTION: Maps health check endpoints for ready and live status checks in an ASP.NET application. The ready endpoint filters checks with the 'ready' tag while the live endpoint includes all health checks.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapHealthChecks(\"/health/ready\", new HealthCheckOptions()\n{\n    Predicate = (check) => check.Tags.Contains(\"ready\"),\n});\n\napp.MapHealthChecks(\"/health/live\", new HealthCheckOptions());\n```\n\n----------------------------------------\n\nTITLE: Publishing a Saga Initiation Message in C#\nDESCRIPTION: Demonstrates how to create and publish an InitiateSimpleSaga message to commence a saga. Requires MassTransit and a configured bus control.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar id = Guid.NewGuid();\n\nvar message = new InitiateSimpleSaga(id);\n\nawait busControl.Publish(message);\n```\n\n----------------------------------------\n\nTITLE: Creating a MassTransit State Machine Saga\nDESCRIPTION: Command to create a State Machine Saga implementation for MassTransit. Creates a StateMachine in ~/StateMachines and an example event in ~/Contracts.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtstatemachine\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Message Scheduler in MassTransit with RabbitMQ\nDESCRIPTION: This code shows how to set up MassTransit with a delayed message scheduler for RabbitMQ. It adds and configures the delayed message scheduler for use with RabbitMQ.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/5.scheduling.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddDelayedMessageScheduler();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.UseDelayedMessageScheduler();\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Message to Topic in SQL\nDESCRIPTION: Publishes a message to a specified topic using `publish_message`, which includes a range of customization by using extensive message properties. The message type and other identifiers make it highly versatile.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\npublish_message(entity_name text,\n             priority integer DEFAULT NULL,\n             transport_message_id uuid DEFAULT gen_random_uuid(),\n             body jsonb DEFAULT NULL,\n             binary_body bytea DEFAULT NULL,\n             content_type text DEFAULT NULL,\n             message_type text DEFAULT NULL,\n             message_id uuid DEFAULT NULL,\n             correlation_id uuid DEFAULT NULL,\n             conversation_id uuid DEFAULT NULL,\n             request_id uuid DEFAULT NULL,\n             initiator_id uuid DEFAULT NULL,\n             source_address text DEFAULT NULL,\n             destination_address text DEFAULT NULL,\n             response_address text DEFAULT NULL,\n             fault_address text DEFAULT NULL,\n             sent_time timestamptz DEFAULT NULL,\n             headers jsonb DEFAULT NULL,\n             host jsonb DEFAULT NULL,\n             partition_key text DEFAULT NULL,\n             routing_key text DEFAULT NULL,\n             delay interval DEFAULT INTERVAL '0 seconds',\n             scheduling_token_id uuid DEFAULT NULL,\n             max_delivery_count int DEFAULT 10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SQS Transport Options in C#\nDESCRIPTION: Shows how to configure Amazon SQS transport options using the AddOptions method. This allows for manual configuration of options or binding them to a configuration section.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/4.amazon-sqs.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOptions<AmazonSqsTransportOptions>()\n    .Configure(options =>\n    {\n        // configure options manually, but usually bind them to a configuration section\n    });\n```\n\n----------------------------------------\n\nTITLE: UUID String Collection in JSON Format\nDESCRIPTION: A collection of UUID strings formatted in the standard 8-4-4-4-12 pattern. Each UUID is enclosed in double quotes and separated by commas, suggesting this is part of a JSON array.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"{9C009738-F5E6-43E3-B2F1-BF2E7A73402F}\",\n    \"{A61320AE-8509-4818-B4B1-70E2D68F772D}\",\n    \"{5B04192E-C059-4B31-BC51-732A1FCE98C3}\",\n    \"{DEC836DF-82A5-4F6D-9A5F-A8580BB614FA}\",\n    \"{5620C89D-F6D5-4DAC-89A3-B2B43BAE22E4}\",\n    \"{8F231B59-F23A-467B-A3D0-EE007DB01483}\",\n    \"{B29F8DE4-48BE-4064-99E1-F023635039FE}\",\n    \"{FD93DF8F-45F1-4D73-8817-3299D87CEBCE}\",\n    \"{C5CB386E-6A79-4896-86BE-43727F367D96}\",\n    \"{582F2EA9-401C-4C04-AFCB-773D44B40FE7}\",\n    \"{3775EC3F-7579-44D4-A76A-DE61B0CF9768}\",\n    \"{B4DAF5FF-0307-4FE4-8D25-83D19829F25B}\",\n    \"{452F3CEC-888D-423B-B12F-DE017E321E04}\",\n    \"{21522F65-41A2-4128-B7B4-A1F475A57537}\",\n    \"{43084974-54B2-4C41-85E3-3180974E4F66}\",\n    \"{72B71B00-4BE5-492B-B3A5-2EF76B194EBE}\",\n    \"{1E6D4245-8EA1-41A2-AE3B-D34C91B05E44}\",\n    \"{AE2CB22B-E2A5-47C6-9A17-2A30A2D7069C}\",\n    \"{A23C7DAB-83FD-44A1-9A06-9733EB826997}\",\n    \"{3C7C1DD3-DD52-4DA0-8972-D9C68F6B4A29}\",\n    \"{32216EF0-949A-4B93-BC90-0D5B3B0DE5FC}\",\n    \"{D7E50363-2187-42D7-99C9-620D1DFF0864}\",\n    \"{612E1039-D22D-4D56-AB68-683F72C0DBF0}\",\n    \"{7B056C63-95B6-4569-BC36-4348BA59EE8D}\",\n    \"{FFB455C2-1E64-4E77-8B31-CFB073414FFA}\",\n    \"{4754F7C4-CDD1-479F-B018-CA94CBC1887E}\",\n    \"{40799C79-335D-4B2D-8C39-71170FF3D25C}\",\n    \"{A9D0D552-D70C-495F-9B38-3351BF0F0B3E}\",\n    \"{891904DF-7DCF-4B3C-BFA5-12C45308822D}\",\n    \"{19B0C97B-399C-48A5-87CD-AD88E02A1B1E}\",\n    \"{D5A19737-CDED-4D4A-AD69-7F29BE581EC2}\",\n    \"{9B3B5BED-378D-42A3-8954-6721965D722F}\",\n    \"{BBECFE1A-4385-43BC-8AA9-35A26E4DAA4D}\",\n    \"{15D6D29D-875F-4C6C-905F-874225A003B1}\",\n    \"{AC318BBE-A64B-455E-8F95-A78A887366C8}\",\n    \"{E72751DF-52F1-4139-982D-79656951FB54}\",\n    \"{F9377A73-9933-409D-9B17-DB541A69F0A9}\",\n    \"{2F569CAE-54AD-4FC0-B974-21664118525C}\",\n    \"{F2459E2A-BBE4-439F-82EB-A1623DF6A836}\",\n    \"{70C1AE1D-679E-4459-9AB6-0799FC0F3022}\",\n    \"{65D9283C-7ED7-4343-8DAC-AA15C031A837}\",\n    \"{6DFBB942-527A-416D-BF6B-DA5298588248}\",\n    \"{82FC1070-4722-4E34-B619-BCBA23751E2F}\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Saga State with DynamoDB Version Support\nDESCRIPTION: Example of implementing a saga state class that includes the required ISagaVersion interface for DynamoDB optimistic concurrency support. The class includes essential properties for correlation, versioning, state tracking, and business data.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/dynamodb.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance,\n    ISagaVersion\n{\n    public Guid CorrelationId { get; set; }\n    public int Version { get; set; }\n    public string CurrentState { get; set; }\n    public DateTime? OrderDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessFile Command Contract in C#\nDESCRIPTION: Defines a simple record type in C# called `ProcessFile` within the `Acme` namespace. This contract is intended for processing messages related to file operations, specifically implemented as a record in C# 9.0 or newer.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/4.amazon-sqs.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic record ProcessFile\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with MassTransit in C#\nDESCRIPTION: This snippet demonstrates how to configure the publishing properties for messages in MassTransit, adjusting parameters like durability and exchange type.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/2.rabbitmq.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.Publish<OrderSubmitted>(x =>\n{\n    x.Durable = false; // default: true\n    x.AutoDelete = true; // default: false\n    x.ExchangeType = \"fanout\"; // default, allows any valid exchange type\n});\n\ncfg.Publish<OrderEvent>(x =>\n{\n    x.Exclude = true; // do not create an exchange for this type\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Topology to Exclude Message Types in MassTransit\nDESCRIPTION: This snippet shows how to configure the publish topology to exclude a message type during bus configuration, as an alternative to using the ExcludeFromTopology attribute.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/1.message.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nx.UsingRabbitMq((context,cfg) =>\n{\n    cfg.Publish<ICommand>(p => p.Exclude = true);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating Topic in SQL\nDESCRIPTION: The `create_topic` function is used to create a new topic. This is a foundational operation for defining a message transport structure. The function requires the topic name as an input and has no additional prerequisites.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate_topic(topic_name text)\n```\n\n----------------------------------------\n\nTITLE: Deleting Expired GridFS Data in JavaScript\nDESCRIPTION: JavaScript code for removing expired documents stored in MongoDB's GridFS. It operates within a Mongo Shell context to clean unnecessary data based on expiration metadata.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar docs = db.getMongo().getDB(\"masstransit\");\nvar now = new Date().toISOString();\n\nvar cursor = docs.fs.files.find({\"metadata.expiration\" : {$lte : new Date(now)}});\n\ncursor.forEach(function (toDelete) {\n    var id = toDelete._id;\n    docs.fs.chunks.remove({files_id : id});\n    docs.fs.files.remove({_id : id});\n});\n```\n\n----------------------------------------\n\nTITLE: Local Testing Azure Functions Settings\nDESCRIPTION: Local configuration file for Azure Functions with connection strings and runtime settings for testing in a local development environment\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/21.azure-functions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"IsEncrypted\": false,\n  \"Values\": {\n    \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\",\n    \"AzureWebJobsStorage\": \"\",\n    \"AzureWebJobsServiceBus\": \"\",\n    \"AzureWebJobsEventHub\": \"\",\n    \"FUNCTIONS_EXTENSION_VERSION\": \"~4\",\n    \"APPINSIGHTS_INSTRUMENTATIONKEY\": \"\",\n    \"APPLICATIONINSIGHTS_CONNECTION_STRING\": \"InstrumentationKey=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Concurrency Limit in MassTransit (C#) [Deprecated]\nDESCRIPTION: Example showing how to use the deprecated concurrency limit filter on a receive endpoint. This limits the endpoint to processing 4 messages concurrently.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/1.filters.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"submit-order\", e =>\n{\n    e.UseConcurrencyLimit(4);\n\n    e.ConfigureConsumer<SubmitOrderConsumer>(context);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ProcessId in NewId Library\nDESCRIPTION: This example illustrates configuring NewId to include a process-specific identifier, which is useful when multiple processes on the same host generate identifiers. The use of SetProcessIdProvider ensures the uniqueness of identifiers across processes by replacing part of the MAC address with the processId.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/12.newid.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nNewId.SetProcessIdProvider(new CurrentProcessIdProvider());\n```\n\n----------------------------------------\n\nTITLE: Adding MassTransit Package\nDESCRIPTION: This snippet demonstrates how to add the MassTransit messaging framework package to a .NET project using the .NET CLI. It's essential for initializing MassTransit in your application, enabling you to take advantage of its messaging capabilities. Ensure that the .NET SDK is installed prior to executing this command.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/0.index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package MassTransit\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Consumer - C#\nDESCRIPTION: This snippet defines a consumer class that listens for GettingStarted messages and logs the received text.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace GettingStarted.Consumers;\n\nusing System.Threading.Tasks;\nusing Contracts;\nusing MassTransit;\nusing Microsoft.Extensions.Logging;\n\npublic class GettingStartedConsumer :\n    IConsumer<GettingStarted>\n{\n    readonly ILogger<GettingStartedConsumer> _logger;\n\n    public GettingStartedConsumer(ILogger<GettingStartedConsumer> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task Consume(ConsumeContext<GettingStarted> context)\n    {\n        _logger.LogInformation(\"Received Text: {Text}\", context.Message.Value);\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Discarding Skipped Messages in MassTransit\nDESCRIPTION: Demonstrates how to configure a receive endpoint to discard skipped messages instead of moving them to the skipped queue\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.ReceiveEndpoint(\"input-queue\", ec =>\n{\n    ec.DiscardSkippedMessages();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Transport Options\nDESCRIPTION: This code snippet demonstrates how to set various SQL transport options, including host, database name, schema, and role. It is essential for customizing transport configurations beyond the default settings.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddOptions<SqlTransportOptions>().Configure(options =>\n{\n    options.Host = \"localhost\";\n    options.Database = \"sample\";\n    options.Schema = \"transport\"; // the schema for the transport-related tables, etc.\n    options.Role = \"transport\";   // the role to assign for all created tables, functions, etc.\n    options.Username = \"masstransit\";  // the application-level credentials to use\n    options.Password = \"H4rd2Gu3ss!\";\n    options.AdminUsername = builder.Username; // the admin credentials to create the tables, etc.\n    options.AdminPassword = builder.Password;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Receive Endpoint Observer in C#\nDESCRIPTION: Shows methods for adding a receive endpoint observer to monitor endpoint-specific events\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/observability.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddReceiveEndpointObserver<ReceiveEndpointObserver>();\n\nservices.AddReceiveEndpointObserver(provider => new ReceiveEndpointObserver());\n```\n\n----------------------------------------\n\nTITLE: Purging Queue in SQL\nDESCRIPTION: Removes all messages in a queue using `purge_queue`. This operation also extends to error and dead-letter sub-queues. The primary input is the name of the queue to be purged.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\npurge_queue(queue_name text)\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Queue Name Prefix\nDESCRIPTION: This snippet shows how to set a prefix for temporary queue names. This can be used to support namespaces in queue names, which Artemis can then use to enforce security policies.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/5.activemq.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SetTemporaryQueueNamePrefix(\"mycustomnamespace.\");\n```\n\n----------------------------------------\n\nTITLE: Installing MassTransit.RabbitMQ NuGet Package\nDESCRIPTION: Command to add the MassTransit RabbitMQ package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/2.rabbitmq.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package MassTransit.RabbitMQ\n```\n\n----------------------------------------\n\nTITLE: Probing MassTransit Bus Configuration\nDESCRIPTION: This C# snippet demonstrates setting up a MassTransit bus using RabbitMQ and probing its configuration. Dependencies include MassTransit and RabbitMQ. Key parameters are the host URL and queue details. The bus is configured with endpoints and consumers, and the probe returns a detailed object graph of the bus configuration, displayed as a JSON string.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/show-configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar busControl = Bus.Factory.CreateUsingRabbitMq(cfg =>\n{\n    cfg.Host(\"rabbitmq://localhost/test\");\n\n    sbc.ReceiveEndpoint(\"input_queue\", ec =>\n    {\n        ec.Consumer<UpdateCustomerAddressConsumer>();\n    })\n});\n\nProbeResult result = busControl.GetProbeResult();\n\nConsole.WriteLine(result.ToJsonString());\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Queue in SQL\nDESCRIPTION: The `send_message` function dispatches messages with several optional parameters, such as message type, priority, and delay to a designated queue, revealing extensive customization for transport processes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nsend_message(entity_name text,\n             priority integer DEFAULT NULL,\n             transport_message_id uuid DEFAULT gen_random_uuid(),\n             body jsonb DEFAULT NULL,\n             binary_body bytea DEFAULT NULL,\n             content_type text DEFAULT NULL,\n             message_type text DEFAULT NULL,\n             message_id uuid DEFAULT NULL,\n             correlation_id uuid DEFAULT NULL,\n             conversation_id uuid DEFAULT NULL,\n             request_id uuid DEFAULT NULL,\n             initiator_id uuid DEFAULT NULL,\n             source_address text DEFAULT NULL,\n             destination_address text DEFAULT NULL,\n             response_address text DEFAULT NULL,\n             fault_address text DEFAULT NULL,\n             sent_time timestamptz DEFAULT NULL,\n             headers jsonb DEFAULT NULL,\n             host jsonb DEFAULT NULL,\n             partition_key text DEFAULT NULL,\n             routing_key text DEFAULT NULL,\n             delay interval DEFAULT INTERVAL '0 seconds',\n             scheduling_token_id uuid DEFAULT NULL,\n             max_delivery_count int DEFAULT 10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer with Database Transaction in MassTransit\nDESCRIPTION: Example of a consumer that uses a database session to process an order. This consumer may throw database exceptions like ADOException which would benefit from retry policies.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/4.exceptions.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubmitOrderConsumer :\n    IConsumer<SubmitOrder>\n{\n    ISessionFactory _sessionFactory;\n\n    public async Task Consume(ConsumeContext<SubmitOrder> context)\n    {\n        using(var session = _sessionFactory.OpenSession())\n        using(var transaction = session.BeginTransaction())\n        {\n            var customer = session.Get<Customer>(context.Message.CustomerId);\n\n            // continue with order processing\n\n            transaction.Commit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image with Buildkit\nDESCRIPTION: This command builds a Docker image using buildkit.  It specifies the Dockerfile to use, tags the image, and sets the build context. DOCKER_BUILDKIT=1 enables the BuildKit backend for the docker build command.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Benchmark/README.md#2025-04-18_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nDOCKER_BUILDKIT=1 docker build -f Dockerfile -t \\<your-tag> ../../\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Service with Topology-Only Deployment\nDESCRIPTION: Demonstrates how to configure MassTransit services with DeployTopologyOnly flag enabled. This setup includes adding a consumer, setting the endpoint name formatter, and configuring RabbitMQ with topology-only deployment.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/6.topology/deploy.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.AddConsumer<SubmitOrderConsumer>(typeof(SubmitOrderConsumerDefinition));\n\n    x.SetKebabCaseEndpointNameFormatter();\n\n    x.UsingRabbitMq((context, cfg) =>\n    {\n        cfg.DeployTopologyOnly = true;\n\n        cfg.ConfigureEndpoints(context);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Partition Key Formatting\nDESCRIPTION: Shows how to configure automatic partition key formatting based on message content during bus configuration using a send topology convention\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nx.UsingSqlServer((context, cfg) => \n{\n    cfg.SendTopology.UsePartitionKeyFormatter<CustomerUpdatedEvent>(x => x.Message.CustomerId);\n});\n```\n\n----------------------------------------\n\nTITLE: Requeuing Messages in SQL\nDESCRIPTION: The `requeue_messages` function repositions messages from error or dead-letter queues back to the main queue, allowing a controlled redelivery with specified delay and count parameters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nrequeue_messages(queue_name text, \n                 source_queue_type int, \n                 target_queue_type int, \n                 message_count int,\n                 delay interval DEFAULT INTERVAL '0 seconds', \n                 redelivery_count int DEFAULT 10)\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Package\nDESCRIPTION: Command to add the MassTransit Azure Service Bus Core package to the project using the dotnet CLI.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/3.azure-service-bus.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet add package MassTransit.Azure.ServiceBus.Core\n```\n\n----------------------------------------\n\nTITLE: Disabling Consume Topology Configuration\nDESCRIPTION: This snippet shows how to disable the consume topology configuration. This is useful when you need to avoid using dotted queue names which can break pub/sub message routing in ActiveMQ. When disabled, the virtual consumer queues are not created.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/5.activemq.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nendpoint.ConfigureConsumeTopology = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring PartitionKey for Message Routing\nDESCRIPTION: Shows how to use a custom partition key formatter to distribute messages across partitions based on a specific message property\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic record SubmitOrder\n{\n    public string CustomerId { get; init; }\n    public Guid TransactionId { get; init; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.Send<SubmitOrder>(x =>\n{\n    x.UsePartitionKeyFormatter(context => context.Message.CustomerId);\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative MongoMessageDataRepository Constructor in C#\nDESCRIPTION: Demonstrates an alternative constructor for MongoMessageDataRepository by passing database host and name strings, facilitating large message management in MongoDB.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar repository = new MongoMessageDataRepository(\"mongodb://localhost\", \"masstransitTest\");\n```\n\n----------------------------------------\n\nTITLE: Creating a MassTransit Routing Slip Execute Activity\nDESCRIPTION: Command to create a Routing Slip Execute Activity for MassTransit. Creates an Activity and ActivityArguments classes in the ~/Activities folder.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/templates.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new mtexecactivity\n```\n\n----------------------------------------\n\nTITLE: Installing MassTransit MongoDb Integration using Package Manager\nDESCRIPTION: The command installs MassTransit.MongoDbIntegration, which is necessary for integrating MongoDB with MassTransit. Ensure that the package manager console is accessible before running the command.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package MassTransit.MongoDbIntegration\n```\n\n----------------------------------------\n\nTITLE: Raw JSON Message Example\nDESCRIPTION: This JSON represents a raw message format that may be used when interacting with systems that do not use MassTransit for message production. It simplifies the messaging structure.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/serialization.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"orderId\": \"181c0000-6393-3630-36a4-08daf4e7c6da\",\n    \"timestamp\": \"2023-01-12T21:55:53.714Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Completed Instance Removal in MassTransit Saga\nDESCRIPTION: This snippet demonstrates how to configure a saga state machine to remove completed instances from the saga repository. It uses the SetCompletedWhenFinalized method to specify that instances in the Final state should be considered completed and therefore eligible for removal.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface OrderCompleted\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    public OrderStateMachine()\n    {\n        Event(() => OrderCompleted, x => x.CorrelateById(context => context.Message.OrderId));\n\n        DuringAny(\n            When(OrderCompleted)\n                .Finalize());\n\n        SetCompletedWhenFinalized();\n    }\n\n    public Event<OrderCompleted> OrderCompleted { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoMessageDataRepository in C#\nDESCRIPTION: Initializes a new instance of MongoMessageDataRepository using a MongoDB URL, enabling storage of large messages in GridFS. Dependencies include a valid MongoDB URL and MassTransit MongoDB integration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar repository = new MongoMessageDataRepository(new MongoUrl(\"mongodb://localhost/masstransitTest\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET Generic Host Shutdown Timeout\nDESCRIPTION: This snippet sets a shutdown timeout for the .NET Generic Host. The configuration is achieved using Microsoft's service configuration model.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<HostOptions>(\n        opts => opts.ShutdownTimeout = TimeSpan.FromMinutes(1));\n```\n\n----------------------------------------\n\nTITLE: MassTransit Health Check JSON Response Example\nDESCRIPTION: Example of a successful health check response showing the status, duration, and endpoint details for a RabbitMQ connection.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/0.index.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"Healthy\",\n  \"totalDuration\": \"00:00:00.2134026\",\n  \"entries\": {\n    \"masstransit-bus\": {\n      \"data\": {\n        \"Endpoints\": {\n          \"rabbitmq://localhost/dev-local/SubmitOrder\": {\n            \"status\": \"Healthy\",\n            \"description\": \"ready\"\n          }\n        }\n      },\n      \"description\": \"Ready\",\n      \"duration\": \"00:00:00.1853530\",\n      \"status\": \"Healthy\",\n      \"tags\": [\n        \"ready\",\n        \"masstransit\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the MassTransit Application\nDESCRIPTION: Command to run the configured MassTransit application with Azure Service Bus integration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/3.azure-service-bus.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: ZBase32 Lowercase Identifier Array\nDESCRIPTION: An array of randomly generated ZBase32 encoded lowercase strings, potentially used for alternative identifier representation\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"6438a9rkzbnjtmrz8jooxeouby\",\n    \"4dzqisje9bbixejfstb6ezopby\",\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeouts in MassTransit Test Harness\nDESCRIPTION: Demonstrates how to set test timeouts in the MassTransit Test Harness using C#. Define both overall test timeout and inactivity timeout for more control over test execution timing. Essential for tests where controlling the maximum waiting time is necessary for performance and debugging.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/5.testing.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SetTestTimeouts(TimeSpan.FromSeconds(60), TimeSpan.FromSeconds(5)));\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SetTestTimeouts(testTimeout: TimeSpan.FromSeconds(60));\n```\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.SetTestTimeouts(testInactivityTimeout: TimeSpan.FromSeconds(5));\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Telemetry in C#\nDESCRIPTION: Configuration method to disable MassTransit usage telemetry during service configuration, preventing any anonymous data collection\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/usage-telemetry.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.DisableUsageTelemetry();\n});\n```\n\n----------------------------------------\n\nTITLE: Collection of Uppercase Hexadecimal GUIDs without Dashes\nDESCRIPTION: An array of GUIDs formatted as uppercase hexadecimal strings without dashes. Each GUID is a 32-character string that could be used as unique identifiers in a system.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"EB1C920C1AED48E5999158499ED00596\",\n    \"EEAC71BF3AA94855BB3870D1D5B42193\",\n    \"96E54A7CA27F461EA2EEFBC0127EBB13\",\n    \"EACEDADE1CA14095BA6D436F6DE2A6E9\",\n    \"6181A92E8F8543B7B86C6C3086A84A23\",\n    \"A0C0B1DE6A3A41ABAF18E7D646E7FC0B\",\n    \"D13C576BFE11419F86FC9F31A8EB173E\",\n    \"C2829776F0E0419E9EB0E3686CF2D648\",\n    \"9C71412598604C53B21D6FAEE57A90D6\",\n    \"9F9377A59D994A2F8DACB58C3FA16AEE\",\n    \"731D2E09D2D743B79502A61D0B11FC24\",\n    \"BD1F9028532C4A8AB12D17AD7381D22D\",\n    \"E37580F77193461EA1EC4346A8F65D48\",\n    \"74ECFC778A044363BADFEDF2BFF4697B\",\n    \"74ECFC778A044363BADFEDF2BFF4697B\",\n    \"74ECFC778A044363BADFEDF2BFF4697B\",\n    \"F01DF6C0F5ED497BA036214593EE24AB\",\n    \"53446A490BA542B39E58F646879A361C\",\n    \"8EC17724B2044781B091C3B939940055\",\n    \"F780723318C647B4BCF925D470421560\",\n    \"DAFC7925F5EA437E845DF687F5580E89\",\n    \"DA7B81B5A1884F9C91EBEF781857225B\",\n    \"8086DF3B2B484DCBBC9DFE6E114066C4\",\n    \"6A4EA5E51F8E491AB0D4739B492BCB5F\",\n    \"6A4EA5E51F8E491AB0D4739B492BCB5F\",\n    \"6A4EA5E51F8E491AB0D4739B492BCB5F\",\n    \"6A4EA5E51F8E491AB0D4739B492BCB5F\",\n    \"6A4EA5E51F8E491AB0D4739B492BCB5F\",\n    \"9C009738F5E643E3B2F1BF2E7A73402F\",\n    \"A61320AE85094818B4B170E2D68F772D\",\n    \"5B04192EC0594B31BC51732A1FCE98C3\",\n    \"DEC836DF82A54F6D9A5FA8580BB614FA\",\n    \"5620C89DF6D54DAC89A3B2B43BAE22E4\",\n    \"8F231B59F23A467BA3D0EE007DB01483\",\n    \"B29F8DE448BE406499E1F023635039FE\",\n    \"FD93DF8F45F14D7388173299D87CEBCE\",\n    \"C5CB386E6A79489686BE43727F367D96\",\n    \"582F2EA9401C4C04AFCB773D44B40FE7\",\n    \"3775EC3F757944D4A76ADE61B0CF9768\",\n    \"B4DAF5FF03074FE48D2583D19829F25B\",\n    \"452F3CEC888D423BB12FDE017E321E04\",\n    \"21522F6541A24128B7B4A1F475A57537\",\n    \"4308497454B24C4185E33180974E4F66\",\n    \"72B71B004BE5492BB3A52EF76B194EBE\",\n    \"1E6D42458EA141A2AE3BD34C91B05E44\",\n    \"AE2CB22BE2A547C69A172A30A2D7069C\",\n    \"A23C7DAB83FD44A19A069733EB826997\",\n    \"3C7C1DD3DD524DA08972D9C68F6B4A29\",\n    \"32216EF0949A4B93BC900D5B3B0DE5FC\",\n    \"D7E50363218742D799C9620D1DFF0864\",\n    \"612E1039D22D4D56AB68683F72C0DBF0\",\n    \"7B056C6395B64569BC364348BA59EE8D\",\n    \"FFB455C21E644E778B31CFB073414FFA\",\n    \"4754F7C4CDD1479FB018CA94CBC1887E\",\n    \"40799C79335D4B2D8C3971170FF3D25C\",\n    \"A9D0D552D70C495F9B383351BF0F0B3E\",\n    \"891904DF7DCF4B3CBFA512C45308822D\",\n    \"19B0C97B399C48A587CDAD88E02A1B1E\",\n    \"D5A19737CDED4D4AAD697F29BE581EC2\",\n    \"9B3B5BED378D42A389546721965D722F\",\n    \"BBECFE1A438543BC8AA935A26E4DAA4D\",\n    \"15D6D29D875F4C6C905F874225A003B1\",\n    \"AC318BBEA64B455E8F95A78A887366C8\",\n    \"E72751DF52F14139982D79656951FB54\",\n    \"F9377A739933409D9B17DB541A69F0A9\",\n    \"2F569CAE54AD4FC0B97421664118525C\",\n    \"F2459E2ABBE4439F82EBA1623DF6A836\",\n    \"70C1AE1D679E44599AB60799FC0F3022\",\n    \"65D9283C7ED743438DACAA15C031A837\",\n    \"6DFBB942527A416DBF6BDA5298588248\",\n    \"82FC107047224E34B619BCBA23751E2F\"\n  ]\n```\n\n----------------------------------------\n\nTITLE: Global Topology Correlation Configuration for Event\nDESCRIPTION: Shows how to specify correlation for an event using global message topology configuration, allowing declarative correlation without modifying message contracts\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/6.saga/2.state-machine.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface SubmitOrder\n{\n    Guid OrderId { get; }\n}\n\npublic class OrderStateMachine :\n    MassTransitStateMachine<OrderState>\n{\n    static OrderStateMachine()\n    {\n        GlobalTopology.Send.UseCorrelationId<SubmitOrder>(x => x.OrderId);\n    }\n\n    public OrderStateMachine()\n    {\n        Event(() => SubmitOrder);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Telemetry Options in C#\nDESCRIPTION: Method to add custom configuration to MassTransit usage telemetry, such as providing a custom customer identifier\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/usage-telemetry.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMassTransit(x =>\n{\n    x.ConfigureUsageTelemetryOptions(options =>\n    {\n        options.CustomerId = \"8675309\";\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Sample Code for MassTransit and AWS Lambda Integration\nDESCRIPTION: A markdown link to the GitHub repository containing sample code for integrating MassTransit with AWS Lambda. The sample is based on MassTransit version 8.0.0.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/22.aws-lambda.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Sample Code](https://github.com/MassTransit/Sample-LambdaFunction)\n```\n\n----------------------------------------\n\nTITLE: MassTransit GUID Collection\nDESCRIPTION: A comprehensive list of string-based UUIDs used within the MassTransit project for unique identification purposes. These identifiers could represent message types, endpoints, or system components.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"{8C4F46C7-100B-47B0-8C36-FC2C3CDEFFC9}\", \"{69697CB9-3751-483E-B6E0-BEEB0F9DF9DE}\", ...]\n```\n\n----------------------------------------\n\nTITLE: Displaying Dashed Hexadecimal GUIDs in Lowercase with Curly Braces\nDESCRIPTION: A collection of GUIDs/UUIDs formatted with dashes, written in lowercase hexadecimal, and enclosed in curly braces. This format is commonly used in various programming contexts including Windows Registry, COM objects, and database systems.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n{f6b27c7c-8ab8-4498-ac97-3a6107a21320},\n{d0eeead9-28f8-4357-a125-b443e45e0d20},\n{5f469e82-a819-467b-b5e5-ee0660155c16},\n{74be6de6-9c88-4c01-af3f-599b14acc1ce},\n{0c8fcf91-c3dc-4fa0-8395-c7732ebd85a5},\n{049d94d4-942f-4757-828e-7cb29823acf0},\n{d55448ae-5b2f-4d1c-a893-6fc99bcb8867},\n{9a9241b3-39a6-4efc-8474-5d3750b3939c},\n{0b7aee2e-ff45-45bc-bc5d-4423f639970a},\n{83ca841b-7c5e-44bb-85c8-9536498d4e3f}\n```\n\n----------------------------------------\n\nTITLE: GUID String Collection\nDESCRIPTION: A collection of unique identifier strings in GUID/UUID format, each enclosed in curly braces and quotes. Used for system identification and reference purposes.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{4de38ba6-1357-4f60-8a1b-2cd33734d4f6}\",\n\"{c5e6cc6f-87da-4def-9458-7e9ecfbbd46b}\",\n\"{c6065d28-ce28-4579-9168-f799049c3b67}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Custom Activity for MassTransit State Machine\nDESCRIPTION: This snippet demonstrates implementing a custom activity that can handle any event type in MassTransit. It implements IStateMachineActivity<TInstance> and provides overloaded Execute and Faulted methods to handle both generic and specific event types, making it more flexible for different event scenarios.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/1.sagas/9.custom.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderClosedActivity :\n    IStateMachineActivity<OrderState>\n{\n    readonly ISomeService _service;\n\n    public OrderClosedActivity(ISomeService service)\n    {\n        _service = service;\n    }\n\n    public async Task Execute(BehaviorContext<OrderState> context, IBehavior<OrderState> next)\n    {\n        await _service.OnOrderClosed(context.Saga.CorrelationId);\n\n        // always call the next activity in the behavior\n        await next.Execute(context).ConfigureAwait(false);\n    }\n\n    public async Task Execute<T>(BehaviorContext<OrderState, T> context, IBehavior<OrderState, T> next)\n    {\n        await _service.OnOrderClosed(context.Saga.CorrelationId);\n\n        // always call the next activity in the behavior\n        await next.Execute(context).ConfigureAwait(false);\n    }\n\n    public Task Faulted<TException>(BehaviorExceptionContext<OrderState, TException> context, IBehavior<OrderState> next) \n        where TException : Exception\n    {\n\n        // always call the next activity in the behavior\n        return next.Faulted(context);\n    }\n\n    public Task Faulted<T, TException>(BehaviorExceptionContext<OrderState, T, TException> context, IBehavior<OrderState, T> next)\n        where TException : Exception\n    {\n\n        // always call the next activity in the behavior\n        return next.Faulted(context);\n    }\n\n    public void Probe(ProbeContext context)\n    {\n        context.CreateScope(\"publish-order-closed\");\n    }\n\n    public void Accept(StateMachineVisitor visitor)\n    {\n        visitor.Visit(this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PipeContext Management with GreenPipes in C#\nDESCRIPTION: The first code snippet defines the PipeContext interface in C#, essential for implementing context management in GreenPipes. It includes methods for checking, retrieving, and manipulating payloads within a context. Dependencies include a basic understanding of GreenPipes and .NET's CancellationToken. It requires the context to have the capability of managing LIFO payload collections.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/3.middleware/0.index.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface PipeContext\n{\n    /// <summary>\n    /// Used to cancel the execution of the context\n    /// </summary>\n    CancellationToken CancellationToken { get; }\n\n    /// <summary>\n    /// Checks if a payload is present in the context\n    /// </summary>\n    bool HasPayloadType(Type payloadType);\n\n    /// <summary>\n    /// Retrieves a payload from the pipe context\n    /// </summary>\n    /// <typeparam name=\"T\">The payload type</typeparam>\n    /// <param name=\"payload\">The payload</param>\n    /// <returns></returns>\n    bool TryGetPayload<T>(out T payload)\n        where T : class;\n\n    /// <summary>\n    /// Returns an existing payload or creates the payload using the factory method provided\n    /// </summary>\n    /// <typeparam name=\"T\">The payload type</typeparam>\n    /// <param name=\"payloadFactory\">The payload factory is the payload is not present</param>\n    /// <returns>The payload</returns>\n    T GetOrAddPayload<T>(PayloadFactory<T> payloadFactory)\n        where T : class;\n\n    /// <summary>\n    /// Either adds a new payload, or updates an existing payload\n    /// </summary>\n    /// <param name=\"addFactory\">The payload factory called if the payload is not present</param>\n    /// <param name=\"updateFactory\">The payload factory called if the payload already exists</param>\n    /// <typeparam name=\"T\">The payload type</typeparam>\n    /// <returns></returns>\n    T AddOrUpdatePayload<T>(PayloadFactory<T> addFactory, UpdatePayloadFactory<T> updateFactory)\n        where T : class;\n\n```\n\n----------------------------------------\n\nTITLE: Running the MassTransit Project with Amazon SQS\nDESCRIPTION: Command to run the .NET project after configuring it to use Amazon SQS transport with MassTransit.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/4.amazon-sqs.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for MassTransit Contribution\nDESCRIPTION: Git configuration command to turn off autocrlf, which is a requirement for contributing to the MassTransit project.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.autocrlf false\n```\n\n----------------------------------------\n\nTITLE: Uppercase Dashed Hex GUIDs List\nDESCRIPTION: A collection of GUIDs in uppercase dashed hexadecimal format, enclosed in curly braces and separated by commas.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n{F6B27C7C-8AB8-4498-AC97-3A6107A21320}, {D0EEEAD9-28F8-4357-A125-B443E45E0D20}, ...\n```\n\n----------------------------------------\n\nTITLE: Converting NewId to String and Byte Array in .NET\nDESCRIPTION: This snippet shows how to convert a NewId object into a string representation or create a NewId from a string or byte array. Conversions to and from strings or byte arrays allow for flexible handling and storage of NewId objects.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/12.newid.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Formats to 11790000-CF25-B808-2365-08D36732603A\nstring identifier = NewId.Next().ToString(\"D\").ToUpperInvariant();\n\n// Convert from a string\nNewId newId = new NewId(\"11790000-cf25-b808-dc58-08d367322210\");\n\n// Convert from a byte array\nvar bytes = new byte[] { 16, 23, 54, 74, 21, 14, 75, 32, 44, 41, 31, 10, 11, 12, 86, 42 };\nNewId newId = new NewId(bytes);\n```\n\n----------------------------------------\n\nTITLE: Building MassTransit Project in .NET\nDESCRIPTION: Command to build the MassTransit project using the .NET CLI after cloning the repository.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Setting Job Properties and Instance Properties in MassTransit\nDESCRIPTION: This code snippet demonstrates how to set job properties and instance properties in MassTransit for custom job distribution strategies. It configures the `ConvertVideoConsumer` with retry intervals, timeout, concurrent job limit, job type properties (DistributionStrategy), and instance properties (MachineType).\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/3.patterns/13.job-consumers.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nx.AddConsumer<ConvertVideoConsumer>(c =>\n    c.Options<JobOptions<ConvertVideo>>(options => options\n        .SetRetry(r => r.Interval(3, TimeSpan.FromSeconds(30)))\n        .SetJobTimeout(TimeSpan.FromMinutes(10))\n        .SetConcurrentJobLimit(10)\n        .SetJobTypeProperties(p => p.Set(\"DistributionStrategy\", \"MachineType\"))\n        .SetInstanceProperties(p => p.Set(\"MachineType\", \"S-Class\"))));\n```\n```\n\n----------------------------------------\n\nTITLE: Alternative MongoDbSagaRepository Constructor in C#\nDESCRIPTION: Provides an alternative way to create MongoDbSagaRepository by directly specifying the database host and name as string parameters.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/src/Persistence/MassTransit.MongoDbIntegration/readme.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar repository = new MongoDbSagaRepository(\"mongodb://localhost\", \"masstransitTest\");\n```\n\n----------------------------------------\n\nTITLE: Touch Queue in SQL\nDESCRIPTION: If an auto-delete queue does not receive messages for a set period, `touch_queue` updates metrics to prevent its automatic deletion. It is only called when no messages have been recently enqueued.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ntouch_queue(queue_name text)\n```\n\n----------------------------------------\n\nTITLE: Defining Saga State Class in C# for NHibernate and MassTransit\nDESCRIPTION: This code snippet defines an OrderState class that represents the state of a saga. It includes properties for correlation, current state, order date, and version (for optimistic concurrency).\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/nhibernate.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderState :\n    SagaStateMachineInstance\n{\n    public Guid CorrelationId { get; set; }\n    public string CurrentState { get; set; }\n\n    public DateTime? OrderDate { get; set; }\n\n    // If using Optimistic concurrency, this property is required\n    public int Version { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NHibernate Saga Class Mapping in C# for MassTransit\nDESCRIPTION: This snippet shows how to create a SagaClassMapping for the OrderState class. It defines property mappings for CurrentState, OrderDate, and Version, with a note about the importance of CorrelationId mapping.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/4.persistence/nhibernate.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderStateMap : \n    SagaClassMapping<OrderState>\n{\n    public OrderStateMap()\n    {\n        Property(x => x.CurrentState, x => x.Length(64));\n        Property(x => x.OrderDate);\n\n        Property(x => x.Version); // If using Optimistic concurrency\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: List of GUIDs in String Format\nDESCRIPTION: A collection of Globally Unique Identifiers (GUIDs) formatted as 32-character hexadecimal strings enclosed in double quotes. These identifiers are typically used for uniquely identifying objects, entities, or resources within a system.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n    \"66B8B9DC28F347B3B505EFF781093D68\",\n    \"99B0A49572854F5698C97E4F0AC548A2\",\n    \"1729B75D72BF4907BA1E302703403F30\",\n    \"8A15ADE4859D4A3F90F77FC90776F1BE\",\n    \"F87B2182F9134ADDB630E42770D86581\",\n    \"DA97E2310B304DB8B88E166B230B6547\",\n    \"BD030AFFCB254D61AF6A2EE9D6092714\",\n    \"8A6C9896D294445B991D4BB4ABFCF674\",\n    \"6CF5CBDA5BEB474B943780151779F6EE\",\n    \"11C1967A6EAC42CFAA4F9669A7D501B4\",\n    \"D226268A62C342ACBA41B3E923045A85\",\n    \"7CAB565224CE494C8DE46916F7F155F7\",\n    \"E7340C62AB9642F29342BC881795A6A7\",\n    \"E494E182CA9C4CF7BF9116C48C23CEB9\",\n    \"D604E55DAA2E4830BA198E6F09D99029\",\n    \"C0D80711905B44879B4D314A32C013E1\",\n    \"BBC5CF5C7AE94116A8A7431983C64382\",\n    \"8ACFCAFB96FB4F1CA11C9DEE4FA70EC4\",\n    \"18E46C9E1F9148348A78373234D72B2E\",\n    \"4C36AF3FC1984FDA8FC8FEE696131A5A\",\n    \"56EC52709ED84AE5A1395BB2F4E14551\",\n    \"99F4CE757A9C448BA73A970C6696DBBF\",\n    \"7A5E424558074816B5717AA08B70CE16\",\n    \"7A5E424558074816B5717AA08B70CE16\",\n    \"922BCF2A52B14D36820E819F8A3B66B2\",\n    \"5C9108A93F304A988A77128EDDB3EE28\",\n    \"5C9108A93F304A988A77128EDDB3EE28\",\n    \"6186376A21BB4CB7B34A08CC2B4200FB\",\n    \"6186376A21BB4CB7B34A08CC2B4200FB\",\n    \"6E58B976292F476EACB82C414FEA3039\",\n    \"6E58B976292F476EACB82C414FEA3039\",\n    \"DBADAB4A2A2242A1B1117BFE8433148C\",\n    \"74E9B660627944ACB87B0A1143773977\",\n    \"3F06027ED21F4583BBBB706589AF2861\",\n    \"5870EB8DC30346E897EDAD396993F59F\",\n    \"910E2F16280A4F3396C2A58ED93C37F1\",\n    \"6ACFDC652E7944C49F8337DCF4C3CDE3\",\n    \"781431EE13D943B4B15065A50CA538ED\",\n    \"A40732FCA68949C488CDAD214C8163BA\",\n    \"2A7C4F5D5FF34130B01B5D367CF53F20\",\n    \"7E8D5A23FD3B48669809D592AF297AAE\",\n    \"4F7DEDD87E454E16A0BB3D8FE1D64E18\",\n    \"AB03292ACC364B15BA2E08CD2C5ABD7C\",\n    \"93B492575C2A47728E75F08B14153F5C\",\n    \"3F7D3D2D24EE4E2CB8EABD257206B709\",\n    \"F0C47830C3C04F5487C615CE4D64B576\",\n    \"B4A64EFCDFEF4BEA8E4D780ED38DC350\",\n    \"DE990EDF937A4089BB335A7B17305CEB\",\n    \"403C18F95EAF42F88C94321527F023FE\",\n    \"9F53395AB3344DA883689ED6051C8655\",\n    \"DDD363DC02EC489FBF08774DC2154393\",\n    \"DDD363DC02EC489FBF08774DC2154393\",\n    \"DDD363DC02EC489FBF08774DC2154393\",\n    \"DDD363DC02EC489FBF08774DC2154393\",\n    \"353BD8E9F9F2416798B75E6D449A4B45\",\n    \"3DE434B5D1C140ACA68C0BC35BD47942\",\n    \"E5F6C4762F42434DBAF1BD8095FC96C7\",\n    \"D48D186FACC144E89600E922CE34895E\",\n    \"28D704427A5641948DFA7C2E7B1D6AD4\",\n    \"CAE98046680A4D24B42A176BA1D93282\",\n    \"634E36DD5A7E4143B572496A6468EE3B\",\n    \"BD607EA66B2C461D9AAB6B363C64D323\",\n    \"BD607EA66B2C461D9AAB6B363C64D323\",\n    \"ED11ADA778434A1794C5FC8A83534615\",\n    \"66FD9142F70A4871AC832C03E3405488\",\n    \"4D35043580A6406186B72382B61190BE\",\n    \"CE4682BE9DA842E0B4D67641757F8C4D\",\n    \"CD11C801F1D041F2B693321BEBE204E4\",\n    \"EBD1BE42CABC4CFFBA50E88187DBCB2E\",\n    \"1A1224ACEB72442CA047BE2072A31128\",\n    \"403035EAE76A4230B881B6CC1BE69189\",\n    \"10D29FA1455247B88ACA3EBB763CD992\",\n    \"3112CFF36202419A9AFAF683DA6DFC95\",\n    \"1DA2CDB8DBCC4D96BCF280E6C66C1825\",\n    \"3A390C3CA38B4DFBA3C9B1E36F5E4905\",\n    \"5DAB7D4AA41B4A8B8D8A7866CCC823A8\",\n    \"249EC62995EE4DB79A3A97C99739B70D\",\n    \"249EC62995EE4DB79A3A97C99739B70D\",\n    \"249EC62995EE4DB79A3A97C99739B70D\",\n    \"249EC62995EE4DB79A3A97C99739B70D\",\n    \"249EC62995EE4DB79A3A97C99739B70D\",\n    \"C778DD103B834D4A90CA7A5A76068275\",\n    \"00BE0CBCBC994D259AC4EB5A72856B03\",\n    \"5500F2B786A240AD837CA88C12D24EC9\",\n    \"363B1520B1B74643B06A62B01346F90E\",\n    \"B7E3CEB5EE8C4F66B748ECDC15D9B00E\",\n    \"1AF744C769814D7DB5AEC5807A292881\",\n    \"2C86D48A77474EB2B0828040C5D66010\",\n    \"CAB8FA359D7E44CD9749AFEB5A031C0D\",\n    \"5530093148BF40AF82E3B8283C0FB5F5\",\n    \"9813ED77140743C0B4B51EC75BC32127\",\n    \"9813ED77140743C0B4B51EC75BC32127\",\n    \"B9902046ED444271B696549D412FDE6A\",\n    \"B2B2ED726138442FAEF1E5C122E128EB\",\n    \"1A1822493D044C6194789C45D575E9AB\",\n    \"1A1822493D044C6194789C45D575E9AB\",\n    \"1A1822493D044C6194789C45D575E9AB\",\n    \"2FC5C7D267E2495CA10602CDF1DC7D98\",\n    \"D34DB6C3AA1A40E8A7A2BDBEEDD2C8D0\",\n    \"D34DB6C3AA1A40E8A7A2BDBEEDD2C8D0\",\n    \"3A3C8956E5914D55AA1C919EB8F98E00\",\n    \"C58531B6FDC847C393892DB8BBDB2C2A\",\n    \"15247CF4EF13418682E767C49512DBDC\",\n    \"F59723D71E17446BBEB08542EC0857F2\",\n    \"0C7D92D6FD3C4210844067461F18CDE5\",\n    \"5D3955806A224D55812A318B03CCD9A1\",\n    \"7E5F652F23CF4706884D3C5773E680F3\",\n    \"7887662A256C44BB968C5A897D54620D\",\n    \"09C99647530D413CA3231DBEA6EA91C7\",\n    \"A5B7D39F334A4E9383C81818BDA156CC\",\n    \"72DE4B365017451C824AF59F9348CCA3\",\n    \"90F68CB761ED4F0D86C086C5D5C037B0\",\n    \"54BD4386EC644464ABE21C017305A123\",\n    \"207130C5F0E945418162DB48863288C7\",\n    \"D95FCB7C550241A99281D1A22349A694\",\n    \"B592A498182B4435A5392F838D650F2A\",\n    \"9D2517B21106446FAE5613E04A496883\",\n    \"151393D85AA049F5B164777B50CE650B\",\n    \"C69C546565464C8F8093579AF126276F\",\n    \"2A2A12C076FF4099880DF36CB2862B22\",\n    \"E5069DAB24F7403EAD1E994CA8D7DD59\",\n    \"F8B591888A874AEE9E3D8F9285D457F0\",\n    \"89EF982BA6424EDC8E254D64B2BA74AE\",\n    \"D7A1E46E4D694FC1802C4260AEF2E2B1\",\n    \"CCB3F14232964A889EFD15475EF32F4A\",\n    \"CCB3F14232964A889EFD15475EF32F4A\",\n    \"CCB3F14232964A889EFD15475EF32F4A\",\n    \"CCB3F14232964A889EFD15475EF32F4A\",\n    \"CCB3F14232964A889EFD15475EF32F4A\",\n    \"CCB3F14232964A889EFD15475EF32F4A\",\n    \"3602705EECA94FFFB10A3137E36EB42A\",\n    \"928122A14B4A4915B28D78B08263C3BB\",\n    \"01364E733D4E40F5A7983DE6FD6B9690\",\n    \"68CD1957C7224DA994E3391C358086AA\",\n    \"69AB86D5D4764968875FBE80B32BF59A\",\n    \"F522ED3513F441CBBD3F2E2C68100153\",\n    \"C5E27EF8539B4C2692188E36C27E1C4F\",\n    \"7F46847099DC41E6B904E9B67B216D21\",\n    \"E60DDFAD8FB641B5AB219DAF00C39425\",\n    \"05FBDA34543042C7963AC77465783CEF\",\n    \"FA31A0B1BAF140D7BC27AABC5D642CC3\",\n    \"E96A872C73A948C8950EEBD72FD258A3\",\n    \"8BB1CB51EDF045E6BA18EE6A02F49EAB\",\n    \"29F8CFA61ADB4FF99DC823993F3AC0B0\",\n    \"20F430802DCB4899A866B5957AE07B8D\",\n    \"25F1828224B0470FAB75D8A9BDCAD9BD\",\n    \"28333870EDA64F0BA6BBC712C14E34E8\",\n    \"928F0874797A4537844215DA9E916F01\",\n    \"8FB357E23C8C43DB84FD941A32086048\",\n    \"1FFF4DFC37D14C8E9B26203ADAE6AA1F\",\n    \"E10FC915D6704A1C8CC908A628CE9C89\",\n    \"3F38272028EF45BC80BAFA4E420E741E\",\n    \"3F38272028EF45BC80BAFA4E420E741E\",\n    \"3F38272028EF45BC80BAFA4E420E741E\",\n    \"5895534465574EE2A70846FC092E9EFB\",\n    \"54F59F4F5C5E408FBDD18FC70360ABC9\",\n    \"B5F558AAEB1343A28F5141FF3F5BC600\",\n    \"3C80488A6C59456BBE6C888E075B4468\",\n    \"2D10B3BA16734341AF554576717B21AC\",\n    \"0DE65E82782F4B3E8B6242A01B79AD49\",\n    \"808F1BBF2BAD4A5C85BF9480A93C096D\",\n    \"1A30E695629547139B3839DA6FDD3632\",\n    \"16F205F3E0164D17B2D32B09C3C3FCCA\",\n    \"6F3B3377C6674AEC8E3CF302D898C7C6\",\n    \"1D13973EB5614E4298B36F67BAF700BD\",\n    \"75FA18ED3B7C48AE8E6973CFC307F02B\",\n    \"892F07C3E54F40B19616850FF14FD818\",\n    \"EC2E4E2833CB4D5681C66DE94B6A6136\",\n    \"2953789388064B298696DBA6E2C84B29\",\n    \"E3C4D311A09F4A1E91117AC13ABD081A\",\n    \"4EB5B24797D745128900C423B8B41930\",\n    \"65DA3F9E7F6B4E7D8AE375AD091808A4\",\n    \"7886D17DE1C34B59A4003EA4C5E046FD\",\n    \"05B7650EDBBE4301B8CB9DCB498F0FA0\",\n    \"EB3F468FFFB84D868E522237376539BA\",\n    \"29B4E1057B7F494882E60B4C7FF27C0A\",\n    \"01BA2731B9714880BAC2DF398BCEB407\",\n    \"28DAC30D719B47E9BEE3627BDACE7B59\",\n    \"69F3518C244E437288F958E6ECAB0962\",\n    \"5B3A3DE3AF1B40CA86435F0AD4887B8E\",\n    \"BDB0B7A32F3A4D458C5269855C2B4E91\",\n    \"F854C4F7FB02494A827680E7389908CE\",\n    \"714171B4EC6F467588A8EDFA6591E77C\",\n    \"EB8EE9A41EAB4DBC92B11251715D029F\",\n    \"82AC130981E04BCB9601D8B8AF9EB4B2\",\n    \"0F2D316389454408BCF1F4EFFB83D65F\",\n    \"4D333C95A3A94FF5A124F55ECC0B0610\",\n    \"44AF3A97377C4D96B8A7C0BAFBAC8D2A\",\n    \"FAF250EE1A094DA99DBEFA3333719C01\",\n    \"9568536B354B49A29231DDD785AC10FC\",\n    \"46FC1AC6721B4D80A576846B2845C861\",\n    \"C327F51990024E5D8E5978CB5A880FD9\",\n    \"C83822137873451BA00F204596C44070\",\n    \"1B2E6C09C3A14C18A2FB99872B4E3957\",\n    \"D294D3D4D8404A938D43B1281F8FD33B\",\n    \"B77398DD32B44AC0845070872A0DE004\",\n    \"05869F20B8D541E39D0728B78EA52BBD\",\n    \"D41B29ED00B5437F9195C5D52F83BEB1\",\n    \"9542630BD70E45AABC78B14BD19586F4\",\n    \"661B27756E71450CB5B1A38D56BCD5D6\",\n    \"9775F2450F1C4E178BC09EEDE757E770\",\n    \"74777A04B9E748CD9F1C6D2BA8F9DF62\",\n    \"0788471C105845E9B7E3D9024DC7FD73\",\n    \"67E7E41C326B4945961692C7945AC1DA\",\n    \"A3F160DE42DA49B78821C737DBCD5D68\",\n    \"A4DE46E904304F50B8EFCBD77D53D6E2\",\n    \"803C36DF3CEC4FDBB74CAF3FE0686A74\",\n    \"1FC76B9FA55D42FAAF6E9180E753E4BF\",\n    \"9FE4AB8418B24DED95087F4500275E8A\",\n    \"AC5D6F355B5041068AE992A3CED67153\",\n    \"8DDD8E63DF5841A1AB4020703FE1D601\",\n    \"C833FD077A884CDB920DAFD06591DB44\",\n    \"6D3598E52E494088BDFBFC029DAF525D\",\n    \"404198D7729C4DE9A1A472D755B64D18\",\n    \"0B0D86D85134485D981C31F160019623\",\n    \"BB79876A8C214CE9A9E5B788EB86559B\",\n    \"F66440CFE28742F1905317854FD46068\",\n    \"70F35B08E32546C98C8FBDE34540A72C\",\n    \"388B523FF84244468296A8F1945E78C6\",\n    \"DC4C543992B0466E870BF9AF2D602396\",\n    \"D06DEFFC651A493492A0366837C88FE2\",\n    \"2CAE8CB3E04A4307B2CB394C1C0AEE86\",\n    \"572BE9FB59744920BF666B43B0511FED\",\n    \"4B2C7EF5F5A749299449C73BC8A86A2D\",\n    \"E75FE84D991849B5B881FC5D39EC22B4\",\n    \"676CC1D29ED44B7980C5225BBD4741A0\",\n    \"16FA0C55A96D4EA09F19D2336E7C87A0\",\n    \"306C319B65CF4A7B87C1E26CC0C67FFB\",\n    \"1FD96FDF54DD4FF989F0A2402408ECD7\",\n    \"D6C69253FD6A448CA08E0B92BE8541E0\",\n    \"6D3718AA3104409E9AE5F5E6B93B8F7A\",\n    \"B13244C7568346DB8165EA6577E4D317\",\n    \"03AE660FF2D94A638596D1682952D558\",\n    \"BAC674D4D57F4A6CBA2F6A09C7FF156C\",\n    \"450D548C47204E62BD9602D3CBC7FB7B\",\n    \"239EEB26033B45F48FAD4408AC4D95DB\",\n    \"17AF523111FB42FC980AA824DB30276B\",\n    \"7A9DA225EED146C7B004515ADDFF854B\",\n    \"14C8AEA11D80481FAFF89D617810F52A\",\n    \"10EDD02A6283473DB45B4E73E6C3DD2C\",\n    \"C6D55B105D41411D810403E1192E416B\",\n    \"B2C34D7B365F48DBA9D2C2334FC15F75\",\n    \"3D7BDF883B9445219A5734068D0AB033\",\n    \"45DDE4663782496196BC01449F56F8BA\",\n    \"9455DB0568D8476797B2F16E4B6B7E09\",\n    \"77C6FF1D29C3497BAE6BDE8232B67228\",\n    \"47B2620129B5404AA097541F4D5F890B\",\n    \"657E69923B794D81A4134C4247A08AF5\",\n    \"B4616BA9DF2D4DBE9EE8E15E8FCF55C6\",\n    \"57AEB422EC214CD39962414806A7D798\",\n```\n\n----------------------------------------\n\nTITLE: Running the Project - Bash\nDESCRIPTION: This snippet demonstrates the command to run the .NET application containing the MassTransit implementation.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/2.quick-starts/1.in-memory.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Base32 Encoded String List\nDESCRIPTION: A large collection of ZBase32Upper encoded strings, likely used for unique identifiers, tokens, or encoded data within the MassTransit system. Base32 encoding uses a 32-character alphabet consisting of uppercase letters A-Z and digits 2-7.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[\"6438A9RKZBNJTMRZ8JOOXEOUBY\",\n\"4DZQISJE9BBIXEJFSTB6EZOPBY\",\n\"M7DJ7YIEDFD8ZPXF7ADGYFKHYS\",\n\"Q19G53WHTBGYDM39MGPTJMGBGQ\",\n...]\n```\n\n----------------------------------------\n\nTITLE: Uppercase Alphanumeric Identifier Array\nDESCRIPTION: An array of randomly generated uppercase alphanumeric strings, likely used for unique identifiers or tokens\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"UYJSBLUFBFEBRNFRODRNND3XBN\",\n    \"LMCBSLWALFFTDPCROMVB7TUYGD\",\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Collection of Dashed Lowercase UUIDs\nDESCRIPTION: An array of UUIDs in the standard dashed format with lowercase hexadecimal characters. Each UUID follows the 8-4-4-4-12 character pattern with dashes between segments.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"f6b27c7c-8ab8-4498-ac97-3a6107a21320\",\n    \"d0eeead9-28f8-4357-a125-b443e45e0d20\",\n    \"5f469e82-a819-467b-b5e5-ee0660155c16\",\n    \"74be6de6-9c88-4c01-af3f-599b14acc1ce\",\n    \"0c8fcf91-c3dc-4fa0-8395-c7732ebd85a5\",\n    \"049d94d4-942f-4757-828e-7cb29823acf0\",\n    \"d55448ae-5b2f-4d1c-a893-6fc99bcb8867\",\n    \"9a9241b3-39a6-4efc-8474-5d3750b3939c\",\n    \"0b7aee2e-ff45-45bc-bc5d-4423f639970a\",\n    \"83ca841b-7c5e-44bb-85c8-9536498d4e3f\",\n    \"e3ddd8b8-de00-4adc-8919-f363a11c887a\",\n    \"65890e7b-387e-4127-8380-95f311834ebe\",\n    \"947058b3-258d-4336-b5a3-ca3abd61dc89\",\n    \"f4a6288f-723a-42e8-98fa-f0d5d3965fa2\",\n    \"280d2dd1-43d9-48a9-b59e-9af85ed9562e\",\n    \"5fecb3e2-2195-4da9-a7ce-f847158c90f9\",\n    \"7f9954e6-3178-49c9-a895-0914d62d099a\",\n    \"8008d19d-b0dd-4fc9-b426-4d3470653190\",\n    \"c55fd545-4f4c-4125-b6ae-0759c2dae53f\",\n    \"3e234716-8b74-4dba-917b-3bbf87e6b7db\",\n    \"3cce9f8d-7210-498f-91ac-9ae903a3c458\",\n    \"576cac72-6421-4783-997c-983da91ece7a\",\n    \"e53825d7-fc47-4f9b-a2b3-51f23711927c\",\n    \"be106dfd-3bd8-4416-8d08-38abb9a99ef9\",\n    \"e8c66d18-5dd7-4c54-a5cc-f28120676770\",\n    \"40e6ace0-2cf7-4271-9f86-eb2ab43d5e4f\",\n    \"b5118dea-40c7-4d96-9d8b-3f85b4b82133\",\n    \"291b7bf7-9162-41e0-a883-a7a83912994d\",\n    \"d3a1f14d-de16-478e-aa1a-48328c0cf0d3\",\n    \"4a647095-95b7-47a6-9d42-ac92d250404c\",\n    \"5b1bb752-a30f-4086-b29c-e7dda1b55a7d\",\n    \"49030149-2a8a-4be0-92d3-bcf9664ea569\",\n    \"5f483a3b-45bf-4ebe-84d2-2fd701bdeb00\",\n    \"5c4b822b-2479-45bf-8c05-fea9ec14ef24\",\n    \"8131892f-0df4-4662-bb3c-c3042a042731\",\n    \"8131892f-0df4-4662-bb3c-c3042a042731\",\n    \"6f419fd8-276b-47eb-a72e-faabbeea0929\",\n    \"a2fae046-418d-4ccd-a9f0-06bac41fbcec\",\n    \"7b9beac4-0308-4b09-98f5-c9236c1414a3\",\n    \"c6764a34-11a7-46bb-833e-692e17c5dcf5\",\n    \"08d32691-6b90-4065-86c0-1df84eb09e54\",\n    \"09f90a82-06bf-4dae-9ff9-628b15d7026a\",\n    \"c8c86bb8-c33f-453c-a939-95b0dd4e1a42\",\n    \"28168429-44f6-4157-bbbb-5dabf3d6a673\",\n    \"b348c490-37e4-48a0-ba72-1bfb7ba8478f\",\n    \"fff80c14-8913-4ae1-8242-f7e2ad24c66f\",\n    \"f99d5398-05a7-47c3-9d59-6872134f93a3\",\n    \"d7c9ab6c-a92a-4217-a30a-1173fe605721\",\n    \"cb7c3da1-889b-4f91-bf4e-1b001f1ab266\",\n    \"4c792210-b7bb-4c6d-b522-115c8e7d389c\",\n    \"f09933f3-9590-4f8a-a41c-6bc64f49ea44\",\n    \"a03706c2-d892-47e0-bdef-85d07db476bf\",\n    \"6691ac29-29ff-4454-bf09-5f2486e8c8b1\",\n    \"eae31a61-a432-4a58-a1cc-7357339a8318\",\n    \"70108778-b38b-47f8-a6bb-814ed90f6317\",\n    \"f71df28f-3ebd-4691-b432-ce5dd455d4dc\",\n    \"52f6e7f0-9dcd-4f9d-a38b-96dea749b08c\",\n    \"9baaeb77-4620-411e-a084-ee42af4ffeea\",\n    \"28d09c85-da21-4b73-a141-303c16a60be9\",\n    \"23298060-9dc8-4e0e-b75c-3af20e8bdee6\",\n    \"eea3605a-a06b-4568-a97a-e2b79fc3f279\",\n    \"8808408e-2e8c-4d82-b51a-e6ad642582bf\",\n    \"5cbdf9d9-7e40-4bd8-912c-58a7d596ba92\",\n    \"ab5ce272-242a-42e8-ab1a-6f56723f8e71\",\n    \"12e208b2-f058-4a9c-aff9-a9e4cf3a408d\",\n    \"be2a0e9d-a1a1-4b11-abba-70ae548be2ae\",\n    \"27e33ad1-fd44-471d-87fb-37b48e98b65b\",\n    \"5e63fbac-8cc8-4a92-8a89-1b0dfab60497\",\n    \"20cdd5c7-f492-4834-9c1e-8cfe0837acb3\",\n    \"e7286ba9-4e79-4c6a-b169-22c215daca3e\",\n    \"617c451d-eed8-45b2-9317-9e46e16ece28\",\n    \"fea9ac21-20a9-4e4f-8f1f-dd7636521125\",\n    \"ae746629-f6b6-45c6-99f3-483ee0f090cb\",\n    \"0f1ee816-6f5e-4e82-801a-8c4bd7388d41\",\n    \"8513c220-a657-490d-93bb-dcfc2ad1403f\",\n    \"cf8bb231-5b2a-43c8-ba37-9d7416a1247c\",\n    \"4e4c69d4-87d4-42e3-87ab-60a420fb44e6\",\n    \"fa363c91-1454-4254-9f40-e5e19992175b\",\n    \"3c56c6a6-4ec7-4d3b-b9c0-d2c1148ffc95\",\n    \"7ec9eabd-19aa-4091-b9ad-b998e708c645\",\n    \"577b09a3-bfa9-452f-ae95-c560c469d780\",\n    \"f8b45b61-2450-4b74-88dc-0550a7b52348\",\n    \"32133ba1-b9b4-4e12-9c5e-d51e8030491f\",\n    \"f6880940-5b8a-4ea2-8d43-775c94857576\",\n    \"32b6fd4a-8010-4d3f-bd47-e9357417fd9c\",\n    \"1a7e08a2-d9e5-472a-a62b-1c4025f8e680\",\n    \"e0e8e4ee-1867-4611-9f33-540bc8abfe67\",\n    \"166b699e-d3c2-4134-865b-915e22ffefc3\",\n    \"37c7d823-8a85-4047-a1f1-4a9b3bb9180e\",\n    \"ff9db983-6ab8-426e-8133-71ba9f02f57d\",\n    \"0026289d-14c9-45ce-954d-ab96ee50c0a4\",\n    \"112312ac-31fe-4ea5-b0c3-0e21143fa064\",\n    \"107d3f69-10bb-4db1-b02b-c1c6c133ce3d\",\n    \"f0382d0a-1dec-48d3-826e-e8f59bdf940e\",\n    \"1623aebb-d56a-470c-84b6-206c5f7ee6c8\",\n    \"0dffe0e6-c8d3-4ddb-be35-942b79651d98\",\n    \"99cab742-927e-4960-8c04-9f97c84da00c\",\n    \"a33dfbea-fc7c-4edd-832b-27df8161adcd\",\n    \"28ede124-b8f0-48d9-9afc-3b4b644e20c4\",\n    \"4b58a125-1abd-46c5-a8a8-b9f28b76b1e2\",\n    \"c68a24d7-71dc-4547-8593-fb6072a923fd\",\n    \"d19b93aa-84fe-48cf-9f83-e907ae6017e1\",\n    \"719bc6a6-eaf1-484c-b352-e185fbb811e3\",\n    \"14a90dbe-a53a-480d-adb9-32d6dda4cd75\",\n    \"2f4d10fa-a054-4f54-80f1-b4f5931fd490\",\n    \"38aa09ae-30f5-4698-9c10-32228c5c0200\",\n    \"188c33ab-22a5-411b-9957-f128a0aca2d5\",\n    \"49f84c56-68c2-42f8-84ab-de1f465a8f43\",\n    \"026e4311-f454-4da1-8a54-f74ee259a8d5\",\n    \"f1265ccd-b817-4e2a-b14c-118a5f4f3f80\",\n    \"92faa126-9981-48c8-88ca-0705d1c9a531\",\n    \"1c1ded68-6dd6-4418-9bc0-d16f4d201a53\",\n    \"9c9679c4-b1b8-4e93-b86f-9f97e2422aae\",\n    \"d689d925-6f09-49e2-8c08-37494335e36f\",\n    \"f5a083c5-3732-4e25-9b18-0ec106087b7a\",\n    \"acbc7257-9953-430b-badc-3c18e1f3c086\",\n    \"566a4afe-5dbf-42e4-aa77-f93e78d67c23\",\n    \"95caf3b3-8a26-4890-92f6-12af0cd10222\",\n    \"c66bb486-46b4-47a4-b36d-c156e5160bdf\",\n    \"1b73d184-05f4-4f0d-b63b-7767d4557932\",\n    \"ef3ab9f3-a9d2-4d0b-be80-f8bd294aa489\",\n    \"84e5440d-b962-45aa-9f9c-bf28e35dc699\",\n    \"4f7d6138-8661-45e0-b053-a123eea35481\",\n    \"44702514-d35b-4e01-8d9f-0656d1d13029\",\n    \"6d0ef027-d760-4868-a21b-bf4f39117447\",\n    \"6a3aab7a-f72e-40d8-8e2d-9134b697b5af\",\n    \"86f60a7c-3d8b-432d-a661-3ed3c35e2597\",\n    \"24635d6f-3524-41f3-bbad-2c5779fc59f3\",\n    \"3d3d7f13-ba8a-4868-bd4e-1969c35820bb\",\n    \"c982fce6-56e2-417c-9c02-a326e15c74ec\",\n    \"c745039b-4a4e-4d14-9cb5-0dadda705851\",\n    \"385666e1-08cd-4b51-82df-fc72484c8155\",\n    \"0db8d15d-f914-49f0-9e44-9d12ced8b4f9\",\n    \"3d3d42c5-c686-43bc-b63a-41977f063c85\",\n    \"b625718b-61c6-424a-9694-20c9b023be29\",\n    \"c76acea0-3f4f-4aeb-87ca-7ee7a47c26f5\",\n    \"55713ddd-c0f4-46c8-91a5-d133f487be3b\",\n    \"f4150821-b7ea-4039-ba6f-899e4f4d7533\",\n    \"af98daaf-63da-4024-9f99-4552b5809800\",\n    \"4e43b456-f13e-4532-8830-77242395ea76\",\n    \"a7e57f7b-99d4-4a42-b349-c7e651b108cb\",\n    \"27d6040a-7b5f-4859-bacc-ead16ab0ad5a\",\n    \"cf3904db-2e15-40d1-8582-8c4b0a049ff3\",\n    \"9263f444-9a65-4e9a-87c5-b54c00472973\",\n    \"6941e141-783d-47d5-ab16-08cc8aee55a8\",\n    \"a2856ea2-ff9b-4cf0-a750-82fad091746f\",\n    \"0c404a9f-2840-49aa-a5ac-1c015072bb5f\",\n    \"8a14285e-4f63-45b6-b841-02b416d1fa1e\",\n    \"6b97ccaf-c1f4-4bcb-aa20-4331457c7fc9\",\n    \"2ac24bcc-8e1b-498d-996c-3328f313e915\",\n    \"98b1953d-c50c-42e9-9951-3f68be78a867\",\n    \"62b42344-5362-4366-98eb-74f10faf84a9\",\n    \"9bb060a5-f53a-41df-99d8-655ac997275a\",\n    \"69cbf890-5abd-48e0-8577-9382753a06e6\",\n    \"d041ab02-f75a-4570-aa9d-cf80db890ed4\",\n    \"1f5f28c8-7c69-4171-8dc4-ebc222e539b1\",\n    \"f4bedb6d-84b2-4b7a-bdfc-4271b75027bb\",\n    \"2953a732-8746-4713-9f79-dac64f44b1de\",\n    \"576a86a9-fc38-4648-88c6-250e42d0d68f\",\n    \"7c82c989-6643-4c36-b475-828f547c9775\",\n    \"15128352-f403-48d9-9e6b-741af00e42db\",\n    \"425218f1-034b-4781-a347-1283435b554e\"\n]\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with MassTransit and RabbitMQ\nDESCRIPTION: Illustrates configuring MassTransit's test harness with RabbitMQ transport within a .NET test case. This snippet shows a basic RabbitMQ setup for testing a consumer with given credentials and broker address.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task Should_use_broker()\n{\n    await using var provider = new ServiceCollection()\n        .AddMassTransitTestHarness(x =>\n        {\n            x.AddConsumer<SubmitOrderConsumer>();\n\n            x.UsingRabbitMq((context, cfg) =>\n            {\n                cfg.Host(\"some-broker-address\", h =>\n                {\n                    h.Username(\"joe\");\n                    h.Password(\"cool\");\n                });\n\n                cfg.ConfigureEndpoints(context);\n            });\n        })\n        .BuildServiceProvider(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Docus Starter Template Using Nuxi\nDESCRIPTION: Command to clone the Docus starter template repository using the Nuxt CLI tool 'nuxi'. This initializes a new documentation project named 'docs' based on the nuxt-themes/docus-starter template.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init docs -t nuxt-themes/docus-starter\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessFileCommand Record (C#)\nDESCRIPTION: This C# record implements the `ProcessFile` interface. It represents a concrete command that triggers the processing of a file. It includes properties for `FileId` and `Location`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic record ProcessFileCommand :\n    ProcessFile\n{\n    public Guid FileId { get; init; }\n    public Uri Location { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing GUID List in JSON\nDESCRIPTION: This JSON code snippet contains an array of GUIDs (Globally Unique Identifiers), which can be used for uniquely identifying records or resources within an application context. The array is part of a configuration or data file, with each string representing a unique identifier. The list does not specify constraints or applications but serves as a reference guide for maintaining or accessing unique GUIDs as needed.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Guids\": [\n    \"{F6B27C7C-8AB8-4498-AC97-3A6107A21320}\",\n    \"{D0EEEAD9-28F8-4357-A125-B443E45E0D20}\",\n    \"{5F469E82-A819-467B-B5E5-EE0660155C16}\",\n    \"{74BE6DE6-9C88-4C01-AF3F-599B14ACC1CE}\",\n    \"{0C8FCF91-C3DC-4FA0-8395-C7732EBD85A5}\",\n    \"{049D94D4-942F-4757-828E-7CB29823ACF0}\",\n    \"{D55448AE-5B2F-4D1C-A893-6FC99BCB8867}\",\n    \"{9A9241B3-39A6-4EFC-8474-5D3750B3939C}\",\n    \"{0B7AEE2E-FF45-45BC-BC5D-4423F639970A}\",\n    ...\n    \"{B3BAF6F9-D17B-448F-B420-F7470A09BB32}\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building for Edge Side Rendering\nDESCRIPTION: Command to build the Docus site for edge side rendering deployment. This allows deployment to various platforms like Vercel Functions, Netlify Functions, AWS, and most Node-compatible environments.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: String Identifier Collection\nDESCRIPTION: A series of alphanumeric string identifiers, each 25 characters long, likely used as unique identifiers within the system\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nxjxrrtkay7rbppmtxkoeshgqys\n1eih6k11sfgupyoqogxawq5gf1\nm1eotkj9gbfjtnuznk8p5c9qbe\nm1eotkj9gbfjtnuznk8p5c9qbe\ncgddq4tbzpgmxc4kbdgnsooy85\n...\n```\n\n----------------------------------------\n\nTITLE: Generating Static Site\nDESCRIPTION: Command to generate a static version of the Docus site. This produces HTML files in the .output/public directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate\n```\n\n----------------------------------------\n\nTITLE: Random Generated IDs\nDESCRIPTION: Collection of generated unique identifiers in two different formats - base64-like uppercase strings (32 chars) and hex lowercase strings (32 chars)\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n\"ZIO87JUMFTDB5GIMPC5DA3GUBD\",\n\"f6b27c7c8ab84498ac973a6107a21320\",\n\"d0eeead928f84357a125b443e45e0d20\"\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Standard Format GUIDs List\nDESCRIPTION: A collection of GUIDs in standard format with lowercase hexadecimal characters, enclosed in curly braces and separated by commas.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n{28dac30d-719b-47e9-bee3-627bdace7b59}, {69f3518c-244e-4372-88f9-58e6ecab0962}, ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Transport Type in C#\nDESCRIPTION: This snippet shows how to change the transport type for Azure Service Bus to use AMQP over WebSockets. The configuration is done within the Host method using a transport type setting. A valid ServiceBusTransportType is needed as a prerequisite.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/3.azure-service-bus.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncfg.Host(connectionString, h =>\n{\n    h.TransportType = ServiceBusTransportType.AmqpWebSockets;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Receive Mode with Delivery Limit\nDESCRIPTION: Shows how to configure a partitioned concurrent receive mode with a specific concurrent delivery limit for a batch consumer\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nx.AddConsumer<BulkUpdateConsumer>(c => c.Options<BatchOptions>(o =>\n{\n    o.GroupBy<BulkUpdateMessage, string>(m => m.PartitionKey());\n    o.SetConcurrencyLimit(10);\n    o.SetMessageLimit(10);\n    o.SetTimeLimit(ms: 10);\n}))\n.Endpoint(e => e.AddConfigureEndpointCallback(cfg =>\n{\n    if (cfg is ISqlReceiveEndpointConfigurator sql)\n    {\n        sql.SetReceiveMode(SqlReceiveMode.PartitionedConcurrent);\n        sql.ConcurrentDeliveryLimit = 10;\n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining FileReceivedEvent Record (C#)\nDESCRIPTION: This C# record implements both the `FileReceived` and `CustomerDataReceived` interfaces. It represents a concrete event that carries information about a received file and associated customer data.  It includes properties for `FileId`, `Timestamp`, `Location`, `CustomerId`, and `SourceAddress`.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic record FileReceivedEvent :\n    FileReceived,\n    CustomerDataReceived\n{\n    public Guid FileId { get; init; }\n    public DateTime Timestamp { get; init; }\n    public Uri Location { get; init; }\n    public string CustomerId { get; init; }\n    public string SourceAddress { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MassTransit Host Options\nDESCRIPTION: This code snippet configures MassTransit host options within a .NET application by setting timeout parameters for start and stop operations. It requires `Microsoft.Extensions.DependencyInjection` for service configuration.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/4.support/4.upgrade.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<MassTransitHostOptions>(options =>\n{\n    options.WaitUntilStarted = true;\n    options.StartTimeout = TimeSpan.FromSeconds(30);\n    options.StopTimeout = TimeSpan.FromMinutes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing an Order Submitted Message in C#\nDESCRIPTION: This snippet defines the record `OrderSubmitted` and a method `NotifyOrderSubmitted` that publishes an instance of the `OrderSubmitted` message using the `IPublishEndpoint` to notify of an order submission.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/3.producers.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic record OrderSubmitted\n{\n    public string OrderId { get; init; }\n    public DateTime OrderDate { get; init; }\n}\n\npublic async Task NotifyOrderSubmitted(IPublishEndpoint publishEndpoint)\n{\n    await publishEndpoint.Publish<OrderSubmitted>(new()\n    {\n        OrderId = \"27\",\n        OrderDate = DateTime.UtcNow,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileReceivedEvent Event Contract in C#\nDESCRIPTION: Defines a simple record type in C# called `FileReceivedEvent` within the `Acme` namespace. This contract is for representing events related to files being received, facilitating event-driven architectures.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/4.amazon-sqs.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic record FileReceivedEvent\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Activity Completion with Compensation Log in C#\nDESCRIPTION: Shows how to complete an activity while storing compensation data for potential rollback or recovery\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/1.concepts/7.routing-slips.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<ExecutionResult> Execute(ExecuteContext<DownloadImageArguments> execution)\n{\n    DownloadImageArguments args = execution.Arguments;\n    string imageSavePath = Path.Combine(args.WorkPath, \n        execution.TrackingNumber.ToString());\n\n    await _httpClient.GetAndSave(args.ImageUri, imageSavePath);\n\n    return execution.Completed<DownloadImageLog>(new {ImageSavePath = imageSavePath});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String for SQL Transport\nDESCRIPTION: This snippet retrieves a connection string from the configuration settings and uses it to configure SQL transport options, specifically setting the connection string for 'SqlTransportOptions'.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"Db\");\n\nbuilder.Services.AddOptions<SqlTransportOptions>()\n    .Configure(options =>\n    {\n        options.ConnectionString = connectionString;\n    });\n```\n\n----------------------------------------\n\nTITLE: Renewing Message Lock in SQL\nDESCRIPTION: Extend the lock on a fetched message with `renew_message_lock`. This function helps extend processing time by updating the lock duration using given parameters, efficiently managing message processing workflows.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/2.configuration/2.transports/6.sql.md#2025-04-18_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nrenew_message_lock(message_delivery_id bigint, \n                   lock_id uuid, \n                   duration interval)\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessFile Interface (C#)\nDESCRIPTION: This C# interface defines the contract for a command related to file processing. `ProcessFile` includes `FileId` and `Location`. This interface is used to define the structure of the command sent to consumers.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/3.azure-service-bus.md#2025-04-18_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Acme;\n\npublic interface ProcessFile\n{\n    Guid FileId { get; }\n    Uri Location { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: UUID Collection in MassTransit Project\nDESCRIPTION: A list of UUID strings formatted in the standard 8-4-4-4-12 hexadecimal pattern. These UUIDs likely serve as unique identifiers for various components within the MassTransit distributed application framework.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n    \"4D350435-80A6-4061-86B7-2382B61190BE\",\n    \"CE4682BE-9DA8-42E0-B4D6-7641757F8C4D\",\n    \"CD11C801-F1D0-41F2-B693-321BEBE204E4\",\n    \"EBD1BE42-CABC-4CFF-BA50-E88187DBCB2E\",\n    \"1A1224AC-EB72-442C-A047-BE2072A31128\",\n    \"403035EA-E76A-4230-B881-B6CC1BE69189\",\n    \"10D29FA1-4552-47B8-8ACA-3EBB763CD992\",\n    \"3112CFF3-6202-419A-9AFA-F683DA6DFC95\",\n    \"1DA2CDB8-DBCC-4D96-BCF2-80E6C66C1825\",\n    \"3A390C3C-A38B-4DFB-A3C9-B1E36F5E4905\",\n    \"5DAB7D4A-A41B-4A8B-8D8A-7866CCC823A8\",\n    \"249EC629-95EE-4DB7-9A3A-97C99739B70D\",\n    \"249EC629-95EE-4DB7-9A3A-97C99739B70D\",\n    \"249EC629-95EE-4DB7-9A3A-97C99739B70D\",\n    \"249EC629-95EE-4DB7-9A3A-97C99739B70D\",\n    \"249EC629-95EE-4DB7-9A3A-97C99739B70D\",\n    \"C778DD10-3B83-4D4A-90CA-7A5A76068275\",\n    \"00BE0CBC-BC99-4D25-9AC4-EB5A72856B03\",\n    \"5500F2B7-86A2-40AD-837C-A88C12D24EC9\",\n    \"363B1520-B1B7-4643-B06A-62B01346F90E\",\n    \"B7E3CEB5-EE8C-4F66-B748-ECDC15D9B00E\",\n    \"1AF744C7-6981-4D7D-B5AE-C5807A292881\",\n    \"2C86D48A-7747-4EB2-B082-8040C5D66010\",\n    \"CAB8FA35-9D7E-44CD-9749-AFEB5A031C0D\",\n    \"55300931-48BF-40AF-82E3-B8283C0FB5F5\",\n    \"9813ED77-1407-43C0-B4B5-1EC75BC32127\",\n    \"9813ED77-1407-43C0-B4B5-1EC75BC32127\",\n    \"B9902046-ED44-4271-B696-549D412FDE6A\",\n    \"B2B2ED72-6138-442F-AEF1-E5C122E128EB\",\n    \"1A182249-3D04-4C61-9478-9C45D575E9AB\",\n    \"1A182249-3D04-4C61-9478-9C45D575E9AB\",\n    \"1A182249-3D04-4C61-9478-9C45D575E9AB\",\n    \"2FC5C7D2-67E2-495C-A106-02CDF1DC7D98\",\n    \"D34DB6C3-AA1A-40E8-A7A2-BDBEEDD2C8D0\",\n    \"D34DB6C3-AA1A-40E8-A7A2-BDBEEDD2C8D0\",\n    \"3A3C8956-E591-4D55-AA1C-919EB8F98E00\",\n    \"C58531B6-FDC8-47C3-9389-2DB8BBDB2C2A\",\n    \"15247CF4-EF13-4186-82E7-67C49512DBDC\",\n    \"F59723D7-1E17-446B-BEB0-8542EC0857F2\",\n    \"0C7D92D6-FD3C-4210-8440-67461F18CDE5\",\n    \"5D395580-6A22-4D55-812A-318B03CCD9A1\",\n    \"7E5F652F-23CF-4706-884D-3C5773E680F3\",\n    \"7887662A-256C-44BB-968C-5A897D54620D\",\n    \"09C99647-530D-413C-A323-1DBEA6EA91C7\",\n    \"A5B7D39F-334A-4E93-83C8-1818BDA156CC\",\n    \"72DE4B36-5017-451C-824A-F59F9348CCA3\",\n    \"90F68CB7-61ED-4F0D-86C0-86C5D5C037B0\",\n    \"54BD4386-EC64-4464-ABE2-1C017305A123\",\n    \"207130C5-F0E9-4541-8162-DB48863288C7\",\n    \"D95FCB7C-5502-41A9-9281-D1A22349A694\",\n    \"B592A498-182B-4435-A539-2F838D650F2A\",\n    \"9D2517B2-1106-446F-AE56-13E04A496883\",\n    \"151393D8-5AA0-49F5-B164-777B50CE650B\",\n    \"C69C5465-6546-4C8F-8093-579AF126276F\",\n    \"2A2A12C0-76FF-4099-880D-F36CB2862B22\",\n    \"E5069DAB-24F7-403E-AD1E-994CA8D7DD59\",\n    \"F8B59188-8A87-4AEE-9E3D-8F9285D457F0\",\n    \"89EF982B-A642-4EDC-8E25-4D64B2BA74AE\",\n    \"D7A1E46E-4D69-4FC1-802C-4260AEF2E2B1\",\n    \"CCB3F142-3296-4A88-9EFD-15475EF32F4A\",\n    \"CCB3F142-3296-4A88-9EFD-15475EF32F4A\",\n    \"CCB3F142-3296-4A88-9EFD-15475EF32F4A\",\n    \"CCB3F142-3296-4A88-9EFD-15475EF32F4A\",\n    \"CCB3F142-3296-4A88-9EFD-15475EF32F4A\",\n    \"CCB3F142-3296-4A88-9EFD-15475EF32F4A\",\n    \"3602705E-ECA9-4FFF-B10A-3137E36EB42A\",\n    \"928122A1-4B4A-4915-B28D-78B08263C3BB\",\n    \"01364E73-3D4E-40F5-A798-3DE6FD6B9690\",\n    \"68CD1957-C722-4DA9-94E3-391C358086AA\",\n    \"69AB86D5-D476-4968-875F-BE80B32BF59A\",\n    \"F522ED35-13F4-41CB-BD3F-2E2C68100153\",\n    \"C5E27EF8-539B-4C26-9218-8E36C27E1C4F\",\n    \"7F468470-99DC-41E6-B904-E9B67B216D21\",\n    \"E60DDFAD-8FB6-41B5-AB21-9DAF00C39425\",\n    \"05FBDA34-5430-42C7-963A-C77465783CEF\",\n    \"FA31A0B1-BAF1-40D7-BC27-AABC5D642CC3\",\n    \"E96A872C-73A9-48C8-950E-EBD72FD258A3\",\n    \"8BB1CB51-EDF0-45E6-BA18-EE6A02F49EAB\",\n    \"29F8CFA6-1ADB-4FF9-9DC8-23993F3AC0B0\",\n    \"20F43080-2DCB-4899-A866-B5957AE07B8D\",\n    \"25F18282-24B0-470F-AB75-D8A9BDCAD9BD\",\n    \"28333870-EDA6-4F0B-A6BB-C712C14E34E8\",\n    \"928F0874-797A-4537-8442-15DA9E916F01\",\n    \"8FB357E2-3C8C-43DB-84FD-941A32086048\",\n    \"1FFF4DFC-37D1-4C8E-9B26-203ADAE6AA1F\",\n    \"E10FC915-D670-4A1C-8CC9-08A628CE9C89\",\n    \"3F382720-28EF-45BC-80BA-FA4E420E741E\",\n    \"3F382720-28EF-45BC-80BA-FA4E420E741E\",\n    \"3F382720-28EF-45BC-80BA-FA4E420E741E\",\n    \"58955344-6557-4EE2-A708-46FC092E9EFB\",\n    \"54F59F4F-5C5E-408F-BDD1-8FC70360ABC9\",\n    \"B5F558AA-EB13-43A2-8F51-41FF3F5BC600\",\n    \"3C80488A-6C59-456B-BE6C-888E075B4468\",\n    \"2D10B3BA-1673-4341-AF55-4576717B21AC\",\n    \"0DE65E82-782F-4B3E-8B62-42A01B79AD49\",\n    \"808F1BBF-2BAD-4A5C-85BF-9480A93C096D\",\n    \"1A30E695-6295-4713-9B38-39DA6FDD3632\",\n    \"16F205F3-E016-4D17-B2D3-2B09C3C3FCCA\",\n    \"6F3B3377-C667-4AEC-8E3C-F302D898C7C6\",\n    \"1D13973E-B561-4E42-98B3-6F67BAF700BD\",\n    \"75FA18ED-3B7C-48AE-8E69-73CFC307F02B\",\n    \"892F07C3-E54F-40B1-9616-850FF14FD818\",\n    \"EC2E4E28-33CB-4D56-81C6-6DE94B6A6136\",\n    \"29537893-8806-4B29-8696-DBA6E2C84B29\",\n    \"E3C4D311-A09F-4A1E-9111-7AC13ABD081A\",\n    \"4EB5B247-97D7-4512-8900-C423B8B41930\",\n    \"65DA3F9E-7F6B-4E7D-8AE3-75AD091808A4\",\n    \"7886D17D-E1C3-4B59-A400-3EA4C5E046FD\",\n    \"05B7650E-DBBE-4301-B8CB-9DCB498F0FA0\",\n    \"EB3F468F-FFB8-4D86-8E52-2237376539BA\",\n    \"29B4E105-7B7F-4948-82E6-0B4C7FF27C0A\",\n    \"01BA2731-B971-4880-BAC2-DF398BCEB407\",\n    \"28DAC30D-719B-47E9-BEE3-627BDACE7B59\",\n    \"69F3518C-244E-4372-88F9-58E6ECAB0962\",\n    \"5B3A3DE3-AF1B-40CA-8643-5F0AD4887B8E\",\n    \"BDB0B7A3-2F3A-4D45-8C52-69855C2B4E91\",\n    \"F854C4F7-FB02-494A-8276-80E7389908CE\",\n    \"714171B4-EC6F-4675-88A8-EDFA6591E77C\",\n    \"EB8EE9A4-1EAB-4DBC-92B1-1251715D029F\",\n    \"82AC1309-81E0-4BCB-9601-D8B8AF9EB4B2\",\n    \"0F2D3163-8945-4408-BCF1-F4EFFB83D65F\",\n    \"4D333C95-A3A9-4FF5-A124-F55ECC0B0610\",\n    \"44AF3A97-377C-4D96-B8A7-C0BAFBAC8D2A\",\n    \"FAF250EE-1A09-4DA9-9DBE-FA3333719C01\",\n    \"9568536B-354B-49A2-9231-DDD785AC10FC\",\n    \"46FC1AC6-721B-4D80-A576-846B2845C861\",\n    \"C327F519-9002-4E5D-8E59-78CB5A880FD9\",\n    \"C8382213-7873-451B-A00F-204596C44070\",\n    \"1B2E6C09-C3A1-4C18-A2FB-99872B4E3957\",\n    \"D294D3D4-D840-4A93-8D43-B1281F8FD33B\",\n    \"B77398DD-32B4-4AC0-8450-70872A0DE004\",\n    \"05869F20-B8D5-41E3-9D07-28B78EA52BBD\",\n    \"D41B29ED-00B5-437F-9195-C5D52F83BEB1\",\n    \"9542630B-D70E-45AA-BC78-B14BD19586F4\",\n    \"661B2775-6E71-450C-B5B1-A38D56BCD5D6\",\n    \"9775F245-0F1C-4E17-8BC0-9EEDE757E770\",\n    \"74777A04-B9E7-48CD-9F1C-6D2BA8F9DF62\",\n    \"0788471C-1058-45E9-B7E3-D9024DC7FD73\",\n    \"67E7E41C-326B-4945-9616-92C7945AC1DA\",\n    \"A3F160DE-42DA-49B7-8821-C737DBCD5D68\",\n    \"A4DE46E9-0430-4F50-B8EF-CBD77D53D6E2\",\n    \"803C36DF-3CEC-4FDB-B74C-AF3FE0686A74\",\n    \"1FC76B9F-A55D-42FA-AF6E-9180E753E4BF\",\n    \"9FE4AB84-18B2-4DED-9508-7F4500275E8A\",\n    \"AC5D6F35-5B50-4106-8AE9-92A3CED67153\",\n    \"8DDD8E63-DF58-41A1-AB40-20703FE1D601\",\n    \"C833FD07-7A88-4CDB-920D-AFD06591DB44\",\n    \"6D3598E5-2E49-4088-BDFB-FC029DAF525D\",\n    \"404198D7-729C-4DE9-A1A4-72D755B64D18\",\n    \"0B0D86D8-5134-485D-981C-31F160019623\",\n    \"BB79876A-8C21-4CE9-A9E5-B788EB86559B\",\n    \"F66440CF-E287-42F1-9053-17854FD46068\",\n    \"70F35B08-E325-46C9-8C8F-BDE34540A72C\",\n    \"388B523F-F842-4446-8296-A8F1945E78C6\",\n    \"DC4C5439-92B0-466E-870B-F9AF2D602396\",\n    \"D06DEFFC-651A-4934-92A0-366837C88FE2\",\n    \"2CAE8CB3-E04A-4307-B2CB-394C1C0AEE86\",\n    \"572BE9FB-5974-4920-BF66-6B43B0511FED\",\n    \"4B2C7EF5-F5A7-4929-9449-C73BC8A86A2D\",\n    \"E75FE84D-9918-49B5-B881-FC5D39EC22B4\",\n    \"676CC1D2-9ED4-4B79-80C5-225BBD4741A0\",\n    \"16FA0C55-A96D-4EA0-9F19-D2336E7C87A0\",\n    \"306C319B-65CF-4A7B-87C1-E26CC0C67FFB\",\n    \"1FD96FDF-54DD-4FF9-89F0-A2402408ECD7\",\n    \"D6C69253-FD6A-448C-A08E-0B92BE8541E0\",\n    \"6D3718AA-3104-409E-9AE5-F5E6B93B8F7A\",\n    \"B13244C7-5683-46DB-8165-EA6577E4D317\",\n    \"03AE660F-F2D9-4A63-8596-D1682952D558\",\n    \"BAC674D4-D57F-4A6C-BA2F-6A09C7FF156C\",\n    \"450D548C-4720-4E62-BD96-02D3CBC7FB7B\",\n    \"239EEB26-033B-45F4-8FAD-4408AC4D95DB\",\n    \"17AF5231-11FB-42FC-980A-A824DB30276B\",\n    \"7A9DA225-EED1-46C7-B004-515ADDFF854B\",\n    \"14C8AEA1-1D80-481F-AFF8-9D617810F52A\",\n    \"10EDD02A-6283-473D-B45B-4E73E6C3DD2C\",\n    \"C6D55B10-5D41-411D-8104-03E1192E416B\",\n    \"B2C34D7B-365F-48DB-A9D2-C2334FC15F75\",\n    \"3D7BDF88-3B94-4521-9A57-34068D0AB033\",\n    \"45DDE466-3782-4961-96BC-01449F56F8BA\",\n    \"9455DB05-68D8-4767-97B2-F16E4B6B7E09\",\n    \"77C6FF1D-29C3-497B-AE6B-DE8232B67228\",\n    \"47B26201-29B5-404A-A097-541F4D5F890B\",\n    \"657E6992-3B79-4D81-A413-4C4247A08AF5\",\n    \"B4616BA9-DF2D-4DBE-9EE8-E15E8FCF55C6\",\n    \"57AEB422-EC21-4CD3-9962-414806A7D798\",\n    \"EB1C920C-1AED-48E5-9991-58499ED00596\",\n    \"EEAC71BF-3AA9-4855-BB38-70D1D5B42193\",\n    \"96E54A7C-A27F-461E-A2EE-FBC0127EBB13\",\n    \"EACEDADE-1CA1-4095-BA6D-436F6DE2A6E9\",\n    \"6181A92E-8F85-43B7-B86C-6C3086A84A23\",\n    \"A0C0B1DE-6A3A-41AB-AF18-E7D646E7FC0B\",\n    \"D13C576B-FE11-419F-86FC-9F31A8EB173E\",\n    \"C2829776-F0E0-419E-9EB0-E3686CF2D648\",\n    \"9C714125-9860-4C53-B21D-6FAEE57A90D6\",\n    \"9F9377A5-9D99-4A2F-8DAC-B58C3FA16AEE\",\n    \"731D2E09-D2D7-43B7-9502-A61D0B11FC24\",\n    \"BD1F9028-532C-4A8A-B12D-17AD7381D22D\",\n    \"E37580F7-7193-461E-A1EC-4346A8F65D48\",\n    \"74ECFC77-8A04-4363-BADF-EDF2BFF4697B\",\n    \"74ECFC77-8A04-4363-BADF-EDF2BFF4697B\",\n    \"74ECFC77-8A04-4363-BADF-EDF2BFF4697B\",\n    \"F01DF6C0-F5ED-497B-A036-214593EE24AB\",\n    \"53446A49-0BA5-42B3-9E58-F646879A361C\",\n    \"8EC17724-B204-4781-B091-C3B939940055\",\n    \"F7807233-18C6-47B4-BCF9-25D470421560\",\n    \"DAFC7925-F5EA-437E-845D-F687F5580E89\",\n    \"DA7B81B5-A188-4F9C-91EB-EF781857225B\",\n    \"8086DF3B-2B48-4DCB-BC9D-FE6E114066C4\",\n    \"6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F\",\n    \"6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F\",\n    \"6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F\",\n    \"6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F\",\n    \"6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F\",\n    \"9C009738-F5E6-43E3-B2F1-BF2E7A73402F\",\n    \"A61320AE-8509-4818-B4B1-70E2D68F772D\",\n    \"5B04192E-C059-4B31-BC51-732A1FCE98C3\",\n    \"DEC836DF-82A5-4F6D-9A5F-A8580BB614FA\",\n    \"5620C89D-F6D5-4DAC-89A3-B2B43BAE22E4\",\n    \"8F231B59-F23A-467B-A3D0-EE007DB01483\",\n    \"B29F8DE4-48BE-4064-99E1-F023635039FE\",\n    \"FD93DF8F-45F1-4D73-8817-3299D87CEBCE\",\n    \"C5CB386E-6A79-4896-86BE-43727F367D96\",\n    \"582F2EA9-401C-4C04-AFCB-773D44B40FE7\",\n    \"3775EC3F-7579-44D4-A76A-DE61B0CF9768\",\n    \"B4DAF5FF-0307-4FE4-8D25-83D19829F25B\",\n    \"452F3CEC-888D-423B-B12F-DE017E321E04\",\n    \"21522F65-41A2-4128-B7B4-A1F475A57537\",\n```\n\n----------------------------------------\n\nTITLE: Using Message Convention Extension Method\nDESCRIPTION: Demonstrates how to use the message convention extension method when configuring the bus with SQL Server transport\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/content/3.documentation/6.transports/sql.md#2025-04-18_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nx.UsingSqlServer((context, cfg) => \n{\n    cfg.UseMessagePartitionKeyFormatters();\n});\n```\n\n----------------------------------------\n\nTITLE: MassTransit Package Links in Markdown\nDESCRIPTION: Markdown formatted list of NuGet package references for the MassTransit project, organized into sections for core packages, storage providers, schedulers, and transport packages.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/README.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# CREDITS\nLogo Design by _The Agile Badger_\n\n[MassTransit.nuget]: https://www.nuget.org/packages/MassTransit\n[MassTransitAbstractions.nuget]: https://www.nuget.org/packages/MassTransit.Abstractions\n[MassTransitNewtonsoft.nuget]: https://www.nuget.org/packages/MassTransit.Newtonsoft\n[MassTransitMessagePack.nuget]: https://www.nuget.org/packages/MassTransit.MessagePack\n[MassTransitNServiceBus.nuget]: https://www.nuget.org/packages/MassTransit.Interop.NServiceBus\n[Analyzers.nuget]: https://www.nuget.org/packages/MassTransit.Analyzers\n[Templates.nuget]: https://www.nuget.org/packages/MassTransit.Templates\n[SignalR.nuget]: https://www.nuget.org/packages/MassTransit.SignalR\n[TestFramework.nuget]: https://www.nuget.org/packages/MassTransit.TestFramework\n\n[Prometheus.nuget]: https://www.nuget.org/packages/MassTransit.Prometheus\n\n[Cosmos.nuget]: https://www.nuget.org/packages/MassTransit.Azure.Cosmos\n[AzureStorage.nuget]: https://www.nuget.org/packages/MassTransit.Azure.Storage\n[AzureTable.nuget]: https://www.nuget.org/packages/MassTransit.Azure.Table\n[Dapper.nuget]: https://www.nuget.org/packages/MassTransit.DapperIntegration\n[DynamoDb.nuget]: https://www.nuget.org/packages/MassTransit.DynamoDb\n[EFCore.nuget]: https://www.nuget.org/packages/MassTransit.EntityFrameworkCore\n[EF.nuget]: https://www.nuget.org/packages/MassTransit.EntityFramework\n[Marten.nuget]: https://www.nuget.org/packages/MassTransit.Marten\n[MongoDb.nuget]: https://www.nuget.org/packages/MassTransit.MongoDb\n[NHibernate.nuget]: https://www.nuget.org/packages/MassTransit.NHibernate\n[Redis.nuget]: https://www.nuget.org/packages/MassTransit.Redis\n\n[Hangfire.nuget]: https://www.nuget.org/packages/MassTransit.Hangfire\n[Quartz.nuget]: https://www.nuget.org/packages/MassTransit.Quartz\n\n[ActiveMQ.nuget]: https://www.nuget.org/packages/MassTransit.ActiveMQ\n[AmazonS3.nuget]: https://www.nuget.org/packages/MassTransit.AmazonS3\n[AmazonSQS.nuget]: https://www.nuget.org/packages/MassTransit.AmazonSQS\n[AzureSbCore.nuget]: https://www.nuget.org/packages/MassTransit.Azure.ServiceBus.Core\n[RabbitMQ.nuget]: https://www.nuget.org/packages/MassTransit.RabbitMQ\n[PostgreSQL.nuget]: https://nuget.org/packages/MassTransit.SqlTransport.PostgreSQL/\n[SqlServer.nuget]: https://nuget.org/packages/MassTransit.SqlTransport.SqlServer/\n[EventHubs.nuget]: https://www.nuget.org/packages/MassTransit.WebJobs.EventHubs\n[AzureFunc.nuget]: https://www.nuget.org/packages/MassTransit.WebJobs.ServiceBus\n\n[Kafka.nuget]: https://www.nuget.org/packages/MassTransit.Kafka\n[EventHub.nuget]: https://www.nuget.org/packages/MassTransit.EventHub\n```\n\n----------------------------------------\n\nTITLE: Cloning MassTransit Repository in Bash\nDESCRIPTION: Command to clone the MassTransit source code repository from GitHub to the local machine.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/MassTransit/MassTransit.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the Docus project using Yarn package manager.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/doc/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: GUID String Collection in Plaintext\nDESCRIPTION: A comprehensive list of GUIDs represented as strings in curly brace format. Each GUID follows the standard 8-4-4-4-12 hexadecimal pattern enclosed in braces and quotes. The list contains 200+ GUIDs with some duplicates appearing multiple times.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{AE746629-F6B6-45C6-99F3-483EE0F090CB}\",\n\"{0F1EE816-6F5E-4E82-801A-8C4BD7388D41}\",\n\"{8513C220-A657-490D-93BB-DCFC2AD1403F}\",\n\"{CF8BB231-5B2A-43C8-BA37-9D7416A1247C}\",\n\"{4E4C69D4-87D4-42E3-87AB-60A420FB44E6}\",\n\"{FA363C91-1454-4254-9F40-E5E19992175B}\",\n\"{3C56C6A6-4EC7-4D3B-B9C0-D2C1148FFC95}\",\n\"{7EC9EABD-19AA-4091-B9AD-B998E708C645}\",\n\"{577B09A3-BFA9-452F-AE95-C560C469D780}\",\n\"{F8B45B61-2450-4B74-88DC-0550A7B52348}\",\n\"{32133BA1-B9B4-4E12-9C5E-D51E8030491F}\",\n\"{F6880940-5B8A-4EA2-8D43-775C94857576}\",\n\"{32B6FD4A-8010-4D3F-BD47-E9357417FD9C}\",\n\"{1A7E08A2-D9E5-472A-A62B-1C4025F8E680}\",\n\"{E0E8E4EE-1867-4611-9F33-540BC8ABFE67}\",\n\"{166B699E-D3C2-4134-865B-915E22FFEFC3}\",\n\"{37C7D823-8A85-4047-A1F1-4A9B3BB9180E}\",\n\"{FF9DB983-6AB8-426E-8133-71BA9F02F57D}\",\n\"{0026289D-14C9-45CE-954D-AB96EE50C0A4}\",\n\"{112312AC-31FE-4EA5-B0C3-0E21143FA064}\",\n\"{107D3F69-10BB-4DB1-B02B-C1C6C133CE3D}\",\n\"{F0382D0A-1DEC-48D3-826E-E8F59BDF940E}\",\n\"{1623AEBB-D56A-470C-84B6-206C5F7EE6C8}\",\n\"{0DFFE0E6-C8D3-4DDB-BE35-942B79651D98}\",\n\"{99CAB742-927E-4960-8C04-9F97C84DA00C}\",\n\"{A33DFBEA-FC7C-4EDD-832B-27DF8161ADCD}\",\n\"{28EDE124-B8F0-48D9-9AFC-3B4B644E20C4}\",\n\"{4B58A125-1ABD-46C5-A8A8-B9F28B76B1E2}\",\n\"{C68A24D7-71DC-4547-8593-FB6072A923FD}\",\n\"{D19B93AA-84FE-48CF-9F83-E907AE6017E1}\",\n\"{719BC6A6-EAF1-484C-B352-E185FBB811E3}\",\n\"{14A90DBE-A53A-480D-ADB9-32D6DDA4CD75}\",\n\"{2F4D10FA-A054-4F54-80F1-B4F5931FD490}\",\n\"{38AA09AE-30F5-4698-9C10-32228C5C0200}\",\n\"{188C33AB-22A5-411B-9957-F128A0ACA2D5}\",\n\"{49F84C56-68C2-42F8-84AB-DE1F465A8F43}\",\n\"{026E4311-F454-4DA1-8A54-F74EE259A8D5}\",\n\"{F1265CCD-B817-4E2A-B14C-118A5F4F3F80}\",\n\"{92FAA126-9981-48C8-88CA-0705D1C9A531}\",\n\"{1C1DED68-6DD6-4418-9BC0-D16F4D201A53}\",\n\"{9C9679C4-B1B8-4E93-B86F-9F97E2422AAE}\",\n\"{D689D925-6F09-49E2-8C08-37494335E36F}\",\n\"{F5A083C5-3732-4E25-9B18-0EC106087B7A}\",\n\"{ACBC7257-9953-430B-BADC-3C18E1F3C086}\",\n\"{566A4AFE-5DBF-42E4-AA77-F93E78D67C23}\",\n\"{95CAF3B3-8A26-4890-92F6-12AF0CD10222}\",\n\"{C66BB486-46B4-47A4-B36D-C156E5160BDF}\",\n\"{1B73D184-05F4-4F0D-B63B-7767D4557932}\",\n\"{EF3AB9F3-A9D2-4D0B-BE80-F8BD294AA489}\",\n\"{84E5440D-B962-45AA-9F9C-BF28E35DC699}\",\n\"{4F7D6138-8661-45E0-B053-A123EEA35481}\",\n\"{44702514-D35B-4E01-8D9F-0656D1D13029}\",\n\"{6D0EF027-D760-4868-A21B-BF4F39117447}\",\n\"{6A3AAB7A-F72E-40D8-8E2D-9134B697B5AF}\",\n\"{86F60A7C-3D8B-432D-A661-3ED3C35E2597}\",\n\"{24635D6F-3524-41F3-BBAD-2C5779FC59F3}\",\n\"{3D3D7F13-BA8A-4868-BD4E-1969C35820BB}\",\n\"{C982FCE6-56E2-417C-9C02-A326E15C74EC}\",\n\"{C745039B-4A4E-4D14-9CB5-0DADDA705851}\",\n\"{385666E1-08CD-4B51-82DF-FC72484C8155}\",\n\"{0DB8D15D-F914-49F0-9E44-9D12CED8B4F9}\",\n\"{3D3D42C5-C686-43BC-B63A-41977F063C85}\",\n\"{B625718B-61C6-424A-9694-20C9B023BE29}\",\n\"{C76ACEA0-3F4F-4AEB-87CA-7EE7A47C26F5}\",\n\"{55713DDD-C0F4-46C8-91A5-D133F487BE3B}\",\n\"{F4150821-B7EA-4039-BA6F-899E4F4D7533}\",\n\"{AF98DAAF-63DA-4024-9F99-4552B5809800}\",\n\"{4E43B456-F13E-4532-8830-77242395EA76}\",\n\"{A7E57F7B-99D4-4A42-B349-C7E651B108CB}\",\n\"{27D6040A-7B5F-4859-BACC-EAD16AB0AD5A}\",\n\"{CF3904DB-2E15-40D1-8582-8C4B0A049FF3}\",\n\"{9263F444-9A65-4E9A-87C5-B54C00472973}\",\n\"{6941E141-783D-47D5-AB16-08CC8AEE55A8}\",\n\"{A2856EA2-FF9B-4CF0-A750-82FAD091746F}\",\n\"{0C404A9F-2840-49AA-A5AC-1C015072BB5F}\",\n\"{8A14285E-4F63-45B6-B841-02B416D1FA1E}\",\n\"{6B97CCAF-C1F4-4BCB-AA20-4331457C7FC9}\",\n\"{2AC24BCC-8E1B-498D-996C-3328F313E915}\",\n\"{98B1953D-C50C-42E9-9951-3F68BE78A867}\",\n\"{62B42344-5362-4366-98EB-74F10FAF84A9}\",\n\"{9BB060A5-F53A-41DF-99D8-655AC997275A}\",\n\"{69CBF890-5ABD-48E0-8577-9382753A06E6}\",\n\"{D041AB02-F75A-4570-AA9D-CF80DB890ED4}\",\n\"{1F5F28C8-7C69-4171-8DC4-EBC222E539B1}\",\n\"{F4BEDB6D-84B2-4B7A-BDFC-4271B75027BB}\",\n\"{2953A732-8746-4713-9F79-DAC64F44B1DE}\",\n\"{576A86A9-FC38-4648-88C6-250E42D0D68F}\",\n\"{7C82C989-6643-4C36-B475-828F547C9775}\",\n\"{15128352-F403-48D9-9E6B-741AF00E42DB}\",\n\"{425218F1-034B-4781-A347-1283435B554E}\",\n\"{97E45843-C907-4ABE-8625-3F0C6A8B3CD4}\",\n\"{94EBF705-05D4-4E23-A19C-7A75F0DF5905}\",\n\"{218296BB-0877-466D-85CD-03E3ED960625}\",\n\"{3F293643-9FAB-4806-8CC0-3FCD2F29217F}\",\n\"{BE4B8687-A952-4432-877D-4D3B81BF3B83}\",\n\"{1DFE0BC9-04B1-4118-A516-9BD40BD6E2FE}\",\n\"{743F4024-66FC-4DD5-8429-79908ABB4347}\",\n\"{5783C3AE-2677-4E56-9115-835D8F6CEF5D}\",\n\"{3043EA68-94EB-4F08-991A-62AFCCC2A410}\",\n\"{5C512974-495E-45FE-8642-F7D0224AB9DB}\",\n\"{9B37E25B-70AF-4D14-BBC9-B5082C2C529C}\",\n\"{E008BF8F-C711-4567-96CF-13F3F9614E5B}\",\n\"{C2FDAD02-805E-4306-8457-9BA28DC3A496}\",\n\"{32167B34-3853-4AE1-BBD8-3E49FD359513}\",\n\"{A0EA9E48-2391-41EA-BAFC-2132199448F0}\",\n\"{A0EA9E48-2391-41EA-BAFC-2132199448F0}\",\n\"{59221868-77DC-452D-BC0A-A3FCF5828807}\",\n\"{AE7BE5D9-F990-485D-93C9-50925EAE3FE4}\",\n\"{B9B48F08-6027-4C4E-9B52-4B6BA6A61A16}\",\n\"{8A9785B7-3414-4EC6-B1BD-7BC3F46195C8}\",\n\"{DAE2EC53-7EA5-4E78-B5E4-989A2A6F1C45}\",\n\"{51437403-6890-4ADB-A9C2-B6EFF7BA9BE9}\",\n\"{4A37FE2B-6216-4C34-9499-0438AFD2BE8C}\",\n\"{5D81E58C-85F0-4BA5-A589-B6545A63C2E4}\",\n\"{6CBAD8D5-7040-48C6-9173-96822D19FBD1}\",\n\"{A74878B6-1B9A-4BE1-9380-FAC4FF197A5F}\",\n\"{4DE38BA6-1357-4F60-8A1B-2CD33734D4F6}\",\n\"{C5E6CC6F-87DA-4DEF-9458-7E9ECFBBD46B}\",\n\"{C6065D28-CE28-4579-9168-F799049C3B67}\",\n\"{2DA9E233-74CF-4EE6-93E7-6923AC87A09F}\",\n\"{5FC89CB6-7093-4501-A7E0-FD9D8DC59440}\",\n\"{32436C53-8C87-4AEE-9FBD-D65DBB238088}\",\n\"{E239B6E9-A8B4-486E-A4C2-C15C36C5E31A}\",\n\"{A30B1B24-B5B7-4374-8881-6E603FB33756}\",\n\"{F3A13C8F-0E38-41C8-8EA4-94706A580DFA}\",\n\"{9EB8A0AA-131B-4BD1-A3FD-897D4E68343B}\",\n\"{70CECED7-044B-4203-AFDE-6870C0399310}\",\n\"{70CECED7-044B-4203-AFDE-6870C0399310}\",\n\"{A4368CDA-41E2-4DBC-BE78-646A1D737270}\",\n\"{A5B4C00A-02EF-42F3-9A9A-4383545A059F}\",\n\"{B77B7B97-78C4-4615-B6D8-A4A28E394960}\",\n\"{9C31580A-6D43-471F-A06C-F09A2261E355}\",\n\"{AB4EE664-7F38-407E-BB19-DA0DF04243A8}\",\n\"{A8DCD665-2642-48F7-A8C1-AC638C13C4B8}\",\n\"{ADC421DC-2072-4E50-AFF2-641E821DB7A8}\",\n\"{C4011F24-E8C5-40E0-BC8A-393DA54A35BA}\",\n\"{3726B983-3DDC-409F-BAA2-3F95E2D7D7FC}\",\n\"{9A6A52CF-C0A2-4063-9162-8A4E4815904C}\",\n\"{B96006C9-E2F9-4E9B-9BBA-FB988A0AB047}\",\n\"{826B9712-905C-4FB8-8B60-146AEDAF7D0A}\",\n\"{8671A396-CC8C-44DC-8A2F-DEF4816D7FEB}\",\n\"{87DDC905-7089-41AB-8619-C3ACEF22C008}\",\n\"{314ADD9E-F31D-4BAD-97D5-7320374A4032}\",\n\"{23A954EB-3EDC-47A1-9139-ECFB95B483BA}\",\n\"{B3BAF6F9-D17B-448F-B420-F7470A09BB32}\",\n\"{8C4F46C7-100B-47B0-8C36-FC2C3CDEFFC9}\",\n\"{69697CB9-3751-483E-B6E0-BEEB0F9DF9DE}\",\n\"{40D39CEF-E05F-40EA-9BF1-FC3A42F2E9AB}\",\n\"{511328A4-7268-4D79-BBD7-BF1F844ABF1B}\",\n\"{B9A6C790-260B-47E8-9BEC-AF895A2C6CE4}\",\n\"{3E77152C-2AC2-452C-A989-7AF8549070A5}\",\n\"{CD9E3F96-DED2-427D-8D83-5A41A38DD0F8}\",\n\"{09F54CA7-D53B-40EB-B8CE-316FCBB9E95D}\",\n\"{6CFB3D4D-5483-40EA-B1AF-383E9289040F}\",\n\"{A220F116-D21F-48D1-A83A-E7C257B29C73}\",\n\"{93B0D1E3-BA0D-470F-82FA-13A2DBC462F6}\",\n\"{66B8B9DC-28F3-47B3-B505-EFF781093D68}\",\n\"{99B0A495-7285-4F56-98C9-7E4F0AC548A2}\",\n\"{1729B75D-72BF-4907-BA1E-302703403F30}\",\n\"{8A15ADE4-859D-4A3F-90F7-7FC90776F1BE}\",\n\"{F87B2182-F913-4ADD-B630-E42770D86581}\",\n\"{DA97E231-0B30-4DB8-B88E-166B230B6547}\",\n\"{BD030AFF-CB25-4D61-AF6A-2EE9D6092714}\",\n\"{8A6C9896-D294-445B-991D-4BB4ABFCF674}\",\n\"{6CF5CBDA-5BEB-474B-9437-80151779F6EE}\",\n\"{11C1967A-6EAC-42CF-AA4F-9669A7D501B4}\",\n\"{D226268A-62C3-42AC-BA41-B3E923045A85}\",\n\"{7CAB5652-24CE-494C-8DE4-6916F7F155F7}\",\n\"{E7340C62-AB96-42F2-9342-BC881795A6A7}\",\n\"{E494E182-CA9C-4CF7-BF91-16C48C23CEB9}\",\n\"{D604E55D-AA2E-4830-BA19-8E6F09D99029}\",\n\"{C0D80711-905B-4487-9B4D-314A32C013E1}\",\n\"{BBC5CF5C-7AE9-4116-A8A7-431983C64382}\",\n\"{8ACFCAFB-96FB-4F1C-A11C-9DEE4FA70EC4}\",\n\"{18E46C9E-1F91-4834-8A78-373234D72B2E}\",\n\"{4C36AF3F-C198-4FDA-8FC8-FEE696131A5A}\",\n\"{56EC5270-9ED8-4AE5-A139-5BB2F4E14551}\",\n\"{99F4CE75-7A9C-448B-A73A-970C6696DBBF}\",\n\"{7A5E4245-5807-4816-B571-7AA08B70CE16}\",\n\"{7A5E4245-5807-4816-B571-7AA08B70CE16}\",\n\"{922BCF2A-52B1-4D36-820E-819F8A3B66B2}\",\n\"{5C9108A9-3F30-4A98-8A77-128EDDB3EE28}\",\n\"{5C9108A9-3F30-4A98-8A77-128EDDB3EE28}\",\n\"{6186376A-21BB-4CB7-B34A-08CC2B4200FB}\",\n\"{6186376A-21BB-4CB7-B34A-08CC2B4200FB}\",\n\"{6E58B976-292F-476E-ACB8-2C414FEA3039}\",\n\"{6E58B976-292F-476E-ACB8-2C414FEA3039}\",\n\"{DBADAB4A-2A22-42A1-B111-7BFE8433148C}\",\n\"{74E9B660-6279-44AC-B87B-0A1143773977}\",\n\"{3F06027E-D21F-4583-BBBB-706589AF2861}\",\n\"{5870EB8D-C303-46E8-97ED-AD396993F59F}\",\n\"{910E2F16-280A-4F33-96C2-A58ED93C37F1}\",\n\"{6ACFDC65-2E79-44C4-9F83-37DCF4C3CDE3}\",\n\"{781431EE-13D9-43B4-B150-65A50CA538ED}\",\n\"{A40732FC-A689-49C4-88CD-AD214C8163BA}\",\n\"{2A7C4F5D-5FF3-4130-B01B-5D367CF53F20}\",\n\"{7E8D5A23-FD3B-4866-9809-D592AF297AAE}\",\n\"{4F7DEDD8-7E45-4E16-A0BB-3D8FE1D64E18}\",\n\"{AB03292A-CC36-4B15-BA2E-08CD2C5ABD7C}\",\n\"{93B49257-5C2A-4772-8E75-F08B14153F5C}\",\n\"{3F7D3D2D-24EE-4E2C-B8EA-BD257206B709}\",\n\"{F0C47830-C3C0-4F54-87C6-15CE4D64B576}\",\n\"{B4A64EFC-DFEF-4BEA-8E4D-780ED38DC350}\",\n\"{DE990EDF-937A-4089-BB33-5A7B17305CEB}\",\n\"{403C18F9-5EAF-42F8-8C94-321527F023FE}\",\n\"{9F53395A-B334-4DA8-8368-9ED6051C8655}\",\n\"{DDD363DC-02EC-489F-BF08-774DC2154393}\",\n\"{DDD363DC-02EC-489F-BF08-774DC2154393}\",\n\"{DDD363DC-02EC-489F-BF08-774DC2154393}\",\n\"{DDD363DC-02EC-489F-BF08-774DC2154393}\",\n\"{353BD8E9-F9F2-4167-98B7-5E6D449A4B45}\",\n\"{3DE434B5-D1C1-40AC-A68C-0BC35BD47942}\",\n\"{E5F6C476-2F42-434D-BAF1-BD8095FC96C7}\",\n\"{D48D186F-ACC1-44E8-9600-E922CE34895E}\",\n\"{28D70442-7A56-4194-8DFA-7C2E7B1D6AD4}\",\n\"{CAE98046-680A-4D24-B42A-176BA1D93282}\",\n\"{634E36DD-5A7E-4143-B572-496A6468EE3B}\",\n```\n\n----------------------------------------\n\nTITLE: MassTransit Status Badge Markdown\nDESCRIPTION: Markdown code showing build status badges for master and develop branches using GitHub Actions\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/NuGet.README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Branch  |                                                                                              Status                                                                                              |\n|---------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| master  |  [![master](https://github.com/MassTransit/MassTransit/actions/workflows/build.yml/badge.svg?branch=master&event=push)](https://github.com/MassTransit/MassTransit/actions/workflows/build.yml)  |\n| develop | [![develop](https://github.com/MassTransit/MassTransit/actions/workflows/build.yml/badge.svg?branch=develop&event=push)](https://github.com/MassTransit/MassTransit/actions/workflows/build.yml) |\n```\n\n----------------------------------------\n\nTITLE: UUID Version 4 Collection\nDESCRIPTION: A list of UUID version 4 strings, formatted in uppercase with hyphens. Some UUIDs appear multiple times in the list.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n\"27E33AD1-FD44-471D-87FB-37B48E98B65B\",\n\"5E63FBAC-8CC8-4A92-8A89-1B0DFAB60497\",\n...\n```\n\n----------------------------------------\n\nTITLE: Collection of GUIDs in MassTransit Project\nDESCRIPTION: A comprehensive list of GUIDs (Globally Unique Identifiers) in string format, possibly used for component registration, service identification, or interface references within the MassTransit messaging framework. Some GUIDs appear multiple times, suggesting they may be used across different contexts or components.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{BD607EA6-6B2C-461D-9AAB-6B363C64D323}\",\n\"{BD607EA6-6B2C-461D-9AAB-6B363C64D323}\",\n\"{ED11ADA7-7843-4A17-94C5-FC8A83534615}\",\n\"{66FD9142-F70A-4871-AC83-2C03E3405488}\",\n\"{4D350435-80A6-4061-86B7-2382B61190BE}\",\n\"{CE4682BE-9DA8-42E0-B4D6-7641757F8C4D}\",\n\"{CD11C801-F1D0-41F2-B693-321BEBE204E4}\",\n\"{EBD1BE42-CABC-4CFF-BA50-E88187DBCB2E}\",\n\"{1A1224AC-EB72-442C-A047-BE2072A31128}\",\n\"{403035EA-E76A-4230-B881-B6CC1BE69189}\",\n\"{10D29FA1-4552-47B8-8ACA-3EBB763CD992}\",\n\"{3112CFF3-6202-419A-9AFA-F683DA6DFC95}\",\n\"{1DA2CDB8-DBCC-4D96-BCF2-80E6C66C1825}\",\n\"{3A390C3C-A38B-4DFB-A3C9-B1E36F5E4905}\",\n\"{5DAB7D4A-A41B-4A8B-8D8A-7866CCC823A8}\",\n\"{249EC629-95EE-4DB7-9A3A-97C99739B70D}\",\n\"{249EC629-95EE-4DB7-9A3A-97C99739B70D}\",\n\"{249EC629-95EE-4DB7-9A3A-97C99739B70D}\",\n\"{249EC629-95EE-4DB7-9A3A-97C99739B70D}\",\n\"{249EC629-95EE-4DB7-9A3A-97C99739B70D}\",\n\"{C778DD10-3B83-4D4A-90CA-7A5A76068275}\",\n\"{00BE0CBC-BC99-4D25-9AC4-EB5A72856B03}\",\n\"{5500F2B7-86A2-40AD-837C-A88C12D24EC9}\",\n\"{363B1520-B1B7-4643-B06A-62B01346F90E}\",\n\"{B7E3CEB5-EE8C-4F66-B748-ECDC15D9B00E}\",\n\"{1AF744C7-6981-4D7D-B5AE-C5807A292881}\",\n\"{2C86D48A-7747-4EB2-B082-8040C5D66010}\",\n\"{CAB8FA35-9D7E-44CD-9749-AFEB5A031C0D}\",\n\"{55300931-48BF-40AF-82E3-B8283C0FB5F5}\",\n\"{9813ED77-1407-43C0-B4B5-1EC75BC32127}\",\n\"{9813ED77-1407-43C0-B4B5-1EC75BC32127}\",\n\"{B9902046-ED44-4271-B696-549D412FDE6A}\",\n\"{B2B2ED72-6138-442F-AEF1-E5C122E128EB}\",\n\"{1A182249-3D04-4C61-9478-9C45D575E9AB}\",\n\"{1A182249-3D04-4C61-9478-9C45D575E9AB}\",\n\"{1A182249-3D04-4C61-9478-9C45D575E9AB}\",\n\"{2FC5C7D2-67E2-495C-A106-02CDF1DC7D98}\",\n\"{D34DB6C3-AA1A-40E8-A7A2-BDBEEDD2C8D0}\",\n\"{D34DB6C3-AA1A-40E8-A7A2-BDBEEDD2C8D0}\",\n\"{3A3C8956-E591-4D55-AA1C-919EB8F98E00}\",\n\"{C58531B6-FDC8-47C3-9389-2DB8BBDB2C2A}\",\n\"{15247CF4-EF13-4186-82E7-67C49512DBDC}\",\n\"{F59723D7-1E17-446B-BEB0-8542EC0857F2}\",\n\"{0C7D92D6-FD3C-4210-8440-67461F18CDE5}\",\n\"{5D395580-6A22-4D55-812A-318B03CCD9A1}\",\n\"{7E5F652F-23CF-4706-884D-3C5773E680F3}\",\n\"{7887662A-256C-44BB-968C-5A897D54620D}\",\n\"{09C99647-530D-413C-A323-1DBEA6EA91C7}\",\n\"{A5B7D39F-334A-4E93-83C8-1818BDA156CC}\",\n\"{72DE4B36-5017-451C-824A-F59F9348CCA3}\",\n\"{90F68CB7-61ED-4F0D-86C0-86C5D5C037B0}\",\n\"{54BD4386-EC64-4464-ABE2-1C017305A123}\",\n\"{207130C5-F0E9-4541-8162-DB48863288C7}\",\n\"{D95FCB7C-5502-41A9-9281-D1A22349A694}\",\n\"{B592A498-182B-4435-A539-2F838D650F2A}\",\n\"{9D2517B2-1106-446F-AE56-13E04A496883}\",\n\"{151393D8-5AA0-49F5-B164-777B50CE650B}\",\n\"{C69C5465-6546-4C8F-8093-579AF126276F}\",\n\"{2A2A12C0-76FF-4099-880D-F36CB2862B22}\",\n\"{E5069DAB-24F7-403E-AD1E-994CA8D7DD59}\",\n\"{F8B59188-8A87-4AEE-9E3D-8F9285D457F0}\",\n\"{89EF982B-A642-4EDC-8E25-4D64B2BA74AE}\",\n\"{D7A1E46E-4D69-4FC1-802C-4260AEF2E2B1}\",\n\"{CCB3F142-3296-4A88-9EFD-15475EF32F4A}\",\n\"{CCB3F142-3296-4A88-9EFD-15475EF32F4A}\",\n\"{CCB3F142-3296-4A88-9EFD-15475EF32F4A}\",\n\"{CCB3F142-3296-4A88-9EFD-15475EF32F4A}\",\n\"{CCB3F142-3296-4A88-9EFD-15475EF32F4A}\",\n\"{CCB3F142-3296-4A88-9EFD-15475EF32F4A}\",\n\"{3602705E-ECA9-4FFF-B10A-3137E36EB42A}\",\n\"{928122A1-4B4A-4915-B28D-78B08263C3BB}\",\n\"{01364E73-3D4E-40F5-A798-3DE6FD6B9690}\",\n\"{68CD1957-C722-4DA9-94E3-391C358086AA}\",\n\"{69AB86D5-D476-4968-875F-BE80B32BF59A}\",\n\"{F522ED35-13F4-41CB-BD3F-2E2C68100153}\",\n\"{C5E27EF8-539B-4C26-9218-8E36C27E1C4F}\",\n\"{7F468470-99DC-41E6-B904-E9B67B216D21}\",\n\"{E60DDFAD-8FB6-41B5-AB21-9DAF00C39425}\",\n\"{05FBDA34-5430-42C7-963A-C77465783CEF}\",\n\"{FA31A0B1-BAF1-40D7-BC27-AABC5D642CC3}\",\n\"{E96A872C-73A9-48C8-950E-EBD72FD258A3}\",\n\"{8BB1CB51-EDF0-45E6-BA18-EE6A02F49EAB}\",\n\"{29F8CFA6-1ADB-4FF9-9DC8-23993F3AC0B0}\",\n\"{20F43080-2DCB-4899-A866-B5957AE07B8D}\",\n\"{25F18282-24B0-470F-AB75-D8A9BDCAD9BD}\",\n\"{28333870-EDA6-4F0B-A6BB-C712C14E34E8}\",\n\"{928F0874-797A-4537-8442-15DA9E916F01}\",\n\"{8FB357E2-3C8C-43DB-84FD-941A32086048}\",\n\"{1FFF4DFC-37D1-4C8E-9B26-203ADAE6AA1F}\",\n\"{E10FC915-D670-4A1C-8CC9-08A628CE9C89}\",\n\"{3F382720-28EF-45BC-80BA-FA4E420E741E}\",\n\"{3F382720-28EF-45BC-80BA-FA4E420E741E}\",\n\"{3F382720-28EF-45BC-80BA-FA4E420E741E}\",\n\"{58955344-6557-4EE2-A708-46FC092E9EFB}\",\n\"{54F59F4F-5C5E-408F-BDD1-8FC70360ABC9}\",\n\"{B5F558AA-EB13-43A2-8F51-41FF3F5BC600}\",\n\"{3C80488A-6C59-456B-BE6C-888E075B4468}\",\n\"{2D10B3BA-1673-4341-AF55-4576717B21AC}\",\n\"{0DE65E82-782F-4B3E-8B62-42A01B79AD49}\",\n\"{808F1BBF-2BAD-4A5C-85BF-9480A93C096D}\",\n\"{1A30E695-6295-4713-9B38-39DA6FDD3632}\",\n\"{16F205F3-E016-4D17-B2D3-2B09C3C3FCCA}\",\n\"{6F3B3377-C667-4AEC-8E3C-F302D898C7C6}\",\n\"{1D13973E-B561-4E42-98B3-6F67BAF700BD}\",\n\"{75FA18ED-3B7C-48AE-8E69-73CFC307F02B}\",\n\"{892F07C3-E54F-40B1-9616-850FF14FD818}\",\n\"{EC2E4E28-33CB-4D56-81C6-6DE94B6A6136}\",\n\"{29537893-8806-4B29-8696-DBA6C2C84B29}\",\n\"{E3C4D311-A09F-4A1E-9111-7AC13ABD081A}\",\n\"{4EB5B247-97D7-4512-8900-C423B8B41930}\",\n\"{65DA3F9E-7F6B-4E7D-8AE3-75AD091808A4}\",\n\"{7886D17D-E1C3-4B59-A400-3EA4C5E046FD}\",\n\"{05B7650E-DBBE-4301-B8CB-9DCB498F0FA0}\",\n\"{EB3F468F-FFB8-4D86-8E52-2237376539BA}\",\n\"{29B4E105-7B7F-4948-82E6-0B4C7FF27C0A}\",\n\"{01BA2731-B971-4880-BAC2-DF398BCEB407}\",\n\"{28DAC30D-719B-47E9-BEE3-627BDACE7B59}\",\n\"{69F3518C-244E-4372-88F9-58E6ECAB0962}\",\n\"{5B3A3DE3-AF1B-40CA-8643-5F0AD4887B8E}\",\n\"{BDB0B7A3-2F3A-4D45-8C52-69855C2B4E91}\",\n\"{F854C4F7-FB02-494A-8276-80E7389908CE}\",\n\"{714171B4-EC6F-4675-88A8-EDFA6591E77C}\",\n\"{EB8EE9A4-1EAB-4DBC-92B1-1251715D029F}\",\n\"{82AC1309-81E0-4BCB-9601-D8B8AF9EB4B2}\",\n\"{0F2D3163-8945-4408-BCF1-F4EFFB83D65F}\",\n\"{4D333C95-A3A9-4FF5-A124-F55ECC0B0610}\",\n\"{44AF3A97-377C-4D96-B8A7-C0BAFBAC8D2A}\",\n\"{FAF250EE-1A09-4DA9-9DBE-FA3333719C01}\",\n\"{9568536B-354B-49A2-9231-DDD785AC10FC}\",\n\"{46FC1AC6-721B-4D80-A576-846B2845C861}\",\n\"{C327F519-9002-4E5D-8E59-78CB5A880FD9}\",\n\"{C8382213-7873-451B-A00F-204596C44070}\",\n\"{1B2E6C09-C3A1-4C18-A2FB-99872B4E3957}\",\n\"{D294D3D4-D840-4A93-8D43-B1281F8FD33B}\",\n\"{B77398DD-32B4-4AC0-8450-70872A0DE004}\",\n\"{05869F20-B8D5-41E3-9D07-28B78EA52BBD}\",\n\"{D41B29ED-00B5-437F-9195-C5D52F83BEB1}\",\n\"{9542630B-D70E-45AA-BC78-B14BD19586F4}\",\n\"{661B2775-6E71-450C-B5B1-A38D56BCD5D6}\",\n\"{9775F245-0F1C-4E17-8BC0-9EEDE757E770}\",\n\"{74777A04-B9E7-48CD-9F1C-6D2BA8F9DF62}\",\n\"{0788471C-1058-45E9-B7E3-D9024DC7FD73}\",\n\"{67E7E41C-326B-4945-9616-92C7945AC1DA}\",\n\"{A3F160DE-42DA-49B7-8821-C737DBCD5D68}\",\n\"{A4DE46E9-0430-4F50-B8EF-CBD77D53D6E2}\",\n\"{803C36DF-3CEC-4FDB-B74C-AF3FE0686A74}\",\n\"{1FC76B9F-A55D-42FA-AF6E-9180E753E4BF}\",\n\"{9FE4AB84-18B2-4DED-9508-7F4500275E8A}\",\n\"{AC5D6F35-5B50-4106-8AE9-92A3CED67153}\",\n\"{8DDD8E63-DF58-41A1-AB40-20703FE1D601}\",\n\"{C833FD07-7A88-4CDB-920D-AFD06591DB44}\",\n\"{6D3598E5-2E49-4088-BDFB-FC029DAF525D}\",\n\"{404198D7-729C-4DE9-A1A4-72D755B64D18}\",\n\"{0B0D86D8-5134-485D-981C-31F160019623}\",\n\"{BB79876A-8C21-4CE9-A9E5-B788EB86559B}\",\n\"{F66440CF-E287-42F1-9053-17854FD46068}\",\n\"{70F35B08-E325-46C9-8C8F-BDE34540A72C}\",\n\"{388B523F-F842-4446-8296-A8F1945E78C6}\",\n\"{DC4C5439-92B0-466E-870B-F9AF2D602396}\",\n\"{D06DEFFC-651A-4934-92A0-366837C88FE2}\",\n\"{2CAE8CB3-E04A-4307-B2CB-394C1C0AEE86}\",\n\"{572BE9FB-5974-4920-BF66-6B43B0511FED}\",\n\"{4B2C7EF5-F5A7-4929-9449-C73BC8A86A2D}\",\n\"{E75FE84D-9918-49B5-B881-FC5D39EC22B4}\",\n\"{676CC1D2-9ED4-4B79-80C5-225BBD4741A0}\",\n\"{16FA0C55-A96D-4EA0-9F19-D2336E7C87A0}\",\n\"{306C319B-65CF-4A7B-87C1-E26CC0C67FFB}\",\n\"{1FD96FDF-54DD-4FF9-89F0-A2402408ECD7}\",\n\"{D6C69253-FD6A-448C-A08E-0B92BE8541E0}\",\n\"{6D3718AA-3104-409E-9AE5-F5E6B93B8F7A}\",\n\"{B13244C7-5683-46DB-8165-EA6577E4D317}\",\n\"{03AE660F-F2D9-4A63-8596-D1682952D558}\",\n\"{BAC674D4-D57F-4A6C-BA2F-6A09C7FF156C}\",\n\"{450D548C-4720-4E62-BD96-02D3CBC7FB7B}\",\n\"{239EEB26-033B-45F4-8FAD-4408AC4D95DB}\",\n\"{17AF5231-11FB-42FC-980A-A824DB30276B}\",\n\"{7A9DA225-EED1-46C7-B004-515ADDFF854B}\",\n\"{14C8AEA1-1D80-481F-AFF8-9D617810F52A}\",\n\"{10EDD02A-6283-473D-B45B-4E73E6C3DD2C}\",\n\"{C6D55B10-5D41-411D-8104-03E1192E416B}\",\n\"{B2C34D7B-365F-48DB-A9D2-C2334FC15F75}\",\n\"{3D7BDF88-3B94-4521-9A57-34068D0AB033}\",\n\"{45DDE466-3782-4961-96BC-01449F56F8BA}\",\n\"{9455DB05-68D8-4767-97B2-F16E4B6B7E09}\",\n\"{77C6FF1D-29C3-497B-AE6B-DE8232B67228}\",\n\"{47B26201-29B5-404A-A097-541F4D5F890B}\",\n\"{657E6992-3B79-4D81-A413-4C4247A08AF5}\",\n\"{B4616BA9-DF2D-4DBE-9EE8-E15E8FCF55C6}\",\n\"{57AEB422-EC21-4CD3-9962-414806A7D798}\",\n\"{EB1C920C-1AED-48E5-9991-58499ED00596}\",\n\"{EEAC71BF-3AA9-4855-BB38-70D1D5B42193}\",\n\"{96E54A7C-A27F-461E-A2EE-FBC0127EBB13}\",\n\"{EACEDADE-1CA1-4095-BA6D-436F6DE2A6E9}\",\n\"{6181A92E-8F85-43B7-B86C-6C3086A84A23}\",\n\"{A0C0B1DE-6A3A-41AB-AF18-E7D646E7FC0B}\",\n\"{D13C576B-FE11-419F-86FC-9F31A8EB173E}\",\n\"{C2829776-F0E0-419E-9EB0-E3686CF2D648}\",\n\"{9C714125-9860-4C53-B21D-6FAEE57A90D6}\",\n\"{9F9377A5-9D99-4A2F-8DAC-B58C3FA16AEE}\",\n\"{731D2E09-D2D7-43B7-9502-A61D0B11FC24}\",\n\"{BD1F9028-532C-4A8A-B12D-17AD7381D22D}\",\n\"{E37580F7-7193-461E-A1EC-4346A8F65D48}\",\n\"{74ECFC77-8A04-4363-BADF-EDF2BFF4697B}\",\n\"{74ECFC77-8A04-4363-BADF-EDF2BFF4697B}\",\n\"{74ECFC77-8A04-4363-BADF-EDF2BFF4697B}\",\n\"{F01DF6C0-F5ED-497B-A036-214593EE24AB}\",\n\"{53446A49-0BA5-42B3-9E58-F646879A361C}\",\n\"{8EC17724-B204-4781-B091-C3B939940055}\",\n\"{F7807233-18C6-47B4-BCF9-25D470421560}\",\n\"{DAFC7925-F5EA-437E-845D-F687F5580E89}\",\n\"{DA7B81B5-A188-4F9C-91EB-EF781857225B}\",\n\"{8086DF3B-2B48-4DCB-BC9D-FE6E114066C4}\",\n\"{6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F}\",\n\"{6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F}\",\n\"{6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F}\",\n\"{6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F}\",\n\"{6A4EA5E5-1F8E-491A-B0D4-739B492BCB5F}\",\n```\n\n----------------------------------------\n\nTITLE: List of UUIDs in Plaintext\nDESCRIPTION: A collection of 252 Universally Unique Identifiers (UUIDs) in plaintext format. Each UUID is on a separate line and follows the standard UUID format of 32 hexadecimal digits separated by hyphens.\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n\"ddd363dc02ec489fbf08774dc2154393\",\n\"ddd363dc02ec489fbf08774dc2154393\",\n\"ddd363dc02ec489fbf08774dc2154393\",\n\"ddd363dc02ec489fbf08774dc2154393\",\n\"353bd8e9f9f2416798b75e6d449a4b45\",\n\"3de434b5d1c140aca68c0bc35bd47942\",\n\"e5f6c4762f42434dbaf1bd8095fc96c7\",\n\"d48d186facc144e89600e922ce34895e\",\n\"28d704427a5641948dfa7c2e7b1d6ad4\",\n\"cae98046680a4d24b42a176ba1d93282\",\n// ... (242 more UUIDs) ...\n\"32216ef0949a4b93bc900d5b3b0de5fc\",\n\"d7e50363218742d799c9620d1dff0864\"\n```\n\n----------------------------------------\n\nTITLE: GUID Identifier List\nDESCRIPTION: A comprehensive list of unique GUIDs, likely used for tracking, mapping, or referencing components within the MassTransit system\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{GUIDs: 130 unique identifiers}]\n```\n\n----------------------------------------\n\nTITLE: Custom Base32 Identifier List\nDESCRIPTION: A list of unique Base32 encoded identifiers, potentially used for alternate encoding or compact representation of system components\nSOURCE: https://github.com/masstransit/masstransit/blob/develop/tests/MassTransit.Abstractions.Tests/NewId/texts.txt#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{Base32 Identifiers: 200 unique values}]\n```"
  }
]