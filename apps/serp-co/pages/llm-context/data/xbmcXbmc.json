[
  {
    "owner": "xbmc",
    "repo": "xbmc",
    "content": "TITLE: Defining Kodi Configuration Properties\nDESCRIPTION: This snippet defines key-value pairs for Kodi's configuration, including application name, version information, website URLs, and package details. It sets up essential identifiers and descriptors for the Kodi media center application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/version.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nAPP_NAME Kodi\nCOMPANY_NAME XBMC Foundation\nDEV_NAME Team Kodi\nABOUT_WEBSITE https://kodi.tv/about/\nFORUM_WEBSITE https://forum.kodi.tv/\nDOCS_WEBSITE https://kodi.wiki/\nCOPYRIGHT_YEARS 2005-2021\nWEBSITE http://kodi.tv\nVERSION_MAJOR 22\nVERSION_MINOR 0\nVERSION_TAG ALPHA1\nVERSION_CODE 21.90.700\nADDON_API 21.90.700\nADDON_REPOS repository.xbmc.org|https://mirrors.kodi.tv\nAPP_PACKAGE org.xbmc.kodi\nPACKAGE_IDENTITY XBMCFoundation.Kodi\nPACKAGE_PUBLISHER C62BD90A-CDD8-477F-96C3-B25992247B97\nPACKAGE_DESCRIPTION Kodi is an open source (GPL) software media center for playing videos, music, pictures, games, and more.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Identity Settings\nDESCRIPTION: Commands to set up global git configuration with user email and name. This is a prerequisite for contributing to the Kodi project, ensuring your commits are properly attributed.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email \"<your-email>\"\ngit config --global user.name \"<your-username>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up FFmpeg External Project in CMake\nDESCRIPTION: Configures FFmpeg as an external project, setting up the build command and installation process. It handles different build systems (Make and Ninja) and sets up parallel builds when possible.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/target/ffmpeg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MAKE_COMMAND $(MAKE))\nif(CMAKE_GENERATOR STREQUAL Ninja)\n  set(MAKE_COMMAND make)\n  include(ProcessorCount)\n  ProcessorCount(N)\n  if(NOT N EQUAL 0)\n    set(MAKE_COMMAND make -j${N})\n  endif()\nendif()\n\ninclude(ExternalProject)\nexternalproject_add(ffmpeg\n                    SOURCE_DIR ${CMAKE_SOURCE_DIR}\n                    CONFIGURE_COMMAND ${pkgconf} ${pkgconf_path} <SOURCE_DIR>/configure\n                      --prefix=${CMAKE_INSTALL_PREFIX}\n                      --extra-version=\"kodi-${FFMPEG_VER}\"\n                      ${ffmpeg_conf}\n                    BUILD_COMMAND ${MAKE_COMMAND})\n\ninstall(CODE \"Message(Done)\")\n\n# Quell warnings\nset(BUILD_SHARED_LIBS)\nset(XBMC_BUILD_DIR)\nset(KODI_BUILD_DIR)\n```\n\n----------------------------------------\n\nTITLE: Processing Addons and Setting Up Build Targets in CMake\nDESCRIPTION: This snippet iterates through the list of addons, checks for platform compatibility, downloads source code if needed, and sets up ExternalProject targets for building each addon. It also handles addon dependencies and integrates with the main build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(addon ${addons})\n  if(NOT (addon MATCHES platforms.txt))\n    file(STRINGS ${addon} def)\n    string(REPLACE \" \" \";\" def ${def})\n    list(GET def 0 id)\n\n    if(\"${ADDONS_TO_BUILD}\" STREQUAL \"all\")\n      set(ADDON_FOUND TRUE)\n    else()\n      set(ADDON_EXCLUDE FALSE)\n      set(ADDON_FOUND FALSE)\n      foreach(exclusion ${EXCLUDE_ADDONS})\n        if(id MATCHES \"${exclusion}\")\n          set(ADDON_EXCLUDE TRUE)\n          message(STATUS \"Addon ${id} matches exclusion rule -${exclusion}\")\n          break()\n        endif()\n      endforeach()\n\n      if(ADDON_EXCLUDE)\n        continue()\n      endif()\n\n      list(FIND EXACT_MATCH_ADDON_LIST ${id} idx)\n      if(idx GREATER -1)\n        # exact match, so build\n        message(STATUS \"Exact match ${id}, building addon\")\n        set(ADDON_FOUND TRUE)\n      else()\n        # regex search\n        foreach(ADDONLISTITEM ${REGEX_ADDONS_TO_BUILD})\n          if(id MATCHES \"${ADDONLISTITEM}\")\n            message(STATUS \"Pattern ${ADDONLISTITEM} matches ${id}, building addon\")\n            set(ADDON_FOUND TRUE)\n            break()\n          endif()\n        endforeach()\n      endif()\n    endif()\n\n    if(ADDON_FOUND)\n      message(STATUS \"\\n-- ---- Configuring addon ${addon} ----\")\n      set(SUPPORTED_ADDON_FOUND TRUE)\n\n      get_filename_component(dir ${addon} DIRECTORY)\n\n      # check if the addon has a platforms.txt\n      set(platform_found FALSE)\n      check_target_platform(${dir} ${CORE_SYSTEM_NAME} platform_found)\n\n      if(${platform_found})\n        # ... [Additional code for downloading, extracting, and setting up the build]\n\n        externalproject_add(${id}\n                            SOURCE_DIR ${SOURCE_DIR}\n                            INSTALL_DIR ${ADDON_INSTALL_DIR}\n                            CMAKE_ARGS ${BUILD_ARGS})\n\n        # ... [Additional code for handling dependencies and custom build steps]\n\n      else()\n        # add a dummy target for addons that are unsupported on this platform\n        add_custom_target(${id} COMMAND ${CMAKE_COMMAND} -E echo \"IGNORED ${id} - not supported on ${CORE_SYSTEM_NAME}\\n\")\n      endif()\n    endif()\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Building Kodi with CMake\nDESCRIPTION: Commands for building Kodi using CMake with parallel processing optimization.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . -- VERBOSE=1 -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK with Required Components\nDESCRIPTION: Set of commands to accept licenses and install required Android SDK components including platform tools, specific Android platform, build tools, and NDK.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/android-tools/android-sdk-linux/cmdline-tools/bin\n./sdkmanager --sdk_root=$(pwd)/../.. --licenses\n./sdkmanager --sdk_root=$(pwd)/../.. platform-tools\n./sdkmanager --sdk_root=$(pwd)/../.. \"platforms;android-35\"\n./sdkmanager --sdk_root=$(pwd)/../.. \"build-tools;34.0.0\"\n./sdkmanager --sdk_root=$(pwd)/../.. \"ndk;27.2.12479018\"\n```\n\n----------------------------------------\n\nTITLE: Basic CMake build command for Kodi\nDESCRIPTION: Command to trigger the CMake-based build system for Kodi, specifying path and generator. This is the fundamental command to start a build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake <path> -G <generator>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Build for X11 with CMake\nDESCRIPTION: Command to configure Kodi build for X11 display server with OpenGL rendering using CMake. Installation prefix is set to /usr/local.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DCORE_PLATFORM_NAME=x11 -DAPP_RENDER_SYSTEM=gl\n```\n\n----------------------------------------\n\nTITLE: Building Specific Binary Add-ons\nDESCRIPTION: Command to build only specified binary add-ons (audioencoder.flac, pvr.vdr.vnsi, and audiodecoder.snesapu).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/binary-addons ADDONS=\"audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu\"\n```\n\n----------------------------------------\n\nTITLE: Building Binary Add-ons\nDESCRIPTION: Commands for building Kodi binary add-ons using different approaches and configurations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=/usr/local\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=/usr/local ADDONS=\"audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo make -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=/usr/local ADDONS=\"pvr.*\"\n```\n\n----------------------------------------\n\nTITLE: Building Kodi with CMake\nDESCRIPTION: Alternative method to build Kodi using CMake with Debug configuration and verbose output\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n/Users/Shared/xbmc-depends/x86_64-darwin17.5.0-native/bin/cmake --build . --config \"Debug\" -- -verbose -jobs $(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: Defines build options for features, dependencies, and platform-specific functionality. Includes options for internal dependencies, system libraries, and build tools.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(VERBOSE            \"Enable verbose output?\" OFF)\noption(ENABLE_CLANGTIDY   \"Enable clang-tidy support?\" OFF)\noption(ENABLE_CPPCHECK    \"Enable cppcheck support?\" OFF)\noption(ENABLE_DVDCSS      \"Enable libdvdcss support?\" ON)\noption(ENABLE_INCLUDEWHATYOUUSE \"Enable include-what-you-use support?\" OFF)\noption(ENABLE_UPNP        \"Enable UPnP support?\" ON)\noption(ENABLE_AIRTUNES    \"Enable AirTunes support?\" ON)\noption(ENABLE_OPTICAL     \"Enable optical support?\" ON)\noption(ENABLE_PYTHON      \"Enable python support?\" ON)\noption(ENABLE_TESTING     \"Enable testing support?\" ON)\n```\n\n----------------------------------------\n\nTITLE: Doxygen Documentation - C++\nDESCRIPTION: Example of proper Doxygen documentation for functions and methods.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\n/*!\n * \\brief Splits the given input string using the given delimiter into separate strings.\n *\n * If the given input string is empty, nothing will be put into the target iterator.\n *\n * \\param destination the beginning of the destination range\n * \\param input input string to be split\n * \\param delimiter delimiter to be used to split the input string\n * \\param maxStrings (optional) maximum number of split strings\n * \\return output iterator to the element in the destination range one past the last element\n *         that was put there\n */\ntemplate<typename OutputIt>\nstatic OutputIt SplitTo(OutputIt destination, const std::string& input, const std::string& delimiter, unsigned int maxStrings = 0);\n```\n\n----------------------------------------\n\nTITLE: Logging Implementation Examples in C++\nDESCRIPTION: Demonstrates proper and improper usage of CLog::Log function with fmt library formatting. Shows correct logging patterns and common mistakes to avoid.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nCLog::Log(LOGDEBUG, \"Window size: {}x{}\", width, height);\nCLog::LogF(LOGERROR, \"An error occurred in window \\\"{}\\\"\", name);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nCLog::Log(LOGWARNING, \"Window size: %dx%d\", width, height);\nCLog::Log(LOGERROR, \"{}: An error occurred in window \\\"{}\\\"\", __FUNCTION__, name);\nprintf(\"Window size: %dx%d\", width, height);\nstd::cout << \"Window size: \" << width << \"x\" << height << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Advanced CMake build configuration for Kodi\nDESCRIPTION: Example of a more complex CMake command with build type, architecture defines, and installation path. This demonstrates how to customize the build configuration with multiple parameters.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake `<path>` [-G `<generator>`] \\  \n      -DCMAKE_BUILD_TYPE=Release \\  \n      -DARCH_DEFINES=\"-DTARGET_LINUX\" \\  \n      -DCMAKE_INSTALL_PREFIX=\"`<path-to-install-directory>`\"\n```\n\n----------------------------------------\n\nTITLE: Switch-Case Statement Formatting in C++\nDESCRIPTION: Demonstrates the proper formatting of switch-case statements in C++ for Kodi. Each case should be properly indented and braced when necessary.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nswitch (cmd)\n{\n  case x:\n  {\n    doSomething();\n    break;\n  }\n  case x:\n  case z:\n    return true;\n  default:\n    doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration - C++\nDESCRIPTION: Examples showing proper variable declaration and immediate usage.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nint x{3};\nCLog::Log(\"test: {}\", x);\n```\n\n----------------------------------------\n\nTITLE: Installing ADB for Android Device Communication\nDESCRIPTION: Install the Android Debug Bridge (ADB) tool for communicating with Android devices from the command line.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install adb\n```\n\n----------------------------------------\n\nTITLE: Build Commands for Kodi\nDESCRIPTION: Commands for building Kodi in Debug or Release configurations using CMake.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_3\n\nLANGUAGE: bat\nCODE:\n```\ncmake --build . --config \"Debug\"\ncmake --build . --config \"Release\"\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Commands for building and running Kodi's test suite using Google C++ Testing Framework.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake kodi-test\n```\n\nLANGUAGE: bash\nCODE:\n```\n./kodi-test\n```\n\nLANGUAGE: bash\nCODE:\n```\n./kodi-test --gtest_help\n```\n\n----------------------------------------\n\nTITLE: Database Client Configuration in CMake\nDESCRIPTION: Configures database client settings, preventing simultaneous use of MySQL and MariaDB clients. Sets up conditional dependency checks for database connectivity.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_MARIADBCLIENT AND NOT ENABLE_MARIADBCLIENT STREQUAL AUTO AND ENABLE_MYSQLCLIENT AND NOT ENABLE_MYSQLCLIENT STREQUAL AUTO)\n  MESSAGE(FATAL_ERROR \"You can not use MySql and MariaDB at the same time. Disable one by adding -DENABLE_MYSQLCLIENT=OFF or -DENABLE_MARIADBCLIENT=OFF.\")\nelseif(ENABLE_MYSQLCLIENT AND NOT ENABLE_MYSQLCLIENT STREQUAL AUTO)\n  set(ENABLE_MARIADBCLIENT OFF CACHE BOOL \"\")\nendif()\n\ncore_optional_dep(MariaDBClient)\nif(NOT TARGET ${APP_NAME_LC}::MariaDBClient)\n  core_optional_dep(MySqlClient)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example of Complex Logic Structure in C++\nDESCRIPTION: An example of a complex if statement with multiple logical operators that demonstrates poor readability. This represents the type of code that should be refactored according to the guide.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.CleanUpLogic.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nif (A || B || (C &&D) || ((E || (F && G)) && (H && I && J && K)) || L)\n  something();\n```\n\n----------------------------------------\n\nTITLE: Using clang-format Directives for Table-like Data in C++\nDESCRIPTION: Demonstrates how to disable clang-format for special formatting needs like table-like data structures where vertical alignment improves readability.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n// clang-format off\nstatic const CGUIDialogMediaFilter::Filter filterList[] = {\n  { \"movies\",       FieldTitle,         556,    SettingType::String,  \"edit\",   \"string\",   CDatabaseQueryRule::OPERATOR_CONTAINS },\n  { \"movies\",       FieldRating,        563,    SettingType::Number,  \"range\",  \"number\",   CDatabaseQueryRule::OPERATOR_BETWEEN },\n  { \"movies\",       FieldUserRating,    38018,  SettingType::Integer, \"range\",  \"integer\",  CDatabaseQueryRule::OPERATOR_BETWEEN },\n  ...\n  { \"songs\",        FieldSource,        39030,  SettingType::List,    \"list\",   \"string\",   CDatabaseQueryRule::OPERATOR_EQUALS },\n};  \n// clang-format on\n```\n\n----------------------------------------\n\nTITLE: Defining Required and Optional Dependencies\nDESCRIPTION: Specifies the required and optional dependencies for building Kodi, including version requirements and platform-specific dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(required_deps ASS>=0.15.0\n                  Cdio\n                  CrossGUID\n                  Curl\n                  Exiv2\n                  FFMPEG\n                  FlatBuffers\n                  Fmt\n                  FreeType\n                  FriBidi\n                  Fstrcmp\n                  HarfBuzz\n                  Iconv\n                  LibDvd\n                  Lzo2\n                  OpenSSL>=1.1.0\n                  PCRE2\n                  RapidJSON>=1.0.2\n                  Spdlog\n                  Sqlite3\n                  TagLib>=1.9.0\n                  TinyXML\n                  TinyXML2\n                  ZLIB\n                  ${PLATFORM_REQUIRED_DEPS})\n```\n\n----------------------------------------\n\nTITLE: Configuring VideoPlayer Source Files in CMake\nDESCRIPTION: Sets up the list of source files for the VideoPlayer component. Includes various classes for audio, video, subtitle, and teletext processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AudioSinkAE.cpp\n            DVDClock.cpp\n            DVDDemuxSPU.cpp\n            DVDFileInfo.cpp\n            DVDMessage.cpp\n            DVDMessageQueue.cpp\n            DVDOverlayContainer.cpp\n            DVDStreamInfo.cpp\n            PTSTracker.cpp\n            Edl.cpp\n            VideoPlayer.cpp\n            VideoPlayerAudio.cpp\n            VideoPlayerAudioID3.cpp\n            VideoPlayerRadioRDS.cpp\n            VideoPlayerSubtitle.cpp\n            VideoPlayerTeletext.cpp\n            VideoPlayerVideo.cpp\n            VideoReferenceClock.cpp)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Binary Add-ons\nDESCRIPTION: Command to clean up binary add-ons when needed.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/binary-addons clean\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies and Add-ons\nDESCRIPTION: Commands for building platform dependencies and individual add-ons using CMake.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/\ngit clone https://github.com/xbmc/platform.git\ncd ~/src/platform/\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local\nmake && make install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/\ngit clone https://github.com/xbmc/kodi-platform.git\ncd ~/src/kodi-platform/\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local\nmake && make install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src\ngit clone https://github.com/kodi-pvr/pvr.demo.git\ncd ~/src/pvr.demo/\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local\nmake && make install\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Ubuntu\nDESCRIPTION: Command to install the required packages needed to cross-compile Kodi for Android using apt package manager.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install autoconf bison build-essential curl default-jdk flex gawk git gperf lib32stdc++6 lib32z1 lib32z1-dev libcurl4-openssl-dev unzip zip zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Status Messages in CMake\nDESCRIPTION: This script outputs build configuration status messages. It first displays a configuration header and iterates through final_message items. When VERBOSE is enabled, it shows extensive internal variables including dependencies, compiler flags, directory paths, and build information to aid in debugging.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Status\nmessage(STATUS \"#---- CONFIGURATION ----#\")\nforeach(msg ${final_message})\n  message(STATUS ${msg})\nendforeach()\n\nif(VERBOSE)\n  message(STATUS \"\\n#--------------- Internal Variables -------------#\")\n  message(STATUS \"DEPLIBS: ${DEPLIBS}\")\n  message(STATUS \"core_DEPENDS: ${core_DEPENDS}\")\n  message(STATUS \"#---------------------------------------------#\")\n  message(STATUS \"SYSTEM_LDFLAGS        : ${SYSTEM_LDFLAGS}\")\n  message(STATUS \"CMAKE_DL_LIBS         : ${CMAKE_DL_LIBS}\")\n  message(STATUS \"CMAKE_C_FLAGS         : ${CMAKE_C_FLAGS}\")\n  message(STATUS \"CMAKE_CXX_FLAGS       : ${CMAKE_CXX_FLAGS}\")\n  message(STATUS \"CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}\")\n  message(STATUS \"LTO_OPTIMIZATION      : ${CMAKE_INTERPROCEDURAL_OPTIMIZATION}\")\n  if(CMAKE_INTERPROCEDURAL_OPTIMIZATION)\n    message(STATUS \"CMAKE_CXX_COMPILE_OPTIONS_IPO: ${CMAKE_CXX_COMPILE_OPTIONS_IPO}\")\n    message(STATUS \"CMAKE_C_COMPILE_OPTIONS_IPO  : ${CMAKE_C_COMPILE_OPTIONS_IPO}\")\n    message(STATUS \"CMAKE_AR                     : ${CMAKE_AR}\")\n    message(STATUS \"CMAKE_NM                     : ${CMAKE_NM}\")\n    message(STATUS \"CMAKE_LINKER                 : ${CMAKE_LINKER}\")\n  endif()\n  message(STATUS \"#---------------------------------------------#\")\n  message(STATUS \"bindir     : ${bindir}\")\n  message(STATUS \"includedir : ${includedir}\")\n  message(STATUS \"libdir     : ${libdir}\")\n  message(STATUS \"datarootdir: ${datarootdir}\")\n  message(STATUS \"#---------------------------------------------#\")\n  message(STATUS \"BINARY: ${APP_NAME_LC}${APP_BINARY_SUFFIX}\")\n  message(STATUS \"#---------------------------------------------#\")\n  message(STATUS \"GIT_REV: ${APP_SCMID}\")\n  message(STATUS \"Build date: ${APP_BUILD_DATE}\")\n  message(STATUS \"#---------------------------------------------#\")\n  message(STATUS \"CPACK_GENERATOR       : ${CPACK_GENERATOR}\")\n  message(STATUS \"CPACK_SOURCE_GENERATOR: ${CPACK_SOURCE_GENERATOR}\")\n  message(STATUS \"#---------------------------------------------#\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Repository Function for Kodi Addons\nDESCRIPTION: Defines a function to clone and set up a Kodi addon repository using ExternalProject. It configures the repository with the specified URL and revision, and sets up the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\n\nfunction(bootstrap_repo repo_id repo_url repo_revision)\n  message(STATUS \"Bootstrapping addons from ${repo_id} (${repo_url} ${repo_revision})...\")\n  externalproject_add(${repo_id}\n                      GIT_REPOSITORY ${repo_url}\n                      GIT_TAG ${repo_revision}\n                      PREFIX ${BUILD_DIR}/${repo_id}\n                      CONFIGURE_COMMAND \"\"\n                      BUILD_COMMAND \"\"\n                      INSTALL_COMMAND ${CMAKE_COMMAND}\n                                      -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}\n                                      -DPROJECT_SOURCE_DIR=<SOURCE_DIR>\n                                      -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\n                                      -P ${PROJECT_SOURCE_DIR}/Bootstrap.cmake\n                      )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Pattern in C++\nDESCRIPTION: Example demonstrating a singleton implementation using static instance and getInstance pattern.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.KillAGlobal.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nCStereoscopicsManager& CStereoscopicsManager::GetInstance()\n{\n  static CStereoscopicsManager sStereoscopicsManager;\n  return sStereoscopicsManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Method Override Implementation in C++\nDESCRIPTION: Shows correct and incorrect ways to override virtual functions in derived classes using the override keyword.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nclass CLogger : public ILogger\n{\npublic:\n  void Log(...) override;\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\nclass CLogger : public ILogger\n{\npublic:\n  virtual void Log(...) override;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting Examples in C++\nDESCRIPTION: Demonstrates proper C++ style casting versus discouraged C-style casting.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\nchar m_dataChar{...};\nuint8_t m_dataInt = static_cast<uint8_t>(m_dataChar);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nchar m_dataChar{...};\nuint8_t m_dataInt = (uint8_t)m_dataChar;\n```\n\n----------------------------------------\n\nTITLE: Proper Function Declaration in C++\nDESCRIPTION: Shows the correct way to declare functions with empty parameter lists in C++ for Kodi, without using superfluous 'void'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Test();\n```\n\n----------------------------------------\n\nTITLE: Variable Initialization - C++\nDESCRIPTION: Demonstrates proper variable initialization practices using {}.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nint x{3};\nint* y{nullptr};\nbool z = false;\nstd::string text;\nKindOfStruct theStruct{};\nLog::Log(\"test: {}, {}, {}\", x, y, z);\n```\n\n----------------------------------------\n\nTITLE: Windows Store Build Compiler Definitions\nDESCRIPTION: Preprocessor directives for Windows Store build configuration. Includes target platform definitions, disables min/max macros, and suppresses CRT security warnings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/windowsstore/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n-DTARGET_WINDOWS -DTARGET_WINDOWS_STORE -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS\n```\n\n----------------------------------------\n\nTITLE: Running Kodi Builds\nDESCRIPTION: Commands for launching different Kodi builds (X11, Wayland, GBM) from the build directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./kodi-x11\n```\n\nLANGUAGE: bash\nCODE:\n```\n./kodi-wayland\n```\n\nLANGUAGE: bash\nCODE:\n```\n./kodi-gbm\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Renderer Source Files in CMake for Windows\nDESCRIPTION: Sets up a list of source files for different video renderer implementations including base, DXVA, high-quality, shader-based, and software renderers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RendererBase.cpp\n            RendererDXVA.cpp\n            RendererHQ.cpp\n            RendererShaders.cpp\n            RendererSoftware.cpp)\n```\n\n----------------------------------------\n\nTITLE: Syncing Local Master with Upstream\nDESCRIPTION: Commands to synchronize local master branch with upstream master, ensuring latest code version.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master       // switch to master branch\ngit fetch upstream        // fetch upstream changes\ngit merge upstream/master // merge upstream changes\ngit push origin           // push updated master branch to your personal remote repo (optional)\n```\n\n----------------------------------------\n\nTITLE: Building Kodi Binary\nDESCRIPTION: Commands to build the final Kodi binary using the configured build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-build\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Core Library Build Configuration\nDESCRIPTION: Configures the XBMC core library build and sets Windows Store specific properties if applicable.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(xbmc)\n\nif(CORE_SYSTEM_NAME STREQUAL windowsstore)\n  set_target_properties(${CORE_LIBRARY} PROPERTIES STATIC_LIBRARY_FLAGS \"/ignore:4264\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Python Binding Library in CMake\nDESCRIPTION: Defines the inputs for code generation, applies the generate_file function to each input, and creates a static library from the generated sources. Includes platform-specific settings and compiler flags.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/swig/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# The generated bindings\nset(INPUTS AddonModuleXbmcaddon.i\n           AddonModuleXbmcdrm.i\n           AddonModuleXbmcgui.i\n           AddonModuleXbmc.i\n           AddonModuleXbmcplugin.i\n           AddonModuleXbmcvfs.i\n           AddonModuleXbmcwsgi.i)\n\nset(GROOVY_DIR ${CMAKE_SOURCE_DIR}/tools/codegenerator/groovy)\n\nforeach(INPUT IN LISTS INPUTS)\n  generate_file(${INPUT})\nendforeach()\n\nadd_library(python_binding STATIC ${SOURCES})\nset_target_properties(python_binding PROPERTIES POSITION_INDEPENDENT_CODE TRUE\n                                                FOLDER \"Build Utilities\")\n\nif(CORE_SYSTEM_NAME STREQUAL windowsstore)\n  set_target_properties(python_binding PROPERTIES STATIC_LIBRARY_FLAGS \"/ignore:4264\")\nendif()\nif(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n  set_target_properties(python_binding PROPERTIES\n                        COMPILE_FLAGS -Wno-cast-function-type) # from -Wextra\nendif()\n\n# Add target dependencies to lib\ncore_target_link_libraries(python_binding)\n# Link this target lib to core\ntarget_link_libraries(lib${APP_NAME_LC} PUBLIC python_binding)\n```\n\n----------------------------------------\n\nTITLE: XBMC Version History JSON Configuration\nDESCRIPTION: Detailed version history configuration for XBMC/Kodi releases, including major and minor version numbers, tags (beta/alpha), revision hashes, and addon support status. Each entry contains release metadata like tagversion and extrainfo.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.txt#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"major\": \"18\",\n    \"minor\": \"0\",\n    \"tag\": \"beta\",\n    \"tagversion\":\"4\",\n    \"revision\": \"20181023-c77874c5bf\",\n    \"extrainfo\": \"beta4\",\n    \"addon_support\": \"yes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pointer and Reference Types - C++\nDESCRIPTION: Shows proper alignment of * and & with the base type.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nchar* a;\nvoid test(const std::string& b);\n```\n\n----------------------------------------\n\nTITLE: Header File Organization - C++\nDESCRIPTION: Example of proper header file inclusion order and organization.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"PVRManager.h\"\n\n#include \"Application.h\"\n#include \"ServiceBroker.h\"\n#include \"addons/AddonInstaller.h\"\n#include \"dialogs/GUIDialogExtendedProgressBar.h\"\n#include \"messaging/ApplicationMessenger.h\"\n#include \"messaging/ThreadMessage.h\"\n#include \"messaging/helpers/DialogHelper.h\"\n#include \"music/MusicDatabase.h\"\n#include \"music/tags/MusicInfoTag.h\"\n#include \"network/Network.h\"\n#include \"pvr/addons/PVRClients.h\"\n#include \"pvr/channels/PVRChannel.h\"\n#include \"settings/Settings.h\"\n#include \"threads/SingleLock.h\"\n#include \"utils/JobManager.h\"\n#include \"utils/Variant.h\"\n#include \"utils/log.h\"\n#include \"video/VideoDatabase.h\"\n\n#include <cassert>\n#include <utility>\n\n#include <libavutil/pixfmt.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Build for Various Android Architectures\nDESCRIPTION: Set of commands to configure the Kodi build system for different Android architectures (aarch64, arm, x86, x86_64).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-tarballs=$HOME/android-tools/xbmc-tarballs --host=aarch64-linux-android --with-sdk-path=$HOME/android-tools/android-sdk-linux --prefix=$HOME/android-tools/xbmc-depends\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Build Flags for XBMC/Kodi\nDESCRIPTION: Defines compiler flags for Linux builds: enables POSIX and Linux target definitions and generates position independent code with -fPIC flag\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/linux/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\n-DTARGET_POSIX -DTARGET_LINUX -fPIC\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration for Kodi\nDESCRIPTION: Sets up initial CMake configuration including version requirements, project language settings, and core CMake policies. Special handling for Windows requires CMake 3.20+ for multi-config generator expressions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nif(WIN32)\n  # Version 3.20 is required for multi-config generator expressions to work\n  cmake_minimum_required(VERSION 3.20)\nendif()\nproject(kodi LANGUAGES CXX C ASM)\n```\n\n----------------------------------------\n\nTITLE: Building Missing Dependencies for Kodi\nDESCRIPTION: Commands to build and install dependencies that might be missing from distribution packages such as crossguid, flatbuffers, libfmt, libspdlog, wayland-protocols, and waylandpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi\nsudo make -C tools/depends/target/crossguid PREFIX=/usr/local\nsudo make -C tools/depends/target/flatbuffers PREFIX=/usr/local\nsudo make -C tools/depends/target/fmt PREFIX=/usr/local\nsudo make -C tools/depends/target/spdlog PREFIX=/usr/local\nsudo make -C tools/depends/target/wayland-protocols PREFIX=/usr/local\nsudo make -C tools/depends/target/waylandpp PREFIX=/usr/local\n```\n\n----------------------------------------\n\nTITLE: Optional Dependencies Processing in CMake\nDESCRIPTION: Processes platform-specific optional dependencies by filtering out excluded ones and checking their availability. Handles both optional and required dependencies, including package libraries that may be bundled with the main application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Remove excluded platform specific optional_deps\nforeach(excludedep ${PLATFORM_OPTIONAL_DEPS_EXCLUDE})\n  list(FILTER optional_deps EXCLUDE REGEX ${excludedep})\nendforeach()\n\n# Check optional deps first, since their availability can influence required ones, e.g. ffmpeg\ncore_optional_dep(${optional_deps})\ncore_require_dep(${required_deps})\n\n# Check for any libs to be packaged with main app. eg libaacs\nif(PLATFORM_OPTIONAL_PACKAGES)\n  core_optional_package_lib(${PLATFORM_OPTIONAL_PACKAGES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg Build Options in CMake\nDESCRIPTION: Sets various build options for FFmpeg, including architecture-specific settings, feature toggles, and compiler/linker flags. It also handles platform-specific configurations for Linux, Android, iOS, and macOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/target/ffmpeg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CONFIGARCH --arch=${CPU})\n\nlist(APPEND ffmpeg_conf --disable-doc\n                        --disable-devices\n                        --disable-programs\n                        --disable-sdl2\n                        --disable-vulkan\n                        --enable-gpl\n                        --enable-postproc\n                        --enable-runtime-cpudetect\n                        --enable-pthreads\n                        --extra-version=\"Kodi\"\n            )\n\nif(CMAKE_C_FLAGS)\n  list(APPEND ffmpeg_conf --extra-cflags=${CMAKE_C_FLAGS})\nendif()\n\nif(CMAKE_CXX_FLAGS)\n  list(APPEND ffmpeg_conf --extra-cxxflags=${CMAKE_CXX_FLAGS})\nendif()\n\nif(CMAKE_EXE_LINKER_FLAGS)\n  list(APPEND ffmpeg_conf --extra-ldflags=${CMAKE_EXE_LINKER_FLAGS})\nendif()\n\nif(ENABLE_NEON)\n  list(APPEND ffmpeg_conf --enable-neon)\nendif()\n\nif(CMAKE_BUILD_TYPE STREQUAL Release)\n  list(APPEND ffmpeg_conf --disable-debug)\nendif()\n\nif(CORE_SYSTEM_NAME STREQUAL linux OR CORE_SYSTEM_NAME STREQUAL freebsd)\n  list(APPEND ffmpeg_conf --enable-pic\n                          --target-os=linux\n              )\n  if(ENABLE_VAAPI)\n    list(APPEND ffmpeg_conf --enable-vaapi)\n  else()\n    list(APPEND ffmpeg_conf --disable-vaapi)\n  endif()\n  if(ENABLE_VDPAU)\n    list(APPEND ffmpeg_conf --enable-vdpau)\n  else()\n    list(APPEND ffmpeg_conf --disable-vdpau)\n  endif()\nelseif(CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND ffmpeg_conf --target-os=android\n                          --extra-libs=-liconv\n                          --disable-linux-perf\n              )\n  if(CPU MATCHES arm64)\n    set(CONFIGARCH --arch=aarch64)\n    list(APPEND ffmpeg_conf --cpu=cortex-a53)\n  elseif(CPU MATCHES arm)\n    list(APPEND ffmpeg_conf --cpu=cortex-a9)\n  elseif(CPU MATCHES x86_64)\n    list(APPEND ffmpeg_conf --cpu=x86_64)\n    list(APPEND ffmpeg_conf --extra-cflags=-mno-stackrealign)\n  else()\n    list(APPEND ffmpeg_conf --cpu=i686 --disable-mmx --disable-asm)\n    list(APPEND ffmpeg_conf --extra-cflags=-mno-stackrealign)\n  endif()\nelseif(CORE_SYSTEM_NAME STREQUAL darwin_embedded)\n  list(APPEND ffmpeg_conf --enable-videotoolbox\n                          --disable-filter=yadif_videotoolbox\n                          --target-os=darwin\n              )\nelseif(CORE_SYSTEM_NAME STREQUAL osx)\n  list(APPEND ffmpeg_conf --enable-videotoolbox\n                          --target-os=darwin\n                          --disable-securetransport\n              )\nendif()\n\nif(CPU MATCHES arm)\n  list(APPEND ffmpeg_conf --disable-armv5te --disable-armv6t2)\nelseif(CPU MATCHES mips)\n  list(APPEND ffmpeg_conf --disable-mips32r2 --disable-mipsdsp --disable-mipsdspr2)\nendif()\n\nfind_package(GnuTLS)\nif(GNUTLS_FOUND)\n  list(APPEND ffmpeg_conf --enable-gnutls)\nendif()\n\nif(CPU MATCHES x86 OR CPU MATCHES x86_64)\n  find_package(NASM REQUIRED)\n  list(APPEND ffmpeg_conf --x86asmexe=${NASM_EXECUTABLE})\nendif()\n\nif(USE_LTO)\n   list(APPEND ffmpeg_conf --enable-lto)\nendif()\n\nif(ENABLE_DAV1D)\n  list(APPEND ffmpeg_conf --enable-libdav1d)\n  set(pkgconf_path \"PKG_CONFIG_PATH=${PKG_CONFIG_PATH}\")\nelse()\n  list(APPEND ffmpeg_conf --disable-libdav1d)\nendif()\n\nif(EXTRA_FLAGS)\n  string(REPLACE \" \" \";\" EXTRA_FLAGS ${EXTRA_FLAGS})\n  list(APPEND ffmpeg_conf ${EXTRA_FLAGS})\nendif()\n\nlist(APPEND ffmpeg_conf ${CONFIGARCH})\n\nmessage(STATUS \"FFMPEG_CONF: ${ffmpeg_conf}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Pull Request Patches\nDESCRIPTION: Commands for fetching and applying pull request patches to current branch.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://patch-diff.githubusercontent.com/raw/xbmc/xbmc/pull/14072.patch | git apply -\ncurl -L https://patch-diff.githubusercontent.com/raw/xbmc/xbmc/pull/14072.patch | git am -\n```\n\n----------------------------------------\n\nTITLE: Setting DirectX Header Files in CMake\nDESCRIPTION: Specifies the header files required for the DirectX rendering implementation, including device resources, DirectX helpers, render context, and screenshot handling interfaces.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/dx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS DeviceResources.h\n            DirectXHelper.h\n            RenderContext.h\n            RenderSystemDX.h\n            ScreenshotSurfaceWindows.h)\n```\n\n----------------------------------------\n\nTITLE: Building All Binary Add-ons\nDESCRIPTION: Command to build all available binary add-ons for Kodi from the main directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi\nmake -C tools/depends/target/binary-addons\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies\nDESCRIPTION: Command to install all required build dependencies using FreeBSD package manager.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.FreeBSD.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo pkg install autoconf automake avahi-app binutils cmake curl dbus doxygen e2fsprogs-libuuid enca encodings evdev-proto exiv2 ffmpeg flac flatbuffers font-util fontconfig freetype2 fribidi fstrcmp gawk gettext-tools giflib git glew gmake gmp gnutls googletest gperf gstreamer1-vaapi jpeg-turbo libaacs libass libbdplus libbluray libcapn libcdio libcec libdisplay-info libedit libfmt libgcrypt libgpg-error libidn libinotify libinput libmicrohttpd libnfs libogg libplist librtmp libtool libudev-devd libva libvdpau libvorbis libxkbcommon libxslt lirc lzo2 m4 mariadb-connector-c-3.3.8_1 mesa-libs nasm openjdk21 p8-platform pcre2 pkgconf python3 rapidjson shairplay sndio spdlog sqlite3 swig taglib tiff tinyxml tinyxml2 wayland-protocols waylandpp xf86-input-keyboard xf86-input-mouse xorg-server xrandr zip\n```\n\n----------------------------------------\n\nTITLE: Building specific binary addons for Kodi\nDESCRIPTION: Make command to build specific binary addons by name. This allows targeting only the needed addons during the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake binary-addons ADDONS=\"visualization.spectrum pvr.demo\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for OpenGL RetroPlayer Integration\nDESCRIPTION: Structured documentation detailing the current status, remaining work, and technical considerations for implementing OpenGL support in RetroPlayer, including VAOs, FBO renderbuffers, and synchronization challenges.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/OpenGL_Roadmap.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OpenGL Roadmap for RetroPlayer\n\nOpenGL support in RetroPlayer will enable hardware rendering for cores that require OpenGL. This roadmap outlines the key tasks needed to complete its integration in Kodi.\n\nThe OpenGL tracking issue is: https://github.com/xbmc/xbmc/issues/17743\n\n## Current Status\n\nThe foundational work for OpenGL support in RetroPlayer has been merged, including:\n\n- **Plumbing APIs:** RetroPlayer APIs now support OpenGL procedures and framebuffer streams ([PR #26091](https://github.com/xbmc/xbmc/pull/26091))\n- **Integration with Game API:** The Game API has been extended to connect libretro cores with OpenGL rendering functionality.\n- **Core Compatibility:** Initial testing has verified that OpenGL cores, such as Mupen64Plus and Beetle PSX HW, can interface with RetroPlayer without crashing.\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Audio Sinks\nDESCRIPTION: Conditionally adds platform-specific audio sink implementations based on build targets and system configuration. Includes support for ALSA, PulseAudio, Pipewire, WASAPI, DirectSound, CoreAudio, and others.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/AudioEngine/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Alsa)\n  list(APPEND SOURCES Sinks/AESinkALSA.cpp\n                      Utils/AEELDParser.cpp)\n  list(APPEND HEADERS Sinks/AESinkALSA.h\n                      Utils/AEELDParser.h)\n\n  if(NOT \"x11\" IN_LIST CORE_PLATFORM_NAME_LC)\n    list(APPEND SOURCES Sinks/alsa/ALSAHControlMonitor.cpp)\n    list(APPEND HEADERS Sinks/alsa/ALSAHControlMonitor.h)\n  endif()\n\n  if(TARGET ${APP_NAME_LC}::UDEV)\n    list(APPEND SOURCES Sinks/alsa/ALSADeviceMonitor.cpp)\n    list(APPEND HEADERS Sinks/alsa/ALSADeviceMonitor.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Build\nDESCRIPTION: Commands to create and configure the build directory with CMake.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.FreeBSD.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-build\ncd $HOME/kodi-build\ncmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DAPP_RENDER_SYSTEM=\"gl\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Declarations - C++\nDESCRIPTION: Demonstrates correct way to declare multiple variables separately.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nchar* a;\nchar b;\n```\n\n----------------------------------------\n\nTITLE: Creating Backup Branches\nDESCRIPTION: Commands for creating backup copies of feature branches. This provides a safety net before making major changes to your working branch.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <feature-branch>           // switch to feature branch (the branch you want to backup)\ngit checkout -b <feature-branch>-backup // create a new branch based on feature branch\ngit checkout <feature-branch>           // switch back to feature branch\n```\n\n----------------------------------------\n\nTITLE: Generating Kodi's Doxygen Documentation using Command Line\nDESCRIPTION: This command runs doxygen using the Doxyfile.doxy configuration file to generate Kodi's documentation. The generated HTML documentation will be located in the 'html' folder within the 'docs' directory, one level up from the current directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/doxygen/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoxygen Doxyfile.doxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Build for Wayland with CMake\nDESCRIPTION: Command to configure Kodi build for Wayland display server with OpenGL rendering using CMake. Installation prefix is set to /usr/local.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DCORE_PLATFORM_NAME=wayland -DAPP_RENDER_SYSTEM=gl\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build System\nDESCRIPTION: Commands to configure the CMake build system for Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi\nmake -C tools/depends/target/cmakebuildsys\n```\n\n----------------------------------------\n\nTITLE: Configuring GL Headers in CMake\nDESCRIPTION: Defines a set of OpenGL-related header files and adds them to the Kodi GUI development kit if headers are present. Includes core GL functionality, GL on DirectX support, and shader management headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/gui/gl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  GL.h\n  GLonDX.h\n  Shader.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_gui_gl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Fedora for Kodi Source Code\nDESCRIPTION: Command to install Git package manager on Fedora Linux, which is required for cloning the Kodi source code repository.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install git\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with All Add-ons\nDESCRIPTION: Command to generate an Xcode project with automatic building of all available add-ons enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DENABLE_XCODE_ADDONBUILD=ON\"\n```\n\n----------------------------------------\n\nTITLE: Building Specific Binary Add-ons\nDESCRIPTION: Command to build a selection of specific binary add-ons for Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons ADDONS=\"audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu\"\n```\n\n----------------------------------------\n\nTITLE: Packaging Kodi with Make\nDESCRIPTION: Creates a DMG package of Kodi using make\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/kodi-build\nmake dmg\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for Android (AArch64)\nDESCRIPTION: Command to configure the build system for Android AArch64 architecture. Similar to the ARM configuration, but targets 64-bit ARM devices.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-tarballs=$HOME/android-tools/xbmc-tarballs --host=aarch64-linux-android --with-sdk-path=$HOME/android-tools/android-sdk-linux --with-ndk-path=$HOME/android-tools/android-ndk-r20 --prefix=$HOME/android-tools/xbmc-depends\n```\n\n----------------------------------------\n\nTITLE: Checking Git Branch Status\nDESCRIPTION: Command for checking the current status of your branch, including tracking information, unstaged changes, and commit status. This helps you understand the current state of your working branch.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Defining Main Documentation Page in C++\nDESCRIPTION: This code snippet defines the main documentation page for Kodi add-on development using Doxygen-style comments. It includes sections for the welcome message, project description, add-on explanation, supported systems, tutorials and examples, and licensing information.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/doxygen/main.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/*!\n\n@mainpage\n\n### Welcome to the Documentation of Kodi for Add-On Development.\n\n__Kodi®__ media center, formerly known as XBMC Media Center, is a free and\nopen-source media player software developed by the XBMC Foundation, a non-profit\ntechnology consortium. Kodi is available for multiple operating systems and\nhardware platforms, with a software 10-foot user interface for use with\ntelevisions and remote controls. It allows users to play and view most videos,\nmusic, such as audio and video podcasts from the internet, and all common\ndigital media files from local and network storage media.\n\nAdd-ons are extensions that can be run from inside the Kodi GUI and in\naddition to binary add-ons for the use of different systems. They are usual\nwritten by third party developers and published to our official repository.\nAdd-ons can also be published in other repositories or as stand alone zip\nfiles anywhere on the internet. Examples of Add-ons include video website\nstreams, scrapers, skins and scripts.\n\n#### Supported systems\n\nCurrently support Kodi Add-Ons based upon Python and C++.\n\n#### Tutorials and Examples\n\nIn the distribution of the library  you find the two directories *tutorials*\nand *examples*. They contain subdirectories for the packages...\nThe demos use third party libraries for the graphical user interface. The\nexamples don't have this dependency and most examples are referred to in the\nuser manual.\n\n#### License\n\nKodi is distributed under a [GNU General Public License version 2](./LICENSE.md).\n\n\\htmlonly\n<div style=\"display:none\">\n\\endhtmlonly\n\n\\subpage general\n\\subpage general_parts\n\n\\htmlonly\n</div>\n\\endhtmlonly\n\n*/\n```\n\n----------------------------------------\n\nTITLE: Bad If Statement Example in C++\nDESCRIPTION: Shows an incorrect way of formatting if statements in Kodi's codebase. Putting a condition and statement on a single line is discouraged.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nif (true) return;\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Unsupported Addons in CMake\nDESCRIPTION: Checks if any of the specified addons to build are supported on the current platform. If none are found, it displays a fatal error message with instructions on how to view supported addons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SUPPORTED_ADDON_FOUND)\n  message(FATAL_ERROR \"${ADDONS_TO_BUILD} did not match any of the supported addons. \\\n                       A list of supported addons can be viewed by building the 'supported_addons' target. \\\n                       Addon definitions are loaded from ADDONS_DEFINITION_DIR (${ADDONS_DEFINITION_DIR}).\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build for Apple Silicon Architecture\nDESCRIPTION: Commands to bootstrap and configure the build system for Apple Silicon (ARM) architecture on macOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/depends\n./bootstrap\n./configure --host=aarch64-apple-darwin --with-platform=macos\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for JSONRPC Library in CMake\nDESCRIPTION: This snippet defines the header files for the JSONRPC library. It includes header files corresponding to the source files and additional interface headers for JSONRPC functionality in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AddonsOperations.h\n            ApplicationOperations.h\n            AudioLibrary.h\n            FavouritesOperations.h\n            FileItemHandler.h\n            FileOperations.h\n            GUIOperations.h\n            IClient.h\n            IJSONRPCAnnouncer.h\n            InputOperations.h\n            ITransportLayer.h\n            JSONRPC.h\n            JSONRPCUtils.h\n            JSONServiceDescription.h\n            JSONUtils.h\n            PlayerOperations.h\n            PlaylistOperations.h\n            ProfilesOperations.h\n            PVROperations.h\n            SettingsOperations.h\n            SystemOperations.h\n            TextureOperations.h\n            VideoLibrary.h\n            XBMCOperations.h)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for TMDB Python Scraper\nDESCRIPTION: Command for running unit tests for the TMDB Python scraper module. It uses Python's unittest discovery mode to automatically find and run all tests in the project directory with verbose output. Note that the tests only work with Python 3.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/metadata.themoviedb.org.python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest discover -v\n```\n\n----------------------------------------\n\nTITLE: Installing Manual Build Dependencies\nDESCRIPTION: Command to install all required build dependencies manually\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install debhelper autoconf automake autopoint gettext autotools-dev cmake curl default-jre doxygen gawk gcc gdc gperf libasound2-dev libass-dev libavahi-client-dev libavahi-common-dev libbluetooth-dev libbluray-dev libbz2-dev libcdio-dev libp8-platform-dev libcrossguid-dev libcurl4-openssl-dev libcwiid-dev libdbus-1-dev libdrm-dev libegl1-mesa-dev libenca-dev libexiv2-dev libflac-dev libfmt-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libfstrcmp-dev libgcrypt-dev libgif-dev libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libgnutls28-dev libgpg-error-dev libgtest-dev libiso9660-dev libjpeg-dev liblcms2-dev libltdl-dev liblzo2-dev libmicrohttpd-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre2-dev libplist-dev libpng-dev libpulse-dev libshairplay-dev libsmbclient-dev libspdlog-dev libsqlite3-dev libssl-dev libtag1-dev libtiff5-dev libtinyxml-dev libtinyxml2-dev libtool libudev-dev libunistring-dev libva-dev libvdpau-dev libvorbis-dev libxmu-dev libxrandr-dev libxslt1-dev libxt-dev lsb-release meson ninja-build python3-dev python3-pil python3-pip rapidjson-dev swig unzip uuid-dev zip zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Building Binary Add-ons with xcodebuild\nDESCRIPTION: Command to build all configured binary add-ons using xcodebuild from the command line in Debug configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild -config \"Debug\" -target binary-addons\n```\n\n----------------------------------------\n\nTITLE: Discouraged Function Declaration in C++\nDESCRIPTION: Shows the discouraged way to declare functions with empty parameter lists in C++ for Kodi, using superfluous 'void'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Test(void);\n```\n\n----------------------------------------\n\nTITLE: Setting up WebOS Development Environment\nDESCRIPTION: Commands to setup the WebOS development environment by extracting the toolchain archive and initializing device configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-dev\ntar xzvf arm-webos-linux-gnueabi_sdk-buildroot.tar.gz -C $HOME/kodi-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nares-setup-device -s\n```\n\n----------------------------------------\n\nTITLE: Using Custom Build Directory\nDESCRIPTION: Example of specifying a custom build directory when configuring CMake.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-build\nmake -C tools/depends/target/cmakebuildsys BUILD_DIR=$HOME/kodi-build\n```\n\n----------------------------------------\n\nTITLE: Building all binary addons for Kodi\nDESCRIPTION: Make command to build all binary addons for Kodi. This uses the integrated add-on build system with the GNU Makefile generator.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake binary-addons\n```\n\n----------------------------------------\n\nTITLE: Generating System Addons in CMake for XBMC\nDESCRIPTION: This snippet creates a custom target to generate system addons for XBMC. It uses CMake commands to set up the necessary parameters and execute a script for addon generation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(gen_system_addons\n                    COMMAND ${CMAKE_COMMAND} -DCORE_SOURCE_DIR=${CMAKE_SOURCE_DIR}\n                                             -DCORE_SYSTEM_NAME=${CORE_SYSTEM_NAME}\n                                             -DCORE_PLATFORM_NAME_LC=\"${CORE_PLATFORM_NAME_LC}\"\n                                             -DCORE_BUILD_DIR=${CORE_BUILD_DIR}\n                                             -DCMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}\n                                             -DBUNDLEDIR=${_bundle_dir}\n                                             -P ${CMAKE_SOURCE_DIR}/cmake/scripts/common/GenerateSystemAddons.cmake\n                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Refactoring Ternary Operations in C++\nDESCRIPTION: Example showing how to refactor ternary operations into more explicit if-else logic. This makes the conditional assignment more readable and easier to debug.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.CleanUpLogic.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nX = (A && !B) ? Y : Z;\n```\n\nLANGUAGE: c++\nCODE:\n```\nX = Y;\nif (!A || B)\n  X = Z;\n```\n\n----------------------------------------\n\nTITLE: Building Specific Add-ons with ADDONS_TO_BUILD Variable\nDESCRIPTION: Examples of how to use the ADDONS_TO_BUILD variable to select which add-ons to build, including building all add-ons, specific add-ons, or using regular expressions for matching.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nADDONS_TO_BUILD=\"all\"\nADDONS_TO_BUILD=\"game.libretro\"\nADDONS_TO_BUILD=\"pvr.*\"\nADDONS_TO_BUILD=\"pvr.* -pvr.dvb\"\n```\n\n----------------------------------------\n\nTITLE: Building Kodi via Command Line\nDESCRIPTION: Builds Kodi using xcodebuild with debug configuration and parallel processing\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-build\nxcodebuild -config \"Debug\" -jobs $(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Enabling CheckJNI for Kodi Debugging\nDESCRIPTION: Use ADB to enable CheckJNI, which helps identify JNI-related issues. This should be done before starting Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nadb shell setprop debug.checkjni 1\n```\n\n----------------------------------------\n\nTITLE: Constructor Initialization Lists in C++\nDESCRIPTION: Shows proper formatting for constructor initialization lists for both single-line and multi-line cases.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_28\n\nLANGUAGE: cpp\nCODE:\n```\nMyClass::CMyClass(bool argOne, int argTwo) : m_argOne(argOne), m_argTwo(argTwo)\n{\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\nMyClass::CMyClass(bool argOne,\n                  int argTwo,\n                  const std::string& textArg,\n                  const std::shared_ptr<CMyOtherClass>& myOtherClass)\n  : m_argOne(argOne),\n    m_argTwo(argTwo),\n    m_textArg(textArg),\n    m_myOtherClass(myOtherClass)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Setting XBMC Core Source Files\nDESCRIPTION: Defines the list of C++ source files to be compiled for the XBMC core library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AutoSwitch.cpp\n            BackgroundInfoLoader.cpp\n            ContextMenuItem.cpp\n            ContextMenuManager.cpp\n            ContextMenus.cpp\n            CueDocument.cpp\n            DatabaseManager.cpp\n            DbUrl.cpp\n            DynamicDll.cpp\n            FileItem.cpp\n            FileItemList.cpp\n            FileItemListModification.cpp\n            GUIInfoManager.cpp\n            GUILargeTextureManager.cpp\n            GUIPassword.cpp\n            InfoScanner.cpp\n            LangInfo.cpp\n            MediaSource.cpp\n            NfoFile.cpp\n            PasswordManager.cpp\n            PlayListPlayer.cpp\n            PartyModeManager.cpp\n            SectionLoader.cpp\n            SeekHandler.cpp\n            ServiceBroker.cpp\n            ServiceManager.cpp\n            SystemGlobals.cpp\n            TextureCache.cpp\n            TextureCacheJob.cpp\n            TextureDatabase.cpp\n            ThumbLoader.cpp\n            URL.cpp\n            Util.cpp\n            XBDateTime.cpp)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration Commands\nDESCRIPTION: CMake commands for configuring different build targets including x64, Win32, and UWP variants.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -G \"Visual Studio 17 2022\" -A x64 -T host=x64 %userprofile%\\kodi\n```\n\n----------------------------------------\n\nTITLE: Git Clone Commands for Kodi Source\nDESCRIPTION: Commands to clone Kodi's source code repository from GitHub to local machine.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_0\n\nLANGUAGE: bat\nCODE:\n```\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Using NDK-GDB for Debugging Kodi on Android\nDESCRIPTION: Use NDK-GDB to debug Kodi on Android. This command opens the installed version of Kodi and breaks at the entry point for debugging.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nndk-gdb --verbose\n```\n\n----------------------------------------\n\nTITLE: Defining UPnP Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files to be compiled for the UPnP library component. These files implement various UPnP functionalities including the core UPnP system, internal operations, media player, rendering, server, and settings management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/upnp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES UPnP.cpp\n            UPnPInternal.cpp\n            UPnPPlayer.cpp\n            UPnPRenderer.cpp\n            UPnPServer.cpp\n            UPnPSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Addons Build in CMake for XBMC\nDESCRIPTION: This section sets up a custom target for building binary addons in XBMC. It includes special handling for cross-compiling and Android platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_GENERATOR STREQUAL \"Unix Makefiles\")\n  if(CMAKE_CROSSCOMPILING)\n    set(_cross_args CROSS_COMPILING=yes)\n  endif()\n  if(NOT CORE_SYSTEM_NAME STREQUAL android)\n    set(_prefix ${CMAKE_BINARY_DIR}/addons)\n    set(_extra \"CMAKE_EXTRA=-DPACKAGE_ZIP=ON\")\n  else()\n    set(_prefix ${CMAKE_INSTALL_PREFIX})\n  endif()\n  add_custom_target(binary-addons\n    COMMAND $(MAKE) -C ${CMAKE_SOURCE_DIR}/tools/depends/target/binary-addons clean\n    COMMAND $(MAKE) -C ${CMAKE_SOURCE_DIR}/tools/depends/target/binary-addons VERBOSE=1 V=99\n                    PREFIX=${_prefix} INSTALL_PREFIX=${_prefix} ${_cross_args} ${_extra})\n  unset(_cross_args)\n  unset(_prefix)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Specific Add-ons or Add-on Groups\nDESCRIPTION: Examples of how to build specific add-ons or groups of add-ons by name or pattern.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons ADDONS=\"audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu\"\n```\n\n----------------------------------------\n\nTITLE: Building Android Java/JNI Library\nDESCRIPTION: Commands to build the JNI shared library for Android using the Android NDK and SCons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> scons target=arm-android-linux build_config=Release\n> cd Source/Platform/Android/module/platinum\n> ndk-build NDK_DEBUG=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Selection and Definition Directory\nDESCRIPTION: Sets up which addons will be built and where their definition files are located. Defaults to building all addons if not specifically configured.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ADDONS_TO_BUILD)\n  set(ADDONS_TO_BUILD \"all\")\nelse()\n  string(STRIP \"${ADDONS_TO_BUILD}\" ADDONS_TO_BUILD)\n  message(STATUS \"Building following addons: ${ADDONS_TO_BUILD}\")\n  string(REPLACE \" \" \";\" ADDONS_TO_BUILD ${ADDONS_TO_BUILD})\nendif()\n\nif(NOT ADDONS_DEFINITION_DIR)\n  set(ADDONS_DEFINITION_DIR ${PROJECT_SOURCE_DIR}/addons)\nelse()\n  file(TO_CMAKE_PATH \"${ADDONS_DEFINITION_DIR}\" ADDONS_DEFINITION_DIR)\nendif()\nget_filename_component(ADDONS_DEFINITION_DIR \"${ADDONS_DEFINITION_DIR}\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies for Ubuntu Versions\nDESCRIPTION: Commands to install version-specific dependencies for different Ubuntu releases\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libcec4-dev libfmt3-dev liblircclient-dev\nsudo apt install libcec-dev libfmt-dev liblirc-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Dependencies\nDESCRIPTION: Commands to bootstrap, configure and build Kodi dependencies using the cross-compilation toolchain.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/depends\n./bootstrap\n./configure   --prefix=$HOME/kodi-deps --host=arm-webos-linux-gnueabi \\\n              --with-toolchain=$HOME/kodi-dev/arm-webos-linux-gnueabi_sdk-buildroot \\\n              --enable-debug=no\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Wrapper Sources and Headers in CMake\nDESCRIPTION: Sets up lists of source and header files for database wrapper functionality. Includes core files for SQLite operations and optionally adds MySQL/MariaDB support if the corresponding targets are available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/dbwrappers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Database.cpp\n            DatabaseQuery.cpp\n            dataset.cpp\n            qry_dat.cpp\n            sqlitedataset.cpp)\n\nset(HEADERS Database.h\n            DatabaseQuery.h\n            dataset.h\n            qry_dat.h\n            sqlitedataset.h)\n\nif(TARGET ${APP_NAME_LC}::MySqlClient OR TARGET ${APP_NAME_LC}::MariaDBClient)\n  list(APPEND SOURCES mysqldataset.cpp)\n  list(APPEND HEADERS mysqldataset.h)\nendif()\n\ncore_add_library(dbwrappers)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Source Code with Git\nDESCRIPTION: Commands to clone the Kodi source code repository from GitHub into the user's home directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Main Library and Binary Configuration in CMake\nDESCRIPTION: Sets up the main XBMC/Kodi library and binary targets with platform-specific configurations. Handles different build requirements for various platforms including Windows, Android, and iOS/tvOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL \"darwin_embedded\")\n  add_library(compileinfo_obj OBJECT IMPORTED)\n  set_property(TARGET compileinfo_obj PROPERTY IMPORTED_OBJECTS\n    \"${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/compileinfo.build/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)/$(OBJECT_FILE_DIR_normal:base)/$(CURRENT_ARCH)/CompileInfo.o\"\n  )\n  add_library(lib${APP_NAME_LC} STATIC)\n  add_dependencies(lib${APP_NAME_LC} compileinfo)\n  target_link_libraries(lib${APP_NAME_LC} PUBLIC compileinfo_obj)\nelse()\n  add_library(lib${APP_NAME_LC} STATIC $<TARGET_OBJECTS:compileinfo>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi\nDESCRIPTION: Commands for installing Kodi to the system with optional destination override.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install DESTDIR=$HOME/kodi\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Alias for Detailed Graph Log\nDESCRIPTION: This snippet sets up a git alias 'lg' for a detailed graph log with color-coded output, including commit hashes, branches, messages, relative dates, and authors.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global --add alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\"\n```\n\n----------------------------------------\n\nTITLE: Setting Build Directory and Path Configuration\nDESCRIPTION: Configures build directory paths, module paths, and dependency locations. Includes setup for multi-config generators and compile command exports.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules/buildtools)\nif(DEPENDS_DIR)\n  list(APPEND CMAKE_PREFIX_PATH ${DEPENDS_DIR})\nendif()\n\n# Variable to indicate if the project is targeting a Multi Config Generator (VS/Xcode primarily)\nget_property(_multiconfig_generator GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(_multiconfig_generator)\n  add_custom_target(build_internal_depends)\n  set_target_properties(build_internal_depends PROPERTIES EXCLUDE_FROM_ALL TRUE)\nendif()\n\nset(CORE_BUILD_DIR build)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Repository and Setting Up Remotes\nDESCRIPTION: Commands to clone your personal fork of Kodi's repository and configure the upstream remote. This setup establishes the connection between your local repository, your GitHub fork, and the official Kodi repository.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME                                                 // change to your `home` directory\ngit clone git@github.com:<github-username>/xbmc.git kodi // clone your fork of Kodi's repo\ncd kodi                                                  // change to the newly cloned repo directory\ngit remote add upstream https://github.com/xbmc/xbmc.git // assign Kodi's main repo to a remote\n```\n\n----------------------------------------\n\nTITLE: Configuring VAAPI and VDPAU build options with CMake\nDESCRIPTION: Example of using CMake to forcefully enable VAAPI and disable VDPAU options when building Kodi. This demonstrates how to control feature enablement during configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake ... -DENABLE_VAAPI=ON -DENABLE_VDPAU=OFF ...\n```\n\n----------------------------------------\n\nTITLE: Adding DRMPRIME Sources for GBM and Wayland Platforms in CMake\nDESCRIPTION: Appends DRMPRIME codec source and header files for GBM (Generic Buffer Management) and Wayland platforms. This enables hardware-accelerated video decoding on these Linux-based systems.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC)\n  list(APPEND SOURCES DVDVideoCodecDRMPRIME.cpp)\n  list(APPEND HEADERS DVDVideoCodecDRMPRIME.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Determining Repository Configuration for Kodi Addons\nDESCRIPTION: Sets up which repositories to build, defaulting to all repositories if not specified. Handles custom repository configuration and revision settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# make sure that the repositories to build have been specified\nif(NOT REPOSITORY_TO_BUILD)\n  set(REPOSITORY_TO_BUILD_DEFAULT ON)\n  set(REPOSITORY_TO_BUILD \"all\")\n  set(REPOSITORY_REVISION \"\")\n  message(STATUS \"Bootstrapping all repositories\")\nelse()\n  set(REPOSITORY_TO_BUILD_DEFAULT OFF)\n  message(STATUS \"Bootstrapping following repository: ${REPOSITORY_TO_BUILD}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi APK on Android Device using ADB\nDESCRIPTION: Use ADB to install the Kodi APK on a connected Android device. This process involves listing connected devices and specifying the target device for installation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-android\nadb devices\nadb -s <device-id> install -r <generated-apk-name-here>.apk\n```\n\n----------------------------------------\n\nTITLE: Adding Apple-Specific VTB Sources in CMake\nDESCRIPTION: Appends VideoToolbox (VTB) source and header files for Apple platforms. This enables hardware-accelerated video decoding on macOS and iOS devices.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  list(APPEND SOURCES VTB.cpp)\n  list(APPEND HEADERS VTB.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Packaging Skins in CMake for XBMC\nDESCRIPTION: This custom command packs skins and copies them to the correct build directory. It uses TexturePacker and is aware of multi-configuration generators.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/${CONFIG_VAR}/gen_skin.timestamp\n  COMMAND ${CMAKE_COMMAND} -DBUNDLEDIR=${_bundle_dir}\n                           -DTEXTUREPACKER_EXECUTABLE=$<TARGET_FILE:TexturePacker::TexturePacker::Executable>\n                           -P ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/GeneratedPackSkins.cmake\n  COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/${CONFIG_VAR}\n  COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/${CONFIG_VAR}/gen_skin.timestamp\n  DEPENDS ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/GeneratedPackSkins.cmake\n          ${XBT_SOURCE_FILELIST}\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  COMMENT \"Generating skin xbt\"\n)\nadd_custom_target(gen_skin_pack DEPENDS ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/${CONFIG_VAR}/gen_skin.timestamp)\n```\n\n----------------------------------------\n\nTITLE: Building Binary Add-ons for Kodi\nDESCRIPTION: Commands to build all or specific binary add-ons for Kodi, with examples for building groups of add-ons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons\n```\n\n----------------------------------------\n\nTITLE: Initializer List Formatting in C++\nDESCRIPTION: Shows the correct formatting for initializer lists in C++ for Kodi. Lists should have one space after each element but no surrounding spaces.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nconstexpr int aNiceArray[] = {1, 2, 3};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for ServiceDescription.h Generation in CMake\nDESCRIPTION: Defines a custom build command that generates the ServiceDescription.h header file using the JsonSchemaBuilder tool and the previously defined JSON source files. This creates a C++ header with API definitions derived from the JSON schema files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/ServiceDescription.h\n                   COMMAND JsonSchemaBuilder::JsonSchemaBuilder ${JSON_SRCS}\n                   WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}\n                   DEPENDS ${JSON_SRCS}\n                   COMMENT \"Generating ServiceDescription.h\")\n```\n\n----------------------------------------\n\nTITLE: Initializing TexturePacker Project in CMake\nDESCRIPTION: Sets up the CMake project for TexturePacker, configures module paths, and handles build environment variables.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/native/TexturePacker/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(TexturePacker)\n\n# If we are building inside the Kodi project, add its Find module paths\n# otherwise point to TexturePacker's source for the Find modules\nif(${KODI_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})\n  list(APPEND CMAKE_MODULE_PATH ${KODI_SOURCE_DIR}/cmake/modules)\nelse()\n  list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR})\nendif()\n\nif(NATIVEPREFIX)\n  set(CMAKE_FIND_ROOT_PATH ${NATIVEPREFIX})\nendif()\n\nif(ENABLE_STATIC)\n  set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})\n  # Requires cmake 3.24 for ZLIB_USE_STATIC_LIBS to actually do something\n  set(ZLIB_USE_STATIC_LIBS ON)\nendif()\n\nset(APP_NAME_LC texturepacker)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Build Directory for Kodi\nDESCRIPTION: Commands to create and navigate to an out-of-source build directory for Kodi compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-build\ncd $HOME/kodi-build\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Python Request Handlers Library in CMake\nDESCRIPTION: Conditionally adds a library for HTTP Python request handlers if both MicroHttpd and Python targets are available. Sets up source files related to Python invokers and WSGI implementation, then creates the library using core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/httprequesthandler/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::MicroHttpd AND TARGET ${APP_NAME_LC}::Python)\n  set(SOURCES HTTPPythonInvoker.cpp\n              HTTPPythonWsgiInvoker.cpp)\n\n  set(HEADERS HTTPPythonInvoker.h\n              HTTPPythonRequest.h\n              HTTPPythonWsgiInvoker.h)\n\n  core_add_library(network_httprequesthandlers_python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Add-ons in Text Files\nDESCRIPTION: Examples of the three supported formats for defining add-ons in text files: using git repositories, tarball URLs, or local file paths.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<addon-id> <git-url> <git-revision>\n<addon-id> <tarball-url>\n<addon-id> <file://path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Build Settings in CMake\nDESCRIPTION: This snippet sets up initial variables and processes the ADDONS_TO_BUILD list to determine which addons should be built. It handles exact matches, regex patterns, and exclusions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ADDONS_TO_BUILD)\n  set(ADDONS_TO_BUILD \"all\")\nendif()\n\nif(NOT ADDONS_TO_BUILD STREQUAL \"all\")\n  # Exact addon match list\n  set(REGEX_ADDONS_TO_BUILD ${ADDONS_TO_BUILD})\n  set(EXACT_MATCH_ADDON_LIST \"\")\n  set(EXCLUDE_ADDONS \"\")\n\n  foreach(addon ${ADDONS_TO_BUILD})\n    set(FOUND_EXCLUSION \"\")\n    string(REGEX MATCH \"^[-](.*)\" FOUND_EXCLUSION \"${addon}\")\n    if(NOT FOUND_EXCLUSION STREQUAL \"\")\n      list(APPEND EXCLUDE_ADDONS ${CMAKE_MATCH_1})\n      list(REMOVE_ITEM REGEX_ADDONS_TO_BUILD \"-${CMAKE_MATCH_1}\")\n    else()\n      foreach(addonrepoitem ${addons})\n        if(NOT (addonrepoitem MATCHES platforms.txt))\n          # need to strip regex chars, or the filter regex will use\n          string(REPLACE \"*\" \"\" strippedregex ${addon})\n          if(${addonrepoitem} MATCHES \"^.*\\/(${strippedregex}).txt\")\n            list(APPEND EXACT_MATCH_ADDON_LIST ${addon})\n            # remove exact matches from addons_to_build\n            list(REMOVE_ITEM REGEX_ADDONS_TO_BUILD \"${addon}\")\n          endif()\n        endif()\n      endforeach()\n    endif()\n  endforeach()\n\n  message(STATUS \"Exclusion list: ${EXCLUDE_ADDONS}\")\n  message(STATUS \"Exact Match list: ${EXACT_MATCH_ADDON_LIST}\")\n  message(STATUS \"Regex list: ${REGEX_ADDONS_TO_BUILD}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Filtering ADB Logcat Messages for Kodi\nDESCRIPTION: Use ADB to filter logcat messages specifically for the Kodi application, showing only Kodi-related log entries.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nadb logcat -s Kodi:V\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding VDPAU Sources in CMake\nDESCRIPTION: Appends VDPAU (Video Decode and Presentation API for Unix) source and header files if the VDPAU target is available. This enables hardware-accelerated video decoding on supported Unix systems.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::VDPAU)\n  list(APPEND SOURCES VDPAU.cpp)\n  list(APPEND HEADERS VDPAU.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Specific Add-ons\nDESCRIPTION: Command to generate an Xcode project with specific add-ons enabled for building.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DENABLE_XCODE_ADDONBUILD=ON -DADDONS_TO_BUILD='audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Build for GBM with CMake\nDESCRIPTION: Command to configure Kodi build for GBM (Generic Buffer Management) with OpenGL ES rendering using CMake. Installation prefix is set to /usr/local.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DCORE_PLATFORM_NAME=gbm -DAPP_RENDER_SYSTEM=gles\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi Build over Existing Installation\nDESCRIPTION: Use ADB to install a new Kodi build over an existing installation on an Android emulator.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nadb -e install -r images/xbmcapp-debug.apk\n```\n\n----------------------------------------\n\nTITLE: Building Tools and Dependencies\nDESCRIPTION: Command to build Kodi's tools and dependencies using multiple processor cores for faster compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Building Binary Addons with xcodebuild\nDESCRIPTION: Command to build binary addons independently using xcodebuild in Debug configuration\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nxcodebuild -config \"Debug\" -target binary-addons\n```\n\n----------------------------------------\n\nTITLE: Include Guard Implementation in C++\nDESCRIPTION: Shows preferred pragma once directive versus traditional include guards.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\n#pragma once\n```\n\nLANGUAGE: cpp\nCODE:\n```\n#ifndef SOME_FILE_H_INCLUDED\n#define SOME_FILE_H_INCLUDED\n[...]\n#endif\n```\n\n----------------------------------------\n\nTITLE: If-Else Statement Formatting in C++\nDESCRIPTION: Illustrates the proper formatting of if-else statements in C++ code for Kodi. Each statement should be on a new line, and else-if statements should be kept on one line.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nif (true)\n  return;\n\nif (true)\n{\n  [...]\n}\nelse if (false)\n{\n  return;\n}\nelse\n  return;\n```\n\n----------------------------------------\n\nTITLE: Adding Joystick Input Library in CMake\nDESCRIPTION: This command adds the joystick input module as a library to the XBMC/Kodi project. It uses a custom CMake function 'core_add_library' to create the library named 'input_joystick'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_joystick)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for tvOS\nDESCRIPTION: Command to configure the build system for tvOS. This sets up the build environment specifically for Apple TV, using the arm64 architecture and tvOS platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./configure --host=aarch64-apple-darwin --with-platform=tvos\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi Build Dependencies on Fedora\nDESCRIPTION: Command to install all required development packages and dependencies needed to build Kodi on Fedora systems.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install alsa-lib-devel autoconf automake avahi-compat-libdns_sd-devel avahi-devel bluez-libs-devel bzip2-devel cmake curl dbus-devel exiv2-devel flatbuffers flatbuffers-devel fmt-devel fontconfig-devel freetype-devel fribidi-devel fstrcmp-devel gawk gcc gcc-c++ gettext gettext-devel giflib-devel gperf gtest-devel java-11-openjdk-headless jre lcms2-devel libao-devel libass-devel libbluray-devel libcap-devel libcdio-devel libcec-devel libcurl-devel libidn2-devel libjpeg-turbo-devel libmicrohttpd-devel libmpc-devel libnfs-devel libplist-devel libpng12-devel libsmbclient-devel libtool libtool-ltdl-devel libudev-devel libunistring libunistring-devel libusb1-devel libuuid-devel libva-devel libvdpau-devel libxkbcommon-devel libxml2-devel libXmu-devel libXrandr-devel libxslt-devel libXt-devel lirc-devel lzo-devel make mariadb-devel mesa-libEGL-devel mesa-libGL-devel mesa-libGLU-devel mesa-libGLw-devel mesa-libOSMesa-devel nasm openssl-devel openssl-libs patch pcre2-devel pulseaudio-libs-devel python3-devel python3-pillow rapidjson-devel shairplay-devel spdlog-devel sqlite-devel swig taglib-devel tinyxml-devel tinyxml2-devel trousers-devel uuid-devel zlib-devel\n```\n\n----------------------------------------\n\nTITLE: Operator Whitespace in C++\nDESCRIPTION: Demonstrates the required whitespace around operators in C++ code for Kodi. Conventional operators should be surrounded by one space on each side.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\na = (b + c) * d;\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Addon System Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files that comprise the addon system implementation. Includes files for addon management, installation, database handling, and various addon types like scrapers, visualizations, and services.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Addon.cpp\n            AddonBuilder.cpp\n            BinaryAddonCache.cpp\n            AddonDatabase.cpp\n            AddonInstaller.cpp\n            AddonManager.cpp\n            AddonRepos.cpp\n            AddonStatusHandler.cpp\n            AddonSystemSettings.cpp\n            AddonUpdateRules.cpp\n            AddonVersion.cpp\n            AudioDecoder.cpp\n            ContextMenuAddon.cpp\n            ContextMenus.cpp\n            ExtsMimeSupportList.cpp\n            FontResource.cpp\n            FilesystemInstaller.cpp\n            GameResource.cpp\n            ImageDecoder.cpp\n            ImageResource.cpp\n            LanguageResource.cpp\n            PluginSource.cpp\n            Repository.cpp\n            RepositoryUpdater.cpp\n            Scraper.cpp\n            ScreenSaver.cpp\n            Service.cpp\n            Skin.cpp\n            UISoundsResource.cpp\n            VFSEntry.cpp\n            Visualization.cpp\n            Webinterface.cpp)\n```\n\n----------------------------------------\n\nTITLE: Proper Vertical Alignment in C++\nDESCRIPTION: Demonstrates the recommended approach to code formatting without vertical alignment in C++ for Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nint value1{1};\nint value2{2};\nCExampleClass* exampleClass{};\nCBiggerExampleClass* biggerExampleClass{};\nexampleClass = new CExampleClass(value1, value2);\nbiggerExampleClass = new CBiggerExampleClass(value1, value2);\nexampleClass->InitExample();\nbiggerExampleClass->InitExample();\n```\n\n----------------------------------------\n\nTITLE: Building Kodi with Make\nDESCRIPTION: Builds Kodi using make with parallel processing\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C build\n```\n\n----------------------------------------\n\nTITLE: OpenGLES Platform-Specific Sources\nDESCRIPTION: Includes OpenGLES shader implementations for specific platforms like Android, iOS, tvOS, GBM, X11, and Wayland.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES AND (\"android\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"ios\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"tvos\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"x11\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC))\n  list(APPEND SOURCES VideoFilterShaderGLES.cpp\n                      YUV2RGBShaderGLES.cpp)\n  list(APPEND HEADERS VideoFilterShaderGLES.h\n                      YUV2RGBShaderGLES.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for iOS (arm64)\nDESCRIPTION: Command to configure the build system for iOS arm64 architecture. This prepares the build environment for compiling Kodi dependencies on iOS devices.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./configure --host=aarch64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi on Jailbroken iOS Device\nDESCRIPTION: Installs the packaged Kodi deb file on a jailbroken iOS device using dpkg\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndpkg -i <name of the deb file>\n```\n\n----------------------------------------\n\nTITLE: Terminating Misbehaving Kodi Process on Android\nDESCRIPTION: Use a combination of ADB commands to identify and kill a misbehaving Kodi process on an Android device.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nadb shell ps | grep org.xbmc | awk '{print $2}' | xargs adb shell kill\n```\n\n----------------------------------------\n\nTITLE: Configuring Critical Paths for Build Environment\nDESCRIPTION: Sets up all necessary paths for the build system, including core source directory, build directory, and dependency paths. Handles backwards compatibility with deprecated variables.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n### setup all the necessary paths\nif(APP_ROOT)\n  set(CORE_SOURCE_DIR ${APP_ROOT})\n  unset(APP_ROOT)\n  message(WARNING \"APP_ROOT is deprecated. Please use CORE_SOURCE_DIR instead.\")\nendif()\nif(NOT CORE_SOURCE_DIR)\n  set(CORE_SOURCE_DIR ${PROJECT_SOURCE_DIR}/../..)\nelse()\n  file(TO_CMAKE_PATH \"${CORE_SOURCE_DIR}\" CORE_SOURCE_DIR)\nendif()\nget_filename_component(CORE_SOURCE_DIR \"${CORE_SOURCE_DIR}\" ABSOLUTE)\n\nif(NOT BUILD_DIR)\n  set(BUILD_DIR \"${CMAKE_BINARY_DIR}/build\")\nelse()\n  file(TO_CMAKE_PATH \"${BUILD_DIR}\" BUILD_DIR)\nendif()\nget_filename_component(BUILD_DIR \"${BUILD_DIR}\" ABSOLUTE)\n\nif(NOT ADDON_DEPENDS_PATH)\n  set(ADDON_DEPENDS_PATH \"${BUILD_DIR}/depends\")\nelse()\n  file(TO_CMAKE_PATH \"${ADDON_DEPENDS_PATH}\" ADDON_DEPENDS_PATH)\nendif()\nget_filename_component(ADDON_DEPENDS_PATH \"${ADDON_DEPENDS_PATH}\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: Comma Whitespace in C++\nDESCRIPTION: Demonstrates the proper use of whitespace with commas in C++ for Kodi. Commas must be followed by one space.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Dummy::Method(int a, int b, int c);\n```\n\n----------------------------------------\n\nTITLE: Packaging Kodi with CMake\nDESCRIPTION: Creates a DMG package of Kodi using CMake build command\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/kodi-build\n/Users/Shared/xbmc-depends/x86_64-darwin17.5.0-native/bin/cmake --build . --target \"dmg\" --config \"Debug\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Installation Directory with Permission Checking\nDESCRIPTION: Sets up the addon installation directory and checks for write permissions on Linux systems. If the user doesn't have write permissions, it configures sudo usage.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(ADDON_INSTALL_DIR ${CMAKE_INSTALL_PREFIX})\nif(NOT WIN32)\n  # check install permissions\n  check_install_permissions(${CMAKE_INSTALL_PREFIX} can_write)\n  if(NOT ${can_write} AND CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    set(NEED_SUDO TRUE)\n    set(ADDON_INSTALL_DIR ${CMAKE_BINARY_DIR}/.install)\n    list(APPEND BUILD_ARGS -DOVERRIDE_PATHS=ON)\n    message(STATUS \"NEED_SUDO: ${NEED_SUDO} (no write permission for ${CMAKE_INSTALL_PREFIX})\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Rebasing Git Feature Branch\nDESCRIPTION: Commands for rebasing a feature branch on top of upstream master. Includes fetching upstream changes and force pushing to origin.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <feature-branch>  // switch to feature branch in need of rebasing\ngit fetch upstream             // fetch upstream changes\ngit rebase upstream/master     // rebase feature branch on top of upstream master branch\ngit push -f origin             // force push updated feature branch to your personal remote repo\n```\n\n----------------------------------------\n\nTITLE: Building All Binary Add-ons\nDESCRIPTION: Command to build all available binary add-ons for Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons\n```\n\n----------------------------------------\n\nTITLE: Configuring External Player Build in CMake\nDESCRIPTION: Defines the source files, header files, and creates a library target for the external player component. Uses the core_add_library function to create the library named 'externalplayer'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/ExternalPlayer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ExternalPlayer.cpp)\n\nset(HEADERS ExternalPlayer.h)\n\ncore_add_library(externalplayer)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Kodi Binary Add-ons\nDESCRIPTION: Command to clean up built binary add-ons using the make-addons batch script\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nmake-addons.bat clean\n```\n\n----------------------------------------\n\nTITLE: Proper Multiple Statement Formatting in C++\nDESCRIPTION: Shows the correct approach for handling multiple statements in C++ for Kodi. Each statement should be on its own line for better debugging.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<std::string> test;\ntest.push_back(\"foobar\");\n```\n\n----------------------------------------\n\nTITLE: Building Binary Add-ons\nDESCRIPTION: Commands to build all or specific Kodi binary add-ons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.FreeBSD.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo gmake -j$(sysctl hw.ncpu | awk '{print $2}') -C tools/depends/target/binary-addons PREFIX=/usr/local\nsudo gmake -j$(sysctl hw.ncpu | awk '{print $2}') -C tools/depends/target/binary-addons PREFIX=/usr/local ADDONS=\"audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu\"\nsudo gmake -j$(sysctl hw.ncpu | awk '{print $2}') -C tools/depends/target/binary-addons PREFIX=/usr/local ADDONS=\"pvr.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Addons Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for the binary addons module, including manager, DLL handling, and instance management components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/binary-addons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES BinaryAddonManager.cpp\n            AddonDll.cpp\n            AddonInstanceHandler.cpp\n            BinaryAddonBase.cpp)\n```\n\n----------------------------------------\n\nTITLE: Using Switch Statements for Multiple Comparisons in C++\nDESCRIPTION: Example demonstrating how to use switch statements as an alternative to multiple OR conditions when comparing the same variable against multiple constants. This can provide better performance through jump tables.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.CleanUpLogic.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nif (x == A || x == B || x == C || y == D)\n  something();\n```\n\nLANGUAGE: c++\nCODE:\n```\nbool flag = false;\n\nswitch (x)\n{\ncase A:\ncase B:\ncase C:\n  flag = true;\n  break;\ndefault:\n  if (y == D)\n    flag = true;\n  break;\n}\n\nif (flag)\n  something();\n```\n\n----------------------------------------\n\nTITLE: Braces Formatting in C++\nDESCRIPTION: Demonstrates the proper placement of curly braces in C++ code for the Kodi project. Braces always go on a new line for control statements, classes, and other blocks.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nfor (int i = 0; i < t; ++i)\n{\n  [...]\n}\n\nif (true)\n{\n  [...]\n}\n\nclass Dummy\n{\n  [...];\n};\n```\n\n----------------------------------------\n\nTITLE: Setting PVR Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files that comprise the PVR component implementation, including functionality for cached images, channel groups, database operations, and playback management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PVRCachedImage.cpp\n\t    PVRCachedImages.cpp\n            PVRChannelGroupImageFileLoader.cpp\n            PVRChannelNumberInputHandler.cpp\n            PVRComponentRegistration.cpp\n            PVRContextMenus.cpp\n            PVRDatabase.cpp\n            PVREdl.cpp\n            PVREventLogJob.cpp\n            PVRItem.cpp\n            PVRManager.cpp\n            PVRPlaybackState.cpp\n            PVRStreamProperties.cpp\n            PVRThumbLoader.cpp)\n```\n\n----------------------------------------\n\nTITLE: Initializing FFmpeg Project and Setting Compiler Configuration in CMake\nDESCRIPTION: Sets up the FFmpeg project and configures the compiler settings, including support for ccache if enabled. It also handles cross-compilation settings if applicable.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/target/ffmpeg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(ffmpeg)\n\ncmake_minimum_required(VERSION 3.12)\n\nif(ENABLE_CCACHE AND CCACHE_PROGRAM)\n  set(ffmpeg_conf \"--cc=${CCACHE_PROGRAM} ${CMAKE_C_COMPILER}\"\n                  \"--cxx=${CCACHE_PROGRAM} ${CMAKE_CXX_COMPILER}\"\n                )\nelse()\n  set(ffmpeg_conf --cc=${CMAKE_C_COMPILER}\n                  --cxx=${CMAKE_CXX_COMPILER}\n                )\nendif()\n\nif(CROSSCOMPILING)\n  set(pkgconf \"PKG_CONFIG_LIBDIR=${DEPENDS_PATH}/lib/pkgconfig\")\n  list(APPEND ffmpeg_conf --pkg-config=${PKG_CONFIG_EXECUTABLE}\n                          --pkg-config-flags=--static\n                          --enable-cross-compile\n                          --enable-pic\n                          --ar=${CMAKE_AR}\n                          --ranlib=${CMAKE_RANLIB}\n                          --strip=${CMAKE_STRIP}\n              )\n\n  message(STATUS \"CROSS: ${ffmpeg_conf}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Make Files for Kodi\nDESCRIPTION: Commands to generate makefiles for building Kodi using the make build system\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/kodi\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $HOME/kodi-build\nmake -C tools/depends/target/cmakebuildsys BUILD_DIR=$HOME/kodi-build\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific DXVA Sources in CMake\nDESCRIPTION: Includes DXVA (DirectX Video Acceleration) source and header files for Windows and Windows Store targets. This enables hardware-accelerated video decoding on Windows platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES DXVA.cpp)\n  list(APPEND HEADERS DXVA.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Test Sources in CMake\nDESCRIPTION: Sets up the core filesystem test sources and conditionally adds HTTP and NFS test files based on target availability. Initializes base test files for Directory, File, FileFactory, ZipFile, and ZipManager components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestDirectory.cpp\n            TestFile.cpp\n            TestFileFactory.cpp\n            TestZipFile.cpp\n            TestZipManager.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::MicroHttpd)\n  list(APPEND SOURCES TestHTTPDirectory.cpp)\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::NFS)\n  list(APPEND SOURCES TestNfsFile.cpp)\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_test_library(filesystem_test)\n```\n\n----------------------------------------\n\nTITLE: Installing Git and Cloning Kodi Repository\nDESCRIPTION: Commands to install Git and clone the Kodi source code repository\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install git\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Accessing Android Device Log Output with ADB\nDESCRIPTION: Use ADB to view the log output from a connected Android device, which is useful for debugging Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nadb -s <device-id> logcat\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Add-on Groups\nDESCRIPTION: Command to generate an Xcode project with a group of add-ons (all PVR add-ons) enabled for building.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DENABLE_XCODE_ADDONBUILD=ON -DADDONS_TO_BUILD='pvr.*'\"\n```\n\n----------------------------------------\n\nTITLE: Git Commit Operations\nDESCRIPTION: Various git commit operations including creating, amending, and fixing commits.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"<commit-description>\"\ngit commit --amend\ngit commit --fixup <commit-sha>\n```\n\n----------------------------------------\n\nTITLE: User Group Management\nDESCRIPTION: Commands for managing user groups and permissions for Kodi GBM execution.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -a -G input,video <username>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngroups\n```\n\n----------------------------------------\n\nTITLE: Preparing Kodi Build System\nDESCRIPTION: Initializes the Kodi build system by bootstrapping the dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/depends\n./bootstrap\n```\n\n----------------------------------------\n\nTITLE: Building Specific Binary Addons for Kodi on webOS\nDESCRIPTION: This command builds specific binary addons for Kodi. It allows you to specify which addons to build by listing them in the ADDONS parameter.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=$HOME/kodi/build/tools/webOS/packaging ADDONS=\"audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Source Repository\nDESCRIPTION: Commands to navigate to the home directory and clone Kodi's master branch from GitHub using Git.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Configuring Build for x86 Intel Architecture\nDESCRIPTION: Commands to bootstrap and configure the build system for x86 Intel architecture on macOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/depends\n./bootstrap\n./configure --host=x86_64-apple-darwin --with-platform=macos\n```\n\n----------------------------------------\n\nTITLE: Defining PVR Windows Source Files in CMake\nDESCRIPTION: Sets up a list of source files for the PVR windows component. These files contain implementations for various PVR-related GUI windows and view states.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIViewStatePVR.cpp\n            GUIWindowPVRBase.cpp\n            GUIWindowPVRChannels.cpp\n            GUIWindowPVRGuide.cpp\n            GUIWindowPVRProviders.cpp\n            GUIWindowPVRRecordings.cpp\n            GUIWindowPVRSearch.cpp\n            GUIWindowPVRTimers.cpp\n            GUIWindowPVRTimersBase.cpp\n            GUIWindowPVRTimerRules.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Base Video Shader Sources\nDESCRIPTION: Defines the core source and header files for convolution kernels and basic shader functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ConvolutionKernels.cpp)\n\nset(HEADERS ConvolutionKernels.h\n            dither.h\n            ShaderFormats.h)\n```\n\n----------------------------------------\n\nTITLE: Running Kodi Debug Build\nDESCRIPTION: Commands to run Kodi debug build from terminal\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$HOME/kodi-build/Debug/kodi.bin\n```\n\n----------------------------------------\n\nTITLE: Creating Git Alias for Condensed Log Output\nDESCRIPTION: This snippet demonstrates adding a git alias 'slog' for a condensed log output with one-line commits and abbreviated hashes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global --add alias.slog \"log --pretty=oneline --abbrev-commit\"\n```\n\n----------------------------------------\n\nTITLE: Video Renderers Library Creation\nDESCRIPTION: Creates the video renderers library using the configured source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(videorenderers)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Repository in Linux\nDESCRIPTION: Commands to navigate to home directory and clone Kodi's current master branch from GitHub repository.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Conditional GLX Component Inclusion\nDESCRIPTION: Adds GLX-specific source and header files when GLX support is enabled in the build target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/X11/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::GLX)\n  list(APPEND SOURCES GLContextGLX.cpp\n                      VideoSyncGLX.cpp)\n  list(APPEND HEADERS GLContextGLX.h\n                      VideoSyncGLX.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Kodi Release Build\nDESCRIPTION: Commands to run Kodi release build from terminal\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$HOME/kodi-build/Release/kodi.bin\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC/Kodi Version History in JSON\nDESCRIPTION: This JSON structure defines the version history for XBMC/Kodi, including major and minor versions, alpha and pre-alpha releases, revision numbers, and addon support status. It provides a comprehensive record of the software's development stages.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.txt#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"alpha\": [\n        {\n            \"major\": \"19\",\n            \"minor\": \"0\",\n            \"tag\": \"alpha\",\n            \"tagversion\":\"2\",\n            \"revision\": \"20201005-54be31bc5c\",\n            \"extrainfo\": \"alpha2\",\n            \"addon_support\": \"yes\"\n        },\n        {\n            \"major\": \"19\",\n            \"minor\": \"0\",\n            \"tag\": \"alpha\",\n            \"tagversion\":\"1\",\n            \"revision\": \"20200726-db40b2ade4\",\n            \"extrainfo\": \"alpha1\",\n            \"addon_support\": \"yes\"\n        },\n        // ... (more alpha versions)\n    ],\n    \"prealpha\": [\n        {\n            \"major\": \"14\",\n            \"minor\": \"0\",\n            \"tag\": \"prealpha\",\n            \"tagversion\":\"2\",\n            \"revision\": \"20140801-62d01f6\",\n            \"extrainfo\": \"alpha2\",\n            \"addon_support\": \"yes\"\n        },\n        // ... (more pre-alpha versions)\n        {\n            \"major\": \"12\",\n            \"minor\": \"0\",\n            \"tagversion\":\"1\",\n            \"tag\": \"prealpha\",\n            \"revision\": \"20120430-4505d08\",\n            \"extrainfo\": \"alpha1\",\n            \"addon_support\": \"no\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Group of Binary Add-ons\nDESCRIPTION: Command to build all PVR add-ons using a wildcard pattern with parallel processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons ADDONS=\"pvr.*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Wayland and GBM Dependencies\nDESCRIPTION: Commands to install additional dependencies for Wayland and GBM support\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libglew-dev libwayland-dev libxkbcommon-dev waylandpp-dev wayland-protocols\nsudo apt install libgbm-dev libinput-dev libxkbcommon-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Core Network Source and Header Files in CMake\nDESCRIPTION: Sets up the base source and header files for the XBMC network module. This includes fundamental network components like DNS caching, event handling, sockets, TCP/UDP functionality, network services, and Zeroconf discovery.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DNSNameCache.cpp\n            EventClient.cpp\n            EventPacket.cpp\n            EventServer.cpp\n            GUIDialogNetworkSetup.cpp\n            Network.cpp\n            NetworkFileItemClassify.cpp\n            NetworkServices.cpp\n            Socket.cpp\n            TCPServer.cpp\n            UdpClient.cpp\n            WakeOnAccess.cpp\n            ZeroconfBrowser.cpp\n            Zeroconf.cpp)\n\nset(HEADERS DNSNameCache.h\n            EventClient.h\n            EventPacket.h\n            EventServer.h\n            GUIDialogNetworkSetup.h\n            Network.h\n            NetworkFileItemClassify.h\n            NetworkServices.h\n            Socket.h\n            TCPServer.h\n            UdpClient.h\n            WakeOnAccess.h\n            Zeroconf.h\n            ZeroconfBrowser.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type and System Name\nDESCRIPTION: Configures the default build type to Release if not specified and sets the CORE_SYSTEM_NAME variable based on the detected platform. Special handling for OSX/Darwin systems.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n\nif(NOT CORE_SYSTEM_NAME)\n  if(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    set(CORE_SYSTEM_NAME \"osx\")\n  else()\n    string(TOLOWER ${CMAKE_SYSTEM_NAME} CORE_SYSTEM_NAME)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies\nDESCRIPTION: Command to install all required build dependencies for Kodi using zypper\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install alsa-devel autoconf automake bluez-devel boost-devel capi4linux-devel ccache cmake doxygen flac-devel fribidi-devel fstrcmp-devel gcc gcc-c++ gettext-devel giflib-devel glew-devel googletest gperf java-openjdk libass-devel libavahi-devel libbluray-devel libbz2-devel libcap-devel libcap-ng-devel libcdio-devel libcec-devel libcurl-devel libdvdread-devel libexiv2-devel libgudev-1_0-devel libidn2-devel libjasper-devel libjpeg-devel liblcms2-devel libmad-devel libmicrohttpd-devel libmodplug-devel libmpeg2-devel libmysqlclient-devel libnfs-devel libogg-devel libpcap-devel libplist-devel libpng12-devel libpulse-devel libsamplerate-devel libsmbclient-devel libtag-devel libtiff-devel libtool libudev-devel libuuid-devel libva-devel libvdpau-devel libvorbis-devel libXrandr-devel libXrender-devel libxslt-devel lirc-devel lzo-devel make Mesa-libEGL-devel Mesa-libGLESv2-devel Mesa-libGLESv3-devel nasm patch pcre2-devel python3-devel python3-Pillow randrproto-devel renderproto-devel shairplay-devel sqlite3-devel swig tinyxml-devel tinyxml2-devel\n```\n\n----------------------------------------\n\nTITLE: Git Cherry-Pick Operations\nDESCRIPTION: Commands for cherry-picking commits from one branch to another.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <feature-branch>            // switch to branch with commit(s) you want to cherry-pick\ngit log --pretty=oneline --abbrev-commit // list commits. take note of the commit(s) `sha`\ngit checkout <other-feature-branch>      // switch to branch that will receive cherry-picked commit(s)\ngit cherry-pick <sha>                    // cherry-pick commit\n```\n\n----------------------------------------\n\nTITLE: Adding Video Library to Core Project in CMake\nDESCRIPTION: Adds the video library component to the core project using a custom CMake command. This integrates the video library into the main XBMC/Kodi build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(video)\n```\n\n----------------------------------------\n\nTITLE: Building Add-ons by Category\nDESCRIPTION: Example of building all add-ons in a specific category using pattern matching.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons ADDONS=\"pvr.*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Wayland Build Dependencies for Kodi\nDESCRIPTION: Command to install additional packages required for building Kodi with Wayland display server support on Fedora.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install mesa-libGLES-devel wayland-devel waylandpp-devel wayland-protocols-devel\n```\n\n----------------------------------------\n\nTITLE: Building and testing a single addon with a specific Kodi build\nDESCRIPTION: Series of commands to build a single addon against a specific Kodi build directory. This is useful for addon developers to test with particular Kodi versions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir pvr.demo-build\ncd pvr.demo-build\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=<KODI_BUILD_DIR>/build -DKODI_BUILD_DIR=<KODI_BUILD_DIR> <pvr.demo-SRC>\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining Input Joystick Interface Headers in CMake\nDESCRIPTION: Sets up a list of header files for input joystick interfaces. These headers define various interfaces for button mapping, input handling, and driver interactions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IButtonMap.h\n            IButtonMapCallback.h\n            IButtonMapper.h\n            IButtonSequence.h\n            IDriverHandler.h\n            IDriverReceiver.h\n            IInputHandler.h\n            IInputProvider.h\n            IInputReceiver.h\n)\n```\n\n----------------------------------------\n\nTITLE: OpenGL-Specific Shader Sources\nDESCRIPTION: Adds OpenGL-specific shader implementations when OpenGL support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES GLSLOutput.cpp\n                      VideoFilterShaderGL.cpp\n                      YUV2RGBShaderGL.cpp)\n  list(APPEND HEADERS GLSLOutput.h\n                      VideoFilterShaderGL.h\n                      YUV2RGBShaderGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Directory Navigation and Environment Setup\nDESCRIPTION: Commands for navigating to build directories and setting up the build environment including dependency downloads.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\ncd %userprofile%\\kodi\\tools\\buildsteps\\windows\\x64\ndownload-dependencies.bat\ndownload-msys2.bat\nmake-mingwlibs.bat\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Origin\nDESCRIPTION: Commands to push local feature branch changes to remote origin repository.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <feature-branch> // switch to feature branch\ngit push origin               // push updated feature branch to your personal remote repo\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Core in CMake\nDESCRIPTION: This snippet sets the SOURCES variable with a list of core C++ source files for the XBMC project. It includes files for data caching, FFmpeg integration, and video settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DataCacheCore.cpp\n            FFmpeg.cpp\n            VideoSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Adding Internal Dependencies in CMake\nDESCRIPTION: Creates a function 'add_internal' that adds an external project using ExternalProject_Add. It configures the project with a URL, sets up build commands, and defines an install command using a custom Install.cmake script.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_internal id url inputfile)\n  externalproject_add(${id}\n                      URL ${url}\n                      PREFIX build/${id}\n                      CONFIGURE_COMMAND \"\"\n                      BUILD_COMMAND \"\"\n                      INSTALL_COMMAND ${CMAKE_COMMAND}\n                                      -DINPUTDIR=${PROJECT_BINARY_DIR}/build/${id}/src/${id}\n                                      -DINPUTFILE=${inputfile}\n                                      -DDESTDIR=${ADDON_DEPENDS_PATH}\n                                      -P ${PROJECT_SOURCE_DIR}/Install.cmake\n                     )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pull Request Title Format in Markdown\nDESCRIPTION: Examples of proper formatting for pull request titles, using markdown code blocks to highlight the syntax.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`[Component(s)] Short description...` or alternative format `Component(s): Short description...`\n```\n\n----------------------------------------\n\nTITLE: Syncing Feature Branch with Origin\nDESCRIPTION: Commands to fetch and sync a local feature branch with its remote origin version.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <feature-branch>            // switch to feature branch\ngit fetch origin                         // fetch origin changes\ngit reset --hard origin/<feature-branch> // reset feature branch\n```\n\n----------------------------------------\n\nTITLE: Conditional NFS Support Configuration\nDESCRIPTION: Adds NFS (Network File System) related source and header files when NFS support is enabled in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::NFS)\n  list(APPEND SOURCES NFSDirectory.cpp\n                      NFSFile.cpp)\n  list(APPEND HEADERS NFSDirectory.h\n                      NFSFile.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Games Controller Input\nDESCRIPTION: Defines the list of C++ source files that comprise the games controller input functionality, including controller activity, button mapping, and input translation components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ControllerActivity.cpp\n            DefaultButtonMap.cpp\n            DefaultKeyboardTranslator.cpp\n            DefaultMouseTranslator.cpp\n            InputSink.cpp\n            PhysicalFeature.cpp\n            PhysicalTopology.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Debug Keystore for APK Signing\nDESCRIPTION: Generates a self-signed debug key using keytool for signing Android packages during development.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkey -keystore ~/.android/debug.keystore -v -alias androiddebugkey -dname \"CN=Android Debug,O=Android,C=US\" -keypass android -storepass android -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Generation in CMake for XBMC\nDESCRIPTION: This snippet configures Doxygen for generating documentation for the XBMC project. It creates a custom target 'doc' that runs Doxygen with the project's configuration file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Doxygen)\nif(DOXYGEN_FOUND)\n  add_custom_target(doc\n                    COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_SOURCE_DIR}/docs/doxygen/Doxyfile.doxy\n                    COMMAND ${CMAKE_COMMAND} -E echo \"Documentation built to: file://${CMAKE_SOURCE_DIR}/docs/html/index.html\"\n                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/docs/doxygen\n                    COMMENT \"Generating Doxygen documentation\" VERBATIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Kodi with xcodebuild\nDESCRIPTION: Builds Kodi using xcodebuild command line tool with Debug configuration and parallel jobs\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/kodi-build\nxcodebuild -config \"Debug\" -jobs $(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for Android (x86_64)\nDESCRIPTION: Command to configure the build system for Android x86_64 architecture. This targets 64-bit x86 Android devices, though like x86, it may not be fully maintained.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-tarballs=$HOME/android-tools/xbmc-tarballs --host=x86_64-linux-android --with-sdk-path=$HOME/android-tools/android-sdk-linux --with-ndk-path=$HOME/android-tools/android-ndk-r20 --prefix=$HOME/android-tools/xbmc-depends\n```\n\n----------------------------------------\n\nTITLE: Advanced iOS SDK Configuration\nDESCRIPTION: Example of specifying a particular iOS SDK version (11.0) during the configuration process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./configure --host=aarch64-apple-darwin --with-platform=ios --with-sdk=11.0\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding OpenGL Support for GBM in CMake\nDESCRIPTION: Adds OpenGL-specific source and header files to the build if OpenGL support is enabled for the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES WinSystemGbmGLContext.cpp)\n  list(APPEND HEADERS WinSystemGbmGLContext.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory for Windows x64\nDESCRIPTION: Command to change directory to the Windows x64 build platform folder for Kodi add-ons\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\ncd %userprofile%\\kodi\\tools\\buildsteps\\windows\\x64\n```\n\n----------------------------------------\n\nTITLE: Generating CMake Build Files\nDESCRIPTION: Commands to generate the CMake build files for Kodi with options to customize build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys BUILD_DIR=/media/developer/apps/usr/palm/applications/org.xbmc.kodi \\\n\tCMAKE_EXTRA_ARGUMENTS=\"-DCORE_PLATFORM_NAME=webos -DENABLE_DBUS=OFF -DENABLE_CEC=OFF -DENABLE_PIPEWIRE=OFF -DHAVE_LINUX_UDMABUF=OFF\"\n```\n\n----------------------------------------\n\nTITLE: Class Member Initialization in C++\nDESCRIPTION: Demonstrates default member initialization syntax in class definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo\n{\n  bool m_fooBar{false};\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Development Kit Project with CMake\nDESCRIPTION: This CMake snippet sets up the basic configuration for the Kodi development kit project. It specifies the minimum required CMake version, defines the project name, and includes an additional CMake file for ABI interface testing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\nproject(kodi-dev-kit)\n\ninclude(cmake/test/abi-interface-test.cmake)\n```\n\n----------------------------------------\n\nTITLE: Packaging Kodi with XcodeBuild\nDESCRIPTION: Creates a distribution package using xcodebuild deb target\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-build\nxcodebuild -target deb\n```\n\n----------------------------------------\n\nTITLE: Alternative Packaging with CMake\nDESCRIPTION: Alternative method to package Kodi using CMake build command\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-build\n/Users/Shared/xbmc-depends/x86_64-darwin17.5.0-native/bin/cmake --build . --target \"deb\" --config \"Debug\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Android Platform in XBMC\nDESCRIPTION: Defines the C++ and C source files needed for the Android platform implementation. Includes Android-specific event handling, JNI wrappers for various Android APIs, and the native app glue from the NDK.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/activity/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES android_main.cpp\n            AndroidJoyStick.cpp\n            AndroidKey.cpp\n            AndroidMouse.cpp\n            AndroidTouch.cpp\n            EventLoop.cpp\n            JNIMainActivity.cpp\n            JNIXBMCMainView.cpp\n            JNIXBMCMediaSession.cpp\n            JNIXBMCVideoView.cpp\n            JNIXBMCAudioManagerOnAudioFocusChangeListener.cpp\n            JNIXBMCSurfaceTextureOnFrameAvailableListener.cpp\n            JNIXBMCNsdManagerDiscoveryListener.cpp\n            JNIXBMCNsdManagerRegistrationListener.cpp\n            JNIXBMCNsdManagerResolveListener.cpp\n            JNIXBMCJsonHandler.cpp\n            JNIXBMCFile.cpp\n            JNIXBMCTextureCache.cpp\n            JNIXBMCURIUtils.cpp\n            JNIXBMCDisplayManagerDisplayListener.cpp\n            JNIXBMCSpeechRecognitionListener.cpp\n            JNIXBMCConnectivityManagerNetworkCallback.cpp\n            JNIXBMCBroadcastReceiver.cpp\n            ${NDKROOT}/sources/android/native_app_glue/android_native_app_glue.c)\n```\n\n----------------------------------------\n\nTITLE: Defining PVR Settings Header Files in CMake for XBMC\nDESCRIPTION: This snippet lists the header files for PVR settings. It includes interface definitions, custom timer settings, integer and string setting definitions and values, general PVR settings, and timer setting definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/settings/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IPVRSettingsContainer.h\n            PVRCustomTimerSettings.h\n            PVRIntSettingDefinition.h\n            PVRIntSettingValues.h\n            PVRSettings.h\n            PVRStringSettingDefinition.h\n            PVRStringSettingValues.h\n            PVRTimerSettingDefinition.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android MediaCodec Sources\nDESCRIPTION: Adds MediaCodec renderer source files for Android platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND SOURCES RendererMediaCodec.cpp\n                      RendererMediaCodecSurface.cpp)\n  list(APPEND HEADERS RendererMediaCodec.h\n                      RendererMediaCodecSurface.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Multimedia Repository\nDESCRIPTION: Commands to add and refresh the opensuse-multimedia-libs repository for non-OSS packages\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper ar -f http://ftp.gwdg.de/pub/opensuse/repositories/multimedia:/libs/openSUSE_Tumbleweed/ opensuse-multimedia-libs\nsudo zypper ref\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC Release Version Schema in JSON\nDESCRIPTION: This JSON schema defines the structure for XBMC release versions. It includes properties for jsonrpc and releases, with releases further divided into stable, releasecandidate, beta, alpha, and prealpha categories. Each release type has specific properties such as major and minor version numbers, tags, and addon support.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.schema.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"$schema\": \"http://json-schema.org/schema#\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"jsonrpc\": {\n            \"type\": \"string\"\n        },\n        \"releases\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"stable\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"major\": {\n                                \"type\": \"string\"\n                            },\n                            \"minor\": {\n                                \"type\": \"string\"\n                            },\n                            \"tag\": {\n                                \"type\": \"string\"\n                            },\n                            \"tagversion\": {\n                                \"type\": \"string\"\n                            },\n                            \"revision\": {\n                                \"type\": \"string\"\n                            },\n                            \"extrainfo\": {\n                                \"type\": \"string\"\n                            },\n                            \"addon_support\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\n                            \"addon_support\",\n                            \"extrainfo\",\n                            \"major\",\n                            \"minor\",\n                            \"revision\",\n                            \"tag\",\n                            \"tagversion\"\n                        ]\n                    }\n                },\n                \"releasecandidate\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"major\": {\n                                \"type\": \"string\"\n                            },\n                            \"minor\": {\n                                \"type\": \"string\"\n                            },\n                            \"tag\": {\n                                \"type\": \"string\"\n                            },\n                            \"tagversion\": {\n                                \"type\": \"string\"\n                            },\n                            \"revision\": {\n                                \"type\": \"string\"\n                            },\n                            \"extrainfo\": {\n                                \"type\": \"string\"\n                            },\n                            \"addon_support\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\n                            \"addon_support\",\n                            \"extrainfo\",\n                            \"major\",\n                            \"minor\",\n                            \"revision\",\n                            \"tag\",\n                            \"tagversion\"\n                        ]\n                    }\n                },\n                \"beta\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"major\": {\n                                \"type\": \"string\"\n                            },\n                            \"minor\": {\n                                \"type\": \"string\"\n                            },\n                            \"tag\": {\n                                \"type\": \"string\"\n                            },\n                            \"tagversion\": {\n                                \"type\": \"string\"\n                            },\n                            \"revision\": {\n                                \"type\": \"string\"\n                            },\n                            \"addon_support\": {\n                                \"type\": \"string\"\n                            },\n                            \"extrainfo\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\n                            \"addon_support\",\n                            \"extrainfo\",\n                            \"major\",\n                            \"minor\",\n                            \"revision\",\n                            \"tag\",\n                            \"tagversion\"\n                        ]\n                    }\n                },\n                \"alpha\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"major\": {\n                                \"type\": \"string\"\n                            },\n                            \"minor\": {\n                                \"type\": \"string\"\n                            },\n                            \"tag\": {\n                                \"type\": \"string\"\n                            },\n                            \"tagversion\": {\n                                \"type\": \"string\"\n                            },\n                            \"revision\": {\n                                \"type\": \"string\"\n                            },\n                            \"addon_support\": {\n                                \"type\": \"string\"\n                            },\n                            \"extrainfo\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\n                            \"addon_support\",\n                            \"extrainfo\",\n                            \"major\",\n                            \"minor\",\n                            \"revision\",\n                            \"tag\",\n                            \"tagversion\"\n                        ]\n                    }\n                },\n                \"prealpha\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"major\": {\n                                \"type\": \"string\"\n                            },\n                            \"minor\": {\n                                \"type\": \"string\"\n                            },\n                            \"tag\": {\n                                \"type\": \"string\"\n                            },\n                            \"tagversion\": {\n                                \"type\": \"string\"\n                            },\n                            \"revision\": {\n                                \"type\": \"string\"\n                            },\n                            \"extrainfo\": {\n                                \"type\": \"string\"\n                            },\n                            \"addon_support\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\n                            \"addon_support\",\n                            \"extrainfo\",\n                            \"major\",\n                            \"minor\",\n                            \"revision\",\n                            \"tag\",\n                            \"tagversion\"\n                        ]\n                    }\n                }\n            },\n            \"required\": [\n                \"alpha\",\n                \"beta\",\n                \"releasecandidate\",\n                \"stable\"\n            ]\n        }\n    },\n    \"required\": [\n        \"jsonrpc\",\n        \"releases\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows 10 Network Library Sources in CMake\nDESCRIPTION: CMake configuration that sets up source files, headers and creates a platform-specific network library for Windows 10. Defines core network implementation files and creates a library target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES NetworkWin10.cpp)\n\nset(HEADERS NetworkWin10.h)\n\ncore_add_library(platform_win10_network)\n```\n\n----------------------------------------\n\nTITLE: Example of Complex Ternary Operation in C++\nDESCRIPTION: A ternary statement example that, while less complex than the previous example, could still benefit from being refactored into a more readable form.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.CleanUpLogic.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nX = (A && !B) ? Y : Z;\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to webOS Device for Debugging\nDESCRIPTION: This command establishes an SSH connection to a webOS device for debugging purposes. It uses specific SSH options and puts you in an interactive bash session.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nssh -oHostKeyAlgorithms=+ssh-rsa -oPubkeyAcceptedAlgorithms=+ssh-rsa -i ~/.ssh/<your tv>-p 9922 prisoner@<ip of tv> bash -i\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including CEC Adapter Components in CMake\nDESCRIPTION: Conditionally adds CEC adapter source and header files to the build if the CEC target exists for the current application. This enables Consumer Electronics Control (CEC) functionality when available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/devices/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::CEC)\n  list(APPEND SOURCES PeripheralCecAdapter.cpp)\n  list(APPEND HEADERS PeripheralCecAdapter.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Build Environment\nDESCRIPTION: Commands to bootstrap and configure the build environment for iOS targeting aarch64 architecture.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/depends\n./bootstrap\n./configure --host=aarch64-apple-darwin --with-platform=ios\n```\n\n----------------------------------------\n\nTITLE: Building a Group of Binary Add-ons\nDESCRIPTION: Command to build a group of binary add-ons matching a pattern (e.g. all PVR add-ons).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons ADDONS=\"pvr.*\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to Feature Branches\nDESCRIPTION: Commands for creating new feature branches and switching between branches. Feature branches isolate your development work from the main codebase until it's ready to be merged.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master              // make sure you're on master branch\ngit checkout -b <feature-branch> // create feature branch\n```\n\n----------------------------------------\n\nTITLE: Deleting Git Branches\nDESCRIPTION: Commands for deleting local and remote branches that are no longer needed. This helps keep your repository clean after merging completed features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master             // make sure you're not on feature branch to delete\ngit branch -D <feature-branch>  // delete feature branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin -d <feature-branch>\n```\n\n----------------------------------------\n\nTITLE: Creating sudo-install Target in CMake for Addon Installation\nDESCRIPTION: Defines a custom target 'sudo-install' that uses sudo privileges to install Kodi addons to the specified installation directory. It echoes a notice about sudo requirements, copies the addon installation directory to the target location, and then kills the sudo credentials.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(sudo-install\n                    COMMAND ${CMAKE_COMMAND} -E echo \"sudo rights needed to install to ${CMAKE_INSTALL_PREFIX}\\n\"\n                    COMMAND sudo ${CMAKE_COMMAND} -E copy_directory ${ADDON_INSTALL_DIR}/ ${CMAKE_INSTALL_PREFIX}/\n                    COMMAND sudo -k)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Pull Request Title Examples in Markdown\nDESCRIPTION: Specific examples of well-formatted pull request titles, using markdown code blocks for clarity.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`[Python][xbmcgui] Fix x problem...` or `Python/xbmcgui: Fix x problem...`\n```\n\n----------------------------------------\n\nTITLE: Creating Kodi APK Package with CMake\nDESCRIPTION: Use CMake to generate a packaged APK file for Kodi distribution. The resulting APK will be placed in the user's home directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmake apk\n```\n\n----------------------------------------\n\nTITLE: Using strace for Debugging Kodi on webOS\nDESCRIPTION: This command uses strace to debug Kodi, tracking system calls and signals. It's useful for identifying missing libraries or other runtime issues.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nstrace -t -o /media/developer/apps/usr/palm/applications/org.xbmc.kodi/trace.temp ./kodi-webos --debug\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific CMake Configuration\nDESCRIPTION: Checks for platform-specific CMakeLists.txt and includes it if found. This allows for platform-specific dependencies and build settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXISTS ${PROJECT_SOURCE_DIR}/${CORE_SYSTEM_NAME}/CMakeLists.txt)\n  message(STATUS \"Processing ${CORE_SYSTEM_NAME}\")\n  add_subdirectory(${CORE_SYSTEM_NAME})\nelse()\n  message(STATUS \"No platform specific file ${PROJECT_SOURCE_DIR}/${CORE_SYSTEM_NAME}/CMakeLists.txt found\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies\nDESCRIPTION: Command to build tools and dependencies using all available processor cores\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Configuring FlatBuffers Message Generation in CMake\nDESCRIPTION: Sets up the generation of C++ headers from FlatBuffer schema files using flatc compiler. Creates custom build commands for each message file and configures a target for retroplayer messages with appropriate properties and dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/messages/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MESSAGES savestate.fbs\n             video.fbs\n)\n\nforeach(_file ${MESSAGES})\n  get_filename_component(FLATC_OUTPUT ${_file} NAME_WE)\n  set(FLATC_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${FLATC_OUTPUT}_generated.h)\n  list(APPEND FLATC_OUTPUTS ${FLATC_OUTPUT})\n\n  add_custom_command(OUTPUT ${FLATC_OUTPUT}\n                     COMMAND flatbuffers::flatc\n                     ARGS -c -o \"${CMAKE_CURRENT_BINARY_DIR}/\" ${_file}\n                     DEPENDS ${_file}\n                     COMMENT \"Building C++ header for ${_file}\"\n                     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nendforeach()\n\nadd_custom_target(retroplayer_messages DEPENDS ${FLATC_OUTPUTS})\nset_target_properties(retroplayer_messages PROPERTIES FOLDER \"Generated Messages\"\n                                                      INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR}\n                                                      SOURCES \"${FLATC_OUTPUTS}\")\n\nif(TARGET ${APP_NAME_LC}::FlatBuffers)\n  set_property(TARGET ${APP_NAME_LC}::FlatBuffers APPEND PROPERTY\n                                               INTERFACE_INCLUDE_DIRECTORIES \"${CMAKE_CURRENT_BINARY_DIR}\")\n  add_dependencies(retroplayer_messages ${APP_NAME_LC}::FlatBuffers)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding POSIX Utilities Library in CMake\nDESCRIPTION: This snippet uses the core_add_library function to create a library named 'platform_posix_utils'. This library likely incorporates the previously defined source and header files for POSIX utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/utils/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_posix_utils)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for DVD Overlay Codecs in CMake\nDESCRIPTION: This snippet defines the source files for DVD overlay codecs. It includes various codec implementations for different subtitle and overlay formats, such as FFmpeg, SSA, Text, CCText, TX3G, and WebVTT.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Overlay/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DVDOverlayCodec.cpp\n            DVDOverlayCodecFFmpeg.cpp\n            DVDOverlayCodecSSA.cpp\n            DVDOverlayCodecText.cpp\n            DVDOverlayCodecCCText.cpp\n            DVDOverlayCodecTX3G.cpp\n            OverlayCodecWebVTT.cpp\n            contrib/cc_decoder.c\n            contrib/cc_decoder708.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Signing Settings\nDESCRIPTION: Example command for setting up code signing settings in the Xcode project\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DPLATFORM_BUNDLE_IDENTIFIER='tv.kodi.kodi' -DCODE_SIGN_IDENTITY='iPhone Developer: *** (**********)' -DPROVISIONING_PROFILE_APP='tv.kodi.kodi' -DPROVISIONING_PROFILE_TOPSHELF='tv.kodi.kodi.Topshelf'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon ZIP Packaging\nDESCRIPTION: Sets up an option for packaging built addons into ZIP archives. When enabled, it configures the destination directory and adds appropriate build arguments.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\noption(PACKAGE_ZIP \"Prepare built addons for packaging\" OFF)\nif(PACKAGE_ZIP)\n  # needed for project installing\n  list(APPEND BUILD_ARGS -DPACKAGE_ZIP=ON)\n\n  # figure out where to store the packaged ZIP archives\n  if(NOT PACKAGE_DIR)\n    set(PACKAGE_DIR \"${BUILD_DIR}/zips\")\n  else()\n    file(TO_CMAKE_PATH \"${PACKAGE_DIR}\" PACKAGE_DIR)\n  endif()\n  list(APPEND BUILD_ARGS -DPACKAGE_DIR=${PACKAGE_DIR})\n\n  message(STATUS \"ZIP packaging enabled (destination: ${PACKAGE_DIR})\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TVOS Filesystem Source Files in CMake\nDESCRIPTION: Sets up the list of source files for the TVOS filesystem implementation. Includes C++ and Objective-C++ files for directory operations, file handling, and utility functions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TVOSDirectory.cpp\n            TVOSFile.cpp\n            TVOSFileUtils.mm)\n```\n\n----------------------------------------\n\nTITLE: Creating Network Library and Linking Dependencies in CMake\nDESCRIPTION: Creates the network core library and conditionally links with UPnP libraries when static libraries and UPnP support are enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(network)\n\nif(ENABLE_STATIC_LIBS AND ENABLE_UPNP)\n  target_link_libraries(${CORE_LIBRARY} PRIVATE upnp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Git Alias for Status Command\nDESCRIPTION: This snippet shows how to add a git alias 'st' for the 'status' command using git config.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global --add alias.st status\n```\n\n----------------------------------------\n\nTITLE: Conditional XBMC Helper Integration\nDESCRIPTION: Conditionally adds XBMC helper source and header files when ENABLE_XBMCHELPER is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_XBMCHELPER)\n  list(APPEND SOURCES XBMCHelper.cpp)\n  list(APPEND HEADERS XBMCHelper.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring tvOS Input Source Files in CMake\nDESCRIPTION: Defines the source files for the tvOS input handling library implementation. Includes handlers for remote control, touch input, and input settings in Objective-C++.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES LibInputHandler.mm\n            LibInputRemote.mm\n            LibInputSettings.mm\n            LibInputTouch.mm)\n```\n\n----------------------------------------\n\nTITLE: Fetching Pull Requests\nDESCRIPTION: Commands for fetching and testing pull requests from upstream or origin repositories.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream pull/<pull-request-ID>/head:<branch-name-or-pull-request-ID-or-whatever>\ngit checkout <branch-name-or-pull-request-ID-or-whatever>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Build for Multiple Display Servers with CMake\nDESCRIPTION: Command to configure Kodi build for multiple display servers (X11, Wayland, GBM) with OpenGL rendering using CMake. Installation prefix is set to /usr/local.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Linux.md#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local -DCORE_PLATFORM_NAME=\"x11 wayland gbm\" -DAPP_RENDER_SYSTEM=gl\n```\n\n----------------------------------------\n\nTITLE: Building Specific Kodi Add-on\nDESCRIPTION: Command to build a specific Kodi add-on (using audioencoder.flac as example) using the make-addons batch script\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Windows.md#2025-04-21_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\nmake-addons.bat package audioencoder.flac\n```\n\n----------------------------------------\n\nTITLE: Additional Licenses Reference\nDESCRIPTION: Reference to the readme file containing information about additional licenses that may apply to the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/LICENSE.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLICENSES/README.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for Android (ARM)\nDESCRIPTION: Command to configure the build system for Android ARM architecture. This sets up the build environment with specific paths for Android SDK, NDK, and output directories.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-tarballs=$HOME/android-tools/xbmc-tarballs --host=arm-linux-androideabi --with-sdk-path=$HOME/android-tools/android-sdk-linux --with-ndk-path=$HOME/android-tools/android-ndk-r20 --prefix=$HOME/android-tools/xbmc-depends\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Repository URLs for Kodi Addons Bootstrap\nDESCRIPTION: Handles the case when a custom repository URL is provided instead of a predefined repository ID. It supports direct bootstrapping from a specified URL with an optional revision.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# if we have been asked to bootstrap a specific repository (not the default one) and\n# it couldn't be found in the predefined repository definitions we assume that it's a\n# URL to a specific repository\nif(NOT REPOSITORY_TO_BUILD_DEFAULT AND NOT REPOSITORY_TO_BUILD_FOUND)\n  # default to the master branch if no revision has been provided\n  if(NOT REPOSITORY_REVISION)\n    set(REPOSITORY_REVISION \"master\")\n  endif()\n\n  bootstrap_repo(binary-addons-custom ${REPOSITORY_TO_BUILD} ${REPOSITORY_REVISION})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory for Kodi iOS\nDESCRIPTION: Creates an out-of-source build directory for Kodi project files\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-build\n```\n\n----------------------------------------\n\nTITLE: Defining Target Compiler Flags for XBMC on Darwin Embedded\nDESCRIPTION: These compiler flags define the target platform for XBMC (Kodi) compilation. They specify POSIX compliance, Darwin (macOS/iOS) as the operating system, and an embedded environment.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/darwin_embedded/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_EMBEDDED\n```\n\n----------------------------------------\n\nTITLE: Defining Code Generation Function in CMake\nDESCRIPTION: A CMake function that generates C++ files from SWIG interface files. It sets up the classpath for Java execution, manages platform-specific differences, handles dependencies, and creates custom build commands.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/swig/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(generate_file file)\n  set(classpath ${groovy_SOURCE_DIR}/lib/*\n                ${apache-commons-lang_SOURCE_DIR}/*\n                ${apache-commons-text_SOURCE_DIR}/*\n                ${CMAKE_SOURCE_DIR}/tools/codegenerator\n                ${CMAKE_CURRENT_SOURCE_DIR}/../python)\n  if(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n    set(devnull \"/dev/null\")\n    string(REPLACE \";\" \":\" classpath \"${classpath}\")\n  else()\n    set(devnull \"nul\")\n  endif()\n\n  set(CPP_FILE ${file}.cpp)\n  if(CLANGFORMAT_FOUND)\n    set(CLANG_FORMAT_COMMAND COMMAND ${CLANG_FORMAT_EXECUTABLE} ARGS -i ${CPP_FILE})\n  endif()\n\n  if(Java_VERSION_MAJOR GREATER 8)\n    set(JAVA_OPEN_OPTS --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.regex=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED  --add-opens java.base/java.net=ALL-UNNAMED)\n  endif()\n\n  # Args used for swig execution\n  set(SWIG_ARGS -w401 -c++ -o ${file}.xml -xml -I${CMAKE_SOURCE_DIR}/xbmc ${CMAKE_CURRENT_SOURCE_DIR}/../swig/${file})\n\n  # This generates a file that has the dependencies the preprocessed swig template finds\n  # execute_process needs explicit use of explicit swig executable location. it is not TARGET aware\n  # retrieve location property from TARGET\n  get_target_property(_swig_exe SWIG::SWIG IMPORTED_LOCATION)\n  execute_process(COMMAND ${_swig_exe} -MM -MF ${CMAKE_BINARY_DIR}/build/swig/${file}.dep ${SWIG_ARGS})\n  file(READ ${CMAKE_BINARY_DIR}/build/swig/${file}.dep swig_deps)\n\n  # Match all lines except the first one until \" \\\"\n  string(REGEX MATCHALL \"\\n  [^ ]+\" temp ${swig_deps})\n  set(swig_deps)\n  foreach(t ${temp})\n    string(STRIP \"${t}\" t)\n    set(swig_deps ${swig_deps} \"${t}\")\n  endforeach()\n\n  # We set this to allow cmake to detect if changes in the headers/template files are made\n  # and to force a cmake reconfigure to detect new dependencies that may have been added.\n  set_property(DIRECTORY ${CMAKE_SOURCE_DIR} APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${swig_deps})\n\n  add_custom_command(OUTPUT ${CPP_FILE}\n                     COMMAND SWIG::SWIG\n                     ARGS ${SWIG_ARGS}\n                     COMMAND ${Java_JAVA_EXECUTABLE}\n                     ARGS ${JAVA_OPEN_OPTS} -cp \"${classpath}\" groovy.ui.GroovyMain ${CMAKE_SOURCE_DIR}/tools/codegenerator/Generator.groovy ${file}.xml ${CMAKE_CURRENT_SOURCE_DIR}/../python/PythonSwig.cpp.template ${file}.cpp > ${devnull}\n                     ${CLANG_FORMAT_COMMAND}\n                     DEPENDS SWIG::SWIG ${swig_deps} ${CMAKE_CURRENT_SOURCE_DIR}/../python/PythonSwig.cpp.template\n                     BYPRODUCTS ${CMAKE_BINARY_DIR}/build/swig/${file}.xml)\n\n  set(SOURCES ${SOURCES} \"${CPP_FILE}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer Savestates Source Files\nDESCRIPTION: Defines the source and header files needed to build the RetroPlayer savestates library component. Includes database, flatbuffer, and type definition files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/savestates/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES SavestateDatabase.cpp\n            SavestateFlatBuffer.cpp\n)\n\nset(HEADERS ISavestate.h\n            SavestateDatabase.h\n            SavestateFlatBuffer.h\n            SavestateTypes.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Targets in CMake for XBMC\nDESCRIPTION: This section sets up test targets for XBMC, including unit tests with Google Test, memory checks with Valgrind, and code coverage analysis.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(HOST_CAN_EXECUTE_TARGET AND ENABLE_TESTING)\n  find_package(Gtest 1.10.0 REQUIRED)\n\n  copy_files_from_filelist_to_buildtree(${CMAKE_SOURCE_DIR}/cmake/installdata/test-reference-data.txt NO_INSTALL)\n  add_executable(${APP_NAME_LC}-test EXCLUDE_FROM_ALL ${CMAKE_SOURCE_DIR}/xbmc/test/xbmc-test.cpp ${test_sources})\n\n  set_target_properties(PROPERTIES ENABLE_EXPORTS ON)\n\n  whole_archive(_TEST_LIBRARIES ${core_DEPENDS} ${GTEST_LIBRARY})\n  target_link_libraries(${APP_NAME_LC}-test PRIVATE ${SYSTEM_LDFLAGS} ${_TEST_LIBRARIES} lib${APP_NAME_LC} ${DEPLIBS} ${CMAKE_DL_LIBS})\n  unset(_TEST_LIBRARIES)\n\n  if (ENABLE_INTERNAL_GTEST)\n    add_dependencies(${APP_NAME_LC}-test ${APP_NAME_LC}-libraries generate-packaging gtest)\n  endif()\n\n  # Enable unit-test related targets\n  enable_testing()\n  gtest_add_tests(${APP_NAME_LC}-test \"\" ${test_sources})\n  add_custom_target(check ${CMAKE_CTEST_COMMAND} WORKING_DIRECTORY ${PROJECT_BINARY_DIR})\n  add_dependencies(check ${APP_NAME_LC}-test)\n\n  # Valgrind (memcheck)\n  find_program(VALGRIND_EXECUTABLE NAMES valgrind)\n  if(VALGRIND_EXECUTABLE)\n    set(CTEST_MEMORYCHECK_COMMAND ${VALGRIND_EXECUTABLE})\n    set(CTEST_MEMORYCHECK_COMMAND_OPTIONS \"-q --trace-children=yes --leak-check=yes --track-origins=yes\")\n    include(CTest)\n    add_custom_target(check-valgrind ${CMAKE_CTEST_COMMAND} -D ExperimentalMemCheck \\${ARGS} WORKING_DIRECTORY ${PROJECT_BINARY_DIR})\n    add_dependencies(check-valgrind ${APP_NAME_LC}-test)\n  endif()\n\n  # For testing commit series\n  add_custom_target(check-commits ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/cmake/scripts/common/CheckCommits.cmake\n                                                   -DCMAKE_BINARY_DIR=${CMAKE_BINARY_DIR})\n  set_target_properties(check-commits PROPERTIES FOLDER \"Build Utilities\")\n\n  include(${CMAKE_SOURCE_DIR}/cmake/scripts/common/StaticAnalysis.cmake)\n\n  # code coverage\n  if(CMAKE_BUILD_TYPE STREQUAL Coverage)\n    if(EXISTS ${CMAKE_SOURCE_DIR}/cmake/scripts/${CORE_SYSTEM_NAME}/CodeCoverage.cmake)\n      include(${CMAKE_SOURCE_DIR}/cmake/scripts/${CORE_SYSTEM_NAME}/CodeCoverage.cmake)\n    else()\n      message(FATAL_ERROR \"Code coverage not (yet) implemented for platform ${CORE_SYSTEM_NAME}\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Image Handling in CMake\nDESCRIPTION: This CMake command sets the SOURCES variable with a list of C++ source files related to image handling in XBMC. It includes files for image cache cleaning, image file URL handling, and special image loader factory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/imagefiles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ImageCacheCleaner.cpp\n            ImageFileURL.cpp\n            SpecialImageLoaderFactory.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for DVD Demuxers in CMake\nDESCRIPTION: This snippet defines the header files corresponding to the DVD demuxer components. It includes headers for various demuxer types, matching the source files defined earlier.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DemuxMultiSource.h\n            DVDDemux.h\n            DVDDemuxBXA.h\n            DVDDemuxCC.h\n            DVDDemuxCDDA.h\n            DVDDemuxClient.h\n            DVDDemuxFFmpeg.h\n            DVDDemuxUtils.h\n            DVDDemuxVobsub.h\n            DVDFactoryDemuxer.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Alias for Interactive Rebase with Autosquash\nDESCRIPTION: This snippet adds a git alias 'fixer' for performing an interactive rebase with autosquash, allowing automatic squashing of fixup commits.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global --add alias.fixer \"rebase -i --autosquash\" // git fixer HEAD~10 will autosquash the last 10 commits\n```\n\n----------------------------------------\n\nTITLE: Setting PVR Headers in CMake\nDESCRIPTION: Defines a list of PVR-related header files that are part of the Kodi PVR addon API. These headers cover functionality like channel groups, EPG, recordings, streams, and timers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/pvr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  pvr_channel_groups.h\n  pvr_channels.h\n  pvr_defines.h\n  pvr_edl.h\n  pvr_epg.h\n  pvr_general.h\n  pvr_menu_hook.h\n  pvr_providers.h\n  pvr_recordings.h\n  pvr_stream.h\n  pvr_timers.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PVR GUI Source Files in CMake\nDESCRIPTION: Sets up a list of source files for the PVR GUI library. These files include various GUI components and action handlers for PVR functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/guilib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIEPGGridContainer.cpp\n            GUIEPGGridContainerModel.cpp\n            PVRGUIActionListener.cpp\n            PVRGUIActionsChannels.cpp\n            PVRGUIActionsClients.cpp\n            PVRGUIActionsDatabase.cpp\n            PVRGUIActionsEPG.cpp\n            PVRGUIActionsUtils.cpp\n            PVRGUIActionsParentalControl.cpp\n            PVRGUIActionsPlayback.cpp\n            PVRGUIActionsPowerManagement.cpp\n            PVRGUIActionsRecordings.cpp\n            PVRGUIActionsTimers.cpp\n            PVRGUIChannelIconUpdater.cpp\n            PVRGUIChannelNavigator.cpp\n            PVRGUIProgressHandler.cpp)\n```\n\n----------------------------------------\n\nTITLE: Refactoring OR Logic Operations in C++\nDESCRIPTION: Example showing how to refactor OR operations by using a flag variable and multiple if statements. This approach makes the code more readable by linearizing the logical flow.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.CleanUpLogic.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nif (A || B)\n  something()\n```\n\nLANGUAGE: c++\nCODE:\n```\nbool flag = false;\n\nif (A)\n  flag = true;\nelse if (B)\n  flag = true;\n\nif (flag)\n  something();\n```\n\n----------------------------------------\n\nTITLE: Creating Android Support Library in CMake\nDESCRIPTION: Adds the Android support library to the build using the core_add_library macro and configures include directories for the NDK CPU features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(androidsupport)\ntarget_include_directories(${CORE_LIBRARY} SYSTEM\n                           PRIVATE ${NDKROOT}/sources/android/cpufeatures)\n```\n\n----------------------------------------\n\nTITLE: Running BuildSetup.bat for Windows Kodi Installer\nDESCRIPTION: This command runs the BuildSetup.bat script in the appropriate directory for the target Windows platform. It initiates the build process for creating a Kodi installer.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/project/Win32BuildSetup/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\nBuildSetup.bat\n```\n\n----------------------------------------\n\nTITLE: Building Binary Addons with CMake\nDESCRIPTION: Commands for generating Xcode project with specific binary addon build configurations using CMake. Supports building individual addons, addon groups via regex, or all addons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DENABLE_XCODE_ADDONBUILD=ON -DADDONS_TO_BUILD='audioencoder.flac pvr.vdr.vnsi audiodecoder.snesapu'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DENABLE_XCODE_ADDONBUILD=ON -DADDONS_TO_BUILD='pvr.*'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys CMAKE_EXTRA_ARGUMENTS=\"-DENABLE_XCODE_ADDONBUILD=ON\"\n```\n\n----------------------------------------\n\nTITLE: Defining Input Module Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files that make up the input handling module, including components for scrolling, input coding, and translation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES InertialScrollingHandler.cpp\n            InputCodingTableBasePY.cpp\n            InputCodingTableFactory.cpp\n            InputCodingTableKorean.cpp\n            InputManager.cpp\n            InputTranslator.cpp\n            WindowTranslator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for WebOS\nDESCRIPTION: Command to configure the build system for WebOS using a buildroot-based toolchain. This sets up cross-compilation for ARM-based WebOS devices.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-toolchain=/opt/toolchains/arm-webos-linux-gnueabi_sdk-buildroot --prefix=/opt/xbmc-deps --host=arm-webos-linux-gnueabi\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project\nDESCRIPTION: Commands to create build directory and generate Xcode project files for tvOS\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-build\nmake -C tools/depends/target/cmakebuildsys BUILD_DIR=$HOME/kodi-build\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for JSON Header Generation in CMake\nDESCRIPTION: Establishes build dependencies between targets, ensuring that the main application library depends on the generate_json_header target, which guarantees the header files are generated before the library is built.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# We require this for lib target.\nadd_dependencies(lib${APP_NAME_LC} generate_json_header)\n```\n\n----------------------------------------\n\nTITLE: Launching Kodi on Android Emulator without GUI\nDESCRIPTION: Use ADB to start Kodi on an Android emulator without launching the graphical user interface.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nadb shell am start -a android.intent.action.MAIN -n org.xbmc.xbmc/android.app.NativeActivity\n```\n\n----------------------------------------\n\nTITLE: Shader Compilation Configuration\nDESCRIPTION: Sets up shader compilation commands for Windows platforms, generating header files from HLSL shaders using FXC compiler.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  set(SHADERS_VERTEX guishader_vert.hlsl)\n  set(SHADERS_PIXEL guishader_checkerboard_right.hlsl\n                    [...other shaders...])\n  foreach(shader ${SHADERS_VERTEX})\n    [...shader compilation commands...]\n  endforeach()\n  [...]\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Source Code\nDESCRIPTION: Commands to change to home directory and clone Kodi's current master branch from GitHub.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring TexturePacker Executable in CMake\nDESCRIPTION: Creates the TexturePacker executable target, sets include directories, links libraries, and defines compiler options and features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/native/TexturePacker/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(TexturePacker ${SOURCES})\ntarget_include_directories(TexturePacker\n                           PRIVATE ${PNG_INCLUDE_DIRS}\n                                   ${JPEG_INCLUDE_DIR}\n                                   ${GIF_INCLUDE_DIR}\n                                   ${KODI_SOURCE_DIR}/xbmc\n                                   ${CMAKE_CURRENT_SOURCE_DIR}\n                                   ${CMAKE_CURRENT_SOURCE_DIR}/decoder)\nif(WIN32)\n  target_include_directories(TexturePacker SYSTEM\n                                           PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Win32)\nendif()\n\ntarget_link_libraries(TexturePacker\n                      PRIVATE ${SYSTEM_LDFLAGS}\n                              ${GIF_LIBRARIES}\n                              ${PNG_LIBRARIES}\n                              ${JPEG_LIBRARIES}\n                              texturepacker::Lzo2)\n\ntarget_compile_definitions(TexturePacker PRIVATE ${ARCH_DEFINES} ${SYSTEM_DEFINES})\ntarget_compile_features(TexturePacker PUBLIC cxx_std_17)\n```\n\n----------------------------------------\n\nTITLE: Building Kodi\nDESCRIPTION: Command to build Kodi using all available processor cores with verbose output.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.FreeBSD.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . -- VERBOSE=1 -j$(sysctl hw.ncpu | awk '{print $2}')\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for platform_common in CMake\nDESCRIPTION: Sets the header files that belong to the platform_common library, including Environment.h, Filesystem.h, MessagePrinter.h, Platform.h, and xbmc.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Environment.h\n            Filesystem.h\n            MessagePrinter.h\n            Platform.h\n            xbmc.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring ProcessInfoIOS Library Sources in CMake\nDESCRIPTION: Sets up the source files, header files, and library configuration for the ProcessInfoIOS component using CMake commands. It defines SOURCES and HEADERS variables and uses the core_add_library function to add the processios library to the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/ios/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ProcessInfoIOS.cpp)\n\nset(HEADERS ProcessInfoIOS.h)\n\ncore_add_library(processios)\n```\n\n----------------------------------------\n\nTITLE: Listing Git Branches\nDESCRIPTION: Commands to display local branches and all branches (including remote ones). This helps you keep track of your working branches and those available from remote repositories.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit branch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -a\n```\n\n----------------------------------------\n\nTITLE: Setting Peripheral Headers in CMake for Kodi Add-on Instance\nDESCRIPTION: Defines a list of header files for peripheral utilities and conditionally adds them to the Kodi add-on development kit. This setup is crucial for building peripheral-related functionality in Kodi add-ons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/peripheral/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  PeripheralUtils.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_addon-instance_peripheral)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting XBMC Core Header Files\nDESCRIPTION: Defines the list of header files required for the XBMC core library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AutoSwitch.h\n            BackgroundInfoLoader.h\n            CompileInfo.h\n            ContextMenuItem.h\n            ContextMenuManager.h\n            ContextMenus.h\n            CueDocument.h\n            DatabaseManager.h\n            DbUrl.h\n            DllPaths.h\n            DllPaths_win32.h\n            DynamicDll.h\n            FileItem.h\n            FileItemList.h\n            FileItemListModification.h\n            GUIInfoManager.h\n            GUILargeTextureManager.h\n            GUIPassword.h\n            GUIUserMessages.h\n            HDRStatus.h\n            IFileItemListModifier.h\n            IProgressCallback.h\n            InfoScanner.h\n            LangInfo.h\n            LockMode.h\n            MediaSource.h\n            NfoFile.h\n            PartyModeManager.h\n            PasswordManager.h\n            PlayListPlayer.h\n            SectionLoader.h\n            SeekHandler.h\n            ServiceBroker.h\n            ServiceManager.h\n            SortFileItem.h\n            SourceType.h\n            TextureCache.h\n            TextureCacheJob.h\n            TextureDatabase.h\n            ThumbLoader.h\n            URL.h\n            Util.h\n            XBDateTime.h\n            system_egl.h\n            system_gl.h)\n```\n\n----------------------------------------\n\nTITLE: Namespace Indentation in C++\nDESCRIPTION: Shows the indentation style for namespaces in the Kodi project. Namespaces are not indented to simplify nesting them and wrapping *.cpp* files in a namespace.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace KODI\n{\nnamespace UTILS\n{\n\nclass ILogger\n{\npublic:\n  virtual void Log(...) = 0;\n  virtual ~ILogger() {}\n}\n\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Core Library and CPU Optimizations\nDESCRIPTION: Creates the rendering library and adds SSE/SSE2 compile options for non-Windows platforms when available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(rendering)\nif(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  if(HAVE_SSE)\n    target_compile_options(${CORE_LIBRARY} PRIVATE -msse)\n  endif()\n  if(HAVE_SSE2)\n    target_compile_options(${CORE_LIBRARY} PRIVATE -msse2)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for XBMC Messaging Module\nDESCRIPTION: Defines the source files, header files, and builds the messaging library for the XBMC project. The messaging module likely handles inter-component communication within the application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/messaging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ApplicationMessenger.cpp)\n\nset(HEADERS ApplicationMessenger.h\n            IMessageTarget.h\n            ThreadMessage.h)\n\ncore_add_library(messaging)\n```\n\n----------------------------------------\n\nTITLE: Building Missing Dependencies\nDESCRIPTION: Commands to build and install missing dependencies like flatbuffers, libfmt, rapidjson, and waylandpp\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi\nsudo make -C tools/depends/target/flatbuffers PREFIX=/usr/local\nsudo make -C tools/depends/target/libfmt PREFIX=/usr/local\nsudo make -C tools/depends/target/rapidjson PREFIX=/usr/local\nsudo make -C tools/depends/target/waylandpp PREFIX=/usr/local\n```\n\n----------------------------------------\n\nTITLE: Adding Kodi PPAs and Build Dependencies\nDESCRIPTION: Commands to add Kodi PPAs and install build dependencies automatically\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository -s ppa:team-xbmc/xbmc-nightly\nsudo add-apt-repository ppa:team-xbmc/xbmc-ppa-build-depends\nsudo apt update\nsudo apt build-dep kodi\n```\n\n----------------------------------------\n\nTITLE: Adding Input Library to XBMC Core\nDESCRIPTION: Adds the input module as a core library to the XBMC project build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(input)\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Addon Repositories\nDESCRIPTION: Checks for addon definition files and bootstraps default repositories if none are found. Creates a temporary build system to download and configure addon repositories.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n### get and build all the binary addons\n# look for all the addons to be built\nfile(GLOB_RECURSE addons ${ADDONS_DEFINITION_DIR}/*.txt)\n\n#if there are no addons assume that bootstrapping hasn't happened yet\nif(NOT addons)\n  message(STATUS \"Bootstrapping all default repositories as no addons were found...\")\n  set(BOOTSTRAP_BUILD_DIR \"${BUILD_DIR}/bootstrap\")\n\n  # make sure that the bootstraps build addon exists\n  if(NOT EXISTS ${BOOTSTRAP_BUILD_DIR})\n    file(MAKE_DIRECTORY ${BOOTSTRAP_BUILD_DIR})\n  endif()\n\n  string(REPLACE \";\" \" \" ADDONS_TO_BUILD_STR \"${ADDONS_TO_BUILD}\")\n  # generate the bootstrap buildsystem\n  execute_process(COMMAND ${CMAKE_COMMAND} ${PROJECT_SOURCE_DIR}/bootstrap\n                                           -DCMAKE_INSTALL_PREFIX:PATH=${ADDONS_DEFINITION_DIR}\n                                           -DBUILD_DIR:PATH=${BOOTSTRAP_BUILD_DIR}\n                                           -DADDONS_TO_BUILD:STRING=${ADDONS_TO_BUILD_STR}\n                                           -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}\n                  WORKING_DIRECTORY ${BOOTSTRAP_BUILD_DIR})\n\n  # execute the generated bootstrap buildsystem\n  execute_process(COMMAND ${CMAKE_COMMAND} --build ${BOOTSTRAP_BUILD_DIR}\n                  WORKING_DIRECTORY ${BOOTSTRAP_BUILD_DIR})\n\n  # now look for all the addons to be built again\n  file(GLOB_RECURSE addons ${ADDONS_DEFINITION_DIR}/*.txt)\n\n  if(NOT addons)\n    message(FATAL_ERROR \"No addons available to be built\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional UPnP Support Configuration\nDESCRIPTION: Adds UPnP (Universal Plug and Play) related source and header files when UPnP support is enabled in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_UPNP)\n  list(APPEND SOURCES NptXbmcFile.cpp\n                      UPnPDirectory.cpp\n                      UPnPFile.cpp)\n  list(APPEND HEADERS UPnPDirectory.h\n                      UPnPFile.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Obtaining Kodi Source Code\nDESCRIPTION: Commands to clone the Kodi source code repository from GitHub into a local directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for CMS Settings Dialog in CMake\nDESCRIPTION: Adds CMS (Color Management System) settings dialog source and header files to the compilation list if the target is OpenGL, Windows, or Windows Store. This ensures platform-specific features are included when appropriate.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl OR CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES GUIDialogCMSSettings.cpp)\n  list(APPEND HEADERS GUIDialogCMSSettings.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Repository Definition File Format for Kodi Addon Bootstrapping\nDESCRIPTION: Defines the required format for repository definition files used in the Kodi addon bootstrapping system. Each file must specify a repository name, git URL, and git revision.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<repository> <git-url> <git-revision>\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Kodi Add-on Instances in CMake\nDESCRIPTION: This snippet defines a list of header files for different types of Kodi add-on instances. These headers are crucial for developing various add-ons such as audio decoders, encoders, games, and visualizations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  AudioDecoder.h\n  AudioEncoder.h\n  Game.h\n  ImageDecoder.h\n  Inputstream.h\n  PVR.h\n  Peripheral.h\n  Screensaver.h\n  VFS.h\n  VideoCodec.h\n  Visualization.h\n)\n```\n\n----------------------------------------\n\nTITLE: Generating ARM64 Xcode Project\nDESCRIPTION: Generates Xcode project specifically for ARM 64-bit architecture using CMake with toolchain configuration\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-build\n/Users/Shared/xbmc-depends/x86_64-darwin17.5.0-native/bin/cmake -G Xcode -DCMAKE_TOOLCHAIN_FILE=/Users/Shared/xbmc-depends/iphoneos11.3_arm64-target-debug/share/Toolchain.cmake $HOME/kodi\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Keyboard Input Library in CMake\nDESCRIPTION: This snippet uses a custom CMake function 'core_add_library' to add the keyboard input module as a library to the XBMC project. This function likely handles the compilation and linking of the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_keyboard)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Video Shader Library in CMake\nDESCRIPTION: Uses the core_add_library function to add the Windows-specific video shader library to the project. This custom function likely handles the compilation and linking of the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(rp-videoshaders-windows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Skin Timer Test Sources and Library in CMake\nDESCRIPTION: Sets up the test source files and creates a test library for skin timer functionality. Uses core_add_test_library to create a skin_test library target with TestSkinTimers.cpp as the source file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/gui/skin/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestSkinTimers.cpp)\n\ncore_add_test_library(skin_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Dialog Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for PVR dialog components including channel manager, guide, recording settings, and other related GUI dialogs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIDialogPVRChannelManager.cpp\n            GUIDialogPVRChannelsOSD.cpp\n            GUIDialogPVRGroupManager.cpp\n            GUIDialogPVRGuideInfo.cpp\n            GUIDialogPVRChannelGuide.cpp\n            GUIDialogPVRGuideControls.cpp\n            GUIDialogPVRGuideSearch.cpp\n            GUIDialogPVRRadioRDSInfo.cpp\n            GUIDialogPVRRecordingInfo.cpp\n            GUIDialogPVRRecordingSettings.cpp\n            GUIDialogPVRTimerSettings.cpp\n            GUIDialogPVRClientPriorities.cpp\n            GUIDialogPVRItemsViewBase.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Bluray Support in CMake\nDESCRIPTION: Conditionally adds Bluray-specific source and header files if Bluray support is enabled for the target application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Bluray)\n  list(APPEND SOURCES DVDInputStreamBluray.cpp)\n  list(APPEND HEADERS DVDInputStreamBluray.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: OpenGLES Platform-Specific Configuration\nDESCRIPTION: Adds OpenGLES implementation files for supported platforms including Android, iOS, tvOS, GBM, X11, and Wayland.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES AND (\"android\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"ios\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"tvos\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"x11\" IN_LIST CORE_PLATFORM_NAME_LC OR\n                            \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC))\n  list(APPEND SOURCES LinuxRendererGLES.cpp\n                      OverlayRendererGLES.cpp\n                      RenderCaptureGLES.cpp)\n  list(APPEND HEADERS LinuxRendererGLES.h\n                      OverlayRendererGLES.cpp\n                      RenderCaptureGLES.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Optical Disc Drive Handler for XBMC on POSIX\nDESCRIPTION: This CMake snippet conditionally sets up the compilation of optical disc drive handling components for XBMC on POSIX systems. It defines source and header files, and adds a library when ENABLE_OPTICAL is true.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/storage/discs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  set(SOURCES DiscDriveHandlerPosix.cpp)\n\n  set(HEADERS DiscDriveHandlerPosix.h)\n\n  core_add_library(platform_posix_storage_discs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Git on openSUSE\nDESCRIPTION: Command to install Git version control system using zypper package manager\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install git\n```\n\n----------------------------------------\n\nTITLE: Creating Android Development Directories\nDESCRIPTION: Creates the necessary directory structure for Android SDK installation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $HOME/android-tools/android-sdk-linux\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for JSONRPC Library in CMake\nDESCRIPTION: This snippet defines the source files for the JSONRPC library. It includes various operations classes and utility files necessary for JSONRPC functionality in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AddonsOperations.cpp\n            ApplicationOperations.cpp\n            AudioLibrary.cpp\n            FavouritesOperations.cpp\n            FileItemHandler.cpp\n            FileOperations.cpp\n            GUIOperations.cpp\n            InputOperations.cpp\n            JSONRPC.cpp\n            JSONServiceDescription.cpp\n            JSONUtils.cpp\n            PlayerOperations.cpp\n            PlaylistOperations.cpp\n            ProfilesOperations.cpp\n            PVROperations.cpp\n            SettingsOperations.cpp\n            SystemOperations.cpp\n            TextureOperations.cpp\n            VideoLibrary.cpp\n            XBMCOperations.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Rendering Sources in CMake\nDESCRIPTION: Conditional CMake configuration block that sets up source files and headers for OpenGL rendering system implementation. Only processes if the OpenGL target is enabled for the application. Creates a core library named 'rendering_gl' with the specified OpenGL-related source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/gl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  set(SOURCES RenderSystemGL.cpp\n              ScreenshotSurfaceGL.cpp\n              GLShader.cpp)\n\n  set(HEADERS RenderSystemGL.h\n              ScreenshotSurfaceGL.h\n              GLShader.h)\n\n  core_add_library(rendering_gl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: GBM and Wayland Platform Support\nDESCRIPTION: Configures buffer object handling and display support for GBM and Wayland platforms, including various buffer object implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC)\n  list(APPEND SOURCES BufferObject.cpp\n                      BufferObjectFactory.cpp)\n  list(APPEND HEADERS BufferObject.h\n                      BufferObjectFactory.h)\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding VAAPI Sources in CMake\nDESCRIPTION: Includes VAAPI (Video Acceleration API) source and header files if the VAAPI target is available. This allows for hardware-accelerated video decoding on systems supporting VAAPI.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::VAAPI)\n  list(APPEND SOURCES VAAPI.cpp)\n  list(APPEND HEADERS VAAPI.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branches to Remote Repository\nDESCRIPTION: Commands for pushing your feature branch to your remote repository (origin) for the first time, subsequent pushes, and force pushes when necessary.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push --set-upstream origin <feature-branch>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f origin\n```\n\n----------------------------------------\n\nTITLE: Control Statement Whitespace in C++\nDESCRIPTION: Shows the required whitespace for control statements in C++ for Kodi. Keywords must be separated from opening parentheses by one space.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nwhile (true);\nfor (int i = 0; i < x; ++i);\n```\n\n----------------------------------------\n\nTITLE: Directory Path Mapping for XBMC Project\nDESCRIPTION: A configuration that maps physical directory paths to symbolic names, organizing the XBMC codebase into logical components. Each line represents a directory mapping in the format 'physical_path symbolic_name'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/common/subdirs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxbmc                                            xbmc\nxbmc/addons                                     addons\nxbmc/addons/addoninfo                           addons_addoninfo\nxbmc/addons/binary-addons                       addons_binary-addons\nxbmc/addons/gui                                 addons_gui\nxbmc/addons/gui/skin                            addons_gui_skin\nxbmc/addons/interfaces                          addons_interfaces\nxbmc/addons/interfaces/gui                      addons_interfaces_gui\nxbmc/addons/interfaces/gui/controls             addons_interfaces_gui_controls\nxbmc/addons/interfaces/gui/dialogs              addons_interfaces_gui_dialogs\nxbmc/addons/settings                            addons_settings\nxbmc/application                                application\nxbmc/commons                                    commons\nxbmc/dbwrappers                                 dbwrappers\nxbmc/dialogs                                    dialogs\nxbmc/favourites                                 favourites\nxbmc/guilib                                     guilib\nxbmc/guilib/guiinfo                             guilib_guiinfo\nxbmc/guilib/handlers                            guilib_announcement_handlers\nxbmc/guilib/listproviders                       guilib_listproviders\nxbmc/imagefiles                                 imagefiles\nxbmc/messaging                                  messaging\nxbmc/messaging/helpers                          messagingHelpers\nxbmc/pictures                                   pictures\nxbmc/pictures/metadata                          pictures_metadata\nxbmc/platform                                   platform\nxbmc/playlists                                  playlists\nxbmc/powermanagement                            powermanagement\nxbmc/programs                                   programs\nxbmc/rendering                                  rendering\nxbmc/speech                                     speech\nxbmc/storage                                    storage\nxbmc/threads                                    threads\nxbmc/utils                                      utils\nxbmc/utils/guilib                               utils_guilib\nxbmc/view                                       view\nxbmc/weather                                    weather\nxbmc/windowing                                  windowing\nxbmc/windows                                    windows\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenGL Component Inclusion\nDESCRIPTION: Adds OpenGL-specific source and header files when OpenGL support is enabled in the build target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/X11/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES WinSystemX11GLContext.cpp)\n  list(APPEND HEADERS WinSystemX11GLContext.h)\n  list(APPEND SOURCES VideoSyncOML.cpp)\n  list(APPEND HEADERS VideoSyncOML.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Android-Specific MediaCodec Sources in CMake\nDESCRIPTION: Includes Android MediaCodec source and header files for Android platforms. This allows for hardware-accelerated video decoding using Android's native MediaCodec API.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND SOURCES DVDVideoCodecAndroidMediaCodec.cpp)\n  list(APPEND HEADERS DVDVideoCodecAndroidMediaCodec.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Kodi Standard GPL License Header\nDESCRIPTION: Example of the typical GPL-2.0-or-later license header used in most Kodi source files, including Team Kodi copyright notice and project information.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/LICENSES/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n/*\n *  Copyright (C) 2005-2018 Team Kodi\n *  This file is part of Kodi - https://kodi.tv\n *\n *  SPDX-License-Identifier: GPL-2.0-or-later\n *  See LICENSES/README.md for more information.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Control Headers in CMake\nDESCRIPTION: Defines a list of header files for Kodi GUI controls including buttons, labels, images, and other UI elements. Conditionally adds these headers to the development kit if the HEADERS variable is not empty.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/gui/controls/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  Button.h\n  Edit.h\n  FadeLabel.h\n  Image.h\n  Label.h\n  Progress.h\n  RadioButton.h\n  Rendering.h\n  SettingsSlider.h\n  Slider.h\n  Spin.h\n  TextBox.h\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_gui_controls)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining EPG Source Files in CMake for XBMC\nDESCRIPTION: Sets up a list of source files for the EPG component. These files contain the core functionality for handling electronic program guide data in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/epg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES EpgContainer.cpp\n            Epg.cpp\n            EpgDatabase.cpp\n            EpgInfoTag.cpp\n            EpgSearch.cpp\n            EpgSearchFilter.cpp\n            EpgSearchPath.cpp\n            EpgChannelData.cpp\n            EpgTagsCache.cpp\n            EpgTagsContainer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Android Windowing System in CMake\nDESCRIPTION: Defines the list of source files for the Android windowing system. Includes files for screen saver, window events, window system, Android utilities, and video synchronization.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES OSScreenSaverAndroid.cpp\n            WinEventsAndroid.cpp\n            WinSystemAndroid.cpp\n            AndroidUtils.cpp\n            VideoSyncAndroid.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Core Filesystem Sources and Headers in CMake\nDESCRIPTION: Defines the main source files and header files for the XBMC filesystem component, including implementations for various directory types, file handlers, and protocols.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AddonsDirectory.cpp\n            AudioBookFileDirectory.cpp\n            CacheStrategy.cpp\n            CircularCache.cpp\n            CurlFile.cpp\n            DAVCommon.cpp\n            DAVDirectory.cpp\n            DAVFile.cpp\n            DirectoryCache.cpp\n            Directory.cpp\n            DirectoryFactory.cpp\n            DirectoryHistory.cpp\n            DllLibCurl.cpp\n            EventsDirectory.cpp\n            FavouritesDirectory.cpp\n            FileCache.cpp\n            File.cpp\n            FileDirectoryFactory.cpp\n            FileFactory.cpp\n            FTPDirectory.cpp\n            FTPParse.cpp\n            HTTPDirectory.cpp\n            IDirectory.cpp\n            IFile.cpp\n            ImageFile.cpp\n            LibraryDirectory.cpp\n            MultiPathDirectory.cpp\n            MultiPathFile.cpp\n            MusicDatabaseDirectory.cpp\n            MusicDatabaseFile.cpp\n            MusicFileDirectory.cpp\n            MusicSearchDirectory.cpp\n            OverrideDirectory.cpp\n            OverrideFile.cpp\n            PipeFile.cpp\n            PipesManager.cpp\n            PlaylistDirectory.cpp\n            PlaylistFileDirectory.cpp\n            PluginDirectory.cpp\n            PluginFile.cpp\n            PVRDirectory.cpp\n            ResourceDirectory.cpp\n            ResourceFile.cpp\n            RSSDirectory.cpp\n            ShoutcastFile.cpp\n            SmartPlaylistDirectory.cpp\n            SourcesDirectory.cpp\n            SpecialProtocol.cpp\n            SpecialProtocolDirectory.cpp\n            SpecialProtocolFile.cpp\n            StackDirectory.cpp\n            VideoDatabaseDirectory.cpp\n            VideoDatabaseFile.cpp\n            VirtualDirectory.cpp\n            XbtDirectory.cpp\n            XbtFile.cpp\n            XbtManager.cpp\n            ZeroconfDirectory.cpp\n            ZipDirectory.cpp\n            ZipFile.cpp\n            ZipManager.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Application Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the application files as a library. This likely compiles the source files and makes them available for linking in other parts of the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/application/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(application)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Joystick Input Module in CMake\nDESCRIPTION: This snippet lists the header files (.h) associated with the joystick input module. These headers correspond to the source files and include additional type definitions and IDs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DeadzoneFilter.h\n            DriverPrimitive.h\n            JoystickEasterEgg.h\n            JoystickIDs.h\n            JoystickMonitor.h\n            JoystickTranslator.h\n            JoystickTypes.h\n            JoystickUtils.h\n            RumbleGenerator.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Kodi Settings Component in CMake\nDESCRIPTION: This snippet lists all the header files (.h) that are part of the settings component in Kodi. It includes header files corresponding to the source files, defining the interfaces for various settings classes and utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AdvancedSettings.h\n            DiscSettings.h\n            DisplaySettings.h\n            GameSettings.h\n            ISubSettings.h\n            LibExportSettings.h\n            MediaSettings.h\n            MediaSourceSettings.h\n            PlayerSettings.h\n            ServicesSettings.h\n            SettingAddon.h\n            SettingConditions.h\n            SettingControl.h\n            SettingCreator.h\n            SettingDateTime.h\n            SettingPath.h\n            Settings.h\n            SettingsBase.h\n            SettingsValueFlatJsonSerializer.h\n            SettingsValueXmlSerializer.h\n            SettingUtils.h\n            SkinSettings.h\n            SettingsComponent.h\n            SubtitlesSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding OpenGLES Support for GBM in CMake\nDESCRIPTION: Adds OpenGLES-specific source and header files to the build if OpenGLES support is enabled for the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES WinSystemGbmGLESContext.cpp)\n  list(APPEND HEADERS WinSystemGbmGLESContext.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of Dev Kit Header in CMake\nDESCRIPTION: This snippet checks if headers are defined and conditionally adds the input stream addon instance header to the Kodi dev kit. It uses a custom CMake function 'core_add_devkit_header'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/inputstream/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_addon-instance_inputstream)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Linker Options in CMake\nDESCRIPTION: Defines three CMake options that control which linker is used for the build. GNU Gold is enabled by default, while LLVM LLD and Mold are disabled by default. These options likely affect subsequent CMake configuration that sets the appropriate linker flags.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/scripts/linux/Linkers.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENABLE_GOLD    \"Enable gnu gold linker?\" ON)\noption(ENABLE_LLD     \"Enable llvm lld linker?\" OFF)\noption(ENABLE_MOLD    \"Enable mold linker?\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Addon Interfaces Library Target in CMake\nDESCRIPTION: Uses the core_add_library function to create the addons_interfaces library target with the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(addons_interfaces)\n```\n\n----------------------------------------\n\nTITLE: Adding DirectX Rendering Library Target\nDESCRIPTION: Creates a core library target for the DirectX rendering system using XBMC/Kodi's custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/dx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(rendering_dx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for macOS (x86_64)\nDESCRIPTION: Command to configure the build system for macOS x86_64 architecture. This sets up the build environment for compiling Kodi dependencies on macOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure --host=x86_64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Git Add Operations\nDESCRIPTION: Different ways to stage files for commit using git add command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit add path/to/file/filename // add single file\ngit add .                     // add all files on current directory\ngit add *                     // add all files in current directory and subdirectories\n```\n\n----------------------------------------\n\nTITLE: Building and Linking UPnP Library in CMake\nDESCRIPTION: Creates the UPnP library target and sets up conditional linking based on build configuration. It uses the core_add_library macro to create the network_upnp library and conditionally links against the static upnp library when static libraries are enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/upnp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(network_upnp)\nif(ENABLE_STATIC_LIBS)\n  target_link_libraries(network_upnp PRIVATE upnp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Headers in CMake for Kodi Development Kit\nDESCRIPTION: Defines a set of header files for the Kodi GUI system and adds them to the development kit using core_add_devkit_header if headers are present. The headers include general GUI functionality, list item handling, window management, and render helper components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/gui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  General.h\n  ListItem.h\n  Window.h\n  renderHelper.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_gui)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extracting Android SDK Command Line Tools\nDESCRIPTION: Extracts the downloaded Android SDK command line tools to the prepared directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunzip $HOME/Downloads/commandlinetools-linux-6200805_latest.zip -d $HOME/android-tools/android-sdk-linux/\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Provider Source Files in CMake\nDESCRIPTION: Sets the SOURCES variable with the list of source files for PVR providers. These files contain the implementation of PVR provider functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/providers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PVRProvider.cpp\n            PVRProviders.cpp\n            PVRProvidersPath.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Display System Source Files\nDESCRIPTION: Defines the source files needed for Windows display system implementation including video synchronization, power management, event handling, and DirectX integration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES VideoSyncD3D.cpp\n            Win32DPMSSupport.cpp\n            WinEventsWin32.cpp\n            WinSystemWin32.cpp\n            WinSystemWin32DX.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Packages for Kodi Development\nDESCRIPTION: Command to install optional packages that provide additional functionality for Kodi development, such as documentation generation with doxygen.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install doxygen mariadb-devel\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Core in CMake\nDESCRIPTION: This snippet sets the HEADERS variable with a list of core header files for the XBMC project. It includes headers for various components such as data caching, EDL editing, FFmpeg, game settings, player interfaces, and video settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DataCacheCore.h\n            EdlEdit.h\n            FFmpeg.h\n            GameSettings.h\n            IPlayer.h\n            IPlayerCallback.h\n            MenuType.h\n            VideoSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Agent Header Files in CMake\nDESCRIPTION: Defines the C++ header files for the games input agent system, containing declarations for controller, joystick, keyboard, and mouse agent classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/agents/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AgentController.h\n            AgentInput.h\n            AgentJoystick.h\n            AgentKeyboard.h\n            AgentMouse.h\n)\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring Dependencies for TexturePacker in CMake\nDESCRIPTION: Locates required dependencies (Lzo2, PNG, GIF, JPEG) and performs version checks for GIF library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/native/TexturePacker/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Lzo2 REQUIRED)\nfind_package(PNG REQUIRED)\nfind_package(GIF REQUIRED)\nfind_package(JPEG REQUIRED)\n\nif(GIF_VERSION LESS 4)\n  message(FATAL_ERROR \"giflib < 4 not supported\")\nelse()\n  file(STRINGS ${GIF_INCLUDE_DIR}/gif_lib.h GIFSTRINGS)\n  string(REGEX MATCH \"GIFLIB_MAJOR ([0-9])\" GIFLIB_MAJOR ${GIFSTRINGS})\n  if(GIFLIB_MAJOR)\n    string(REPLACE \" \" \";\" GIFLIB_MAJOR ${GIFLIB_MAJOR})\n    list(GET GIFLIB_MAJOR 1 GIFLIB_MAJOR)\n  else()\n    set(GIFLIB_MAJOR ${GIF_VERSION})\n  endif()\n  if(NOT GIFLIB_MAJOR OR GIFLIB_MAJOR LESS 5)\n    message(WARNING \"giflib${GIFLIB_MAJOR} support is experimental. Consider updating to giflib5\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding EGL-related Files in CMake for Linux Windowing\nDESCRIPTION: Checks if the EGL target is available. If so, adds the WinSystemEGL source and header files to the respective lists.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::EGL)\n  list(APPEND SOURCES WinSystemEGL.cpp)\n  list(APPEND HEADERS WinSystemEGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Source and Header Lists in CMake for Linux Windowing\nDESCRIPTION: Initializes empty lists for sources and headers. These lists will be populated based on available targets and used to build the windowing_linux library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES \"\")\nset(HEADERS \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Android DRM Crypto Session Library in CMake\nDESCRIPTION: Defines source files, headers, and adds the android_drm library to the build system using core_add_library. The configuration includes MediaDrmCryptoSession.cpp as the source file and MediaDrmCryptoSession.h as the header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/media/drm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES MediaDrmCryptoSession.cpp)\n\nset(HEADERS MediaDrmCryptoSession.h)\n\ncore_add_library(android_drm)\n```\n\n----------------------------------------\n\nTITLE: Running CMake with Custom Options for Kodi Addon Bootstrapping\nDESCRIPTION: Extended cmake command that includes additional configuration options, such as specifying a custom installation directory for the downloaded addon definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmake <path> [-G <generator>] \\\n      -DCMAKE_INSTALL_PREFIX=\"<path-to-install-directory>\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of POSIX Thread Implementation Files in CMake\nDESCRIPTION: Adds POSIX thread implementation files to the source and header lists if the system is not Linux or Android. This allows for platform-specific thread handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/threads/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CORE_SYSTEM_NAME STREQUAL linux AND NOT CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND SOURCES ThreadImplPosix.cpp)\n  list(APPEND HEADERS ThreadImplPosix.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Core X11 Source and Header Files in CMake\nDESCRIPTION: Defines the base set of source and header files for X11 windowing system implementation, including GL context, screen saver, window events, and DPMS support.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/X11/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GLContextEGL.cpp\n            GLContext.cpp\n            OptionalsReg.cpp\n            OSScreenSaverX11.cpp\n            WinEventsX11.cpp\n            WinSystemX11.cpp\n            XRandR.cpp\n            X11DPMSSupport.cpp)\n\nset(HEADERS GLContext.h\n            GLContextEGL.h\n            OptionalsReg.h\n            OSScreenSaverX11.h\n            WinEventsX11.h\n            WinSystemX11.h\n            XRandR.h\n            X11DPMSSupport.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for Android (x86)\nDESCRIPTION: Command to configure the build system for Android x86 architecture. This targets 32-bit x86 Android devices, though it's noted that x86 support may not be fully maintained.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-tarballs=$HOME/android-tools/xbmc-tarballs --host=i686-linux-android --with-sdk-path=$HOME/android-tools/android-sdk-linux --with-ndk-path=$HOME/android-tools/android-ndk-r20 --prefix=$HOME/android-tools/xbmc-depends\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Web Server Support in CMake\nDESCRIPTION: Adds embedded web server functionality when the MicroHttpd target is available in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::MicroHttpd)\n  list(APPEND SOURCES WebServer.cpp)\n  list(APPEND HEADERS WebServer.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DirectX Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for the DirectX rendering system implementation, including device resources, DirectX helpers, rendering system, and screenshot handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/dx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DeviceResources.cpp\n            DirectXHelper.cpp\n            RenderSystemDX.cpp\n            ScreenshotSurfaceWindows.cpp)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi's Master Branch with Git\nDESCRIPTION: Command to clone Kodi's current master branch repository to a local directory named 'kodi'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Core Video Renderer Sources and Headers Configuration\nDESCRIPTION: Defines the base set of source and header files for the video renderer implementation, including core components like BaseRenderer, ColorManager, and OverlayRenderer.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES BaseRenderer.cpp\n            ColorManager.cpp\n            OverlayRenderer.cpp\n            OverlayRendererUtil.cpp\n            RenderCapture.cpp\n            RenderFactory.cpp\n            RenderFlags.cpp\n            RenderManager.cpp\n            DebugRenderer.cpp)\n\nset(HEADERS BaseRenderer.h\n            ColorManager.h\n            DebugInfo.h\n            OverlayRenderer.h\n            OverlayRendererUtil.h\n            RenderCapture.h\n            RenderFactory.h\n            RenderFlags.h\n            RenderInfo.h\n            RenderManager.h\n            DebugRenderer.h)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Windows-Specific Power Management in CMake\nDESCRIPTION: Adds a Windows-specific header file (WinIdleTimer.h) to the HEADERS list if the target system is Windows. This ensures platform-specific power management features are included when building for Windows.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/powermanagement/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CORE_SYSTEM_NAME MATCHES windows)\n  list(APPEND HEADERS WinIdleTimer.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Interface Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files required for the Python interface implementation, including invokers, callback handlers, and core functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AddonPythonInvoker.cpp\n            CallbackHandler.cpp\n            ContextItemAddonInvoker.cpp\n            LanguageHook.cpp\n            PythonInvoker.cpp\n            XBPython.cpp\n            swig.cpp\n            PyContext.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Retroplayer GUI Playback\nDESCRIPTION: Defines the source files needed for building the GUI playback control component, specifically GUIPlaybackControl.cpp\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guiplayback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIPlaybackControl.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing GBM Build Dependencies for Kodi\nDESCRIPTION: Command to install additional packages required for building Kodi with GBM (Generic Buffer Management) support on Fedora.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install libinput-devel libxkbcommon-devel mesa-libGLES-devel mesa-libgbm-devel\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Utils Sources and Headers\nDESCRIPTION: Defines the main source and header files for the XBMC utils library using CMake set commands. Includes core functionality like encoding, file operations, and data processing utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ActorProtocol.cpp\n            AlarmClock.cpp\n            AliasShortcutUtils.cpp\n            [...])\n\nset(HEADERS ActorProtocol.h\n            AlarmClock.h\n            AliasShortcutUtils.h\n            [...])\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test Sources for XBMC Pictures Metadata\nDESCRIPTION: Sets up test source files and creates a test library for pictures metadata extraction. Defines the source file TestMetadataExtraction.cpp and creates a core test library named pictures_metadata_test.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/metadata/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestMetadataExtraction.cpp)\n\ncore_add_test_library(pictures_metadata_test)\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Windowing System Header Files\nDESCRIPTION: Defines the header files corresponding to the iOS windowing system implementation components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/ios/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS WinEventsIOS.h\n            WinSystemIOS.h\n            VideoSyncIos.h)\n```\n\n----------------------------------------\n\nTITLE: Discouraged Multiple Statement Formatting in C++\nDESCRIPTION: Shows the discouraged approach for handling multiple statements in C++ for Kodi. Multiple statements should not be placed on a single line.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<std::string> test; test.push_back(\"foobar\");\n```\n\n----------------------------------------\n\nTITLE: Conditional File Inclusion for Platform-Specific DLL Loading in CMake\nDESCRIPTION: Adds platform-specific source and header files to the SOURCES and HEADERS lists based on the target system. For non-Windows systems, it includes SoLoader files, while for Windows systems, it includes Win32DllLoader files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES SoLoader.cpp)\n  list(APPEND HEADERS SoLoader.h)\nelse()\n  list(APPEND SOURCES Win32DllLoader.cpp)\n  list(APPEND HEADERS Win32DllLoader.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining PVR Settings Source Files in CMake for XBMC\nDESCRIPTION: This snippet specifies the source files for PVR settings. It includes files for custom timer settings, integer and string setting definitions and values, general PVR settings, and timer setting definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/settings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PVRCustomTimerSettings.cpp\n            PVRIntSettingDefinition.cpp\n            PVRIntSettingValues.cpp\n            PVRSettings.cpp\n            PVRStringSettingDefinition.cpp\n            PVRStringSettingValues.cpp\n            PVRTimerSettingDefinition.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Music Module in CMake\nDESCRIPTION: Sets the source files variable for the music module, including files for album/artist data management, context menus, database functionality, image loading, and music classification.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Album.cpp\n            Artist.cpp\n            ContextMenus.cpp\n            GUIViewStateMusic.cpp\n            MusicDatabase.cpp\n            MusicDbUrl.cpp\n            MusicEmbeddedImageFileLoader.cpp\n            MusicFileItemClassify.cpp\n            MusicInfoLoader.cpp\n            MusicLibraryQueue.cpp\n            MusicThumbLoader.cpp\n            MusicUtils.cpp\n            Song.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Kodi Binary for webOS\nDESCRIPTION: This command builds the main Kodi binary. It should be run in the $HOME/kodi/build directory and uses parallel processing for faster compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: OpenGL-Specific Renderer Configuration\nDESCRIPTION: Adds OpenGL-specific renderer implementation files when OpenGL support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES LinuxRendererGL.cpp\n                      OverlayRendererGL.cpp\n                      RenderCaptureGL.cpp)\n  list(APPEND HEADERS LinuxRendererGL.h\n                      OverlayRendererGL.h\n                      RenderCaptureGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining DRM and GBM Header Files in CMake\nDESCRIPTION: Sets up a list of header files corresponding to the DRM and GBM source files, including declarations for atomic, connector, CRTC, encoder, legacy, object, plane, utils, and off-screen mode setting components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/drm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DRMAtomic.h\n            DRMConnector.h\n            DRMCrtc.h\n            DRMEncoder.h\n            DRMLegacy.h\n            DRMObject.h\n            DRMPlane.h\n            DRMUtils.h\n            OffScreenModeSetting.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Disc Drive Handler in CMake for XBMC/Kodi\nDESCRIPTION: This CMake snippet conditionally sets up the source files, headers, and library for Windows disc drive handling. It only includes these components if optical drive support is enabled (ENABLE_OPTICAL is true).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/storage/discs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  set(SOURCES Win32DiscDriveHandler.cpp)\n\n  set(HEADERS Win32DiscDriveHandler.h)\n\n  core_add_library(platform_win32_storage_discs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running MediaRendererTest Sample Application\nDESCRIPTION: Command-line syntax for running the MediaRendererTest sample application, which demonstrates a UPnP MediaRenderer shell.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nMediaRendererTest [-f <friendly_name>]\n    -f : optional upnp server friendly name\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type for Kodi Add-ons Dependencies\nDESCRIPTION: Defines the default build type as Release if not explicitly specified. This ensures optimized builds when no specific configuration is provided.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Keyboard Input Module in CMake\nDESCRIPTION: This snippet lists the source files (.cpp) that are part of the XBMC keyboard input module. These files contain implementations for key handling, keyboard layouts, and special features like Easter eggs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Key.cpp\n            KeyboardEasterEgg.cpp\n            KeyboardLayout.cpp\n            KeyboardLayoutManager.cpp\n            KeyboardStat.cpp\n            KeyboardTranslator.cpp\n            XBMC_keytable.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for WebOS Support in Wayland for CMake\nDESCRIPTION: Adds WebOS-specific source and header files, and marks WebOS protocol files as generated if WebOS support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET_WEBOS)\n  set_source_files_properties(${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.cpp\n                              ${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.hpp\n                              PROPERTIES GENERATED TRUE)\n\n  list(APPEND SOURCES OSScreenSaverWebOS.cpp\n                      SeatWebOS.cpp\n                      ShellSurfaceWebOSShell.cpp\n                      WinSystemWaylandWebOS.cpp\n                      ${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.cpp)\n  list(APPEND HEADERS OSScreenSaverWebOS.h\n                      SeatWebOS.h\n                      ShellSurfaceWebOSShell.h\n                      WinSystemWaylandWebOS.h\n                      ${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-webos-protocols.hpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Android Network Library in CMake\nDESCRIPTION: Calls the core_add_library function to build the Android-specific network implementation as a library named platform_android_network.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/network/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_android_network)\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Library Source Files\nDESCRIPTION: Defines the core source files and headers for the GUI library components including controls, textures, and window management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DDSImage.cpp\n            DirtyRegionSolvers.cpp\n            DirtyRegionTracker.cpp\n            FFmpegImage.cpp\n            GUIAction.cpp\n            [...other sources...])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Optical Drive Support in CMake\nDESCRIPTION: Adds CDDB (CD Database) functionality source and header files when optical drive support is enabled in the build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  list(APPEND SOURCES cddb.cpp)\n  list(APPEND HEADERS cddb.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Component Sources in CMake\nDESCRIPTION: Defines the source files for the games component of XBMC/Kodi, including services, settings, and utility implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GameServices.cpp\n            GameSettings.cpp\n            GameUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Renderer Configuration\nDESCRIPTION: Adds Windows-specific renderer files including DirectX implementation when building for Windows or Windows Store platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES WinRenderer.cpp\n                      OverlayRendererDX.cpp\n                      RenderCaptureDX.cpp)\n  list(APPEND HEADERS WinRenderer.h\n                      OverlayRendererDX.h\n                      RenderCapture.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Windowing Source Files in CMake\nDESCRIPTION: Defines the list of source files for the OSX windowing system implementation. Includes files for DPMS support, screen saver, video synchronization, and window event handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/osx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CocoaDPMSSupport.cpp\n            OSScreenSaverOSX.cpp\n            VideoSyncOsx.mm\n            WinEventsOSX.mm\n            WinEventsOSXImpl.mm\n            WinSystemOSX.mm)\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer Stream Source Files in CMake\nDESCRIPTION: Defines a list of source files for RetroPlayer stream components. These files contain the implementation of audio, video, rendering, and stream management functionalities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/streams/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RetroPlayerAudio.cpp\n            RetroPlayerRendering.cpp\n            RetroPlayerStreamTypes.cpp\n            RetroPlayerVideo.cpp\n            RPStreamManager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for POSIX Utilities in CMake\nDESCRIPTION: This snippet sets the HEADERS variable with a list of header files for POSIX utilities. It includes headers for file handling, memory mapping, POSIX interface for logging, and shared memory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS FileHandle.h\n            Mmap.h\n            PosixInterfaceForCLog.h\n            SharedMemory.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Network Component for XBMC with CMake\nDESCRIPTION: This CMake script defines the source and header files for the Linux networking implementation in XBMC and adds them as a core library. The implementation consists of NetworkLinux.cpp and NetworkLinux.h files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES NetworkLinux.cpp)\nset(HEADERS NetworkLinux.h)\n\ncore_add_library(platform_linux_network)\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for Kodi Add-on Instances in CMake\nDESCRIPTION: This CMake snippet defines a list of header files for various Kodi add-on instances. It includes headers for audio decoders/encoders, games, image decoders, input streams, peripherals, PVR, screensavers, VFS, video codecs, and visualizations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  audiodecoder.h\n  audioencoder.h\n  game.h\n  imagedecoder.h\n  inputstream.h\n  peripheral.h\n  pvr.h\n  screensaver.h\n  vfs.h\n  video_codec.h\n  visualization.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding DMA Render Buffer Components for GBM/Wayland\nDESCRIPTION: Conditionally appends DMA-specific render buffer implementations when building for GBM or Wayland platforms with EGL support.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif((\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC) AND TARGET ${APP_NAME_LC}::EGL)\n  list(APPEND SOURCES RenderBufferDMA.cpp\n                      RenderBufferPoolDMA.cpp)\n  list(APPEND HEADERS RenderBufferDMA.h\n                      RenderBufferPoolDMA.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Input Headers and Library in CMake\nDESCRIPTION: Sets up header files for hardware input and conditionally adds the input_hardware library if static libraries are not enabled. The configuration is part of XBMC's build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/hardware/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IHardwareInput.h\n)\n\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_hardware)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi C-API Headers in CMake\nDESCRIPTION: Defines a list of header files for the Kodi C-API and conditionally adds them to the development kit. The headers include core functionality like addon base, audio engine, filesystem, general utilities, and network operations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  addon_base.h\n  audio_engine.h\n  filesystem.h\n  general.h\n  network.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VDPAU Renderer Sources\nDESCRIPTION: Adds VDPAU renderer source and header files when VDPAU support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::VDPAU)\n  list(APPEND SOURCES RendererVDPAU.cpp\n                      VdpauGL.cpp)\n  list(APPEND HEADERS RendererVDPAU.h\n                      VdpauGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Windows 10 Store App\nDESCRIPTION: Specifies the header files required for Windows 10 Store App windowing system including event handlers, system management, DirectX support and key mapping\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/win10/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS WinEventsWin10.h\n            WinSystemWin10.h\n            WinSystemWin10DX.h\n            ../windows/VideoSyncD3D.h\n            ../windows/WinKeyMap.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch Input Sources and Headers in CMake\nDESCRIPTION: Configures the build system with source and header files for the touch input handling library. Sets up source files containing implementation code and header files defining interfaces and types for touch input handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/touch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ITouchInputHandling.cpp)\n\nset(HEADERS ITouchActionHandler.h\n            ITouchInputHandler.h\n            ITouchInputHandling.h\n            TouchTypes.h)\n\ncore_add_library(input_touch)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Application in CMake\nDESCRIPTION: Sets up a list of source files for the XBMC application. These files contain the core functionality of the application, including environment setup, protocols, player controls, and various handling mechanisms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/application/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AppEnvironment.cpp\n            AppInboundProtocol.cpp\n            Application.cpp\n            ApplicationActionListeners.cpp\n            ApplicationPlayer.cpp\n            ApplicationPlayerCallback.cpp\n            ApplicationPowerHandling.cpp\n            ApplicationSettingsHandling.cpp\n            ApplicationSkinHandling.cpp\n            ApplicationStackHelper.cpp\n            ApplicationVolumeHandling.cpp\n            AppParamParser.cpp\n            AppParams.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for CD Ripping and Encoding in CMake\nDESCRIPTION: Sets up a list of source files for CD ripping and audio encoding functionality. Includes core components and different encoder implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cdrip/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES CDDARipJob.cpp\n            Encoder.cpp\n            EncoderAddon.cpp\n            EncoderFFmpeg.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Source Files in CMake for XBMC\nDESCRIPTION: Sets up a list of source files for WebSocket implementation in XBMC. Includes the main WebSocket class, WebSocketManager, and specific versions (V13 and V8).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/websocket/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES WebSocket.cpp\n            WebSocketManager.cpp\n            WebSocketV13.cpp\n            WebSocketV8.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building XBMCHelper Executable with CMake for macOS\nDESCRIPTION: This CMake snippet configures the build process for the XBMCHelper executable. It sets up the source files, headers, and link libraries, and specifies the output directory and other properties. The build is conditional on the ENABLE_XBMCHELPER flag.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/OSXRemote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_XBMCHELPER)\n  list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n\n  set(SOURCES xbmcclientwrapper.mm\n              xbmchelper_main.mm\n              XBMCHelper.m\n              HIDRemote/HIDRemote.m)\n\n  set(HEADERS XBMCDebugHelpers.h)\n\n  add_executable(XBMCHelper ${SOURCES} ${HEADERS})\n  set_target_properties(XBMCHelper PROPERTIES\n                                   RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/tools/darwin/runtime\n                                   RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/tools/darwin/runtime\n                                   RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/tools/darwin/runtime\n                                   FOLDER Tools)\n  target_link_libraries(XBMCHelper\n                        PRIVATE ${SYSTEM_LDFLAGS}\n                                \"-framework IOKit\"\n                                \"-framework Carbon\"\n                                \"-framework Cocoa\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Windows 10 Platform Library\nDESCRIPTION: Creates the Windows 10 platform library target using the defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_win10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Event System Source Files in CMake for XBMC/Kodi\nDESCRIPTION: This CMake snippet sets up the source and header files for the event system in the XBMC/Kodi project. It defines two lists: SOURCES for .cpp files and HEADERS for .h files, which include various event-related classes. Finally, it adds these files as a library named 'events' to the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AddonEvent.cpp\n            AddonManagementEvent.cpp\n            BaseEvent.cpp\n            EventLog.cpp\n            EventLogManager.cpp\n            MediaLibraryEvent.cpp)\n\nset(HEADERS AddonEvent.h\n            AddonManagementEvent.h\n            BaseEvent.h\n            EventLog.h\n            EventLogManager.h\n            IEvent.h\n            MediaLibraryEvent.h\n            NotificationEvent.h\n            UniqueEvent.h)\n\ncore_add_library(events)\n```\n\n----------------------------------------\n\nTITLE: Conditional ISO9660 Support Configuration\nDESCRIPTION: Adds ISO9660-related source and header files when ISO9660 support is enabled in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Iso9660pp)\n  list(APPEND SOURCES ISO9660Directory.cpp\n                      ISO9660File.cpp)\n  list(APPEND HEADERS ISO9660Directory.h\n                      ISO9660File.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Preparing Build Environment for Binary Addons\nDESCRIPTION: Prepares the build environment by copying necessary files and setting up paths for building binary addons. Includes adding the PrepareEnv.cmake script to support addon building.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n### prepare the build environment for the binary addons\n# copy the PrepareEnv.cmake script to the depends path so that we can include it\nfile(COPY ${CORE_SOURCE_DIR}/cmake/scripts/common/PrepareEnv.cmake DESTINATION ${APP_LIB_DIR})\n\n# add the location of PrepareEnv.cmake to CMAKE_MODULE_PATH so that it is found\nlist(APPEND CMAKE_MODULE_PATH ${APP_LIB_DIR})\n\n# include PrepareEnv.cmake which contains the logic to install the addon header bindings etc\ninclude(PrepareEnv)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Headers to Development Kit\nDESCRIPTION: Conditional block that adds the PVR headers to the Kodi development kit if headers are defined. Uses the core_add_devkit_header function to process the kodi_c-api_addon-instance_pvr component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/pvr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_addon-instance_pvr)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library in CMake for XBMC\nDESCRIPTION: This snippet uses a custom CMake command 'core_add_library' to add a library named 'cores' to the XBMC project. This likely compiles the previously defined source files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(cores)\n```\n\n----------------------------------------\n\nTITLE: OpenGL/GLES Conditional Source Addition\nDESCRIPTION: Conditionally adds OpenGL and OpenGL ES specific source files and headers based on target availability.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES Shader.cpp)\n  list(APPEND HEADERS Shader.h)\n\n  if(TARGET ${APP_NAME_LC}::OpenGl)\n    list(APPEND SOURCES GUIFontTTFGL.cpp\n                        GUITextureGL.cpp\n                        TextureGL.cpp)\n    list(APPEND HEADERS GUIFontTTFGL.h\n                        GUITextureGL.h\n                        TextureGL.h)\n  endif()\n  [...]\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Windowing System Source Files\nDESCRIPTION: Defines the source files needed for the iOS windowing system implementation, including event handling, window system management, and video synchronization.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/ios/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES WinEventsIOS.mm\n            WinSystemIOS.mm\n            VideoSyncIos.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windowing System Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for the windowing system component, including graphics context, screen saver, resolution, and window system implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GraphicContext.cpp\n            OSScreenSaver.cpp\n            Resolution.cpp\n            WindowSystemFactory.cpp\n            WinSystem.cpp)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Kodi from webOS Using make\nDESCRIPTION: This command uninstalls Kodi from a webOS device using the make command. It should be run from the webOS packaging directory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/webOS/packaging\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Peripheral Sources in CMake\nDESCRIPTION: Conditional CMake configuration that adds appropriate source and header files based on whether UDEV or LibUSB is targeted. Creates a platform_linux_peripherals library if any sources are defined.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::UDEV)\n  list(APPEND SOURCES PeripheralBusUSBLibUdev.cpp)\n  list(APPEND HEADERS PeripheralBusUSBLibUdev.h)\nelseif(TARGET ${APP_NAME_LC}::LibUSB)\n  list(APPEND SOURCES PeripheralBusUSBLibUSB.cpp)\n  list(APPEND HEADERS PeripheralBusUSBLibUSB.h)\nendif()\n\nif(SOURCES)\n  core_add_library(platform_linux_peripherals)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Addon XML Generation in CMake\nDESCRIPTION: Adds a custom pre-build command to the generate_json_header target that runs the GenerateAddonXml.cmake script. This script creates the addon.xml file required for XBMC/Kodi extensions, using variables such as the source directory, binary directory, and system name.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(TARGET generate_json_header\n                   PRE_BUILD\n                   COMMAND ${CMAKE_COMMAND}\n                           -DCMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}\n                           -DCORE_BINARY_DIR=${CORE_BINARY_DIR}\n                           -DCORE_SYSTEM_NAME=${CORE_SYSTEM_NAME}\n                           -P ${CMAKE_CURRENT_SOURCE_DIR}/GenerateAddonXml.cmake\n                   WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n                   COMMENT \"Generating xbmc.json/addon.xml\")\n```\n\n----------------------------------------\n\nTITLE: Creating Video Renderer Library in CMake\nDESCRIPTION: Adds the configured source and header files to create the rp-videorenderers library using the core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(rp-videorenderers)\n```\n\n----------------------------------------\n\nTITLE: Adding Windowing Library to XBMC Core\nDESCRIPTION: Adds the windowing component as a core library to the XBMC/Kodi project build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windowing)\n```\n\n----------------------------------------\n\nTITLE: Setting XBMC Builtin Source Files\nDESCRIPTION: Defines the list of source files (.cpp) for various XBMC builtin functionality modules including addon, application, GUI, library, and system components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/builtins/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AddonBuiltins.cpp\n            ApplicationBuiltins.cpp\n            Builtins.cpp\n            CECBuiltins.cpp\n            GUIBuiltins.cpp\n            GUIControlBuiltins.cpp\n            GUIContainerBuiltins.cpp\n            LibraryBuiltins.cpp\n            OpticalBuiltins.cpp\n            PictureBuiltins.cpp\n            PlayerBuiltins.cpp\n            ProfileBuiltins.cpp\n            PVRBuiltins.cpp\n            SkinBuiltins.cpp\n            SystemBuiltins.cpp\n            WeatherBuiltins.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Android Activity Library and Setting Include Paths in XBMC\nDESCRIPTION: Adds the platform_android_activity library to the build and configures the include directories for the Android NDK native app glue, which provides basic Android app lifecycle management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/activity/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_android_activity)\ntarget_include_directories(${CORE_LIBRARY} SYSTEM\n                           PRIVATE ${NDKROOT}/sources/android/native_app_glue)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for FreeBSD Support in XBMC\nDESCRIPTION: Sets up the header files required for FreeBSD platform support. Note that it incorrectly includes AppParamParserLinux.cpp as a header file, which is likely a mistake in the original configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/freebsd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ../linux/AppParamParserLinux.cpp\n            CPUInfoFreebsd.h\n            GPUInfoFreebsd.h\n            OptionalsReg.h\n            ../linux/OptionalsReg.h\n            ../linux/TimeUtils.h\n            PlatformFreebsd.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Peripheral Devices in CMake\nDESCRIPTION: Defines the list of source (.cpp) files for different peripheral device implementations including Bluetooth, disk, HID, joystick, keyboard, mouse, NIC, Nyxboard, and tuner components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/devices/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Peripheral.cpp\n            PeripheralBluetooth.cpp\n            PeripheralDisk.cpp\n            PeripheralHID.cpp\n            PeripheralImon.cpp\n            PeripheralJoystick.cpp\n            PeripheralKeyboard.cpp\n            PeripheralMouse.cpp\n            PeripheralNIC.cpp\n            PeripheralNyxboard.cpp\n            PeripheralTuner.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC/Kodi Stable Release Versions in JSON\nDESCRIPTION: A JSON configuration file that defines all stable releases of XBMC/Kodi with their version information, revision numbers, and addon support status. Each release entry contains fields for major and minor version numbers, tag type, revision with date, and additional metadata.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"releases\": {\n        \"stable\": [\n            {\n                \"major\": \"20\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20230115-389e701cb9\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"19\",\n                \"minor\": \"5\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20221224-f8fdeb6b1b\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"19\",\n                \"minor\": \"4\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20220302-e12e66e019\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"19\",\n                \"minor\": \"3\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20211024-49a04cd6a7\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"19\",\n                \"minor\": \"2\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20211006-52c19a0728\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"19\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20210508-85e05228b4\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"19\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20210218-f44fdfbf67\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"9\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20201023-0655c2c718\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"8\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20200727-45686bddb1\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"7\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20200520-f14f7a8\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"6\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20200229-8e967df\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"5\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20191116-37f51f6\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"4\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20190831-3ade758\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"3\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20190619-89472b7\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"2\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20190422-f264356\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20190217-8cfdc89\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"18\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20190128-d81c34c\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"17\",\n                \"minor\": \"6\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20171114-a9a7a20\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"17\",\n                \"minor\": \"4\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20170822-7fc6da0\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"17\",\n                \"minor\": \"3\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20170524-147cec4\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"17\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20170320-fc1619b\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"17\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20170201-a10c504\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"16\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20160424-c327c53\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"16\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20160220-a5f3a99\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"15\",\n                \"minor\": \"2\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20151019-02e7013\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"15\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20150816-f4dda26\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"15\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20150721-2f34a0c\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"14\",\n                \"minor\": \"2\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20150326-7cc53a9\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"14\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20150129-38e4046\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"14\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20141223-ad747d9\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"13\",\n                \"minor\": \"2\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20140817-0f3db05\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"13\",\n                \"minor\": \"1\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20140604-84725b0\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"13\",\n                \"minor\": \"0\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20140505-f42f5b5\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"12\",\n                \"minor\": \"3\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20131212-9ed3e58\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"12\",\n                \"minor\": \"2\",\n                \"tag\": \"stable\",\n                \"tagversion\":\"\",\n                \"revision\": \"20130502-32b1a5e\",\n                \"extrainfo\": \"final\",\n                \"addon_support\": \"yes\"\n            },\n            {\n                \"major\": \"12\",\n                \"minor\": \"1\",\n```\n\n----------------------------------------\n\nTITLE: Initializing Kodi Add-ons Dependencies Project in CMake\nDESCRIPTION: Sets up the CMake project for Kodi add-ons dependencies with minimum required CMake version and project name. This is the foundation configuration needed before specific dependencies can be processed.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\nproject(kodi-addons-depends)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Android Platform Support in CMake\nDESCRIPTION: Defines the source files needed for the Android platform support library, including CPU and GPU information classes, memory utilities, platform implementation, and NDK CPU features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES CPUInfoAndroid.cpp\n            GPUInfoAndroid.cpp\n            MemUtils.cpp\n            PlatformAndroid.cpp\n            ${NDKROOT}/sources/android/cpufeatures/cpu-features.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Application in CMake\nDESCRIPTION: Sets up a list of header files corresponding to the source files for the XBMC application. These headers declare the interfaces for the core functionality of the application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/application/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AppEnvironment.h\n            AppInboundProtocol.h\n            Application.h\n            ApplicationActionListeners.h\n            ApplicationPlayer.h\n            ApplicationPlayerCallback.h\n            ApplicationPowerHandling.h\n            ApplicationSettingsHandling.h\n            ApplicationSkinHandling.h\n            ApplicationStackHelper.h\n            ApplicationVolumeHandling.h\n            AppParamParser.h\n            AppParams.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Common Platform Sources and Headers in CMake\nDESCRIPTION: Sets up source and header file lists for the iOS common platform components. The source files include implementations for hardware information, keyboard handling, notification management, and other iOS-specific utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios-common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AnnounceReceiver.mm\n            CPUInfoDarwinEmbed.cpp\n            DarwinEmbedKeyboard.mm\n            DarwinEmbedKeyboardView.mm\n            DarwinEmbedNowPlayingInfoManager.mm\n            DarwinEmbedUtils.mm\n            GPUInfoDarwinEmbed.cpp\n            NSData+GZIP.m\n            PlatformDarwinEmbedded.cpp)\n\nset(HEADERS AnnounceReceiver.h\n            CPUInfoDarwinEmbed.h\n            DarwinEmbedKeyboard.h\n            DarwinEmbedKeyboardView.h\n            DarwinEmbedNowPlayingInfoManager.h\n            DarwinEmbedUtils.h\n            GPUInfoDarwinEmbed.h\n            NSData+GZIP.h\n            PlatformDarwinEmbedded.h)\n\ncore_add_library(platform_ios-common)\n```\n\n----------------------------------------\n\nTITLE: X11 Library Addition\nDESCRIPTION: Adds the X11 windowing system as a core library component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/X11/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windowing_X11)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Windowing Components for macOS in XBMC\nDESCRIPTION: This CMake snippet checks if the OpenGL target is enabled for the application. If so, it adds macOS-specific OpenGL source and header files to the project, and creates a windowing library for OpenGL on macOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/osx/OpenGL/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES OSXGLView.mm\n                      WindowControllerMacOS.mm\n                      WinSystemOSXGL.mm)\n  list(APPEND HEADERS OSXGLView.h\n                      WindowControllerMacOS.h\n                      WinSystemOSXGL.h)\n\n  core_add_library(windowing_osx_opengl)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Windows DirectX-Specific Picture Module Files in CMake\nDESCRIPTION: Conditionally appends DirectX-specific slideshow picture implementation files when building for Windows or Windows Store platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES SlideShowPictureDX.cpp)\n  list(APPEND HEADERS SlideShowPictureDX.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GBM Process Info Library Build in CMake\nDESCRIPTION: Sets up source files, headers and creates a library target for the GBM process information component. Defines the main cpp file and header file, then creates a library named 'rp-process-gbm' using the core_add_library macro.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/gbm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RPProcessInfoGbm.cpp)\nset(HEADERS RPProcessInfoGbm.h)\n\ncore_add_library(rp-process-gbm)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC GUI Dialogs in CMake\nDESCRIPTION: This snippet defines a list of source files for various GUI dialog components in the XBMC project. It includes files for context menus, progress bars, file browsers, keyboards, and other UI elements.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ContextMenu.cpp\n            ExtendedProgressBar.cpp\n            FileBrowser.cpp\n            Keyboard.cpp\n            Numeric.cpp\n            OK.cpp\n            Progress.cpp\n            Select.cpp\n            TextViewer.cpp\n            YesNo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Audio Engine Sources and Headers\nDESCRIPTION: Defines the base source and header files for the audio engine, including core functionality, encoders, filters, and utility classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/AudioEngine/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AEResampleFactory.cpp\n            AESinkFactory.cpp\n            Encoders/AEEncoderFFmpeg.cpp\n            Engines/ActiveAE/ActiveAE.cpp\n            Engines/ActiveAE/ActiveAEBuffer.cpp\n            Engines/ActiveAE/ActiveAEFilter.cpp\n            Engines/ActiveAE/ActiveAESink.cpp\n            Engines/ActiveAE/ActiveAEStream.cpp\n            Engines/ActiveAE/ActiveAESound.cpp\n            Engines/ActiveAE/ActiveAESettings.cpp\n            Utils/AEBitstreamPacker.cpp\n            Utils/AEChannelInfo.cpp\n            Utils/AEDeviceInfo.cpp\n            Utils/AELimiter.cpp\n            Utils/AEPackIEC61937.cpp\n            Utils/AEStreamInfo.cpp\n            Utils/AEUtil.cpp\n            Utils/PackerMAT.cpp)\n\nset(HEADERS AEResampleFactory.h\n            AESinkFactory.h\n            Encoders/AEEncoderFFmpeg.h\n            Engines/ActiveAE/ActiveAE.h\n            Engines/ActiveAE/ActiveAEBuffer.h\n            Engines/ActiveAE/ActiveAEFilter.h\n            Engines/ActiveAE/ActiveAESink.h\n            Engines/ActiveAE/ActiveAESound.h\n            Engines/ActiveAE/ActiveAEStream.h\n            Engines/ActiveAE/ActiveAESettings.h\n            Interfaces/AE.h\n            Interfaces/AEEncoder.h\n            Interfaces/AEResample.h\n            Interfaces/AESink.h\n            Interfaces/AESound.h\n            Interfaces/AEStream.h\n            Interfaces/IAudioCallback.h\n            Interfaces/ThreadedAE.h\n            Utils/AEAudioFormat.h\n            Utils/AEBitstreamPacker.h\n            Utils/AEChannelData.h\n            Utils/AEChannelInfo.h\n            Utils/AEDeviceInfo.h\n            Utils/AELimiter.h\n            Utils/AEPackIEC61937.h\n            Utils/AERingBuffer.h\n            Utils/AEStreamData.h\n            Utils/AEStreamInfo.h\n            Utils/AEUtil.h\n            Utils/PackerMAT.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Process Info Sources in CMake\nDESCRIPTION: Conditionally sets source and header files based on the target Windows platform. For standard Windows, uses ProcessInfoWin files, while for Windows Store platform uses ProcessInfoWin10 files. Finally creates a core library named 'processwin'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows)\n  set(SOURCES ProcessInfoWin.cpp)\n  set(HEADERS ProcessInfoWin.h)\nelseif(CORE_SYSTEM_NAME STREQUAL windowsstore)\n  set(SOURCES ProcessInfoWin10.cpp)\n  set(HEADERS ProcessInfoWin10.h)\nendif()\n\ncore_add_library(processwin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Addons Header Files in CMake\nDESCRIPTION: Specifies the header files required for the binary addons implementation, including manager, DLL handling, and base classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/binary-addons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS BinaryAddonManager.h\n            AddonDll.h\n            AddonInstanceHandler.h\n            BinaryAddonBase.h\n            DllAddon.h)\n```\n\n----------------------------------------\n\nTITLE: WebOS Platform Support Configuration\nDESCRIPTION: Conditionally adds WebOS-specific source and header files when WebOS is the target platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET_WEBOS)\n  list(APPEND SOURCES AppParamParserWebOS.cpp\n                      PlatformWebOS.cpp)\n  list(APPEND HEADERS AppParamParserWebOS.h\n                      PlatformWebOS.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding WebOS-Specific Starfish Codec Sources in CMake\nDESCRIPTION: Includes Starfish codec source and header files for WebOS platforms. This allows for platform-specific video decoding on WebOS-based devices.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"webos\" IN_LIST CORE_PLATFORM_NAME_LC)\n  list(APPEND SOURCES DVDVideoCodecStarfish.cpp)\n  list(APPEND HEADERS DVDVideoCodecStarfish.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Core Video Codec Sources and Headers in CMake\nDESCRIPTION: Sets up the initial list of core video codec source and header files for the XBMC project. These files are common across all platforms and include the basic codec implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AddonVideoCodec.cpp\n            DVDVideoCodec.cpp\n            DVDVideoCodecFFmpeg.cpp)\n\nset(HEADERS AddonVideoCodec.h\n            DVDVideoCodec.h\n            DVDVideoCodecFFmpeg.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Programs Module in CMake\nDESCRIPTION: Sets the HEADERS variable with the list of header files for the programs module. Includes GUIViewStatePrograms.h and GUIWindowPrograms.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/programs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIViewStatePrograms.h\n            GUIWindowPrograms.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Platform Headers in CMake\nDESCRIPTION: CMake script that conditionally adds development kit headers for the Kodi platform. The script checks if headers are defined and adds them to the build system using the core_add_devkit_header function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/platform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_platform)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Darwin Speech Recognition CMake Build Configuration\nDESCRIPTION: Defines the source files, header files, and creates a library target for the Darwin speech recognition platform. Uses CMake to configure the build process for the macOS-specific speech recognition implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/speech/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES SpeechRecognitionDarwin.mm)\n\nset(HEADERS SpeechRecognitionDarwin.h)\n\ncore_add_library(platform_darwin_speech)\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for the POSIX platform implementation, including utilities for conversion, CPU/GPU info, filesystem operations, and platform-specific functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ConvUtils.cpp\n            CPUInfoPosix.cpp\n            Filesystem.cpp\n            GPUInfoPosix.cpp\n            MessagePrinter.cpp\n            PlatformPosix.cpp\n            PosixMountProvider.cpp\n            PosixResourceCounter.cpp\n            XHandle.cpp\n            XTimeUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Optical Disc Support in CMake\nDESCRIPTION: Adds additional source and header files for optical disc support if ENABLE_OPTICAL is set. This includes CD/DVD detection and handling functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/storage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  list(APPEND SOURCES cdioSupport.cpp\n                      DetectDVDType.cpp)\n  list(APPEND HEADERS cdioSupport.h\n                      DetectDVDType.h\n                      discs/IDiscDriveHandler.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Sources and Headers for XBMC Commons Library\nDESCRIPTION: Defines the source files and header files for the XBMC commons library, followed by the library creation command. The configuration includes exception handling, buffer management, and logging components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/commons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Exception.cpp)\n\nset(HEADERS Buffer.h\n            Exception.h\n            ilog.h)\n\ncore_add_library(commons)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Bluray Settings in Kodi CMake Configuration\nDESCRIPTION: This snippet checks if the Bluray target is available for the current build configuration. If it is, the DiscSettings.cpp file is added to the SOURCES list, enabling Bluray-specific settings in Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Bluray)\n  list(APPEND SOURCES DiscSettings.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of Inputstream Headers to Kodi Dev Kit in CMake\nDESCRIPTION: This snippet checks if headers are defined and if so, adds them to the Kodi dev kit for the inputstream addon instance. It ensures that the headers are only added when they are available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/inputstream/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_addon-instance_inputstream)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Header Files for XBMC Addon Interfaces in CMake\nDESCRIPTION: Sets up lists of source and header files for the XBMC addon interfaces. These lists include core components such as AddonBase, AudioEngine, General, Filesystem, and Network.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AddonBase.cpp\n            AudioEngine.cpp\n            General.cpp\n            Filesystem.cpp\n            Network.cpp)\n\nset(HEADERS AddonBase.h\n            AudioEngine.h\n            General.h\n            Filesystem.h\n            Network.h)\n```\n\n----------------------------------------\n\nTITLE: Creating Peripherals Events Library Target\nDESCRIPTION: Creates a library target for the peripherals events component using XBMC's custom core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/events/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(peripherals_events)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Windows Platform Library\nDESCRIPTION: Defines the list of source (.cpp) files that comprise the Windows platform implementation, including system utilities, hardware info, and filesystem operations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CharsetConverter.cpp\n            CPUInfoWin32.cpp\n            DisplayUtilsWin32.cpp\n            Environment.cpp\n            GPUInfoWin32.cpp\n            MemUtils.cpp\n            MessagePrinter.cpp\n            dxerr.cpp\n            Filesystem.cpp\n            pch.cpp\n            PlatformWin32.cpp\n            WIN32Util.cpp\n            WindowHelper.cpp\n            XTimeUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for Linux ARM (Cross-Compilation)\nDESCRIPTION: Command to configure the build system for cross-compiling to Linux ARM. This example uses a custom toolchain and sets up for OpenGL ES rendering.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-toolchain=/opt/toolchains/my-example-toolchain/ --prefix=/opt/xbmc-deps --host=arm-linux-gnueabi --with-rendersystem=gles\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Kodi Addons\nDESCRIPTION: Sets up the initial CMake project configuration for building Kodi addons. Defines minimum required CMake version and project name.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\nproject(kodi-addons)\n\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Joystick Input Module in CMake\nDESCRIPTION: This snippet lists the source files (.cpp) to be compiled for the joystick input module. It includes various components such as deadzone filtering, driver primitives, and rumble generation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DeadzoneFilter.cpp\n            DriverPrimitive.cpp\n            JoystickEasterEgg.cpp\n            JoystickMonitor.cpp\n            JoystickTranslator.cpp\n            JoystickUtils.cpp\n            RumbleGenerator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Utils Library Build in CMake\nDESCRIPTION: Sets up source files, header files, and registers the platform_darwin_utils library in the CMake build system. The library contains Darwin-specific utilities including a C logging interface.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DarwinInterfaceForCLog.mm)\n\nset(HEADERS DarwinInterfaceForCLog.h)\n\ncore_add_library(platform_darwin_utils)\n```\n\n----------------------------------------\n\nTITLE: Library Target Definition\nDESCRIPTION: Creates the rp-process library target using XBMC/Kodi's core_add_library helper function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(rp-process)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Wayland Windowing System in CMake\nDESCRIPTION: Lists all source files required for the Wayland windowing system implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Connection.cpp\n            OptionalsReg.cpp\n            Output.cpp\n            InputProcessorKeyboard.h\n            InputProcessorPointer.h\n            InputProcessorTouch.h\n            OSScreenSaverIdleInhibitUnstableV1.cpp\n            Registry.cpp\n            Seat.cpp\n            SeatInputProcessing.cpp\n            SeatSelection.cpp\n            ShellSurface.cpp\n            ShellSurfaceWlShell.cpp\n            ShellSurfaceXdgShell.cpp\n            ShellSurfaceXdgShellUnstableV6.cpp\n            Util.cpp\n            VideoSyncWpPresentation.cpp\n            ${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.cpp\n            WindowDecorator.cpp\n            WinEventsWayland.cpp\n            WinSystemWayland.cpp\n            XkbcommonKeymap.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGLES Rendering Components in CMake for XBMC\nDESCRIPTION: This CMake snippet checks if the OpenGLES target is available for the application. If so, it sets up the necessary source and header files for OpenGLES rendering and adds a core library named 'rendering_gles'. This configuration is crucial for enabling OpenGLES support in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/gles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  set(SOURCES RenderSystemGLES.cpp\n              ScreenshotSurfaceGLES.cpp\n              GLESShader.cpp)\n\n  set(HEADERS RenderSystemGLES.h\n              ScreenshotSurfaceGLES.h\n              GLESShader.h)\n\n  core_add_library(rendering_gles)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Video Tag Loading in CMake\nDESCRIPTION: Sets up a list of header files corresponding to the video tag extraction and loading components. Includes interface definitions, helper functions, factory pattern, and various tag loaders.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/tags/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IVideoInfoTagLoader.h\n            VideoTagExtractionHelper.h\n            VideoInfoTagLoaderFactory.h\n            VideoTagLoaderFFmpeg.h\n            VideoTagLoaderNFO.h\n            VideoTagLoaderPlugin.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL/OpenGLES Dependencies\nDESCRIPTION: Conditionally adds Matrix-related source files when OpenGL or OpenGLES is targeted. Includes special handling for ARM NEON optimization.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES MatrixGL.cpp)\n  list(APPEND HEADERS MatrixGL.h)\n\n  if(ARCH MATCHES arm AND ENABLE_NEON)\n    list(APPEND SOURCES MatrixGL.neon.cpp)\n    if(NOT DEFINED NEON_FLAGS)\n      set_source_files_properties(MatrixGL.neon.cpp PROPERTIES COMPILE_OPTIONS -mfpu=neon)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding LIRC Files to Build in CMake\nDESCRIPTION: Adds LIRC source and header files to the build if the LircClient target exists. This enables LIRC remote control support when available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::LircClient)\n  list(APPEND SOURCES LIRC.cpp)\n  list(APPEND HEADERS LIRC.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenGLES Component Inclusion\nDESCRIPTION: Adds OpenGLES-specific source and header files when OpenGLES support is enabled in the build target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/X11/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES WinSystemX11GLESContext.cpp)\n  list(APPEND HEADERS WinSystemX11GLESContext.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Favourites Module\nDESCRIPTION: Defines the list of C++ source files that comprise the favourites module implementation\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/favourites/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ContextMenus.cpp\n            GUIViewStateFavourites.cpp\n            GUIWindowFavourites.cpp\n            FavouritesService.cpp\n            FavouritesURL.cpp\n            FavouritesUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: DBus Support Configuration\nDESCRIPTION: Includes DBus messaging and utility files when DBus support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::DBus)\n  list(APPEND SOURCES DBusMessage.cpp\n                      DBusUtil.cpp)\n  list(APPEND HEADERS DBusMessage.h\n                      DBusUtil.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Source Files in CMake\nDESCRIPTION: Defines the list of Objective-C++ source files required for iOS platform implementation, including view controllers and input handling classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES IOSEAGLView.mm\n            IOSExternalTouchController.mm\n            IOSKeyboardView.mm\n            IOSScreenManager.mm\n            XBMCController.mm)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Power Management Sources in CMake\nDESCRIPTION: Sets up the source files, header files and creates a library target for Windows power management functionality. Includes power syscall and idle timer components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Win32PowerSyscall.cpp\n            WinIdleTimer.cpp)\n\nset(HEADERS Win32PowerSyscall.h)\n\ncore_add_library(platform_win32_powermanagement)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Addon System Header Files in CMake\nDESCRIPTION: Defines the list of header files that declare the interfaces and classes for the addon system. Includes interface definitions, addon type declarations, and supporting infrastructure headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS Addon.h\n            AddonBuilder.h\n            AddonEvents.h\n            AddonRepoInfo.h\n            BinaryAddonCache.h\n            AddonDatabase.h\n            AddonInstaller.h\n            AddonManager.h\n            AddonProvider.h\n            AddonRepos.h\n            AddonStatusHandler.h\n            AddonSystemSettings.h\n            AddonUpdateRules.h\n            AddonVersion.h\n            AudioDecoder.h\n            ContextMenuAddon.h\n            ContextMenus.h\n            ExtsMimeSupportList.h\n            FilesystemInstaller.h\n            FontResource.h\n            GameResource.h\n            IAddon.h\n            IAddonManagerCallback.h\n            IAddonSupportCheck.h\n            ImageDecoder.h\n            ImageResource.h\n            LanguageResource.h\n            PluginSource.h\n            Repository.h\n            RepositoryUpdater.h\n            Resource.h\n            Scraper.h\n            ScreenSaver.h\n            Service.h\n            Skin.h\n            UISoundsResource.h\n            VFSEntry.h\n            Visualization.h\n            Webinterface.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Core Picture Module Source Files in CMake\nDESCRIPTION: Sets the main source files for the pictures module which include GUI components for picture information, slideshow functionality, and picture processing utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogPictureInfo.cpp\n            GUIViewStatePictures.cpp\n            GUIWindowPictures.cpp\n            GUIWindowSlideShow.cpp\n            Picture.cpp\n            PictureFolderImageFileLoader.cpp\n            PictureInfoLoader.cpp\n            PictureInfoTag.cpp\n            PictureScalingAlgorithm.cpp\n            PictureThumbLoader.cpp\n            SlideShowDelegator.cpp\n            SlideShowPicture.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Buffer Sources and Headers in CMake\nDESCRIPTION: Sets up the base video buffer source and header files, with conditional inclusion of DMA and DRM PRIME buffer components for GBM and Wayland platforms. Builds the videoplayer-buffers library using the configured sources.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Buffers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES VideoBuffer.cpp)\nset(HEADERS VideoBuffer.h)\n\nif(\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC)\n  list(APPEND SOURCES VideoBufferDMA.cpp\n                      VideoBufferDRMPRIME.cpp\n                      VideoBufferPoolDMA.cpp)\n  list(APPEND HEADERS VideoBufferDMA.h\n                      VideoBufferDRMPRIME.h\n                      VideoBufferPoolDMA.h)\nendif()\n\ncore_add_library(videoplayer-buffers)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE4.1 Library Compilation in CMake\nDESCRIPTION: Conditional CMake configuration block that sets up compilation for SSE4.1-optimized code. It defines source and header files, creates a shared library target named 'sse4', organizes it in a folder structure, and applies the necessary compiler flag for SSE4.1 instruction support.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/sse4/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_SSE4_1)\n  set(SOURCES CopyFrame.cpp)\n  set(HEADERS DllLibSSE4.h)\n\n  core_add_shared_library(sse4)\n  set_target_properties(sse4 PROPERTIES FOLDER lib)\n  target_compile_options(sse4 PRIVATE -msse4.1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Settings Library to Kodi Core in CMake\nDESCRIPTION: This snippet adds the settings component as a core library in the Kodi build system. It uses a custom CMake function 'core_add_library' to integrate the settings library into the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(settings)\n```\n\n----------------------------------------\n\nTITLE: Conditional Optical Media Support Configuration\nDESCRIPTION: Adds optical media (CD/DVD) related source and header files when optical support is enabled in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  list(APPEND SOURCES CDDADirectory.cpp\n                      CDDAFile.cpp\n                      DVDDirectory.cpp)\n  list(APPEND HEADERS CDDADirectory.h\n                      CDDAFile.h\n                      DVDDirectory.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Test Sources in CMake\nDESCRIPTION: Defines a list of source files for addon tests and adds them as a test library using a custom CMake function. The sources include tests for AddonBuilder, AddonDatabase, AddonInfoBuilder, and AddonVersion.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestAddonBuilder.cpp\n            TestAddonDatabase.cpp\n            TestAddonInfoBuilder.cpp\n            TestAddonVersion.cpp)\n\ncore_add_test_library(addons_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Network Library Build in CMake\nDESCRIPTION: Sets up the source files, headers and core library target for the macOS network implementation. Specifies .mm source files for Objective-C++ implementation and corresponding header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES NetworkMacOS.mm)\nset(HEADERS NetworkMacOS.h)\n\ncore_add_library(platform_macos_network)\n```\n\n----------------------------------------\n\nTITLE: Creating Render Buffer Library\nDESCRIPTION: Creates the render buffer library target using the configured source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(rp-buffers)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for EGL Support in Wayland for CMake\nDESCRIPTION: Adds EGL-specific source and header files if EGL support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::EGL)\n  list(APPEND SOURCES WinSystemWaylandEGLContext.cpp)\n  list(APPEND HEADERS WinSystemWaylandEGLContext.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: C/C++ SPDX License Header Format\nDESCRIPTION: The required format for SPDX license identifier comments in C/C++ source and header files. Shows the general template with placeholders for year, copyright holders, and license information.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/LICENSES/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n/*\n *  Copyright (C) <year> <copyright holders>\n *  This file is part of <software> - <URL>\n *\n *  SPDX-License-Identifier: <SPDX License Expression>\n *  See <license file/license index file> for more information.\n */\n```\n\n----------------------------------------\n\nTITLE: Conditional XSLT and EGL Support\nDESCRIPTION: Adds XSLT and EGL-related source files when their respective targets are available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::XSLT)\n  list(APPEND SOURCES XSLTUtils.cpp)\n  list(APPEND HEADERS XSLTUtils.h)\nendif()\nif(TARGET ${APP_NAME_LC}::EGL)\n  list(APPEND SOURCES EGLUtils.cpp\n                      EGLFence.cpp)\n  list(APPEND HEADERS EGLUtils.h\n                      EGLFence.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer GUI Control Sources in CMake\nDESCRIPTION: Defines the source and header files for the RetroPlayer GUI controls component and creates the library target. Includes game control and render settings implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guicontrols/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIGameControl.cpp\n            GUIRenderSettings.cpp\n)\n\nset(HEADERS GUIGameControl.h\n            GUIRenderSettings.h\n)\n\ncore_add_library(retroplayer_guicontrols)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Test Sources in CMake for XBMC\nDESCRIPTION: Defines the source files for the video test library. These files include various test cases for video-related functionality in XBMC, such as database URL handling, file item classification, info scanning, and utility functions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestStacks.cpp\n            TestVideoDbUrl.cpp\n            TestVideoFileItemClassify.cpp\n            TestVideoInfoScanner.cpp\n            TestVideoUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding FFmpeg Post-Processing Sources in CMake\nDESCRIPTION: Adds FFmpeg post-processing source and header files to the project if external libav is not enabled. This allows for internal post-processing capabilities when not relying on external libraries.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_EXTERNAL_LIBAV)\n  list(APPEND SOURCES DVDVideoPPFFmpeg.cpp)\n  list(APPEND HEADERS DVDVideoPPFFmpeg.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Addon GUI in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of C++ header files for the addon GUI component. These headers correspond to the source files and define the interfaces for the GUI classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/gui/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIDialogAddonInfo.h\n            GUIDialogAddonSettings.h\n            GUIHelpers.h\n            GUIViewStateAddonBrowser.h\n            GUIWindowAddonBrowser.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Thread Implementation Files in CMake\nDESCRIPTION: Sets the source and header file paths for the Windows-specific thread implementation. These files are located in the win32 platform subdirectory of the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/threads/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ${PROJECT_SOURCE_DIR}/xbmc/platform/win32/threads/ThreadImplWin.cpp)\nset(HEADERS ${PROJECT_SOURCE_DIR}/xbmc/platform/win32/threads/ThreadImplWin.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options\nDESCRIPTION: Configures compiler options for the WiiRemote target using architecture-specific defines.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/WiiRemote/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(${APP_NAME_LC}-wiiremote PRIVATE ${ARCH_DEFINES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Video Database Directory\nDESCRIPTION: Defines the list of C++ source files (.cpp) that make up the video database directory component. These files handle different aspects of directory node management for movies, TV shows, and music videos.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/VideoDatabaseDirectory/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DirectoryNode.cpp\n            DirectoryNodeEpisodes.cpp\n            DirectoryNodeGrouped.cpp\n            DirectoryNodeInProgressTvShows.cpp\n            DirectoryNodeMovieAssetTypes.cpp\n            DirectoryNodeMovieAssets.cpp\n            DirectoryNodeMoviesOverview.cpp\n            DirectoryNodeMusicVideosOverview.cpp\n            DirectoryNodeOverview.cpp\n            DirectoryNodeRecentlyAddedEpisodes.cpp\n            DirectoryNodeRecentlyAddedMovies.cpp\n            DirectoryNodeRecentlyAddedMusicVideos.cpp\n            DirectoryNodeRoot.cpp\n            DirectoryNodeSeasons.cpp\n            DirectoryNodeTitleMovies.cpp\n            DirectoryNodeTitleMusicVideos.cpp\n            DirectoryNodeTitleTvShows.cpp\n            DirectoryNodeTvShowsOverview.cpp\n            QueryParams.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeroconf for XBMC on Linux using AVAHI\nDESCRIPTION: This configuration snippet specifies the path for the Zeroconf implementation in XBMC's Linux platform code, indicating the use of AVAHI for Zeroconf services.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/optional/common/avahi.txt#2025-04-21_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nxbmc/platform/linux/network/zeroconf platform/linux/network/zeroconf # AVAHI\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC/Kodi Version History in JSON\nDESCRIPTION: This JSON structure defines the version history for XBMC/Kodi, including stable releases, release candidates, and beta versions. Each entry contains detailed information about the version, such as major and minor version numbers, tags, revisions, and addon support status.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.txt#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"tag\": \"stable\",\n    \"tagversion\":\"\",\n    \"revision\": \"20130317-0d373cc\",\n    \"extrainfo\": \"final\",\n    \"addon_support\": \"yes\"\n},\n{\n    \"major\": \"12\",\n    \"minor\": \"0\",\n    \"tag\": \"stable\",\n    \"tagversion\":\"\",\n    \"revision\": \"20130127-fb595f2\",\n    \"extrainfo\": \"final\",\n    \"addon_support\": \"yes\"\n},\n{\n    \"major\": \"11\",\n    \"minor\": \"0\",\n    \"tag\": \"stable\",\n    \"tagversion\":\"\",\n    \"revision\": \"20120321-14feb09\",\n    \"extrainfo\": \"final\",\n    \"addon_support\": \"no\"\n},\n{\n    \"major\": \"10\",\n    \"minor\": \"1\",\n    \"tag\": \"stable\",\n    \"tagversion\":\"\",\n    \"revision\": \"\",\n    \"extrainfo\": \"final\",\n    \"addon_support\": \"no\"\n},\n{\n    \"major\": \"10\",\n    \"minor\": \"0\",\n    \"tag\": \"stable\",\n    \"tagversion\":\"\",\n    \"revision\": \"\",\n    \"extrainfo\": \"final\",\n    \"addon_support\": \"no\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Windows 10 Peripherals Library in CMake\nDESCRIPTION: Adds the Windows 10 peripherals library to the project using a custom CMake command core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/peripherals/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_win10_peripherals)\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Filesystem Header Files in CMake\nDESCRIPTION: Defines the core Windows filesystem header files for compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/filesystem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS Win32Directory.h\n            Win32File.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Music Database Directory Sources in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for the music database directory component. Includes various directory node implementations for handling albums, artists, songs, and other music library organizational structures.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/MusicDatabaseDirectory/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DirectoryNodeAlbum.cpp\n            DirectoryNodeAlbumRecentlyAdded.cpp\n            DirectoryNodeAlbumRecentlyAddedSong.cpp\n            DirectoryNodeAlbumRecentlyPlayed.cpp\n            DirectoryNodeAlbumRecentlyPlayedSong.cpp\n            DirectoryNodeAlbumTop100.cpp\n            DirectoryNodeAlbumTop100Song.cpp\n            DirectoryNodeArtist.cpp\n            DirectoryNodeDiscs.cpp\n            DirectoryNode.cpp\n            DirectoryNodeGrouped.cpp\n            DirectoryNodeOverview.cpp\n            DirectoryNodeRoot.cpp\n            DirectoryNodeSingles.cpp\n            DirectoryNodeSong.cpp\n            DirectoryNodeSongTop100.cpp\n            DirectoryNodeTop100.cpp           \n            QueryParams.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring VAAPI Renderer Sources\nDESCRIPTION: Adds VAAPI renderer source files based on available graphics API targets (OpenGL, OpenGLES, EGL).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::VAAPI)\n  if(TARGET ${APP_NAME_LC}::OpenGl)\n    list(APPEND SOURCES RendererVAAPIGL.cpp)\n    list(APPEND HEADERS RendererVAAPIGL.h)\n  endif()\n  if(TARGET ${APP_NAME_LC}::OpenGLES)\n    list(APPEND SOURCES RendererVAAPIGLES.cpp)\n    list(APPEND HEADERS RendererVAAPIGLES.h)\n  endif()\n  if(TARGET ${APP_NAME_LC}::EGL)\n    list(APPEND SOURCES VaapiEGL.cpp)\n    list(APPEND HEADERS VaapiEGL.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Addon Configuration Setting\nDESCRIPTION: Adds compile definition for addon configuration at startup when enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(ADDONS_CONFIGURE_AT_STARTUP)\n  add_compile_definitions(ADDONS_CONFIGURE_AT_STARTUP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing JsonSchemaBuilder with CMake\nDESCRIPTION: Sets up a CMake project for building JsonSchemaBuilder executable using C++17. Configures the build environment and specifies installation rules with custom naming using APP_NAME_LC variable.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/native/JsonSchemaBuilder/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(JsonSchemaBuilder)\n\nset(SOURCES JsonSchemaBuilder.cpp)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nadd_executable(JsonSchemaBuilder ${SOURCES})\n\ninstall(TARGETS JsonSchemaBuilder DESTINATION ${CMAKE_INSTALL_PREFIX}/bin\n        RENAME \"${APP_NAME_LC}-JsonSchemaBuilder\")\n```\n\n----------------------------------------\n\nTITLE: Defining Core Source and Header Files for Storage Library in CMake\nDESCRIPTION: Sets up the basic source and header files for the storage library. It includes files related to autorun media jobs and media management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AutorunMediaJob.cpp\n            MediaManager.cpp)\n\nset(HEADERS AutorunMediaJob.h\n            IStorageProvider.h\n            MediaManager.h)\n```\n\n----------------------------------------\n\nTITLE: Building XBMC Interfaces Library in CMake\nDESCRIPTION: Calls the custom core_add_library function to build the 'interfaces' library using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(interfaces)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Test Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for XBMC test components using CMake's set command. Includes test files for basic environment, CUE document parsing, file items, URL handling, utilities, and date/time functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestBasicEnvironment.cpp\n            TestCueDocument.cpp\n            TestFileItem.cpp\n            TestURL.cpp\n            TestUtil.cpp\n            TestUtils.cpp\n            TestDateTime.cpp\n            TestDateTimeSpan.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Info Interface Library in CMake\nDESCRIPTION: Defines the list of C++ source files to be included in the info interface library. The source files include modules for boolean information handling, expression evaluation, and skin variables.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES InfoBool.cpp\n            InfoExpression.cpp\n            SkinVariable.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Library Source Files in CMake\nDESCRIPTION: Sets up the source files list for the threads library including core implementation files for events, threads and timers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/threads/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Event.cpp\n            Thread.cpp\n            Timer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding DVD Demuxers Library in CMake\nDESCRIPTION: This snippet adds the DVD demuxers as a core library to the XBMC project. It uses a custom CMake function 'core_add_library' to include the 'dvddemuxers' library in the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(dvddemuxers)\n```\n\n----------------------------------------\n\nTITLE: Installing ccache for Faster Kodi Builds\nDESCRIPTION: Command to install ccache, which caches previous compilations to speed up subsequent builds of Kodi, recommended for developers who build frequently.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install ccache\n```\n\n----------------------------------------\n\nTITLE: Configuring GBM Process Library Sources in CMake\nDESCRIPTION: Sets up source files and creates a core library for GBM process information handling. Defines source and header files, then creates a library named 'processGBM'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/gbm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ProcessInfoGBM.cpp)\nset(HEADERS ProcessInfoGBM.h)\n\ncore_add_library(processGBM)\n```\n\n----------------------------------------\n\nTITLE: Adding GBM Windowing Library to XBMC/Kodi Core in CMake\nDESCRIPTION: Adds the GBM windowing system as a core library to the XBMC/Kodi project build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(windowing_gbm)\n```\n\n----------------------------------------\n\nTITLE: Adding DVD Video Codecs Library in CMake\nDESCRIPTION: Adds the DVD video codecs as a core library to the XBMC project. This command compiles all the previously defined sources into a single library for use in the main application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Video/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(dvdvideocodecs)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Script Invocation System in CMake\nDESCRIPTION: Defines the C++ source files needed for the script invocation system, including language invokers, threading, script observation, and management components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ILanguageInvoker.cpp\n            LanguageInvokerThread.cpp\n            RunningScriptObserver.cpp\n            ScriptInvocationManager.cpp\n            ScriptRunner.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Retroplayer GUI Playback\nDESCRIPTION: Defines the header files needed for building the GUI playback control component, specifically GUIPlaybackControl.h\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guiplayback/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIPlaybackControl.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MDNS Zeroconf Library in CMake\nDESCRIPTION: Conditionally builds the MDNS implementation of Zeroconf when the MDNS target exists. Sets up source and header files for ZeroconfBrowser and Zeroconf MDNS implementations, then creates the network_mdns library using the core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/mdns/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::MDNS)\n  set(SOURCES ZeroconfBrowserMDNS.cpp\n              ZeroconfMDNS.cpp)\n\n  set(HEADERS ZeroconfBrowserMDNS.h\n              ZeroconfMDNS.h)\n\n  core_add_library(network_mdns)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for TexturePacker in CMake\nDESCRIPTION: Defines the list of source files to be compiled for the TexturePacker executable, including platform-specific files for Windows.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/native/TexturePacker/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES md5.cpp\n            DecoderManager.cpp\n            TexturePacker.cpp\n            XBTFWriter.cpp\n            decoder/GIFDecoder.cpp\n            decoder/GifHelper.cpp\n            decoder/JPGDecoder.cpp\n            decoder/PNGDecoder.cpp\n            ${KODI_SOURCE_DIR}/xbmc/guilib/XBTF.cpp)\n\nif(WIN32)\n  list(APPEND SOURCES Win32/dirent.c)\nendif()\n\nset(CMAKE_POSITITION_INDEPENDENT_CODE 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Game Ports Windows in CMake\nDESCRIPTION: This snippet sets the HEADERS variable with a list of header files for the game ports windows component. It includes various GUI-related header files and an interface file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIPortDefines.h\n            GUIPortList.h\n            GUIPortWindow.h\n            IPortList.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for XBMC Games Controller Types in CMake\nDESCRIPTION: This snippet uses a custom CMake function 'core_add_library' to add a library named 'games_controller_types'. This likely compiles the previously defined source and header files into a library for use in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/types/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(games_controller_types)\n```\n\n----------------------------------------\n\nTITLE: Defining Input Module Header Files in CMake\nDESCRIPTION: Defines the list of header files for the input handling module, including interfaces and declarations for input processing components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS InertialScrollingHandler.h\n            InputCodingTable.h\n            InputCodingTableBasePY.h\n            InputCodingTableFactory.h\n            InputCodingTableKorean.h\n            InputManager.h\n            InputTranslator.h\n            InputTypes.h\n            WindowTranslator.h\n)\n```\n\n----------------------------------------\n\nTITLE: Building JSONRPC Library and Setting Dependencies in CMake\nDESCRIPTION: This snippet adds the JSONRPC library to the build process and sets up a dependency on generating a JSON header file. It uses custom CMake commands specific to the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(jsonrpc_interface)\nadd_dependencies(${CORE_LIBRARY} generate_json_header)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeroconf Avahi Sources and Library for Linux Network in CMake\nDESCRIPTION: This CMake snippet checks if the Avahi target exists for the application, sets up source and header files for Zeroconf implementation, and adds a library for Linux network Zeroconf. It's conditional on the Avahi target being available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/network/zeroconf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Avahi)\n  set(SOURCES ZeroconfAvahi.cpp\n              ZeroconfBrowserAvahi.cpp)\n  set(HEADERS ZeroconfAvahi.h\n              ZeroconfBrowserAvahi.h)\n\n  core_add_library(platform_linux_network_zeroconf)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Registering Darwin Platform Core Library in CMake\nDESCRIPTION: Adds the Darwin platform utility files as a core library in the XBMC project. This makes the platform-specific functionality available to other components of the application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_darwin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Peripherals Dialogs Library in CMake\nDESCRIPTION: Sets up source files, header files, and registers the peripherals_dialogs library component for XBMC. This configuration defines two source files for peripheral dialogs and their corresponding header files before adding them as a core library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogPeripherals.cpp\n            GUIDialogPeripheralSettings.cpp)\n\nset(HEADERS GUIDialogPeripherals.h\n            GUIDialogPeripheralSettings.h)\n\ncore_add_library(peripherals_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows DXVA Sources\nDESCRIPTION: Adds DXVA-HD related source and header files for Windows and Windows Store platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES DXVAHD.cpp)\n  list(APPEND SOURCES DXVAEnumeratorHD.cpp)\n  list(APPEND HEADERS DXVAHD.h)\n  list(APPEND HEADERS DXVAEnumeratorHD.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Core Linux Source Files and Headers\nDESCRIPTION: Defines the base set of source and header files for Linux platform support functionality including CPU info, GPU info, and platform-specific utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AppParamParserLinux.cpp\n            CPUInfoLinux.cpp\n            GPUInfoLinux.cpp\n            MemUtils.cpp\n            OptionalsReg.cpp\n            PlatformLinux.cpp\n            SysfsPath.cpp\n            TimeUtils.cpp)\n\nset(HEADERS AppParamParserLinux.h\n            CPUInfoLinux.h\n            GPUInfoLinux.h\n            OptionalsReg.h\n            PlatformLinux.h\n            SysfsPath.h\n            TimeUtils.h)\n```\n\n----------------------------------------\n\nTITLE: WebOS Power Management Integration\nDESCRIPTION: Adds WebOS-specific power management components when targeting WebOS platform\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/powermanagement/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (TARGET_WEBOS)\n  list(APPEND SOURCES LunaPowerManagement.cpp)\n  list(APPEND HEADERS LunaPowerManagement.h)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Retroplayer GUI Playback Library\nDESCRIPTION: Creates the retroplayer GUI playback library using the previously defined source and header files\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guiplayback/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(retroplayer_guiplayback)\n```\n\n----------------------------------------\n\nTITLE: Configuring Speech Recognition Headers and Library in CMake for XBMC\nDESCRIPTION: This CMake script sets up the necessary header files for speech recognition and conditionally adds a speech library. It defines a list of header files and checks if static libraries are enabled before adding the speech core library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/speech/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ISpeechRecognition.h\n            ISpeechRecognitionListener.h\n            SpeechRecognitionErrors.h)\n\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(speech)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies Directory\nDESCRIPTION: Lists contents of the xbmc-depends directory to verify toolchain files\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nls -l /Users/Shared/xbmc-depends\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Source Files for XBMC Player Core\nDESCRIPTION: Defines the source files for the player core factory module including configuration, factory, and selection rule implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/playercorefactory/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PlayerCoreConfig.cpp\n            PlayerCoreFactory.cpp\n            PlayerSelectionRule.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Power Management in CMake\nDESCRIPTION: Defines the source files for the power management module. These files handle DPMS support, power system calls, and overall power management functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DPMSSupport.cpp\n            IPowerSyscall.cpp\n            PowerManager.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring TVOS Source Files in CMake\nDESCRIPTION: Defines the list of source files (.mm) required for the TVOS platform implementation in XBMC. These are primarily Objective-C++ files that handle various aspects of the TVOS platform including display management, keyboard handling, and controller implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PreflightHandler.mm\n            TVOSDisplayManager.mm\n            TVOSEAGLView.mm\n            TVOSKeyboardView.mm\n            TVOSNSUserDefaults.mm\n            TVOSSettingsHandler.mm\n            tvosShared.mm\n            TVOSTopShelf.mm\n            XBMCController.mm)\n```\n\n----------------------------------------\n\nTITLE: Configuring IR Remote Headers and Library in CMake\nDESCRIPTION: Sets up the IR remote header files and conditionally adds the remote input library if static libraries are not enabled. The configuration includes IRRemote.h header and creates a core library for remote input functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IRRemote.h\n)\n\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_remote)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Process Info Sources and Library in CMake\nDESCRIPTION: Sets up the source files, headers, and creates a library target for iOS process information handling. Defines the core files needed for the iOS-specific implementation and creates a library named 'rp-process-ios'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/ios/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RPProcessInfoIOS.cpp)\n\nset(HEADERS RPProcessInfoIOS.h)\n\ncore_add_library(rp-process-ios)\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Library to XBMC Core in CMake\nDESCRIPTION: Adds the WebSocket-related source and header files to a library named 'network_websockets' in the XBMC project. This library can be linked to other parts of the project that require WebSocket functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/websocket/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(network_websockets)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Format\nDESCRIPTION: Standard copyright and license notice format that should be included at the top of source files. The template includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/skin.estuary/fonts/roboto_license.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Retroplayer GUI Windows in CMake\nDESCRIPTION: Sets the SOURCES variable with the list of source files for the retroplayer GUI windows component. Includes GameWindowFullScreen.cpp and GameWindowFullScreenText.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guiwindows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GameWindowFullScreen.cpp\n            GameWindowFullScreenText.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: OpenGL/OpenGLES Common Configuration\nDESCRIPTION: Adds FrameBuffer implementation when either OpenGL or OpenGLES support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES FrameBufferObject.cpp)\n  list(APPEND HEADERS FrameBufferObject.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for DVD Demuxers in CMake\nDESCRIPTION: This snippet defines the source files for the DVD demuxer components. It includes various demuxer implementations such as MultiSource, BXA, CC, CDDA, Client, FFmpeg, and Vobsub.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDDemuxers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DemuxMultiSource.cpp\n            DVDDemux.cpp\n            DVDDemuxBXA.cpp\n            DVDDemuxCC.cpp\n            DVDDemuxCDDA.cpp\n            DVDDemuxClient.cpp\n            DVDDemuxFFmpeg.cpp\n            DVDDemuxUtils.cpp\n            DVDDemuxVobsub.cpp\n            DVDFactoryDemuxer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Addition for Input Joysticks in CMake\nDESCRIPTION: Adds a core library for input joysticks interfaces if static libraries are not enabled. This conditional compilation allows for flexibility in the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/interfaces/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_joysticks_interfaces)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining LIRC Remote Control Button Mappings for XBMC in XML\nDESCRIPTION: This XML structure defines mappings between LIRC remote control buttons and XBMC actions. It includes sections for different remote control models, with each button mapped to a specific XBMC function or keycode.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/linux/lirc.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<lircmap>\n\t<remote device=\"mceusb\">\n\t\t<play>Play</play>\n\t\t<pause>Pause</pause>\n\t\t<stop>Stop</stop>\n\t\t<forward>Forward</forward>\n\t\t<reverse>Rewind</reverse>\n\t\t<left>Left</left>\n\t\t<right>Right</right>\n\t\t<up>Up</up>\n\t\t<down>Down</down>\n\t\t<select>OK</select>\n\t\t<pageplus>ChanUp</pageplus>\n\t\t<pageminus>ChanDown</pageminus>\n\t\t<back>Back</back>\n\t\t<menu>DVD</menu>\n\t\t<title>Guide</title>\n\t\t<info>More</info>\n\t\t<skipplus>Skip</skipplus>\n\t\t<skipminus>Replay</skipminus>\n\t\t<display>Aspect</display>\n\t\t<start>Home</start>\n\t\t<record>Record</record>\n\t\t<volumeplus>VolUp</volumeplus>\n\t\t<volumeminus>VolDown</volumeminus>\n\t\t<mute>Mute</mute>\n\t\t<power>Power</power>\n\t\t<myvideo>Videos</myvideo>\n\t\t<mymusic>Music</mymusic>\n\t\t<mypictures>Photos</mypictures>\n\t\t<mytv>TV</mytv>\n\t\t<one>One</one>\n\t\t<two>Two</two>\n\t\t<three>Three</three>\n\t\t<four>Four</four>\n\t\t<five>Five</five>\n\t\t<six>Six</six>\n\t\t<seven>Seven</seven>\n\t\t<eight>Eight</eight>\n\t\t<nine>Nine</nine>\n\t\t<zero>Zero</zero>\n\t\t<star>*</star>\n\t\t<hash>#</hash>\n\t\t<clear>Clear</clear>\n\t\t<enter>Enter</enter>\n\t\t<red>Red</red>\n\t\t<green>Green</green>\n\t\t<yellow>Yellow</yellow>\n\t\t<blue>Blue</blue>\n\t</remote>\n</lircmap>\n```\n\n----------------------------------------\n\nTITLE: Building Neptune & Platinum Frameworks with Carthage\nDESCRIPTION: Commands to build Neptune and Platinum frameworks using Carthage on Mac/iOS systems.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> carthage bootstrap\n> carthage build --no-skip-current\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Process Source Files in CMake\nDESCRIPTION: Sets up the source files, header files, and creates a core library for Android process handling in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ProcessInfoAndroid.cpp)\n\nset(HEADERS ProcessInfoAndroid.h)\n\ncore_add_library(processAndroid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Controller GUI Header Files in CMake\nDESCRIPTION: Defines the list of C++ header files corresponding to the GUI components implementation, including type definitions and class declarations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/guicontrols/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUICardinalFeatureButton.h\n            GUIControllerButton.h\n            GUIControlTypes.h\n            GUIFeatureButton.h\n            GUIFeatureControls.h\n            GUIFeatureFactory.h\n            GUIFeatureTranslator.h\n            GUIGameController.h\n            GUIGameControllerList.h\n            GUIScalarFeatureButton.h\n            GUISelectKeyButton.h\n            GUIThrottleButton.h\n            GUIWheelButton.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Windows Platform Utils Sources and Headers in CMake\nDESCRIPTION: Configures source files, headers, and architecture-specific optimizations for Windows platform utilities. Conditionally includes SSE optimization headers except for ARM64 platforms. Creates a platform_win32_utils library target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Win32InterfaceForCLog.cpp)\n\nset(HEADERS Win32InterfaceForCLog.h)\n\n# Do not add SSE headers for ARM64\nif(NOT CMAKE_GENERATOR_PLATFORM STREQUAL arm64)\n  list(APPEND HEADERS gpu_memcpy_sse4.h\n                      memcpy_sse2.h)\nendif()\n\ncore_add_library(platform_win32_utils)\n```\n\n----------------------------------------\n\nTITLE: Defining Video Dialog Source Files in CMake\nDESCRIPTION: Sets up a list of source files for video-related dialog components in XBMC. These files handle various aspects of video playback and management UI.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogAudioSettings.cpp\n            GUIDialogFullScreenInfo.cpp\n            GUIDialogSubtitles.cpp\n            GUIDialogSubtitleSettings.cpp\n            GUIDialogTeletext.cpp\n            GUIDialogVideoBookmarks.cpp\n            GUIDialogVideoInfo.cpp\n            GUIDialogVideoManager.cpp\n            GUIDialogVideoManagerExtras.cpp\n            GUIDialogVideoManagerVersions.cpp\n            GUIDialogVideoOSD.cpp\n            GUIDialogVideoSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Library Creation Conditional\nDESCRIPTION: Creates the platform_linux_powermanagement library if source files are present\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/powermanagement/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SOURCES)\n  core_add_library(platform_linux_powermanagement)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Windowing Header Files in CMake\nDESCRIPTION: Defines the list of header files corresponding to the OSX windowing system implementation components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/osx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS CocoaDPMSSupport.h\n            OSScreenSaverOSX.h\n            WinEventsOSX.h\n            WinEventsOSXImpl.h\n            VideoSyncOsx.h\n            WinSystemOSX.h)\n```\n\n----------------------------------------\n\nTITLE: OpenGL Support Configuration\nDESCRIPTION: Adds OpenGL utility files when OpenGL or OpenGLES targets are available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES GLUtils.cpp)\n  list(APPEND HEADERS GLUtils.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding RetroPlayer Library to Build\nDESCRIPTION: Creates the RetroPlayer library target using the core_add_library macro\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(retroplayer)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for PVR Recordings in CMake\nDESCRIPTION: Sets up a CMake variable 'SOURCES' with a list of source files for the PVR recordings module. This includes files for PVRRecording, PVRRecordings, and PVRRecordingsPath functionalities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/recordings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PVRRecording.cpp\n            PVRRecordings.cpp\n            PVRRecordingsPath.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Controller Component\nDESCRIPTION: Specifies the header files for the controller component. These files contain the declarations and definitions necessary for the controller functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Controller.h\n            ControllerDefinitions.h\n            ControllerIDs.h\n            ControllerLayout.h\n            ControllerManager.h\n            ControllerTranslator.h\n            ControllerTypes.h\n            DefaultController.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding DMA Renderer Files for GBM or Wayland Platforms in CMake\nDESCRIPTION: Includes DMA-specific renderer files for GBM or Wayland platforms if the EGL target is available. Also adds OpenGL and OpenGLES DMA renderers if their respective targets exist.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif((\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC) AND TARGET ${APP_NAME_LC}::EGL)\n  list(APPEND SOURCES RPRendererDMAUtils.cpp)\n  list(APPEND HEADERS RPRendererDMAUtils.h)\n\n  if(TARGET ${APP_NAME_LC}::OpenGl)\n    list(APPEND SOURCES RPRendererDMAOpenGL.cpp)\n    list(APPEND HEADERS RPRendererDMAOpenGL.h)\n  endif()\n\n  if(TARGET ${APP_NAME_LC}::OpenGLES)\n    list(APPEND SOURCES RPRendererDMAOpenGLES.cpp)\n    list(APPEND HEADERS RPRendererDMAOpenGLES.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Peripherals Add-ons\nDESCRIPTION: Defines the list of C++ source files for peripheral add-on functionality including button mapping and input handling components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/addons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AddonButtonMap.cpp\n            AddonButtonMapping.cpp\n            AddonInputHandling.cpp\n            PeripheralAddon.cpp\n            PeripheralAddonTranslator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC GUI Info Library in CMake\nDESCRIPTION: This CMake snippet sets the SOURCES variable with a list of C++ source files for the GUI Info library. These files implement various GUI information providers and helpers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/guiinfo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIInfo.cpp\n            GUIInfoHelper.cpp\n            GUIInfoProviders.cpp\n            GUIInfoLabel.cpp\n            GUIInfoBool.cpp\n            GUIInfoColor.cpp\n            AddonsGUIInfo.cpp\n            GamesGUIInfo.cpp\n            GUIControlsGUIInfo.cpp\n            LibraryGUIInfo.cpp\n            MusicGUIInfo.cpp\n            PicturesGUIInfo.cpp\n            PlayerGUIInfo.cpp\n            SkinGUIInfo.cpp\n            SystemGUIInfo.cpp\n            VideoGUIInfo.cpp\n            VisualisationGUIInfo.cpp\n            WeatherGUIInfo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Games Controller Input Library\nDESCRIPTION: Creates the games controller input library using the defined source and header files through a custom core_add_library command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(games_controller_input)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Settings Windows Library in CMake\nDESCRIPTION: Creates a core library named 'settings_windows' that will contain all the settings windows components defined in the source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(settings_windows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Power Management Sources in CMake\nDESCRIPTION: CMake configuration that defines source files, headers and creates a library for Android power management functionality in XBMC/Kodi. Sets up the core library build for platform-specific power management features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AndroidPowerSyscall.cpp)\n\nset(HEADERS AndroidPowerSyscall.h)\n\ncore_add_library(platform_android_powermanagement)\n```\n\n----------------------------------------\n\nTITLE: Building DVD Subtitles Library in CMake\nDESCRIPTION: Creates the DVD subtitles library using XBMC's core_add_library function with the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDSubtitles/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(dvdsubtitles)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Platform Headers in CMake\nDESCRIPTION: Conditionally sets up Android system headers when building for Android platform and adds them to the Kodi development kit. The configuration uses CMake generator expressions to check the target platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/platform/android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  $<$<STREQUAL:${CORE_SYSTEM_NAME},android>:System.h>\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_platform_android)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebVTT Subtitle Handler Sources\nDESCRIPTION: CMake configuration that sets up source files, header files and creates a library target for WebVTT subtitle handling. Includes core WebVTT handler and ISO handler components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDSubtitles/webvtt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES WebVTTHandler.cpp\n            WebVTTISOHandler.cpp)\n\nset(HEADERS WebVTTHandler.h\n            WebVTTISOHandler.h)\n\ncore_add_library(subtitles_webvtt)\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM Library Sources in CMake\nDESCRIPTION: Defines source files, header files and creates a DRM library target using CMake build system. Sets up core files needed for the cryptography session handling in the DRM implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/media/drm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CryptoSession.cpp)\n\nset(HEADERS CryptoSession.h)\n\ncore_add_library(drm)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Thread Implementation Sources and Library in CMake\nDESCRIPTION: Sets up source and header files for Linux thread implementation and adds them as a library target. The configuration specifies ThreadImplLinux.cpp as the source file and ThreadImplLinux.h as the header file, then creates a platform-specific library called 'platform_linux_threads'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/threads/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ThreadImplLinux.cpp)\nset(HEADERS ThreadImplLinux.h)\n\ncore_add_library(platform_linux_threads)\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Input Library to XBMC Core in CMake\nDESCRIPTION: Uses the core_add_library CMake function to add the keyboard input library to the XBMC project. This function is likely a custom CMake function defined in the XBMC build system to standardize library addition.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_keyboard_generic)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Video Database Directory\nDESCRIPTION: Defines the list of header files (.h) corresponding to the source files for the video database directory component. These headers declare the interfaces for directory node management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/VideoDatabaseDirectory/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS DirectoryNode.h\n            DirectoryNodeEpisodes.h\n            DirectoryNodeGrouped.h\n            DirectoryNodeInProgressTvShows.h\n            DirectoryNodeMovieAssetTypes.h\n            DirectoryNodeMovieAssets.h\n            DirectoryNodeMoviesOverview.h\n            DirectoryNodeMusicVideosOverview.h\n            DirectoryNodeOverview.h\n            DirectoryNodeRecentlyAddedEpisodes.h\n            DirectoryNodeRecentlyAddedMovies.h\n            DirectoryNodeRecentlyAddedMusicVideos.h\n            DirectoryNodeRoot.h\n            DirectoryNodeSeasons.h\n            DirectoryNodeTitleMovies.h\n            DirectoryNodeTitleMusicVideos.h\n            DirectoryNodeTitleTvShows.h\n            DirectoryNodeTvShowsOverview.h\n            QueryParams.h)\n```\n\n----------------------------------------\n\nTITLE: Defining UPnP Header Files in CMake\nDESCRIPTION: Defines the list of C++ header files for the UPnP library component. These headers declare the interfaces for the UPnP functionality corresponding to the implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/upnp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS UPnP.h\n            UPnPInternal.h\n            UPnPPlayer.h\n            UPnPRenderer.h\n            UPnPServer.h\n            UPnPSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Creating Kodi IPK Package for webOS\nDESCRIPTION: This command creates an IPK package of Kodi for distribution on webOS devices. It uses the 'ipk' target generated by CMake.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake ipk\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 Process Info Sources and Headers in CMake\nDESCRIPTION: This CMake snippet defines the source and header files for the X11 process information module and adds it as a library to the XBMC core. It specifies 'ProcessInfoX11.cpp' as the source file and 'ProcessInfoX11.h' as the header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/X11/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ProcessInfoX11.cpp)\n\nset(HEADERS ProcessInfoX11.h)\n\ncore_add_library(processX11)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Favourites Library\nDESCRIPTION: Adds the favourites component as a core library in the XBMC build system\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/favourites/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(favourites)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Network Module Files in CMake\nDESCRIPTION: This CMake script defines the source and header files required for building the iOS network interface module. It lists NetworkIOS.mm as the source file, and includes NetworkIOS.h and route.h as header files. The script adds these to the platform_ios_network library target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios-common/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES NetworkIOS.mm)\n\nset(HEADERS NetworkIOS.h\n            route.h)\n\ncore_add_library(platform_ios_network)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Windows 10 Store App\nDESCRIPTION: Defines the source files needed for Windows 10 Store App windowing implementation including event handling, system management and DirectX integration\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/win10/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES WinEventsWin10.cpp\n            WinSystemWin10.cpp\n            WinSystemWin10DX.cpp\n            ../windows/VideoSyncD3D.cpp)\n```\n\n----------------------------------------\n\nTITLE: Switching Between Git Branches\nDESCRIPTION: Commands for moving between different branches in your git repository. This allows you to work on different features independently.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <feature-branch> // switch to feature branch\ngit checkout master           // switch back to master branch\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGLES Render Buffer Components\nDESCRIPTION: Conditionally appends OpenGLES-specific render buffer implementations when OpenGLES support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES RenderBufferOpenGLES.cpp\n                      RenderBufferPoolOpenGLES.cpp)\n  list(APPEND HEADERS RenderBufferOpenGLES.h\n                      RenderBufferPoolOpenGLES.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Playlists\nDESCRIPTION: Defines the list of source (.cpp) files that comprise the playlists module implementation, including support for various playlist formats and smart playlists.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/playlists/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PlayList.cpp\n            PlayListASX.cpp\n            PlayListB4S.cpp\n            PlayListFactory.cpp\n            PlayListFileItemClassify.cpp\n            PlayListM3U.cpp\n            PlayListPLS.cpp\n            PlayListRAM.cpp\n            PlayListURL.cpp\n            PlayListWPL.cpp\n            PlayListXML.cpp\n            PlayListXSPF.cpp\n            SmartPlayList.cpp\n            SmartPlaylistFileItemListModifier.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Weather Library to XBMC Core Build in CMake\nDESCRIPTION: Calls the core_add_library function to add the weather library to the XBMC core build. This ensures that the weather module is compiled and linked as part of the main XBMC application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/weather/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(weather)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for paplayer in CMake\nDESCRIPTION: Sets up a list of source files for the paplayer component, including audio decoder, codec factory, and video player codec implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/paplayer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AudioDecoder.cpp\n            CodecFactory.cpp\n            PAPlayer.cpp\n            VideoPlayerCodec.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Playlists Library to XBMC Build\nDESCRIPTION: Adds the playlists component as a core library to the XBMC/Kodi build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/playlists/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(playlists)\n```\n\n----------------------------------------\n\nTITLE: Conditional Bluray Support Configuration\nDESCRIPTION: Adds Bluray-related source and header files when Bluray support is enabled in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Bluray)\n  list(APPEND SOURCES BlurayCallback.cpp\n                      BlurayDirectory.cpp\n                      BlurayFile.cpp)\n  list(APPEND HEADERS BlurayCallback.h\n                      BlurayDirectory.h\n                      BlurayFile.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Android Filesystem Library to XBMC Core\nDESCRIPTION: Calls a custom CMake function 'core_add_library' to add the Android filesystem components as a library to the XBMC project. This integrates the Android-specific filesystem handling into the core XBMC build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/filesystem/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_android_filesystem)\n```\n\n----------------------------------------\n\nTITLE: Conditional Optical Drive Support\nDESCRIPTION: Adds Autorun source and header files when optical drive support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  list(APPEND SOURCES Autorun.cpp)\n  list(APPEND HEADERS Autorun.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Storage Provider Sources and Headers in CMake\nDESCRIPTION: Defines the source and header files for the iOS storage provider. It sets up the SOURCES variable with the implementation file and the HEADERS variable with the header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios-common/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES IOSStorageProvider.mm)\n\nset(HEADERS IOSStorageProvider.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Win32 Storage Provider Sources in CMake\nDESCRIPTION: Configures the source files, headers and builds the Windows storage provider library for XBMC/Kodi. Sets up the main source file, header file and creates the platform-specific storage library using core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Win32StorageProvider.cpp)\n\nset(HEADERS Win32StorageProvider.h)\n\ncore_add_library(platform_win32_storage)\n```\n\n----------------------------------------\n\nTITLE: Directory Mapping for Kodi Addon Development Kit\nDESCRIPTION: Mapping between physical filesystem paths and their corresponding build system identifiers for the Kodi addon development kit. Each line pairs a filesystem path with its build system identifier.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/common/addon_dev_kit.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxbmc/addons/kodi-dev-kit/include/kodi addons_kodi-dev-kit_include_kodi\nxbmc/addons/kodi-dev-kit/include/kodi/c-api addons_kodi-dev-kit_include_kodi_c-api\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/platform addons_kodi-dev-kit_include_kodi_c-api_platform\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/platform/android addons_kodi-dev-kit_include_kodi_c-api_platform_android\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance addons_kodi-dev-kit_include_kodi_c-api_addon-instance\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/inputstream addons_kodi-dev-kit_include_kodi_c-api_addon-instance_inputstream\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/pvr addons_kodi-dev-kit_include_kodi_c-api_addon-instance_pvr\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/gui addons_kodi-dev-kit_include_kodi_c-api_gui\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/dialogs addons_kodi-dev-kit_include_kodi_c-api_gui_dialogs\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/controls addons_kodi-dev-kit_include_kodi_c-api_gui_controls\nxbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/input addons_kodi-dev-kit_include_kodi_c-api_gui_input\nxbmc/addons/kodi-dev-kit/include/kodi/platform addons_kodi-dev-kit_include_kodi_platform\nxbmc/addons/kodi-dev-kit/include/kodi/platform/android addons_kodi-dev-kit_include_kodi_platform_android\nxbmc/addons/kodi-dev-kit/include/kodi/addon-instance addons_kodi-dev-kit_include_kodi_addon-instance\nxbmc/addons/kodi-dev-kit/include/kodi/addon-instance/peripheral addons_kodi-dev-kit_include_kodi_addon-instance_peripheral\nxbmc/addons/kodi-dev-kit/include/kodi/addon-instance/inputstream addons_kodi-dev-kit_include_kodi_addon-instance_inputstream\nxbmc/addons/kodi-dev-kit/include/kodi/addon-instance/pvr addons_kodi-dev-kit_include_kodi_addon-instance_pvr\nxbmc/addons/kodi-dev-kit/include/kodi/gui addons_kodi-dev-kit_include_kodi_gui\nxbmc/addons/kodi-dev-kit/include/kodi/gui/dialogs addons_kodi-dev-kit_include_kodi_gui_dialogs\nxbmc/addons/kodi-dev-kit/include/kodi/gui/controls addons_kodi-dev-kit_include_kodi_gui_controls\nxbmc/addons/kodi-dev-kit/include/kodi/gui/input addons_kodi-dev-kit_include_kodi_gui_input\nxbmc/addons/kodi-dev-kit/include/kodi/gui/gl addons_kodi-dev-kit_include_kodi_gui_gl\nxbmc/addons/kodi-dev-kit/include/kodi/tools addons_kodi-dev-kit_include_kodi_tools\n```\n\n----------------------------------------\n\nTITLE: Library Compilation Settings\nDESCRIPTION: Finalizes library configuration and adds SSE2 compilation options for non-Windows platforms when available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(utils)\n\nif(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  if(HAVE_SSE2)\n    target_compile_options(${CORE_LIBRARY} PRIVATE -msse2)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Input Windows Library in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of header files for the input_windows library. Includes IRServerSuite.h and IrssMessage.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IRServerSuite.h\n            IrssMessage.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Info Tag Sources in CMake\nDESCRIPTION: CMake configuration that defines source files, headers and builds a game tags library. Sets up the compilation units for the game information tagging system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/tags/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GameInfoTag.cpp)\n\nset(HEADERS GameInfoTag.h)\n\ncore_add_library(gametags)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Peripherals Build Sources in CMake\nDESCRIPTION: Defines the source files, header files and creates a library target for Android peripheral handling components. Includes joystick state management, translation, and peripheral bus implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AndroidJoystickState.cpp\n            AndroidJoystickTranslator.cpp\n            PeripheralBusAndroid.cpp)\n\nset(HEADERS AndroidJoystickState.h\n            AndroidJoystickTranslator.h\n            PeripheralBusAndroid.h)\n\ncore_add_library(platform_android_peripherals)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Input Keymaps and Joysticks Module\nDESCRIPTION: Sets the HEADERS variable with a list of header files corresponding to the source files for the input keymaps and joysticks module. These headers declare the interfaces for gamepad translation, joystick mapping, and keymap handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/joysticks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GamepadTranslator.h\n            JoystickMapper.h\n            KeymapHandler.h\n            KeymapHandling.h\n)\n```\n\n----------------------------------------\n\nTITLE: Const Modifier Usage - C++\nDESCRIPTION: Examples of proper const placement before type declarations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Test(const std::string& a);\nconst int* const someIntPointer;\n```\n\n----------------------------------------\n\nTITLE: Defining Target Platform Macros for XBMC Darwin Build\nDESCRIPTION: Compiler definitions that specify the target platform as POSIX-compliant Darwin OSX system. These macros are used during the build process to enable platform-specific code paths.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/osx/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: make\nCODE:\n```\n-DTARGET_POSIX -DTARGET_DARWIN -DTARGET_DARWIN_OSX\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Addon Library to Build System\nDESCRIPTION: Adds the addon system as a core library to the XBMC/Kodi build system using a custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(addons)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Image Metadata Library in CMake\nDESCRIPTION: Specifies the header files for the image metadata library. This includes files for Exif, general image metadata, the metadata parser, and IPTC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/metadata/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Exif.h\n            ImageMetadata.h\n            ImageMetadataParser.h\n            Iptc.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Win10 Power Management Sources and Headers in CMake\nDESCRIPTION: Defines the source and header files for Win10 power management. It sets up two source files (Win10PowerSyscall.cpp and WinIdleTimer.cpp) and one header file (Win10PowerSyscall.h).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Win10PowerSyscall.cpp\n            WinIdleTimer.cpp)\n\nset(HEADERS Win10PowerSyscall.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Storage Provider Sources and Dependencies\nDESCRIPTION: Sets up source and header files for Linux storage providers with conditional inclusion of DBus and UDEV-specific components. Creates a platform_linux_storage library when sources are available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES LinuxStorageProvider.cpp)\n\nset(HEADERS LinuxStorageProvider.h)\n\nif(TARGET ${APP_NAME_LC}::DBus)\n  list(APPEND SOURCES UDisksProvider.cpp\n                      UDisks2Provider.cpp)\n  list(APPEND HEADERS UDisksProvider.h\n                      UDisks2Provider.h)\nendif()\n\nif(TARGET ${APP_NAME_LC}::UDEV)\n  list(APPEND SOURCES UDevProvider.cpp)\n  list(APPEND HEADERS UDevProvider.h)\nendif()\n\nif(SOURCES)\n  core_add_library(platform_linux_storage)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding DBus-related Files in CMake for Linux Windowing\nDESCRIPTION: Checks if the DBus target is available. If so, adds the OSScreenSaverFreedesktop source and header files to the respective lists.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::DBus)\n  list(APPEND SOURCES OSScreenSaverFreedesktop.cpp)\n  list(APPEND HEADERS OSScreenSaverFreedesktop.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS VTB Sources\nDESCRIPTION: Adds VideoToolbox renderer source files for macOS when OpenGL is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL osx)\n  if(TARGET ${APP_NAME_LC}::OpenGl)\n    list(APPEND SOURCES RendererVTBGL.cpp)\n    list(APPEND HEADERS RendererVTBGL.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building the Picture Module Library in CMake\nDESCRIPTION: Registers the pictures module as a core library to be built with all the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pictures)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for XBMC Music Dialogs in CMake\nDESCRIPTION: This snippet adds a core library named 'music_dialogs' to the XBMC project. It likely compiles the previously defined source files into a library that can be linked with other parts of the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(music_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Configuring DVD Codec Sources in CMake\nDESCRIPTION: Sets the source files for the DVD codec library. Includes two main source files: DVDCodecUtils.cpp and DVDFactoryCodec.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DVDCodecUtils.cpp\n            DVDFactoryCodec.cpp)\n```\n\n----------------------------------------\n\nTITLE: Compiling WiiRemote Integration for XBMC\nDESCRIPTION: Command to compile the WiiRemote support executable. Requires libcwiid and libbluetooth dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ng++ WiiRemote.cpp -lcwiid -o WiiRemote\n```\n\n----------------------------------------\n\nTITLE: Adding TVOS Platform Library in CMake\nDESCRIPTION: Uses the core_add_library CMake function to create a library target named 'platform_tvos' from the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_tvos)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Input Actions Source Files in CMake\nDESCRIPTION: Defines the source files and header files needed to build the XBMC input actions module. Sets up source files including Action.cpp and ActionTranslator.cpp, header files including Action.h, ActionIDs.h and ActionTranslator.h, and creates a library target named input_actions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/actions/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Action.cpp\n            ActionTranslator.cpp\n)\n\nset(HEADERS Action.h\n            ActionIDs.h\n            ActionTranslator.h\n)\n\ncore_add_library(input_actions)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific Renderer Files in CMake\nDESCRIPTION: Conditionally appends Windows-specific renderer files to the source and header lists if the target system is Windows.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows)\n  list(APPEND SOURCES RPWinRenderer.cpp)\n  list(APPEND HEADERS RPWinRenderer.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Agent Source Files in CMake\nDESCRIPTION: Defines the C++ source files for the games input agent system, including implementations for controller, joystick, keyboard, and mouse agents.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/agents/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AgentController.cpp\n            AgentInput.cpp\n            AgentJoystick.cpp\n            AgentKeyboard.cpp\n            AgentMouse.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Windows 10 Platform Header Files\nDESCRIPTION: Defines the list of header files required for the Windows 10 platform implementation, including platform-specific headers and Win32 shared headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AsyncHelpers.h\n            CPUInfoWin10.h\n            GPUInfoWin10.h\n            input/RemoteControlXbox.h\n            Win10App.h\n            PlatformWin10.h\n            ../win32/CharsetConverter.h\n            ../win32/dirent.h\n            ../win32/dxerr.h\n            ../win32/my_ntddcdrm.h\n            ../win32/my_ntddscsi.h\n            ../win32/netdb.h\n            ../win32/pch.h\n            ../win32/PlatformDefs.h\n            ../win32/resource.h\n            ../win32/unistd.h\n            ../win32/WIN32Util.h)\n```\n\n----------------------------------------\n\nTITLE: Creating OSX Platform Library\nDESCRIPTION: Creates the core platform library for OSX using the configured source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_osx)\n```\n\n----------------------------------------\n\nTITLE: Defining Windows Desktop Build Directives for C/C++ Compilation\nDESCRIPTION: This snippet contains C/C++ preprocessor directives used when building XBMC/Kodi for Windows desktop targets. It defines target platform as Windows desktop, prevents standard library min/max macros from interfering with std::min/max, and suppresses CRT secure function warnings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/windows/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n-DTARGET_WINDOWS -DTARGET_WINDOWS_DESKTOP -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS\n```\n\n----------------------------------------\n\nTITLE: Setting GBM Source Files in CMake for XBMC/Kodi\nDESCRIPTION: Defines a list of source files for the GBM windowing system, including core components and utility classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES OptionalsReg.cpp\n            WinSystemGbm.cpp\n            VideoSyncGbm.cpp\n            GBMUtils.cpp\n            WinSystemGbmEGLContext.cpp\n            GBMDPMSSupport.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Dialog Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for game-related dialog components that handle various aspects of the gaming interface including OSD, video settings, and save game management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/dialogs/osd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DialogGameAdvancedSettings.cpp\n            DialogGameOSD.cpp\n            DialogGameOSDHelp.cpp\n            DialogGameSaves.cpp\n            DialogGameStretchMode.cpp\n            DialogGameVideoFilter.cpp\n            DialogGameVideoRotation.cpp\n            DialogGameVideoSelect.cpp\n            DialogGameVolume.cpp\n            DialogInGameSaves.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video GUI Library Sources and Headers in CMake\nDESCRIPTION: Configures the build system by defining source files and headers for the video GUI library component. Sets up variables for source files related to video action processing, GUI utilities, and stream selection. Adds these components as a core library named 'video_guilib'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/guilib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES VideoActionProcessorBase.cpp\n            VideoGUIUtils.cpp\n            VideoPlayActionProcessor.cpp\n            VideoSelectActionProcessor.cpp\n            VideoStreamSelectHelper.cpp)\n\nset(HEADERS VideoAction.h\n            VideoActionProcessorBase.h\n            VideoGUIUtils.h\n            VideoPlayActionProcessor.h\n            VideoSelectActionProcessor.h\n            VideoStreamSelectHelper.h)\n\ncore_add_library(video_guilib)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Keyboard Input\nDESCRIPTION: Defines the header files (.h) required for keyboard input mapping functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/keyboard/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS KeyboardActionMap.h\n            KeyboardTranslator.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Win10 Power Management Library in CMake\nDESCRIPTION: Adds the Win10 power management functionality as a core library in the XBMC project. This library will be compiled using the previously defined sources and headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/powermanagement/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_win10_powermanagement)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC GUI Info Library in CMake\nDESCRIPTION: This CMake snippet sets the HEADERS variable with a list of C++ header files for the GUI Info library. These headers declare the interfaces and classes for various GUI information providers and helpers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/guiinfo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIInfo.h\n            GUIInfoHelper.h\n            GUIInfoLabels.h\n            GUIInfoProvider.h\n            GUIInfoProviders.h\n            GUIInfoLabel.h\n            GUIInfoBool.h\n            GUIInfoColor.h\n            IGUIInfoProvider.h\n            AddonsGUIInfo.h\n            GamesGUIInfo.h\n            GUIControlsGUIInfo.h\n            LibraryGUIInfo.h\n            MusicGUIInfo.h\n            PicturesGUIInfo.h\n            PlayerGUIInfo.h\n            SkinGUIInfo.h\n            SystemGUIInfo.h\n            VideoGUIInfo.h\n            VisualisationGUIInfo.h\n            WeatherGUIInfo.h)\n```\n\n----------------------------------------\n\nTITLE: Building a Group of Binary Addons for Kodi on webOS\nDESCRIPTION: This command builds a group of binary addons for Kodi using a wildcard pattern. In this example, it builds all addons starting with 'pvr.'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=$HOME/kodi/build/tools/webOS/packaging ADDONS=\"pvr.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Control Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for GUI control components including buttons, labels, sliders, and other UI elements.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/controls/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Button.cpp\n            Edit.cpp\n            FadeLabel.cpp\n            Image.cpp\n            Label.cpp\n            Progress.cpp\n            RadioButton.cpp\n            Rendering.cpp\n            SettingsSlider.cpp\n            Slider.cpp\n            Spin.cpp\n            TextBox.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for PVR Channels Library in CMake\nDESCRIPTION: This snippet lists all the header (.h) files required for the PVR channels library. It includes declarations for channel-related classes and interfaces.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/channels/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PVRChannel.h\n            PVRChannelGroup.h\n            PVRChannelGroupAllChannels.h\n            PVRChannelGroupFactory.h\n            PVRChannelGroupAllChannelsSingleClient.h\n            PVRChannelGroupFromClient.h\n            PVRChannelGroupFromUser.h\n            PVRChannelGroupMember.h\n            PVRChannelGroupMergedByName.h\n            PVRChannelGroupSettings.h\n            PVRChannelGroups.h\n            PVRChannelGroupsContainer.h\n            PVRChannelNumber.h\n            PVRRadioRDSInfoTag.h\n            PVRChannelsPath.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Peripheral Bus Sources in CMake for XBMC Windows Platform\nDESCRIPTION: Sets up the source files, header files, and core library for the USB peripheral bus functionality in XBMC's Windows platform. It defines the necessary files and creates a library target for the Windows-specific peripheral implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PeripheralBusUSB.cpp)\n\nset(HEADERS PeripheralBusUSB.h)\n\ncore_add_library(platform_win32_peripherals)\n```\n\n----------------------------------------\n\nTITLE: Configuring DRM PRIME Sources\nDESCRIPTION: Adds DRM PRIME renderer source files for GBM and Wayland platforms with optional GLES support.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC OR \"wayland\" IN_LIST CORE_PLATFORM_NAME_LC)\n  if(\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC)\n    list(APPEND SOURCES RendererDRMPRIME.cpp\n                        VideoLayerBridgeDRMPRIME.cpp)\n    list(APPEND HEADERS RendererDRMPRIME.h\n                        VideoLayerBridgeDRMPRIME.h)\n  endif()\n\n  if(TARGET ${APP_NAME_LC}::OpenGLES)\n    list(APPEND SOURCES RendererDRMPRIMEGLES.cpp\n                        DRMPRIMEEGL.cpp)\n    list(APPEND HEADERS RendererDRMPRIMEGLES.h\n                        DRMPRIMEEGL.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings for Windows Users\nDESCRIPTION: Windows-specific git configuration for handling line endings. This ensures proper text file compatibility across different operating systems.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf true\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Windowing Library\nDESCRIPTION: Creates a library target for the Windows windowing system components using core add library functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windowing_windows)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Wrapper Configuration\nDESCRIPTION: Configures wrapper library build settings with platform-specific handling for Apple, Windows, and other systems. Includes symbol wrapping and linking definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/exports/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  add_library(wrapper OBJECT wrapper.c)\n  add_custom_target(wrapper.def ALL ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/wrapper_mach_alias wrapper.def)\n  set_target_properties(wrapper PROPERTIES FOLDER \"Build Utilities\")\n  set_target_properties(wrapper.def PROPERTIES FOLDER \"Build Utilities\")\n  add_dependencies(wrapper.def wrapper)\nelseif(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  add_options(C ALL_BUILDS \"-fPIC\")\n  add_library(wrapper OBJECT wrapper.c)\n\n  if(USE_LTO)\n    add_custom_target(wrapper.def ALL ${CMAKE_NM} ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/wrapper.dir/wrapper.c.o | grep __wrap | awk '{ printf(\"%s \", $$3) }' | sed \"s/^/${CMAKE_C_COMPILE_OPTIONS_IPO} /\" | sed \"s/___wrap_/__wrap_/g\" | sed \"s/__wrap_/-Wl,-wrap,/g\" > wrapper.def && test -s wrapper.def)\n  else()\n    add_custom_target(wrapper.def ALL ${CMAKE_NM} ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/wrapper.dir/wrapper.c.o | grep __wrap | awk '{ printf(\"%s \", $$3) }' | sed \"s/___wrap_/__wrap_/g\" | sed \"s/__wrap_/-Wl,-wrap,/g\" > wrapper.def && test -s wrapper.def)\n  endif()\n\n  if(CORE_SYSTEM_NAME STREQUAL android)\n    add_custom_command(TARGET wrapper.def COMMAND echo \"-L${DEPENDS_PATH}/lib/dummy-lib${APP_NAME_LC} -l${APP_NAME_LC}\" >> wrapper.def)\n  endif()\n\n  set_target_properties(wrapper PROPERTIES FOLDER \"Build Utilities\")\n  set_target_properties(wrapper.def PROPERTIES FOLDER \"Build Utilities\")\n  add_dependencies(wrapper.def wrapper)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Video Renderers Library in CMake for Windows\nDESCRIPTION: Uses a custom CMake function 'core_add_library' to add the video renderers as a library specifically for the Windows platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(videorenderers-windows)\n```\n\n----------------------------------------\n\nTITLE: Source Files Configuration for UPnP Library\nDESCRIPTION: Defines the core source files for the UPnP library from Platinum and Neptune frameworks, including core components and media server/renderer implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Platinum/Source/Core/PltAction.cpp\n            Platinum/Source/Core/PltArgument.cpp\n            [... shortened for brevity ...]\n            Neptune/Source/System/Posix/NptPosixEnvironment.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Controller GUI Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for the game controller GUI components, including various button types and controller features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/guicontrols/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUICardinalFeatureButton.cpp\n            GUIControllerButton.cpp\n            GUIFeatureButton.cpp\n            GUIFeatureControls.cpp\n            GUIFeatureFactory.cpp\n            GUIFeatureTranslator.cpp\n            GUIGameController.cpp\n            GUIGameControllerList.cpp\n            GUIScalarFeatureButton.cpp\n            GUISelectKeyButton.cpp\n            GUIThrottleButton.cpp\n            GUIWheelButton.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Input Sources and Headers in CMake\nDESCRIPTION: Defines source files and header files for remote control input translation components. Sets up the CustomControllerTranslator and IRTranslator implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/remote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CustomControllerTranslator.cpp\n            IRTranslator.cpp\n)\n\nset(HEADERS CustomControllerTranslator.h\n            IRTranslator.h\n)\n\ncore_add_library(input_keymaps_remote)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Settings Library in CMake\nDESCRIPTION: This snippet lists the source files (.cpp) to be included in the XBMC settings library. It uses the CMake 'set' command to define a variable named SOURCES with a list of C++ source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ISetting.cpp\n            ISettingControl.cpp\n            Setting.cpp\n            SettingCategoryAccess.cpp\n            SettingConditions.cpp\n            SettingDependency.cpp\n            SettingRequirement.cpp\n            SettingSection.cpp\n            SettingsManager.cpp\n            SettingUpdate.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Video Dialogs Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the video_dialogs library to the project. This function likely handles the compilation and linking of the specified source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/dialogs/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(video_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Creating RetroPlayer Savestates Library Target\nDESCRIPTION: Creates the core library target for RetroPlayer savestates and sets up its dependencies. Uses the core_add_library utility function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/savestates/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(retroplayer_savestates)\n\nset(DEPENDS retroplayer_messages)\n```\n\n----------------------------------------\n\nTITLE: Configuring DVD Subtitles Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for the DVD subtitles library. Includes various subtitle parsers and processing components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDSubtitles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DVDFactorySubtitle.cpp\n            DVDSubtitleLineCollection.cpp\n            DVDSubtitleParserMicroDVD.cpp\n            DVDSubtitleParserMPL2.cpp\n            DVDSubtitleParserSami.cpp\n            DVDSubtitleParserSubrip.cpp\n            DVDSubtitleParserVplayer.cpp\n            DVDSubtitleStream.cpp\n            DVDSubtitlesLibass.cpp\n            DVDSubtitleParserSSA.cpp\n            DVDSubtitleTagMicroDVD.cpp\n            DVDSubtitleTagSami.cpp\n            SubtitleParserWebVTT.cpp\n            SubtitlesAdapter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Storage Provider Library in CMake\nDESCRIPTION: Adds the iOS storage provider as a core library to the XBMC project using the core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios-common/storage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_ios_storage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Addon GUI in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for the addon GUI component. These files contain implementations for various GUI dialogs and windows related to addons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/gui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogAddonInfo.cpp\n            GUIDialogAddonSettings.cpp\n            GUIHelpers.cpp\n            GUIViewStateAddonBrowser.cpp\n            GUIWindowAddonBrowser.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Dialog Library in CMake\nDESCRIPTION: Creates a core library named 'gameosddialogs' that includes all the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/dialogs/osd/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(gameosddialogs)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Dialogs Library in CMake for XBMC\nDESCRIPTION: Calls the core_add_library function to add the 'gamedialogs' library to the XBMC project. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(gamedialogs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Dialog Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for controller-related dialog components including installer, selection, axis detection, button capture, and input ignore functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ControllerInstaller.cpp\n            ControllerSelect.cpp\n            GUIDialogAxisDetection.cpp\n            GUIDialogButtonCapture.cpp\n            GUIDialogIgnoreInput.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Input Sources and Headers in CMake\nDESCRIPTION: Defines the source files and header files needed for the mouse input system, followed by registering them as a core library. Includes files for mouse state tracking, event handling, and input translation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/mouse/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES MouseStat.cpp\n            MouseTranslator.cpp\n)\n\nset(HEADERS MouseEvent.h\n            MouseStat.h\n            MouseTranslator.h\n            MouseTypes.h\n)\n\ncore_add_library(input_mouse)\n```\n\n----------------------------------------\n\nTITLE: GPL-2.0-or-later License Identifier\nDESCRIPTION: SPDX license identifier tag that should be included in source code comments to indicate the use of GPL-2.0-or-later license.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/metadata.themoviedb.org.python/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSPDX-License-Identifier: GPL-2.0-or-later\n```\n\n----------------------------------------\n\nTITLE: Building All Binary Addons for Kodi on webOS\nDESCRIPTION: This command builds all available binary addons for Kodi. It uses make with parallel processing and specifies the output directory for the built addons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN) -C tools/depends/target/binary-addons PREFIX=$HOME/kodi/build/tools/webOS/packaging\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Sources and Headers for XBMC Skin Timer\nDESCRIPTION: Defines the source and header files for the XBMC skin timer functionality. Configures the build system to include the necessary files and creates a core library named 'addons_gui_skin'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/gui/skin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES SkinTimer.cpp\n            SkinTimerManager.cpp)\n\nset(HEADERS SkinTimer.h\n            SkinTimerManager.h)\n\ncore_add_library(addons_gui_skin)\n```\n\n----------------------------------------\n\nTITLE: Adding DVD Overlay Codecs Library in CMake\nDESCRIPTION: This snippet adds the DVD overlay codecs as a library to the XBMC project using the core_add_library function. It creates a library named 'dvdoverlaycodecs' using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Overlay/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(dvdoverlaycodecs)\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and License Header for XBMC Project in C++\nDESCRIPTION: This code snippet provides the standard copyright and license header used in XBMC (Kodi) project files. It includes the copyright notice, project website, and references the GPL-2.0-or-later license.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/license.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/*\n *  Copyright (C) 2005-2018 Team Kodi\n *  This file is part of Kodi - https://kodi.tv\n *\n *  SPDX-License-Identifier: GPL-2.0-or-later\n *  See LICENSES/README.md for more information.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring DACP Network Library Files and Registration in CMake\nDESCRIPTION: Defines the source and header files for the DACP (Digital Audio Control Protocol) network library and registers it as a core library in the build system using the core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/dacp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES dacp.cpp)\n\nset(HEADERS dacp.h)\n\ncore_add_library(network_dacp)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Files Configuration\nDESCRIPTION: Conditionally adds platform-specific source files based on the target system (Windows, Posix, Apple, FreeBSD).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES Neptune/Source/System/Posix/NptPosixSystem.cpp\n                      [... shortened for brevity ...]\n  if(APPLE)\n    list(APPEND SOURCES Neptune/Source/System/Apple/NptAppleAutoreleasePool.mm)\n    set_property(SOURCE Neptune/Source/System/Apple/NptAppleAutoreleasePool.mm APPEND_STRING PROPERTY COMPILE_OPTIONS \"-fno-objc-arc\")\n  else()\n    list(APPEND SOURCES Neptune/Source/System/Null/NptNullAutoreleasePool.cpp)\n  endif()\nelse()\n  list(APPEND SOURCES Neptune/Source/System/Win32/NptWin32Console.cpp\n                      [... shortened for brevity ...]\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding DBus Support Files\nDESCRIPTION: Checks if DBus support is enabled for the application and if so, appends the DBusMessage and DBusUtil files to the sources and headers lists. This provides D-Bus communication capabilities when DBus is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/freebsd/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::DBus)\n  list(APPEND SOURCES ../linux/DBusMessage.cpp\n                      ../linux/DBusUtil.cpp)\n  list(APPEND HEADERS ../linux/DBusMessage.h\n                      ../linux/DBusUtil.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source and Header Files for DLL Loader in CMake\nDESCRIPTION: Sets up the initial lists of source and header files for the DLL loader component. This includes core files like dll.cpp, DllLoaderContainer.cpp, and LibraryLoader.cpp along with their corresponding headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES dll.cpp\n            DllLoaderContainer.cpp\n            LibraryLoader.cpp)\n\nset(HEADERS dll.h\n            DllLoaderContainer.h\n            LibraryLoader.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR GUI Info Source Files in CMake\nDESCRIPTION: Defines the source files for PVR GUI information components including timer and times info implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/guilib/guiinfo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PVRGUIInfo.cpp\n            PVRGUITimerInfo.cpp\n            PVRGUITimesInfo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Test Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) for XBMC test components using CMake's set command. Includes headers for basic environment and utility functions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS TestBasicEnvironment.h\n            TestUtils.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Rendering\nDESCRIPTION: Defines the list of C++ source files that comprise the rendering system implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RenderContext.cpp\n            RenderSettings.cpp\n            RenderTranslator.cpp\n            RenderUtils.cpp\n            RenderVideoSettings.cpp\n            RPRenderManager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Profiles Library Target\nDESCRIPTION: Uses a custom CMake command core_add_library to create the profiles library target using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(profiles)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Weather Module in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of source files (.cpp) for the weather module. These files contain the implementation of weather-related functionality in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/weather/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIWindowWeather.cpp\n            WeatherJob.cpp\n            WeatherManager.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Video Database Directory Library\nDESCRIPTION: Creates a core library target named 'videodatabasedirectory' using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/VideoDatabaseDirectory/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(videodatabasedirectory)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for Windows 10 Build Environment\nDESCRIPTION: This configuration line specifies that the Python binaries from the Windows 10 architecture-specific build dependencies folder should be included in the system with their directory structure preserved.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/windowsstore/python.txt#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nproject/BuildDependencies/win10-${ARCH}/bin/Python KEEP_DIR_STRUCTURE system\n```\n\n----------------------------------------\n\nTITLE: Setting Video Window Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for video window components including fullscreen, navigation, playlist and item list modifier implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIWindowFullScreen.cpp\n            GUIWindowVideoBase.cpp\n            GUIWindowVideoNav.cpp\n            GUIWindowVideoPlaylist.cpp\n            VideoFileItemListModifier.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Input Keymaps and Joysticks Module\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for the input keymaps and joysticks module. These files handle gamepad translation, joystick mapping, and keymap handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/joysticks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GamepadTranslator.cpp\n            JoystickMapper.cpp\n            KeymapHandler.cpp\n            KeymapHandling.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: OpenGL/OpenGLES Common Components\nDESCRIPTION: Includes conversion matrix and tone mapping components when OpenGL or OpenGLES support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl OR TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES ConversionMatrix.cpp\n                      ToneMappers.cpp)\n  list(APPEND HEADERS ConversionMatrix.h\n                      ToneMappers.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Dialogs Library in XBMC CMake Configuration\nDESCRIPTION: This CMake command adds a library for the GUI dialogs interfaces in the XBMC project. It uses the previously defined source and header files to compile the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(addons_interfaces_gui_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Alias for Cherry-Pick Command\nDESCRIPTION: This example shows how to create a git alias 'ema' as a shorthand for the cherry-pick command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global --add alias.ema cherry-pick\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Game Dialogs in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of header files for game-related dialogs. These headers define interfaces and constants for game dialog components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DialogGameDefines.h\n            GUIDialogSelectGameClient.h\n            GUIDialogSelectSavestate.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Source Files in CMake\nDESCRIPTION: Defines the source files for the GUI components including GUITranslator, General, ListItem and Window implementations\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUITranslator.cpp\n            General.cpp\n            ListItem.cpp\n            Window.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Announcement System in CMake\nDESCRIPTION: Specifies the source files to be compiled for the announcement system module. Only includes the main AnnouncementManager.cpp implementation file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AnnouncementManager.cpp)\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Formatting in C++\nDESCRIPTION: Shows the proper formatting of try-catch blocks in C++ for the Kodi project. Braces go on new lines, and each catch clause is separated with a newline.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\ntry\n{\n  [...]\n}\ncatch (std::exception& e)\n{\n  [...]\n  throw;\n}\ncatch (...)\n{\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Keyboard Input Module in CMake\nDESCRIPTION: This snippet lists the header files (.h) that are part of the XBMC keyboard input module. These headers define the interfaces and data structures for keyboard-related functionality, including layouts, symbols, and key mappings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Key.h\n            KeyboardEasterEgg.h\n            KeyboardLayout.h\n            KeyboardLayoutManager.h\n            KeyboardStat.h\n            KeyboardSymbols.h\n            KeyboardTranslator.h\n            KeyboardTypes.h\n            KeyIDs.h\n            XBMC_keyboard.h\n            XBMC_keysym.h\n            XBMC_keytable.h\n            XBMC_vkeys.h\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Source Code\nDESCRIPTION: Commands for navigating to home directory and cloning the Kodi master branch repository\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Kodi Tools Module\nDESCRIPTION: Declares a list of header files that are part of the Kodi tools module, including utilities for DLL handling, timing, string manipulation, and threading.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  DllHelper.h\n  EndTime.h\n  StringUtils.h\n  Thread.h\n  Timer.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Retroplayer Playback Library in CMake\nDESCRIPTION: Uses the core_add_library function to add the retroplayer_playback library to the project. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/playback/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(retroplayer_playback)\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeBSD Network Implementation Files in CMake\nDESCRIPTION: Defines the source and header files for the FreeBSD network implementation and creates a platform-specific library. This CMake code specifies NetworkFreebsd.cpp as the source file and NetworkFreebsd.h as the header file, then creates a library named platform_freebsd_network.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/freebsd/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES NetworkFreebsd.cpp)\nset(HEADERS NetworkFreebsd.h)\n\ncore_add_library(platform_freebsd_network)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Music Dialogs in CMake\nDESCRIPTION: This snippet defines the source files for XBMC music-related dialogs. It includes files for info provider settings, music info, music OSD, song info, and visualisation preset list.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogInfoProviderSettings.cpp\n            GUIDialogMusicInfo.cpp\n            GUIDialogMusicOSD.cpp\n            GUIDialogSongInfo.cpp\n            GUIDialogVisualisationPresetList.cpp)\n```\n\n----------------------------------------\n\nTITLE: Packaging Kodi with xcodebuild\nDESCRIPTION: Creates a DMG package of Kodi using xcodebuild\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncd $HOME/kodi-build\nxcodebuild -target dmg\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for JSON Header Generation in CMake\nDESCRIPTION: Creates a custom build target named 'generate_json_header' that depends on the ServiceDescription.h file. This target ensures the header file is generated during the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(generate_json_header ALL\n                  DEPENDS ${CMAKE_BINARY_DIR}/${CORE_BUILD_DIR}/ServiceDescription.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Profiles Windows Library in CMake\nDESCRIPTION: Sets the HEADERS variable with the main header file for the profiles windows component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIWindowSettingsProfile.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Source and Header Files for DLL Exports\nDESCRIPTION: Defines the source and header files for DLL exports implementation including dummy and MSVCRT emulation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/exports/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES emu_dummy.cpp\n            emu_msvcrt.cpp)\n\nset(HEADERS emu_dummy.h\n            emu_msvcrt.h)\n\ncore_add_library(dllexports)\n```\n\n----------------------------------------\n\nTITLE: Configuring DVD Codec Headers in CMake\nDESCRIPTION: Defines the header files for the DVD codec library. Includes three header files: DVDCodecUtils.h, DVDCodecs.h, and DVDFactoryCodec.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DVDCodecUtils.h\n            DVDCodecs.h\n            DVDFactoryCodec.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for Kodi Addons Bootstrap\nDESCRIPTION: Initializes the CMake project for bootstrapping Kodi addons and sets up the module path and installation prefix.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\nproject(kodi-addons-bootstrap)\n\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\n# make sure CMAKE_INSTALL_PREFIX is properly set\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)\n  set(CMAKE_INSTALL_PREFIX \"${PROJECT_SOURCE_DIR}/../addons\")\nendif()\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})\n```\n\n----------------------------------------\n\nTITLE: Preserving JavaScript Interface for WebView in ProGuard\nDESCRIPTION: This ProGuard rule keeps all public members of a JavaScript interface class used with WebView. It's commented out by default and needs to be uncommented and configured with the specific class name when used.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/Source/Platform/Android/module/platinum/proguard-project.txt#2025-04-21_snippet_0\n\nLANGUAGE: ProGuard\nCODE:\n```\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n```\n\n----------------------------------------\n\nTITLE: Adding Power Management Library in CMake\nDESCRIPTION: Calls a custom CMake function (core_add_library) to add the power management module as a library. This function likely handles the compilation and linking of the specified source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/powermanagement/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(powermanagement)\n```\n\n----------------------------------------\n\nTITLE: Adding Generic Interface Library in CMake\nDESCRIPTION: Adds the configured source and header files as a core library module named 'generic_interface' to the XBMC/Kodi build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(generic_interface)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Input Keymaps in CMake\nDESCRIPTION: This snippet defines the list of source files for the XBMC input keymaps module. It includes various cpp files related to translators, button statistics, and keymap functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AppTranslator.cpp\n            ButtonStat.cpp\n            ButtonTranslator.cpp\n            Keymap.cpp\n            KeymapEnvironment.cpp\n            WindowKeymap.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Control Headers in CMake for XBMC\nDESCRIPTION: This CMake snippet defines a list of header files for various GUI controls used in the XBMC project. It includes headers for buttons, labels, images, sliders, and other UI elements. The headers are then added to the development kit if the HEADERS variable is not empty.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/controls/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  button.h\n  edit.h\n  fade_label.h\n  image.h\n  label.h\n  progress.h\n  radio_button.h\n  rendering.h\n  settings_slider.h\n  slider.h\n  spin.h\n  text_box.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_gui_controls)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Game Controller Windows in CMake\nDESCRIPTION: Defines the list of header files for the game controller windows component. Includes header files for configuration wizard, controller defines, controller list, controller window, feature list, and configuration window interface.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIConfigurationWizard.h\n            GUIControllerDefines.h\n            GUIControllerList.h\n            GUIControllerWindow.h\n            GUIFeatureList.h\n            IConfigurationWindow.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Dialog Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) corresponding to the PVR dialog components, matching the source files structure.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIDialogPVRChannelManager.h\n            GUIDialogPVRChannelsOSD.h\n            GUIDialogPVRGroupManager.h\n            GUIDialogPVRGuideInfo.h\n            GUIDialogPVRChannelGuide.h\n            GUIDialogPVRGuideControls.h\n            GUIDialogPVRGuideSearch.h\n            GUIDialogPVRRadioRDSInfo.h\n            GUIDialogPVRRecordingInfo.h\n            GUIDialogPVRRecordingSettings.h\n            GUIDialogPVRTimerSettings.h\n            GUIDialogPVRClientPriorities.h\n            GUIDialogPVRItemsViewBase.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Video Tag Loading in CMake\nDESCRIPTION: Sets up a list of source files for video tag extraction and loading components. Includes files for helper functions, factory pattern, and various tag loaders (FFmpeg, NFO, Plugin).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/tags/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES VideoTagExtractionHelper.cpp\n            VideoInfoTagLoaderFactory.cpp\n            VideoTagLoaderFFmpeg.cpp\n            VideoTagLoaderNFO.cpp\n            VideoTagLoaderPlugin.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Library Target\nDESCRIPTION: Creates a library target named addons_interfaces_gui using the core_add_library macro\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(addons_interfaces_gui)\n```\n\n----------------------------------------\n\nTITLE: Conditional Android Files Addition\nDESCRIPTION: Conditionally appends Android-specific source and header files when building for Android platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/builtins/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND SOURCES AndroidBuiltins.cpp)\n  list(APPEND HEADERS AndroidBuiltins.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Local Functions in Anonymous Namespace - C++\nDESCRIPTION: Shows how to properly declare local functions in anonymous namespace.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace\n{\n\nvoid test();\n\n} // unnamed namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi on Jailbroken tvOS\nDESCRIPTION: Command for installing the Kodi deb package on a jailbroken Apple TV device using dpkg\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndpkg -i <name of the deb file>\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Library to Build\nDESCRIPTION: Adds the PVR component as a core library to the build system using XBMC's custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(pvr)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Games Ports Input Library in CMake\nDESCRIPTION: Uses a custom CMake command 'core_add_library' to add the games ports input library to the XBMC project. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(games_ports_input)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Sources for Win10 Storage Provider\nDESCRIPTION: Sets up the source files, header files and creates a library target for the Windows 10 storage provider component. Includes the main implementation file and corresponding header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Win10StorageProvider.cpp)\n\nset(HEADERS Win10StorageProvider.h)\n\ncore_add_library(platform_win10_storage)\n```\n\n----------------------------------------\n\nTITLE: Defining Core Source Files for FreeBSD Support in XBMC\nDESCRIPTION: Sets up the base source files required for FreeBSD platform support. This includes platform-specific implementations for CPU info, GPU info, optional registrations, time utilities, memory utilities, and platform functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/freebsd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ../linux/AppParamParserLinux.cpp\n            CPUInfoFreebsd.cpp\n            GPUInfoFreebsd.cpp\n            OptionalsReg.cpp\n            ../linux/OptionalsReg.cpp\n            ../linux/TimeUtils.cpp\n            MemUtils.cpp\n            PlatformFreebsd.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining GUI API Headers in CMake for Kodi\nDESCRIPTION: This CMake snippet defines a list of header files for the Kodi GUI API. It includes definitions, general utilities, list item, and window-related headers. The code then conditionally adds these headers to the Kodi development kit if the HEADERS variable is not empty.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  definitions.h\n  general.h\n  list_item.h\n  window.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_gui)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating OSX Windowing Library in CMake\nDESCRIPTION: Creates a library target for the OSX windowing system implementation using the defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/osx/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windowing_osx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Joystick Input Library in CMake\nDESCRIPTION: This snippet defines the source files for the joystick input library. It includes files for driver receiving, feature handling, and input handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DriverReceiving.cpp\n            FeatureHandling.cpp\n            InputHandling.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Dialog Header Files in CMake\nDESCRIPTION: Defines the list of C++ header files corresponding to the controller dialog components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS ControllerInstaller.h\n            ControllerSelect.h\n            GUIDialogAxisDetection.h\n            GUIDialogButtonCapture.h\n            GUIDialogIgnoreInput.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC GUI Library in CMake\nDESCRIPTION: This snippet sets the HEADERS variable with the list of header files for the XBMC GUI utilities. It includes two header files corresponding to the previously defined source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/guilib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIBuiltinsUtils.h\n            GUIContentUtils.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC View Module in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of C++ header files for the XBMC view module. These headers declare the interfaces for GUI view control, view state, view database, and view state settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/view/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIViewControl.h\n            GUIViewState.h\n            ViewDatabase.h\n            ViewState.h\n            ViewStateSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Retroplayer Memory Library in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for the retroplayer memory library. This includes implementations for basic, delta pair, and linear memory streams.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/streams/memory/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES BasicMemoryStream.cpp\n            DeltaPairMemoryStream.cpp\n            LinearMemoryStream.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for XBMC Programs Module in CMake\nDESCRIPTION: Calls the core_add_library function to add the 'programs' library to the project. This likely compiles the source files into a library for use in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/programs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(programs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Music Library Source Files in CMake\nDESCRIPTION: Defines the source (.cpp) files for various music library jobs including progress tracking, cleaning, export, import and scanning operations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/jobs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES MusicLibraryJob.cpp\n            MusicLibraryProgressJob.cpp\n            MusicLibraryCleaningJob.cpp\n            MusicLibraryExportJob.cpp\n            MusicLibraryImportJob.cpp\n            MusicLibraryScanningJob.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Image Files Library in CMake for XBMC\nDESCRIPTION: This CMake command adds a library named 'imagefiles' to the XBMC project. It likely includes the previously defined SOURCES and HEADERS, creating a library for image file handling functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/imagefiles/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(imagefiles)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windowing System Header Files in CMake\nDESCRIPTION: Defines the list of header files for the windowing system component, including graphics context, screen saver, resolution, window events, and video sync interfaces.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GraphicContext.h\n            OSScreenSaver.h\n            Resolution.h\n            WinEvents.h\n            WindowSystemFactory.h\n            WinSystem.h\n            XBMC_events.h\n            VideoSync.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source and Header Files for Peripheral Bus Module in CMake\nDESCRIPTION: Sets up the source and header files for the peripheral bus module and adds it as a library in the XBMC/Kodi project. The module includes the main PeripheralBus implementation and USB-specific peripheral bus support.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/bus/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PeripheralBus.cpp)\n\nset(HEADERS PeripheralBus.h\n            PeripheralBusUSB.h)\n\ncore_add_library(peripherals_bus)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Samba Client Support in CMake\nDESCRIPTION: Adds Windows Service Discovery (WS-Discovery) header when Samba client support is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::SmbClient)\n  list(APPEND HEADERS IWSDiscovery.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Headers for Windows Platform in XBMC\nDESCRIPTION: Sets the header files for the Windows-specific network implementation. Includes NetworkWin32.h and WSDiscoveryWin32.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/network/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS NetworkWin32.h\n            WSDiscoveryWin32.h)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Settings Library in CMake\nDESCRIPTION: This snippet adds the settings library to the XBMC project using a custom CMake command 'core_add_library'. It specifies 'settings_lib' as the name of the library to be added.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/lib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(settings_lib)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Library Job Source Files in CMake\nDESCRIPTION: Sets up a list of source files for video library jobs. These files contain implementations for various video library operations such as cleaning, marking as watched, refreshing, scanning, and resetting resume points.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/jobs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES VideoLibraryCleaningJob.cpp\n            VideoLibraryJob.cpp\n            VideoLibraryMarkWatchedJob.cpp\n            VideoLibraryProgressJob.cpp\n            VideoLibraryRefreshingJob.cpp\n            VideoLibraryScanningJob.cpp\n            VideoLibraryResetResumePointJob.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Header Files in CMake\nDESCRIPTION: Defines the header files corresponding to the GUI component implementations\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUITranslator.h\n            General.h\n            ListItem.h\n            Window.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Info Interface Library in CMake\nDESCRIPTION: Defines the list of header files to be included in the info interface library. The headers correspond to the implementation files and include an additional Info.h header.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Info.h\n            InfoBool.h\n            InfoExpression.h\n            SkinVariable.h)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: Links required libraries to the WiiRemote target including system libraries, Bluetooth, and CWiid.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/WiiRemote/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${APP_NAME_LC}-wiiremote\n                      PRIVATE ${SYSTEM_LDFLAGS}\n                              ${APP_NAME_LC}::Bluetooth\n                              ${APP_NAME_LC}::CWiid)\n```\n\n----------------------------------------\n\nTITLE: Updating Meson and NASM for Ubuntu 18.04\nDESCRIPTION: Commands to update Meson and NASM for AV1 support on Ubuntu 18.04 and lower\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --user meson\nwget https://mirrors.edge.kernel.org/ubuntu/pool/universe/n/nasm/nasm_2.14-1_amd64.deb && sudo apt install ./nasm_2.14-1_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Installing Kodi IPK on webOS Device Using ares-cli\nDESCRIPTION: This command uses ares-cli to install the Kodi IPK package on a specific webOS device. Replace <your tv> with the appropriate device identifier.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nares-install ./org.xbmc.kodi_20.90.101_arm.ipk --d <your tv>\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Addon Source Files in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for PVR addons. These files contain implementations for PVR client functionality, capabilities, menu hooks, and client management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/addons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PVRClient.cpp\n            PVRClientCapabilities.cpp\n            PVRClientMenuHooks.cpp\n            PVRClientUID.cpp\n            PVRClients.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Client Stream Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for game client stream components including audio, video, and framebuffer implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/streams/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GameClientStreamAudio.cpp\n            GameClientStreamHwFramebuffer.cpp\n            GameClientStreams.cpp\n            GameClientStreamSwFramebuffer.cpp\n            GameClientStreamVideo.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Base Power Management Sources\nDESCRIPTION: Defines the basic source and header files for Linux power management functionality\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES LinuxPowerSyscall.cpp)\n\nset(HEADERS FallbackPowerSyscall.h\n            LinuxPowerSyscall.h)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding OpenGLES Files for Android Windowing System in CMake\nDESCRIPTION: Checks if the OpenGLES target exists for the application. If so, adds the corresponding source and header files for the Android GLES context.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/android/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES WinSystemAndroidGLESContext.cpp)\n  list(APPEND HEADERS WinSystemAndroidGLESContext.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory and Generating Xcode Project\nDESCRIPTION: Commands to create a build directory and generate an Xcode project for Kodi using CMake.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/kodi-build\nmake -C tools/depends/target/cmakebuildsys BUILD_DIR=$HOME/kodi-build GEN=Xcode\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of Kodi Development Kit Headers in CMake\nDESCRIPTION: This snippet checks if the HEADERS variable is set and, if so, calls the core_add_devkit_header function to add the 'kodi' development kit headers. This ensures that the headers are only added when they are defined.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Timer Header Files in CMake\nDESCRIPTION: Defines the list of C++ header files corresponding to the PVR timer implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/timers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS PVRTimerInfoTag.h\n            PVRTimerRuleMatcher.h\n            PVRTimers.h\n            PVRTimersPath.h\n            PVRTimerType.h)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Keyboard Input Test Library\nDESCRIPTION: Adds the test library for keyboard input to the XBMC core project using a custom CMake function 'core_add_test_library'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_test_library(test_input_keyboard)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Games Ports Types Library\nDESCRIPTION: CMake configuration that defines source files, headers and creates a library target for the games ports types component. Uses core_add_library to create the games_ports_types library target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/types/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PortNode.cpp\n)\n\nset(HEADERS PortNode.h\n)\n\ncore_add_library(games_ports_types)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for PVR Recordings in CMake\nDESCRIPTION: Creates a CMake variable 'HEADERS' containing the list of header files corresponding to the PVR recordings module source files. This ensures all necessary header files are included in the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/recordings/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PVRRecording.h\n            PVRRecordings.h\n            PVRRecordingsPath.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring TVOS Windowing Sources and Headers in CMake\nDESCRIPTION: Defines the source and header files needed for the TVOS windowing system implementation. Includes screen saver, window events, window system core, and video sync components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/tvos/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES OSScreenSaverTVOS.mm\n            WinEventsTVOS.mm\n            WinSystemTVOS.mm\n            VideoSyncTVos.cpp)\nset(HEADERS OSScreenSaverTVOS.h\n            WinEventsTVOS.h\n            WinSystemTVOS.h\n            VideoSyncTVos.h)\n\ncore_add_library(windowing_tvos)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Input Windows Library in CMake\nDESCRIPTION: Uses the core_add_library function to create the input_windows library. This function is likely a custom CMake function defined in XBMC's build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_windows)\n```\n\n----------------------------------------\n\nTITLE: Directory Mapping for iOS and Darwin Components in XBMC\nDESCRIPTION: This configuration maps source code directories for iOS platform components, Darwin speech functionality, and iOS windowing system. The mappings establish relationships between actual filesystem paths and their logical representation in the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/darwin_embedded/ios/ios.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxbmc/platform/darwin/ios              platform/ios\nxbmc/platform/darwin/speech           platform/darwin/speech\nxbmc/windowing/ios                    windowing/ios\n```\n\n----------------------------------------\n\nTITLE: Configuring DVD Input Stream Headers in CMake\nDESCRIPTION: Sets up the list of header files for DVD input stream functionality. Corresponds to the source files and includes additional utility headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS BlurayStateSerializer.h\n            DVDFactoryInputStream.h\n            DVDInputStream.h\n            DVDInputStreamFFmpeg.h\n            DVDInputStreamFile.h\n            DVDInputStreamMemory.h\n            DVDInputStreamNavigator.h\n            DVDInputStreamStack.h\n            DVDStateSerializer.h\n            DllDvdNav.h\n            InputStreamAddon.h\n            InputStreamMultiStreams.h\n            InputStreamMultiSource.h\n            InputStreamPVRBase.h\n            InputStreamPVRChannel.h\n            InputStreamPVRRecording.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Posix Network Library Sources in CMake\nDESCRIPTION: Sets up source files, headers and creates a Posix network library target for XBMC/Kodi platform. Defines NetworkPosix.cpp as source and NetworkPosix.h as header, then creates the platform_posix_network library using core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES NetworkPosix.cpp)\n\nset(HEADERS NetworkPosix.h)\n\ncore_add_library(platform_posix_network)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Controller List Provider Sources in CMake for XBMC\nDESCRIPTION: This CMake snippet defines the source files, header files, and library configuration for the game controller list provider component in XBMC. It sets up the necessary files and adds the library to the core XBMC build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/listproviders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIGameControllerProvider.cpp\n)\n\nset(HEADERS GUIGameControllerProvider.h\n)\n\ncore_add_library(games_controller_listproviders)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Game Ports Windows in CMake\nDESCRIPTION: This snippet sets the SOURCES variable with a list of C++ source files for the game ports windows component. It includes GUIPortList.cpp and GUIPortWindow.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIPortList.cpp\n            GUIPortWindow.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Video Library Source Files in CMake\nDESCRIPTION: Sets up a list of source files for the video library component. These files handle various aspects of video playback, metadata, and user interface interactions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Bookmark.cpp\n            ContextMenus.cpp\n            GUIViewStateVideo.cpp\n            PlayerController.cpp\n            Teletext.cpp\n            VideoDatabase.cpp\n            VideoDbUrl.cpp\n            VideoEmbeddedImageFileLoader.cpp\n            VideoFileItemClassify.cpp\n            VideoGeneratedImageFileLoader.cpp\n            VideoInfoDownloader.cpp\n            VideoInfoScanner.cpp\n            VideoInfoTag.cpp\n            VideoItemArtworkHandler.cpp\n            VideoLibraryQueue.cpp\n            VideoThumbLoader.cpp\n            VideoUtils.cpp\n            ViewModeSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Addon Header Files in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of C++ header files for PVR addons. These headers declare the interfaces and classes for PVR client functionality, capabilities, menu hooks, and client management.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/addons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PVRClient.h\n            PVRClientCapabilities.h\n            PVRClientMenuHooks.h\n            PVRClientUID.h\n            PVRClients.h)\n```\n\n----------------------------------------\n\nTITLE: Setting PVR Header Files in CMake\nDESCRIPTION: Defines the list of header files for the PVR component, including interface definitions, class declarations, and constant definitions used throughout the PVR system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IPVRComponent.h\n            PVRCachedImage.h\n            PVRCachedImages.h\n            PVRChannelGroupImageFileLoader.h\n            PVRChannelNumberInputHandler.h\n            PVRComponentRegistration.h\n            PVRConstants.h\n            PVRContextMenus.h\n            PVRDatabase.h\n            PVRDescrambleInfo.h\n            PVREdl.h\n            PVREventLogJob.h\n            PVRItem.h\n            PVRManager.h\n            PVRPlaybackState.h\n            PVRSignalStatus.h\n            PVRStreamProperties.h\n            PVRThumbLoader.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Handlers in CMake\nDESCRIPTION: This snippet configures the build for HTTP request handlers library. It defines source and header files lists, conditionally includes Python-related files if Python support is enabled, and creates the network_httprequesthandlers library using core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/httprequesthandler/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::MicroHttpd)\n  set(SOURCES HTTPFileHandler.cpp\n              HTTPImageHandler.cpp\n              HTTPImageTransformationHandler.cpp\n              HTTPJsonRpcHandler.cpp\n              HTTPRequestHandlerUtils.cpp\n              HTTPVfsHandler.cpp\n              HTTPWebinterfaceAddonsHandler.cpp\n              HTTPWebinterfaceHandler.cpp\n              IHTTPRequestHandler.cpp)\n\n  if(TARGET ${APP_NAME_LC}::Python)\n    list(APPEND SOURCES HTTPPythonHandler.cpp)\n  endif()\n\n  set(HEADERS HTTPFileHandler.h\n              HTTPImageHandler.h\n              HTTPImageTransformationHandler.h\n              HTTPJsonRpcHandler.h\n              HTTPRequestHandlerUtils.h\n              HTTPVfsHandler.h\n              HTTPWebinterfaceAddonsHandler.h\n              HTTPWebinterfaceHandler.h\n              IHTTPRequestHandler.h)\n  if(TARGET ${APP_NAME_LC}::Python)\n    list(APPEND HEADERS HTTPPythonHandler.h)\n  endif()\n\n  core_add_library(network_httprequesthandlers)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Platform Flags for XBMC Android Build\nDESCRIPTION: These preprocessor definitions specify that the build target is Android, which is a Linux-based POSIX-compliant operating system. These flags help the codebase adapt its implementation to the specific constraints and features of the Android platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/android/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n-DTARGET_POSIX -DTARGET_LINUX -DTARGET_ANDROID\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Kodi from webOS Using ares-cli\nDESCRIPTION: This command uses ares-cli to uninstall Kodi from a specific webOS device. Replace <your tv> with the appropriate device identifier.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.webOS.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nares-install --remove org.xbmc.kodi --d <your tv>\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Providers Library in CMake\nDESCRIPTION: Calls the core_add_library function to create a library named 'pvr_providers'. This library will contain the compiled code for PVR provider functionality in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/providers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_providers)\n```\n\n----------------------------------------\n\nTITLE: Adding Games Agents Input Library in CMake\nDESCRIPTION: Creates the games_agents_input library target using the defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/agents/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(games_agents_input)\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Sources for Windows Platform in XBMC\nDESCRIPTION: Sets the source files for the Windows-specific network implementation. Includes NetworkWin32.cpp and WSDiscoveryWin32.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES NetworkWin32.cpp\n            WSDiscoveryWin32.cpp)\n```\n\n----------------------------------------\n\nTITLE: Library Configuration and Properties\nDESCRIPTION: Sets up the static library target with compile definitions, include directories, and target properties including disabling various analysis tools.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(upnp STATIC ${SOURCES} ${HEADERS})\ntarget_compile_definitions(upnp PUBLIC -DNPT_CONFIG_ENABLE_LOGGING)\nif(CORE_SYSTEM_NAME STREQUAL \"freebsd\")\n  target_compile_definitions(upnp PUBLIC -DNPT_CONFIG_HAVE_GETADDRINFO)\nendif()\n\nset(INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}\n                        [... shortened for brevity ...])\ntarget_include_directories(upnp SYSTEM INTERFACE ${INCLUDE_DIRECTORIES})\ntarget_include_directories(upnp PRIVATE ${INCLUDE_DIRECTORIES})\nset_target_properties(upnp PROPERTIES CXX_CLANG_TIDY \"\")\nset_target_properties(upnp PROPERTIES CXX_CPPCHECK \"\")\nset_target_properties(upnp PROPERTIES CXX_INCLUDE_WHAT_YOU_USE \"\")\nset_target_properties(upnp PROPERTIES FOLDER lib)\nsource_group_by_folder(upnp)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Audio Engine Sink Test Library in CMake for XBMC\nDESCRIPTION: This CMake snippet checks if any SOURCES have been defined and, if so, adds the audioengine_sink_test library to the project using the core_add_test_library function. This ensures that the test library is only built when there are relevant source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/AudioEngine/Sinks/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SOURCES)\n  core_add_test_library(audioengine_sink_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Addon Info Library in CMake\nDESCRIPTION: This snippet adds the Addon Info module as a library to the XBMC project. It uses a custom CMake function 'core_add_library' to incorporate the 'addons_addoninfo' library into the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/addoninfo/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(addons_addoninfo)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for Games Windows in CMake\nDESCRIPTION: Calls the core_add_library function to create a library named 'gameswindows'. This likely compiles the previously defined source files into a library that can be linked with other parts of the XBMC/Kodi project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(gameswindows)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Peripheral Bus USB in CMake\nDESCRIPTION: Sets the HEADERS variable with the header file for the USB peripheral bus.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/peripherals/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PeripheralBusUSB.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for games_ports_guicontrols in CMake\nDESCRIPTION: Sets the SOURCES variable with the cpp file for the GUIActivePortList component. This defines the source files to be compiled for the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/guicontrols/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIActivePortList.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Display System Header Files\nDESCRIPTION: Specifies the header files for Windows display system components including video sync, DPMS support, event handling, and key mapping interfaces.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS VideoSyncD3D.h\n            Win32DPMSSupport.h\n            WinEventsWin32.h\n            WinSystemWin32.h\n            WinSystemWin32DX.h\n            WinKeyMap.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for Input Joystick Mapping in CMake\nDESCRIPTION: Adds a core library named 'input_joystick_mapping' to the project using a custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/mapping/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_joystick_mapping)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC View Module in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for the XBMC view module. These files contain implementations for GUI view control, view state management, and view database functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/view/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIViewControl.cpp\n            GUIViewState.cpp\n            ViewDatabase.cpp\n            ViewStateSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Peripheral Bus Source Files in CMake\nDESCRIPTION: Defines the core source files for peripheral bus implementations, including addon and application bus types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/bus/virtual/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PeripheralBusAddon.cpp\n            PeripheralBusApplication.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers and Conditionally Adding Peripherals Events Interfaces Library in CMake\nDESCRIPTION: This CMake snippet defines header files for the peripherals events interfaces and conditionally adds the library to the build process only if static libraries are not enabled. It sets up 'IEventScannerCallback.h' as the header file and uses the 'core_add_library' function to add the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/events/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IEventScannerCallback.h\n)\n\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(peripherals_events_interfaces)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Messaging Helpers Library in CMake\nDESCRIPTION: Defines the source files for the XBMC messaging helpers library, which include DialogHelper.cpp and DialogOKHelper.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/messaging/helpers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DialogHelper.cpp\n            DialogOKHelper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Process Info Library in CMake\nDESCRIPTION: Sets up source and header files for the Android process info component and adds it as a library to the XBMC/Kodi project. This configuration is specific to the Android platform and is part of the rendering process info system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RPProcessInfoAndroid.cpp)\nset(HEADERS RPProcessInfoAndroid.h)\n\ncore_add_library(rp-process-android)\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Source Files in CMake\nDESCRIPTION: Defines the core POSIX filesystem source files for compilation\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PosixDirectory.cpp\n            PosixFile.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Games Controller Input\nDESCRIPTION: Defines the list of header files corresponding to the implementation files, containing class and function declarations for the games controller input system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS ControllerActivity.h\n            DefaultButtonMap.h\n            DefaultKeyboardTranslator.h\n            DefaultMouseTranslator.h\n            InputSink.h\n            PhysicalFeature.h\n            PhysicalTopology.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Profile and Lock Settings Dialogs in CMake\nDESCRIPTION: Defines the source files for the profile and lock settings dialogs. Includes two .cpp files for GUI dialog implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogLockSettings.cpp\n            GUIDialogProfileSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Peripheral Devices in CMake\nDESCRIPTION: Defines the list of header (.h) files corresponding to the peripheral device implementations, matching the source files defined earlier.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/devices/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Peripheral.h\n            PeripheralBluetooth.h\n            PeripheralDisk.h\n            PeripheralHID.h\n            PeripheralImon.h\n            PeripheralJoystick.h\n            PeripheralKeyboard.h\n            PeripheralMouse.h\n            PeripheralNIC.h\n            PeripheralNyxboard.h\n            PeripheralTuner.h)\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Header Files in CMake for XBMC\nDESCRIPTION: Sets up a list of header files corresponding to the WebSocket implementation source files in XBMC. Includes headers for the main WebSocket class, WebSocketManager, and specific versions (V13 and V8).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/websocket/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS WebSocket.h\n            WebSocketManager.h\n            WebSocketV13.h\n            WebSocketV8.h)\n```\n\n----------------------------------------\n\nTITLE: Adding games_ports_guicontrols Library to XBMC Core in CMake\nDESCRIPTION: Uses the core_add_library function to add the games_ports_guicontrols library to the XBMC core. This integrates the defined source and header files into the project build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/guicontrols/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(games_ports_guicontrols)\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project Using CMake Dependencies\nDESCRIPTION: Generates Xcode project files using the built-in CMake from dependencies\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tools/depends/target/cmakebuildsys BUILD_DIR=$HOME/kodi-build\n```\n\n----------------------------------------\n\nTITLE: Conditional EGL Source Addition\nDESCRIPTION: Conditionally appends EGL-specific source and header files to the build if EGL target is defined for the application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::EGL)\n  list(APPEND SOURCES egl/RPProcessInfoEGL.cpp)\n  list(APPEND HEADERS egl/RPProcessInfoEGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding EPG Library to XBMC Core in CMake\nDESCRIPTION: Calls a custom CMake function to add the EPG component as a library to the XBMC core. This integrates the EPG functionality into the main XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/epg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_epg)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Programs Module in CMake\nDESCRIPTION: Sets the SOURCES variable with the list of source files for the programs module. Includes GUIViewStatePrograms.cpp and GUIWindowPrograms.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/programs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIViewStatePrograms.cpp\n            GUIWindowPrograms.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding AirTunes Support in CMake\nDESCRIPTION: Adds AirTunes server functionality when the Shairplay target is available in the build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Shairplay)\n  list(APPEND SOURCES AirTunesServer.cpp)\n  list(APPEND HEADERS AirTunesServer.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: License Identifier Declaration\nDESCRIPTION: SPDX license identifier declaration for the Kodi project specifying GPL-2.0-or-later as the primary license.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSPDX-License-Identifier: GPL-2.0-or-later\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies with Parallel Processing\nDESCRIPTION: Command to build the tools and dependencies using all available processor cores for parallel compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.iOS.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Defining EPG Header Files in CMake for XBMC\nDESCRIPTION: Sets up a list of header files for the EPG component. These files declare the interfaces and classes used in the EPG functionality of XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/epg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Epg.h\n            EpgContainer.h\n            EpgDatabase.h\n            EpgInfoTag.h\n            EpgSearch.h\n            EpgSearchData.h\n            EpgSearchFilter.h\n            EpgSearchPath.h\n            EpgChannelData.h\n            EpgTagsCache.h\n            EpgTagsContainer.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Video Render Buffers in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for render buffers, including implementations for GUI textures and system memory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/video/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RenderBufferGuiTexture.cpp\n            RenderBufferSysMem.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Games Agents Windows\nDESCRIPTION: Defines the header files (.h) for the games agents windows component including controller list, window, and interface definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/agents/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIAgentControllerList.h\n            GUIAgentDefines.h\n            GUIAgentWindow.h\n            IAgentControllerList.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Games Controllers Input Test Sources in CMake\nDESCRIPTION: Defines source files for testing keyboard and mouse input translation. Sets up test library compilation using core_add_test_library for the games controllers input module.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/input/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestDefaultKeyboardTranslator.cpp\n            TestDefaultMouseTranslator.cpp\n)\n\ncore_add_test_library(test_games_controllers_input)\n```\n\n----------------------------------------\n\nTITLE: Setting Dialog Source Files in CMake\nDESCRIPTION: Defines the list of source (.cpp) files for XBMC dialog components that need to be compiled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIDialogBoxBase.cpp\n            GUIDialogBusy.cpp\n            GUIDialogBusyNoCancel.cpp\n            GUIDialogButtonMenu.cpp\n            GUIDialogCache.cpp\n            GUIDialogColorPicker.cpp\n            GUIDialogContextMenu.cpp\n            GUIDialogExtendedProgressBar.cpp\n            GUIDialogFileBrowser.cpp\n            GUIDialogGamepad.cpp\n            GUIDialogKaiToast.cpp\n            GUIDialogKeyboardGeneric.cpp\n            GUIDialogKeyboardTouch.cpp\n            GUIDialogMediaFilter.cpp\n            GUIDialogMediaSource.cpp\n            GUIDialogNumeric.cpp\n            GUIDialogOK.cpp\n            GUIDialogPlayerControls.cpp\n            GUIDialogPlayerProcessInfo.cpp\n            GUIDialogProgress.cpp\n            GUIDialogSeekBar.cpp\n            GUIDialogSelect.cpp\n            GUIDialogSimpleMenu.cpp\n            GUIDialogSlider.cpp\n            GUIDialogSmartPlaylistEditor.cpp\n            GUIDialogSmartPlaylistRule.cpp\n            GUIDialogSubMenu.cpp\n            GUIDialogTextViewer.cpp\n            GUIDialogVolumeBar.cpp\n            GUIDialogYesNo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Game Input Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) corresponding to the game input source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GameClientController.h\n            GameClientDevice.h\n            GameClientHardware.h\n            GameClientInput.h\n            GameClientJoystick.h\n            GameClientKeyboard.h\n            GameClientMouse.h\n            GameClientPort.h\n            GameClientTopology.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dialog Library in CMake\nDESCRIPTION: Adds the dialogs component as a core library to the build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/dialogs/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(dialogs)\n```\n\n----------------------------------------\n\nTITLE: Adding List Providers Library to XBMC Core in CMake\nDESCRIPTION: Adds the list providers as a library to the XBMC core using a custom CMake function. This integrates the list provider components into the main XBMC build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/listproviders/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(guilib_listproviders)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of CEC Bus Files in CMake\nDESCRIPTION: Conditionally adds CEC (Consumer Electronics Control) peripheral bus implementation files if the CEC target is available in the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/bus/virtual/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::CEC)\n  list(APPEND SOURCES PeripheralBusCEC.cpp)\n  list(APPEND HEADERS PeripheralBusCEC.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Source Settings Test Files in CMake for XBMC\nDESCRIPTION: This CMake snippet sets up the test environment for Media Source Settings in XBMC. It specifies the source file for the test and adds the test library to the project core.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestMediaSourceSettings.cpp)\n\ncore_add_test_library(settings_test)\n```\n\n----------------------------------------\n\nTITLE: Including OpenGL Renderer Files in CMake\nDESCRIPTION: Adds OpenGL-specific renderer files to the source and header lists if the OpenGL target is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES RPRendererOpenGL.cpp)\n  list(APPEND HEADERS RPRendererOpenGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Video Render Buffers in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of C++ header files for render buffers, corresponding to the GUI texture and system memory implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/video/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS RenderBufferGuiTexture.h\n            RenderBufferSysMem.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Music Tag Processing in CMake\nDESCRIPTION: Sets up a list of source files for music tag processing, including various loaders and utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/tags/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES MusicInfoTag.cpp\n            MusicInfoTagLoaderCDDA.cpp\n            MusicInfoTagLoaderDatabase.cpp\n            MusicInfoTagLoaderFactory.cpp\n            MusicInfoTagLoaderFFmpeg.cpp\n            MusicInfoTagLoaderShn.cpp\n            ReplayGain.cpp\n            TagLibVFSStream.cpp\n            TagLoaderTagLib.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Music Windows Module in CMake\nDESCRIPTION: Defines the header files for the music windows module. These header files contain the class definitions corresponding to the implementation in the source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIWindowMusicBase.h\n            GUIWindowMusicNav.h\n            GUIWindowMusicPlaylist.h\n            GUIWindowMusicPlaylistEditor.h\n            GUIWindowVisualisation.h\n            MusicFileItemListModifier.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Android Network Components in CMake\nDESCRIPTION: Defines the list of source files for the Android network implementation, including NetworkAndroid and Zeroconf-related classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES NetworkAndroid.cpp\n            ZeroconfAndroid.cpp\n            ZeroconfBrowserAndroid.cpp\n      )\n```\n\n----------------------------------------\n\nTITLE: Creating Peripheral Devices Library in CMake\nDESCRIPTION: Adds the peripheral device components as a library named 'peripherals_devices' to the core of the XBMC project using all the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/devices/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(peripherals_devices)\n```\n\n----------------------------------------\n\nTITLE: Refactoring AND Logic Operations in C++\nDESCRIPTION: Example showing how to refactor AND operations by creating nested if statements. This approach makes the code more readable by clearly showing the dependency between conditions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.CleanUpLogic.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nif (A && B)\n  something()\n```\n\nLANGUAGE: c++\nCODE:\n```\nif (A)\n{\n  if (B)\n    something();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional DBus Power Management Components\nDESCRIPTION: Adds DBus-related power management sources and headers when DBus support is enabled\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/powermanagement/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::DBus)\n  list(APPEND SOURCES ConsoleUPowerSyscall.cpp\n                      LogindUPowerSyscall.cpp\n                      UPowerSyscall.cpp)\n  list(APPEND HEADERS ConsoleUPowerSyscall.h\n                      LogindUPowerSyscall.h\n                      UPowerSyscall.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Controller Library to XBMC Core\nDESCRIPTION: Adds the games_controller library to the XBMC core. This command integrates the controller component into the main XBMC project build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(games_controller)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Input Joystick Mapping in CMake\nDESCRIPTION: Defines a list of source files for input joystick mapping components including various detectors for axis, buttons, hats, keys, mouse buttons, and pointers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/mapping/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES     AxisDetector.cpp\n                ButtonMapping.cpp\n                ButtonDetector.cpp\n                HatDetector.cpp\n                KeyDetector.cpp\n                MouseButtonDetector.cpp\n                PointerDetector.cpp\n                PrimitiveDetector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Clang-specific Optimization Settings\nDESCRIPTION: Disables optimization for Mime.cpp when using Clang compiler due to issues with large maps.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n  set_source_files_properties(Mime.cpp PROPERTIES COMPILE_FLAGS -O0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Channels Library to XBMC/Kodi Core in CMake\nDESCRIPTION: This command adds the PVR channels library to the core libraries of XBMC/Kodi. It uses the previously defined source and header files to build the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/channels/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_channels)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Settings Library in CMake for XBMC\nDESCRIPTION: This snippet adds a library named 'pvr_settings' to the XBMC core. It uses the previously defined source and header files to create the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/settings/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_settings)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for GUI Announcement Handlers\nDESCRIPTION: Defines the source files (.cpp) for different GUI announcement handler components including the container, sources handler, and player handler.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/handlers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIAnnouncementHandlerContainer.cpp\n            sources/GUISourcesAnnouncementHandler.cpp\n            player/GUIPlayerAnnouncementHandler.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for PVR Channels Library in CMake\nDESCRIPTION: This snippet lists all the source (.cpp) files required for building the PVR channels library. It includes files for channel management, grouping, and related functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/channels/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PVRChannel.cpp\n            PVRChannelGroup.cpp\n            PVRChannelGroupAllChannels.cpp\n            PVRChannelGroupFactory.cpp\n            PVRChannelGroupAllChannelsSingleClient.cpp\n            PVRChannelGroupFromClient.cpp\n            PVRChannelGroupMember.cpp\n            PVRChannelGroupMergedByName.cpp\n            PVRChannelGroupSettings.cpp\n            PVRChannelGroups.cpp\n            PVRChannelGroupsContainer.cpp\n            PVRChannelNumber.cpp\n            PVRRadioRDSInfoTag.cpp\n            PVRChannelsPath.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Addition for Keyboard Interfaces in XBMC\nDESCRIPTION: Adds the keyboard input interfaces library to the build process if static libraries are not enabled. This ensures the interfaces are built as a separate library when dynamic linking is used.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/interfaces/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_keyboard_interfaces)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Retroplayer Memory Library to XBMC Core in CMake\nDESCRIPTION: Calls the core_add_library function to add the retroplayer_memory library to the XBMC core. This function is likely a custom CMake function defined elsewhere in the XBMC build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/streams/memory/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(retroplayer_memory)\n```\n\n----------------------------------------\n\nTITLE: Creating Music Jobs Library in CMake\nDESCRIPTION: Adds a core library target named 'music_jobs' that will compile the defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/jobs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(music_jobs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Speech Recognition Component in CMake for XBMC\nDESCRIPTION: This CMake snippet defines the source files, header files, and creates a library for the Android speech recognition component. It specifies the C++ implementation files and header interfaces needed for speech recognition functionality on Android within the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/speech/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES SpeechRecognitionAndroid.cpp\n            SpeechRecognitionListenerAndroid.cpp)\n\nset(HEADERS ISpeechRecognitionCallback.h\n            SpeechRecognitionAndroid.h\n            SpeechRecognitionListenerAndroid.h)\n\ncore_add_library(platform_android_speech)\n```\n\n----------------------------------------\n\nTITLE: MicroMediaController Commands\nDESCRIPTION: List of available commands for the MicroMediaController sample application, which is a ControlPoint for browsing MediaServers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n     quit    -   shutdown\n     exit    -   same as quit\n     setms   -   select a media server to become the active media server\n     getms   -   print the friendly name of the active media server\n     ls      -   list the contents of the current directory on the active\n                 media server\n     cd      -   traverse down one level in the content tree on the active\n                 media server\n     cd ..   -   traverse up one level in the content tree on the active\n                 media server\n     pwd     -   print the path from the root to your current position in the\n                 content tree on the active media server\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Dialog Headers in CMake for Kodi\nDESCRIPTION: This CMake snippet defines a list of header files for various GUI dialog components in the Kodi project. It includes files for context menus, progress bars, file browsers, and different types of dialog boxes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  context_menu.h\n  extended_progress.h\n  filebrowser.h\n  keyboard.h\n  numeric.h\n  ok.h\n  progress.h\n  select.h\n  text_viewer.h\n  yes_no.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Addon Settings in CMake\nDESCRIPTION: Sets the SOURCES variable with the list of source files for addon settings. Includes AddonSettings.cpp and SettingUrlEncodedString.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/settings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AddonSettings.cpp\n            SettingUrlEncodedString.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding macOS-Specific Test Source in CMake for XBMC\nDESCRIPTION: This CMake snippet conditionally adds a macOS-specific test source file (TestAESinkDARWINOSX.cpp) to the SOURCES list when building for macOS. It ensures that platform-specific tests are only included when relevant.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/AudioEngine/Sinks/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(MACOSX)\n  list(APPEND SOURCES TestAESinkDARWINOSX.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for Video Render Buffers in CMake\nDESCRIPTION: Calls the core_add_library function to add a library named 'rp-buffers-video', likely incorporating the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/video/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(rp-buffers-video)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Peripheral Bus Header Files in CMake\nDESCRIPTION: Defines the core header files for peripheral bus implementations, including addon and application bus types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/bus/virtual/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PeripheralBusAddon.h\n            PeripheralBusApplication.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring DVD Input Stream Sources in CMake\nDESCRIPTION: Sets up the list of source files for DVD input stream functionality. Includes various input stream types and serializers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES BlurayStateSerializer.cpp\n            DVDFactoryInputStream.cpp\n            DVDInputStream.cpp\n            DVDInputStreamFFmpeg.cpp\n            DVDInputStreamFile.cpp\n            DVDInputStreamMemory.cpp\n            DVDInputStreamNavigator.cpp\n            DVDInputStreamStack.cpp\n            DVDStateSerializer.cpp\n            InputStreamAddon.cpp\n            InputStreamMultiSource.cpp\n            InputStreamPVRBase.cpp\n            InputStreamPVRChannel.cpp\n            InputStreamPVRRecording.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for GUI Announcement Handlers\nDESCRIPTION: Specifies the header files (.h) corresponding to the GUI announcement handler components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/handlers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIAnnouncementHandlerContainer.h\n            sources/GUISourcesAnnouncementHandler.h\n            player/GUIPlayerAnnouncementHandler.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Android Network Components in CMake\nDESCRIPTION: Defines the list of header files for the Android network implementation, corresponding to the previously defined source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/network/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS NetworkAndroid.h\n            ZeroconfAndroid.h\n            ZeroconfBrowserAndroid.h\n      )\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Platform Source Files\nDESCRIPTION: Defines the main source files required for OSX platform implementation, including Cocoa interface, CPU/GPU info, hotkey control, and media key handlers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CocoaInterface.mm\n            CPUInfoOsx.cpp\n            GPUInfoMacOS.cpp\n            HotKeyController.mm\n            MediaKeys.mm\n            PlatformDarwinOSX.mm)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Music Dialogs in CMake\nDESCRIPTION: This snippet defines the header files corresponding to the source files for XBMC music-related dialogs. It includes headers for info provider settings, music info, music OSD, song info, and visualisation preset list.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIDialogInfoProviderSettings.h\n            GUIDialogMusicInfo.h\n            GUIDialogMusicOSD.h\n            GUIDialogSongInfo.h\n            GUIDialogVisualisationPresetList.h)\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Custom CMake Command\nDESCRIPTION: Alternative command to generate an Xcode project for Kodi using a custom CMake command with specific toolchain file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.macOS.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n/Users/Shared/xbmc-depends/x86_64-darwin17.5.0-native/bin/cmake -G Xcode -DCMAKE_TOOLCHAIN_FILE=/Users/Shared/xbmc-depends/macosx10.14_x86_64-target-debug/share/Toolchain.cmake ../kodi\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Store Windowing Library\nDESCRIPTION: Adds the windowing library for Windows Store application using the defined source and header files\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/win10/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windowing_windowsstore)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Game Controller Windows in CMake\nDESCRIPTION: Defines the list of source files for the game controller windows component. Includes files related to configuration wizard, controller list, controller window, and feature list.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIConfigurationWizard.cpp\n            GUIControllerList.cpp\n            GUIControllerWindow.cpp\n            GUIFeatureList.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Addons Library Target in CMake\nDESCRIPTION: Creates a library target for the binary addons module using XBMC/Kodi's core_add_library helper function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/binary-addons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(addons_binary-addons)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Client Header Files in CMake\nDESCRIPTION: Defines a list of header files for the game client component. These headers declare the interfaces and classes used in the game client implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GameClient.h\n            GameClientCallbacks.h\n            GameClientInGameSaves.h\n            GameClientProperties.h\n            GameClientSubsystem.h\n            GameClientTranslator.h)\n```\n\n----------------------------------------\n\nTITLE: Adding VideoPlayer Library to XBMC Core in CMake\nDESCRIPTION: Adds the VideoPlayer component as a library to the XBMC (Kodi) core. This command integrates the VideoPlayer into the main project build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(VideoPlayer)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Test Library in CMake\nDESCRIPTION: Creates a test library named 'xbmc_test' using a custom CMake function core_add_test_library(). This library will include all the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_test_library(xbmc_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Channels Test Library in CMake for XBMC\nDESCRIPTION: This CMake script sets up the source files and adds the PVR channels test library to the XBMC project. It specifies the source file 'TestPVRChannelsPath.cpp' and adds an empty HEADERS variable. The core_add_test_library function is used to add the 'pvrchannels_test' library to the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/channels/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestPVRChannelsPath.cpp)\nset(HEADERS)\n\ncore_add_test_library(pvrchannels_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Input Joystick Mapping in CMake\nDESCRIPTION: Defines a list of header files for input joystick mapping components including configurations and detectors for various input types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/mapping/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS     AxisConfiguration.h\n                AxisDetector.h\n                ButtonDetector.h\n                ButtonMapping.h\n                HatDetector.h\n                KeyDetector.h\n                MouseButtonDetector.h\n                PointerDetector.h\n                PrimitiveDetector.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for XBMC Peripherals Add-ons\nDESCRIPTION: Specifies the header files corresponding to the peripheral add-on source files for compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/addons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AddonButtonMap.h\n            AddonButtonMapping.h\n            AddonInputHandling.h\n            PeripheralAddon.h\n            PeripheralAddonTranslator.h)\n```\n\n----------------------------------------\n\nTITLE: Displaying XBMC Video Directory Structure in Plaintext\nDESCRIPTION: A plaintext representation of the XBMC video module directory structure, showing the main video directory and its subdirectories including dialogs, guilib, jobs, tags, and windows components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/common/video.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxbmc/video           video\nxbmc/video/dialogs   video/dialogs\nxbmc/video/guilib    video/guilib\nxbmc/video/jobs      video/jobs\nxbmc/video/tags      video/tags\nxbmc/video/windows   video/windows\n```\n\n----------------------------------------\n\nTITLE: Configuring TVOS Filesystem Header Files in CMake\nDESCRIPTION: Defines the list of header files for the TVOS filesystem implementation. Includes headers for directory operations, file handling, and utility functions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/filesystem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS TVOSDirectory.h\n            TVOSFile.h\n            TVOSFileUtils.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Process Info Library Sources in CMake\nDESCRIPTION: Defines source files, header files and creates a core library target for OSX process information handling. Establishes the build configuration for the rp-process-osx library component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/osx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RPProcessInfoOSX.cpp)\n\nset(HEADERS RPProcessInfoOSX.h)\n\ncore_add_library(rp-process-osx)\n```\n\n----------------------------------------\n\nTITLE: Adding Speech Recognition Stub Library in CMake\nDESCRIPTION: Adds the speech recognition stub library to the project using a custom CMake function called core_add_library. The library is named 'platform_common_speech'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/common/speech/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_common_speech)\n```\n\n----------------------------------------\n\nTITLE: Installing Carthage on Mac/iOS\nDESCRIPTION: Command to install Carthage package manager on Mac/iOS systems using Homebrew.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> brew update || brew install carthage\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Directory for Kodi Addons\nDESCRIPTION: Sets up the build directory path for the addon bootstrapping process, ensuring it's an absolute path regardless of how it was specified.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# figure out where the build directory is located\nif(NOT BUILD_DIR)\n  set(BUILD_DIR \"${CMAKE_BINARY_DIR}/build\")\nelse()\n  file(TO_CMAKE_PATH \"${BUILD_DIR}\" BUILD_DIR)\nendif()\nget_filename_component(BUILD_DIR \"${BUILD_DIR}\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Optical Drive Support Files in CMake\nDESCRIPTION: Adds additional source and header files for optical drive support if the ENABLE_OPTICAL option is enabled. This allows for conditional compilation of CD ripping features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cdrip/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  list(APPEND SOURCES CDDARipper.cpp)\n  list(APPEND HEADERS CDDARipper.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGLES-Specific Picture Module Files in CMake\nDESCRIPTION: Conditionally appends OpenGLES-specific slideshow picture implementation files to the source and header lists when OpenGLES support is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES SlideShowPictureGLES.cpp)\n  list(APPEND HEADERS SlideShowPictureGLES.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Kodi with xcodebuild\nDESCRIPTION: Commands for building Kodi using xcodebuild from command line with parallel processing\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi-build\nxcodebuild -config \"Debug\" -jobs $(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for CD Ripping and Encoding in CMake\nDESCRIPTION: Sets up a list of header files corresponding to the source files for CD ripping and audio encoding functionality. Includes interface and implementation headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cdrip/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS CDDARipJob.h\n            Encoder.h\n            EncoderAddon.h\n            EncoderFFmpeg.h\n            IEncoder.h)\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of Kodi Add-on Instance Headers to Development Kit\nDESCRIPTION: This snippet checks if headers are defined and adds them to the Kodi add-on development kit. It ensures that the necessary headers are included only if they exist, preventing potential build errors.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_addon-instance)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TVOS Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) corresponding to the TVOS platform implementation in XBMC. These headers declare the interfaces for the implementation files and include the application header.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PreflightHandler.h\n            TVOSDisplayManager.h\n            TVOSEAGLView.h\n            TVOSKeyboardView.h\n            TVOSNSUserDefaults.h\n            TVOSSettingsHandler.h\n            tvosShared.h\n            TVOSTopShelf.h\n            XBMCApplication.h\n            XBMCController.h)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Rendering Library Target\nDESCRIPTION: Creates a library target named rp-rendering using XBMC's core library creation function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(rp-rendering)\n```\n\n----------------------------------------\n\nTITLE: Adding RetroPlayer Streams Library in CMake\nDESCRIPTION: Adds the RetroPlayer streams components as a library in the XBMC project using a custom CMake function core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/streams/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(retroplayer_streams)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Games Agents Windows\nDESCRIPTION: Defines the source files (.cpp) for the games agents windows component including controller list and window implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/agents/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIAgentControllerList.cpp\n            GUIAgentWindow.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Utils Library Sources and Headers in CMake\nDESCRIPTION: Defines source files and header files for the PVR utilities library, then creates the library target using core_add_library. The library contains path and stream utility functionality for PVR features.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PVRPathUtils.cpp\n            PVRStreamUtils.cpp)\n\nset(HEADERS PVRPathUtils.h\n            PVRStreamUtils.h)\n\ncore_add_library(pvr_utils)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Renderer Header Files in CMake for Windows\nDESCRIPTION: Defines a list of header files corresponding to the video renderer implementations, including base, DXVA, high-quality, shader-based, and software renderers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS RendererBase.h\n            RendererDXVA.h\n            RendererHQ.h\n            RendererShaders.h\n            RendererSoftware.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Music Test Library Sources and Building the Library in CMake\nDESCRIPTION: Sets up the source file list for the music test library and uses a custom CMake function (core_add_test_library) to build the library. The source list includes only a single file: TestMusicFileItemClassify.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestMusicFileItemClassify.cpp)\n\ncore_add_test_library(music_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Android Platform in XBMC\nDESCRIPTION: Lists the header files corresponding to the source files for the Android platform implementation. These headers declare the classes and interfaces for Android-specific functionality in XBMC/Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/activity/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AndroidJoyStick.h\n            AndroidKey.h\n            AndroidMouse.h\n            AndroidTouch.h\n            EventLoop.h\n            IActivityHandler.h\n            JNIMainActivity.h\n            JNIXBMCMainView.h\n            JNIXBMCMediaSession.h\n            JNIXBMCVideoView.h\n            JNIXBMCAudioManagerOnAudioFocusChangeListener.h\n            JNIXBMCSurfaceTextureOnFrameAvailableListener.h\n            JNIXBMCNsdManagerDiscoveryListener.h\n            JNIXBMCNsdManagerRegistrationListener.h\n            JNIXBMCNsdManagerResolveListener.h\n            JNIXBMCJsonHandler.h\n            JNIXBMCFile.h\n            JNIXBMCTextureCache.h\n            JNIXBMCURIUtils.h\n            JNIXBMCDisplayManagerDisplayListener.h\n            JNIXBMCSpeechRecognitionListener.h\n            JNIXBMCConnectivityManagerNetworkCallback.h\n            JNIXBMCBroadcastReceiver.h\n            XBMCApp.h)\n```\n\n----------------------------------------\n\nTITLE: Building the platform_common Library in CMake\nDESCRIPTION: Calls the custom core_add_library macro to build the platform_common library using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_common)\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Definition for DLL Loader in CMake\nDESCRIPTION: Adds a compiler definition for API debugging. This allows for additional debug output or functionality in the DLL loader component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPI_DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Copying Libbluray JAR Files for XBMC Build Dependencies\nDESCRIPTION: This command copies all JAR files starting with 'libbluray' from the architecture-specific bin directory in the BuildDependencies folder to the current directory. The ${ARCH} variable is used to specify the target architecture.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/windows/dlls.txt#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nproject/BuildDependencies/${ARCH}/bin/libbluray*.jar .\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for TexturePacker in CMake\nDESCRIPTION: Sets up the installation rules for the TexturePacker executable and associated files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/native/TexturePacker/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS TexturePacker EXPORT TexturePacker\n  RUNTIME DESTINATION bin\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Windows 10 Filesystem Library in CMake\nDESCRIPTION: Sets the SOURCES variable with the cpp files for the Windows 10 filesystem library. It includes WinLibraryDirectory.cpp and WinLibraryFile.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES WinLibraryDirectory.cpp\n            WinLibraryFile.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Keyboard Input\nDESCRIPTION: Defines the source files (.cpp) required for keyboard input mapping functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/keyboard/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES KeyboardActionMap.cpp\n            KeyboardTranslator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Filesystem Source Files in CMake\nDESCRIPTION: Defines the core Windows filesystem source files for compilation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Win32Directory.cpp\n            Win32File.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional SMB Support Files Addition in CMake\nDESCRIPTION: Conditionally adds SMB-related source and header files for non-Windows Store builds.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/filesystem/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES Win32SMBDirectory.cpp\n                      Win32SMBFile.cpp)\n  list(APPEND HEADERS Win32SMBDirectory.h\n                      Win32SMBFile.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for POSIX Utilities in CMake\nDESCRIPTION: This snippet sets the SOURCES variable with a list of C++ source files for POSIX utilities. It includes implementations for memory mapping, POSIX interface for logging, and shared memory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Mmap.cpp\n            PosixInterfaceForCLog.cpp\n            SharedMemory.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for RetroPlayer Cheevos in CMake\nDESCRIPTION: Specifies the header files for the Cheevos component by setting the HEADERS variable. This includes both the main Cheevos header and the RConsoleIDs header.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/cheevos/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Cheevos.h \n            RConsoleIDs.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring TVOS Power Management Library in CMake\nDESCRIPTION: Defines source and header files for the TVOS power management functionality and registers them as a library in the XBMC build system. This configuration includes TVOSPowerSyscall.cpp as the source file and TVOSPowerSyscall.h as the header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TVOSPowerSyscall.cpp)\n\nset(HEADERS TVOSPowerSyscall.h)\n\ncore_add_library(platform_tvos_powermanagement)\n```\n\n----------------------------------------\n\nTITLE: Adding Addon GUI Library in CMake\nDESCRIPTION: Calls the core_add_library function to add the 'addons_gui' library to the project. This likely compiles the previously defined source files into a library for use in the XBMC/Kodi project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/gui/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(addons_gui)\n```\n\n----------------------------------------\n\nTITLE: Adding Kodi Development Kit Headers in CMake\nDESCRIPTION: This CMake snippet checks if headers are defined and adds the Kodi development kit header for add-on instances. It uses a custom CMake function 'core_add_devkit_header' to add the header.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_addon-instance)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linux Support Library Definition\nDESCRIPTION: Creates the core Linux support library target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(linuxsupport)\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Controls Library in CMake\nDESCRIPTION: Creates the GUI controls library target for addon interfaces using the core_add_library macro.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/controls/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(addons_interfaces_gui_controls)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Source Code\nDESCRIPTION: Commands to change to home directory and clone Kodi's master branch from GitHub repository.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.FreeBSD.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Creating PVR Dialogs Library Target\nDESCRIPTION: Creates a library target named 'pvr_dialogs' using the core_add_library macro, which will compile the specified source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(pvr_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for RetroPlayer GUI Bridge in CMake\nDESCRIPTION: Defines a list of header files for the RetroPlayer GUI bridge component. These headers declare the interfaces and classes used in the implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guibridge/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIGameMessenger.h\n            GUIGameRenderManager.h\n            GUIGameSettings.h\n            GUIGameSettingsHandle.h\n            GUIGameVideoHandle.h\n            GUIRenderHandle.h\n            GUIRenderTarget.h\n            GUIRenderTargetFactory.h\n            IGameCallback.h\n            IGUIRenderSettings.h\n            IRenderCallback.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Exports Utils Library\nDESCRIPTION: CMake configuration that sets up source files, header files and creates the exports_utils library build target for XBMC/Kodi media center.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/exports/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES EmuFileWrapper.cpp)\n\nset(HEADERS EmuFileWrapper.h)\n\ncore_add_library(exports_utils)\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Info Library to XBMC Core in CMake\nDESCRIPTION: This CMake command adds the GUI Info library to the XBMC core build. It uses a custom CMake function 'core_add_library' to include the 'guilib_guiinfo' component in the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/guiinfo/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(guilib_guiinfo)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Android Filesystem in XBMC\nDESCRIPTION: Sets the HEADERS variable with a list of C++ header files corresponding to the Android-specific filesystem source files. These headers declare the interfaces for APK and Android app handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/filesystem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS APKDirectory.h\n            APKFile.h\n            AndroidAppDirectory.h\n            AndroidAppFile.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Utils Test Library in CMake for XBMC\nDESCRIPTION: Adds the utils test library to the XBMC project using a custom CMake function core_add_test_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_test_library(utils_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Android Filesystem in XBMC\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for Android-specific filesystem operations. These files handle APK and Android app directories and files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES APKDirectory.cpp\n            APKFile.cpp\n            AndroidAppDirectory.cpp\n            AndroidAppFile.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Engine Build Settings\nDESCRIPTION: Sets up final build configuration for the audio engine library, including include directories and SSE optimization flags for non-Windows platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/AudioEngine/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(audioengine)\ntarget_include_directories(${CORE_LIBRARY} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\nif(NOT CORE_SYSTEM_NAME STREQUAL windows AND NOT CORE_SYSTEM_NAME STREQUAL windowsstore)\n  if(HAVE_SSE)\n    target_compile_options(${CORE_LIBRARY} PRIVATE -msse)\n  endif()\n  if(HAVE_SSE2)\n    target_compile_options(${CORE_LIBRARY} PRIVATE -msse2)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Threads Test\nDESCRIPTION: Defines the header files required for the threads test library, including the TestHelpers header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/threads/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS TestHelpers.h)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Windows Library in CMake\nDESCRIPTION: Calls a custom CMake function 'core_add_library' to add the PVR windows component as a library named 'pvr_windows'. This likely integrates the defined source and header files into the build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_windows)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Wayland Windowing System in CMake\nDESCRIPTION: Lists all header files required for the Wayland windowing system implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Connection.h\n            OptionalsReg.h\n            Output.h\n            InputProcessorKeyboard.cpp\n            InputProcessorPointer.cpp\n            InputProcessorTouch.cpp\n            OSScreenSaverIdleInhibitUnstableV1.h\n            Registry.h\n            Seat.h\n            SeatInputProcessing.h\n            SeatSelection.h\n            ShellSurface.h\n            ShellSurfaceWlShell.h\n            ShellSurfaceXdgShell.h\n            ShellSurfaceXdgShellUnstableV6.h\n            Signals.h\n            VideoSyncWpPresentation.h\n            ${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.hpp\n            WindowDecorator.h\n            WinEventsWayland.h\n            WinSystemWayland.h\n            XkbcommonKeymap.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Image Handling in CMake\nDESCRIPTION: This CMake command sets the HEADERS variable with a list of C++ header files corresponding to the image handling functionality in XBMC. It includes header files for image cache cleaning, image file URL handling, special image file loading, and special image loader factory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/imagefiles/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ImageCacheCleaner.h\n            ImageFileURL.h\n            SpecialImageFileLoader.h\n            SpecialImageLoaderFactory.h)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Threads Test Library\nDESCRIPTION: Calls a custom CMake function to add the threads test library to the build system using the previously defined sources and headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/threads/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_test_library(threads_test)\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Filesystem Library in CMake\nDESCRIPTION: Adds the Windows filesystem components as a library target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/filesystem/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(filesystem_win32)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Platform Headers in CMake\nDESCRIPTION: Sets up conditional header file inclusion for Android platform. The system.h header is only included when building for Android (CORE_SYSTEM_NAME equals android). The headers are then added to the dev kit if any are defined.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/platform/android/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  $<$<STREQUAL:${CORE_SYSTEM_NAME},android>:system.h>\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_platform_android)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting DVD Audio Codec Source Files in CMake\nDESCRIPTION: Defines the core source files for DVD audio codec functionality, including FFmpeg and passthrough implementations\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Audio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DVDAudioCodecFFmpeg.cpp\n            DVDAudioCodecPassthrough.cpp)\n```\n\n----------------------------------------\n\nTITLE: Registering the Messaging Helpers Library in XBMC Build System\nDESCRIPTION: Registers the messagingHelpers library with the XBMC core build system using the core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/messaging/helpers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(messagingHelpers)\n```\n\n----------------------------------------\n\nTITLE: Conditional Development Kit Header Installation\nDESCRIPTION: Checks if headers are defined and adds them to the Kodi development kit for the tools component using a custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/tools/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_tools)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Wayland Process Info Sources in CMake\nDESCRIPTION: Sets up the source and header files for the Wayland-specific process information module. It then adds these as a library to the XBMC/Kodi project using a custom CMake command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/wayland/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RPProcessInfoWayland.cpp)\n\nset(HEADERS RPProcessInfoWayland.h)\n\ncore_add_library(rp-process-wayland)\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Thread Library in CMake\nDESCRIPTION: Creates a library named 'platform_posix_threads' using the core_add_library function. This library will contain the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/threads/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_posix_threads)\n```\n\n----------------------------------------\n\nTITLE: Building Platinum with SCons on Linux/Cygwin\nDESCRIPTION: Commands to install SCons and build Platinum on Linux or Cygwin systems, including updating submodules and specifying build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> brew update || brew install scons\n> git submodule update --init\n> scons target={TARGET} build_config={Debug|Release}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Keyboard Input Library in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for the keyboard input library. These files handle default keyboard functionality and general keyboard input processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DefaultKeyboardHandling.cpp\n            KeyboardInputHandling.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding RetroPlayer GUI Bridge Library in CMake\nDESCRIPTION: Adds the RetroPlayer GUI bridge as a library to the XBMC (Kodi) project using a custom CMake function 'core_add_library'. This function likely handles the compilation and linking of the specified source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guibridge/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(retroplayer_guibridge)\n```\n\n----------------------------------------\n\nTITLE: Configuring Music Database Directory Headers in CMake\nDESCRIPTION: Defines the list of header files (.h) for the music database directory component. Contains the declarations corresponding to the implementation files for directory node functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/MusicDatabaseDirectory/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS DirectoryNode.h\n            DirectoryNodeAlbum.h\n            DirectoryNodeAlbumRecentlyAdded.h\n            DirectoryNodeAlbumRecentlyAddedSong.h\n            DirectoryNodeAlbumRecentlyPlayed.h\n            DirectoryNodeAlbumRecentlyPlayedSong.h\n            DirectoryNodeAlbumTop100.h\n            DirectoryNodeAlbumTop100Song.h\n            DirectoryNodeArtist.h\n            DirectoryNodeDiscs.h\n            DirectoryNodeGrouped.h\n            DirectoryNodeOverview.h\n            DirectoryNodeRoot.h\n            DirectoryNodeSingles.h\n            DirectoryNodeSong.h\n            DirectoryNodeSongTop100.h\n            DirectoryNodeTop100.h\n            QueryParams.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Android Platform Support in CMake\nDESCRIPTION: Defines the header files for the Android platform support library, including CPU information, GPU information, and platform implementation headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS CPUInfoAndroid.h\n            GPUInfoAndroid.h\n            PlatformAndroid.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Base Video Renderer Sources and Headers in CMake\nDESCRIPTION: Defines the base set of source and header files for the video renderer. These files are common across all platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RPBaseRenderer.cpp\n            RPRendererGuiTexture.cpp)\nset(HEADERS RPBaseRenderer.h\n            RPRendererGuiTexture.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Darwin/OSX Peripherals Library in CMake\nDESCRIPTION: Calls a custom CMake function to add a core library for Darwin/OSX platform-specific peripherals.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/peripherals/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_darwin_osx_peripherals)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Logging Interface Component in CMake for XBMC\nDESCRIPTION: Defines the source and header files for the Android interface for CLog functionality and registers them as a core library. This component enables proper logging functionality when XBMC/Kodi runs on Android platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AndroidInterfaceForCLog.cpp)\n\nset(HEADERS AndroidInterfaceForCLog.h)\n\ncore_add_library(platform_android_utils)\n```\n\n----------------------------------------\n\nTITLE: Configuring Music Tags Test Library in CMake\nDESCRIPTION: Sets up the source files list and adds a test library for music tag functionality. This configuration specifies TestTagLoaderTagLib.cpp as the only source file and creates a test library named musictags_test.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/tags/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestTagLoaderTagLib.cpp)\n\ncore_add_test_library(musictags_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for USB Peripheral Bus in CMake\nDESCRIPTION: Specifies the header files for the USB peripheral bus component using CMake's set command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/peripherals/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PeripheralBusUSB.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring PlayList Test Sources in CMake\nDESCRIPTION: Defines the source files for playlist testing components and creates a test library using core_add_test_library. Contains test files for different playlist formats including ASX, B4S, WPL, XML, and XSPF parsers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/playlists/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestPlayListASX.cpp\n            TestPlayListB4S.cpp\n            TestPlayListFactory.cpp\n            TestPlayListFileItemClassify.cpp\n            TestPlayListWPL.cpp\n            TestPlayListXML.cpp\n            TestPlayListXSPF.cpp)\n\ncore_add_test_library(playlists_test)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding LibInput Files for GBM Platform in CMake\nDESCRIPTION: Adds LibInput-related source and header files when building for a GBM platform with LibInput target available. Includes multiple components for handling keyboard, pointer, touch, and general input settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"gbm\" IN_LIST CORE_PLATFORM_NAME_LC)\n  if(TARGET ${APP_NAME_LC}::LibInput)\n    list(APPEND SOURCES LibInputHandler.cpp\n                        LibInputKeyboard.cpp\n                        LibInputPointer.cpp\n                        LibInputSettings.cpp\n                        LibInputTouch.cpp)\n\n    list(APPEND HEADERS LibInputHandler.h\n                        LibInputKeyboard.h\n                        LibInputPointer.h\n                        LibInputSettings.h\n                        LibInputTouch.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Filesystem Library Configuration\nDESCRIPTION: Creates the filesystem library and configures static linking for UPnP support when enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(filesystem)\nif(ENABLE_STATIC_LIBS AND ENABLE_UPNP)\n  target_link_libraries(filesystem PRIVATE upnp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Peripherals Add-ons Library Target\nDESCRIPTION: Creates a library target for the peripherals add-on system using XBMC's core build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/addons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(peripherals_addons)\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Addition in CMake for Kodi DevKit\nDESCRIPTION: This CMake snippet checks if headers are defined and adds them to the Kodi development kit. It uses a custom CMake function 'core_add_devkit_header' to include the headers for the GUI dialogs C API.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_gui_dialogs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Android-Specific Audio Codec Files Conditional Addition\nDESCRIPTION: Conditionally adds Android MediaCodec-specific source and header files when building for Android platform\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Audio/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND SOURCES DVDAudioCodecAndroidMediaCodec.cpp)\n  list(APPEND HEADERS DVDAudioCodecAndroidMediaCodec.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Image Metadata Library to XBMC/Kodi Project in CMake\nDESCRIPTION: Adds the configured source and header files as a library named 'pictures_metadata' to the core project. This uses a custom CMake function 'core_add_library' specific to the XBMC/Kodi build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/metadata/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pictures_metadata)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Headers to Kodi Dev Kit\nDESCRIPTION: Conditional block that adds the PVR headers to the Kodi development kit if headers are defined. Uses the core_add_devkit_header function to process the kodi_addon-instance_pvr component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/pvr/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_addon-instance_pvr)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Android-Specific Files to XBMC Addon Interfaces in CMake\nDESCRIPTION: Conditionally adds Android-specific source and header files to the SOURCES and HEADERS lists when building for the Android platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL android)\n  list(APPEND SOURCES platform/android/System.cpp)\n  list(APPEND HEADERS platform/android/System.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Windows 10 Platform Source Files\nDESCRIPTION: Defines the list of C++ source files required for the Windows 10 platform implementation, including both Win10-specific files and shared Win32 files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CPUInfoWin10.cpp\n            input/RemoteControlXbox.cpp\n            Environment.cpp\n            GPUInfoWin10.cpp\n            Win10App.cpp\n            MessagePrinter.cpp\n            PlatformWin10.cpp\n            ../win32/CharsetConverter.cpp\n            ../win32/dxerr.cpp\n            ../win32/Filesystem.cpp\n            ../win32/MemUtils.cpp\n            ../win32/pch.cpp\n            ../win32/WIN32Util.cpp\n            ../win32/XTimeUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Rendering\nDESCRIPTION: Defines the list of header files that declare the rendering system's interfaces and classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IRenderManager.h\n            RenderContext.h\n            RenderSettings.h\n            RenderTranslator.h\n            RenderUtils.h\n            RenderVideoSettings.h\n            RPRenderManager.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Wayland Dependencies\nDESCRIPTION: Command to install additional packages required for Wayland support\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install wayland-devel libwayland-egl1 libwayland-egl-devel libxkbcommon-devel scons wayland-protocols-devel\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Addon Info Module in CMake\nDESCRIPTION: This snippet defines the source files for the XBMC Addon Info module. It includes files related to addon info building, extensions, and types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/addoninfo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AddonInfoBuilder.cpp\n            AddonExtensions.cpp\n            AddonInfo.cpp\n            AddonType.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Kodi Settings Component in CMake\nDESCRIPTION: This snippet lists all the source files (.cpp) that are part of the settings component in Kodi. It includes various settings classes for different aspects of the application such as advanced settings, display settings, game settings, and more.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES AdvancedSettings.cpp\n            DisplaySettings.cpp\n            GameSettings.cpp\n            LibExportSettings.cpp\n            MediaSettings.cpp\n            MediaSourceSettings.cpp\n            PlayerSettings.cpp\n            ServicesSettings.cpp\n            SettingAddon.cpp\n            SettingConditions.cpp\n            SettingControl.cpp\n            SettingCreator.cpp\n            SettingDateTime.cpp\n            SettingPath.cpp\n            Settings.cpp\n            SettingsBase.cpp\n            SettingsValueFlatJsonSerializer.cpp\n            SettingsValueXmlSerializer.cpp\n            SettingUtils.cpp\n            SkinSettings.cpp\n            SettingsComponent.cpp\n            SubtitlesSettings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Filesystem Sources with CMake\nDESCRIPTION: Sets up the source files, headers and creates a library target for the PVR filesystem component. Uses CMake to define the build configuration for the pvr_filesystem library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/filesystem/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PVRGUIDirectory.cpp)\n\nset(HEADERS PVRGUIDirectory.h)\n\ncore_add_library(pvr_filesystem)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Windows Platform Library\nDESCRIPTION: Defines the list of header (.h) files that declare the interfaces and definitions for the Windows platform implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS CharsetConverter.h\n            CPUInfoWin32.h\n            dirent.h\n            DisplayUtilsWin32.h\n            dxerr.h\n            GPUInfoWin32.h\n            IMMNotificationClient.h\n            my_ntddcdrm.h\n            my_ntddscsi.h\n            netdb.h\n            pch.h\n            PlatformDefs.h\n            PlatformWin32.h\n            resource.h\n            unistd.h\n            WIN32Util.h\n            WindowHelper.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Platforms for XBMC Build on FreeBSD\nDESCRIPTION: These compiler flags specify the target platforms for building XBMC on FreeBSD. It defines both POSIX compliance and FreeBSD-specific targeting.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/platform/freebsd/defines.txt#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n-DTARGET_POSIX -DTARGET_FREEBSD\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding AirPlay Support in CMake\nDESCRIPTION: Adds AirPlay server functionality when the Plist target is available in the build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Plist)\n  list(APPEND SOURCES AirPlayServer.cpp)\n  list(APPEND HEADERS AirPlayServer.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Storage Provider Sources and Headers in CMake\nDESCRIPTION: Defines the source and header files for the OSX Storage Provider component and adds it as a library to the XBMC project. This setup is crucial for building the OSX-specific storage functionality within the XBMC application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/storage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES OSXStorageProvider.cpp)\n\nset(HEADERS OSXStorageProvider.h)\n\ncore_add_library(platform_osx_storage)\n```\n\n----------------------------------------\n\nTITLE: Adding Android Windowing Library in CMake\nDESCRIPTION: Adds the windowing_android library to the project using a custom core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/android/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(windowing_android)\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Source Files for Service Description in CMake\nDESCRIPTION: Defines a variable containing paths to the JSON source files needed for generating the service description. These include version information, license, API methods, types, and notifications definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(JSON_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/version.txt\n              ${CMAKE_CURRENT_SOURCE_DIR}/license.txt\n              ${CMAKE_CURRENT_SOURCE_DIR}/methods.json\n              ${CMAKE_CURRENT_SOURCE_DIR}/types.json\n              ${CMAKE_CURRENT_SOURCE_DIR}/notifications.json)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Source Files in CMake for XBMC Utils\nDESCRIPTION: Defines a list of source files for testing various utility functions in XBMC. These test files cover functionality like alarm clock, character conversion, file operations, HTTP handling, JSON processing, and XML utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestAlarmClock.cpp\n            TestAliasShortcutUtils.cpp\n            TestArchive.cpp\n            TestArtUtils.cpp\n            TestBase64.cpp\n            TestBitstreamStats.cpp\n            TestCharsetConverter.cpp\n            TestCPUInfo.cpp\n            TestComponentContainer.cpp\n            TestCrc32.cpp\n            TestDatabaseUtils.cpp\n            TestDigest.cpp\n            TestEndianSwap.cpp\n            TestExecString.cpp\n            TestFileOperationJob.cpp\n            TestFileUtils.cpp\n            TestGlobalsHandling.cpp\n            TestGPUInfo.cpp\n            TestHTMLUtil.cpp\n            TestHttpHeader.cpp\n            TestHttpParser.cpp\n            TestHttpRangeUtils.cpp\n            TestHttpResponse.cpp\n            TestJobManager.cpp\n            TestJSONVariantParser.cpp\n            TestJSONVariantWriter.cpp\n            TestLabelFormatter.cpp\n            TestLangCodeExpander.cpp\n            TestLocale.cpp\n            Testlog.cpp\n            TestMap.cpp\n            TestMathUtils.cpp\n            TestMime.cpp\n            TestPOUtils.cpp\n            TestRegExp.cpp\n            TestRingBuffer.cpp\n            TestRssReader.cpp\n            TestScraperParser.cpp\n            TestScraperUrl.cpp\n            TestSortUtils.cpp\n            TestStopwatch.cpp\n            TestStreamDetails.cpp\n            TestStreamUtils.cpp\n            TestStringUtils.cpp\n            TestSystemInfo.cpp\n            TestURIUtils.cpp\n            TestUrlOptions.cpp\n            TestVariant.cpp\n            TestXBMCTinyXML.cpp\n            TestXBMCTinyXML2.cpp\n            TestXMLUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variable in C++\nDESCRIPTION: Example showing how a global variable is declared outside of any class scope.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/HOWTO.KillAGlobal.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nCApplication g_application;\n```\n\n----------------------------------------\n\nTITLE: Setting Game Input Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for game input functionality, including controllers, devices, hardware, and various input peripherals.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GameClientController.cpp\n            GameClientDevice.cpp\n            GameClientHardware.cpp\n            GameClientInput.cpp\n            GameClientJoystick.cpp\n            GameClientKeyboard.cpp\n            GameClientMouse.cpp\n            GameClientPort.cpp\n            GameClientTopology.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Keyboard Input Library Target\nDESCRIPTION: Creates a library target for the keyboard input mapping system using XBMC's custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/keyboard/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(input_keymaps_keyboard)\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Input as Core Library in CMake\nDESCRIPTION: Adds the mouse input handling components as a core library in the XBMC build system. This makes the mouse input functionality available to other components of the application.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/mouse/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_mouse_generic)\n```\n\n----------------------------------------\n\nTITLE: Creating DVD Audio Codecs Library\nDESCRIPTION: Adds the DVD audio codecs as a core library component\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Audio/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(dvdaudiocodecs)\n```\n\n----------------------------------------\n\nTITLE: Configuring VideoPlayer Header Files in CMake\nDESCRIPTION: Defines the list of header files for the VideoPlayer component. Includes headers for various classes and interfaces related to video playback and processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AudioSinkAE.h\n            DVDClock.h\n            DVDDemuxSPU.h\n            DVDFileInfo.h\n            DVDMessage.h\n            DVDMessageQueue.h\n            DVDOverlayContainer.h\n            DVDResource.h\n            DVDStreamInfo.h\n            Edl.h\n            IVideoPlayer.h\n            PTSTracker.h\n            VideoPlayer.h\n            VideoPlayerAudio.h\n            VideoPlayerAudioID3.h\n            VideoPlayerRadioRDS.h\n            VideoPlayerSubtitle.h\n            VideoPlayerTeletext.h\n            VideoPlayerVideo.h\n            VideoReferenceClock.h\n            Interface/StreamInfo.h\n            Interface/DemuxPacket.h\n            Interface/DemuxCrypto.h\n            Interface/InputStreamConstants.h\n            Interface/TimingConstants.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Kodi Addon Development Kit in CMake\nDESCRIPTION: This snippet defines a list of header files for the Kodi addon development kit. It includes core headers for addon base, audio engine, filesystem, general utilities, network, and version information.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  AddonBase.h\n  AudioEngine.h\n  Filesystem.h\n  General.h\n  Network.h\n  versions.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Games Ports Input Library in CMake\nDESCRIPTION: Sets up a list of source files for the XBMC games ports input library. This includes PhysicalPort.cpp, PortInput.cpp, and PortManager.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PhysicalPort.cpp\n            PortInput.cpp\n            PortManager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR GUI Info Library Target\nDESCRIPTION: Creates a library target for the PVR GUI information components using XBMC/Kodi's core library helper function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/guilib/guiinfo/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(pvr_guilib_guiinfo)\n```\n\n----------------------------------------\n\nTITLE: Registering the FreeBSD Support Library\nDESCRIPTION: Adds the freebsdsupport library to the build system using the core_add_library function, making all the previously defined sources and headers part of this library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/freebsd/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(freebsdsupport)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Music Information Scanner\nDESCRIPTION: Sets the source files for the music information scanner component. These files handle album info, artist info, music scanning, and scraping functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/infoscanner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES MusicAlbumInfo.cpp\n            MusicArtistInfo.cpp\n            MusicInfoScanner.cpp\n            MusicInfoScraper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Profiles Source Files in CMake\nDESCRIPTION: Defines the C++ source files for the profiles library component using CMake's set command. Includes Profile.cpp and ProfileManager.cpp files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES Profile.cpp\n            ProfileManager.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Rendering System Sources\nDESCRIPTION: Sets up the basic source and header files for the rendering system implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/rendering/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RenderSystem.cpp)\n\nset(HEADERS RenderSystem.h\n            RenderSystemTypes.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Tree Bootstrap Dependencies for JSON Schema Builder in CMake\nDESCRIPTION: Adds a conditional dependency setup for in-tree builds, ensuring that the generate_json_header target depends on the JsonSchemaBuilder tool when doing bootstrap builds within the source tree.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOTSTRAP_IN_TREE)\n  add_dependencies(generate_json_header JsonSchemaBuilder::JsonSchemaBuilder)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Settings Dialogs in CMake\nDESCRIPTION: Sets up a list of header files corresponding to the source files for XBMC settings dialogs. Includes header files for content settings, library export settings, and various base classes for settings dialogs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIDialogContentSettings.h\n            GUIDialogLibExportSettings.h\n            GUIDialogSettingsBase.h\n            GUIDialogSettingsManagerBase.h\n            GUIDialogSettingsManualBase.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring tvOS Input Header Files in CMake\nDESCRIPTION: Specifies the header files corresponding to the tvOS input handling implementation classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS LibInputHandler.h\n            LibInputRemote.h\n            LibInputSettings.h\n            LibInputTouch.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Keyboard Input Test\nDESCRIPTION: Defines the source files for the keyboard input test library. In this case, it includes a single file 'TestKeyboardTranslator.cpp'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestKeyboardTranslator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Binary Directory Path in CMake\nDESCRIPTION: Configures the CORE_BINARY_DIR variable based on the target platform. For Windows, it sets the path to the application's target file directory, while for other platforms it uses the default CMAKE_BINARY_DIR.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CORE_SYSTEM_NAME} MATCHES \"windows\")\n  set(CORE_BINARY_DIR $<TARGET_FILE_DIR:${APP_NAME_LC}>)\nelse()\n  set(CORE_BINARY_DIR ${CMAKE_BINARY_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Video Dialog Header Files in CMake\nDESCRIPTION: Sets up a list of header files corresponding to the video-related dialog components in XBMC. These headers declare the interfaces for the dialog classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIDialogAudioSettings.h\n            GUIDialogFullScreenInfo.h\n            GUIDialogSubtitles.h\n            GUIDialogSubtitleSettings.h\n            GUIDialogTeletext.h\n            GUIDialogVideoBookmarks.h\n            GUIDialogVideoInfo.h\n            GUIDialogVideoManager.h\n            GUIDialogVideoManagerExtras.h\n            GUIDialogVideoManagerVersions.h\n            GUIDialogVideoOSD.h\n            GUIDialogVideoSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Discouraged Vertical Alignment in C++\nDESCRIPTION: Shows the discouraged approach to code formatting with excessive vertical alignment in C++ for Kodi, which can cause problems during code review.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nint                  value1             {1};\nint                  value2             {2};\n[...]\nCExampleClass       *exampleClass       {};\nCBiggerExampleClass *biggerExampleClass {};\n[...]\nexampleClass       = new CExampleClass      (value1, value2);\nbiggerExampleClass = new CBiggerExampleClass(value1, value2);\n[...]\nexampleClass      ->InitExample();\nbiggerExampleClass->InitExample();\n```\n\n----------------------------------------\n\nTITLE: Setting Source and Header Files for Recursive Mutex in CMake\nDESCRIPTION: Defines the source and header files for a recursive mutex implementation. This is the base set of files that will be used across all platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/threads/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RecursiveMutex.cpp)\nset(HEADERS RecursiveMutex.h)\n```\n\n----------------------------------------\n\nTITLE: Running CMake for Kodi Addon Bootstrapping\nDESCRIPTION: Basic command to execute the cmake-based buildsystem for addon definitions bootstrapping, where <path> is the directory containing the buildsystem files and <generator> is the desired cmake generator.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmake <path> -G <generator>\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Peripheral Bus Library in CMake\nDESCRIPTION: Creates a core library named 'peripheral_bus_virtual' using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/bus/virtual/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(peripheral_bus_virtual)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Input Headers in CMake\nDESCRIPTION: Defines the header files for mouse input handling functionality. Includes the header files that declare interfaces and classes for default mouse handling and general mouse input processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/mouse/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DefaultMouseHandling.h\n            MouseInputHandling.h)\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Targets for Addon Information in CMake\nDESCRIPTION: Creates two custom targets: 'supported_addons' which displays a list of all addons that can be built on the current platform, and 'need-sudo' which indicates whether sudo privileges are required for installation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nstring(REPLACE \";\" \" \" ALL_ADDONS_BUILDING \"${ALL_ADDONS_BUILDING}\")\nadd_custom_target(supported_addons COMMAND ${CMAKE_COMMAND} -E echo \"ALL_ADDONS_BUILDING: ${ALL_ADDONS_BUILDING}\" VERBATIM)\nadd_custom_target(need-sudo COMMAND ${CMAKE_COMMAND} -E echo ${NEED_SUDO} VERBATIM)\n```\n\n----------------------------------------\n\nTITLE: Configuring ProcessInfoOSX Component in CMake for XBMC\nDESCRIPTION: This CMake snippet sets up the source files, headers, and creates a library for the ProcessInfoOSX component. It defines the SOURCES and HEADERS variables with the respective files and uses the core_add_library function to create the 'processosx' library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/osx/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ProcessInfoOSX.cpp)\n\nset(HEADERS ProcessInfoOSX.h)\n\ncore_add_library(processosx)\n```\n\n----------------------------------------\n\nTITLE: Adding paplayer Library in CMake\nDESCRIPTION: Calls a custom CMake function to add the paplayer library to the project build configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/paplayer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(paplayer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC List Providers in CMake\nDESCRIPTION: Specifies the header files for list providers in the XBMC project. These files contain the declarations of various list provider classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/listproviders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DirectoryProvider.h\n            IListProvider.h\n            MultiProvider.h\n            StaticProvider.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Timer Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for PVR timer functionality including timer info tags, rule matcher, timers management, timer paths, and timer types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/timers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES PVRTimerInfoTag.cpp\n            PVRTimerRuleMatcher.cpp\n            PVRTimers.cpp\n            PVRTimersPath.cpp\n            PVRTimerType.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Input Sources in CMake\nDESCRIPTION: Defines the source files for mouse input handling functionality. Includes the implementation files for default mouse handling and general mouse input processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/mouse/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DefaultMouseHandling.cpp\n            MouseInputHandling.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Windows Core Library\nDESCRIPTION: Creates a core library named 'windows' that will compile the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windows)\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Power Management Source Files in CMake\nDESCRIPTION: Sets up the source and header files for the macOS power management module in Kodi, and registers them as a core library. The module handles power-related functions specific to macOS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/powermanagement/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CocoaPowerSyscall.cpp)\nset(HEADERS CocoaPowerSyscall.h)\n\ncore_add_library(platform_darwin_osx_powermanagement)\n```\n\n----------------------------------------\n\nTITLE: Adding Profile Dialogs Library in CMake for XBMC Core\nDESCRIPTION: Adds the 'profiles_dialogs' library to the XBMC core using a custom CMake function. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(profiles_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Addons Core Library in CMake\nDESCRIPTION: Calls the core_add_library function to create a library named 'pvr_addons'. This library likely includes the previously defined source and header files for PVR addon functionality in XBMC.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/addons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_addons)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Input Windows Library in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of CPP source files for the input_windows library. Includes IRServerSuite.cpp and IrssMessage.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES IRServerSuite.cpp\n            IrssMessage.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for platform_common in CMake\nDESCRIPTION: Sets the source files that will be compiled for the platform_common library, including Environment.cpp and xbmc.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Environment.cpp\n            xbmc.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Interface Header Files in CMake\nDESCRIPTION: Defines the list of header files corresponding to the Python interface implementation components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/python/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AddonPythonInvoker.h\n            CallbackHandler.h\n            ContextItemAddonInvoker.h\n            LanguageHook.h\n            preamble.h\n            PyContext.h\n            PythonInvoker.h\n            pythreadstate.h\n            swig.h\n            XBPython.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Joystick Input Library in CMake\nDESCRIPTION: This snippet defines the header files for the joystick input library. It includes headers for driver receiving, feature handling, and input handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DriverReceiving.h\n            FeatureHandling.h\n            InputHandling.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Profile and Lock Settings Dialogs in CMake\nDESCRIPTION: Specifies the header files for the profile and lock settings dialogs. Includes two .h files corresponding to the GUI dialog implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIDialogLockSettings.h\n            GUIDialogProfileSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Defining JSONRPC Version for XBMC\nDESCRIPTION: Version string constant that defines the JSON-RPC API version number as 13.7.1 for XBMC/Kodi media center.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/version.txt#2025-04-21_snippet_0\n\nLANGUAGE: version\nCODE:\n```\nJSONRPC_VERSION 13.7.1\n```\n\n----------------------------------------\n\nTITLE: Including OpenGLES Renderer Files in CMake\nDESCRIPTION: Adds OpenGLES-specific renderer files to the source and header lists if the OpenGLES target is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoRenderers/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES RPRendererOpenGLES.cpp)\n  list(APPEND HEADERS RPRendererOpenGLES.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping XBMC Python Interface Directories\nDESCRIPTION: A configuration that maps source directories to target paths for Python components in the XBMC/Kodi project. This structure defines how Python interfaces, legacy code, WSGI components, and SWIG bindings are organized within the codebase.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/optional/common/python.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxbmc/interfaces/legacy interfaces/legacy # PYTHON\nxbmc/interfaces/legacy/wsgi interfaces/legacy/wsgi # PYTHON\nxbmc/interfaces/python interfaces/python # PYTHON\nxbmc/interfaces/swig swig # PYTHON\n```\n\n----------------------------------------\n\nTITLE: Adding DVD Input Streams Library in CMake\nDESCRIPTION: Adds the DVD input streams as a core library to the project using a custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDInputStreams/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(dvdinputstreams)\n```\n\n----------------------------------------\n\nTITLE: Setting Generated Properties for Wayland Protocol Files in CMake\nDESCRIPTION: Marks Wayland protocol files as generated to ensure proper build handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.cpp\n                            ${WAYLAND_EXTRA_PROTOCOL_GENERATED_DIR}/wayland-extra-protocols.hpp\n                            PROPERTIES GENERATED TRUE)\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Test Library in CMake for XBMC\nDESCRIPTION: Adds a test library for the GUI components using a custom CMake function 'core_add_test_library'. The library is named 'guilib_test'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_test_library(guilib_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Subdirectory and Package-Addons Target\nDESCRIPTION: Adds the dependency subdirectory for general dependencies and creates a custom target for packaging all addons.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n### add the depends subdirectory for any general dependencies\nmessage(STATUS \"\\n-- ---- Preparing general dependencies ----\")\nadd_subdirectory(depends)\n\n# add a custom target \"package-addons\" which will package and install all addons\nadd_custom_target(package-addons)\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Pairs Output\nDESCRIPTION: Two-column numeric data output showing paired values, separated by tabs\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/test/edl/testdata/comskipversion2.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n12693\t17792\n28578\t34549\n43114\t48222\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Library Header Files in CMake\nDESCRIPTION: Defines the header files list containing thread synchronization primitives, timing utilities, and interface definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/threads/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS Condition.h\n            CriticalSection.h\n            Event.h\n            Lockables.h\n            SharedSection.h\n            SingleLock.h\n            SystemClock.h\n            Thread.h\n            Timer.h\n            IThreadImpl.h\n            IRunnable.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC GUI Library in CMake\nDESCRIPTION: This snippet sets the SOURCES variable with the list of source files for the XBMC GUI utilities. It includes two CPP files related to GUI builtin functions and content utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/guilib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIBuiltinsUtils.cpp\n            GUIContentUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Library for XBMC Settings Dialogs in CMake\nDESCRIPTION: Adds a core library named 'settings_dialogs' to the XBMC project. This library likely incorporates the previously defined source and header files for settings dialogs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(settings_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Test Sources with CMake\nDESCRIPTION: Sets up source files for network testing, including conditional compilation of WebServer tests based on MicroHttpd target availability. Creates a test library for network components using core_add_test_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/network/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestNetwork.cpp\n            TestNetworkFileItemClassify.cpp)\n\nif(TARGET ${APP_NAME_LC}::MicroHttpd)\n  list(APPEND SOURCES TestWebServer.cpp)\nendif()\n\ncore_add_test_library(network_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Client Source Files in CMake\nDESCRIPTION: Sets up a list of source files for the game client component. These files contain the core functionality for game client operations in XBMC/Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GameClient.cpp\n            GameClientInGameSaves.cpp\n            GameClientProperties.cpp\n            GameClientSubsystem.cpp\n            GameClientTranslator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Interface Library Target in CMake\nDESCRIPTION: Creates a library target for the Python interface component using XBMC's core build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/python/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(python_interface)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Games Windows Module in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for the games windows module. These files likely contain implementations for the GUI view state and window handling for games.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIViewStateWindowGames.cpp\n            GUIWindowGames.cpp)\n```\n\n----------------------------------------\n\nTITLE: ALSA Support Configuration\nDESCRIPTION: Adds file descriptor event monitor files when ALSA support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Alsa)\n  list(APPEND SOURCES FDEventMonitor.cpp)\n  list(APPEND HEADERS FDEventMonitor.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Core RPProcessInfo Source and Header Files\nDESCRIPTION: Defines the base source and header files for the RPProcessInfo module using CMake variables.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RPProcessInfo.cpp)\n\nset(HEADERS RPProcessInfo.h)\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Announcement Handlers Library\nDESCRIPTION: Adds the GUI announcement handlers as a core library component in the build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/handlers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(guilib_announcement_handlers)\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for Input Stream Addon Instance in CMake\nDESCRIPTION: This snippet defines a list of header files related to input stream functionality. It includes headers for demux packets, stream codecs, constants, crypto, and timing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/inputstream/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  demux_packet.h\n  stream_codec.h\n  stream_constants.h\n  stream_crypto.h\n  timing_constants.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for Inputstream Addon Instance in CMake\nDESCRIPTION: This snippet defines a list of header files required for the inputstream addon instance. It includes files related to demux packets, stream codecs, constants, and crypto operations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/inputstream/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n  DemuxPacket.h\n  StreamCodec.h\n  StreamConstants.h\n  StreamCrypto.h\n  TimingConstants.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Event Log Windows in CMake\nDESCRIPTION: Defines the source files for the XBMC event log windows component. Includes two C++ source files related to GUI view state and window for the event log.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/events/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIViewStateEventLog.cpp\n            GUIWindowEventLog.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Database Directory Test Sources in CMake\nDESCRIPTION: This snippet defines the source files for video database directory tests and adds them as a test library using a custom CMake function. It includes three test files related to movie assets and titles.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/VideoDatabaseDirectory/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestNodeMovieAssets.cpp\n            TestNodeMovieAssetTypes.cpp\n            TestNodeTitleMovies.cpp)\n\ncore_add_test_library(videodatabasedirectory_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Thread Implementation Sources in CMake\nDESCRIPTION: Defines source files, header files and creates a Windows-specific threading library for XBMC/Kodi. Sets up build configuration for ThreadImplWin and Win32Exception components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/threads/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ThreadImplWin.cpp\n            Win32Exception.cpp)\n\nset(HEADERS ThreadImplWin.h\n            Win32Exception.h)\n\ncore_add_library(threads_win)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for XBMC Process Library\nDESCRIPTION: Defines source and header files for the process module and creates a core library using CMake. The configuration sets up ProcessInfo.cpp as the source file and ProcessInfo.h as the header file, then builds them into a library named 'process'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ProcessInfo.cpp)\nset(HEADERS ProcessInfo.h)\n\ncore_add_library(process)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building Linux Windowing Library in CMake\nDESCRIPTION: Checks if any sources have been added to the SOURCES list. If so, calls core_add_library to build the windowing_linux library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(SOURCES)\n  core_add_library(windowing_linux)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Source Configuration\nDESCRIPTION: Adds DirectX-specific source files and headers when building for Windows platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES D3DResource.cpp\n                      DirectXGraphics.cpp\n                      [...other sources...])\n  list(APPEND HEADERS D3DResource.h\n                      DirectXGraphics.h\n                      [...other headers...])\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting PVR GUI Info Header Files in CMake\nDESCRIPTION: Specifies the header files corresponding to the PVR GUI information components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/guilib/guiinfo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS PVRGUIInfo.h\n            PVRGUITimerInfo.h\n            PVRGUITimesInfo.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer Library Dependencies\nDESCRIPTION: Sets up conditional dependency handling based on whether static libraries are enabled. Links against either the static library or the main application library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/savestates/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_STATIC_LIBS)\n  add_dependencies(retroplayer_savestates ${DEPENDS})\nelse()\n  add_dependencies(lib${APP_NAME_LC} ${DEPENDS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: GPL License Header Template for Source Files\nDESCRIPTION: A template for the copyright and license notice that should be included at the beginning of each source file. It contains placeholders for program name, year, and author name, along with the standard GPL notices about redistribution terms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/LICENSES/GPL-3.0-or-later.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Profiles Header Files in CMake\nDESCRIPTION: Defines the C++ header files for the profiles library component using CMake's set command. Includes Profile.h and ProfileManager.h files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS Profile.h\n            ProfileManager.h)\n```\n\n----------------------------------------\n\nTITLE: Creating Thread Library Target in CMake\nDESCRIPTION: Adds the threads library target using the defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/threads/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(threads)\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Platform Library Target\nDESCRIPTION: Adds the Windows platform implementation as a library target in the build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_win32)\n```\n\n----------------------------------------\n\nTITLE: Creating POSIX Platform Library\nDESCRIPTION: Creates a core library named 'platform_posix' using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_posix)\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 RPProcessInfo CMake Build\nDESCRIPTION: Configures the build settings for the X11-specific implementation of RPProcessInfo. Sets up source files, header files and creates a library target named rp-process-x11.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/X11/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RPProcessInfoX11.cpp)\n\nset(HEADERS RPProcessInfoX11.h)\n\ncore_add_library(rp-process-x11)\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Actions Interface Headers and Library\nDESCRIPTION: Sets up header files for input actions interface and conditionally adds the input actions interfaces library if static libraries are not enabled. Manages build configuration for the input action listener component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/actions/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IActionListener.h\n)\n\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_actions_interfaces)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Core Picture Module Header Files in CMake\nDESCRIPTION: Sets the main header files for the pictures module corresponding to the implementation files, including the interface for slide show delegation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS interfaces/ISlideShowDelegate.h\n            GUIDialogPictureInfo.h\n            GUIViewStatePictures.h\n            GUIWindowPictures.h\n            GUIWindowSlideShow.h\n            Picture.h\n            PictureFolderImageFileLoader.h\n            PictureInfoLoader.h\n            PictureInfoTag.h\n            PictureScalingAlgorithm.h\n            PictureThumbLoader.h\n            SlideShowDelegator.h\n            SlideShowPicture.h)\n```\n\n----------------------------------------\n\nTITLE: Adding TVOS Filesystem Library to XBMC/Kodi Project in CMake\nDESCRIPTION: Uses a custom CMake function to add the TVOS filesystem implementation as a library to the XBMC/Kodi project. This library will contain the compiled code from the previously defined source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/filesystem/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_tvos_filesystem)\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Header Files in CMake\nDESCRIPTION: Specifies the header files for iOS platform implementation, including interface declarations for view controllers and application components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IOSEAGLView.h\n            IOSExternalTouchController.h\n            IOSKeyboardView.h\n            IOSScreenManager.h\n            XBMCApplication.h\n            XBMCController.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Settings Windows Header Files in CMake\nDESCRIPTION: Defines the list of header files corresponding to the settings windows components. Includes header files for control settings, general settings window, category settings, and screen calibration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIControlSettings.h\n            GUIWindowSettings.h\n            GUIWindowSettingsCategory.h\n            GUIWindowSettingsScreenCalibration.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for GUI Control Factory Test in CMake\nDESCRIPTION: Defines the source files for the GUI control factory test. In this case, it specifies a single source file 'TestGUIControlFactory.cpp'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestGUIControlFactory.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Dialog Headers in CMake\nDESCRIPTION: Defines a list of header files for various GUI dialog components including context menus, progress bars, file browsers, and dialog boxes. Sets up the development kit headers when HEADERS variable is defined.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/gui/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  ContextMenu.h\n  ExtendedProgress.h\n  FileBrowser.h\n  Keyboard.h\n  Numeric.h\n  OK.h\n  Progress.h\n  Select.h\n  TextViewer.h\n  YesNo.h\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(HEADERS)\n  core_add_devkit_header(kodi_gui_dialogs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch Translator CMake Build Sources\nDESCRIPTION: Defines source and header files for the touch input translator component and adds it as a core library. Sets up CMake variables for source files, headers and registers the library build target.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/touch/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TouchTranslator.cpp\n)\n\nset(HEADERS TouchTranslator.h\n)\n\ncore_add_library(input_keymaps_touch)\n```\n\n----------------------------------------\n\nTITLE: Installing Git on FreeBSD\nDESCRIPTION: Command to install Git version control system using FreeBSD package manager.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.FreeBSD.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pkg install git\n```\n\n----------------------------------------\n\nTITLE: Displaying Sudo Installation Instructions in CMake\nDESCRIPTION: Outputs warning and status messages informing the user that sudo privileges are required for installation and provides instructions on how to perform the installation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(WARNING \"sudo rights needed to install to ${CMAKE_INSTALL_PREFIX}\")\n  message(STATUS \"\\nplease type \\\"make sudo-install\\\"\\n\\n\")\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Video Filter Sources\nDESCRIPTION: Adds Windows-specific video filter and conversion components when building for Windows platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)\n  list(APPEND SOURCES ConversionMatrix.cpp\n                      ToneMappers.cpp\n                      WinVideoFilter.cpp)\n  list(APPEND HEADERS ConversionMatrix.h\n                      ToneMappers.h\n                      WinVideoFilter.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-Specific Defines\nDESCRIPTION: Checks for platform-specific definitions from defines.txt file if it exists and sets up architecture definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# check for platform specific stuff\nif(EXISTS ${PLATFORM_DIR}/defines.txt)\n  file(STRINGS ${PLATFORM_DIR}/defines.txt platformdefines)\n\n  if(NOT ARCH_DEFINES AND platformdefines)\n    set(ARCH_DEFINES ${platformdefines})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Recordings Library in CMake\nDESCRIPTION: Uses a custom CMake function 'core_add_library' to create a library named 'pvr_recordings'. This function likely compiles the previously defined source and header files into the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/recordings/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_recordings)\n```\n\n----------------------------------------\n\nTITLE: Conditional Optical Drive Support in CMake\nDESCRIPTION: Adds additional source and header files when optical drive support is enabled through the ENABLE_OPTICAL flag.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_OPTICAL)\n  list(APPEND SOURCES GUIDialogPlayEject.cpp)\n  list(APPEND HEADERS GUIDialogPlayEject.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Header Files for Peripherals Events\nDESCRIPTION: Defines the list of header files corresponding to the peripherals events implementation classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/events/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS EventLockHandle.h\n            EventPollHandle.h\n            EventScanner.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GBM Header Files in CMake for XBMC/Kodi\nDESCRIPTION: Defines a list of header files for the GBM windowing system, corresponding to the previously defined source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS OptionalsReg.h\n            WinSystemGbm.h\n            VideoSyncGbm.h\n            GBMUtils.h\n            WinSystemGbmEGLContext.h\n            GBMDPMSSupport.h)\n```\n\n----------------------------------------\n\nTITLE: Adding DVD Codec Library in CMake\nDESCRIPTION: Uses a custom CMake command 'core_add_library' to add the DVD codec library named 'dvdcodecs' to the build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(dvdcodecs)\n```\n\n----------------------------------------\n\nTITLE: Setting Dialog Header Files in CMake\nDESCRIPTION: Defines the list of header (.h) files for XBMC dialog components that need to be included.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIDialogBoxBase.h\n            GUIDialogBusy.h\n            GUIDialogBusyNoCancel.h\n            GUIDialogButtonMenu.h\n            GUIDialogCache.h\n            GUIDialogColorPicker.h\n            GUIDialogContextMenu.h\n            GUIDialogExtendedProgressBar.h\n            GUIDialogFileBrowser.h\n            GUIDialogGamepad.h\n            GUIDialogKaiToast.h\n            GUIDialogKeyboardGeneric.h\n            GUIDialogKeyboardTouch.h\n            GUIDialogMediaFilter.h\n            GUIDialogMediaSource.h\n            GUIDialogNumeric.h\n            GUIDialogOK.h\n            GUIDialogPlayerControls.h\n            GUIDialogPlayerProcessInfo.h\n            GUIDialogProgress.h\n            GUIDialogSeekBar.h\n            GUIDialogSelect.h\n            GUIDialogSimpleMenu.h\n            GUIDialogSlider.h\n            GUIDialogSmartPlaylistEditor.h\n            GUIDialogSmartPlaylistRule.h\n            GUIDialogSubMenu.h\n            GUIDialogTextViewer.h\n            GUIDialogVolumeBar.h\n            GUIDialogYesNo.h\n            IGUIVolumeBarCallback.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for KeyHandler in CMake\nDESCRIPTION: This snippet specifies the header files for the KeyHandler component using CMake's set command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS KeyHandler.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MediaCodecDecoderFilterManager CMake Component\nDESCRIPTION: Sets up the source files, header files, and defines a library target for the MediaCodecDecoderFilterManager component. The configuration includes one source file, one header file, and creates a library named 'mediacodecdecoderfilter'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/android/media/decoderfilter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES MediaCodecDecoderFilterManager.cpp)\n\nset(HEADERS MediaCodecDecoderFilterManager.h)\n\ncore_add_library(mediacodecdecoderfilter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Windows 10 Filesystem Library in CMake\nDESCRIPTION: Sets the HEADERS variable with the header files for the Windows 10 filesystem library. It includes WinLibraryDirectory.h and WinLibraryFile.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/filesystem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS WinLibraryDirectory.h\n            WinLibraryFile.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Speech Recognition Stub Sources in CMake\nDESCRIPTION: Sets up the source and header files for the speech recognition stub library. It defines SOURCES and HEADERS variables with the respective file names.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/common/speech/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES SpeechRecognitionStub.cpp)\n\nset(HEADERS SpeechRecognitionStub.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Settings Dialogs in CMake\nDESCRIPTION: Sets up a list of source files for XBMC settings dialogs. Includes files for content settings, library export settings, and various base classes for settings dialogs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogContentSettings.cpp\n            GUIDialogLibExportSettings.cpp\n            GUIDialogSettingsBase.cpp\n            GUIDialogSettingsManagerBase.cpp\n            GUIDialogSettingsManualBase.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for RetroPlayer Cheevos in CMake\nDESCRIPTION: Sets the SOURCES variable with the main source file for the Cheevos component. This defines the C++ implementation file to be compiled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/cheevos/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Cheevos.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC GUI Dialogs in CMake\nDESCRIPTION: This snippet defines a list of header files corresponding to the source files for GUI dialog components in the XBMC project. These headers declare the interfaces for the dialog classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ContextMenu.h\n            ExtendedProgressBar.h\n            FileBrowser.h\n            Keyboard.h\n            Numeric.h\n            OK.h\n            Progress.h\n            Select.h\n            TextViewer.h\n            YesNo.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Headers in CMake for XBMC Utils\nDESCRIPTION: Defines the header files required for testing, specifically including TestGlobalsHandlingPattern1.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS TestGlobalsHandlingPattern1.h)\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC/Kodi Beta Versions in JSON\nDESCRIPTION: This JSON structure defines the beta versions for XBMC/Kodi. Each entry includes major and minor version numbers, tag information, revision numbers, and addon support status for various beta releases.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.txt#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"beta\": [\n    {\n        \"major\": \"19\",\n        \"minor\": \"0\",\n        \"tag\": \"beta\",\n        \"tagversion\":\"2\",\n        \"revision\": \"20201207-8cc9e80e41\",\n        \"extrainfo\": \"beta2\",\n        \"addon_support\": \"yes\"\n    },\n    {\n        \"major\": \"19\",\n        \"minor\": \"0\",\n        \"tag\": \"beta\",\n        \"tagversion\":\"1\",\n        \"revision\": \"20201117-88e186e4b4\",\n        \"extrainfo\": \"beta1\",\n        \"addon_support\": \"yes\"\n    },\n    {\n        \"major\": \"18\",\n        \"minor\": \"0\",\n        \"tag\": \"beta\",\n        \"tagversion\":\"5\",\n        \"revision\": \"20181103-920e823249\",\n```\n\n----------------------------------------\n\nTITLE: Adding Windows 10 Threads Library in CMake\nDESCRIPTION: Adds a core library for Windows 10 thread implementation. This likely includes the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/threads/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(threads_win10)\n```\n\n----------------------------------------\n\nTITLE: Setting PVR Header Files in CMake\nDESCRIPTION: Defines a list of header files related to PVR functionality including channel groups, EPG, recordings, and timers. These headers are essential for PVR addon development in Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/addon-instance/pvr/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  ChannelGroups.h\n  Channels.h\n  EDL.h\n  EPG.h\n  General.h\n  MenuHook.h\n  Providers.h\n  Recordings.h\n  Stream.h\n  Timers.h\n)\n```\n\n----------------------------------------\n\nTITLE: Including Dependency Handler and Processing Dependencies\nDESCRIPTION: Includes the HandleDepends.cmake script and calls add_addon_depends to process all dependencies defined in the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CORE_SOURCE_DIR}/cmake/scripts/common/HandleDepends.cmake)\nadd_addon_depends(depends \"${PROJECT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Controller Dialog Library in CMake\nDESCRIPTION: Creates a library target for the controller dialog components using XBMC's core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/dialogs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(games_controller_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Creating XBMC Input Joystick Dialogs Library\nDESCRIPTION: Adds a new library target for the input joystick dialogs component using XBMC's custom core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/dialogs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(input_joystick_dialogs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Addon Settings in CMake\nDESCRIPTION: Sets the HEADERS variable with the list of header files for addon settings. Includes AddonSettings.h and SettingUrlEncodedString.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/settings/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AddonSettings.h\n            SettingUrlEncodedString.h)\n```\n\n----------------------------------------\n\nTITLE: Defining DRM and GBM Source Files in CMake\nDESCRIPTION: Sets up a list of source files for DRM and GBM components including atomic, connector, CRTC, encoder, legacy, object, plane, utils, and off-screen mode setting implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/drm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DRMAtomic.cpp\n            DRMConnector.cpp\n            DRMCrtc.cpp\n            DRMEncoder.cpp\n            DRMLegacy.cpp\n            DRMObject.cpp\n            DRMPlane.cpp\n            DRMUtils.cpp\n            OffScreenModeSetting.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Creating Linux Input Library in CMake\nDESCRIPTION: Creates the input_linux library only if there are sources to compile. This prevents creating an empty library when no input components are enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/input/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SOURCES)\n  core_add_library(input_linux)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining PVR Windows Header Files in CMake\nDESCRIPTION: Sets up a list of header files for the PVR windows component. These headers correspond to the source files and define the interfaces for PVR-related GUI windows and view states.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIViewStatePVR.h\n            GUIWindowPVRBase.h\n            GUIWindowPVRChannels.h\n            GUIWindowPVRGuide.h\n            GUIWindowPVRProviders.h\n            GUIWindowPVRRecordings.h\n            GUIWindowPVRSearch.h\n            GUIWindowPVRTimerRules.h\n            GUIWindowPVRTimers.h\n            GUIWindowPVRTimersBase.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for KeyHandler in CMake\nDESCRIPTION: This snippet specifies the source files for the KeyHandler component using CMake's set command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES KeyHandler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating CD Ripping Library Target in CMake\nDESCRIPTION: Uses a custom CMake function 'core_add_library' to create a library target named 'cdrip'. This library will contain all the CD ripping and encoding functionality defined in the source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cdrip/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(cdrip)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Controller Components in CMake\nDESCRIPTION: This snippet defines a CMake variable 'HEADERS' containing the header files for controller-related components in XBMC. It includes headers for ControllerGrid, ControllerHub, ControllerNode, and ControllerTree.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/types/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ControllerGrid.h\n            ControllerHub.h\n            ControllerNode.h\n            ControllerTree.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebOS Starfish Sources\nDESCRIPTION: Adds Starfish renderer source files for WebOS platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"webos\" IN_LIST CORE_PLATFORM_NAME_LC)\n  list(APPEND SOURCES RendererStarfish.cpp)\n  list(APPEND HEADERS RendererStarfish.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Wayland Windowing Library to XBMC Core in CMake\nDESCRIPTION: Adds the Wayland windowing system as a core library to the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(windowing_WAYLAND)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Music Windows Module in CMake\nDESCRIPTION: Defines the source files for the music windows module. These files implement functionality for music navigation, playlist management, and visualization in the XBMC interface.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIWindowMusicBase.cpp\n            GUIWindowMusicNav.cpp\n            GUIWindowMusicPlaylist.cpp\n            GUIWindowMusicPlaylistEditor.cpp\n            GUIWindowVisualisation.cpp\n            MusicFileItemListModifier.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Header Files\nDESCRIPTION: Sets up variables for source and header files needed for the WiiRemote component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/WiiRemote/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES CWIID_WiiRemote.cpp)\n\nset(HEADERS CWIID_WiiRemote.h)\n```\n\n----------------------------------------\n\nTITLE: Determining System Name for Platform-Specific Configuration\nDESCRIPTION: Sets CORE_SYSTEM_NAME based on CMAKE_SYSTEM_NAME if not already defined. This variable is used for platform-specific build configurations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CORE_SYSTEM_NAME)\n  string(TOLOWER ${CMAKE_SYSTEM_NAME} CORE_SYSTEM_NAME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Windows Video Shader in CMake\nDESCRIPTION: Sets the HEADERS variable with the header file for the Windows output shader. This specifies the header files associated with the shader module.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS RPWinOutputShader.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Header Files for XBMC Player Core\nDESCRIPTION: Specifies the header files corresponding to the player core factory module components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/playercorefactory/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS PlayerCoreConfig.h\n            PlayerCoreFactory.h\n            PlayerSelectionRule.h)\n```\n\n----------------------------------------\n\nTITLE: Python Build Dependencies Path Pattern\nDESCRIPTION: Specifies the path pattern for Python build dependencies within the project structure, maintaining directory hierarchy with the ARCH placeholder for architecture-specific binaries.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/windows/python.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject/BuildDependencies/${ARCH}/bin/Python KEEP_DIR_STRUCTURE system\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies with FetchContent in CMake\nDESCRIPTION: Sets up dependencies for Groovy, Apache Commons Lang, and Apache Commons Text using CMake's FetchContent module. Defines URLs, versions, and hash checks for each dependency, and provides conditional downloading logic.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/swig/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Java COMPONENTS Runtime REQUIRED)\nfind_package(SWIG REQUIRED)\n\n# Default URL/Versions/Hashes to use unless *_SOURCE_DIR are set for the relevant binary\nset(GROOVY_VER 4.0.26)\nset(GROOVY_URL ${KODI_MIRROR}/build-deps/sources/apache-groovy-binary-${GROOVY_VER}.zip)\nset(GROOVY_URL_HASH URL_HASH SHA512=60d1aea85008a438a9498178dc2137385653f1ea294e7e257959e9e0f94382e160e217e1090047c2a944e328cf46e8ebcfc4b015f7d0cb9f2fcf9d880c6c1344)\n\nset(APACHE_COMMONS_LANG_VER 3.17.0)\nset(APACHE_COMMONS_LANG_URL ${KODI_MIRROR}/build-deps/sources/commons-lang3-${APACHE_COMMONS_LANG_VER}-bin.tar.gz)\nset(APACHE_COMMONS_LANG_URL_HASH URL_HASH SHA512=8927a406a1bd084b548f89cf15fe4bc7567dcaa50ae8abae54e9c883c1574c648fcc8ad6c3abaa381dfbdf1801727ac5e6c4572063203a1dfac293d122282f05)\n\nset(APACHE_COMMONS_TEXT_VER 1.13.0)\nset(APACHE_COMMONS_TEXT_URL ${KODI_MIRROR}/build-deps/sources/commons-text-${APACHE_COMMONS_TEXT_VER}-bin.tar.gz)\nset(APACHE_COMMONS_TEXT_URL_HASH URL_HASH SHA512=a51667463e88b2d017c3baebb9bbe42c4e50cba96ffe19c89680e82002a4db8b9007daff75f8dbf8bf3725be13a3f03f3c2bc4e1f11e8e02dcab4408abdb44a1)\n\ninclude(FetchContent)\nFetchContent_Declare(\n  groovy\n  URL ${GROOVY_URL}\n  ${GROOVY_URL_HASH}\n  DOWNLOAD_DIR ${TARBALL_DIR}\n  SOURCE_DIR ${DEPENDS_PATH}/share/groovy\n)\n\nFetchContent_Declare(\n  apache-commons-lang\n  URL ${APACHE_COMMONS_LANG_URL}\n  ${APACHE_COMMONS_LANG_URL_HASH}\n  DOWNLOAD_DIR ${TARBALL_DIR}\n  SOURCE_DIR ${DEPENDS_PATH}/share/java/lang\n)\n\nFetchContent_Declare(\n  apache-commons-text\n  URL ${APACHE_COMMONS_TEXT_URL}\n  ${APACHE_COMMONS_TEXT_URL_HASH}\n  DOWNLOAD_DIR ${TARBALL_DIR}\n  SOURCE_DIR ${DEPENDS_PATH}/share/java/text\n)\n\nif(NOT groovy_SOURCE_DIR)\n  if(NOT EXISTS ${DEPENDS_PATH}/share/groovy/lib/groovy-${GROOVY_VER}.jar OR\n     NOT EXISTS ${DEPENDS_PATH}/share/groovy/lib/groovy-xml-${GROOVY_VER}.jar OR\n     NOT EXISTS ${DEPENDS_PATH}/share/groovy/lib/groovy-templates-${GROOVY_VER}.jar)\n    FetchContent_MakeAvailable(groovy)\n  else()\n    set(groovy_SOURCE_DIR ${DEPENDS_PATH}/share/groovy)\n  endif()\nendif()\n\nif(NOT apache-commons-lang_SOURCE_DIR)\n  if(NOT EXISTS ${DEPENDS_PATH}/share/java/lang/commons-lang3-${APACHE_COMMONS_LANG_VER}.jar)\n    FetchContent_MakeAvailable(apache-commons-lang)\n  else()\n    set(apache-commons-lang_SOURCE_DIR ${DEPENDS_PATH}/share/java/lang)\n  endif()\nendif()\n\nif(NOT apache-commons-text_SOURCE_DIR)\n  if(NOT EXISTS ${DEPENDS_PATH}/share/java/text/commons-text-${APACHE_COMMONS_TEXT_VER}.jar)\n    FetchContent_MakeAvailable(apache-commons-text)\n  else()\n    set(apache-commons-text_SOURCE_DIR ${DEPENDS_PATH}/share/java/text)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC View Library in CMake\nDESCRIPTION: Calls the core_add_library function to add the 'view' library to the XBMC project. This command likely compiles the previously defined source files into a library named 'view'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/view/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(view)\n```\n\n----------------------------------------\n\nTITLE: Processing Repository Definitions for Kodi Addons\nDESCRIPTION: Parses repository definition files and bootstraps the requested repositories. It handles selection of specific repositories or bootstrapping all available ones based on configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# look for all addons repository definitions\nset(REPOSITORY_TO_BUILD_FOUND OFF)\nfile(GLOB repos repositories/*.txt)\nforeach(repo ${repos})\n  file(STRINGS ${repo} repo_definition)\n  string(REPLACE \" \" \";\" repo_definition ${repo_definition})\n  list(GET repo_definition 0 repo_id)\n\n  list(FIND REPOSITORY_TO_BUILD ${repo_id} idx)\n  if(idx GREATER -1 OR REPOSITORY_TO_BUILD STREQUAL \"all\")\n    set(REPOSITORY_TO_BUILD_FOUND ON)\n\n    # get the URL of the repository\n    list(GET repo_definition 1 repo_url)\n\n    # get the revision of the repository if not provided as an argument\n    if(NOT REPOSITORY_REVISION)\n      list(GET repo_definition 2 repo_revision)\n    else()\n      set(repo_revision \"${REPOSITORY_REVISION}\")\n    endif()\n\n    bootstrap_repo(${repo_id} ${repo_url} ${repo_revision})\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting XBMC Window Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) corresponding to the XBMC window components' source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIMediaWindow.h\n            GUIWindowDebugInfo.h\n            GUIWindowFileManager.h\n            GUIWindowHome.h\n            GUIWindowLoginScreen.h\n            GUIWindowPointer.h\n            GUIWindowScreensaver.h\n            GUIWindowScreensaverDim.h\n            GUIWindowSplash.h\n            GUIWindowStartup.h\n            GUIWindowSystemInfo.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer Stream Header Files in CMake\nDESCRIPTION: Defines a list of header files for RetroPlayer stream components. These files contain the declarations and interfaces for audio, video, rendering, and stream management functionalities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/streams/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IRetroPlayerStream.h\n            IStreamManager.h\n            RetroPlayerAudio.h\n            RetroPlayerRendering.h\n            RetroPlayerStreamTypes.h\n            RetroPlayerVideo.h\n            RPStreamManager.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Subsystem Build with CMake\nDESCRIPTION: This snippet defines the source files, header files, and creates the media library target for the XBMC/Kodi project. It specifies MediaType.cpp as the source file, MediaLockState.h and MediaType.h as the header files, and uses a custom core_add_library command to create the media library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/media/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES MediaType.cpp)\n\nset(HEADERS MediaLockState.h\n            MediaType.h)\n\ncore_add_library(media)\n```\n\n----------------------------------------\n\nTITLE: Creating tvOS Input Library Target\nDESCRIPTION: Creates the platform-specific tvOS input library using the defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/tvos/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_tvos_input)\n```\n\n----------------------------------------\n\nTITLE: Configuring EDL Test Sources and Library in CMake\nDESCRIPTION: Sets up the test source files and creates a test library for EDL functionality. Defines TestEdl.cpp as the source file and creates a test library named edl_test.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/test/edl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestEdl.cpp)\n\ncore_add_test_library(edl_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Sources for XBMC Decoder Filter\nDESCRIPTION: Defines CMake build configuration for the decoder filter component. Sets up source files, header files and creates a core library target named 'decoderfilter'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/media/decoderfilter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES DecoderFilterManager.cpp)\n\nset(HEADERS DecoderFilterManager.h)\n\ncore_add_library(decoderfilter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Prefix and Build Arguments\nDESCRIPTION: Sets up the default installation prefix for addons and configures common build arguments used for all addon builds. Includes system-specific configurations for Windows Store.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)\n  set(CMAKE_INSTALL_PREFIX \"${PROJECT_SOURCE_DIR}/output/addons\")\nendif()\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})\n\nif (CMAKE_SYSTEM_NAME STREQUAL WindowsStore)\n  set(BUILD_ARGS_ext -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n                     -DCMAKE_SYSTEM_VERSION=${CMAKE_SYSTEM_VERSION})\nendif()\n\ninclude(${CORE_SOURCE_DIR}/cmake/scripts/common/CompilerSettings.cmake)\n\nset(BUILD_ARGS -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}\n               -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>\n               -DPACKAGE_CONFIG_PATH=${ADDON_DEPENDS_PATH}/lib/pkgconfig\n               -DADDON_DEPENDS_PATH=${ADDON_DEPENDS_PATH}\n               -DOVERRIDE_PATHS=${OVERRIDE_PATHS}\n               -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n               -DCMAKE_USER_MAKE_RULES_OVERRIDE=${CMAKE_USER_MAKE_RULES_OVERRIDE}\n               -DCMAKE_USER_MAKE_RULES_OVERRIDE_CXX=${CMAKE_USER_MAKE_RULES_OVERRIDE_CXX}\n               -DCORE_SYSTEM_NAME=${CORE_SYSTEM_NAME}\n               -DBUILD_SHARED_LIBS=1\n               -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}\n               -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}\n               ${BUILD_ARGS_ext})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Alsa Support Files\nDESCRIPTION: Checks if Alsa support is enabled for the application and if so, appends the FDEventMonitor files to the sources and headers lists. This provides file descriptor event monitoring capability when Alsa is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/freebsd/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Alsa)\n  list(APPEND SOURCES ../linux/FDEventMonitor.cpp)\n  list(APPEND HEADERS ../linux/FDEventMonitor.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Interface Headers in CMake for XBMC\nDESCRIPTION: Sets up a list of header files for keyboard input interfaces. These headers define the interfaces for keyboard driver handlers, input handlers, and input providers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IKeyboardDriverHandler.h\n            IKeyboardInputHandler.h\n            IKeyboardInputProvider.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC HTTP Request Handler Directory Structure\nDESCRIPTION: Lists directory paths for HTTP request handler components in the XBMC project, with dependencies on MICROHTTPD. Defines both the main handler directory and the Python-specific subdirectory.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/optional/common/webserver.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nxbmc/network/httprequesthandler network/httprequesthandler # MICROHTTPD\nxbmc/network/httprequesthandler/python network/httprequesthandler/python # MICROHTTPD\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Retroplayer Memory Library in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of header files for the retroplayer memory library. This includes declarations for basic, delta pair, and linear memory streams, as well as the IMemoryStream interface.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/streams/memory/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS BasicMemoryStream.h\n            DeltaPairMemoryStream.h\n            IMemoryStream.h\n            LinearMemoryStream.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Video Jobs Library in CMake\nDESCRIPTION: Calls a custom CMake function 'core_add_library' to add the video jobs as a library named 'video_jobs'. This likely compiles the source files into a library that can be linked by other parts of the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/jobs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(video_jobs)\n```\n\n----------------------------------------\n\nTITLE: Adding Video Test Library to XBMC Core Tests\nDESCRIPTION: Adds the video test library to the XBMC core test suite. This command integrates the previously defined video test sources into the project's testing framework.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_test_library(video_test)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenGL Support in Wayland for CMake\nDESCRIPTION: Adds OpenGL-specific source and header files if OpenGL support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES WinSystemWaylandEGLContextGL.cpp)\n  list(APPEND HEADERS WinSystemWaylandEGLContextGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Keyboard Input Library in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of header files corresponding to the source files for the keyboard input library. These headers declare the interfaces for keyboard handling classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keyboard/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DefaultKeyboardHandling.h\n            KeyboardInputHandling.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Peripherals Module in CMake\nDESCRIPTION: This snippet sets the HEADERS variable with the header files for the peripherals module. It includes Peripherals.h and PeripheralTypes.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Peripherals.h\n            PeripheralTypes.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Games Windows Module in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of C++ header files for the games windows module. These headers declare the classes and functions implemented in the corresponding source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIViewStateWindowGames.h\n            GUIWindowGames.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for XBMC Controller Components in CMake\nDESCRIPTION: This snippet defines a CMake variable 'SOURCES' containing the source files for controller-related components in XBMC. It includes files for ControllerGrid, ControllerHub, and ControllerNode.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/types/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ControllerGrid.cpp\n            ControllerHub.cpp\n            ControllerNode.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Windows Video Shader in CMake\nDESCRIPTION: Sets the SOURCES variable with the cpp file for the Windows output shader. This defines the source files to be compiled for the shader module.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoShaders/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES RPWinOutputShader.cpp)\n```\n\n----------------------------------------\n\nTITLE: Version Tags in XBMC Changelog Format\nDESCRIPTION: BBCode-style version headers used throughout changelog to mark different releases and their changes. Documents features, fixes and changes across versions 1.0.0 through 4.3.3.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/metadata.artists.universal/changelog.txt#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[B]4.3.3[/B]\n[B]4.3.2[/B]\n[B]4.3.1[/B]\n[B]4.3.0[/B]\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to software projects. Developers should replace the placeholder fields with their project information and include this text in the appropriate comment syntax for their file format.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/LICENSES/Apache-2.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Building Kodi Dependencies\nDESCRIPTION: Command to build the required tools and dependencies for Kodi using parallel processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Android.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(getconf _NPROCESSORS_ONLN)\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for New Programs\nDESCRIPTION: This snippet demonstrates how to apply the GPL v2 license terms to a new program. It includes a template for the copyright notice and license information that should be attached to the start of each source file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC GUI Library to Core in CMake\nDESCRIPTION: This snippet uses the core_add_library function to add the utils_guilib library to the project's core. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/utils/guilib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(utils_guilib)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Test Library in CMake\nDESCRIPTION: Conditional CMake configuration that checks for Python target existence and sets up test sources and library. Uses APP_NAME_LC variable to check target and creates python_test library with TestSwig.cpp source file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/python/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Python)\n  set(SOURCES TestSwig.cpp)\n\n  core_add_test_library(python_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding DRM and GBM Library to XBMC Core in CMake\nDESCRIPTION: Adds the defined DRM and GBM windowing components as a library to the XBMC/Kodi core project using a custom CMake command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/drm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(windowing_gbm_drm)\n```\n\n----------------------------------------\n\nTITLE: Configuring Music Library Header Files in CMake\nDESCRIPTION: Defines the header (.h) files corresponding to the music library job implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/jobs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS MusicLibraryJob.h\n            MusicLibraryProgressJob.h\n            MusicLibraryCleaningJob.h\n            MusicLibraryExportJob.h\n            MusicLibraryImportJob.h\n            MusicLibraryScanningJob.h)\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) for the POSIX platform implementation, containing declarations for platform-specific functionality and utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS ConvUtils.h\n            CPUInfoPosix.h\n            GPUInfoPosix.h\n            PlatformDefs.h\n            PlatformPosix.h\n            PosixMountProvider.h\n            PosixResourceCounter.h\n            XHandle.h)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Module Path and Dependencies\nDESCRIPTION: Configures the CMake module path and finds required external dependencies including Bluetooth, CWiid, and GLU libraries.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/WiiRemote/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n\nfind_package(Bluetooth REQUIRED)\nfind_package(CWiid REQUIRED)\nfind_package(GLU REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer Source Files in CMake\nDESCRIPTION: Defines the list of source (.cpp) files that make up the RetroPlayer component\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RetroPlayer.cpp\n            RetroPlayerAutoSave.cpp\n            RetroPlayerInput.cpp\n            RetroPlayerUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Retroplayer GUI Windows Library in CMake\nDESCRIPTION: Uses the core_add_library function to add the retroplayer_guiwindows library to the project. This function is likely a custom CMake function defined for the XBMC/Kodi project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guiwindows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(retroplayer_guiwindows)\n```\n\n----------------------------------------\n\nTITLE: GPL Terminal Notice Template for Interactive Programs\nDESCRIPTION: A template for the short copyright and warranty notice that should be displayed when an interactive program starts. It includes hypothetical commands to display the full license terms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/LICENSES/GPL-3.0-or-later.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Windowing System Library Target\nDESCRIPTION: Creates a library target for the iOS windowing system components using XBMC/Kodi's core library addition helper function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/ios/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(windowing_ios)\n```\n\n----------------------------------------\n\nTITLE: Including ExternalProject CMake Module\nDESCRIPTION: Includes the ExternalProject CMake module which provides functionality for including and building external projects as part of the main build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(ExternalProject)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Settings Library in CMake\nDESCRIPTION: This snippet lists the header files (.h) to be included in the XBMC settings library. It uses the CMake 'set' command to define a variable named HEADERS with a list of C++ header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/lib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ISetting.h\n            ISettingCallback.h\n            ISettingControl.h\n            ISettingControlCreator.h\n            ISettingCreator.h\n            ISettingsHandler.h\n            ISettingsValueSerializer.h\n            Setting.h\n            SettingCategoryAccess.h\n            SettingConditions.h\n            SettingDefinitions.h\n            SettingDependency.h\n            SettingLevel.h\n            SettingRequirement.h\n            SettingSection.h\n            SettingsManager.h\n            SettingType.h\n            SettingUpdate.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Control Header Files in CMake\nDESCRIPTION: Defines the list of C++ header files corresponding to the GUI control components implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/interfaces/gui/controls/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS Button.h\n            Edit.h\n            FadeLabel.h\n            Image.h\n            Label.h\n            Progress.h\n            RadioButton.h\n            Rendering.h\n            SettingsSlider.h\n            Slider.h\n            Spin.h\n            TextBox.h)\n```\n\n----------------------------------------\n\nTITLE: Creating Video Windows Library Target\nDESCRIPTION: Creates a library target named 'video_windows' using XBMC's core add library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(video_windows)\n```\n\n----------------------------------------\n\nTITLE: Configuring XBMC Settings Windows Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files for XBMC settings windows components. Includes files for control settings, general settings window, category settings, and screen calibration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/settings/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIControlSettings.cpp\n            GUIWindowSettings.cpp\n            GUIWindowSettingsCategory.cpp\n            GUIWindowSettingsScreenCalibration.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Power Management in CMake\nDESCRIPTION: Specifies the header files for the power management module. These headers declare interfaces and structures for DPMS support, power system calls, power management, power states, and power types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/powermanagement/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DPMSSupport.h\n            IPowerSyscall.h\n            PowerManager.h\n            PowerState.h\n            PowerTypes.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Messaging Helpers Library in CMake\nDESCRIPTION: Defines the header files for the XBMC messaging helpers library, which include DialogHelper.h and DialogOKHelper.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/messaging/helpers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DialogHelper.h\n            DialogOKHelper.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Client Stream Header Files in CMake\nDESCRIPTION: Defines the list of header files for game client stream components including the interface and implementation headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/streams/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GameClientStreamAudio.h\n            GameClientStreamHwFramebuffer.h\n            GameClientStreams.h\n            GameClientStreamSwFramebuffer.h\n            GameClientStreamVideo.h\n            IGameClientStream.h\n)\n```\n\n----------------------------------------\n\nTITLE: Building the Music Information Scanner Library\nDESCRIPTION: Calls the core_add_library function to build the music_infoscanner library using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/infoscanner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(music_infoscanner)\n```\n\n----------------------------------------\n\nTITLE: Setting Sources for VideoShaders Test in CMake\nDESCRIPTION: Defines the source files for the videoshaders test. In this case, it sets a single source file 'TestConversionMatrix.cpp'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES TestConversionMatrix.cpp)\n```\n\n----------------------------------------\n\nTITLE: SPDX License File Format\nDESCRIPTION: Template for license files in the LICENSES directory, showing the required format including identifier, URL, usage guide, and license text sections.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/LICENSES/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nValid-License-Identifier: GPL-2.0-or-later\nSPDX-URL: https://spdx.org/licenses/GPL-2.0-or-later.html\nUsage-Guide:\n  To use the GNU General Public License v2.0 or later put the following SPDX\n  tag/value pair into a comment according to the placement guidelines in\n  the licensing rules documentation:\n    SPDX-License-Identifier: GPL-2.0-or-later\nLicense-Text:\n  Full license text\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Input Keymap Interfaces in CMake\nDESCRIPTION: This snippet sets a list of header files related to input keymap interfaces. These headers define various interfaces for key mapping, handling, and environment in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS IKeyMapper.h\n            IKeyHandler.h\n            IKeyboardActionMap.h\n            IKeymapHandler.h\n            IKeymapEnvironment.h\n            IKeymap.h\n)\n```\n\n----------------------------------------\n\nTITLE: Copying DLL Files for XBMC Build Dependencies\nDESCRIPTION: This command copies all DLL files from the architecture-specific bin directory in the BuildDependencies folder to the current directory. The ${ARCH} variable is used to specify the target architecture.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/windows/dlls.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nproject/BuildDependencies/${ARCH}/bin/*.dll .\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Library to XBMC Core in CMake\nDESCRIPTION: Calls a custom CMake function to add the storage library to the XBMC core. This finalizes the library configuration.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/storage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(storage)\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Platform Header Files\nDESCRIPTION: Defines the corresponding header files for the OSX platform implementation components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS CocoaInterface.h\n            CPUInfoOsx.h\n            GPUInfoMacOS.h\n            HotKeyController.h\n            MediaKeys.h\n            PlatformDarwinOSX.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Input Keymaps Generic Library in CMake\nDESCRIPTION: This snippet adds the input keymaps generic library to the XBMC core using a custom CMake function core_add_library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_keymaps_generic)\n```\n\n----------------------------------------\n\nTITLE: Adding VideoShaders Test Library in CMake\nDESCRIPTION: Uses a custom CMake function 'core_add_test_library' to add the videoshaders test library to the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_test_library(videoshaders_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wayland Process Module Build Files\nDESCRIPTION: Defines source files, headers and creates a library target for the Wayland process information module. Uses CMake to specify ProcessInfoWayland.cpp as source, ProcessInfoWayland.h as header, and creates a library named processWayland.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/Process/wayland/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ProcessInfoWayland.cpp)\n\nset(HEADERS ProcessInfoWayland.h)\n\ncore_add_library(processWayland)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenGLES Support in Wayland for CMake\nDESCRIPTION: Adds OpenGLES-specific source and header files if OpenGLES support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/wayland/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGLES)\n  list(APPEND SOURCES WinSystemWaylandEGLContextGLES.cpp)\n  list(APPEND HEADERS WinSystemWaylandEGLContextGLES.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Input Keymaps Library Target in CMake for XBMC\nDESCRIPTION: This snippet uses a custom CMake function 'core_add_library' to create a library target named 'input_keymaps'. This likely compiles the previously defined source and header files into a library for use in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_keymaps)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Windows 10 Build Dependencies and UWP Addon Manifest in Git\nDESCRIPTION: Configuration to exclude Windows 10 architecture-specific addon build dependencies and the UWP addon manifest file from git version control. The pattern uses a variable ${ARCH} which would be replaced with the specific architecture (like x86, x64, ARM) during the build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/windowsstore/addons.txt#2025-04-21_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\nproject/BuildDependencies/win10-${ARCH}/addons/*\nsystem/addon-manifest-uwp.xml\n```\n\n----------------------------------------\n\nTITLE: Adding Game Controller Windows Library in CMake\nDESCRIPTION: Uses the core_add_library function to add the games_controller_windows library to the project. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(games_controller_windows)\n```\n\n----------------------------------------\n\nTITLE: Specifying Header Files for games_ports_guicontrols in CMake\nDESCRIPTION: Sets the HEADERS variable with the header files for the GUIActivePortList and IActivePortList components. This defines the header files to be included in the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/guicontrols/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIActivePortList.h\n            IActivePortList.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Darwin Platform Library in CMake\nDESCRIPTION: Defines the list of header files to be included in the Darwin platform library. These headers provide declarations for Darwin-specific utilities and helper functions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DarwinUtils.h\n            DictionaryUtils.h\n            NSLogDebugHelpers.h\n            PlatformDarwin.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Client Stream Library in CMake\nDESCRIPTION: Creates a library target for game client stream components using XBMC's core library helper function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/streams/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(game_addon_streams)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for USB Peripheral Bus in CMake\nDESCRIPTION: Defines the source files for the USB peripheral bus component using CMake's set command.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PeripheralBusUSB.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Game Dialogs in CMake\nDESCRIPTION: Sets the SOURCES variable with a list of C++ source files for game-related dialogs. These files likely contain implementations for selecting game clients and savestates.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIDialogSelectGameClient.cpp\n            GUIDialogSelectSavestate.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Addon Settings Library in CMake\nDESCRIPTION: Calls the core_add_library function to add the addon settings as a library named 'addons_settings'. This likely uses a custom CMake function defined elsewhere in the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/settings/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(addons_settings)\n```\n\n----------------------------------------\n\nTITLE: OpenGL ES Rendering Configuration for XBMC\nDESCRIPTION: A configuration marker that indicates the rendering system uses OpenGL ES (GLES) for graphics processing in XBMC. This is likely used by the build system to enable appropriate rendering paths and dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/optional/common/opengles.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# OPENGLES\n```\n\n----------------------------------------\n\nTITLE: Adding Event Windows Library in XBMC CMake Configuration\nDESCRIPTION: Adds the 'events_windows' library to the XBMC project using a custom CMake function 'core_add_library'. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/events/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(events_windows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for DVD Overlay Codecs in CMake\nDESCRIPTION: This snippet defines the header files for DVD overlay codecs. It includes header files for various codec implementations and overlay types, such as FFmpeg, SSA, Text, CCText, TX3G, WebVTT, and different overlay formats.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Overlay/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS DVDOverlay.h\n            DVDOverlayCodec.h\n            DVDOverlayCodecFFmpeg.h\n            DVDOverlayCodecSSA.h\n            DVDOverlayCodecTX3G.h\n            DVDOverlayCodecText.h\n            DVDOverlayCodecCCText.h\n            DVDOverlayImage.h\n            DVDOverlayLibass.h\n            DVDOverlaySSA.h\n            DVDOverlaySpu.h\n            DVDOverlayText.h\n            OverlayCodecWebVTT.h\n            contrib/cc_decoder.h\n            contrib/cc_decoder708.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Generic Touch Input Library in CMake\nDESCRIPTION: Adds a library named 'input_touch_generic' to the project, likely incorporating the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/touch/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_touch_generic)\n```\n\n----------------------------------------\n\nTITLE: Configuring GameClientCheevos Header Files in CMake\nDESCRIPTION: Sets the HEADERS variable with the header file for GameClientCheevos. This defines the header files associated with the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/cheevos/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GameClientCheevos.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Video Tags Library in CMake for XBMC/Kodi\nDESCRIPTION: Adds a core library named 'video_tags' to the XBMC/Kodi project. This library likely encompasses the functionality defined in the previously listed source and header files for video tag handling.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/tags/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(video_tags)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGL-Specific Picture Module Files in CMake\nDESCRIPTION: Conditionally appends OpenGL-specific slideshow picture implementation files to the source and header lists when OpenGL support is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES SlideShowPictureGL.cpp)\n  list(APPEND HEADERS SlideShowPictureGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting XBMC Window Source Files in CMake\nDESCRIPTION: Defines the list of source files (.cpp) for XBMC's window components including media window, debug info, file manager, and other GUI windows.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIMediaWindow.cpp\n            GUIWindowDebugInfo.cpp\n            GUIWindowFileManager.cpp\n            GUIWindowHome.cpp\n            GUIWindowLoginScreen.cpp\n            GUIWindowPointer.cpp\n            GUIWindowScreensaver.cpp\n            GUIWindowScreensaverDim.cpp\n            GUIWindowSplash.cpp\n            GUIWindowStartup.cpp\n            GUIWindowSystemInfo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring UPnP Directory Mappings for XBMC\nDESCRIPTION: This configuration snippet defines the directory mappings for UPnP components in the XBMC project. It specifies the location of the libUPnP library and the network UPnP implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/optional/common/upnp.txt#2025-04-21_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nlib/libUPnP upnp # UPNP\nxbmc/network/upnp network/upnp # UPNP\n```\n\n----------------------------------------\n\nTITLE: Adding PVR GUI Library to CMake Project\nDESCRIPTION: Adds the PVR GUI library to the CMake project using a custom 'core_add_library' function. This likely sets up compilation and linking for the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/guilib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(pvr_guilib)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Games Ports Input Library in CMake\nDESCRIPTION: Creates a list of header files for the XBMC games ports input library. This includes PhysicalPort.h, PortInput.h, and PortManager.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/input/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PhysicalPort.h\n            PortInput.h\n            PortManager.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Favourites Module\nDESCRIPTION: Defines the list of header files that declare the interfaces for the favourites module\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/favourites/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS ContextMenus.h\n            GUIViewStateFavourites.h\n            GUIWindowFavourites.h\n            FavouritesService.h\n            FavouritesURL.h\n            FavouritesUtils.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Network Library to XBMC Core\nDESCRIPTION: Adds the Windows-specific network library to the XBMC core. This library likely contains the implementation of network functionalities for the Windows platform.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win32/network/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_win32_network)\n```\n\n----------------------------------------\n\nTITLE: Adding RetroPlayer Cheevos Library in CMake\nDESCRIPTION: Uses a custom CMake function 'core_add_library' to add the RetroPlayer Cheevos component as a library target. This likely compiles the specified source and header files into a library named 'retroplayer_cheevos'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/cheevos/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(retroplayer_cheevos)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Android Windowing System in CMake\nDESCRIPTION: Defines the list of header files for the Android windowing system. Corresponds to the source files defined earlier.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/android/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS OSScreenSaverAndroid.h\n            WinEventsAndroid.h\n            WinSystemAndroid.h\n            AndroidUtils.h\n            VideoSyncAndroid.h)\n```\n\n----------------------------------------\n\nTITLE: Defining XBMC/Kodi Release Candidate Versions in JSON\nDESCRIPTION: This JSON structure defines the release candidate versions for XBMC/Kodi. Each entry includes major and minor version numbers, tag information, revision numbers, and addon support status for various release candidates.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/service.xbmc.versioncheck/resources/versions.txt#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"releasecandidate\": [\n    {\n        \"major\": \"20\",\n        \"minor\": \"0\",\n        \"tag\": \"releasecandidate\",\n        \"tagversion\":\"1\",\n        \"revision\": \"20221210-911ad268d0\",\n        \"extrainfo\": \"RC1\",\n        \"addon_support\": \"yes\"\n    },\n    {\n        \"major\": \"19\",\n        \"minor\": \"0\",\n        \"tag\": \"releasecandidate\",\n        \"tagversion\":\"1\",\n        \"revision\": \"20210115-90a1e12804\",\n        \"extrainfo\": \"RC1\",\n        \"addon_support\": \"yes\"\n    },\n    {\n        \"major\": \"18\",\n        \"minor\": \"0\",\n        \"tag\": \"releasecandidate\",\n        \"tagversion\":\"5\",\n        \"revision\": \"20190111-baff0a1838\",\n        \"extrainfo\": \"RC5\",\n        \"addon_support\": \"yes\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Video Window Header Files in CMake\nDESCRIPTION: Defines the list of header files for video window components including fullscreen definitions, base classes, navigation, playlist and item list modifier declarations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GUIWindowFullScreen.h\n            GUIWindowFullScreenDefines.h\n            GUIWindowVideoBase.h\n            GUIWindowVideoNav.h\n            GUIWindowVideoPlaylist.h\n            VideoFileItemListModifier.h)\n```\n\n----------------------------------------\n\nTITLE: Building Music Windows Library in CMake\nDESCRIPTION: Calls the core_add_library function to build the music_windows library using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(music_windows)\n```\n\n----------------------------------------\n\nTITLE: Adding Peripherals Library to XBMC Core in CMake\nDESCRIPTION: This snippet uses the core_add_library function to add the peripherals module as a library to the XBMC core build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(peripherals)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Component Headers in CMake\nDESCRIPTION: Defines the header files for the games component of XBMC/Kodi, including service definitions, settings, types, and utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS GameServices.h\n            GameSettings.h\n            GameTypes.h\n            GameUtils.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows 10 Filesystem Library to XBMC Core in CMake\nDESCRIPTION: Calls the core_add_library function to add the platform_win10_filesystem library to the XBMC core. This integrates the Windows 10 filesystem component into the main project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/win10/filesystem/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_win10_filesystem)\n```\n\n----------------------------------------\n\nTITLE: Adding Profiles Windows Library to XBMC Core in CMake\nDESCRIPTION: Uses the core_add_library function to add the profiles_windows library to the XBMC core build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(profiles_windows)\n```\n\n----------------------------------------\n\nTITLE: Windows 10 DLL Path Pattern\nDESCRIPTION: File path pattern specifying the location of DLL dependencies for Windows 10 builds. Uses ${ARCH} variable to handle different CPU architectures.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/windowsstore/dlls.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject/BuildDependencies/win10-${ARCH}/bin/*.dll .\n```\n\n----------------------------------------\n\nTITLE: Adding Music Module as Core Library in XBMC\nDESCRIPTION: Calls the core_add_library function to add the music module as a core library in the XBMC project build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(music)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Music Information Scanner\nDESCRIPTION: Sets the header files for the music information scanner component, matching the implementation files defined in SOURCES.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/infoscanner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS MusicAlbumInfo.h\n            MusicArtistInfo.h\n            MusicInfoScanner.h\n            MusicInfoScraper.h)\n```\n\n----------------------------------------\n\nTITLE: Conditional UDF Support Configuration\nDESCRIPTION: Adds UDF (Universal Disk Format) related source and header files when UDF support is enabled in the build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::Udfread)\n  list(APPEND SOURCES UDFBlockInput.cpp\n                      UDFDirectory.cpp\n                      UDFFile.cpp)\n  list(APPEND HEADERS UDFBlockInput.h\n                      UDFDirectory.h\n                      UDFFile.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Games Library in CMake\nDESCRIPTION: Creates a core library for the games component using XBMC/Kodi's custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(games)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Music Module in CMake\nDESCRIPTION: Sets the header files variable for the music module, listing the corresponding header files for each source file in the module.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Album.h\n            Artist.h\n            ContextMenus.h\n            GUIViewStateMusic.h\n            MusicDatabase.h\n            MusicDbUrl.h\n            MusicEmbeddedImageFileLoader.h\n            MusicFileItemClassify.h\n            MusicInfoLoader.h\n            MusicLibraryQueue.h\n            MusicThumbLoader.h\n            MusicUtils.h\n            Song.h)\n```\n\n----------------------------------------\n\nTITLE: Adding iOS Platform Library in CMake\nDESCRIPTION: Creates the iOS platform library target using XBMC's core library addition function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/ios/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_ios)\n```\n\n----------------------------------------\n\nTITLE: Creating Games Agents Windows Library\nDESCRIPTION: Creates a library target for the games agents windows component using XBMC's core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/agents/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(games_agents_windows)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Profiles Windows Library in CMake\nDESCRIPTION: Sets the SOURCES variable with the main source file for the profiles windows component.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/profiles/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIWindowSettingsProfile.cpp)\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice for GPL v2 Licensed Software\nDESCRIPTION: This snippet shows an example of a short notice that should be displayed when an interactive program starts. It informs users about the program's copyright, lack of warranty, and redistribution conditions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Script Invocation System in CMake\nDESCRIPTION: Defines the C++ header files for the script invocation system, providing interfaces and class declarations for the component implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ILanguageInvocationHandler.h\n            ILanguageInvoker.h\n            LanguageInvokerThread.h\n            RunningScriptsHandler.h\n            RunningScriptObserver.h\n            ScriptInvocationManager.h\n            ScriptRunner.h)\n```\n\n----------------------------------------\n\nTITLE: Adding DRM Subdirectory in CMake for GBM Windowing System\nDESCRIPTION: Adds the 'drm' subdirectory to the CMake build process, likely containing DRM-related code for the GBM windowing system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/windowing/gbm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(drm)\n```\n\n----------------------------------------\n\nTITLE: Core Library Definition\nDESCRIPTION: Adds the builtin interfaces as a core library component in the XBMC build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/builtins/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(interfaces_builtins)\n```\n\n----------------------------------------\n\nTITLE: Adding Music Database Directory Library in CMake\nDESCRIPTION: Creates the music database directory library using XBMC's core library addition function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/filesystem/MusicDatabaseDirectory/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(musicdatabasedirectory)\n```\n\n----------------------------------------\n\nTITLE: Adding PVR Timer Library Target in CMake\nDESCRIPTION: Creates a library target named 'pvr_timers' using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/timers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(pvr_timers)\n```\n\n----------------------------------------\n\nTITLE: Preserving JavaScript Interface for WebView in ProGuard\nDESCRIPTION: This ProGuard rule keeps all public members of a JavaScript interface class used with WebView. It's commented out by default and needs to be uncommented and configured with the specific class name when used.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/Source/Platform/Android/samples/sample-upnp/proguard-project.txt#2025-04-21_snippet_0\n\nLANGUAGE: ProGuard\nCODE:\n```\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n```\n\n----------------------------------------\n\nTITLE: Building Info Interface Library in XBMC using CMake\nDESCRIPTION: Calls the custom core_add_library function to compile and link the info_interface library using the previously defined source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/info/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(info_interface)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Retroplayer Playback in CMake\nDESCRIPTION: Sets the HEADERS variable with the list of header files for the retroplayer playback library. Includes various interface and implementation headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/playback/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GameLoop.h\n            IPlayback.h\n            IPlaybackControl.h\n            RealtimePlayback.h\n            ReversiblePlayback.h)\n```\n\n----------------------------------------\n\nTITLE: Creating DLL Loader Library in CMake for XBMC\nDESCRIPTION: Uses a custom CMake function 'core_add_library' to create the DLL loader library. This function likely handles common setup tasks for libraries in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/DllLoader/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(dllloader)\n```\n\n----------------------------------------\n\nTITLE: Adding GameClientCheevos Library to XBMC Core in CMake\nDESCRIPTION: Uses the core_add_library function to add the gamecheevos library to the XBMC project. This integrates the GameClientCheevos component into the core build process.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/cheevos/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(gamecheevos)\n```\n\n----------------------------------------\n\nTITLE: Declaring Header Files for XBMC Announcement System in CMake\nDESCRIPTION: Defines the header files for the announcement system, including both the concrete AnnouncementManager.h and the interface declaration IAnnouncer.h files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AnnouncementManager.h\n            IAnnouncer.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Build Organization in CMake\nDESCRIPTION: Sets the 'folder' property for the generate_json_header target to organize it within the \"Build Utilities\" folder in IDEs that support folder organization of targets.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/json-rpc/schema/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(generate_json_header PROPERTIES FOLDER \"Build Utilities\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore Patterns for XBMC Project\nDESCRIPTION: This gitignore configuration excludes media assets, sounds, system configuration files, and user data from version control. It ensures that user-specific and generated content doesn't get committed to the repository while maintaining the core application code.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/installdata/common/common.txt#2025-04-21_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\nmedia/*\nsounds/*\nsystem/addon-manifest.xml\nsystem/colors.xml\nsystem/dialogcolors.xml\nsystem/keyboardlayouts/*\nsystem/keymaps/*\nsystem/library/*\nsystem/peripherals.xml\nsystem/playercorefactory.xml\nsystem/settings/*\nsystem/shaders/*\nuserdata/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Generic Touch Input in CMake\nDESCRIPTION: Defines a list of header files for generic touch input handling, corresponding to the source files and including an interface for gesture detection.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/touch/generic/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GenericTouchActionHandler.h\n            GenericTouchInputHandler.h\n            GenericTouchPinchDetector.h\n            GenericTouchRotateDetector.h\n            GenericTouchSwipeDetector.h\n            IGenericTouchGestureDetector.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring RetroPlayer Header Files in CMake\nDESCRIPTION: Defines the list of header (.h) files that make up the RetroPlayer component interfaces\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS RetroPlayer.h\n            RetroPlayerAutoSave.h\n            RetroPlayerInput.h\n            RetroPlayerTypes.h\n            RetroPlayerUtils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating WiiRemote Executable Target\nDESCRIPTION: Creates an executable target for the WiiRemote component using the specified source and header files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/WiiRemote/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${APP_NAME_LC}-wiiremote ${SOURCES} ${HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Adding Input Keymaps and Joysticks as Core Library in XBMC\nDESCRIPTION: Calls the core_add_library function to add the input keymaps and joysticks module as a core library in the XBMC project. This makes the module available for use in other parts of the XBMC codebase.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/joysticks/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_keymaps_joysticks)\n```\n\n----------------------------------------\n\nTITLE: Adding POSIX Filesystem Library Target\nDESCRIPTION: Creates the POSIX filesystem library target using core_add_library macro\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/filesystem/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(platform_posix_filesystem)\n```\n\n----------------------------------------\n\nTITLE: License Location Reference\nDESCRIPTION: Reference to the location of the full GPL-2.0-or-later license text within the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/LICENSE.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nLICENSES/GPL-2.0-or-later\n```\n\n----------------------------------------\n\nTITLE: Adding Game Controller GUI Library in CMake\nDESCRIPTION: Creates the core library target for game controller GUI controls using XBMC's custom CMake function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/guicontrols/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(games_controller_guicontrols)\n```\n\n----------------------------------------\n\nTITLE: Setting POSIX Header Files in CMake\nDESCRIPTION: Defines the core POSIX filesystem header files\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/filesystem/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS PosixDirectory.h\n            PosixFile.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring GameClientCheevos Source Files in CMake\nDESCRIPTION: Sets the SOURCES variable with the cpp file for GameClientCheevos. This defines the source files to be compiled for the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/cheevos/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GameClientCheevos.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Linux Test Sources and Library in CMake for XBMC\nDESCRIPTION: Configures Linux test files for the XBMC project by appending a test source file to the SOURCES variable and creating a core test library named 'linux_test'. This is part of the CMake build system that organizes platform-specific test files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND SOURCES TestSysfsPath.cpp)\n\ncore_add_test_library(linux_test)\n```\n\n----------------------------------------\n\nTITLE: Conditional SMB Source and Header Addition\nDESCRIPTION: Conditionally appends SMB-related source and header files when SMB client target exists\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/posix/filesystem/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::SmbClient)\n  list(APPEND SOURCES SMBDirectory.cpp\n                      SMBFile.cpp\n                      SMBWSDiscovery.cpp\n                      SMBWSDiscoveryListener.cpp)\n  list(APPEND HEADERS SMBDirectory.h\n                      SMBFile.h\n                      SMBWSDiscovery.h\n                      SMBWSDiscoveryListener.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Processing Status with Frame Count\nDESCRIPTION: Output showing completion status of file processing with frame count and rate metrics\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/test/edl/testdata/comskipversion2.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFILE PROCESSING COMPLETE 678900 FRAMES AT 2500\n```\n\n----------------------------------------\n\nTITLE: Setting DVD Audio Codec Header Files in CMake\nDESCRIPTION: Defines the header files for DVD audio codec implementations\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDCodecs/Audio/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS DVDAudioCode.h\n            DVDAudioCodecFFmpeg.h\n            DVDAudioCodecPassthrough.h)\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Source and Header Lists in CMake\nDESCRIPTION: Sets up empty lists for sources and headers that will be populated conditionally based on available dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/linux/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES \"\")\nset(HEADERS \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Peripherals Module in CMake\nDESCRIPTION: This snippet sets the SOURCES variable with the main source file for the peripherals module. It includes only the Peripherals.cpp file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Peripherals.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Client Library in CMake\nDESCRIPTION: Adds the gameaddons library to the project using a custom CMake function. This likely compiles the previously defined source and header files into a library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(gameaddons)\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Client Topology Test Sources in CMake\nDESCRIPTION: Sets up source files for game client topology testing and adds a test library for games addon input testing. The configuration defines the test source file and creates a core test library named 'test_games_addons_input'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/input/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestGameClientTopology.cpp\n)\n\ncore_add_test_library(test_games_addons_input)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mouse Interface Headers in CMake\nDESCRIPTION: Sets up header files for mouse input interfaces and conditionally adds a mouse input interfaces library when static libraries are not enabled. The headers handle mouse driver, input handling, and input provider interfaces.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/mouse/interfaces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS IMouseDriverHandler.h\n            IMouseInputHandler.h\n            IMouseInputProvider.h\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_mouse_interfaces)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Network Sources and Headers in CMake\nDESCRIPTION: Sets up source files and header files for Darwin-specific Zeroconf networking implementation. Defines CMake variables for source files and headers, then creates a platform-specific library for Darwin network functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/network/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES ZeroconfBrowserDarwin.cpp\n            ZeroconfDarwin.cpp)\n\nset(HEADERS ZeroconfBrowserDarwin.h\n            ZeroconfDarwin.h)\n\ncore_add_library(platform_darwin_network)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Joystick Dialog\nDESCRIPTION: Defines source and header files needed for building the joystick dialog component. Creates a CMake variable SOURCES containing the main implementation file and HEADERS containing the header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/dialogs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES GUIDialogNewJoystick.cpp)\n\nset(HEADERS GUIDialogNewJoystick.h)\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Player Core Factory Library\nDESCRIPTION: Creates the player core factory library target using XBMC's core library helper function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/playercorefactory/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(playercorefactory)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Event Log Windows in CMake\nDESCRIPTION: Specifies the header files for the XBMC event log windows component. Includes two header files corresponding to the GUI view state and window for the event log.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/events/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIViewStateEventLog.h\n            GUIWindowEventLog.h)\n```\n\n----------------------------------------\n\nTITLE: Cloning Kodi Source Code\nDESCRIPTION: Commands to change to home directory and clone Kodi's master branch from GitHub repository\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME\ngit clone https://github.com/xbmc/xbmc kodi\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer for Employers or Schools\nDESCRIPTION: This snippet provides a template for a copyright disclaimer that can be used by employers or schools to disclaim copyright interest in a program written by an employee or student.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/LICENSE.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGL Render Buffer Components\nDESCRIPTION: Conditionally appends OpenGL-specific render buffer implementations when OpenGL support is enabled.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(TARGET ${APP_NAME_LC}::OpenGl)\n  list(APPEND SOURCES RenderBufferOpenGL.cpp\n                      RenderBufferPoolOpenGL.cpp)\n  list(APPEND HEADERS RenderBufferOpenGL.h\n                      RenderBufferPoolOpenGL.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding rp-videoshaders Library in CMake for XBMC\nDESCRIPTION: This CMake snippet checks if static libraries are not enabled, and if so, adds the rp-videoshaders library to the core build. This allows for flexible configuration of video shader components in the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/rendering/VideoShaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(rp-videoshaders)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Peripheral Bus USB in CMake\nDESCRIPTION: Sets the SOURCES variable with the main implementation file for the USB peripheral bus.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/osx/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES PeripheralBusUSB.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Render Buffer Sources and Headers\nDESCRIPTION: Defines the base source and header files for the render buffer system, including core buffer management classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/buffers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES BaseRenderBuffer.cpp\n            BaseRenderBufferPool.cpp\n            RenderBufferManager.cpp\n)\n\nset(HEADERS BaseRenderBuffer.h\n            BaseRenderBufferPool.h\n            IRenderBuffer.h\n            IRenderBufferPool.h\n            RenderBufferManager.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for Retroplayer GUI Windows in CMake\nDESCRIPTION: Sets the HEADERS variable with the list of header files for the retroplayer GUI windows component. Includes GameWindowFullScreen.h and GameWindowFullScreenText.h.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guiwindows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GameWindowFullScreen.h\n            GameWindowFullScreenText.h\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Network Activity Function in Python\nDESCRIPTION: This Python function is designed to implement and test network activity detection in Kodi. It creates a timer to check if the system is currently involved in network activity and includes placeholder code for implementation details.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/common/addons.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef _create_network_wait_dialog(self):\n    network_activity = activity_monitor.has_global_network_activity()\n    if not network_activity:\n        # Add the long-operation monitoring code here\n        pass\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DVD Subtitles Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) for the DVD subtitles library. Includes corresponding headers for the source files and additional interface definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/DVDSubtitles/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS DVDFactorySubtitle.h\n            DVDSubtitleLineCollection.h\n            DVDSubtitleParser.h\n            DVDSubtitleParserMPL2.h\n            DVDSubtitleParserMicroDVD.h\n            DVDSubtitleParserSSA.h\n            DVDSubtitleParserSami.h\n            DVDSubtitleParserSubrip.h\n            DVDSubtitleParserVplayer.h\n            DVDSubtitleStream.h\n            DVDSubtitleTagMicroDVD.h\n            DVDSubtitleTagSami.h\n            DVDSubtitlesLibass.h\n            SubtitleParserWebVTT.h\n            SubtitlesAdapter.h\n            SubtitlesStyle.h)\n```\n\n----------------------------------------\n\nTITLE: Basic Copyright and License Notice Template\nDESCRIPTION: Standard template for copyright and license notice to be included at the start of source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/metadata.tvshows.themoviedb.org.python/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI Input Headers in CMake for Kodi\nDESCRIPTION: This CMake snippet defines a list of header files for GUI input and conditionally adds them to the Kodi development kit. It uses a custom CMake function 'core_add_devkit_header' to process the headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/gui/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Auto generated CMakeLists.txt.\n# See xbmc/addons/kodi-dev-kit/tools/code-generator.py.\n\nset(HEADERS\n  action_ids.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_gui_input)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Library Target Definition\nDESCRIPTION: Defines the videoshaders library target using the collected source files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(videoshaders)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Audio Translator Library\nDESCRIPTION: Defines source files, header files and creates a library target named 'rp_audio' for the Audio Translator component. The build configuration includes AudioTranslator.cpp as source and AudioTranslator.h as header file.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/audio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES AudioTranslator.cpp\n)\n\nset(HEADERS AudioTranslator.h\n)\n\ncore_add_library(rp_audio)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Module Path for Kodi Add-ons\nDESCRIPTION: Appends the project source directory to the CMake module path, allowing CMake to find custom modules defined in the project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Process Info Library Build in CMake\nDESCRIPTION: Sets up the source files and headers for the Windows process information library and adds it to the core build system. Uses CMake commands to define the library components and integrate them into the project build.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/process/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES RPProcessInfoWin.cpp)\nset(HEADERS RPProcessInfoWin.h)\n\ncore_add_library(rp-processwin)\n```\n\n----------------------------------------\n\nTITLE: Building Video Renderers Library\nDESCRIPTION: Creates the videorenderers_hwdec library if any sources were added.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(SOURCES)\n  core_add_library(videorenderers_hwdec)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Darwin Platform Library in CMake\nDESCRIPTION: Defines the list of source files to be included in the Darwin platform library. The sources include Objective-C++ (.mm) and C++ (.cpp) files that implement various Darwin-specific utilities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DarwinUtils.mm\n            DictionaryUtils.mm\n            MemUtils.cpp\n            PlatformDarwin.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Selection for Kodi Bootstrap\nDESCRIPTION: Determines which specific addons to build, defaulting to all if not specified.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/bootstrap/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# figure out which addons to bootstrap (defaults to all)\nif(NOT ADDONS_TO_BUILD)\n  set(ADDONS_TO_BUILD \"all\")\n  message(STATUS \"Bootstrapping all addons\")\nelse()\n  message(STATUS \"Bootstrapping following addons: ${ADDONS_TO_BUILD}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Input Headers in CMake\nDESCRIPTION: Defines the header files to be included in the GUI input component of the Kodi development kit. Currently includes ActionIDs.h and conditionally adds it to the devkit headers if HEADERS is not empty.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/gui/input/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n  ActionIDs.h\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_gui_input)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for RetroPlayer GUI Bridge in CMake\nDESCRIPTION: Defines a list of source files for the RetroPlayer GUI bridge component. These files contain the implementation of various GUI-related classes for game rendering and settings.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/guibridge/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GUIGameMessenger.cpp\n            GUIGameRenderManager.cpp\n            GUIGameSettings.cpp\n            GUIGameSettingsHandle.cpp\n            GUIGameVideoHandle.cpp\n            GUIRenderHandle.cpp\n            GUIRenderTarget.cpp\n            GUIRenderTargetFactory.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Library Job Header Files in CMake\nDESCRIPTION: Defines a list of header files corresponding to the video library job source files. These headers likely contain class and function declarations for the video library job implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/jobs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS VideoLibraryCleaningJob.h\n            VideoLibraryJob.h\n            VideoLibraryMarkWatchedJob.h\n            VideoLibraryProgressJob.h\n            VideoLibraryRefreshingJob.h\n            VideoLibraryScanningJob.h\n            VideoLibraryResetResumePointJob.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Input Keymaps in CMake\nDESCRIPTION: This snippet defines the list of header files for the XBMC input keymaps module. It includes corresponding header files for the previously defined source files and additional type definitions.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AppTranslator.h\n            ButtonStat.h\n            ButtonTranslator.h\n            Keymap.h\n            KeymapEnvironment.h\n            KeymapTypes.h\n            WindowKeymap.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files for Darwin Gamecontroller Peripherals in CMake\nDESCRIPTION: Defines the header files needed for gamecontroller peripheral integration on Darwin platforms. Includes headers for input handling, key definitions, and peripheral bus management for GCController.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/peripherals/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Input_Gamecontroller.h\n            InputKey.h\n            PeripheralBusGCController.h\n            PeripheralBusGCControllerManager.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS/tvOS VTB Sources\nDESCRIPTION: Adds VideoToolbox renderer source files for iOS/tvOS platforms when OpenGLES is available.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CORE_SYSTEM_NAME STREQUAL darwin_embedded)\n  if(TARGET ${APP_NAME_LC}::OpenGLES)\n    list(APPEND SOURCES RendererVTBGLES.cpp)\n    list(APPEND HEADERS RendererVTBGLES.h)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Image Metadata Library in CMake\nDESCRIPTION: Sets the source files for the image metadata library. In this case, only one source file is specified: ImageMetadataParser.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pictures/metadata/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES ImageMetadataParser.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Darwin Gamecontroller Peripherals in CMake\nDESCRIPTION: Defines the source files needed for gamecontroller peripheral integration on Darwin platforms. Includes implementation files for input handling and peripheral bus management for GCController.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/peripherals/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Input_Gamecontroller.mm\n            PeripheralBusGCController.mm\n            PeripheralBusGCControllerManager.mm)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Addon Info Module in CMake\nDESCRIPTION: This snippet defines the header files for the XBMC Addon Info module. It includes header files corresponding to the source files for addon info building, extensions, and types.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/addoninfo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AddonInfoBuilder.h\n            AddonExtensions.h\n            AddonInfo.h\n            AddonType.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Joystick Input Library to XBMC Core in CMake\nDESCRIPTION: This snippet adds the configured source and header files to a library named 'input_joystick_generic' using a custom CMake function 'core_add_library'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/joysticks/generic/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(input_joystick_generic)\n```\n\n----------------------------------------\n\nTITLE: Library Linking and Platform-Specific Settings\nDESCRIPTION: Configures library linking and adds platform-specific settings for Windows Store builds.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(lib${APP_NAME_LC} PUBLIC upnp)\n\nif(CORE_SYSTEM_NAME STREQUAL windowsstore)\n\tset_target_properties(upnp PROPERTIES STATIC_LIBRARY_FLAGS \"/ignore:4264\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Source Files for Peripherals Events\nDESCRIPTION: Defines the list of C++ source files for the peripherals events library including EventLockHandle, EventPollHandle, and EventScanner implementations.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/peripherals/events/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES EventLockHandle.cpp\n            EventPollHandle.cpp\n            EventScanner.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PVR GUI Header Files in CMake\nDESCRIPTION: Sets up a list of header files for the PVR GUI library. These headers correspond to the source files and define the interfaces for the PVR GUI components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/guilib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIEPGGridContainer.h\n            GUIEPGGridContainerModel.h\n            PVRGUIActionListener.h\n            PVRGUIActionsChannels.h\n            PVRGUIActionsClients.h\n            PVRGUIActionsDatabase.h\n            PVRGUIActionsEPG.h\n            PVRGUIActionsUtils.h\n            PVRGUIActionsParentalControl.h\n            PVRGUIActionsPlayback.h\n            PVRGUIActionsPowerManagement.h\n            PVRGUIActionsRecordings.h\n            PVRGUIActionsTimers.h\n            PVRGUIChannelIconUpdater.h\n            PVRGUIChannelNavigator.h\n            PVRGUIProgressHandler.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Music Tag Processing in CMake\nDESCRIPTION: Defines a list of header files corresponding to the source files for music tag processing.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/tags/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS ImusicInfoTagLoader.h\n            MusicInfoTag.h\n            MusicInfoTagLoaderCDDA.h\n            MusicInfoTagLoaderDatabase.h\n            MusicInfoTagLoaderFactory.h\n            MusicInfoTagLoaderFFmpeg.h\n            MusicInfoTagLoaderShn.h\n            ReplayGain.h\n            TagLibVFSStream.h\n            TagLoaderTagLib.h)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for paplayer in CMake\nDESCRIPTION: Specifies the header files associated with the paplayer component, including interfaces and implementations for audio and video codecs.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/paplayer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS AudioDecoder.h\n            CachingCodec.h\n            CodecFactory.h\n            ICodec.h\n            PAPlayer.h\n            VideoPlayerCodec.h)\n```\n\n----------------------------------------\n\nTITLE: Terminal Interactive Mode Notice Template\nDESCRIPTION: Template for a short license notice to be displayed when a program starts in interactive mode.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/addons/metadata.tvshows.themoviedb.org.python/LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Adding Darwin Peripherals Library to CMake Build\nDESCRIPTION: Adds the platform_darwin_peripherals library to the core build system. This creates a library containing all the gamecontroller peripheral implementation for Darwin platforms.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/platform/darwin/peripherals/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(platform_darwin_peripherals)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Directory for Kodi Add-ons\nDESCRIPTION: Configures the BUILD_DIR variable with a default value if not provided, normalizing the path for consistent usage across the build system.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BUILD_DIR)\n    set(BUILD_DIR \"${CMAKE_BINARY_DIR}/build\")\nelse()\n  file(TO_CMAKE_PATH \"${BUILD_DIR}\" BUILD_DIR)\nendif()\nget_filename_component(BUILD_DIR \"${BUILD_DIR}\" ABSOLUTE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Generic Touch Input in CMake\nDESCRIPTION: Defines a list of source files for generic touch input handling, including action handlers, input handlers, and various gesture detectors.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/touch/generic/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GenericTouchActionHandler.cpp\n            GenericTouchInputHandler.cpp\n            GenericTouchPinchDetector.cpp\n            GenericTouchRotateDetector.cpp\n            GenericTouchSwipeDetector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Git Alias for Fixup Commits\nDESCRIPTION: This example creates a git alias 'fix' for creating fixup commits, which can be used with a specific commit SHA.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/GIT-FU.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global --add alias.fix \"commit --fixup\" // git fix <commit-sha>\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Retroplayer Playback in CMake\nDESCRIPTION: Sets the SOURCES variable with the list of source files for the retroplayer playback library. Includes GameLoop.cpp and ReversiblePlayback.cpp.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/cores/RetroPlayer/playback/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES GameLoop.cpp\n            ReversiblePlayback.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-on Dependencies Path\nDESCRIPTION: Sets up the ADDON_DEPENDS_PATH variable, normalizing the path and adding it to CMAKE_PREFIX_PATH. This defines where dependency libraries are installed and found.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ADDON_DEPENDS_PATH)\n  set(ADDON_DEPENDS_PATH ${PROJECT_SOURCE_DIR}/../build/depends)\nelse()\n  file(TO_CMAKE_PATH \"${ADDON_DEPENDS_PATH}\" ADDON_DEPENDS_PATH)\nendif()\nget_filename_component(ADDON_DEPENDS_PATH \"${ADDON_DEPENDS_PATH}\" ABSOLUTE)\nlist(APPEND CMAKE_PREFIX_PATH ${ADDON_DEPENDS_PATH})\n```\n\n----------------------------------------\n\nTITLE: Setting XBMC Builtin Header Files\nDESCRIPTION: Defines the list of header files (.h) corresponding to the builtin functionality modules, including Android-specific headers.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/interfaces/builtins/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS AddonBuiltins.h\n            AndroidBuiltins.h\n            ApplicationBuiltins.h\n            Builtins.h\n            CECBuiltins.h\n            GUIBuiltins.h\n            GUIContainerBuiltins.h\n            GUIControlBuiltins.h\n            LibraryBuiltins.h\n            OpticalBuiltins.h\n            PictureBuiltins.h\n            PlayerBuiltins.h\n            ProfileBuiltins.h\n            PVRBuiltins.h\n            SkinBuiltins.h\n            SystemBuiltins.h\n            WeatherBuiltins.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP timeout settings in Kodi's XML configuration\nDESCRIPTION: This XML snippet defines HTTP timeout settings for the Kodi media player. It specifies the configuration for a HTTP download timeout option with a default value of 20 seconds, a range from 5 to 100 seconds, and control type information.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/treedata/common/addons.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<setting id=\"httpproxytype\" type=\"enum\" label=\"582\" lvalues=\"573|582|583|584\" />\n<setting id=\"httpproxyserver\" type=\"text\" label=\"705\" default=\"\" enable=\"!eq(-1,0)\" />\n<setting id=\"httpproxyport\" type=\"integer\" label=\"730\" default=\"8080\" enable=\"!eq(-2,0)\" />\n<setting id=\"httpproxyusername\" type=\"text\" label=\"1048\" default=\"\" enable=\"!eq(-3,0)\" />\n<setting id=\"httpproxypassword\" type=\"text\" option=\"hidden\" label=\"733\" default=\"\" enable=\"!eq(-4,0)\" />\n<setting id=\"httptimeout\" type=\"integer\" label=\"747\" default=\"20\" range=\"5,1,100\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Music Tags Library in CMake for XBMC\nDESCRIPTION: Calls a custom CMake function to add the music_tags library to the XBMC project.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/music/tags/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(music_tags)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Toolchain and Third-Party Path Variables\nDESCRIPTION: Handles the optional toolchain file configuration and third-party path for addons that need special storage locations (like Google Chromium addon).\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_TOOLCHAIN_FILE)\n  list(APPEND BUILD_ARGS -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})\n  message(STATUS \"Toolchain specified\")\n  message(STATUS ${BUILD_ARGS})\nendif()\n\n# used for addons where need special folders to store there content (if\n# not set the addon define it byself).\n# e.g. Google Chromium addon where his git bring:\n# - \"unable to create file\" ... \"Filename too long\"\n# see also WARNING by Windows on: https://bitbucket.org/chromiumembedded/cef/wiki/MasterBuildQuickStart\nif(THIRD_PARTY_PATH)\n  message(STATUS \"Third party lib path specified\")\n  message(STATUS ${THIRD_PARTY_PATH})\n  list(APPEND BUILD_ARGS -DTHIRD_PARTY_PATH=${THIRD_PARTY_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi C-API Platform Headers in CMake\nDESCRIPTION: This CMake snippet sets up the headers for the Kodi C-API platform. It defines an empty HEADERS variable and conditionally adds the headers to the development kit if any are present.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/addons/kodi-dev-kit/include/kodi/c-api/platform/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Auto generated CMakeLists.txt.\n# See xbmc/addons/kodi-dev-kit/tools/code-generator.py.\n\nset(HEADERS\n)\n\nif(HEADERS)\n  core_add_devkit_header(kodi_c-api_platform)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC List Providers in CMake\nDESCRIPTION: Defines the source files for list providers in the XBMC project. These files contain the implementation of various list provider classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/guilib/listproviders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES DirectoryProvider.cpp\n            IListProvider.cpp\n            MultiProvider.cpp\n            StaticProvider.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Input Library in CMake\nDESCRIPTION: Adds the game input components as a core library using the custom core_add_library function.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/addons/input/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncore_add_library(gameinput)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Directory and CMAKE_PREFIX_PATH\nDESCRIPTION: Configures the platform-specific directory path and ensures CMAKE_PREFIX_PATH is properly set to include addon dependencies path.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT PLATFORM_DIR)\n  set(PLATFORM_DIR ${CORE_SOURCE_DIR}/cmake/platform/${CORE_SYSTEM_NAME})\n  file(TO_CMAKE_PATH \"${PLATFORM_DIR}\" PLATFORM_DIR)\nendif()\n\n# make sure CMAKE_PREFIX_PATH is set\nif(NOT CMAKE_PREFIX_PATH)\n  set(CMAKE_PREFIX_PATH \"${ADDON_DEPENDS_PATH}\")\nelse()\n  file(TO_CMAKE_PATH \"${CMAKE_PREFIX_PATH}\" CMAKE_PREFIX_PATH)\n  list(APPEND CMAKE_PREFIX_PATH \"${ADDON_DEPENDS_PATH}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Threads Test\nDESCRIPTION: Sets up the source files list for the threads test library, including test implementations for Event, SharedSection, and EndTime components.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/threads/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestEvent.cpp\n            TestSharedSection.cpp\n            TestEndTime.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Dependencies\nDESCRIPTION: Commands to bootstrap and configure the build environment for tvOS with 64-bit architecture\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.tvOS.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/kodi/tools/depends\n./bootstrap\n./configure --host=aarch64-apple-darwin --with-platform=tvos\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for XBMC Weather Module in CMake\nDESCRIPTION: Sets the HEADERS variable with a list of header files (.h) for the weather module. These files contain the declarations of classes and functions used in the weather implementation.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/weather/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS GUIWindowWeather.h\n            WeatherJob.h\n            WeatherManager.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to sudo-install Target in CMake\nDESCRIPTION: Iterates through all addons being built and adds them as dependencies to the 'sudo-install' target, ensuring they are built before the installation process begins.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(_id ${ALL_ADDONS_BUILDING})\n    add_dependencies(sudo-install ${_id})\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for XBMC Controller Component\nDESCRIPTION: Defines the list of source files for the controller component. These files contain the implementation of various controller-related functionalities.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/controllers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES Controller.cpp\n            ControllerLayout.cpp\n            ControllerManager.cpp\n            ControllerTranslator.cpp\n            DefaultController.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Video Library Header Files in CMake\nDESCRIPTION: Sets up a list of header files for the video library component. These headers correspond to the source files and define the interfaces for the video-related functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/video/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS Bookmark.h\n            ContextMenus.h\n            Episode.h\n            GUIViewStateVideo.h\n            PlayerController.h\n            Teletext.h\n            TeletextDefines.h\n            VideoDatabase.h\n            VideoDbUrl.h\n            VideoEmbeddedImageFileLoader.h\n            VideoFileItemClassify.h\n            VideoGeneratedImageFileLoader.h\n            VideoInfoDownloader.h\n            VideoInfoScanner.h\n            VideoInfoTag.h\n            VideoItemArtworkHandler.h\n            VideoLibraryQueue.h\n            VideoThumbLoader.h\n            VideoUtils.h\n            VideoManagerTypes.h\n            ViewModeSettings.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kodi Dependencies for Native Linux\nDESCRIPTION: Command to configure the build system for native Linux compilation. This uses the system's own toolchain and sets up for OpenGL rendering.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/depends/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-toolchain=/usr --prefix=/opt/xbmc-deps --host=x86_64-linux-gnu --with-rendersystem=gl\n```\n\n----------------------------------------\n\nTITLE: Installing distcc for Distributed Kodi Builds\nDESCRIPTION: Command to install distcc, which allows distributing build workloads across multiple machines on a network, useful for complex builds like Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.Fedora.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install distcc\n```\n\n----------------------------------------\n\nTITLE: Configuring PVR Provider Header Files in CMake\nDESCRIPTION: Sets the HEADERS variable with the list of header files for PVR providers. These files contain the declarations and interfaces for PVR provider functionality.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/pvr/providers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS PVRProvider.h\n            PVRProviders.h\n            PVRProvidersPath.h)\n```\n\n----------------------------------------\n\nTITLE: Setting Addon Source Prefix and Library Directory\nDESCRIPTION: Configures the optional addon source directory prefix and sets up the application library directory for Kodi.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(ADDON_SRC_PREFIX)\n  if(NOT IS_ABSOLUTE ${ADDON_SRC_PREFIX})\n    get_filename_component(ADDON_SRC_PREFIX \"${CMAKE_BINARY_DIR}/${ADDON_SRC_PREFIX}\" ABSOLUTE)\n  endif()\n  message(STATUS \"Overriding addon source directory prefix: ${ADDON_SRC_PREFIX}\")\nendif()\n\nif(NOT APP_LIB_DIR)\n  set(APP_LIB_DIR \"${ADDON_DEPENDS_PATH}/lib/kodi\")\nelse()\n  file(TO_CMAKE_PATH \"${APP_LIB_DIR}\" APP_LIB_DIR)\nendif()\n\nset(APP_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for XBMC Playlists\nDESCRIPTION: Defines the list of header (.h) files that declare the interfaces for the playlists module, matching the implementation files.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/playlists/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS PlayList.h\n            PlayListASX.h\n            PlayListB4S.h\n            PlayListFactory.h\n            PlayListFileItemClassify.h\n            PlayListM3U.h\n            PlayListPLS.h\n            PlayListRAM.h\n            PlayListTypes.h\n            PlayListURL.h\n            PlayListWPL.h\n            PlayListXML.h\n            PlayListXSPF.h\n            SmartPlayList.h\n            SmartPlaylistFileItemListModifier.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: Sets up include directories for the WiiRemote target, including Bluetooth and CWiid interface directories.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/tools/EventClients/Clients/WiiRemote/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${APP_NAME_LC}-wiiremote\n                           PRIVATE $<TARGET_PROPERTY:${APP_NAME_LC}::Bluetooth,INTERFACE_INCLUDE_DIRECTORIES>\n                                   $<TARGET_PROPERTY:${APP_NAME_LC}::CWiid,INTERFACE_INCLUDE_DIRECTORIES>)\n```\n\n----------------------------------------\n\nTITLE: Installing GBM Dependencies\nDESCRIPTION: Command to install additional packages required for GBM support\nSOURCE: https://github.com/xbmc/xbmc/blob/master/docs/README.openSUSE.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install libgbm-devel libinput-devel libxkbcommon-devel\n```\n\n----------------------------------------\n\nTITLE: Adding XBMC Game Ports Windows Library in CMake\nDESCRIPTION: This snippet uses the core_add_library function to create a library named 'games_ports_windows'. It likely includes the previously defined SOURCES and HEADERS.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/ports/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncore_add_library(games_ports_windows)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Kodi Addon Dependencies on Windows\nDESCRIPTION: Sets up the CMake project, defines the minimum required version, and configures the build type and module path. It also validates the ADDON_DEPENDS_PATH and sets up the CMAKE_PREFIX_PATH.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\nproject(kodi-addons-depends-windows)\n\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n\ninclude(ExternalProject)\n\nif(NOT ADDON_DEPENDS_PATH)\n  message(FATAL_ERROR \"ADDON_DEPENDS_PATH (${ADDON_DEPENDS_PATH}) is not a valid target directory.\")\nelse()\n  file(TO_CMAKE_PATH \"${ADDON_DEPENDS_PATH}\" ADDON_DEPENDS_PATH)\nendif()\nget_filename_component(ADDON_DEPENDS_PATH \"${ADDON_DEPENDS_PATH}\" ABSOLUTE)\nlist(APPEND CMAKE_PREFIX_PATH ${ADDON_DEPENDS_PATH})\n\nif(NOT DEPENDS_TO_BUILD)\n  set(DEPENDS_TO_BUILD \"all\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Addon Tarball Caching\nDESCRIPTION: Sets up an option to enable or disable caching of downloaded addon source tarballs. Outputs the current setting to the build log.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(ADDON_TARBALL_CACHING \"Cache downloaded addon source tarballs?\" ON)\nif(ADDON_TARBALL_CACHING)\n  message(STATUS \"Addon source tarball caching is enabled\")\nelse()\n  message(STATUS \"Addon source tarball caching is disabled\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Game Dialog Header Files in CMake\nDESCRIPTION: Defines the list of header files (.h) corresponding to the game dialog source files, providing declarations for the dialog component classes.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/games/dialogs/osd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS DialogGameAdvancedSettings.h\n            DialogGameOSD.h\n            DialogGameOSDHelp.h\n            DialogGameSaves.h\n            DialogGameStretchMode.h\n            DialogGameVideoFilter.h\n            DialogGameVideoRotation.h\n            DialogGameVideoSelect.h\n            DialogGameVolume.h\n            DialogInGameSaves.h\n)\n```\n\n----------------------------------------\n\nTITLE: Running FileMediaServerTest Sample Application\nDESCRIPTION: Command-line syntax for running the FileMediaServerTest sample application, which demonstrates a UPnP MediaServer.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/lib/libUPnP/Platinum/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFileMediaServerTest [-f <friendly_name>] <path>\n    -f : optional upnp server friendly name\n    <path> : local path to serve\n```\n\n----------------------------------------\n\nTITLE: Processing Dependency List and Adding Internal Projects in CMake\nDESCRIPTION: Searches for prebuilt dependency files, processes each file to extract dependency information, and adds internal projects for each dependency if it's in the DEPENDS_TO_BUILD list or if building all dependencies.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/cmake/addons/depends/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE download_input_files prebuilt/*.txt)\nforeach(file ${download_input_files})\n  if(NOT file MATCHES install.txt)\n    file(STRINGS ${file} def)\n    get_filename_component(dir ${file} DIRECTORY)\n    string(REPLACE \" \" \";\" def ${def})\n    list(GET def 0 id)\n\n    list(FIND DEPENDS_TO_BUILD ${id} idx)\n    if(idx GREATER -1 OR DEPENDS_TO_BUILD STREQUAL \"all\")\n      list(GET def 1 url)\n      add_internal(${id} ${url} ${dir}/install.txt)\n    endif()\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Addition for Input Keymaps in CMake\nDESCRIPTION: This snippet adds a library for input keymaps interfaces if static libraries are not enabled. It uses a custom CMake function 'core_add_library' to add the library.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/input/keymaps/interfaces/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ENABLE_STATIC_LIBS)\n  core_add_library(input_keymaps_interfaces)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Image File Test Sources in CMake\nDESCRIPTION: Defines test source files and creates a test library for image file handling in XBMC. Sets up TestImageFileURL.cpp as the source file and creates a test library named 'imagefiles_test'.\nSOURCE: https://github.com/xbmc/xbmc/blob/master/xbmc/imagefiles/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES TestImageFileURL.cpp)\n\ncore_add_test_library(imagefiles_test)\n```"
  }
]