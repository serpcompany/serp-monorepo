[
  {
    "owner": "vinejs",
    "repo": "vinejs.dev",
    "content": "TITLE: Basic Validation with VineJS\nDESCRIPTION: Creating a validation schema with VineJS and validating user input data. The schema defines validation rules for username, email, and password with confirmation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  username: vine.string(),\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\nconst data = {\n  username: 'virk',\n  email: 'virk@example.com',\n  password: 'secret',\n  password_confirmation: 'secret',\n}\n\nconst output = await vine.validate({\n  schema,\n  data\n})\n\nconsole.log(output)\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation Groups in VineJS\nDESCRIPTION: Shows how to implement conditional validation based on field values. The example creates a conditional schema that validates different fields depending on whether a guide is being hired, then merges it with the main schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Conditional groups\nimport vine from '@vinejs/vine'\n\n// highlight-start\n/**\n * Conditional schema when hiring or not hiring\n * a guide\n */\nconst guideSchema = vine.group([\n  vine.group.if(\n    (data) => vine.helpers.isTrue(data.is_hiring_guide),\n    {\n      is_hiring_guide: vine.literal(true),\n      guide_id: vine.string(),\n      amount: vine.number(),\n    }\n  ),\n  vine.group.else({\n    is_hiring_guide: vine.literal(false),\n  }),\n])\n// highlight-end\n\nconst schema = vine\n  .object({\n    visitor_name: vine.string(),\n  })\n  // highlight-start\n  .merge(guideSchema)\n  // highlight-end\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n----------------------------------------\n\nTITLE: Basic Data Validation with VineJS in TypeScript\nDESCRIPTION: A simple example demonstrating how to validate email and password fields using VineJS. The code creates a validation schema with email and password rules, then validates data against this schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Basic example\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n----------------------------------------\n\nTITLE: Creating and Compiling a User Registration Schema in TypeScript using VineJS\nDESCRIPTION: This code demonstrates how to define a user registration schema with validation rules and pre-compile it using VineJS. The schema validates username, email, and password fields with specific constraints.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/pre_compiling.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: schemas/user_registration.ts\nimport vine from '@vinejs/vine'\n\nconst schema = vine.schema({\n  username: vine.string(),\n  email: vine.string().email(),\n  password: vine.string().min(8).max(32).confirmed()\n})\n\nexport const validate = vine.compile(schema)\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in VineJS\nDESCRIPTION: Catching and handling ValidationError in a try-catch block. The error.messages property contains detailed information about validation failures.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport vine, { errors } from '@vinejs/vine'\n\ntry {\n  const validator = vine.compile(schema)\n  const output = await validator.validate(data)\n} catch (error) {\n  if (error instanceof errors.E_VALIDATION_ERROR) {\n    console.log(error.messages)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginForm Validation with vine.group in VineJS\nDESCRIPTION: This code snippet shows how to implement the LoginForm validation using vine.group in VineJS. It creates a union of email and phone validations, then merges it with the password validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailOrPhone = vine.group([\n  vine.group.if((data) => 'email' in data, {\n    email: vine.string().email()\n  }),\n  vine.group.if((data) => 'phone' in data, {\n    phone: vine.string().mobile()\n  }),\n])\n\nconst loginForm = vine.object({\n  password: vine\n    .string()\n    .minLength(6)\n    .maxLength(32)\n})\n.merge(emailOrPhone)\n```\n\n----------------------------------------\n\nTITLE: Inferring Input Types from Schema\nDESCRIPTION: Using the InferInput type helper to derive TypeScript types for input data accepted by a schema. This shows the more permissive input types before validation and coercion.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport vine from '@vinejs/vine'\nimport { InferInput } from '@vinejs/vine/types'\n\nconst schema = vine.object({\n  username: vine.string(),\n  email: vine.string().email(),\n  is_admin: vine.boolean(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n})\n\ntype UserRegistrationInput = InferInput<typeof schema>\n/**\n * {\n *   username: string\n *   email: string\n *   is_admin: boolean | string | number\n *   password: string\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Basic Object Validation in TypeScript with VineJS\nDESCRIPTION: Demonstrates how to create a basic validation schema for an object with username and password properties using VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  username: vine.string(),\n  password: vine.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Usage in VineJS\nDESCRIPTION: Demonstrates how to use the enum data type to validate a field against a pre-defined list of values. The schema is compiled and used for validation, returning a union type of the allowed values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/enum.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  role: vine.enum(['admin', 'moderator', 'owner', 'user'])\n})\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n\noutput.role // 'admin' | 'moderator' | 'owner' | 'user'\n```\n\n----------------------------------------\n\nTITLE: VineJS Schema With camelCase Conversion (TypeScript)\nDESCRIPTION: Demonstrates how to use the toCamelCase modifier in a VineJS schema to convert object keys from snake_case to camelCase in the output.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  first_name: vine.string(),\n  last_name: vine.string(),\n  referral_code: vine.string().optional()\n})\n.toCamelCase()\n\nconst validate = vine.compile(schema)\n\nconst {\n firstName,\n lastName,\n referralCode\n} = await validate({ data })\n```\n\n----------------------------------------\n\nTITLE: Validating Arrays and Nested Objects with VineJS\nDESCRIPTION: Shows how to validate complex data structures with nested objects and arrays. The schema validates a product with SKU, price, and an array of variants, each containing name, type, and value properties.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Arrays and Objects\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  sku: vine.string(),\n  price: vine.number().positive(),\n  // highlight-start\n  variants: vine.array(\n    vine.object({\n      name: vine.string(),\n      type: vine.enum(['size', 'color']),\n      value: vine.string(),\n    })\n  )\n  // highlight-end\n})\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Rules in VineJS\nDESCRIPTION: Demonstrates how to create and use custom validation rules using vine.createRule() method and apply them to schema fields.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst myRule = vine.createRule(async (value, options, field) => {\n  // Implementation goes here\n})\n\nconst schema = vine.object({\n  username: vine.string().use(\n    myRule()\n  ),\n  email: vine.string().email().use(\n    myRule()\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling Schema for Performance\nDESCRIPTION: Pre-compiling a schema using vine.compile for improved performance. This converts the schema into an optimized JavaScript function that can be reused for multiple validations.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  username: vine.string(),\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\nconst data = {\n  username: 'virk',\n  email: 'virk@example.com',\n  password: 'secret',\n  password_confirmation: 'secret',\n}\n\n// highlight-start\nconst validator = vine.compile(schema)\nconst output = await validator.validate(data)\n// highlight-end\n\nconsole.log(output)\n```\n\n----------------------------------------\n\nTITLE: Composing Schemas Using Existing Properties in VineJS\nDESCRIPTION: Demonstrates how to create a new object schema by copying properties from an existing schema and adding new properties.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst userSchema = vine.object({\n  username: vine.string()\n})\n\nconst postSchema = vine.object({\n  title: vine.string(),\n  author: vine.object({\n    ...userSchema.getProperties(),\n    id: vine.number(),\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSONAPIErrorReporter in VineJS (TypeScript)\nDESCRIPTION: Shows how to create a custom error reporter (JSONAPIErrorReporter) implementing the ErrorReporterContract interface. This reporter formats errors according to the JSONAPI specification.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/error_reporter.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@vinejs/vine'\nimport {\n   FieldContext,\n   ErrorReporterContract\n} from '@vinejs/vine/types'\n\nexport class JSONAPIErrorReporter implements ErrorReporterContract {\n  /**\n   * A flag to know if one or more errors have been\n   * reported\n   */\n  hasErrors: boolean = false\n\n  /**\n   * A collection of errors. Feel free to give accurate types\n   * to this property\n   */\n  errors: any[] = []\n\n  /**\n   * VineJS call the report method\n   */\n  report(\n    message: string,\n    rule: string,\n    field: FieldContext,\n    meta?: any\n  ) {\n    this.hasErrors = true\n\n    /**\n     * Collecting errors as per the JSONAPI spec\n     */\n    this.errors.push({\n      code: rule,\n      detail: message,\n      source: {\n        pointer: field.wildCardPath\n      },\n      ...(meta ? { meta } : {})\n    })\n  }\n\n  /**\n   * Creates and returns an instance of the\n   * ValidationError class\n   */\n  createError() {\n    return new errors.E_VALIDATION_ERROR(this.errors)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending VineString class with a custom macro method\nDESCRIPTION: Demonstrates how to extend the VineString class by adding a custom 'unique' method using the macro functionality. This enables a chainable API for applying the unique validation rule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VineString } from '@vinejs/vine'\nimport { uniqueRule, Options } from './rules/unique.js'\n\nVineString.macro('unique', function (this: VineString, options: Options) {\n  return this.use(uniqueRule(options))\n})\n```\n\n----------------------------------------\n\nTITLE: Type Inference from Schema with VineJS\nDESCRIPTION: Using the Infer type helper to derive TypeScript types directly from a validation schema. This allows for type-safe usage without manual type definition.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport vine from '@vinejs/vine'\nimport { Infer } from '@vinejs/vine/types'\n\nconst schema = vine.object({\n  username: vine.string(),\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\ntype UserRegistration = Infer<typeof schema>\n/**\n * {\n *   username: string\n *   email: string\n *   password: string\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing FiscalHost Validation with vine.group in VineJS\nDESCRIPTION: This code demonstrates how to implement FiscalHost validation using vine.group in VineJS, creating a union of different fiscal host types based on the 'type' property.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst stripe = {\n  type: vine.literal('stripe'),\n  account_id: vine.string(),\n}\n\nconst paypal = {\n  type: vine.literal('paypal'),\n  email: vine.string().email(),\n}\n\nconst oc = {\n  type: vine.literal('open_collective'),\n  project_url: vine.string().url(),\n}\n\nconst fiscalHost = vine.group([\n  vine.group.if((data) => data.type === 'stripe', stripe),\n  vine.group.if((data) => data.type === 'paypal', paypal),\n  vine.group.if((data) => data.type === 'open_collective', oc)\n])\n\nconst schema = vine\n  .object({\n    type: vine.enum(['stripe', 'paypal', 'open_collective'])\n  })\n  .merge(fiscalHost)\n```\n\n----------------------------------------\n\nTITLE: Creating a Money Validation Rule in VineJS\nDESCRIPTION: Implementation of a custom validation rule for a Money data type that validates numeric inputs and converts them to Dinero.js amount objects. The rule validates that the input value can be converted to a number before creating a Dinero object with USD currency.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_schema_types.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\nimport { dinero } from 'dinero.js'\nimport { USD } from '@dinero.js/currencies'\nimport { FieldContext } from '@vinejs/vine/types'\n\nconst isMoney = vine.createRule((value: unknown, _, field: FieldContext) => {\n  /**\n   * Convert string representation of a number to a JavaScript\n   * Number data type.\n   */\n  const numericValue = vine.helpers.asNumber(value)\n\n  /**\n   * Report error, if the value is NaN post-conversion\n   */\n  if (Number.isNaN(numericValue)) {\n    field.report(\n      'The {{ field }} field value must be a number',\n      'money',\n      field\n    )\n    return\n  }\n\n  /**\n   * Create amount type\n   */\n  const amount = dinero({ amount: numericValue, currency: USD })\n\n  /**\n   * Mutate the field's value\n   */ \n  field.mutate(amount, field)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom unique validation rule in TypeScript for VineJS\nDESCRIPTION: Creates a 'unique' validation rule that queries a database to ensure a field value is unique within a specified table. The implementation handles validation for string values only and reports errors when duplicates are found.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: rules/unique.ts\nimport { FieldContext } from '@vinejs/vine/types'\n\n/**\n * Options accepted by the unique rule\n */\ntype Options = {\n  table: string\n  column: string\n}\n\n/**\n * Implementation\n */\nasync function unique(\n  value: unknown,\n  options: Options,\n  field: FieldContext\n) {\n  /**\n   * We do not want to deal with non-string\n   * values. The \"string\" rule will handle the\n   * the validation.\n   */\n  if (typeof value !== 'string') {\n    return\n  }\n  \n  const row = await db\n   .select(options.column)\n   .from(options.table)\n   .where(options.column, value)\n   .first()\n   \n  if (row) {\n    field.report(\n      'The {{ field }} field is not unique',\n      'unique',\n      field\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfAnyMissing in VineJS\nDESCRIPTION: This example shows how to make a field required when any of the specified fields are missing. The legacyAccountId becomes required if either email or username is not provided.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine.string().optional(),\n  email: vine.string().optional(),\n  legacyAccountId: vine\n    .string()\n    .optional()\n    // highlight-start\n    .requiredIfAnyMissing(['email', 'username'])\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Email Validation in VineJS\nDESCRIPTION: Demonstrates how to validate an email address field using VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  email: vine\n    .string()\n    .email(optionsGoesHere)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Validator.js Methods in VineJS\nDESCRIPTION: VineJS provides access to validator.js methods through the vine.helpers object. These methods include email, URL, credit card validation, and many other common validation tasks with configurable options.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isEmail('foo@bar.com', {\n  allow_ip_domain: false,\n})\n\nvine.helpers.isURL('https://foo.com', {\n  require_protocol: true,\n  allow_query_components: false,\n})\n\nvine.helpers.isPassportNumber('passport-number', {\n  countryCode: 'IN'\n})\n```\n\n----------------------------------------\n\nTITLE: Union Type Validation in VineJS\nDESCRIPTION: Demonstrates how to validate fields that can accept multiple data types using unionOfTypes. The example validates a health_check field that can be either a boolean or a URL string.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Unions\nimport vine from '@vinejs/vine'\n\nconst schema = vine\n  .object({\n    // highlight-start\n    health_check: vine.unionOfTypes([\n      vine.boolean(),\n      vine.string().url().activeUrl()\n    ])\n    // highlight-end\n  })\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Groups with Conditional Validation in VineJS\nDESCRIPTION: Demonstrates how to use vine.group to create conditional validation schemas that include different properties based on runtime conditions.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst guideSchema = vine.group([\n  vine.group.if(\n    (data) => vine.helpers.isTrue(data.is_hiring_guide),\n    {\n      is_hiring_guide: vine.literal(true),\n      guide_id: vine.string(),\n      amount: vine.number(),\n    }\n  ),\n  vine.group.else({\n    is_hiring_guide: vine.literal(false),\n  }),\n])\n\nconst schema = vine.object({\n  name: vine.string(),\n  group_size: vine.number(),\n  phone_number: vine.string()\n})\n.merge(guideSchema)\n```\n\n----------------------------------------\n\nTITLE: Validating Composite Uniqueness in Arrays\nDESCRIPTION: Demonstrates how to validate uniqueness based on multiple properties in an array of objects. This example ensures the combination of 'email' and 'company_id' is unique for each user.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  users: vine\n    .array(\n      vine.object({\n        email: vine.string(),\n        company_id: vine.number(),\n        password: vine.string()\n      })\n    )\n    // highlight-start\n    .distinct(['email', 'company_id'])\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Validation in VineJS\nDESCRIPTION: Defines a basic schema with a string field validation using VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  username: vine.string()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Messages Provider in VineJS\nDESCRIPTION: Shows how to implement a custom messages provider by implementing the MessagesProviderContact interface. This is useful for multi-lingual applications or custom error message workflows.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\nimport { FieldContext, MessagesProviderContact } from '@vinejs/vine/types'\n\nexport class CustomMessagesProvider implements MessagesProviderContact {\n  /**\n   * Returns the error messages for a given rule id and field.\n   */\n  getMessage(\n    defaultMessage: string,\n    rule: string,\n    field: FieldContext,\n    meta?: Record<string, any>\n  ) {\n    // resolve and return error message from some collection\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Extending Schema Types in VineJS\nDESCRIPTION: Shows how to clone an existing schema type and extend it with additional properties for reuse in a new schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst userSchema = vine.object({\n  username: vine.string()\n})\n\nconst postSchema = vine.object({\n  title: vine.string(),\n  author: userSchema.clone().nullable()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Array of Union Types in VineJS\nDESCRIPTION: Demonstrates validating an array of union types, where each element can match one of several schemas. This example creates a 'contacts' array that can contain email or phone contact objects.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Re-usable helper to check if the field value\n * is an object and has a matching type\n */\nfunction hasType(value: unknown, type: string) {\n  return vine.helpers.isObject(value) && value.type === type\n}\n\n/**\n * Schema type for email contact\n */\nconst emailContact = vine.object({\n  type: vine.literal('email'),\n  email: vine.string().email()\n})\n\n/**\n * Schema type for phone contact\n */\nconst phoneContact = vine.object({\n  type: vine.literal('phone'),\n  phone: vine.string().mobile()\n})\n\n/**\n * Define a contact union with conditionals and\n * their associated schema\n */ \nconst contact = vine.union([\n  vine.union.if((value) => hasType(value, 'email'), emailContact),\n  vine.union.if((value) => hasType(value, 'phone'), phoneContact)\n])\n\nconst schema = vine.object({\n  contacts: vine.array(contact)\n})\n```\n\n----------------------------------------\n\nTITLE: Using requiredWhen with Callback Function in VineJS\nDESCRIPTION: This example demonstrates using a callback function with requiredWhen for complex validation scenarios. The address field becomes required when country is 'USA' and both state and city fields exist.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  address: vine\n    .string()\n    // highlight-start\n    .requiredWhen((field) => {\n      if (field.parent.country !== 'USA') {\n        return false\n      }\n      return 'state' in field.parent && 'city' in field.parent\n    })\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Number Schema in VineJS\nDESCRIPTION: Demonstrates how to create a basic schema for validating a number field without decimal places using VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  age: vine.number().withoutDecimals()\n})\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfExists with Multiple Fields in VineJS\nDESCRIPTION: This example demonstrates how to make a field required when multiple other fields exist. The address field becomes required when both state and city fields have values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  address: vine\n    .string()\n    .optional()\n    // highlight-start\n    .requiredIfExists(['state', 'city'])\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing requiredIfExists for Interdependent Fields in VineJS\nDESCRIPTION: This example demonstrates how to conditionally require fields based on the existence of other fields. If lastName exists, firstName becomes required and vice versa.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  firstName: vine.string().optional().requiredIfExists('lastName'),\n  lastName: vine.string().optional().requiredIfExists('firstName'),\n})\n```\n\n----------------------------------------\n\nTITLE: Credit Card Validation in VineJS\nDESCRIPTION: Validates that a string is a valid credit card number with optional provider constraints.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  credit_card: vine\n    .string()\n    .creditCard()\n})\n\n// Only allow mastercard credit cards\nvine.object({\n  credit_card: vine\n    .string()\n    .creditCard({ provider: ['mastercard'] })\n})\n```\n\n----------------------------------------\n\nTITLE: Using requiredWhen with Comparison Operators in VineJS\nDESCRIPTION: This snippet shows how to make a field required based on the value of another field using comparison operators. The volleyballLevel field becomes required when discipline equals 'volleyball'.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  discipline: vine.enum(['volleyball', 'handball']),\n  volleyballLevel: vine\n    .enum(['senior', 'u21', 'u19', 'u17'])\n    .optional()\n    // highlight-start\n    .requiredWhen('discipline', '=', 'volleyball')\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Non-Empty Arrays in VineJS\nDESCRIPTION: Shows how to ensure an array has at least one element using the notEmpty() validation rule. This prevents the 'categories' array from being empty.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  categories: vine.array(\n    vine.number()\n  ).notEmpty()\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Unique Object Properties in Arrays\nDESCRIPTION: Shows how to validate uniqueness of specific properties in an array of objects. This example ensures each user in the 'users' array has a unique email address.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  users: vine\n    .array(\n      vine.object({\n        email: vine.string(),\n        password: vine.string()\n      })\n    )\n    // highlight-start\n    .distinct('email')\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Converting a custom function to a VineJS rule with createRule\nDESCRIPTION: Demonstrates how to convert a custom validation function into a VineJS rule using the vine.createRule method. This creates a reusable rule that can be applied to any schema type.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: rules/unique.ts\nimport { FieldContext } from '@vinejs/vine/types'\n\n/**\n * Options accepted by the unique rule\n */\ntype Options = {\n  table: string\n  column: string\n}\n\n/**\n * Implementation\n */\nasync function unique(\n  value: unknown,\n  options: Options,\n  field: FieldContext\n) {\n  /**\n   * We do not want to deal with non-string\n   * values. The \"string\" rule will handle the\n   * the validation.\n   */\n  if (typeof value !== 'string') {\n    return\n  }\n  \n  const row = await db\n   .from(options.table)\n   .select(options.column)\n   .where(options.column, value)\n   .first()\n   \n  if (row) {\n    field.report(\n      'The {{ field }} field is not unique',\n      'unique',\n      field\n    )\n  }\n}\n\n/**\n * Converting a function to a VineJS rule\n */\nexport const uniqueRule = vine.createRule(unique)\n```\n\n----------------------------------------\n\nTITLE: Deferred Enum Option Computation in VineJS\nDESCRIPTION: Shows how to defer computing enum options by using a callback. This is useful when the list of options depends on runtime data, such as the value of another field.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/enum.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  creative_device: vine.enum(['mobile', 'desktop']),\n\n  banner_width: vine.enum((field) => {\n    if (field.parent.creative_device === 'mobile') {\n      return ['320px', '640px'] as const\n    }\n\n    return ['1080px', '1280px'] as const\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Transforming Output Value in VineJS Schema (TypeScript)\nDESCRIPTION: Demonstrates how to use the transform method on a VineJS schema to mutate the output value. In this example, the amount field is transformed into an Amount object after validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  amount: vine.number().decimal([2, 4]).transform((value) => {\n    return new Amount(value)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using vine.union for Health Check Validation in VineJS\nDESCRIPTION: This code snippet demonstrates how to use vine.union for validating a health_check field that can be either a URL string or a boolean value. This approach requires writing conditionals manually.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst healthCheckSchema = vine.union([\n  vine.union.if(\n    (value) => vine.helpers.string(value),\n    vine.string().url()\n  ),\n  vine.union.else(vine.boolean())\n])\n\nconst schema = vine.object({\n  health_check: healthCheckSchema\n})\n```\n\n----------------------------------------\n\nTITLE: Reporting Errors in VineJS Custom Rule\nDESCRIPTION: This example shows how to use the report() method to report custom error messages for a field in a VineJS validation rule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/field_context.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvine.createRule((value, options, field) => {\n  field.report('error message', 'error_id', field, {\n    key: 'value'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining LoginForm Type with Union in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a LoginForm type using a union of objects in TypeScript. It combines a static object with password and a union of email or phone number.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Just for visualization purposes. Not required by VineJS\n */\ntype LoginForm = {\n  password: string\n} & ({\n  email: string\n} | {\n  phone: string\n})\n```\n\n----------------------------------------\n\nTITLE: Creating VineMoney Schema Class\nDESCRIPTION: Implementation of a custom schema type class for Money that extends the BaseLiteralType. This class represents the Money data type and includes the isMoney validation rule by default.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_schema_types.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dinero, Dinero } from 'dinero.js'\nimport vine, { BaseLiteralType } from '@vinejs/vine'\nimport type { FieldOptions, Validation } from '@vinejs/vine/types'\n\ntype Money = Dinero<number>\n\nexport class VineMoney extends BaseLiteralType<string, Money, Money> {\n  constructor(options?: FieldOptions, validations?: Validation<any>[]) {\n    super(options, validations || [isMoney()])\n  }\n\n  clone() {\n    return new VineMoney(\n      this.cloneOptions(),\n      this.cloneValidations()\n    ) as this\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfMissing in VineJS\nDESCRIPTION: This snippet demonstrates how to make a field required when another field is missing. The pincode field becomes required when the address field is not provided.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  address: vine.string().optional(),\n  pincode: vine\n    .string()\n    .optional()\n    // highlight-start\n    .requiredIfMissing('address')\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Enum with VineJS\nDESCRIPTION: Illustrates how to use a TypeScript enum with VineJS's enum data type. The schema is defined using the TypeScript enum, and the validated output maintains the enum type.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/enum.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nenum Roles {\n  ADMIN = 'admin',\n  MOD = 'moderator',\n  OWNER = 'owner',\n  USER = 'user'\n}\n\nconst schema = vine.object({\n  role: vine.enum(Roles)\n})\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n\noutput.role // Roles\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Reporting to Union Validation in VineJS\nDESCRIPTION: This code shows how to add custom error reporting to the Union validation using the otherwise clause when both email and phone are missing.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailOrPhone = vine.group([\n  vine.group.if((data) => 'email' in data, {\n    email: vine.string().email()\n  }),\n  vine.group.if((data) => 'phone' in data, {\n    phone: vine.string().mobile({ strict: true })\n  }),\n])\n.otherwise((_, field) => {\n  field.report(\n    'Enter either the email or the phone number',\n    'email_or_phone',\n    field\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleMessagesProvider in VineJS\nDESCRIPTION: Demonstrates how to use the SimpleMessagesProvider with custom error messages. The provider accepts an object with keys representing rule names or field+rule combinations and values containing the error messages.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine, { SimpleMessagesProvider } from '@vinejs/vine'\n\nvine.messagesProvider = new SimpleMessagesProvider({\n  // Applicable for all fields\n  'required': 'The {{ field }} field is required',\n  'string': 'The value of {{ field }} field must be a string',\n  'email': 'The value is not a valid email address',\n\n  // Error message for the username field\n  'username.required': 'Please choose a username for your account',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Record Type Validation in TypeScript with VineJS\nDESCRIPTION: Shows how to validate an object with unknown keys but values that must be hex color codes using VineJS record type\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  colors: vine.record(\n    vine.string().hexCode()\n  )\n})\n\nconst data = {\n  colors: {\n    white: '#ffffff',\n    black: '#000000',\n    lime: '#99d52a'\n  }\n}\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n```\n\n----------------------------------------\n\nTITLE: Basic Array Validation with VineJS\nDESCRIPTION: Demonstrates how to validate an array field with numeric elements using VineJS. This example creates a schema that expects the 'categories' field to be an array of numbers.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  categories: vine.array(vine.number())\n})\n```\n\n----------------------------------------\n\nTITLE: Defining group.if Conditional Validation in VineJS\nDESCRIPTION: Shows the syntax for the vine.group.if method which accepts a callback and schema, applying the schema only when the callback returns true.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvine.group.if((data, field) => {\n  return true\n}, {\n})\n```\n\n----------------------------------------\n\nTITLE: Using Validation Metadata in VineJS\nDESCRIPTION: Demonstrates how to use validation metadata to pass runtime options to pre-compiled schemas, specifically for credit card validation based on user profile.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst purchaseValidator = vine.compile(\n  vine.object({\n    credit_card: vine\n      .string()\n      .creditCard((field) => {\n        return {\n          provider: field.meta.ccProviders\n        }\n      })\n  })\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = req.auth.user\nconst ccProviders = user.getProviders()\n\nawait purchaseValidator.validate(req.body, {\n  meta: {\n    ccProviders\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using SimpleErrorReporter in VineJS Validation (TypeScript)\nDESCRIPTION: Demonstrates how to use the default SimpleErrorReporter in VineJS for handling validation errors. It shows the structure of the error messages returned by the reporter.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/error_reporter.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine, { errors } from '@vinejs/vine'\n\ntry {\n  const validate = vine.compile(schema)\n  const output = await validate({ data })\n} catch (error) {\n  if (error instanceof errors.E_VALIDATION_ERROR) {\n    // array created by SimpleErrorReporter\n    console.log(error.messages)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Guarding against invalid values in custom rules\nDESCRIPTION: Demonstrates how to check if a field is already invalid using the field.isValid property. This optimization prevents unnecessary database queries when the field has already failed validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function unique(\n  value: unknown,\n  options: Options,\n  field: FieldContext\n) {\n  if (typeof value !== 'string') {\n    return\n  }\n  \n  if (!field.isValid) {\n    return\n  }\n  \n  const row = await db\n   .select(options.column)\n   .from(options.table)\n   .first()\n   \n  if (row) {\n    field.report(\n      'The value of {{ field }} field is not unique',\n      'unique',\n      field\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern Validation in VineJS\nDESCRIPTION: Shows how to validate string fields against regex patterns.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine\n    .string()\n    .regex(/^[a-zA-Z0-9]+$/)\n})\n\nvine.object({\n  username: vine\n    .string()\n    .regex(new RegExp('^[a-zA-Z0-9]+$'))\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Array Maximum Length in VineJS\nDESCRIPTION: Shows how to limit the maximum number of elements in an array using the maxLength() validation rule. This example restricts the 'categories' array to have no more than 10 elements.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  categories: vine.array(\n    vine.number()\n  ).maxLength(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Tuple Schema in VineJS\nDESCRIPTION: Creates a validation schema for a coordinates tuple containing exactly two numbers (latitude and longitude). The tuple validation ensures the array has the expected length and element types.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/tuple.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  coordinates: vine.tuple([\n    vine.number(),\n    vine.number(),\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Normalizing Email Addresses in VineJS\nDESCRIPTION: Normalizes email addresses using the validator.js library. Accepts options to control normalization behavior such as lowercase conversion and Gmail-specific normalizations.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  email: vine\n    .string()\n    .normalizeEmail({\n      all_lowercase: true,\n      gmail_remove_dots: true,\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Alphanumeric Validation in VineJS\nDESCRIPTION: Validates string fields to contain only letters and numbers with optional characters.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine\n    .string()\n    .alphaNumeric({\n      allowSpaces: false,\n      allowUnderscores: true,\n      allowDashes: true,\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Global Empty String to Null Conversion in VineJS\nDESCRIPTION: Configures VineJS to automatically convert empty string values to null globally across the application. This helps maintain database normalization for nullable fields.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/html_forms_and_surprises.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nvine.convertEmptyStringsToNull = true\n```\n\n----------------------------------------\n\nTITLE: UUID Validation in VineJS\nDESCRIPTION: Validates a field as a valid UUID with optional version constraints.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  id: vine\n    .string()\n    .uuid({ version: [4] })\n})\n\n// Enforce multiple version.\nvine.object({\n  id: vine\n    .string()\n    .uuid({ version: [2, 4, 5] })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Number Validation in VineJS\nDESCRIPTION: Demonstrates how to set custom error messages for various number-based validation rules in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  number: 'The {{ field }} field must be a number',\n  min: 'The {{ field }} field must be at least {{ min }}',\n  max: 'The {{ field }} field must not be greater than {{ max }}',\n  range: 'The {{ field }} field must be between {{ min }} and {{ max }}',\n  positive: 'The {{ field }} field must be positive',\n  negative: 'The {{ field }} field must be negative',\n  decimal: 'The {{ field }} field must have {{ digits }} decimal places',\n  withoutDecimals: 'The {{ field }} field must not have decimal places',\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfAnyExists in VineJS\nDESCRIPTION: This example shows how to make a field required when any of the specified fields exist. The password field becomes required when either email or username has a value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  password: vine\n    .string()\n    .optional()\n    // highlight-start\n    .requiredIfAnyExists(['email', 'username'])\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Date Fields with Custom Options in VineJS\nDESCRIPTION: Configures field comparison with custom format and comparison unit options to handle dates in non-standard formats and compare at specific granularity levels.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  checkin_date: vine.date({\n    formats: ['YYYY/MM/DD']\n  }),\n  checkout_date: vine.date().afterField('checkin_date', {\n    compare: 'day',\n    format: ['YYYY/MM/DD']\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation in VineJS Error Messages\nDESCRIPTION: Shows how to use dynamic placeholders in custom error messages that will be replaced with runtime values. The {{ field }} placeholder is always available, while others are specific to rules.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  required: 'The {{ field }} field is required',\n  minLength: 'The {{ field }} field must be {{ min }} characters long',\n  date: 'The {{ field }} field must be formatted as {{ format }}'\n}\n\n// username: Will translate to following\n// The username field is required\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Strings in VineJS\nDESCRIPTION: Validates that a string value is formatted as a valid JWT (JSON Web Token). This method ensures the input follows the required JWT structure.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  authorization: vine.string().jwt()\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Passport Numbers with Dynamic Options in VineJS\nDESCRIPTION: Validates passport numbers with country codes determined at runtime. Uses a callback function to retrieve the country code from the parent object.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  passport: vine\n    .string()\n    .passport((field) => {\n      return {\n        countryCode: [field.parent.country_code]\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Normalizing URLs in VineJS\nDESCRIPTION: Normalizes URL strings using the normalize-url package. Accepts options to control normalization behavior like protocol handling and HTTPS enforcement.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  health_checks_url: vine\n    .string()\n    .normalizeUrl({\n      normalizeProtocol: true,\n      forceHttps: true,\n      stripHash: true,\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Array Element Uniqueness in VineJS\nDESCRIPTION: Demonstrates how to validate that array elements are unique using the distinct() validation rule. This example ensures all numbers in the 'categories' array are unique.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  categories: vine\n    .array(\n      vine.number()\n    )\n    // highlight-start\n    .distinct()\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Targeting Array Elements in VineJS Validation\nDESCRIPTION: Demonstrates how to define error messages for array elements using wildcard syntax or specific index targeting. Supports both targeting all elements with * or specific elements with index numbers.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  contacts: vine.array(vine.object({\n    email: vine.string().email()\n  }))\n})\n\nconst messages = {\n  'contacts.0.email.required': 'The primary email of the contact is required',\n  'contacts.*.email.required': 'Contact email is required'\n}\n```\n\n----------------------------------------\n\nTITLE: Making Date Fields Nullable in VineJS\nDESCRIPTION: Allows a date field to accept null values while still validating non-null inputs as proper dates.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: vine.date().nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Unknown Properties in Object Validation with VineJS\nDESCRIPTION: Demonstrates how to configure VineJS to allow and include unknown properties in the validation output using allowUnknownProperties().\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Allow unknown properties\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  username: vine.string(),\n  password: vine.string(),\n})\n.allowUnknownProperties()\n\nconst data = {\n  username: 'virk',\n  password: 'secret',\n  rememberMe: true,\n  trackLogin: true,\n}\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n/**\n{\n  username: 'virk',\n  password: 'secret',\n  rememberMe: true,\n  trackLogin: true,  \n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Validating Postal Codes with Dynamic Options in VineJS\nDESCRIPTION: Validates postal codes with country codes determined at runtime. Uses a callback function to retrieve the country code from the parent object.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  postal_code: vine\n    .string()\n    .postalCode((field) => {\n      return {\n        countryCode: [field.parent.country_code]\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message for Enum in VineJS\nDESCRIPTION: Demonstrates how to define a custom error message for enum validation using the 'enum' rule name. This allows for more specific error messaging when enum validation fails.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/enum.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  enum: 'The selected {{ field }} is invalid'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Parsing Input Values in VineJS Schema\nDESCRIPTION: Demonstrates how to use the parse() method to mutate input values before the validation cycle begins, including handling edge cases.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignDefaultRole(value: unknown) {\n  if (!value) {\n    return 'guest'\n  }\n  \n  return value\n}\n\nconst schema = vine.object({\n  role: vine.string().parse(assignDefaultRole)\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Range Validation to Number in VineJS\nDESCRIPTION: Illustrates how to set a range of valid values for a number field using the range() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  age: vine\n    .number()\n    .range([18, 60])\n})\n```\n\n----------------------------------------\n\nTITLE: Converting String Numbers to JavaScript Number Type in VineJS\nDESCRIPTION: Shows how VineJS automatically converts string-based numeric values to JavaScript numbers when using the number schema type. This handles the issue of HTML number inputs returning string values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/html_forms_and_surprises.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  age: vine.number().min(18)\n})\n\nconst data = {\n  age: '32'\n}\n\nconst validator = vine.compile(schema)\nconst output = await validator.validate(data)\n// { age: 32 }\n```\n\n----------------------------------------\n\nTITLE: Validating Mobile Numbers with Options in VineJS\nDESCRIPTION: Validates mobile numbers with custom options computed at runtime. Allows specifying locale and strictMode through a callback function.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  contact_number: vine\n    .string()\n    .mobile((field) => {\n      return {\n        locale: ['en-IN'],\n        strictMode: true,\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages Configuration for String Validation\nDESCRIPTION: Demonstrates how to define custom error messages for string-based validation rules in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  string: 'The {{ field }} field must be a string',\n  email: 'The {{ field }} field must be a valid email address',\n  regex: 'The {{ field }} field format is invalid',\n  url: 'The {{ field }} field must be a valid URL',\n  activeUrl: 'The {{ field }} field must be a valid URL',\n  alpha: 'The {{ field }} field must contain only letters',\n  alphaNumeric: 'The {{ field }} field must contain only letters and numbers',\n  minLength: 'The {{ field }} field must have at least {{ min }} characters',\n  maxLength: 'The {{ field }} field must not be greater than {{ max }} characters',\n  fixedLength: 'The {{ field }} field must be {{ size }} characters long',\n  confirmed: 'The {{ field }} field and {{ otherField }} field must be the same',\n  endsWith: 'The {{ field }} field must end with {{ substring }}',\n  startsWith: 'The {{ field }} field must start with {{ substring }}',\n  sameAs: 'The {{ field }} field and {{ otherField }} field must be the same',\n  notSameAs: 'The {{ field }} field and {{ otherField }} field must be different',\n  in: 'The selected {{ field }} is invalid',\n  notIn: 'The selected {{ field }} is invalid',\n  ipAddress: 'The {{ field }} field must be a valid IP address',\n  uuid: 'The {{ field }} field must be a valid UUID',\n  ulid: 'The {{ field }} field must be a valid ULID',\n  ascii: 'The {{ field }} field must only contain ASCII characters',\n  creditCard: 'The {{ field }} field must be a valid {{ providersList }} card number',\n  hexCode: 'The {{ field }} field must be a valid hex color code',\n  iban: 'The {{ field }} field must be a valid IBAN number',\n  jwt: 'The {{ field }} field must be a valid JWT token',\n  coordinates: 'The {{ field }} field must contain latitude and longitude coordinates',\n  mobile: 'The {{ field }} field must be a valid mobile phone number',\n  passport: 'The {{ field }} field must be a valid passport number',\n  postalCode: 'The {{ field }} field must be a valid postal code',\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Allowing Unknown Properties in Nested Objects with VineJS\nDESCRIPTION: Shows how to apply allowUnknownProperties() to nested objects in a VineJS validation schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  profile: vine\n    .object({\n      twitter_handle: vine.string(),\n      github_username: vine.string(),\n    })\n    .allowUnknownProperties()\n})\n```\n\n----------------------------------------\n\nTITLE: In List Validation in VineJS\nDESCRIPTION: Validates that a string value is within an allowed list of values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  role: vine\n    .string()\n    .in(['admin', 'moderator', 'writer'])\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Array Validation\nDESCRIPTION: Shows how to define custom error messages for array-related validation rules. The example provides custom messages for array type checking, length validations, emptiness, and uniqueness checks.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  'array': 'The {{ field }} field must be an array',\n  'array.minLength': 'The {{ field }} field must have at least {{ min }} items',\n  'array.maxLength': 'The {{ field }} field must not have more than {{ max }} items',\n  'array.fixedLength': 'The {{ field }} field must contain {{ size }} items',\n  'notEmpty': 'The {{ field }} field must not be empty',\n  'distinct': 'The {{ field }} field has duplicate values',\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Using vine.unionOfTypes for Health Check Validation in VineJS\nDESCRIPTION: This snippet shows how to use vine.unionOfTypes for validating a health_check field that can be either a URL string or a boolean value. This approach is recommended for distinct types as it removes the need for manual conditionals.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  health_check: vine.unionOfTypes([\n    vine.boolean(),\n    vine.string().url(),\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Maximum Value Validation to Number in VineJS\nDESCRIPTION: Shows how to set both minimum and maximum values for a number field using min() and max() methods in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  age: vine\n    .number()\n    .min(18)\n    .max(60)\n})\n```\n\n----------------------------------------\n\nTITLE: Active URL Validation in VineJS\nDESCRIPTION: Validates that a URL has valid DNS records.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  health_checks_url: vine\n    .string()\n    .activeUrl()\n})\n```\n\n----------------------------------------\n\nTITLE: Enforcing Positive Number Validation in VineJS\nDESCRIPTION: Demonstrates how to ensure a number field is positive using the positive() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  marks: vine\n    .number()\n    .positive()\n})\n```\n\n----------------------------------------\n\nTITLE: Accepting ISO-8601 Date Format in VineJS\nDESCRIPTION: Configures the date validator to accept dates in ISO-8601 format by adding 'iso8601' to the formats array.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  published_at: vine.date({\n    formats: ['iso8601']\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Optional and Nullable Modifiers in VineJS\nDESCRIPTION: Illustrates the usage of optional() and nullable() modifiers on schema fields and their effects on input/output behavior.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: vine.string().optional()\n}\n\n// input=foo; output=foo\n// input=null; output=undefined\n// input=undefined; output=undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: vine.string().nullable()\n}\n\n// input=foo; output=foo\n// input=null; output=null\n// input=undefined; throws exception\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: vine.string().nullable().optional()\n}\n\n// input=foo; output=foo\n// input=null; output=null\n// input=undefined; output=undefined\n```\n\n----------------------------------------\n\nTITLE: Validating Date Field Order in VineJS\nDESCRIPTION: Uses the afterField validator to ensure one date comes after another date field in the input data.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Example of afterField\nconst schema = vine.object({\n  checkin_date: vine.date(),\n  checkout_date: vine.date().afterField('checkin_date')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable Object Validation in VineJS\nDESCRIPTION: Shows how to make an object field nullable in a VineJS validation schema, allowing the field to accept null values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: vine.object({\n    twitter_handle: vine.string(),\n    github_username: vine.string(),\n  })\n  .nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Coordinate Strings in VineJS\nDESCRIPTION: Validates that a string contains valid latitude and longitude coordinates. This method ensures the input is properly formatted as geographical coordinates.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  delivery_location: vine\n    .string()\n    .coordinates()\n})\n```\n\n----------------------------------------\n\nTITLE: Using mutate() Method in VineJS Custom Rule\nDESCRIPTION: This snippet demonstrates how to use the mutate() method to modify the field value within a custom validation rule in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/field_context.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvine.createRule((value, options, field) => {\n  /**\n   * Mutate output value. The next validation rule will receive\n   * the updated value\n   */\n  field.mutate(value.toUpperCase(), field)\n})\n```\n\n----------------------------------------\n\nTITLE: Field Confirmation Validation in VineJS\nDESCRIPTION: Ensures a field is confirmed by an additional confirmation field, commonly used for passwords.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  password: vine\n    .string()\n    .confirmed()\n})\n\nconst data = {\n  password: 'secret',\n  password_confirmation: 'secret'\n}\n\nconst validator = vine.compile(schema)\nawait validator.validate(data)\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Field in VineJS Schema\nDESCRIPTION: Creates a schema with a boolean field that validates and converts boolean values. This includes true/false values and their string representations.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/boolean.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  is_admin: vine.boolean()\n})\n```\n\n----------------------------------------\n\nTITLE: Not Same As Field Validation in VineJS\nDESCRIPTION: Ensures one field value is different from another field's value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  old_email: vine.string().email(),\n  email: vine\n    .string()\n    .email()\n    .notSameAs('old_email')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an implicit rule in VineJS\nDESCRIPTION: Shows how to mark a rule as 'implicit', which means it will be executed even when the field's value is null or undefined. This configuration is passed as an option to createRule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const uniqueRule = vine.createRule(unique, {\n  implicit: true\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Array of Objects in VineJS\nDESCRIPTION: Shows how to validate an array containing objects with specific properties. This example validates a 'contacts' array where each element must be an object with 'id' and 'is_primary' properties.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  contacts: vine.array(\n    vine.object({\n      id: vine.number(),\n      is_primary: vine.boolean(),\n    })\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: URL Validation in VineJS\nDESCRIPTION: Demonstrates URL validation with optional protocol requirements.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  health_checks_url: vine\n    .string()\n    .url({\n      require_protocol: true,\n      protocols: ['http','https','ftp']\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Accepted Type Validation in TypeScript with VineJS\nDESCRIPTION: Demonstrates the basic usage of accepted type validation for checkbox fields. The schema validates if the input matches accepted values ('on', '1', 'yes', 'true') and normalizes the output to boolean true.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/accepted.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  terms: vine.accepted()\n})\n\nconst data = {\n  terms: 'on'\n}\n\n// output { terms: true }\n```\n\n----------------------------------------\n\nTITLE: Creating Top-Level Union Type for Contacts in VineJS\nDESCRIPTION: This snippet shows how to create a top-level union type for contacts in VineJS, allowing for validation of different contact formats including email strings and objects with email or phone fields.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst emailField = vine.string().email()\n\nconst emailSchema = vine.object({\n  email: emailField.clone(),\n})\n\nconst phoneSchema = vine.object({\n  phone: vine.string().mobile(),\n})\n\nconst contact = vine.union([\n  vine.union.if(\n    (value) => vine.helpers.isString(value),\n    emailField\n  ),\n  vine.union.if(\n    (value) => vine.helpers.isObject(value) && 'email' in value,\n    emailSchema\n  ),\n  vine.union.if(\n    (value) => vine.helpers.isObject(value) && 'phone' in value,\n    phoneSchema\n  ),\n])\n.otherwise((_, field) => {\n  vine.report('Invalid contact type', 'invalid_contact', field)\n})\n\nconst schema = vine.object({\n  contacts: vine.array(contact)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Modifier to Number Schema in VineJS\nDESCRIPTION: Illustrates how to make a number field optional in a VineJS schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  age: vine.number().withoutDecimals().optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Processing HTML Checkbox Values with VineJS Accepted Type\nDESCRIPTION: Demonstrates using the special 'accepted' schema type in VineJS to handle HTML checkbox values. It validates and normalizes values like 'on', '1', 'yes', or 'true' to a proper boolean true value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/html_forms_and_surprises.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  terms: vine.accepted()\n})\n\nconst data = {\n  terms: 'on'\n}\n\nconst validator = vine.compile(schema)\nconst output = await validator.validate(data)\n// { terms: true }\n```\n\n----------------------------------------\n\nTITLE: Using a Pre-compiled VineJS Schema for Data Validation in TypeScript\nDESCRIPTION: This snippet shows how to use a pre-compiled VineJS schema to validate data. It demonstrates importing the validate function, providing validation data, custom error messages, and executing the validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/pre_compiling.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validate } from './schemas/user_registration.js'\n\nconst data = {\n  username: 'virk',\n  email: 'virk@example.com',\n  password: 'secret',\n  password_confirmation: 'secret',\n}\n\nconst messages = {\n  required: 'The {{ field }} field is required',\n  string: 'The value of {{ field }} field must be a string',\n  email: 'The value is not a valid email address',\n}\n\nawait validate({\n  data,\n  messages\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Array Fixed Length in VineJS\nDESCRIPTION: Demonstrates enforcing an exact number of elements in an array using the fixedLength() validation rule. This example requires the 'categories' array to have exactly 4 elements.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  categories: vine.array(\n    vine.number()\n  ).fixedLength(4)\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Passport Numbers in VineJS\nDESCRIPTION: Validates that a string is formatted as a valid passport number for specific country codes. Accepts an array of country codes to validate against.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  passport: vine\n    .string()\n    .passport({\n      countryCode: ['IN', 'US', 'GB']\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Nullable Any Type in VineJS TypeScript\nDESCRIPTION: Shows how to create a validation schema that accepts any value or null using the nullable() modifier\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/any.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  secret_message: vine.any().nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages for Record Validation\nDESCRIPTION: Shows how to define custom error messages for record-based validation rules\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  'record': 'The {{ field }} field must be an object',\n  'record.minLength': 'The {{ field }} field must have at least {{ min }} items',\n  'record.maxLength': 'The {{ field }} field must not have more than {{ max }} items',\n  'record.fixedLength': 'The {{ field }} field must contain {{ size }} items'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Handling Array Members in VineJS Custom Rule\nDESCRIPTION: This snippet illustrates how to check if a field is an array member and access its parent array and index within a custom VineJS validation rule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/field_context.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvine.createRule((value, options, field) => {\n  if (field.isArrayMember) {\n    console.log(field.parent[field.name])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Postal Codes in VineJS\nDESCRIPTION: Validates that a string is formatted as a valid postal code for specific countries. Accepts an optional array of country codes to validate against.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  postal_code: vine\n    .string()\n    .postalCode({ countryCode: ['IN'] })\n})\n```\n\n----------------------------------------\n\nTITLE: Hex Color Code Validation in VineJS\nDESCRIPTION: Validates that a string is a valid hexadecimal color code.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  primary_color: vine.string().hexCode()\n})\n```\n\n----------------------------------------\n\nTITLE: ASCII Character Validation in VineJS\nDESCRIPTION: Ensures a string only contains ASCII characters.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  greeting: vine\n    .string()\n    .ascii()\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Strings with Nullable Fields in VineJS\nDESCRIPTION: Demonstrates how to define a schema with a nullable string field that converts empty strings to null values during validation. This example shows the normalization of an empty country field.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/html_forms_and_surprises.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  country: vine.string().nullable()\n})\n\nconst data = {\n  country: ''\n}\n\nconst validator = vine.compile(schema)\nconst output = await validator.validate(data)\n// { country: null }\n```\n\n----------------------------------------\n\nTITLE: Basic Date Validation with VineJS\nDESCRIPTION: Defines a schema with a date field validator that ensures the input value is formatted as a date string. The validated value is converted to a JavaScript Date object.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  published_at: vine.date()\n})\n```\n\n----------------------------------------\n\nTITLE: Record Length Validation Rules in VineJS\nDESCRIPTION: Examples of applying minimum, maximum, and fixed length validation rules to record types\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: vine.record(\n    vine.string().hexCode()\n  ).minLength(1)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: vine.record(\n    vine.string().hexCode()\n  ).maxLength(11)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: vine.record(\n    vine.string().hexCode()\n  ).fixedLength(11)\n}\n```\n\n----------------------------------------\n\nTITLE: Compacting Arrays in VineJS\nDESCRIPTION: Demonstrates the compact() mutation which removes empty strings, null, and undefined values from an array. This is useful for cleaning array data before validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  categories: vine\n    .array(\n      vine.number()\n    )\n    .compact()\n})\n```\n\n----------------------------------------\n\nTITLE: Not In List Validation in VineJS\nDESCRIPTION: Validates that a string value is not within a disallowed list.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine\n    .string()\n    .notIn(['admin', 'root', 'superuser'])\n})\n```\n\n----------------------------------------\n\nTITLE: Using requiredIfExists with Single Field in VineJS\nDESCRIPTION: This example shows how to make a field required when another specific field exists. The password field becomes required when the email field has a value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/conditional_validation.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  password: vine\n    .string()\n    .optional()\n    // highlight-start\n    .requiredIfExists('email')\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Array Minimum Length in VineJS\nDESCRIPTION: Demonstrates how to enforce a minimum number of elements in an array using the minLength() validation rule. This example requires the 'categories' array to have at least one element.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  categories: vine.array(\n    vine.number()\n  ).minLength(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Reporter Globally in VineJS (TypeScript)\nDESCRIPTION: Demonstrates how to configure a custom error reporter (JSONAPIErrorReporter) globally in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/error_reporter.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nvine.errorReporter = () => new JSONAPIErrorReporter()\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Validation Error Messages in VineJS\nDESCRIPTION: Defines custom error messages for date validation rules. The messages support template variables like field name and expected values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  'date': 'The {{ field }} field must be a datetime value',\n  \n  'date.equals': 'The {{ field }} field must be a date equal to {{ expectedValue }}',\n  'date.after': 'The {{ field }} field must be a date after {{ expectedValue }}',\n  'date.before': 'The {{ field }} field must be a date before {{ expectedValue }}',\n  'date.afterOrEqual': 'The {{ field }} field must be a date after or equal to {{ expectedValue }}',\n  'date.beforeOrEqual': 'The {{ field }} field must be a date before or equal to {{ expectedValue }}',\n\n  'date.sameAs': 'The {{ field }} field and {{ otherField }} field must be the same',\n  'date.notSameAs': 'The {{ field }} field and {{ otherField }} field must be different',\n  'date.afterField': 'The {{ field }} field must be a date after {{ otherField }}',\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Creating a Nullable Tuple Schema in VineJS\nDESCRIPTION: Defines a tuple that can be null using the nullable() modifier. This allows the field to contain either a valid tuple matching the schema or a null value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/tuple.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  coordinates: vine.tuple([\n    vine.number(),\n    vine.number(),\n  ])\n  .nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Union Types in VineJS\nDESCRIPTION: This code demonstrates how to define custom error messages for different union error codes in VineJS using a SimpleMessagesProvider.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  'union': 'Invalid value provided for {{ field }} field',\n  'unionGroup': 'Invalid value provided for {{ field }} field',\n  'unionOfTypes': 'Invalid value provided for {{ field }} field',\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Same As Field Validation in VineJS\nDESCRIPTION: Ensures one field value matches another field's value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  password: vine.string(),\n  password_confirmation: vine\n    .string()\n    .sameAs('password'),\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Decimal Places Validation to Number in VineJS\nDESCRIPTION: Demonstrates how to enforce specific decimal places for a number field using the decimal() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  price: vine\n    .number()\n    .decimal(2) // fixed: 9.99\n})\n\nvine.object({\n  price: vine\n    .number()\n    .decimal([0, 2]) // range: 9.99 or 9\n})\n```\n\n----------------------------------------\n\nTITLE: Union Type with Custom Error Message in VineJS\nDESCRIPTION: Extends the union type example with a custom error message for invalid contact types. The 'otherwise' clause reports a specific error when a contact doesn't match any defined type.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst contact = vine.union([\n  vine.union.if((value) => hasType(value, 'email'), emailContact),\n  vine.union.if((value) => hasType(value, 'phone'), phoneContact)\n])\n// highlight-start\n.otherwise((_, field) => {\n  field.report(\n    'Invalid contact. Either provide an email or a phone number',\n    'unknown_contact_type',\n    field\n  )\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Validating a Tuple With Unknown Properties in VineJS\nDESCRIPTION: Creates a validation schema for top_scores tuple that accepts three numbers but also preserves any additional elements. The allowUnknownProperties() method keeps all array elements beyond the defined schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/tuple.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Allow unknown properties\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  top_scores: vine.tuple([\n    vine.number(),\n    vine.number(),\n    vine.number(),\n  ])\n  .allowUnknownProperties()\n})\n\nconst data = {\n  top_scores: [\n    98,\n    96,\n    92,\n    88,\n    84\n  ]\n}\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n\n/*\nconst data = {\n  topScores: [\n    98,\n    96,\n    92,\n    88,\n    84\n  ]\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Tuple Validation in VineJS\nDESCRIPTION: Shows how to set a custom error message for the tuple validation rule by configuring the messagesProvider. This allows for more user-friendly error messages when validation fails.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/tuple.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  tuple: 'The {{ field }} field must be an array'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Defining a Schema with Literal Type in VineJS\nDESCRIPTION: Demonstrates how to create a schema with a literal value validation. This example validates that the 'is_hiring_guide' field must be exactly true.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/literal.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  is_hiring_guide: vine.literal(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Nullable Enum in VineJS\nDESCRIPTION: Shows how to make an enum field nullable using the nullable() modifier. This allows the field to accept null values in addition to the pre-defined list.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/enum.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  role: vine\n    .enum(['admin', 'moderator', 'owner', 'user'])\n    .nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Length Validation in VineJS\nDESCRIPTION: Enforces a fixed length for string values like PAN numbers or codes.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  pan_number: vine\n    .string()\n    .fixedLength(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages for Accepted Type\nDESCRIPTION: Shows how to define custom error messages for the accepted validation rule using a SimpleMessagesProvider.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/accepted.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  accepted: 'The {{ field }} field must be accepted'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable Array in VineJS\nDESCRIPTION: Shows how to define an array that can accept null values using the nullable() modifier. This allows the 'categories' field to be either an array of numbers or null.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  categories: vine\n    .array(vine.number())\n    .nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Object Properties in VineJS Schemas\nDESCRIPTION: Demonstrates how to reuse properties from an existing object schema in a new schema using JavaScript spread syntax and getProperties() method.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst author = vine.object({\n  name: vine.string(),\n  email: vine.string().email()\n})\n\nconst commentSchema = vine\n  .object({\n    ...author.getProperties(),\n    body: vine.string(),\n  })\n\n/**\n {\n   name: string,\n   email: string,\n   body: string,\n }\n */\n```\n\n----------------------------------------\n\nTITLE: Validating Weekday Dates in VineJS\nDESCRIPTION: Uses the weekday validator to ensure a date falls on a weekday (Monday through Friday).\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  event_date: vine.date().weekday()\n})\n```\n\n----------------------------------------\n\nTITLE: Alpha Character Validation in VineJS\nDESCRIPTION: Restricts string values to alphabetic characters with optional inclusion of spaces, underscores, and dashes.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine\n    .string()\n    .alpha({\n      allowSpaces: false,\n      allowUnderscores: true,\n      allowDashes: true,\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with group.otherwise in VineJS\nDESCRIPTION: Shows how to use the otherwise method to report custom errors when no conditions in a VineJS object group are matched.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvine.group([\n  vine.group.if((data) => 'username' in data, {\n    username: vine.string()\n  }),\n  vine.group.if((data) => 'email' in data, {\n    email: vine.string().email()\n  })\n])\n.otherwise((field) => {\n  field.report(\n    'You must provide username or email to login',\n    'email_or_username',\n    field\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Credit Card Validation in VineJS\nDESCRIPTION: Uses a callback function to determine credit card validation options at runtime.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  credit_card: vine\n    .string()\n    .creditCard((field) => {\n      return {\n        provider: ['mastercard', 'amex', 'visa']\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Using isString Helper in VineJS\nDESCRIPTION: The isString helper checks if a value is a valid string and narrows down the type to string for TypeScript type checking.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isString(value) // value is 'string'\n```\n\n----------------------------------------\n\nTITLE: Using group.else as Fallback in VineJS Object Groups\nDESCRIPTION: Demonstrates how to define a fallback schema with vine.group.else when none of the if conditions match in a VineJS object group.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvine.group.else({\n  // fallback schema\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Reporter at Schema Level in VineJS (TypeScript)\nDESCRIPTION: Shows how to set a custom error reporter (JSONAPIErrorReporter) at the schema level in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/error_reporter.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst validator = vine.compile(\n  vine.object({})\n)\n\nvalidator.errorReporter = () => new JSONAPIErrorReporter()\n```\n\n----------------------------------------\n\nTITLE: Registering Messages Provider Globally in VineJS\nDESCRIPTION: Shows how to register a custom messages provider at the global level. This configuration applies the provider to all validation operations in the application.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Configure globally\nimport vine from '@vinejs/vine'\n\nvine.messagesProvider = new CustomMessageProvider()\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Date Values for Validation in VineJS\nDESCRIPTION: Implements a callback function to lazily compute the expected value for date comparison, ensuring the value is recalculated on each validation instead of being cached.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Lazily compute the expected value\nconst schema = vine.object({\n  enrollment_date: vine\n    .date()\n    // highlight-start\n    .afterOrEqual((field) => {\n      return dayjs().add(2, 'day').format('YYYY-MM-DD')\n    })\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Using isNumeric Helper in VineJS\nDESCRIPTION: The isNumeric helper checks if a value is a number or a string representation of a number, supporting both integers and decimal values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isNumeric(32) // true\nvine.helpers.isNumeric('32') // true\nvine.helpers.isNumeric('121.09') // true\nvine.helpers.isNumeric('49.00') // true\n```\n\n----------------------------------------\n\nTITLE: Defining Field Context Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the Field context object, listing all available properties and methods.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/field_context.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FieldContext = {\n  value: unknown\n  data: any\n  meta: Record<string, any>\n  wildCardPath: string\n  isValid: boolean\n  isDefined: boolean\n  getFieldPath(): string\n  mutate(newValue: any, field: FieldContext): void\n  report(\n    message: string,\n    rule: string,\n    field: FieldContext,\n    args?: Record<string, any>\n  ): void\n  parent: any\n  name: string | number\n  isArrayMember: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Field Names Substitution in VineJS\nDESCRIPTION: Demonstrates how to provide human-readable field names for error messages. This allows replacing the {{ field }} placeholder with more user-friendly field names in error messages.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine, { SimpleMessagesProvider } from '@vinejs/vine'\n\nconst messages = { \n  required: 'The {{ field }} field is required',\n}\n\n// highlight-start\nconst fields = {\n  first_name: 'first name',\n  last_name: 'last name',\n}\n// highlight-end\n\nvine.messagesProvider = new SimpleMessagesProvider(messages, fields)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Error Reporter During Validation in VineJS (TypeScript)\nDESCRIPTION: Illustrates how to use a custom error reporter (JSONAPIErrorReporter) during the validation call in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/error_reporter.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\nconst validator = vine.compile(\n  vine.object({})\n)\n\nvalidator.validate(data, {\n  errorReporter: () => new JSONAPIErrorReporter()\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Without Unknown Properties in VineJS\nDESCRIPTION: Shows the default behavior where VineJS ignores unknown properties during validation, only including known properties in the output.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Without unknown properties\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  username: vine.string(),\n  password: vine.string(),\n})\n\nconst data = {\n  username: 'virk',\n  password: 'secret',\n  rememberMe: true,\n  trackLogin: true,\n}\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n/**\n{\n  username: 'virk',\n  password: 'secret'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Camel Case in VineJS\nDESCRIPTION: Applies the toCamelCase mutation to convert a string to camel case format. Useful for ensuring consistent naming conventions in data.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  role: vine\n    .string()\n    .toCamelCase()\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Minimum Value Validation to Number in VineJS\nDESCRIPTION: Demonstrates how to set a minimum value for a number field using the min() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  age: vine.number().min(18)\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Vine Schema Builder with Money Method\nDESCRIPTION: Implementation that extends the Vine class to add a custom money() method. This includes the TypeScript type declaration to ensure proper type checking for the new method.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_schema_types.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine, { Vine } from '@vinejs/vine'\nimport { VineMoney } from './types/money.js'\n\nVine.macro('money', function () {\n  return new VineMoney()\n})\n\n/**\n * Informing TypeScript about the newly added method\n */\ndeclare module '@vinejs/vine' {\n  interface Vine {\n    money(): VineMoney\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FiscalHost Type with Discriminated Union in TypeScript\nDESCRIPTION: This snippet shows how to define a FiscalHost type using a discriminated union in TypeScript, where the 'type' property serves as the discriminant.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Just for visualization purposes. Not required by VineJS\n */\ntype FiscalHost = {\n  type: 'stripe',\n  account_id: string\n} | {\n  type: 'paypal',\n  email: string\n} | {\n  type: 'open_collective',\n  project_url: string\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic In List Validation in VineJS\nDESCRIPTION: Defines dynamic allowed values list using a callback function.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  state: vine.string().in(statesList()),\n  city: vine\n    .string()\n    .in((field) => {\n      return citiesList(field.parent.state)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Union Types in Record Validation with VineJS\nDESCRIPTION: Demonstrates how to create a record that accepts either hex codes or nested color scale objects\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = vine.string().hexCode()\n\nconst scale = vine.object({\n  '1': color.clone(),\n  '2': color.clone(),\n  '3': color.clone(),\n  '4': color.clone(),\n  '5': color.clone(),\n  '6': color.clone(),\n  '7': color.clone(),\n  '8': color.clone(),\n  '9': color.clone(),\n  '10': color.clone(),\n  '11': color.clone(),\n})\n\n{\n  colors: vine.record(\n    vine.unionOfTypes([color, scale])\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Date Field Equality in VineJS\nDESCRIPTION: Uses the sameAs validator to ensure two date fields have identical values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Example of sameAs\nconst schema = vine.object({\n  entry_date: vine.date(),\n  exit_date: vine.date().sameAs('entry_date')\n})\n```\n\n----------------------------------------\n\nTITLE: Optional and Nullable String Modifiers in VineJS\nDESCRIPTION: Shows how to mark string fields as nullable or optional using modifiers.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: vine.string().nullable()\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: vine.string().optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Available assertion methods for validator test factory\nDESCRIPTION: Lists all the available assertion methods for testing validation rules. These methods allow checking for success/failure status, output values, and error messages.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Assert the validation succeeded\n */\nvalidated.assertSucceeded()\n\n/**\n * Assert the value output after validation. You may\n * use this assertion if the rule mutates the field's\n * value.\n */\nvalidated.assertOutput(expectedOutput)\n\n/**\n * Assert the validation failed\n */\nvalidated.assertFailed()\n\n/**\n * Assert expected errors count\n */\nvalidated.assertErrorsCount(1)\n\n/**\n * Assert an error with the expected text is reported\n * during validation\n */\nvalidated.assertError('The email field is not unique')\n```\n\n----------------------------------------\n\nTITLE: Validating Mobile Numbers in VineJS\nDESCRIPTION: Validates that a string is a valid mobile phone number. This uses the validator.js library's isMobilePhone method for validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  contact_number: vine\n    .string()\n    .mobile()\n})\n```\n\n----------------------------------------\n\nTITLE: EndsWith String Validation in VineJS\nDESCRIPTION: Validates that a string ends with a specific substring.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  email: vine\n    .string()\n    .endsWith('client_app.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Schema Object in VineJS\nDESCRIPTION: Demonstrates how to create a simple validation schema using vine.object() method with a username field.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  username: vine.string()\n})\n```\n\n----------------------------------------\n\nTITLE: Using asNumber Helper in VineJS\nDESCRIPTION: The asNumber helper casts a value to a number using the Number method. It returns NaN when unable to cast a value to a number.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.asNumber('32') // 32\nvine.helpers.asNumber('32.12') // 32.12\nvine.helpers.asNumber('32.00') // 32\nvine.helpers.asNumber('foo') // NaN\n```\n\n----------------------------------------\n\nTITLE: Installing VineJS with yarn\nDESCRIPTION: Command to install VineJS via yarn package manager. VineJS is an ESM-only package and doesn't work with CommonJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n// title: yarn\nyarn add @vinejs/vine\n```\n\n----------------------------------------\n\nTITLE: IP Address Validation in VineJS\nDESCRIPTION: Validates that a string is a valid IP address with optional version constraint.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  ip: vine\n    .string()\n    .ipAddress({ version: 4 })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Optional Modifier with Literal Type in VineJS\nDESCRIPTION: Shows how to make a literal field optional, allowing it to be undefined while still validating the expected value when present.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/literal.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  is_hiring_guide: vine.literal(true).optional()\n}\n```\n\n----------------------------------------\n\nTITLE: StartsWith String Validation in VineJS\nDESCRIPTION: Validates that a string starts with a specific substring.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  email: vine\n    .string()\n    .startsWith('+91')\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Key Validation for Records in VineJS\nDESCRIPTION: Shows how to implement custom validation for record keys using the validateKeys method\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: vine\n    .record(vine.string().hexCode())\n    .validateKeys((keys, field) => {\n      const nonNumericKey = keys.find((key) => !vine.helpers.isNumber(key))\n\n      if (!!nonNumericKey) {\n        field.report(\n          'Color scale must be a valid number', // message\n          'record.keys.number', // error id\n          field\n        )\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Messages Provider at Schema Level in VineJS\nDESCRIPTION: Demonstrates how to register a custom messages provider at the schema level, making it specific to a particular validation schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Per schema level\nimport vine from '@vinejs/vine'\n\nconst validator = vine.compile(\n  vine.object({})\n)\n\nvalidator.messagesProvider = new CustomMessageProvider()\n```\n\n----------------------------------------\n\nTITLE: Validating LoginForm and Handling Results in TypeScript\nDESCRIPTION: This snippet demonstrates how to validate the LoginForm and handle the results based on whether an email or phone number was provided.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/union.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst validator = vine.compile(loginForm)\nconst payload = await validator.validate(data)\n\nif ('email' in payload) {\n  // search using email\n} else {\n  // search using phone number\n}\n```\n\n----------------------------------------\n\nTITLE: Using the VineMoney Schema Class Directly\nDESCRIPTION: Example showing how to use the custom VineMoney schema class in a validation schema. The schema defines a product_id field as a string and an amount field using the custom Money type.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_schema_types.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\nimport { VineMoney } from './types/money.js'\n\nconst schema = vine.object({\n  product_id: vine.string(),\n  amount: new VineMoney(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bail Mode in VineJS\nDESCRIPTION: Shows how to turn off the default bail mode for a specific field in the schema to continue validation even after a failure.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  email: vine.string().email().use(\n    unique({ table: 'users', column: 'email' })\n  )\n  .bail(false)\n})\n```\n\n----------------------------------------\n\nTITLE: Marking a rule as asynchronous in VineJS\nDESCRIPTION: Demonstrates how to explicitly mark a rule as asynchronous when not using the async keyword. This ensures VineJS correctly awaits the rule's execution.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const uniqueRule = vine.createRule(unique, {\n  implicit: true,\n  async: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Date After Constraint in VineJS\nDESCRIPTION: Uses the after validator to ensure a date comes after either today or a specific fixed date.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Example of after\nconst schema = vine.object({\n  checkin_date: vine\n    .date()\n    .after('today')\n})\n\nconst schema = vine.object({\n  checkin_date: vine\n    .date()\n    .after('2024-01-01')\n})\n```\n\n----------------------------------------\n\nTITLE: Using asBoolean Helper in VineJS\nDESCRIPTION: The asBoolean helper casts a value to a boolean with specific truthy and falsy value support. It returns null for values that don't match any of the defined boolean representations.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.asBoolean('true') // true\nvine.helpers.asBoolean('on') // true\nvine.helpers.asBoolean('false') // false\nvine.helpers.asBoolean('foo') // null\n\nconst output = vine.helpers.asBoolean(value)\nif (output !== null) {\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode for Number Validation in VineJS\nDESCRIPTION: Shows how to enable strict mode for number validation, which disallows string representations of numbers.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  age: vine\n    .number({ strict: true })\n    .withoutDecimals()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Object Validation in VineJS\nDESCRIPTION: Demonstrates how to make an object field optional in a VineJS validation schema, allowing the field to be undefined.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: vine.object({\n    twitter_handle: vine.string(),\n    github_username: vine.string(),\n  })\n  .optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Date Formats in VineJS\nDESCRIPTION: Customizes the acceptable date formats for validation using Day.js format tokens. This example accepts dates in YYYY/DD/MM format and Unix timestamps.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  published_at: vine.date({\n    formats: ['YYYY/DD/MM', 'x']\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using isObject Helper in VineJS\nDESCRIPTION: The isObject helper checks if a value is a plain JavaScript object, excluding null and Arrays. It can be used with generic types to specify the expected property value types.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isObject(value) // value is Record<string, unknown>\n\nvine.helpers.isObject<number>(value) // value is Record<string, number>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Format for Expected Date Value in VineJS\nDESCRIPTION: Defines a custom format for the expected date value in comparison operations, allowing validation against dates in non-standard formats.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvine\n  .date()\n  .equals('2024/28/01', {\n    format: 'YYYY/DD/MM',\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Nullable Boolean Field\nDESCRIPTION: Makes a boolean field nullable, allowing it to accept null values alongside boolean values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/boolean.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  is_admin: vine.boolean().nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Enumeration Validation to Number in VineJS\nDESCRIPTION: Demonstrates how to restrict a number field to a set of predefined values using the in() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  price: vine.number().in([1, 2, 4, 8])\n})\n```\n\n----------------------------------------\n\nTITLE: Declaration merging for TypeScript support of custom methods\nDESCRIPTION: Uses TypeScript's declaration merging to inform the type system about the newly added 'unique' method on VineString. This provides proper type checking and IntelliSense support for the custom method.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VineString } from '@vinejs/vine'\nimport { uniqueRule, Options } from './rules/unique.js'\n\ndeclare module '@vinejs/vine' {\n  interface VineString {\n    unique(options: Options): this\n  }\n}\n\nVineString.macro('unique', function (this: VineString, options: Options) {\n  return this.use(uniqueRule(options))\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode for Boolean Validation\nDESCRIPTION: Configures a boolean field to use strict mode, which only accepts JavaScript boolean values and disallows string representations.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/boolean.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  is_admin: vine.boolean({ strict: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Negative Number Validation in VineJS\nDESCRIPTION: Shows how to ensure a number field is negative using the negative() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  freezing_tempature: vine\n    .number()\n    .negative()\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Not In List Validation in VineJS\nDESCRIPTION: Defines dynamic disallowed values list using a callback function.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine\n    .string()\n    .notIn(() => {\n      return ['admin', 'root', 'superuser']\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Using a custom rule in a VineJS schema\nDESCRIPTION: Shows how to apply a custom validation rule within a schema. The unique rule is applied to a string field with specific table and column options to validate uniqueness.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\nimport { uniqueRule } from './rules/unique.js'\n\nconst schema = vine.object({\n  email: vine\n    .string()\n    .use(\n      uniqueRule({ table: 'users', column: 'email' })\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Executing a chain of validations in tests\nDESCRIPTION: Shows how to test a sequence of validation rules by passing an array of validations to executeAsync. This allows testing how rules interact with each other in a chain.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VineString } from '@vinejs/vine'\nimport { uniqueRule } from '../src/rules/unique.js'\n\nconst email = VineString.rules.email()\nconst unique = uniqueRule({ table: 'users', column: 'email' })\n\nconst validated = await validator.executeAsync([\n  email,\n  unique,\n], value)\n```\n\n----------------------------------------\n\nTITLE: Disallowing Decimal Places in Number Validation with VineJS\nDESCRIPTION: Shows how to disallow decimal places for a number field using the withoutDecimals() method in VineJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  age: vine.number().withoutDecimals()\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating getFieldPath() Usage in VineJS Schema\nDESCRIPTION: This example illustrates the difference between getFieldPath() and wildCardPath when working with arrays in a VineJS schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/field_context.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Given the following schema\nconst schema = vine.object({\n  contacts: vine.array(\n    vine.object({\n      email: vine.string()\n    })\n  )\n})\n\n/**\n * The return value of \"getFieldPath\" will be\n * - \"contacts.0.email\"\n * - \"contacts.1.email\"\n * - and so on\n */\n\n/**\n * The value of \"wildCardPath\" will be\n * - \"contacts.*.email\"\n */\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from Strings in VineJS\nDESCRIPTION: Applies the trim mutation to remove whitespace from the beginning and end of a string value. Can be chained with other validation methods.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  email: vine.string().trim().email()\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase in VineJS\nDESCRIPTION: Applies the toUpperCase mutation to convert all characters in a string to uppercase. Useful for standardizing data like role names or codes.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  role: vine\n    .string()\n    .toUpperCase()\n})\n```\n\n----------------------------------------\n\nTITLE: Minimum Length Validation in VineJS\nDESCRIPTION: Enforces a minimum length constraint on string values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  password: vine\n    .string()\n    .minLength(8)\n})\n```\n\n----------------------------------------\n\nTITLE: ULID Validation in VineJS\nDESCRIPTION: Validates that a string is a valid ULID according to the canonical specs.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  id: vine\n    .string()\n    .ulid()\n})\n```\n\n----------------------------------------\n\nTITLE: Using the extended schema class with custom method\nDESCRIPTION: Shows how to use the newly added 'unique' method on VineString. This chainable API approach is more concise and readable than using the 'use' method with the raw uniqueRule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  email: vine\n    .string()\n    .unique({\n      table: 'users',\n      column: 'email'\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML in Strings with VineJS\nDESCRIPTION: Applies the escape mutation to convert HTML special characters to their entity equivalents. Helps prevent XSS attacks when using user input in HTML contexts.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  about: vine.string().escape()\n})\n```\n\n----------------------------------------\n\nTITLE: Maximum Length Validation in VineJS\nDESCRIPTION: Enforces a maximum length constraint on string values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  password: vine\n    .string()\n    .maxLength(32)\n})\n```\n\n----------------------------------------\n\nTITLE: Targeting Nested Fields with SimpleMessagesProvider\nDESCRIPTION: Shows how to define custom error messages for nested fields using dot notation in the keys. This example targets a deeply nested 'twitter' field within a profile object.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  profile: vine.object({\n    social: vine.object({\n      twitter: vine.string()\n    })\n  })\n})\n\nconst messages = {\n  'profile.social.twitter.required': 'Twitter handle is required.'\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Extended Vine Schema Builder\nDESCRIPTION: Example showing how to use the extended Vine schema builder with the custom money() method in a validation schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_schema_types.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  product_id: vine.string(),\n  amount: vine.money(),\n})\n```\n\n----------------------------------------\n\nTITLE: Making Date Fields Optional in VineJS\nDESCRIPTION: Allows a date field to be omitted from input, making it undefined, while still validating provided values as proper dates.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_at: vine.date().optional()\n}\n```\n\n----------------------------------------\n\nTITLE: IBAN Validation in VineJS\nDESCRIPTION: Validates that a string is a valid International Bank Account Number.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  iban: vine.string().iban()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Messages Provider During Validation in VineJS\nDESCRIPTION: Shows how to register a custom messages provider during the validation call, allowing for one-time use of a specific provider for a validation operation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/custom_error_messages.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: During validation call\nimport vine from '@vinejs/vine'\nconst validator = vine.compile(\n  vine.object({})\n)\n\nvalidator.validate(data, {\n  messagesProvider: new CustomMessageProvider()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Array in VineJS\nDESCRIPTION: Demonstrates how to define an optional array field using the optional() modifier. The 'categories' field can be an array of numbers or undefined/omitted.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/array.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  categories: vine\n    .array(vine.number())\n    .optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Record Type in VineJS\nDESCRIPTION: Example of making a record type optional using the optional modifier\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: vine.record(\n    vine.string().hexCode()\n  ).optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Accepted Type in VineJS\nDESCRIPTION: Shows how to make an accepted field nullable, allowing null values to pass validation.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/accepted.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  terms: vine.accepted().nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nullable Modifier to Number Schema in VineJS\nDESCRIPTION: Shows how to make a number field nullable in a VineJS schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/number.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  age: vine.number().withoutDecimals().nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Any Type Schema in VineJS TypeScript\nDESCRIPTION: Demonstrates how to create a basic validation schema using the any() method to accept any value type without validation\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/any.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  secret_message: vine.any()\n})\n```\n\n----------------------------------------\n\nTITLE: Nullable Record Type in VineJS\nDESCRIPTION: Example of making a record type nullable using the nullable modifier\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/record.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: vine.record(\n    vine.string().hexCode()\n  ).nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Any Type in VineJS TypeScript\nDESCRIPTION: Demonstrates how to create a validation schema that accepts any value or undefined using the optional() modifier\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/any.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  secret_message: vine.any().optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Date Equality in VineJS\nDESCRIPTION: Uses the equals validator to ensure a date matches a specific expected date value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Example of equals\nconst schema = vine.object({\n  enrollment_date: vine\n    .date()\n    .equals('2024-01-28')\n})\n```\n\n----------------------------------------\n\nTITLE: Using isTrue Helper in VineJS\nDESCRIPTION: The isTrue helper returns true when the value is one of: true, 1, \"1\", \"true\", or \"on\". This is particularly useful for handling boolean values from HTML form submissions.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isTrue(true) // true\nvine.helpers.isTrue(1) // true\nvine.helpers.isTrue(\"1\") // true\nvine.helpers.isTrue(\"true\") // true\nvine.helpers.isTrue(\"on\") // true\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Literal Type in VineJS\nDESCRIPTION: Demonstrates how to configure custom error messages for the literal validation rule using the SimpleMessagesProvider. The message can reference the field name and expected value.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/literal.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  literal: 'The {{ field }} field must be {{ expectedValue }}'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Comparison Units in VineJS\nDESCRIPTION: Specifies the granularity level for date comparisons by setting the compare option to 'month', which compares only month and year parts of the dates.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvine\n  .date()\n  .equals('2024-01-28', {\n    compare: 'month', // compares month and the year\n  })\n```\n\n----------------------------------------\n\nTITLE: Validating Weekend Dates in VineJS\nDESCRIPTION: Uses the weekend validator to ensure a date falls on a weekend (Saturday or Sunday).\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/date.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  checkin_date: vine.date().weekend()\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Options to Validator\nDESCRIPTION: Passing custom messagesProvider, errorReporter, and meta data to the validator.validate method. These options customize the validation process and error handling.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst validator = vine.compile(schema)\nconst output = await validator.validate(data, {\n  messagesProvider,\n  errorReporter,\n  meta: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Modifier with Literal Type in VineJS\nDESCRIPTION: Shows how to make a literal field nullable, allowing it to accept null values while still validating the expected value when present.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/literal.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  is_hiring_guide: vine.literal(true).nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Using hasDecimals Helper in VineJS\nDESCRIPTION: The hasDecimals helper checks if a number value has a fixed or a range of decimal places. It accepts a number data type for the value input and an array specifying fixed or range decimal places.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.hasDecimals(32.12, [0, 2]) // true\nvine.helpers.hasDecimals(32, [0, 2]) // true\nvine.helpers.hasDecimals(32, [2]) // false\nvine.helpers.hasDecimals(32.101, [2]) // false\n```\n\n----------------------------------------\n\nTITLE: VineJS Schema Without camelCase Conversion (TypeScript)\nDESCRIPTION: Shows a VineJS schema definition and validation without using the toCamelCase modifier. The object keys remain in snake_case in the output.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  first_name: vine.string(),\n  last_name: vine.string(),\n  referral_code: vine.string().optional()\n})\n\nconst validate = vine.compile(schema)\n\nconst {\n first_name,\n last_name,\n referral_code\n} = await validate({ data })\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase in VineJS\nDESCRIPTION: Applies the toLowerCase mutation to convert all characters in a string to lowercase. Often used to normalize usernames, emails, and other identifiers.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nvine.object({\n  username: vine\n    .string()\n    .toLowerCase()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Optional Boolean Field\nDESCRIPTION: Makes a boolean field optional, allowing it to be undefined in the input data.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/boolean.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  is_admin: vine.boolean().optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Using isArray Helper in VineJS\nDESCRIPTION: The isArray helper checks if a value is an Array. It can be used with generic types to specify the expected array element types.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isArray(value) // value is unknown[]\nvine.helpers.isArray<string>(value) // value is string[]\n```\n\n----------------------------------------\n\nTITLE: Validating a Tuple Without Unknown Properties in VineJS\nDESCRIPTION: Creates a validation schema for top_scores tuple that accepts exactly three numbers. By default, any additional elements beyond the defined schema are stripped from the output.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/tuple.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Without unknown properties\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  top_scores: vine.tuple([\n    vine.number(),\n    vine.number(),\n    vine.number(),\n  ])\n})\n\nconst data = {\n  top_scores: [\n    98,\n    96,\n    92,\n    88,\n    84\n  ]\n}\n\nconst validate = vine.compile(schema)\nconst output = await validate(data)\n\n/*\nconst data = {\n  topScores: [\n    98,\n    96,\n    92,\n  ]\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Optional Enum in VineJS\nDESCRIPTION: Demonstrates how to make an enum field optional using the optional() modifier. This allows the field to be undefined or one of the pre-defined values.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/enum.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  role: vine\n    .enum(['admin', 'moderator', 'owner', 'user'])\n    .optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Accepted Type in VineJS\nDESCRIPTION: Demonstrates making an accepted field optional, allowing the field to be undefined.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/accepted.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  terms: vine.accepted().optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing failed validation with assertions\nDESCRIPTION: Demonstrates how to test that a custom rule correctly fails validation and reports the expected error message. Uses withContext to provide field name for error formatting.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = 'foo@example.com'\nconst unique = uniqueRule({ table: 'users', column: 'email' })\n\nconst validated = await validator\n  .withContext({\n    fieldName: 'email'\n  })\n  .executeAsync(unique, value)\n\nvalidated.assertErrorsCount(1)\nvalidated.assertError('The email field is not unique')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Object Validation in VineJS\nDESCRIPTION: Shows how to define a custom error message for object validation by configuring the messagesProvider with a specific message for the 'object' rule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  object: 'The {{ field }} field must be an object'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Testing custom rules with the validator test factory\nDESCRIPTION: Shows how to test custom validation rules using the validator test factory. This example tests a successful validation of the unique rule.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validator } from '@vinejs/vine/factories'\nimport { uniqueRule } from '../src/rules/unique.js'\n\nconst value = 'foo@bar.com'\nconst unique = uniqueRule({ table: 'users', column: 'email' })\n\nconst validated = await validator.executeAsync(unique, value)\n\n/**\n * Assert the validation succeeded.\n */\nvalidated.assertSucceeded()\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Static Types in VineJS\nDESCRIPTION: Shows how to define static types for metadata using vine.withMetaData() method to enforce type checking when using the validator.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/schema_101.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreditCardOptions } from '@vinejs/vine/types'\n\ntype PurchaseValidatorMetaData = {\n  ccProviders: CreditCardOptions['provider']\n}\n\nconst purchaseValidator = vine\n  .withMetaData<PurchaseValidatorMetaData>()\n  .compile(\n    vine.object({\n      credit_card: vine\n        .string()\n        .creditCard((field) => {\n          return {\n            provider: field.meta.ccProviders\n          }\n        })\n    })\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining custom field context for validation tests\nDESCRIPTION: Demonstrates how to provide a custom field context for testing validation rules. The context includes field name and wildcard path information used in error messages.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait validator\n  .withContext({\n    fieldName: 'email',\n    wildCardPath: 'profile.email'\n  })\n  .executeAsync(unique, value)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Boolean Validation\nDESCRIPTION: Sets up custom error messages for boolean validation using a SimpleMessagesProvider.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/boolean.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = {\n  boolean: 'The value must be a boolean'\n}\n\nvine.messagesProvider = new SimpleMessagesProvider(messages)\n```\n\n----------------------------------------\n\nTITLE: Installing VineJS with pnpm\nDESCRIPTION: Command to install VineJS via pnpm package manager. VineJS is an ESM-only package and doesn't work with CommonJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n// title: pnpm\npnpm add @vinejs/vine\n```\n\n----------------------------------------\n\nTITLE: Creating an Optional Tuple Schema in VineJS\nDESCRIPTION: Defines a tuple that is optional using the optional() modifier. This allows the field to be either undefined or a valid tuple matching the schema.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/tuple.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  coordinates: vine.tuple([\n    vine.number(),\n    vine.number(),\n  ])\n  .optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling bail mode for validation tests\nDESCRIPTION: Shows how to disable the bail mode for testing validation rules. This allows testing how rules behave when validation continues after earlier rules have failed.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/extend/custom_rules.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait validator\n  .bail(false)\n  .executeAsync(unique, value)\n```\n\n----------------------------------------\n\nTITLE: Using isFalse Helper in VineJS\nDESCRIPTION: The isFalse helper returns true when the value is one of: false, 0, \"0\", or \"false\". This complements the isTrue helper for handling boolean values from form submissions.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/helpers.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvine.helpers.isFalse(false) // true\nvine.helpers.isFalse(0) // true\nvine.helpers.isFalse(\"0\") // true\nvine.helpers.isFalse(\"false\") // true\n```\n\n----------------------------------------\n\nTITLE: Installing VineJS with npm\nDESCRIPTION: Command to install VineJS via npm package manager. VineJS is an ESM-only package and doesn't work with CommonJS.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/guides/getting_started.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// title: npm\nnpm i @vinejs/vine\n```\n\n----------------------------------------\n\nTITLE: Type Visualization for Object Groups in VineJS\nDESCRIPTION: Shows a TypeScript type definition to visualize the expected structure for an object with conditional properties based on a boolean flag.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/object.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Just for visualization purposes. Not required by VineJS\n */\ntype VisitorDetails = {\n  name: string\n  group_size: number\n  phone_number: string\n} & ({\n  is_hiring_guide: true,\n  guide_id: string,\n  amount: number,\n} | {\n  is_hiring_guide: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Confirmation Field in VineJS\nDESCRIPTION: Specifies a custom confirmation field name instead of using the default suffix.\nSOURCE: https://github.com/vinejs/vinejs.dev/blob/main/content/docs/types/string.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  password: vine\n    .string()\n    .confirmed({\n      confirmationField: 'passwordConfirmation'\n    })\n})\n```"
  }
]