[
  {
    "owner": "excaliburjs",
    "repo": "excalibur",
    "content": "TITLE: Initializing Excalibur Engine - TypeScript\nDESCRIPTION: Complete engine setup with configuration for display size, pixel art settings, background color, and display mode. Includes initialization of the game engine with specific pixel ratios and display settings.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/01-step-start-engine.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport * as ex from 'excalibur';\n\nconst game = new ex.Engine({\n  width: 400,\n  height: 500,\n  backgroundColor: ex.Color.fromHex(\"#54C0CA\"),\n  pixelArt: true,\n  pixelRatio: 2,\n  displayMode: ex.DisplayMode.FitScreen\n});\n\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Creating an Excalibur Engine Instance\nDESCRIPTION: Initializes the Excalibur game engine with a specified width and height. The engine is the main container that manages the game loop, scenes, and rendering.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create an instance of the engine.\n// I'm specifying that the game be 800 pixels wide by 600 pixels tall.\n// If no dimensions are specified the game will fit to the screen.\nconst game = new Engine({\n  width: 800,\n  height: 600,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting an Excalibur Game Instance\nDESCRIPTION: Demonstrates how to create a new Excalibur game instance with configuration options and start the game. It shows setting up the canvas size, display mode, and pointer scope.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  width: 800, // the width of the canvas\n  height: 600, // the height of the canvas\n  canvasElementId: '', // the DOM canvas element ID, if you are providing your own\n  displayMode: ex.DisplayMode.FitScreen, // the display mode\n  pointerScope: ex.PointerScope.Document // the scope of capturing pointer (mouse/touch) events\n});\n// call game.start, which is a Promise\ngame.start().then(function () {\n  // ready, set, go!\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Loader by Extending DefaultLoader in TypeScript\nDESCRIPTION: Shows how to create a custom loader by extending the DefaultLoader class. It demonstrates override points for update, draw, user action handling, and loader lifecycle methods.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/06-loaders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// my-loader.ts\nimport * as ex from 'excalibur';\n\nexport class MyLoader extends ex.DefaultLoader {\n\n  override onUpdate(engine: Engine, elapsedMilliseconds: number): void {\n    // Perform something every tick, for example collect time elapsed or check \n    // what file names have been loaded for drawing!\n  }\n\n  override onDraw(ctx: CanvasRenderingContext2D) {\n    // Returns the progress of the loader as a number between [0, 1] inclusive.\n    console.log(this.progress);\n  }\n\n  override async onUserAction(): Promise<void> {\n    // Return a promise that resolves when the user interacts with the loading screen in some way,\n    // usually a click.\n    //\n    // It's important to implement this in order to unlock the audio context in the browser.\n    // Browsers automatically prevent audio from playing until the user performs an action.\n     \n  }\n\n  override async onBeforeLoad(): Promise<void> {\n    // Overrideable lifecycle method, called directly before loading starts\n    // Useful if you need to do anything to the screen/viewport\n  }\n\n  override async onAfterLoad(): Promise<void> {\n    // Overrideable lifecycle method, called after loading has completed\n    // Useful if you need to do anything to the screen/viewport\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Draw Method in Excalibur Actor\nDESCRIPTION: Demonstrates how to implement the onPostDraw method in an Excalibur Actor. This method runs after the core draw logic and is recommended for customizing the current frame's drawing.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  constructor(config?: ex.ActorArgs) {\n    super(config);\n\n    /**\n     * ADVANCED: This is run after the core draw logic.\n     */\n    this.graphics.onPostDraw = (ctx: ex.ExcaliburGraphicsContext, delta: number) => {\n      // custom drawing\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur via NPM\nDESCRIPTION: Command to install the latest version of Excalibur using NPM package manager\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install excalibur@latest`\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Depleted Event in Excalibur\nDESCRIPTION: This snippet demonstrates how to create a custom health depleted event for a Player class in Excalibur. It shows the pattern of defining event types, creating an event class, and using constants for event names to avoid magic strings. The Player emits the event when health reaches zero.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PlayerEvents = {\n  healthdepleted: PlayerHealthDepletedEvent;\n}\n\nexport class PlayerHealthDepletedEvent extends ex.GameEvent<Player> {\n  constructor(public target: Player) {\n    super();\n  }\n}\n\nexport const PlayerEvents = {\n  Healthdepleted: 'healthdepleted'\n} as const;\n\nexport class Player extends ex.Actor {\n  public events = new ex.EventEmitter<ex.ActorEvents & PlayerEvents>();\n  private health: number = 100;\n\n  public onPostUpdate() {\n    if (this.health <= 0) {\n      this.events.emit(PlayerEvents.Healthdepleted, new PlayerHealthDepletedEvent(this));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Actor in Excalibur\nDESCRIPTION: Demonstrates how to create a simple actor and add it to the game scene. The actor is positioned at (100, 100) with a width and height of 20 pixels, and a red color.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  x: 100,\n  y: 100,\n  width: 20,\n  height: 20,\n  color: ex.Color.Red\n});\n\ngame.add(actor);\n```\n\n----------------------------------------\n\nTITLE: Implementing Level Scene with Game Over Logic in TypeScript\nDESCRIPTION: Extends the Level scene class to handle game over mechanics, including start instructions display, game reset, and state management. Implements methods for showing start instructions, resetting game state, and triggering game over when necessary.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/10-step-game-over.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Level extends ex.Scene {\n    startGameLabel = new ex.Label({\n        text: 'Tap to Start',\n        x: 200,\n        y: 200,\n        z: 2,\n        font: new ex.Font({\n            size: 30,\n            color: ex.Color.White,\n            textAlign: ex.TextAlign.Center\n        })\n    });\n\n    override onInitialize(engine: ex.Engine): void {\n        //this.pipeFactory.start();\n        this.showStartInstructions();\n    }\n\n    showStartInstructions() {\n        this.startGameLabel.graphics.isVisible = true;\n        this.engine.input.pointers.once('down', () => {\n            this.reset();\n\n            this.startGameLabel.graphics.isVisible = false;\n            this.bird.start();\n            this.pipeFactory.start();\n            this.ground.start();\n        });\n    }\n\n    reset() {\n        this.bird.reset();\n        this.pipeFactory.reset();\n        this.score = 0;\n        this.scoreLabel.text = `Score: ${this.score}`;\n    }\n\n    triggerGameOver() {\n        this.pipeFactory.stop();\n        this.bird.stop();\n        this.ground.stop();\n        this.showStartInstructions();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Custom Actor in Excalibur\nDESCRIPTION: Demonstrates how to override the update method in a custom actor class. It's important to call super.update() to preserve Excalibur's core update implementation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  public update(engine: ex.Engine, delta: number) {\n    // Custom update here\n    super.update(engine, delta);\n    // Custom update here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Collision Group Implementation Example\nDESCRIPTION: Comprehensive example showing how to implement collision groups for multiple game objects including players, NPCs, enemies, and floor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-groups.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst playerGroup = ex.CollisionGroupManager.create('player')\nconst npcGroup = ex.CollisionGroupManager.create('npcGroup')\nconst floorGroup = ex.CollisionGroupManager.create('floorGroup')\nconst enemyGroup = ex.CollisionGroupManager.create('enemyGroup')\n\nconst playersCanCollideWith = ex.CollisionGroup.collidesWith([\n  playersGroup,\n  floorGroup,\n  enemyGroup,\n])\n\nconst enemiesCanCollideWith = ex.CollisionGroup.collidesWith([\n  playerGroup,\n  floorGroup,\n])\n\nconst npcGroupCanCollideWith = ex.CollisionGroup.collidesWith([\n  floorGroup,\n])\n\nconst player = new ex.Actor({\n  collisionGroup: playersCanCollideWith,\n})\n\nconst npc = new ex.Actor({\n  collisionGroup: npcGroupCanCollideWith,\n})\n\nconst enemy = new ex.Actor({\n  collisionGroup: enemiesCanCollideWith,\n})\n\nconst floor = new ex.Actor({\n  pos: ex.vec(100, 400),\n  width: 100,\n  height: 20,\n  collisionType: ex.CollisionType.Fixed,\n  collisionGroup: floorGroup,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bird Flight Controls with Keyboard and Pointer Input in TypeScript\nDESCRIPTION: This code extends the Bird class to handle user input for jumping. It detects spacebar presses or screen taps, applies an upward velocity, limits velocity to reasonable bounds, and adjusts the bird's rotation based on its movement speed. The jumping state is tracked to prevent continuous acceleration while input is held.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/04-step-flying-bird.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\nimport * as ex from 'excalibur';\n\nexport class Bird extends ex.Actor {\n\n    ...\n\n    jumping = false;\n\n    private isInputActive(engine: ex.Engine) {\n        // if the space bar or the first pointer was down\n        return (engine.input.keyboard.isHeld(ex.Keys.Space) ||\n                engine.input.pointers.isDown(0))\n    }\n\n    override onPostUpdate(engine: ex.Engine): void {\n        if (!this.jumping && this.isInputActive(engine)) {\n            this.vel.y += -800; // negative is UP\n            this.jumping = true;\n        }\n\n        if (!this.isInputActive(engine)) {\n            this.jumping = false;\n        }\n\n        // keep velocity from getting too big\n        this.vel.y = ex.clamp(this.vel.y, -500, 500);\n\n        // The \"speed\" the bird will move relative to pipes\n        this.rotation = ex.vec(200, this.vel.y).toAngle();\n    }\n\n    ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Centralized Resources Module in Excalibur\nDESCRIPTION: Demonstrates a recommended pattern for organizing game resources in a separate module. This approach provides strongly-typed access to resources and keeps the main entry point clean.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/06-loaders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// resources.ts\nimport * as ex from 'excalibur';\n\nexport const Resources = {\n    TitleImage: new ex.ImageSource('./path/to/some/image.png'),\n    KnightSpriteSheet: new ex.ImageSource('./path/to/some/other/image.png'),\n    TitleMusic: new ex.Sound('.path/to/first-preference.wav', '.path/to/second-preference.wav'),\n} as const; // < -- as const is important to get strong typing!\n\nexport const loader = new ex.Loader();\n\nfor (let res of Object.values(Resources)) {\n    loader.addResource(res);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ball Boundary Collision in Excalibur\nDESCRIPTION: Handles ball collisions with the screen boundaries by using the postupdate event. When the ball hits a boundary, its velocity is reversed to create a bouncing effect.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Wire up to the postupdate event\nball.on(\"postupdate\", () => {\n  // If the ball collides with the left side\n  // of the screen reverse the x velocity\n  if (ball.pos.x < ball.width / 2) {\n    ball.vel.x = ballSpeed.x;\n  }\n\n  // If the ball collides with the right side\n  // of the screen reverse the x velocity\n  if (ball.pos.x + ball.width / 2 > game.drawWidth) {\n    ball.vel.x = ballSpeed.x * -1;\n  }\n\n  // If the ball collides with the top\n  // of the screen reverse the y velocity\n  if (ball.pos.y < ball.height / 2) {\n    ball.vel.y = ballSpeed.y;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Static Scene Collection Configuration\nDESCRIPTION: Example of configuring multiple scenes during engine initialization with custom transitions and loaders.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new Engine({\n  width: 800,\n  height: 600,\n  scenes: {\n    startScreen: StartScreen,\n    levelSelect: LevelSelect,\n    tutorial: Tutorial,\n    introLevel: new Level(Config.startingPuzzle),\n    endScreen: EndScreen,\n    sceneWithCustomTransitionAndLoader: {\n      scene: scene2,\n      loader: MyLoader,\n      transitions: {\n        out: new ex.FadeInOut({ duration: 500, direction: 'out' }),\n        in: new ex.CrossFade({ duration: 2500, direction: 'in', blockInput: true })\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Actor Class in Excalibur\nDESCRIPTION: Shows how to create a custom actor class 'ShootemUpPlayer' that extends the base Actor class. It includes properties for health and ammo, and a shoot method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShootemUpPlayer extends ex.Actor {\n  public health: number = 100;\n  public ammo: number = 20;\n\n  constructor() {\n    super({ x: 10, y: 10 });\n  }\n\n  shoot() {\n    if (this.ammo < 1) {\n      return;\n    }\n\n    this.ammo -= 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Excalibur\nDESCRIPTION: Demonstrates how to handle events in Excalibur, including actor events and custom events. It shows subscribing to events, unsubscribing, and emitting custom events.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvar player = new ex.Actor(...);\n\n// Enable pointer events for this actor\nplayer.enableCapturePointer = true;\n// subscribe to pointerdown event\nplayer.on(\"pointerdown\", function (evt: ex.PointerEvent) {\n  console.log(\"Player was clicked!\");\n});\n// turn off subscription\nplayer.off(\"pointerdown\");\n// subscribe to custom event\nplayer.on(\"death\", function (evt) {\n  console.log(\"Player died:\", evt);\n});\n// trigger custom event\nplayer.emit(\"death\", new DeathEvent());\n```\n\n----------------------------------------\n\nTITLE: Creating Pipe Class in TypeScript with Excalibur.js\nDESCRIPTION: Defines a Pipe class that extends Excalibur Actor to create moving pipe obstacles. The pipes can be positioned at top or bottom of screen, moving left at 200 pixels per second and self-destroying when off-screen.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/05-step-plumbing-pipes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// pipe.ts\nimport * as ex from 'excalibur';\n\nexport class Pipe extends ex.Actor {\n    constructor(pos: ex.Vector, public type: 'top' | 'bottom') {\n        super({\n            pos,\n            width: 32,\n            height: 1000,\n            anchor: type === 'bottom' ?\n                ex.vec(0, 0) : // bottom anchor from top left\n                ex.vec(0, 1), // top anchor from the bottom left\n            color: ex.Color.Green,\n            vel: ex.vec(-200, 0),\n            z: -1 // position the pipe under everything\n        })\n\n        this.on('exitviewport', () => this.kill());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration File for Game Constants in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a config.ts file to store game constants. It defines various parameters for bird movement, pipe generation, and game mechanics. The use of 'as const' ensures type safety and immutability of the configuration object.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/07-step-refactor-to-constants.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// config.ts\nimport * as ex from 'excalibur';\n\nexport const Config = {\n    BirdStartPos: ex.vec(200, 300),\n    BirdAcceleration: 1200,\n    BirdJumpVelocity: -800,\n    BirdMinVelocity: -500,\n    BirdMaxVelocity: 500, \n    PipeSpeed: 200,\n    PipeInterval: 1500,\n    PipeGap: 150\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Scene Initialization Implementation\nDESCRIPTION: Shows how to implement the onInitialize lifecycle hook for scene setup and asset loading.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MainMenu extends Scene {\n  private _startButton: StartButton;\n\n  /**\n   * Start-up logic, called once\n   */\n  public onInitialize(engine: Engine) {\n    // initialize scene actors\n    this._startButton = new StartButton();\n    this.add(this._startButton);\n  }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass MainMenu extends Scene {\n  private _loaded: boolean = false;\n\n  /**\n   * Start-up logic, called once\n   */\n  public onInitialize(engine: Engine) {\n    // load scene-specific assets\n    engine.start(sceneLoader).then(() => {\n      this._loaded = true;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene-Specific Resource Loading in Excalibur\nDESCRIPTION: Demonstrates how to load resources specific to a scene by extending the Scene.onPreLoad method. This allows for more efficient resource loading by only loading assets needed for the current scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/06-loaders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur';\n\nclass LevelOne extends ex.Scene {\n  spriteFont!: ex.ImageSource;\n  playerSpriteSheet!: ex.ImageSource;\n\n  override onPreLoad(loader: DefaultLoader) {\n    this.spriteFont = new ex.ImageSource('./res/spritefont.png');\n    this.playerSpriteSheet = new ex.ImageSource('./res/player-sheet.png');\n    loader.addResource(this.spriteFont);\n    loader.addResource(this.playerSpriteSheet);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Water Reflection Shader Implementation in GLSL ES 3.0\nDESCRIPTION: A GLSL shader that creates a water reflection effect by sampling the screen texture with distortion. It implements Perlin noise, wave patterns using trigonometry, and combines them with screen texture sampling to create realistic water reflections with wave crests.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-material.mdx#2025-04-16_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\n#version 300 es\nprecision mediump float;\n\n#define NUM_NOISE_OCTAVES 20\n\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\n\nuniform float u_time_ms;\nuniform vec4 u_color;\nuniform sampler2D u_graphic;\nuniform sampler2D u_screen_texture;\n\nuniform vec2 u_resolution;\nuniform vec2 u_graphic_resolution;\n\nin vec2 v_uv;\nin vec2 v_screenuv;\nout vec4 fragColor;\nvoid main() {\n  float time_sec = u_time_ms / 1000.;\n  float wave_amplitude = .525;\n  float wave_speed = 1.8;\n  float wave_period = .175;\n  vec2 scale = vec2(2.5, 8.5);\n\n  float waves = v_uv.y * scale.y + \n        sin(v_uv.x * scale.x / wave_period - time_sec * wave_speed) *\n        cos(0.2 * v_uv.x * scale.x /wave_period + time_sec * wave_speed) *\n        wave_amplitude - wave_amplitude;\n\n  \n  float distortion = noise(v_uv*scale*vec2(2.1, 1.05) + time_sec * 0.12) * .25 - .125;\n\n  vec2 reflected_screenuv = vec2(v_screenuv.x - distortion, v_screenuv.y);\n  vec4 screen_color = texture(u_screen_texture, reflected_screenuv);\n\n  vec4 wave_crest_color = vec4(1);\n  float wave_crest = clamp(smoothstep(0.1, 0.14, waves) - smoothstep(0.018, 0.99, waves), 0., 1.);\n\n  fragColor.a = smoothstep(0.1, 0.12, waves);\n  vec3 mixColor = (u_color.rgb * u_color.a);\n  \n  fragColor.rgb = mix(screen_color.rgb, mixColor, u_color.a)*fragColor.a + (wave_crest_color.rgb * wave_crest);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Graphics Usage with Actor in Excalibur\nDESCRIPTION: Shows how to load an image, create an actor, and apply a sprite graphic to it. The example demonstrates setting up an actor with positioning and anchor, then using the graphics component to display an image sprite.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-component.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ex.ImageSource('./path/to/my/image.png')\nawait game.start()\n\nconst actor = new Actor({\n  x: 100,\n  y: 100,\n  anchor: ex.vec(0.5, 1), // Optional value that controls the position of the image.\n})\n\nactor.graphics.use(image.toSprite())\n```\n\n----------------------------------------\n\nTITLE: Creating a Level Scene in Excalibur.js\nDESCRIPTION: This code defines a 'Level' class that extends ex.Scene. It initializes game objects like Bird, Ground, and Pipes in the onInitialize method. This scene encapsulates the game's main logic and object creation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/06-step-refactor-to-scene.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// level.ts\nimport * as ex from 'excalibur';\nimport { Bird } from './bird';\nimport { Ground } from './ground';\nimport { Pipe } from './pipe';\n\nexport class Level extends ex.Scene {\n    bird: Bird = new Bird();\n    ground!: Ground;\n    override onInitialize(engine: ex.Engine): void {\n        this.add(this.bird);\n\n        this.ground = new Ground(ex.vec(0, engine.screen.drawHeight - 64))\n        this.add(this.ground);\n\n        const topPipe = new Pipe(ex.vec(engine.screen.drawWidth, 150), 'top');\n        this.add(topPipe);\n\n        const bottomPipe = new Pipe(ex.vec(engine.screen.drawWidth, 300), 'bottom');\n        this.add(bottomPipe);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Looping Background Music in Excalibur.js Scene\nDESCRIPTION: Shows how to implement background music that continuously loops in an Excalibur.js game level. The code uses the scene's onActivate lifecycle method to start the background music when the level becomes active.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/15-step-sound-music.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// level.ts\nexport class Level extends ex.Scene {\n    ...\n    override onActivate(): void {\n        Resources.BackgroundMusic.loop = true;\n        Resources.BackgroundMusic.play();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphicsGroup in Excalibur.js\nDESCRIPTION: Shows how to use a GraphicsGroup to specify multiple graphics for an actor. This example creates an actor with a red rectangle and a blue circle using GraphicsGroup.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.2-components.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\nconst graphicsGroup = new ex.GraphicsGroup({\n  members: [\n    new ex.Rectangle({width: 100, height: 100, color: ex.Color.Red}),\n    { offset: ex.vec(100, 100), graphic: new ex.Circle({radius: 100, color: ex.Color.Blue})}\n  ]\n});\nactor.graphics.use(graphicsGroup);\n```\n\n----------------------------------------\n\nTITLE: Implementing PipeFactory Class in Excalibur.js\nDESCRIPTION: Complete implementation of a PipeFactory class that handles creation of pipes at random heights. It includes methods to spawn, start, stop, and reset pipes, using Excalibur's Timer and Random utilities.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/08-step-periodic-pipes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pipe-factory.ts\nimport * as ex from 'excalibur';\nimport { Bird } from './bird';\nimport { Ground } from './ground';\nimport { Pipe } from './pipe';\n\nexport class PipeFactory {\n\n    private timer: ex.Timer;\n    constructor(\n        private level: Level,\n        private random: ex.Random,\n        intervalMs: number) {\n            this.timer = new ex.Timer({\n                interval: intervalMs,\n                repeats: true,\n                action: () => this.spawnPipes()\n            });\n            this.level.add(this.timer);\n    }\n\n    spawnPipes() {\n        const randomPipePosition = this.random.floating(0, this.level.engine.screen.resolution.height - Config.PipeGap);\n\n        const bottomPipe = new Pipe(\n            ex.vec(this.level.engine.screen.drawWidth, randomPipePosition + Config.PipeGap),\n            'bottom'\n        );\n        this.level.add(bottomPipe);\n\n        const topPipe = new Pipe(\n            ex.vec(this.level.engine.screen.drawWidth, randomPipePosition),\n            'top'\n        );\n        this.level.add(topPipe);\n    }\n\n    start() {\n        this.timer.start();\n    }\n\n    reset() {\n        for (const actor of this.level.actors) {\n            if (actor instanceof Pipe) {\n                actor.kill();\n            }\n        }\n    }\n\n    stop() {\n        this.timer.stop();\n        for (const actor of this.level.actors) {\n            if (actor instanceof Pipe) {\n                actor.vel = ex.vec(0, 0);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Actions for Enemy Patrol in Excalibur.js\nDESCRIPTION: Demonstrates how to create a repeating patrol pattern for an enemy using chained actions. The enemy moves between two points, waiting at each end.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.1-actions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Enemy extends ex.Actor {\n  public patrol() {\n    // clear existing queue\n    this.actions.clearActions()\n    // guard a choke point\n    // move to 100, 100 and take 1.2s\n    // wait for 3s\n    // move back to 0, 100 and take 1.2s\n    // wait for 3s\n    // repeat\n    this.actions.repeatForever((ctx) => {\n      ctx.moveTo(100, 100, 1200).delay(3000).moveTo(0, 100, 1200).delay(3000)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Transitions and Loaders in Excalibur\nDESCRIPTION: Shows how to use the new Scene Transition & Loader API to define scenes, transitions, and loaders upfront. This allows for individual scene resource loading and smooth transitions between scenes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  scenes: {\n    scene1: {\n      scene: scene1,\n      transitions: {\n        out: new ex.FadeInOut({duration: 1000, direction: 'out', color: ex.Color.Black}),\n        in: new ex.FadeInOut({duration: 1000, direction: 'in'})\n      }\n    },\n    scene2: {\n      scene: scene2,\n      loader: ex.DefaultLoader, // Constructor only option!\n      transitions: {\n        out: new ex.FadeInOut({duration: 1000, direction: 'out'}),\n        in: new ex.FadeInOut({duration: 1000, direction: 'in', color: ex.Color.Black })\n      }\n    },\n  scene3: ex.Scene // Constructor only option!\n  } \n})\n\n// Specify the boot loader & first scene transition from loader\ngame.start('scene1',\n{\n  inTransition: new ex.FadeInOut({duration: 500, direction: 'in', color: ex.Color.ExcaliburBlue})\n  loader: boot,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CrossFade Transition in Excalibur.js\nDESCRIPTION: Example implementation of a custom CrossFade transition by extending the Transition class. This shows how to capture a screenshot of the previous scene and blend it with the new scene for a smooth visual effect.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/05-transitions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CrossFade extends Transition {\n  engine: Engine;\n  image: HTMLImageElement;\n  screenCover: Sprite;\n  constructor(options: TransitionOptions & CrossFadeOptions) {\n    super(options);\n    this.name = `CrossFade#${this.id}`;\n  }\n\n  override async onPreviousSceneDeactivate(scene: Scene<unknown>) {\n    this.image = await scene.engine.screenshot(true);\n  }\n\n  override onInitialize(engine: Engine): void {\n    this.engine = engine;\n    const bounds = engine.screen.getWorldBounds();\n    this.transform.pos = vec(bounds.left, bounds.top);\n    this.screenCover = ImageSource.fromHtmlImageElement(this.image).toSprite();\n    this.graphics.add(this.screenCover);\n    this.transform.scale = vec(1 / engine.screen.pixelRatio, 1 / engine.screen.pixelRatio);\n    this.graphics.opacity = this.progress;\n  }\n\n  override onStart(_progress: number): void {\n    this.graphics.opacity = this.progress;\n  }\n\n  override onReset() {\n    this.graphics.opacity = this.progress;\n  }\n\n  override onEnd(progress: number): void {\n    this.graphics.opacity = progress;\n  }\n\n  override onUpdate(progress: number): void {\n    this.graphics.opacity = progress;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Brick Layout with Actors in Excalibur.js\nDESCRIPTION: Demonstrates how to programmatically create a grid of breakable bricks using Excalibur Actors. Sets up brick dimensions, colors, and collision properties with proper spacing and layout calculations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Build Bricks\n\n// Padding between bricks\nconst padding = 20; // px\nconst xoffset = 65; // x-offset\nconst yoffset = 20; // y-offset\nconst columns = 5;\nconst rows = 3;\n\nconst brickColor = [Color.Violet, Color.Orange, Color.Yellow];\n\n// Individual brick width with padding factored in\nconst brickWidth = game.drawWidth / columns - padding - padding / columns; // px\nconst brickHeight = 30; // px\nconst bricks: Actor[] = [];\nfor (let j = 0; j < rows; j++) {\n  for (let i = 0; i < columns; i++) {\n    bricks.push(\n      new Actor({\n        x: xoffset + i * (brickWidth + padding) + padding,\n        y: yoffset + j * (brickHeight + padding) + padding,\n        width: brickWidth,\n        height: brickHeight,\n        color: brickColor[j % brickColor.length],\n      })\n    );\n  }\n}\n\nbricks.forEach(function (brick) {\n  // Make sure that bricks can participate in collisions\n  brick.body.collisionType = CollisionType.Active;\n\n  // Add the brick to the current scene to be drawn\n  game.add(brick);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Pub/Sub System with Excalibur\nDESCRIPTION: Shows how to create a publish/subscribe system using Excalibur's EventEmitter. It demonstrates creating an event aggregator, subscribing to events, and publishing events.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// create a publisher on an empty object\nconst vent = new ex.EventEmitter();\n// handler for an event\nconst handler = function (event) {\n  console.log(event);\n};\n// add a handler\nconst sub = vent.on('someevent', handler);\n// publish an event somewhere in the game\nvent.emit('someevent', { any: 'value or object'});\n\n// Clean up handler subscription, handler will no longer fire for 'someevent'\nsub.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Bird Animations with SpriteSheet in TypeScript\nDESCRIPTION: Creates and configures animations for a bird character using Excalibur.js SpriteSheet. Implements up and down animations with frame sequences and animation strategies, and handles game over conditions when the bird exits the viewport.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/12-step-bird-graphics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Bird extends ex.Actor {\n  upAnimation!: ex.Animation;\n  downAnimation!: ex.Animation;\n\n  override onInitialize(): void {\n    // Slice up image into a sprite sheet\n    const spriteSheet = ex.SpriteSheet.fromImageSource({\n        image: Resources.BirdImage,\n        grid: {\n            rows: 1,\n            columns: 4,\n            spriteWidth: 32,\n            spriteHeight: 32,\n        }\n    });\n\n    // Animation to play going up on tap\n    this.upAnimation = ex.Animation.fromSpriteSheet(\n        spriteSheet,\n        [2, 1, 0], // 3rd frame, then 2nd, then first\n        150, // 150ms for each frame\n        ex.AnimationStrategy.Freeze);\n\n    // Animation to play going down\n    this.downAnimation = ex.Animation.fromSpriteSheet(\n        spriteSheet,\n        [0, 1, 2],\n        150,\n        ex.AnimationStrategy.Freeze);\n\n    // Register animations by name\n    this.graphics.add('down', this.downAnimation);\n    this.graphics.add('up', this.upAnimation);\n    \n    this.on('exitviewport', () => {\n        this.level.triggerGameOver();\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CircleCollider in Excalibur.js\nDESCRIPTION: Demonstrates how to create and attach a CircleCollider to an actor in Excalibur.js. It shows both the built-in method and manual creation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-colliders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Actors have a built in circle collider if radius is set\nconst actorWithCircleCollider = new ex.Actor({\n  pos: ex.vec(5, 5),\n  radius: 10\n});\n\n// Alternatively you can define and set a collider yourself\n\nconst circle = new ex.CircleCollider({\n  radius: 10 // 10 pixel radius\n});\n\n// or\n\nconst circle = ex.Shape.Circle(10); // 10 pixel radius\n\nconst actor = new ex.Actor({\n  pos: ex.vec(100, 100),\n  collider: circle\n});\n\n// Change the collider afterwards\nactor.collider.set(circle);\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a TileMap in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to create a TileMap, load a sprite sheet, and populate the TileMap with sprites. It includes loading an image source, creating a sprite sheet, initializing a TileMap, and adding graphics to each tile.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-tilemap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Load your favorite tileset (maybe from Kenney.nl)\nconst kenneyRougeLikePack = new ex.ImageSource(rougeLikeImageSrc);\n\n// Create a sprite sheet\nconst rougeLikeSpriteSheet = ex.SpriteSheet.fromImageSource({\n    image: kenneyRougeLikePack,\n    grid: {\n        rows: 31,\n        columns: 51,\n        spriteHeight: 16,\n        spriteWidth: 16\n    },\n    spacing: {\n        margin: {\n            x: 1,\n            y: 1\n        }\n    }\n});\n\n// Create a tilemap\nconst tilemap = new ex.TileMap({\n    rows: 10,\n    columns: 10,\n    tileWidth: 16,\n    tileHeight: 16,\n});\n\n// loop through tilemap cells\nfor (let tile of tilemap.tiles) {\n    const sprite = rougeLikeSpriteSheet.getSprite(0, 0);\n    if (sprite) {\n        tile.addGraphic(sprite);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ground Class Implementation in Excalibur.js\nDESCRIPTION: The full implementation of the Ground class that combines initialization, scrolling animation, and movement control. Includes methods to start and stop the ground movement and handles proper positioning and scaling of the ground sprite.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/14-step-ground-graphics.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ground.ts\nexport class Ground extends ex.Actor {\n    groundSprite = Resources.GroundImage.toSprite();\n    moving = false;\n    constructor(pos: ex.Vector) {\n        super({\n            pos,\n            anchor: ex.vec(0, 0),\n            height: 64,\n            width: 400,\n            z: 1\n        })\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.groundSprite.sourceView.width = engine.screen.drawWidth;\n        this.groundSprite.destSize.width = engine.screen.drawWidth;\n        this.graphics.use(this.groundSprite);\n    }\n\n    onPostUpdate(_engine: ex.Engine, elapsedMs: number): void {\n        if (!this.moving) return;\n        this.groundSprite.sourceView.x += Config.PipeSpeed * (elapsedMs / 1000);\n        this.groundSprite.sourceView.x = this.groundSprite.sourceView.x % Resources.GroundImage.width;\n    }\n\n    start() {\n        this.moving = true;\n    }\n\n    stop() {\n        this.moving = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Actors to Root Scene in Excalibur\nDESCRIPTION: Demonstrates basic actor addition to the game engine's root scene using the Engine.add() method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst game   = new ex.Engine(...);\nconst player = new ex.Actor();\nconst enemy  = new ex.Actor();\n// add them to the \"root\" scene\ngame.add(player);\ngame.add(enemy);\n// start game\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Creating ScoreTrigger for Point Detection in Excalibur\nDESCRIPTION: Implements a ScoreTrigger class that detects when the player passes between pipes and awards points. The trigger is positioned in the gap between pipes and moves leftward with them.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/09-step-scoring-points.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// score-trigger.ts\nexport class ScoreTrigger extends ex.Actor {\n    constructor(pos: ex.Vector, private level: Level) {\n        super({\n            pos,\n            width: 32,\n            height: Config.PipeGap,\n            anchor: ex.vec(0, 0),\n            vel: ex.vec(-Config.PipeSpeed, 0)\n        })\n\n        this.on('exitviewport', () => {\n            this.kill();\n        });\n    }\n\n    override onCollisionStart(): void {\n        this.level.incrementScore();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Following in Excalibur.js using TypeScript\nDESCRIPTION: This code snippet demonstrates how to make one actor follow another using the follow action in Excalibur.js. It creates two actors and sets one to follow the other at a distance of 100 pixels. Note that this action never completes and requires clearActions() to schedule new actions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.5-actions-follow.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst friend = new ex.Actor({...});\n\nconst target = new ex.Actor({...});\n\n// Follow the target at a distance of 100 pixels\nfriend.actions.follow(target, 100)\n```\n\n----------------------------------------\n\nTITLE: Adding and Showing Named Graphics in Excalibur\nDESCRIPTION: Demonstrates how to add named graphics to an actor and switch between them. This pattern allows developers to store multiple graphics and reference them by name, making it easier to switch between different visual states.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-component.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nactor.graphics.add('jump', jumpAnimation)\nactor.graphics.show('jump') // display the graphic\n// equivalent to\nactor.graphics.show(jumpAnimation) // display the graphic\nactor.graphics.hide() // hide the graphic\n```\n\n----------------------------------------\n\nTITLE: Loading Sound Resources in Excalibur.js\nDESCRIPTION: Demonstrates how to define and load sound resources in an Excalibur.js game. The code creates various sound objects for game events like flapping, failing, scoring, and background music, which will be loaded by the game engine.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/15-step-sound-music.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// resources.ts\nexport const Resources = {\n    // Relative to /public in vite\n    ...\n    // Sounds\n    FlapSound: new ex.Sound('./sounds/flap.wav'),\n    FailSound: new ex.Sound('./sounds/fail.wav'),\n    ScoreSound: new ex.Sound('./sounds/score.wav'),\n\n    // Music\n    BackgroundMusic: new ex.Sound('./sounds/two_left_socks.ogg')\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Extending the Excalibur Engine\nDESCRIPTION: Shows how to extend the Excalibur Engine class to create a custom game implementation. It demonstrates adding custom scenes and overriding the start method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Game extends ex.Engine {\n  constructor() {\n    super({ width: 800, height: 600, displayMode: DisplayMode.FitScreen });\n  }\n\n  public start() {\n    // add custom scenes\n    this.add('mainmenu', new MainMenu());\n    return super.start(myLoader).then(() => {\n      this.goToScene('mainmenu');\n      // custom start-up\n    });\n  }\n}\nconst game = new Game();\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Input Detection in Excalibur.js\nDESCRIPTION: Shows how to enable gamepad support and handle button inputs through both polling and event-based approaches. Includes examples of checking button states and handling button press events.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.4-gamepad.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// enable gamepad support\nengine.input.gamepads.enabled = true\n// query gamepad on update\nengine.on('update', function (ev) {\n  // access any gamepad by index\n  if (engine.input.gamepads.at(0).isButtonPressed(ex.Buttons.Face1)) {\n    ex.Logger.getInstance().info('Controller A button pressed')\n  }\n  // query individual button\n  if (engine.input.gamepads.at(0).getButton(ex.Buttons.DpadLeft) > 0.2) {\n    ex.Logger.getInstance().info('Controller D-pad left value is > 0.2')\n  }\n})\n// subscribe to button events\nengine.input.gamepads.at(0).on('button', function (ev) {\n  ex.Logger.getInstance().info(ev.button, ev.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Alpha Particle Emitter in TypeScript\nDESCRIPTION: This snippet shows the latest build configuration for creating a ParticleEmitter in Excalibur using TypeScript. It demonstrates how particle-specific properties are nested under the 'particle' config object, including velocity, angle, opacity, size, color, and acceleration settings.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/13-particles.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst emitter = new ParticleEmitter({\n  x: game.halfDrawWidth,\n  y: game.halfDrawHeight,\n  width,\n  height,\n  emitterType,\n  radius,\n  isEmitting,\n  emitRate,\n  focusAccel: 800,\n  particle: {\n    minVel,\n    maxVel,\n    minAngle,\n    maxAngle,\n    opacity,\n    fade,\n    life,\n    minSize,\n    maxSize,\n    startSize,\n    endSize,\n    acc: new Vector(accelX, accelY),\n    beginColor: ex.Color.Red,\n    endColor: ex.Color.Blue,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Resource Loading Pattern in TypeScript with Excalibur.js\nDESCRIPTION: Demonstrates the recommended pattern for loading and managing game resources in Excalibur.js. Shows how to create a strongly-typed resource container and load multiple resources using a loader.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-patterns.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Resources = {\n    ImagePlayer: new ex.ImageSource('./player.png'),\n    //... more resources\n} as const; // <-- Important for strong typing\n\nconst loader = new ex.Loader();\nfor (let res of Object.values(Resources)) {\n  loader.addResource(res);\n}\n\nclass Player extends ex.Actor {\n    public onInitialize(engine: ex.Engine) {\n        // set as the \"default\" drawing\n        this.graphics.use(Resources.ImagePlayer.toSprite());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Scenes in Excalibur\nDESCRIPTION: Illustrates how to add, remove, and switch between scenes in an Excalibur game. It shows creating a new scene, adding it to the game, and navigating between scenes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst game = new ex.Engine();\n// create a new level\nconst level1 = new ex.Scene();\n// add level 1 to the game\ngame.add('level1', level1);\n// in response to user input, go to level 1\ngame.goToScene('level1');\n// go back to main menu\ngame.goToScene('root');\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Following for Ship in Excalibur.js\nDESCRIPTION: Shows how to make a Ship actor follow a predefined path using chained moveTo actions. The ship moves along the path points and then reverses, repeating the pattern indefinitely.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.1-actions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic Ship extends ex.Actor {\n  public onInitialize() {\n    const path = [\n      new ex.Vector(20, 20),\n      new ex.Vector(50, 40),\n      new ex.Vector(25, 30),\n      new ex.Vector(75, 80)\n    ];\n    // spawn at start point\n    this.actions.repeatForever(ctx => {\n      this.x = path[0].x;\n      this.y = path[0].y;\n      // create action queue\n      // forward path (skip first spawn point)\n      for (let i = 1; i < path.length; i++) {\n        ctx.moveTo(path[i].x, path[i].y, 300);\n      }\n\n      // reverse path (skip last point)\n      for (let i = path.length - 2; i >= 0; i--) {\n        ctx.moveTo(path[i].x, path[i].y, 300);\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ball Actor with Circle Collider in Excalibur\nDESCRIPTION: Creates a ball actor with a circular collider and sets up its initial position, appearance, and movement. Uses Passive collision type to handle collision responses manually rather than automatically.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a ball at pos (100, 300) to start\nconst ball = new Actor({\n  x: 100,\n  y: 300,\n  // Use a circle collider with radius 10\n  radius: 10,\n  // Set the color\n  color: Color.Red,\n});\n// Start the serve after a second\nconst ballSpeed = vec(100, 100);\nsetTimeout(() => {\n  // Set the velocity in pixels per second\n  ball.vel = ballSpeed;\n}, 1000);\n\n// Set the collision Type to passive\n// This means \"tell me when I collide with an emitted event, but don't let excalibur do anything automatically\"\nball.body.collisionType = CollisionType.Passive;\n// Other possible collision types:\n// \"ex.CollisionType.PreventCollision - this means do not participate in any collision notification at all\"\n// \"ex.CollisionType.Active - this means participate and let excalibur resolve the positions/velocities of actors after collision\"\n// \"ex.CollisionType.Fixed - this means participate, but this object is unmovable\"\n\n// Add the ball to the current scene\ngame.add(ball);\n```\n\n----------------------------------------\n\nTITLE: Querying Entities by Tags in Excalibur.js\nDESCRIPTION: This snippet shows how to use tag queries to find entities with specific tags in Excalibur.js. It creates two entities with different tags, adds them to the game scene, and then queries for entities with those tags.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.4-queries.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst entityA = new ex.Entity();\nentityA.addTag(\"tagA\");\n\nconst entityB = new ex.Entity();\nentityB.addTag(\"tagB\");\n\ngame.currentScene.add(entityA);\ngame.currentScene.add(entityB);\n\nconst queryA = game.currentScene.world.queryTags([\"tagA\"]);\nconst queryB = game.currentScene.world.queryTags([\"tagB\"]);\n\nconst entityA = queryA.entities[0];\nconst entityB = queryB.entities[0];\n```\n\n----------------------------------------\n\nTITLE: Checking Keyboard and Gamepad Input in Excalibur Actor Update\nDESCRIPTION: This snippet demonstrates how to inspect keyboard and gamepad input within an Actor's update method in Excalibur. It checks if the 'W' key is held down or if the left analog stick is pushed upwards on the first gamepad.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.1-input.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  public update(engine, delta) {\n    if (\n      engine.input.keyboard.isHeld(ex.Keys.W) ||\n      engine.input.gamepads.at(0).getAxes(ex.Axes.LeftStickY) > 0.5\n    ) {\n      // implement the code to move the player forward\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Shader Materials in Excalibur\nDESCRIPTION: Shows how to create and use a custom Material with a fragment shader in Excalibur. This allows for custom visual effects on actors, though it opts out of batch rendering and issues a separate draw call.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst material = new ex.Material({\n  name: 'test',\n  color: ex.Color.Red,\n  fragmentSource: `#version 300 es\n  precision mediump float;\n  // UV coord\n  in vec2 v_uv;\n  uniform sampler2D u_graphic;\n  uniform vec4 u_color;\n  uniform float u_opacity;\n  out vec4 fragColor;\n  void main() {\n    vec4 color = u_color;\n    color = texture(u_graphic, v_uv);\n    color.rgb = color.rgb * u_opacity;\n    color.a = color.a * u_opacity;\n    fragColor = color * u_color;\n  }`\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Scene Transitions in Game Initialization\nDESCRIPTION: This snippet demonstrates how to define fade in/out transitions when initializing scenes in an Excalibur.js game. It shows setting up two scenes with black fade transitions of 500ms duration.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/05-transitions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  scenes: {\n    scene1: {\n      scene: MyScene,\n      transitions: {\n        in: new ex.FadeInOut({duration: 500, direction: 'in', color: ex.Color.Black}),\n        out: new ex.FadeInOut({duration: 500, direction: 'out', color: ex.Color.Black})\n      }\n    },\n    scene2: {\n      scene: MyOtherScene,\n      transitions: {\n        in: new ex.FadeInOut({duration: 500, direction: 'in', color: ex.Color.Black}),\n        out: new ex.FadeInOut({duration: 500, direction: 'out', color: ex.Color.Black})\n      }\n    }\n  }\n});\n\n\ngame.goToScene('scene1');\n```\n\n----------------------------------------\n\nTITLE: Setting Up FillScreen Display Mode in Excalibur\nDESCRIPTION: Configures the game to fill the entire screen with dynamic resolution that changes as the window is resized, without using the fullscreen API.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    displayMode: ex.DisplayMode.FillScreen\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Keyboard Input in Excalibur Player Update Method\nDESCRIPTION: Demonstrates how to check for keyboard input within a Player actor's update method. It shows checking for held keys for movement and pressed keys for actions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.2-keyboard.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  public update(engine, delta) {\n    if (\n      engine.input.keyboard.isHeld(ex.Keys.W) ||\n      engine.input.keyboard.isHeld(ex.Keys.Up)\n    ) {\n      player._moveForward()\n    }\n\n    if (engine.input.keyboard.wasPressed(ex.Keys.Right)) {\n      player._fire()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Axis Input in Excalibur.js\nDESCRIPTION: Demonstrates how to handle gamepad axis inputs through both polling and event-based approaches. Shows implementation of axis value checking and event handling for analog inputs.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.4-gamepad.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// enable gamepad support\nengine.input.gamepads.enabled = true;\n// query gamepad on update\nengine.on('update', function(ev) {\n  // access any gamepad by index\n  const axisValue =  = engine.input.gamepads.at(0).getAxes(ex.Axes.LeftStickX));\n  if (axisValue > 0.5) {\n    ex.Logger.getInstance().info('Move right', axisValue);\n  }\n});\n// subscribe to axis events\nengine.input.gamepads.at(0).on('axis', function(ev) {\n  ex.Logger.getInstance().info(ev.axis, ev.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GPU Particle Emitter in Excalibur\nDESCRIPTION: Shows how to create a GPU particle emitter for high-performance particle simulations in Excalibur, with options for emitter type, particle properties, and maximum particle count.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvar particles = new ex.GpuParticleEmitter({\n  pos: ex.vec(300, 500),\n  maxParticles: 10_000,\n  emitRate: 1000,\n  radius: 100,\n  emitterType: ex.EmitterType.Circle,\n  particle: {\n    beginColor: ex.Color.Orange,\n    endColor: ex.Color.Purple,\n    focus: ex.vec(0, -400),\n    focusAccel: 1000,\n    startSize: 100,\n    endSize: 0,\n    life: 3000,\n    minSpeed: -100,\n    maxSpeed: 100,\n    angularVelocity: 2,\n    randomRotation: true,\n    transform: ex.ParticleTransform.Local\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Paper Doll with Child Actors in Excalibur\nDESCRIPTION: Shows how to use child actors for complex articulated graphics. This example creates a paper doll character with separate actors for each body part, allowing for independent control of positioning and animation for each component.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-component.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resources } from './Resources';\n\nclass PaperDoll extends ex.Actor {\n  this.leftArm = new ex.Actor({\n    pos: ex.vec(-10, 10)\n  });\n  this.rightArm = new ex.Actor({\n    pos: ex.vec(10, 10)\n  });\n  this.head = new ex.Actor({\n    pos: ex.vec(0, -10)\n  });\n  this.body = new ex.Actor({\n    pos: ex.vec(0, 20)\n  });\n  this.leftLeg = new ex.Actor({\n    pos: ex.vec(-10, 30)\n  });\n  this.rightLeg = new ex.Actor({\n    pos: ex.vec(10, 30)\n  });\n\n  constructor() {\n    this.leftArm.graphics.use(Resources.LeftArm);\n    this.rightArm.graphics.use(Resources.RightArm);\n\n    this.head.graphics.use(Resources.Head);\n    this.body.graphics.use(Resources.Body);\n\n    this.leftLeg.graphics.use(Resources.LeftLeg);\n    this.rightLeg.graphics.use(Resources.RightLeg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Loader for Resources in Excalibur.js\nDESCRIPTION: Demonstrates how to create a Loader object in Excalibur.js to load game assets. The Loader is initialized with an array of Loadable objects, which can include various types of assets such as images and sounds.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-resources.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst loader = new ex.Loader([\n  /* add Loadables here */\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events in Excalibur\nDESCRIPTION: Demonstrates how to handle various pointer events (down, up, move, cancel, wheel) for different pointer types in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Subscribe to the primary pointer\nengine.input.pointers.primary.on('down', function (evt) {});\nengine.input.pointers.primary.on('up', function (evt) {});\nengine.input.pointers.primary.on('move', function (evt) {});\nengine.input.pointers.primary.on('cancel', function (evt) {});\nengine.input.pointers.primary.on('wheel', function (evt) {});\n\n// Subscribe to a specific pointer (multi-touch)\nengine.input.pointers.at(1).on('down', function (evt) {});\nengine.input.pointers.at(1).on('up', function (evt) {});\nengine.input.pointers.at(1).on('move', function (evt) {});\nengine.input.pointers.at(1).on('cancel', function (evt) {});\nengine.input.pointers.at(1).on('wheel', function (evt) {});\n\n// Subscribe to all pointers (advanced)\nengine.input.pointers.on('down', function (evt) {});\nengine.input.pointers.on('up', function (evt) {});\nengine.input.pointers.on('move', function (evt) {});\nengine.input.pointers.on('cancel', function (evt) {});\nengine.input.pointers.on('wheel', function (evt) {});\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Loading in Excalibur Game Initialization\nDESCRIPTION: Shows how to initialize a loader with the defined resources and start the game after loading is complete. The loader displays a progress bar while resources are loading, and the game transitions to the 'Level' scene upon completion.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/11-step-images-graphics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\n...\nconst loader = new ex.Loader(Object.values(Resources));\ngame.start(loader).then(() => {\n  game.goToScene('Level');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Action Repetition in Excalibur.js\nDESCRIPTION: Shows how to create an endlessly repeating sequence of actions using the repeatForever method. The example demonstrates a continuous zig-zag movement pattern using moveBy actions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.4-actions-repeat.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nactor.actions.repeatForever((repeatCtx) => {\n  repeatCtx.moveBy(10, 0, 10)\n  repeatCtx.moveBy(0, 10, 10)\n})\n```\n\n----------------------------------------\n\nTITLE: Using GraphicsGroup for Multiple Graphics in Excalibur\nDESCRIPTION: Demonstrates how to use GraphicsGroup to compose multiple graphics together. This example creates a health bar with both a rectangle and text, positioning them relative to each other within the group.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-component.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst healthBarActor = new ex.Actor({...})\n\nconst healthBarRectangle = new ex.Rectangle({\n  width: 140,\n  height: 5,\n  color: new ex.Color(0, 255, 0)\n});\n\nconst healthBarText = new ex.Text({\n  text: 'A long piece of text is long',\n  font: new ex.Font({\n    size: 20,\n    family: 'Times New Roman'\n  })\n});\n\nconst group = new ex.GraphicsGroup({\n  members: [\n    { graphic: healthbarRectangle, offset: ex.vec(0, -70)},\n    { graphic: healthBarText, offset: ex.vec(0, -70)}\n  ]\n});\n\nhealthBarActor.graphics.use(group);\n```\n\n----------------------------------------\n\nTITLE: Creating a Paddle Actor in Excalibur\nDESCRIPTION: Creates a paddle actor for the Breakout game with specific position, dimensions, and color. Sets the collision type to Fixed so it can participate in collisions but cannot be moved by physics.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create an actor with x position of 150px,\n// y position of 40px from the bottom of the screen,\n// width of 200px and a height of 20px\nconst paddle = new Actor({\n  x: 150,\n  y: game.drawHeight - 40,\n  width: 200,\n  height: 20,\n  // Let's give it some color with one of the predefined\n  // color constants\n  color: Color.Chartreuse,\n});\n\n// Make sure the paddle can participate in collisions, by default excalibur actors do not collide with each other\n// CollisionType.Fixed is like an object with infinite mass, and cannot be moved, but does participate in collision.\npaddle.body.collisionType = CollisionType.Fixed;\n\n// `game.add` is the same as calling\n// `game.currentScene.add`\ngame.add(paddle);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Loaders for Specific Scenes in Excalibur\nDESCRIPTION: Shows how to customize the loader used during Scene.onPreLoad by configuring the scene with a custom loader class. This allows different scenes to have different loading screens.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/06-loaders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur';\nimport { MyLoader } from './my-loader'\n\nconst game = new ex.Engine({\n  scenes: {\n    scene1: {\n      scene: MyScene,\n      loader: MyLoader\n    }\n  }\n});\n\ngame.goToScene('scene1');\n```\n\n----------------------------------------\n\nTITLE: Creating Child Actors in Excalibur\nDESCRIPTION: Demonstrates how to create child actors and add them to a parent actor. This is useful for creating complex game objects or hierarchical structures.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst parent = new ex.Actor({...});\n\nconst child = new ex.Actor({...});\n\nparent.addChild(child);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics in Excalibur Engine\nDESCRIPTION: Shows how to explicitly enable arcade physics simulation in the Engine constructor. Arcade physics is suitable for basic collision detection with non-rotated rectangular areas.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-a-physics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new Engine({\n  physics: {\n    solver: SolverStrategy.Arcade\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Bird Class with Movement in Excalibur.js (TypeScript)\nDESCRIPTION: This snippet updates the Bird class to include movement initialization in the onInitialize method. It sets the bird's acceleration and includes placeholder start and stop methods for future use.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/03-step-bird-and-ground.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\nimport * as ex from 'excalibur';\n\nexport class Bird extends ex.Actor {\n    ...\n    override onInitialize(): void {\n        this.acc = ex.vec(0, 1200); // pixels per second per second\n    }\n\n\t\tstart() {\n      // later we'll use this to start our bird after game over\n\t\t}\n\n\t\tstop() {\n      // later we'll use this to stop our bird after collision\n\t\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Actor from Scene using Die Action in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the die() method in Excalibur.js to remove an actor from the scene after moving it to a specific position. The die() action is chained after the moveTo() action, ensuring the actor is removed only after completing its movement.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.5-actions-die.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...})\nscene.add(actor);\n\n// Move the actor to world position (100, 100) then remove from the scene\nactor.moveTo(ex.vec(100, 100), 100).die();\n```\n\n----------------------------------------\n\nTITLE: Using the Centralized Loader in the Main Entry Point\nDESCRIPTION: Shows how to import and use the centralized loader in the main game entry point. This simplifies game initialization and keeps resource loading organized.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/06-loaders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport * as ex from 'excalibur';\nimport { loader } from './resources';\n\nconst game = new ex.Engine({...});\n\ngame.start(loader);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shortest Path Method with Dijkstra's Algorithm in TypeScript\nDESCRIPTION: This method processes the results of Dijkstra's algorithm to calculate the shortest path between a start node and an end node, returning an array of nodes to traverse. It traces backward from the destination using the previous node references created during analysis.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-05-19-pathfiinding-part1/pathfindingpart1.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  shortestPath(startnode: Node, endnode: Node): Node[] {\n    let dAnalysis = this.dijkstra(startnode);\n\n    //iterate through dAnalysis to plot shortest path to endnode\n    let path: Node[] = [];\n    let current: Node | null | undefined = endnode;\n    while (current != null) {\n      path.push(current);\n      current = dAnalysis.find(node => node.node == current)?.previous;\n      if (current == null) {\n        break;\n      }\n    }\n    path.reverse();\n    return path;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Component in Excalibur.js\nDESCRIPTION: Demonstrates how to create a custom component by extending the built-in Component class. This example creates a MyComponent class with a custom data property.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.2-components.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyComponent extends ex.Component {\n  public myData: string = 'my custom data';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blink Action for Actor in Excalibur.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the blink action on an actor in Excalibur.js. It creates a red square actor and applies a blink effect with specified durations for visibility and invisibility, as well as the number of blinks.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.10-actions-blink.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  width: 100,\n  height: 100,\n  color: ex.Color.Red,\n})\n\n// time visible in milliseconds, time not visible in milliseconds, optional number of blinks\nactor.actions.blink(200, 200, 10)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Coroutine in Excalibur TypeScript\nDESCRIPTION: Demonstrates how to use coroutines with different yield patterns including time delays, promise resolution, and frame progression. The coroutine executes across multiple frames with different waiting conditions and returns a promise upon completion.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-coroutines.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst completePromise = coroutine(engine, function * () {\n  let elapsed = 0;\n  elapsed = yield 200; // frame 1 wait 200 ms before resuming\n  elapsed = yield fetch('./some/data.json'); // frame 2\n  elapsed = yield; // frame 3\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sprite Graphics to an Actor in Excalibur\nDESCRIPTION: Shows how to add sprite graphics to an actor using an ImageSource. The sprite is created from the image and set as the actor's default drawing in the onInitialize method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { playerImage } from './resources';\n\nclass Player extends ex.Actor {\n  public onInitialize() {\n    // Set as the default drawing\n    this.graphics.use(playerImage.toSprite());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Collision End Event in Excalibur (TypeScript)\nDESCRIPTION: Shows how to listen for the 'collisionend' event on an actor or its body collider. This event fires when two physics bodies are no longer in contact.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-events.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nactor.on('collisionend', () => {...})\n// or\nactor.body.collider.on('collisionend', () => {...})\n```\n\n----------------------------------------\n\nTITLE: Creating a Clickable Start Button using ScreenElement in Excalibur\nDESCRIPTION: This code snippet demonstrates how to create a custom StartButton class that extends ScreenElement. It sets up the button's position, graphics, and event handlers for pointer interactions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/02-screen-elements.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur'\nimport Resources from './resources'\n\nclass StartButton extends ex.ScreenElement {\n  constructor() {\n    super({\n      x: 50,\n      y: 50,\n    })\n  }\n\n  onInitialize() {\n    this.graphics.add('idle', Resources.StartButtonBackground)\n    this.graphics.add('hover', Resources.StartButtonHovered)\n\n    this.on('pointerup', () => {\n      alert(\"I've been clicked\")\n    })\n\n    this.on('pointerenter', () => {\n      this.graphics.show('hover')\n    })\n\n    this.on('pointerleave', () => {\n      this.graphics.show('idle')\n    })\n  }\n}\n\ngame.add(new StartButton())\ngame.start()\n```\n\n----------------------------------------\n\nTITLE: Scene Composition Pattern in Excalibur.js\nDESCRIPTION: Shows how to implement a scene as a composition root in Excalibur.js, demonstrating the proper way to initialize and add game objects to a scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-patterns.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyLevel extends ex.Scene {\n\n  onInitialize() {\n     const myActor1 = new ex.Actor({...});\n     this.add(myActor1);\n\n     const map = new ex.TileMap({...});\n     this.add(map);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Debug Information in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to use Excalibur's Debug static drawing helpers to visualize various debug information such as lines, points, circles, and bounding boxes. It requires toggling debug mode on the game instance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/07-debugging.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...})\ngame.toggleDebug();\n\nconst player = new ex.Actor({...});\nplayer.onPostUpdate = () => {\n  ex.Debug.drawLine(\n    player.pos,\n    player.pos.add(ex.Vector.Down.scale(100)), {\n      color: ex.Color.Red\n    });\n  ex.Debug.drawPoint(player.pos, {\n    size: 1,\n    color: ex.Color.Violet\n  });\n  ex.Debug.drawCircle(player.pos, 100, {\n    color: ex.Color.Transparent,\n    strokeColor: ex.Color.Black,\n    width: 1\n  });\n  ex.Debug.drawBounds(player.collider.bounds, { color: ex.Color.Yellow });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ball Collision Detection in Excalibur.js\nDESCRIPTION: Handles ball collision detection with bricks, including brick removal and ball direction changes. Uses collision events to detect impacts and calculate proper ball reflection angles.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// On collision remove the brick, bounce the ball\nlet colliding = false;\nball.on(\"collisionstart\", function (ev) {\n  if (bricks.indexOf(ev.other.owner) > -1) {\n    // kill removes an actor from the current scene\n    // therefore it will no longer be drawn or updated\n    ev.other.owner.kill();\n  }\n\n  // reverse course after any collision\n  // intersections are the direction body A has to move to not be clipping body B\n  // `ev.content.mtv` \"minimum translation vector\" is a vector `normalize()` will make the length of it 1\n  // `negate()` flips the direction of the vector\n  var intersection = ev.contact.mtv.normalize();\n\n  // Only reverse direction when the collision starts\n  // Object could be colliding for multiple frames\n  if (!colliding) {\n    colliding = true;\n    // The largest component of intersection is our axis to flip\n    if (Math.abs(intersection.x) > Math.abs(intersection.y)) {\n      ball.vel.x *= -1;\n    } else {\n      ball.vel.y *= -1;\n    }\n  }\n});\n\nball.on(\"collisionend\", () => {\n  // ball has separated from whatever object it was colliding with\n  colliding = false;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracking Projectile with Meet Action in Excalibur (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the 'meet' action in Excalibur to create a tracking projectile. It creates a missile actor that moves towards a target actor at a specified speed of 100 pixels per second.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.5-actions-meet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst missile = new ex.Actor({...});\n\nconst target = new ex.Actor({...});\n\n// Track towards the target at 100 pixels/second\nmissile.actions.meet(target, 100)\n```\n\n----------------------------------------\n\nTITLE: Loading Generic Resources in Excalibur.js\nDESCRIPTION: Shows how to load generic resources like text files or JSON data in Excalibur.js. It demonstrates creating Resource objects for different data types and using them with the Loader.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-resources.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new Engine({...});\nconst text = new Resource<string>('./path/to/my/data.txt', 'text');\nconst json = new Resource<MyJsonShapeType>('./path/to/my/json.json', 'json');\n\nconst loader = new Loader([text, json]);\nawait game.start(loader);\n\nconsole.log(text.data);\nconsole.log(json.data);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GrayScale PostProcessor in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to create a custom PostProcessor in Excalibur.js to apply a grayscale effect. It defines a GrayScalePostProcessor class that implements the PostProcessor interface and uses a ScreenShader with a custom GLSL fragment shader.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-post-processors/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass GrayScalePostProcessor implements ex.PostProcessor {\n  private _shader: ex.ScreenShader;\n  initialize(gl: WebGL2RenderingContext): void {\n    this._shader = new ex.ScreenShader(gl,\n      `#version 300 es\n    precision mediump float;\n    // our texture\n    uniform sampler2D u_image;\n    // the texCoords passed in from the vertex shader.\n    in vec2 v_texcoord;\n    out vec4 fragColor;\n    void main() {\n      vec4 tex = texture(u_image, v_texcoord);\n      float avg = 0.2126 * tex.r + 0.7152 * tex.g + 0.0722 * tex.b;\n      fragColor = vec4(avg, avg, avg, 1.0);\n    }`\n    );\n  }\n  getLayout(): ex.VertexLayout {\n    return this._shader.getLayout();\n  }\n  getShader(): ex.Shader {\n    return this._shader.getShader();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Game Scene with Bird and Ground in Excalibur.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up the game scene by creating instances of Bird and Ground and adding them to the game. It also initializes the game engine and starts the game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/03-step-bird-and-ground.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport * as ex from 'excalibur';\nimport { Bird } from './bird';\nimport { Ground } from './ground';\n\nconst game = new ex.Engine({...});\n\nconst bird = new Bird();\ngame.add(bird);\n\n// drawHeight is the height of the visible drawing surface in game pixels\nconst ground = new Ground(ex.vec(0, game.screen.drawHeight - 64));\ngame.add(ground);\n\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Moving Actor to Absolute Positions using MoveTo in TypeScript\nDESCRIPTION: Demonstrates how to move an actor to specific world coordinates using the MoveTo action. The actor moves in a square pattern at 200 pixels per second, using absolute positioning.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.2-actions-move.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\n\n// move in a square at 200 pixels/second\n// Actor will move exactly to those world coordinates\nactor.actions.moveTo(ex.vec(100, 0), 200).moveTo(ex.vec(100, 100), 200).moveTo(ex.vec(0, 100), 200).moveTo(ex.vec(0, 0), 200);\n```\n\n----------------------------------------\n\nTITLE: Scene Ray Casting Implementation in TypeScript\nDESCRIPTION: Demonstrates how to perform ray casting against all actors in a scene, including both engine-level and custom scene implementations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-ray.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// given a scene reference\nconst game = new ex.Engine({...});\ngame.start();\n\n\nconst ray = new ex.Ray(ex.vec(100, 100), ex.Vector.Right);\ngame.currentScene.physics.rayCast(ray, {...});\n\n// or in a custom scene\nclass MyScene extends ex.Scene {\n\n  someRayTestMethod() {\n\n    const ray = new ex.Ray(ex.vec(100, 100), ex.Vector.Right);\n    this.physics.rayCast(ray, {...});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Web Fonts to Load in Excalibur.js\nDESCRIPTION: Provides a utility function to wait for web fonts to load before rendering. This helps prevent issues with fonts not rendering correctly until they are fully loaded.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function waitForFontLoad(font, timeout = 2000, interval = 100) {\n  return new Promise((resolve, reject) => {\n    // repeatedly poll check\n    const poller = setInterval(async () => {\n      try {\n        await document.fonts.load(font);\n      } catch (err) {\n        reject(err);\n      }\n      if (document.fonts.check(font)) {\n        clearInterval(poller);\n        resolve(true);\n      }\n    }, interval);\n    setTimeout(() => clearInterval(poller), timeout);\n  });\n}\n\n// Load font before game start\nawait waitForFontLoad('24px Roboto');\n\nconst game = new ex.Engine({...})\nawait game.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Realistic Physics in Excalibur Engine\nDESCRIPTION: Demonstrates how to enable realistic physics simulation in the Engine constructor. Realistic physics is suitable for rigid body games requiring realistic collisions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-a-physics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new Engine({\n  physics: {\n    solver: SolverStrategy.Realistic\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Animation Event Handlers in Excalibur\nDESCRIPTION: Shows how to subscribe to animation events including 'loop' (when animation completes a cycle), 'frame' (when a new frame begins), and 'end' (when the animation completes). These events enable responsive game logic tied to animation states.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-animation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @include: ex\n// @include: animation\n// ---cut---\nanimation.events.on('loop', (a) => {\n  console.log('loop')\n})\nanimation.events.on('frame', (f) => {\n  console.log('frame')\n})\nanimation.events.on('end', (a) => {\n  console.log('ended')\n})\n```\n\n----------------------------------------\n\nTITLE: Limiting Degrees of Freedom in Excalibur.js Physics\nDESCRIPTION: Demonstrates how to limit the degrees of freedom for an actor's body in Excalibur.js. This example shows how to prevent rotation, which is one of the three degrees of freedom in 2D physics (X axis, Y axis, and rotation).\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-body.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\n\nactor.body.limitDegreeOfFreedom.push(ex.DegreeOfFreedom.Rotation);\n```\n\n----------------------------------------\n\nTITLE: Creating a Label in Excalibur.js\nDESCRIPTION: Demonstrates how to create a Label, which is an Actor with built-in Text and Font functionality. This example creates a label with custom text, position, and font settings including family, size, and unit.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst label = new ex.Label({\n    text: 'Some text',\n    pos: ex.vec(100, 100),\n    font: new ex.Font({\n        family: 'impact',\n        size: 24,\n        unit: ex.FontUnit.Px\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Scene Transitions with onTransition Method\nDESCRIPTION: Demonstrates how to dynamically override predefined transitions by extending the Scene class and implementing the onTransition method. This allows customizing transitions based on the scene's state.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/05-transitions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyCustomScene extends ex.Scene {\n  onTransition(direction: \"in\" | \"out\") {\n    return new ex.FadeInOut({\n      direction,\n      color: ex.Color.Violet,\n      duration: 2000\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Color Blindness with PostProcessor in Excalibur.js\nDESCRIPTION: This code shows how to apply color correction for deuteranope color blindness using the ColorBlindnessPostProcessor in Excalibur.js. It creates a new Engine instance and adds a post-processor to correct deuteranope vision.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-post-processors/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\n// correct deuteranope\nconst colorblind = new ex.ColorBlindnessPostProcessor(ex.ColorBlindnessMode.Deuteranope);\n\ngame.graphicsContext.addPostProcessor(colorblind);\n```\n\n----------------------------------------\n\nTITLE: Using Child Actors for Complex Collision in Excalibur.js\nDESCRIPTION: Demonstrates how to use child actors with different colliders for implementing complex collision logic, such as area of effect collisions or sensors.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-colliders.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst player = new ex.Actor({...});\n\nconst sensor = new ex.Actor({\n  radius: 100\n});\n\nplayer.addChild(sensor);\n\nsensor.on('collisionstart', (evt) => {\n  if (evt.other !== player) {\n    console.log('something is within 100 pixels of player');\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Text with Advanced Font Options in Excalibur.js\nDESCRIPTION: Demonstrates how to create text with comprehensive font customization. The example sets size, unit, family, style, text alignment, and shadow effects for the font.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar text = new ex.Text({\n  text: 'This is raster text ❤️',\n  font: new ex.Font({\n    size: 30,\n    unit: FontUnit.Px,\n    family: 'sans-serif',\n    style: FontStyle.Normal,\n    bold: false,\n    textAlign: TextAlign.Left,\n    baseAlign: BaseAlign.Alphabetic,\n    direction: Direction.LeftToRight,\n    shadow: {\n      blur: 2,\n      offset: ex.Vec(2, 2),\n      color: ex.Color.Black,\n    };\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering a Tiled Map in Excalibur.js\nDESCRIPTION: This snippet shows how to use the Excalibur Tiled plugin to load and render a Tiled map (.tmx file). It includes setting up the game engine, loading the Tiled map resource, and adding it to the game scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-tilemap.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur'\nimport * as tiled from '@excaliburjs/plugin-tiled';\nimport exampleCityUrl from './example-city.tmx';\n\nconst game = new ex.Engine({\n    width: 600,\n    height: 400,\n    displayMode: ex.DisplayMode.FitScreen\n});\n\nconst tiledMapResource = new tiled.TiledResource(exampleCityUrl);\n\nconst loader = new ex.Loader([tiledMapResource])\ngame.start(loader).then(() => {\n    tiledMapResource.addToScene(game.currentScene);\n    game.currentScene.camera.zoom = 2;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML-based UI in Excalibur\nDESCRIPTION: TypeScript code demonstrating how to implement HTML-based UI in Excalibur, including scene management and DOM manipulation for UI elements.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-ui.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur'\n\n// Hold a reference globally to our UI container\n// This would probably be encapsulated in a UIManager module\nconst ui = document.getElementById('ui')\n\n// Create our game\nconst game = new ex.Engine({\n  /**\n   * Specify our custom canvas element so Excalibur doesn't make one\n   */\n  canvasElementId: 'game',\n  /**\n   * Specify pointer scope to ensure that excalibur won't capture the mouse input\n   * meant to be captured by HTML GUI\n   */\n  pointerScope: ex.PointerScope.Canvas,\n})\n\n/**\n * Our main menu scene, which will have HTML-based UI\n */\nclass MainMenu extends ex.Scene {\n  onActivate() {\n    // Add a CSS class to `ui` that helps indicate which scene is being displayed\n    ui.classList.add('MainMenu')\n\n    // Create a <button /> element\n    const btnStart = document.createElement('button')\n\n    // Style it outside JavaScript for ease of use\n    btnStart.className = 'button button--start'\n\n    // Handle the DOM click event\n    btnStart.onclick = (e) => {\n      e.preventDefault()\n\n      // Transition the game to the new scene\n      game.goToScene('level')\n    }\n\n    // Append the <button /> to our `ui` container\n    ui.appendChild(btnStart)\n  }\n\n  onDeactivate() {\n    // Ensure we cleanup the DOM and remove any children when transitioning scenes\n    ui.classList.remove('MainMenu')\n    ui.innerHTML = ''\n  }\n}\n\nconst level = new ex.Scene()\nconst menu = new MainMenu()\n\ngame.addScene('menu', menu)\ngame.addScene('level', level)\ngame.goToScene('menu')\n\ngame.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing Bird-Pipe Collision Detection\nDESCRIPTION: Updates the Bird class to handle collisions with Pipe objects. When a collision occurs with either Ground or Pipe, the bird's movement is stopped.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/05-step-plumbing-pipes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\nimport * as ex from 'excalibur';\nimport { Ground } from './ground';\nimport { Pipe } from './pipe';\n\nexport class Bird extends ex.Actor {\n    \n    ...\n\n    override onCollisionStart(_self: ex.Collider, other: ex.Collider): void {\n        if (other.owner instanceof Ground ||\n            other.owner instanceof Pipe\n        ) {\n            this.stop();\n        }\n    }\n\n    ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bird Actor to Game Scene in TypeScript\nDESCRIPTION: Imports the Bird class, creates a new Bird instance, and adds it to the default scene of the Excalibur game engine.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/02-step-bird-actor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts \nimport * as ex from 'excalibur';\n\nimport { Bird } from './bird';\n\nconst game = new ex.Engine({...});\n\nconst bird = new Bird();\ngame.add(bird); // adds the Bird Actor to the default scene\n\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Collision Event in Excalibur (TypeScript)\nDESCRIPTION: Demonstrates how to listen for the 'postcollision' event on an actor or its body collider. This event fires every frame where collision resolution was performed between Active-Active or Active-Fixed collision pairs.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-events.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nactor.on('postcollision', () => {...})\n// or\nactor.body.collider.on('postcollision', () => {...})\n```\n\n----------------------------------------\n\nTITLE: Loading Images with Loader in Excalibur.js\nDESCRIPTION: This snippet shows how to create an Excalibur game engine instance, load an image using ImageSource, add it to a loader, and start the game. It ensures resources are loaded before the game starts.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-image-source.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({ width: 800, height: 600 })\n\nconst image = new ex.ImageSource('./img/myimg.png')\n\nconst loader = new ex.Loader()\nloader.addResource(image)\n\ngame.start(loader).then(() => {\n  // resources like ImageSource loaded before game started\n})\n```\n\n----------------------------------------\n\nTITLE: Loading and Playing Audio with Excalibur.js Sound Resource\nDESCRIPTION: This snippet demonstrates how to create a Sound instance, load it using a Loader, and play it within an Excalibur.js game. It shows how to specify multiple audio formats for browser compatibility and adjust the playback volume.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-sound.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new Engine({...});\nconst sound = new Sound('./path/to/my.mp3', './path/to/fallback.wav');\n\nconst loader = new Loader([sound]);\nawait game.start(loader);\n\nsound.play(0.5);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding a Particle Emitter in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a ParticleEmitter with various configuration options and add it to an actor or the game engine in Excalibur. It includes settings for emitter shape, velocity, angle, emission rate, particle life, size, color, and more.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/13-particles.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst actor = new ex.Actor(...);\nconst emitter = new ParticleEmitter({\n  x: 100,\n  y: 100,\n  radius: 5,\n  emitterType: ex.EmitterType.Circle, // Shape of emitter nozzle\n  minVel: 100,\n  maxVel: 200,\n  minAngle: 0,\n  maxAngle: Math.PI * 2,\n  isEmitting: true, // should the emitter be emitting\n  emitRate: 300, // 300 particles/second\n  opacity: 0.5,\n  fadeFlag: true, // fade particles overtime\n  particleLife: 1000, // in milliseconds = 1 sec\n  minSize: 1, // random size minimum in pixels\n  maxSize: 10, // random size maximum in pixels\n  startSize: 10, // starting size in pixels\n  endSize: 1, // ending size in pixels\n  acceleration: new Vector(accelX, accelY),\n  beginColor: ex.Color.Red,\n  endColor: ex.Color.Blue,\n  focusAccel: 800\n});\n// add the emitter as a child actor, it will draw on top of the parent actor\n// and move with the parent\nactor.add(emitter);\n// or, alternatively, add it to the current scene\nengine.add(emitter);\n```\n\n----------------------------------------\n\nTITLE: Integrating PipeFactory into Game Level\nDESCRIPTION: Shows how to integrate the PipeFactory into the game's Level class. It initializes the random number generator and pipe factory, then starts the pipe generation process.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/08-step-periodic-pipes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// level.ts\n\nimport { PipeFactory } from './pipe-factory';\n\nexport class Level extends ex.Scene {\n    random = new ex.Random();\n    pipeFactory = new PipeFactory(this, this.random, Config.PipeInterval);\n    bird = new Bird();\n    ground!: Ground;\n\n    onInitialize(engine: ex.Engine): void {\n        ...\n\n        this.pipeFactory.start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EaseTo Movement in Excalibur.js\nDESCRIPTION: Demonstrates how to move an actor to specific coordinates using easing functions. Uses EaseInOutCubic easing over a 1000ms duration to create smooth motion.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.2-actions-ease.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...})\n// Move to (100, 100) in world coordinates over 1000ms using EaseInOutCubic\nlabel.actions.easeTo(ex.vec(100, 100), 1000, ex.EasingFunctions.EaseInOutCubic)\n```\n\n----------------------------------------\n\nTITLE: Adding Mouse Control to the Paddle in Excalibur\nDESCRIPTION: Implements mouse control for the paddle by attaching an event listener to the primary pointer. The paddle follows the mouse cursor along the x-axis.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Add a mouse move listener\ngame.input.pointers.primary.on(\"move\", (evt) => {\n  paddle.pos.x = evt.worldPos.x;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Factories in Sprite Fusion\nDESCRIPTION: Example demonstrating how to create custom entity factories for specific tile IDs in Sprite Fusion maps, including position and rendering properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-spritefusion-plugin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst spriteFusionMap = new SpriteFusionResource({\n    mapPath: './map/map.json',\n    spritesheetPath: './map/spritesheet.png',\n    entityTileIdFactories: {\n        0 : (props) => {\n            return new ex.Actor({\n                pos: props.worldPos,\n                width: 16,\n                height: 16,\n                color: ex.Color.Red,\n                z: props.layer.order + 1\n            });\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks with Excalibur Clock\nDESCRIPTION: Demonstrates how to schedule tasks using the Excalibur clock instead of setTimeout. Tasks scheduled this way respect game state and pause when the game is stopped.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-clock.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\ngame.clock.schedule(() => {\n    console.log('Hello in 300ms');\n}, 300);\n```\n\n----------------------------------------\n\nTITLE: Handling Collision Start Event in Excalibur (TypeScript)\nDESCRIPTION: Demonstrates how to listen for the 'collisionstart' event on an actor or its body collider. This event fires when a physics body first starts colliding with another body.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nactor.on('collisionstart', () => {...})\n// or\nactor.body.collider.on('collisionstart', () => {...})\n```\n\n----------------------------------------\n\nTITLE: Rotating Actor to Specific Angle with RotateTo in TypeScript\nDESCRIPTION: Demonstrates how to use the rotateTo action to rotate an actor to a specific angle at a given speed. The method accepts an angle in radians, rotation speed in radians per second, and rotation type.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.3-actions-rotate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\n\n// angle in radians and a speed in radians/second\nactor.actions.rotateTo(Math.PI / 2, Math.PI, ex.RotationType.Clockwise);\n```\n\n----------------------------------------\n\nTITLE: Implementing Adjacent Wall Counter in TypeScript\nDESCRIPTION: Function that counts adjacent walls in a grid-based map with configurable out-of-bounds (OOB) behavior. Supports different OOB rules including floor, wall, random, and mirror behaviors. Takes a flat array representing a 2D grid and returns the count of adjacent walls.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-6-16-cellular-automata/cellularautonoma.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction countAdjacentWalls(map: number[], width: number, height: number, index: number, oob: string | undefined): number {\n  let count = 0;\n\n  const y = Math.floor(index / width);\n  const x = index % width;\n\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      if (i === 0 && j === 0) continue;\n      \n      const newY = y + i;\n      const newX = x + j;\n\n      if (newY >= 0 && newY < height && newX >= 0 && newX < width) {\n        const adjacentIndex = newY * width + newX;\n        if (map[adjacentIndex] === 1) count++;\n      } else {\n        switch (oob) {\n          case \"floor\":\n            break;\n          case \"wall\":\n            count++;\n            break;\n          case \"random\":\n            let coinflip = Math.random();\n            if (coinflip > 0.5) count++;\n            break;\n          case \"mirror\":\n            if (map[index]==1) count++;\n            break;\n          default:\n            count++;\n            break;\n        }\n      }\n    }\n  }\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Action Types in Excalibur\nDESCRIPTION: Demonstrates the usage of new action types in Excalibur, including rotateTo, moveTo, scaleTo, and repeatForever with curveTo actions. These actions now use duration in milliseconds instead of speed.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nplayer.actions.rotateTo({angleRadians: angle, duration: 1000, rotationType});\nplayer.actions.moveTo({pos: ex.vec(100, 100), duration: 1000});\nplayer.actions.scaleTo({scale: ex.vec(2, 2), duration: 1000});\nplayer.actions.repeatForever(ctx => {\n  ctx.curveTo({\n    controlPoints: [cp1, cp2, dest],\n    duration: 5000,\n    mode: 'uniform'\n  });\n  ctx.curveTo({\n    controlPoints: [cp2, cp1, start1],\n    duration: 5000,\n    mode: 'uniform'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing NineSlice in a Player Actor Class in Excalibur\nDESCRIPTION: Example of creating and using a NineSlice graphic within an Excalibur Actor class. Shows how to set up configuration parameters and attach the graphic to an entity.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.6-nineslice.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport class Player extends Actor {\n  private myNineSlice: NineSlice;\n  constructor() {\n    super({ name: 'player', width: 300, height: 128, pos: new Vector(100, 100) });\n    const myNineSliceConfig: NineSliceConfig = {\n      width: 300,\n      height: 128,\n      source: Resources.myImage,\n      sourceConfig: {\n        width: 64,\n        height: 64,\n        topMargin: 5,\n        leftMargin: 6,\n        bottomMargin: 5,\n        rightMargin: 6\n      },\n      destinationConfig: {\n        drawCenter: true,\n        horizontalStretch: NineSliceStretch.TileFit,\n        verticalStretch: NineSliceStretch.TileFit\n      }\n    };\n\n    this.myNineSlice = new NineSlice(myNineSliceConfig);\n    this.graphics.use(this.myNineSlice);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Actors to Excalibur Game Scene\nDESCRIPTION: Shows how to add actors to the root scene in an Excalibur game. This is necessary for actors to be drawn and updated in the game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// add them to the \"root\" scene\ngame.add(player);\ngame.add(enemy);\n\n// start game\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Using CollisionMask with RayCasting in Excalibur\nDESCRIPTION: Demonstrates how to perform a ray cast with a collision mask to filter results. This example creates a player collision group, defines a mask to exclude players, and performs a ray cast to detect all non-player entities within a certain distance in the player's line of sight.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst playerGroup = ex.CollisionGroupManager.create('playerGroup');\nconst notPlayersMask = ~playersGroup.category;\nconst hits = engine.currentScene.physics.rayCast(\n  new ex.Ray(player.pos, playerDir),\n  {\n    maxDistance: playerSightDistance,\n    // Search for all categories that match the mask\n    collisionMask: notPlayers,\n    searchAllColliders: false\n  });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Keyboard Events in Excalibur\nDESCRIPTION: Shows how to subscribe to keyboard events (press, release, hold) using the Excalibur engine's input system. Each event provides a KeyEvent object with information about the key involved.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.2-keyboard.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nengine.input.keyboard.on(\"press\", (evt: KeyEvent) => {...});\nengine.input.keyboard.on(\"release\", (evt: KeyEvent) => {...});\nengine.input.keyboard.on(\"hold\", (evt: KeyEvent) => {...});\n```\n\n----------------------------------------\n\nTITLE: Using AsepriteResource in Excalibur.js Game\nDESCRIPTION: Example of how to use the AsepriteResource in an Excalibur.js game. It demonstrates loading an Aseprite resource, creating an animation, and adding it to an actor in the game scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-aseprite-plugin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AsepriteResource } from '@excaliburjs/plugin-aseprite'\n\nconst game = new Engine({\n  width: 600,\n  height: 400,\n  displayMode: DisplayMode.FitScreen,\n})\n\nconst asepriteSpriteSheet = new AsepriteResource('./beetle.aseprite')\n// or json\n// const asepriteSpriteSheet = new AsepriteResource('./beetle.json')\n\nconst loader = new Loader([asepriteSpriteSheet])\ngame.start(loader).then(() => {\n  const anim = asepriteSpriteSheet.getAnimation('Loop')\n  const actor = new Actor({ pos: vec(100, 100) })\n  actor.graphics.use(anim)\n\n  game.currentScene.add(actor)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sprite with Source View and Destination Size in TypeScript\nDESCRIPTION: Demonstrates how to create a sprite from an ImageSource with custom source view coordinates and destination size parameters. The sprite takes a slice of the source image starting at coordinates (10,10) with dimensions 20x20 pixels and projects it to a 100x100 pixel destination size.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-sprites.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ex.ImageSource('./img/myimage.png')\n// keep in mind this wont work until the raw image is loaded\nconst sprite = new ex.Sprite({\n  image: image,\n  sourceView: {\n    // Take a small slice of the source image starting at pixel (10, 10) with dimension 20 pixels x 20 pixels\n    x: 10,\n    y: 10,\n    width: 20,\n    height: 20,\n  },\n  destSize: {\n    // Optionally specify a different projected size, otherwise use the source\n    width: 100,\n    height: 100,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Bird Collision Detection with Circle Collider in Excalibur\nDESCRIPTION: Updates the Bird class to use a circular collider instead of a box collider to prevent double-counting scores when the bird rotates into score triggers.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/09-step-scoring-points.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\n\nexport class Bird extends ex.Actor {\n    ...\n    constructor() {\n        super({\n            pos: Config.BirdStartPos,\n            // width: 16,\n            // height: 16,\n            radius: 8,\n            color: ex.Color.Yellow\n        });\n    }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Actor to Absolute Size with ScaleTo in Excalibur.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the ScaleTo method to scale an actor to an absolute size. It creates a red actor and scales it up to twice its original size at a rate of 0.1 scale factor per second.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.5-actions-scale.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n    pos: ex.vec(100, 100),\n    width: 100,\n    height: 100\n    color: ex.Color.Red\n});\n\n// Scale up the actor to twice the size, at .1 scale factor per second\nactor.actions.scaleTo(ex.vec(2, 2), ex.vec(.1, .1));\n```\n\n----------------------------------------\n\nTITLE: Adding Starting Node to Path Result in TypeScript\nDESCRIPTION: This snippet demonstrates how to include the starting node in the path result by using the unshift method to add it to the beginning of the array, creating a complete path from A to D through C.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-05-19-pathfiinding-part1/pathfindingpart1.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npath.unshift(startnode);\n//[Node A, Node C, Node D]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Touch Drawing with Different Colors in Excalibur.js\nDESCRIPTION: Demonstrates how to handle multiple touch inputs by creating separate pointer event handlers for different fingers. Each finger touch is tracked independently and draws rectangles in different colors (blue for first finger, red for second, green for third) at the touch position.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction paint(color: ex.Color) {\n  // create a handler for the event\n  return function (pe: ex.PointerEvent) {\n    if (pe.pointerType === ex.PointerType.Touch) {\n      engine.graphicsContext.drawRectangle(pe.worldPos, 5, 5, color);\n    }\n  };\n}\nengine.input.pointers.at(0).on('move', paint(ex.Color.Blue)); // 1st finger\nengine.input.pointers.at(1).on('move', paint(ex.Color.Red)); // 2nd finger\nengine.input.pointers.at(2).on('move', paint(ex.Color.Green)); // 3rd finger\n```\n\n----------------------------------------\n\nTITLE: Using Constant References for Type-Safe Event Names in Excalibur\nDESCRIPTION: This snippet demonstrates how to use predefined constants for event names to ensure type safety when emitting events. The Player class uses the PlayerEvents constant to avoid typos when emitting the healthdepleted event.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-events.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Player extends ex.Actor {\n  public events = new StrictEventEmitter<ex.ActorEvents & PlayerEvents>();\n  private health: number = 100;\n\n  public onPostUpdate() {\n    if (this.health <= 0) {\n      this.events.emit(PlayerEvents.Healthdepleted, new PlayerHealthDepletedEvent(this));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tilemap Bitmasks in TypeScript with Excalibur.js\nDESCRIPTION: This function loops through each tile in a tilemap and assigns a bitmask value based on the state of neighboring tiles. It creates an array of bitmask values that correspond to each tile in the map, which will later be used to determine which tile sprite to display.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    // This loops through each tile in the tilemap\n    private createTileMapBitmasks(map: TileMap): number[] {\n        // create the array of bitmasks, the indexes of this array will match up to the index\n        // of the tilemap\n        let bitmask: number[] = new Array(map.columns * map.rows).fill(0);\n        let tileIndex = 0;\n\n        // for each tile in the map, add the bitmask to the array\n        for (let tile of map.tiles) {\n            bitmask[tileIndex] = this._getBitmask(map, tileIndex, 1);\n            tileIndex++;\n        }\n\n        return bitmask;\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Events on Actors in Excalibur\nDESCRIPTION: Shows how to handle pointer events (enter, leave) on Actors in Excalibur using the default collision geometry.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyActor extends ex.Actor {\n  constructor() {\n    super({\n      pos: ex.vec(200, 200),\n      width: 100,\n      height: 100\n    });\n\n    this.on('pointerenter', () => {\n      console.log('enter')\n    });\n\n    this.on('pointerleave', () => {\n      console.log('leave')\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Entity Components in Excalibur\nDESCRIPTION: Shows how to add and remove components from an entity. Demonstrates both type-based and instance-based removal, as well as forcing immediate removal instead of deferred.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.1-entities.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = new ex.Entity()\nentity.addComponent(new ex.TransformComponent())\n\n// Remove by type or instances\nentity.removeComponent(ex.TransformComponent)\n\n// Force removal\nentity.removeComponent(ex.TransformComponent, true)\n```\n\n----------------------------------------\n\nTITLE: Creating BoxCollider and PolygonCollider in Excalibur.js\nDESCRIPTION: Shows how to create and attach BoxCollider and PolygonCollider to actors in Excalibur.js. It includes examples of built-in methods and manual creation for both types.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-colliders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Actors have a built in box collider if width/height are set\nconst actorWithBoxCollider = new ex.Actor({\n  pos: ex.vec(100, 100),\n  width: 100,\n  height: 10\n});\n\n// Alternatively you can define and set a collider yourself\nconst box = ex.Shape.Box(100, 10);\n\nconst actor = new ex.Actor({\n  pos: ex.vec(100, 100),\n  collider: box\n});\n\nconst triangle = new ex.PolygonCollider({\n  points: [ex.vec(-100, 0), ex.vec(0, -50), ex.vec(100, 0)]\n});\n```\n\n----------------------------------------\n\nTITLE: Filtered Trigger Implementation in TypeScript\nDESCRIPTION: Implements a trigger with a custom filter function that allows for complex conditional triggering based on game state and actor properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-triggers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst player = new ex.Actor({...})\n\n// Example trigger will fire on any geometry\nconst trigger = new ex.Trigger({\n  width: 100,\n  height: 100,\n  pos: ex.vec(100, 100),\n  filter: (actor) => {\n    if (actor.name === 'player' && keyInInventory && isLevel42) {\n      return true;\n    }\n  },\n  action: () => {\n    console.log('triggered')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bird Actor with Collision Detection in TypeScript\nDESCRIPTION: Extends the Bird actor class to handle game over conditions through collision detection and viewport boundaries. Implements methods for starting, stopping, and resetting the bird's state, along with collision handling for pipes and ground.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/10-step-game-over.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Bird extends ex.Actor {\n    playing = false;\n    constructor(private level: Level) { ... }\n\n    override onInitialize(): void {\n        this.on('exitviewport', () => {\n            this.level.triggerGameOver();\n        });\n    }\n\n    override onPostUpdate(engine: ex.Engine): void {\n        if (!this.playing) return;\n    }\n\n    start() {\n        this.playing = true;\n        this.pos = Config.BirdStartPos;\n        this.acc = ex.vec(0, Config.BirdAcceleration);\n    }\n\n    reset() {\n        this.pos = Config.BirdStartPos;\n        this.stop();\n    }\n\n    stop() {\n        this.playing = false;\n        this.vel = ex.vec(0, 0);\n        this.acc = ex.vec(0, 0);\n    }\n\n    override onCollisionStart(_self: ex.Collider, other: ex.Collider): void {\n        if (other.owner instanceof Pipe ||\n            other.owner instanceof Ground\n        ) {\n            this.level.triggerGameOver();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ParallaxComponent to an Actor in Excalibur\nDESCRIPTION: This code demonstrates how to add a ParallaxComponent to an actor in Excalibur to create a parallax scrolling effect. The actor's graphics will be drawn with an offset based on the camera position scaled by the parallax factor (0.5, 0.5). Note that using colliders with parallax entities is not recommended as they won't align with the visual position.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.5-parallax.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor()\n// The actor will be drawn shifted based on the camera position scaled by the parallax factor\nactor.addComponent(new ParallaxComponent(ex.vec(0.5, 0.5)))\n```\n\n----------------------------------------\n\nTITLE: Initializing Excalibur Engine with Pixel Art Mode\nDESCRIPTION: Sets up Excalibur.js engine with pixel art mode enabled, which automatically configures optimal settings for rendering pixel art graphics.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/06.0-pixel-art.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  pixelArt: true // and that's it!\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Component and System in Excalibur\nDESCRIPTION: Demonstrates how to create a custom component and system in Excalibur. The example implements a search behavior where entities move towards a target position at a fixed speed.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.3-systems.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass SearchComponent extends ex.Component {\n    constructor(public target: ex.Vector) {\n        super();\n    }\n}\n\nclass SearchSystem extends ex.System {\n\n  query: Query<typeof SearchComponent>;\n  constructor(world: World) {\n    this.query = world.query([TransformComponent, SearchComponent]);\n  }\n\n  // Lower numbers mean higher priority\n  // 99 is low priority\n  public priority = 99;\n\n  // Run this system in the \"update\" phase\n  public systemType = ex.SystemType.Update\n\n  private _searchSpeed = 100 // pixels/sec\n\n  public update(delta: number) {\n    for (let entity of this.query.entities) {\n        const target = entity.get(SearchComponent).target;\n        const transform = entity.get(ex.TransformComponent);\n\n        const direction = target.sub(transform.pos);\n        const motion = direction.normalize().scale(this._searchSpeed);\n\n        // Moves these entities towards the target at 10 pixels per second\n        transform.pos = transform.pos.add(motion.scale(delta / 1000))\n    }\n  }\n}\n\nconst scene = new ex.Scene();\nscene.world.add(SearchSystem);\n\n// Actors come with batteries included built in features\nconst actor = new ex.Actor({\n    pos: ex.vec(100, 100),\n    width: 30,\n    height: 30,\n    color: ex.Color.Red\n});\nactor.addComponent(new SearchComponent(ex.vec(600, 400)));\n```\n\n----------------------------------------\n\nTITLE: Creating a Canvas Graphic in Excalibur.js\nDESCRIPTION: Demonstrates how to create a Canvas graphic in Excalibur.js. The Canvas allows direct drawing on a CanvasRenderingContext2D, but is re-rendered every frame and should be used sparingly.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-graphics.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = new Canvas({\n  draw: (ctx: CanvasRenderingContext2D) => {\n    ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting World Coordinates to Tile Coordinates\nDESCRIPTION: Demonstrates how to convert world space coordinates to tile coordinates in an isometric map, useful for handling mouse input and positioning.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-isometricmap.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isoMap = new ex.IsometricMap({...});\n\nlet tileCoord = ex.vec(0, 0);\ngame.input.pointers.on('move', evt => {\n  // Convert world position coordinates to tile x/y\n  tileCoord = isoMap.worldToTile(evt.worldPos);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Gamepad Connection Events in Excalibur.js\nDESCRIPTION: Demonstrates how to handle gamepad connection events and set up button and axis event listeners. Shows implementation of connect event handler with button and axis response logic.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.4-gamepad.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nengine.input.gamepads.on('connect', (ce: ex.GamepadConnectEvent) => {\n  const newPlayer = CreateNewPlayer() // pseudo-code for new player logic on gamepad connection\n  console.log('Gamepad connected', ce)\n  ce.gamepad.on('button', (be: ex.GamepadButtonEvent) => {\n    if (be.button === ex.Buttons.Face1) {\n      newPlayer.jump()\n    }\n  })\n\n  ce.gamepad.on('axis', (ae: ex.GamepadAxisEvent) => {\n    if (ae.axis === ex.Axis.LeftStickX && ae.value > 0.5) {\n      newPlayer.moveRight()\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Bezier Curve Animations in Excalibur.js\nDESCRIPTION: Shows how to create and use bezier curves for actor movement, including curve sampling and repeated animations along curved paths.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst start1 = ex.vec(500, 500);\nconst dest = ex.vec(500, 100);\nconst cp1 = ex.vec(100, 300);\nconst cp2 = ex.vec(150, 800);\n\nconst curve = new ex.BezierCurve({\n  controlPoints: [start1, cp1, cp2, dest],\n  quality: 10\n});\n\nvar points: ex.Vector[] = [];\nconst drawCurve = () => {\n  points.length = 0;\n  for (let i = 0; i < 100; i++) {\n    points.push(curve.getPoint(i / 100));\n  }\n};\ndrawCurve();\n\nactor.actions.repeatForever((ctx) => {\n  ctx.curveTo({\n    controlPoints: [cp1, cp2, dest],\n    duration: 5000,\n    mode: 'uniform'\n  });\n  ctx.curveTo({\n    controlPoints: [cp2, cp1, start1],\n    duration: 5000,\n    mode: 'uniform'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipe Graphics in Actor Class\nDESCRIPTION: Initializes and configures the pipe sprite within a Pipe actor class. Handles sprite stretching through sourceView and destSize modifications, and implements vertical flipping for top pipes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/13-step-pipe-graphics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Pipe extends ex.Actor {\n    ...\n\n    override onInitialize(): void {\n        const pipeEnd = Resources.PipeImage.toSprite();\n        // Stretch the pipe sprite\n        // by default ImageSource use clamp which re-uses the border pixels \n        // when sourceView is larger than the original image\n        pipeEnd.sourceView.height = 1000;\n        // \n        pipeEnd.destSize.height = 1000;\n\n        // Flip the pipe sprite\n        if (this.type === 'top') {\n            pipeEnd.flipVertical = true;\n        }\n        this.graphics.use(pipeEnd);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources in Game Actors with Strong Typing\nDESCRIPTION: Demonstrates how to access centralized resources in game components. This example shows creating a sprite sheet and animation from preloaded resources in an Actor class.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/06-loaders.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// my-actor.ts\nimport * as ex from 'excalibur';\nimport { Resources } from './resources';\n\nexport class MyActor extends ex.Actor {\n  override onInitialize() {\n    const knightSpriteSheet = ex.SpriteSheet.fromImageSource({\n      image: Resources.KnightSpriteSheet,\n      grid: {\n          rows: 1,\n          columns: 4,\n          spriteHeight: 32,\n          spriteWidth: 32\n      }\n    });\n    const idle = ex.Animation.fromSpriteSheetCoordinates({\n        spriteSheet: knightSpriteSheet,\n        strategy: ex.AnimationStrategy.Loop,\n        frameCoordinates: [\n            {x: 0, y: 0, duration: 200},\n            {x: 1, y: 0, duration: 200},\n            {x: 2, y: 0, duration: 200},\n            {x: 3, y: 0, duration: 200}\n        ]\n    });\n    this.graphics.use(idle);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle Graphic in Excalibur.js\nDESCRIPTION: Demonstrates how to create a red circle graphic using the Circle class in Excalibur.js. The circle is defined with a radius of 10 pixels.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-graphics.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circle = new ex.Circle({\n  radius: 10,\n  color: ex.Color.Red\n});\n```\n\n----------------------------------------\n\nTITLE: Elastic Camera Movement in Excalibur.js\nDESCRIPTION: Implements elastic camera movement that smoothly follows an actor with physics-like elasticity and friction parameters.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngame.currentScene.camera.strategy.elasticToActor(actor, cameraElasticity, cameraFriction);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sparse SpriteSheet with Custom Source Views in Excalibur.js\nDESCRIPTION: Shows how to build a spritesheet from a list of different sized source views. This approach is useful for spritesheets where sprites have varying dimensions and positions rather than being arranged in a uniform grid.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-spritesheets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ss = ex.SpriteSheet.fromImageSourceWithSourceViews({\n  image,\n  sourceViews: [\n    { x: 0, y: 0, width: 20, height: 30 },\n    { x: 20, y: 0, width: 40, height: 50 },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Score Display and Tracking in Excalibur Level\nDESCRIPTION: Adds score and best score tracking to the Level class, including labels for display and methods to update scores. Uses localStorage to persist the best score between game sessions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/09-step-scoring-points.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// level.ts\nexport class Level extends ex.Scene {\n    ...\n    score: number = 0;\n    best: number = 0;\n    scoreLabel = new ex.Label({\n        text: 'Score: 0',\n        x: 0,\n        y: 0,\n        z: 1,\n        font: new ex.Font({\n            size: 20,\n            color: ex.Color.White\n        })\n    });\n\n    bestLabel = new ex.Label({\n        text: 'Best: 0',\n        x: 400,\n        y: 0,\n        z: 1,\n        font: new ex.Font({\n            size: 20,\n            color: ex.Color.White,\n            textAlign: ex.TextAlign.End\n        })\n    });\n\n    onInitialize(engine: ex.Engine): void {\n        ...\n\n        this.add(this.scoreLabel);\n        this.add(this.bestLabel);\n\n        const bestScore = localStorage.getItem('bestScore');\n        if (bestScore) {\n            this.best = +bestScore;\n            this.setBestScore(this.best);\n        } else {\n            this.setBestScore(0);\n        }\n    }\n\n    incrementScore() {\n        this.scoreLabel.text = `Score: ${++this.score}`;\n        this.setBestScore(this.score);\n    }\n\n    setBestScore(score: number) {\n        if (score > this.best) {\n            localStorage.setItem('bestScore', this.score.toString());\n            this.best = score;\n        }\n        this.bestLabel.text = `Best: ${this.best}`;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Action for Actor in Excalibur.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the fade action method to change the opacity of an Actor in Excalibur.js. It creates a red square actor and fades it to invisible over 2000 milliseconds.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.3-actions-fade.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  width: 100,\n  height: 100,\n  color: ex.Color.Red,\n})\n\n// fade to invisible over 2000 ms\nactor.actions.fade(0, 2000)\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport and Resolution in Excalibur\nDESCRIPTION: Creates a game engine with custom viewport dimensions and a predefined resolution (GameBoy). This demonstrates how to separately control the physical size and logical resolution of the game window.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  // set the viewport dimensions\n  viewport: { width: 800, height: 600 },\n\n  // sets the resolution\n  resolution: ex.Resolution.GameBoy\n});\n\nconst screen = game.screen;\n```\n\n----------------------------------------\n\nTITLE: Getting All Components from an Entity in Excalibur\nDESCRIPTION: Demonstrates how to retrieve all components from an entity at once. Returns an array of Component objects that can be iterated through.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.1-entities.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst components: Component[] = entity.getComponents()\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Canvas Graphics in Excalibur.js\nDESCRIPTION: Complete example of creating a Canvas graphic with caching enabled and attaching it to an actor. When cache is set to true, the draw function is only called once until flagDirty() is called.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-canvas.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = new ex.Canvas({\n    width: 200,\n    height: 200,\n    cache: true,  // If true draw once until flagged dirty again, otherwise draw to Canvas every frame\n    draw: (ctx) => {\n        console.log('With cache=true I draw once');\n        ctx.fillStyle = 'red';\n        ctx.fillRect(0, 0, 200, 200);\n    }\n})\n\nconst actor = new ex.Actor({\n    pos: game.screen.center\n});\n\nactor.graphics.use(canvas);\n```\n\n----------------------------------------\n\nTITLE: Creating a Uniform Grid-Based SpriteSheet with Spacing in Excalibur.js\nDESCRIPTION: Demonstrates how to create a spritesheet from an evenly-spaced grid of sprites with optional margin and offset parameters. This is useful for spritesheets that have regular spacing between sprites, such as the playing cards example from Kenny.nl.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-spritesheets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst kennyCardsImage = new ex.ImageSource(kennyCardsImageSrc);\n\nconst spriteSheet = ex.SpriteSheet.fromImageSource({\n    image: kennyCardsImage,\n    grid: {\n        rows: 4,\n        columns: 14,\n        spriteWidth: 42,\n        spriteHeight: 60\n    },\n    spacing: {\n        // Optionally specify the offset from the top left of sheet to start parsing\n        originOffset: { x: 11, y: 2 },  // you can now also use a Vector here i.e. vec(11,2), or new Vector(11,2),\n        // Optionally specify the margin between each sprite\n        margin: { x: 23, y: 5}  // you can now also use a Vector here i.e. vec(23,5), or new Vector(23,5),\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Scene Transitions with the add() API\nDESCRIPTION: Shows how to add scene transitions using the add() method instead of during initial engine configuration. This approach allows adding scenes with transitions after the engine has been created.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/05-transitions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine();\n\ngame.add('scene1', {\n  scene: MyScene,\n  transitions: {\n    in: new ex.FadeInOut({duration: 500, direction: 'in', color: ex.Color.Black}),\n    out: new ex.FadeInOut({duration: 500, direction: 'out', color: ex.Color.Black})\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using CallMethod After Movement Actions in Excalibur\nDESCRIPTION: Demonstrates how to chain movement actions and execute a callback using callMethod() after completion. The actor moves in a square pattern at 200 pixels per second and displays an alert when finished.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.11-actions-callmethod.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\n\n// move in a square at 200 pixels/second\n// then trigger an alert when complete\nactor.actions\n     .moveTo(ex.vec(100, 0), 200)\n     .moveTo(ex.vec(100, 100), 200)\n     .moveTo(ex.vec(0, 100), 200)\n     .moveTo(ex.vec(0, 0), 200)\n     .callMethod(() => {\n         alert(\"DONE!\");\n     });\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Detection for Bird in Excalibur.js (TypeScript)\nDESCRIPTION: This code adds collision detection to the Bird class. It checks for collisions with Ground objects and stops the bird's movement upon collision.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/03-step-bird-and-ground.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\nimport * as ex from 'excalibur';\nimport { Ground } from './ground';\n\nexport class Bird extends ex.Actor {\n    ...\n\n    override onCollisionStart(_self: ex.Collider, other: ex.Collider): void {\n        if (other.owner instanceof Ground) {\n            this.stop();\n        }\n    }\n\n    stop() {\n        this.vel = ex.vec(0, 0);\n        this.acc = ex.vec(0, 0)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing Labels in Excalibur\nDESCRIPTION: Shows how to create and customize Labels in Excalibur, including setting font properties and colors.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-ui.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// constructor\nconst label = new ex.Label({\n  text: 'Foo',\n  pos: ex.vec(50, 50)\n});\nlabel.font = new ex.Font({\n  family: 'Arial',\n  size: 10,\n  unit: ex.FontUnit.Px, // pixels are the default\n  textAlign: ex.TextAlign.Center\n})\nlabel.color = ex.Color.White;\n```\n\n----------------------------------------\n\nTITLE: Querying Entities by Components in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to use component queries to find entities with specific components in Excalibur.js. It creates two entities with different components, adds them to the game scene, and then queries for entities with those components.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.4-queries.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst entityA = new ex.Entity();\nentityA.addComponent(new ex.TransformComponent());\n\nconst entityB = new ex.Entity();\nentityB.addComponent(new ex.MotionComponent());\n\ngame.currentScene.add(entityA);\ngame.currentScene.add(entityB);\n\nconst queryA = game.currentScene.world.query([ex.TransformComponent]);\nconst queryB = game.currentScene.world.query([ex.MotionComponent]);\n\nconsole.log(entityA === queryA.entities[0]); // true\nconsole.log(entityB === queryB.entities[0]); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Actions with Movement and Rotation in Excalibur.js\nDESCRIPTION: Demonstrates how to create and combine multiple action sequences to run in parallel. The example shows an actor moving in a box pattern while simultaneously rotating back and forth. Uses easing functions for smooth movement and includes delay timing between actions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.2-a-actions-parallel.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\n\nconst moveInBox = new ex.ActionSequence(actor, ctx => {\n  ctx.easeBy(ex.vec(200, 0), 1000, ex.EasingFunctions.EaseInOutCubic);\n  ctx.delay(500);\n  ctx.easeBy(ex.vec(0, 200), 1000, ex.EasingFunctions.EaseInOutCubic);\n  ctx.delay(500);\n  ctx.easeBy(ex.vec(-200, 0), 1000, ex.EasingFunctions.EaseInOutCubic);\n  ctx.delay(500);\n  ctx.easeBy(ex.vec(0, -200), 1000, ex.EasingFunctions.EaseInOutCubic);\n  ctx.delay(500);\n});\n\nconst rotateAroundBackAndForth = new ex.ActionSequence(actor, ctx => {\n  ctx.rotateBy(Math.PI, Math.PI, ex.RotationType.Clockwise);\n  ctx.delay(500);\n  ctx.rotateBy(Math.PI, Math.PI, ex.RotationType.CounterClockwise);\n  ctx.delay(500);\n  ctx.rotateBy(Math.PI, Math.PI, ex.RotationType.Clockwise);\n  ctx.delay(500);\n  ctx.rotateBy(Math.PI, Math.PI, ex.RotationType.CounterClockwise);\n  ctx.delay(500);\n});\n\nconst parallel = new ex.ParallelActions([moveInBox, rotateAroundBackAndForth]);\n\nactor.actions.runAction(parallel);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-Draw Method in Excalibur Actor\nDESCRIPTION: Shows how to implement the onPreDraw method in an Excalibur Actor. This method runs before the core draw logic and allows for custom drawing preparations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  constructor(config?: ex.ActorArgs) {\n    super(config);\n\n    /**\n     * ADVANCED: This is run before Actor.graphics.onPreDraw core logic.\n     */\n    this.graphics.onPreDraw = (ctx: ex.ExcaliburGraphicsContext, delta: number) => {\n      // custom drawing\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Entity Factory in Excalibur Tiled Resource\nDESCRIPTION: This example demonstrates how to register a custom entity factory for a 'player-start' object in the Excalibur Tiled plugin. It creates a new Player instance with specified properties based on the FactoryProps passed to the factory function.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./orthogonal.tmx', {\n   entityClassNameFactories: {\n      'player-start': (props: FactoryProps) => {\n         return new Player({\n            pos: props.worldPos,\n            width: 16,\n            height: 16,\n            color: ex.Color.Blue,\n            collisionType: ex.CollisionType.Active\n         });\n      }\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Graphics Bounds for Pointer Events in Excalibur\nDESCRIPTION: Demonstrates how to enable graphics bounds testing for pointer events on Actors in Excalibur, useful for actors with only graphics and no collision geometry.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyGraphicsActor extends ex.Actor {\n  constructor(image: ex.ImageSource) {\n    super({pos: ex.vec(200, 200)});\n    this.pointer.useGraphicsBounds = true;\n    this.graphics.use(image.toSprite());\n\n    this.on('pointerenter', () => {\n      console.log('enter')\n    });\n    this.on('pointerleave', () => {\n      console.log('leave')\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Isometric Map in Excalibur\nDESCRIPTION: Creates a basic isometric map with specified dimensions and positioning. Sets up the fundamental structure for a 2.5D tile-based map.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-isometricmap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst isoMap = new ex.IsometricMap({\n    pos: ex.vec(250, 10),\n    tileWidth: 32,\n    tileHeight: 16,\n    columns: 15,\n    rows: 15\n});\n\ngame.currentScene.add(isoMap);\n```\n\n----------------------------------------\n\nTITLE: Using Timers in Excalibur\nDESCRIPTION: Explains how to create and use timers in Excalibur, which hook into the main game loop. It shows how to add a timer to the game, start, reset, and stop it.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/99-utilities.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst game = new ex.Engine();\nconst timer = new ex.Timer(() => {\n  // do something every 1000ms\n}, 1000);\n\n// Add the timer to the current scene\ngame.add(timer);\n\n// start the game and the timer\ngame.start().then(() => {\n  // start the timer\n  timer.start();\n\n  // reset the timer\n  timer.reset();\n\n  // stop the timer\n  timer.stop();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer with Random Intervals in Excalibur\nDESCRIPTION: This example shows how to create a timer with random intervals. The timer repeats every 500 milliseconds with an additional random interval between 0-500 milliseconds. It uses Excalibur's Random class for generating random intervals.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-timers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst random = new ex.Random(1337)\nconst timer = new ex.Timer({\n  random,\n  randomRange: [0, 500],\n  interval: 500,\n  repeats: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Actor-Specific Ray Casting in TypeScript\nDESCRIPTION: Shows how to perform ray casting against a specific actor's collider geometry to test for intersections.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-ray.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  pos: ex.vec(200, 100),\n  width: 100,\n  height: 100,\n  color: ex.Color.Red,\n})\n\nconst ray = new ex.Ray(ex.vec(100, 100), ex.Vector.Right)\n\n// Ray cast against the collider geometry, returns a point if intersects or null if not\nconst point = actor.collider.get().rayCast(ray)\n// Vector(150, 100)\n```\n\n----------------------------------------\n\nTITLE: Implementing FillContainer Display Mode in Excalibur\nDESCRIPTION: Configures the game to fill the parent container with dynamic resolution that changes as the container is resized, targeting a specific canvas element.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    canvasElementId: 'game',\n    displayMode: ex.DisplayMode.FillContainer\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GPU Particles in Excalibur\nDESCRIPTION: Example of creating a GPU particle emitter in Excalibur for high-performance particle systems.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvar particles = new ex.GpuParticleEmitter({\n  pos: ex.vec(100, 0),\n  z: 1,\n  emitterType: ex.EmitterType.Circle,\n  maxParticles: 100_000,\n  particle: {\n    acc: ex.vec(0, 200),\n    minSpeed: 1,\n    maxSpeed: 5,\n    opacity: 0.7,\n    life: 7000,\n    maxSize: 5,\n    minSize: 5,\n    startSize: 15,\n    endSize: 1,\n    beginColor: ex.Color.White,\n    endColor: ex.Color.Transparent\n  },\n  radius: 600,\n  emitRate: 1000,\n  isEmitting: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with Coroutines in Excalibur (TypeScript)\nDESCRIPTION: Complex example of using coroutines to implement a squash and stretch animation for a player character when jumping. Shows how coroutines can create readable sequential code for complex animations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// apply a stretch animation when jumping\nif (this.animation.is('jump') && this.oldVel.y >= 0 && this.vel.y < 0) {\n  ex.coroutine(\n    this.scene!.engine,\n    function* (this: Player): ReturnType<ex.CoroutineGenerator> {\n      const duration = 70\n      const scaleTo = 1 + 1 * this.FX_SQUISH_AMOUNT\n      const easing = ex.EasingFunctions.EaseOutCubic\n      const force = this.vel.y\n\n      let elapsed = 0\n\n      // stretch player graphic while jumping\n      while (this.vel.y < force * 0.25) {\n        elapsed += yield 1\n\n        if (elapsed < duration) {\n          this.squishGraphic(\n            easing(Math.min(elapsed, duration), 1, scaleTo, duration)\n          )\n        }\n      }\n\n      elapsed = 0\n\n      // un-stretch player graphic while jumping\n      while (!this.touching.bottom.size) {\n        elapsed += yield 1\n\n        if (elapsed < duration) {\n          this.squishGraphic(\n            easing(Math.min(elapsed, duration), scaleTo, 1, duration * 2)\n          )\n        }\n      }\n\n      this.squishGraphic(1)\n    }.bind(this)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphics Group Positioning in TypeScript\nDESCRIPTION: Shows how to create a graphics group with useAnchor set to false for top-left positioning, containing two sprite members with specific offsets.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-group.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst group = new ex.GraphicsGroup({\n  \n  useAnchor: false, // position group from the top left\n  members: [\n    {\n      graphic: newSprite,\n      offset: ex.vec(0, 0)\n    },\n    {\n      graphic: newSprite,\n      offset: ex.vec(50, 0)\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Logging in Excalibur\nDESCRIPTION: Shows how to use Excalibur's native logging provider instead of console.log. It demonstrates setting the default log level and logging messages at different levels.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/99-utilities.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// set default log level (default: Info)\nex.Logger.getInstance().defaultLevel = ex.LogLevel.Warn;\n// this will not be shown because it is below Warn\nex.Logger.getInstance().info('This will be logged as Info');\n// this will show because it is Warn\nex.Logger.getInstance().warn('This will be logged as Warn');\n// this will show because it is above Warn\nex.Logger.getInstance().error('This will be logged as Error');\n// this will show because it is above Warn\nex.Logger.getInstance().fatal('This will be logged as Fatal');\n```\n\n----------------------------------------\n\nTITLE: Creating a StrictEventEmitter with Type Checking in Excalibur\nDESCRIPTION: This snippet shows how to create a StrictEventEmitter class that enforces compile-time checking of event names. It demonstrates the implementation with a Player class that has a health system, showing how TypeScript catches typos in event names during development.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-events.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrictEventKey<TEventMap> = keyof TEventMap;\nclass StrictEventEmitter<TEventMap extends ex.EventMap> extends ex.EventEmitter<TEventMap> {\n  emit<TEventName extends StrictEventKey<TEventMap>>(eventName: TEventName, event: TEventMap[TEventName]): void;\n  emit<TEventName extends StrictEventKey<TEventMap> | string>(eventName: TEventName, event?: TEventMap[TEventName]): void {\n    super.emit(eventName as any, event as any);\n  }\n}\n\nexport class Player extends ex.Actor {\n  public events = new StrictEventEmitter<ex.ActorEvents & PlayerEvents>();\n  private health: number = 100;\n\n  public onPostUpdate() {\n    if (this.health <= 0) {\n      this.events.emit(\"healthdpleted\", new PlayerHealthDepletedEvent(this));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Timer in Excalibur.js\nDESCRIPTION: Demonstrates how to create and configure an Excalibur Timer that calls a function at regular intervals. The timer is set to repeat indefinitely and must be added to a scene to work.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/08-step-periodic-pipes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur';\n\n// we'll use this timer below\nthis.timer = new ex.Timer({\n    interval: intervalMs,\n    repeats: true,\n    action: () => this.spawnPipes()\n});\n// MUST BE added to a scene to work!!\nthis.level.add(this.timer);\n```\n\n----------------------------------------\n\nTITLE: Implementing ECS Component and System in Excalibur (TypeScript)\nDESCRIPTION: Shows the simplified implementation of ECS components and systems without requiring string type names, and demonstrates the use of queries for accessing entities in systems.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyComponent extends Component {\n  data = 'foo';\n}\n\nclass MySystem extends System {\n  systemType = SystemType.Update;\n  query: Query<typeof MyComponent>;\n  constructor(world: World) {\n      super();\n      this.query = world.query([MyComponent]);\n  }\n  update(elapsedMs: number): void {\n      for (let entity of this.query.entities) {\n          const myComponent = entity.get(MyComponent);\n          console.log(myComponent.data);\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera Strategy in Excalibur\nDESCRIPTION: Shows how to use the new camera strategy implementations for following targets in a scene. Demonstrates locking to an actor, locking to an axis, elastic following, and circling around an actor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nCamera.strategy.lockToActor(actor);\nCamera.strategy.lockToActorAxis(actor, ex.Axis.X);\nCamera.strategy.elasticToActor(actor, cameraElasticity, cameraFriction);\nCamera.strategy.circleAroundActor(actor);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Raster Graphic in TypeScript\nDESCRIPTION: Demonstrates how to create a custom raster graphic by extending the ex.Raster class and implementing the execute method. This example creates a blue 20x20 pixel square.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-graphics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyRaster extends ex.Raster {\n  constructor() {\n    super();\n  }\n\n  execute(ctx: CanvasRenderingContext2D): void {\n    // my custom raster\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(0, 0, 20, 20);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Text with Font in Excalibur.js\nDESCRIPTION: Demonstrates how to create a text graphic with a custom font in Excalibur.js. This example creates a basic text graphic with a specified font size of 30 pixels.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar text = new ex.Text({\n  text: 'This is raster text ❤️',\n  font: new ex.Font({ size: 30 }),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a ScreenElement Button in Excalibur\nDESCRIPTION: Demonstrates how to create a StartButton class extending ScreenElement, with event handling for pointer interactions and graphics changes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-ui.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur'\nimport Resources from './resources'\n\nclass StartButton extends ex.ScreenElement {\n  constructor() {\n    super({\n      x: 50,\n      y: 50,\n    })\n  }\n\n  onInitialize() {\n    this.graphics.add('idle', Resources.StartButtonBackground)\n    this.graphics.add('hover', Resources.StartButtonHovered)\n\n    this.on('pointerup', () => {\n      alert(\"I've been clicked\")\n    })\n\n    this.on('pointerenter', () => {\n      this.graphics.show('hover')\n    })\n\n    this.on('pointerleave', () => {\n      this.graphics.show('idle')\n    })\n  }\n}\n\ngame.add(new StartButton())\ngame.start()\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Custom Physics Components\nDESCRIPTION: Demonstrates how to create an Entity with manually added physics components including Transform, Body, and Collider components.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-a-physics.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = new ex.Entity([\n  new TransformComponent(),\n  new BodyComponent(),\n  new ColliderComponent(),\n])\n\nconst tx = entity.get(TransformComponent)\n\nconst body = entity.get(BodyComponent)\n\nconst collider = entity.get(ColliderComponent)\n```\n\n----------------------------------------\n\nTITLE: Event-based Drawing in Excalibur.js\nDESCRIPTION: Shows how to implement drawing using event listeners on the Excalibur Scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\ngame.currentScene.on('predraw', (ctx: ExcaliburGraphicsContext) => {\n    ctx.save();\n    ctx.drawRectangle(...);\n    ctx.restore();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts in Excalibur.js\nDESCRIPTION: Demonstrates how to use a Google Font in Excalibur.js after loading it in HTML. The example creates a Font object with the loaded 'Roboto' font family.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst font = new ex.Font({\n  family: 'Roboto',\n  size: 24,\n  unit: ex.FontUnit.Px,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Over Detection in Excalibur.js\nDESCRIPTION: Handles the loss condition when the ball exits the viewport (goes past the paddle). Shows a simple alert message when the player loses.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Loss condition\nball.on(\"exitviewport\", () => {\n  alert(\"You lose!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Graphics Group without Anchor in Excalibur\nDESCRIPTION: Shows how to create a GraphicsGroup in Excalibur with the useAnchor option set to false, allowing for top-left based positioning of graphic members.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst graphicGroup = new ex.GraphicsGroup({\n  useAnchor: false,\n  members: [\n    {\n      graphic: heartImage.toSprite(),\n      offset: ex.vec(0, 0),\n    },\n    {\n      graphic: heartImage.toSprite(),\n      offset: ex.vec(0, 16),\n    },\n    {\n      graphic: heartImage.toSprite(),\n      offset: ex.vec(16, 16),\n    },\n    {\n      graphic: heartImage.toSprite(),\n      offset: ex.vec(16, 0),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Patrol Movement with Actions in Excalibur\nDESCRIPTION: Demonstrates how to create a repeating patrol movement pattern using the updated moveBy action. The actor moves 400 pixels left and right continuously.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2019-06-08-excalibur-0-23-0-release/2019-06-08-excalibur-0-23-0-release.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nactor.actions.moveBy(-400, 0, 50).moveBy(400, 0, 50).repeatForever();\n```\n\n----------------------------------------\n\nTITLE: Creating a Polygon Graphic in Excalibur.js\nDESCRIPTION: Shows how to create a yellow triangle using the Polygon class in Excalibur.js. The polygon is defined by three points and colored yellow.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-graphics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst triangle = new ex.Polygon({\n  points: [ex.vec(10 * 5, 0), ex.vec(0, 20 * 5), ex.vec(20 * 5, 20 * 5)],\n  color: ex.Color.Yellow\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Gravity in Excalibur.js Physics\nDESCRIPTION: Shows how to set up global gravity and apply it to an actor in Excalibur.js. The gravity is set to accelerate objects 800 pixels down per second per second, and the actor is configured to use this gravity by setting its collision type to Active.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-body.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nex.Physics.gravity = ex.vec(0, 800); // accelerate 800 pixels down per second per second\n\nconst actor = new ex.Actor({...});\nactor.body.collisionType = ex.CollisionType.Active;\nactor.body.useGravity = true;\n```\n\n----------------------------------------\n\nTITLE: Transforming Vectors with Matrix in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a Matrix to transform multiple points efficiently. It creates a transformation matrix, applies it to a set of points, and then uses the inverse matrix to revert the transformation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-matrix.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst points = [...];\n\nconst mat = Matrix.identity().translate(100, 100).scale(2).rotate(Math.PI / 2);\n\n// transform the points\nconst transformedPoints = points.map(p => mat.multiply(p));\n\nconst inverse = mat.getAffineInverse();\n\n// undo the transform with the inverse\nconst originalPoints = points.map(p => inverse.multiply(p));\n```\n\n----------------------------------------\n\nTITLE: Using Child Actors for Layered Graphics in Excalibur (TypeScript)\nDESCRIPTION: Shows how to use child actors to create layered graphics with more control over movement, transform, and behavior in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\nconst child = new ex.Actor({\n  pos: ex.vec(100, 100),\n  rotation: Math.PI / 4,\n  scale: ex.vec(3, 3)\n});\nactor.addChild(child);\nactor.graphics.use(new ex.Rectangle({width: 100, height: 100, color: ex.Color.Red}));\nchild.graphics.use(new ex.Rectangle({width: 10, height: 10, color: ex.Color.Blue}));\n```\n\n----------------------------------------\n\nTITLE: Creating an Isometric Map in Excalibur\nDESCRIPTION: Demonstrates how to create an IsometricMap, a new feature for drawing isometric grids. This includes support for custom colliders and isometric entity sorting.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nnew ex.IsometricMap({\n    pos: ex.vec(250, 10),\n    tileWidth: 32,\n    tileHeight: 16,\n    columns: 15,\n    rows: 15\n  });\n```\n\n----------------------------------------\n\nTITLE: Using ActionsComponent for Scripted Behavior in Excalibur.js\nDESCRIPTION: Shows how to use the ActionsComponent to create scripted behavior for an entity. This example creates an entity that repeatedly moves between two points.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.2-components.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = new ex.Entity();\nconst actions = new ActionsComponent();\nentity.add(actions);\n\nactions.repeatForever(ctx => {\n  ctx.moveTo(100, 100, 100); // moveTo (100, 100) at 100 pixels/sec\n  ctx.moveTo(0, 0, 100); // moveTo (0, 0) at 100 pixels/sec\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating Actor by Angle Offset with RotateBy in TypeScript\nDESCRIPTION: Shows how to use the rotateBy action to rotate an actor by a relative angle offset from its current rotation. The method takes an angle offset in radians, rotation speed in radians per second, and rotation type.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.3-actions-rotate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n    ...\n    rotation: Math.PI\n});\n\n// angle in radians and a speed in radians/second\n// rotate relative to the actor's current angle\nactor.actions.rotateBy(Math.PI / 2, Math.PI, ex.RotationType.CounterClockwise);\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic Fixed Screen in Excalibur\nDESCRIPTION: Creates a new Excalibur game engine instance with a fixed display mode using static width and height values of 800x600 pixels.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  width: 800,\n  height: 600\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a Basic Timer in Excalibur\nDESCRIPTION: This snippet demonstrates how to create a timer that repeats every 100 milliseconds indefinitely. It shows how to initialize the timer, add it to the current scene, and start it.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-timers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst timer = new ex.Timer({\n  fcn: () => console.log('Every 100 ms'),\n  repeats: true,\n  interval: 100,\n})\n\ngame.currentScene.add(timer)\n\ntimer.start()\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Triggers in Excalibur\nDESCRIPTION: Demonstrates how to create and use triggers in Excalibur. Triggers are special actors that run logic when another actor collides with their bounding box. The example shows how to create a trigger, set up a handler, and add it to the game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/99-utilities.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Start the engine\nvar game = new ex.Engine({\n  width: 800,\n  height: 600,\n  displayMode: ex.DisplayMode.FullScreen\n});\n\n// Uncomment next line to make the trigger box visible\n// game.showDebug(true);\n\n// create a handler\nfunction onTrigger() {\n  // `this` will be the Trigger instance\n  ex.Logger.getInstance().info('Trigger was triggered!', this);\n}\n\n// set a trigger at (100, 100) that is 40x40px that can only be fired once\nvar trigger = new ex.Trigger({\n  width: 40,\n  height: 40,\n  pos: new ex.Vector(100, 100),\n  repeat: 1,\n  target: actor,\n  action: onTrigger\n});\n\n// create an actor above the trigger\nvar actor = new ex.Actor(100, 0, 40, 40, ex.Color.Red);\n\n// Enable collision on actor (else trigger won't fire)\nactor.body.collider.type = ex.CollisionType.Active;\n\n// tell the actor to move across the trigger with a velocity of 100\nactor.actions.moveTo(100, 200, 100);\n\n// Add trigger and actor to our scene and start the scene\ngame.add(trigger);\ngame.add(actor);\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Components from Entities in Excalibur\nDESCRIPTION: Demonstrates how to retrieve a component from an entity by type. Shows proper null checking since the component might not exist on the entity.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.1-entities.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = new ex.Entity()\nconst maybeTransform = entity.get(ex.TransformComponent)\nif (maybeTransform) {\n  console.log(maybeTransform.pos)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PipeFactory to Spawn ScoreTriggers in Excalibur\nDESCRIPTION: Modifies the PipeFactory class to create ScoreTrigger objects between pipes and handle them in reset and stop methods. This ensures score triggers are properly positioned and managed with pipes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/09-step-scoring-points.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// pipe-factory.ts\n\nexport class PipeFactory {\n    ...\n\n    spawnPipes() {\n        ...\n\n        const scoreTrigger = new ScoreTrigger(\n            ex.vec(\n                this.level.engine.screen.drawWidth,\n                randomPipePosition),\n            this.level\n        );\n        this.level.add(scoreTrigger);\n\n    }\n\n    ...\n    reset() {\n        for (const actor of this.level.actors) {\n            if (actor instanceof Pipe ||\n                actor instanceof ScoreTrigger\n            ) {\n                actor.kill();\n            }\n        }\n    }\n\n    stop() {\n        this.timer.stop();\n        for (const actor of this.level.actors) {\n            if (actor instanceof Pipe ||\n                actor instanceof ScoreTrigger\n            ) {\n                actor.vel = ex.vec(0, 0);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Options in Excalibur.js\nDESCRIPTION: Shows how to configure font options both at FontSource creation and during font conversion. Demonstrates option overriding behavior when using toFont() method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/03-web-fonts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fontSource = new ex.FontSource('/my-font.ttf', 'My Font', { \n  filtering: ex.ImageFiltering.Pixel,\n  size: 16, // set a default size\n})\nconst font = fontSource.toFont({\n  // override just the size\n  size: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Canvas Graphic in Excalibur\nDESCRIPTION: Demonstrates how to create a custom Canvas graphic using the new Excalibur graphics system. This snippet shows how to draw a red rectangle on a canvas and use it with an actor's graphics component.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2021-10-03-excalibur-0-25-0-released/2021-10-03-excalibur-0-25-0-released.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = new ex.Canvas({\n  cache: true, // If true draw once until flagged dirty again, otherwise draw every time\n  draw: (ctx: CanvasRenderingContext2D) => {\n    ctx.fillStyle = 'red';\n    ctx.fillRect(0, 0, 200, 200);\n  }\n});\n\nactor.graphics.use(canvas);\n```\n\n----------------------------------------\n\nTITLE: Adding Actors to Specific Excalibur Scene\nDESCRIPTION: Demonstrates how to add actors to a specific scene in Excalibur, then add that scene to the game and navigate to it. This allows for organizing actors into different levels or stages.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst level1 = new ex.Scene();\n\n// add actors to level1\nlevel1.add(player);\nlevel1.add(enemy);\n\n// add level1 to the game\ngame.add('level1', level1);\n\n// start the game\ngame.start();\n\n// after player clicks start game, for example\ngame.goToScene('level1');\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteFont in Excalibur.js\nDESCRIPTION: Shows how to create a custom sprite-based font using a spritesheet of character glyphs. The example loads an image, creates a sprite sheet with a grid layout, and then configures a SpriteFont with a specified alphabet and case sensitivity.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst spriteFontImage = new ex.ImageSource('./path/to/sprite-font.png')\n\nconst spriteFontSheet = ex.SpriteSheet.fromImageSource({\n  image: spriteFontImage,\n  grid: {\n    rows: 3,\n    columns: 16,\n    spriteWidth: 16,\n    spriteHeight: 16\n  }\n});\nconst spriteFont = new ex.SpriteFont({\n    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz,!\\'&.\"?- ',\n    caseInsensitive: true,\n    spriteSheet: spriteFontSheet\n  });\n});\nconst text = new ex.Text({\n  text: 'This is sprite font text!!',\n  font: spriteFont\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding LDtk Map to Excalibur Scene\nDESCRIPTION: This TypeScript code demonstrates how to create an LDtk resource, load it, and add it to the current game scene in Excalibur. It shows the basic setup for integrating an LDtk map into an Excalibur game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst ldtkMap = new LdtkResource('./path/to/my/cool-map.ldtk');\n\nconst loader = new ex.Loader([ldtkMap]);\n\ngame.start(loader).then(() => {\n    ldtkMap.addToScene(game.currentScene);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Animation Frame Events in Excalibur\nDESCRIPTION: Shows how to use the new FrameEvent in Animation to perform actions when specific animation frames are displayed. The event includes the frame index of the current frame.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst anim = new Animation();\n\n// TS autocompletes the handler\nanim.on('frame', (frame: FrameEvent) => {\n  // Do stuff on frame\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Default Graphics to Actor in Excalibur\nDESCRIPTION: Shows how to add a default graphic to an actor that will be automatically displayed. When no name is provided when adding a graphic, it's considered the 'default' graphic and shown immediately.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-component.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// graphic considered 'default' and displayed automatically\nactor.graphics.add(jumpAnimation)\n```\n\n----------------------------------------\n\nTITLE: Creating Child Actors with Graphics in Excalibur.js\nDESCRIPTION: Demonstrates how to create child actors with separate graphics for more control over graphic movement, transform, or behavior. This example creates a parent actor with a red rectangle and a child actor with a blue rectangle.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.2-components.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\nconst child = new ex.Actor({\n  pos: ex.vec(100, 100),\n  rotation: Math.PI / 4,\n  scale: ex.vec(3, 3)\n});\nactor.addChild(child);\nactor.graphics.use(new ex.Rectangle({width: 100, height: 100, color: ex.Color.Red}));\nchild.graphics.use(new ex.Rectangle({width: 10, height: 10, color: ex.Color.Blue}));\n```\n\n----------------------------------------\n\nTITLE: Creating Animations with Custom Frame Options in Excalibur\nDESCRIPTION: Shows how to create animations from sprite sheet coordinates with additional options for each frame, such as flipping or other graphic options.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst anim = ex.Animation.fromSpriteSheetCoordinates({\n  spriteSheet: ss,\n  frameCoordinates: [\n    {x: 0, y: 0, duration: 100, options: { flipHorizontal: true }},\n    {x: 1, y: 0, duration: 100, options: { flipVertical: true }},\n    {x: 2, y: 0, duration: 100},\n    {x: 3, y: 0, duration: 100}\n  ],\n  strategy: ex.AnimationStrategy.Freeze\n});\n```\n\n----------------------------------------\n\nTITLE: Adding LDtk Map to Scene with Custom Options\nDESCRIPTION: These examples demonstrate various ways to add an LDtk map to an Excalibur scene, including specifying a position, filtering levels, and disabling level offsets.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nldtkMap.addToScene(game.currentScene);\n\n// Optionally specify a position\nldtkMap.addToScene(game.currentScene, {pos: ex.vec(100, 100)});\n\n// Optionally list specific ldtk levels to add\nldtkMap.addToScene(game.currentScene, {levelFilter: ['level1']});\n\n// Optionally disable level offsets, levels are by default spatially positioned in ldtk this can be useful with the level filtering\nldtkMap.addToScene(game.currentScene, {useLevelOffsets: false});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ECS Components and Systems in Excalibur\nDESCRIPTION: This example demonstrates how to create and use custom components and systems in Excalibur's Entity Component System. It showcases a SearchComponent that tracks a target position and a SearchSystem that moves entities toward their targets, along with how to integrate them with actors and scenes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2021-10-03-excalibur-0-25-0-released/2021-10-03-excalibur-0-25-0-released.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SearchComponent extends ex.Component<'search'> {\n    public readonly type = 'search'\n    constructor(public target: ex.Vector) {\n        super();\n    }\n}\n\nclass SearchSystem extends ex.System<ex.TransformComponent | SearchComponent> {\n    // Types need to be listed as a const literal\n    public readonly types = ['ex.transform', 'search'] as const;\n\n    // Lower numbers mean higher priority\n    // 99 is low priority\n    public priority = 99;\n\n    // Run this system in the \"update\" phase\n    public systemType = ex.SystemType.Update\n\n    private _searchSpeed = 10 // pixels/sec\n\n    public update(entities: ex.Entity[], delta: number) {\n        for (let entity of entities) {\n            const target = entity.get(SearchComponent)!.target;\n            // ex.TransformComponent is a built in type\n            const transform = entity.get(ex.TransformComponent) as ex.TransformComponent;\n\n            const direction = target.sub(transform.pos);\n            const motion = direction.normalize().scale(this._searchSpeed);\n\n            // Moves these entities towards the target at 10 pixels per second\n            transform.pos = transform.pos.add(motion.scale(delta / 1000))\n        }\n    }\n}\n\n// Actors come with batteries included built in features\nconst actor = new ex.Actor({\n    pos: ex.vec(100, 100),\n    width: 30,\n    height: 30,\n    color: ex.Color.Red\n});\nactor.addComponent(new SearchComponent(ex.vec(400, 400)));\n\n// Create a scene with your new system\nconst scene = new ex.Scene();\nscene.world.add(new SearchSystem());\nscene.add(actor);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Pointer Events in Excalibur\nDESCRIPTION: Shows different ways to subscribe to pointer events in Excalibur, including primary pointer, specific pointer, and all pointers.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Subscribe to the primary pointer\nengine.input.pointers.primary.on;\n\n// Subscribe to a specific pointer (multi-touch)\nengine.input.pointers.at(1).on;\n\n// Subscribe to all pointers (advanced)\nengine.input.pointers.on;\n```\n\n----------------------------------------\n\nTITLE: Creating a Resources File for Image Loading in Excalibur\nDESCRIPTION: Defines a strongly-typed Resources object that contains image resources for the game. The resources are defined as ImageSource objects pointing to files in the public directory and exported as constant to preserve type information.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/11-step-images-graphics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// resources.ts\nimport * as ex from 'excalibur'\n\nexport const Resources = {\n    // Relative to /public in vite\n    BirdImage: new ex.ImageSource('./images/bird.png')\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Using Random Class in Excalibur.js\nDESCRIPTION: Demonstrates the usage of the Random class in Excalibur.js, including instantiation with a seed, generating random numbers, performing array operations, and simulating dice rolls. It covers various methods like integer, floating, bool, next, pickOne, pickSet, range, shuffle, and dice helpers.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-random.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rand = new ex.Random(1234)\n\n// random integer between [min, max]\nrand.integer(0, 10)\n\n// random floating number between [min, max]\nrand.floating(0, 10)\n\n// random true or false\nrand.bool()\n// random true or false with 40% likelihood of being true\nrand.bool(0.4)\n\n// next floating point between [0, 1]\nrand.next()\n\n// next integer between 0 and Number.MAX_SAFE_INTEGER\nrand.nextInt()\n\n// pick a random element from an array\nrand.pickOne([0, 1, 4, 10])\n\n// pick a 2 random elements from an array\nrand.pickSet([0, 1, 4, 10], 2)\n// pick a 4 random elements from an array, allowing duplicates\nrand.pickSet([0, 1, 4, 10], 4, true)\n\n// generate an array of 9 random numbers between [min, max]\nrand.range(9, 0, 10)\n\n// randomly shuffle an array using Fisher/Yates algorithm\nrand.shuffle([0, 1, 2, 3, 4])\n\n// Multi-sided dice helpers\nrand.d4()\nrand.d6()\nrand.d8()\nrand.d10()\nrand.d12()\nrand.d20()\n```\n\n----------------------------------------\n\nTITLE: Importing Excalibur Engine in TypeScript\nDESCRIPTION: Demonstrates how to import the Engine class from Excalibur using ES module syntax. This is the entry point for accessing Excalibur's functionality.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ES style import from Excalibur\nimport { Engine } from 'excalibur';\n```\n\n----------------------------------------\n\nTITLE: Creating Graphics Group with Multiple Members in TypeScript\nDESCRIPTION: Demonstrates how to create a graphics group with multiple different types of graphics including sprites, text, circles, animations, and triangles. Each member is positioned using offset vectors.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-group.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst group = new ex.GraphicsGroup({\n  useAnchor: false, // position group from the top left\n  members: [\n    {\n      graphic: newSprite,\n      offset: ex.vec(0, 0),\n    },\n    {\n      graphic: newSprite,\n      offset: ex.vec(50, 0),\n    },\n    {\n      graphic: newSprite,\n      offset: ex.vec(0, 50),\n    },\n    {\n      graphic: text,\n      offset: ex.vec(100, 20),\n    },\n    {\n      graphic: circle,\n      offset: ex.vec(50, 50),\n    },\n    {\n      graphic: anim,\n      offset: ex.vec(200, 200),\n    },\n    {\n      graphic: triangle,\n      offset: ex.vec(0, 200),\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle Directly to Graphics Context in Excalibur.js\nDESCRIPTION: This snippet demonstrates a more efficient way to draw a rectangle (e.g., for a health bar) by using the graphics context directly, instead of using the potentially expensive ex.Rectangle.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/14-performance/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet actor = new ex.Actor(...);\nactor.graphics.onPostDraw = (gfx: ExcaliburGraphicsContext) => {\n    gfx.drawRectangle(ex.vec(0,0), 100, 20, ex.Color.Blue);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Mutating Vectors\nDESCRIPTION: Shows the difference between modifying vector references and creating new vector instances using clone(). Demonstrates how vector mutation affects shared references.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-vector.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vec } from 'excalibur'\n\nconst point = vec(0, 10)\nconst samePoint = point.setTo(8, 8)\nconst anotherPoint = point.clone().setTo(50, 50)\n\nconsole.log(point.toString()) // \"(8, 8)\"\nconsole.log(samePoint.toString()) // \"(8, 8)\"\nconsole.log(anotherPoint.toString()) // \"(50, 50)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Physics Settings in Engine Constructor\nDESCRIPTION: Demonstrates the new way to configure physics settings through the Engine constructor, replacing the deprecated ex.Physics static configuration.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst engine = new ex.Engine({\n  ...\n  physics: {\n    solver: ex.SolverStrategy.Realistic,\n    gravity: ex.vec(0, 20),\n    arcade: {\n      contactSolveBias: ex.ContactSolveBias.VerticalFirst\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Last Pointer Position in Excalibur\nDESCRIPTION: Shows how to access the last known position of a pointer in different coordinate systems (page, screen, world).\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nengine.input.pointers.primary.lastPagePos;\nengine.input.pointers.primary.lastScreenPos;\nengine.input.pointers.primary.lastWorldPos;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Viewport and Resolution After Engine Creation\nDESCRIPTION: Shows how to change viewport and resolution settings after the engine has been initialized. Demonstrates getting, setting, and applying changes to the screen's viewport and resolution properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// get or set the viewport\nconst viewport = game.screen.viewport;\ngame.screen.viewport = { width: 400, height: 300 };\n\n// get or set the resolution\nconst resolution = game.screen.resolution;\ngame.screen.resolution = { width: 100, height: 100 };\n\n// Apply changes to viewport and resolution to the canvas and graphics context\ngame.screen.applyResolutionAndViewport();\n```\n\n----------------------------------------\n\nTITLE: Pixel Snapping Configuration in Excalibur.js\nDESCRIPTION: Shows how to enable snap-to-pixel rendering for pixel-perfect graphics.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    ...\n    snapToPixel: true\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Component Existence on Entities in Excalibur\nDESCRIPTION: Shows how to check if an entity has a specific component type using the has() method. This is useful for conditional logic based on component presence.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.1-entities.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = new ex.Entity()\nif (entity.has(ex.TransformComponent)) {\n  console.log('Entity has a transform component')\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Camera Bounds in Excalibur.js\nDESCRIPTION: Constrains the camera movement within defined boundaries, ensuring the camera doesn't display areas beyond the game world limits.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet boundingBox = new BoundingBox(leftBorder, topBorder, rightBorder, bottomBorder);\ngame.currentScene.camera.strategy.limitCameraBounds(boundingBox);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Basic Material in Excalibur.js\nDESCRIPTION: Demonstrates how to create a simple material that colors every pixel red and apply it to an actor's graphics in Excalibur.js. Uses the graphicsContext.createMaterial method with a GLSL fragment shader.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-material.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  pos: ex.vec(200, 200),\n  width: 100,\n  height: 100,\n  color: ex.Color.Blue // Default graphic will be modified by the material\n});\n\n// Simple material that colors every pixel red\nconst material = game.graphicsContext.createMaterial({\n  name: 'custom-material',\n  fragmentSource: `#version 300 es\n  precision mediump float;\n  out vec4 color;\n  void main() {\n    color = vec4(1.0, 0.0, 0.0, 1.0);\n  }`\n});\n\n// Material applied to the actor's graphics\nactor.graphics.material = material;\n```\n\n----------------------------------------\n\nTITLE: Playing Score Sound Effect in Excalibur.js Collision Handler\nDESCRIPTION: Demonstrates how to play a sound effect when the player scores points in the game. The code adds the sound playback to the collision handler of the score trigger component.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/15-step-sound-music.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// score-trigger.ts\n\nexport class ScoreTrigger extends ex.Actor {\n    ...\n    override onCollisionStart(): void {\n        ...\n        Resources.ScoreSound.play();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing Collision Groups\nDESCRIPTION: Example of creating collision groups and testing collision possibilities between different game objects.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-groups.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst playerGroup = ex.CollisionGroupManager.create('player')\nconst enemyGroup = ex.CollisionGroupManager.create('enemyGroup')\nconst floorGroup = ex.CollisionGroupManager.create('floorGroup')\n\nplayerGroup.canCollide(playerGroup) // false\nplayerGroup.canCollide(enemyGroup) // true\nplayerGroup.canCollide(floorGroup) // true\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic SpriteSheet in Excalibur.js\nDESCRIPTION: Creates a basic spritesheet from an image source. This snippet shows the fundamental structure for creating a spritesheet in Excalibur.js, which is an ordered collection of sprites from the same base image.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-spritesheets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst spriteSheet = new ex.SpriteSheet({\n  image: imageRun,\n  sprites: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Collision Group Based Trigger in TypeScript\nDESCRIPTION: Demonstrates using collision groups to filter trigger interactions, setting up a player actor and trigger that only interact with specific collision groups.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-triggers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst PlayerGroup = ex.CollisionGroupManager.create('player')\n\nconst player = new ex.Actor({\n  name: 'player',\n  pos: ex.vec(0, 100),\n  width: 16,\n  height: 16,\n  collisionType: ex.CollisionType.Active,\n  collisionGroup: PlayerGroup,\n  color: ex.Color.Red,\n})\n\nplayer.vel.x = 10\n\nexport const trigger = new ex.Trigger({\n  width: 16,\n  height: 16,\n  pos: ex.vec(100, 100),\n  repeat: -1,\n  action: () => {\n    console.log('triggered')\n  },\n})\ntrigger.body.group = ex.CollisionGroup.collidesWith([PlayerGroup])\n```\n\n----------------------------------------\n\nTITLE: Adding Random Number Generation with Seed Support in TypeScript\nDESCRIPTION: Adds a new ex.Random class with seed support using the Mersenne Twister algorithm for random number generation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Random\n```\n\n----------------------------------------\n\nTITLE: Suppressing HiDPI Scaling for Large Resolutions\nDESCRIPTION: Demonstrates how to suppress HiDPI scaling when using large resolutions to prevent rendering issues on mobile devices or HiDPI screens. This is useful when targeting high-resolution displays but wanting to maintain performance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  // set the viewport dimensions\n  viewport: { width: 800, height: 600 },\n\n  // sets the resolution\n  resolution: { width: 3000, height: 3000 },\n  suppressHiDPIScaling: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiled Plugin with Custom Options\nDESCRIPTION: Demonstrates how to configure the TiledResource with custom options like strict mode and Excalibur wiring.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./isometric.tmx', {\n   strict: false\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./isometric.tmx', {\n   useExcaliburWiring: false\n});\n```\n\n----------------------------------------\n\nTITLE: Locking Camera to Actor in Excalibur.js\nDESCRIPTION: Locks the camera to center on an actor's bounding box. This strategy ensures the actor remains at the center of the screen at all times.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngame.currentScene.camera.strategy.lockToActor(actor);\n```\n\n----------------------------------------\n\nTITLE: Collision Type Behavior Matrix in Markdown\nDESCRIPTION: A markdown table showing the interaction between different collision types in Excalibur. It illustrates the behavior when two actors with different collision types collide, including whether resolution occurs and if events are fired.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Collision Type | Prevent |   Passive   |       Active        |        Fixed        |\n| -------------- | :-----: | :---------: | :-----------------: | :-----------------: |\n| Prevent        |  None   |    None     |        None         |        None         |\n| Passive        |  None   | Events Only |     Events Only     |     Events Only     |\n| Active         |  None   | Events Only | Resolution & Events | Resolution & Events |\n| Fixed          |  None   | Events Only | Resolution & Events |        None         |\n```\n\n----------------------------------------\n\nTITLE: Custom Easing Function Interface in Excalibur.js\nDESCRIPTION: Defines the TypeScript interface for creating custom easing functions. The function takes current time, start value, end value, and duration as parameters to calculate the interpolated position.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.2-actions-ease.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EasingFunction {\n  (\n    currentTime: number,\n    startValue: number,\n    endValue: number,\n    duration: number\n  ): number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NineSliceConfig Type in TypeScript\nDESCRIPTION: TypeScript type definition for configuring a NineSlice graphic, including dimensions, source image, source configuration for slicing, and destination configuration for rendering behavior.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.6-nineslice.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NineSliceConfig = GraphicOptions & {\n  /*\n  overwrites the GraphicOptions width/height param, as it is required for this module\n  */\n  width: number;\n  height: number;\n\n  /*\n  source is the loaded ImageSource, which you can load manually or through a loader  \n  */\n  source: ImageSource;\n\n  /*\n  sourceConfig has all the parameters necessary to cut up the input texture properly, width and height are the overall pixel dimensions of the texture and the margins define the overall cutting boundaries in pixels\n  */\n\n  sourceConfig: {\n    width: number;\n    height: number;\n    topMargin: number;\n    leftMargin: number;\n    bottomMargin: number;\n    rightMargin: number;\n  };\n\n  /*\n  destination configuration specifies if you want center piece drawn, the '5' frame, and how you want the algorithm to manipulate the frame textures horizontally and vertically\n  */\n  destinationConfig: {\n    drawCenter: boolean;\n    horizontalStretch: NineSliceStretch; //exported enum\n    verticalStretch: NineSliceStretch; //exported enum\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Easing Functions Interface for Camera Movement in Excalibur.js\nDESCRIPTION: Defines the interface for easing functions used in camera interpolation. Shows how to use built-in easing functions for smooth camera transitions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EasingFunction {\n  (currentTime: number, startValue: number, endValue: number, duration: number): number;\n}\n\n// or any builtin\n\nconst linear = ex.EasingFunctions.Linear;\nconst easinQuad = ex.EasingFunctions.EaseInQuad;\n// ... and more!\n```\n\n----------------------------------------\n\nTITLE: Locking Camera to Actor Axis in Excalibur.js\nDESCRIPTION: Locks the camera to one axis of an actor, allowing the camera to follow the actor's movement along a single dimension.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngame.currentScene.camera.strategy.lockToActorAxis(actor, ex.Axis.X);\n```\n\n----------------------------------------\n\nTITLE: Adding Flap Sound Effect to Bird Character in Excalibur.js\nDESCRIPTION: Implements a sound effect that plays whenever the bird flaps its wings in the game. The code adds the sound playback to the bird's input handling logic within the onPostUpdate method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/15-step-sound-music.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\nexport class Bird extends ex.Actor {\n    ...\n    override onPostUpdate(engine: ex.Engine): void {\n        if (!this.playing) return;\n\n        // if the space bar or the first pointer was down\n        if (!this.jumping && this.isInputActive(engine)) {\n            ...\n            // play sound effect\n            Resources.FlapSound.play();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Strategy Enumeration in Excalibur\nDESCRIPTION: Defines the various strategies for handling animation completion in Excalibur. Options include End (stops without displaying anything), Loop (repeats from beginning), PingPong (plays forward then backward), and Freeze (stops on last frame).\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-animation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum AnimationStrategy {\n  /**\n   * Animation ends without displaying anything\n   */\n  End = 'end',\n  /**\n   * Animation loops to the first frame after the last frame\n   */\n  Loop = 'loop',\n  /**\n   * Animation plays to the last frame, then backwards to the first frame, then repeats\n   */\n  PingPong = 'pingpong',\n\n  /**\n   * Animation ends stopping on the last frame\n   */\n  Freeze = 'freeze',\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Container for FitContainer Display Mode\nDESCRIPTION: HTML structure that creates a container for the game canvas when using FitContainer display mode.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container snippet-resizer\">\n    <canvas id=\"game\"></canvas>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Options in Excalibur.js\nDESCRIPTION: This code illustrates all available configuration options for transitions, including duration, loader visibility, input blocking, easing functions, and direction settings that control how transitions behave.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/05-transitions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transition = new ex.Transition({\n  /**\n   * Transition duration in milliseconds\n   */\n  duration: 1000,\n\n  /**\n   * Optionally hides the loader during the transition\n   *\n   * If either the out or in transition have this set to true, then the loader will be hidden.\n   *\n   * Default false\n   */\n  hideLoader: false,\n\n  /**\n   * Optionally blocks user input during a transition\n   *\n   * Default false\n   */\n  blockInput: false,\n\n  /**\n   * Optionally specify a easing function, by default linear\n   */\n  easing: ex.EasingFunctions.Linear,\n  /**\n   * Optionally specify a transition direction, by default 'out'\n   *\n   * * For 'in' direction transitions start at 1 and complete is at 0\n   * * For 'out' direction transitions start at 0 and complete is at 1\n   */\n  direction: 'out',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Camera Strategy Interface in Excalibur.js\nDESCRIPTION: Defines the interface for implementing custom camera strategies. Custom strategies allow developers to create novel camera behaviors by extending this interface.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Interface that describes a custom camera strategy for tracking targets\n */\nexport interface CameraStrategy<T> {\n  /**\n   * Target of the camera strategy that will be passed to the action\n   */\n  target: T;\n\n  /**\n   * Camera strategies perform an action to calculate a new focus returned out of the strategy\n   */\n  action: (target: T, camera: Camera, engine: Engine, delta: number) => Vector;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bird Actor Class in TypeScript\nDESCRIPTION: Defines a Bird class that extends Excalibur's Actor class. It sets the initial position, size, and color of the bird.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/02-step-bird-actor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bird.ts\n\nimport * as ex from \"excalibur\";\n\nexport class Bird extends ex.Actor {\n    constructor() {\n        super({\n            pos: ex.vec(200, 300),\n            width: 16, // for now we'll use a box so we can see the rotation\n            height: 16, // later we'll use a circle collider\n            color: ex.Color.Yellow\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeating Ground Image Resource in TypeScript with Excalibur.js\nDESCRIPTION: Sets up a ground image resource with repeating wrapping mode to enable horizontal tiling. This configuration allows the image to be repeated continuously across the screen width.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/14-step-ground-graphics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// resources.ts\nexport const Resources = {\n    // Relative to /public in vite\n    ...\n    GroundImage: new ex.ImageSource('./images/ground.png', {\n        wrapping: ex.ImageWrapping.Repeat\n    })\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Creating Nine-Slice Sprites in Excalibur.js\nDESCRIPTION: Demonstrates how to implement nine-slice sprites for creating resizable UI elements with preserved borders.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvar nineSlice = new ex.NineSlice({\n  width: 300,\n  height: 100,\n  source: inputTile,\n  sourceConfig: {\n    width: 64,\n    height: 64,\n    topMargin: 5,\n    leftMargin: 7,\n    bottomMargin: 5,\n    rightMargin: 7\n  },\n  destinationConfig: {\n    drawCenter: true,\n    horizontalStretch: ex.NineSliceStretch.Stretch,\n    verticalStretch: ex.NineSliceStretch.Stretch\n  }\n});\n\nactor.graphics.add(nineSlice);\n```\n\n----------------------------------------\n\nTITLE: Using Constructor Arguments in Excalibur\nDESCRIPTION: Demonstrates different ways to use constructor arguments in Excalibur, including option bags and mass assignment of properties. It shows how to create and clone actors with various configurations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: ActorArgs = {\n   pos: new ex.Vector(1,2);\n   width: 100,\n   height: 100,\n   color: ex.Color.Red,\n}\n\nconst actor = new ex.Actor(options);\nactor.body.collisionType = ex.CollisionType.Active;\n\nconst actor = new ex.Actor({\n  pos: new ex.Vector(1, 2)\n});\nconst actorClone = new ex.Actor(actor);\n\nexpect(actor.pos).toBe(actorClone.pos); // true;\n\nactor.assign({\n  pos: new ex.Vector(100, 100),\n  width: 1000,\n  color: ex.Color.Red\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Update FPS in Excalibur Engine\nDESCRIPTION: Shows how to set up fixed update FPS for consistent physics simulation with optional interpolation control.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  fixedUpdateFps: 20 // 20 fps fixed update, or a fixed update delta of 50 milliseconds\n});\n// turn off interpolation on a per actor basis\nconst actor = new ex.Actor({...});\nactor.body.enableFixedUpdateInterpolate = false;\ngame.add(game);\n```\n\n----------------------------------------\n\nTITLE: Defining Tile Rules for Wave Function Collapse in TypeScript\nDESCRIPTION: This code snippet defines the rules for neighboring tiles in a Wave Function Collapse algorithm implementation. It specifies which tiles can be placed adjacent to each type of tile (tree, grass, treetop, water) in each direction (up, down, left, right).\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-06-01-wave-function-collapse/wfc.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet treeTileRules = {\n  up: [treeTopTile, grassTile, waterTile],\n  down: [grassTile, waterTile, treeTile],\n  left: [grassTile, waterTile, treeTile],\n  right: [grassTile, waterTile, treeTile],\n};\n\nlet grassTileRules = {\n  up: [treeTile, grassTile, waterTile],\n  down: [grassTile, waterTile, treeTile],\n  left: [grassTile, waterTile, treeTile],\n  right: [grassTile, waterTile, treeTile],\n};\n\nlet treeTopTileRules = {\n  up: [grassTile, waterTile, treeTopTile],\n  down: [treeTile],\n  left: [grassTile, waterTile, treeTile],\n  right: [grassTile, waterTile, treeTile],\n};\n\nlet waterTileRules = {\n  up: [treeTile, grassTile, waterTile],\n  down: [grassTile, waterTile, treeTile],\n  left: [grassTile, waterTile, treeTile],\n  right: [grassTile, waterTile, treeTile],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Pre-Collision Event in Excalibur (TypeScript)\nDESCRIPTION: Illustrates how to listen for the 'precollision' event on an actor or its body collider. This event fires every frame where a collision pair is found and two bodies are intersecting.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-events.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nactor.on('precollision', () => {...})\n// or\nactor.body.collider.on('precollision', () => {...})\n```\n\n----------------------------------------\n\nTITLE: Scene Activation with Custom Data\nDESCRIPTION: Demonstrates implementing onActivate hook with typed activation context and previous scene handling.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyLevelData {\n  spawnLocation: Vector;\n}\n\nclass MainMenu extends Scene<MyLevelData> {\n  private startButton: StartButton;\n\n  /**\n   * Each time the scene is entered (Engine.goToScene)\n   */\n  public onActivate(ctx: SceneActivationContext<MyLevelData>) {\n    const { spawnLocation } = ctx.data;\n    console.log(spawnLocation);\n    if (ctx.previousScene instanceof Level) {\n      this.startButton.text = 'Resume game';\n    } else {\n      this.startButton.text = 'Start game';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Main File to Use Custom Scene in Excalibur.js\nDESCRIPTION: This snippet shows how to modify the main.ts file to register and use the new 'Level' scene. It creates an Excalibur Engine instance with the Level scene, starts the game, and then switches to the Level scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/06-step-refactor-to-scene.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport * as ex from 'excalibur';\nimport { Level } from './level';\n\nconst game = new ex.Engine({\n  ...\n  scenes: { Level: Level }\n});\n\ngame.start().then(() => {\n  game.goToScene('Level');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Drawing in Excalibur\nDESCRIPTION: Demonstrates how to use custom drawing in Excalibur with the new Canvas class and updated graphics methods. This replaces the legacy onPostDraw and onPreDraw methods.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = new ex.Canvas({\n  cache: true,\n  draw: (ctx: CanvasRenderingContext2D) => {\n    // custom drawing with CanvasRenderingContext2D\n  },\n})\n\nactor.use(canvas)\n\nactor.graphics.onPreDraw = (exctx: ExcaliburGraphicsContext) => {\n  // custom drawing with ExcaliburGraphicsContext\n}\n\nactor.graphics.onPostDraw = (exctx: ExcaliburGraphicsContext) => {\n  // custom drawing with ExcaliburGraphicsContext\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Mapping for Bundlers in Excalibur Tiled Plugin\nDESCRIPTION: This code snippet shows how to set up path mapping in the Excalibur Tiled plugin to handle asset relocation in bundled builds. It demonstrates both direct path mapping and regex-based matching for file paths.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./example-city.tmx', {\n    pathMap: [\n       // If the \"path\" is included in the source path, the output will be used\n       { path: 'cone.tx', output: '/static/assets/cone.tx' },\n       // Regex matching with special [match] in output string that is replaced with the first match from the regex\n       { path: /(.*\\..*$)/, output: '/static/assets/[match]'}\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Scaling for Excalibur UI Elements\nDESCRIPTION: CSS examples for scaling UI elements to match Excalibur's pixel ratio using CSS transforms and calculations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/01-html.mdx#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.excalibur-scale {\n    /* transform from the top left of the element */\n    transform-origin: 0 0;\n    /* scale the ui */\n    transform: scale(var(--pixel-conversion), var(--pixel-conversion));\n}\n\n.text {\n  /* Convert to excalibur 24px from page 24px */\n  font-size: calc(24px * var(--pixel-conversion));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text to an Actor in Excalibur.js\nDESCRIPTION: Shows how to add a Text graphic to an Actor in a game scene. The example creates a text graphic with multiple lines, creates an actor at position (100, 100), attaches the text to the actor, and adds the actor to the current scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\nconst text = new ex.Text({\n    text: 'Some Text Drawn Here\\nNext line'\n});\n\nconst actor = new ex.Actor({\n    pos: ex.vec(100, 100)\n});\nactor.graphics.use(text);\n\ngame.currentScene.add(actor);\n```\n\n----------------------------------------\n\nTITLE: Implementing JSFXR Sound Effects in Excalibur.js\nDESCRIPTION: Example of how to use the JSFXR plugin to create, load, and play sound effects. The code demonstrates defining sound configurations, initializing the JSFXR library, loading sound configs, and playing sounds.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SoundConfig } from \"@excaliburjs/plugin-jsfxr\";\nexport const sounds: { [key: string]: SoundConfig } = {};\n\n\n// Generate configs https://excaliburjs.com/sample-jsfxr/\nsounds[\"pickup\"] = {\n  oldParams: true,\n  wave_type: 1,\n  p_env_attack: 0,\n  p_env_sustain: 0.02376922019231107,\n  p_env_punch: 0.552088780864157,\n  p_env_decay: 0.44573175628456596,\n  p_base_freq: 0.6823818961421457,\n  p_freq_limit: 0,\n  p_freq_ramp: 0,\n  p_freq_dramp: 0,\n  p_vib_strength: 0,\n  p_vib_speed: 0,\n  p_arp_mod: 0,\n  p_arp_speed: 0,\n  p_duty: 0,\n  p_duty_ramp: 0,\n  p_repeat_speed: 0,\n  p_pha_offset: 0,\n  p_pha_ramp: 0,\n  p_lpf_freq: 1,\n  p_lpf_ramp: 0,\n  p_lpf_resonance: 0,\n  p_hpf_freq: 0,\n  p_hpf_ramp: 0,\n  sound_vol: 0.25,\n  sample_rate: 44100,\n  sample_size: 16,\n};\n\nlet sndPlugin = new JsfxrResource();\nsndPlugin.init(); //initializes the JSFXR library\nfor (const sound in sounds) {\n  sndPlugin.loadSoundConfig(sound, sounds[sound]);\n}\n\n\n// play\nsndPlugin.playSound(\"pickup\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Ground Class in Excalibur.js (TypeScript)\nDESCRIPTION: This code defines a Ground class extending Excalibur's Actor. It sets up the ground's position, dimensions, color, and z-index. The class includes methods to start and stop movement.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/03-step-bird-and-ground.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ground.ts\nimport * as ex from \"excalibur\";\n\nexport class Ground extends ex.Actor {\n    moving = false;\n    constructor(pos: ex.Vector) {\n        super({\n            pos,\n            anchor: ex.vec(0, 0),\n            height: 64,\n            width: 400,\n            color: ex.Color.fromHex('#bd9853'),\n            z: 1 // position the ground above everything\n        })\n    }\n    \n    start() {\n        this.moving = true;\n    }\n\n    stop() {\n        this.moving = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Promises in Excalibur\nDESCRIPTION: Explains how to use promises in Excalibur, particularly with the Engine.start method. It also covers handling errors with promises and mentions the ongoing work to use native ES2015 Promises.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/99-utilities.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst game = new ex.Engine();\n// perform start-up logic once game is ready\ngame.start().then(function () {\n  // start-up & initialization logic\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst game = new ex.Engine();\ngame.start().then(\n  // success handler\n  function () {},\n  // error handler\n  function (err) {}\n);\n```\n\n----------------------------------------\n\nTITLE: Using Static Debug Draw API in Excalibur\nDESCRIPTION: Example of using the new Static Debug Draw API to visualize rays and vectors during game development.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonPreUpdate(engine: ex.Engine, elapsedMs: number): void {\n    this.vel = ex.Vector.Zero;\n\n    this.graphics.use('down-idle');\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowRight)) { ... }\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowLeft)) { ... }\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowUp)) { ... }\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowDown)) { ... }\n\n    ex.Debug.drawRay(new ex.Ray(this.pos, this.vel), { distance: 100, color: ex.Color.Red });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Collision Groups in Excalibur\nDESCRIPTION: This snippet demonstrates how to create and configure collision groups in Excalibur to control which game entities can collide with each other. It shows how to define distinct collision categories and establish collision rules without relying on collision event handlers.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2021-10-03-excalibur-0-25-0-released/2021-10-03-excalibur-0-25-0-released.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a group for each distinct category of \"collidable\" in your game\nconst playerGroup = ex.CollisionGroupManager.create('player');\nconst npcGroup = ex.CollisionGroupManager.create('npcGroup');\nconst floorGroup = ex.CollisionGroupManager.create('floorGroup');\nconst enemyGroup = ex.CollisionGroupManager.create('enemyGroup');\n\n// Define your rules\nconst playersCanCollideWith = ex.CollisionGroup.collidesWith([\n  playersGroup, // collide with other players\n  floorGroup, // collide with the floor\n  enemyGroup // collide with enemies\n]);\n\nconst player = new ex.Actor({\n  collisionGroup: playersCanCollideWith\n});\n```\n\n----------------------------------------\n\nTITLE: Using Perlin Noise Generator in Excalibur\nDESCRIPTION: Shows how to use the new Perlin noise generation helper for 1D, 2D, and 3D noise.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet perlinGenerator = new ex.PerlinGenerator();\n\n// Generate 1D noise\nlet noise1D = perlinGenerator.noise1D(x);\n\n// Generate 2D noise\nlet noise2D = perlinGenerator.noise2D(x, y);\n\n// Generate 3D noise\nlet noise3D = perlinGenerator.noise3D(x, y, z);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Update FPS in Excalibur Engine\nDESCRIPTION: Demonstrates how to initialize an Excalibur game engine instance with a fixed update FPS setting. This example sets the fixed update rate to 30 frames per second for stable physics calculations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-b-fixed-update.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar game = new ex.Engine({\n  fixedUpdateFps: 30,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Canvas Graphics in Excalibur\nDESCRIPTION: Demonstrates how to create a custom Canvas graphic and use it with an Actor in Excalibur. The example shows creating a red rectangle using the CanvasRenderingContext2D.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = new ex.Canvas({\n  cache: true, // If true draw once until flagged dirty again, otherwise draw every time\n  draw: (ctx: CanvasRenderingContext2D) => {\n    ctx.fillStyle = 'red';\n    ctx.fillRect(0, 0, 200, 200);\n  }\n});\n\nclass Player extends ex.Actor {\n  public onInitialize(engine: ex.Engine) {\n    // set as the \"default\" drawing\n    this.graphics.use(canvas);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Animation in Excalibur\nDESCRIPTION: Demonstrates how to create a basic animation by combining different graphic elements including sprites, shapes, and polygons. Each frame has a specified duration in milliseconds defining how long it appears during playback.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-animation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @include: ex\n// ---cut---\n// @include: animation\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Colliders to TileMap Tiles in Excalibur\nDESCRIPTION: Shows how to add custom colliders to individual tiles in a TileMap, allowing for more complex collision shapes within the tilemap structure.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst tileMap = new ex.TileMap(...);\nconst tile = tileMap.getTile(0, 0);\ntile.solid = true;\ntile.addCollider(...); // add your custom collider!\n```\n\n----------------------------------------\n\nTITLE: Using Debug Drawing API in Excalibur (TypeScript)\nDESCRIPTION: The debug drawing API allows developers to visualize game elements during development. This snippet shows the available debug drawing methods that can be used anywhere in your game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nex.Debug.drawRay(ray: Ray, options?: { distance?: number, color?: Color })\nex.Debug.drawBounds(boundingBox: BoundingBox, options?: { color?: Color })\nex.Debug.drawCircle(center: Vector, radius: number, options?: ...)\nex.Debug.drawPolygon(points: Vector[], options?: { color?: Color })\nex.Debug.drawText(text: string, pos: Vector)\nex.Debug.drawLine(start: Vector, end: Vector, options?: LineGraphicsOptions)\nex.Debug.drawLines(points: Vector[], options?: LineGraphicsOptions)\nex.Debug.drawPoint(point: Vector, options?: PointGraphicsOptions)\n```\n\n----------------------------------------\n\nTITLE: Defining System Priorities in TypeScript\nDESCRIPTION: Defines constant priority levels for system execution order. Lower numbers indicate higher priority and earlier execution.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.3-systems.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Higher priorities run earlier than others in the system update\n */\nexport const SystemPriority = {\n  Highest: -Infinity,\n  Higher: -5,\n  Average: 0,\n  Lower: 5,\n  Lowest: Infinity\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom Actor in Excalibur\nDESCRIPTION: Shows how to override the onInitialize method in a custom actor class to perform startup logic. It sets initial values for endurance and fortitude properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  public level = 1;\n  public endurance = 0;\n  public fortitude = 0;\n\n  constructor() {\n    super({ x: 50, y: 50 });\n  }\n\n  public onInitialize(_engine: ex.Engine) {\n    this.endurance = 20;\n    this.fortitude = 16;\n  }\n\n  public getMaxHealth() {\n    return 0.4 * this.endurance + 0.9 * this.fortitude + this.level * 1.2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Finite Action Repetition in Excalibur.js\nDESCRIPTION: Demonstrates how to repeat a sequence of actions a specific number of times using the repeat method. The example shows a zig-zag movement pattern that repeats 5 times using moveBy actions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.4-actions-repeat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nactor.actions.repeat((repeatCtx) => {\n  repeatCtx.moveBy(10, 0, 10)\n  repeatCtx.moveBy(0, 10, 10)\n}, 5)\n```\n\n----------------------------------------\n\nTITLE: Collision Group Mask Implementation\nDESCRIPTION: Shows how collision group masks are implemented using binary flags to determine collision possibilities.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-groups.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nplayersGroupMask = 0b11111111_11111111_11111111_11111110\nenemyGroupMask = 0b11111111_11111111_11111111_11111101\nfloorGroupMask = 0b11111111_11111111_11111111_11111011\n```\n\n----------------------------------------\n\nTITLE: Ray Cast Hit Filtering in TypeScript\nDESCRIPTION: Example of implementing custom hit filtering logic for ray casting results using a filter callback function.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-ray.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nscene.physics.rayCast(ray, {\n  filter: (potentialHit: RayCastHit) => {\n    // return true to accept the hit\n    // return false to reject the hit\n    return true;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bezier Curves and Actions in Excalibur\nDESCRIPTION: Demonstrates player movement actions including rotation, movement, scaling, and bezier curve paths with control points.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nplayer.actions.rotateTo({angleRadians: angle, duration: 1000, rotationType});\nplayer.actions.moveTo({pos: ex.vec(100, 100), duration: 1000});\nplayer.actions.scaleTo({scale: ex.vec(2, 2), duration: 1000});\nplayer.actions.repeatForever(ctx => {\n  ctx.curveTo({\n    controlPoints: [cp1, cp2, dest],\n    duration: 5000,\n    mode: 'uniform'\n  });\n  ctx.curveTo({\n    controlPoints: [cp2, cp1, start1],\n    duration: 5000,\n    mode: 'uniform'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tiled Map to Excalibur Scene with Position\nDESCRIPTION: Shows how to add a loaded TiledResource map to an Excalibur scene, optionally specifying a position.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource(...);\n\n// Load tiledMap here\n\ntiledMap.addToScene(game.currentScene);\n\n// Optionally specify a position\ntiledMap.addToScene(game.currentScene, {pos: ex.vec(100, 100)});\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Scene Transition in Excalibur.js\nDESCRIPTION: Demonstrates how to use the new ex.Slide scene transition to create sliding screen transitions with customizable direction and easing functions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngame.goToScene('otherScene', {\n  destinationIn: new ex.Slide({\n    duration: 1000,\n    easingFunction: ex.EasingFunctions.EaseInOutCubic,\n    slideDirection: 'up'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Collision Group Categories Example\nDESCRIPTION: Demonstrates the binary representation of collision group categories for different game objects.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-groups.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nplayersGroupCategory = 0b0001\nenemyGroupCategory = 0b0010\nfloorGroupCategory = 0b0100\n```\n\n----------------------------------------\n\nTITLE: Actor Graphics Component Drawing in Excalibur.js\nDESCRIPTION: Demonstrates how to implement pre-draw and post-draw functionality for an Actor's graphics component.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\nconst actor = new ex.Actor({pos: ex.vec(100, 100)});\ngame.currentScene.add(actor);\ngame.start();\n\nactor.graphics.onPreDraw = (ctx: ExcaliburGraphicsContext) => {\n    ctx.save();\n    ctx.drawRectangle(...);\n    ctx.restore();\n}\n\nactor.graphics.onPostDraw = (ctx: ExcaliburGraphicsContext) => {\n    ctx.save();\n    ctx.drawRectangle(...);\n    ctx.restore();\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Color Blindness with PostProcessor in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to simulate deuteranope color blindness using the ColorBlindnessPostProcessor in Excalibur.js. It creates a new Engine instance and adds a post-processor to simulate deuteranope vision.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-post-processors/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\n// simulate deuteranope\nconst colorblind = new ex.ColorBlindnessPostProcessor(ex.ColorBlindnessMode.Deuteranope, true);\n\ngame.graphicsContext.addPostProcessor(colorblind);\n```\n\n----------------------------------------\n\nTITLE: Installing JSFXR Plugin for Excalibur.js\nDESCRIPTION: Command for installing the JSFXR plugin for Excalibur.js using npm. This plugin allows for programmatic creation of small sound effects without needing large audio files.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @excaliburjs/plugin-jsfxr\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiled Map Background Color in Excalibur\nDESCRIPTION: Demonstrates how to configure the TiledResource to use the map's background color from Tiled.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./isometric.tmx', {\n   useMapBackgroundColor: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Grid and Tilemap with Perlin Noise in Excalibur.js\nDESCRIPTION: Sets up a grid system using Excalibur.js TileMap and initializes it with random values generated using Perlin noise. Creates a 7x7 grid with blue and white tiles representing binary states.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-6-16-cellular-automata/cellularautonoma.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiles:number[]=new Array(49);\n\n// define the blue and white tiles for the TileMap\nexport const blueTile = new Rectangle({ width: 16, height: 16, color: Color.fromRGB(0, 0, 255, 1) });\nexport const whiteTile = new Rectangle({ width: 16, height: 16, color: Color.fromRGB(255, 255, 255, 1) });\n\n//Utilizing PerlinNoise plug-in for Excalibur\ngenerator = new PerlinGenerator({\n    seed: Date.now(), // random seed\n    octaves: 2, \n    frequency: 24, \n    amplitude: 0.91, \n    persistance: 0.95, \n  });\n\n// This uses the TileMap object from Excalibur\nexport const tmap = new TileMap({\n  tileWidth: 16,\n  tileHeight: 16,\n  columns: 7,\n  rows: 7,\n});\n\n// Using the Perlin Noise Field, fill the Tilemap and tiles array with data\nlet tileIndex = 0;\nfor (const tile of tmap.tiles) {\n  const noise = generator.noise(tile.x / tmap.columns, tile.y / tmap.rows);\n  if (noise > 0.5) {\n    tiles[tileIndex] = 1;\n    tile.addGraphic(blueTile);\n  } else {\n    tiles[tileIndex] = 0;\n    tile.addGraphic(whiteTile);\n  }\n  tileIndex++;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Excalibur Canvas Overlay\nDESCRIPTION: Basic HTML template showing how to structure a page with an Excalibur canvas and overlaid HTML UI elements.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/01-html.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <style>\n    html,body {\n      padding: 0;\n      margin: 0;\n      background-color: black;\n    }\n\n    /* optionally center the game */\n    #game {\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n    }\n\n    .menu {\n      position: absolute;\n      top: 10px;\n      left: 10px;\n    }\n  </style>\n</head>\n<body>\n  <main>\n    <canvas id=\"game\"></canvas>\n    <div class=\"menu\">\n      <button>Add Unit</button>\n    </div>\n  </main>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Targeted Trigger Implementation in TypeScript\nDESCRIPTION: Creates a trigger that only fires for a specific target actor, such as a player. This overrides any filters that might be present.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-triggers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst player = new ex.Actor({...})\n\n// Example trigger will fire on any geometry\nconst trigger = new ex.Trigger({\n  width: 100,\n  height: 100,\n  pos: ex.vec(100, 100),\n  target: player, // only trigger logic on player\n  action: () => {\n    console.log('triggered')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Trigger Implementation in TypeScript\nDESCRIPTION: Creates a basic trigger that fires on any geometry intersection. The trigger has a specified size, position, and can repeat infinitely with a repeat value of -1.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/11-triggers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst trigger = new ex.Trigger({\n  width: 100,\n  height: 100,\n  pos: ex.vec(100, 100),\n  repeat: -1,\n  action: () => {\n    console.log('triggered')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Serving Files Locally for Excalibur.js Development\nDESCRIPTION: Provides commands for using the 'serve' NPM package to create a local web server for Excalibur.js development. This is necessary because the asset loader requires a web server to function properly.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-resources.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Serve the current directory\nnpx serve .\n\n# Serve a folder\nnpx serve ./dist\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Wrapping in Excalibur\nDESCRIPTION: Demonstrates how to set up image wrapping options for an ImageSource in Excalibur, including filtering and wrapping modes for both x and y axes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst image = new ex.ImageSource('path/to/image.png', {\n  filtering: ex.ImageFiltering.Pixel,\n  wrapping: {\n    x: ex.ImageWrapping.Repeat,\n    y: ex.ImageWrapping.Repeat,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Objects from Tiled Layers in Excalibur\nDESCRIPTION: Shows how to query objects from Tiled layers in Excalibur, including searching by class name, name, and properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource(...);\n\n// load resource here\n\n// Search all object layers\nlet objects: PluginObjects[] = [];\nobjects = tiledMap.getObjectsByClassName('coin');\nobjects = tiledMap.getObjectsByName('Player');\nobjects = tiledMap.getEntitiesByProperty('credits', 10);\n\n// Get excalibur entity/actor by plugin object\nlet entity = tiledMap.getEntityByObject(objects[0]);\n\n// Search a specific layer\nlet layer = tiledMap.getObjectLayers('enemies')[0];\nlet enemies: PluginObjects[] = [];\nenemies = layer.getObjectsByClassName('skeleton');\nenemies = layer.getObjectsByName('Boss');\nenemies = layer.getEntitiesByProperty('hitPoints', 100);\n\n// Get excalibur entity/actor by plugin object\nlet enemyEntity = layer.getEntityByObject(enemies[0]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Ground Sprite with Screen Width in Excalibur.js\nDESCRIPTION: Sets up the ground sprite to span the entire screen width by adjusting the sourceView and destSize properties. This makes the tiled ground image extend across the full game screen.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/14-step-ground-graphics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ground.ts\n    onInitialize(engine: ex.Engine): void {\n        this.groundSprite.sourceView.width = engine.screen.drawWidth;\n        this.groundSprite.destSize.width = engine.screen.drawWidth;\n        this.graphics.use(this.groundSprite);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Vectors Using Vector Constructor\nDESCRIPTION: Shows the traditional way of creating vectors using the Vector class constructor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-vector.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Vector } from 'excalibur'\n\nconst point = new Vector(0, 10)\n```\n\n----------------------------------------\n\nTITLE: GPU Particle System Implementation\nDESCRIPTION: Complex implementation of a firework particle system using GPU-accelerated particles with transform feedback for optimal performance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Firework extends Actor {\n    random: Random;\n    trail: GpuParticleEmitter;\n    explosion: GpuParticleEmitter;\n    explosion2: GpuParticleEmitter;\n    life: number;\n    body: BodyComponent;\n    originalPos: Vector;\n    inProgress: boolean = false;\n\n    constructor(pos: Vector, life: number, random: Random) {\n        super({ name: \"Firework\" })\n        this.random = random;\n        this.originalPos = pos.clone();\n        this.pos = pos;\n        this.acc = vec(0, 800);\n\n        this.body = new BodyComponent();\n        this.life = life;\n\n        this.trail = new GpuParticleEmitter({\n            isEmitting: false,\n            emitRate: 70,\n            particle: {\n                life: 1000,\n                endColor: Color.White,\n                beginColor: Color.White,\n                minSpeed: 10,\n                maxSpeed: 30,\n                startSize: 3,\n                endSize: 0,\n                fade: true,\n                acc: vec(0, 50),\n            }\n        });\n\n        this.explosion = new GpuParticleEmitter({\n            isEmitting: false,\n            particle: {\n                life: 2000,\n                fade: true,\n                startSize: 5,\n                endSize: 2,\n                minSpeed: 10,\n                maxSpeed: 200,\n                acc: vec(0, 100),\n                beginColor: this.randomColor(),\n                endColor: this.randomColor()\n            }\n        });\n        this.explosion2 = new GpuParticleEmitter({\n            isEmitting: false,\n            particle: {\n                life: 1000,\n                fade: true,\n                startSize: 5,\n                endSize: 2,\n                minSpeed: 10,\n                maxSpeed: 200,\n                acc: vec(0, 100),\n                beginColor: this.randomColor(),\n                endColor: this.randomColor()\n            }\n        });\n\n        this.addChild(this.trail);\n        this.addChild(this.explosion);\n        this.addChild(this.explosion2);\n    }\n\n    private _colors = [\n        Color.fromHex(\"#ff0000\"),\n        Color.fromHex(\"#0078ff\"),\n        Color.fromHex(\"#ffffff\"),\n        Color.fromHex(\"#d059c5\"),\n        Color.fromHex(\"#dff241\"),\n        Color.fromHex(\"#05ff1c\"),\n        Color.fromHex(\"#ffdf00\"),\n        Color.fromHex(\"#3e00f9\"),\n        Color.fromHex(\"#ff5fc0\"),\n        Color.fromHex(\"#ff3f3f\"),\n        Color.fromHex(\"#f66706\"),\n    ]\n\n    private randomColor(): Color {\n        return this.random.pickOne(this._colors);\n    }\n\n    launch() {\n        if (this.inProgress) return;\n        this.inProgress = true;\n        this.pos = this.originalPos;\n\n        coroutine(this.scene!.engine, (function*(this: Firework) {\n            this.vel = vec(this.random.floating(-200, 200), this.random.floating(-800, -1000));\n            this.trail.isEmitting = true;\n            let hasExploded = false;\n            let life = this.life;\n            while (life > 0) {\n                const elapsed = yield;\n                life -= elapsed;\n                if (this.vel.y >= 0 && !hasExploded) {\n                    hasExploded = true;\n                    this.trail.isEmitting = false;\n                    this.explosion.emitParticles(500);\n                    this.explosion2.emitParticles(500);\n                }\n            }\n            this.trail.clearParticles();\n            this.explosion.clearParticles();\n            this.explosion2.clearParticles();\n            this.inProgress = false;\n        } as CoroutineGenerator).bind(this))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Active-Active/Active-Fixed Physics Scenario\nDESCRIPTION: Complete example showing how to set up realistic physics with multiple actors including active and fixed collision types, gravity, and different collider shapes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-a-physics.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// setup game\nconst game = new ex.Engine({\n  width: 600,\n  height: 400,\n  physics: {\n    // use rigid body realistic\n    solver: ex.SolverStrategy.Realistic,\n\n    // set global acceleration simulating gravity pointing down\n    gravity: ex.vec(0, 700)\n  }\n});\nconst block = new ex.Actor({\n  pos: new ex.Vector(300, 0),\n  width: 20,\n  height: 20,\n  color: ex.Color.Blue\n});\nblock.body.useBoxCollider(); // useBoxCollision is the default, technically optional\nblock.body.collider.type = ex.CollisionType.Active;\ngame.add(block);\n\nconst circle = new ex.Actor({\n  x: 301,\n  y: 100,\n  width: 20,\n  height: 20,\n  color: ex.Color.Red\n});\ncircle.body.useCircleCollider(10);\ncircle.body.collider.type = ex.CollisionType.Active;\ngame.add(circle);\n\nconst ground = new ex.Actor({\n  x: 300,\n  y: 380,\n  width: 600,\n  height: 10,\n  color: ex.Color.Black;\n});\n\nground.body.useBoxCollider(); // optional\nground.body.collider.type = ex.CollisionType.Fixed;\n\ngame.add(ground);\n// start the game\n\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Loading Fonts with FontSource in Excalibur.js\nDESCRIPTION: Demonstrates basic font loading using FontSource resource type. Shows how to add a font to the loader and convert it to an Excalibur Font instance after game start.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/03-web-fonts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fontSource = new ex.FontSource('/my-font.ttf', 'My Font')\nloader.addResource(fontSource)\n\ngame.start(loader).then(() => {\n  const font = fontSource.toFont() // returns ex.Font\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Available GOAP Actions\nDESCRIPTION: List of available actions that an AI agent can perform in the simulation, including movement and resource collection.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-04-29-goap-npc-ai/goapblog.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nplayer.goapActions = [\n  feedFireAction,\n  collectWoodAction,\n  moveToTreeAction,\n  moveToFireAction,\n  moveToTree2Action,\n  collectWood2Action,\n  moveToTree3Action,\n  collectWood3Action,\n  runAwayAction,\n  relaxAction,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Canvas 2D Fallback in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to configure the performance canvas 2D fallback in Excalibur.js. It allows developers to opt-out of the fallback, show a player message, and customize the threshold for triggering the fallback.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/14-performance/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar game = new ex.Engine({\n    ...\n    configurePerformanceCanvas2DFallback: {\n    allow: true, // opt-out of the fallback\n    showPlayerMessage: true, // opt-in to a player pop-up message\n    threshold: { fps: 20, numberOfFrames: 100 } // configure the threshold to trigger the fallback\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Vector Values\nDESCRIPTION: Demonstrates how to modify an existing vector's values using the setTo method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-vector.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vec } from 'excalibur'\n\nconst point = vec(0, 10).setTo(10, 10)\n```\n\n----------------------------------------\n\nTITLE: Adding Graphics to Isometric Tiles\nDESCRIPTION: Demonstrates how to load and add graphics to isometric tiles, with graphics drawn from the bottom left to maintain proper tile placement illusion.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-isometricmap.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst isoMap = new ex.IsometricMap({...});\n\nconst image = new ex.ImageSource('./path/to/image.png');\nawait image.load();\n\nconst sprite = image.toSprite();\n\nfor (let tile of isoMap.tiles) {\n    tile.addGraphic(sprite);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tiles from Tiled Map in Excalibur\nDESCRIPTION: Shows how to retrieve tile information from a TiledResource map using world position or integer coordinates.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource(...);\n\n// Load tiled map here\n\n// Specify a layer and world position\nconst tile: TileInfo = tiledMap.getTileByPoint('ground', ex.vec(200, 100));\n\n// Specify an integer coordinate\nconst tile: TileInfo = tiledMap.getTileByCoordinate('ground', 0, 2);\n\nconsole.log(tile.tiledTile); // Tiled information for the tile\nconsole.log(tile.exTile); // Excalibur Tile object\n```\n\n----------------------------------------\n\nTITLE: Configuring Gamepad Filtering in Excalibur.js\nDESCRIPTION: Sets minimum requirements for gamepad devices to filter out unwanted input devices like touchpads and mice. Requires at least 4 axes and 8 buttons to be considered a valid gamepad.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.4-gamepad.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nengine.input.gamepads.setMinimumGamepadConfiguration({\n  axis: 4,\n  buttons: 8,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Renderer Plugin in Excalibur\nDESCRIPTION: Demonstrates how to register a custom renderer plugin with the Excalibur graphics context and use it in an actor's graphics callback.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/99.0-custom-renderer-plugins.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\ngame.start().then(() => {\n    // register\n    game.graphicsContext.register(new MyCustomRenderer());\n});\n\n// call from a graphics callback or event\nconst actor = new ex.Actor({...});\nactor.graphics.onPostDraw = (graphicsContext) => {\n    graphicsContext.draw<MyCustomRenderer>('myrenderer', ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Colors in Excalibur\nDESCRIPTION: Demonstrates various methods to create colors in Excalibur, including RGBA, HSLA, and Hex formats. Also shows how to convert a color to a string representation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-color.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// RGBA\nnew ex.Color(r, g, b, a)\nex.Color.fromRGB(r, g, b, a)\n\n// HSLA\nex.Color.fromHSL(h, s, l, a)\n// Hex, alpha optional\nex.Color.fromHex('#000000')\nex.Color.fromHex('#000000FF')\n\n// String representation of a color with rgb as default\n// Options include rgb,hsl,hex\nex.Color.toString('rgb')\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Sprites in Excalibur\nDESCRIPTION: Demonstrates how to create an ImageSource, convert it to a Sprite, and use the new Sprite constructor in Excalibur. This snippet shows the updated syntax for working with images and sprites.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ex.ImageSource('./img/myimage.png')\n// keep in mind this wont work until the image source is loaded\nconst sprite = image.toSprite()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ex.ImageSource('./path/to/image.png')\nconst sprite = new ex.Sprite({\n  image: image,\n  sourceView: {\n    // Take a small slice of the source image starting at pixel (10, 10) with dimension 20 pixels x 20 pixels\n    x: 10,\n    y: 10,\n    width: 20,\n    height: 20,\n  },\n  destSize: {\n    // Optionally specify a different projected size, otherwise use the source\n    width: 100,\n    height: 100,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating gCost in A* Algorithm using JavaScript\nDESCRIPTION: This snippet demonstrates how to calculate the gCost (distance from start node) for a tile in the A* algorithm using the Pythagorean theorem.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-05-25-pathfinding-part2/pathfindingpart2.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngCost = Math.sqrt(Math.pow((1-0), 2) + Math.pow((1-0)), 2));\n```\n\n----------------------------------------\n\nTITLE: Setting Pointer Scope in Excalibur Engine\nDESCRIPTION: Demonstrates how to set the pointer scope when creating a new Excalibur Engine instance, either to Canvas or Document.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  pointerScope: ex.PointerScope.C\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  pointerScope: ex.PointerScope.D\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Actor by Relative Positions using MoveBy in TypeScript\nDESCRIPTION: Shows how to move an actor relative to its current position using the MoveBy action. Starting from position (200, 200), the actor moves in a square pattern at 200 pixels per second using relative positioning.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.2-actions-move.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  pos: ex.vec(200, 200),\n})\n\n// move in a square at 200 pixels/second\n// Actor will move relative to it's current (200, 200) position\nactor.actions\n  .moveBy(ex.vec(100, 0), 200)\n  .moveBy(ex.vec(100, 100), 200)\n  .moveBy(ex.vec(0, 100), 200)\n  .moveBy(ex.vec(0, 0), 200)\n```\n\n----------------------------------------\n\nTITLE: Implementing FitScreen Display Mode in Excalibur\nDESCRIPTION: Configures the game to fit the screen while maintaining aspect ratio and resolution. Similar to fullscreen but doesn't use the fullscreen API.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    width: 600,\n    height: 400,\n    displayMode: ex.DisplayMode.FitScreen\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom WebGL Context Handlers in Excalibur\nDESCRIPTION: Demonstrates how to add custom handlers for WebGL context lost and restored events when initializing an Excalibur game engine.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst game = new ex.Engine({\n  handleContextLost: (e) => {...},\n  handleContextRestored: (e) => {...}\n})\n```\n\n----------------------------------------\n\nTITLE: Repeating Actions in Excalibur TypeScript\nDESCRIPTION: Shows how to use the updated repeat() method for Actor actions in Excalibur, which now requires a handler function to specify the actions to repeat.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor();\n\nactor.actions\n  // Move up in a zig-zag by repeating 5 times\n  .repeat((ctx) => {\n    ctx.moveBy(10, 0, 10);\n    ctx.moveBy(0, 10, 10);\n  }, 5)\n  .callMethod(() => {\n    console.log('Done repeating!');\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Excalibur Game Deployment\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for deploying an Excalibur game. It references an example workflow file used in a Ludum Dare 50 project.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/16-hosting.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nExample using github pages https://github.com/excaliburjs/ludum-50/blob/main/.github/workflows/main.yml\n```\n\n----------------------------------------\n\nTITLE: Registering Entity Factory for Custom Player Creation\nDESCRIPTION: This example demonstrates how to register a custom entity factory for a specific entity identifier ('PlayerStart'). It creates a custom Player entity and sets up camera following behavior.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngame.start(loader).then(() => {\n    console.log('Game start!');\n\n    ldtkResource.registerEntityIdentifierFactory('PlayerStart', (props) => {\n        const player = new Player({\n            name: 'player',\n            anchor: ex.vec(props.entity.__pivot[0],props.entity.__pivot[1]),\n            width: props.entity.width,\n            height: props.entity.height,\n            pos: props.worldPos,\n            z: props.layer.order\n        });\n        // Also run custom code\n        game.currentScene.camera.strategy.lockToActor(player);\n        return player;\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Vectors Using vec Function\nDESCRIPTION: Demonstrates how to create a vector using the vec global function, which is the recommended shorthand method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-vector.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vec } from 'excalibur'\n\nconst point = vec(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Enabling LDtk Map Background Color in Excalibur\nDESCRIPTION: This code shows how to configure the LDtk resource to use the background color specified in the LDtk level. It will use the background color from the first level in the LDtk world.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./isometric.tmx', {\n   useMapBackgroundColor: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Outline Effect with GLSL in Excalibur.js\nDESCRIPTION: A GLSL fragment shader that creates a rainbow outline effect around graphic elements. The shader samples pixels in a circular pattern around the current pixel to create the outline effect.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-material.mdx#2025-04-16_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\n#version 300 es\nprecision mediump float;\n\nuniform float u_time_ms;\nuniform sampler2D u_graphic;\n\nin vec2 v_uv;\nin vec2 v_screenuv;\nout vec4 fragColor;\n\nvec3 hsv2rgb(vec3 c){\n  vec4 K=vec4(1.,2./3.,1./3.,3.);\n  return c.z*mix(K.xxx,clamp(abs(fract(c.x+K.xyz)*6.-K.w)-K.x, 0., 1.),c.y);\n}\n\nvoid main() {\n  const float TAU = 6.28318530;\n  const float steps = 4.0; // up/down/left/right pixels\n  float radius = 2.0;\n  float time_sec = u_time_ms / 1000.;\n\n  vec3 outlineColorHSL = vec3(sin(time_sec/2.0) * 1., 1., 1.);\n  vec2 aspect = 1.0 / vec2(textureSize(u_graphic, 0));\n\n  for (float i = 0.0; i < TAU; i += TAU / steps) {\n    // Sample image in a circular pattern\n    vec2 offset = vec2(sin(i), cos(i)) * aspect * radius;\n    vec4 col = texture(u_graphic, v_uv + offset);\n\n    // Mix outline with background\n    float alpha = smoothstep(0.5, 0.7, col.a);\n    fragColor = mix(fragColor, vec4(hsv2rgb(outlineColorHSL), 1.0), alpha); // apply outline\n  }\n\n  // Overlay original texture\n  vec4 mat = texture(u_graphic, v_uv);\n  float factor = smoothstep(0.5, 0.7, mat.a);\n  fragColor = mix(fragColor, mat, factor);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite Using ImageSource Helper Method in TypeScript\nDESCRIPTION: Shows how to create a sprite directly from an ImageSource using the toSprite() helper method. This method creates a sprite that uses the entire image source without any custom view or size parameters.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-sprites.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ex.ImageSource('./img/myimage.png')\n// keep in mind this wont work until the image source is loaded\nconst sprite = image.toSprite()\n```\n\n----------------------------------------\n\nTITLE: Calculating Tile Bitmasks Based on Neighboring Tiles in TypeScript\nDESCRIPTION: This function calculates a bitmask for a single tile by examining its neighboring tiles. It uses bitwise operations to encode the state of each neighbor (whether it's solid or not) into a single number. The neighbor offsets define the 8 surrounding positions to check.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  // setting up neighbor offsets indexes /\n    const neighborOffsets = [\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [1, 0],\n        [-1, 0],\n        [1, -1],\n        [0, -1],\n        [-1, -1],\n    ];\n\n  // iterate through each neighbor tile and get the bitmask based on if the tile is solid\n    private _getBitmask(map: TileMap, index: number, outofbound: number): number {\n        let bitmask = 0;\n\n        // find the coordinates of current tile\n        const width = map.columns;\n        const height = map.rows;\n        let y = Math.floor(index / width);\n        let x = index % width;\n\n        // loop through each neighbor offset, and 'collect' their state\n        for (let i = 0; i < neighborOffsets.length; i++) {\n            const [dx, dy] = neighborOffsets[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            //convert back to index\n            const altIndex = nx + ny * width;\n\n            // check if the neighbor tile is out of bounds, else if tile is a wall ('solid') shift in the bitmask\n            if (ny < 0 || ny >= height || nx < 0 || nx >= width) bitmask |= outofbound << i;\n            else if (map.tiles[altIndex].data.get(\"solid\") === true) bitmask |= 1 << i;\n        }\n\n        return bitmask;\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Tiled Map with ES2015 Import Syntax\nDESCRIPTION: Example showing how to import and load a Tiled map using ES2015 module syntax with TypeScript/JavaScript\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-tiled-plugin-old.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur'\nimport { TiledMapResource } from '@excaliburjs/plugin-tiled'\n\n// Create tiled map resource, pointing to static asset path\nconst tiledMap = new TiledMapResource('/assets/map.tmx')\n\n// Create a loader and reference the map\nconst loader = new ex.Loader([tiledMap])\n\n// Start the game (starts the loader)\ngame.start(loader).then(function () {\n  console.log('Game loaded')\n  tiledMap.addTiledMapToScene(game.currentScene)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Actors to Specific Scene in Excalibur\nDESCRIPTION: Shows how to add actors to a specific scene instance and switch to that scene using goToScene().\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst game = new ex.Engine();\nconst level1 = new ex.Scene();\nconst player = new ex.Actor();\nconst enemy = new ex.Actor();\n// add actors to level1\nlevel1.add(player);\nlevel1.add(enemy);\n// add level1 to the game\ngame.add('level1', level1);\n// start the game\ngame.start().then(() => {\n  // after player clicks start game, for example\n  game.goToScene('level1');\n});\n```\n\n----------------------------------------\n\nTITLE: Player Class with Collision Group Implementation\nDESCRIPTION: Shows how to implement collision groups in a Player class constructor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-collision-groups.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PlayerCollisionGroup = CollisionGroupManager.create('player')\n\nexport class Player extends Actor {\n  constructor() {\n    super({\n      name: 'player',\n      pos: vec(200, 200),\n      collisionType: CollisionType.Active,\n      collisionGroup: PlayerCollisionGroup,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Event Emitters in Excalibur\nDESCRIPTION: Shows how to use the new typed EventEmitter which provides strong typing for possible events. This gives developers type completion suggestions while still allowing flexibility in event emission.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AnimationEvents = {\n  frame: FrameEvent;\n  loop: Animation;\n  ended: Animation;\n};\n\nexport class Animation {\n  public events = new EventEmitter<AnimationEvents>();\n  ...\n}\n\nconst anim = new Animation();\n\n// TS autocompletes the handler\nanim.on('frame', (frame: FrameEvent) => {\n  // Do stuff on frame\n});\n```\n\n----------------------------------------\n\nTITLE: Example Path Result from Dijkstra's Algorithm in TypeScript\nDESCRIPTION: This code snippet shows an example of what the shortest path array looks like when returned from the algorithm, containing nodes C and D. It represents the path from point A to D without including the starting node.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-05-19-pathfiinding-part1/pathfindingpart1.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//[Node C, Node D]\n```\n\n----------------------------------------\n\nTITLE: HTML Container for FillContainer Display Mode\nDESCRIPTION: HTML structure that creates a container for the game canvas when using FillContainer display mode.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container snippet-resizer\">\n    <canvas id=\"game\"></canvas>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using GoToOptions in Excalibur Engine goToScene Method (TypeScript)\nDESCRIPTION: Demonstrates the updated goToScene method using GoToOptions instead of just scene activation data, allowing for more configuration options.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngame.goToScene('myscene', {\n  /**\n   * Optionally supply scene activation data passed to Scene.onActivate\n  */\n  sceneActivationData?: TActivationData,\n  /**\n   * Optionally supply destination scene \"in\" transition, this will override any previously defined transition\n  */\n  destinationIn?: Transition,\n  /**\n   * Optionally supply source scene \"out\" transition, this will override any previously defined transition\n  */\n  sourceOut?: Transition,\n  /**\n   * Optionally supply a different loader for the destination scene, this will override any previously defined loader\n  */\n  loader?: DefaultLoader\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Images with ImageSource and SpriteSheet in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to load an image using ImageSource, create a loader, start the game, and create a SpriteSheet from the loaded image.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-image-source.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new Engine({...});\nconst spriteSheetImage = new ImageSource('./my/spritesheet.png');\n\nconst loader = new Loader([spriteSheetImage]);\nawait game.start(loader);\n\nconst spriteSheet = SpriteSheet.fromImageSource({\n  image: spriteFontImage,\n  grid: {\n    rows: 5,\n    columns: 2,\n    spriteWidth: 32, // pixels\n    spriteHeight: 32 // pixels\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Tile Coordinates to World Coordinates\nDESCRIPTION: Shows how to convert tile coordinates back to world space coordinates in an isometric map system.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-isometricmap.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isoMap = new ex.IsometricMap({...});\n\nconst tileCoord = ex.vec(0, 0);\n\nconst worldSpaceCoord = isoMap.tileToWorld(tileCoord);\n```\n\n----------------------------------------\n\nTITLE: Using Web Fonts with Labels in Excalibur\nDESCRIPTION: Demonstrates how to use web fonts with Labels in Excalibur, including HTML setup and TypeScript implementation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-ui.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Include the web font per usual -->\n    <script src=\"//google.com/fonts/foobar\"></script>\n  </head>\n  <body>\n    <canvas id=\"game\"></canvas>\n    <script src=\"game.js\"></script>\n  </body>\n</html>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst label = new ex.Label();\nlabel.font.family = 'Foobar, Arial, Sans-Serif';\nlabel.font.size = 10;\nlabel.font.unit = ex.FontUnit.Em;\nlabel.text = 'Hello World';\ngame.add(label);\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Mapping for LDtk Resource\nDESCRIPTION: This code snippet shows how to set up path mapping for LDtk resources. It's useful when bundlers rearrange static assets, allowing you to redirect file paths to the correct locations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst ldtkMap = new LdtkResource('./example-city.ldtk', {\n    pathMap: [\n       // If the \"path\" is included in the source path, the output will be used\n       { path: 'someimage.png', output: '/static/assets/someimage.png' },\n       // Regex matching with special [match] in output string that is replaced with the first match from the regex\n       { path: /(.*\\..*$)/, output: '/static/assets/[match]'}\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Sprite Fusion Map in Excalibur\nDESCRIPTION: Example showing how to create a Sprite Fusion resource, load it with the game loader, and add it to the current scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-spritefusion-plugin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst spriteFusionMap = new SpriteFusionResource({\n    mapPath: './map/map.json',\n    spritesheetPath: './map/spritesheet.png'\n});\n\nconst loader = new ex.Loader([spriteFusionMap]);\n\ngame.start(loader).then(() => {\n    spriteFusionMap.addToScene(game.currentScene);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Ray Drawing in Actor Update Method (TypeScript)\nDESCRIPTION: Example showing how to implement debug ray drawing in an actor's onPreUpdate method. The debug ray visualizes the actor's movement direction using a red ray with a specified distance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonPreUpdate(engine: ex.Engine, elapsedMs: number): void {\n    this.vel = ex.Vector.Zero;\n\n    this.graphics.use('down-idle');\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowRight)) { ... }\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowLeft)) { ... }\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowUp)) { ... }\n    if (engine.input.keyboard.isHeld(ex.Keys.ArrowDown)) { ... }\n\n    ex.Debug.drawRay(\n      new ex.Ray(this.pos, this.vel),\n      { distance: 100, color: ex.Color.Red }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Game with TypeScript Module\nDESCRIPTION: HTML structure for the game that includes viewport configuration for mobile devices and imports the TypeScript entry point as a module script.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Game Test</title>\n  <meta name=\"viewport\" content=\"viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <meta name=\"format-detection\" content=\"telephone=no\">\n  <meta name=\"msapplication-tap-highlight\" content=\"no\">\n\n  <link rel=\"manifest\" href=\"./manifest.json\">\n  <link rel=\"stylesheet\" href=\"./css/style.css\">\n</head>\n<body>\n  <script type=\"module\" src=\"./main.ts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Excalibur Game Implementation in TypeScript\nDESCRIPTION: Implementation of a game using Excalibur engine in TypeScript. Creates a fullscreen game, loads a sword image, and implements pointer input to control a sword actor that follows the pointer with rotation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Actor, DisplayMode, Engine, Input, Loader, ImageSource } from \"excalibur\";\n\nconst game = new Engine({\n    displayMode: DisplayMode.FillScreen,\n    pointerScope: Input.PointerScope.Canvas\n});\n\nconst sword = new ImageSource('assets/sword.png');\nconst loader = new Loader([sword]);\n\ngame.start(loader).then(() => {\n    game.input.pointers.primary.on('move', event => {\n        const delta =  event.worldPos.sub(actor.pos);\n        actor.vel = delta;\n        // Original asset is at a 45 degree angle need to adjust\n        actor.rotation = delta.toAngle() + Math.PI/4;\n    });\n\n    const actor = new Actor({\n        x: game.halfDrawWidth,\n        y: game.halfDrawHeight,\n        width: 40,\n        height: 40\n    });\n    actor.graphics.use(sword.toSprite());\n\n    game.add(actor);\n});\n```\n\n----------------------------------------\n\nTITLE: Post-updating a Custom Actor in Excalibur\nDESCRIPTION: Demonstrates how to override the onPostUpdate method in a custom actor class. This method is called after the core update logic and is recommended for adding custom update logic.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  private health: number = 100;\n\n  public onPostUpdate(engine: ex.Engine, delta: number) {\n    // check if player died\n    if (this.health <= 0) {\n      this.kill();\n      return;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pixel Art Mode in Excalibur (TypeScript)\nDESCRIPTION: Simple example showing how to enable pixel art mode when initializing the Excalibur engine. This setting applies custom shaders to avoid common pixel art artifacts like shimmering and banding.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst engine = new ex.Engine({\n  pixelArt: true,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel and Excalibur\nDESCRIPTION: Commands to install Parcel bundler, Excalibur, and TypeScript using npm for a new project setup.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install parcel-bundler --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install excalibur typescript\n```\n\nLANGUAGE: bash\nCODE:\n```\ntsc --init\n```\n\n----------------------------------------\n\nTITLE: Creating CompositeCollider in Excalibur.js\nDESCRIPTION: Shows how to create a CompositeCollider in Excalibur.js, which allows attaching multiple colliders to an entity. The example creates a capsule collider for a player actor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-colliders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Capsule Collider\nconst capsule = new ex.CompositeCollider([ex.Shape.Circle(10, ex.vec(0, -20)), ex.Shape.Box(20, 40), ex.Shape.Circle(10, ex.vec(0, 20))]);\n\nconst player = new ex.Actor({\n  pos: ex.vec(100, 100),\n  collider: capsule\n});\n```\n\n----------------------------------------\n\nTITLE: Z-Index Drawing in Excalibur.js\nDESCRIPTION: Demonstrates how to set z-index for draw calls to control rendering order.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonPostDraw(ctx: ExcaliburGraphicsContext) {\n    ctx.save();\n    ctx.z = -1;\n    ctx.drawRectangle(...);\n    ctx.restore();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pipes to Game Scene\nDESCRIPTION: Demonstrates how to initialize and add pipe obstacles to the game scene. Creates both top and bottom pipes at specific positions on the screen.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/05-step-plumbing-pipes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport * as ex from 'excalibur';\nimport { Bird } from './bird';\nimport { Ground } from './ground';\nimport { Pipe } from './pipe';\n\nconst game = new ex.Engine({...});\n\nconst bird = new Bird();\ngame.add(bird);\n\n// drawHeight is the height of the visible drawing surface in game pixels\nconst ground = new Ground(ex.vec(0, engine.screen.drawHeight - 64));\ngame.add(ground);\n\nconst topPipe = new Pipe(ex.vec(game.screen.drawWidth, 150), 'top');\ngame.add(topPipe);\n\nconst bottomPipe = new Pipe(ex.vec(game.screen.drawWidth, 300), 'bottom');\ngame.add(bottomPipe);\n\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Scene Addition in Excalibur\nDESCRIPTION: Example of dynamically adding and switching to a custom scene class.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MainMenu extends ex.Scene {}\n// add to game and activate it\ngame.add('mainmenu', new MainMenu());\ngame.goToScene('mainmenu');\n```\n\n----------------------------------------\n\nTITLE: Implementing Headless Mode in Excalibur Tiled Resource\nDESCRIPTION: This example demonstrates how to use the headless mode in the Excalibur Tiled plugin. It disables visual parsing and allows for custom file loading, which is useful for server-side development with Tiled maps.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./path/to/map', {\n   headless: true,\n   fileLoader: async (path: string, contentType: 'json' | 'xml') => Promise<any>\n});\n```\n\n----------------------------------------\n\nTITLE: Scene Drawing Implementation in Excalibur.js\nDESCRIPTION: Demonstrates how to implement drawing functionality by extending the Excalibur Scene class with pre-draw and post-draw methods.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\nclass MyScene extends ex.Scene {\n    onPreDraw(ctx: ExcaliburGraphicsContext) {\n        ctx.save();\n        ctx.drawRectangle(...);\n        ctx.restore();\n    }\n    onPostDraw(ctx: ExcaliburGraphicsContext) {\n        ctx.save();\n        ctx.drawRectangle(...);\n        ctx.restore();\n    }\n}\ngame.addScene('myscene', new MyScene());\ngame.goToScene('myscene');\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Creating an Excalibur Project with NPX\nDESCRIPTION: Command to generate a new Excalibur game project using the official CLI tool. This creates a complete starter project with all the necessary files and dependencies.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-z-quick-start.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-excalibur@latest\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Entities in Excalibur\nDESCRIPTION: Demonstrates how to create basic entities and add them to a game's current scene. Shows creating both a basic entity and one with a name property.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-entity-component-system/05.1-entities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst entity = new ex.Entity();\nconst entityWithName = new ex.Entity({name: 'Named Entity'});\ngame.currentScene.add(entity);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Display Mode in Excalibur\nDESCRIPTION: Sets up the game with a fixed resolution of 600x400 pixels using DisplayMode.Fixed, which is the default display mode in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    width: 600,\n    height: 400,\n    displayMode: ex.DisplayMode.Fixed // fixed is the default so this is optional\n});\n```\n\n----------------------------------------\n\nTITLE: Radius-Based Camera Following in Excalibur.js\nDESCRIPTION: Keeps the actor within a circular radius around the camera's focus point, allowing the actor to move within the radius before the camera follows.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-cameras.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngame.currentScene.camera.strategy.radiusAroundActor(actor, radius);\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring Resolution and Viewport States\nDESCRIPTION: Demonstrates how to temporarily change and then restore resolution and viewport settings. This is useful for switching between different display configurations for different scenes or game states.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Save the current resolution and viewport\ngame.screen.pushResolutionAndViewport();\n// Change and apply\ngame.screen.resolution = ex.Resolution.NES;\ngame.screen.applyResolutionAndViewport();\n\n// Show some animation or do something at NES resolution\n\n// Restore the old resolution and viewport, then apply\ngame.screen.popResolutionAndViewport();\ngame.screen.applyResolutionAndViewport();\n```\n\n----------------------------------------\n\nTITLE: Using Test Clock for Debugging\nDESCRIPTION: Shows how to use the test clock for debugging and testing. Includes examples of single-stepping and running multiple steps at once, as well as switching back to standard clock.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-clock.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\nconst testClock = game.debug.useTestClock();\n\n// Single Step as if we are running 60fps\ntestClock.step(16.6);\n\n// Multiple steps at once, for example 100 steps at 60fps\ntestClock.run(100, 16.6);\n\n// to switch back to the standard clock\ngame.debug.useStandardClock();\n```\n\n----------------------------------------\n\nTITLE: Context State Management in Excalibur.js\nDESCRIPTION: Shows how to use save and restore methods to manage graphics context state during transformations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nonPostDraw(ctx: ExcaliburGraphicsContext) {\n    ctx.save();\n    ctx.translate(50, 50);\n    ctx.rotate(Math.PI / 2);\n    ctx.drawRectangle(...);\n    ctx.restore();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Transition with Slide in Excalibur\nDESCRIPTION: Demonstrates how to use the new Slide scene transition in Excalibur, allowing for smooth transitions between scenes with customizable direction and easing function.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngame.goToScene('otherScene', {\n  destinationIn: new ex.Slide({\n    duration: 1000,\n    easingFunction: ex.EasingFunctions.EaseInOutCubic,\n    slideDirection: 'up'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Canvas Graphic in Excalibur.js\nDESCRIPTION: Basic example of initializing a Canvas graphic with a draw function. The Canvas constructor takes a configuration object that includes a draw callback function receiving the CanvasRenderingContext2D.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-canvas.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst canvas = new Canvas({\n  draw: (ctx: CanvasRenderingContext2D) => {\n    ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Old School JavaScript Setup for Excalibur\nDESCRIPTION: HTML template showing how to include Excalibur via unpkg CDN using traditional script tags\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head></head>\n  <body>\n    <script src=\"https://unpkg.com/excalibur@0.30.0\"></script>\n    <script src=\"./my-game.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Engine Options Interface and Constructor in TypeScript\nDESCRIPTION: Demonstrates the use of an option bag pattern for constructor parameters using an interface. This approach is recommended for methods with more than 3 required parameters.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/STYLEGUIDE.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EngineOptions { … }\nclass Engine {\n    constructor(options?: EngineOptions) {\n       ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Trigger Events in Excalibur\nDESCRIPTION: Demonstrates the new EnterTriggerEvent and ExitTriggerEvent for Triggers, as well as the new CollisionStart and CollisionEnd events for Actors.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Trigger events\ntrigger.on('enter', (event: EnterTriggerEvent) => { /* ... */ });\ntrigger.on('exit', (event: ExitTriggerEvent) => { /* ... */ });\n\n// Actor collision events\nactor.on('collisionstart', (event: CollisionStartEvent) => { /* ... */ });\nactor.on('collisionend', (event: CollisionEndEvent) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Creating Tiled Sprite and Animation in Excalibur\nDESCRIPTION: Demonstrates how to create tiled sprites and animations using the new TiledSprite and TiledAnimation types in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledGroundSprite = new ex.TiledSprite({\n  image: groundImage,\n  width: game.screen.width,\n  height: 200,\n  wrapping: {\n    x: ex.ImageWrapping.Repeat,\n    y: ex.ImageWrapping.Clamp\n  }\n});\n\nconst tilingAnimation = new ex.TiledAnimation({\n  animation: cardAnimation,\n  sourceView: {x: 20, y: 20},\n  width: 200,\n  height: 200,\n  wrapping: ex.ImageWrapping.Repeat\n});\n```\n\n----------------------------------------\n\nTITLE: Collision Group Ray Casting in TypeScript\nDESCRIPTION: Demonstrates how to implement ray casting with specific collision groups and masks for targeted collision detection.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-ray.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst playerGroup = new ex.CollisionGroup('player', 0b0001, ~0b0001); \nconst enemyGroup = new ex.CollisionGroup('enemy', 0b0010, ~0b0010);\n...\n\n// this raycast will only actors with the 1 in the second place, so enemyGroup\nconst enemyHits = scene.physics.rayCast(ray, {\n  collisionMask: 0b0010;\n});\n\n// this raycast will only actors with the 1 in the first and second place, so playerGroup and enemyGroup\nconst playerAndEnemyHits = scene.physics.rayCast(ray, {\n  collisionMask: 0b0011;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom System in Excalibur's ECS (TypeScript)\nDESCRIPTION: Example of implementing a custom system in Excalibur's Entity Component System (ECS). Systems are passed an ECS world by default and can use any number of queries to process entities with specific components.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur';\n\nexport class MySystem extends ex.System {\n  static priority = ex.SystemPriority.Average;\n  public readonly systemType = ex.SystemType.Draw;\n  query: Query<typeof ex.TransformComponent | typeof ex.GraphicsComponent>;\n\n  constructor(public world: ex.World) {\n    super();\n    this.query = this.world.query([ex.TransformComponent, ex.GraphicsComponent]);\n  }\n\n  public update(elapsed: number): void {\n\n    // TODO implement system using query(s)\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tilesets and Tile Information in Excalibur\nDESCRIPTION: Demonstrates how to retrieve tileset information and individual tile data from a TiledResource.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource(...);\n\n// Load tiled map here\n\nconst tileset: Tileset = tiledMap.getTilesetForTileGid(123);\n\nconst tile = tileset.getTileByGid(123);\nconst tiles = tileset.getTilesByClassName('grass');\nconst tilesWithProp = tileset.getTilesByProperty('damage', 10);\n\n// Excalibur sprite\nconst sprite = tileset.getSpriteForGid(123);\n\n// Excalibur animation\nconst animation = tileset.getAnimationForGid(123);\n\n// Excalibur colliders\nconst colliders = tileset.getCollidersForGid(123);\n```\n\n----------------------------------------\n\nTITLE: Creating a new Excalibur project using CLI\nDESCRIPTION: Command to bootstrap a new Excalibur.js project using the Excalibur CLI tool.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-excalibur@latest\n```\n\n----------------------------------------\n\nTITLE: Creating NineSlice Graphics in Excalibur\nDESCRIPTION: Shows how to create a NineSlice graphic in Excalibur, which is useful for creating resizable UI elements, backgrounds, and other rectangular regions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar nineSlice = new ex.NineSlice({\n  width: 300,\n  height: 100,\n  source: inputTile,\n  sourceConfig: {\n    width: 64,\n    height: 64,\n    topMargin: 5,\n    leftMargin: 7,\n    bottomMargin: 5,\n    rightMargin: 7\n  },\n  destinationConfig: {\n    drawCenter: true,\n    horizontalStretch: ex.NineSliceStretch.Stretch,\n    verticalStretch: ex.NineSliceStretch.Stretch\n  }\n});\n\nactor.graphics.add(nineSlice);\n```\n\n----------------------------------------\n\nTITLE: Defining FactoryProps Interface for Excalibur Tiled Plugin\nDESCRIPTION: This code snippet defines the FactoryProps interface used in the Excalibur Tiled plugin. It specifies the properties passed to custom entity factories, including world position, name, class, layer, object, and Tiled properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FactoryProps {\n   /**\n    * Excalibur world position\n    */\n   worldPos: Vector;\n   /**\n    * Tiled name in UI\n    */\n   name?: string;\n   /**\n    * Tiled class in UI (internally in Tiled is represented as the string 'type')\n    */\n   class: string;\n   /**\n    * Layer (either TileLayer or ObjectLayer) that this object is part of\n    */\n   layer: Layer;\n   /**\n    * If using an object layer or a tile object property, the object will be passed.\n    */\n   object?: PluginObject;\n   /**\n    * Tiled properties, these are all converted to lowercase keys, and lowercase if the value is a string\n    */\n   properties: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur Dev Tools\nDESCRIPTION: NPM installation command for Excalibur development tools package\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @excaliburjs/dev-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur with npm\nDESCRIPTION: Command to install Excalibur v0.2.0 game engine using Node Package Manager (npm).\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2014-04-16-excalibur-0-2-0-released.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install excalibur\n```\n\n----------------------------------------\n\nTITLE: Defining CollisionType Enum in TypeScript\nDESCRIPTION: Illustrates the use of string enums for robust type support, easier refactoring, and better debuggability at runtime. Each enum value includes a detailed JSDoc comment explaining its purpose.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/STYLEGUIDE.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum CollisionType {\n  /**\n   * Actors with the `PreventCollision` setting do not participate in any\n   * collisions and do not raise collision events.\n   */\n  PreventCollision = 'PreventCollision',\n  /**\n   * Actors with the `Passive` setting only raise collision events, but are not\n   * influenced or moved by other actors and do not influence or move other actors.\n   */\n  Passive = 'Passive',\n  /**\n   * Actors with the `Active` setting raise collision events and participate\n   * in collisions with other actors and will be push or moved by actors sharing\n   * the `Active` or `Fixed` setting.\n   */\n  Active = 'Active',\n  /**\n   * Actors with the `Fixed` setting raise collision events and participate in\n   * collisions with other actors. Actors with the `Fixed` setting will not be\n   * pushed or moved by other actors sharing the `Fixed`. Think of Fixed\n   * actors as \"immovable/unstoppable\" objects. If two `Fixed` actors meet they will\n   * not be pushed or moved by each other, they will not interact except to throw\n   * collision events.\n   */\n  Fixed = 'Fixed'\n}\n```\n\n----------------------------------------\n\nTITLE: Tilemap Redraw Function for ExcaliburJS\nDESCRIPTION: Function that updates a TileMap in ExcaliburJS based on a new array of tile values. Removes existing tilemap, applies appropriate graphics (blue for walls, white for floors), and adds the updated tilemap back to the game scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-6-16-cellular-automata/cellularautonoma.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction redrawTilemap(map: number[], tilemap: TileMap, game: Engine) {\n  game.remove(game.currentScene.tileMaps[0]);\n  let tileIndex = 0;\n  for (const tile of tilemap.tiles) {\n    const value = map[tileIndex];\n    if (value == 1) {\n      tile.addGraphic(blueTile);\n    } else {\n      tile.addGraphic(whiteTile);\n    }\n    tileIndex++;\n  }\n  game.add(tilemap);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiled Sprites in Excalibur\nDESCRIPTION: Creates a tiled sprite with customizable wrapping modes for x and y dimensions. Supports different wrapping types including Repeat, Clamp, and RepeatMirror.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledGroundSprite = new ex.TiledSprite({\n  image: groundImage,\n  width: game.screen.width,\n  height: 200,\n  wrapping: {\n    x: ex.ImageWrapping.Repeat,\n    y: ex.ImageWrapping.Clamp\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Materials via Uniforms in Excalibur.js\nDESCRIPTION: Shows how to update material uniforms in response to user input by tracking mouse position and setting uniform values. Uses the material.update method to pass pointer positions to a shader.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-material.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  pos: ex.vec(200, 200),\n  width: 100,\n  height: 100,\n  color: ex.Color.Blue // Default graphic will be modified by the material\n});\nconst material = actor.graphics.material = game.graphicsContext.createMaterial({\n  name: 'custom-material',\n  fragmentSource: `#version 300 es\n  precision mediump float;\n\n  uniform vec2 iMouse;\n\n  out vec4 color;\n  void main() {\n    // Change the color based on mouse position\n    vec2 mouseColor = iMouse / 800.0;\n    color = vec4(mouseColor, 0.0, 1.0);\n  }`\n});\n\ngame.input.pointers.primary.on('move', evt => {\n  actor.pos = evt.worldPos;\n  material.update(shader => {\n    shader.trySetUniformFloatVector('iMouse', evt.worldPos);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animations from SpriteSheet Coordinates in Excalibur\nDESCRIPTION: Demonstrates the new helper method for building animations from spritesheet coordinates, allowing for more concise animation creation with specific frame durations and animation strategies.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst spriteSheet = SpriteSheet.fromImageSource({...});\n   const anim = Animation.fromSpriteSheetCoordinates({\n  spriteSheet,\n  frameCoordinates: [\n    {x: 0, y: 5, duration: 100},\n    {x: 1, y: 5, duration: 200},\n    {x: 2, y: 5, duration: 100},\n    {x: 3, y: 5, duration: 500}\n  ],\n  strategy: AnimationStrategy.PingPong\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Excalibur Objects from Tiled Map\nDESCRIPTION: Code snippet showing how to get Excalibur objects from a loaded Tiled map\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-tiled-plugin-old.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst objects: TiledObjectGroup[] = tiledMapResource.getExcaliburObjects()\n```\n\n----------------------------------------\n\nTITLE: Creating ImageSource from SVG and Canvas in Excalibur\nDESCRIPTION: Demonstrates how to create ImageSource objects from SVG strings, SVG files, and HTML Canvas elements in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst svgExternal = new ex.ImageSource('../images/arrows.svg');\nconst svg = (tags: TemplateStringsArray) => tags[0];\n\nconst svgImage = ex.ImageSource.fromSvgString(svg`\n  <svg version=\"1.1\"\n       id=\"svg2\"\n       xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n       xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n       sodipodi:docname=\"resize-full.svg\" inkscape:version=\"0.48.4 r9939\"\n       xmlns=\"http://www.w3.org/2000/svg\" \n       width=\"800px\" height=\"800px\"\n       viewBox=\"0 0 1200 1200\" enable-background=\"new 0 0 1200 1200\" xml:space=\"preserve\">\n  <path id=\"path18934\" fill=\"#000000ff\" inkscape:connector-curvature=\"0\"  d=\"M670.312,0l177.246,177.295L606.348,418.506l175.146,175.146\n      l241.211-241.211L1200,529.688V0H670.312z M418.506,606.348L177.295,847.559L0,670.312V1200h529.688l-177.246-177.295\n      l241.211-241.211L418.506,606.348z\"/>\n  </svg>\n`);\n\nconst myCanvas = document.createElement('canvas')!;\nmyCanvas.width = 100;\nmyCanvas.height = 100;\nconst ctx = myCanvas.getContext('2d')!;\nctx.fillStyle = ex.Color.Black.toRGBA();\nctx.fillRect(20, 20, 50, 50);\n\nconst canvasImage = ex.ImageSource.fromHtmlCanvasElement(myCanvas);\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying GIF Animations in Excalibur.js\nDESCRIPTION: Demonstrates how to load and display GIF animations as game resources with full GIF spec support.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvar gif: ex.Gif = new ex.Gif('./loading-screen.gif');\nvar gif2: ex.Gif = new ex.Gif('./sword.gif');\nvar gif3: ex.Gif = new ex.Gif('./stoplight.gif');\nvar loader = new ex.Loader([gif, gif2, gif3]);\ngame.start(loader).then(() => {\n  var stoplight = new ex.Actor({\n    x: game.currentScene.camera.x + 120,\n    y: game.currentScene.camera.y,\n    width: gif3.width,\n    height: gif3.height\n  });\n  stoplight.graphics.add(gif3.toAnimation());\n  game.add(stoplight);\n\n  var sword = new ex.Actor({\n    x: game.currentScene.camera.x - 120,\n    y: game.currentScene.camera.y,\n    width: gif2.width,\n    height: gif2.height\n  });\n  sword.graphics.add(gif2.toAnimation());\n  game.add(sword);\n\n  var loading = new ex.Actor({\n    x: game.currentScene.camera.x,\n    y: game.currentScene.camera.y,\n    width: gif2.width,\n    height: gif2.height\n  });\n  loading.graphics.add(gif.toAnimation());\n  game.add(loading);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Implementation in Excalibur.js\nDESCRIPTION: Demonstrates how to implement and register a custom renderer plugin with the graphics context.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyRenderer implements ex.RendererPlugin {\n    ...\n}\n\nconst graphicsContextWebGL = game.graphicsContext as ExcaliburGraphicsContextWebGL;\ngraphicsContextWebGL.register(new MyRenderer());\n\ngraphicsContextWebGL.draw<MyRenderer>(...);\n```\n\n----------------------------------------\n\nTITLE: Using Fullscreen API with Async/Await in Excalibur\nDESCRIPTION: Examples of using the browser's fullscreen API with async/await to enter and exit fullscreen mode programmatically.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait game.screen.enterFullscreen();\n\nawait game.screen.exitFullscreen();\n```\n\n----------------------------------------\n\nTITLE: Performing Ray Casting in Excalibur Scenes\nDESCRIPTION: Demonstrates how to perform arbitrary ray casts in a Scene using the PhysicsWorld. Various options can be specified to influence the types of ray cast hits that are returned, including collision groups and search parameters.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst engine = new ex.Engine({...});\nconst enemyGroup = ex.CollisionGroupManager.create('enemy');\nconst ray = new ex.Ray(ex.vec(0, 0), ex.Vector.Right);\nconst hits = engine.currentScene.physics.rayCast(ray, {\n  /**\n   * Optionally specify to search for all colliders that intersect the ray cast, not just the first which is the default\n   */\n  searchAllColliders: true,\n  /**\n   * Optionally specify the maximum distance in pixels to ray cast, default is Infinity\n   */\n  maxDistance: 100,\n  /**\n   * Optionally specify a collision group to consider in the ray cast, default is All\n   */\n  collisionGroup: enemyGroup\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Flash Action in Excalibur.js\nDESCRIPTION: Shows how to use the flash action to create visual feedback effects on actors.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nactor.actions.flash(ex.Color.White, 1000)\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Textures to Materials in Excalibur.js\nDESCRIPTION: Example of loading and using additional textures in a custom material. Shows how to specify textures using a dictionary of uniform names to ImageSource objects that are loaded into the material.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-material.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst noise = new ex.ImageSource('./noise.avif', false, ex.ImageFiltering.Pixel);\nloader.addResource(noise);\n\nvar waterMaterial = game.graphicsContext.createMaterial({\n  name: 'water',\n  fragmentSource: waterFrag,\n  color: ex.Color.fromRGB(55, 0, 200, .6),\n  images: {\n    u_noise: noise\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating EdgeCollider in Excalibur.js\nDESCRIPTION: Demonstrates how to create and attach an EdgeCollider to an actor in Excalibur.js. EdgeColliders are useful for creating walls, barriers, or platforms in games.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-colliders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst edge = new ex.EdgeCollider({\n  begin: ex.vec(0, 0),\n  end: ex.vec(100, 0)\n});\n\nconst actor = new ex.Actor({\n  pos: ex.vec(100, 100),\n  collider: edge\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Excalibur\nDESCRIPTION: Recommended TypeScript configuration for Excalibur projects, including compiler options for ES2015 target and module, and strict type-checking.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"src/**/*\"],\n  \"compilerOptions\": {\n    /* Basic Options */\n    \"target\": \"es2015\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n    \"module\": \"es2015\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n    /* Specify library files to be included in the compilation. */\n    \"lib\": [\"dom\", \"es5\", \"es2015.Proxy\", \"es2015.promise\", \"es2015.collection\", \"es2015.iterable\", \"es2015\"],\n\n    /* Strict Type-Checking Options */\n    \"strict\": true /* Enable all strict type-checking options. */,\n\n    /* Module Resolution Options */\n    \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n    \"baseUrl\": \"./src\" /* Base directory to resolve non-absolute module names. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n\n    /* Advanced Options */\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiled Map Resource\nDESCRIPTION: Code to configure a Tiled map resource with custom layer z-index settings\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new TiledMapResource('path/to/map.tmx', { firstLayerZIndex: -2 });\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiled Sprites and Animations in Excalibur.js\nDESCRIPTION: Shows how to create tiled sprites and animations with customizable wrapping options.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledGroundSprite = new ex.TiledSprite({\n  image: groundImage,\n  width: game.screen.width,\n  height: 200,\n  wrapping: {\n    x: ex.ImageWrapping.Repeat,\n    y: ex.ImageWrapping.Clamp\n  }\n});\n\nconst tilingAnimation = new ex.TiledAnimation({\n  animation: cardAnimation,\n  sourceView: {x: 20, y: 20},\n  width: 200,\n  height: 200,\n  wrapping: ex.ImageWrapping.Repeat\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Canvas Rendering in Excalibur.js\nDESCRIPTION: Shows how to enable Canvas 2D rendering instead of WebGL by setting a flag before engine construction.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nex.Flags.useCanvasGraphicsContext();\nconst game = new ex.Engine(...);\n```\n\n----------------------------------------\n\nTITLE: Activating Fullscreen Mode via Event Listener\nDESCRIPTION: Sets up an event listener to enter fullscreen mode when a button is clicked, satisfying browser security requirements for user gestures.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.getElementById('go-fullscreen')!.addEventListener('click', () => {\n    game.screen.enterFullscreen();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Starting Scene Transition on Game Start\nDESCRIPTION: Shows how to specify a special transition when starting the game initially. This allows setting a unique transition for the first scene displayed after loading the game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/05-transitions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngame.start('scene1',\n{\n  inTransition: startTransition\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Excalibur in Deno (Namespace Import)\nDESCRIPTION: Alternative method of importing Excalibur in a TypeScript file using namespace import for Deno environment.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport * as ex from 'https://esm.sh/excalibur@0.26.0-alpha.264';\n\nconst game = new ex.Engine();\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Loading Images Out of Band in Excalibur.js\nDESCRIPTION: This snippet demonstrates how to load an image out of band using ImageSource in Excalibur.js. It shows how to check if an image is loaded and convert it to a sprite.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-image-source.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = new ex.ImageSource('./img/myimg.png')\n\nimage.load().then(() => {\n  // image loaded\n  // good for use in sprites inside this function\n})\n\nif (image.isLoaded()) {\n  // image.data is good for use in sprites\n  const mySprite = image.toSprite()\n}\n```\n\n----------------------------------------\n\nTITLE: Ray Casting Configuration Options in TypeScript\nDESCRIPTION: Shows default configuration options for ray casting in Excalibur.js, including collision group settings, search parameters, and distance limits.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/09-math/07-ray.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst hits = scene.physics.rayCast(ray, {\n  searchAllColliders: true,\n  collisionGroup: CollisionGroup.All,\n  collisionMask: CollisionGroup.All.mask,\n  ignoreCollisionGroupAll: false,\n  maxDistance: Infinity,\n  filter: null,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Excalibur in TypeScript\nDESCRIPTION: Examples of importing Excalibur in TypeScript using different import styles, including namespace and named imports for better tree-shaking support.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Excalibur is loaded into the ex global namespace\nimport * as ex from 'excalibur';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Excalibur is loaded into the ex global namespace\nimport { Actor, Engine } from 'excalibur';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Actor } from 'excalibur';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Renderer Plugin\nDESCRIPTION: Example of creating and registering a custom renderer plugin for specialized WebGL rendering\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nexport class MyCustomRenderer extends ex.RendererPlugin {\n    public readonly type = 'myrenderer';\n    ...\n}\n\ngame.start().then(() => {\n    // register\n    game.graphicsContext.register(new MyCustomRenderer());\n});\n\n// call from a graphics callback or event\nconst actor = new ex.Actor({...});\nactor.graphics.onPostDraw = (graphicsContext) => {\n    graphicsContext.draw<MyCustomRenderer>('myrenderer', ...);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphicsGrouping Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for graphics group members, including offset vector, graphic object, and optional useBounds parameter for controlling bounds calculation behavior.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-group.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GraphicsGrouping {\n  offset: Vector;\n  graphic: Graphic;\n  /**\n   * Optionally disable this graphics bounds as part of group calculation, default true\n   * if unspecified\n   *\n   * You may want to do this if you're using text because their bounds will affect\n   * the centering of the whole group\n   */\n  useBounds?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating hCost in A* Algorithm using JavaScript\nDESCRIPTION: This snippet shows the calculation of hCost (estimated distance to end node) for a tile in the A* algorithm using the Pythagorean theorem.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-05-25-pathfinding-part2/pathfindingpart2.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhCost = Math.sqrt(Math.pow((4-0), 2) + Math.pow((5-0)), 2));\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website without SSH\nDESCRIPTION: Command to deploy the website using GitHub username authentication, suitable for GitHub Pages hosting.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Scene Deactivation Implementation\nDESCRIPTION: Shows implementation of onDeactivate hook for scene cleanup and state saving.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Level extends Scene {\n  /**\n   * Each time the scene is exited (Engine.goToScene)\n   */\n  public onDeactivate(ctx: SceneActivationContext) {\n    this.saveState();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scene Activation with Data Parameter\nDESCRIPTION: Shows how to pass and access data when transitioning between scenes using goToScene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nclass SceneA extends ex.Scene {\n  /* ... */\n\n  onActivate(context: ex.SceneActivationContext<{ foo: string }>) {\n    console.log(context.data.foo); // bar\n  }\n}\n\nengine.goToScene('sceneA', { foo: 'bar' })\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Files as Image Sources in Excalibur (TypeScript)\nDESCRIPTION: Simple example showing how to load external SVG files as image sources in Excalibur. This allows developers to work with SVG files created in vector illustration software.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst svgExternal = new ex.ImageSource('path/to/my.svg');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Renderer Plugin in Excalibur\nDESCRIPTION: Shows the basic structure of a custom renderer plugin by extending the RendererPlugin interface. It includes methods for initialization, drawing, checking pending draws, and flushing graphics to the screen.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/99.0-custom-renderer-plugins.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyCustomRenderer extends ex.RendererPlugin {\n  /**\n   * Unique type name for this renderer plugin\n   */\n  readonly type: string = 'myrenderer';\n\n  /**\n   * Render priority tie breaker when drawings are at the same z index\n   * @warning Not yet used by excalibur\n   */\n  priority: number = 0;\n\n  /**\n   * Initialize your renderer\n   *\n   * @param gl\n   * @param context\n   */\n  initialize(gl: WebGLRenderingContext, context: ExcaliburGraphicsContextWebGL): void {\n    // initialize and compile shader\n  }\n\n  /**\n   * Issue a draw command to draw something to the screen\n   * @param args\n   */\n  draw(some: ex.Vector, args: ex.Color): void {\n    // update internal state with draw command with the args\n  }\n\n  /**\n   * @returns if there are any pending draws in the renderer\n   */\n  hasPendingDraws(): boolean {\n    // if there are any un-flushed drawings\n    return false;\n  }\n\n  /**\n   * Flush any pending graphics draws to the screen\n   */\n  flush(): void {\n    // flush all pending draws to the screen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding Tiled Map to Excalibur Scene\nDESCRIPTION: Shows how to create a TiledResource, load it, and add it to an Excalibur scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\n\nconst tiledMap = new TiledResource('./path/to/map.tmx');\n\nconst loader = new ex.Loader([tiledMap]);\n\ngame.start(loader).then(() => {\n    tiledMap.addToScene(game.currentScene);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Fixed Update Interpolation for Actors\nDESCRIPTION: Shows how to disable the automatic interpolation for specific actors in the game. This can be useful when you need precise control over an actor's movement without interpolation between fixed updates.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-b-fixed-update.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// turn off interpolation on a per actor basis\nconst actor = new ex.Actor({...});\nactor.body.enableFixedUpdateInterpolate = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing CRT Post Processor\nDESCRIPTION: Custom post-processor implementation for CRT screen effect using WebGL shaders\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass CrtPostProcessor implements ex.PostProcessor {\n  private _shader: ex.ScreenShader;\n  initialize(gl: WebGLRenderingContext): void {\n    const crtEffectSource = document.getElementById(\"modified-crt-shader-source\").innerText;\n    this._shader = new ex.ScreenShader(crtEffectSource);\n  }\n\n  getLayout(): ex.VertexLayout {\n    return this._shader.getLayout();\n  }\n\n  getShader(): ex.Shader {\n    return this._shader.getShader();\n  }\n}\n\ngame.graphicsContext.addPostProcessor(new CrtPostProcessor());\n```\n\n----------------------------------------\n\nTITLE: Checking Pointer Type in Excalibur\nDESCRIPTION: Shows how to check the type of pointer (mouse or touch) from a PointerEvent in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nengine.input.pointers.primary.on('down', function (pe: ex.PointerEvent) {\n  if (pe.pointerType === ex.PointerType.Mouse) {\n    ex.Logger.getInstance().info('Mouse event:', pe);\n  } else if (pe.pointerType === ex.PointerType.Touch) {\n    ex.Logger.getInstance().info('Touch event:', pe);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PointRenderer in Excalibur\nDESCRIPTION: Provides a complete implementation of a PointRenderer as an example of a custom renderer plugin. It includes initialization of shaders and buffers, drawing points, and flushing the graphics to the screen.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/99.0-custom-renderer-plugins.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class PointRenderer implements RendererPlugin {\n  public readonly type = 'ex.point';\n  public priority: number = 0;\n  private _shader: Shader;\n  private _maxPoints: number = 10922;\n  private _buffer: VertexBuffer;\n  private _layout: VertexLayout;\n  private _gl: WebGLRenderingContext;\n  private _context: ExcaliburGraphicsContextWebGL;\n  private _pointCount: number = 0;\n  private _vertexIndex: number = 0;\n  initialize(gl: WebGLRenderingContext, context: ExcaliburGraphicsContextWebGL): void {\n    this._gl = gl;\n    this._context = context;\n    this._shader = new Shader({\n\t\t\tgraphicsContext: context,\n      vertexSource: pointVertexSource,\n      fragmentSource: pointFragmentSource\n    });\n    this._shader.compile();\n    this._shader.use();\n    this._shader.setUniformMatrix('u_matrix', this._context.ortho);\n    this._buffer = new VertexBuffer({\n      size: 7 * this._maxPoints,\n      type: 'dynamic'\n    });\n\n    this._layout = new VertexLayout({\n      shader: this._shader,\n      vertexBuffer: this._buffer,\n      attributes: [\n        ['a_position', 2],\n        ['a_color', 4],\n        ['a_size', 1]\n      ]\n    });\n  }\n\n  draw(point: Vector, color: Color, size: number): void {\n    // Force a render if the batch is full\n    if (this._isFull()) {\n      this.flush();\n    }\n\n    this._pointCount++;\n\n    const transform = this._context.getTransform();\n    const opacity = this._context.opacity;\n\n    const finalPoint = transform.multv(point);\n\n    const vertexBuffer = this._buffer.bufferData;\n    vertexBuffer[this._vertexIndex++] = finalPoint.x;\n    vertexBuffer[this._vertexIndex++] = finalPoint.y;\n    vertexBuffer[this._vertexIndex++] = color.r / 255;\n    vertexBuffer[this._vertexIndex++] = color.g / 255;\n    vertexBuffer[this._vertexIndex++] = color.b / 255;\n    vertexBuffer[this._vertexIndex++] = color.a * opacity;\n    vertexBuffer[this._vertexIndex++] = size * Math.max(transform.getScaleX(), transform.getScaleY());\n  }\n\n  private _isFull() {\n    if (this._pointCount >= this._maxPoints) {\n      return true;\n    }\n    return false;\n  }\n\n  hasPendingDraws(): boolean {\n    return this._pointCount !== 0;\n  }\n\n  flush(): void {\n    // nothing to draw early exit\n    if (this._pointCount === 0) {\n      return;\n    }\n\n    const gl = this._gl;\n    this._shader.use();\n    this._layout.use(true);\n\n    this._shader.setUniformMatrix('u_matrix', this._context.ortho);\n\n    gl.drawArrays(gl.POINTS, 0, this._pointCount);\n\n    GraphicsDiagnostics.DrawnImagesCount += this._pointCount;\n    GraphicsDiagnostics.DrawCallCount++;\n\n    this._pointCount = 0;\n    this._vertexIndex = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binary to Decimal Conversion Calculation\nDESCRIPTION: A detailed breakdown of how to convert the binary number 101010 to its decimal equivalent 42, showing the calculation for each bit position.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n   0         1         0         1         0          1\n_________________________________________________________________\n(0 * 1) + (1 * 2) + (0 * 4) + (1 * 8) + (0 * 16) + (1 * 32) = 42\n\n2 + 8 + 32 = 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tiled Tileset Support in Excalibur\nDESCRIPTION: This Vite configuration example shows how to set up a custom plugin to handle .tsx files as Tiled tilesets rather than React components. It also disables asset inlining to ensure compatibility with Excalibur in production mode.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from 'vite';\n\nconst tiledPlugin = () => {\n    return {\n        name: 'tiled-tileset-plugin',\n        resolveId: {\n            order: 'pre',\n            handler(sourceId, importer, options) {\n                if (!sourceId.endsWith(\".tsx\")) return;\n                return { id: 'tileset:' + sourceId, external: 'relative' }\n            }\n        }\n    };\n}\n\nexport default defineConfig({\n    plugins: [tiledPlugin()], // hint vite that tiled tilesets should be treated as external\n    build: {\n        assetsInlineLimit: 0, // excalibur cannot handle inlined xml in prod mode\n        sourcemap: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene-Specific Input Handlers in Excalibur\nDESCRIPTION: Demonstrates how to add input handlers that only fire when a specific scene is active, allowing for more granular control over input handling in different game states.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass SceneWithInput extends ex.Scene {\n  onInitialize(engine: ex.Engine<any>): void {\n    this.input.pointers.on('down', () => {\n      console.log('pointer down from scene1');\n    });\n  }\n}\nclass OtherSceneWithInput extends ex.Scene {\n  onInitialize(engine: ex.Engine<any>): void {\n    this.input.pointers.on('down', () => {\n      console.log('pointer down from scene2');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Excalibur Module - TypeScript\nDESCRIPTION: Shows how to import all Excalibur components using namespace import pattern.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/01-step-start-engine.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nimport * as ex from 'excalibur'\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrolling Ground Animation in Excalibur.js\nDESCRIPTION: Creates a scrolling effect by shifting the sourceView.x position of the ground sprite based on the pipe speed and elapsed time. Uses modulo operation to create an infinite loop of the ground texture.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/14-step-ground-graphics.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    onPostUpdate(_engine: ex.Engine, elapsedMs: number): void {\n        if (!this.moving) return;\n        this.groundSprite.sourceView.x += Config.PipeSpeed * (elapsedMs / 1000);\n        this.groundSprite.sourceView.x = this.groundSprite.sourceView.x % Resources.GroundImage.width;\n    }\n```\n\n----------------------------------------\n\nTITLE: Pixel Art Filtering Shader (GLSL)\nDESCRIPTION: The GLSL shader code used by Excalibur to implement high-quality pixel art filtering. This Inigo Quilez pixel art filter adjusts UVs and applies subtle subpixel antialiasing to eliminate common pixel art artifacts.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n// Inigo Quilez pixel art filter \n// https://jorenjoestar.github.io/post/pixel_art_filtering/\nvec2 uv_iq(in vec2 uv, in vec2 texture_size) {\n  vec2 pixel = uv * texture_size;\n\n  vec2 seam=floor(pixel+.5);\n  vec2 dudv=fwidth(pixel);\n  pixel=seam+clamp((pixel-seam)/dudv,-.5,.5);\n\n  return pixel/texture_size;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Primary Pointer in Excalibur\nDESCRIPTION: Demonstrates how to access the primary pointer in Excalibur, which normalizes both mouse and touch events.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/11-input/10.3-pointer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nengine.input.pointers.primary;\n```\n\n----------------------------------------\n\nTITLE: Installing Tiled Plugin\nDESCRIPTION: NPM installation command for Excalibur Tiled map editor plugin\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @excaliburjs/plugin-tiled\n```\n\n----------------------------------------\n\nTITLE: Configuring Top-Down Graphics Rendering\nDESCRIPTION: Shows how to configure isometric tiles to render graphics from the top instead of the default bottom-left position.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-isometricmap.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isoMap = new ex.IsometricMap({\n    ...\n    renderFromTopOfGraphic: true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Excalibur Dev Tool Instance\nDESCRIPTION: TypeScript code showing how to initialize and connect the dev tools to an Excalibur game instance. This enables debugging features for game development.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-dev-tool.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({...});\nconst devtool = new DevTool(game);\n```\n\n----------------------------------------\n\nTITLE: Disabling Excalibur Wiring in LDtk Resource\nDESCRIPTION: This code shows how to create an LDtk resource with Excalibur wiring disabled. This option allows for more custom control over how LDtk features are interpreted in Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ldtkMap = new LdtkResource('./path/to/my/cool-map.ldtk', {\n   useExcaliburWiring: false\n});\n```\n\n----------------------------------------\n\nTITLE: Performance Fallback Configuration in Excalibur.js\nDESCRIPTION: Shows how to configure performance fallback settings for Canvas2D rendering when WebGL performance is poor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.4-graphics-context.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvar game = new ex.Engine({\n    ...\n    configurePerformanceCanvas2DFallback: {\n        allow: true,\n        showPlayerMessage: true,\n        threshold: { fps: 20, numberOfFrames: 100 }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Pipe Image Resource in Excalibur.js\nDESCRIPTION: Configures the pipe image resource with clamped image wrapping to allow for sprite stretching. Uses ImageWrapping.Clamp to enable pixel stretching for variable pipe lengths.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/13-step-pipe-graphics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Resources = {\n    // Relative to /public in vite\n    ...,\n    PipeImage: new ex.ImageSource('./images/pipe.png', {\n        wrapping: ex.ImageWrapping.Clamp\n    }),\n    ...\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Scaling Actor Relative to Current Size with ScaleBy in Excalibur.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the ScaleBy method to scale an actor relative to its current size. It creates a red actor with an initial scale of 2, then scales it down by 1 (to its original size) at a rate of 0.1 scale factor per second.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.5-actions-scale.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n    pos: ex.vec(100, 100),\n    width: 100,\n    height: 100,\n    scale: ex.vec(2, 2)\n    color: ex.Color.Red\n});\n\n// Scale the actor relative to it's current scale down to 1, at .1 scale factor per second\nactor.actions.scaleBy(ex.vec(-1, -1), .1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Collision Solver Bias in Excalibur\nDESCRIPTION: Shows how to configure the Arcade Collision Solver bias to help mitigate seams in geometry. This is particularly useful for certain game types like platformers or games with predominant directional forces.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst engine = new ex.Engine({\n  ...\n  physics: {\n    solver: ex.SolverStrategy.Realistic,\n    arcade: {\n      contactSolveBias: ex.ContactSolveBias.VerticalFirst\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using FontSource in Excalibur\nDESCRIPTION: Demonstrates how to create a FontSource resource, add it to the loader, and convert it to a Font object after loading. It also shows how to set and override font options.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst fontSource = new ex.FontSource('/my-font.ttf', 'My Font')\nloader.addResource(fontSource)\n\ngame.start(loader).then(() => {\n  const font = fontSource.toFont() // returns ex.Font\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fontSource = new ex.FontSource('/my-font.ttf', 'My Font', { \n  filtering: ex.ImageFiltering.Pixel,\n  size: 16, // set a default size\n})\nconst font = fontSource.toFont({\n  // override just the size\n  size: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Fullscreen After Load in Excalibur\nDESCRIPTION: Shows how to enable fullscreen mode after loading by providing a fullscreenContainer option to the Loader constructor. This can be either a string ID or an HTMLElement instance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew ex.Loader({\n  fullscreenAfterLoad: true,\n  fullscreenContainer: document.getElementById('container')\n});\n```\n\n----------------------------------------\n\nTITLE: Bitmask to Tile Sprite Mapping in TypeScript\nDESCRIPTION: This code snippet defines a mapping between bitmask values and tile sprite coordinates in the spritesheet. Each number key in the object represents a specific bitmask pattern, and its value is an array containing the x and y coordinates of the corresponding tile in the spritesheet.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tilebitmask: Record<number, Array<number>> = {\n  0: [3, 3],\n  1: [3, 3],\n  4: [3, 3],\n  128: [3, 3],\n  32: [3, 3],\n  11: [0, 0],\n  175: [0, 0],\n  15: [0, 0],\n  47: [0, 0],\n  207: [0, 5],\n  203: [0, 5],\n  124: [3, 5],\n  43: [0, 0],\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Mapping in Excalibur\nDESCRIPTION: Demonstrates how to use the new InputMapper feature to map multiple input sources (keyboard, gamepad) to actor movement actions. This allows for accessibility and customizable controls in games.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst moveRight = (amount: number) => { actor.vel.x = 100 * amount }\nconst moveLeft = (amount: number) => { actor.vel.x = -100 * amount }\nconst moveUp = (amount: number) => { actor.vel.y = -100 * amount }\nconst moveDown = (amount: number) => { actor.vel.y = 100 * amount }\nengine.inputMapper.on(({keyboard}) => keyboard.isHeld(ex.Keys.ArrowRight) ? 1 : 0, moveRight);\nengine.inputMapper.on(({gamepads}) => gamepads.at(0).isButtonPressed(ex.Buttons.DpadRight) ? 1 : 0, moveRight);\nengine.inputMapper.on(({gamepads}) => gamepads.at(0).getAxes(ex.Axes.LeftStickX) > 0 ? gamepads.at(0).getAxes(ex.Axes.LeftStickX) : 0, moveRight);\n```\n\n----------------------------------------\n\nTITLE: Configuring LDtk Resource with Non-Strict Mode\nDESCRIPTION: This snippet shows how to create an LDtk resource with strict mode disabled. This allows the plugin to handle potentially invalid or corrupted LDtk source files more flexibly.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new LdtkResource('./path/to/my/cool-map.ldtk', {\n   strict: false\n});\n```\n\n----------------------------------------\n\nTITLE: Scene Resource Loading Implementation\nDESCRIPTION: Example of implementing onPreLoad to handle scene-specific resource loading.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur';\n\nclass LevelOne extends ex.Scene {\n  spriteFont!: ex.ImageSource;\n  playerSpriteSheet!: ex.ImageSource;\n\n  override onPreLoad(loader: DefaultLoader) {\n    this.spriteFont = new ex.ImageSource('./res/spritefont.png');\n    this.playerSpriteSheet = new ex.ImageSource('./res/player-sheet.png');\n    loader.addResource(this.spriteFont);\n    loader.addResource(this.playerSpriteSheet);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nine Slice Sprites in Excalibur (TypeScript)\nDESCRIPTION: Example of creating nine-slice sprites in Excalibur. Nine-slice sprites allow UI elements or bordered areas to be resized without distortion by defining margins that remain constant while stretching the center areas.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst nineSlice = new ex.NineSlice({\n  width: 300,\n  height: 100,\n  source: inputImageSource,\n  sourceConfig: {\n    width: 64,\n    height: 64,\n    topMargin: 5,\n    leftMargin: 7,\n    bottomMargin: 5,\n    rightMargin: 7\n  },\n  destinationConfig: {\n    drawCenter: true,\n    horizontalStretch: ex.NineSliceStretch.Stretch,\n    verticalStretch: ex.NineSliceStretch.Stretch\n  }\n});\n\nactor.graphics.add(nineSlice);\n```\n\n----------------------------------------\n\nTITLE: Adding Colliders to Isometric Tiles\nDESCRIPTION: Demonstrates how to add collision polygons to isometric tiles and set them as solid objects for physics interactions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/08-tile-maps/07-isometricmap.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst isoMap = new ex.IsometricMap({\n  tileWidth: 111,\n  tileHeight: 64, // note the tileHeight is half the asset height\n  columns: 2,\n  rows: 2\n});\n\nfor (let tile of isoMap.tiles) {\n  tile.solid = true;\n  tile.addCollider(ex.Shape.Polygon([ex.vec(0, 95), ex.vec(55, -32 + 95), ex.vec(111, 95), ex.vec(55, 32 + 95)]));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tiled Animations in Excalibur\nDESCRIPTION: Implements a tiled animation with specified dimensions and wrapping mode. Allows for repeating animations across a defined area.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst tilingAnimation = new ex.TiledAnimation({\n  animation: cardAnimation,\n  sourceView: {x: 20, y: 20},\n  width: 200,\n  height: 200,\n  wrapping: ex.ImageWrapping.Repeat\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Semaphore for Concurrent Operation Control\nDESCRIPTION: Example of using Semaphore to limit concurrent operations to 10 at a time between enter() and exit() calls.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst semaphore = new ex.Semaphore(10); // Only allow 10 concurrent between enter() and exit()\n...\n\nawait semaphore.enter();\nawait methodToBeLimited();\nsemaphore.exit();\n```\n\n----------------------------------------\n\nTITLE: Configuring ScreenAppender in Excalibur\nDESCRIPTION: Interface for configuring the ScreenAppender utility in Excalibur, allowing customization of the debug log overlay including dimensions, position, color, and z-index.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScreenAppenderOptions {\n  engine: Engine;\n  /**\n   * Optionally set the width of the overlay canvas\n  */\n  width?: number;\n  /**\n   * Optionally set the height of the overlay canvas\n  */\n  height?: number;\n  /**\n   * Adjust the text offset from the left side of the screen\n  */\n  xPos?: number;\n  /**\n   * Provide a text color\n  */\n  color?: Color;\n  /**\n   * Optionally set the CSS zindex of the overlay canvas\n  */\n  zIndex?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-updating a Custom Actor in Excalibur\nDESCRIPTION: Shows how to override the onPreUpdate method in a custom actor class. This method is called before the core update logic and can be used to set up state for the update.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/03-actors.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Player extends ex.Actor {\n  public onPreUpdate(engine: ex.Engine, delta: number) {\n    // update velocity\n    this.vel.setTo(-1, 0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Built-in Excalibur Components\nDESCRIPTION: Example demonstrating how to subclass and override built-in Excalibur components like BodyComponent, showing the ECS implementation that correctly handles component inheritance and type identification.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyBodyComponent extends ex.BodyComponent {}\n\nclass MyActor extends ex.Actor {\n    constructor() {\n      super({})\n      this.removeComponent(ex.BodyComponent);\n      this.addComponent(new MyBodyComponent())\n    }\n}\n\nconst myActor = new MyActor();\nconst myBody = myActor.get(ex.BodyComponent); // Returns the new MyBodyComponent subtype!\n```\n\n----------------------------------------\n\nTITLE: Configuring FPS Limit in Excalibur Engine\nDESCRIPTION: Shows how to initialize the Excalibur engine with a maximum FPS limit of 30. This helps produce consistent experiences across different platforms.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-clock.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    ...\n    maxFps: 30\n});\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines for Complex Animations in Excalibur\nDESCRIPTION: Demonstrates the use of the experimental ex.coroutine function for running code that changes over time. This is useful for modeling complex animation code, with each yield representing a frame.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst completePromise = coroutine(engine, function * () {\n  let elapsed = 0;\n  elapsed = yield 200; // frame 1 wait 200 ms before resuming\n  elapsed = yield fetch('./some/data.json'); // frame 2\n  elapsed = yield; // frame 3\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tile Rules for Wave Function Collapse in TypeScript\nDESCRIPTION: This code snippet defines the rules for tree and grass tiles in the Wave Function Collapse algorithm. It specifies which tiles are allowed in each direction (up, down, left, right) for both tree and grass tiles.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-06-01-wave-function-collapse/wfc.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet treeTileRules = {\n  up: [treeTopTile, grassTile, waterTile],\n  down: [grassTile, waterTile, treeTile],\n  left: [grassTile, waterTile, treeTile],\n  right: [grassTile, waterTile, treeTile],\n};\n\nlet grassTileRules = {\n  up: [treeTile, grassTile, waterTile],\n  down: [grassTile, waterTile, treeTile],\n  left: [grassTile, waterTile, treeTile],\n  right: [grassTile, waterTile, treeTile],\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing Canvas Drawing with Caching in Excalibur.js\nDESCRIPTION: This code example shows how to optimize canvas drawing by enabling caching and only updating the canvas when necessary. This approach is more efficient than updating the canvas every frame.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/14-performance/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet rectangleWidth = 100\nlet draw = (ctx: CanvasRenderingContext2D) => {\n  ctx.fillStyle = 'blue'\n  ctx.fillRect(0, 0, rectangleWidth, 20)\n}\n\nlet canvas = new Canvas({\n  cache: true,\n  draw: draw,\n})\n\nif (sizeChanged) {\n  canvas.flagDirty()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Graphics Context in Excalibur\nDESCRIPTION: Shows how to access the underlying ExcaliburGraphicsContext through the onPostDraw hook. This allows for custom drawing operations like lines, shapes, or other graphical elements directly on the canvas.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-graphics-component.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\nactor.graphics.onPostDraw = (ctx: ex.ExcaliburGraphicsContext) => {\n  ctx.save();\n  ctx.z = 99;\n  ctx.drawLine(ex.vec(0, 0), ex.vec(200, 200), ex.Color.Green, 10);\n  ctx.restore();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Promise Static Methods in Excalibur.js\nDESCRIPTION: Adds static resolve and reject methods to the ex.Promise class for creating pre-resolved or pre-rejected promises.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Promise.resolve\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Promise.reject\n```\n\n----------------------------------------\n\nTITLE: Applying Tint to Sprites\nDESCRIPTION: Shows how to apply color tinting to sprites using the tint property.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst imageSource = new ex.ImageSource('./path/to/image.png');\nawait imageSource.load();\nconst sprite = imageSource.toSprite();\nsprite.tint = ex.Color.Red;\n```\n\n----------------------------------------\n\nTITLE: CSS for FitContainer Display Mode\nDESCRIPTION: CSS styling for the container element that will hold the game canvas in FitContainer mode, with flexbox for centering and a dashed border for visualization.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.container {\n    /* Flexbox used to center game */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    /* Container size with border */\n    border: red 4px dashed;\n    width: 50%;\n    height: 300px;\n}\n\n.snippet-resizer { display:flex; margin:0; padding:0; resize:both; overflow:hidden }\n.snippet-resizer > .snippet-resized { flex-grow:1; margin:0; padding:0; border:0 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Canvas2D Fallback in Excalibur Engine\nDESCRIPTION: Sets up a performance fallback configuration for the Excalibur Engine to switch to Canvas2D rendering when performance drops below a certain threshold. This helps players with non-standard browser configurations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nvar game = new ex.Engine({\n  ...\n  configurePerformanceCanvas2DFallback: {\n    allow: true, // opt-out of the fallback\n    showPlayerMessage: true, // opt-in to a player pop-up message\n    threshold: { fps: 20, numberOfFrames: 100 } // configure the threshold to trigger the fallback\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Vanilla Canvas Game Implementation in TypeScript\nDESCRIPTION: Basic game implementation using vanilla canvas in TypeScript. Creates a canvas, sets up the game loop, draws a blue background, displays FPS, and shows a red square in the center.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nconst canvas = document.createElement('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\ncanvas.height = window.innerHeight;\ncanvas.width = window.innerWidth;\ndocument.body.appendChild(canvas);\n\nlet lastTime = performance.now();\nconst mainloop: FrameRequestCallback = (now) => {\n    const delta = (now - lastTime)/1000;\n    lastTime = now;\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    ctx.font = '50px sans-serif';\n    ctx.fillStyle = 'lime';\n    ctx.fillText((1/delta).toFixed(1), 20, 100);\n\n    ctx.fillStyle = 'red';\n    ctx.fillRect(canvas.width/2, canvas.height/2, 40, 40);\n\n    requestAnimationFrame(mainloop);\n}\n\nmainloop(performance.now());\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Lock to Tilemap Bounds in Excalibur\nDESCRIPTION: This code snippet shows how to enable the camera locking feature in the Excalibur Tiled plugin. By setting useTilemapCameraStrategy to true, the camera will be constrained within the Tilemap bounds, preventing the background from being visible.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst tiledMap = new TiledResource('./isometric.tmx', {\n   useTilemapCameraStrategy: true\n});\n```\n\n----------------------------------------\n\nTITLE: Particle Emitter Configuration in TypeScript for Excalibur\nDESCRIPTION: Example showing the updated syntax for configuring a ParticleEmitter in Excalibur. The new structure separates particle-specific parameters under a dedicated 'particle' property to distinguish them from emitter settings.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emitter =  new ex.ParticleEmitter({\n        width: 10,\n        height: 10,\n        radius: 5,\n        emitterType: ex.EmitterType.Rectangle,\n        emitRate: 300,\n        isEmitting: true,\n        particle: {\n          transform: ex.ParticleTransform.Global,\n          opacity: 0.5,\n          life: 1000,\n          acc: ex.vec(10, 80),\n          beginColor: ex.Color.Chartreuse,\n          endColor: ex.Color.Magenta,\n          startSize: 5,\n          endSize: 100,\n          minVel: 100,\n          maxVel: 200,\n          minAngle: 5.1,\n          maxAngle: 6.2,\n          fade: true,\n          maxSize: 10,\n          graphic: swordImg.toSprite(),\n          randomRotation: true,\n          minSize: 1\n        }\n      });\n```\n\n----------------------------------------\n\nTITLE: Font Options Interface in Excalibur.js\nDESCRIPTION: Shows the available options for configuring fonts in Excalibur.js. The interface includes properties for size, unit, family, style, bold, text alignment, baseline alignment, direction, and shadow effects.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FontOptions {\n  size?: number\n  unit?: FontUnit\n  family?: string\n  style?: FontStyle\n  bold?: boolean\n  textAlign?: TextAlign\n  baseAlign?: BaseAlign\n  direction?: Direction\n  shadow?: {\n    blur?: number\n    offset?: Vector\n    color?: Color\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rectangle Graphic in Excalibur.js\nDESCRIPTION: Shows how to create a green rectangle graphic using the Rectangle class in Excalibur.js. The rectangle is defined with a width and height of 100 pixels.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-graphics.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst rect = new ex.Rectangle({\n  width: 100,\n  height: 100,\n  color: ex.Color.Green\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Physics Settings in Excalibur Engine Constructor (TypeScript)\nDESCRIPTION: Shows how to configure physics settings in the Excalibur Engine constructor, replacing the deprecated ex.Physics static configuration.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst engine = new ex.Engine({\n  ...\n  physics: {\n    solver: ex.SolverStrategy.Realistic,\n    gravity: ex.vec(0, 20),\n    arcade: {\n      contactSolveBias: ex.ContactSolveBias.VerticalFirst\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Detecting Browser Features in Excalibur.js\nDESCRIPTION: Adds methods to the ex.Detector class for retrieving and logging the browser feature support matrix.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Detector.getBrowserFeatures()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Detector.logBrowserFeatures()\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Deno\nDESCRIPTION: TypeScript configuration for using Excalibur with Deno, including necessary DOM libraries and disabling strict mode.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": false,\n    \"lib\": [\"dom\", \"dom.iterable\", \"dom.asynciterable\", \"Deno.ns\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Comparison Testing in Excalibur with Jasmine\nDESCRIPTION: Shows how to use the new async matchers in excalibur-jasmine for image comparison testing. This snippet demonstrates checking if the engine's canvas matches an expected image with a specified similarity threshold.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2021-10-03-excalibur-0-25-0-released/2021-10-03-excalibur-0-25-0-released.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nit('should match images', async () => {\n  let engine = new ex.Engine({width: 100, height: 100});\n  await expectAsync(engine.canvas).toEqualImage('images/expectedcanvas.png', .99);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating orphaned Actor warning in development build\nDESCRIPTION: Example of creating an Actor without adding it to a Scene, which triggers a warning in the development build of Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst orphan = new ex.Actor({\n    name: 'orphaned'\n});\n\n// OOOPS! I forgot to add orphan Actor to a Scene\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene Navigation with GoToOptions in TypeScript\nDESCRIPTION: Shows the new type structure for the ex.Engine.goToScene method's second argument which now accepts GoToOptions interface with scene activation data, transitions and loader configuration.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * Optionally supply scene activation data passed to Scene.onActivate\n   */\n  sceneActivationData?: TActivationData,\n  /**\n   * Optionally supply destination scene \"in\" transition, this will override any previously defined transition\n   */\n  destinationIn?: Transition,\n  /**\n   * Optionally supply source scene \"out\" transition, this will override any previously defined transition\n   */\n  sourceOut?: Transition,\n  /**\n   * Optionally supply a different loader for the destination scene, this will override any previously defined loader\n   */\n  loader?: DefaultLoader\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Graphics Object in Excalibur\nDESCRIPTION: Demonstrates how to create and use the new Line graphics object in Excalibur. This allows for drawing lines with specified start and end points, color, and thickness.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst lineActor = new ex.Actor({\n  pos: ex.vec(100, 0)\n});\nlineActor.graphics.anchor = ex.Vector.Zero;\nlineActor.graphics.use(new ex.Line({\n  start: ex.vec(0, 0),\n  end: ex.vec(200, 200),\n  color: ex.Color.Green,\n  thickness: 10\n}));\ngame.add(lineActor);\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Actions in Excalibur\nDESCRIPTION: Example of using ParallelActions to execute multiple actions simultaneously on an actor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor();\nconst parallel = new ex.ParallelActions([\n  new ex.ActionSequence(actor, ctx => ctx.moveTo(ex.vec(100, 0), 100)),\n  new ex.ActionSequence(actor, ctx => ctx.rotateTo(Math.PI/2, Math.PI/2))\n]);\nactor.actions.runAction(parallel);\n```\n\n----------------------------------------\n\nTITLE: Listening for Fallback Graphics Context Event in Excalibur.js\nDESCRIPTION: This code snippet shows how to listen for the 'fallbackgraphicscontext' event in Excalibur.js. This event is triggered when the performance fallback is activated, allowing developers to respond accordingly.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/14-performance/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngame.on('fallbackgraphicscontext', (ctx) => {\n  console.log('fallback triggered', ctx)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SpriteSheets in Excalibur\nDESCRIPTION: Shows how to create a SpriteSheet from an ImageSource using the new fromImageSource method. This replaces the previous SpriteSheet constructor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst runImage = new ex.ImageSource(runImageSrc)\n\nconst runSheet = ex.SpriteSheet.fromImageSource({\n  image: runImage,\n  grid: {\n    rows: 1,\n    columns: 21,\n    spriteWidth: 96,\n    spriteHeight: 96,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Engine Debug Statistics in Excalibur.js\nDESCRIPTION: Adds properties to the Engine class for collecting and storing debug statistics and frame information.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Engine.stats\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nex.Engine.debug\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Excalibur game script\nDESCRIPTION: A simple TypeScript example showing how to create and start an Excalibur game engine instance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/index.ts\nconst game = new Engine({\n  width: 600,\n  height: 400\n});\n\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Coroutine in Excalibur\nDESCRIPTION: Demonstrates the simplified ex.coroutine usage within an Excalibur lifecycle, without needing to pass the engine instance.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = ex.coroutine(function* () {...});\n```\n\n----------------------------------------\n\nTITLE: Adding Time Scaling to Excalibur.js Engine\nDESCRIPTION: Adds a timescale property to the Engine class to allow time-based scaling of movements and updates.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\nEngine.timescale\n```\n\n----------------------------------------\n\nTITLE: Configuring Antialiasing for Pixel Art in Excalibur\nDESCRIPTION: Demonstrates how to configure antialiasing settings for pixel art rendering, allowing for smooth subpixel rendering without shimmer or fat-pixel artifacts. It shows both a simple opt-in and a more detailed configuration.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n   antialiasing: {\n       pixelArtSampler: false,\n       filtering: ex.ImageFiltering.Pixel,\n       nativeContextAntialiasing: false,\n       canvasImageRendering: 'pixelated'\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating State Machine in Excalibur\nDESCRIPTION: Demonstrates creation of a finite state machine with defined states, transitions, and enter handlers.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst machine = ex.StateMachine.create({\n  start: 'STOPPED',\n  states: {\n    PLAYING: {\n      onEnter: () => {\n        console.log(\"playing\");\n      },\n      transitions: ['STOPPED', 'PAUSED']\n    },\n    STOPPED: {\n      onEnter: () => {\n        console.log(\"stopped\");\n      },\n      transitions: ['PLAYING', 'SEEK']\n    },\n    SEEK: {\n      transitions: ['*']\n    },\n    PAUSED: {\n      onEnter: () => {\n        console.log(\"paused\")\n      },\n      transitions: ['PLAYING', 'STOPPED']\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Parallax Component to an Actor in Excalibur\nDESCRIPTION: Shows how to add a ParallaxComponent to an actor, creating a parallax effect based on camera position. Note that this affects drawing and is not recommended for use with colliders.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor();\n// The actor will be drawn shifted based on the camera position scaled by the parallax factor\nactor.addComponent(new ParallaxComponent(ex.vec(0.5, 0.5)));\n```\n\n----------------------------------------\n\nTITLE: Game Canvas Styling - CSS\nDESCRIPTION: CSS styles for centering the game canvas on the page and setting up proper full-screen display.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/01-step-start-engine.mdx#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nhtml,\nbody {\n    background-color: black;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n}\n\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Autotiled Map in Excalibur.js with TypeScript\nDESCRIPTION: This function draws the tilemap by iterating through each tile, calculating its bitmask, and applying the appropriate sprite based on the bitmask value. It first places a base floor tile, then adds the correct wall tile on top if the tile is marked as solid. The tilebitmask mapping is used to determine which sprite to draw.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndraw(): TileMap {\n    // call the method that loops through and configures all the bitmasks\n    let bitmask = this.createTileMapBitmasks(this.map);\n    let tileindex = 0;\n\n    for (const tile of this.map.tiles) {\n      tile.clearGraphics();\n\n      // if the tile is solid, draw the base tile first, THEN the foreground tile\n      if (tile.data.get(\"solid\") === true) {\n        // add floor tile\n        tile.addGraphic(this.baseTile);\n\n        // using the tile's index grab the bitmask value\n        let thisTileBitmask = bitmask[tileindex];\n\n        // this is the magic... grab the coordinates of the tile sprite from tilebitmask, and provide that to Excalibur\n        let sprite: Sprite;\n        sprite = this.spriteSheet.getSprite(tilebitmask[thisTileBitmask][0], tilebitmask[thisTileBitmask][1]);\n\n        //add the wall sprite to the tile\n        tile.addGraphic(sprite);\n\n      } else {\n        // if the tile is not solid, just draw the base tile\n        tile.addGraphic(this.baseTile);\n      }\n      tileindex++;\n    }\n    return this.map;\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining a Player Class in TypeScript for Excalibur.js\nDESCRIPTION: This snippet demonstrates how to create a Player class that extends the Actor class in Excalibur.js. It initializes the player with a Sprite graphic in the onInitialize method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/101-style-guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Actor, Sprite } from \"excalibur\";\n\nclass Player extends Actor {\n  onInitialize() {\n    this.graphics.use(new Sprite());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including bundled Excalibur script in HTML\nDESCRIPTION: HTML snippet showing how to include the bundled Excalibur script in an HTML document.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"game.bundle.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Binding 'this' in Excalibur Coroutine\nDESCRIPTION: Shows how to bind a specific 'this' context to an Excalibur coroutine within the engine's lifecycle.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = ex.coroutine({myThis: 'cool'}, function* () {...});\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the Docusaurus website using yarn package manager.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Stopping Pointer Event Propagation in Excalibur\nDESCRIPTION: Method added in v0.17.0 that prevents pointer events from propagating to other actors, working similarly to the standard DOM event.stopPropagation().\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\nPointerEvent.stopPropagation()\n```\n\n----------------------------------------\n\nTITLE: Loading Web Fonts with Google Fonts in HTML\nDESCRIPTION: Shows how to load web fonts using Google Fonts in HTML. This is recommended for ensuring consistent font rendering across different computers instead of relying on system fonts.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-text.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap\"\n  rel=\"stylesheet\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Images to Materials in Excalibur\nDESCRIPTION: Demonstrates how to load additional images into ex.Materials, allowing for more complex shader effects by incorporating external textures.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst noise = new ex.ImageSource('./noise.avif');\nloader.addResource(noise);\n\nvar waterMaterial = game.graphicsContext.createMaterial({\n  name: 'water',\n  fragmentSource: waterFrag,\n  color: ex.Color.fromRGB(55, 0, 200, .6),\n  images: {\n    u_noise: noise\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SpriteSheet from Multiple Source Views in Excalibur\nDESCRIPTION: Demonstrates how to create a SpriteSheet from a list of different sized source views using the new fromImageSourceWithSourceViews method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst ss = ex.SpriteSheet.fromImageSourceWithSourceViews({\n  image,\n  sourceViews: [\n    {x: 0, y: 0, width: 20, height: 30},\n    {x: 20, y: 0, width: 40, height: 50},\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NineSliceStretch Enum in Excalibur\nDESCRIPTION: Enum definition for stretch behavior options in the NineSlice component. Provides three different modes: Stretch (scales image but may distort), Tile (repeats without distortion), and TileFit (repeats with sizing adjustments).\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.6-nineslice.mdx#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport enum NineSliceStretch {\n  Stretch,\n  Tile,\n  TileFit\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Cellular Automata Rules\nDESCRIPTION: Example of applying the cellular automata rules to a 7x7 grid with specific parameters for wall generation and floor creation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-6-16-cellular-automata/cellularautonoma.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntiles = applyCellularAutomataRules(tiles, 7, 7, 'walls', 3, 5);\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component for Highlighting in Excalibur.js Docs\nDESCRIPTION: This code defines a Highlight React component that can be used within MDX to create interactive, colorful spans of text in the documentation.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/101-style-guide.mdx#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '20px',\n      color: '#fff',\n      padding: '10px',\n      cursor: 'pointer',\n    }}\n    onClick={() => {\n      alert(`You clicked the color ${color} with label ${children}`)\n    }}>\n    {children}\n  </span>\n);\n\nThis is <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> !\n\nThis is <Highlight color=\"#1877F2\">Facebook blue</Highlight> !\n```\n\n----------------------------------------\n\nTITLE: Standalone JavaScript Implementation\nDESCRIPTION: Example showing how to use the Excalibur Tiled plugin in standalone JavaScript mode\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-tiled-plugin-old.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// New game\nconst game = new ex.Engine({ width: 500, height: 400, canvasElementId: 'game' })\n\n// Create a new TiledMapResource loadable\nconst tiledMap = new ex.Plugin.Tiled.TiledMapResource('test.tmx')\n\n// Create a loader and reference the map\nconst loader = new ex.Loader([tiledMap])\n\n// Start the game (starts the loader)\ngame.start(loader).then(function () {\n  console.log('Game loaded')\n\n  tiledMap.addTiledMapToScene(game.currentScene)\n})\n```\n\n----------------------------------------\n\nTITLE: PostProcessor Interface Implementation in TypeScript\nDESCRIPTION: Interface definition for post-processing effects in the Excalibur engine. Requires implementation of initialize method with WebGL context and shader getter.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PostProcessor {\n  intialize(gl: WebGLRenderingContext): void;\n  getShader(): Shader;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Excalibur with ESM JavaScript\nDESCRIPTION: HTML template for using Excalibur with modern ES modules through unpkg CDN\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Excalibur Vanilla JS</title>\n</head>\n<body>\n    <script type=\"importmap\">\n        {\n            \"imports\": {\n                \"excalibur\": \"https://www.unpkg.com/excalibur@next/build/esm/excalibur.min.js\"\n            }\n        }\n    </script>\n    <script type=\"module\" src=\"src/game.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Excalibur Engine with Detailed Pixel Art Settings\nDESCRIPTION: Demonstrates the manual configuration equivalent to using pixelArt: true, showing all the specific antialiasing and filtering settings that are applied automatically.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/06.0-pixel-art.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  antialiasing: {\n    pixelArtSampler: true, // turns on the sub-pixel shader for pixel art\n    nativeContextAntialiasing: false, // turns off canvas aa\n    multiSampleAntialiasing: true, // turns on msaa which smooths quad boundaries\n    filtering: ImageFiltering.Blended, // hints the image loader to use blended filtering\n    canvasImageRendering: 'auto' // applies the 'auto'-matic css to the canvas CSS image-rendering\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FitContainer Display Mode in Excalibur\nDESCRIPTION: Configures the game to fit the parent container element while maintaining aspect ratio and resolution, targeting a specific canvas element.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n    canvasElementId: 'game',\n    width: 600,\n    height: 400,\n    displayMode: ex.DisplayMode.FitContainer\n});\n```\n\n----------------------------------------\n\nTITLE: Using New Timer Features in Excalibur\nDESCRIPTION: Shows how to use the new pause/unpause feature for timers and the new event listening feature to listen to events only once.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Pause and unpause a timer\ntimer.pause();\ntimer.unpause();\n\n// Listen to an event only once\nactor.once('eventname', (event) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: CSS for FillContainer Display Mode\nDESCRIPTION: CSS styling for the container element that will hold the game canvas in FillContainer mode, with a dashed border for visualization.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.container {\n    border: red 4px dashed;\n    width: 50%;\n    height: 300px;\n}\n\n.snippet-resizer { display:flex; margin:0; padding:0; resize:both; overflow:hidden }\n.snippet-resizer > .snippet-resized { flex-grow:1; margin:0; padding:0; border:0 }\n```\n\n----------------------------------------\n\nTITLE: Defining Complex World State for Simulation\nDESCRIPTION: A more detailed world state implementation for a fire-feeding simulation that tracks multiple resources and player states.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-04-29-goap-npc-ai/goapblog.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const world = {\n  tree: 500,\n  tree2: 500,\n  tree3: 500,\n  campfire: 0,\n  player: 0,\n  playerState: playerState.idle,\n  bearDistance: 300,\n};\n```\n\n----------------------------------------\n\nTITLE: Using GraphicsGroup for Layered Graphics in Excalibur (TypeScript)\nDESCRIPTION: Demonstrates how to use GraphicsGroup to create layered graphics in Excalibur, as an alternative to the deprecated multiple graphics support in Graphics components.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\nconst graphicsGroup = new ex.GraphicsGroup({\n  members: [\n    new ex.Rectangle({width: 100, height: 100, color: ex.Color.Red}),\n    { offset: ex.vec(100, 100), graphic: new ex.Circle({radius: 100, color: ex.Color.Blue})}\n  ]\n});\nactor.graphics.use(graphicsGroup);\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur Aseprite Plugin via npm\nDESCRIPTION: Command to install the Excalibur Aseprite plugin using npm package manager.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-aseprite-plugin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @excaliburjs/plugin-aseprite\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur CLI for Quick Start (Shell)\nDESCRIPTION: This command uses npx to run the create-excalibur tool, which scaffolds new Excalibur game projects with various bundler options or vanilla JavaScript.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-excalibur@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website with SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deno Setup for Excalibur\nDESCRIPTION: Example of importing Excalibur in a Deno environment using ESM imports\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport { Engine } from 'https://esm.sh/excalibur';\n\n// and Tada!\nconst game = new Engine();\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Scene Configuration in Excalibur\nDESCRIPTION: Demonstrates scene configuration with transitions and loaders, showing how to define and manage multiple scenes with proper typing.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst game = new ex.Engine({\n  scenes: {\n    scene1: {\n      scene: scene1,\n      transitions: {\n        out: new ex.FadeInOut({duration: 1000, direction: 'out', color: ex.Color.Black}),\n        in: new ex.FadeInOut({duration: 1000, direction: 'in'})\n      }\n    },\n    scene2: {\n      scene: scene2,\n      loader: ex.DefaultLoader,\n      transitions: {\n        out: new ex.FadeInOut({duration: 1000, direction: 'out'}),\n        in: new ex.FadeInOut({duration: 1000, direction: 'in', color: ex.Color.Black })\n      }\n    },\n  scene3: ex.Scene\n  } \n})\n\ngame.start('scene1',\n{\n  inTransition: new ex.FadeInOut({duration: 500, direction: 'in', color: ex.Color.ExcaliburBlue})\n  loader: boot,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Excalibur (TypeScript)\nDESCRIPTION: Overview of Excalibur's coroutine system which allows for complex behavior and animations over time. Shows different yield patterns for waiting specific durations, frames, promises, or other coroutines.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nex.coroutine(function*() {\n  ...\n  yield 100; // wait 100ms\n  yield; // wait to next frame\n  yield Promsie.resolve(); // wait for promise\n  yield* ex.coroutine(function* () { ..}); // wait for nested coroutine\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Timer with Variable Duration\nDESCRIPTION: Demonstrates setting up a timer with random interval ranges.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst random = new ex.Random(1337);\nconst timer = new ex.Timer({\n  random,\n  interval: 500,\n  randomRange: [0, 500]\n})\n```\n\n----------------------------------------\n\nTITLE: Local JavaScript Setup for Excalibur\nDESCRIPTION: HTML template for including Excalibur from a local file\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head></head>\n  <body>\n    <script src=\"excalibur.min.js\"></script>\n    <script src=\"./my-game.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Template with TypeScript Module\nDESCRIPTION: HTML template that sets up a basic webpage structure and includes a TypeScript module using Vite's module support.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-step-ts-env.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Excalibird</title>\n  </head>\n  <body>\n    <script type=\"module\" src=\"./src/main.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining World State in GOAP\nDESCRIPTION: Example of a basic world state definition using key-value pairs to represent the game environment's current conditions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-04-29-goap-npc-ai/goapblog.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nworld = {\n\ttrees: 3;\n\tbears: 1;\n\tplayerPosition: {x: 100, y:200};\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur v0.30.1 via npm\nDESCRIPTION: Command to install the latest version of Excalibur.js using npm package manager.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-12-13-excalibur-0-30-0-released/2024-12-13-excalibur-0-30-0-released.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install excalibur@0.30.1\n```\n\n----------------------------------------\n\nTITLE: Installing Vite and TypeScript Development Dependencies\nDESCRIPTION: Command to install Vite and TypeScript as development dependencies with exact versions using npm.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-step-ts-env.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vite typescript --save-exact --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur via npm\nDESCRIPTION: Command to install Excalibur through npm, which provides the best support for TypeScript typings.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install excalibur\n```\n\n----------------------------------------\n\nTITLE: Getting SpriteSheet Animation by Coordinates in Excalibur\nDESCRIPTION: Method added in v0.16.0 that allows creating animations from custom sprite coordinates instead of using the default grid-based sprite sheet methods.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nSpriteSheet.getAnimationByCoords(engine, coords[], speed)\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Method - TypeScript\nDESCRIPTION: Demonstrates individual component import method as an alternative to namespace import.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/01-step-start-engine.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine } from 'excalibur'\n```\n\n----------------------------------------\n\nTITLE: Using New Color and Vector Methods in Excalibur\nDESCRIPTION: Demonstrates the new toString options for Color and the new static distance method for Vector.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Color to string options\ncolor.toString('hsl');\ncolor.toString('hex');\n\n// Vector distance\nlet distance = Vector.distance(vector1, vector2);\n```\n\n----------------------------------------\n\nTITLE: Converting 8-bit Neighbor Bitmask to Decimal Value\nDESCRIPTION: A calculation demonstrating how an 8-bit binary neighbor pattern (10101101) is converted to its decimal representation (173) for use in auto-tiling.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n   1         0         1         1         0          1          0          1\n__________________________________________________________________________________\n(1 * 1) + (0 * 2) + (1 * 4) + (1 * 8) + (0 * 16) + (1 * 32) + (0 * 64) + (1 * 128)\n\n1 + 4 + 8 + 32 + 128 = 173\n```\n\n----------------------------------------\n\nTITLE: Importing Excalibur Engine with TypeScript Support from Skypack CDN\nDESCRIPTION: This snippet demonstrates how to import the Excalibur Engine from skypack.dev with TypeScript support enabled. It includes the '?dts' query parameter to ensure TypeScript declarations are loaded for IntelliSense functionality.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine } from \"https://cdn.skypack.dev/excalibur?dts\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cellular Automata Rules Engine\nDESCRIPTION: Defines the core logic for applying cellular automata rules to a grid. Processes each cell based on its neighbors and configurable cutoff values to determine state transitions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-6-16-cellular-automata/cellularautonoma.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function applyCellularAutomataRules(\n  map: number[],\n  width: number,\n  height: number,\n  oob: string | undefined,\n  cutoff0: number | undefined,\n  cutoff1: number | undefined\n): number[] {\n  const newMap = new Array(width * height).fill(0);\n\n  let zeroLimit = 4;\n  if (cutoff0) zeroLimit = cutoff0 + 1; //this creates the less than effect\n  let oneLimit = 5;\n  if (cutoff1) oneLimit = cutoff1;  // this creates the greater than or equalto\n\n  for (let i = 0; i < height * width; i++) {\n    for (let x = 0; x < width; x++) {\n      const wallCount = countAdjacentWalls(map, width, height, i, oob); //counts walls in neighbors\n      if (map[i] === 1) {\n        if (wallCount < zeroLimit) {\n          newMap[i] = 0; // Change to floor if there are less than cuttoff0 adjacent walls\n        } else {\n          newMap[i] = 1; // Remain wall\n        }\n      } else {\n        if (wallCount >= oneLimit) {\n          newMap[i] = 1; // Change to wall if there are cutoff1 or more adjacent walls\n        } else {\n          newMap[i] = 0; // Remain floor\n        }\n      }\n    }\n  }\n  return newMap;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur NPM Package\nDESCRIPTION: Basic NPM installation command for adding Excalibur as a project dependency\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install excalibur\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Development and Building\nDESCRIPTION: JSON configuration for package.json that defines npm scripts for starting the development server, building the project, and serving the production build.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-step-ts-env.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"start\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"serve\": \"vite preview\"\n},\n```\n\n----------------------------------------\n\nTITLE: Running Parcel bundler\nDESCRIPTION: Command to build and run a project using Parcel bundler with the entry point set to the HTML file.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx parcel src/index.html --no-autoinstall\n```\n\n----------------------------------------\n\nTITLE: Configuring TileMap Rendering in Excalibur\nDESCRIPTION: Demonstrates how to configure a TileMap's rendering behavior using the renderFromTopOfGraphic option. When false (default), renders from bottom to match IsometricMap and Tiled.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst tileMap = new ex.TileMap({\n  renderFromTopOfGraphic: false\n})\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for Excalibur Game\nDESCRIPTION: Shows the minimal HTML structure required to run an Excalibur game. It includes a script tag that loads the game JavaScript file.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-architecture.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Cool Game!</title>\n  </head>\n  <body>\n    <script src=\"game.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Label with Font in Excalibur TypeScript\nDESCRIPTION: Demonstrates how to create a Label using the new constructor syntax with Font object in Excalibur v0.25.0.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst label = new ex.Label({\n  text: 'My Text',\n  x: 100,\n  y: 100,\n  font: new ex.Font({\n    family: 'Consolas',\n    size: 32\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Excalibur Game Engine\nDESCRIPTION: Starts the game engine, which begins the game loop, rendering, and input processing. This must be called after configuring the game to begin execution.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-breakout.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Start the engine to begin the game.\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Installing Tiled Plugin for Excalibur\nDESCRIPTION: Demonstrates how to install the Tiled plugin for Excalibur using npm.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-tiled-plugin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-exact @excaliburjs/plugin-tiled\n```\n\n----------------------------------------\n\nTITLE: HTML UI Pixel Conversion CSS\nDESCRIPTION: CSS implementation for converting Excalibur world pixels to CSS pixels, enabling HTML UI elements to scale properly with the game canvas.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.ui-container {\n  pointer-events: none;\n  position: absolute;\n  transform-origin: 0 0;\n  transform: scale(\n    calc(var(--ex-pixel-ratio)),\n    calc(var(--ex-pixel-ratio)));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Parcel Bundler\nDESCRIPTION: Command to install Parcel bundler as a development dependency for easy project setup and bundling of TypeScript and other assets.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> npm install parcel --save-dev --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing Sprite Fusion Plugin - NPM Command\nDESCRIPTION: NPM command to install the Sprite Fusion plugin for Excalibur.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-spritefusion-plugin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @excaliburjs/plugin-spritefusion\n```\n\n----------------------------------------\n\nTITLE: CSS Menu Positioning with Variables\nDESCRIPTION: CSS code showing how to position menu elements using CSS variables set by Excalibur coordinate conversion.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/01-html.mdx#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.menu {\n  position: absolute;\n  /* position menu on click */\n  left: var(--pointer-x);\n  top: var(--pointer-y);\n}\n```\n\n----------------------------------------\n\nTITLE: Including TypeScript in HTML for Parcel\nDESCRIPTION: HTML snippet showing how to include a TypeScript file in an HTML document for use with Parcel bundler.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head></head>\n  <body>\n    <script src=\"./index.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Future Type for Promise Management\nDESCRIPTION: Shows usage of the new Future type for wrapping native promises with manual resolution control.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst future = new ex.Future();\nconst promise = future.promise; // returns promise\npromise.then(() => {\n  console.log('Resolved!');\n});\nfuture.resolve(); // resolved promise\n```\n\n----------------------------------------\n\nTITLE: Converting Decimal to Binary Calculation Example\nDESCRIPTION: A mathematical calculation showing how the decimal number 42 is represented in binary through powers of 10.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2024-07-02-autotiling/AT.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(2 * 1) + (4 * 10) = 42\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur Dev Tools via NPM\nDESCRIPTION: Command to install the Excalibur dev tools package using NPM package manager.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-dev-tool.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @excaliburjs/dev-tools\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Absolute Paths in HTML\nDESCRIPTION: Demonstrates how to use the HTML <base> tag to set the base URL for absolute paths in an Excalibur.js game. This is useful when hosting the game in a subdirectory or on platforms like GitHub Pages.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/06-resources/05-resources.mdx#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- Set the base for all absolute URLs -->\n    <base href=\"/root\" />\n  </head>\n  <body>\n    <!-- The browser will now properly resolve /root/game.js -->\n    <script src=\"/game.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Opening Android Project in Android Studio\nDESCRIPTION: Command to open the Android project in Android Studio using Capacitor's CLI. This allows for native-side development and running the app in an emulator.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> npx cap open android\n```\n\n----------------------------------------\n\nTITLE: Importing Excalibur in Deno (Named Import)\nDESCRIPTION: Example of importing Excalibur in a TypeScript file using named imports for Deno environment.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport { Engine } from 'https://esm.sh/excalibur@0.26.0-alpha.264';\n\nconst game = new Engine();\ngame.start();\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur Tiled Plugin via NPM\nDESCRIPTION: Command to install the Excalibur Tiled plugin using npm package manager\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-tiled-plugin-old.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @excaliburjs/plugin-tiled\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur Game Engine\nDESCRIPTION: Command to install the Excalibur game engine as a runtime dependency with an exact version using npm.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/00-step-ts-env.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install excalibur --save-exact\n```\n\n----------------------------------------\n\nTITLE: Building Excalibur project\nDESCRIPTION: Commands to build the Excalibur project, run tests, start the sandbox, and create a NuGet package. These are used for development and contribution purposes.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run all\nnpm run build\nnpm test\nnpm run test\nnpm run sandbox\nnpm run nuget -- 1.1.1\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Constants in Excalibur.js\nDESCRIPTION: Adds Vector.One and Vector.Half constants to the Vector class for common vector values.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\nVector.One\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nVector.Half\n```\n\n----------------------------------------\n\nTITLE: Feature List HTML Structure\nDESCRIPTION: HTML unordered list structure showcasing Excalibur's key features with emoji icons and nested lists for tool support.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-why-excalibur.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul style={{listStyle: 'none', padding: 0 }}>\n    <li>📖 Lots of documentation at https://excaliburjs.com <ul><li>[Samples](/samples) & [Showcase](/showcase)</li></ul></li>\n    <li>📦 Objected-Oriented TypeScript first API similar to Unity/Godot</li>\n    <li>🎥 Friendly API based around a theater metaphor of [Scenes](/docs/scenes), [Actors](/docs/actors), and [Actions](/docs/category/actions/)</li>\n    <li>🏃[SpriteSheet](/docs/spritesheets), [Sprites](/docs/sprites), and [Animations](/docs/animation)</li>\n    <li>💥 Built in [collisions](/docs/colliders) with [Arcade](/docs/physics#arcade) and [Realistic](/docs/physics#realistic) Physics</li>\n    <li>🧩 [2D](/docs/tilemap) and [Isometric](/docs/isometric) TileMaps</li>\n    <li>🎨 [Custom shader](/docs/materials), [post-processing](/docs/postprocessors/) support, and [render plugins](/docs/custom-renderer-plugins)</li>\n    <li>🖼️ Auto-batching draw calls and really tuned draw performance</li>\n    <li>🎁 [Entity-Component-System](/docs/entity-component-system) under the hood when you need control</li>\n    <li>🛠️ Popular Game Dev Tool Support</li>\n    * [Tiled maps](/docs/tiled-plugin)\n    * [LDtk levels](/docs/ldtk-plugin)\n    * [Spritefusion levels](/docs/spritefusion-plugin)\n    * [Aseprite image files](https://github.com/excaliburjs/excalibur-aseprite)\n    * [JSFXR audio](https://github.com/excaliburjs/sample-jsfxr/)\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Graphics from Strings in Excalibur (TypeScript)\nDESCRIPTION: Example showing how to create graphics from inline SVG strings in Excalibur. This approach allows for dynamic SVG generation or for working directly with SVG markup.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst svgImage = ex.ImageSource.fromSvgString(svg`\n  <svg version=\"1.1\"\n       id=\"svg2\"\n       xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n       xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n       sodipodi:docname=\"resize-full.svg\" inkscape:version=\"0.48.4 r9939\"\n       xmlns=\"http://www.w3.org/2000/svg\" \n       width=\"800px\" height=\"800px\"\n       viewBox=\"0 0 1200 1200\" enable-background=\"new 0 0 1200 1200\" xml:space=\"preserve\">\n  <path id=\"path18934\" fill=\"#000000ff\" inkscape:connector-curvature=\"0\"  d=\"M670.312,0l177.246,177.295L606.348,418.506l175.146,175.146\n      l241.211-241.211L1200,529.688V0H670.312z M418.506,606.348L177.295,847.559L0,670.312V1200h529.688l-177.246-177.295\n      l241.211-241.211L418.506,606.348z\"/>\n  </svg>\n`);\n```\n\n----------------------------------------\n\nTITLE: Building Excalibur Game with Parcel for Subdirectory Hosting\nDESCRIPTION: This shell command demonstrates how to use Parcel to build an Excalibur game for hosting in a subdirectory. It specifies the output directory and sets the correct public URL path.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/16-hosting.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nparcel build ./index.html --dist-dir ./dist --public-url /ludum-50\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript and Creating Config\nDESCRIPTION: Commands to install TypeScript as a development dependency and initialize an empty TypeScript configuration file for the project.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> npm install typescript --save-dev --save-exact\n> npx tsc --init`\n```\n\n----------------------------------------\n\nTITLE: Implementing Dev Tools\nDESCRIPTION: Code to integrate the Excalibur dev tools into a game for debugging purposes\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DevTool } from '@excaliburjs/dev-tools';\n\nconst game = new ex.Engine({...});\nconst devtool = new DevTool(game);\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Tiled Map Data\nDESCRIPTION: Example demonstrating how to access the raw Tiled map data after loading\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-tiled-plugin-old.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ex from 'excalibur'\nimport { TiledMapResource } from '@excaliburjs/plugin-tiled'\n\n// Create tiled map resource, pointing to static asset path\nconst tiledMap = new TiledMapResource('/assets/map.tmx')\n\n// Create a loader and reference the map\nconst loader = new ex.Loader([tiledMap])\n\ngame.start(loader).then(function () {\n  // Access raw data\n  const rawMap = tiledMap.data.rawMap\n})\n```\n\n----------------------------------------\n\nTITLE: Installing LDtk Plugin for Excalibur.js\nDESCRIPTION: This command installs the LDtk plugin for Excalibur.js using npm. It adds the necessary package to your project dependencies.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/15-ldtk-plugin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @excaliburjs/plugin-ldtk\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Website\nDESCRIPTION: Command to generate static website content in the build directory, ready for deployment to any static hosting service.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Excalibur UI Integration\nDESCRIPTION: HTML structure for integrating Excalibur with HTML-based UI, including CSS for positioning UI elements above the game canvas.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/12-ui.mdx#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <style type=\"text/css\">\n      #root {\n        /* When this is relative, child elements positioned absolutely will\n           be relative to this element, not the document providing more accurate\n           positioning, since the canvas will be at (0, 0) */\n        position: relative;\n      }\n\n      #root #ui {\n        /* This will make the UI appear on top of the canvas */\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n\n      /* These are scene-based UI styles */\n      #ui.MainMenu .button.button--start {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        background: red;\n        color: white;\n      }\n    </style>\n  </head>\n  <body>\n    <!-- Define a wrapping element, in case you want to customize positions -->\n    <div id=\"root\">\n      <!-- Provide your own canvas to Excalibur -->\n      <canvas id=\"game\"></canvas>\n\n      <!-- The UI will automatically be drawn above the game due to z-indexing -->\n      <div id=\"ui\">\n        <!-- This is where your game UI will go, dynamically created per scene -->\n      </div>\n    </div>\n\n    <script type=\"text/javascript\" src=\"game.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Embedding a CodeSandbox in MDX for Excalibur.js Documentation\nDESCRIPTION: This snippet demonstrates how to use the CodeSandboxEmbed component in MDX to embed a CodeSandbox example, specifically the Excalibur.js Breakout sample game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/101-style-guide.mdx#2025-04-16_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CodeSandboxEmbed src={url} title={title} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Aseprite Plugin Implementation\nDESCRIPTION: Shows how to use the Aseprite plugin to load and animate sprites directly from Aseprite files or JSON exports.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2025-03-10-new-year/2025-03-10-new-year.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AsepriteResource } from \"@excaliburjs/plugin-aseprite\";\n\nconst game = new Engine({\n    width: 600,\n    height: 400,\n    displayMode: DisplayMode.FitScreen\n});\n\nconst asepriteSpriteSheet = new AsepriteResource('./beetle.aseprite');\n\nconst loader = new Loader([asepriteSpriteSheet]);\ngame.start(loader).then(() => {\n\n    const anim = asepriteSpriteSheet.getAnimation('Loop');\n    const actor = new Actor({pos: vec(100, 100)});\n    actor.graphics.use(anim);\n    \n    game.currentScene.add(actor);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Game Over Sound Effect in Excalibur.js\nDESCRIPTION: Shows how to implement a sound effect that plays when the game ends. The code adds the sound playback to the game over handling method in the level scene.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/15-step-sound-music.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// level.ts\nexport class Level extends ex.Scene {\n    ...\n    triggerGameOver() {\n        ...\n        Resources.FailSound.play();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Coroutine Timing in Excalibur\nDESCRIPTION: Illustrates how to set the timing parameter for an Excalibur coroutine to control when it's updated.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = ex.coroutine(engine, function * () {...}, { timing: 'postupdate' })\n```\n\n----------------------------------------\n\nTITLE: HTML Script Setup for Standalone Usage\nDESCRIPTION: HTML script tags required for using Excalibur Tiled plugin in standalone mode\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/13-plugins/16-tiled-plugin-old.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"node_modules/excalibur/dist/excalibur.min.js\"></script>\n<script type=\"text/javascript\" src=\"node_modules/@excaliburjs/excalibur-tiled/dist/excalibur-tiled.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur using npm\nDESCRIPTION: Command to install Excalibur via npm package manager. This is typically used in Node.js projects.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install excalibur\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur Game Engine\nDESCRIPTION: Command to install the Excalibur game engine as a dependency for the project. Excalibur is a 2D game engine that makes game development easier with TypeScript.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> npm install excalibur --save-exact\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: Command to start a local development server that provides live preview of changes and opens a browser window automatically.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Creating Actor with Constructor Arguments in TypeScript\nDESCRIPTION: Demonstrates how to create an Actor using the traditional constructor and option bag constructor in Excalibur. It also shows how to clone an actor and mass assign properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/12-other/99-utilities.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor(1, 2, 100, 100, ex.Color.Red);\nactor.body.collider.type = ex.CollisionType.Active;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: ActorArgs = {\n   pos: new ex.Vector(1,2);\n   width: 100,\n   height: 100,\n   color: ex.Color.Red,\n}\n\nconst actor = new ex.Actor(options);\nactor.body.collider.type = ex.CollisionType.Active;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  pos: new ex.Vector(1, 2)\n});\nconst actorClone = new ex.Actor(actor);\n\nexpect(actor.pos).toBe(actorClone.pos); // true;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor(options);\n\nactor.assign({\n  pos: new ex.Vector(100, 100),\n  width: 1000,\n  color: ex.Color.Red\n});\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts for Development and Building\nDESCRIPTION: Package.json script configuration for development and building the project. Sets up Parcel to use game/index.html as entry point and output to www directory for Capacitor.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n/* package.json */\n{\n  \"name\": \"my-cool-game\",\n  \"scripts\": {\n    \"start\": \"parcel game/index.html --dist-dir www\",\n    \"typecheck\": \"tsc -p . --noEmit\",\n    \"build\": \"parcel build game/index.html --dist-dir www\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Capacitor Project with CLI\nDESCRIPTION: Command to create a new Capacitor.js project using their init wizard. This sets up the basic structure for a hybrid mobile app.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm init @capacitor/app\n```\n\n----------------------------------------\n\nTITLE: Adding Static Sprite Management in Bird Class\nDESCRIPTION: Implements static sprite handling for the bird's starting state. Shows how to extract and use individual sprites from a SpriteSheet in Excalibur.js.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/12-step-bird-graphics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Bird extends ex.Actor {\n  startSprite!: ex.Sprite;\n\n  override onInitialize(): void {\n    this.startSprite = spriteSheet.getSprite(1, 0);\n    this.graphics.add('start', this.startSprite);\n    this.graphics.use('start');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Style Integration - HTML\nDESCRIPTION: HTML code showing how to include the CSS stylesheet in the page header.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/00-tutorial/01-step-start-engine.mdx#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"./src/style.css\">\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Version of Excalibur Engine with TypeScript Support\nDESCRIPTION: This code shows how to import a specific version of the Excalibur Engine from skypack.dev while ensuring TypeScript support. It uses the version number in the URL and includes the '?dts' parameter for TypeScript declarations.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine } from \"https://cdn.skypack.dev/excalibur@0.26.0-alpha.264?dts\"\n```\n\n----------------------------------------\n\nTITLE: Syncing Web Assets to Capacitor Native Project\nDESCRIPTION: Command to copy the compiled web assets (HTML, CSS, JS) into the Capacitor native container. This needs to be run after building the web project.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> npx cap sync\n```\n\n----------------------------------------\n\nTITLE: Creating Actor with Default Physics Components\nDESCRIPTION: Shows how to create an Actor with built-in physics components including BodyComponent and ColliderComponent with a default box collider.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/10-physics/08-a-physics.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({\n  pos: ex.vec(200, 200),\n  width: 100,\n  height: 100,\n  collisionType: ex.CollisionType.Active,\n})\n\nconst builtInBox = actor.collider.get()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Actor Ancestors in Excalibur\nDESCRIPTION: Method added in v0.17.0 that returns the full array of the current Actor's ancestors in the scene hierarchy.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nActor.getAncestors()\n```\n\n----------------------------------------\n\nTITLE: Adding Android Platform to Capacitor Project\nDESCRIPTION: Command to add Android platform support to the Capacitor project, which allows the web app to be packaged as an Android application.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-02-21-android-games-capacitor/2022-02-21-android-games-capacitor.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> npx cap add android\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur with NuGet\nDESCRIPTION: Command to install Excalibur v0.2.0 game engine using NuGet package manager.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2014-04-16-excalibur-0-2-0-released.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Excalibur\n```\n\n----------------------------------------\n\nTITLE: Embedding an IFrame in MDX for Excalibur.js Documentation\nDESCRIPTION: This code snippet shows how to use the IFrameEmbed component in MDX to embed an external page, specifically an Excalibur.js animation example.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/101-style-guide.mdx#2025-04-16_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<IFrameEmbed src={url} />\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with @excaliburjs/testing\nDESCRIPTION: Demonstrates how to use the new @excaliburjs/testing utility for integration testing with Puppeteer and image-based snapshot testing. This snippet shows loading a page, comparing images, and interacting with the game via Puppeteer.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2021-10-03-excalibur-0-25-0-released/2021-10-03-excalibur-0-25-0-released.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// excalibur testing\n\ntest('An integration test', async (page) => {\n    // Check for the excalibur loaded page\n    await expectLoaded();\n\n    // Compare game to expected an expected image\n    await expectPage('Can check a page', './images/actual-page.png').toBe('./images/expected-page.png');\n\n    // Use puppeteer page object to interact\n    await page.evaluate(() => {\n        var actor = ((window as any).actor);\n        actor.pos.x = 400;\n        actor.pos.y = 400;\n    });\n\n    // Compare game to a new expected image\n    await expectPage('Can move an actor and check', './images/actual-page-2.png').toBe('./images/expected-page-2.png');\n});\n```\n\n----------------------------------------\n\nTITLE: Preserving Pixel Art in Custom Shaders with GLSL\nDESCRIPTION: A GLSL fragment shader that implements the Inigo Quilez pixel art filter to maintain pixel art quality when using custom shaders with the pixelArt engine setting.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.2-material.mdx#2025-04-16_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n#version 300 es\nprecision mediump float;\n\nin vec2 v_uv;\nout vec4 fragColor;\nuniform vec2 u_graphic_resolution;\nuniform sampler2D u_graphic;\n\n\n// Inigo Quilez pixel art filter https://jorenjoestar.github.io/post/pixel_art_filtering/\nvec2 uv_iq(in vec2 uv, in vec2 texture_size) {\n  vec2 pixel = uv * texture_size;\n  \n  vec2 seam=floor(pixel+.5);\n  vec2 dudv=fwidth(pixel);\n  pixel=seam+clamp((pixel-seam)/dudv,-.5,.5);\n  \n  return pixel/texture_size;\n}\n\nvoid main(void) {\n\n    // Use the new UV from uv_iq to sample your pixel art texture\n    vec2 newUv = uv_iq(v_uv, u_graphic_resolution);\n    vec4 sourceColor = texture(u_graphic, newUv);\n\n    fragColor = sourceColor;\n    fragColor.rgb = fragColor.rgb * fragColor.a; // premultiply alpha\n}\n```\n\n----------------------------------------\n\nTITLE: Using Storybook Examples in Excalibur.js Documentation\nDESCRIPTION: This code shows how to include a Storybook example in the documentation using the Example component, specifically referencing an audio-related story.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/101-style-guide.mdx#2025-04-16_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<Example story=\"name_of_storybook_story\" />\n```\n\n----------------------------------------\n\nTITLE: Scene Lifecycle Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the update and draw cycle of a scene's lifecycle.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/02-fundamentals/04-scenes.mdx#2025-04-16_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    loop Every tick Engine.mainloop()\n        \n        alt Update\n            Current Scene ->> ECS World: Update Systems\n        else Draw\n            Current Scene ->> ECS World: Draw Systems\n        end\n\n        ECS World ->> System: Update\n        System ->> ECS World: Entity Query\n        ECS World --) System: Query Changed\n        loop Entity Query \n           System ->> System: Update\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Front Matter in Markdown for Excalibur.js Docs\nDESCRIPTION: This snippet illustrates the use of Front Matter in Markdown files for Excalibur.js documentation, including metadata like id, title, description, and custom URL slug.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/101-style-guide.mdx#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: my-doc-id\ntitle: My document title\ndescription: My document description\nslug: /my-custom-url\n---\n\n## Markdown heading\n\nMarkdown text with [links](./hello.md)\n```\n\n----------------------------------------\n\nTITLE: CSS for Centering FitScreen Display Mode\nDESCRIPTION: CSS styling to center the game on the screen when using FitScreen display mode, setting the body to use flexbox for centering.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/03-screen-viewport/screens-display-modes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhtml, body {\n    height: 100%;\n}\nbody {\n    display: flex;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker environment for Excalibur development\nDESCRIPTION: Commands to set up and use a Docker environment for Excalibur development on Mac/Linux. This includes building the environment, running tests in watch mode, and performing a build.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build\ndocker compose run --rm dev npm run test:watch\ndocker compose run --rm dev npm run all\n```\n\n----------------------------------------\n\nTITLE: Bundling Excalibur with Deno\nDESCRIPTION: Command to bundle an Excalibur TypeScript file using Deno, specifying the custom tsconfig.json.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/03-bundlers.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndeno bundle index.ts game.bundle.js --config tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur with bower\nDESCRIPTION: Command to install Excalibur v0.2.0 game engine using Bower package manager.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2014-04-16-excalibur-0-2-0-released.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbower install excalibur\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur via Nuget\nDESCRIPTION: Command for installing Excalibur package through Nuget package manager for .NET projects\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/01-getting-started/01-installation.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Excalibur\n```\n\n----------------------------------------\n\nTITLE: Converting Excalibur Coordinates to Page Coordinates\nDESCRIPTION: TypeScript code demonstrating how to convert between Excalibur's world/screen coordinates and page coordinates for HTML element positioning.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/01-html.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst engine = new ex.Engine({...});\n\n// Excalibur camera is centered at (100, 100)\nengine.currentScene.camera.pos = ex.vec(100, 100); \n\n// Finds the absolution page position that corresponds to the excalibur position (100, 100)\nconst pagePositionFromWorld = engine.screen.worldToPageCoordinates(ex.vec(100, 100)); \n\n// Finds the absolute page position that corresponds to the top left of the excalibur canvas, screen (0, 0)\nconst pagePositionFromScreen = engine.screen.screenToPageCoordinates(ex.vec(0, 0));\n\n// Use pagePositions in page coordinates to position HTML elements\n// Setting CSS variables is a convenient way to do this\ndocument.documentElement.style.setProperty('--pointer-x', evt.pagePos.x.toString() + 'px');\ndocument.documentElement.style.setProperty('--pointer-y', evt.pagePos.y.toString() + 'px');\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Movement Pattern in Excalibur.js\nDESCRIPTION: This code snippet demonstrates how to use the delay action in Excalibur.js to create a square movement pattern for an actor. The actor moves 100 pixels in each direction at a speed of 200 pixels/second, with a 1-second delay between each movement.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/07-actions/06.2-actions-delay.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor({...});\n\n// move in a square at 200 pixels/second\n// wait 1000 milliseconds between each section of the square\nactor.actions\n     .moveTo(ex.vec(100, 0), 200)\n     .delay(1000)\n     .moveTo(ex.vec(100, 100), 200)\n     .delay(1000)\n     .moveTo(ex.vec(0, 100), 200)\n     .delay(1000)\n     .moveTo(ex.vec(0, 0), 200)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Line in Excalibur.js using TypeScript\nDESCRIPTION: This code demonstrates how to create an actor with a Line graphic in Excalibur.js. It sets the actor position, adjusts the graphics anchor to (0,0), and configures a Line with start/end points, color, and thickness properties.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/04-graphics/04.1-lines.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst lineActor = new ex.Actor({\n  pos: ex.vec(100, 0),\n})\nlineActor.graphics.anchor = ex.Vector.Zero\nlineActor.graphics.use(\n  new ex.Line({\n    start: ex.vec(0, 0),\n    end: ex.vec(200, 200),\n    color: ex.Color.Green,\n    thickness: 10,\n  })\n)\ngame.add(lineActor)\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeating Actions in Excalibur\nDESCRIPTION: Shows how to use the updated repeat and repeatForever methods in Excalibur's action system. This new syntax uses a context object to define the set of repeating actions.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/100-migrations.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst actor = new ex.Actor()\n\nactor.actions\n  // Move up in a zig-zag by repeating 5 times\n  .repeat((ctx) => {\n    ctx.moveBy(10, 0, 10)\n    ctx.moveBy(0, 10, 10)\n  }, 5)\n  .callMethod(() => {\n    console.log('Done repeating!')\n  })\n```\n\n----------------------------------------\n\nTITLE: Pixel Conversion Calculator for Excalibur\nDESCRIPTION: TypeScript function to calculate the ratio between Excalibur pixels and browser pixels for consistent scaling.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/docs/05-user-interface/01-html.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst calculateExPixelConversion = (screen: ex.Screen) => {\n  const origin = screen.worldToPageCoordinates(Vector.Zero);\n  const singlePixel = screen.worldToPageCoordinates(vec(1, 0)).sub(origin);\n  const pixelConversion = singlePixel.x;\n  document.documentElement.style.setProperty('--pixel-conversion', pixelConversion.toString());\n}\n\n// Update pixel conversion on resize\ngame.screen.events.on('resize', () => calculateExPixelConversion(game.screen));\n\n// Set initial conversion\ngame.start().then(() => {\n    calculateExPixelConversion(game.screen);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Actor.isCurrentScene Method in Excalibur\nDESCRIPTION: A convenience method added in v0.17.0 to determine whether a scene is the current active scene in the game.\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/CHANGELOG.md#2025-04-16_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\nScene.isCurrentScene()\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Source Filtering\nDESCRIPTION: Example of explicitly setting image filtering mode when loading an image source\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst myImage = new ex.ImageSource('path/to/image', false, ex.ImageFiltering.Pixel);\n```\n\n----------------------------------------\n\nTITLE: Installing Excalibur v0.25.2\nDESCRIPTION: NPM installation command for Excalibur game engine version 0.25.2\nSOURCE: https://github.com/excaliburjs/Excalibur/blob/main/site/blog/2022-01-22-excalibur-0-25-2-released/2022-01-22-excalibur-0-25-2-released.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install excalibur@0.25.2\n```"
  }
]