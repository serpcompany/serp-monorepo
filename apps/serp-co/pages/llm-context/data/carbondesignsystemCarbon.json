[
  {
    "owner": "carbon-design-system",
    "repo": "carbon",
    "content": "TITLE: Importing DataTable Components\nDESCRIPTION: Shows how to import the necessary components from @carbon/react to implement a data table.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n} from '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Implementing ComposedModal with Custom Buttons in React\nDESCRIPTION: This snippet illustrates how to create a ComposedModal with custom buttons in the footer using the Carbon Design System in React. It includes three buttons with different actions and styles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  ...\n  <ModalFooter>\n    <Button\n      kind=\"secondary\"\n      onClick={() => { (Run some action...) setOpen(false); }}>\n      Another button\n    </Button>\n    <Button\n      kind=\"secondary\"\n      onClick={() => { (Run some action...) setOpen(false); }}>\n      Secondary button\n    </Button>\n    <Button\n      kind=\"primary\"\n      onClick={() => { (Run some action...) setOpen(false); }}>\n      Primary button\n    </Button>\n  </ModalFooter>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering with shouldFilterItem in ComboBox\nDESCRIPTION: Example of implementing custom filtering behavior with the shouldFilterItem prop, allowing case-insensitive filtering of items based on input text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst filterItems = (menu) => {\n  return menu?.item?.toLowerCase().includes(menu?.inputValue?.toLowerCase());\n};\n\n<Combobox\n  titleText=\"ComboBox title\"\n  helperText=\"Combobox helper text\"\n  items={['Apple', 'Orange', 'Banana']}\n  shouldFilterItem={filterItems}\n  onChange={() => {}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Table Filtering with Toolbar - HTML\nDESCRIPTION: Demonstrates how to add filtering to a Carbon data table using the <cds-table-toolbar> and <cds-table-toolbar-search> web components. The toolbar is slotted into the table and supports live filtering based on user input. Requires Carbon Design System web components. Key parameters: toolbar slot for the search input, placeholder for user guidance. Inputs are user-provided via search box; output is the filtered state of table rows.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-table>\n  <cds-table-toolbar slot=\"toolbar\">\n    <cds-table-toolbar-content>\n      <cds-table-toolbar-search\n        placeholder=\"Filter table\"></cds-table-toolbar-search>\n    </cds-table-toolbar-content>\n  </cds-table-toolbar>\n  <cds-table-head> ... header </cds-table-head>\n  ... body and rows\n</cds-table>\n```\n\n----------------------------------------\n\nTITLE: Button with Href Navigation\nDESCRIPTION: Example of using Button component as a navigation link with href property\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Button href=\"https://www.carbondesignsystem.com\">Navigate</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Web Components via CDN in HTML\nDESCRIPTION: Complete HTML example demonstrating how to use Carbon Web Components (dropdown and dropdown-item) via CDN, including necessary script tags and styling to hide undefined custom elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/README.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <script\n      type=\"module\"\n      src=\"https://1.www.s81c.com/common/carbon/web-components/version/v2.24.0/dropdown.min.js\"></script>\n    <style type=\"text/css\">\n      <!-- hide custom element until it has been defined //-->\n      cds-dropdown:not(:defined),\n      cds-dropdown-item:not(:defined) {\n        visibility: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\">\n      <cds-dropdown trigger-content=\"Select an item\">\n        <cds-dropdown-item value=\"all\">Option 1</cds-dropdown-item>\n        <cds-dropdown-item value=\"cloudFoundry\">Option 2</cds-dropdown-item>\n        <cds-dropdown-item value=\"staging\">Option 3</cds-dropdown-item>\n        <cds-dropdown-item value=\"dea\">Option 4</cds-dropdown-item>\n        <cds-dropdown-item value=\"router\">Option 5</cds-dropdown-item>\n      </cds-dropdown>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Usage Example\nDESCRIPTION: Example showing how to import and use a Button component from carbon-components-react in a React application.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'carbon-components-react';\n\nfunction MyComponent() {\n  return <Button>Example usage</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Component-Specific Imports Instead of Main Entrypoint\nDESCRIPTION: This snippet shows how to modify the previous approach by importing only the specific button component styles rather than the entire Carbon Design System entrypoint, which can help optimize bundle size.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n  @use '@carbon/react/scss/themes';\n  @use '@carbon/react/scss/components/button/tokens' with (\n    $button-primary: #3f51b5\n  );\n\n- @use '@carbon/react';\n+ @use '@carbon/react/scss/reset';\n+ @use '@carbon/react/scss/components/button';\n```\n\n----------------------------------------\n\nTITLE: Using Carbon React Components\nDESCRIPTION: Example of importing and using a Button component from @carbon/react\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@carbon/react';\n\nfunction MyComponent() {\n  return <Button>Example usage</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FormData Event Handler with Carbon Web Components\nDESCRIPTION: Code demonstrates how to manually trigger and handle the formdata event for Carbon Web Components form elements. This implementation provides cross-browser support for collecting form data from custom components like cds-text-input and cds-dropdown.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/form.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = document.querySelector('form');\nconst button = form.querySelector('button');\nbutton.addEventListener('click', () => {\n  const formData = new FormData(form);\n  const event = new CustomEvent('formdata', {\n    bubbles: true,\n    cancelable: false,\n    composed: false,\n  });\n  event.formData = formData;\n  form.dispatchEvent(event);\n  // `formData` is populated with the data in components such as `<cds-text-input>` or `<cds-dropdown>`, etc. in the `<form>`.\n  // You can use `formData` with `fetch()`/XHR instead of letting `<form>` submit the data\n});\n```\n\n----------------------------------------\n\nTITLE: Icon-Only Button Implementation\nDESCRIPTION: Shows how to create an icon-only button with required accessibility properties\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal State Manager in React\nDESCRIPTION: This snippet demonstrates how to create a Modal state manager using React hooks. It shows how to open and close the modal using a state variable and a button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ModalStateManager() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ComposedModal open={open} onClose={() => setOpen(false)}>\n              ...\n            </ComposedModal>,\n            document.body\n          )}\n      <Button kind=\"primary\" onClick={() => setOpen(true)}>\n        Open modal\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AccordionItem Click Events in React\nDESCRIPTION: Shows how to implement click handling for AccordionItem components with state feedback.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion>\n  <AccordionItem onHeadingClick={({ isOpen }) => console.log(isOpen)}>\n    Panel A\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Basic ComboButton Implementation in React\nDESCRIPTION: Demonstrates the basic usage of ComboButton component with a primary action and multiple secondary actions as MenuItems.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboButton/ComboButton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboButton label=\"Primary action\">\n  <MenuItem label=\"Second action\" />\n  <MenuItem label=\"Third action\" />\n  <MenuItem label=\"Fourth action\" />\n</ComboButton>\n```\n\n----------------------------------------\n\nTITLE: Icon Descriptor Structure Example\nDESCRIPTION: Sample structure of an icon descriptor object from @carbon/icons. This shows the standard format including element type, attributes, content paths, and metadata information.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-helpers/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  elem: 'svg',\n  attrs: {\n    xmlns: 'http://www.w3.org/2000/svg',\n    viewBox: '0 0 16 16',\n    width: 16,\n    height: 16,\n  },\n  content: [\n    {\n      elem: 'path',\n      attrs: {\n        d: '...',\n      },\n    },\n  ],\n  name: 'IconName',\n  size: 16,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Modal with Proper Content Alignment\nDESCRIPTION: Example of creating a modal containing form elements, using the hasForm prop to adjust padding for form elements while maintaining proper spacing for non-form content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  <ModalHeader />\n  <ModalBody hasForm>\n    <TextInput data-modal-primary-focus labelText=\"Enter something\" />\n    <p className=\"cds--modal-content__text cds--modal-content__regular-content\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n      cursus fermentum risus, sit amet fringilla nunc pellentesque quis. Duis\n      quis odio ultrices, cursus lacus ac, posuere felis. Donec dignissim libero\n      in augue mattis, a molestie metus vestibulum. Aliquam placerat felis\n      ultrices lorem condimentum, nec ullamcorper felis porttitor.\n    </p>\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Regression Tests with Playwright and Percy\nDESCRIPTION: This JavaScript snippet shows how to write a visual regression test for a component using Playwright and Percy. It demonstrates snapshotting a specific story in Storybook with a given theme.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst { test } = require('@playwright/test');\nconst { themes } = require('../../test-utils/env');\nconst { snapshotStory } = require('../../test-utils/storybook');\n\ntest('component-name @vrt', ({ page }) => {\n  await snapshotStory(page, {\n    component: 'component',\n    story: 'story-name',\n    theme: 'white',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering TextInput Fluid Story in Storybook\nDESCRIPTION: This snippet shows how to render the fluid variant of the TextInput story in a Storybook canvas with additional actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextInputStories.Fluid}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextInputStories.Fluid),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal State Management with React Hooks\nDESCRIPTION: Example of implementing a modal with state management using React hooks to control opening and closing. This pattern uses a state variable with ReactDOM portal for proper modal rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ModalStateManager() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ComposedModal open={open} onClose={() => setOpen(false)}>\n              ...\n            </ComposedModal>,\n            document.body\n          )}\n      <Button kind=\"primary\" onClick={() => setOpen(true)}>\n        Open modal\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Button Element\nDESCRIPTION: Example showing how to render a Button component as a different HTML element using the 'as' prop with appropriate ARIA role\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Button as=\"div\" role=\"button\">\n  I'm a div tag\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Progress Indicator Web Component in HTML\nDESCRIPTION: This HTML snippet illustrates the basic usage of the Carbon Progress Indicator. It uses the `<cds-progress-indicator>` tag as a container for multiple `<cds-progress-step>` elements. Attributes like `label-text`, `secondary-label-text`, `state` (e.g., 'invalid', 'complete', 'current'), and `disabled` configure the appearance and behavior of individual steps. Requires the corresponding JavaScript module to be imported first.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-indicator/progress-indicator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-progress-indicator>\n  <cds-progress-step\n    label-text=\"Label\"\n    secondary-label-text=\"Secondary label\"\n    state=\"invalid\"></cds-progress-step>\n  <cds-progress-step\n    label-text=\"Label\"\n    secondary-label-text=\"Secondary label\"\n    state=\"complete\"></cds-progress-step>\n  <cds-progress-step\n    label-text=\"Label\"\n    secondary-label-text=\"Secondary label\"\n    state=\"current\"></cds-progress-step>\n  <cds-progress-step\n    disabled\n    label-text=\"Label\"\n    secondary-label-text=\"Secondary label\"></cds-progress-step>\n  <cds-progress-step\n    label-text=\"Label\"\n    secondary-label-text=\"Secondary label\"></cds-progress-step>\n</cds-progress-indicator>\n```\n\n----------------------------------------\n\nTITLE: Handling DataTable Filtering in React\nDESCRIPTION: Demonstrates the implementation of filter handling logic for a DataTable, including state management and row filtering based on selected checkboxes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst [renderedRows, setRenderedRows] = useState(YOUR_DATA);\n\nconst handleTableFilter = (selectedCheckboxes) => {\n  setRenderedRows([]);\n\n  for (let i = 0; i < selectedCheckboxes.length; i++) {\n    // Filter the items inside the rows list\n    const filteredRows = YOUR_DATA.filter((row) => {\n      return Object.values(row).some((value) =>\n        String(value)\n          .toLowerCase()\n          .includes(selectedCheckboxes[i].toLowerCase())\n      );\n    });\n\n    setRenderedRows((prevData) => {\n      // Filter out duplicate rows\n      const uniqueRows = filteredRows.filter((row) => {\n        return !prevData.some((prevRow) => {\n          return Object.keys(row).every((key) => {\n            return row[key] === prevRow[key];\n          });\n        });\n      });\n      return [...prevData, ...uniqueRows];\n    });\n  }\n};\n\nconst handleOnResetFilter = () => {\n  setRenderedRows(rows);\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Button Variants Implementation\nDESCRIPTION: Comprehensive example showing all button variants including primary, secondary, tertiary, danger, and ghost buttons\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Button>Primary</Button>\n<Button kind=\"secondary\">Secondary</Button>\n<Button kind=\"tertiary\">Tertiary</Button>\n<Button kind=\"danger\">Danger</Button>\n<Button kind=\"danger--tertiary\">Danger tertiary</Button>\n<Button kind=\"danger--ghost\">Danger ghost</Button>\n<Button kind=\"ghost\">Ghost</Button>\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled ComboBox Implementation in React\nDESCRIPTION: Example demonstrating a fully controlled ComboBox component with custom options and state management, including reset and option selection buttons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [\n  {\n    id: 'option-1',\n    text: 'Option 1',\n  },\n  {\n    id: 'option-2',\n    text: 'Option 2',\n  },\n  {\n    id: 'option-3',\n    text: 'Option 3',\n  },\n];\nconst [value, setValue] = useState(options[0]);\n\nconst onChange = ({ selectedItem }) => {\n  setValue(selectedItem);\n};\n\nreturn (\n  <div>\n    <ComboBox\n      onChange={onChange}\n      id=\"carbon-combobox\"\n      items={options}\n      selectedItem={value}\n      itemToString={(item) => (item ? item.text : '')}\n      titleText=\"Fully Controlled ComboBox title\"\n      helperText=\"Combobox helper text\"\n    />\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}>\n      <Button onClick={() => setValue(null)}>Reset</Button>\n      <Button onClick={() => setValue(options[0])}>Option 1</Button>\n      <Button onClick={() => setValue(options[1])}>Option 2</Button>\n      <Button onClick={() => setValue(options[2])}>Option 3</Button>\n    </div>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Theming in Sass\nDESCRIPTION: Example showing how to use theme mixins for inline theming in Sass, applying different themes (g90, g100) to specific CSS classes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/README.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/themes/scss/themes';\n@use '@carbon/themes/scss/theme';\n\n// Uses the default white theme here\n\n.my-dark-theme {\n  @include theme.theme(themes.$g90);\n}\n\n.my-darker-theme {\n  @include theme.theme(themes.$g100);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Checkbox with React State in Carbon Design System\nDESCRIPTION: An example of implementing a controlled checkbox component using React's useState hook. This component maintains the checkbox state in a local variable and updates it through the onChange handler.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Checkbox/Checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ExampleComponent() {\n  const [isChecked, setIsChecked] = useState(false);\n  return (\n    <Checkbox\n      id=\"checkbox\"\n      labelText=\"checkbox\"\n      checked={isChecked}\n      onChange={(_, { checked }) => setIsChecked(checked)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Component with Custom itemToString Function in JSX\nDESCRIPTION: Example of using the MultiSelect component with a custom itemToString function to handle items without a 'label' property.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<MultiSelect\n  useTitleInItem={false}\n  label=\"MultiSelect Label\"\n  invalid={false}\n  invalidText=\"Invalid Selection\"\n  onChange={onChange}\n  items={[\n    { id: 'item-1', text: 'Item 1' },\n    { id: 'item-2', text: 'Item 2' },\n  ]}\n  initialSelectedItems={[\n    { id: 'item-1', text: 'Item 1' },\n    { id: 'item-2', text: 'Item 2' },\n  ]}\n  translateWithId={translateWithId}\n  itemToString={(item) => (item ? item.text : '')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing IconButton Component in React\nDESCRIPTION: Basic example of implementing an IconButton component with an Add icon. The component requires the IconButton import from @carbon/react and an icon import from @carbon/react/icons. The label prop is used to provide accessible text for screen readers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/IconButton/IconButton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IconButton } from '@carbon/react';\nimport { Add } from '@carbon/react/icons';\n\nfunction ExampleComponent() {\n  return (\n    <IconButton label=\"Add\">\n      <Add />\n    </IconButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Progress Indicator\nDESCRIPTION: Sets up a StorybookDemo component with theme selector and two variants (Default and Interactive) of the Progress Indicator component. The demo points to the React implementation of Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ProgressIndicator/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-progressindicator--default'\n    },\n    {\n      label: 'Interactive',\n      variant: 'components-progressindicator--interactive'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract Modal State Manager in React\nDESCRIPTION: This code snippet shows how to create an abstract version of a Modal state manager. It uses render props to allow for flexible content rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ModalStateManager = ({\n  renderLauncher: LauncherContent,\n  children: ModalContent,\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {!ModalContent || typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ModalContent open={open} setOpen={setOpen} />,\n            document.body\n          )}\n      {LauncherContent && <LauncherContent open={open} setOpen={setOpen} />}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Large Modal with Standard Structure\nDESCRIPTION: Demonstrates implementation of a large-sized modal with header, body content, and footer buttons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/modal.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-modal size=\"lg\">\n  <cds-modal-header>\n    <cds-modal-close-button></cds-modal-close-button>\n    <cds-modal-label>Label (Optional)</cds-modal-label>\n    <cds-modal-heading>Modal Title</cds-modal-heading>\n  </cds-modal-header>\n  <cds-modal-body>\n    <cds-modal-body-content>Modal text description</cds-modal-body-content>\n  </cds-modal-body>\n  <cds-modal-footer>\n    <cds-modal-footer-button kind=\"secondary\" data-modal-close>Cancel</cds-modal-footer-button>\n    <cds-modal-footer-button kind=\"primary\">Save</cds-modal-footer-button>\n  </cds-modal-footer>\n</cds-modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DataTable\nDESCRIPTION: Complete example showing how to implement a basic DataTable using the rows and headers props along with render props pattern.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable rows={rows} headers={headers}>\n  {({ rows, headers, getTableProps, getHeaderProps, getRowProps }) => (\n    <Table {...getTableProps()}>\n      <TableHead>\n        <TableRow>\n          {headers.map((header) => (\n            <TableHeader {...getHeaderProps({ header })}>\n              {header.header}\n            </TableHeader>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map((row) => (\n          <TableRow {...getRowProps({ row })}>\n            {row.cells.map((cell) => (\n              <TableCell key={cell.id}>{cell.value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )}\n</DataTable>\n```\n\n----------------------------------------\n\nTITLE: Modern Tab Composition - Carbon Tabs v11 Example - React JSX\nDESCRIPTION: Exhibits the new composable Tabs API introduced in v11, separating Tab labels (in TabList) and TabPanels (content) for improved flexibility and clarity. Demonstrates setting disabled and title attributes, and synchronizing the tab order with corresponding content panels. This pattern requires React and the updated Carbon Tabs, TabList, Tab, TabPanels, and TabPanel components. Inputs are tab labels and content; output is a fully composable, accessible tab interface.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n<Tabs>\\n  <TabList>\\n    <Tab>Tab Label 1</Tab>\\n    <Tab>Tab Label 2</Tab>\\n    <Tab disabled>Tab Label 3</Tab>\\n    <Tab title=\\\"Tab Label 4 shows truncation\\\">Tab Label 4 shows truncation</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>Content for first tab goes here.</TabPanel>\\n    <TabPanel>Content for second tab goes here.</TabPanel>\\n    <TabPanel>Content for third tab goes here.</TabPanel>\\n    <TabPanel>Content for fourth tab goes here.</TabPanel>\\n  </TabPanels>\\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: React Functional Component Structure\nDESCRIPTION: Shows the recommended structure for a React functional component, including prop types, state management, handlers, effects, and rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\n\nfunction MyComponent({\n  // Prefer default argument values to `defaultProps`\n  initialValue = 0,\n}) {\n  // State-related behavior\n  const [state, setState] = useState(initialValue);\n  // Constants and other variables\n  const value = 1;\n\n  // Handlers\n  function onClick() {\n    // ...\n  }\n\n  // Effects\n  useEffect(() => {\n    // ...\n  }, []);\n\n  // Output\n  return <button onClick={onClick}>Output</button>;\n}\n\nMyComponent.propTypes = {\n  /**\n   * Description of what this prop is for\n   */\n  initialValue: PropTypes.number,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Overflow Menu to DataTable in React\nDESCRIPTION: Demonstrates how to add an overflow menu to a DataTable toolbar by inserting a TableCell with a specific class and an OverflowMenu component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<TableBody>\n  {rows.map((row) => (\n    <TableRow key={row.id} {...getRowProps({ row })}>\n      {row.cells.map((cell) => (\n        <TableCell key={cell.id}>{cell.value}</TableCell>\n      ))}\n      <TableCell className=\"cds--table-column-menu\">\n        <OverflowMenu size=\"sm\" flipped>\n          <OverflowMenuItem>Action 1</OverflowMenuItem>\n          <OverflowMenuItem>Action 2</OverflowMenuItem>\n          <OverflowMenuItem>Action 3</OverflowMenuItem>\n        </OverflowMenu>\n      </TableCell>\n    </TableRow>\n  ))}\n</TableBody>\n```\n\n----------------------------------------\n\nTITLE: Rendering Buttons with Icons in JSX\nDESCRIPTION: This example demonstrates how to use the renderIcon prop to add icons to buttons, along with the iconDescription prop for accessibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Button renderIcon={Add} iconDescription=\"Add\">Add</Button>\n<Button renderIcon={TrashCan} kind=\"danger\" iconDescription=\"TrashCan\">Delete</Button>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Current Page Indicator\nDESCRIPTION: Demonstrates how to mark the current page in a breadcrumb navigation using the isCurrentPage prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Breadcrumb/Breadcrumb.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumb>\n  <BreadcrumbItem href=\"#\">Breadcrumb 1</BreadcrumbItem>\n  <BreadcrumbItem href=\"#\">Breadcrumb 2</BreadcrumbItem>\n  <BreadcrumbItem href=\"#\" isCurrentPage>\n    Breadcrumb 3\n  </BreadcrumbItem>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized DatePicker\nDESCRIPTION: Example of implementing a DatePicker with Norwegian locale and custom date format.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<DatePicker locale=\"no\" dateFormat=\"d/m/Y\" datePickerType=\"single\">\n  <DatePickerInput placeholder=\"dd/mm/yyyy\" />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing useContextMenu with a Specific Element in React\nDESCRIPTION: This example demonstrates how to use the useContextMenu hook with a specific DOM element. The hook is attached to a div element through a ref, and the resulting menuProps are passed to the Menu component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContextMenu/useContextMenu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SomeComponent() {\n  const el = useRef(null);\n  const menuProps = useContextMenu(el);\n\n  return (\n    <>\n      <div ref={el}>…</div>\n\n      <Menu {...menuProps}>\n        <MenuItem label=\"Cut\" />\n        <MenuItem label=\"Copy\" />\n        <MenuItem label=\"Paste\" />\n      </Menu>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Selected Item in Dropdown\nDESCRIPTION: Demonstrates how to initialize a Dropdown with a pre-selected value using initialSelectedItem prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst items = ['Option 1', 'Option 2', 'Option 3']\n\n<Dropdown initialSelectedItem={items[2]} />\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Implementation\nDESCRIPTION: Example of implementing a custom sorting function for the DataTable component with support for ascending and descending order.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customSortRow(cellA, cellB, { sortDirection, sortStates, locale }) {\n  if (sortDirection === sortStates.DESC) {\n    return compare(cellB, cellA, locale);\n  }\n\n  return compare(cellA, cellB, locale);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TableToolbarFilter in React\nDESCRIPTION: Shows how to import and use the TableToolbarFilter component within TableToolbarContent for implementing batch filtering in a DataTable.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<TableToolbarFilter\n  onApplyFilter={handleTableFilter}\n  onResetFilter={handleOnResetFilter}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing StorybookDemo Component with Carbon Web Components\nDESCRIPTION: JSX code for rendering a StorybookDemo component that displays Carbon Web Components status indicators. The demo is configured with a tall layout and points to the IBM Carbon Design System documentation with a default variant specified.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/icon-indicator/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-status-indicators-icon-indicator--default'\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing AI Skeleton Web Component in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the AI Skeleton web component module using an ES module import statement. This registers the necessary custom elements (`<cds-ai-skeleton-placeholder>`, `<cds-ai-skeleton-icon>`, `<cds-ai-skeleton-text>`) for use in the HTML.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-skeleton/ai-skeleton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/ai-skeleton/index.js';\n```\n\n----------------------------------------\n\nTITLE: Basic Toggletip Implementation in React\nDESCRIPTION: Demonstrates the basic implementation of a Toggletip component with a button trigger and custom content. Shows the essential imports and component structure.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Toggletip/Toggletip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toggletip, ToggletipButton, ToggletipContent } from '@carbon/react';\nimport { Information } from '@carbon/react/icons';\n\n<Toggletip>\n  <ToggletipButton label=\"Additional information\">\n    <Information />\n  </ToggletipButton>\n  <ToggletipContent>\n    <p>Custom content here</p>\n  </ToggletipContent>\n</Toggletip>;\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker with Custom Date Format\nDESCRIPTION: Shows how to customize the date format display in the DatePicker input field.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<DatePicker datePickerType=\"single\" dateFormat=\"Y-m-d\">\n  <DatePickerInput placeholder=\"mm/dd/yyyy\" />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for TreeView Component in JSX\nDESCRIPTION: This code snippet configures a StorybookDemo component to showcase the TreeView component from Carbon Design System. It includes theme selection capability and defines three variant configurations: default TreeView, TreeView with controlled expansion, and TreeView with icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-treeview--default'\n    },\n    {\n      label: 'With controlled expansion',\n      variant: 'components-treeview--with-controlled-expansion'\n    },\n    {\n      label: 'With icons',\n      variant: 'components-treeview--with-icons'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggletip Content with Actions\nDESCRIPTION: This HTML snippet demonstrates how to customize a toggletip with content and actions using the cds-toggletip component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle-tip/toggletip.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-toggletip>\n  <p slot=\"body-text\">\n    Lorem ipsum dolor sit amet, di os consectetur adipiscing elit, sed do\n    eiusmod tempor incididunt ut fsil labore et dolore magna aliqua.\n  </p>\n  <cds-link href=\"custom-link\" slot=\"actions\">Custom link</cds-link>\n  <cds-button size=\"sm\" slot=\"actions\">Custom action</cds-button>\n</cds-toggletip>\n```\n\n----------------------------------------\n\nTITLE: Custom Component with Carbon Grid Column\nDESCRIPTION: Shows how to create and use a custom component with the Column component while properly forwarding props using the 'as' prop pattern.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid, Column } from '@carbon/react';\n\nfunction Article({ children, ...rest }) {\n  return <article {...rest}>{children}</article>;\n}\n\nfunction CustomColumn({ children, ...rest }) {\n  return <Column as={Article} {...rest}>{children}</Column:\n}\n\nfunction MyComponent() {\n  return (\n    <Grid>\n      <CustomColumn>Example content</Column>\n      <CustomColumn>Example content</Column>\n      <CustomColumn>Example content</Column>\n      <CustomColumn>Example content</Column>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Data Table - HTML\nDESCRIPTION: This snippet demonstrates how to render a basic data table using Carbon web components in HTML. It utilizes the <cds-table>, <cds-table-head>, <cds-table-row>, <cds-table-header-cell>, and <cds-table-cell> elements to display rows and columns. Dependencies include the Carbon Design System web components; make sure they are registered via a script or CDN. Inputs are specified as children elements, representing headers and data rows. Outputs are an accessible, styled table that can be further enhanced with other features like sorting and selection.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-table>\n  <cds-table-head>\n    <cds-table-header-row>\n      <cds-table-header-cell>Name</cds-table-header-cell>\n      <cds-table-header-cell>Status</cds-table-header-cell>\n    </cds-table-header-row>\n  </cds-table-head>\n  <cds-table-body>\n    <cds-table-row>\n      <cds-table-cell>Load Balancer 1</cds-table-cell>\n      <cds-table-cell>Disabled</cds-table-cell>\n    </cds-table-row>\n    <cds-table-row>\n      <cds-table-cell>Load Balancer 2</cds-table-cell>\n      <cds-table-cell>Starting</cds-table-cell>\n    </cds-table-row>\n    <cds-table-row>\n      <cds-table-cell>Load Balancer 3</cds-table-cell>\n      <cds-table-cell>Active</cds-table-cell>\n    </cds-table-row>\n  </cds-table-body>\n</cds-table>\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/web-components with npm - Bash\nDESCRIPTION: Installs the @carbon/web-components package via npm to add support for Carbon Design System custom elements in your project. You must have npm and Node.js installed as prerequisites. This command fetches the package and its dependencies, saving them in your package.json file. Invocation: run the command in your terminal at your project root. Output: @carbon/web-components will be available under node_modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/welcome.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @carbon/web-components\n\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Component HTML Implementation\nDESCRIPTION: HTML implementation of the Carbon Web Components Tabs component with multiple tab options. Demonstrates setting up tabs with their corresponding panels, including disabled state and values.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tabs/tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-tabs trigger-content=\"Select an item\" value=\"staging\">\n  <cds-tab id=\"tab-all\" target=\"panel-all\" value=\"all\">Option 1</cds-tab>\n  <cds-tab\n    id=\"tab-cloudFoundry\"\n    target=\"panel-cloudFoundry\"\n    disabled\n    value=\"cloudFoundry\"\n    >Option 2</cds-tab\n  >\n  <cds-tab id=\"tab-staging\" target=\"panel-staging\" value=\"staging\"\n    >Option 3</cds-tab\n  >\n  <cds-tab id=\"tab-dea\" target=\"panel-dea\" value=\"dea\">Option 4</cds-tab>\n  <cds-tab id=\"tab-router\" target=\"panel-router\" value=\"router\"\n    >Option 5</cds-tab\n  >\n</cds-tabs>\n<div class=\"cds-ce-demo-devenv--tab-panels\">\n  <div id=\"panel-all\" role=\"tabpanel\" aria-labelledby=\"tab-all\" hidden>\n    <h4>Content for option 1</h4>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </p>\n  </div>\n  <div\n    id=\"panel-cloudFoundry\"\n    role=\"tabpanel\"\n    aria-labelledby=\"tab-cloudFoundry\"\n    hidden>\n    <h4>Content for option 2</h4>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </p>\n  </div>\n  <div id=\"panel-staging\" role=\"tabpanel\" aria-labelledby=\"tab-staging\" hidden>\n    <h4>Content for option 3</h4>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </p>\n  </div>\n  <div id=\"panel-dea\" role=\"tabpanel\" aria-labelledby=\"tab-dea\" hidden>\n    <h4>Content for option 4</h4>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </p>\n  </div>\n  <div id=\"panel-router\" role=\"tabpanel\" aria-labelledby=\"tab-router\" hidden>\n    <h4>Content for option 5</h4>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.\n    </p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing AILabel in DataTable Column Headers\nDESCRIPTION: Shows how to add an AILabel to a DataTable column header by including it in the column configuration object. Includes a complete example with confidence score and actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabelDatatable.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst columnAILabelHeaders = [\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'attached_groups',\n    header: 'Attached groups',\n    AILabel: (\n      <AILabel\n        className=\"ai-label-container\"\n        autoAlign={false}\n        align=\"bottom-right\">\n        <AILabelContent>\n          <div>\n            <p className=\"secondary\">AI Explained</p>\n            <h2 className=\"ai-label-heading\">84%</h2>\n            <p className=\"secondary bold\">Confidence score</p>\n            <p className=\"secondary\">\n              Lorem ipsum dolor sit amet, di os consectetur adipiscing elit, sed\n              do eiusmod tempor incididunt ut fsil labore et dolore magna\n              aliqua.\n            </p>\n            <hr />\n            <p className=\"secondary\">Model type</p>\n            <p className=\"bold\">Foundation model</p>\n          </div>\n          <AILabelActions>\n            <IconButton kind=\"ghost\" label=\"View\">\n              <View />\n            </IconButton>\n            <IconButton kind=\"ghost\" label=\"Open Folder\">\n              <FolderOpen />\n            </IconButton>\n            <IconButton kind=\"ghost\" label=\"Folders\">\n              <Folders />\n            </IconButton>\n            <Button>View details</Button>\n          </AILabelActions>\n        </AILabelContent>\n      </AILabel>\n    ),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Disabled ContentSwitcher Switches\nDESCRIPTION: Implementation showing how to disable individual Switch components in a ContentSwitcher\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher>\n  <Switch disabled name=\"one\" text=\"First section\" />\n  <Switch disabled name=\"two\" text=\"Second section\" />\n  <Switch disabled name=\"three\" text=\"Third section\" />\n</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Token Usage in SCSS\nDESCRIPTION: Demonstrates basic usage of theme tokens and CSS Custom Properties with @carbon/themes. Shows how to use theme tokens for styling and how to emit CSS Custom Properties.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/themes';\n\n.my-component {\n  // Use tokens from the theme, this will map to a CSS Custom Property\n  color: themes.$token-01;\n}\n\n:root {\n  // Emit CSS Custom Properties for the current theme\n  @include themes.theme();\n}\n\n// Get the value of a specific token\n$custom-variable: rgba(themes.get('token-01'), 0.25);\n```\n\n----------------------------------------\n\nTITLE: Implementing Selectable Tags in React\nDESCRIPTION: This code snippet shows how to implement selectable tags using React hooks. It includes functionality for rendering tags, handling tag selection, and updating the selected tags array.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tag/Tag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst tags = [\n  {\n    id: 1,\n    text: 'Tag content with a long text description',\n  },\n  {\n    id: 2,\n    text: 'Tag content 1',\n  },\n  {\n    id: 3,\n    text: 'Tag content 2',\n  },\n  {\n    id: 4,\n    text: 'Tag content 3',\n  },\n];\n\nconst [selectedTags, setSelectedTags] = useState([\n  {\n    id: 2,\n    text: 'Tag content 1',\n  },\n]);\n\nconst handleChange = (tag, selected) => {\n  const nextSelectedTags = selected\n    ? [...selectedTags, tag]\n    : selectedTags.filter((t) => t.id !== tag.id);\n\n  console.log('Selected tags array: ', nextSelectedTags);\n  setSelectedTags(nextSelectedTags);\n};\n\nreturn (\n  <div aria-label=\"Selectable tags\" role=\"group\">\n    {tags.map((tag, index) => (\n      <SelectableTag\n        key={index}\n        renderIcon={Asleep}\n        text={tag.text}\n        className=\"some-class\"\n        selected={selectedTags.find((t) => t.id === tag.id)}\n        onChange={(selected) => handleChange(tag, selected)}\n        {...args}\n      />\n    ))}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Nested MenuItem Implementation with Submenus\nDESCRIPTION: Shows how to create nested menu structures using MenuItem components with children.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/Menu.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu open>\n  <MenuItem label=\"Open\" />\n  <MenuItem label=\"Save\" />\n  <MenuItem label=\"Import\">\n    <MenuItem label=\"Image\" />\n    <MenuItem label=\"Movie\" />\n    <MenuItem label=\"Text\" />\n  </MenuItem>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Tag component from the Carbon Web Components library using JavaScript modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tag/tag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/tag/index.js';\n```\n\n----------------------------------------\n\nTITLE: Using the 'as' prop with Carbon Grid Component\nDESCRIPTION: Demonstrates how to use the 'as' prop to render Column components as article elements instead of the default div elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid, Column } from '@carbon/react';\n\nfunction MyComponent() {\n  return (\n    <Grid>\n      <Column as=\"article\">Example content</Column>\n      <Column as=\"article\">Example content</Column>\n      <Column as=\"article\">Example content</Column>\n      <Column as=\"article\">Example content</Column>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with Theme Selection\nDESCRIPTION: Configuration for a StorybookDemo component that displays a Carbon Design System component preview. Includes theme selector functionality and points to the React Carbon Design System demo site.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AspectRatio/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-aspectratio--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Title Text\nDESCRIPTION: Shows how to set the label text for a Dropdown using the titleText prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown titleText=\"This is the Dropdown label\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing an Expandable Search in ContainedList with React\nDESCRIPTION: This code demonstrates how to use the ExpandableSearch component within a ContainedList. It implements a search functionality that filters list items dynamically based on user input. The ExpandableSearch is passed as an action prop to the ContainedList.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContainedList/ContainedList.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport const WithExpandableSearch = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  useEffect(() => {\n    const listItems = [\n      'List item 1',\n      'List item 2',\n      'List item 3',\n      'List item 4',\n    ];\n\n    const results = listItems.filter((listItem) =>\n      listItem.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    setSearchResults(results);\n  }, [searchTerm]);\n\n  return (\n    <ContainedList\n      label=\"List title\"\n      kind=\"on-page\"\n      action={\n        <ExpandableSearch\n          placeholder=\"Filterable search\"\n          value={searchTerm}\n          onChange={handleChange}\n          closeButtonLabelText=\"Clear search input\"\n          size=\"lg\"\n        />\n      }>\n      {searchResults.map((listItem, key) => (\n        <ContainedListItem key={key}>{listItem}</ContainedListItem>\n      ))}\n    </ContainedList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Filtered Rows in DataTable React Component\nDESCRIPTION: Shows how to pass the filtered rows state to the DataTable component for rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<DataTable rows={renderedRows} headers={headers}>\n ...\n</Datatable>\n```\n\n----------------------------------------\n\nTITLE: Rendering Select with First Option Default in React\nDESCRIPTION: This example shows how to create a Select component where the first option is selected by default. It includes a label, helper text, and multiple SelectItem components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Select/Select.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Select\n  id={`select-2`}\n  labelText=\"Select an option\"\n  helperText=\"Optional helper text\">\n  <SelectItem value=\"option-1\" text=\"Option 1\" />\n  <SelectItem value=\"option-2\" text=\"Option 2\" />\n  <SelectItem value=\"option-3\" text=\"Option 3\" />\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Progress Indicator Web Component in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the necessary module for the Carbon Progress Indicator web component using ES module syntax. This import registers the custom elements `<cds-progress-indicator>` and `<cds-progress-step>` for use in HTML.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-indicator/progress-indicator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/progress-indicator/index.js';\n```\n\n----------------------------------------\n\nTITLE: Using IdPrefix Component in React Application Root\nDESCRIPTION: Example showing how to implement the IdPrefix component at the root level of a React application to set a custom prefix for automatically generated id attributes. The component wraps the main application content to apply the prefix globally.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/IdPrefix/IdPrefix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IdPrefix } from '@carbon/react';\n\nexport default function MyApp() {\n  return (\n    <IdPrefix prefix=\"custom\">\n      <Page />\n    </IdPrefix>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComposedModal with Title as Message in React\nDESCRIPTION: This snippet shows how to use the modal title as the main message in a ComposedModal component using the Carbon Design System in React. It omits the ModalBody component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  <ModalHeader label=\"Modal label\">\n    <h1>\n      Are you sure you want to add the \"Speech to Text\" service to the node-test\n      app?\n    </h1>\n  </ModalHeader>\n  <ModalFooter primaryButtonText=\"OK\" secondaryButtonText=\"Cancel\" />\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Handling Change Events with Carbon Checkboxes\nDESCRIPTION: Example demonstrating how to use the onChange prop for custom event handling. The handler receives a boolean value, the checkbox ID, and the DOM event as arguments.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Checkbox/Checkbox.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox onChange={()=>{}} labelText={`Checkbox label`} id=\"checkbox-label-1\" />\n<Checkbox onChange={()=>{}} labelText={`Checkbox label`} id=\"checkbox-label-2\" />\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Theme Variables in SCSS\nDESCRIPTION: This snippet demonstrates how to import the `@carbon/styles/scss/theme` module and apply a theme variable (`theme.$background`) to a CSS property. The variable's value is a CSS Custom Property (e.g., `var(--cds-background)`), referencing the actual theme value defined elsewhere.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/theme';\n\nbody {\n  background: theme.$background;\n}\n```\n\n----------------------------------------\n\nTITLE: Standard DataTable Rendering in React\nDESCRIPTION: Demonstrates the default rendering of a DataTable without the experimental auto-align feature, for comparison purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ width: '300px' }}>\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableHeader>Header1</TableHeader>\n        <TableHeader>Header2</TableHeader>\n        <TableHeader>Header3</TableHeader>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <TableCell>Wrapping content</TableCell>\n        <TableCell>content</TableCell>\n        <TableCell>content</TableCell>\n      </TableRow>\n    </TableBody>\n  </Table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Theme in Sass\nDESCRIPTION: Example of importing themes and setting a custom global theme (g100) using Sass module configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/themes/scss/themes' as *;\n@use '@carbon/themes' with (\n  $theme: $g100\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Carbon React\nDESCRIPTION: Required TypeScript compiler options configuration to use @carbon/react in TypeScript projects\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Experimental Auto-Align in DataTable React Component\nDESCRIPTION: Shows how to use the experimental experimentalAutoAlign prop in a Table component to automatically align contents when text wrapping occurs.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ width: '300px' }}>\n  <Table experimentalAutoAlign>\n    <TableHead>\n      <TableRow>\n        <TableHeader>Header1</TableHeader>\n        <TableHeader>Header2</TableHeader>\n        <TableHeader>Header3</TableHeader>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <TableCell>Wrapping content</TableCell>\n        <TableCell>content</TableCell>\n        <TableCell>content</TableCell>\n      </TableRow>\n    </TableBody>\n  </Table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Theme with React and SCSS\nDESCRIPTION: This example demonstrates how to set up a global theme using the GlobalTheme component in React and applying corresponding SCSS styles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/Theme.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { GlobalTheme } from '@carbon/react';\n\nfunction App() {\n  const theme = 'g100'; // ← your implementation, e.g. fetching user settings\n\n  useEffect(() => {\n    document.documentElement.dataset.carbonTheme = theme;\n  }, [theme]);\n\n  return (\n    <GlobalTheme theme={theme}>\n      <YourApp />\n    </GlobalTheme>;\n  );\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/theme';\n@use '@carbon/styles/scss/themes';\n\n:root[data-carbon-theme='g10'] {\n  @include theme.theme(themes.$g10);\n}\n\n:root[data-carbon-theme='g100'] {\n  @include theme.theme(themes.$g100);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Component Tokens in Carbon Design System\nDESCRIPTION: This snippet demonstrates how to customize the button-primary token for the button component in Carbon Design System. It imports the necessary theme and token modules, then sets a custom color value for the button-primary token.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/themes';\n@use '@carbon/react/scss/components/button/tokens' with (\n  $button-primary: #3f51b5\n);\n\n@use '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Button with Custom Element and Role in JSX\nDESCRIPTION: This example demonstrates how to use the 'as' prop to render a non-button element as a button, with the 'role' prop for accessibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Button as=\"div\" role=\"button\">\n  a11y Button\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Size and Content in React\nDESCRIPTION: This example demonstrates how to set the size of a Modal and structure its content using ComposedModal, ModalHeader, and ModalBody components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal size=\"lg\">\n  <ModalHeader />\n  <ModalBody>\n    <p className=\"cds--modal-content__text\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n      cursus fermentum risus, sit amet fringilla nunc pellentesque quis. Duis\n      quis odio ultrices, cursus lacus ac, posuere felis. Donec dignissim libero\n      in augue mattis, a molestie metus vestibulum. Aliquam placerat felis\n      ultrices lorem condimentum, nec ullamcorper felis porttitor.\n    </p>\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Custom Class Button Implementation\nDESCRIPTION: Demonstrates adding a custom CSS class to a Button component for custom styling\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Button className=\"custom-class\">Submit</Button>\n```\n\n----------------------------------------\n\nTITLE: ContentSwitcher with Selected Index\nDESCRIPTION: Example showing ContentSwitcher with a specified initial selected index and multiple Switch components\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher selectedIndex={2} onChange={() => {}}>\n  <Switch name=\"one\" text=\"First section\" />\n  <Switch name=\"two\" text=\"Second section\" />\n  <Switch name=\"three\" text=\"Third section\" />\n</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for TextArea Component in Carbon Design System\nDESCRIPTION: This code snippet configures a StorybookDemo component to display different variants of the TextArea component from the Carbon Design System. It specifies the demo URL and defines three variants: default, form item, and without form item wrapper.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/textarea/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-textarea--default'\n    },\n    {\n      label: 'Form Item',\n      variant: 'components-textarea--form-item'\n    },\n    {\n      label: 'Without Form Item Wrapper',\n      variant: 'components-textarea--without-form-item-wrapper'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Select Web Component (JavaScript)\nDESCRIPTION: This snippet illustrates how to import the <cds-select> component for use in an application via JavaScript, leveraging ES Modules. The import path references the Carbon web components package. Dependency: @carbon/web-components (ensure it is installed in your project). This import is necessary for registering the custom element before use in HTML; it does not output any value directly and should be executed before elements appear in the DOM.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/select/select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/select/index.js';\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Layout Implementation\nDESCRIPTION: Example of implementing a basic grid layout with equally spaced columns at the large breakpoint.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FlexGrid, Row, Column } from '@carbon/react';\n\nfunction MyComponent() {\n  return (\n    <FlexGrid>\n      <Row>\n        <Column lg={4}>Span 4 of 12</Column>\n        <Column lg={4}>Span 4 of 12</Column>\n        <Column lg={4}>Span 4 of 12</Column>\n        <Column lg={4}>Span 4 of 12</Column>\n      </Row>\n    <FlexGrid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ContentSwitcher with onChange Handler\nDESCRIPTION: Example demonstrating how to handle onChange events with index, name, and text values from Switch components\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher\n  onChange={(obj) => {\n    let { index, name, text } = obj;\n    alert(`index: ${index} ||  name: ${name} || text: ${text}`);\n  }}>\n  <Switch name=\"one\" text=\"First section\" />\n  <Switch name=\"two\" text=\"Second section\" />\n  <Switch name=\"three\" text=\"Third section\" />\n</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for Carbon Notification Components in JSX\nDESCRIPTION: This code snippet sets up a live demo for Carbon Design System's notification components using a StorybookDemo component. It includes configuration for theme selection and specifies three variants of notifications: actionable, inline, and toast.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Notification/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Actionable',\n      variant: 'components-notifications-actionable--default'\n    },\n    {\n      label: 'Inline',\n      variant: 'components-notifications-inline--default'\n    },\n    {\n      label: 'Toast',\n      variant: 'components-notifications-toast--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags with React Component\nDESCRIPTION: Example of using the FeatureFlags component to enable multiple feature flags for a specific section of the React component tree.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FeatureFlags/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FeatureFlags } from '@carbon/react';\n\n<FeatureFlags enableV12TileDefaultIcons=\"true\" enableASecondFeatureFlag=\"true\">\n  <Tile />\n</FeatureFlags>;\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Layout Implementation\nDESCRIPTION: Demonstrates a basic grid layout using Grid and Column components with large breakpoint specifications.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid, Column } from '@carbon/react';\n\nfunction MyComponent() {\n  return (\n    <Grid>\n      <Column lg={4}>Span 4 of 16</Column>\n      <Column lg={4}>Span 4 of 16</Column>\n      <Column lg={4}>Span 4 of 16</Column>\n      <Column lg={4}>Span 4 of 16</Column>\n    </Grid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Search Field using Custom Element - HTML\nDESCRIPTION: This HTML snippet demonstrates the use of the <cds-search> custom element to render a search input on the page. The 'label-text' attribute sets the accessibility label. The Search component must be previously registered, typically via the related JavaScript import. Input: User text query; Output: Custom search bar rendered, emits standard events. Ensure browser support for web components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/search/search.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-search label-text=\"Search\"></cds-search>\n```\n\n----------------------------------------\n\nTITLE: Rendering Buttons with Different Sizes in JSX\nDESCRIPTION: This snippet shows how to use the 'size' prop to render buttons in various sizes, including default, sm, md, xl, and 2xl.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>Submit</Button>\n<Button size=\"sm\">Submit</Button>\n<Button size=\"md\">Submit</Button>\n<Button size=\"xl\">Submit</Button>\n<Button size=\"2xl\">Submit</Button>\n```\n\n----------------------------------------\n\nTITLE: Controlled Dropdown with Selected Item\nDESCRIPTION: Example of implementing a controlled Dropdown component with state management.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nconst [currentItem, setCurrentItem] = useState(items[4]);\n...\n<Dropdown\n  items={items}\n  itemToString={(item) => (item ? item.text : '')}\n  onChange={({ selectedItem }) => setCurrentItem(selectedItem)}\n  selectedItem={currentItem}\n/>\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Usage - V11 Example\nDESCRIPTION: Updated implementation of Tabs component for v11 using new TabList and TabPanels components for better composition and control.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n<Tabs>\n  <TabList>\n    <Tab>Tab Label 1</Tab>\n    <Tab>Tab Label 2</Tab>\n    <Tab disabled>Tab Label 3</Tab>\n    <Tab title=\"Tab Label 4 shows truncation\">Tab Label 4 shows truncation</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Content for first tab goes here.</TabPanel>\n    <TabPanel>Content for second tab goes here.</TabPanel>\n    <TabPanel>Content for third tab goes here.</TabPanel>\n    <TabPanel>Content for fourth tab goes here.</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Adding a Label to a Carbon Checkbox in HTML\nDESCRIPTION: Illustrates using the `label-text` attribute on the `<cds-checkbox>` element to provide a descriptive, visible label for the user. This label is automatically associated with the checkbox input for accessibility. Requires the Carbon Design System web components library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/checkbox/checkbox.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-checkbox label-text=\"Checkbox label\"></cds-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Toggletip with Custom Actions Implementation\nDESCRIPTION: Shows how to implement a Toggletip with additional actions using ToggletipActions component. Includes custom content, a link, and a button in the toggletip content area.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Toggletip/Toggletip.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Toggletip>\n  <ToggletipButton label=\"Show information\">\n    <Information />\n  </ToggletipButton>\n  <ToggletipContent>\n    <p>\n      Lorem ipsum dolor sit amet, di os consectetur adipiscing elit, sed do\n      eiusmod tempor incididunt ut fsil labore et dolore magna aliqua.\n    </p>\n    <ToggletipActions>\n      <Link href=\"custom-link\">Custom link</Link>\n      <Button size=\"sm\">Custom action</Button>\n    </ToggletipActions>\n  </ToggletipContent>\n</Toggletip>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in React\nDESCRIPTION: Shows the basic implementation of a Tooltip component wrapping an interactive button element. The tooltip displays 'Close' when hovering over the button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/Tooltip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip label=\"Close\">\n  <button type=\"button\">X</button>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Floating Styles with Feature Flags in React\nDESCRIPTION: Example of enabling dynamic floating styles for a Dropdown component using the 'enable-v12-dynamic-floating-styles' feature flag. The code demonstrates the usage of FeatureFlags wrapper component along with Dropdown configuration including title text, helper text, and item selection handling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <Dropdown\n    id=\"default\"\n    titleText=\"Dropdown label\"\n    helperText=\"This is some helper text\"\n    initialSelectedItem={items[1]}\n    label=\"Option 1\"\n    items={items}\n    itemToString={(item) => (item ? item.text : '')}\n    {...args}\n  />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Kind Date Picker - HTML\nDESCRIPTION: This HTML snippet shows how to set up a date range picker using cds-date-picker with two cds-date-picker-input elements, each specifying kind as 'from' or 'to'. Inputs require label-text and placeholder attributes for accessibility and usability. Input expects proper labeling and kind values, and output renders start and end date input fields for selecting a date range. Dependencies include Carbon Web Components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/date-picker/date-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-date-picker>\\n  <cds-date-picker-input\\n    kind=\\\"from\\\"\\n    label-text=\\\"Start date\\\"\\n    placeholder=\\\"mm/dd/yyyy\\\">\\n  </cds-date-picker-input>\\n  <cds-date-picker-input\\n    kind=\\\"to\\\"\\n    label-text=\\\"End date\\\"\\n    placeholder=\\\"mm/dd/yyyy\\\">\\n  </cds-date-picker-input>\\n</cds-date-picker>\n```\n\n----------------------------------------\n\nTITLE: AILabel with Actions Bar Implementation\nDESCRIPTION: Demonstrates how to add an action bar to the AILabel component using AILabelActions with buttons and icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel>\n  <AILabelContent>\n    {Content Here}\n    {Optional AILabel action bar}\n    <AILabelActions>\n      <IconButton kind=\"ghost\" label=\"View\">\n        <View />\n      </IconButton>\n      <IconButton kind=\"ghost\" label=\"Open Folder\">\n        <FolderOpen />\n      </IconButton>\n      <IconButton kind=\"ghost\" label=\"Folders\">\n        <Folders />\n      </IconButton>\n      <Button>View details</Button>\n    </AILabelActions>\n  </AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Implementing StorybookDemo Component with Theme Selection\nDESCRIPTION: Configuration for a StorybookDemo component that displays a live Carbon Design System Storybook instance. The component includes theme selection capabilities and points to the React implementation of Carbon components, specifically showing an Accordion example.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-accordion--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Canvas for Icon Paired Link Component\nDESCRIPTION: This snippet demonstrates the rendering of a Canvas containing an accessible Link paired with an Icon, using the PairedWithIcon export from Link stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={LinkStories.PairedWithIcon} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Form and Regular Content in Modal\nDESCRIPTION: This snippet shows how to structure a Modal with both form elements and regular content, using the hasForm prop and specific CSS classes for proper alignment.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  <ModalHeader />\n  <ModalBody hasForm>\n    <TextInput data-modal-primary-focus labelText=\"Enter something\" />\n    <p className=\"cds--modal-content__text cds--modal-content__regular-content\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n      cursus fermentum risus, sit amet fringilla nunc pellentesque quis. Duis\n      quis odio ultrices, cursus lacus ac, posuere felis. Donec dignissim libero\n      in augue mattis, a molestie metus vestibulum. Aliquam placerat felis\n      ultrices lorem condimentum, nec ullamcorper felis porttitor.\n    </p>\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Implementing AILabel with Action Bar in React\nDESCRIPTION: Demonstrates how to implement an AILabel component with both content and action buttons using AILabelActions. Includes IconButton components for various actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabelDatatable.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel>\n  <AILabelContent>\n    {Content Here}\n    {Optional AI label action bar}\n    <AILabelActions>\n      <IconButton kind=\"ghost\" label=\"View\">\n        <View />\n      </IconButton>\n      <IconButton kind=\"ghost\" label=\"Open Folder\">\n        <FolderOpen />\n      </IconButton>\n      <IconButton kind=\"ghost\" label=\"Folders\">\n        <Folders />\n      </IconButton>\n      <Button>View details</Button>\n    </AILabelActions>\n  </AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Using cds-unordered-list and cds-list-item in HTML\nDESCRIPTION: This HTML snippet demonstrates the usage of the cds-unordered-list and cds-list-item web components to render a multi-level nested unordered list. To use this snippet, ensure that the Carbon Web Components library is loaded, either via npm import or CDN. The example showcases hierarchy with multiple nesting levels—structure and content are defined by placing cds-list-item elements within cds-unordered-list. Input: none required beyond using the tags in HTML; Output: renders the styled unordered list; Limitations: custom elements require JS registration and browser support for Web Components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/list/unordered-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h3>cds-unordered-list</h3>\n\n<cds-unordered-list>\n  <cds-list-item>\n    Unordered List level 1\n    <cds-unordered-list>\n      <cds-list-item>Unordered List level 2</cds-list-item>\n      <cds-list-item>\n        Unordered List level 2\n        <cds-unordered-list>\n          <cds-list-item>Unordered List level 2</cds-list-item>\n          <cds-list-item>Unordered List level 2</cds-list-item>\n        </cds-unordered-list>\n      </cds-list-item>\n    </cds-unordered-list>\n  </cds-list-item>\n  <cds-list-item>Unordered List level 1</cds-list-item>\n  <cds-list-item>Unordered List level 1</cds-list-item>\n</cds-unordered-list>\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal for Scrolling Content\nDESCRIPTION: This example demonstrates how to set up a Modal with scrolling content using the hasScrollingContent prop on ModalBody for large content that exceeds the modal size.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal size=\"large\">\n  <ModalHeader />\n  <ModalBody hasScrollingContent>\n    <p className=\".cds--modal-content__text\">Some very large contents...</p>\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select All Feature in MultiSelect\nDESCRIPTION: Example showing how to add a Select All option to the MultiSelect component options array. The code demonstrates the required properties for implementing the Select All functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/MultiSelect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = [\n  {\n    id: 'select-all',\n    text: 'All roles',\n    isSelectAll: true,\n  },\n  // ... other options\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Buttons in ComposedModal for Carbon Design System (JSX)\nDESCRIPTION: This snippet illustrates how to create a ComposedModal with custom buttons using the Button component. It includes three buttons with different actions and styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  ...\n  <ModalFooter>\n    <Button\n      kind=\"secondary\"\n      onClick={() => { (Run some action...) setOpen(false); }}>\n      Another button\n    </Button>\n    <Button\n      kind=\"secondary\"\n      onClick={() => { (Run some action...) setOpen(false); }}>\n      Secondary button\n    </Button>\n    <Button\n      kind=\"primary\"\n      onClick={() => { (Run some action...) setOpen(false); }}>\n      Primary button\n    </Button>\n  </ModalFooter>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Implementation\nDESCRIPTION: Demonstrates the basic structure of a Modal component with header, body, footer, and trigger button implementation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/modal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-button id=\"modal-example-button\"> Open Modal </cds-button>\n\n<cds-modal id=\"modal-example\">\n  <cds-modal-header>\n    <cds-modal-close-button></cds-modal-close-button>\n    <cds-modal-label>Label (Optional)</cds-modal-label>\n    <cds-modal-heading>Modal Title</cds-modal-heading>\n  </cds-modal-header>\n  <cds-modal-body><p>Modal text description</p></cds-modal-body>\n  <cds-modal-footer>\n    <cds-modal-footer-button kind=\"secondary\" data-modal-close>Cancel</cds-modal-footer-button>\n    <cds-modal-footer-button kind=\"primary\">Save</cds-modal-footer-button>\n  </cds-modal-footer>\n</cds-modal>\n\n<script type=\"text/javascript\">\n  document\n    .getElementById('modal-example-button')\n    .addEventListener('click', () => {\n      document.getElementById('modal-example').open = true;\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Enabled Date Ranges in React\nDESCRIPTION: Example demonstrating how to enable only specific date ranges using the enable prop. All dates outside the specified range will be disabled. Includes initial value setting.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  datePickerType=\"single\"\n  value=\"04/20/2023\"\n  enable={[\n    {\n      from: '04/10/2023',\n      to: '04/25/2023',\n    },\n  ]}>\n  <DatePickerInput\n    placeholder=\"dd/mm/yyyy\"\n    id=\"date-picker-8\"\n    labelText=\"minDate example\"\n  />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Modal Component Variants\nDESCRIPTION: JSX configuration for StorybookDemo component that displays different Modal variants from Carbon Design System. Sets up a demo with three variants: default modal, single button modal, and three button modal, linking to the Carbon Web Components documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-modal--default'\n    },\n    {\n      label: 'Single Button',\n      variant: 'components-modal--single-button'\n    },\n    {\n      label: 'Three Buttons',\n      variant: 'components-modal--three-buttons'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Label Text for Carbon Checkboxes\nDESCRIPTION: Example showing how to use the labelText prop to provide descriptive labels for checkboxes. This prop is required for accessibility and user understanding.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Checkbox/Checkbox.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox labelText={`Checkbox label`} id=\"checkbox-label-1\" />\n<Checkbox labelText={`Checkbox label`} id=\"checkbox-label-2\" />\n```\n\n----------------------------------------\n\nTITLE: Using the useTheme Hook in React\nDESCRIPTION: This example demonstrates how to use the useTheme hook to access the current theme in a React component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/Theme.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@carbon/react';\n\nfunction ExampleComponent() {\n  const { theme } = useTheme();\n\n  // Use the current theme in your component\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Icons in JavaScript\nDESCRIPTION: Generic pattern for importing icons from @carbon/icons package using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport IconName from '@carbon/icons/<module-type>/path-to-icon/size';\n```\n\n----------------------------------------\n\nTITLE: Accessing Carbon design tokens in SCSS\nDESCRIPTION: SCSS code demonstrating how to access design tokens defined by the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/theme';\n\nbody {\n  background: theme.$background;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Change Events for Carbon Checkbox in JavaScript\nDESCRIPTION: Provides an example of attaching an event listener to the `document` to capture the `cds-checkbox-changed` custom event. This event is dispatched by `<cds-checkbox>` elements whenever their checked state changes. The handler accesses event details, including the target element (`currentTarget`) and further details within `event.detail` (like the original browser event `evt`).\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/checkbox/checkbox.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-checkbox-changed', (event) => {\n  const { currentTarget } = event;\n  const { detail } = event as CustomEvent;\n  const { evt } = detail;\n  console.log('checkbox clicked', currentTarget, evt);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Sizes - Carbon Web Components - HTML\nDESCRIPTION: Shows how to create dropdowns in three different sizes (small, medium, large) using the \\\"size\\\" attribute on cds-dropdown. Each dropdown includes a corresponding \\\"title-text\\\" and label, and is populated with two options. Requires Carbon's web components library, and is intended for UI designs that demand responsive or proportional component sizing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/dropdown/dropdown.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown label=\\\"Dropdown label\\\" size=\\\"sm\\\" title-text=\\\"Small [sm]\\\">\\n  <cds-dropdown-item value=\\\"option-1\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-2\\\">Option 2</cds-dropdown-item>\\n</cds-dropdown>\\n<cds-dropdown label=\\\"Dropdown label\\\" size=\\\"md\\\" title-text=\\\"Medium [md]\\\">\\n  <cds-dropdown-item value=\\\"option-1\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-2\\\">Option 2</cds-dropdown-item>\\n</cds-dropdown>\\n<cds-dropdown label=\\\"Dropdown label\\\" size=\\\"lg\\\" title-text=\\\"Large [lg]\\\">\\n  <cds-dropdown-item value=\\\"option-1\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-2\\\">Option 2</cds-dropdown-item>\\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Using downshiftActions with ComboBox in React\nDESCRIPTION: Example demonstrating how to use the downshiftActions prop to access and modify Downshift's internal state, providing access to Downshift action functions via a ref.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst downshiftActions = useRef();\n\nreturn (\n  <ComboBox\n    ...\n    downshiftActions={downshiftActions}\n    downshiftProps={{\n      onStateChange: (changes) => {\n        if (changes.selectedItem === null) {\n          downshiftActions?.current?.openMenu?.();\n          return;\n        }\n      },\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Five Full-Width Tabs, Each Spanning Two Columns - React JSX\nDESCRIPTION: Illustrates configuring five tabs inside a Carbon Grid where each tab spans exactly two columns (using lg={10}). The arrangement demonstrates fine-grained control, ensuring each tab's width aligns with grid columns. All dependencies from the prior example apply. The TabList uses the fullWidth and contained props, and disables the third tab. The output is a responsive tabs row linked to the grid structure.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid condensed>\\n  <Column lg={10}>\\n    <Tabs>\\n      <TabList aria-label=\\\"List of tabs\\\" contained fullWidth>\\n        <Tab>Tab Label 1</Tab>\\n        <Tab>Tab Label 2</Tab>\\n        <Tab disabled>Tab Label 3</Tab>\\n        <Tab>Tab Label 4</Tab>\\n        <Tab>Tab Label 5</Tab>\\n      </TabList>\\n      <TabPanels>\\n        <TabPanel>Tab Panel 1</TabPanel>\\n        <TabPanel>Tab Panel 2</TabPanel>\\n        <TabPanel>Tab Panel 3</TabPanel>\\n        <TabPanel>Tab Panel 4</TabPanel>\\n        <TabPanel>Tab Panel 5</TabPanel>\\n      </TabPanels>\\n    </Tabs>\\n  </Column>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Selectable Menu Items Implementation\nDESCRIPTION: Example of implementing selectable menu items with event handling\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-menu>\n  <cds-menu-item-group label=\"Font style\">\n    <cds-menu-item-selectable label=\"Bold\" selected @cds-item-changed=\"${handleItemChange}\" ></cds-menu-item-selectable>\n    <cds-menu-item-selectable label=\"Italic\"></cds-menu-item-selectable>\n  </cds-menu-item-group>\n</cds-menu>\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Disabled Dates in React\nDESCRIPTION: Example showing how to disable specific dates (weekends) using the disable prop with a function that evaluates each date. The function returns true for dates that should be disabled.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  datePickerType=\"single\"\n  disable={[(date) => date.getDay() === 0 || date.getDay() === 6]}>\n  <DatePickerInput\n    placeholder=\"dd/mm/yyyy\"\n    id=\"date-picker-8\"\n    labelText=\"minDate example\"\n  />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Select Component (HTML)\nDESCRIPTION: This example demonstrates the correct usage of the <cds-select> web component in HTML. The component uses various attributes (helper-text, label-text, placeholder) and includes grouped option items via <cds-select-item-group> and <cds-select-item>. Requires the custom elements to be registered beforehand (e.g., via JavaScript import as shown separately). Inputs include attributes and nested option definitions. Output is a rendered select UI. All attribute assignments and nesting are preserved as written.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/select/select.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-select\n  helper-text=\"Optional helper text\"\n  label-text=\"Select\"\n  placeholder=\"Optional placeholder text\">\n  <cds-select-item-group label=\"Category 1\">\n    <cds-select-item value=\"all\">Option 1</cds-select-item>\n    <cds-select-item value=\"cloudFoundry\">Option 2</cds-select-item>\n  </cds-select-item-group>\n  <cds-select-item-group label=\"Category 2\">\n    <cds-select-item value=\"staging\">Option 3</cds-select-item>\n    <cds-select-item value=\"dea\">Option 4</cds-select-item>\n    <cds-select-item value=\"router\">Option 5</cds-select-item>\n  </cds-select-item-group>\n</cds-select>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Carbon Design System Slider\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display live examples of the Slider component from the Carbon Design System. It includes options for theme selection and defines two variants: a default slider and a controlled slider.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Slider/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-slider--default'\n    },\n    {\n      label: 'Controlled Slider',\n      variant: 'components-slider--controlled-slider'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for NumberInput Component in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component for the NumberInput component. It includes a theme selector and specifies two variants: the default NumberInput and an experimental fluid version. The demo is linked to the Carbon Design System's React Storybook.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-numberinput--default'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidnumberinput--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: HTML Implementation of TimePicker Component\nDESCRIPTION: Demonstrates the HTML structure for implementing a TimePicker component with AM/PM and timezone selection dropdowns. Shows proper use of the component with labels, placeholders, and select items.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/time-picker/time-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-time-picker\n  label-text=\"Select a time\"\n  placeholder=\"hh:mm\"\n  <cds-time-picker-select id=\"time-picker-select-1\" aria-label=\"Select AM/PM\" slot=\"time-picker-select\">\n    <cds-select-item value=\"AM\">AM</cds-select-item>\n    <cds-select-item value=\"PM\" selected>PM</cds-select-item>\n  </cds-time-picker-select>\n  <cds-time-picker-select id=\"time-picker-select-2\" aria-label=\"Select timezone\" slot=\"time-picker-select\">\n    <cds-select-item value=\"Time zone 1\">Time zone 1</cds-select-item>\n    <cds-select-item value=\"Time zone 2\" selected>Time zone 2</cds-select-item>\n  </cds-time-picker-select>\n</cds-time-picker>\n```\n\n----------------------------------------\n\nTITLE: Manual Selection Mode ContentSwitcher\nDESCRIPTION: Implementation of ContentSwitcher with manual selection mode that only fires onChange when a selection is made\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher\n  selectionMode=\"manual\"\n  onChange={() => {\n    console.log('change');\n  }}>\n  <Switch name=\"one\" text=\"First section\" />\n  <Switch name=\"two\" text=\"Second section\" />\n  <Switch name=\"three\" text=\"Third section\" />\n</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with Theme Selection in JSX\nDESCRIPTION: This code snippet configures a StorybookDemo component with theme selection capabilities. It points to the Carbon Design System React storybook URL and defines a default theme variant. The component allows users to view and interact with live examples of components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-theme--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Button Variants with Carbon Web Components (HTML)\nDESCRIPTION: Illustrates how to use the `kind` attribute to display different visual variants of the `cds-button` component, such as primary, secondary, tertiary, danger, danger-tertiary, danger-ghost, and ghost. Input: each `cds-button` uses the `kind` attribute to control style, defaulting to primary if omitted. Output: multiple styled button elements for different semantic purposes. Dependency: Carbon Web Components must be loaded in the context.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/button/button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-button>Primary</cds-button>\\n<cds-button kind=\\\"secondary\\\">Secondary</cds-button>\\n<cds-button kind=\\\"tertiary\\\">Tertiary </cds-button>\\n<cds-button kind=\\\"danger\\\">Danger</cds-button>\\n<cds-button kind=\\\"danger-tertiary\\\">Danger tertiary</cds-button>\\n<cds-button kind=\\\"danger-ghost\\\">Danger Ghost</cds-button>\\n<cds-button kind=\\\"ghost\\\">Ghost</cds-button>\n```\n\n----------------------------------------\n\nTITLE: Basic Structured List Implementation in HTML\nDESCRIPTION: A complete HTML example showing the basic implementation of a Carbon structured list component with header and multiple rows of content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/structured-list/structured-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-structured-list>\n  <cds-structured-list-head>\n    <cds-structured-list-header-row>\n      <cds-structured-list-header-cell>ColumnA</cds-structured-list-header-cell>\n      <cds-structured-list-header-cell>ColumnB</cds-structured-list-header-cell>\n      <cds-structured-list-header-cell>ColumnC</cds-structured-list-header-cell>\n    </cds-structured-list-header-row>\n  </cds-structured-list-head>\n  <cds-structured-list-body>\n    <cds-structured-list-row>\n      <cds-structured-list-cell>Row 1</cds-structured-list-cell>\n      <cds-structured-list-cell>Row 1</cds-structured-list-cell>\n      <cds-structured-list-cell\n        >Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dui\n        magna, finibus id tortor sed, aliquet bibendum augue. Aenean posuere sem\n        vel euismod dignissim.</cds-structured-list-cell\n      >\n    </cds-structured-list-row>\n    <cds-structured-list-row>\n      <cds-structured-list-cell>Row 2</cds-structured-list-cell>\n      <cds-structured-list-cell>Row 2</cds-structured-list-cell>\n      <cds-structured-list-cell\n        >Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dui\n        magna, finibus id tortor sed, aliquet bibendum augue. Aenean posuere sem\n        vel euismod dignissim.</cds-structured-list-cell\n      >\n    </cds-structured-list-row>\n    <cds-structured-list-row>\n      <cds-structured-list-cell>Row 3</cds-structured-list-cell>\n      <cds-structured-list-cell>Row 3</cds-structured-list-cell>\n      <cds-structured-list-cell\n        >Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc dui\n        magna, finibus id tortor sed, aliquet bibendum augue. Aenean posuere sem\n        vel euismod dignissim.</cds-structured-list-cell\n      >\n    </cds-structured-list-row>\n  </cds-structured-list-body>\n</cds-structured-list>\n```\n\n----------------------------------------\n\nTITLE: Handling Content Switcher Selection Event (JavaScript)\nDESCRIPTION: Demonstrates how to add an event listener to the document to capture the `cds-content-switcher-selected` custom event fired by the `cds-content-switcher` component. The handler logs the event's `currentTarget` (the element the listener is attached to) and the `detail` object which contains the original event (`evt`). This allows developers to react to user selections.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/content-switcher/content-switcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-content-switcher-selected', (event) => {\n  const { currentTarget } = event;\n  const { detail } = event as CustomEvent;\n  const { evt } = detail;\n  console.log('details:', currentTarget, evt);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Component Tokens in Custom Stylesheets\nDESCRIPTION: This snippet shows how to import and use component tokens in custom stylesheets. It demonstrates accessing the button-primary token value and applying it to a custom selector.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/button';\n\n.my-selector {\n  background: button.$button-primary;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Implementation with HTML\nDESCRIPTION: Demonstrates basic accordion alignment configuration with the alignment attribute set to start. The example shows how to structure an accordion with multiple panels using cds-accordion and cds-accordion-item components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/accordion/accordion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-accordion alignment=\"start\">\n  <cds-accordion-item title=\"Panel A\">Panel A</cds-accordion-item>\n  <cds-accordion-item title=\"Panel B\">Panel B</cds-accordion-item>\n  <cds-accordion-item title=\"Panel C\">Panel C</cds-accordion-item>\n</cds-accordion>\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Ordered List with Carbon Web Components in HTML\nDESCRIPTION: Demonstrates the HTML structure for implementing a nested ordered list using the `<cds-ordered-list>` and `<cds-list-item>` web components. This example shows multiple levels of nesting within an ordered list.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/list/ordered-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h3>cds-ordered-list</h3>\n\n<cds-ordered-list>\n  <cds-list-item>\n    Ordered List level 1\n    <cds-ordered-list>\n      <cds-list-item>Ordered List level 2</cds-list-item>\n      <cds-list-item>\n        Ordered List level 2\n        <cds-ordered-list>\n          <cds-list-item>Ordered List level 2</cds-list-item>\n          <cds-list-item>Ordered List level 2</cds-list-item>\n        </cds-ordered-list>\n      </cds-list-item>\n    </cds-ordered-list>\n  </cds-list-item>\n  <cds-list-item>Ordered List level 1</cds-list-item>\n  <cds-list-item>Ordered List level 1</cds-list-item>\n</cds-ordered-list>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon AI Label Component with Auto Align - HTML\nDESCRIPTION: Demonstrates the structure of the AI Label component with 'autoalign' for dynamic positioning and a body text slot containing confidence metrics and explanation. Relies on prior registration of the AI Label component, proper HTML structure, and available CSS for best results. Inputs relate to the slot content; output is a styled, floating AI confidence label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-ai-label autoalign>\n  <div slot=\"body-text\">\n    <p class=\"secondary\">AI Explained</p>\n    <h2 class=\"ai-label-heading\">84%</h2>\n    <p class=\"secondary bold\">Confidence score</p>\n    <p class=\"secondary\">\n      Lorem ipsum dolor sit amet, di os consectetur adipiscing elit, sed do\n      eiusmod tempor incididunt ut fsil labore et dolore magna aliqua.\n    </p>\n    <hr />\n    <p class=\"secondary\">Model type</p>\n    <p class=\"bold\">Foundation model</p>\n  </div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Basic SCSS Usage of @carbon/type\nDESCRIPTION: Core SCSS implementation showing how to use the main typography features including reset, default styles, utility classes, and type styles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type';\n\n// Include type reset\n@include type.reset();\n\n// Include default type styles, targets h1, h2, h3, etc\n@include type.default-type();\n\n// Include utility classes for type-related properties\n@include type.type-classes();\n\n.selector {\n  // Include a type style\n  @include type.type-style('productive-heading-01');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Component Implementation in React\nDESCRIPTION: Demonstrates the basic implementation of a Popover component with a toggle button trigger and content. The component uses React state to control visibility and includes the essential imports from @carbon/react.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Popover/Popover.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popover, PopoverContent } from '@carbon/react';\nimport React from 'react';\n\nfunction CustomComponent() {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Popover open={open}>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setOpen(!open);\n        }}>\n        Toggle\n      </button>\n      <PopoverContent>\n        The content that is revealed by interacting with the Toggle button\n      </PopoverContent>\n    </Popover>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value in Dropdown - Carbon Web Components - HTML\nDESCRIPTION: Illustrates how to set an initial selected value in a Carbon dropdown component using the \\\"value\\\" attribute. The code provides a pre-selected dropdown with three choices, where \\\"Initially selected\\\" is set as default. It requires Carbon's cds-dropdown and cds-dropdown-item web components, and can be used in forms or user interfaces accepting HTML.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/dropdown/dropdown.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown value=\\\"option-0\\\">\\n  <cds-dropdown-item value=\\\"option-0\\\">Initially selected</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-1\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-2\\\">Option 2</cds-dropdown-item>\\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Combo Box Component\nDESCRIPTION: Example of implementing a disabled Combo Box component with helper text, title, and multiple options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/combo-box/combo-box.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-combo-box\n  helper-text=\"This is some helper text\"\n  title-text=\"Combo box title\"\n  label=\"Filter...\"\n  disabled>\n  <cds-combo-box-item value=\"all\">Option 1</cds-combo-box-item>\n  <cds-combo-box-item value=\"cloudFoundry\">Option 2</cds-combo-box-item>\n  <cds-combo-box-item value=\"staging\">Option 3</cds-combo-box-item>\n</cds-combo-box>\n```\n\n----------------------------------------\n\nTITLE: Utilizing AI Label as Column Header - HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed the AI Label as part of a DataTable's column header in Carbon Design System. It outlines how a cds-ai-label can be nested inside a cds-table-header-cell to display contextual information. Dependencies include the structure of a Carbon DataTable, and expected outputs are the enhanced headers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table-ai-label.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-table-header-cell>\n  Attached groups\n  <cds-ai-label alignment=\"bottom-left\">\n    <div slot=\"body-text\">{Content Here}</div>\n  </cds-ai-label>\n</cds-table-header-cell>\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Selection Events in JavaScript\nDESCRIPTION: Demonstrates how to capture tile selection events using an event listener, particularly useful when using tile groups with radio or selectable tiles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-current-radio-tile-selection', (event) => {\n  // use values from the detail object within the event\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Min Date on Date Picker - HTML\nDESCRIPTION: This HTML snippet demonstrates setting the minimum selectable date using the min-date attribute. The input field only allows dates on or after the specified min-date. Input expects a valid min-date string, and the component prevents input or selection of earlier dates. Carbon Web Components provides all dependencies for functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/date-picker/date-picker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-date-picker min-date=\\\"09/15/2025\\\">\\n  <cds-date-picker-input\\n    kind=\\\"single\\\"\\n    placeholder=\\\"mm/dd/yyyy\\\"></cds-date-picker-input>\\n</cds-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font Resolver in SCSS for Carbon Design System\nDESCRIPTION: This code demonstrates how to implement a custom font resolver for the Carbon Design System using SCSS. It overrides the default behavior with a custom module.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/fonts/README.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use 'sass:meta';\n@use './my-custom-resolver' as resolver;\n@use '@carbon/styles/scss/fonts/src' with (\n  // Here, \"resolve\" is the name of the function in the \"resolver\" module\n  $resolver: meta.get-function('resolve', 'resolver')\n);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Button Size with Carbon Web Components (HTML)\nDESCRIPTION: Provides examples covering how the `size` attribute customizes the rendered size of the `cds-button` component. Supported values are `sm`, `md`, `lg`, `xl`, and `2xl`, with a default of `lg`. Inputs: `size` attribute controlling button scale; outputs: button elements visually sized as specified by the attribute. Requires Carbon Web Components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/button/button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-button>Button</cds-button>\\n<cds-button size=\\\"sm\\\">Button</cds-button>\\n<cds-button size=\\\"md\\\">Button</cds-button>\\n<cds-button size=\\\"xl\\\">Button</cds-button>\\n<cds-button size=\\\"2xl\\\">Button</cds-button>\n```\n\n----------------------------------------\n\nTITLE: Selectable Tile Implementation\nDESCRIPTION: Shows how to create a selectable tile that can be toggled between selected and unselected states.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-selectable-tile name=\"selectable-tile\">\n  Selectable Tile\n</cds-selectable-tile>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for DatePicker Variants\nDESCRIPTION: React JSX configuration that sets up a StorybookDemo component with multiple DatePicker variants including simple, range, and calendar options. The configuration includes both stable and experimental fluid variants.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  tall\n  variants={[\n    {\n      label: 'Range With Calendar',\n      variant: 'components-datepicker--range-with-calendar'\n    },\n    {\n      label: 'Simple',\n      variant: 'components-datepicker--simple'\n    },\n    {\n      label: 'Single With Calendar',\n      variant: 'components-datepicker--single-with-calendar'\n    },\n    {\n      label: 'Fluid Range With Calendar (unstable)',\n      variant: 'experimental-unstable-fluiddatepicker--range-with-calendar'\n    },\n    {\n      label: 'Fluid Simple (unstable)',\n      variant: 'experimental-unstable-fluiddatepicker--simple'\n    },\n    {\n      label: 'Fluid Single (unstable)',\n      variant: 'experimental-unstable-fluiddatepicker--single'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Usage in HTML\nDESCRIPTION: This example demonstrates the basic usage of a Tag component in HTML, creating a gray tag with a title and text content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tag/tag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-tag type=\"gray\" title=\"tag-example\"> This is a tag </cds-tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values in DatePicker Component\nDESCRIPTION: Examples showing how to set initial values in DatePicker using both string and Date object formats. Demonstrates flexibility in value initialization.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker datePickerType=\"single\" value=\"07/15/1988\">\n  <DatePickerInput\n    placeholder=\"dd/mm/yyyy\"\n    id=\"date-picker-6\"\n    labelText=\"Value as string example\"\n  />\n</DatePicker>\n<br />\n<DatePicker datePickerType=\"single\" value={new Date()}>\n  <DatePickerInput\n    placeholder=\"dd/mm/yyyy\"\n    id=\"date-picker-7\"\n    labelText=\"Value as object example\"\n  />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Progress Indicator Skeleton State in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display the skeleton (loading) state of the Carbon Progress Indicator. It uses the `<cds-progress-indicator-skeleton>` and `<cds-progress-step-skeleton>` elements as placeholders before the actual component data is available. Requires the corresponding JavaScript module to be imported first.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-indicator/progress-indicator.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-progress-indicator-skeleton>\n  <cds-progress-step-skeleton></cds-progress-step-skeleton>\n  <cds-progress-step-skeleton></cds-progress-step-skeleton>\n  <cds-progress-step-skeleton></cds-progress-step-skeleton>\n</cds-progress-indicator-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Assigning a Unique ID to a Carbon Checkbox in HTML\nDESCRIPTION: Shows how to set the `id` attribute on a `<cds-checkbox>` element. Providing a unique `id` is essential for accessibility, particularly for associating the checkbox with its label, and for interacting with the element via JavaScript. Requires the Carbon Design System web components library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/checkbox/checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-checkbox id=\"checkbox\"></cds-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Dropdowns - Carbon Web Components - HTML\nDESCRIPTION: Provides a code example for rendering a dropdown inline with adjacent content by setting \\\"type=\\\"inline\\\"\\\". The snippet includes a label, title-text, and two dropdown options. It requires Carbon's cds-dropdown and cds-dropdown-item components and helps implement inline form fields or compact content layouts.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/dropdown/dropdown.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown type=\\\"inline\\\" label=\\\"Inline\\\" title-text=\\\"Dropdown label\\\">\\n  <cds-dropdown-item value=\\\"option-1\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-2\\\">Option 2</cds-dropdown-item>\\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for ComboButton Component in React\nDESCRIPTION: Sets up a StorybookDemo component to display the ComboButton component from the Carbon Design System. The configuration enables theme selection, sets a taller height for the demo container, points to the React implementation URL, and specifies the default variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboButton/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-combobutton--default'\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using initialSelectedItem with ComboBox in React\nDESCRIPTION: Example showing how to initialize the ComboBox component with a pre-selected value without fully controlling the component using the initialSelectedItem prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst items = ['Option 1', 'Option 2', 'Option 3']\n\n<Combobox initialSelectedItem={items[2]} onChange={() => {}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Kind Date Picker - HTML\nDESCRIPTION: This HTML snippet demonstrates creating a single date picker with a calendar dropdown using cds-date-picker and cds-date-picker-input. Set the kind attribute on the input to 'single' for calendar mode. No additional JavaScript dependencies are required beyond the web components themselves. Input expects a kind string and placeholder, and renders an interactive date picker input with calendar support.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/date-picker/date-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-date-picker>\\n  <cds-date-picker-input\\n    kind=\\\"single\\\"\\n    placeholder=\\\"mm/dd/yyyy\\\"></cds-date-picker-input>\\n</cds-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Using itemToString with ComboBox in React\nDESCRIPTION: Example demonstrating how to use the itemToString prop to extract display text from complex item objects in the items array.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox\n  items={[\n    { id: 'option-0', text: 'Option 0' },\n    { id: 'option-1', text: 'Option 1' },\n    { id: 'option-2', text: 'Option 2' },\n  ]}\n  itemToString={(item) => (item ? item.text : '')}\n  onChange={() => {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using @carbon/layout Package in Sass\nDESCRIPTION: Demonstrates how to import the @carbon/layout package using @use and apply spacing tokens and conversion utilities in CSS selectors. This example shows applying margin-bottom using a spacing token and converting pixel values to rem units.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/layout/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/layout';\n\n.selector {\n  margin-bottom: layout.$spacing-05;\n  width: layout.rem(24px);\n  height: layout.rem(24px);\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Tile Group Implementation\nDESCRIPTION: Demonstrates how to create a group of radio tiles that work like radio buttons, where only one tile can be selected at a time.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-tile-group>\n  <cds-radio-tile name=\"selectable-tile\"> Single-select Tile </cds-radio-tile>\n  <cds-radio-tile name=\"selectable-tile\"> Single-select Tile </cds-radio-tile>\n  <cds-radio-tile name=\"selectable-tile\"> Single-select Tile </cds-radio-tile>\n</cds-tile-group>\n```\n\n----------------------------------------\n\nTITLE: Filterable Multi-Select Implementation\nDESCRIPTION: Shows how to implement a filterable Multi-Select component with search functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/multi-select/multi-select.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-multi-select value=\"foo,baz\" filterable>\n  <cds-multi-select-item value=\"foo\">Foo</cds-multi-select-item>\n  <cds-multi-select-item value=\"bar\">Bar</cds-multi-select-item>\n  <cds-multi-select-item value=\"baz\">Baz</cds-multi-select-item>\n</cds-multi-select>\n```\n\n----------------------------------------\n\nTITLE: Using Motion Functions and Durations in SCSS with the @carbon/motion Package\nDESCRIPTION: This example demonstrates how to import and use the @carbon/motion package in SCSS. It shows different ways to apply motion timing functions and durations to CSS transitions, including using the motion mixin directly as a transition-timing-function, using it within a transition property, or applying predefined duration variables.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/motion/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/motion';\n\n.selector {\n  // Set `transition-timing-function` directly\n  @include motion.motion(standard, productive);\n\n  // Alternatively\n  transition: opacity motion.motion(standard, productive);\n\n  // Or use a duration\n  transition: opacity motion.$duration-fast-01;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Icon Size Props\nDESCRIPTION: Example showing how to use the size prop to control icon dimensions\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/icons-react';\n\nfunction ExampleComponent() {\n  return <Add size={32} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Change and Close Handlers\nDESCRIPTION: Shows the implementation of handler functions for tab selection changes and tab close requests, including handling edge cases like removing the currently selected tab.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nconst handleTabChange = (evt) => {\n  setSelectedIndex(evt.selectedIndex);\n};\n\nconst handleCloseTabRequest = (tabIndex) => {\n  // ignore close requests on disabled tabs\n  if (renderedTabs[tabIndex].disabled) {\n    return;\n  }\n\n  const selectedTab = renderedTabs[selectedIndex];\n\n  const filteredTabs = renderedTabs.filter((_, index) => index !== tabIndex);\n  // if the tab being deleted is the currently selected tab, we're re-setting the selectedIndex\n  // to the first tab available that isn't disabled\n  if (tabIndex === selectedIndex) {\n    const defaultTabIndex = filteredTabs.findIndex((tab) => !tab.disabled);\n    setSelectedIndex(defaultTabIndex);\n  } else {\n    // we're re-calculating the selectedIndex since the selected tab's index might have shifted\n    // due to a tab element being removed from the array\n    setSelectedIndex(filteredTabs.indexOf(selectedTab));\n  }\n  setRenderedTabs(filteredTabs);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Accordion Alignment in React\nDESCRIPTION: Demonstrates how to use the align prop to specify the icon placement in the accordion.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion align=\"start\">\n  <AccordionItem title=\"Panel A\">Panel A</AccordionItem>\n  <AccordionItem title=\"Panel B\">Panel B</AccordionItem>\n  <AccordionItem title=\"Panel C\">Panel C</AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Using Button Link with Carbon Web Components (HTML)\nDESCRIPTION: Demonstrates how to render a Button component as a hyperlink using the `href` attribute. The `cds-button` web component is provided an `href` to turn it into an anchor element, allowing navigation to a specified URL upon user click. Inputs: `href` attribute specifying the destination. Output: Renders a styled button as an anchor. No additional dependencies required beyond including the Carbon Web Components library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/button/button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-button href=\\\"https://www.carbondesignsystem.com\\\">Navigate</cds-button>\n```\n\n----------------------------------------\n\nTITLE: Importing Colors in JavaScript\nDESCRIPTION: Shows how to import color variables in JavaScript using both ESM and CommonJS patterns.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM\nimport { black, blue, warmGray } from '@carbon/colors';\n\n// CommonJS\nconst { black, blue, warmGray } = require('@carbon/colors');\n```\n\n----------------------------------------\n\nTITLE: Testing Components in Multiple Themes with Playwright\nDESCRIPTION: This JavaScript code demonstrates how to test a component across multiple themes using Playwright. It uses a forEach loop to iterate through available themes and snapshot each variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst { test } = require('@playwright/test');\nconst { themes } = require('../../test-utils/env');\nconst { snapshotStory } = require('../../test-utils/storybook');\n\ntest.describe('component-name @vrt', () => {\n  themes.forEach((theme) => {\n    test(theme, async ({ page }) => {\n      await snapshotStory(page, {\n        component: 'component',\n        story: 'story-name',\n        theme,\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Configuration with Carbon\nDESCRIPTION: Basic ESLint configuration example that extends the Carbon configuration, including all default rules and React.js plugins.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/eslint-config-carbon/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"carbon\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Breadcrumb Component\nDESCRIPTION: Configuration for a live Storybook demo that showcases the Breadcrumb component variants including default and overflow menu versions. The demo points to the React Carbon Design System documentation site.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Breadcrumb/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-breadcrumb--default'\n    },\n    {\n      label: 'Breadcrumb with Overflow Menu',\n      variant: 'components-breadcrumb--breadcrumb-with-overflow-menu'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Nesting Layer Components in React\nDESCRIPTION: Demonstrates how to nest Layer components to create multiple layers of rendering. Each child of a Layer component is rendered using the layer tokens at that level.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layer/Layer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Layer>\n  <ChildComponent />\n  <Layer>\n    <ChildComponent />\n    <Layer>\n      <ChildComponent />\n    </Layer>\n  </Layer>\n</Layer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronized TreeView with Controllable API in React\nDESCRIPTION: This snippet demonstrates how to use the new controllable API of TreeView to synchronize the selected and active states with the application. It uses React hooks to manage state and passes the state and setter functions as props to the TreeView component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/TreeView.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction SynchronizedTreeView() {\n  const [selected, setSelected] = useState([]);\n  const [active, setActive] = useState(null);\n\n  return (\n    <TreeView\n      selected={selected}\n      onSelect={setSelected}\n      active={active}\n      onActivate={setActive}>\n      ...\n    </TreeView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StorybookDemo Component in React\nDESCRIPTION: This snippet demonstrates how to use the StorybookDemo component to embed a live Storybook demo with theme selection. It configures the component with a URL pointing to Carbon Design System's React storybook and specifies a default variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ClassPrefix/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-classprefix--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Multi-Select Tile Group Implementation\nDESCRIPTION: Shows how to create a group of selectable tiles where multiple tiles can be selected simultaneously.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-tile-group>\n  <cds-selectable-tile name=\"selectable-tile\">\n    Selectable Tile 1\n  </cds-selectable-tile>\n  <cds-selectable-tile name=\"selectable-tile2\">\n    Selectable Tile 2\n  </cds-selectable-tile>\n  <cds-selectable-tile name=\"selectable-tile3\">\n    Selectable Tile 3\n  </cds-selectable-tile>\n  <cds-tile-group></cds-tile-group\n></cds-tile-group>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Level for Layer Component in React\nDESCRIPTION: Shows how to override the level of a Layer component using the level prop. This is useful for resetting the Layer level or ensuring a specific rendering level.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layer/Layer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Layer>\n  <ChildComponent />\n  <Layer level={0}>\n    <ChildComponent />\n  </Layer>\n</Layer>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon Fill in React\nDESCRIPTION: React component example implementing custom icon fill color\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <button>\n      <Add aria-label=\"Add\" className=\"my-custom-class\" />\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Dropdown Implementation\nDESCRIPTION: Example of creating an inline Dropdown variant using the type prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown\n  items={['Option 1', 'Option 2', 'Option 3']}\n  label=\"Inline\"\n  type=\"inline\"\n  is=\"inline\"\n  titleText=\"Dropdown label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useLayer Hook in React Component\nDESCRIPTION: Demonstrates how to use the useLayer hook to get the current layer level within a component. This hook returns an object with the current level of the layer.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layer/Layer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ExampleComponent() {\n  const { level } = useLayer();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Floating Styles in MultiSelect Component\nDESCRIPTION: Demonstrates how to enable dynamic floating styles for a MultiSelect component using feature flags. The code shows implementation of a MultiSelect with floating styles enabled through the 'enable-v12-dynamic-floating-styles' feature flag. The component includes label, helper text, and custom item string conversion.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/MultiSelect.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <MultiSelect\n    label=\"Multiselect Label\"\n    id=\"carbon-multiselect-example\"\n    titleText=\"Multiselect title\"\n    helperText=\"This is helper text\"\n    items={comboBoxItems}\n    direction={args.direction}\n    itemToString={(item) => (item ? item.text : '')}\n    selectionFeedback=\"top-after-reopen\"\n  />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Importing Icons Using Carbon Design System in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use a specific icon from the Carbon Design System in a JavaScript application. It utilizes the Add16 icon and includes attributes for class, aria-label, and children. The code requires npm package '@carbon/icons' and involves handling attributes for accessibility. The expected input is a component reference, and it outputs an HTML representation of the icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/icons/icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Add16 from '@carbon/icons/lib/add/16.js';\n\nfunction App() {\n  return (\n    html`\n    ${Add16({\n     class: 'test-class',\n     'aria-label': 'add',\n     'aria-describedby': 'id-title-1',\n     children: svg`<title id=\"id-title-1\">add</title>`, })}`\n  );\n\n```\n\n----------------------------------------\n\nTITLE: Basic MultiSelect Component Usage in JSX\nDESCRIPTION: Example of how to use the MultiSelect component in JSX, including various props such as label, items, and initialSelectedItems.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<MultiSelect\n  useTitleInItem={false}\n  label=\"MultiSelect Label\"\n  invalid={false}\n  invalidText=\"Invalid Selection\"\n  onChange={onChange}\n  items={[\n    { id: 'item-1', text: 'Item 1' },\n    { id: 'item-2', text: 'Item 2' },\n  ]}\n  itemToString={itemToString}\n  initialSelectedItems={[\n    { id: 'item-1', text: 'Item 1' },\n    { id: 'item-2', text: 'Item 2' },\n  ]}\n  translateWithId={translateWithId}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Custom Append Node\nDESCRIPTION: Shows how to append the DatePicker menu to a custom DOM node instead of the default body element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst node = document.querySelector('#my-node');\n\n<DatePicker appendTo={node}>...</DatePicker>;\n```\n\n----------------------------------------\n\nTITLE: Clickable Tile Implementation\nDESCRIPTION: Shows how to create a clickable tile that can be used as a navigational element to redirect users to another page.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-clickable-tile> Clickable tile </cds-clickable-tile>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Carbon Pagination (HTML)\nDESCRIPTION: Demonstrates the basic HTML structure for using the `<cds-pagination>` web component. It sets the initial `page-size` to 10 and `total-items` to 100. Nested `<cds-select-item>` elements define the available options for the page size selector within the pagination component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/pagination/pagination.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-pagination page-size=\"10\" total-items=\"100\">\n  <cds-select-item value=\"10\">10</cds-select-item>\n  <cds-select-item value=\"20\">20</cds-select-item>\n  <cds-select-item value=\"30\">30</cds-select-item>\n  <cds-select-item value=\"40\">40</cds-select-item>\n  <cds-select-item value=\"50\">50</cds-select-item>\n</cds-pagination>\n```\n\n----------------------------------------\n\nTITLE: Initializing MenuButton Component in React\nDESCRIPTION: Demonstrates how to use the MenuButton component to group related actions. The component takes a label prop and MenuItem children to define the menu options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MenuButton/MenuButton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<MenuButton label=\"Actions\">\n  <MenuItem label=\"First action\" />\n  <MenuItem label=\"Second action\" />\n  <MenuItem label=\"Third action\" />\n</MenuButton>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dropdown Component\nDESCRIPTION: Demonstrates how to extend the CDSDropdown component to create a custom dropdown with modified styles using Lit Element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/styling.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css, customElement } from 'lit';\nimport CDSDropdown from '@carbon/web-components/es/components/dropdown/dropdown';\n\n@customElement('my-dropdown')\nclass MyDropdown extends CDSDropdown {\n  // Custom CSS to enforce `field-02` (light) style of the dropdown\n  static styles = css`\n    ${CDSDropdown.styles}\n    .cds--list-box {\n      background-color: white;\n    }\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Carbon Radio Button Group in HTML (HTML)\nDESCRIPTION: This HTML snippet demonstrates creating a horizontally-oriented radio button group using Carbon Design System's Web Components. The <cds-radio-button-group> element organizes multiple <cds-radio-button> children, with label positioning set to the right and grouping controlled by the 'name' attribute. Each radio button exposes its own label and unique value. Required dependencies include loading the Carbon Web Components library (via CDN or module import) in the page environment. The input expects component markup inside a standards-compliant HTML context, and outputs a grouped, mutually-exclusive radio selection UI.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/radio-button/radio-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-radio-button-group\n  label-position=\"right\"\n  orientation=\"horizontal\"\n  name=\"radio-group\">\n  <cds-radio-button label-text=\"Radio button\" value=\"all\"></cds-radio-button>\n  <cds-radio-button\n    label-text=\"Radio button\"\n    value=\"cloudFoundry\"></cds-radio-button>\n  <cds-radio-button\n    label-text=\"Radio button\"\n    value=\"staging\"></cds-radio-button>\n</cds-radio-button-group>\n```\n\n----------------------------------------\n\nTITLE: Managing Feature Flags in JavaScript\nDESCRIPTION: Demonstrates how to use 'enable', 'disable', and 'merge' functions to manage feature flag statuses in JavaScript.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/feature-flags/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enable, disable, merge } from '@carbon/feature-flags';\n\n// Enable `feature-flag-a`\nenable('feature-flag-a');\n\n// Disable `feature-flag-a`\ndisable('feature-flag-a');\n\n// Set a variety of feature flags to a specific value\nmerge({\n  'feature-flag-a': true,\n  'feature-flag-b': false,\n  'feature-flag-c': true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Form Display\nDESCRIPTION: Sets up a StorybookDemo component to showcase form variants from Carbon Design System. Configures theme selection, height settings, and defines default and experimental fluid form variants.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Form/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-form--default'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-fluidform--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Migration Example\nDESCRIPTION: Example showing the before and after code for migrating from the deprecated flags object prop to individual boolean props.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FeatureFlags/overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n//Before migration\n\n <FeatureFlags\n  flags={{\n    'enable-v12-tile-default-icons': true,\n  }}>\n    <App />\n  </FeatureFlags>\n\n\n//After migration\n\n  <FeatureFlags enableV12TileDefaultIcons>\n    <App />\n  </FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Items Implementation\nDESCRIPTION: Example of implementing basic menu items with shortcuts and disabled states\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-menu @cds-item-opened=\"${handleMenuOpen}\" @cds-item-closed=\"${handleMenuClose}\">\n  <cds-menu-item label=\"Cut\" shortcut=\"⌘X\"></cds-menu-item>\n  <cds-menu-item label=\"Copy\" shortcut=\"⌘C\"></cds-menu-item>\n  <cds-menu-item label=\"Paste\" shortcut=\"⌘V\" disabled></cds-menu-item>\n</cds-menu>\n```\n\n----------------------------------------\n\nTITLE: Basic Number Input Implementation\nDESCRIPTION: Demonstrates basic usage of the number input component with value constraints, label, and helper text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/number-input/number-input.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-number-input\\n  value=\\\"0\\\"\\n  min=\\\"0\\\"\\n  max=\\\"100\\\"\\n  label=\\\"Label text\\\"\\n  helper-text=\\\"Optional helper text\\\">\\n</cds-number-input>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissible Tags in React\nDESCRIPTION: This code snippet demonstrates how to implement dismissible tags using React hooks. It includes functionality for rendering tags, handling tag removal, and resetting the tag list.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tag/Tag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst tags = [\n  {\n    type: 'red',\n    text: 'Tag content with a long text description',\n    tagTitle: 'Provide a custom title to the tag',\n  },\n  {\n    type: 'magenta',\n    text: 'Tag content 1',\n  },\n  {\n    type: 'purple',\n    text: 'Tag content 2',\n  },\n];\n\nconst [renderedTags, setRenderedTags] = useState(tags);\n\nconst handleClose = (removedTag) => {\n  const newTags = renderedTags.filter((tag) => tag !== removedTag);\n  setRenderedTags(newTags);\n};\n\nconst resetTabs = () => {\n  setRenderedTags(tags);\n};\n\nreturn (\n  <>\n    <Button style={{ marginBottom: '3rem' }} onClick={resetTabs}>\n      Reset\n    </Button>\n    <br />\n    <div aria-label=\"Dismissible tags\" role=\"group\">\n      {renderedTags.map((tag, index) => (\n        <DismissibleTag\n          key={index}\n          type={tag.type}\n          className=\"some-class\"\n          renderIcon={Asleep}\n          text={tag.text}\n          tagTitle={tag.tagTitle}\n          title=\"Dismiss\"\n          onClose={(e) => {\n            e.preventDefault();\n            handleClose(tag);\n          }}\n          {...args}\n        />\n      ))}\n    </div>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Tile HTML Implementation\nDESCRIPTION: Demonstrates the basic implementation of a default read-only tile for displaying information to users.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-tile>Default tile</cds-tile>\n```\n\n----------------------------------------\n\nTITLE: Setting Focus in ComposedModal using Data Attribute in React\nDESCRIPTION: This example demonstrates how to set focus on a specific element in a ComposedModal using the data-modal-primary-focus attribute in the Carbon Design System for React.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  <ModalBody hasForm>\n    <TextInput data-modal-primary-focus labelText=\"Enter something\" />\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Stacked ButtonSet in JSX\nDESCRIPTION: This example demonstrates how to use the 'stacked' prop with ButtonSet to arrange buttons vertically.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonSet stacked>\n  <Button kind=\"secondary\">Secondary button</Button>\n  <Button kind=\"primary\">Primary button</Button>\n</ButtonSet>\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in Individual Vue Components\nDESCRIPTION: Example showing how to import and use Carbon icons within a specific Vue component rather than registering them globally. This approach is more efficient for applications that only use icons in specific components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport Bee32 from '@carbon/icons-vue/es/bee/32';\n\nexport default {\n  name: 'MyComponent',\n  component: {\n    Bee32,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Minimum Date Constraint\nDESCRIPTION: Shows how to set a minimum date constraint relative to the current date.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<DatePicker\n  minDate={new Date().setDate(new Date().getDate() - 5)}\n  datePickerType=\"single\"\n  value={new Date()}>\n  <DatePickerInput\n    placeholder=\"dd/mm/yyyy\"\n    id=\"date-picker-5\"\n    labelText=\"minDate example\"\n  />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Basic Inline Notification Implementation\nDESCRIPTION: HTML implementation of a basic inline notification component with title and subtitle.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/notification/notification.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-inline-notification\n  style=\"min-width: 30rem; margin-bottom: .5rem\"\n  title=\"Notification title\"\n  subtitle=\"Subtitle text goes here.\">\n</cds-inline-notification>\n```\n\n----------------------------------------\n\nTITLE: Rendering Progress Bar Demo in Carbon Design System using JSX\nDESCRIPTION: This code snippet uses a StorybookDemo component to display a live demo of the Progress Bar from the Carbon Design System. It includes theme selection and multiple variants of the Progress Bar component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ProgressBar/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-progressbar--default'\n    },\n    {\n      label: 'Example',\n      variant: 'components-progressbar--example'\n    },\n    {\n      label: 'Indeterminate',\n      variant: 'components-progressbar--indeterminate'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: MultiSelect Component with Label Property in JSX\nDESCRIPTION: Example of using the MultiSelect component with items that include a 'label' property in the items array.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<MultiSelect\n  useTitleInItem={false}\n  label=\"MultiSelect Label\"\n  invalid={false}\n  invalidText=\"Invalid Selection\"\n  onChange={onChange}\n  items={[\n    { id: 'item-1', text: 'Item 1', label: 'Item 1' },\n    { id: 'item-2', text: 'Item 2', label: 'Item 2' },\n  ]}\n  itemToString={itemToString}\n  initialSelectedItems={[\n    { id: 'item-1', text: 'Item 1' },\n    { id: 'item-2', text: 'Item 2' },\n  ]}\n  translateWithId={translateWithId}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Component with Contextual Layout Token Support\nDESCRIPTION: This snippet demonstrates how to create a component that supports contextual layout tokens in Carbon Design System. The component uses CSS custom properties with fallbacks to respect the layout context while maintaining default styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n.my-component {\n  height: var(\n    --#{$prefix}-layout-size-height,\n    var(--#{$prefix}-layout-size-height-md)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Classes to Accordion in React\nDESCRIPTION: Shows how to add custom CSS classes to the Accordion component for custom styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion className=\"custom-class\">\n  <AccordionItem title=\"Panel A\">Panel A</AccordionItem>\n  <AccordionItem title=\"Panel B\">Panel B</AccordionItem>\n  <AccordionItem title=\"Panel C\">Panel C</AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: MenuItemRadioGroup with Custom Items\nDESCRIPTION: Shows how to use MenuItemRadioGroup with complex items and custom item-to-string conversion.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/Menu.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst items = [\n  { weight: 100, label: 'Thin' },\n  { weight: 200, label: 'Extralight' },\n  { weight: 300, label: 'Light' },\n  { weight: 400, label: 'Regular' },\n  { weight: 500, label: 'Medium' },\n  { weight: 600, label: 'Semibold' },\n  { weight: 700, label: 'Bold' },\n];\n\n<MenuItemRadioGroup\n  label=\"Font weight\"\n  items={items}\n  selectedItem={items[3]}\n  itemToString={(item) => item.label}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Full-Width Tabs Inside Carbon Grid - React JSX\nDESCRIPTION: Demonstrates how to use the fullWidth prop on a contained TabList inside Carbon's Grid and Column components. The example shows three tabs, one of which is disabled, and corresponding TabPanels. Requires React and Carbon's Grid, Column, Tabs, TabList, Tab, TabPanels, and TabPanel components. Inputs are tab labels and content; the fullWidth prop causes the tabs to expand to fill their container for large/extra-large screens, with limitations on smaller screens and when the tab count exceeds eight.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid condensed>\\n  <Column lg={16} md={8} sm={4}>\\n    <Tabs>\\n      <TabList aria-label=\\\"List of tabs\\\" contained fullWidth>\\n        <Tab>Tab Label 1</Tab>\\n        <Tab>Tab Label 2</Tab>\\n        <Tab disabled>Tab Label 3</Tab>\\n      </TabList>\\n      <TabPanels>\\n        <TabPanel>Tab Panel 1</TabPanel>\\n        <TabPanel>Tab Panel 2</TabPanel>\\n        <TabPanel>Tab Panel 3</TabPanel>\\n      </TabPanels>\\n    </Tabs>\\n  </Column>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Expansion of Table Rows - JavaScript\nDESCRIPTION: Shows how to programmatically expand the first row of a Carbon data table using JavaScript. It selects the first <cds-table-row>, accesses its shadow DOM, retrieves the expand button using a class selector, and triggers a click event. Prerequisites: <cds-table> with expandable rows, shadow DOM support. This is useful for automated testing or for driving UI states from application logic rather than direct user input.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ndocument\n  .querySelectorAll('cds-table-row')[0]\n  .shadowRoot.querySelector('.cds--table-expand__button')\n  .click();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Persistent Search in ContainedList with React\nDESCRIPTION: This snippet shows how to implement a persistent search feature in a ContainedList. Unlike the expandable search, this approach renders the Search component as a child of ContainedList, keeping it visible below the title even when scrolling through many list items.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContainedList/ContainedList.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const WithPersistentSearch = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  useEffect(() => {\n    const listItems = [\n      'List item 1',\n      'List item 2',\n      'List item 3',\n      'List item 4',\n    ];\n\n    const results = listItems.filter((listItem) =>\n      listItem.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    setSearchResults(results);\n  }, [searchTerm]);\n\n  return (\n    <ContainedList label=\"List title\" kind=\"on-page\" action={''}>\n      <Search\n        placeholder=\"Filterable search\"\n        value={searchTerm}\n        onChange={handleChange}\n        closeButtonLabelText=\"Clear search input\"\n        size=\"lg\"\n      />\n      {searchResults.map((listItem, key) => (\n        <ContainedListItem key={key}>{listItem}</ContainedListItem>\n      ))}\n    </ContainedList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Web Components in JavaScript\nDESCRIPTION: Example of importing specific components from the @carbon/web-components package in a JavaScript file.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/dropdown/dropdown.js';\nimport '@carbon/web-components/es/components/dropdown/dropdown-item.js';\n```\n\n----------------------------------------\n\nTITLE: React Component Testing Example\nDESCRIPTION: Demonstrates comprehensive testing setup for React components using @testing-library/react, including API testing, accessibility checks, and event handling verification.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { render, screen, findByLabel } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ComponentName } from '../ComponentName';\n\ndescribe('ComponentName', () => {\n  describe('API', () => {\n    it('should provide a data-testid attribute on the outermost DOM node', () => {\n      const { container } = render(<ComponentName className=\"test\" />);\n      expect(screen.getByTestId('component-test-id')).toBeInTheDocument();\n      expect(container.firstChild).toHaveAttribute('class', 'test');\n    });\n\n    it('should place the `className` prop on the outermost DOM node', () => {\n      const { container } = render(<ComponentName className=\"test\" />);\n      expect(container.firstChild).toHaveAttribute('class', 'test');\n    });\n\n    it('should place extra props on the outermost DOM node', () => {\n      const { container } = render(<ComponentName data-testid=\"test\" />);\n      expect(container.firstChild).toHaveAttribute('data-testid', 'test');\n    });\n\n    describe('i18n', () => {\n      // ... ensure when each prop string is configured it is rendered to the DOM\n    });\n\n    it('should place the `id` prop on the same DOM node between minor versions', () => {\n      const { container } = render(<ComponentName data-testid=\"test\" />);\n      expect(container.firstChild).toHaveAttribute('id', 'test');\n    });\n\n    it('should call `onClick` when the trigger element is pressed', () => {\n      const onClick = jest.fn();\n\n      render(<TestComponent onClick={onClick} />);\n\n      const trigger = screen.getByText('trigger');\n      userEvent.click(trigger);\n      expect(onClick).toHaveBeenCalled();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for PaginationNav Component in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display a live demo of the PaginationNav component from the Carbon Design System. It includes a theme selector and specifies the default variant of the component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/PaginationNav/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-paginationnav--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-Select Implementation\nDESCRIPTION: Demonstrates basic HTML structure for implementing a Multi-Select component with predefined values.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/multi-select/multi-select.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-multi-select value=\"foo,baz\">\n  <cds-multi-select-item value=\"foo\">Foo</cds-multi-select-item>\n  <cds-multi-select-item value=\"bar\">Bar</cds-multi-select-item>\n  <cds-multi-select-item value=\"baz\">Baz</cds-multi-select-item>\n</cds-multi-select>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic CDN Information using Markdown Block in MDX/JSX\nDESCRIPTION: This MDX/JSX snippet uses the `Markdown` component imported from `@storybook/blocks`. It renders Markdown content generated by calling the imported `cdnJs` function with the component name 'form-group'. This dynamically inserts CDN usage instructions or code snippets into the documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['form-group'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Notifications\nDESCRIPTION: Sets up a StorybookDemo component that links to Carbon Web Components documentation and configures two notification variants - inline and toast. The component is configured with a tall display mode and points to the Carbon Design System documentation URL.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/notification/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Inline',\n      variant: 'components-notifications--inline'\n    },\n    {\n      label: 'Toast',\n      variant: 'components-notifications--toast'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Theme Token from Another Theme\nDESCRIPTION: Illustrates how to re-export a token from another theme when the current theme relies on a value from a different theme. The example re-exports hoverSelectedUI from the white theme.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport { hoverSelectedUI } from './white';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and ProgressBar Stories in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the ProgressBar stories. It also imports a utility function for Stackblitz code previews.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ProgressBar/ProgressBar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as ProgressBarStories from './ProgressBar.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Rendering OverflowMenu with Menu Items in JSX\nDESCRIPTION: This snippet demonstrates how to use the OverflowMenu component with various MenuItem subcomponents. It includes regular menu items, a divider, and a danger-type menu item.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OverflowMenu/OverflowMenu.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<OverflowMenu label=\"Primary action\">\n  <MenuItem label=\"Stop app\" />\n  <MenuItem label=\"Restart app\" />\n  <MenuItem label=\"Rename app\" />\n  <MenuItem label=\"Edit routes and access\" />\n  <MenuItemDivider />\n  <MenuItem label=\"Delete app\" kind=\"danger\" />\n</OverflowMenu>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for ComposedModal Variants in React\nDESCRIPTION: This code sets up a StorybookDemo component that displays different variants of the ComposedModal component from Carbon Design System. It includes theme selection and showcases Default, Full Width, Passive Modal, and State Manager variants.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  wide\n  tall\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-composedmodal--default'\n    },\n    {\n      label: 'Full Width',\n      variant: 'components-composedmodal--full-width'\n    },\n    {\n      label: 'Passive Modal',\n      variant: 'components-composedmodal--passive-modal'\n    },\n    {\n      label: 'With State Manager',\n      variant: 'components-composedmodal--with-state-manager'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for Carbon Tabs Component in JSX\nDESCRIPTION: This code renders a StorybookDemo component that displays a live demonstration of the Tabs component from Carbon Web Components. It's configured to show the default variant of the component and uses the 'tall' property to adjust the height of the embedded iframe.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tabs/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-tabs--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with ContainedList Variants\nDESCRIPTION: Configuration for a StorybookDemo component that displays multiple variants of the ContainedList component from Carbon Design System. The configuration includes theme selector support and various display options like default, disclosed, with actions, with icons, and interactive items.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContainedList/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  wide\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-containedlist--default',\n    },\n    {\n      label: 'Disclosed',\n      variant: 'components-containedlist--disclosed',\n    },\n    {\n      label: 'With Actions',\n      variant: 'components-containedlist--with-actions',\n    },\n    {\n      label: 'With Icons',\n      variant: 'components-containedlist--with-icons',\n    },\n    {\n      label: 'With Interactive Items',\n      variant: 'components-containedlist--with-interactive-items',\n    },\n    {\n      label: 'With Interactive Items and Actions',\n      variant: 'components-containedlist--with-interactive-items-and-actions',\n    },\n    {\n      label: 'With List Title Decorators',\n      variant: 'components-containedlist--with-list-title-decorators',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Size Variants\nDESCRIPTION: Demonstrates the three available size variants for the Dropdown component: small, medium, and large.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown\n  items={['Option 1', 'Option 2', 'Option 3']}\n  size=\"sm\"\n  label=\"Small [sm]\"\n  titleText=\"Dropdown label\"\n/>\n<Dropdown\n  items={['Option 1', 'Option 2', 'Option 3']}\n  label=\"Medium [md]\"\n  size=\"md\"\n  titleText=\"Dropdown label\"\n/>\n<Dropdown\n  items={['Option 1', 'Option 2', 'Option 3']}\n  size=\"lg\"\n  label=\"Large [lg]\"\n  titleText=\"Dropdown label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-textarea Component with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure of a cds-textarea component with disabled, readonly, and placeholder attributes. It includes a label, textarea, helper text, and a hidden warning text slot.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-textarea.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--text-area__label-wrapper\">\n  <label\n    class=\"cds--label cds--label--disabled\"\n    for=\"input\"\n  >\n    <slot name=\"label-text\">\n    </slot>\n  </label>\n</div>\n<div class=\"cds--text-area__wrapper cds--text-area__wrapper--readonly\">\n  <textarea\n    class=\"cds--text-area\"\n    disabled=\"\"\n    id=\"input\"\n    placeholder=\"placeholder-foo\"\n    readonly=\"\"\n    rows=\"4\"\n  >\n  </textarea>\n</div>\n<div class=\"cds--form__helper-text cds--form__helper-text--disabled\">\n  <slot name=\"helper-text\">\n    helper-text-foo\n  </slot>\n</div>\n<div\n  class=\"cds--form-requirement\"\n  hidden=\"\"\n>\n  <slot name=\"warn-text\">\n  </slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon React Icons\nDESCRIPTION: Example of importing and using an icon component from @carbon/react/icons\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/react/icons';\n\nfunction MyComponent() {\n  return <Add />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Danger Modal in Carbon Design System (JSX)\nDESCRIPTION: This snippet demonstrates how to create a modal with a danger button using the Modal component from Carbon Design System. It includes a header and content text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Modal danger>\n  <ModalHeader />\n  <p className=\"cds--modal-content__text\">The modal body content</p>\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Descriptors with Conversion Helpers\nDESCRIPTION: Example showing how to use icon descriptors from @carbon/icons with the toString and toSVG helpers. This demonstrates importing icons and customizing their attributes before rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-helpers/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IconName } from '@carbon/icons';\nimport { toString, toSVG } from '@carbon/icon-helpers';\n\nconst iconString = toString(IconName);\nconst iconSVG = toSVG({\n  ...IconName,\n  attrs: {\n    ...IconName.attrs,\n    myCustomAttribute: 'myCustomAttributeValue',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration with SCSS\nDESCRIPTION: Demonstrates how to configure and apply a complete theme using SCSS imports and the theme mixin for the g100 theme variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/styling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@use \"@carbon/styles/scss/reset\";\n@use \"@carbon/styles/scss/theme\";\n@use \"@carbon/styles/scss/themes\";\n\nfooter {\n   @include theme.theme(themes.$g100);\n } // Emits all theme tokens in CSS Custom Properties\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time Ranges in JavaScript\nDESCRIPTION: Demonstrates how to format date and time ranges with various style options and localization. Supports 'full', 'long', 'medium', and 'short' styles for both date and time components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.absolute.formatRange(startDate, endDate);\n// Apr 4, 2024, 3:47 PM – Apr 25, 2024, 4:29 PM\n\ndateTimeFormat.absolute.formatRange(startDate, endDate, { locale: 'de-DE' });\n// 04.04.2024, 15:47 – 25.04.2024, 16:29\n\ndateTimeFormat.absolute.formatRange(startDate, endDate, {\n  timeStyle: 'medium',\n  dateStyle: 'short',\n});\n// 4/4/24, 3:47:12 PM – 4/25/24, 4:29:38 PM\n\ndateTimeFormat.absolute.formatRange(startDate, endDate, { style: 'short' });\n// 4/4/24, 3:47 PM – 4/25/24, 4:29 PM\n```\n\n----------------------------------------\n\nTITLE: Custom Table Sorting Method - JavaScript\nDESCRIPTION: Implements a custom sorting function for a Carbon data table that supports both numeric and string comparisons using Intl.Collator. The function takes two cell values (lhs and rhs) and a collator, returning -1, 0, or 1 following JavaScript\\'s sort conventions. Attach the function to a <cds-table> element\\'s customSortRow property. Dependencies: Carbon table web components and a suitable collator. Handles both locale-aware and numeric sorting.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ncustomSortRow(lhs, rhs, collator) {\n  if (typeof lhs === 'number' && typeof rhs === 'number') {\n    return lhs - rhs;\n  }\n  return collator.compare(lhs, rhs);\n}\n\ndocument.querySelector('cds-table').customSortRow = customSortRow;\n```\n\n----------------------------------------\n\nTITLE: Expandable Tile Implementation\nDESCRIPTION: Shows how to create an expandable tile with content that can be shown or hidden. The tile includes above-the-fold content that's always visible and below-the-fold content that appears when expanded.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<cds-expandable-tile>\n  <cds-tile-above-the-fold-content\n    slot=\"above-the-fold-content\"\n    style=\"height: 200px\">\n    Above the fold content here\n  </cds-tile-above-the-fold-content>\n  <cds-tile-below-the-fold-content style=\"height: 300px\">\n    Below the fold content here\n  </cds-tile-below-the-fold-content>\n</cds-expandable-tile>\n```\n\n----------------------------------------\n\nTITLE: Creating ComposedModal with Danger Footer in React\nDESCRIPTION: This example shows how to create a ComposedModal component with a danger footer using the Carbon Design System in React. It sets primary and secondary button text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  ...\n  <ModalFooter danger primaryButtonText=\"OK\" secondaryButtonText=\"Cancel\" />\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Carbon Design System Tag Component\nDESCRIPTION: This code snippet sets up a StorybookDemo component that displays the Tag component from the Carbon Design System. It configures the demo to show the read-only variant of the Tag component and includes theme selection capability.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tag/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Read Only',\n      variant: 'components-tag--read-only',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Carbon Web Components via CDN in HTML - HTML/CSS\nDESCRIPTION: Demonstrates direct usage of Carbon Design System web components using a CDN for module import within an HTML file. The <script type='module'> tag loads the dropdown component, and accompanying CSS hides elements until definition to prevent FOUC (Flash of Unstyled Content). Prerequisites: modern browser with native ES module support. Inputs: N/A. Outputs: Self-contained HTML page with a dropdown component ready for user interaction. Limitations: CDN network dependency, style encapsulation as per Shadow DOM.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/welcome.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"module\" src=\"https://1.www.s81c.com/common/carbon/web-components/tag/v2/latest/dropdown.min.js\"></script>\n    <style type=\"text/css\">\n      #app {\n        font-family: 'IBM Plex Sans', 'Helvetica Neue', Arial, sans-serif;\n        width: 300px;\n        margin: 2rem;\n      }\n\n      cds-dropdown:not(:defined),\n      cds-dropdown-item:not(:defined) {\n        visibility: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\">\n      <cds-dropdown trigger-content=\"Select an item\">\n        <cds-dropdown-item value=\"all\">Option 1</cds-dropdown-item>\n        <cds-dropdown-item value=\"cloudFoundry\">Option 2</cds-dropdown-item>\n        <cds-dropdown-item value=\"staging\">Option 3</cds-dropdown-item>\n        <cds-dropdown-item value=\"dea\">Option 4</cds-dropdown-item>\n        <cds-dropdown-item value=\"router\">Option 5</cds-dropdown-item>\n      </cds-dropdown>\n    </div>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Carbon Themes in Sass (SCSS)\nDESCRIPTION: This snippet demonstrates how to import the core Carbon theme modules and configure a theme using the Sass '@use' directive. It highlights that importing both '@carbon/themes/scss/modules/themes' and '@carbon/themes' with theme configuration will cause Sass initialization errors due to the module system's handling of multiple initializations. Key parameters include the source module and the selected theme, with the expected output being theme variables available in the consuming file. Using this pattern requires Sass Modules and Carbon dependencies, and it is important not to re-import the theme module to avoid compilation issues.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/docs/sass.md#2025-04-22_snippet_4\n\nLANGUAGE: SCSS\nCODE:\n```\n@use '@carbon/themes/scss/modules/themes';\n@use '@carbon/themes' with (\n  $theme: themes.$g100\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with Inline Loading Variants\nDESCRIPTION: Sets up a StorybookDemo component that displays Carbon's inline loading component variations. Configures theme selection and defines two variants - a default state and a UX example - linking to the Carbon Design System's React Storybook.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/InlineLoading/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-inlineloading--default'\n    },\n    {\n      label: 'Ux Example',\n      variant: 'components-inlineloading--ux-example'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Toast Notification Implementation\nDESCRIPTION: HTML implementation of a toast notification component with title and subtitle.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/notification/notification.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-toast-notification\n  style=\"min-width: 30rem; margin-bottom: 0.5rem;\"\n  title=\"Notification title\"\n  subtitle=\"Subtitle text goes here.\">\n</cds-toast-notification>\n```\n\n----------------------------------------\n\nTITLE: Generating CDN Usage Instructions in MDX\nDESCRIPTION: This MDX snippet dynamically generates and displays CDN usage instructions for the `file-uploader` web component. It calls the imported `cdnJs` helper function with the component name ('file-uploader') and renders the resulting Markdown string within a Storybook `Markdown` block.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/file-uploader/file-uploader.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['file-uploader'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Popover with Form Elements in HTML\nDESCRIPTION: This HTML template constructs a complex popover UI with integrated form elements like radio buttons and checkboxes. It features responsive layout composition and interactive content management through Carbon's components, assuming the components are previously registered in the environment.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/popover.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-popover open tabTip>\n  <button aria-label=\"Settings\" type=\"button\">${Settings16()}</button>\n  <cds-popover-content>\n    <div class=\"p-3\">\n      <cds-form-item>\n        <cds-radio-button-group\n          legend-text=\"Row height\"\n          name=\"radio-button-group\"\n          value=\"small\"\n          style=\"align-items: flex-start; flex-direction: column\">\n          <cds-radio-button\n            label-text=\"Small\"\n            value=\"small\"\n            id=\"radio-small\"></cds-radio-button>\n          <cds-radio-button\n            label-text=\"Large\"\n            value=\"large\"\n            id=\"radio-large\"></cds-radio-button>\n        </cds-radio-button-group>\n      </cds-form-item>\n      <hr />\n      <fieldset class=\"${prefix}--fieldset\">\n        <legend class=\"${prefix}--label\">Edit columns</legend>\n        <cds-checkbox\n          checked\n          label-text=\"Name\"\n          id=\"checkbox-label-1\"></cds-checkbox>\n        <cds-checkbox\n          checked\n          label-text=\"Type\"\n          id=\"checkbox-label-2\"></cds-checkbox>\n        <cds-checkbox\n          checked\n          label-text=\"Location\"\n          id=\"checkbox-label-3\"></cds-checkbox>\n      </fieldset>\n    </div>\n  </cds-popover-content>\n</cds-popover>\n```\n\n----------------------------------------\n\nTITLE: Using itemToElement with ComboBox in React\nDESCRIPTION: Example showing how to customize the display of dropdown items using the itemToElement prop, which allows wrapping each item in a custom element with styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox\n  onChange={() => {}}\n  items={[\n    { id: 'option-0', text: 'Option 0' },\n    { id: 'option-1', text: 'Option 1' },\n    { id: 'option-2', text: 'Option 2' },\n  ]}\n  itemToElement={(item) =>\n    item ? (\n      <span className=\"test\" style={{ color: 'red' }}>\n        {item.text} 🔥\n      </span>\n    ) : (\n      ''\n    )\n  }\n  label=\"Select an option...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Heading Level Implementation - React JSX\nDESCRIPTION: Shows how to override the default heading level behavior using the level prop, demonstrating nested sections with custom heading levels.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Heading/Heading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Section level={5}>\n  <Heading>rendered as h5</Heading>\n  <Section>\n    <Heading>rendered as h6</Heading>\n  </Section>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Carbon Progress Bar in HTML\nDESCRIPTION: This HTML snippet shows a basic implementation of the Carbon Progress Bar web component (`<cds-progress-bar>`). It includes attributes for `label`, `helper-text`, and a specific `value` (75) to indicate progress.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-bar/progress-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-progress-bar\n  label=\"Progress bar label\"\n  helper-text=\"Optional helper text\"\n  value=\"75\">\n</cds-progress-bar>\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Theme with React\nDESCRIPTION: This snippet shows how to use the Theme component to set an inline theme for a specific part of the UI in a React application.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/Theme.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Theme } from '@carbon/react';\n\nfunction ExamplePage() {\n  return (\n    <GlobalTheme theme=\"white\">\n      <h1>Page title</h1>\n      <p>Display in the white theme</p>\n      <Theme theme=\"g100\">\n        <p>Display in the g100 theme</p>\n      </Theme>\n    <GlobalTheme>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Tooltip Component and Information Icon - JavaScript\nDESCRIPTION: Illustrates importing the Tooltip web component and the Information16 icon necessary to construct a tooltip UI with icon triggers. These imports require '@carbon/web-components' and '@carbon/icons' dependencies. They enable subsequent inline or programmatic registration and use of tooltips and SVG icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@carbon/web-components/es/components/tooltip/index.js';\nimport Information16 from '@carbon/icons/lib/information/16.js';\n```\n\n----------------------------------------\n\nTITLE: Basic AI Label Implementation\nDESCRIPTION: Basic usage example showing how to implement the AI Label component with content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-label/ai-label.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-label>Content Here</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Multi-Select with lit-html\nDESCRIPTION: Example of dynamically rendering Multi-Select items using lit-html templating library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/multi-select/multi-select.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`\n  <cds-multi-select>\n    ${items.map(\n      (item) =>\n        html`\n          <cds-multi-select-item value=\"${item.value}\">${item.title}</cds-multi-select-item>\n        `\n    )}\n  </cds-multi-select>\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using IconIndicator Component in React\nDESCRIPTION: Demonstrates how to import and implement the IconIndicator component from the Carbon Design System. The component is used to display severity level information with customizable kinds and labels.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/IconIndicator/IconIndicator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable__IconIndicator as IconIndicator } from '@carbon/react';\n\nfunction ExampleComponent() {\n  return (\n    <IconIndicator kind=\"failed\" label=\"Failed\">\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Carbon Theme Token Values with theme.get in SCSS\nDESCRIPTION: This example shows how to import the theme module, potentially configure it with custom tokens using `with ($theme: ...)`, and then use the `theme.get()` function to retrieve the actual value of a token (like 'custom-token') for use within other CSS functions, such as `rgba`. This is necessary when the raw token value, not the CSS Custom Property reference, is needed.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/theme';\n@use '@carbon/styles/scss/theme' with (\n  $theme: (\n    custom-token: #bada44,\n  )\n);\n\n.my-selector {\n  background: rgba(theme.get('custom-token'), 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Columns at Breakpoints in Carbon Grid\nDESCRIPTION: Demonstrates how to hide columns at specific breakpoints by setting the span value to 0 using two different syntax options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Column sm={0} />\n<Column sm={{ span: 0 }} />\n```\n\n----------------------------------------\n\nTITLE: Defining DataTable Rows\nDESCRIPTION: Example of how to structure the rows data for the DataTable component. Each row requires a unique id and can contain custom data fields.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rows = [\n  {\n    id: 'a',\n    name: 'Load balancer 1',\n    status: 'Disabled',\n  },\n  {\n    id: 'b',\n    name: 'Load balancer 2',\n    status: 'Starting',\n  },\n  {\n    id: 'c',\n    name: 'Load balancer 3',\n    status: 'Active',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Adding an Overflow Menu to a Table Row - HTML\nDESCRIPTION: Illustrates embedding a <cds-overflow-menu> inside a table cell for action overflow in the Carbon table component. Allows for multiple options, such as \\\"Stop app\\\" or \\\"Rename\\\". Includes SVG icon and options defined in <cds-overflow-menu-body> with items. Prerequisites are that the Carbon Design System components are loaded, and table structures support custom cell content. User input via menu actions can trigger custom logic assigned to overflow menu items.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<cds-table-row>\n  <cds-table-cell>Load Balancer 4</cds-table-cell>\n  <cds-table-cell>HTTP</cds-table-cell>\n  <cds-table-cell>443</cds-table-cell>\n  <cds-table-cell>Round robin</cds-table-cell>\n  <cds-table-cell>Mel's VM Groups</cds-table-cell>\n  <cds-table-cell><cds-link>Starting</cds-link></cds-table-cell>\n  <cds-table-cell>\n    <cds-overflow-menu toolbar-action>\n      <svg\n        focusable=\"false\"\n        preserveAspectRatio=\"xMidYMid meet\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 32 32\"\n        slot=\"icon\">\n        <circle cx=\"16\" cy=\"8\" r=\"2\"></circle>\n        <circle cx=\"16\" cy=\"16\" r=\"2\"></circle>\n        <circle cx=\"16\" cy=\"24\" r=\"2\"></circle>\n      </svg>\n      <span slot=\"tooltip-content\"> Options </span>\n      <cds-overflow-menu-body>\n        <cds-overflow-menu-item> Stop app </cds-overflow-menu-item>\n        <cds-overflow-menu-item> Restart app </cds-overflow-menu-item>\n        <cds-overflow-menu-item> Rename </cds-overflow-menu-item>\n      </cds-overflow-menu-body>\n    </cds-overflow-menu>\n  </cds-table-cell>\n</cds-table-row>\n```\n\n----------------------------------------\n\nTITLE: Slider with Input Box HTML Implementation\nDESCRIPTION: This snippet shows how to include an input box within the Slider component by nesting a cds-slider-input element inside the cds-slider element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/slider/slider.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-slider label-text=\"Slider\" max=\"100\" min=\"0\" step=\"1\" value=\"50\">\n  <cds-slider-input aria-label=\"Slider value\" type=\"number\"></cds-slider-input>\n</cds-slider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Date Format - HTML\nDESCRIPTION: This HTML snippet shows how to set the date picker format using the date-format attribute on the cds-date-picker component. It demonstrates embedding a cds-date-picker-input child and configuring a placeholder for user input. Requires Carbon Web Components loaded in your page and the Flatpickr library for custom date formatting. Inputs expect string values for date-format and placeholders, and output is a rendered date picker input field with custom format.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/date-picker/date-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-date-picker date-format=\\\"Y-m-d\\\">\\n  <cds-date-picker-input\\n    kind=\\\"single\\\"\\n    placeholder=\\\"yyyy/mm/dd\\\"></cds-date-picker-input>\\n</cds-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Design System Component Styles\nDESCRIPTION: Examples of how to import individual component styles from the Carbon Design System using the @use rule in SCSS. These imports allow developers to include specific component styles without importing the entire library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/accordion';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/aspect-ratio';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/breadcrumb';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/button';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/data-table/action';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/data-table/expandable';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/data-table/skeleton';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/data-table/sort';\n```\n\n----------------------------------------\n\nTITLE: Implementing Host Listener in Carbon Components\nDESCRIPTION: Shows how to use the @HostListener decorator with HostListenerMixin to manage event listeners in custom elements, ensuring proper lifecycle management and memory leak prevention.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/coding-conventions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n...\nimport HostListener from '../../globals/decorators/HostListener';\nimport HostListenerMixin from '../../globals/mixins/HostListener';\n...\n\n@customElement(`${prefix}-modal` as any)\nclass CDSModal extends HostListenerMixin(LitElement) {\n  ...\n\n  @HostListener('click')\n  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to\n  private _handleClick = (event: MouseEvent) => {\n    ...\n  };\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AILabel in DataTable Rows\nDESCRIPTION: Demonstrates how to add an AILabel to DataTable rows using TableSlugRow component within the table body structure.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabelDatatable.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<TableBody>\n  {rows.map((row, i) => (\n    <TableRow key={i} {...getRowProps({ row })}>\n      <TableSlugRow slug={AILabel} />\n      <TableSelectRow {...getSelectionProps({ row })} />\n      {row.cells.map((cell) => (\n        <TableCell key={cell.id}>{cell.value}</TableCell>\n      ))}\n    </TableRow>\n  ))}\n</TableBody>\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract Modal State Manager Component\nDESCRIPTION: Implementation of a reusable modal state manager component that handles the open/close state and renders both the launcher and modal content through render props.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ModalStateManager = ({\n  renderLauncher: LauncherContent,\n  children: ModalContent,\n}) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      {!ModalContent || typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ModalContent open={open} setOpen={setOpen} />,\n            document.body\n          )}\n      {LauncherContent && <LauncherContent open={open} setOpen={setOpen} />}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Slider HTML Implementation\nDESCRIPTION: This code demonstrates the basic HTML structure for implementing a Slider component with label text, maximum and minimum values, step size, and initial value.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/slider/slider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-slider\n  label-text=\"Slider\"\n  max=\"100\"\n  min=\"0\"\n  step=\"1\"\n  value=\"50\"></cds-slider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Form Label Component in React\nDESCRIPTION: This code snippet sets up a live Storybook demo for the Form Label component from the Carbon Design System. It configures the demo with theme selection and specifies the default variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormLabel/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-formlabel--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Carbon Grid System\nDESCRIPTION: Shows two approaches for importing the grid system: either through the central entrypoint or directly via the grid-specific module.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// All the grid styles are included through this central entrypoint\n@use '@carbon/styles';\n\n// Alternatively, the grid styles can be brought in on their own\n@use '@carbon/styles/scss/grid';\n```\n\n----------------------------------------\n\nTITLE: Stack Component with Custom Gap Value\nDESCRIPTION: Shows how to use the Stack component with a custom gap value of 2rem, using the custom-gap-value attribute.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/stack/stack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-stack gap=\"2rem\" orientation=\"vertical\" custom-gap-value>\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n</cds-stack>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with Theme Selector in React\nDESCRIPTION: This code snippet demonstrates how to use the StorybookDemo component to create a live demo with a theme selector. It points to the Carbon Design System React Storybook and configures a default variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/docs/use-theme-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-theme--use-theme'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Components and Stories\nDESCRIPTION: Imports necessary components and stories for the Toggle documentation page, including the Toggle component itself, its stories, and Storybook utilities for documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Toggle/Toggle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as ToggleStories from './Toggle.stories';\nimport Toggle from '../Toggle';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for FormGroup Component in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display a live demo of the FormGroup component from the Carbon Design System. It configures theme selection, sets the demo to be tall, specifies the Storybook URL, and defines the default variant to be shown.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormGroup/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-formgroup--default',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Event Listener for Dismissible Tag Closure in JavaScript\nDESCRIPTION: This snippet demonstrates how to add an event listener to capture the closing of a dismissible tag using JavaScript.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tag/tag.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-dismissible-tag-closed', (event) => {\n  // use values here\n});\n```\n\n----------------------------------------\n\nTITLE: Radio Group Menu Implementation\nDESCRIPTION: Example of implementing radio button groups in a menu context\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<cds-menu>\n  <cds-menu-item-radio-group label=\"Font family\" @cds-item-changed=\"${handleItemChange}\">\n    <cds-menu-item selected=\"true\" label=\"Sans\"></cds-menu-item>\n    <cds-menu-item  label=\"Serif\"></cds-menu-item>\n    <cds-menu-item label=\"Mono\"></cds-menu-item>\n  </cds-menu-item-radio-group>\n  <cds-menu-item-divider></cds-menu-item-divider>\n   <cds-menu-item-radio-group label=\"samples\" >\n      <cds-menu-item label=\"None\"></cds-menu-item>\n      <cds-menu-item selected=\"true\" label=\"Overline\"></cds-menu-item>\n      <cds-menu-item label=\"Line-through\"></cds-menu-item>\n      <cds-menu-item label=\"Underline\"></cds-menu-item>\n    </cds-menu-item-radio-group>\n</cds-menu>\n```\n\n----------------------------------------\n\nTITLE: Using Modal Title as Message in React\nDESCRIPTION: This example demonstrates how to use the modal title as the main message in a Modal component using the Carbon Design System in React. It sets the modalHeading prop without children.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst modalHeading =\n  'Are you sure you want to add the \"Speech to Text\" service ' +\n  'to the node-test app?';\n...\n<Modal\n  modalHeading={modalHeading}\n  secondaryButtonText=\"Cancel\"\n  primaryButtonText=\"Add\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue App with Global Icon Registration\nDESCRIPTION: Example showing how to globally register Carbon icons when initializing a Vue application. This approach makes the icons available throughout the app without needing to import them in each component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { CarbonIconsVue } from '@carbon/icons-vue';\nimport Bee32 from '@carbon/icons-vue/es/bee/32';\nimport Vue from 'vue';\nimport App from './App.vue';\n\nVue.use(CarbonIconsVue, {\n  components: {\n    Bee32,\n  },\n});\n\nnew Vue({\n  render: (h) => h(App),\n}).$mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Using ComposedModal Title as Message in Carbon Design System (JSX)\nDESCRIPTION: This snippet shows how to use the modal title as the main message in a ComposedModal component. It uses the ModalHeader component to display the message and omits the ModalBody component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  <ModalHeader label=\"Modal label\">\n    <h1>\n      Are you sure you want to add the \"Speech to Text\" service to the node-test\n      app?\n    </h1>\n  </ModalHeader>\n  <ModalFooter primaryButtonText=\"OK\" secondaryButtonText=\"Cancel\" />\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Rendering Modal with Danger Button in React\nDESCRIPTION: This snippet demonstrates how to create a Modal component with a danger button using the Carbon Design System in React. It includes a modal header and content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Modal danger>\n  <ModalHeader />\n  <p className=\"cds--modal-content__text\">The modal body content</p>\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Inline Code Snippet Example in JSX/Storybook\nDESCRIPTION: Injects a live, interactive canvas block displaying the Inline code snippet story using Storybook's Canvas block. Relies on the previously imported CodeSnippetStories and the presence of an 'Inline' export within it. No external parameters; expects Storybook to provide rendering context.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Canvas of={CodeSnippetStories.Inline} />\n```\n\n----------------------------------------\n\nTITLE: Using Chat Button Component with Icon in JavaScript\nDESCRIPTION: Illustrates how to use the chat button component alongside an icon in a JavaScript application. The example shows defining a component within an App function, utilizing the Primary button with a slot for an icon. Dependencies include the Carbon icons package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/chat-button/chat-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/chat-button/index.js';\nimport Add16 from '@carbon/icons/lib/add/16.js';\n\nfunction App() {\n  return html`<cds-chat-button>\n    Primary ${Add16({ slot: 'icon' })}\n  </cds-chat-button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline AI Label with Size\nDESCRIPTION: Example showing the inline AI Label implementation with size and text label specifications.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-label/ai-label.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-label kind=\"inline\" ai-text-label=\"Text goes here\" size=\"xs\">\n  <div slot=\"body-text\">Explanation of AI-generated content</div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Icon in Carbon v10\nDESCRIPTION: Example showing how to use the Tooltip component with an icon in Carbon v10. Uses the renderIcon prop with an imported icon component from @carbon/icons-react library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Information16 from '@carbon/icons-react/lib/information/16';\n\n...\n\n<Tooltip renderIcon={Information16}>\n  My tooltip content...\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Usage in HTML\nDESCRIPTION: Demonstrates how to use the Tooltip component as a wrapper for an interactive element, with a button as the trigger and custom tooltip content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tooltip/tooltip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-tooltip>\n  <button type=\"button\" aria-labelledby=\"content\">X</button>\n  <cds-tooltip-content id=\"content\">\n    Occasionally, services are updated in a specified time window to ensure no\n    down time for customers.\n  </cds-tooltip-content>\n</cds-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Accordion Item Title Configuration\nDESCRIPTION: Shows how to use the title attribute to specify accordion item headings. This example demonstrates the basic structure of an accordion with multiple titled panels.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/accordion/accordion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-accordion>\n  <cds-accordion-item title=\"Panel A\">Panel A</cds-accordion-item>\n  <cds-accordion-item title=\"Panel B\">Panel B</cds-accordion-item>\n  <cds-accordion-item title=\"Panel C\">Panel C</cds-accordion-item>\n</cds-accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Range DatePicker\nDESCRIPTION: Example of implementing a range DatePicker with start and end date inputs.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<DatePicker datePickerType=\"range\">\n  <DatePickerInput placeholder=\"Start\" />\n  <DatePickerInput placeholder=\"End\" />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Theme DatePicker\nDESCRIPTION: Shows how to enable the light theme variant of the DatePicker.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<DatePicker light>...</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Event Handling Hook Implementation in React\nDESCRIPTION: Demonstrates how to implement a custom hook that handles events while properly managing callback references to prevent unnecessary effect triggers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction useEvent(element, eventName, callback) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function listener(event) {\n      savedCallback.current(event);\n    }\n    element.addEventListener(eventName, listener);\n    return () => {\n      element.removeEventListener(eventName, listener);\n    };\n  }, [element, eventName]);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Focus Wrap Without Sentinels in ComposedModal\nDESCRIPTION: Code example showing how to enable the experimental focus wrap behavior that removes sentinel nodes from the DOM. This implementation relies on interactive child nodes for focus management instead of sentinel markers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags enableExperimentalFocusWrapWithoutSentinels>\n  <ComposedModal ... />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Using @carbon/type Package with Sass\nDESCRIPTION: Demonstrates how to import and use the @carbon/type package in a Sass file. Shows how to include type reset, default type styles, utility classes, and how to apply specific type styles to elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type';\n\n// Include type reset\n@include type.reset();\n\n// Include default type styles, targets h1, h2, h3, etc\n@include type.default-type();\n\n// Include utility classes for type-related properties\n@include type.type-classes();\n\n.selector {\n  // Include a type style\n  @include type.type-style('productive-heading-01');\n}\n```\n\n----------------------------------------\n\nTITLE: Actionable Notification Implementation\nDESCRIPTION: HTML implementation of an actionable notification with an error kind and action button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/notification/notification.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-actionable-notification\n  kind=\"error\"\n  title=\"Notification title\"\n  subtitle=\"Subtitle text goes here\">\n  <cds-actionable-notification-button slot=\"action\"\n    >Action</cds-actionable-notification-button\n  >\n</cds-actionable-notification>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default TreeView Example in Storybook Canvas\nDESCRIPTION: This snippet demonstrates how to render the default TreeView example in a Storybook Canvas component. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/TreeView.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={TreeViewStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () =>\n        stackblitzPrefillConfig(\n          TreeViewStories.Default,\n          \"import { Document, Folder } from '@carbon/icons-react';\"\n        ),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Internal Component Configuration\nDESCRIPTION: Configuration for internal JavaScript components that should not be converted to TypeScript, using JSDoc annotations and TypeScript checking.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/adding-component-types.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @type any */\nconst InternalComponent = () => {\n  // Component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MultiSelect Component in JavaScript\nDESCRIPTION: Example of how to import the MultiSelect component in a JavaScript file.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MultiSelect } from 'carbon-components-react';\n```\n\n----------------------------------------\n\nTITLE: Initializing Carbon Styles with Sass\nDESCRIPTION: Basic usage example showing how to import all Carbon Design System styles using the Sass module system.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Number Input Variants\nDESCRIPTION: Configuration for a Storybook demo component that displays different variants of the Number Input component. Sets up three different display variants with their respective labels and includes the base URL for the Carbon Web Components documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/number-input/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-number-input--default'\n    },\n    {\n      label: 'Form Item',\n      variant: 'components-number-input--form-item'\n    },\n    {\n      label: 'Without Form Item Wrapper',\n      variant: 'components-number-input--without-form-item-wrapper'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Direction Dropdown in React\nDESCRIPTION: Example showing how to configure a Dropdown component to open upwards using the direction prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown direction=\"top\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Select with Empty Default Option in React\nDESCRIPTION: This snippet demonstrates how to create a Select component with an empty default option. It includes a label, helper text, and multiple SelectItem components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Select/Select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Select\n  id={`select-1`}\n  labelText=\"Select an option\"\n  helperText=\"Optional helper text\">\n  <SelectItem value=\"\" text=\"\" />\n  <SelectItem value=\"option-1\" text=\"Option 1\" />\n  <SelectItem value=\"option-2\" text=\"Option 2\" />\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Components with Tooltip Positioning in HTML\nDESCRIPTION: This code demonstrates how to implement icon-only buttons with tooltips positioned at different locations (top, right, bottom, left) using the tooltip-position attribute in Carbon Design System. Each button includes an SVG icon and displays a tooltip with the text 'Add'.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/button/button.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-button tooltip-text=\"Add\" kind=\"primary\" tooltip-position=\"top\">\n  <svg\n    focusable=\"false\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 32 32\"\n    slot=\"icon\">\n    <path\n      d=\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\"></path>\n  </svg>\n</cds-button>\n<cds-button tooltip-text=\"Add\" kind=\"primary\" tooltip-position=\"right\">\n  <svg\n    focusable=\"false\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 32 32\"\n    slot=\"icon\">\n    <path\n      d=\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\"></path>\n  </svg>\n</cds-button>\n<cds-button tooltip-text=\"Add\" kind=\"primary\" tooltip-position=\"bottom\">\n  <svg\n    focusable=\"false\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 32 32\"\n    slot=\"icon\">\n    <path\n      d=\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\"></path>\n  </svg>\n</cds-button>\n<cds-button tooltip-text=\"Add\" kind=\"primary\" tooltip-position=\"left\">\n  <svg\n    focusable=\"false\"\n    preserveAspectRatio=\"xMidYMid meet\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 32 32\"\n    slot=\"icon\">\n    <path\n      d=\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\"></path>\n  </svg>\n</cds-button>\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Floating Styles for MenuButton in React\nDESCRIPTION: This code snippet demonstrates how to enable the 'enable-v12-dynamic-floating-styles' feature flag for a MenuButton component. It wraps the MenuButton in a FeatureFlags component to activate the dynamic floating styles without collision detection.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MenuButton/MenuButton.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <MenuButton menuAlignment={args.menuAlignment} label=\"Actions\">\n    <MenuItem label=\"First action\" />\n    <MenuItem label=\"Second action that is a longer item to test overflow and title.\" />\n    <MenuItem label=\"Third action\" disabled />\n  </MenuButton>\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Styles in SCSS\nDESCRIPTION: Examples of importing Carbon styles in v11 using @use, including configuration options for customizing settings like prefix.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles' with (\n  $prefix: 'cds'\n);\n```\n\n----------------------------------------\n\nTITLE: Using cds-dropdown and cds-dropdown-item Web Components - HTML\nDESCRIPTION: This HTML snippet shows the structure for a dropdown menu using @carbon/web-components custom elements. Once JavaScript imports have registered these components, you can use <cds-dropdown> and <cds-dropdown-item> tags as direct children and set attributes such as trigger-content and value. Inputs: User selections. Outputs: Native-like dropdown menu, stylized according to Carbon Design System guidelines. Requires the relevant JavaScript modules to be loaded beforehand via import or <script type='module'>.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/welcome.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown trigger-content=\"Select an item\">\n  <cds-dropdown-item value=\"all\">Option 1</cds-dropdown-item>\n  <cds-dropdown-item value=\"cloudFoundry\">Option 2</cds-dropdown-item>\n  <cds-dropdown-item value=\"staging\">Option 3</cds-dropdown-item>\n  <cds-dropdown-item value=\"dea\">Option 4</cds-dropdown-item>\n  <cds-dropdown-item value=\"router\">Option 5</cds-dropdown-item>\n</cds-dropdown>\n\n```\n\n----------------------------------------\n\nTITLE: AI Label with Custom Text\nDESCRIPTION: Example showing how to customize the AI Label text for different languages using the ai-text attribute.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-label/ai-label.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-label ai-text=\"IA\">\n  <div slot=\"body-text\">Explanation of AI-generated content</div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Variables in Carbon Styles\nDESCRIPTION: Example showing how to import and use theme variables from the themes module in Carbon Styles. This demonstrates accessing variables for different theme variants.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/themes';\n\n// themes.$white\n// themes.$g10\n// themes.$g90\n// themes.$g100\n```\n\n----------------------------------------\n\nTITLE: Applying Carbon Type Styles using Mixins in SCSS\nDESCRIPTION: This snippet illustrates importing the `@carbon/styles/scss/type` module and applying a predefined typographic style (e.g., 'productive-heading-01') to a selector using the `@include type.type-style()` mixin. This encapsulates the necessary font size, weight, line height, etc., for the specified type style.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/type';\n\n.my-selector {\n  @include type.type-style('productive-heading-01');\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with CSSOM in React Components\nDESCRIPTION: Shows how to implement dynamic styles using CSS Object Model (CSSOM) instead of inline styles to comply with Content Security Policy (CSP) restrictions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ width }) {\n  const ref = useRef();\n\n  useIsomorphicEffect(() => {\n    if (width) {\n      ref.current.style.width = `${width}px`;\n    } else {\n      ref.current.style.width = null;\n    }\n  }, [width]);\n\n  return <div ref={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Import in React\nDESCRIPTION: Example of importing a single icon component from the package\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/icons-react';\n```\n\n----------------------------------------\n\nTITLE: Menu Items with Icons\nDESCRIPTION: Implementation of menu items with icon rendering using slots\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-menu>\n  <cds-menu-item label=\"Cut\" shortcut=\"⌘X\">\n    ${Cut16({ slot: 'render-icon' })}\n    </cds-menu-item>\n  <cds-menu-item label=\"Copy\" shortcut=\"⌘C\"></cds-menu-item>\n  <cds-menu-item label=\"Paste\" shortcut=\"⌘V\" disabled></cds-menu-item>\n</cds-menu>\n```\n\n----------------------------------------\n\nTITLE: Column Offset Example\nDESCRIPTION: Demonstration of using column offset with breakpoint-specific configurations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Column sm={2} md={{ span: 4, offset: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Floating Styles with Feature Flag in React\nDESCRIPTION: This code snippet demonstrates how to enable dynamic floating styles for a Popover component using the 'enable-v12-dynamic-floating-styles' feature flag. It wraps the Popover component with FeatureFlags and includes a toggle button to control the Popover's open state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Popover/Popover.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <Popover open={open}>\n    <button\n      type=\"button\"\n      onClick={() => {\n        setOpen(!open);\n      }}>\n      Toggle\n    </button>\n    <PopoverContent>\n      The content that is revealed by interacting with the Toggle button\n    </PopoverContent>\n  </Popover>\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixin Pattern in TypeScript\nDESCRIPTION: Demonstrates how to create a mixin class using ECMAScript's Subclass Factory Pattern instead of prototype manipulation. This approach helps avoid kitchen-sink base classes and improves maintainability.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/coding-conventions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Mixin = <T extends Constructor<SomeClass>>(Base: T) => class extends Base {\n  ...\n\n  someProperty = someValue;\n  someMethod() { ... }\n\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using SASS Layout Utility Mixins\nDESCRIPTION: Demonstrates usage of the layout.use mixin for component size constraints with various configuration options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/utilities/layout';\n\n.my-component {\n  // minimal required setup, provide the requested property and a default\n  @include layout.use('size', $default: 'md');\n\n  // optionally provide a minimum size for the component\n  @include layout.use('size', $default: 'md', $min: 'sm');\n\n  // optionally provide a maximum size for the component\n  @include layout.use('size', $default: 'md', $max: 'lg');\n\n  // optionally provide both a minimum and maximum size for the component\n  @include layout.use('size', $default: 'md', $min: 'sm', $max: 'lg');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Date on Date Picker - HTML\nDESCRIPTION: This HTML snippet demonstrates limiting the selectable dates in the date picker by setting the max-date attribute to a specific date string. The picker restricts selection to dates on or before the given maximum. Input expects a valid date string for max-date, and renders a date picker input field that prevents the user from selecting out-of-range dates. Dependencies: Carbon Web Components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/date-picker/date-picker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-date-picker max-date=\\\"09/15/2020\\\">\\n  <cds-date-picker-input\\n    kind=\\\"single\\\"\\n    placeholder=\\\"mm/dd/yyyy\\\"></cds-date-picker-input>\\n</cds-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Adding New Component Props in React\nDESCRIPTION: Example showing how to add a new prop to a React component, which results in a minor version bump. Shows prop addition in both component implementation and PropTypes definition.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nfunction ExampleComponent({\n  propA,\n+  propB,\n}) {\n  return (\n    <>\n      <span>{propA}</span>\n+      <span>{propB}</span>\n    </>\n  );\n}\n\nExampleComponent.propTypes = {\n  propA: PropTypes.string,\n+  propB: PropTypes.string,\n};\n```\n\n----------------------------------------\n\nTITLE: React Component with className and Rest Props\nDESCRIPTION: Illustrates the recommended placement of className, rest props, and data-testid attributes on the outermost element of a React component for consistency and stability.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ className, ...rest }) {\n  return (\n    <div className={className} {...rest}>\n      <div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Focus in ComposedModal using Query Selector in React\nDESCRIPTION: This snippet shows how to set focus on a specific element in a ComposedModal using a query selector in the Carbon Design System for React. It uses the selectorPrimaryFocus prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  /* `.cds--text-input` selects the `<input>` in `<TextInput>` */\n}\n<ComposedModal selectorPrimaryFocus=\".cds--text-input\">\n  <ModalBody hasForm>\n    <TextInput labelText=\"Enter something\" />\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Rendering NumberInput with AI Label in Storybook Canvas\nDESCRIPTION: This snippet renders the NumberInput with AI label story in a Storybook Canvas component, with an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/NumberInput.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={NumberInputStories.withAILabel}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(NumberInputStories.withAILabel),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Carbon Icon Example\nDESCRIPTION: Example showing how to import a specific 16x16 'add' icon using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddIcon from '@carbon/icons/es/add/16';\n```\n\n----------------------------------------\n\nTITLE: Rendering DefinitionTooltip Default Story with Stackblitz Integration in JSX\nDESCRIPTION: This code renders the default DefinitionTooltip story in a Canvas component with an additional action to open the example in Stackblitz. It demonstrates how to use the component in a Storybook context.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/DefinitionTooltip.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={DefinitionTooltipStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(DefinitionTooltipStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Various Attributes for Anchor Element in Carbon Design System\nDESCRIPTION: This snippet demonstrates a cds-button component using the <a> element with additional attributes, including secondary style and small size. It includes an href, role, and slots for content and icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-btn.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--btn cds--btn--secondary cds--btn--sm\"\n  href=\"about:blank\"\n  id=\"button\"\n  part=\"button\"\n  role=\"button\"\n  type=\"text/plain\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Extension in SCSS\nDESCRIPTION: Illustrates how to extend an existing theme with custom token values. Shows setting up a fallback theme and overriding specific tokens.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/docs/sass.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/themes/scss/themes';\n@use '@carbon/themes' with (\n  $fallback: themes.$g100,\n  $theme: (\n    token-01: #000000,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Focus in ComposedModal using Selector (JSX)\nDESCRIPTION: This snippet shows how to set the initial focus in a ComposedModal by specifying a CSS selector for the target element using the selectorPrimaryFocus prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n{/* `.cds--text-input` selects the `<input>` in `<TextInput>` */}\n<ComposedModal selectorPrimaryFocus=\".cds--text-input\">\n  <ModalBody hasForm>\n    <TextInput labelText=\"Enter something\" />\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for Textarea Component\nDESCRIPTION: This snippet demonstrates the basic HTML structure for using the Textarea component, including slots for label text, helper text, and validity message.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/textarea/textarea.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-textarea placeholder=\"Optional placeholder text\" rows=\"4\" cols=\"50\">\n  <span slot=\"label-text\">Label text</span>\n  <span slot=\"helper-text\">Optional helper text</span>\n  <span slot=\"validity-message\">Something isn't right</span>\n</cds-textarea>\n```\n\n----------------------------------------\n\nTITLE: Menu with Submenu Implementation\nDESCRIPTION: Example of implementing nested menus using the submenu slot\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-menu>\n  <cds-menu-item label=\"Open\"></cds-menu-item>\n  <cds-menu-item label=\"Save\"></cds-menu-item>\n  <cds-menu-item label=\"Import\">\n    <cds-menu-item-radio-group slot=\"submenu\" label=\"import list\">\n      <cds-menu-item label=\"None\"></cds-menu-item>\n      <cds-menu-item label=\"Product team\"></cds-menu-item>\n      <cds-menu-item label=\"Organization\"></cds-menu-item>\n      <cds-menu-item label=\"Company\"></cds-menu-item>\n    </cds-menu-item-radio-group>\n  </cds-menu-item>\n</cds-menu>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Carbon Sass Builds\nDESCRIPTION: Example demonstrating how to optimize Carbon styles by including only necessary modules and components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/sass.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// Use the config module to set config variables\n@use '@carbon/styles/scss/config' with (\n  $prefix: 'cds'\n);\n\n// Include prerequisite modules typically provided through the main entrypoint\n@use '@carbon/styles/scss/reset';\n@use '@carbon/styles/scss/grid';\n@use '@carbon/styles/scss/layer';\n@use '@carbon/styles/scss/themes';\n@use '@carbon/styles/scss/theme';\n\n// Optionally include components that you need\n@use '@carbon/styles/scss/components/button';\n```\n\n----------------------------------------\n\nTITLE: Scrollable Modal with Extended Content\nDESCRIPTION: Shows how to implement a modal with scrolling content functionality for handling overflow content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/modal.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-modal has-scrolling-content>\n  <cds-modal-header>\n    <cds-modal-close-button></cds-modal-close-button>\n    <cds-modal-label>Label (Optional)</cds-modal-label>\n    <cds-modal-heading>Modal Title</cds-modal-heading>\n  </cds-modal-header>\n  <cds-modal-body>\n    <cds-modal-body-content>Modal text description</cds-modal-body-content>\n    <p>Some very large contents...</p>\n  </cds-modal-body>\n  <cds-modal-footer>\n    <cds-modal-footer-button kind=\"secondary\" data-modal-close>Cancel</cds-modal-footer-button>\n    <cds-modal-footer-button kind=\"primary\">Save</cds-modal-footer-button>\n  </cds-modal-footer>\n</cds-modal>\n```\n\n----------------------------------------\n\nTITLE: Custom Component Grid Implementation\nDESCRIPTION: Example of using the 'as' prop with custom components in the grid system.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FlexGrid, Row, Column } from '@carbon/react';\n\nfunction Article({ children, ...rest }) {\n  return <article {...rest}>{children}</article>;\n}\n\nfunction CustomColumn({ children, ...rest }) {\n  return <Column as={Article} {...rest}>{children}</Column:\n}\n\nfunction MyComponent() {\n  return (\n    <FlexGrid>\n      <Row>\n        <CustomColumn>Example content</Column>\n        <CustomColumn>Example content</Column>\n        <CustomColumn>Example content</Column>\n        <CustomColumn>Example content</Column>\n      </Row>\n    <FlexGrid>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Floating Styles for Toggletip in React\nDESCRIPTION: This code snippet demonstrates how to use the FeatureFlags component to enable dynamic floating styles for a Toggletip. It includes the Toggletip implementation with various subcomponents and props. The feature flag 'enable-v12-dynamic-floating-styles' is set to true to activate the dynamic styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Toggletip/Toggletip.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <ToggletipLabel>Toggletip label</ToggletipLabel>\n  <Toggletip align={args.align} defaultOpen>\n    <ToggletipButton label=\"Show information\">\n      <Information />\n    </ToggletipButton>\n    <ToggletipContent>\n      <p>\n        Scroll the container up, down, left or right to observe how the\n        Toggletip will automatically change its position in attempt to stay\n        within the viewport. This works on initial render in addition to on\n        scroll.\n      </p>\n      <ToggletipActions>\n        <Link href=\"#\">Link action</Link>\n        <Button size=\"sm\">Button</Button>\n      </ToggletipActions>\n    </ToggletipContent>\n  </Toggletip>\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Inline AILabel Examples\nDESCRIPTION: Demonstrates the inline variant of AILabel with and without adjacent text using the textLabel prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabel.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel kind=\"inline\" textLabel=\"Text goes here\">\n  <AILabelContent>Explanation of AI generated content</AILabelContent>\n</AILabel>\n\n<AILabel kind=\"inline\">\n  <AILabelContent>Explanation of AI generated content</AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Column Offset Configuration\nDESCRIPTION: Example of using column offset with breakpoint-specific configurations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Column sm={2} md={{ span: 4, offset: 2 }} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Select with Custom Option Default in React\nDESCRIPTION: This snippet illustrates how to create a Select component with a custom default option. It uses the defaultValue prop to set the initial selection.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Select/Select.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Select\n  id={`select-3`}\n  labelText=\"Select an option\"\n  helperText=\"Optional helper text\"\n  defaultValue=\"option-3\">\n  <SelectItem value=\"option-1\" text=\"Option 1\" />\n  <SelectItem value=\"option-2\" text=\"Option 2\" />\n  <SelectItem value=\"option-3\" text=\"Option 3\" />\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Custom Title Rendering in AccordionItem\nDESCRIPTION: Demonstrates how to use custom node rendering for accordion item titles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion align=\"start\">\n  <AccordionItem title={() => <span>Panel A</span>}>Panel A</AccordionItem>\n  <AccordionItem title=\"Panel B\">Panel B</AccordionItem>\n  <AccordionItem title=\"Panel C\">Panel C</AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Basic ContentSwitcher Implementation\nDESCRIPTION: Basic example showing how to use the ContentSwitcher component with a custom class name\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher className=\"some-class\">...</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: marking Current Page in Breadcrumb using HTML\nDESCRIPTION: This snippet illustrates how to mark a breadcrumb as the current page using the 'is-currentpage' attribute. This requires HTML support for custom elements and the Carbon Design System 'breadcrumb' components to function correctly. The attribute is added to the 'cds-breadcrumb-link' element within a 'cds-breadcrumb-item' to indicate the path currently being viewed.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/breadcrumb/breadcrumb.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<breadcrumb>\n  <breadcrumb-item href=\"#\">Breadcrumb 1</breadcrumb-item>\n  <breadcrumb-item href=\"#\">Breadcrumb 2</breadcrumb-item>\n  <cds-breadcrumb-item>\n    <cds-breadcrumb-link is-currentpage>Breadcrumb 3</cds-breadcrumb-link>\n  </cds-breadcrumb-item>\n</breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Input Component Implementation in HTML\nDESCRIPTION: Shows the basic HTML markup for creating a Text Input component with label, helper text, and error message support.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/text-input/text-input.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-text-input\n  label=\"Text input label\"\n  helper-text=\"Optional help text\"\n  invalid-text=\"Error message\">\n</cds-text-input>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Radio Button Web Component Modules (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Carbon Design System radio button web components JavaScript module in your application. The module export registers custom elements such as <cds-radio-button> and <cds-radio-button-group> for use in your HTML. Add this import at the root of your project or the entrypoint of your component logic to ensure all dependencies are registered. There are no function parameters or return values associated with this import.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/radio-button/radio-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/radio-button/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Tooltip Alignment in Carbon Web Components (HTML)\nDESCRIPTION: Showcases usage of the `tooltip-alignment` attribute on `cds-button` components to set the alignment of tooltips relative to the button (options: start, center, end; default: center). Each button includes an SVG icon via the `slot=\\\"icon\\\"` property. Input: `tooltip-text` sets the text, `tooltip-alignment` adjusts alignment, and SVG element provides the icon. Output: buttons with tooltips aligned as specified. Dependencies: Carbon Web Components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/button/button.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-button tooltip-text=\\\"Add to selection\\\" tooltip-alignment=\\\"start\\\">\\n  <svg\\n    focusable=\\\"false\\\"\\n    preserveAspectRatio=\\\"xMidYMid meet\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n    fill=\\\"currentColor\\\"\\n    aria-hidden=\\\"true\\\"\\n    width=\\\"16\\\"\\n    height=\\\"16\\\"\\n    viewBox=\\\"0 0 32 32\\\"\\n    slot=\\\"icon\\\">\\n    <path\\n      d=\\\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\\\"></path>\\n  </svg>\\n</cds-button>\\n<cds-button tooltip-text=\\\"Add to selection\\\">\\n  <svg\\n    focusable=\\\"false\\\"\\n    preserveAspectRatio=\\\"xMidYMid meet\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n    fill=\\\"currentColor\\\"\\n    aria-hidden=\\\"true\\\"\\n    width=\\\"16\\\"\\n    height=\\\"16\\\"\\n    viewBox=\\\"0 0 32 32\\\"\\n    slot=\\\"icon\\\">\\n    <path\\n      d=\\\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\\\"></path>\\n  </svg>\\n</cds-button>\\n<cds-button tooltip-text=\\\"Add to selection\\\" tooltip-alignment=\\\"end\\\">\\n  <svg\\n    focusable=\\\"false\\\"\\n    preserveAspectRatio=\\\"xMidYMid meet\\\"\\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n    fill=\\\"currentColor\\\"\\n    aria-hidden=\\\"true\\\"\\n    width=\\\"16\\\"\\n    height=\\\"16\\\"\\n    viewBox=\\\"0 0 32 32\\\"\\n    slot=\\\"icon\\\">\\n    <path\\n      d=\\\"M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z\\\"></path>\\n  </svg>\\n</cds-button>\n```\n\n----------------------------------------\n\nTITLE: Importing TimePicker Component via JavaScript\nDESCRIPTION: Shows how to import the TimePicker component from the Carbon web components library using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/time-picker/time-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/time-picker/index.js';\n```\n\n----------------------------------------\n\nTITLE: Storybook Canvas Component with StackBlitz Integration\nDESCRIPTION: Canvas component implementation showing the default Error Boundary story with additional action to open in StackBlitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={ErrorBoundaryStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(ErrorBoundaryStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Skeleton Placeholder Example with Stackblitz Integration\nDESCRIPTION: Creates a Canvas component to display the AI Skeleton Placeholder example with an option to open it in Stackblitz for editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AISkeleton/AISkeleton.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={AISkeletonPlaceholderStories._AISkeletonPlaceholder}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(AISkeletonPlaceholderStories._AISkeletonPlaceholder),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Definition Tooltip\nDESCRIPTION: JSX configuration for setting up a Storybook demo component that displays a Definition Tooltip example. The component enables theme selection and points to the Carbon Design System React documentation site.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/docs/definition-tooltip-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-definitiontooltip--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-search Component with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the HTML structure of the cds-search component when rendered with minimum attributes. It includes a search magnifier, label, input field, and a hidden close button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-search.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--search-magnifier\">\n  <slot name=\"icon\">\n  </slot>\n</div>\n<label\n  class=\"cds--label\"\n  for=\"input\"\n  part=\"label-text\"\n>\n  <slot>\n  </slot>\n</label>\n<input\n  autocomplete=\"\"\n  class=\"cds--search-input\"\n  id=\"input\"\n  part=\"input\"\n  placeholder=\"Search\"\n  role=\"\"\n>\n<button\n  aria-label=\"\"\n  class=\"cds--search-close cds--search-close--hidden\"\n  part=\"close-button\"\n  type=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Fonts in SCSS for Carbon Design System\nDESCRIPTION: This code snippet shows how to disable specific fonts in a Carbon Design System project using SCSS. It demonstrates disabling the IBM Plex Sans font.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/fonts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/fonts' with (\n  $fonts: (\n    IBM-Plex-Sans: false,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: ContentSwitcher with Custom Switch Classes\nDESCRIPTION: Example showing how to add custom classes to individual Switch components\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher>\n  <Switch className=\"switch-one\" />\n  <Switch className=\"switch-two \" />\n</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Changing Carbon theme in SCSS\nDESCRIPTION: SCSS code to change the default theme of Carbon to the g100 theme.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/themes';\n@use '@carbon/styles/scss/theme' with (\n  $theme: themes.$g100\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Floating Styles with Feature Flags in JSX\nDESCRIPTION: This example shows how to enable dynamic floating styles for the OverflowMenu component using the 'enable-v12-dynamic-floating-styles' feature flag. It wraps the OverflowMenu in a FeatureFlags component to enable the flag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OverflowMenu/OverflowMenu.DynamicStyles.featureflag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <OverflowMenu>\n    <MenuItem label=\"Stop app\" />\n    <MenuItem label=\"Restart app\" />\n    <MenuItem label=\"Rename app\" />\n    <MenuItem label=\"Edit routes and access\" />\n    <MenuItemDivider />\n    <MenuItem label=\"Delete app\" kind=\"danger\" />\n  </OverflowMenu>\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Importing all Carbon styles in SCSS\nDESCRIPTION: SCSS code to import all styles from the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles';\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Direction - Carbon Web Components - HTML\nDESCRIPTION: Demonstrates how to configure a dropdown to open upwards by using the \\\"direction=\\\"top\\\"\\\" attribute. This snippet depends on the Carbon Design System's web components library, specifically cds-dropdown and cds-dropdown-item. The dropdown displays a label prompt and three clickable options, and is typically embedded inside a supported web application with the required components loaded.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/dropdown/dropdown.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown direction=\\\"top\\\" label=\\\"Select an option...\\\">\\n  <cds-dropdown-item value=\\\"0\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"1\\\">Option 2</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"2\\\">Option 3</cds-dropdown-item>\\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing a 4-Column Grid with Carbon CSS Classes\nDESCRIPTION: HTML example showing how to create a basic 4-column grid layout using the Carbon Design System's CSS grid classes with the default prefix.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--css-grid\">\n  <div class=\"cds--col-span-4\"></div>\n  <div class=\"cds--col-span-4\"></div>\n  <div class=\"cds--col-span-4\"></div>\n  <div class=\"cds--col-span-4\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Progress Step with Additional Attributes in HTML\nDESCRIPTION: This snippet demonstrates the cds-progress-step component with additional attributes, specifically showing how the secondary label text is implemented. It extends the basic implementation with an optional secondary label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-progress-step.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"cds--progress-step-button\"\n  tabindex=\"0\"\n>\n  <slot name=\"label-text\">\n    <p\n      aria-describedby=\"label-tooltip\"\n      class=\"cds--progress-label\"\n      role=\"button\"\n      title=\"First step\"\n    >\n      First step\n    </p>\n  </slot>\n  <slot name=\"secondary-label-text\">\n    <p class=\"cds--progress-optional\">\n      secondary-label-text-foo\n    </p>\n  </slot>\n  <span class=\"cds--progress-line\">\n  </span>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for Button in JavaScript\nDESCRIPTION: This snippet shows how to import icons from the Carbon React library to use with the Button component's renderIcon prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { Add, TrashCan } from '@carbon/react/icons';\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Skeleton Component\nDESCRIPTION: Example showing how to use the skeleton variation of the Tabs component for loading states. Uses the cds-tabs-skeleton and cds-tab-skeleton components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tabs/tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-tabs-skeleton>\n  <cds-tab-skeleton></cds-tab-skeleton>\n  <cds-tab-skeleton></cds-tab-skeleton>\n  <cds-tab-skeleton></cds-tab-skeleton>\n  <cds-tab-skeleton></cds-tab-skeleton>\n  <cds-tab-skeleton></cds-tab-skeleton>\n</cds-tabs-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Rendering Layer Components - HTML\nDESCRIPTION: An example of using the cds-layer component to render HTML components across multiple layers. Child components inherit the token values of their respective layer. Layers can be nested indefinitely but token sets are generally limited to 3 layers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/layer/layer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-layer>\n  <div>Test component</div>\n  <cds-layer>\n    <div>Test component</div>\n    <cds-layer>\n      <div>Test component</div>\n    </cds-layer>\n  </cds-layer>\n</cds-layer>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Tooltip Component with Auto Align - HTML\nDESCRIPTION: Shows how to implement the 'cds-tooltip' component with Auto Align enabled, using an Information16 icon as the trigger and a labeled content panel. Inputs are the slot content and attributes; output is a tooltip dynamically positioned. Requires prior import/registration of the tooltip component and relevant icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-tooltip autoalign>\n  <div aria-labelledby=\"content\">${Information16()}</div>\n  <cds-tooltip-content id=\"content\">\n    Occasionally, services are updated in a specified time window to ensure no\n    down time for customers.\n  </cds-tooltip-content>\n</cds-tooltip>\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Menu with Various Attributes in HTML\nDESCRIPTION: This snippet shows a header menu with additional attributes. It includes custom content for the trigger, an aria-label for the menu, and an expanded state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  aria-expanded=\"true\"\n  aria-haspopup=\"menu\"\n  class=\"cds--header__menu-item cds--header__menu-title\"\n  href=\"javascript:void 0\"\n  part=\"trigger\"\n  role=\"button\"\n  tabindex=\"0\"\n>\n  trigger-content-foo\n</a>\n<ul\n  aria-label=\"menu-label-foo\"\n  class=\"cds--header__menu\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Activation for Tabs\nDESCRIPTION: Example of how to configure tabs with manual activation where users activate a tab by pressing Space or Enter, as opposed to tabs that activate automatically on focus.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs>\n  <TabList aria-label=\"List of tabs\" activation=\"manual\">\n    <Tab>Tab Label 1</Tab>\n    <Tab>Tab Label 2</Tab>\n    <Tab>Tab Label 3</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab Panel 1</TabPanel>\n    <TabPanel>Tab Panel 2</TabPanel>\n    <TabPanel>Tab Panel 3</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Icons with Props in Vue Template\nDESCRIPTION: Example demonstrating how to use Carbon icons with additional props for accessibility, styling, and event handling in a Vue template.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/README.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Bee32 aria-label=\"Bee\" class=\"custom-class\" v-on:click=\"handler\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Prefix Variables\nDESCRIPTION: Example showing how to use the global prefix variable in component selectors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/sass.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// Input\n.#{$prefix}--my-component {\n  // ...\n}\n\n// Output\n.cds--my-component {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Indeterminate Carbon Progress Bar in HTML\nDESCRIPTION: This HTML snippet demonstrates the indeterminate state of the Carbon Progress Bar. This variation is used when progress is unknown. It is achieved by setting the `status` attribute to `active` and omitting the `value` attribute.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-bar/progress-bar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-progress-bar\n  label=\"Progress bar label\"\n  helper-text=\"Optional helper text\"\n  status=\"active\">\n</cds-progress-bar>\n```\n\n----------------------------------------\n\nTITLE: React Event Handler Naming - Unpreferred vs Preferred\nDESCRIPTION: Demonstrates the preferred naming conventions for React event handlers, showing how to name event handler functions using the full event name (onClick) instead of shorthand versions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent() {\n  function click() {\n    // ...\n  }\n  return <button onClick={click} />;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent() {\n  function onClick() {\n    // ...\n  }\n  return <button onClick={onClick} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Chat Button Component via Carbon Web Components in JavaScript\nDESCRIPTION: Demonstrates how to import the chat button component from Carbon Web Components into a JavaScript application using ES module import syntax. Ensure that the Carbon Web Components package is properly installed in your project instead of loading from CDN.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/chat-button/chat-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/chat-button/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Dismissable Tabs Component\nDESCRIPTION: JSX code that renders the complete dismissable tabs component with a reset button, using the handlers defined earlier for tab changes and close requests.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <>\n    <Button style={{ marginBottom: '3rem' }} onClick={resetTabs}>\n      Reset\n    </Button>\n    <Tabs\n      selectedIndex={selectedIndex}\n      onChange={handleTabChange}\n      dismissable\n      onTabCloseRequest={handleCloseTabRequest}>\n      <TabList aria-label=\"List of tabs\">\n        {renderedTabs.map((tab, index) => (\n          <Tab key={index} disabled={tab.disabled}>\n            {tab.label}\n          </Tab>\n        ))}\n      </TabList>\n      <TabPanels>{renderedTabs.map((tab) => tab.panel)}</TabPanels>\n    </Tabs>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component\nDESCRIPTION: Shows how to import the Carbon Web Components form module for form integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/number-input/number-input.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/form/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Default FormLabel Example in JSX\nDESCRIPTION: This snippet renders the default FormLabel example using Storybook's Canvas component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormLabel/FormLabel.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={FormLabelStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier with Carbon Config\nDESCRIPTION: JavaScript configuration file setup to use prettier-config-carbon in a project. Creates a prettier.config.js file that imports and exports the Carbon prettier configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/prettier-config-carbon/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst prettierConfig = require('prettier-config-carbon');\nmodule.exports = prettierConfig;\n```\n\n----------------------------------------\n\nTITLE: Making SVG Icons Accessible with getAttributes\nDESCRIPTION: Example of using getAttributes to create an accessible, focusable SVG icon by adding ARIA attributes and tabindex. This ensures icons are usable with keyboard navigation and screen readers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-helpers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getAttributes } = require('@carbon/icon-helpers');\nconst attributes = getAttributes({\n  'aria-label': 'My icon label',\n  tabindex: '0',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Radio Button with Various Attributes\nDESCRIPTION: Demonstrates the HTML structure of a Carbon Design System radio button component with additional attributes like 'disabled', 'name', and custom tabindex. It also shows the label having a visually hidden class and text content in the slot.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-radio-button.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input\n  class=\"cds--radio-button\"\n  disabled=\"\"\n  id=\"input\"\n  name=\"name-foo\"\n  tabindex=\"0\"\n  type=\"radio\"\n  value=\"staging\"\n>\n<label\n  class=\"cds--radio-button__label\"\n  for=\"input\"\n>\n  <span class=\"cds--radio-button__appearance\">\n  </span>\n  <span class=\"cds--visually-hidden\">\n    <slot>\n      label-text-foo\n    </slot>\n  </span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Overriding Component Tokens for Multiple Themes\nDESCRIPTION: This snippet demonstrates how to customize a component token (button-primary) with different values for each supported theme in Carbon Design System. It specifies a fallback color and individual values for white, g10, g90, and g100 themes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_14\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/themes';\n@use '@carbon/react/scss/components/button/tokens' with (\n  $button-primary: (\n    fallback: #3f51b5,\n    values: (\n      (theme: themes.$white, value: #3f51b5),\n      (theme: themes.$g10, value: #d55bff),\n      (theme: themes.$g90, value: #d0b2ff),\n      (theme: themes.$g100, value: #cfd2ff),\n    ),\n  )\n);\n\n@use '@carbon/react/scss/reset';\n@use '@carbon/react/scss/components/button';\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-file-uploader-item in Uploaded State\nDESCRIPTION: This snippet illustrates the cds-file-uploader-item component in its uploaded state, without the loading indicator.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/file-uploader.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"cds--file-filename\">\n  <slot>\n  </slot>\n</p>\n<span class=\"cds--file__state-container\">\n</span>\n<div\n  class=\"cds--form-requirement\"\n  hidden=\"\"\n>\n  <div class=\"cds--form-requirement__title\">\n  </div>\n  <p\n    class=\"cds--form-requirement__supplement\"\n    hidden=\"\"\n  >\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring @carbon/layout Package Defaults\nDESCRIPTION: Shows how to configure default values in the @carbon/layout package using Sass Modules. This example demonstrates changing the $base-font-size parameter when importing the package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/layout/docs/sass.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/layout' with (\n  $base-font-size: 18px\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Carbon Icon Button Web Component\nDESCRIPTION: This JavaScript snippet demonstrates how to import the `cds-icon-button` web component and a specific Carbon icon (`Edit16`). It then shows how to render the icon button within a function (`App`), placing the imported icon in the designated 'icon' slot and providing text for the tooltip via the 'tooltip-content' slot using Lit's `html` tagged template literal syntax. Requires the `@carbon/web-components` and `@carbon/icons` packages, and a library like Lit for rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/icon-button/icon-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/icon-button/index.js';\nimport Edit16 from '@carbon/icons/lib/edit/16.js';\n\nfunction App() {\n  return html`<cds-icon-button>\n    ${Edit16({ slot: 'icon' })}\n    <span slot=\"tooltip-content\">label</span>\n  </cds-icon-button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying API Documentation for Tree View Components\nDESCRIPTION: These snippets use Storybook's ArgTypes component to display the API documentation for the cds-tree-view and cds-tree-node components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<ArgTypes of=\"cds-tree-view\" />\n<ArgTypes of=\"cds-tree-node\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Component Base Element in React\nDESCRIPTION: Shows how to use the 'as' prop to configure the base element rendered by the Layer component. This example renders the Layer as a section element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layer/Layer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Layer as=\"section\">\n  <ChildComponent />\n</Layer>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Sorting of Table Columns - JavaScript\nDESCRIPTION: This snippet demonstrates how to trigger sorting of the first column of a Carbon data table programmatically using vanilla JavaScript. It queries the DOM for the first <cds-table-header-cell>, accesses the button in its shadow DOM, and dispatches a click event. Dependencies: Carbon Design System web components, browser with shadow DOM support. Input is the query of a header cell; the output is the triggering of the sort event. This technique can be adapted to automate or test sortable interactions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// sorting the first column\ndocument\n  .querySelectorAll('cds-table-header-cell')[0]\n  .shadowRoot.querySelector('button')\n  .click();\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Inline Notification with Minimum Attributes\nDESCRIPTION: This HTML snippet shows the basic structure of the cds-inline-notification component with minimum attributes. It includes slots for title and subtitle content, and a close button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-notification.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--inline-notification__details\">\n  <div class=\"cds--inline-notification__text-wrapper\">\n    <p class=\"cds--inline-notification__title\">\n      <slot name=\"title\">\n      </slot>\n    </p>\n    <div class=\"cds--inline-notification__subtitle\">\n      <slot name=\"subtitle\">\n      </slot>\n    </div>\n    <slot>\n    </slot>\n  </div>\n</div>\n<button\n  class=\"cds--inline-notification__close-button\"\n  type=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Applying Type Styles in Carbon v10 SCSS\nDESCRIPTION: This snippet demonstrates how to use the type-style mixin in Carbon v10 to apply typography styles to a custom class.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-type.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.page-title {\n  @include type-style(productive-heading-07);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AccordionSkeleton in React\nDESCRIPTION: Shows how to implement and customize the AccordionSkeleton component for loading states.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<AccordionSkeleton className=\"custom-class\" open count={3} />\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-copy-button with Custom Attributes in HTML\nDESCRIPTION: Example of rendering the cds-copy-button component with customized attributes. It shows how to set a custom feedback text and a shorter feedback timeout value.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-copy-button.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-copy\n  button-class-name=\"cds--copy-btn\"\n  feedback=\"feedback-text-foo\"\n  feedback-timeout=\"16\"\n>\n  <slot slot=\"tooltip-content\">\n  </slot>\n</cds-copy>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Checked State for Carbon Checkbox in HTML\nDESCRIPTION: Demonstrates using the `checked` attribute on the `<cds-checkbox>` element to render the checkbox as checked by default on page load. This attribute doesn't require a value; its presence indicates the checked state. Requires the Carbon Design System web components library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/checkbox/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-checkbox checked=\"\"></cds-checkbox>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Grid Package in SCSS\nDESCRIPTION: Comparison of grid package import syntax between v10 and v11, including new alias options available in v11.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/grid/scss/grid';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/grid';\n@use '@carbon/styles/scss/grid';\n@use '@carbon/react/scss/grid';\n```\n\n----------------------------------------\n\nTITLE: Labeling a Dropdown - Carbon Web Components - HTML\nDESCRIPTION: Demonstrates adding a descriptive label to a small dropdown using the \\\"label\\\" attribute. The dropdown is further described by the \\\"title-text\\\" and includes two selectable items. Requires Carbon's web components, and helps improve accessibility and usability by clarifying a dropdown's purpose to users.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/dropdown/dropdown.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown label=\\\"Dropdown label\\\" size=\\\"sm\\\" title-text=\\\"Small [sm]\\\">\\n  <cds-dropdown-item value=\\\"option-1\\\">Option 1</cds-dropdown-item>\\n  <cds-dropdown-item value=\\\"option-2\\\">Option 2</cds-dropdown-item>\\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Importing Unstable Components in React\nDESCRIPTION: Shows how to import and use unstable components in a React application by using the 'unstable_' prefix and renaming the import.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/experimental-code.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_ComponentName as ComponentName } from '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Using usePrefix with classnames in JavaScript\nDESCRIPTION: Shows how to combine the usePrefix hook with the classnames utility to create component class names following Carbon Design System's naming convention.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/internal/usePrefix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePrefix } from '@carbon/react';\nimport { cx } from 'classnames';\n\nfunction ExampleComponent() {\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--custom-component`);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Shape Indicator Component in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the `shape-indicator` web component module using ES module syntax. Importing this module registers the `<cds-shape-indicator>` custom element, making it available for use in HTML.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/shape-indicator/shape-indicator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/shape-indicator/index.js';\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API Documentation\nDESCRIPTION: Uses the ArgTypes component to display the API documentation for the SkeletonIcon component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonIcon/SkeletonIcon.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Layer Information - JavaScript\nDESCRIPTION: JavaScript example for listening to the cds-use-layer event, which provides data on the current layer and its level within a web application. Listeners can extract details such as layer element and layer level from event data, facilitating dynamic layer handling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/layer/layer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(`cds-use-layer`, (e) => {\n  const { layer, level } = (e as any).detail;\n  layer.querySelector('.example-layer-test-component.use-layer').innerText =\n    `The current layer level is: ${level + 1}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API in JSX\nDESCRIPTION: This snippet uses Storybook's ArgTypes component to display the API documentation for the FormLabel component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormLabel/FormLabel.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-link in Disabled State in HTML\nDESCRIPTION: This snippet shows the HTML structure of the cds-link component in a disabled state. It uses a paragraph element instead of an anchor, includes the disabled class, and omits interactive attributes like href.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-link.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p\n  class=\"cds--link cds--link--disabled\"\n  id=\"link\"\n  part=\"link\"\n>\n  <slot>\n  </slot>\n</p>\n<div\n  class=\"cds--link__icon\"\n  hidden=\"\"\n>\n  <slot name=\"icon\">\n  </slot>\n</div>\n<p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Formatting Time-Only Ranges in JavaScript\nDESCRIPTION: Demonstrates how to format time ranges without date information by setting dateStyle to null. This can only be used when both times occur on the same day.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.absolute.formatRange(startDate, sameDayEndDate, {\n  dateStyle: null,\n});\n// 3:47 – 4:29 PM\n```\n\n----------------------------------------\n\nTITLE: Radio Button Story Canvas Components\nDESCRIPTION: Canvas components displaying different Radio Button variants with Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/RadioButton/RadioButton.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={RadioButtonStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(RadioButtonStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Compatibility Theme in SCSS for Carbon Design System v11\nDESCRIPTION: This snippet demonstrates how to use a compatibility theme in Carbon Design System v11 to ease the transition from v10. It shows setting up a fallback theme and the current theme using SCSS modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_30\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/compat/themes' as compat;\n@use '@carbon/react/scss/themes';\n@use '@carbon/react/scss/theme' with (\n  $fallback: compat.$g100,\n  $theme: themes.$g100\n);\n@use '@carbon/react';\n\n:root {\n  @include theme.theme();\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Individual AccordionItems in React\nDESCRIPTION: Demonstrates how to apply custom CSS classes to individual AccordionItem components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion>\n  <AccordionItem title=\"Panel A\" className=\"custom-class\">\n    Panel A\n  </AccordionItem>\n  <AccordionItem title=\"Panel B\">Panel B</AccordionItem>\n  <AccordionItem title=\"Panel C\">Panel C</AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Loading Non-Latin Plex Font Dynamically\nDESCRIPTION: Implementation of the dynamic font loader for non-Latin IBM Plex fonts using CDN script.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://1.www.s81c.com/common/carbon/plex/load-non-latin-plex.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using the Carbon Shape Indicator Component in HTML\nDESCRIPTION: This HTML snippet shows a basic implementation of the `<cds-shape-indicator>` custom element. It utilizes the `kind` attribute to set the visual style (e.g., 'failed') and the `text` attribute to provide descriptive label for the indicator.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/shape-indicator/shape-indicator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-shape-indicator kind=\"failed\" text=\"Failed\"></cds-shape-indicator>\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Implementation without Trailing Slash\nDESCRIPTION: Shows how to implement a basic breadcrumb navigation without a trailing slash using the noTrailingSlash prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Breadcrumb/Breadcrumb.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumb noTrailingSlash>\n  <BreadcrumbItem href=\"#\">Breadcrumb 1</BreadcrumbItem>\n  <BreadcrumbItem href=\"#\">Breadcrumb 2</BreadcrumbItem>\n  <BreadcrumbItem href=\"#\">Breadcrumb 3</BreadcrumbItem>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextInput with Layer Story in Storybook\nDESCRIPTION: This snippet shows how to render the TextInput story with a layer in a Storybook canvas.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={TextInputStories._WithLayer} />\n```\n\n----------------------------------------\n\nTITLE: Custom Component AspectRatio Implementation\nDESCRIPTION: Example demonstrating how to use AspectRatio with a custom Article component, showing component composition pattern.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AspectRatio/AspectRatio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Article({ children, ...rest }) {\n  return <article {...rest}>{children}</article>;\n}\n\n<AspectRatio as={Article} ratio=\"4x3\">\n  Your content\n</AspectRatio>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Content in ComposedModal\nDESCRIPTION: Example showing how to handle large content in a modal by using the hasScrollingContent prop, which creates a visual fade effect to indicate additional content is available by scrolling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal size=\"large\">\n  <ModalHeader />\n  <ModalBody hasScrollingContent>\n    <p className=\".cds--modal-content__text\">Some very large contents...</p>\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Grid Styles in SCSS\nDESCRIPTION: Shows two methods for importing Carbon grid styles - global import and grid-specific import.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-grid.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// Global style import\n@import 'carbon-components/scss/globals/scss/styles.scss';\n\n// Grid-specific import\n@import 'carbon-components/scss/globals/grid/grid';\n```\n\n----------------------------------------\n\nTITLE: Making pictograms focusable\nDESCRIPTION: React component example showing how to make pictograms focusable by adding tabIndex and aria-label attributes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Airplane } from '@carbon/pictograms-react';\n\nfunction MyComponent() {\n  return <Airplane aria-label=\"Add\" tabIndex=\"0\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Placeholder Component in HTML\nDESCRIPTION: This snippet demonstrates how to use the Skeleton Placeholder component in HTML markup. The component is represented by the <cds-skeleton-placeholder> custom element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-placeholder/skeleton-placeholder.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-skeleton-placeholder></cds-skeleton-placeholder>\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in Carbon Design System\nDESCRIPTION: This snippet shows various commands for running Playwright tests in the Carbon Design System project. It includes options for running specific tests, using different browsers, and filtering tests by tags.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright test\nyarn playwright test path/to/test-e2e.js\nyarn playwright test --browser=chromium\nyarn playwright test --project=chromium\nyarn playwright test --debug\nyarn playwright test --project=chromium --headed\nyarn playwright test --grep @tag-name\nyarn playwright test --grep-invert @tag-name\n```\n\n----------------------------------------\n\nTITLE: Embedding AI Label in DataTable Row - HTML\nDESCRIPTION: This HTML snippet shows how to integrate an AI Label inside a row of the DataTable. By adding a cds-ai-label into a cds-table-row, it enhances rows with interactive labels. Dependencies include the structure of DataTable and proper slot usage within the label for desired content depiction.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table-ai-label.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-table-row>\n  <cds-ai-label alignment=\"bottom-left\">\n    <div slot=\"body-text\">{Content Here}</div>\n  </cds-ai-label>\n  <cds-table-cell>Load Balancer 1</cds-table-cell>\n  <cds-table-cell>HTTP</cds-table-cell>\n  ...\n</cds-table-row>\n```\n\n----------------------------------------\n\nTITLE: Enabling Focus Wrap Without Sentinels in Modal Component\nDESCRIPTION: Demonstrates how to enable the experimental focus wrap feature flag that removes sentinel nodes and handles focus wrapping based on tabbable order of interactive child nodes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags enableExperimentalFocusWrapWithoutSentinels>\n  <Modal ... />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Text Input Component with Form Integration in HTML\nDESCRIPTION: Demonstrates how to integrate the Text Input component within a form by wrapping it with the cds-form-item component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/text-input/text-input.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-form-item>\n  <cds-text-input\n    label=\"Text input label\"\n    helper-text=\"Optional help text\"\n    invalid-text=\"Error message\">\n  </cds-text-input>\n</cds-form-item>\n```\n\n----------------------------------------\n\nTITLE: Inline AI Label Implementation\nDESCRIPTION: Examples showing how to implement the inline variant of the AI Label with and without custom text label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-label/ai-label.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-label kind=\"inline\" ai-text-label=\"Text goes here\">\n  <div slot=\"body-text\">Explanation of AI-generated content</div>\n</cds-ai-label>\n\n<cds-ai-label kind=\"inline\">\n  <div slot=\"body-text\">Explanation of AI-generated content</div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Carbon Icon in Handlebars\nDESCRIPTION: Demonstrates how to conditionally render a Carbon icon or a fallback SVG based on feature flags in Handlebars templates.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_9\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if featureFlags.componentsX}}\n  {{carbon-icon\n    'ChevronDownGlyph'\n    class=(add @root.prefix '--dropdown__arrow')\n  }}\n{{else}}\n  <svg\n    class='{{@root.prefix}}--dropdown__arrow'\n    width='10'\n    height='5'\n    viewBox='0 0 10 5'\n    fill-rule='evenodd'\n  >\n    <path d='M10 0L5 5 0 0z'></path>\n  </svg>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Tag Implementation in JavaScript\nDESCRIPTION: This code snippet shows how to create a Tag component with a custom icon using JavaScript and the Carbon Icons library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tag/tag.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Download16 from '@carbon/icons/lib/download/16.js';\n\nfunction App() {\n  return html`\n  <cds-tag filter type=\"gray\" title=\"Clear selection\">\n    ${Download16({ slot: 'icon' })}\n    This is a tag\n    </cds-tag>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component\nDESCRIPTION: Setting up the Storybook Meta component to define the documentation page configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu-button/menu-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={MenuButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Color with CSS Custom Properties\nDESCRIPTION: Demonstrates how to override the default button color in Carbon components using CSS custom properties with the --cds-interactive-02 variable.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/styling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfooter {\n  --cds-interactive-02: #6f6f6f; /* `$interactive-02` token for `g100` theme */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Structured List Web Component\nDESCRIPTION: Code snippet showing how to import the Carbon structured list web component via JavaScript ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/structured-list/structured-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/structured-list/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Items and ItemToString\nDESCRIPTION: Examples of configuring Dropdown items with both simple arrays and object arrays using itemToString.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown\n  items={['Option 0', 'Option 1', 'Option 2']}\n/>\n\n\n<Dropdown\n  items={[\n    { id: 'option-0', text: 'Option 0' },\n    { id: 'option-1', text: 'Option 1' },\n    { id: 'option-2', text: 'Option 2' },\n  ]}\n  itemToString={(item) => (item ? item.text : '')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Inline AILabel with Size Variant\nDESCRIPTION: Demonstrates an inline AILabel with custom text and extra small size.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabel.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel kind=\"inline\" textLabel=\"Text goes here\" size=\"xs\">\n  <AILabelContent>Explanation of AI-generated content</AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Using Colors in JavaScript\nDESCRIPTION: Examples of accessing color values in JavaScript using both object notation and direct variables.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nblack;\nblue[50]; // Using the `blue` object.\nwarmGray100; // Using the `warmGray100` variable.\n```\n\n----------------------------------------\n\nTITLE: Menu Item Change Event Handler\nDESCRIPTION: Example of handling menu item change events\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-item-changed', (event) => {\n  // use values here\n});\n```\n\n----------------------------------------\n\nTITLE: Number Input with Form Item\nDESCRIPTION: Demonstrates how to wrap the number input component within a form item component for proper form integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/number-input/number-input.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-form-item>\\n  <cds-number-input\\n    value=\\\"0\\\"\\n    min=\\\"0\\\"\\n    max=\\\"100\\\"\\n    label=\\\"Label text\\\"\\n    helper-text=\\\"Optional helper text\\\">\\n  </cds-number-input>\\n</cds-form-item>\n```\n\n----------------------------------------\n\nTITLE: Using LayoutConstraint for Component Size Restrictions in React\nDESCRIPTION: This example demonstrates the use of the LayoutConstraint component to apply specific size constraints to child components. It shows how to limit the size range of an IconButton within a ContentSwitcher.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layout/Layout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <LayoutConstraint size={{ default: 'md', min: 'sm', max: 'lg' }}>\n    {/* IconButton is now locked to the sizes sm->lg and defaults to md */}\n    <IconButton … />\n  </LayoutConstraint>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Carbon Design System Toggletip in JSX\nDESCRIPTION: This snippet configures a StorybookDemo component to display a live demo of the Toggletip component from the Carbon Design System. It sets the Storybook URL, enables theme selection, and specifies the default variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Toggletip/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-toggletip--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextInput with AI Label Story in Storybook\nDESCRIPTION: This snippet demonstrates how to render the TextInput story with an AI label in a Storybook canvas with additional actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextInputStories.withAILabel}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextInputStories.withAILabel),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Feature Flags in React Component\nDESCRIPTION: Example showing how to use a feature flag to conditionally render different content in a React component. The component renders 'foo' when aFeatureFlag is true, and 'bar' when false.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/internal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { aFeatureFlag } from '/path/to/FeatureFlags';\n...\nconst MyComponent = props => (<div {...props}>{aFeatureFlag ? 'foo' : 'bar'}</div>);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Batch Action for Table - JavaScript\nDESCRIPTION: This JavaScript snippet defines a simple custom batch action function to use with a Carbon table toolbar. The function displays an alert and is intended to be assigned as an onclick handler for a <cds-button> in the table toolbar. Requires only a browser environment and the Carbon web components. No parameters; output is a modal alert shown to the user.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst alertFunction = () => alert('Alert!');\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Theme Configuration with Token Overrides\nDESCRIPTION: This advanced snippet demonstrates how to override multiple component tokens across different themes. It imports necessary modules, defines custom token values, merges them with existing tokens, and applies them to theme classes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/themes';\n@use '@carbon/react/scss/theme';\n@use '@carbon/react/scss/components/button/tokens' as button-tokens;\n@use '@carbon/themes/scss/utilities';\n@use '@carbon/react';\n\n// Set new token values. Follow this format, each theme has a specification\n$button-token-overrides: (\n  button-primary: (\n    fallback: #3f51b5,\n    values: (\n      (\n        theme: themes.$white,\n        value: #3f51b5,\n      ),\n      (\n        theme: themes.$g10,\n        value: #3fb557,\n      ),\n      (\n        theme: themes.$g90,\n        value: #3f9ab5,\n      ),\n      (\n        theme: themes.$g100,\n        value: #ab3fb5,\n      ),\n    ),\n  ),\n);\n\n// The new tokens must be merged into the existing tokens\n$button-tokens: utilities.merge(\n  button-tokens.$button-tokens,\n  $button-token-overrides\n);\n\n// Add the new component tokens which will be included any time the theme mixin is called\n@include theme.add-component-tokens($button-tokens);\n\n// Ensure that the theme() mixin is called to set the new token values\n// You can override the existing `.cds--{theme}` classes for each theme\n:root {\n  @include theme.theme();\n}\n\n.cds--g10 {\n  @include theme.theme(themes.$g10);\n}\n\n.cds--g90 {\n  @include theme.theme(themes.$g90);\n}\n\n.cds--g100 {\n  @include theme.theme(themes.$g100);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TextInput Skeleton Story in Storybook\nDESCRIPTION: This snippet shows how to render the skeleton variant of the TextInput story in a Storybook canvas with additional actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextInputStories.Skeleton}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextInputStories.Skeleton),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Checked State for Carbon Checkboxes\nDESCRIPTION: Example showing how to use the defaultChecked prop to specify if checkboxes should be checked by default on page load. This is useful for setting initial states without controlled components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Checkbox/Checkbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox defaultChecked labelText={`Checkbox label`} id=\"checkbox-label-1\" />\n<Checkbox defaultChecked labelText={`Checkbox label`} id=\"checkbox-label-2\" />\n```\n\n----------------------------------------\n\nTITLE: Two-Tone Icon Implementation\nDESCRIPTION: React component example using a two-tone warning icon\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WarningFilled } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return <WarningFilled aria-label=\"Add\" className=\"my-custom-class\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Text Component in JavaScript\nDESCRIPTION: Shows how to import the Skeleton Text component from Carbon Web Components using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-text/skeleton-text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/skeleton-text/index.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Focus in ComposedModal using Data Attribute (JSX)\nDESCRIPTION: This code demonstrates how to set the initial focus in a ComposedModal by using the data-modal-primary-focus attribute on a TextInput component within the ModalBody.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  <ModalBody hasForm>\n    <TextInput data-modal-primary-focus labelText=\"Enter something\" />\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Textarea Component within Form Item\nDESCRIPTION: This snippet demonstrates how to properly wrap the Textarea component within a Form Item component for use in forms.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/textarea/textarea.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-form-item>\n  <cds-textarea placeholder=\"Optional placeholder text\" rows=\"4\" cols=\"50\">\n    <span slot=\"label-text\">Label text</span>\n    <span slot=\"helper-text\">Optional helper text</span>\n    <span slot=\"validity-message\">Something isn't right</span>\n  </cds-textarea>\n</cds-form-item>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Layout Context Usage in React\nDESCRIPTION: This snippet shows how the Layout component affects the size of child components. It demonstrates that explicitly set sizes take precedence over the layout context, and components outside the Layout use their default size.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layout/Layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  {/* This text input is always lg */}\n  <TextInput size=\"lg\" />\n\n  {/* This text input will render with its default size (md) */}\n  <TextInput />\n\n  <Layout size=\"sm\">\n    {/* This text input will still be lg */}\n    <TextInput size=\"lg\" />\n\n    {/* This text input will be sm */}\n    <TextInput />\n  </Layout>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Feature Flags to Component Context\nDESCRIPTION: Shows how to add feature flags to the context of a component's configuration for use in templates.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  context: {\n    prefix,\n    featureFlags,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Motion Functions and Tokens in Carbon Styles\nDESCRIPTION: Example of using motion helpers, mixins, and duration tokens to add transitions to elements in SCSS. This demonstrates the motion() function with standard, productive easing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/motion' as *;\n\n.my-selector {\n  transition: transform $duration-fast-02 motion(standard, productive);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Canvas for Link Component\nDESCRIPTION: This snippet renders the default Canvas component for Link stories, using the Default export from the Link stories module.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={LinkStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Styled Button in HTML\nDESCRIPTION: Shows the HTML implementation of a secondary button within a footer element that uses the custom styles defined above.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/styling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<footer>\n  <cds-button kind=\"secondary\">Secondary button</cds-button>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Building a Basic Popover in HTML\nDESCRIPTION: This HTML example constructs a basic popover component with a content area. The popover displays static text data when open, utilizing an imported Carbon icon as a trigger. It requires the Carbon web components to be loaded.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/popover.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-popover open>\n  <div class=\"playground-trigger\">${Checkbox16()}</div>\n  <cds-popover-content>\n    <div class=\"p-3\">\n      <p class=\"popover-title\">Available storage</p>\n      <p class=\"popover-details\">\n        This server has 150 GB of block storage remaining.\n      </p>\n    </div>\n  </cds-popover-content>\n</cds-popover>\n```\n\n----------------------------------------\n\nTITLE: Rendering FluidSelect with Empty Default Option in JSX\nDESCRIPTION: This snippet demonstrates how to create a FluidSelect component with an empty default option. It includes a labelText, helperText, and multiple SelectItem components as children.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FluidSelect/FluidSelect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<FluidSelect\n  id={`select-1`}\n  labelText=\"Select an option\"\n  helperText=\"Optional helper text\">\n  <SelectItem value=\"\" text=\"\" />\n  <SelectItem value=\"option-1\" text=\"Option 1\" />\n  <SelectItem value=\"option-2\" text=\"Option 2\" />\n</FluidSelect>\n```\n\n----------------------------------------\n\nTITLE: Importing Text Input Component in JavaScript\nDESCRIPTION: Demonstrates how to import the Text Input component from the Carbon Web Components library using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/text-input/text-input.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/text-input/index.js';\n```\n\n----------------------------------------\n\nTITLE: Using ClassPrefix component in a React application\nDESCRIPTION: This example demonstrates how to implement the ClassPrefix component at the top-level of a React application to specify a custom prefix that matches the Sass configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ClassPrefix/ClassPrefix.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ClassPrefix } from '@carbon/react';\n\nexport default function MyApp() {\n  return (\n    <ClassPrefix prefix=\"custom\">\n      <Page />\n    </ClassPrefix>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree View with Links Story\nDESCRIPTION: This snippet renders the story for Tree View with links, demonstrating the use of the 'href' attribute for click handling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas of={TreeViewStories.withLinks} />\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Events in JavaScript\nDESCRIPTION: Examples of handling menu open and close events using event listeners\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-menu-opened', (event) => {\n  // use values here\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('cds-menu-closed', (event) => {\n  // use values here\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Lines Skeleton Text HTML Implementation\nDESCRIPTION: Shows how to create multiple lines of skeleton text placeholders by setting the 'type' property to 'line' and using multiple instances of the component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-text/skeleton-text.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-skeleton-text type=\"line\"></cds-skeleton-text>\n<cds-skeleton-text type=\"line\"></cds-skeleton-text>\n<cds-skeleton-text type=\"line\"></cds-skeleton-text>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Table Rows and Cells\nDESCRIPTION: SCSS code that applies background color styling to both table rows (<tr>) and table cells (<td>) elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/core-library-style-questions.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\ntr td {\n  background-color: inherit;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree View with Controlled Expansion Story\nDESCRIPTION: This snippet renders the story for Tree View with controlled expansion, demonstrating the use of the 'is-expanded' attribute.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas of={TreeViewStories.withControlledExpansion} />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Block Components in JavaScript\nDESCRIPTION: This snippet imports essential components (`ArgTypes`, `Canvas`, `Markdown`, `Meta`) from the `@storybook/blocks` package. These components are used within the MDX file to structure and render documentation elements like API tables, interactive examples, and metadata.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Basic AspectRatio Component Usage\nDESCRIPTION: Example showing basic usage of AspectRatio component with article element using the as prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AspectRatio/AspectRatio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AspectRatio as=\"article\" ratio=\"4x3\">\n  Your content\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: Creating ComposedModal with Danger Buttons in Carbon Design System (JSX)\nDESCRIPTION: This code shows how to implement a ComposedModal with danger buttons using the ModalFooter component. It sets primary and secondary button text and applies the danger prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal>\n  ...\n  <ModalFooter danger primaryButtonText=\"OK\" secondaryButtonText=\"Cancel\" />\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Basic MenuItem Implementation in React\nDESCRIPTION: Demonstrates basic menu items including disabled and danger variants with keyboard shortcuts.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/Menu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu open>\n  <MenuItem label=\"Copy\" shortcut=\"⌘C\" />\n  <MenuItem label=\"Paste\" shortcut=\"⌘V\" disabled />\n  <MenuItem label=\"Delete\" kind=\"danger\" />\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Modal with Message Title\nDESCRIPTION: Demonstrates a modal implementation where the title serves as the main message without a body content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/modal.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-modal>\n  <cds-modal-header>\n    <cds-modal-close-button></cds-modal-close-button>\n    <cds-modal-heading>You have been successfully signed out</cds-modal-heading>\n  </cds-modal-header>\n  <cds-modal-body></cds-modal-body>\n</cds-modal>\n```\n\n----------------------------------------\n\nTITLE: Component Translation Implementation in React\nDESCRIPTION: Shows how to implement translations in React components using a translation map and translateWithId function for internationalization support.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst translationIds = {\n  'carbon.component-name.field': 'Default value',\n  'carbon.component-name.other-field': 'Other value',\n};\n\nfunction translateWithId(messageId) {\n  return translationIds[messageId];\n}\n\nfunction MyComponent({ translateWithId: t = translateWithId }) {\n  return (\n    <>\n      <span>t('carbon.component-name.field')</span>\n      <span>t('carbon.component-name.other-field')</span>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding AI Label in cds-ai-label Component - HTML\nDESCRIPTION: This HTML snippet shows how to embed an AI Label in a cds-ai-label component. It demonstrates configuring the size, alignment, and body text, allowing for content customization inside the AI Label. Key parameters include 'size' and 'alignment' attributes for layout control, and expected slots such as 'body-text' for content placement.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table-ai-label.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-ai-label size=\"mini\" alignment=\"bottom-left\">\n  <div slot=\"body-text\">{Content Here}</div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Configuring OverflowMenu Component with Tooltip Alignment\nDESCRIPTION: Example showing how to implement an OverflowMenu component with custom tooltip alignment using the align prop. The menu includes various menu items with different states like disabled, requireTitle, and hasDivider.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OverflowMenu/OverflowMenu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<OverflowMenu aria-label=\"overflow-menu\" align=\"bottom\">\n  <OverflowMenuItem itemText=\"Stop app\" />\n  <OverflowMenuItem itemText=\"Restart app\" />\n  <OverflowMenuItem itemText=\"Rename app\" />\n  <OverflowMenuItem itemText=\"Clone and move app\" disabled requireTitle />\n  <OverflowMenuItem itemText=\"Edit routes and access\" requireTitle />\n  <OverflowMenuItem hasDivider isDelete itemText=\"Delete app\" />\n</OverflowMenu>\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flag for Dynamic Floating Styles in ComboButton\nDESCRIPTION: Example of using FeatureFlags component to enable dynamic floating styles for ComboButton. The code demonstrates how to wrap ComboButton with feature flags to enable dynamic positioning without collision detection using the 'enable-v12-dynamic-floating-styles' flag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboButton/ComboButton.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <ComboButton menuAlignment={args.menuAlignment} label=\"Primary action\">\n    <MenuItem label=\"Second action with a long label description\" />\n    <MenuItem label=\"Third action\" />\n    <MenuItem label=\"Fourth action\" disabled />\n  </ComboButton>\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Using Skip to Content Component in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the Skip to Content component in a web page. The 'href' attribute specifies the target content to skip to.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skip-to-content/skip-to-content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-skip-to-content href=\"#main-content\"></cds-skip-to-content>\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Dialog Element in ComposedModal\nDESCRIPTION: Code example demonstrating how to enable the native dialog element feature flag. This replaces the role=\"dialog\" implementation with the native <dialog> element for browser-managed focus wrapping.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.featureflag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags enableDialogElement>\n  <ComposedModal ... />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Constraints in HTML\nDESCRIPTION: Example showing how to constrain component sizes using CSS utility classes for a button within a custom component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"my-component\">\n  ...\n  <div\n    class=\"cds--layout-constraint--size__default-md cds--layout-constraint--size__min-sm cds--layout-constraint--size__max-lg\">\n    <!-- The button component will now be constrained to the minimum size of 'sm', the maximum of 'lg' and default to 'md' -->\n    <div class=\"button\">...</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Carbon and Running the Example Project\nDESCRIPTION: These commands build the Carbon repository and set up the example project. First, it installs dependencies and builds the Carbon repository. Then, it navigates to the example directory, installs project-specific dependencies, and starts the development server.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/examples/react-router-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Copy Button\nDESCRIPTION: Configuration of a StorybookDemo component that displays the Copy Button component from Carbon Design System. It includes theme selection capability and points to the React implementation demo URL.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/CopyButton/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-copybutton--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Inclusion in SCSS for Carbon Design System\nDESCRIPTION: This snippet demonstrates how to include additional fonts in a Carbon Design System project using SCSS. It shows how to enable the IBM Plex Sans Arabic font.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/fonts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/fonts' with (\n  $fonts: (\n    IBM-Plex-Sans-Arabic: true,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Meta Configuration for Link Stories\nDESCRIPTION: This snippet configures Storybook Meta tags using the Link stories to manage and render stories for the Link components. It associates the Meta component with LinkStories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={LinkStories} />\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in React\nDESCRIPTION: This code snippet imports the Meta component from Storybook's blocks package, which is typically used for configuring Storybook documentation pages.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ModalWrapper/migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Using Modal Title as Message in Carbon Design System (JSX)\nDESCRIPTION: This code demonstrates how to use the modal title as the main message in a Modal component. It sets the modalHeading prop and omits the children prop for a concise message display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst modalHeading =\n  'Are you sure you want to add the \"Speech to Text\" service ' +\n  'to the node-test app?';\n...\n<Modal\n  modalHeading={modalHeading}\n  secondaryButtonText=\"Cancel\"\n  primaryButtonText=\"Add\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Unique IDs for Carbon Checkboxes\nDESCRIPTION: Example demonstrating how to provide unique IDs to checkbox inputs. The id prop is required and ensures each checkbox can be uniquely identified within the DOM.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Checkbox/Checkbox.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox labelText={`Checkbox label`} id=\"checkbox-label-1\" />\n<Checkbox labelText={`Checkbox label`} id=\"checkbox-label-2\" />\n```\n\n----------------------------------------\n\nTITLE: Using the Type Scale Mixin in SCSS\nDESCRIPTION: Alternative method to set font size based on the type scale using a mixin that applies the font-size property directly.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type';\n\n.my-selector {\n  @include type.type-scale(4);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Popover Component with Auto Align - HTML\nDESCRIPTION: Shows how to use the 'cds-popover' web component with the 'autoalign' and 'open' attributes. This snippet places a Checkbox16 icon within the trigger and defines popover content, illustrating how Auto Align manages dynamic positioning relative to viewport/collisions. Inputs include the slot content and open status; output is a rendered popover. Requires the popover component and its dependencies to be loaded beforehand.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-popover open autoalign>\n  <div class=\"playground-trigger\">${Checkbox16()}</div>\n  <cds-popover-content>\n    <div class=\"p-3\">\n      <p class=\"popover-title\">Available storage</p>\n      <p class=\"popover-details\">\n        This server has 150 GB of block storage remaining.\n      </p>\n    </div>\n  </cds-popover-content>\n</cds-popover>\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/web-components with Yarn\nDESCRIPTION: Command to install the @carbon/web-components package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/web-components\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Web Components in a Module Bundler - JavaScript\nDESCRIPTION: Demonstrates how to import @carbon/web-components modules for dropdowns using JavaScript ES modules syntax. This is intended for use with module bundlers like Vite, Rollup, or Webpack that resolve ES6 imports. Prerequisites: module bundler configured, @carbon/web-components installed via npm or Yarn. Inputs: None directly. Outputs: Registers web components for use in your app's HTML markup.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/welcome.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/dropdown/dropdown.js';\nimport '@carbon/web-components/es/components/dropdown/dropdown-item.js';\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Button with renderIcon in Carbon v10\nDESCRIPTION: This example demonstrates how to use the renderIcon prop in Carbon Design System v10 to render an icon within a Button component. It imports an icon from the @carbon/icons-react package and passes it to the Button component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AddFilled16 from '@carbon/icons-react/lib/add--filled/16';\n\n...\n\n<Button renderIcon={AddFilled16} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Menu Button with Active State Attributes in HTML\nDESCRIPTION: This snippet shows a header menu button in an active state. It includes a custom aria-label, disabled attribute, and additional CSS classes to indicate the active state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"button-label-active\"\n  class=\"cds--header__action cds--header__action--active cds--header__menu-toggle cds--header__menu-trigger\"\n  disabled=\"\"\n  part=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Alternative FlexGrid Style Implementation\nDESCRIPTION: Different approaches to enable FlexGrid styles using SCSS modules and mixins.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n/* Option 2: Use the flexgrid module */\n\n@use '@carbon/react/scss/grid/flexbox';\n\n/* Option 3: Use the grid module and call the flex-grid mixin */\n\n@use '@carbon/react/scss/grid';\n@include grid.flex-grid();\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Textarea component from the Carbon Web Components library using JavaScript modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/textarea/textarea.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/textarea/index.js';\n```\n\n----------------------------------------\n\nTITLE: Styling Icon Fill Color with CSS\nDESCRIPTION: CSS example showing how to customize icon fill color using a class\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nsvg.my-custom-class {\n  fill: rebeccapurple;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Various Attributes for Button Element in Carbon Design System\nDESCRIPTION: This snippet demonstrates a cds-button component with additional attributes, including disabled state, secondary style, and small size. It uses the <button> element and includes slots for content and icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-btn.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--disabled cds--btn--secondary cds--btn--sm\"\n  disabled=\"\"\n  id=\"button\"\n  part=\"button\"\n  type=\"submit\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic AILabel Content Structure in React\nDESCRIPTION: Shows the basic structure for implementing an AILabel component with content inside a callout.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel>\n  <AILabelContent>\n    {Content Here}\n  </AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Including the Typography Reset in SCSS\nDESCRIPTION: How to include the optional typography reset which sets base font properties on html and body elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type';\n\n:root {\n  @include type.reset();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Carbon v10 Theme Values via JavaScript\nDESCRIPTION: Demonstrates how to import and use v10 theme values (white, g10, g90, g100) from the @carbon/themes package in v11. This is useful for applications that need to maintain compatibility with the previous version's theme tokens.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v10 } from '@carbon/themes';\n\nconst { white, g10, g90, g100 } = v10;\n```\n\n----------------------------------------\n\nTITLE: Carbon CSS Grid Implementation\nDESCRIPTION: Loading Carbon's CSS grid system with corresponding grid classes using CDN links for specific versions or next tag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n// SPECIFIC VERSION\n<link\n  rel=\"stylesheet\"\n  href=\"https://1.www.s81c.com/common/carbon/web-components/version/[v2.x.y]/cssgrid.css\" />\n\n// NEXT tag\n<link\n  rel=\"stylesheet\"\n  href=\"https://1.www.s81c.com/common/carbon/web-components/tag/next/cssgrid.css\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Icons with Icon Helpers\nDESCRIPTION: Example showing how to render a Carbon icon using the icon-helpers package with toSVG and getAttributes utilities.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAttributes, toSVG } from '@carbon/icon-helpers';\nimport addIcon from '@carbon/icons/es/add/16';\n\nconst addIconNode = toSVG({\n  ...addIcon,\n  attrs: getAttributes(addIcon.attrs),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo Component for Carbon Grid in JSX\nDESCRIPTION: This code snippet renders a StorybookDemo component to display various grid configurations from the Carbon Design System. It includes options for different layouts such as default, condensed, full-width, and responsive grids, allowing users to explore different grid behaviors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  wide\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'elements-grid--default'\n    },\n    {\n      label: 'Condensed',\n      variant: 'elements-grid--condensed'\n    },\n    {\n      label: 'Full Width',\n      variant: 'elements-grid--full-width'\n    },\n    {\n      label: 'Grid Start End',\n      variant: 'elements-grid--grid-start-end'\n    },\n    {\n      label: 'Mixed Gutter Modes',\n      variant: 'elements-grid--mixed-gutter-modes'\n    },\n    {\n      label: 'Narrow',\n      variant: 'elements-grid--narrow'\n    },\n    {\n      label: 'Offset',\n      variant: 'elements-grid--offset'\n    },\n    {\n      label: 'Responsive',\n      variant: 'elements-grid--responsive'\n    },\n    {\n      label: 'Subgrid',\n      variant: 'elements-grid--subgrid'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Font Path in SCSS for Carbon Design System\nDESCRIPTION: This snippet shows how to configure a custom font path for the Carbon Design System using SCSS. It sets a custom CDN URL for font files.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/fonts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/config' with (\n  $font-path: 'https://cdn.custom-font-path.com/fonts'\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon React with NPM\nDESCRIPTION: Command to install @carbon/react package using NPM package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/react\n```\n\n----------------------------------------\n\nTITLE: Using Colors in SCSS with Carbon Design System\nDESCRIPTION: Example of importing and using color swatches from the IBM Design Language in a SCSS file. This snippet demonstrates how to reference colors by their swatch and grade.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/colors';\n\n.my-selector {\n  background-color: colors.$blue-50;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering NumberInput Default Story in Storybook Canvas\nDESCRIPTION: This snippet renders the default NumberInput story in a Storybook Canvas component, with an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/NumberInput.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={NumberInputStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(NumberInputStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tile Component in JavaScript\nDESCRIPTION: Shows how to import the Tile component from the Carbon Web Components library using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/tile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/tile/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Skip to Content Feature in JSX\nDESCRIPTION: This code defines a Storybook demo configuration for the Skip to Content component. It includes the URL to the Carbon Web Components documentation and specifies a default variant to display in the demo.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skip-to-content/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-skip-to-content--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Formatting Date-Only Ranges in JavaScript\nDESCRIPTION: Shows how to format date ranges without time information by setting timeStyle to null. This is useful when only the date portion of a range is relevant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.absolute.formatRange(startDate, endDate, { timeStyle: null });\n// Apr 28, 2016 – Jul 1, 2018\n```\n\n----------------------------------------\n\nTITLE: Rendering FluidSelect with Custom Option Default in JSX\nDESCRIPTION: This snippet illustrates how to create a FluidSelect component with a custom default option. It uses the defaultValue prop to set the initial selected option.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FluidSelect/FluidSelect.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<FluidSelect\n  id={`select-3`}\n  labelText=\"Select an option\"\n  helperText=\"Optional helper text\"\n  defaultValue=\"option-3\">\n  <SelectItem value=\"option-1\" text=\"Option 1\" />\n  <SelectItem value=\"option-2\" text=\"Option 2\" />\n  <SelectItem value=\"option-3\" text=\"Option 3\" />\n</FluidSelect>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Elements Sass Module Entry\nDESCRIPTION: Example showing how to import the modular Sass entrypoint\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/elements/scss/index';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for DataTable Variants\nDESCRIPTION: JSX configuration that sets up multiple DataTable demo variants in Storybook. The configuration includes theme selector support and defines 14 different variants showcasing various DataTable features like batch actions, filtering, sorting, and toolbars.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  wide\n  tall\n  variants={[\n    {\n      label: 'Basic',\n      variant: 'components-datatable-basic--default'\n    },\n    {\n      label: 'Batch Actions',\n      variant: 'components-datatable-batch-actions--default'\n    },\n    {\n      label: 'Dynamic',\n      variant: 'components-datatable-dynamic--default'\n    },\n    {\n      label: 'Expansion',\n      variant: 'components-datatable-expansion--default'\n    },\n    {\n      label: 'Batch Expansion',\n      variant: 'components-datatable-expansion--batch-expansion'\n    },\n    {\n      label: 'Filtering',\n      variant: 'components-datatable-filtering--default'\n    },\n    {\n      label: 'Selection',\n      variant: 'components-datatable-selection--default'\n    },\n    {\n      label: 'With Radio Selection',\n      variant: 'components-datatable-selection--with-radio-selection'\n    },\n    {\n      label: 'With Selection And Sorting',\n      variant: 'components-datatable-selection--with-selection-and-sorting'\n    },\n    {\n      label: 'Sorting',\n      variant: 'components-datatable-sorting--default'\n    },\n    {\n      label: 'Toolbar',\n      variant: 'components-datatable-toolbar--default'\n    },\n    {\n      label: 'Persistent Toolbar',\n      variant: 'components-datatable-toolbar--persistent-toolbar'\n    },\n    {\n      label: 'Small Persistent Toolbar',\n      variant: 'components-datatable-toolbar--small-persistent-toolbar'\n    },\n    {\n      label: 'With Overflow Menu',\n      variant: 'components-datatable-toolbar--with-overflow-menu'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Link Component API Argument Types Display\nDESCRIPTION: This snippet makes use of the ArgTypes component to display the argument types and properties for the 'cds-link' component within the Storybook.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ArgTypes of=\"cds-link\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Disabled ComboBox in React\nDESCRIPTION: Example of using the ComboBox component in a disabled state. The documentation notes that disabled states should not be the sole means of conveying information to users.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/ComboBox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox disabled />\n```\n\n----------------------------------------\n\nTITLE: Setting Up State for Dismissable Tabs\nDESCRIPTION: Demonstrates how to set up a state array of tab objects with labels, panels, and properties like disabled status for creating dismissable tabs.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tabs = [\n  {\n    label: 'Tab label 1',\n    panel: <TabPanel>Tab Panel 1</TabPanel>,\n  },\n  {\n    label: 'Tab label 2',\n    panel: <TabPanel>Tab Panel 2</TabPanel>,\n  },\n  {\n    label: 'Tab label 3',\n    panel: <TabPanel>Tab Panel 3</TabPanel>,\n    disabled: true,\n  },\n  {\n    label: 'Tab label 4',\n    panel: <TabPanel>Tab Panel 4</TabPanel>,\n  },\n];\nconst [renderedTabs, setRenderedTabs] = useState(tabs);\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Components\nDESCRIPTION: Shows how to import the Modal and Button components from the Carbon web components library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/modal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/modal/index.js';\nimport '@carbon/web-components/es/components/button/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for OverflowMenu Variants\nDESCRIPTION: Sets up a live demo environment using StorybookDemo component to showcase different variants of the OverflowMenu component. Configures theme selector and specifies two variants - default and custom icon rendering.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OverflowMenu/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-overflowmenu--default'\n    },\n    {\n      label: 'Render custom Icon',\n      variant: 'components-overflowmenu--render-custom-icon'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Minimum Attributes for Button Element in Carbon Design System\nDESCRIPTION: This snippet shows the basic structure of a cds-button component using the <button> element with minimum required attributes. It includes class names for styling, an ID, and slots for content and icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-btn.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--lg cds--btn--primary\"\n  id=\"button\"\n  part=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Carbon Design System React Select Component\nDESCRIPTION: This code snippet sets up a StorybookDemo component to showcase different variants of the Select component from the Carbon Design System React implementation. It includes options for theme selection and specifies three variants: default, inline, and an experimental fluid version.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Select/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-select--default'\n    },\n    {\n      label: 'Inline',\n      variant: 'components-select--inline'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidselect--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DataTable Headers\nDESCRIPTION: Example of how to define table headers with key-header pairs that correspond to the data in rows.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/DataTable.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst headers = [\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'status',\n    header: 'Status',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using rgba Helper for Opacity in JavaScript\nDESCRIPTION: Demonstrates how to use the rgba helper function to define color values with opacity. The example imports the rgba helper and uses it to define the overlay01 token.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  blue60,\n  blue80,\n  blue100,\n  // ...\n\n  // Include the `rgba` helper\n  rgba,\n} from '@carbon/colors';\n\n// ...\n\nexport const overlay01 = rgba(gray100, 0.5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Five Full-Width Tabs, Each Spanning Three Columns - React JSX\nDESCRIPTION: Shows usage of five tabs with each tab spanning three grid columns (lg={15}), providing an evenly distributed, grid-aligned tabs layout for larger viewports. This approach allows customizing the tab width in accordance to the layout's needs by matching the grid's column count. Requires the same dependencies as previous snippets and restricts usage of fullWidth to large screens and limited tab counts.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid condensed>\\n  <Column lg={15}>\\n    <Tabs>\\n      <TabList aria-label=\\\"List of tabs\\\" contained fullWidth>\\n        <Tab>Tab Label 1</Tab>\\n        <Tab>Tab Label 2</Tab>\\n        <Tab disabled>Tab Label 3</Tab>\\n        <Tab>Tab Label 4</Tab>\\n        <Tab>Tab Label 5</Tab>\\n      </TabList>\\n      <TabPanels>\\n        <TabPanel>Tab Panel 1</TabPanel>\\n        <TabPanel>Tab Panel 2</TabPanel>\\n        <TabPanel>Tab Panel 3</TabPanel>\\n        <TabPanel>Tab Panel 4</TabPanel>\\n        <TabPanel>Tab Panel 5</TabPanel>\\n      </TabPanels>\\n    </Tabs>\\n  </Column>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Legacy Tab Composition - Carbon Tabs v10 Example - React JSX\nDESCRIPTION: Provides an example of Tabs composition before the v11 update. Each Tab contains its label and content as props or children, with the label prop and disabled states shown. This structure uses the old Tabs API, where tab content and labeling are not separated. Requires React and Carbon Tabs and Tab components, and demonstrates the legacy approach to associating tab panels and tabs.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n<Tabs>\\n  <Tab label=\\\"Tab label 1\\\">\\n    <p>Content for first tab goes here.</p>\\n  </Tab>\\n  <Tab label=\\\"Tab label 2\\\">\\n    <p>Content for second tab goes here.</p>\\n  </Tab>\\n  <Tab label=\\\"Tab label 3\\\" disabled>\\n    <p>Content for third tab goes here.</p>\\n  </Tab>\\n  <Tab\\n    label=\\\"Tab label 4 shows truncation\\\"\\n    title=\\\"Tab label 4 shows truncation\\\">\\n    <p>Content for fourth tab goes here.</p>\\n  </Tab>\\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Form Component in Storybook Canvas\nDESCRIPTION: This snippet renders the default Form component story in a Storybook Canvas. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Form/Form.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={FormStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(FormStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Search Dependencies\nDESCRIPTION: Imports required dependencies from Storybook blocks, Search stories, and code previewer configuration\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Search/Search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as SearchStories from './Search.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and Utilities in JavaScript\nDESCRIPTION: Imports essential Storybook UI blocks (ArgTypes, Canvas, Markdown, Meta) and utility functions for CDN asset inclusion from internal packages. Aggregates all code snippet stories to enable live demonstration blocks throughout the documentation. Required dependencies are Storybook and internal Carbon utility modules. No parameters are needed, and this sets up necessary context for rendering live examples of the code snippet component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs, cdnCss } from '../../globals/internal/storybook-cdn';\nimport * as CodeSnippetStories from './code-snippet.stories';\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Focus Wrap Feature Flag in React\nDESCRIPTION: Demonstrates how to enable the experimental focus wrap without sentinels feature flag for the ActionableNotification component. This new approach modifies the DOM to handle focus wrapping without hidden sentinel nodes, instead using the tabbable order of interactive child nodes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Notification/Notification.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-experimental-focus-wrap-without-sentinels': true,\n  }}>\n  <ActionableNotification />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Icons React with Yarn\nDESCRIPTION: Alternative installation command using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/icons-react\n```\n\n----------------------------------------\n\nTITLE: Update for Chat Button Component\nDESCRIPTION: Updates the chat button component to the latest version with a no-icon option, providing more flexibility in its visual presentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n* **chat-button:** update to latest with no icon option ([#11577](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11577)) ([4106d3d](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/4106d3d490a611ef99844fb6812b6790e5b678c3))\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Slider Dependencies\nDESCRIPTION: Import statements for Storybook documentation components and Slider stories, along with code previewer configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Slider/Slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Story, Canvas, Meta } from '@storybook/blocks';\nimport * as SliderStories from './Slider.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Progress Bar Component in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the Carbon Progress Bar web component module. This import makes the `<cds-progress-bar>` custom element available for use in HTML.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-bar/progress-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/progress-bar/index.js';\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Tile Contrast - Single Flag\nDESCRIPTION: SCSS mixin to enable the experimental improved contrast feature flag for tiles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tile/Tile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@include feature-flags.enable('enable-experimental-tile-contrast');\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Button Sets in HTML with Carbon Design System\nDESCRIPTION: This code shows how to create a vertically arranged button set using the stacked attribute with the cds-button-set component. The example contains a secondary button followed by a primary button, displayed in a vertical stack.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/button/button.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-button-set stacked=\"\">\n  <cds-button kind=\"secondary\">Secondary button</cds-button>\n  <cds-button kind=\"primary\">Primary button</cds-button>\n</cds-button-set>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Modal Component in React\nDESCRIPTION: This code snippet sets up a Storybook demo for the Modal component from the Carbon Design System. It defines multiple variants of the Modal, including default, danger, full-width, passive, and with state manager. The demo is configured to use a theme selector and display in a tall format.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  tall\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-modal--default'\n    },\n    {\n      label: 'Danger Modal',\n      variant: 'components-modal--danger-modal'\n    },\n    {\n      label: 'Full Width',\n      variant: 'components-modal--full-width'\n    },\n    {\n      label: 'Passive Modal',\n      variant: 'components-modal--passive-modal'\n    },\n    {\n      label: 'With State Manager',\n      variant: 'components-modal--with-state-manager'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Dropdown Variants\nDESCRIPTION: JSX configuration for a StorybookDemo component that renders different variants of the Carbon Design System Dropdown component. Includes theme selector and specifies four variants: default, inline, fluid, and fluid condensed, with the latter two marked as unstable/experimental.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  tall\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-dropdown--default'\n    },\n    {\n      label: 'Inline',\n      variant: 'components-dropdown--inline'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluiddropdown--default'\n    },\n    {\n      label: 'Fluid Condensed (unstable)',\n      variant: 'experimental-unstable-fluiddropdown--condensed'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon React Styles\nDESCRIPTION: Examples of importing Carbon React styles using Sass, showing both full library and individual component imports\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// Bring in all the styles for Carbon\n@use '@carbon/react';\n\n// Or bring in the styles for just one component\n@use '@carbon/react/scss/components/button';\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API in JSX\nDESCRIPTION: This code renders the ArgTypes component, which automatically generates documentation for the component's props based on its TypeScript definitions or PropTypes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/UIShell/UIShell.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Importing Flexbox Grid Directly in Carbon Styles\nDESCRIPTION: Alternative approach to using the flexbox grid by importing it directly from its specific path.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/grid/flexbox';\n```\n\n----------------------------------------\n\nTITLE: Rendering TreeView with Custom Icons Example in Storybook Canvas\nDESCRIPTION: This snippet demonstrates how to render a TreeView example with custom icons in a Storybook Canvas component. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/TreeView.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={TreeViewStories.WithIcons}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () =>\n        stackblitzPrefillConfig(\n          TreeViewStories.WithIcons,\n          \"import { Document, Folder } from '@carbon/icons-react';\"\n        ),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-link with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the basic HTML structure of the cds-link component with minimal attributes. It includes the main link element, a slot for content, and a hidden icon slot.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-link.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a\n  class=\"cds--link\"\n  href=\"about:blank\"\n  id=\"link\"\n  part=\"link\"\n  tabindex=\"0\"\n>\n  <slot>\n  </slot>\n  <div\n    class=\"cds--link__icon\"\n    hidden=\"\"\n  >\n    <slot name=\"icon\">\n    </slot>\n  </div>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Rendering IconButton Demo with StorybookDemo in JSX\nDESCRIPTION: This code snippet sets up a live demo for the IconButton component using the StorybookDemo component. It configures the demo with theme selection and specifies the default variant of the IconButton to be displayed.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/IconButton/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-iconbutton--default',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Navigation Menu with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a side navigation menu with minimum required attributes. It includes an expando button and a menu body with a slot for content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-expanded=\"false\"\n  aria-haspopup=\"true\"\n  class=\"cds--side-nav__submenu\"\n  part=\"expando\"\n  type=\"button\"\n>\n  <div\n    class=\"cds--side-nav__icon\"\n    hidden=\"\"\n    id=\"title-icon-container\"\n    part=\"title-icon-container\"\n  >\n    <slot name=\"title-icon\">\n    </slot>\n  </div>\n  <span\n    class=\"cds--side-nav__submenu-title\"\n    part=\"title\"\n  >\n  </span>\n  <div\n    class=\"cds--side-nav__icon cds--side-nav__icon--small cds--side-nav__submenu-chevron\"\n    part=\"expando-icon-container\"\n  >\n  </div>\n</button>\n<ul\n  class=\"cds--side-nav__menu\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Formatting Time in JavaScript with dateTimeFormat\nDESCRIPTION: Shows how to format timestamps as absolute time values with different locales and styles. Supports 'full', 'long', 'medium', and 'short' styles with 'short' as the default.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.absolute.formatTime(timestamp);\n// 3:47 PM\n\ndateTimeFormat.absolute.formatTime(timestamp, { locale: 'de-DE' });\n// 15:47\n\ndateTimeFormat.absolute.formatTime(timestamp, { style: 'long' });\n// 3:47:12 PM\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Components in React\nDESCRIPTION: Demonstrates importing the necessary components and stories for Breadcrumb implementation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Breadcrumb/Breadcrumb.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Story, Canvas, ArgTypes, Meta } from '@storybook/blocks';\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbSkeleton } from '../Breadcrumb';\nimport * as BreadcrumbStories from './Breadcrumb.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Status Indicator Demo with Storybook in JSX\nDESCRIPTION: This code snippet renders a Storybook demo for the Status Indicator component. It uses the StorybookDemo component to display an interactive example of the Icon Indicator variant, with theme selection enabled.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/IconIndicator/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-statusindicator-iconindicator--playground'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Themes in JavaScript\nDESCRIPTION: Example showing available JavaScript imports from the @carbon/themes package, including theme objects and specific token values.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/README.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  // An object of all themes\n  themes,\n\n  // Direct theme values\n  white,\n  g10,\n  g90,\n  g100,\n\n  // Specific token values\n  interactive01,\n  interactive02,\n} from '@carbon/themes';\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Combo Box with Various Attributes in HTML\nDESCRIPTION: HTML structure of the cds-combo-box component with various states including disabled and invalid. Additional CSS classes and attributes are applied to indicate these states, demonstrating how the component adapts to different configurations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-combo-box.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label\n  class=\"cds--label cds--label--disabled\"\n  hidden=\"\"\n  part=\"title-text\"\n>\n  <slot name=\"title-text\">\n  </slot>\n</label>\n<div\n  class=\"cds--combo-box cds--dropdown cds--dropdown--invalid cds--list-box cds--list-box--disabled cds--list-box--md\"\n  data-invalid=\"\"\n  role=\"listbox\"\n>\n  <div\n    aria-controls=\"menu-body\"\n    aria-expanded=\"false\"\n    aria-haspopup=\"listbox\"\n    aria-labelledby=\"trigger-label\"\n    aria-owns=\"menu-body\"\n    class=\"cds--list-box__field\"\n    part=\"trigger-button\"\n  >\n    <input\n      aria-autocomplete=\"list\"\n      aria-controls=\"menu-body\"\n      aria-label=\"\"\n      class=\"cds--text-input\"\n      disabled=\"\"\n      id=\"trigger-label\"\n      placeholder=\"\"\n      role=\"combobox\"\n    >\n    <div\n      class=\"cds--list-box__menu-icon\"\n      id=\"trigger-caret\"\n    >\n    </div>\n  </div>\n  <slot name=\"slug\">\n  </slot>\n</div>\n<div\n  class=\"cds--form__helper-text cds--form__helper-text--disabled\"\n  part=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n  </slot>\n</div>\n<div\n  aria-live=\"assertive\"\n  aria-relevant=\"additions text\"\n  class=\"cds--assistive-text\"\n  role=\"status\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Icon Helper in Handlebars Templates\nDESCRIPTION: Shows how to use the carbon-icon helper in Handlebars templates to incorporate icons from @carbon/icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{carbon-icon 'ChevronDownGlyph'}}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Layer Component in React\nDESCRIPTION: Configuration for a StorybookDemo component that displays the Carbon Design System Layer component. Includes theme selection functionality and points to the React Carbon Design System demo URL.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layer/docs/use-layer-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-layer--use-layer'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components\nDESCRIPTION: Import statements for Storybook documentation components and FormGroup stories\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormGroup/FormGroup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Story, Canvas, Meta } from '@storybook/blocks';\nimport * as FormGroupStories from './FormGroup.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Search Component via JavaScript - JavaScript\nDESCRIPTION: This snippet shows how to import the Search web component from the Carbon Web Components library using ECMAScript modules. The import statement loads all relevant JS and underlying CSS needed for the <cds-search> custom element. No additional configuration is required beyond ensuring the Carbon Web Components package is installed as a dependency and that a module bundler (or similar environment) is being used. Input: N/A; Output: Search component registered globally for use in HTML.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/search/search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/search/index.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Stories for AI Skeleton Documentation\nDESCRIPTION: Imports necessary Storybook components and story files for documenting the AI Skeleton components. It also imports a helper function for code previewing with Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AISkeleton/AISkeleton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as AISkeletonStories from './AISkeletonIcon.stories';\nimport * as AISkeletonPlaceholderStories from './AISkeletonPlaceholder.stories';\nimport * as AISkeletonTextStories from './AISkeletonText.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Using Icon Components with Size Prop (After)\nDESCRIPTION: New approach in v11 where a single icon component is imported and the size is specified using the size prop, simplifying the API and reducing import statements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Modules in MDX\nDESCRIPTION: This snippet imports necessary modules for building the Storybook documentation page. It includes components from `@storybook/blocks` for rendering documentation elements (`ArgTypes`, `Canvas`, `Markdown`, `Meta`), a helper function `cdnJs` for CDN links, and all exported stories (`FileUploaderStories`) from the corresponding stories file to display component examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/file-uploader/file-uploader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as FileUploaderStories from './file-uploader.stories';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Carbon Design System Toggle Component in React\nDESCRIPTION: This code snippet sets up a live Storybook demo for the Toggle component from the Carbon Design System. It configures the demo with theme selection and defines two variants: a default toggle and a small toggle.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Toggle/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-toggle--default'\n    },\n    {\n      label: 'Small Toggle',\n      variant: 'components-toggle--small-toggle'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API using ArgTypes Block in MDX/JSX\nDESCRIPTION: This MDX/JSX snippet uses the `ArgTypes` component imported from `@storybook/blocks`. It automatically generates and displays a table of the component's properties (arguments), events, and slots, specifically targeting the `cds-form-group` web component for API documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of=\"cds-form-group\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components\nDESCRIPTION: Import statement for required Storybook documentation components including Canvas, ArgTypes, and Meta.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Notification/Notification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, ArgTypes, Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in React\nDESCRIPTION: Shows how to import the Accordion, AccordionItem, and AccordionSkeleton components along with Storybook dependencies.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Accordion/Accordion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Accordion, { AccordionItem, AccordionSkeleton } from '../Accordion';\nimport { ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as AccordionStories from './Accordion.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon List Web Component via JavaScript\nDESCRIPTION: This JavaScript snippet imports the cds-unordered-list component from the Carbon Web Components package. It is essential to include this import at the top of your JavaScript or application entry point to make the custom element <cds-unordered-list> available in your project. No parameters are required and there are no outputs, but you must ensure that '@carbon/web-components' is installed as a dependency in your project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/list/unordered-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/list/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Multi-Line Code Snippet with Various Attributes\nDESCRIPTION: Shows the HTML structure of a multi-line code snippet with various attributes. Includes a container with multi-line support, fixed height constraints, and a copy button component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div\n  aria-label=\"code-snippet\"\n  aria-multiline=\"true\"\n  aria-readonly=\"true\"\n  class=\"cds--snippet-container\"\n  role=\"textbox\"\n  style=\"max-height:240px;min-height:48px;\"\n  tabindex=\"0\"\n>\n  <pre>\n    <code>\n      <slot>\n      </slot>\n    </code>\n  </pre>\n</div>\n<cds-copy-button\n  button-class-name=\"\"\n  feedback=\"Copied!\"\n  feedback-timeout=\"2000\"\n>\n  Copy to Clipboard\n</cds-copy-button>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Canvas with UX Example InlineLoading Story\nDESCRIPTION: This JSX snippet renders a Storybook Canvas component with the UX example InlineLoading story. It also includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/InlineLoading/InlineLoading.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={InlineLoadingStories.UxExample}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(InlineLoadingStories.UxExample),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Pagination with Minimum Attributes in HTML\nDESCRIPTION: HTML structure for a basic pagination component with minimum attributes. Shows the left section with item count, divider, and right section with navigation buttons for previous and next pages.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--pagination__left\">\n  <slot name=\"page-sizes-select\">\n  </slot>\n  <div class=\"cds-ce--pagination__divider\">\n  </div>\n  <span class=\"cds--pagination__items-count cds--pagination__text\">\n    Item 1–10\n  </span>\n</div>\n<div class=\"cds-ce--pagination__divider\">\n</div>\n<div class=\"cds--pagination__right\">\n  <slot>\n  </slot>\n  <div class=\"cds--pagination__control-buttons\">\n    <button\n      class=\"cds--pagination__button cds--pagination__button--backward cds--pagination__button--no-index\"\n      disabled=\"\"\n      title=\"Previous page\"\n    >\n    </button>\n    <button\n      class=\"cds--pagination__button cds--pagination__button--forward\"\n      title=\"Next page\"\n    >\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing StorybookDemo for Content Switcher in React\nDESCRIPTION: This code snippet demonstrates how to use the StorybookDemo component to display a live demo of the Content Switcher component from the Carbon Design System. It configures the demo with theme selection capability, points to the React implementation URL, and specifies the default variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  wide\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-contentswitcher--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: AI Label with Action Bar Implementation\nDESCRIPTION: Example showing how to implement the AI Label with an action bar containing multiple icon buttons and actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-label/ai-label.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-label>\n  {Content Here}\n  <cds-icon-button kind=\"ghost\" slot=\"actions\" size=\"lg\">\n    ${View16({ slot: 'icon' })}\n    <span slot=\"tooltip-content\"> View </span>\n  </cds-icon-button>\n  <cds-icon-button kind=\"ghost\" slot=\"actions\" size=\"lg\">\n    ${FolderOpen16({ slot: 'icon' })}\n    <span slot=\"tooltip-content\"> Open folder</span>\n  </cds-icon-button>\n  <cds-icon-button kind=\"ghost\" slot=\"actions\" size=\"lg\">\n    ${Folders16({ slot: 'icon' })}\n    <span slot=\"tooltip-content\"> Folders </span>\n  </cds-icon-button>\n  <cds-ai-label-action-button>View details</cds-ai-label-action-button>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for CodeSnippet Component Variants in React\nDESCRIPTION: This code configures a StorybookDemo component to display different variants of the CodeSnippet component from Carbon Design System. It includes theme selection capability and links to the React implementation with three display variants: Inline, Multiline, and Singleline.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/CodeSnippet/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Inline',\n      variant: 'components-codesnippet--inline'\n    },\n    {\n      label: 'Multiline',\n      variant: 'components-codesnippet--multiline'\n    },\n    {\n      label: 'Singleline',\n      variant: 'components-codesnippet--singleline'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring IBM Plex Loading Options in SCSS\nDESCRIPTION: This snippet demonstrates various configuration options for loading IBM Plex fonts in SCSS. It includes options for using per-family loading, Akamai CDN, and custom font paths.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// Option 1: Use legacy monolithing `@ibm/plex` assets\n// No configuration is needed, this is the default\n\n// Option 2: Use per-family loading (recommended)\n@use '@carbon/react' with (\n  $use-per-family-plex: true\n);\n\n// Option 3: Use Akamai CDN\n@use '@carbon/react' with (\n  $use-akamai-cdn: true\n);\n\n// When using option 1 or 2, optionally provide a custom font path.\n// This can be used with the default `@ibm/plex` configuration, or\n// with $use-per-family-plex.\n@use '@carbon/react' with (\n  $use-per-family-plex: true\n);\n$font-path: 'path/to/fonts';\n```\n\n----------------------------------------\n\nTITLE: Theme Zoning Complete Example\nDESCRIPTION: Complete example showing implementation of Carbon theme zones with various components including dropdown, button, and tag elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"https://1.www.s81c.com/common/carbon/web-components/tag/latest/themes.css\" />\n  <script\n      type=\"module\"\n      src=\"https://1.www.s81c.com/common/carbon/web-components/version/[v2.x.y]/dropdown.min.js\"\n    ></script>\n    <script\n      type=\"module\"\n      src=\"https://1.www.s81c.com/common/carbon/web-components/version/[v2.x.y]/button.min.js\"\n    ></script>\n     <script\n      type=\"module\"\n      src=\"https://1.www.s81c.com/common/carbon/web-components/version/[v2.x.y]/tag.min.js\"\n    ></script>\n\n  ...\n</head>\n<body>\n<cds-dropdown value=\"bar\" class=\"cds-theme-zone-white\">\n      <cds-dropdown-item value=\"foo\">Foo</cds-dropdown-item>\n      <cds-dropdown-item value=\"bar\">Bar</cds-dropdown-item>\n      <cds-dropdown-item value=\"baz\">Baz</cds-dropdown-item>\n    </cds-dropdown>\n    <div\n      class=\"cds-theme-zone-g100\"\n      style=\"padding: 50px; background: var(--cds-background)\"\n    >\n      <cds-button kind=\"tertiary\">button</cds-button>\n      <cds-tag filter type=\"red\" title=\"Clear selection\">\n        This is a tag\n      </cds-tag>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Indicator Story Components\nDESCRIPTION: Imports required components from Storybook blocks and Progress Indicator stories for documentation purposes. Also imports a code previewer configuration for Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ProgressIndicator/ProgressIndicator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Story, Canvas, ArgTypes, Meta } from '@storybook/blocks';\nimport * as ProgressIndicatorStories from './ProgressIndicator.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component in JavaScript\nDESCRIPTION: Shows how to import the Form component from Carbon Web Components library, which is required when the input is part of a form.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/text-input/text-input.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/form/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo Variants in JSX\nDESCRIPTION: This JavaScript array literal, used within a JSX component prop, defines the variants to be displayed by the `StorybookDemo` component. Each object specifies a human-readable `label` and a `variant` string which corresponds to the Storybook story ID (e.g., 'components-radio-button--default'). This configuration allows the demo component to fetch and render specific states of the Carbon Web Component from the provided Storybook instance.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/radio-button/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\\n    {\\n      label: 'Default',\\n      variant: 'components-radio-button--default'\\n    }\\n  ]\n```\n\n----------------------------------------\n\nTITLE: Rendering Anchor Element with Minimum Attributes in Carbon Design System\nDESCRIPTION: Shows how the cds-button component renders when used as an anchor element with minimal attributes. Despite the description mentioning an anchor element, the output shows a button element with standard CSS classes and slots.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-button.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--lg cds--btn--primary cds--layout--size-lg\"\n  id=\"button\"\n  part=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a cds-select component in invalid state in HTML\nDESCRIPTION: This example shows the cds-select component in an invalid state with an error message. It includes special CSS classes for invalid state and proper ARIA attributes for accessibility to indicate the error condition.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-select.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--select cds--select--invalid\">\n  <label\n    class=\"cds--label\"\n    for=\"input\"\n  >\n    <slot name=\"label-text\">\n    </slot>\n  </label>\n  <div\n    class=\"cds--select-input__wrapper\"\n    data-invalid=\"\"\n  >\n    <select\n      aria-describedby=\"invalid-text\"\n      aria-invalid=\"true\"\n      aria-readonly=\"false\"\n      class=\"cds--select-input cds--select-input--md\"\n      id=\"input\"\n    >\n      <optgroup\n        class=\"cds--select-optgroup\"\n        label=\"Category 1\"\n      >\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 1\"\n          value=\"all\"\n        >\n          Option 1\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 2\"\n          value=\"cloudFoundry\"\n        >\n          Option 2\n        </option>\n      </optgroup>\n      <optgroup\n        class=\"cds--select-optgroup\"\n        label=\"Category 2\"\n      >\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 3\"\n          value=\"staging\"\n        >\n          Option 3\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 4\"\n          value=\"dea\"\n        >\n          Option 4\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 5\"\n          value=\"router\"\n        >\n          Option 5\n        </option>\n      </optgroup>\n    </select>\n  </div>\n  <div class=\"cds--form-requirement\">\n    validity-message-foo\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Themes in Sass\nDESCRIPTION: Basic Sass import to include the Carbon themes package and its default themes. By default, the white theme will be initialized.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/themes/scss/themes';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and PageHeader Stories in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the PageHeader stories. It also imports a utility function for Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/PageHeader/PageHeader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Story, ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as PageHeaderStories from './PageHeader.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Toggletip Component - JavaScript\nDESCRIPTION: Shows how to import the Toggletip web component from the Carbon library for use in a JavaScript-enabled project. The snippet requires the '@carbon/web-components' package to be installed. This import is needed prior to using the <cds-toggletip> element in HTML; no further parameters are used.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@carbon/web-components/es/components/toggle-tip/index.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Ordered List Web Component in JavaScript\nDESCRIPTION: Imports the JavaScript module required to define and register the `<cds-ordered-list>` and related list item web components. This is necessary to use the components in an HTML file when bundling JavaScript modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/list/ordered-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/list/index.js';\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component Example\nDESCRIPTION: Example of the updated Tooltip component usage in v11 wrapping an interactive button element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@carbon/react';\n\nfunction ExampleComponent() {\n  return (\n    <Tooltip label=\"Close\">\n      <button type=\"button\">X</button>\n    </Tooltip>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of usePrefix Hook in JavaScript\nDESCRIPTION: Demonstrates how to import and use the usePrefix hook to get the Carbon Design System's CSS class prefix in a React component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/internal/usePrefix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePrefix } from '@carbon/react';\n\nfunction ExampleComponent() {\n  const prefix = usePrefix();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Carbon Link Component\nDESCRIPTION: Sets up a StorybookDemo component to showcase different variants of the Carbon Link component. Includes configuration for the default link and a link paired with an icon variant, with theme selector enabled.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-link--default'\n    },\n    {\n      label: 'Paired With Icon',\n      variant: 'components-link--paired-with-icon'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Accessible Icon Link Story Canvas\nDESCRIPTION: Renders the Link component story with icon and accessibility features, including Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/Link.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={LinkStories.PairedWithIcon}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(LinkStories.PairedWithIcon),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Flag Status in JavaScript\nDESCRIPTION: Demonstrates how to use the 'enabled' function to check if a feature flag is enabled in JavaScript.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/feature-flags/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enabled } from '@carbon/feature-flags';\n\nenabled('feature-flag-name');\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component and Related Stories in React\nDESCRIPTION: This snippet shows the import statements for the Pagination component, its stories, and related utilities. It includes imports from Storybook for documentation purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Pagination/Pagination.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as PaginationStories from './Pagination.stories';\nimport Pagination from '../Pagination';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Minimum Attributes for Anchor Element in Carbon Design System\nDESCRIPTION: This snippet shows the basic structure of a cds-button component using the <a> element with minimum required attributes. It includes class names for styling, an ID, href, and slots for content and icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-btn.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--btn cds--btn--lg cds--btn--primary\"\n  href=\"about:blank\"\n  id=\"button\"\n  part=\"button\"\n  role=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextArea with AI Label Story in JSX\nDESCRIPTION: This code snippet renders the TextArea with AI label story using Storybook's Canvas component. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextArea/TextArea.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextAreaStories.withAILabel}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextAreaStories.withAILabel),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Inline Loading Component with Minimum Attributes\nDESCRIPTION: HTML structure for the inline loading component with minimum required attributes. It includes the loading animation container and text slot for custom messages.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--inline-loading__animation\">\n  <div class=\"cds--loading cds--loading--small\">\n  </div>\n</div>\n<p class=\"cds--inline-loading__text\">\n  <slot>\n  </slot>\n</p>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Time Picker\nDESCRIPTION: Sets up a StorybookDemo component to showcase the Time Picker with theme selection and two variants - default and fluid (experimental). Uses Carbon Design System's React implementation with configurable display options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TimePicker/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-timepicker--default'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidtimepicker--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for OverflowMenu Variants in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display live examples of OverflowMenu variants. It includes options for theme selection, custom sizing, and specifies three different variants: Custom Icon, Nested, and OverflowMenu V2.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OverflowMenu/next/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Custom Icon',\n      variant: 'experimental-feature-flags-overflowmenu--custom-icon'\n    },\n    {\n      label: 'Nested',\n      variant: 'experimental-feature-flags-overflowmenu--nested'\n    },\n    {\n      label: 'Overflow Menu V2',\n      variant: 'experimental-feature-flags-overflowmenu--overflow-menu'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Colors in Sass with @carbon/colors\nDESCRIPTION: Demonstrates how to import and use individual color variables from the @carbon/colors package in Sass. This snippet shows how to set the background color of a selector using a specific color from the package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/colors';\n\n.selector {\n  background: colors.$blue-50;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and UI Shell Stories\nDESCRIPTION: This snippet imports necessary components from Storybook and the UI Shell stories. It also imports a CDN JavaScript utility function.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ui-shell/ui-shell.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as UIShellStories from './ui-shell.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing Number Input Component\nDESCRIPTION: Shows how to import the Carbon Web Components number input module via ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/number-input/number-input.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/number-input/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Component API Documentation\nDESCRIPTION: Display of component API documentation using Storybook ArgTypes and custom CDN configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu-button/menu-button.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of=\"cds-menu-button\" />\n<Markdown>{`${cdnJs({ components: ['menu-button'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled State for Anchor Element in Carbon Design System\nDESCRIPTION: This snippet shows how to render a disabled state for a cds-button component when using an anchor-like structure. It uses a <p> element with appropriate classes and includes slots for content and icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-btn.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<p\n  class=\"cds--btn cds--btn--disabled cds--btn--secondary cds--btn--sm\"\n  id=\"button\"\n  part=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Class to Carbon Icon in Handlebars\nDESCRIPTION: Demonstrates how to add a class to an icon using the carbon-icon helper in Handlebars templates.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n{{carbon-icon 'ChevronDownGlyph' class=(add @root.prefix '--dropdown__arrow')}}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for ErrorBoundary Component in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to showcase the ErrorBoundary component from the Carbon Design System. It includes a theme selector and defines two variants: the default ErrorBoundary and one with custom context.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ErrorBoundary/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-errorboundary--default'\n    },\n    {\n      label: 'With Custom Context',\n      variant: 'components-errorboundary--with-custom-context'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Demo with StorybookDemo Component (JSX)\nDESCRIPTION: This JSX snippet uses a custom `StorybookDemo` component to embed an interactive Storybook demo within the documentation. It configures the demo's appearance (`tall`), points to the specific Storybook URL (`url`), and specifies the component variant (`variants` prop containing label and variant ID) to display initially. This component likely renders an iframe or similar structure to host the Storybook content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/shape-indicator/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-status-indicators-shape-indicator--default',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Indicator JavaScript Module\nDESCRIPTION: This snippet imports the Icon Indicator component JavaScript module from the Carbon web components package. It is required to initialize and use the Icon Indicator component on the web page. Ensure '@carbon/web-components' package is installed.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/icon-indicator/icon-indicator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/icon-indicator/index.js';\n```\n\n----------------------------------------\n\nTITLE: Using Color Variables in Sass\nDESCRIPTION: Examples of using color variables in Sass following the swatch-grade naming convention.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\ncolors.$blue-50;\ncolors.$cool-gray-10;\ncolors.$black-100;\ncolors.$white-0;\n```\n\n----------------------------------------\n\nTITLE: Textarea Skeleton Component\nDESCRIPTION: This snippet shows how to use the skeleton variation of the Textarea component for loading states or placeholders.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/textarea/textarea.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-textarea-skeleton></cds-textarea-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Focusable Icon Implementation\nDESCRIPTION: Example showing how to make an icon focusable with tabIndex\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return <Add aria-label=\"Add\" tabIndex=\"0\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Toggle Component API in Storybook\nDESCRIPTION: This snippet uses the Storybook ArgTypes component to display the API documentation for the Toggle component, including its props and events.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle/toggle.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<ArgTypes of=\"cds-toggle\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Layout and Text Direction Example\nDESCRIPTION: Canvas component used to display an example of LayoutDirection and Text components working together.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={TextStories.LayoutAndText} />\n```\n\n----------------------------------------\n\nTITLE: Using Component Tokens in SCSS for Carbon Design System\nDESCRIPTION: This snippet demonstrates how to import and use component-specific tokens in a SCSS stylesheet. It shows the usage of the button component token.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_29\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/components/button';\n\n.my-selector {\n  background: button.$button-primary;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and HideAtBreakpoint Stories\nDESCRIPTION: This code snippet imports necessary components from Storybook and the HideAtBreakpoint stories. It also imports a utility function for Stackblitz code preview.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/HideAtBreakpoint/HideAtBreakpoint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Canvas, ArgTypes, Story, Meta } from '@storybook/blocks';\nimport * as HideAtBreakpoint from './HideAtBreakpoint.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Motion in ES Modules\nDESCRIPTION: Example of importing and using the Carbon Motion package with ES Modules syntax, showing how to generate a cubic-bezier function string.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/motion/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// ESM\nimport { easings, motion } from '@carbon/motion';\n\nmotion('standard', 'productive'); // Returns a string `cubic-bezier()` function\n```\n\n----------------------------------------\n\nTITLE: Configuring Large Modal Size in ComposedModal\nDESCRIPTION: Example showing how to configure a ComposedModal with a specific size (large) to create a more spacious modal dialog. Modal sizes can be xs, small, default, or large.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComposedModal/ComposedModal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComposedModal size=\"lg\">\n  <ModalHeader />\n  <ModalBody>\n    <p className=\"cds--modal-content__text\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n      cursus fermentum risus, sit amet fringilla nunc pellentesque quis. Duis\n      quis odio ultrices, cursus lacus ac, posuere felis. Donec dignissim libero\n      in augue mattis, a molestie metus vestibulum. Aliquam placerat felis\n      ultrices lorem condimentum, nec ullamcorper felis porttitor.\n    </p>\n  </ModalBody>\n</ComposedModal>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Carbon Design System Toggle with Minimum Attributes\nDESCRIPTION: This snippet demonstrates the HTML structure for a basic Carbon Design System toggle component with minimum required attributes. It includes a button element with appropriate ARIA attributes and a label with the toggle appearance and text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-toggle.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  aria-checked=\"true\"\n  aria-lable=\"Toggle element label\"\n  class=\"cds--toggle__button\"\n  role=\"switch\"\n  type=\"button\"\n>\n</button>\n<label\n  class=\"cds--toggle__label\"\n  for=\"\"\n>\n  <span class=\"cds--toggle__label-text\">\n    Toggle element label\n  </span>\n  <div class=\"cds--toggle__appearance\">\n    <div class=\"cds--toggle__switch cds--toggle__switch--checked\">\n    </div>\n    <span\n      aria-hidden=\"true\"\n      class=\"cds--toggle__text\"\n    >\n      On\n    </span>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Component-Specific Token Configuration\nDESCRIPTION: Shows how to import and configure specific component tokens for Button, Notification, and Tag components using SCSS.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/styling.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@use \"@carbon/styles/scss/reset\";\n@use \"@carbon/styles/scss/theme\";\n@use \"@carbon/styles/scss/themes\";\n@use '@carbon/styles/scss/components/button/tokens' as button-tokens;\n@use '@carbon/styles/scss/components/notification/tokens' as notification-tokens;\n@use '@carbon/styles/scss/components/tag/tokens' as tag-tokens;\n@include theme.add-component-tokens(button-tokens.$button-tokens);\n@include theme.add-component-tokens(notification-tokens.$notification-tokens);\n@include theme.add-component-tokens(tag-tokens.$tag-tokens);\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Single Line Code Snippet Mode\nDESCRIPTION: Shows the HTML structure of a single line code snippet with minimum attributes. It includes a container div with accessibility attributes, a slot for code content, and a copy button component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  aria-label=\"code-snippet\"\n  aria-multiline=\"\"\n  aria-readonly=\"true\"\n  class=\"cds--snippet-container\"\n  role=\"textbox\"\n  style=\"\"\n  tabindex=\"0\"\n>\n  <pre>\n    <code>\n      <slot>\n      </slot>\n    </code>\n  </pre>\n</div>\n<div class=\"cds--snippet__overflow-indicator--right\">\n</div>\n<cds-copy-button\n  button-class-name=\"\"\n  feedback=\"Copied!\"\n  feedback-timeout=\"2000\"\n>\n  Copy to Clipboard\n</cds-copy-button>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Skeleton Placeholder - HTML\nDESCRIPTION: This HTML snippet provides a skeleton version of the Search UI for use as a loading placeholder. The <cds-search-skeleton> component renders a placeholder instead of a functional input, which offers visual feedback while content loads. Requires prior registration via module import. No input parameters; Output: Search skeleton placeholder in the UI.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/search/search.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-search-skeleton></cds-search-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Including Action Bar in AI Label - HTML\nDESCRIPTION: This HTML snippet extends the AI Label component by including an action bar within the label. It demonstrates how to use slots like 'actions' inside 'body-text' for adding interactive elements such as icon buttons. Dependencies include the definition of icon-button components, and slots are key to customize the label's behavior.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table-ai-label.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-ai-label size=\"mini\" alignment=\"bottom-left\">\n  <div slot=\"body-text\">\n    {Content Here} {Optional AI Label action bar}\n    <cds-icon-button kind=\"ghost\" slot=\"actions\" size=\"lg\">\n      ${View16({ slot: 'icon' })}\n      <span slot=\"tooltip-content\"> View </span>\n    </cds-icon-button>\n    <cds-icon-button kind=\"ghost\" slot=\"actions\" size=\"lg\">\n      ${FolderOpen16({ slot: 'icon' })}\n      <span slot=\"tooltip-content\"> Open folder</span>\n    </cds-icon-button>\n    <cds-icon-button kind=\"ghost\" slot=\"actions\" size=\"lg\">\n      ${Folders16({ slot: 'icon' })}\n      <span slot=\"tooltip-content\"> Folders </span>\n    </cds-icon-button>\n    <cds-ai-label-action-button>View details</cds-ai-label-action-button>\n  </div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Tile with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the basic HTML structure for a selectable tile component. It includes an input checkbox and a label with appropriate classes and roles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  class=\"cds--tile-input\"\n  id=\"input\"\n  tabindex=\"-1\"\n  type=\"checkbox\"\n>\n<label\n  class=\"cds--tile cds--tile--selectable\"\n  for=\"input\"\n  tabindex=\"0\"\n>\n  <div class=\"cds--tile__checkmark cds--tile__checkmark--persistent\">\n  </div>\n  <div class=\"cds--tile-content\">\n    <slot>\n    </slot>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Rendering Controlled Expansion TreeView Example in Storybook Canvas\nDESCRIPTION: This snippet shows how to render a TreeView example with controlled expansion in a Storybook Canvas component. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/TreeView.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={TreeViewStories.WithControlledExpansion}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () =>\n        stackblitzPrefillConfig(\n          TreeViewStories.WithControlledExpansion,\n          \"import { Document, Folder } from '@carbon/icons-react';\"\n        ),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Color Map Structure in @carbon/colors\nDESCRIPTION: Illustrates the structure of the color map in @carbon/colors. Each swatch (e.g., blue) contains a nested map of color grades and their corresponding hex values.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/docs/sass.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$colors: (\n  blue: (\n    10: #edf5ff,\n    20: #d0e2ff,\n    30: #a6c8ff,\n    40: #78a9ff,\n    50: #4589ff,\n    60: #0f62fe,\n    70: #0043ce,\n    80: #002d9c,\n    90: #001d6c,\n    100: #001141,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Meta Component\nDESCRIPTION: This JSX snippet renders the Storybook Meta component, which is used to configure the story's metadata.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ui-shell/ui-shell.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta of={UIShellStories} />\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Pagination Component (JavaScript)\nDESCRIPTION: Imports the necessary JavaScript module to define and register the `<cds-pagination>` custom element. This step is required when using the component via ES module imports in a JavaScript project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/pagination/pagination.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/pagination/index.js';\n```\n\n----------------------------------------\n\nTITLE: Enabling Sortable Table Columns - HTML\nDESCRIPTION: This code enables sorting on a table column by adding the is-sortable attribute to a <cds-table-header-cell> element. It allows users to sort that column\\'s data by clicking the header. Requires the Carbon data table web components to be included and initialized on the page. Only headers with is-sortable will be interactive for sorting, supporting per-column customization.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/stories/data-table.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-table-header-cell is-sortable> ... </cds-table-header-cell>\n```\n\n----------------------------------------\n\nTITLE: Rendering Radio Tile with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the basic HTML structure for a radio tile component. It includes an input radio button and a label with appropriate classes and roles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  class=\"cds--tile-input\"\n  id=\"input\"\n  tabindex=\"-1\"\n  type=\"radio\"\n>\n<label\n  class=\"cds--tile cds--tile--selectable\"\n  for=\"input\"\n  tabindex=\"0\"\n>\n  <div class=\"cds--tile__checkmark\">\n  </div>\n  <div class=\"cds--tile-content\">\n    <slot>\n    </slot>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Required DOM Polyfills List\nDESCRIPTION: Markdown list of required DOM API polyfills needed for Carbon v7, including Element.prototype.closest() and Element.prototype.matches()\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/migrate-to-7.x.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`Element.prototype.closest()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n- [`Element.prototype.matches()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n```\n\n----------------------------------------\n\nTITLE: Custom Item Rendering with itemToElement\nDESCRIPTION: Shows how to customize dropdown item rendering using itemToElement prop with styled elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown\n  items={[\n    { id: 'option-0', text: 'Option 0' },\n    { id: 'option-1', text: 'Option 1' },\n    { id: 'option-2', text: 'Option 2' },\n  ]}\n  itemToElement={(item) =>\n    item ? (\n      <span className=\"test\" style={{ color: 'red' }}>\n        {item.text} 🔥\n      </span>\n    ) : (\n      ''\n    )\n  }\n  label=\"Select an option...\"\n  titleText=\"Dropdown label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Meta Block for Storybook Code Snippet Stories in JavaScript/JSX\nDESCRIPTION: Uses the Storybook Meta block to link this documentation page to the code snippet stories collection. This enables Storybook to correlate documentation content with component stories, which is crucial for automatic documentation rendering and navigation. The parameter 'of' is set to CodeSnippetStories, referring to the imported stories object.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta of={CodeSnippetStories} />\n```\n\n----------------------------------------\n\nTITLE: Importing Skip to Content Component in JavaScript\nDESCRIPTION: This code snippet shows how to import the Skip to Content component from the Carbon Web Components package using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skip-to-content/skip-to-content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/skip-to-content/index.js';\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates in JavaScript with dateTimeFormat\nDESCRIPTION: Demonstrates how to format timestamps as absolute date values with different locales and styles. Supports 'full', 'long', 'medium', and 'short' styles with 'medium' as the default.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.absolute.formatDate(timestamp);\n// Apr 4, 2024\n\ndateTimeFormat.absolute.formatDate(timestamp, { locale: 'de-DE' });\n// 04.04.2024\n\ndateTimeFormat.absolute.formatDate(timestamp, { style: 'full' });\n// Thursday, April 4, 2024\n```\n\n----------------------------------------\n\nTITLE: Using No Trailing Slash Breadcrumb in HTML\nDESCRIPTION: This snippet demonstrates the use of the 'noTrailingSlash' attribute to remove the trailing slash from the last breadcrumb item. Dependencies include HTML support for custom elements and the Carbon Design System 'breadcrumb' components. No additional parameters are required. This pattern enhances user navigation experience by omitting unnecessary slashes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/breadcrumb/breadcrumb.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<breadcrumb no-trailing-slash=\"\">\n  <breadcrumb-item href=\"#\">Breadcrumb 1</breadcrumb-item>\n  <breadcrumb-item href=\"#\">Breadcrumb 2</breadcrumb-item>\n  <breadcrumb-item href=\"#\">Breadcrumb 3</breadcrumb-item>\n</breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Setting Basic SVG Attributes with getAttributes\nDESCRIPTION: Example of using the getAttributes helper to set width and height properties on an SVG icon. This is useful for controlling the display size of the icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-helpers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getAttributes } = require('@carbon/icon-helpers');\nconst attributes = getAttributes({ width: 20, height: 20 });\n```\n\n----------------------------------------\n\nTITLE: Rendering Component API Reference for CDS Code Snippet (Storybook ArgTypes) in JSX\nDESCRIPTION: Invokes the ArgTypes block of Storybook for the 'cds-code-snippet' component, producing a rendered API reference table for its props and attributes. Used by consumers to discover supported configuration properties. The 'of' parameter points to the web component tag as a string.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<ArgTypes of=\"cds-code-snippet\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Storybook\nDESCRIPTION: This snippet imports necessary components from the Storybook library and internal scripts required to manage and display heading components in a Storybook environment. This is crucial for initializing the environment to test various heading levels in web components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/heading/heading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as HeadingStories from './heading.stories';\n```\n\n----------------------------------------\n\nTITLE: Defining @font-face for IBM Plex Sans in CSS\nDESCRIPTION: This snippet demonstrates how to create @font-face rules for loading IBM Plex Sans font with different weights. It includes light, regular, and bold weights.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'IBM Plex Sans';\n  font-weight: 300;\n  src: url('<path-to-ibm-plex>/IBM-Plex-Sans/fonts/complete/woff2/IBMPlexSans-Light.woff2')\n    format('woff2');\n}\n\n@font-face {\n  font-family: 'IBM Plex Sans';\n  font-weight: 400;\n  src: url('<path-to-ibm-plex>/IBM-Plex-Sans/fonts/complete/woff2/IBMPlexSans-Regular.woff2')\n    format('woff2');\n}\n\n@font-face {\n  font-family: 'IBM Plex Sans';\n  font-weight: 700;\n  src: url('<path-to-ibm-plex>/IBM-Plex-Sans/fonts/complete/woff2/IBMPlexSans-Bold.woff2')\n    format('woff2');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Sass\nDESCRIPTION: Shows how to define feature flags before importing Carbon Components Sass code to enable experimental features.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$feature-flags: (\n  components-x: true,\n  breaking-changes-x: true,\n  grid: true,\n  ui-shell: true,\n);\n@import '~carbon-components/scss/globals/scss/styles';\n```\n\n----------------------------------------\n\nTITLE: Embedding Carbon Web Components Storybook Demo - JSX/React\nDESCRIPTION: This snippet renders a StorybookDemo component in JSX, embedding a live demonstration of Carbon Web Components using the provided URL and a single variant configuration. Dependencies include React and the StorybookDemo component. Main parameters are 'tall' (a boolean prop for layout), 'url' (linking to the hosted demo), and 'variants' (an array specifying which Storybook variant to showcase). The snippet expects a compatible environment with StorybookDemo available. Input is the StorybookDemo props; output is a rendered embedded live demo within the React app.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/select/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-select--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Component Base Element\nDESCRIPTION: This snippet shows how to configure the base element rendered by the Theme component using the 'as' prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/Theme.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme as=\"section\" theme=\"g100\">\n  <ChildComponent />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-file-uploader-item with Minimum Attributes\nDESCRIPTION: This snippet demonstrates the basic structure of the cds-file-uploader-item component, including filename, loading state, and form requirement elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/file-uploader.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"cds--file-filename\">\n  <slot>\n  </slot>\n</p>\n<span class=\"cds--file__state-container\">\n  <cds-loading\n    assistive-text=\"Delete this file\"\n    type=\"small\"\n  >\n  </cds-loading>\n</span>\n<div\n  class=\"cds--form-requirement\"\n  hidden=\"\"\n>\n  <div class=\"cds--form-requirement__title\">\n  </div>\n  <p\n    class=\"cds--form-requirement__supplement\"\n    hidden=\"\"\n  >\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Text HTML Implementation\nDESCRIPTION: Demonstrates the basic HTML markup for using the Skeleton Text component with no properties set.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-text/skeleton-text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-skeleton-text></cds-skeleton-text>\n```\n\n----------------------------------------\n\nTITLE: Customizing Carbon Class Prefix with Sass\nDESCRIPTION: Sass configuration to customize the default class prefix (cds) for Carbon components using @use statements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/class-prefix/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with ( $prefix: 'custom' );\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/config' with ( $prefix: 'custom' );\n```\n\n----------------------------------------\n\nTITLE: Light Variant ContentSwitcher\nDESCRIPTION: Implementation of ContentSwitcher with light variant for better contrast\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContentSwitcher/ContentSwitcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ContentSwitcher light>...</ContentSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Checkbox\nDESCRIPTION: JSX configuration for a StorybookDemo component that displays a themed checkbox from Carbon Design System's Storybook. Sets up a demo instance pointing to the React Carbon documentation with theme selector enabled.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Checkbox/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-checkbox--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Layout Module using @use - Sass\nDESCRIPTION: Demonstrates the new approach for importing the Carbon Layout SCSS module in v11 using the @use rule instead of the deprecated @import. This import provides access to the layout utilities and variables as Sass modules. Ensure Dart Sass is used, as @use is not supported in other implementations. No parameters are accepted, and the imported module exports layout-related variables and mixins.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_25\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/layout';\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Toggle Component\nDESCRIPTION: This snippet sets up the Storybook Meta component for the Toggle stories, which is used to configure the documentation page.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle/toggle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Meta of={ToggleStories} />\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Configures Storybook metadata for the Inline Loading component documentation using the Meta component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/inline-loading/inline-loading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={InlineLoadingStories} />\n```\n\n----------------------------------------\n\nTITLE: Rendering FluidSelect with First Option Default in JSX\nDESCRIPTION: This example shows how to create a FluidSelect component where the first option is selected by default. It includes multiple SelectItem components without an empty default option.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FluidSelect/FluidSelect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FluidSelect\n  id={`select-2`}\n  labelText=\"Select an option\"\n  helperText=\"Optional helper text\">\n  <SelectItem value=\"option-1\" text=\"Option 1\" />\n  <SelectItem value=\"option-2\" text=\"Option 2\" />\n  <SelectItem value=\"option-3\" text=\"Option 3\" />\n</FluidSelect>\n```\n\n----------------------------------------\n\nTITLE: Configuring Carbon Settings in SCSS\nDESCRIPTION: Demonstrates how to configure Carbon settings like prefix and CSS reset in v10 and v11\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n$prefix: 'cds';\n$css--reset: false;\n\n@import 'path/to/carbon';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles' with (\n  $prefix: 'cds'\n);\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/config' with (\n  $prefix: 'cds'\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Carbon Elements in Sass\nDESCRIPTION: Demonstrates how to import and use the @carbon/elements package in a Sass file. The example shows importing the package and accessing a color token.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/docs/sass.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/elements';\n\n.selector {\n  background: elements.$blue-50;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Translation Props Reference\nDESCRIPTION: Reference to translation-related props including translateWithId and locale-specific features for various Carbon components like AccordionItem, DataTable, and DatePicker. Includes information about CSS logical properties for RTL support.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/g11n.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Notes of globalization\n\n- For simple components, translatable strings can be provided via React props.\n  Click on \"Show Info\" button at the top right in each components' page in\n  http://react.carbondesignsystem.com for more details.\n- Some components have `translateWithId` props, that is API-compatible with\n  [`react-i18next`](https://github.com/i18next/react-i18next) library. Search\n  for\n  [`translationIds`](https://github.com/IBM/carbon-components-react/search?q=translationIds&unscoped_q=translationIds)\n  or\n  [`translationKeys`](https://github.com/IBM/carbon-components-react/search?q=translationKeys&unscoped_q=translationKeys)\n  to see the list of string IDs.\n- Some components, e.g. `<AccordionItem>`, work as list items. They should be\n  ordered with locale-specific sorting rules in mind.\n- Some components, e.g. `<DataTable>`, support\n  [custom sorting](../src/components/DataTable/README.md#custom-sorting). Such\n  custom sorting logic should take locale-specific sorting rules into account.\n- Date picker component relies on the G11N features in\n  [`Flatpickr` library](https://chmln.github.io/flatpickr/). Set `locale` and\n  `dateFormat` props to fully utilize `Flatpickr` library's G11N features. If\n  you are using date/time in other components, make sure they are correctly\n  formatted considering different formats in different locales.\n- Styles provided through `@carbon/styles` (and therefore `@carbon/react` as\n  well) use CSS logical properties and values for layout, which is impacted by\n  the writing direction. This means that right-to-left styling is included out\n  of the box. In previous versions of carbon packages, RTLCSS had to be used by\n  consuming projects to output styles for right-to-left mode. RTLCSS is no\n  longer needed now that logical properties are used. See more in the\n  [original issue](https://github.com/carbon-design-system/carbon/issues/13619).\n```\n\n----------------------------------------\n\nTITLE: Metadata Component in Storybook for Heading\nDESCRIPTION: The Meta component is used to provide metadata for the HeadingStories, defining the scope and context of the heading stories in Storybook. It binds the heading stories for display, organizing them in the Storybook interface.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/heading/heading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Meta of={HeadingStories} />\n```\n\n----------------------------------------\n\nTITLE: HTML Icon Indicator Tag Usage\nDESCRIPTION: This HTML snippet demonstrates how to use the <cds-icon-indicator> custom element to display an icon indicating a 'failed' status. The 'kind' attribute specifies the severity level, while the 'text' attribute provides a descriptive label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/icon-indicator/icon-indicator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-icon-indicator kind=\"failed\" text=\"Failed\"></cds-icon-indicator>\n```\n\n----------------------------------------\n\nTITLE: Managing Feature Flags in Sass\nDESCRIPTION: Shows how to configure and manage feature flags using 'enable', 'disable', and 'merge' in Sass, including initial configuration when importing the module.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/feature-flags/README.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/feature-flags' with (\n  $feature-flags: (\n    'feature-flag-a': false,\n    'feature-flag-b': true,\n  )\n);\n\n// Enable `feature-flag-a`\n@include feature-flags.enable('feature-flag-a');\n\n// Disable `feature-flag-b`\n@include feature-flags.disable('feature-flag-b');\n\n// Set a variety of feature flags to a specific value\n@include feature-flags.merge(\n  (\n    'feature-flag-a': true,\n    'feature-flag-b': true,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-multi-select with Various Attributes in HTML\nDESCRIPTION: This snippet shows the HTML structure of the cds-multi-select component when rendered with various additional attributes. It includes classes for disabled state, inline display, and invalid state, demonstrating the component's adaptability to different configurations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-multi-select.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<label\n  class=\"cds--label cds--label--disabled\"\n  hidden=\"\"\n  part=\"title-text\"\n>\n  <slot name=\"title-text\">\n  </slot>\n</label>\n<div\n  class=\"cds--list-box cds--list-box--disabled cds--list-box--inline cds--list-box--md cds--multi-select cds--multi-select--inline cds--multi-select--invalid\"\n  data-invalid=\"\"\n  role=\"listbox\"\n>\n  <div\n    aria-controls=\"menu-body\"\n    aria-expanded=\"false\"\n    aria-haspopup=\"listbox\"\n    aria-labelledby=\"trigger-label\"\n    aria-owns=\"menu-body\"\n    class=\"cds--list-box__field\"\n    part=\"trigger-button\"\n    role=\"button\"\n    tabindex=\"0\"\n  >\n    <span\n      class=\"cds--list-box__label\"\n      id=\"trigger-label\"\n    >\n    </span>\n    <div\n      class=\"cds--list-box__menu-icon\"\n      id=\"trigger-caret\"\n    >\n    </div>\n  </div>\n  <slot name=\"slug\">\n  </slot>\n</div>\n<div\n  class=\"cds--form__helper-text cds--form__helper-text--disabled\"\n  part=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n  </slot>\n</div>\n<div\n  aria-live=\"assertive\"\n  aria-relevant=\"additions text\"\n  class=\"cds--assistive-text\"\n  role=\"status\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Carbon theme with custom tokens in SCSS\nDESCRIPTION: SCSS code to extend the g100 theme with custom tokens in Carbon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n// Extend the g100 theme with your own tokens\n@use '@carbon/styles/scss/themes';\n@use '@carbon/styles/scss/theme' with (\n  $fallback: themes.$g100,\n  $theme: (\n    custom-token-01: #000000,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Search Variants\nDESCRIPTION: Sets up a StorybookDemo component that links to the Carbon Design System React Storybook, configuring multiple variants of the Search component including default, disabled, expandable, and experimental fluid versions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Search/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-search--default'\n    },\n    {\n      label: 'Disabled',\n      variant: 'components-search--disabled'\n    },\n    {\n      label: 'Expandable',\n      variant: 'components-search--expandable'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidsearch--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Switcher with Nested Components\nDESCRIPTION: Example showing how to use react-keyed-flatten-children to handle nested SwitcherItem components and React Fragments within a Switcher component. The flattenChildren function preserves element keys and props while converting the nested structure into a flat array.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/UsingFragmentsWithSwitcher.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport flattenChildren from 'react-keyed-flatten-children';\n\nconst YourComponent = () => (\n  <Switcher>\n    {flattenChildren(\n      <>\n        <SwitcherItem>Item 1</SwitcherItem>\n        <SwitcherItem>Item 2</SwitcherItem>\n        <>\n          <SwitcherItem>Item 3</SwitcherItem>\n          <SwitcherItem>Item 4</SwitcherItem>\n        </>\n      </>\n    )}\n  </Switcher>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Link Story Canvas\nDESCRIPTION: Renders the default Link component story with Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/Link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={LinkStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(LinkStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: React Event Handler Props - Unpreferred vs Preferred\nDESCRIPTION: Shows the preferred way to handle event handler props in React components, using handleOnClick when the onClick name is already taken by a prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ onClick }) {\n  function handleClick(event) {\n    // ...\n    onClick(event);\n  }\n  return <button onClick={handleClick} />;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ onClick }) {\n  function handleOnClick(event) {\n    // ...\n    onClick(event);\n  }\n  return <button onClick={handleOnClick} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Modal Declaration\nDESCRIPTION: Shows the basic modal element declaration for opening/closing functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/modal/modal.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-modal></cds-modal>\n```\n\n----------------------------------------\n\nTITLE: Importing Colors in Theme File\nDESCRIPTION: Demonstrates how to import color values from the @carbon/colors package for use in theme definitions. The example shows importing multiple blue shades.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  // Blue\n  blue60,\n  blue70,\n  blue80,\n\n  // ...\n} from '@carbon/colors';\n```\n\n----------------------------------------\n\nTITLE: Rendering ProgressBar Default Story with Stackblitz Action in JSX\nDESCRIPTION: This code renders the default ProgressBar story using Storybook's Canvas component. It includes an additional action to open the component in Stackblitz for live editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ProgressBar/ProgressBar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={ProgressBarStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(ProgressBarStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tile Component Variants in StorybookDemo for Carbon Design System\nDESCRIPTION: This code sets up a StorybookDemo component to display different variants of the Tile component from the Carbon Design System. It includes configuration for standard tile variants as well as experimental improved contrast versions, all linking to the Carbon Design System Storybook.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tile/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-tile--default'\n    },\n    {\n      label: 'Clickable',\n      variant: 'components-tile--clickable'\n    },\n    {\n      label: 'Expandable',\n      variant: 'components-tile--expandable'\n    },\n    {\n      label: 'Expandable with interactive',\n      variant: 'components-tile--expandable-with-interactive'\n    },\n    {\n      label: 'Multiselect',\n      variant: 'components-tile--multi-select'\n    },\n    {\n      label: 'Radio',\n      variant: 'components-tile--radio'\n    },\n    {\n      label: 'Selectable',\n      variant: 'components-tile--selectable'\n    },\n    {\n      label: 'Clickable with Improved Contrast (unstable)',\n      variant: 'experimental-improved-contrast-tile--clickable'\n    },\n    {\n      label: 'Expandable with Improved Contrast (unstable)',\n      variant: 'experimental-improved-contrast-tile--expandable'\n    },\n    {\n      label: 'Multiselect with Improved Contrast (unstable)',\n      variant: 'experimental-improved-contrast-tile--multi-select'\n    },\n    {\n      label: 'Radio with Improved Contrast (unstable)',\n      variant: 'experimental-improved-contrast-tile--radio'\n    },\n    {\n      label: 'Selectable with Improved Contrast (unstable)',\n      variant: 'experimental-improved-contrast-tile--selectable'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering CDN JavaScript for UI Shell Component\nDESCRIPTION: This snippet renders the CDN JavaScript required for the UI Shell component using a Markdown component and a template literal.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ui-shell/ui-shell.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['ui-shell'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Button Variants\nDESCRIPTION: JSX configuration for a StorybookDemo component that displays different button variants from Carbon Design System. The component includes theme selector functionality and links to the React Carbon Design System documentation with various button style demonstrations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-button--default'\n    },\n    {\n      label: 'Danger',\n      variant: 'components-button--danger'\n    },\n    {\n      label: 'Ghost',\n      variant: 'components-button--ghost'\n    },\n    {\n      label: 'Icon Button',\n      variant: 'components-button--icon-button'\n    },\n    {\n      label: 'Secondary',\n      variant: 'components-button--secondary'\n    },\n    {\n      label: 'Set of Buttons',\n      variant: 'components-button--set-of-buttons'\n    },\n    {\n      label: 'Tertiary',\n      variant: 'components-button--tertiary'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing TableToolbarAction with @carbon/icons-react in v7\nDESCRIPTION: Example showing how to use the new renderIcon prop with a component from @carbon/icons-react instead of the deprecated icon and iconName props from v6.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DataTable/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Download16 from '@carbon/icons-react/lib/download/16';\n\n...\n\n<TableToolbarAction renderIcon={Download16} />\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Spacing Variables - SCSS Version Comparison\nDESCRIPTION: Shows the difference between importing spacing variables in Carbon v10 versus v11. The import path has been updated to use the new @carbon/styles package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@import 'carbon-components/scss/globals/scss/spacing';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/spacing';\n```\n\n----------------------------------------\n\nTITLE: Rendering CDN JavaScript for Toggle Component\nDESCRIPTION: This snippet uses a Markdown component to render the CDN JavaScript code for including the Toggle component in a project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle/toggle.mdx#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['toggle'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Navigation Menu Item with Various Attributes in HTML\nDESCRIPTION: This snippet shows a side navigation menu item with additional attributes. It includes a href attribute and a CSS class to indicate the current state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--side-nav__link cds--side-nav__link--current\"\n  href=\"about:blank\"\n  part=\"link\"\n>\n  <span\n    class=\"cds--side-nav__link-text\"\n    part=\"title\"\n  >\n    <slot>\n    </slot>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Dependencies for PaginationNav Documentation\nDESCRIPTION: This snippet imports necessary dependencies from Storybook, PaginationNav stories, the PaginationNav component itself, and a utility function for code previewing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/PaginationNav/PaginationNav.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as PaginationNavStories from './PaginationNav.stories';\nimport PaginationNav from '../PaginationNav';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Colors in SCSS\nDESCRIPTION: Example of importing and using Carbon color variables in v11 using the new module system.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/colors';\n\n.example {\n  color: colors.$blue-50;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic AILabel Structure in React\nDESCRIPTION: Shows the basic structure for implementing an AILabel component with content. The AILabel acts as a Toggletip trigger with content wrapped in AILabelContent.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabelDatatable.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel>\n  <AILabelContent>\n    {Content Here}\n  </AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Importing Colors in Sass\nDESCRIPTION: Shows how to import color variables in Sass, including alternative import method when using @carbon/react.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/colors';\n\n// Another way if using `@carbon/react\n@use '@carbon/react/scss/colors';\n```\n\n----------------------------------------\n\nTITLE: Canvas and Markdown Storybook Elements\nDESCRIPTION: These snippets utilize Storybook's Canvas and Markdown components to render a preview of the default heading story and to insert dynamically generated CDN information via Markdown. This facilitates the demonstration and documentation of the heading component's usage and loading in a Storybook setup.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/heading/heading.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={HeadingStories.Default} />\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['heading'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Radio Button Skeleton State (HTML)\nDESCRIPTION: This snippet shows how to use the <cds-radio-button-skeleton> web component to display a loading placeholder for radio button controls in the Carbon Design System. The skeleton provides a visual cue for content loading states and requires the Carbon Web Components library to be included or imported in the page. The component does not take parameters and does not emit custom events; it should be replaced by the actual radio button component once ready.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/radio-button/radio-button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-radio-button-skeleton></cds-radio-button-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component in React\nDESCRIPTION: Sets up a live demo component that displays Carbon Design System list examples from IBM's standards site. Configures both ordered and unordered list variants with associated labels.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/list/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Ordered',\n      variant: 'components-list--ordered'\n    },\n    {\n      label: 'Unordered',\n      variant: 'components-list--unordered'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Progress Bar with Various Attributes\nDESCRIPTION: Example of rendering a cds-progress-bar component with a full set of attributes, including label text, 50% progress value, helper text, and accessibility attributes. Shows how to implement a more complete progress bar configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-progress-bar.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--progress-bar cds--progress-bar--big cds--progress-bar--default\">\n  <div class=\"cds--progress-bar__label\">\n    <span class=\"cds--progress-bar__label-text\">\n      Progress Bar label\n    </span>\n  </div>\n  <div\n    aria-busy=\"true\"\n    aria-invalid=\"false\"\n    aria-valuemax=\"100\"\n    aria-valuemin=\"0\"\n    aria-valuenow=\"50\"\n    class=\"cds--progress-bar__track\"\n    role=\"progressbar\"\n  >\n    <div\n      class=\"cds--progress-bar__bar\"\n      style=\"transform: scaleX(0.5);\"\n    >\n    </div>\n  </div>\n  <div class=\"cds--progress-bar__helper-text\">\n    Optional helper text\n    <div\n      aria-live=\"polite\"\n      class=\"cds--visually-hidden\"\n    >\n      Loading\n    </div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Motion in Sass\nDESCRIPTION: Examples of using the carbon--motion function and mixin in Sass to apply motion curves to CSS transitions. Shows both productive and expressive mode usage.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/motion/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/motion/scss/motion.scss';\n\n.my-custom-selector {\n  // Supplies the standard easing curve, using the productive mode by default\n  transition-timing-function: carbon--motion(standard);\n}\n\n.my-custom-selector-v2 {\n  // Supplies the standard easing curve, but with the expressive mode, on the\n  // transition-timing-function property for this selector\n  @include carbon--motion(standard, expressive);\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Demo Component in JSX\nDESCRIPTION: This JSX snippet renders the <StorybookDemo> component to display a live demo from an external Storybook instance. It sets the 'tall' prop for layout modification, specifies the target Storybook URL ('https://www.ibm.com/standards/carbon/carbon-web-components'), and defines a single 'Default' variant linking to the 'components-pagination--default' story. This component is typically used within documentation pages (like MDX) to showcase component examples. Requires the StorybookDemo component and a React/JSX rendering environment.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/pagination/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-pagination--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Tabs Component SCSS Styles\nDESCRIPTION: SCSS import statement to include the styles for the Tabs component. This must be included alongside the JavaScript import for proper styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tabs/tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@use '@carbon/styles/scss/components/tabs';\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Icons React with npm\nDESCRIPTION: Command to install the @carbon/icons-react package using npm package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/icons-react\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Web Components in HTML\nDESCRIPTION: Example of using the imported Carbon Web Components (dropdown and dropdown-item) in HTML markup.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown trigger-content=\"Select an item\">\n  <cds-dropdown-item value=\"all\">Option 1</cds-dropdown-item>\n  <cds-dropdown-item value=\"cloudFoundry\">Option 2</cds-dropdown-item>\n  <cds-dropdown-item value=\"staging\">Option 3</cds-dropdown-item>\n  <cds-dropdown-item value=\"dea\">Option 4</cds-dropdown-item>\n  <cds-dropdown-item value=\"router\">Option 5</cds-dropdown-item>\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Experimental Features\nDESCRIPTION: Demonstrates how to configure webpack.config.js to enable experimental features in the build process.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst replaceTable = {\n  breakingChangesX: true,\n  componentsX: true,\n  grid: true,\n};\n\n...\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.scss$/,\n        use: [\n          ...\n          {\n            loader: 'sass-loader',\n            options: {\n              ...\n              data: `\n                $feature-flags: (\n                  components-x: true,\n                  breaking-changes-x: true,\n                  grid: true,\n                  ui-shell: true,\n                );\n              `,\n            },\n          },\n        ],\n      },\n      {\n        test: /(\\/|\\\\)feature-flags\\.js$/,\n        loader: 'string-replace-loader',\n        options: {\n          multiple: Object.keys(replaceTable).map(key => ({\n            search: `exports\\.${key}\\\\s*=\\\\s*false`,\n            replace: `exports.${key} = ${replaceTable[key]}`,\n            flags: 'i',\n          })),\n        },\n      },\n    ],\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering CopyButton Default Example with Stackblitz Integration\nDESCRIPTION: Code snippet that renders the default CopyButton example in a Storybook Canvas with an additional action to open the example in Stackblitz for interactive editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/CopyButton/CopyButton.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={CopyButtonStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(CopyButtonStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with Variants in JSX\nDESCRIPTION: Demonstrates the setup of a StorybookDemo component with theme selector and variant options for displaying Carbon Design System components. Includes configuration for default and horizontal layout variants.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Stack/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'layout-stack--default'\n    },\n    {\n      label: 'Horizontal',\n      variant: 'layout-stack--horizontal'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Structure Documentation\nDESCRIPTION: Hierarchical documentation of UI Shell components showing the structure and relationships between Header, SideNav, and RightPanel components and their sub-components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/UIShell/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UI Shell\n\n> Components for building a product shell when using the Carbon Design System\n\n## Components\n\n- `Header`: used to render the top bar in your application\n  - `HeaderMenuButton`: used to display the trigger for a menu\n  - `HeaderName`: used to display the name of the product\n  - `HeaderGlobalBar`: used to display global actions\n    - `HeaderGlobalAction`: used to display a global action\n  - `HeaderMenubar`: used to display nav links\n    - `HeaderMenu`: used to display a menu in the nav\n    - `HeaderMenuItem`: used to display a menu item, often a link\n- `SideNav`: used to render the container for the side navigation of a page\n  - `SideNavHeader`: used to render the top bar in the side navigation\n    - `SideNavDetails`: renders the title for the side nav\n      - `SideNavSwitcher`: provides an optional tool to handle switching at the top-level\n  - `SideNavItems`: used for rendering items in the sub nav\n    - `SideNavLink`: renders a link in the side nav\n    - `SideNavMenu`: renders a collapsible menu in the side nav\n      - `SideNavMenuItem`: renders a link in a side nav menu\n  - `RightPanel`: used for render the container for header actions on the right\n    - `Switcher`: used to render a list of product links inside the right panel\n      - `SwitcherItem`: used to render list item, often a link\n      - `SwitcherDivider`: used to render a divider for list items\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Carbon Design System Slider\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display live examples of the Carbon Design System Slider. It includes configuration for two variants: a default slider and a slider with an input box.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/slider/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-slider--default'\n    },\n    {\n      label: 'With Input Box',\n      variant: 'components-slider--with-input-box'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon helpers in SCSS\nDESCRIPTION: SCSS code to import CSS reset and grid helpers from the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// Bring in the CSS Reset\n@use '@carbon/styles/scss/reset';\n\n// Bring in the CSS Grid\n@use '@carbon/styles/scss/grid';\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Element with Minimum Attributes in Carbon Design System\nDESCRIPTION: Shows the minimal HTML structure of a rendered Carbon Design System button element. The button includes standard CSS classes for styling, type attribute, and slots for content and icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-button.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--lg cds--btn--primary cds--layout--size-lg\"\n  id=\"button\"\n  part=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Menu Button with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the basic structure of a header menu button with minimum required attributes. It includes an aria-label for accessibility and specific CSS classes for styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"Open navigation menu\"\n  class=\"cds--header__action cds--header__menu-toggle cds--header__menu-trigger\"\n  part=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Carbon Design System Toggle with Various Attributes\nDESCRIPTION: This example shows the HTML structure for a Carbon Design System toggle component with various attributes. Despite the section title suggesting differences, the HTML structure appears identical to the minimum attributes example, showing the core implementation of the toggle component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-toggle.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n  aria-checked=\"true\"\n  aria-lable=\"Toggle element label\"\n  class=\"cds--toggle__button\"\n  role=\"switch\"\n  type=\"button\"\n>\n</button>\n<label\n  class=\"cds--toggle__label\"\n  for=\"\"\n>\n  <span class=\"cds--toggle__label-text\">\n    Toggle element label\n  </span>\n  <div class=\"cds--toggle__appearance\">\n    <div class=\"cds--toggle__switch cds--toggle__switch--checked\">\n    </div>\n    <span\n      aria-hidden=\"true\"\n      class=\"cds--toggle__text\"\n    >\n      On\n    </span>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Disabling Subgrid with GridSettings\nDESCRIPTION: Shows how to disable automatic subgrid definition using the GridSettings component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid>\n  <Column>\n    <GridSettings subgrid={false}>\n      <Grid>\n        <Column />\n      </Grid>\n    </GridSettings>\n  </Column>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextInput Read-Only Story in Storybook\nDESCRIPTION: This snippet demonstrates how to render the read-only variant of the TextInput story in a Storybook canvas with additional actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextInputStories.ReadOnly}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextInputStories.ReadOnly),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing Font Path Configuration in SCSS\nDESCRIPTION: SCSS configuration example showing how to remove custom font path while maintaining other settings.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with (\n  $use-akamai-cdn: false,\n  $use-per-family-plex: true,\n\n  // Or remove the font-path\n  // $font-path: 'path/to/fonts'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing StorybookDemo Component with Theme Selection in React\nDESCRIPTION: This code snippet demonstrates how to use the StorybookDemo component to display a live demo from the Carbon Design System Storybook. It includes configuration for theme selection and specifies a variant related to text direction.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/docs/text-direction-overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'experimental-unstable-text--set-text-direction'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing specific Carbon components in SCSS\nDESCRIPTION: SCSS code to import specific components from the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/reset';\n@use '@carbon/styles/scss/components/accordion';\n@use '@carbon/styles/scss/components/button';\n@use '@carbon/styles/scss/components/checkbox';\n```\n\n----------------------------------------\n\nTITLE: Implementing Cell Props in DataTable\nDESCRIPTION: Shows how to implement cell properties in a DataTable using the getCellProps prop getter for proper styling with AILabel.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabelDatatable.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<TableCell {...getCellProps({ cell })} key={cell.id}>\n  {cell.value}\n</TableCell>\n```\n\n----------------------------------------\n\nTITLE: Rendering Clickable Tile with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the basic HTML structure for a clickable tile component with minimum required attributes. It includes a link element with appropriate classes and roles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--link cds--tile cds--tile--clickable\"\n  id=\"link\"\n  part=\"link\"\n  role=\"button\"\n  tabindex=\"0\"\n>\n  <slot>\n  </slot>\n  <div\n    class=\"cds--link__icon\"\n    hidden=\"\"\n  >\n    <slot name=\"icon\">\n    </slot>\n  </div>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing Overflow Menu Components\nDESCRIPTION: Shows how to import the Overflow Menu component and its icon from the Carbon Web Components package\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/overflow-menu/overflow-menu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/overflow-menu/index.js';\nimport OverflowMenuVertical16 from '@carbon/icons/lib/overflow-menu--vertical/16.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component in React\nDESCRIPTION: Sets up a live Storybook demo component with theme selection capability, pointing to the Carbon Design System React implementation. Includes configuration for a default heading variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Heading/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-heading--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Design System in JSX\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display a live demo of Carbon Design System React components. It includes theme selection and specifies the Storybook URL and component variants to showcase.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/IdPrefix/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-idprefix--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading IBM Plex Sans Font Example\nDESCRIPTION: Example showing how to load and implement IBM Plex Sans font using CDN link and CSS font-family declaration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://1.www.s81c.com/common/carbon/plex/sans.css\" />\n    <style>\n      body {\n        font-family:\n          IBM Plex Sans,\n          Helvetica Neue,\n          Arial,\n          sans-serif;\n      }\n    </style>\n    ...\n  </head>\n  <body>\n    ...\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Stable Test Selectors in React Components\nDESCRIPTION: Demonstrates how to properly implement data-testid attributes for testing when spreading props, showing the correct placement when rest props need to be spread on interior elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ className, ...rest }) {\n  return (\n    <div className={className} data-testid={rest['data-testid']}>\n      <div>\n        <input {...rest} />\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Toggletip Component with Auto Align - HTML\nDESCRIPTION: Demonstrates markup for the 'cds-toggletip' component with the 'autoalign' attribute, including a label, body text, and action slots for a link and button. Auto Align manages the toggletip's placement. Required: the Toggletip component must be imported and registered; slots must be filled appropriately for meaningful output.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-toggletip autoalign>\n  Toggletip label\n\n  <p slot=\"body-text\">toggletip body text</p>\n  <cds-link slot=\"actions\">Test</cds-link>\n  <cds-button slot=\"actions\">Button</cds-button>\n</cds-toggletip>\n```\n\n----------------------------------------\n\nTITLE: Notification SCSS Styling\nDESCRIPTION: SCSS import statement for including notification component styles. Must be used alongside the JS import.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/notification/notification.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@use '@carbon/styles/scss/components/notification';\n```\n\n----------------------------------------\n\nTITLE: Implementing OverflowMenu Component with Icons in Carbon v10\nDESCRIPTION: Example showing how to use the OverflowMenu component with icons in Carbon Design System v10. Demonstrates the usage of renderIcon prop with @carbon/icons-react component and creation of menu items.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OverflowMenu/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport OverflowMenuVertical16 from '@carbon/icons-react/lib/overflow-menu--vertical/16';\n\n...\n\n<OverflowMenu renderIcon={OverflowMenuVertical16}>\n  <OverflowMenuItem itemText=\"Option 1\" />\n  <OverflowMenuItem itemText=\"Option 2\" />\n  ...\n</OverflowMenu>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Data Table Checkbox Alignment\nDESCRIPTION: Centers the alignment of checkboxes in data tables, addressing issue #11742 for more consistent visual presentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n* **data-table:** center align checkboxes ([#11743](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11743)) ([3c045f5](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/3c045f51578f10c9fc0f03bd71441fa098c1d52c)), closes [#11742](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11742)\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-file-uploader-item in Editing State\nDESCRIPTION: This snippet shows the cds-file-uploader-item component in its editing state, featuring a delete button instead of the loading indicator.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/file-uploader.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"cds--file-filename\">\n  <slot>\n  </slot>\n</p>\n<span class=\"cds--file__state-container\">\n  <button\n    aria-label=\"Delete this file\"\n    class=\"cds--file-close\"\n    type=\"button\"\n  >\n  </button>\n</span>\n<div\n  class=\"cds--form-requirement\"\n  hidden=\"\"\n>\n  <div class=\"cds--form-requirement__title\">\n  </div>\n  <p\n    class=\"cds--form-requirement__supplement\"\n    hidden=\"\"\n  >\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Menu with Divider Implementation\nDESCRIPTION: Example showing how to use menu item dividers to separate groups of items\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu/menu.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-menu>\n  <cds-menu-item label=\"Cut\"></cds-menu-item>\n  <cds-menu-item label=\"Copy\"></cds-menu-item>\n  <cds-menu-item label=\"Paste\"></cds-menu-item>\n  <cds-menu-item-divider></cds-menu-item-divider>\n  <cds-menu-item label=\"Delete\" kind=\"danger\"></cds-menu-item>\n</cds-menu>\n```\n\n----------------------------------------\n\nTITLE: Testing SCSS Public API\nDESCRIPTION: Shows how to test a module's public API using sass:meta module to verify variables, functions and mixins.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Public API', async () => {\n  await render(`\n    @use 'sass:meta';\n    @use '../path/to/module';\n\n    // Get the variables for the module under the namespace `module`\n    $_: get('variables', meta.module-variables('module'));\n\n    // Get the functions for the module under the namespace `module`\n    $_: get('variables', meta.module-functions('module'));\n\n    // Verify that a mixin exists, optionally within a module\n    $_: get('mixin-name', meta.mixin-exists('mixin-name', 'module');\n  `);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Usage of Stack Component\nDESCRIPTION: Demonstrates the basic HTML structure for using the Stack component with vertical orientation and a gap of 6 units.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/stack/stack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-stack gap=\"6\" orientation=\"vertical\">\n  <div>Item 1</div>\n  <div>Item 2</div>\n  <div>Item 3</div>\n</cds-stack>\n```\n\n----------------------------------------\n\nTITLE: Rendering Anchor Element with Various Attributes in Carbon Design System\nDESCRIPTION: Demonstrates how the cds-button component renders when configured as an anchor with various attributes. Despite the description mentioning an anchor element, the output shows a button element with standard attributes and slots.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-button.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--lg cds--btn--primary cds--layout--size-lg\"\n  id=\"button\"\n  part=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-toolbar-search with Extra Large Size\nDESCRIPTION: Shows a table toolbar search component with extra large size and negative tabindex, indicating it's not keyboard focusable.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"cds--search cds--search--xl\"\n  tabindex=\"-1\"\n>\n  <div class=\"cds--search-magnifier\">\n    <slot name=\"icon\">\n    </slot>\n  </div>\n  <label\n    class=\"cds--label\"\n    for=\"input\"\n    part=\"label-text\"\n  >\n    <slot>\n    </slot>\n  </label>\n  <input\n    autocomplete=\"off\"\n    class=\"cds--search-input\"\n    id=\"input\"\n    part=\"input\"\n    placeholder=\"Search\"\n    role=\"search\"\n  >\n  <button\n    aria-label=\"\"\n    class=\"cds--search-close cds--search-close--hidden\"\n    part=\"close-button\"\n    type=\"button\"\n  >\n  </button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Inline Loading Component with Finished Status\nDESCRIPTION: HTML structure for the inline loading component when in finished status. The animation container is empty, likely to be populated with a success icon via JavaScript.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-loading.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--inline-loading__animation\">\n</div>\n<p class=\"cds--inline-loading__text\">\n  <slot>\n  </slot>\n</p>\n\n```\n\n----------------------------------------\n\nTITLE: Updating Component Usage in Carbon Design System\nDESCRIPTION: Example demonstrating how to update the component usage from namespaced syntax to direct component usage.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/11.x-namespaced-exports.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <TextInput.PasswordInput/>\n+ <PasswordInput/>\n```\n\n----------------------------------------\n\nTITLE: Component Stabilization Checklist in Markdown\nDESCRIPTION: A detailed markdown checklist that outlines all requirements for stabilizing a Carbon Design System component, including React implementation, Web Components parity, styling, testing, and documentation requirements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/experimental-code.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Requirements to move to stable\n\n- [ ] The experimental code has stabilized\n  - [ ] A consuming project has given feedback on the visual design, UX, and dev\n        API/implementation\n  - [ ] The experimental code has been available for a reasonable amount of time\n        (~3 months) in aim to catch potential defects with spec, implementation,\n        accessibility, etc.\n\n---\n\n- [ ] Component is documented on the website\n  - [ ] Component has a usage, style, and code tab\n  - [ ] Component has a component demo\n\n---\n\n- [ ] React implementation is complete\n  - [ ] All components exported in `src/index.js` and should not be `unstable_`\n        prefixed\n  - [ ] Component is written as a function declaration and uses `forwardRef`\n  - [ ] Component has `propTypes`\n    - [ ] Each prop type has a comment (used in storybook)\n    - [ ] Prop types are as specific as needed, prefer `PropTypes.shape` over\n          `PropTypes.object` if possible\n  - [ ] Component has a TypeScript interface that mirrors `propTypes`\n  - [ ] API comments (in propTypes and TS interface) are the exact same\n  - [ ] Default props are listed as default args in the function definition (not\n        in defaultProps)\n    - [ ] Note: default props should be stable, in other words props like\n          `onClick = () => {}` can cause re-renders since the function identity\n          is not stable\n  - [ ] Component has a story in `<ComponentName>.stories.js`\n    - [ ] Stories show the intended usage of the component and are examples of\n          the most common use-cases\n    - [ ] All stories utilize controls\n      - [ ] Controls with no meaningful change to the component visuals should\n            be hidden from the controls panel, eg. `className`\n      - [ ] Props of type `node` with no proper controls available for\n            configuration should be hidden from the controls panel, eg.\n            `children`\n    - [ ] Component has an `.mdx` document that\n      - [ ] Follows the established outline\n      - [ ] Documents and explains the most common use-cases\n      - [ ] Provides a prop table\n  - [ ] All required tests are present\n    - [ ] Unit/integration tests written with `@testing-library/react` that\n          cover the entire component API\n      - [ ] Popover's test file is a good example that can be used as a guide\n    - [ ] Visual regression tests (VRT) are present in\n          `e2e/components/ComponentName/ComponentName-test.e2e.js` that:\n      - [ ] Snapshot every storybook story\n      - [ ] Snapshot important discrete states (open, selected, enabled,\n            autoAlign etc.) by setting controls/args on a story\n    - [ ] Accessibility Verification Tests (AVT) are present in\n          `e2e/components/ComponentName/ComponentName-test.avt.e2e.js` that:\n      - [ ] Ensure every story `.toBeAccessible()`\n      - [ ] Ensure important discrete states (open, selected, etc.) are covered\n            by arranging/interacting with component before calling\n            `.toBeAccessible()`\n- [ ] Component is connected with Figma Code Connect and has a\n      `<ComponentName>.figma.tsx` file in the code-connect folder.\n\n---\n\n- [ ] Web Component implementation is complete (full details TBD)\n  - [ ] ... Various implementation details specific to WC\n  - [ ] ... API is documented (ts interface, etc.)\n  - [ ] ... Component story(s) are present\n  - [ ] ... All required tests are present\n\n---\n\n- [ ] Component styles are available through `@carbon/styles`\n  - [ ] Component styles are housed in a `ComponentName/_componentName.scss`\n        file\n  - [ ] Component styles are defined within a `@mixin`\n  - [ ] Component has an entrypoint file `ComponentName/_index.scss` that has at\n        minimum:\n    - [ ] `@forward 'componentName';`\n    - [ ] `@use 'componentName';`\n    - [ ] `@include componentName.componentName;`\n\n---\n\n- [ ] React and Web Components implementation mirror one another and have full\n      parity\n  - [ ] 100% visual parity\n  - [ ] 100% functional parity\n  - [ ] 100% documentation parity\n  - [ ] 100% testing parity\n\n---\n\n- [ ] Misc details are complete\n  - [ ] All files have a copyright banner\n  - [ ] Component has a label in the GitHub repository\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Radio Button with Minimum Attributes\nDESCRIPTION: Shows the HTML structure of a Carbon Design System radio button component with minimal required attributes. The component consists of an input element of type 'radio' with a corresponding label element that includes a visual appearance span and a content slot.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-radio-button.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n  class=\"cds--radio-button\"\n  id=\"input\"\n  tabindex=\"-1\"\n  type=\"radio\"\n  value=\"staging\"\n>\n<label\n  class=\"cds--radio-button__label\"\n  for=\"input\"\n>\n  <span class=\"cds--radio-button__appearance\">\n  </span>\n  <span>\n    <slot>\n    </slot>\n  </span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Text Input Variants in Carbon Design System\nDESCRIPTION: A JSX component setup that configures the StorybookDemo component to display various text input variants from the Carbon Design System. It includes configurations for default, fluid, read-only, password input, and experimental unstable variants with their respective Storybook paths.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-textinput--default',\n    },\n    {\n      label: 'Fluid',\n      variant: 'components-textinput--fluid',\n    },\n    {\n      label: 'Read only',\n      variant: 'components-textinput--read-only',\n    },\n    {\n      label: 'Password Input',\n      variant: 'components-passwordinput--default',\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidtextinput--default',\n    },\n    {\n      label: 'Fluid with Tooltip (unstable)',\n      variant: 'experimental-unstable-fluidtextinput--default-with-tooltip',\n    },\n    {\n      label: 'Fluid with Password Input (unstable)',\n      variant:\n        'experimental-fluid-components-unstable-fluidpasswordinput--default',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/icon-helpers with npm\nDESCRIPTION: Command to install the @carbon/icon-helpers package using npm package manager. This adds the library as a dependency to your project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-helpers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/icon-helpers\n```\n\n----------------------------------------\n\nTITLE: Deprecating Component Props in React\nDESCRIPTION: Demonstrates how to deprecate an existing prop in a React component using the deprecate helper, resulting in a minor version bump.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nfunction ExampleComponent({ propA, propB }) {\n  return (\n    <>\n      <span>{propA}</span>\n      <span>{propB}</span>\n    </>\n  );\n}\n\nExampleComponent.propTypes = {\n  propA: PropTypes.string,\n-  propB: PropTypes.string,\n+  propB: deprecate(PropTypes.string),\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-toolbar-search with Minimum Attributes\nDESCRIPTION: Displays the basic search component for a table toolbar with default placeholder text and search functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"cds--search cds--search--lg\"\n  tabindex=\"0\"\n>\n  <div class=\"cds--search-magnifier\">\n    <slot name=\"icon\">\n    </slot>\n  </div>\n  <label\n    class=\"cds--label\"\n    for=\"input\"\n    part=\"label-text\"\n  >\n    <slot>\n    </slot>\n  </label>\n  <input\n    autocomplete=\"off\"\n    class=\"cds--search-input\"\n    id=\"input\"\n    part=\"input\"\n    placeholder=\"Search\"\n    role=\"search\"\n  >\n  <button\n    aria-label=\"\"\n    class=\"cds--search-close cds--search-close--hidden\"\n    part=\"close-button\"\n    type=\"button\"\n  >\n  </button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix in Carbon Type Package\nDESCRIPTION: Demonstrates how to customize the prefix used by the @carbon/type package using Sass module configuration. The prefix is used in selectors and CSS Custom Properties, with a default value of 'cds'.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/docs/sass.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type' with (\n  $prefix: 'custom-prefix'\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Max Width with CSS\nDESCRIPTION: Demonstrates how to override the default max-width of tab titles in Carbon v11 using a CSS selector targeting .cds--tabs__nav-link. This snippet restricts the width of each tab's navigation link to 10rem, ensuring titles do not span wider than intended. Requires the correct class name and a CSS-in-JS approach or stylesheet inclusion. Only affects presentation and not tab behavior.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.cds--tabs__nav-link {\\n  max-width: 10rem;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StorybookDemo Component for Carbon Skeleton Icon Display\nDESCRIPTION: This code demonstrates how to use the StorybookDemo component to create a live demonstration of the Carbon skeleton icon component. It configures the demo with a tall display format, points to the Carbon Web Components URL, and defines a default variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-icon/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-skeleton-icon--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Type Styles with Fluid Options\nDESCRIPTION: How to include a specific token style and enable fluid typography functionality by passing a boolean parameter.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type';\n\n@include type.type-style('token-name', true);\n```\n\n----------------------------------------\n\nTITLE: Importing Multi-Select Component\nDESCRIPTION: Shows how to import the Multi-Select component using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/multi-select/multi-select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/multi-select/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Inline Notification with Various Attributes\nDESCRIPTION: This HTML snippet demonstrates the cds-inline-notification component with title and subtitle content provided. It shows how the component would display with 'title-foo' and 'subtitle-foo' text values.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-notification.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--inline-notification__details\">\n  <div class=\"cds--inline-notification__text-wrapper\">\n    <p class=\"cds--inline-notification__title\">\n      title-foo\n      <slot name=\"title\">\n      </slot>\n    </p>\n    <div class=\"cds--inline-notification__subtitle\">\n      subtitle-foo\n      <slot name=\"subtitle\">\n      </slot>\n    </div>\n    <slot>\n    </slot>\n  </div>\n</div>\n<button\n  class=\"cds--inline-notification__close-button\"\n  type=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component with carbon-icons in React\nDESCRIPTION: This snippet demonstrates how to use the Icon component in v10 by importing an icon from carbon-icons and passing it to the icon prop. This approach allows for tree-shaking of icons in the build.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Icon/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Icon } from 'carbon-components-react';\nimport { iconAdd } from 'carbon-icons';\n\n<Icon icon={iconAdd} />;\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Left Navigation Focus Trapping\nDESCRIPTION: Fixes focus trapping in the left navigation component. Focus trapping ensures keyboard focus remains within a component when it's open, improving accessibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* **left-nav:** fix focus trapping ([#11842](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11842)) ([5f824ec](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/5f824ecee9f2bb086bdebee41e2271faa7972cbe))\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Typography with @carbon/react\nDESCRIPTION: Modified import path when using the typography system with the @carbon/react package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/type';\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Demo for Progress Indicator (JSX)\nDESCRIPTION: This snippet uses the `StorybookDemo` component, likely within a Markdown or MDX file, to embed an interactive demonstration of the Carbon Web Components `progress-indicator`. It configures the demo to be tall (`tall`), specifies the source URL for the Storybook instance (`url`), and defines the 'Default' variant (`variants`) to be shown.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/progress-indicator/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-progress-indicator--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Carbon Icon Inner Paths\nDESCRIPTION: CSS example showing how to style the inner path of icons that support alternate fills.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/README.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nsvg [data-icon-path='inner-path'] {\n  fill: blue;\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Anchor Element in Carbon Design System\nDESCRIPTION: Shows how the cds-button component renders when configured as a disabled anchor element. Despite the description mentioning a disabled anchor, the output shows a standard button element with no disabled attribute visible.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-button.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--lg cds--btn--primary cds--layout--size-lg\"\n  id=\"button\"\n  part=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n\n```\n\n----------------------------------------\n\nTITLE: Slider Skeleton HTML Implementation\nDESCRIPTION: This code snippet demonstrates how to use the skeleton variation of the Slider component, which can be used as a placeholder while content is loading.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/slider/slider.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<cds-slider-skeleton></cds-slider-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-batch-action with Single Item Selected\nDESCRIPTION: Displays the batch action component with a single item selected, showing non-plural text formatting.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--batch-summary\">\n  <p class=\"cds--batch-summary__para\">\n    1 item selected\n  </p>\n</div>\n<div class=\"cds--action-list\">\n  <slot>\n  </slot>\n  <button class=\"cds--batch-summary__cancel cds--btn cds--btn--primary\">\n    <slot name=\"cancel-button-content\">\n      Cancel\n    </slot>\n  </button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Modifying PropTypes to be More Generic\nDESCRIPTION: Shows how to change a prop type to be more generic (string to node), resulting in a minor version bump.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nfunction ExampleComponent({ propA, propB }) {\n  return (\n    <>\n      <span>{propA}</span>\n      <span>{propB}</span>\n    </>\n  );\n}\n\nExampleComponent.propTypes = {\n  propA: PropTypes.string,\n-  propB: PropTypes.string,\n+  propB: PropTypes.node,\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting CDN Script Tag for Carbon Code Snippet Component via Markdown\nDESCRIPTION: Evaluates and embeds a CDN JavaScript reference for the code-snippet component within a Markdown block. The cdnJs utility is invoked with the code snippet component listed as a dependency, ensuring the relevant script is loaded for external consumption or documentation examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['code-snippet'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Modules for Copy Button\nDESCRIPTION: This snippet demonstrates how to import necessary modules from Storybook and internal Carbon Design System logic to set up the copy button component. Dependencies include the Storybook library and internal Carbon modules for handling CDN scripts and story configurations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/copy-button/copy-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as CopyButtonStories from './copy-button.stories';\n\n<Meta of={CopyButtonStories} />\n```\n\n----------------------------------------\n\nTITLE: Sass Component Styling with Mixins\nDESCRIPTION: Demonstrates the preferred approach for authoring component styles using Sass mixins to control CSS emission and enable feature flags.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_13\n\nLANGUAGE: scss\nCODE:\n```\n/// Accordion\n/// @access private\n/// @group accordion\n@mixin accordion {\n  .#{$prefix}--accordion {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Component in JSX\nDESCRIPTION: This snippet defines the Storybook Meta component, which is used to set metadata for the story.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormLabel/FormLabel.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Dialog Element in Modal Component\nDESCRIPTION: Shows how to enable the dialog element feature flag that switches Modal to use native <dialog> element instead of role=\"dialog\", allowing browser-native focus wrap control.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Modal/Modal.featureflag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags enableDialogElement>\n  <Modal ... />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Toggle Example in Storybook\nDESCRIPTION: This snippet uses the Storybook Canvas component to render the default Toggle story, providing an interactive example of the component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle/toggle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas of={ToggleStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Extending stylelint-config-carbon in .stylelintrc\nDESCRIPTION: Example of how to use stylelint-config-carbon in a project by extending it in the .stylelintrc configuration file. This sets up Stylelint to use the Carbon configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/stylelint-config-carbon/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"stylelint-config-carbon\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Tile Variants in JSX\nDESCRIPTION: Sets up a StorybookDemo component that renders different variants of the Carbon Design System's Tile component. The configuration includes the demo URL and defines five tile variants with their corresponding labels and storybook identifiers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tile/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-tile--default'\n    },\n    {\n      label: 'Clickable',\n      variant: 'components-tile--clickable'\n    },\n    {\n      label: 'Single-selectable',\n      variant: 'components-tile--single-selectable'\n    },\n    {\n      label: 'Multi-selectable',\n      variant: 'components-tile--multi-selectable'\n    },\n    {\n      label: 'Expandable',\n      variant: 'components-tile--expandable'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Specific Font Weight for IBM Plex Sans in SCSS\nDESCRIPTION: This code demonstrates how to include only the regular font weight for IBM Plex Sans in a Carbon Design System project using SCSS.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/fonts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/fonts/sans';\n\n@include sans.regular($styles: normal);\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Tile Contrast - Multiple Flags\nDESCRIPTION: SCSS configuration to enable experimental improved contrast for tiles when managing multiple feature flags.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tile/Tile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/feature-flags' with (\n  $feature-flags: (\n    'enable-experimental-tile-contrast': true,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Token Value in JavaScript\nDESCRIPTION: Shows how to update the value of an existing theme token. The example changes the value of interactive01 from blue60 to blue20.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const interactive01 = blue20;\n```\n\n----------------------------------------\n\nTITLE: Using AI Skeleton Web Components in HTML\nDESCRIPTION: This HTML code snippet shows the basic usage of the AI Skeleton web components after they have been imported or loaded. It includes examples of the placeholder container, the icon element, and the text element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-skeleton/ai-skeleton.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-skeleton-placeholder></cds-ai-skeleton-placeholder>\n<cds-ai-skeleton-icon></cds-ai-skeleton-icon>\n<cds-ai-skeleton-text></cds-ai-skeleton-text>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextInput Default Story in Storybook\nDESCRIPTION: This snippet demonstrates how to render the default TextInput story in a Storybook canvas with additional actions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextInputStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextInputStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Switcher Items (HTML)\nDESCRIPTION: Illustrates how to disable individual items within a `cds-content-switcher` component using plain HTML. The `disabled` attribute is added directly to the `cds-content-switcher-item` elements, preventing users from selecting those specific options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/content-switcher/content-switcher.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-content-switcher>\n  <cds-content-switcher-item disabled name=\"one\" text=\"First section\">\n    Option 1\n  </cds-content-switcher-item>\n  <cds-content-switcher-item disabled name=\"two\" text=\"Second section\">\n    Option 2\n  </cds-content-switcher-item>\n  <cds-content-switcher-item disabled name=\"three\" text=\"Third section\">\n    Option 3\n  </cds-content-switcher-item>\n</cds-content-switcher>\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Components in React\nDESCRIPTION: Shows how to import the Grid and Column components from the Carbon React package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/Grid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid, Column } from '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for File Uploader Component\nDESCRIPTION: This MDX snippet utilizes the Storybook `Meta` block to associate the documentation page with the stories defined in `file-uploader.stories.js`. This linkage enables Storybook features like controls and actions based on the component's stories, using the imported `FileUploaderStories` object.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/file-uploader/file-uploader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta of={FileUploaderStories} />\n```\n\n----------------------------------------\n\nTITLE: Component API Documentation\nDESCRIPTION: Displays the API documentation for the Loading component using Storybook's ArgTypes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/loading/loading.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of=\"cds-loading\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for FlexGrid Variants in React\nDESCRIPTION: This code snippet renders a StorybookDemo component to display various FlexGrid configurations. It includes options for theme selection, sets a wide layout, and defines multiple variants of the FlexGrid component to showcase different features like auto columns, condensed layout, full width, and responsive grid.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FlexGrid/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  wide\n  variants={[\n    {\n      label: 'Auto Columns',\n      variant: 'elements-flexgrid--auto-columns'\n    },\n    {\n      label: 'Condensed',\n      variant: 'elements-flexgrid--condensed'\n    },\n    {\n      label: 'Condensed Columns',\n      variant: 'elements-flexgrid--condensed-columns'\n    },\n    {\n      label: 'Full Width',\n      variant: 'elements-flexgrid--full-width'\n    },\n    {\n      label: 'Mixed Gutter Modes',\n      variant: 'elements-flexgrid--mixed-gutter-modes'\n    },\n    {\n      label: 'Narrow',\n      variant: 'elements-flexgrid--narrow'\n    },\n    {\n      label: 'Narrow Columns',\n      variant: 'elements-flexgrid--narrow-columns'\n    },\n    {\n      label: 'Offset',\n      variant: 'elements-flexgrid--offset'\n    },\n    {\n      label: 'Responsive Grid',\n      variant: 'elements-flexgrid--responsive-grid'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Story using Canvas Block in MDX/JSX\nDESCRIPTION: This MDX/JSX snippet uses the `Canvas` component imported from `@storybook/blocks`. It renders the `Default` story exported from `FormGroupStories` within an interactive preview area in the Storybook documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={FormGroupStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: MenuItemSelectable Group Implementation\nDESCRIPTION: Shows how to implement selectable menu items grouped together for improved accessibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/Menu.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu open>\n  <MenuItemGroup label=\"Font style\">\n    <MenuItemSelectable label=\"Bold\" selected />\n    <MenuItemSelectable label=\"Italic\" />\n  </MenuItemGroup>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Number Input Component with Various Attributes\nDESCRIPTION: HTML structure of a read-only number input component from the Carbon Design System. The component includes label, input field with min/max constraints, increment/decrement buttons, helper text, and form requirement placeholder. This represents the component in a medium size variant with a readonly state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-number-input.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--number cds--number--md cds--number--readonly\">\n  <label\n    class=\"cds--label\"\n    for=\"input\"\n  >\n    <slot name=\"label-text\">\n    </slot>\n  </label>\n  <div class=\"cds--number__input-wrapper\">\n    <input\n      aria-atomic=\"true\"\n      autocomplete=\"\"\n      id=\"input\"\n      max=\"200\"\n      min=\"-100\"\n      readonly=\"\"\n      role=\"alert\"\n      step=\"1\"\n      type=\"number\"\n    >\n    <slot name=\"slug\">\n    </slot>\n    <div class=\"cds--number__controls\">\n      <button\n        aria-atomic=\"true\"\n        aria-label=\"decrease number input\"\n        aria-live=\"polite\"\n        class=\"cds--number__control-btn down-icon\"\n        type=\"button\"\n      >\n      </button>\n      <div class=\"cds--number__rule-divider\">\n      </div>\n      <button\n        aria-atomic=\"true\"\n        aria-label=\"increase number input\"\n        aria-live=\"polite\"\n        class=\"cds--number__control-btn up-icon\"\n        type=\"button\"\n      >\n      </button>\n      <div class=\"cds--number__rule-divider\">\n      </div>\n    </div>\n  </div>\n  <div class=\"cds--form__helper-text\">\n    <slot name=\"helper-text\">\n      helper-text-foo\n    </slot>\n  </div>\n  <div\n    class=\"cds--form-requirement\"\n    hidden=\"\"\n  >\n    <slot name=\"\">\n    </slot>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-dropdown with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the expected DOM structure when rendering a cds-dropdown component with minimal attributes. It includes the basic structure with a hidden label, the dropdown trigger, and slots for content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-dropdown.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<label\n  class=\"cds--label\"\n  hidden=\"\"\n  part=\"title-text\"\n>\n  <slot name=\"title-text\">\n  </slot>\n</label>\n<div\n  class=\"cds--dropdown cds--list-box cds--list-box--md\"\n  role=\"listbox\"\n>\n  <div\n    aria-controls=\"menu-body\"\n    aria-expanded=\"false\"\n    aria-haspopup=\"listbox\"\n    aria-labelledby=\"trigger-label\"\n    aria-owns=\"menu-body\"\n    class=\"cds--list-box__field\"\n    part=\"trigger-button\"\n    role=\"button\"\n    tabindex=\"0\"\n  >\n    <span\n      class=\"cds--list-box__label\"\n      id=\"trigger-label\"\n    >\n    </span>\n    <div\n      class=\"cds--list-box__menu-icon\"\n      id=\"trigger-caret\"\n    >\n    </div>\n  </div>\n  <slot name=\"slug\">\n  </slot>\n</div>\n<div\n  class=\"cds--form__helper-text\"\n  hidden=\"\"\n  part=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n  </slot>\n</div>\n<div\n  aria-live=\"assertive\"\n  aria-relevant=\"additions text\"\n  class=\"cds--assistive-text\"\n  role=\"status\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Default DefinitionTooltip Example\nDESCRIPTION: Renders the default DefinitionTooltip story in a Storybook Canvas component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tooltip/definition-tooltip.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={DefinitionTooltipStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-row with Minimum Attributes\nDESCRIPTION: Shows the simplest implementation of a table row with just a slot for content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<slot>\n</slot>\n\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon V10 compatibility theme in SCSS\nDESCRIPTION: Shows how to import the compatibility theme to use V10 Color tokens inside a Carbon V11 application. This import is specifically required for Color tokens compatibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/v10-token-compat-in-v11/README.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/compat/theme';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Form Stories in JSX\nDESCRIPTION: This snippet imports necessary components from Storybook and Form stories for documentation purposes. It also imports a utility function for Stackblitz code previews.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Form/Form.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as FormStories from './Form.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands for installing project dependencies using either yarn or npm, followed by starting the development server.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/custom-theme/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Component API Documentation with Storybook ArgTypes\nDESCRIPTION: This snippet uses the ArgTypes component from Storybook to automatically generate API documentation for the React component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/src/component/templates/mdx.template.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API in Storybook ArgTypes\nDESCRIPTION: This snippet renders the ArgTypes component from Storybook, which displays the API documentation for the NumberInput component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/NumberInput.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Using Font Family Mixins in SCSS\nDESCRIPTION: Alternative method to set font families using the provided SCSS mixin which automatically applies the font-family property.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n.my-selector {\n  @include type.font-family('serif');\n}\n```\n\n----------------------------------------\n\nTITLE: FormGroup Story Canvas Implementation\nDESCRIPTION: Storybook canvas implementation showing the default FormGroup story with additional Stackblitz integration\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormGroup/FormGroup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={FormGroupStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(FormGroupStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree View with Custom Icons Story\nDESCRIPTION: This snippet renders the story for Tree View with custom icons, showing how to use the icon slot for customization.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas of={TreeViewStories.withIcons} />\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Loading Component in React\nDESCRIPTION: This code snippet configures a StorybookDemo component to display a live demo of the Loading component from the Carbon Design System. It sets the Storybook URL and defines a single variant for the default Loading state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Loading/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-loading--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Color Value in JavaScript\nDESCRIPTION: Shows how to update an existing color value in the colors.js file. The example updates the HEX code for the red10 color.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const red10 = '#fff0f2';\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata using Meta Block in MDX/JSX\nDESCRIPTION: This MDX/JSX snippet uses the `Meta` component imported from `@storybook/blocks`. It links the documentation page to the component's stories defined in `FormGroupStories`, enabling Storybook features like controls and integration with the stories file.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={FormGroupStories} />\n```\n\n----------------------------------------\n\nTITLE: Disabling All Fonts in SCSS for Carbon Design System\nDESCRIPTION: This snippet illustrates how to disable all fonts in a Carbon Design System project by setting the $css--font-face flag to false in the SCSS configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/scss/fonts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/config' with (\n  $css--font-face: false\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Type Scale Function in SCSS\nDESCRIPTION: How to access a specific step in the type scale using the provided function to set font size.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\n.my-selector {\n  font-size: type.type-scale(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/layout with Yarn\nDESCRIPTION: Alternative command to install the @carbon/layout package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/layout/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/layout\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Placeholder Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Skeleton Placeholder component from the Carbon Web Components package using ES modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-placeholder/skeleton-placeholder.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/skeleton-placeholder/index.js';\n```\n\n----------------------------------------\n\nTITLE: Canvas Rendering Copy Button Default Story\nDESCRIPTION: Rendering the default story for the copy button component using Storybook Canvas. This involves displaying the component using example stories defined in the CopyButtonStories collection.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/copy-button/copy-button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<Canvas of={CopyButtonStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Loading Component Story Canvas\nDESCRIPTION: Renders the default Loading component story in a Storybook canvas for demonstration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/loading/loading.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={LoadingStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Stories\nDESCRIPTION: Imports required components from Storybook blocks and local story files for documentation purposes. Includes imports for Meta, Canvas, Markdown, and ArgTypes components along with CDN utilities and Inline Loading stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/inline-loading/inline-loading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as InlineLoadingStories from './inline-loading.stories';\n```\n\n----------------------------------------\n\nTITLE: Rendering a cds-select component with minimum attributes in HTML\nDESCRIPTION: This example shows the basic structure of a cds-select component with the minimal required attributes. It includes a label and select input with two option groups containing multiple options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-select.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--select\">\n  <label\n    class=\"cds--label\"\n    for=\"input\"\n  >\n    <slot name=\"label-text\">\n    </slot>\n  </label>\n  <div class=\"cds--select-input__wrapper\">\n    <select\n      aria-invalid=\"false\"\n      aria-readonly=\"false\"\n      class=\"cds--select-input cds--select-input--md\"\n      id=\"input\"\n    >\n      <optgroup\n        class=\"cds--select-optgroup\"\n        label=\"Category 1\"\n      >\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 1\"\n          value=\"all\"\n        >\n          Option 1\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 2\"\n          value=\"cloudFoundry\"\n        >\n          Option 2\n        </option>\n      </optgroup>\n      <optgroup\n        class=\"cds--select-optgroup\"\n        label=\"Category 2\"\n      >\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 3\"\n          value=\"staging\"\n        >\n          Option 3\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 4\"\n          value=\"dea\"\n        >\n          Option 4\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 5\"\n          value=\"router\"\n        >\n          Option 5\n        </option>\n      </optgroup>\n    </select>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-multi-select with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic HTML structure of the cds-multi-select component when rendered with minimum attributes. It includes a hidden label, a list box container, and slots for custom content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-multi-select.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<label\n  class=\"cds--label\"\n  hidden=\"\"\n  part=\"title-text\"\n>\n  <slot name=\"title-text\">\n  </slot>\n</label>\n<div\n  class=\"cds--list-box cds--list-box--md cds--multi-select\"\n  role=\"listbox\"\n>\n  <div\n    aria-controls=\"menu-body\"\n    aria-expanded=\"false\"\n    aria-haspopup=\"listbox\"\n    aria-labelledby=\"trigger-label\"\n    aria-owns=\"menu-body\"\n    class=\"cds--list-box__field\"\n    part=\"trigger-button\"\n    role=\"button\"\n    tabindex=\"0\"\n  >\n    <span\n      class=\"cds--list-box__label\"\n      id=\"trigger-label\"\n    >\n    </span>\n    <div\n      class=\"cds--list-box__menu-icon\"\n      id=\"trigger-caret\"\n    >\n    </div>\n  </div>\n  <slot name=\"slug\">\n  </slot>\n</div>\n<div\n  class=\"cds--form__helper-text\"\n  hidden=\"\"\n  part=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n  </slot>\n</div>\n<div\n  aria-live=\"assertive\"\n  aria-relevant=\"additions text\"\n  class=\"cds--assistive-text\"\n  role=\"status\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Canvas with Default StructuredList Story in JSX\nDESCRIPTION: This JSX code renders a Storybook Canvas component with the Default StructuredList story. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/StructuredList/StructuredList.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={StructuredListStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(StructuredListStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Progress Step with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the minimal HTML structure required for the cds-progress-step component. It includes a progress step button with a label slot and a progress line element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-progress-step.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  class=\"cds--progress-step-button\"\n  tabindex=\"0\"\n>\n  <slot name=\"label-text\">\n    <p\n      aria-describedby=\"label-tooltip\"\n      class=\"cds--progress-label\"\n      role=\"button\"\n      title=\"First step\"\n    >\n      First step\n    </p>\n  </slot>\n  <slot name=\"secondary-label-text\">\n  </slot>\n  <span class=\"cds--progress-line\">\n  </span>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack2/Babel6 for carbon-web-components\nDESCRIPTION: Webpack configuration example showing how to set up babel-loader with transform-object-rest-spread plugin to handle modern JavaScript features in carbon-web-components. This configuration targets the package's ES modules directory and applies necessary transpilation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/old-build-toolchain.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule: {\n  loaders: [\n    {\n      test: /\\.js$/,\n      include: [\n        path.dirname(require.resolve('@carbon/web-components/es')),\n      ],\n      use: [\n        {\n          loader: 'babel-loader',\n          options: {\n            babelrc: false,\n            plugins: ['transform-object-rest-spread']\n          }\n        }\n      ]\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components in JSX\nDESCRIPTION: Imports required components from Storybook blocks for documentation purposes, specifically the Description and Meta components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Description, Meta } from '@storybook/blocks';\n\n<Meta title=\"Introduction/Carbon CDN style helpers\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Dependencies\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/grid/examples/css-grid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Number Input Skeleton Component\nDESCRIPTION: Shows how to implement the skeleton variation of the number input component for loading states.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/number-input/number-input.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-number-input-skeleton></cds-number-input-skeleton>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and DefinitionTooltip Stories in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the DefinitionTooltip stories. It also imports a utility function for code previewing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/DefinitionTooltip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Story, ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as DefinitionTooltipStories from './DefinitionTooltip.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Including ArgTypes Component in JSX\nDESCRIPTION: Uses the ArgTypes component from Storybook to automatically generate documentation for the Dialog component's props and API.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dialog/Dialog.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Importing Component and ArgTypes for Storybook Documentation\nDESCRIPTION: This snippet imports the ArgTypes component from Storybook and the component being documented. It uses template literals to dynamically insert the component name.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/src/component/templates/mdx.template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes } from '@storybook/blocks';\nimport { <%= name %> } from './';\n```\n\n----------------------------------------\n\nTITLE: Using Global Prefix Variable in SCSS\nDESCRIPTION: Shows correct usage of the global $prefix variable for namespacing selectors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n.my-component {\n  // ...\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.#{$prefix}--my-component {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Carbon Motion in CommonJS\nDESCRIPTION: Example of importing the Carbon Motion package in a CommonJS JavaScript environment to access easings and the motion function.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/motion/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// CommonJS\nconst { easings, motion } = require('@carbon/motion');\n```\n\n----------------------------------------\n\nTITLE: SkeletonPlaceholder Story Canvas Implementation\nDESCRIPTION: Storybook Canvas implementation for the default SkeletonPlaceholder story with additional action for opening in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonPlaceholder/SkeletonPlaceholder.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={SkeletonPlaceholderStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () =>\n        stackblitzPrefillConfig(SkeletonPlaceholderStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon CLI with Yarn\nDESCRIPTION: Alternative command to install @carbon/cli package using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/cli\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Snapshots for Playwright Tests\nDESCRIPTION: This bash command demonstrates how to run Playwright tests with local snapshots enabled. It uses an environment variable to store snapshots locally for debugging purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_LOCAL_SNAPSHOTS=1 yarn playwright test --project chromium --grep @vrt component-test.e2e.js\n```\n\n----------------------------------------\n\nTITLE: Styling Selected Table Rows\nDESCRIPTION: SCSS code defining text color and border properties for selected table rows.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/core-library-style-questions.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\ntr:hover td,\ntr.#{$prefix}--data-table--selected td {\n  color: inherit;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Checkbox onChange Handler in React\nDESCRIPTION: This snippet demonstrates the change in the Checkbox component's onChange prop signature. The new version passes the event as the first argument and includes checked state and id in an object as the second argument.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n<Checkbox\n-  onChange={(checked, id, event) => {\n-    //\n-  }}\n+  onChange={(event, { checked, id }) => {\n+    //\n+  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting Grid Preview Development Server\nDESCRIPTION: Commands to install dependencies and start the development server using either yarn or npm\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/grid/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Using Canvas for Story Rendering\nDESCRIPTION: Usage of Storybook Canvas components to render different menu button examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu-button/menu-button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={MenuButtonStories.Default} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={MenuButtonStories.withDanger} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={MenuButtonStories.withDividers} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={MenuButtonStories.withIcons} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={MenuButtonStories.withMenuAlignment} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={MenuButtonStories.ExperimentalAutoAlign} />\n```\n\n----------------------------------------\n\nTITLE: CSS ShadyCSS Workaround Pattern\nDESCRIPTION: Demonstrates the workaround pattern for ShadyCSS limitations in IE11 when using slotted elements\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/coding-conventions.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.cds-ce--some-class ::slotted(cds-bar)\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for DefinitionTooltip Documentation\nDESCRIPTION: Imports necessary components from Storybook and tooltip stories for documentation purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tooltip/definition-tooltip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Story, ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport { cdnJs, cdnCss } from '../../globals/internal/storybook-cdn';\nimport * as DefinitionTooltipStories from './definition-tooltip.stories';\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Floating Styles with Feature Flag for ComboBox in React\nDESCRIPTION: This snippet demonstrates how to enable dynamic floating styles for a ComboBox component using the 'enable-v12-dynamic-floating-styles' feature flag. The code sets up a ComboBox with title and helper text while wrapping it in a FeatureFlags component to enable dynamic styling without collision detection.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/Combobox.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <ComboBox\n    onChange={() => {}}\n    id=\"carbon-combobox\"\n    items={comboBoxItems}\n    itemToString={(item) => (item ? item.text : '')}\n    titleText=\"ComboBox title\"\n    helperText=\"Combobox helper text\"\n    {...args}\n  />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components via JavaScript\nDESCRIPTION: This JavaScript code snippet imports essential Carbon web components and icons for use in building interactive UI elements like popovers. The 'import' statements load the necessary resources, preparing the environment for UI manipulation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/popover.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/popover/index.js';\nimport Checkbox16 from '@carbon/icons/lib/checkbox/16.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo Component for StructuredList Variants in React JSX\nDESCRIPTION: This code snippet renders a StorybookDemo component that displays the StructuredList component from the Carbon Design System. It configures the demo with three variants (Default, Simple, and Selection) and enables theme selection.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/StructuredList/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-structuredlist--default'\n    },\n    {\n      label: 'Simple',\n      variant: 'components-structuredlist--simple'\n    },\n    {\n      label: 'Selection',\n      variant: 'components-structuredlist--selection'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Text Input Component with Basic Attributes\nDESCRIPTION: This snippet shows the HTML structure generated when rendering a cds-text-input component with basic attributes. It includes form wrapper elements, input field with accessibility attributes, and placeholder for helper text and requirements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-text-input.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--form-item cds--text-input-wrapper\">\n  <div class=\"cds--text-input__label-wrapper\">\n  </div>\n  <div class=\"cds--text-input__field-outer-wrapper\">\n    <div class=\"cds--text-input__field-wrapper\">\n      <input\n        aria-describedby=\"helper-text\"\n        class=\"cds--text-input cds--text-input--md\"\n        id=\"input\"\n        type=\"text\"\n      >\n    </div>\n    <div\n      class=\"cds--form-requirement\"\n      hidden=\"\"\n    >\n      <slot name=\"\">\n      </slot>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-search Component with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure of the cds-search component when rendered with various attributes set. It includes custom label text, a disabled input field with custom placeholder and value, and a visible close button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-search.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--search-magnifier\">\n  <slot name=\"icon\">\n  </slot>\n</div>\n<label\n  class=\"cds--label\"\n  for=\"input\"\n  part=\"label-text\"\n>\n  <slot>\n    label-text-foo\n  </slot>\n</label>\n<input\n  autocomplete=\"\"\n  class=\"cds--search-input\"\n  disabled=\"\"\n  id=\"input\"\n  part=\"input\"\n  placeholder=\"placeholder-foo\"\n  role=\"\"\n  type=\"submit\"\n  value=\"value-foo\"\n>\n<button\n  aria-label=\"\"\n  class=\"cds--search-close\"\n  part=\"close-button\"\n  type=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Publishing Experimental Version with Git Diff\nDESCRIPTION: Shows the expected output of running 'git diff' after updating version and feature flags for an experimental release.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodified:   package.json\nmodified:   src/globals/js/feature-flags.js\nmodified:   src/globals/scss/_feature-flags.scss\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Skeleton Icon Example with Stackblitz Integration\nDESCRIPTION: Creates a Canvas component to display the AI Skeleton Icon example with an option to open it in Stackblitz for editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AISkeleton/AISkeleton.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={AISkeletonStories._AISkeletonIcon}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(AISkeletonStories._AISkeletonIcon),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting React Storybook for Local Playwright Testing\nDESCRIPTION: This command demonstrates how to start the React Storybook locally for testing components with Playwright. It's a prerequisite for running component tests.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/react\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Canvas for Link Component\nDESCRIPTION: This snippet shows how to render an inline Canvas for displaying Link components, using the Inline export from Link stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Canvas of={LinkStories.Inline} />\n```\n\n----------------------------------------\n\nTITLE: Skeleton Structured List Implementation in HTML\nDESCRIPTION: HTML example demonstrating the skeleton loading state of a Carbon structured list by using the specialized skeleton header cells component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/structured-list/structured-list.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-structured-list>\n  <cds-structured-list-head>\n    <cds-structured-list-header-row>\n      <cds-structured-list-header-cell-skeleton></cds-structured-list-header-cell-skeleton>\n      <cds-structured-list-header-cell-skeleton></cds-structured-list-header-cell-skeleton>\n      <cds-structured-list-header-cell-skeleton></cds-structured-list-header-cell-skeleton>\n    </cds-structured-list-header-row>\n  </cds-structured-list-head>\n  <cds-structured-list-body>\n    <cds-structured-list-row>\n      <cds-structured-list-cell></cds-structured-list-cell>\n      <cds-structured-list-cell></cds-structured-list-cell>\n      <cds-structured-list-cell></cds-structured-list-cell>\n    </cds-structured-list-row>\n    <cds-structured-list-row>\n      <cds-structured-list-cell></cds-structured-list-cell>\n      <cds-structured-list-cell></cds-structured-list-cell>\n      <cds-structured-list-cell></cds-structured-list-cell>\n    </cds-structured-list-row>\n    <cds-structured-list-row>\n      <cds-structured-list-cell></cds-structured-list-cell>\n      <cds-structured-list-cell></cds-structured-list-cell>\n      <cds-structured-list-cell></cds-structured-list-cell>\n    </cds-structured-list-row>\n  </cds-structured-list-body>\n</cds-structured-list>\n```\n\n----------------------------------------\n\nTITLE: Checking and Using Feature Flags in Sass\nDESCRIPTION: Shows how to use the 'enabled' function and mixin to check and conditionally apply styles based on feature flag status in Sass.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/feature-flags/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/feature-flags';\n\n// Return true if the flag is enabled\n@if feature-flags.enabled('feature-flag-name') {\n  //\n}\n\n@include enabled('feature-flag-name') {\n  // only include contents if the flag is enabled\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and NumberInput Stories in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the NumberInput stories. It also imports a utility function for code previewing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/NumberInput.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as NumberInputStories from './NumberInput.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Implementing Feature Flags at App Root Level\nDESCRIPTION: Example showing how to configure feature flags at the application root level using React StrictMode and createRoot.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FeatureFlags/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { FeatureFlags } from '@carbon/react';\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <FeatureFlags enableV12TileDefaultIcons=\"true\">\n      <App />\n    </FeatureFlags>\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and FormLabel Components in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the FormLabel component. It also imports story examples and a code previewer configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormLabel/FormLabel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Story, Canvas, Meta } from '@storybook/blocks';\nimport Tooltip from '../Tooltip';\nimport * as FormLabelStories from './FormLabel.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Storybook Demo for Carbon Web Components - JSX\nDESCRIPTION: This snippet renders the StorybookDemo React component configured for Carbon Web Components. It sets the demo to tall format and supplies a URL pointing to the Storybook instance, alongside an array of variant options that users can interact with. Dependencies include React and a definition for StorybookDemo; the key parameters are 'tall', a URL string, and an array of variant objects. The component expects these props for correct functionality and is intended for embedding interactive component demos.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/icons/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'elements-icons--default'\n    },\n    {\n      label: 'With Custom Class',\n      variant: 'elements-icons--with-custom-class'\n    },\n    {\n      label: 'With aria-label',\n      variant: 'elements-icons--with-aria-label'\n    },\n    {\n      label: 'With Title',\n      variant: 'elements-icons--with-title'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/styles with Yarn\nDESCRIPTION: Command to install the @carbon/styles package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/styles\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Carbon Grid Migration\nDESCRIPTION: Comprehensive documentation detailing the changes in Grid, Row, and Column components when migrating to Carbon 8.x. Includes information about CSS Grid implementation, subgrid behavior, and column spanning changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/migrate-to-8.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Migrate grid to 8.x\n\nTo get a sense of what's changed in the grid implementation, read through the\n[@carbon/grid migration documentation](docs/migration/11.x-grid.md). The most\nnotable item to mention is that the implementation uses CSS Grid instead of\nflexbox.\n\n## `<Grid>`\n\n- The prop interface for `<Grid>` is primarily the same.\n- When a `<Grid>` is a child of another `<Grid>`, the child will always be\n  automatically defined as a subgrid. More info can be found in the subgrid\n  story in the `@carbon/react` storybook.\n- The grid now defaults to 16 columns instead of 12.\n\n## `<Row>`\n\n- This has been removed. Columns can now be direct children of a `<Grid>`.\n\n## `<Column>`\n\n- The prop interface for `<Grid>` is primarily the same.\n- `<Column>` components without a `sm`, `md`, `lg`, etc. prop no longer\n  automatically expand to fill the remaining space of the grid. `<Column>` by\n  default spans only 1 column on the grid.\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Pictograms with Yarn\nDESCRIPTION: Alternative command to install the @carbon/pictograms package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/pictograms\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install package dependencies for the Layout preview and start the development server. Provides options for both yarn and npm package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/layout/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Grid Breakpoints Variable Reference\nDESCRIPTION: Reference to the $grid-breakpoints Sass variable that defines the grid system breakpoints according to the IDL specification.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/grid/ARCHITECTURE.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$grid-breakpoints\n```\n\n----------------------------------------\n\nTITLE: Dynamic State Translation Pattern in React\nDESCRIPTION: Shows how to implement translations that depend on dynamic state values by passing state information to the translation function.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ translateWithId: t = translateWithId }) {\n  const [count, updateCount] = useState(0);\n  const translationState = {\n    count,\n  };\n\n  return (\n    <>\n      <span>\n        The current count is:\n        {t('carbon.component-name.display-count', translationState)}\n      </span>\n      <button onClick={() => updateCount(count + 1)}>\n        {t('carbon.component-name.increment-count')}\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Optional Chaining Example\nDESCRIPTION: Demonstrates handling null values in TypeScript using optional chaining operator\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/coding-conventions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nobj?.property\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown for CDN JavaScript Integration\nDESCRIPTION: This snippet utilizes the Markdown component to inject dynamically generated JavaScript code for CDN integration, specifically focusing on the 'link' component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['link'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component in JavaScript via ES Modules\nDESCRIPTION: Code to import the Tabs component from Carbon Web Components library using ES modules. This is the first step to use the component in your application.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tabs/tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/tabs/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-text-input Component with Various Attributes in HTML\nDESCRIPTION: This snapshot shows the DOM structure of a cds-text-input component with multiple attributes including disabled state, light theme, extra large size, and various input attributes like autofocus, required, and pattern. It displays the component's structure with label, input field wrapper, helper text, and validity message sections.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-input.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<label\n  class=\"cds--label cds--label--disabled\"\n  for=\"input\"\n>\n  <slot name=\"label-text\">\n    label-text-foo\n  </slot>\n</label>\n<div class=\"cds--text-input__field-wrapper\">\n  <input\n    aria-describedby=\"helper-text\"\n    autocomplete=\"on\"\n    autofocus=\"\"\n    class=\"cds--text-input cds--text-input--light cds--text-input--xl\"\n    disabled=\"\"\n    id=\"input\"\n    name=\"name-foo\"\n    pattern=\"pattern-foo\"\n    placeholder=\"placeholder-foo\"\n    readonly=\"\"\n    required=\"\"\n    type=\"text\"\n  >\n</div>\n<div\n  class=\"cds--form__helper-text cds--form__helper-text--disabled\"\n  id=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n    helper-text-foo\n  </slot>\n</div>\n<div class=\"cds--form-requirement\">\n  <slot name=\"validity-message\">\n    validity-message-foo\n  </slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-expand-row with Selection Capability\nDESCRIPTION: Shows an expandable table row with both expand functionality and selection checkbox, including accessibility attributes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--table-expand\">\n  <button class=\"cds--table-expand__button\">\n  </button>\n</div>\n<div\n  class=\"cds--table-column-checkbox\"\n  part=\"selection-container\"\n>\n  <input\n    class=\"cds--checkbox\"\n    disabled=\"\"\n    hide-label=\"\"\n    label-text=\"selection-label-foo\"\n    name=\"selection-name-foo\"\n    value=\"selection-value-foo\"\n  >\n</div>\n<slot>\n</slot>\n  <label\n    aria-label=\"selection-label-foo\"\n    class=\"cds--checkbox-label\"\n    for=\"selection\"\n  >\n  </label>\n</div>\n<slot>\n</slot>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Content Switcher Item Selection\nDESCRIPTION: Fixes the issue where clicking on an icon in a content switcher wasn't properly identifying the current content-switcher-item, resolving issue #10963.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n* **content-switcher:** get current content-switcher-item on icon click ([#11602](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11602)) ([271295a](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/271295a242e04fb185b042b73f11bc03e1657953)), closes [#10963](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/10963)\n```\n\n----------------------------------------\n\nTITLE: Meta Component Declaration\nDESCRIPTION: Storybook Meta component declaration with isTemplate flag\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/CodeSnippet/CodeSnippet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Repository\nDESCRIPTION: Commands to build the Carbon repository from the root directory. Installs dependencies and builds the project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/light-dark-mode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Checkbox with Minimum Attributes\nDESCRIPTION: This code snippet shows the expected HTML structure when rendering a Carbon Design System checkbox component with minimum required attributes. It includes an input element with checkbox type, a label with text slot, a named slug slot, and a validation message container.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-checkbox.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n  aria-checked=\"true\"\n  aria-readonly=\"false\"\n  class=\"cds--checkbox\"\n  id=\"checkbox\"\n  part=\"input\"\n  type=\"checkbox\"\n>\n<label\n  class=\"cds--checkbox-label\"\n  for=\"checkbox\"\n  part=\"label\"\n  title=\"\"\n>\n  <span class=\"cds--checkbox-label-text\">\n    <slot>\n    </slot>\n  </span>\n</label>\n<slot name=\"slug\">\n</slot>\n<div class=\"cds--checkbox__validation-msg\">\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Importing Feature Flags in Component Config\nDESCRIPTION: Demonstrates how to import feature flags in a component's .config.js file for conditional rendering of experimental features.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst featureFlags = require('../../globals/js/feature-flags');\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Helpers in Icon Module\nDESCRIPTION: JavaScript import statement for including the getAttributes helper from @carbon/icon-helpers package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/building-an-icon-library.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAttributes } from '@carbon/icon-helpers';\n```\n\n----------------------------------------\n\nTITLE: Importing CDN Utility Function in JavaScript\nDESCRIPTION: This snippet imports the `cdnJs` utility function from a local project file. This function is likely used later in the MDX file to generate CDN link information or code snippets for the `form-group` component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\n```\n\n----------------------------------------\n\nTITLE: Making pictograms accessible with aria-label\nDESCRIPTION: React component example showing how to make pictograms accessible to screen readers by providing an aria-label attribute.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Airplane } from '@carbon/pictograms-react';\n\nfunction MyComponent() {\n  return (\n    <button>\n      <Airplane aria-label=\"Add\" />\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TextInput Stories and Components in React\nDESCRIPTION: This snippet shows the import statements for the Storybook components and TextInput stories used in the documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextInput/TextInput.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as TextInputStories from './TextInput.stories';\nimport * as PasswordInputStories from './PasswordInput.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Updating HTML for Carbon v10 Typography\nDESCRIPTION: This example shows how to update HTML markup for Carbon v10, replacing the v9 type class with a custom class.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-type.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"page-title\">Heading 1</h1>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Null Coalescing Example\nDESCRIPTION: Shows how to provide fallback values for null using the null coalescing operator\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/coding-conventions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvalue ?? fallbackValue\n```\n\n----------------------------------------\n\nTITLE: Screen Reader Output Examples for Link Component Accessibility\nDESCRIPTION: Markdown content describing the expected screen reader outputs for the Link component across different screen reader and browser combinations, including VoiceOver on Safari, JAWS on Edge/Chrome, and NVDA on Firefox.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/link-avt.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### VoiceOver on Safari\n\n\"{link text}, link. You are currently on a link. To click this link, press\nControl-Option-Space.\"\n\n### JAWS on Edge/Chrome\n\n\"Main region. {link text}, link.\"\n\n### NVDA on Firefox (optional, but recommended)\n\n\"link {link text}\"\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-header-cell with Sorting Capability\nDESCRIPTION: Displays a table header cell with sorting functionality, including a sort button and label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--table-sort\"\n  part=\"sort-button\"\n  title=\"\n      Name\n    \"\n>\n  <span class=\"cds--table-sort__flex\">\n    <span\n      class=\"cds--table-header-label\"\n      part=\"label-text\"\n    >\n      <slot>\n      </slot>\n    </span>\n    <slot name=\"slug\">\n    </slot>\n  </span>\n</button>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: This snippet demonstrates how to install dependencies and start the development server for the Colors Sass modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/examples/sass-modules/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-slider with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of the cds-slider component with minimum required attributes. It includes a label, slider container, range labels, and the slider itself with a thumb and track.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-slider.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<label class=\"cds--label\">\n  <slot name=\"label-text\">\n  </slot>\n</label>\n<div class=\"cds--slider-container\">\n  <span class=\"cds--slider__range-label\">\n    <slot name=\"min-text\">\n      0\n    </slot>\n  </span>\n  <div\n    class=\"cds--slider\"\n    role=\"presentation\"\n    tabindex=\"-1\"\n  >\n    <div\n      aria-valuemax=\"100\"\n      aria-valuemin=\"0\"\n      aria-valuenow=\"\"\n      class=\"cds--slider__thumb\"\n      id=\"thumb\"\n      role=\"slider\"\n      style=\"left: NaN%\"\n      tabindex=\"0\"\n    >\n    </div>\n    <div\n      class=\"cds--slider__track\"\n      id=\"track\"\n    >\n    </div>\n    <div class=\"cds-ce--slider__filled-track-container\">\n      <div\n        class=\"cds--slider__filled-track\"\n        style=\"transform: translate(0%, -50%) scaleX(NaN)\"\n      >\n      </div>\n    </div>\n  </div>\n  <span class=\"cds--slider__range-label\">\n    <slot name=\"max-text\">\n      100\n    </slot>\n  </span>\n  <slot>\n  </slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Compatibility\nDESCRIPTION: Shows how to configure theme compatibility between v10 and v11 tokens using SASS imports and theme configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_20\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/compat/themes' as compat;\n@use '@carbon/styles/scss/compat/theme' with (\n  $theme: compat.$g100\n);\n\nbody {\n  // You can use both v10 and v11 tokens\n  background: theme.$background;\n  color: theme.$text-01;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Section and Heading Usage - React JSX\nDESCRIPTION: Demonstrates how to use the Section component with a custom HTML tag using the 'as' prop instead of the default section element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Heading/Heading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Section as=\"article\">\n  <Heading>Your heading</Heading>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: State-Dependent Translations in React\nDESCRIPTION: Demonstrates how to handle translations that depend on component state, using specific message IDs for different states.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ translateWithId: t = translateWithId }) {\n  const [sortDirection, setSortDirection] = useState('ASC');\n\n  function onClick() {\n    if (sortDirection === 'ASC') {\n      setSortDirection('DESC');\n    } else {\n      setSortDirection('ASC');\n    }\n  }\n\n  return (\n    <>\n      <span>\n        {sortDirection === 'ASC'\n          ? t('carbon.component-name.sort.ascending')\n          : t('carbon.component-name.sort.descending')}\n      </span>\n      <button onClick={onClick}>t('carbon.component-name.toggle-sort')</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Reset in Carbon v10 vs v11\nDESCRIPTION: Shows the difference in import statements for CSS reset between Carbon v10 and v11 versions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@import 'carbon-components/scss/globals/scss/css--reset';\n@use '@carbon/styles/scss/reset';\n@use '@carbon/react/scss/reset';\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Modules in JavaScript\nDESCRIPTION: Demonstrates how to import icon modules in JavaScript after the directory transformation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/icons.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport CloudMenu from '@carbon/icons/es/cloud/menu';\nimport Menu16 from '@carbon/icons/es/menu/16';\n```\n\n----------------------------------------\n\nTITLE: Exporting Theme Token in JavaScript\nDESCRIPTION: Illustrates how to export a theme token in a theme file. The example defines the interactive01 token with a value referencing another color (blue60).\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const interactive01 = blue60;\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Metadata in YAML for Carbon Design System\nDESCRIPTION: Shows the structure of the metadata.yml file used to store icon metadata including usage, sizes, categories, and variants in the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/icons.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nicons:\n  - name: add\n    friendly_name: Add\n    usage: This is a description for usage\n    categories:\n      - Navigation\n    aliases:\n      - add\n      - plus\n      - cross\n      - create\n    sizes:\n      - 16\n      - 32\n    variants:\n      - name: add--alt\n        usage: This is a description for usage\n        sizes:\n          - 16\n          - 32\n      - name: add--filled\n        usage: This is a description for usage\n        sizes:\n          - 16\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Textarea Component in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to showcase different variants of the Textarea component in the Carbon Design System. It includes the default textarea, as well as experimental fluid versions with layers and tooltips.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextArea/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-textarea--default'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidtextarea--default'\n    },\n    {\n      label: 'Fluid with Layers (unstable)',\n      variant: 'experimental-unstable-fluidtextarea--default-with-layers'\n    },\n    {\n      label: 'Fluid with Tooltip (unstable)',\n      variant: 'experimental-unstable-fluidtextarea--default-with-tooltip'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Popover Component and Checkbox Icon - JavaScript\nDESCRIPTION: Demonstrates importing the Popover web component and Checkbox16 icon for use within a project. Requires the '@carbon/web-components' and '@carbon/icons' packages to be installed and available via the specified paths. These imports are prerequisites for rendering the popover UI and embedding the icon within it; no parameters or runtime outputs are produced by these static import statements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@carbon/web-components/es/components/popover/index.js';\nimport Checkbox16 from '@carbon/icons/lib/checkbox/16.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Expandable Tile with Minimum Attributes in HTML\nDESCRIPTION: This snippet shows the basic HTML structure for an expandable tile component. It includes a button for expanding/collapsing and a content area with above and below the fold sections.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-controls=\"below-the-fold-content\"\n  aria-expanded=\"false\"\n  aria-labelledby=\"above-the-fold-content\"\n  class=\"cds--tile__chevron\"\n  tabindex=\"0\"\n>\n</button>\n<div\n  class=\"cds--tile-content\"\n  id=\"content\"\n>\n  <div>\n    <slot name=\"above-the-fold-content\">\n    </slot>\n  </div>\n  <div class=\"cds-ce--expandable-tile--below-the-fold-content\">\n    <slot>\n    </slot>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Codemod to Update StaticNotification to Callout in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use npx to run a codemod that automatically updates all instances of StaticNotification to Callout in a project. The --write flag is used to apply the changes directly to the files.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Notification/stories/StaticNotification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpx @carbon/upgrade migrate refactor-to-callout --write\n```\n\n----------------------------------------\n\nTITLE: Importing Spacing Module from Carbon Styles - Sass\nDESCRIPTION: Shows how to import the spacing utilities using the @use rule from the @carbon/styles package, as required in v11. This makes spacing scale variables accessible under the 'spacing' namespace. Dart Sass is a prerequisite, and after import, spacing variables (e.g., $spacing-01) become available from the specified namespace.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_26\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/spacing';\n```\n\n----------------------------------------\n\nTITLE: Hover State Table Row Styling\nDESCRIPTION: SCSS code specifying styling rules for table rows in hover state, including border properties and background colors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/data-table/core-library-style-questions.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\ntr:hover td {\n  border-top: 1px solid $hover-selected-ui;\n  border-bottom: 1px solid $hover-selected-ui;\n  color: $text-01;\n  background-color: $hover-row;\n  \n  &:first-of-type,\n  &:last-of-type {\n    border-left: 1px solid $hover-selected-ui;\n    border-right: 1px solid $hover-selected-ui;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Component Property Changes in Markdown\nDESCRIPTION: Detailed breakdown of property changes across multiple Carbon Design System components, including renamed properties, new additions, and removals. The documentation covers UI components like number inputs, overflow menus, pagination controls, tooltips, and UI shell elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/cwc-v2-migration.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### number-input\n\n- Removed `color-scheme` and `mobile` properties\n- `size` property expected values have been changed from '' (default), 'sm',\n  'xl' --> 'sm', 'md' (default), and 'lg'\n- `validity-message-min` and `validity-message-max` properties replaced with\n  `decrement-button-assistive-text` and `increment-button-assistive-text`\n  respectively\n- `label-text` property replaced with `label`\n- New `warn` and `warn-text` properties for warn state\n- New `invalid-text` that appears when in invalid state\n- New `hide-label` property\n- New`allow-empty` property to allow empty string\n- New `hide-steppers` property for option to hide increment/decrement steppers\n```\n\n----------------------------------------\n\nTITLE: Enabling Carbon Feature Flags\nDESCRIPTION: Examples showing two methods for enabling experimental features in Carbon styles using feature flags.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/sass.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/feature-flags' with (\n  $feature-flags: (\n    'enable-experimental-tile-contrast': true,\n  )\n);\n@use '@carbon/styles';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/feature-flags';\n@use '@carbon/styles';\n\n@include feature-flags.enable('enable-experimental-tile-contrast');\n```\n\n----------------------------------------\n\nTITLE: @carbon/upgrade CLI Options and Commands\nDESCRIPTION: Full list of available commands and options for the @carbon/upgrade CLI tool.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/upgrade/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: @carbon/upgrade [options]\n\nCommands:\n  @carbon/upgrade upgrade                   upgrade your project       [default]\n  @carbon/upgrade migrate <migration>       run a Carbon migration on your\n  [paths...]                                source files\n  @carbon/upgrade migrate list              list all available migrations\n\nOptions:\n      --help     Show help                                             [boolean]\n      --version  Show version number                                   [boolean]\n      --force    force execution if the cli encounters an error while doing\n                 safety checks                        [boolean] [default: false]\n  -w, --write    update the files with changes found by running the migration\n                                                      [boolean] [default: false]\n  -v, --verbose  optionally include additional logs, useful for debugging\n                                                      [boolean] [default: false]\n```\n\n----------------------------------------\n\nTITLE: Including CDN JavaScript for Toggletip Component\nDESCRIPTION: This snippet includes a Markdown template literal that likely renders CDN JavaScript links for the toggletip component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle-tip/toggletip.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n${cdnJs({ components: ['toggletip'] })}\n```\n\n----------------------------------------\n\nTITLE: Exporting Color Definition in JavaScript\nDESCRIPTION: Demonstrates how to export a color definition in the colors.js file. The example shows defining a color name (red10) with its corresponding HEX value.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/colors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const red10 = '#fff0f1';\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Component\nDESCRIPTION: Meta component configuration for the Storybook documentation template.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Notification/Notification.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Using Font Family Functions in SCSS\nDESCRIPTION: How to access specific font families from the Carbon type system using SCSS functions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n.my-selector {\n  font-family: type.font-family('mono');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Loading Component Dependencies in JSX\nDESCRIPTION: Import statements for the Loading component documentation, including Storybook blocks, Loading component and stories, and code previewer configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Loading/Loading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport Loading from '../Loading';\nimport * as LoadingStories from './Loading.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Progress Bar with Minimum Attributes\nDESCRIPTION: Example of rendering a cds-progress-bar component with only required attributes. It shows the default styling with 0% progress and minimal configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-progress-bar.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--progress-bar cds--progress-bar--big cds--progress-bar--default\">\n  <div class=\"cds--progress-bar__label\">\n    <span class=\"cds--progress-bar__label-text\">\n    </span>\n  </div>\n  <div\n    aria-busy=\"true\"\n    aria-invalid=\"false\"\n    aria-valuemax=\"100\"\n    aria-valuemin=\"0\"\n    aria-valuenow=\"0\"\n    class=\"cds--progress-bar__track\"\n    role=\"progressbar\"\n  >\n    <div\n      class=\"cds--progress-bar__bar\"\n      style=\"transform: scaleX(0);\"\n    >\n    </div>\n  </div>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Defining ActionPlugin Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of a plugin for the issues action. It includes properties for the plugin name, optional conditions, and a run function that takes the GitHub action context and Octokit instance as parameters.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/actions/issues/ARCHITECTURE.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionPlugin {\n  name: string;\n  conditions?: [ActionPluginCondition];\n  run: (context: GitHubActionContext, octokit: Octokit) => Promise<void>;\n}\n\ninterface ActionPluginCondition {\n  key: string;\n  run: (context: GitHubActionContext, octokit: Octokit) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Menu with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a header menu with minimum required attributes. It includes a trigger element and a menu body with a slot for content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  aria-expanded=\"false\"\n  aria-haspopup=\"menu\"\n  class=\"cds--header__menu-item cds--header__menu-title\"\n  href=\"javascript:void 0\"\n  part=\"trigger\"\n  role=\"button\"\n  tabindex=\"0\"\n>\n</a>\n<ul\n  class=\"cds--header__menu\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Styles in SCSS\nDESCRIPTION: This snippet shows how to import the necessary SCSS styles for the Theme component to work correctly in a project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Theme/Theme.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/zone';\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Family Plex Loading in SCSS\nDESCRIPTION: This snippet shows how to configure SCSS to use per-family Plex packages instead of the legacy monolithic package. This is recommended for new projects.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with (\n  $use-per-family-plex: true\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Selectable Tile with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates a selectable tile with additional attributes such as name, value, and light theme. It also shows the tile in a selected state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  class=\"cds--tile-input\"\n  id=\"input\"\n  name=\"name-foo\"\n  tabindex=\"-1\"\n  type=\"checkbox\"\n  value=\"value-foo\"\n>\n<label\n  class=\"cds--tile cds--tile--is-selected cds--tile--light cds--tile--selectable\"\n  for=\"input\"\n  tabindex=\"0\"\n>\n  <div class=\"cds--tile__checkmark cds--tile__checkmark--persistent\">\n  </div>\n  <div class=\"cds--tile-content\">\n    <slot>\n    </slot>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Understanding meta.json Structure in Carbon Icons\nDESCRIPTION: Explains the structure of the meta.json file used for generating component icon libraries in the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/icons.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filename\": \"add--outline.svg\",\n  \"basename\": \"add--outline\",\n  \"size\": 16,\n  \"prefix\": [\n    \"16\"\n  ],\n  \"descriptor\": {\n    \"elem\": \"svg\",\n    \"attrs\": {\n      \"...\": \"...\"\n    },\n    \"content\": [\n      {\n        \"elem\": \"path\",\n        \"attrs\": {\n          \"d\": \"...\"\n        }\n      }\n    ]\n  },\n  \"moduleName\": \"AddOutline16\",\n  \"outputOptions\": {\n    \"file\": \"es/add--outline/16.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Single-line Code Snippet Example in JSX/Storybook\nDESCRIPTION: Renders the Single-line code snippet variation for demonstration and copy in a Storybook Canvas. Draws from the 'Singleline' property of CodeSnippetStories, facilitating isolated visual feedback. There are no required inputs other than the imported story reference.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Canvas of={CodeSnippetStories.Singleline} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Expandable Tile with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates an expandable tile in its expanded state. It shows how the aria-expanded attribute and the below-the-fold content's style change when the tile is expanded.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-controls=\"below-the-fold-content\"\n  aria-expanded=\"true\"\n  aria-labelledby=\"above-the-fold-content\"\n  class=\"cds--tile__chevron\"\n  tabindex=\"0\"\n>\n</button>\n<div\n  class=\"cds--tile-content\"\n  id=\"content\"\n>\n  <div>\n    <slot name=\"above-the-fold-content\">\n    </slot>\n  </div>\n  <div\n    class=\"cds-ce--expandable-tile--below-the-fold-content\"\n    style=\"max-height: 0px\"\n  >\n    <slot>\n    </slot>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Type Utility Classes in SCSS\nDESCRIPTION: How to include the pre-defined CSS utility classes for typography in your project's stylesheet.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/type';\n\n:root {\n  @include type.type-classes();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Icon Size Migration Codemod\nDESCRIPTION: Command to run the automated codemod that updates imports and size usage from the old pattern to the new size prop pattern in @carbon/icons-react.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/upgrade migrate icons-react-size-prop --write\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Task Entry Point\nDESCRIPTION: JavaScript code for the entry point of the build task, typically located in tasks/build.js.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/building-an-icon-library.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst path = require('path');\nconst build = require('../src/build');\n\nbuild({ cwd: path.resolve(__dirname, '../') }).catch((error) => {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a cds-select component with various attributes in HTML\nDESCRIPTION: This example demonstrates a disabled select component with additional attributes including label text, helper text, and an extra large size. It shows how to combine multiple properties to create a complete form control.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-select.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--select cds--select--disabled\">\n  <label\n    class=\"cds--label cds--label--disabled\"\n    for=\"input\"\n  >\n    <slot name=\"label-text\">\n      label-text-foo\n    </slot>\n  </label>\n  <div class=\"cds--select-input__wrapper\">\n    <select\n      aria-invalid=\"false\"\n      aria-readonly=\"false\"\n      class=\"cds--select-input cds--select-input--xl\"\n      disabled=\"\"\n      id=\"input\"\n    >\n      <optgroup\n        class=\"cds--select-optgroup\"\n        label=\"Category 1\"\n      >\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 1\"\n          value=\"all\"\n        >\n          Option 1\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 2\"\n          value=\"cloudFoundry\"\n        >\n          Option 2\n        </option>\n      </optgroup>\n      <optgroup\n        class=\"cds--select-optgroup\"\n        label=\"Category 2\"\n      >\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 3\"\n          value=\"staging\"\n        >\n          Option 3\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 4\"\n          value=\"dea\"\n        >\n          Option 4\n        </option>\n        <option\n          class=\"cds--select-option\"\n          label=\"Option 5\"\n          value=\"router\"\n        >\n          Option 5\n        </option>\n      </optgroup>\n    </select>\n  </div>\n  <div class=\"cds--form__helper-text cds--form__helper-text--disabled\">\n    <slot name=\"helper-text\">\n      helper-text-foo\n    </slot>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Inline Loading Component with Inactive Status\nDESCRIPTION: HTML structure for the inline loading component with inactive status. The loading spinner includes an additional 'cds--loading--stop' class to indicate the inactive state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-loading.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--inline-loading__animation\">\n  <div class=\"cds--loading cds--loading--small cds--loading--stop\">\n  </div>\n</div>\n<p class=\"cds--inline-loading__text\">\n  <slot>\n  </slot>\n</p>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table structure that displays contributor information including profile pictures, names, and contribution types. Each cell contains a GitHub profile link, avatar image, contributor name, and contribution indicators using emoji.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/sophiiae\"><img src=\"https://avatars.githubusercontent.com/u/18622886?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Fei Z</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=sophiiae\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Small Toggle Example in Storybook\nDESCRIPTION: This snippet uses the Storybook Canvas component to render the small Toggle story, showcasing the compact variant of the Toggle component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle/toggle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas of={ToggleStories.SmallToggle} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Navigation Item with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a header navigation item with minimum required attributes. It includes a slot for content within a span element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--header__menu-item\"\n  part=\"link\"\n  tabindex=\"0\"\n>\n  <span\n    class=\"cds--text-truncate--end\"\n    part=\"title\"\n  >\n    <slot>\n    </slot>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Fix for Custom Element Components in Carbon Web Components\nDESCRIPTION: Ensures all Carbon Web Components use the carbonElement decorator consistently. This likely standardizes behavior and styling across all components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* **custom-element:** ensure all cwc components use carbonElement ([#11937](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11937)) ([f727bae](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/f727bae4e80fce59991dc8ad7bf5ea9e68c01cbc))\n```\n\n----------------------------------------\n\nTITLE: Rendering PageHeader Default Story with Stackblitz Integration in JSX\nDESCRIPTION: This code snippet demonstrates how to render the default PageHeader story using Storybook's Canvas component. It includes an additional action to open the component in Stackblitz for live editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/PageHeader/PageHeader.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={PageHeaderStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(PageHeaderStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-expand-row with Minimum Attributes\nDESCRIPTION: Displays an expandable table row with just an expand button and content slot.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--table-expand\">\n  <button class=\"cds--table-expand__button\">\n  </button>\n</div>\n<slot>\n</slot>\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Inline Loading Component with Unknown Status\nDESCRIPTION: HTML structure for the inline loading component when status is unknown. This simplified version only contains the text element with a slot for custom content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"cds--inline-loading__text\">\n  <slot>\n  </slot>\n</p>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Carbon Skeleton Text Component in JSX\nDESCRIPTION: Sets up a live Storybook demo for the Carbon skeleton text component. The demo links to the Carbon Web Components site and specifies a default variant of the skeleton text component to display. The 'tall' prop is used to create a taller demo container.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-text/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-skeleton-text--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styles Migration Status Table in Markdown\nDESCRIPTION: A markdown table outlining the migration status of SCSS style paths and global style features in Carbon v10, including deprecation notices and links to migration guides.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/migration/migrate-to-10.x.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `scss` path          | v10                                                                           |\n| -------------------- | ----------------------------------------------------------------------------- |\n| `src`                | Deprecated in v10, use `scss` instead [Migrate](../../src/migrate-to-10.x.md) |\n| `scss/globals`       | [Migrate](../../src/globals/scss/migrate-to-10.x.md)                          |\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Element with Various Attributes in Carbon Design System\nDESCRIPTION: Demonstrates how the cds-button component renders with various attributes applied. The output includes the standard button structure with CSS classes for styling, type attribute, and slots for content and icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-button.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--btn cds--btn--lg cds--btn--primary cds--layout--size-lg\"\n  id=\"button\"\n  part=\"button\"\n  type=\"button\"\n>\n  <slot>\n  </slot>\n  <slot name=\"icon\">\n  </slot>\n</button>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value on Date Picker - HTML\nDESCRIPTION: This HTML snippet shows how to set a default date value for the picker via the value attribute. The value can be a string compliant with the expected input format. Input expects a value string, kind, and placeholder, resulting in a date picker input prefilled with the given value. All dependencies are provided by the Carbon Web Components library.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/date-picker/date-picker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<cds-date-picker>\\n  <cds-date-picker-input\\n    kind=\\\"single\\\"\\n    placeholder=\\\"mm/dd/yyyy\\\"\\n    value=\\\"04/17/2025\\\"></cds-date-picker-input>\\n</cds-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Component with AI Label in Storybook Canvas\nDESCRIPTION: This snippet renders the Form component story with an AI label in a Storybook Canvas. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Form/Form.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={FormStories.withAILabel}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(FormStories.withAILabel),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Font Path with SCSS\nDESCRIPTION: SCSS configuration showing how to set a custom font path while using per-family packages.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with (\n  $use-akamai-cdn: false,\n  $use-per-family-plex: true,\n\n  // Set the custom path to font assets in your app\n  $font-path: 'path/to/fonts'\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Components from Storybook in JSX\nDESCRIPTION: Imports the ArgTypes and Meta components from Storybook's blocks module for documentation purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dialog/Dialog.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Inline Code Snippet with Various Attributes\nDESCRIPTION: Shows the HTML structure of an inline code snippet with various attributes. Uses a cds-copy component with inline snippet class names and includes slots for content and tooltip text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<cds-copy button-class-name=\"cds--snippet cds--snippet--inline\">\n  <code slot=\"icon\">\n    <slot>\n    </slot>\n  </code>\n  <span slot=\"tooltip-content\">\n    Copy to Clipboard\n  </span>\n</cds-copy>\n\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Components from Carbon React\nDESCRIPTION: Basic import statement for the main grid components from the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FlexGrid, Row, Column } from '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-header-cell with Minimum Attributes\nDESCRIPTION: Shows the basic structure of a table header cell with slots for content and slug.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span\n  class=\"cds--table-header-label\"\n  part=\"label-text\"\n>\n  <slot>\n  </slot>\n  <slot name=\"slug\">\n  </slot>\n</span>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Single Line Code Snippet with Various Attributes\nDESCRIPTION: Shows the HTML structure of a single line code snippet with various attributes. Similar to the minimum version but potentially with additional functionality or styling options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div\n  aria-label=\"code-snippet\"\n  aria-multiline=\"\"\n  aria-readonly=\"true\"\n  class=\"cds--snippet-container\"\n  role=\"textbox\"\n  style=\"\"\n  tabindex=\"0\"\n>\n  <pre>\n    <code>\n      <slot>\n      </slot>\n    </code>\n  </pre>\n</div>\n<div class=\"cds--snippet__overflow-indicator--right\">\n</div>\n<cds-copy-button\n  button-class-name=\"\"\n  feedback=\"Copied!\"\n  feedback-timeout=\"2000\"\n>\n  Copy to Clipboard\n</cds-copy-button>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-copy-button with Minimum Attributes in HTML\nDESCRIPTION: Example of rendering the cds-copy-button component with the minimum required attributes. It includes a button class name, feedback text, and a timeout for the feedback.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-copy-button.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<cds-copy\n  button-class-name=\"cds--copy-btn\"\n  feedback=\"Copied!\"\n  feedback-timeout=\"2000\"\n>\n  <slot slot=\"tooltip-content\">\n  </slot>\n</cds-copy>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: This snippet demonstrates how to install project dependencies using either yarn or npm, and then start the development server. It provides options for both package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/codesandbox-styles/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Carbon Theme Color Group in Sass\nDESCRIPTION: This snippet demonstrates how to import a specific color group (g10 in this case) from the @carbon/themes package and apply it using a mixin.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-themes.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/themes/scss/g10';\n\n@include carbon--theme-g10();\n```\n\n----------------------------------------\n\nTITLE: Installing jest-config-carbon using npm\nDESCRIPTION: Command to install jest-config-carbon package using npm package manager. This will add the package as a dependency to your project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/jest-config-carbon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S jest-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-link with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates the cds-link component with a range of additional attributes such as download, hreflang, ping, rel, role, target, and type. It showcases the component's flexibility in different use cases.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-link.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a\n  class=\"cds--link\"\n  download=\"file-name-foo\"\n  href=\"about:blank\"\n  hreflang=\"en\"\n  id=\"link\"\n  part=\"link\"\n  ping=\"about:blank\"\n  rel=\"noopener\"\n  role=\"button\"\n  tabindex=\"0\"\n  target=\"_blank\"\n  type=\"text/plain\"\n>\n  <slot>\n  </slot>\n  <div\n    class=\"cds--link__icon\"\n    hidden=\"\"\n  >\n    <slot name=\"icon\">\n    </slot>\n  </div>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Popover Usage Example in HTML/Markdown\nDESCRIPTION: Demonstrates the usage of keyboard input element in documentation using markdown kbd tag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Popover/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>esc</kbd>\n```\n\n----------------------------------------\n\nTITLE: Declaring Unstable Exports in JavaScript\nDESCRIPTION: Demonstrates how to declare and export unstable functions, variables, and components using the 'unstable_' prefix in JavaScript.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/experimental-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// An unstable method\nfunction unstable_layout() {\n  // ...\n}\n\n// An unstable variable\nconst unstable_meta = {\n  // ...\n};\n\n// An unstable component will retain its name, specifically for things like\n// the rules of hooks plugin which depend on the correct casing of the name\nfunction ComponentName(props) {\n  // ...\n}\n\n// However, when we export the component we will export it with the `unstable_`\n// prefix. (Similar to React.unstable_Suspense, React.unstable_Profiler)\nexport { default as unstable_ComponentName } from './components/ComponentName';\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree View Default Story\nDESCRIPTION: This snippet renders the default story for the Tree View component using Storybook's Canvas component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<Canvas of={TreeViewStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for CSS Grid Classes in CDN Build\nDESCRIPTION: Creates a new artifact 'cssgrid.css' to emit CSS grid classes, likely improving modularization of styles and optimizing delivery via CDN.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n* **cdn:** emit the CSS grid classes in a new artifact cssgrid.css ([#11626](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11626)) ([98afd6a](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/98afd6a25015763508cca5fec6625db5acd38808))\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for OrderedList in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to display live examples of the OrderedList component. It includes a theme selector and provides three variants: default, native list styles, and nested.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OrderedList/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-orderedlist--default'\n    },\n    {\n      label: 'Native List Styles',\n      variant: 'components-orderedlist--native-list-styles'\n\n    },\n    {\n      label: 'Nested',\n      variant: 'components-orderedlist--nested'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating SCSS Configuration from Akamai CDN\nDESCRIPTION: SCSS configuration to disable Akamai CDN and enable per-family packages.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with (\n  // Remove or set Akamai CDN to false\n  // $use-akamai-cdn: false,\n  // Enable per-family packages\n  $use-per-family-plex: true\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Navigation Link with Various Attributes in HTML\nDESCRIPTION: This snippet shows a side navigation link with additional attributes. It includes a href attribute and a CSS class to indicate the current state.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--side-nav__link cds--side-nav__link--current\"\n  href=\"about:blank\"\n  part=\"link\"\n>\n  <div\n    class=\"cds--side-nav__icon\"\n    id=\"title-icon-container\"\n    part=\"title-icon-container\"\n  >\n    <slot name=\"title-icon\">\n    </slot>\n  </div>\n  <span\n    class=\"cds--side-nav__link-text\"\n    part=\"title\"\n  >\n    <slot>\n    </slot>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Navigation Item with Various Attributes in HTML\nDESCRIPTION: This snippet shows a header navigation item with additional attributes. It includes a href attribute for the anchor tag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--header__menu-item\"\n  href=\"about:blank\"\n  part=\"link\"\n  tabindex=\"0\"\n>\n  <span\n    class=\"cds--text-truncate--end\"\n    part=\"title\"\n  >\n    <slot>\n    </slot>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Implementation of Skeleton Icon Component\nDESCRIPTION: Demonstrates the basic HTML markup for using the Skeleton Icon component in a web page.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-icon/skeleton-icon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-skeleton-icon></cds-skeleton-icon>\n```\n\n----------------------------------------\n\nTITLE: TooltipIcon to IconButton Migration - After\nDESCRIPTION: Example showing how to migrate from TooltipIcon to IconButton in v11.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IconButton } from '@carbon/react';\n\nfunction ExampleComponent() {\n  return (\n    <IconButton\n      label=\"Example tooltip\"\n      onClick={() => {\n        // ...\n      }}>\n      <Filter />\n    </IconButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Carbon Pictograms React Package in Markdown\nDESCRIPTION: Steps to update the carbon-pictograms-react package and handle removed pictogram components when migrating from v10 to v11 of the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/11.x-pictograms-react.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Update your `carbon-pictograms-react` package using `npm` or `yarn`.\n1. When migrating from v10 to v11, you'll first want to address your pictogram\n   instances marked with `removed` in the table below. E.g. if you're using the\n   `<BerlinBrandenburg />` pictogram React component that was previously\n   available in Carbon, you'll need to either remove your pictogram component or\n   create your own pictogram component so the `<BerlinBrandenburg />` syntax is\n   recognized in your client-side JavaScript.\n```\n\n----------------------------------------\n\nTITLE: Updating SCSS Breakpoint Mixin Usage\nDESCRIPTION: Example showing how to update the Carbon breakpoint mixin usage by removing the 'carbon--' prefix in v11.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- @include carbon--breakpoint(lg) {\n+  @include breakpoint(lg) {\n      width: 42%;\n  }\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Color Maps in Sass with @carbon/colors\nDESCRIPTION: Shows how to access and iterate over the full color map provided by @carbon/colors. This can be useful for generating styles based on all available colors and grades.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/docs/sass.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/colors';\n\n@each $swatch, $grades in colors.$colors {\n  @each $grade in $grades {\n    //\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the CSS prefix by configuring scss/config directly\nDESCRIPTION: An alternative approach to customize the CSS class prefix by configuring the $prefix variable directly in the scss/config module.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ClassPrefix/ClassPrefix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/config' with (\n  $prefix: 'custom'\n);\n```\n\n----------------------------------------\n\nTITLE: Importing CodeSnippet Dependencies\nDESCRIPTION: Import statements for the CodeSnippet component and related Storybook dependencies\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/CodeSnippet/CodeSnippet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Story, ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport CodeSnippet from '../CodeSnippet';\nimport * as CodeSnippetStories from './CodeSnippet.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Themes in Sass\nDESCRIPTION: This snippet shows how to import all themes from the @carbon/themes package in a Sass file. It loads the default 'white' color group.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-themes.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/themes/scss/themes';\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/web-components with Yarn - Bash\nDESCRIPTION: Installs the @carbon/web-components package using Yarn, which provides the same functionality as npm but via the Yarn package manager. Ensure you have Yarn installed first. Running this command in your project directory will add @carbon/web-components to your project dependencies and make it available for import. Outputs: a yarn.lock entry and installed node_modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/welcome.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/web-components\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in Sass Using Configuration\nDESCRIPTION: Example of enabling feature flags in Sass using the @use rule with configuration options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FeatureFlags/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n@use '@carbon/react/scss/feature-flags' with (\n  $feature-flags: (\n    'enable-experimental-tile-contrast': true,\n  )\n);\n@use '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Color Token Migration Table - v9 to v10\nDESCRIPTION: Markdown table showing the mapping of color tokens between v9 and v10, including new tokens (✨), deprecated tokens (☠️), and unchanged tokens.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-color.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| v9                     | v10                            |\n| ---------------------- | ------------------------------ |\n| `brand-01`             | replaced with `interactive-01` |\n| `brand-02`             | replaced with `interactive-02` |\n| `brand-03`             | replaced with `interactive-03` |\n|                        | ✨ `interactive-04`            |\n| `ui-01`                | No change                      |\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Running Jscodeshift Transform\nDESCRIPTION: Command to run a specific codemod transform on project files using jscodeshift.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/upgrade/transforms/ARCHITECTURE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn jscodeshift -t transforms/<name>.js 'path/to/file'\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to install project dependencies and start the development server using either yarn or npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/class-prefix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Clickable Tile with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates a clickable tile with additional attributes such as download, href, hreflang, and others. It shows how to configure a more complex clickable tile.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--link cds--tile cds--tile--clickable\"\n  download=\"file-name-foo\"\n  href=\"about:blank\"\n  hreflang=\"en\"\n  id=\"link\"\n  part=\"link\"\n  ping=\"about:blank\"\n  rel=\"noopener\"\n  role=\"button\"\n  tabindex=\"0\"\n  target=\"_blank\"\n  type=\"text/plain\"\n>\n  <slot>\n  </slot>\n  <div\n    class=\"cds--link__icon\"\n    hidden=\"\"\n  >\n    <slot name=\"icon\">\n    </slot>\n  </div>\n</a>\n```\n\n----------------------------------------\n\nTITLE: OrderedList Canvas Component Usage\nDESCRIPTION: Implementation of Storybook Canvas component with Stackblitz integration for demonstrating OrderedList examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OrderedList/OrderedList.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={OrderedListStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(OrderedListStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: TimePicker Canvas Implementation\nDESCRIPTION: Implements a Storybook Canvas component to display the default TimePicker story with additional action for opening in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TimePicker/TimePicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TimePickerStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TimePickerStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Links for GitHub Repository\nDESCRIPTION: Markdown link syntax directing users to the GitHub edit page for the Dropdown component documentation file.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[GitHub](https://github.com/carbon-design-system/carbon/edit/main/packages/react/src/components/Dropdown/Dropdown.mdx)\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Tag Component in Carbon Design System\nDESCRIPTION: This code snippet sets up a StorybookDemo component for the Tag component. It specifies the demo URL and defines two variants: Default and Filter. The demo is configured to be tall and points to the Carbon Web Components implementation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tag/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-tag--default'\n    },\n    {\n      label: 'Filter',\n      variant: 'components-tag--filter'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Canvas with Default InlineLoading Story\nDESCRIPTION: This JSX snippet renders a Storybook Canvas component with the default InlineLoading story. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/InlineLoading/InlineLoading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={InlineLoadingStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(InlineLoadingStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Navigation with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a header navigation component with minimum required attributes. It includes a divider and a menu bar with a slot for content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  class=\"cds-ce--header__divider\"\n  part=\"divider\"\n>\n</div>\n<ul\n  aria-label=\"\"\n  class=\"cds--header__menu-bar\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Updating Component Imports in Carbon Design System\nDESCRIPTION: Example showing how to update the import statement from using namespaced TextInput.PasswordInput to directly importing PasswordInput component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/11.x-namespaced-exports.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { TextInput } from 'carbon-components-react';\n+ import { PasswordInput } from 'carbon-components-react';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and InlineLoading Components\nDESCRIPTION: This code snippet imports necessary components from Storybook and the InlineLoading component along with its stories. It also imports a utility function for Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/InlineLoading/InlineLoading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport InlineLoading from '../InlineLoading';\nimport * as InlineLoadingStories from './InlineLoading.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing VM into VirtualBox\nDESCRIPTION: This snippet explains how to import a downloaded VM image into VirtualBox.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/setup/virtual-machines.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDouble click the `IE11 - Win81.ovf` file from the folder that you unpacked to import the VM into VirtualBox.\n```\n\n----------------------------------------\n\nTITLE: Feature Addition of Shadow Parts to dotcom-components\nDESCRIPTION: Adds shadow parts to dotcom components, allowing for more flexible styling of web components through CSS. This feature addresses issue #11673.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* **dotcom-components:** add shadowparts ([#11812](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11812)) ([b8983f2](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/b8983f2c98b8339cc5e678db5b9ac0d4e5508278)), closes [#11673](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11673)\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon-only Buttons with Tooltip Alignment in JSX\nDESCRIPTION: This example demonstrates how to use the tooltipAlignment prop with icon-only buttons to control tooltip positioning.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add to selection\" tooltipAlignment=\"start\" />\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add to selection\" />\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add to selection\" tooltipAlignment=\"end\"/>\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration in SCSS\nDESCRIPTION: Shows how to configure a specific theme using the $theme option with @carbon/themes. Demonstrates setting the g100 theme as the default theme.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/docs/sass.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/themes/scss/themes' as *;\n@use '@carbon/themes' with (\n  $theme: $g100\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Vite Development Server\nDESCRIPTION: Commands to install project dependencies and start the Vite development server, with both yarn and npm alternatives.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/vite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: SCSS Testing with Jest\nDESCRIPTION: Example of testing SCSS files using Jest and the @carbon/test-utils package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * <COPYRIGHT>\n *\n * @jest-environment node\n */\n\n'use strict';\n\nconst { SassRenderer } = require('@carbon/test-utils/scss');\n\nconst { render } = SassRenderer.create(__dirname);\n\ndescribe('@carbon/styles/scss/config', () => {\n  test('Public API', async () => {\n    const { get } = await render(`\n      // You can bring in modules using the path from the test file\n      @use '../path/to/sass/module';\n\n      $test: true;\n\n      // The `get` helper will let you pass a value from Sass to JavaScript\n      $_: get('test', $test);\n    `);\n\n    // get('<key>') gives you both the JavaScript representation of a value\n    // along with the `nativeValue` which comes from Dart sass. Use `.value`\n    // to get the JavaScript value and make assertions\n    expect(get('test').value).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Components\nDESCRIPTION: Commands to install dependencies and build the Carbon repository before running the React Router example. This needs to be executed from the root of the carbon repository.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/examples/react-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-dropdown with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates the expected DOM structure when rendering a cds-dropdown component with extended attributes. It shows the component in a disabled and expanded state with visible helper text, highlighting how additional states affect the rendered output.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-dropdown.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label\n  class=\"cds--label cds--label--disabled\"\n  hidden=\"\"\n  part=\"title-text\"\n>\n  <slot name=\"title-text\">\n  </slot>\n</label>\n<div\n  class=\"cds--dropdown cds--list-box cds--list-box--disabled cds--list-box--expanded cds--list-box--md\"\n  role=\"listbox\"\n>\n  <div\n    aria-controls=\"menu-body\"\n    aria-expanded=\"true\"\n    aria-haspopup=\"listbox\"\n    aria-labelledby=\"trigger-label\"\n    aria-owns=\"menu-body\"\n    class=\"cds--list-box__field\"\n    part=\"trigger-button\"\n    role=\"button\"\n    tabindex=\"0\"\n  >\n    <span\n      class=\"cds--list-box__label\"\n      id=\"trigger-label\"\n    >\n    </span>\n    <div\n      class=\"cds--list-box__menu-icon cds--list-box__menu-icon--open\"\n      id=\"trigger-caret\"\n    >\n    </div>\n  </div>\n  <slot name=\"slug\">\n  </slot>\n  <div\n    aria-label=\"\"\n    class=\"cds--list-box__menu\"\n    id=\"menu-body\"\n    part=\"menu-body\"\n    role=\"listbox\"\n    tabindex=\"-1\"\n  >\n    <slot>\n    </slot>\n  </div>\n</div>\n<div\n  class=\"cds--form__helper-text cds--form__helper-text--disabled\"\n  part=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n    helper-text-foo\n  </slot>\n</div>\n<div\n  aria-live=\"assertive\"\n  aria-relevant=\"additions text\"\n  class=\"cds--assistive-text\"\n  role=\"status\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: IBM Plex Font Family URL Reference Table\nDESCRIPTION: Markdown tables containing CDN URLs for different IBM Plex font variations including Mono, Sans, Sans Arabic, Sans Condensed, Sans Devanagari, Sans Hebrew, and Sans JP. Each table lists the specific font weights and styles available for each font family.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| IBM Plex Mono (all)             | https://1.www.s81c.com/common/carbon/plex/mono.css                   |\n| ------------------------------- | -------------------------------------------------------------------- |\n| IBM Plex Mono Bold              | https://1.www.s81c.com/common/carbon/plex/mono-bold.css              |\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Demo for Carbon Combobox Variants in JSX\nDESCRIPTION: This code renders a StorybookDemo component that displays different variants of the Carbon Design System's Combobox component. It configures the demo with theme selection capabilities, taller height, and three different Combobox variants - Default, Fluid (unstable), and Fluid Condensed (unstable).\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ComboBox/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-combobox--default'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidcombobox--default'\n    },\n    {\n      label: 'Fluid Condensed (unstable)',\n      variant: 'experimental-unstable-fluidcombobox--condensed'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormLabel with Toggletip Example in JSX\nDESCRIPTION: This snippet renders the FormLabel with Toggletip example using Storybook's Canvas component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FormLabel/FormLabel.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={FormLabelStories.WithToggletip} />\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Components React with NPM\nDESCRIPTION: Command to install the carbon-components-react package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S carbon-components-react\n```\n\n----------------------------------------\n\nTITLE: Using Relative Time Formatting in JavaScript\nDESCRIPTION: Demonstrates how to format timestamps as relative time values with different locales and styles. Supports 'long', 'short', and 'narrow' styles with 'long' as the default.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.relative.format(timestamp);\n// 3 minutes ago\n\ndateTimeFormat.relative.format(timestamp, { locale: 'de-DE' });\n// vor 3 Minuten\n\ndateTimeFormat.relative.format(timestamp, { style: 'short' });\n// 3 min. ago\n```\n\n----------------------------------------\n\nTITLE: ARIA Attribute Selector Example\nDESCRIPTION: Demonstrates appropriate use of specificity with ARIA attributes in selectors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_16\n\nLANGUAGE: scss\nCODE:\n```\nbutton[aria-expanded='false'] {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment\nDESCRIPTION: Commands to install project dependencies and start the development server using either yarn or npm package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Component Migration Status Table\nDESCRIPTION: Markdown table listing all Carbon components and their migration status from v6 to v7, including breaking changes and migration guide links.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Component             | v10                                                                 |\n| --------------------- | ------------------------------------------------------------------- |\n| `Accordion`           | No breaking changes                                                 |\n| `AccordionItem`       | No breaking changes                                                 |\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/type with Yarn\nDESCRIPTION: Alternative command to install the @carbon/type package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/type\n```\n\n----------------------------------------\n\nTITLE: NumberInput Component Reference Markdown Table\nDESCRIPTION: Markdown table documenting how the 'ref' prop behavior changed between Carbon versions 9 and 10 for the NumberInput component. In v9 it grabbed the React class instance reference, while in v10 it grabs the input element directly.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop  | v9                                       | v10                 |\n| ----- | ---------------------------------------- | ------------------- |\n| `ref` | Grabs the React class instance reference | Grabs the `<input>` |\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Page Sizes Select Component in HTML\nDESCRIPTION: HTML structure for the page sizes select subcomponent of the pagination system. It provides a dropdown with options to select the number of items per page (10, 20, 30).\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label\n  class=\"cds--pagination__text\"\n  for=\"select\"\n>\n  <slot name=\"label-text\">\n    Items per page:\n  </slot>\n</label>\n<div class=\"cds--select__item-count\">\n  <select\n    class=\"cds--select-input\"\n    id=\"select\"\n  >\n    <option value=\"10\">\n      10\n    </option>\n    <option value=\"20\">\n      20\n    </option>\n    <option value=\"30\">\n      30\n    </option>\n  </select>\n</div>\n<div hidden=\"\">\n  <slot>\n  </slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Dependencies for SkeletonPlaceholder\nDESCRIPTION: Import statements for Storybook documentation components and stories for the SkeletonPlaceholder component, including setup for Stackblitz code preview functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonPlaceholder/SkeletonPlaceholder.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Story, ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as SkeletonPlaceholderStories from './SkeletonPlaceholder.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Building the Carbon Repository\nDESCRIPTION: Initial setup commands to install dependencies and build the entire Carbon repository before working with the Layout preview.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/layout/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and TextArea Stories in JavaScript\nDESCRIPTION: This code snippet imports necessary components from Storybook and the TextArea stories for documentation purposes. It also imports a utility function for Stackblitz code preview.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextArea/TextArea.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as TextAreaStories from './TextArea.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/feature-flags with npm\nDESCRIPTION: Command to install the @carbon/feature-flags package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/feature-flags/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/feature-flags\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component in SCSS\nDESCRIPTION: Shows how to import accordion component styles in v10 vs v11 of Carbon Design System\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@import 'carbon-components/scss/components/accordion/accordion';\n```\n\nLANGUAGE: scss\nCODE:\n```\n// For styles\n@use '@carbon/styles/scss/components/accordion';\n\n// For React\n@use '@carbon/react/scss/components/accordion';\n```\n\n----------------------------------------\n\nTITLE: Importing Component Stories in JavaScript\nDESCRIPTION: This snippet imports all exports from the `form-group.stories` file (likely JavaScript or TypeScript) into the `FormGroupStories` namespace. This allows the MDX documentation to reference specific stories defined in that file, such as the default story for rendering examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/form-group/form-group.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as FormGroupStories from './form-group.stories';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component in JSX\nDESCRIPTION: Configuration of a StorybookDemo component that links to Carbon Design System's React documentation with theme selection enabled. The component is set up to display a specific experimental layout variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/LayoutDirection/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'experimental-unstable-text--layout-and-text#layout-direction'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Side Panel Story Slug Alignment\nDESCRIPTION: Corrects the alignment of slugs in the side panel story, improving the visual consistency and presentation in documentation examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n* side panel story slug alignment ([#11594](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11594)) ([b0ee3b7](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/b0ee3b759b91749137d69bd8f5f019c52edb867a))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Dropdown Warning and Error Text Visibility\nDESCRIPTION: Improves the visibility of warning and error text in dropdown components, enhancing the user experience when form validation occurs.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n* **dropdown:** visibility of warn-text and invalid-text ([#11573](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11573)) ([92225bb](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/92225bb4842bc9cefdf9d302836da8291483dd24))\n```\n\n----------------------------------------\n\nTITLE: Using Icon Components with Size Suffix (Before)\nDESCRIPTION: Previous approach to using icon components from @carbon/icons-react where different icon sizes were imported as separate components with size numbers in their names.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Carbon Theme Zoning Implementation\nDESCRIPTION: Loading Carbon theme zoning classes for creating theme zones using CSS Custom Properties.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n// SPECIFIC VERSION\n<link\n  rel=\"stylesheet\"\n  href=\"https://1.www.s81c.com/common/carbon/web-components/version/[v2.x.y]/themes.css\" />\n\n// NEXT tag\n<link\n  rel=\"stylesheet\"\n  href=\"https://1.www.s81c.com/common/carbon/web-components/tag/next/themes.css\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Components React with Yarn\nDESCRIPTION: Alternative installation command using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add carbon-components-react\n```\n\n----------------------------------------\n\nTITLE: Modifying PropTypes to be More Specific\nDESCRIPTION: Example of changing a prop type to be more specific (node to string), which requires a major version bump due to potential breaking changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nfunction ExampleComponent({ propA, propB }) {\n  return (\n    <>\n      <span>{propA}</span>\n      <span>{propB}</span>\n    </>\n  );\n}\n\nExampleComponent.propTypes = {\n  propA: PropTypes.string,\n-  propB: PropTypes.node,\n+  propB: PropTypes.string,\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-batch-action with Multiple Items Selected\nDESCRIPTION: Shows the batch action component with multiple items (3) selected, demonstrating plural text handling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--batch-summary\">\n  <p class=\"cds--batch-summary__para\">\n    3 items selected\n  </p>\n</div>\n<div class=\"cds--action-list\">\n  <slot>\n  </slot>\n  <button class=\"cds--batch-summary__cancel cds--btn cds--btn--primary\">\n    <slot name=\"cancel-button-content\">\n      Cancel\n    </slot>\n  </button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Utilities with NPM\nDESCRIPTION: Command to install @carbon/utilities package using NPM package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @carbon/utilities\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Project Dependencies\nDESCRIPTION: Command to install all project dependencies using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/examples/vue-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Avoiding Magic Numbers in SCSS Padding Calculation\nDESCRIPTION: Shows how to replace magic numbers with calculated values using design tokens and system variables for padding.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- padding-inline-end: to-rem(32px);\n+ padding-inline-end: calc(layout.density('padding-inline') + $icon-size-01);\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/icons-vue with npm\nDESCRIPTION: Command to install the @carbon/icons-vue package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/icons-vue\n```\n\n----------------------------------------\n\nTITLE: Carbon Theme Variables Import/Export Reference\nDESCRIPTION: Reference table of SCSS variables exported from @carbon/themes package, including theme colors, background variations, layer styles, field styles, and border tokens. All variables are available with !default flag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/docs/sass.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/themes/scss/themes';\n@import '@carbon/themes';\n\n$white;\n$g10;\n$g90;\n$g100;\n$fallback;\n$theme;\n$background;\n$background-active;\n$background-selected;\n$background-selected-hover;\n$background-hover;\n$background-brand;\n$background-inverse;\n$background-inverse-hover;\n// ... and other layer, field, and border variables\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component File Structure Example\nDESCRIPTION: Example showing the recommended file structure for TypeScript component definitions in Carbon, with interface definitions placed above component implementation and PropTypes below.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/adding-component-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ComponentName.tsx\n\ninterface ComponentNameProps {\n  // TypeScript interface definition\n}\n\nconst ComponentName = (props: ComponentNameProps) => {\n  // Component implementation\n}\n\nComponentName.propTypes = {\n  // PropTypes definition\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/upgrade with Yarn\nDESCRIPTION: Alternative command to install @carbon/upgrade package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/upgrade/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Package.json Scripts for Icon Library\nDESCRIPTION: JSON snippet showing the recommended scripts for building and cleaning the icon library package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/building-an-icon-library.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"...\": \"...\",\n  \"scripts\": {\n    \"build\": \"yarn clean && node tasks/build.js\",\n    \"clean\": \"rimraf es lib umd\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typography Utility Classes in HTML\nDESCRIPTION: Example of applying the generated CSS utility classes to HTML elements for styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span className=\"cds--type-mono\">Test sentence</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for UnorderedList Component in React\nDESCRIPTION: This code configures a StorybookDemo component to display the UnorderedList component from Carbon Design System. It sets up the Storybook URL and defines two variants of the component: a default unordered list and a nested unordered list. It also enables theme selection for the demo.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/UnorderedList/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-unorderedlist--default'\n    },\n    {\n      label: 'Nested',\n      variant: 'components-unorderedlist--nested'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Component in JSX\nDESCRIPTION: This snippet defines the Storybook Meta component, which is used to set metadata for the story.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/NumberInput.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-carbon with Yarn\nDESCRIPTION: Command to install the eslint-config-carbon package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/eslint-config-carbon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add eslint-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Bundler Configuration Examples\nDESCRIPTION: Configuration examples for various bundlers including sass-loader, Parcel, and Vite to properly resolve node_modules paths.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n{\n  loader: 'sass-loader',\n  options: {\n    sassOptions: {\n      includePaths: ['node_modules'],\n    },\n  },\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"includePaths\": [\"node_modules\"]\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  css: {\n    preprocessorOptions: {\n      scss: {\n        includePaths: ['node_modules'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering PaginationNav Component Preview with Storybook Canvas\nDESCRIPTION: This JSX snippet renders a preview of the PaginationNav component using Storybook's Canvas component. It includes an additional action to open the component in Stackblitz for further exploration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/PaginationNav/PaginationNav.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={PaginationNavStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(PaginationNavStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Pictograms with npm\nDESCRIPTION: Command to install the @carbon/pictograms package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/pictograms\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon-only Buttons with Tooltip Positioning in JSX\nDESCRIPTION: This snippet shows how to use the tooltipPosition prop with icon-only buttons to control the position of the tooltip relative to the button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add\" />\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add\" tooltipPosition=\"right\"/>\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add\" tooltipPosition=\"bottom\"/>\n<Button hasIconOnly renderIcon={Add} iconDescription=\"Add\" tooltipPosition=\"left\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Checkbox with Various Attributes\nDESCRIPTION: This code snippet demonstrates the expected HTML structure when rendering a Carbon Design System checkbox component with additional attributes, specifically in a disabled state. It maintains the same basic structure as the minimal version but includes the disabled attribute.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-checkbox.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input\n  aria-checked=\"true\"\n  aria-readonly=\"false\"\n  class=\"cds--checkbox\"\n  disabled=\"\"\n  id=\"checkbox\"\n  part=\"input\"\n  type=\"checkbox\"\n>\n<label\n  class=\"cds--checkbox-label\"\n  for=\"checkbox\"\n  part=\"label\"\n  title=\"\"\n>\n  <span class=\"cds--checkbox-label-text\">\n    <slot>\n    </slot>\n  </span>\n</label>\n<slot name=\"slug\">\n</slot>\n<div class=\"cds--checkbox__validation-msg\">\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering TextArea Default Story in JSX\nDESCRIPTION: This code snippet renders the default TextArea story using Storybook's Canvas component. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextArea/TextArea.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextAreaStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextAreaStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering Carbon Icon Helper in Handlebars\nDESCRIPTION: Demonstrates how to register the carbon-icon helper in Handlebars for use with experimental components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\niconHelper({ handlebars: Handlebars });\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/pictograms-react with npm\nDESCRIPTION: Command to install the @carbon/pictograms-react package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/pictograms-react\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-slider with Various Attributes in HTML\nDESCRIPTION: This snippet shows the cds-slider component with additional attributes such as disabled state and a preset value. It includes a disabled label, slider container with customized range labels, and the slider set to 50% value.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-slider.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<label class=\"cds--label cds--label--disabled\">\n  <slot name=\"label-text\">\n    label-text-foo\n  </slot>\n</label>\n<div class=\"cds--slider-container\">\n  <span class=\"cds--slider__range-label\">\n    <slot name=\"min-text\">\n      0\n    </slot>\n  </span>\n  <div\n    class=\"cds--slider cds--slider--disabled\"\n    role=\"presentation\"\n    tabindex=\"-1\"\n  >\n    <div\n      aria-valuemax=\"100\"\n      aria-valuemin=\"0\"\n      aria-valuenow=\"50\"\n      class=\"cds--slider__thumb\"\n      id=\"thumb\"\n      role=\"slider\"\n      style=\"left: 50%\"\n      tabindex=\"0\"\n    >\n    </div>\n    <div\n      class=\"cds--slider__track\"\n      id=\"track\"\n    >\n    </div>\n    <div class=\"cds-ce--slider__filled-track-container\">\n      <div\n        class=\"cds--slider__filled-track\"\n        style=\"transform: translate(0%, -50%) scaleX(0.5)\"\n      >\n      </div>\n    </div>\n  </div>\n  <span class=\"cds--slider__range-label\">\n    <slot name=\"max-text\">\n      100\n    </slot>\n  </span>\n  <slot>\n  </slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for ShapeIndicator Component in React\nDESCRIPTION: Sets up a live demo of the ShapeIndicator component using StorybookDemo. The demo points to the Carbon Design System React Storybook, includes theme selection, and displays the default variant of the ShapeIndicator component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ShapeIndicator/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-statusindicator-shapeindicator--playground'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Colors from Carbon Elements Package\nDESCRIPTION: Example showing how to import colors from the main @carbon/elements package\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { colors } from '@carbon/elements';\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/type with npm\nDESCRIPTION: Command to install the @carbon/type package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/type\n```\n\n----------------------------------------\n\nTITLE: Running Vue Development Server\nDESCRIPTION: Command to compile and run the development server with hot-reload functionality\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/examples/vue-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn run serve\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Build Function for Icon Library\nDESCRIPTION: Detailed JavaScript implementation of the build function for generating icon modules and bundles.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/building-an-icon-library.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst { reporter } = require('@carbon/cli-reporter');\nconst meta = require('@carbon/icons/meta.json');\n\nconst fs = require('fs-extra');\nconst path = require('path');\nconst rollup = require('rollup');\n\nasync function build({ cwd }) {\n  const ESM_DIR = path.join(cwd, 'es');\n  const BUNDLE_FORMATS = [\n    {\n      format: 'cjs',\n      directory: 'lib',\n    },\n    {\n      format: 'umd',\n      directory: 'umd',\n    },\n  ];\n\n  reporter.info('Building ESM and bundle sources...');\n\n  await Promise.all(\n    meta.map(async (info) => {\n      const source = createModuleFromInfo(info);\n      const jsFilepath = path.join(cwd, info.outputOptions.file);\n\n      await fs.ensureDir(path.dirname(jsFilepath));\n      await fs.writeFile(jsFilepath, source);\n\n      await Promise.all(\n        BUNDLE_FORMATS.map(async ({ format, directory }) => {\n          const bundle = await rollup({\n            input: jsFilepath,\n            external: ['@carbon/icon-helpers', 'prop-types', 'react'],\n          });\n          const outputOptions = {\n            format,\n            file: jsFilepath.replace(/\\/es\\//, `/${directory}/`),\n          };\n          if (format === 'umd') {\n            outputOptions.name = info.moduleName;\n            outputOptions.globals = {\n              '@carbon/icon-helpers': 'CarbonIconHelpers',\n            };\n          }\n          await bundle.write(outputOptions);\n        })\n      );\n    })\n  );\n\n  reporter.info('Building ESM and bundle entrypoints...');\n\n  reporter.success('Done! 🎉');\n}\n\nmodule.exports = build;\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Colors with Yarn\nDESCRIPTION: Alternative installation command using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/colors\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Floating Styles with FeatureFlags in React\nDESCRIPTION: This snippet demonstrates how to enable the 'enable-v12-dynamic-floating-styles' feature flag to apply dynamic positioning to a Tooltip component without collision detection. The example wraps a Tooltip around an Information button and centers it in a container.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/Tooltip.DynamicStyles.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-dynamic-floating-styles': true,\n  }}>\n  <div\n    style={{\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n    }}>\n    <Tooltip label={tooltipLabel} align={args.align}>\n      <button className=\"sb-tooltip-trigger\" type=\"button\">\n        <Information />\n      </button>\n    </Tooltip>\n  </div>\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Running Migration Scripts in Carbon Design System\nDESCRIPTION: Example command for executing a migration script from the command line using Node.js. The example shows how to run a specific migration script dated 2020-01-27 from the packages/icons directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-build-helpers/src/metadata/migrations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From packages/icons\nnode ../icons-build-helpers/src/metadata/migrations/2020-01-27.js\n```\n\n----------------------------------------\n\nTITLE: Running @carbon/upgrade with npx\nDESCRIPTION: Command to run @carbon/upgrade using npx without installing it globally.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/upgrade/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/upgrade\n```\n\n----------------------------------------\n\nTITLE: Component Config File Path Structure\nDESCRIPTION: Shows the file path structure for component configuration files within the Carbon React package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/code-connect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"packages/src/react/code-connect/ComponentName/ComponentName.figma.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Component Styles\nDESCRIPTION: SCSS import examples showing how to include either all Carbon component styles or styles for a specific component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// Bring in all the styles for Carbon\n@use 'carbon-components-react';\n\n// Preferred: bring in the styles for one component\n@use 'carbon-components-react/scss/components/button';\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Tree View\nDESCRIPTION: This snippet sets up the Storybook metadata for the Tree View component, linking it to the imported stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Meta of={TreeViewStories} />\n```\n\n----------------------------------------\n\nTITLE: Importing FileUploader Documentation Components\nDESCRIPTION: Initial imports for the FileUploader documentation page, including Storybook components and story examples.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FileUploader/FileUploader.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as FileUploaderStories from './FileUploader.stories.js';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Installing carbon-components-react with npm\nDESCRIPTION: Command to install the necessary packages for using MultiSelect component using npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i carbon-components carbon-components-react carbon-icons --save\n```\n\n----------------------------------------\n\nTITLE: Running Import Path Migration Codemod\nDESCRIPTION: Command to run the automated codemod that rewrites imports from @carbon/icons-react to @carbon/react/icons for projects using @carbon/react.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/upgrade migrate update-carbon-icons-react-import-to-carbon-react --write\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Name with Various Attributes in HTML\nDESCRIPTION: This snippet shows a header name component with additional attributes. It includes a href attribute and a prefix span element for additional content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--header__name\"\n  href=\"about:blank\"\n  part=\"link\"\n>\n  <span\n    class=\"cds--header__name--prefix\"\n    part=\"prefix\"\n  >\n    prefix-foo\n  </span>\n  <slot>\n  </slot>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Sets up the Storybook documentation metadata for the Loading component stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/loading/loading.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={LoadingStories} />\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/pictograms-react with Yarn\nDESCRIPTION: Command to install the @carbon/pictograms-react package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/pictograms-react\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Menu Button\nDESCRIPTION: Sets up a StorybookDemo component to display a live menu button demo from the Carbon Design System web components library. Configures the demo URL and defines a default variant for the component display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu-button/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-menu-button--default',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Carbon Components React Imports\nDESCRIPTION: Command to update imports from carbon-components-react to @carbon/react using the upgrade tool\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/upgrade migrate update-carbon-components-react-import-to-scoped --write\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Elements Sass Bundled Entry\nDESCRIPTION: Example showing how to import the bundled Sass entrypoint and a specific theme package\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/elements/scss/elements';\n\n# Import a specific package nested in elements\n@import '@carbon/elements/scss/themes/g10';\n```\n\n----------------------------------------\n\nTITLE: Importing a pictogram component using CommonJS\nDESCRIPTION: Example of importing a specific pictogram component (Airplane) using CommonJS require syntax.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { Airplane } = require('@carbon/pictograms-react');\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install project dependencies using either yarn or npm package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/nextjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for Layer Component in React\nDESCRIPTION: This code snippet renders a StorybookDemo component to display the Layer component from the Carbon Design System. It includes theme selection and two variants: Default and Custom Level.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Layer/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-layer--default'\n    },\n    {\n      label: 'Custom Level',\n      variant: 'components-layer--custom-level'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing jest-config-carbon using Yarn\nDESCRIPTION: Alternative command to install jest-config-carbon package using Yarn package manager. This will add the package as a dependency to your project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/jest-config-carbon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Release Workflow - Checkout Tag\nDESCRIPTION: Command to checkout a specific version tag for release workflow\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout vX.Y.X\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Carbon Icon in Handlebars\nDESCRIPTION: Shows how to add attributes like aria-label to an icon using the carbon-icon helper in Handlebars templates.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/experimental.md#2025-04-22_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{carbon-icon 'ChevronDownGlyph' aria-label='Aria label for icon'}}\n```\n\n----------------------------------------\n\nTITLE: Creating VirtualBox Directories in Home Folder\nDESCRIPTION: This snippet demonstrates the command to create directories for storing VirtualBox images in the user's home directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/setup/virtual-machines.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCreate `/VirtualBox/Images` directories in your home directory and save the ZIP there. Unpack the ZIP.\n```\n\n----------------------------------------\n\nTITLE: Loading IBM Plex Sans from unpkg CDN in CSS\nDESCRIPTION: This snippet shows how to quickly load IBM Plex Sans using the unpkg CDN. It defines an @font-face rule for the regular weight of IBM Plex Sans.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'IBM Plex Sans';\n  font-weight: 400;\n  src: url('//unpkg.com/@ibm/plex/IBM-Plex-Sans/fonts/complete/woff2/IBMPlexSans-Regular.woff2')\n    format('woff2');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Colors from Carbon Colors Package\nDESCRIPTION: Example showing how to import colors directly from @carbon/colors package\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { colors } from '@carbon/colors';\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Dependencies\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Removing Function Prop Arguments\nDESCRIPTION: Demonstrates removal of arguments from a function prop type, requiring a major version bump due to breaking changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nimport { SomeComponent } from 'carbon-components-react';\n\nfunction ExampleComponent() {\n-  function onChange(a, b, c) {\n+  function onChange(a, b) {\n    // ...\n  }\n\n  return <SomeComponent onChange={onChange} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing prettier-config-carbon with Yarn\nDESCRIPTION: Command to install the prettier-config-carbon package using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/prettier-config-carbon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add prettier-config-carbon\n```\n\n----------------------------------------\n\nTITLE: AILabel Size Variant Example\nDESCRIPTION: Shows how to implement an extra small size variant of the AILabel component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabel.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel size=\"xs\">\n  <AILabelContent>AI was used to generate this content</AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Navigation with Various Attributes in HTML\nDESCRIPTION: This snippet shows a header navigation component with additional attributes. It includes a custom aria-label for the menu bar.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  class=\"cds-ce--header__divider\"\n  part=\"divider\"\n>\n</div>\n<ul\n  aria-label=\"menu-bar-label-foo\"\n  class=\"cds--header__menu-bar\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Text Component Example\nDESCRIPTION: Canvas component used to display the default Text component example from TextStories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={TextStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Toggletip Documentation\nDESCRIPTION: This snippet imports necessary components from Storybook and local files for documenting the Toggletip component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle-tip/toggletip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as ToggleTipStories from './toggletip.stories';\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-file-uploader-item in Editing State with Various Attributes\nDESCRIPTION: This snippet demonstrates the cds-file-uploader-item component in its editing state with additional attributes, including visible form requirements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/file-uploader.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"cds--file-filename\">\n  <slot>\n  </slot>\n</p>\n<span class=\"cds--file__state-container\">\n  <button\n    aria-label=\"Delete this file\"\n    class=\"cds--file-close\"\n    type=\"button\"\n  >\n  </button>\n</span>\n<div class=\"cds--form-requirement\">\n  <div class=\"cds--form-requirement__title\">\n  </div>\n  <p\n    class=\"cds--form-requirement__supplement\"\n    hidden=\"\"\n  >\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-carbon with npm\nDESCRIPTION: Command to install the eslint-config-carbon package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/eslint-config-carbon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S eslint-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Configuring IBM Plex Font Face in Carbon Styles\nDESCRIPTION: Example showing how to disable the automatic emission of IBM Plex font-face declarations by setting the css--font-face configuration token to false.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/config' with (\n  $css--font-face: false\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Storybook Canvas with StructuredList Skeleton Story in JSX\nDESCRIPTION: This JSX code renders a Storybook Canvas component with the StructuredList Skeleton story. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/StructuredList/StructuredList.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={StructuredListStories.Skeleton}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(StructuredListStories.Skeleton),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Meta Component\nDESCRIPTION: Defines the Meta component for Storybook to set up the documentation page as a template.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonIcon/SkeletonIcon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Pictograms Preview\nDESCRIPTION: Commands to install dependencies for the Pictograms preview and start the development server, with options for both yarn and npm package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Multi-Line Code Snippet Mode\nDESCRIPTION: Shows the HTML structure of a multi-line code snippet with minimum attributes. It includes a container with multi-line support, fixed height constraints, and a copy button component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n  aria-label=\"code-snippet\"\n  aria-multiline=\"true\"\n  aria-readonly=\"true\"\n  class=\"cds--snippet-container\"\n  role=\"textbox\"\n  style=\"max-height:240px;min-height:48px;\"\n  tabindex=\"0\"\n>\n  <pre>\n    <code>\n      <slot>\n      </slot>\n    </code>\n  </pre>\n</div>\n<cds-copy-button\n  button-class-name=\"\"\n  feedback=\"Copied!\"\n  feedback-timeout=\"2000\"\n>\n  Copy to Clipboard\n</cds-copy-button>\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting File Uploader Component\nDESCRIPTION: Commands to install dependencies and start the development server for the file uploader component using either yarn or npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/examples/drag-and-drop-file-uploader-vite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn start\n# or\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component with Popover Variant\nDESCRIPTION: Sets up a StorybookDemo component that links to Carbon's React documentation site and configures a default Popover variant. Includes theme selector functionality and specific variant configuration for experimental auto-align feature.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Popover/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-popover--experimental-auto-align',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Carbon Design System Tooltip in JSX\nDESCRIPTION: This code snippet configures a StorybookDemo component to showcase the Tooltip component from the Carbon Design System. It sets up the demo URL and defines multiple variants for the Tooltip, including default, alignment, and duration options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tooltip/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-tooltip--default'\n    },\n    {\n      label: 'Alignment',\n      variant: 'components-tooltip--alignment'\n    },\n    {\n      label: 'Duration',\n      variant: 'components-tooltip--duration'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling pictogram fill color with CSS\nDESCRIPTION: CSS example for creating a custom class to set the fill color of a pictogram to rebeccapurple.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n// CSS custom class name to set the fill of the icon to `rebeccapurple`\nsvg.my-custom-class {\n  fill: rebeccapurple;\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Tag Update for Unpkg Fix\nDESCRIPTION: Command to update the 'latest' npm tag to point to a specific v10.x version to fix unpkg resolution issues\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm dist-tag add carbon-components@10.X.Y latest\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time Together in JavaScript\nDESCRIPTION: Shows how to format timestamps as combined date and time values with multiple style options and localization. Includes a special 'tooltip' style and separate control over date and time components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/src/dateTimeFormat/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dateTimeFormat } from '@carbon/utilities';\n\ndateTimeFormat.absolute.format(timestamp);\n// Apr 4, 2024 at 3:47 PM\n\ndateTimeFormat.absolute.format(timestamp, { locale: 'de-DE' });\n// 04.04.2024, 15:47\n\ndateTimeFormat.absolute.format(timestamp, {\n  timeStyle: 'medium',\n  dateStyle: 'short',\n});\n// April 4, 2024 at 3:47:12 PM\n\ndateTimeFormat.absolute.format(timestamp, { style: 'short' });\n// 4/4/24, 3:47 PM\n\ndateTimeFormat.absolute.format(timestamp, { style: 'tooltip' });\n// Thursday, April 4, 2024 at 3:47:12 PM GMT+2\n```\n\n----------------------------------------\n\nTITLE: Feature Addition of Telemetry JavaScript Scope\nDESCRIPTION: Adds JavaScript telemetry instrumentation, likely for tracking component usage, performance metrics, or other analytics data for the Carbon Web Components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n* instrument with telemetry JS scope ([#11747](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11747)) ([650739e](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/650739e4d23677dd4891c781be20d76060170533))\n```\n\n----------------------------------------\n\nTITLE: Using a custom CSS class with a pictogram component\nDESCRIPTION: React component example showing how to apply a custom CSS class to a pictogram to style its fill color.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Airplane } from '@carbon/pictograms-react';\n\nfunction MyComponent() {\n  return (\n    <button>\n      <Airplane aria-label=\"Add\" className=\"my-custom-class\" />\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Elements Package in SCSS\nDESCRIPTION: Examples showing how to import Carbon elements package in v10 versus v11, demonstrating the transition from @import to @use syntax.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_23\n\nLANGUAGE: scss\nCODE:\n```\n@import '@carbon/elements/scss/index';\n@import '@carbon/elements/scss/elements';\n```\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/elements';\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/web-components with npm\nDESCRIPTION: Command to install the @carbon/web-components package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/web-components\n```\n\n----------------------------------------\n\nTITLE: Fixing ESLint displayName Error\nDESCRIPTION: Example of how to manually fix the ESLint react/display-rule error that can occur after the codemod transforms inline icon components without proper displayName properties.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nconst Add32 = (props) => <Add size={32} {...props} />;\nconst iconTypes = {\n  add: Add32,\n};\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Usage - V10 Example\nDESCRIPTION: Example showing how to implement Tabs component in Carbon Design System v10 with nested Tab elements containing labels and content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n<Tabs>\n  <Tab label=\"Tab label 1\">\n    <p>Content for first tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 2\">\n    <p>Content for second tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 3\" disabled>\n    <p>Content for third tab goes here.</p>\n  </Tab>\n  <Tab\n    label=\"Tab label 4 shows truncation\"\n    title=\"Tab label 4 shows truncation\">\n    <p>Content for fourth tab goes here.</p>\n  </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Skeleton Text Example with Stackblitz Integration\nDESCRIPTION: Creates a Canvas component to display the AI Skeleton Text example with an option to open it in Stackblitz for editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AISkeleton/AISkeleton.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={AISkeletonTextStories._AISkeletonText}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(AISkeletonTextStories._AISkeletonText),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Navigation Menu with Various Attributes in HTML\nDESCRIPTION: This snippet shows a side navigation menu with additional attributes. It includes an expanded state and custom title content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-expanded=\"true\"\n  aria-haspopup=\"true\"\n  class=\"cds--side-nav__submenu\"\n  part=\"expando\"\n  type=\"button\"\n>\n  <div\n    class=\"cds--side-nav__icon\"\n    hidden=\"\"\n    id=\"title-icon-container\"\n    part=\"title-icon-container\"\n  >\n    <slot name=\"title-icon\">\n    </slot>\n  </div>\n  <span\n    class=\"cds--side-nav__submenu-title\"\n    part=\"title\"\n  >\n    title-foo\n  </span>\n  <div\n    class=\"cds--side-nav__icon cds--side-nav__icon--small cds--side-nav__submenu-chevron\"\n    part=\"expando-icon-container\"\n  >\n  </div>\n</button>\n<ul\n  class=\"cds--side-nav__menu\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Configuration\nDESCRIPTION: Configures Storybook metadata for the Link component documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/Link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Action Items Table in Markdown\nDESCRIPTION: A markdown table listing action items resulting from the postmortem, including the task, owner, and related issue link.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/postmortems/2019-10-07-content-switcher-breaking-change.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Action item                | Owner      | Bug                                                              |\n| -------------------------- | ---------- | ---------------------------------------------------------------- |\n| Revert to the old behavior | @joshblack | [Link](https://github.com/carbon-design-system/carbon/pull/4250) |\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Repository\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Themes Preview\nDESCRIPTION: Commands to install dependencies and start the development server for the Themes preview component. Provides options for both yarn and npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/examples/preview-v10/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Installing browserslist-config-carbon with Yarn\nDESCRIPTION: Alternative command to install the browserslist-config-carbon package using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/browserslist-config-carbon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add browserslist-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components in JSX\nDESCRIPTION: This code snippet imports the ArgTypes and Meta components from Storybook's blocks package. These components are used to enhance the documentation with interactive elements and metadata.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/UIShell/UIShell.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Using Type Classes in Carbon v9 HTML\nDESCRIPTION: This snippet demonstrates how type classes were used in Carbon v9 to style headings.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-type.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"bx--giga\">Heading 1</h1>\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Multi-line Code Snippet Example in JSX/Storybook\nDESCRIPTION: Displays the Multi-line code snippet example within an interactive Canvas block, sourced from the 'Multiline' export of CodeSnippetStories. Enables on-the-page visualization and live interaction with the multi-line code snippet variant. Requires no inputs beyond Storybook context.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Canvas of={CodeSnippetStories.Multiline} />\n```\n\n----------------------------------------\n\nTITLE: SkeletonText Component Canvas Implementation in JSX\nDESCRIPTION: Implements a Storybook Canvas to display the SkeletonText component with an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonText/SkeletonText.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={SkeletonTextStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(SkeletonTextStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/upgrade with npm\nDESCRIPTION: Command to install @carbon/upgrade package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/upgrade/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Design System\nDESCRIPTION: Sets up a StorybookDemo component with theme selector enabled, pointing to the Carbon Design System React documentation site. Includes configuration for a default variant of the experimental unstable text component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'experimental-unstable-text--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Font Path Structure\nDESCRIPTION: Example showing the default font path structure when using the standard configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n<$font-path>/IBM-Plex-Sans/fonts/complete/woff2/IBMPlexSans-Bold.woff2\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Release Tag\nDESCRIPTION: Git commands to create an annotated tag for the release and push it to upstream\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a vX.Y.Z -m 'vX.Y.Z'\ngit push upstream refs/tags/vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Accessible Icon Implementation\nDESCRIPTION: Example showing proper accessibility implementation with aria-label\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Add } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <button>\n      <Add aria-label=\"Add\" />\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Update for Slug Component with AI Improvements\nDESCRIPTION: Updates the slug component with artificial intelligence enhancements, improving functionality or appearance based on AI-driven insights.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n* **slug:** ai slug updates ([#11716](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11716)) ([e9fa12f](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/e9fa12fd8cd3973aa7279a9d69582139937934d9))\n```\n\n----------------------------------------\n\nTITLE: Using Theme Tokens in SCSS with Carbon v11\nDESCRIPTION: Example of importing and using theme tokens from the Carbon Design System v11. Shows how to reference background and text color tokens from the theme.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles/scss/theme';\n\n.example {\n  background: theme.$background;\n  color: theme.$text-primary;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in Sass Using Mixin\nDESCRIPTION: Alternative approach to enable feature flags in Sass using the enable() mixin.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FeatureFlags/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n@use '@carbon/react/scss/feature-flags';\n@use '@carbon/react';\n\n@include feature-flags.enable('enable-experimental-tile-contrast');\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Next.js Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Next.js application. Provides options for both Yarn and npm package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/light-dark-mode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Version Workflow Commands - Commit and Push\nDESCRIPTION: Commands to commit and push changes for the version release\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"chore(release): vX.Y.Z\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/icon-build-helpers with Yarn\nDESCRIPTION: Alternative command to install the @carbon/icon-build-helpers package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-build-helpers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/icon-build-helpers\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/utilities-react with Yarn\nDESCRIPTION: Alternative command to install the @carbon/utilities-react package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/utilities-react\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Navigation Menu Item with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a side navigation menu item with minimum required attributes. It includes a slot for content within a span element.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--side-nav__link\"\n  href=\"\"\n  part=\"link\"\n>\n  <span\n    class=\"cds--side-nav__link-text\"\n    part=\"title\"\n  >\n    <slot>\n    </slot>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Tree View Documentation\nDESCRIPTION: This snippet imports necessary components from Storybook and the Tree View stories for documentation purposes. It also imports CDN-related utilities.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs, cdnCss } from '../../globals/internal/storybook-cdn';\nimport * as TreeViewStories from './tree-view.stories';\n```\n\n----------------------------------------\n\nTITLE: Installing stylelint-config-carbon with Yarn\nDESCRIPTION: Alternative command to install the stylelint-config-carbon package using Yarn package manager instead of npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/stylelint-config-carbon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stylelint-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Repository\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/custom-theme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Structure\nDESCRIPTION: Basic markdown structure for a documentation page's table of contents, using HTML comments to denote auto-generated sections and prettier ignore markers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-icons.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [Changes](#changes)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Inserting CDN JavaScript for Tree View Component\nDESCRIPTION: This snippet inserts the CDN JavaScript code for the Tree View component using a utility function.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tree-view/tree-view.mdx#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['tree-view'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Using Globally Registered Icons in Vue Template\nDESCRIPTION: Example of using a globally registered Carbon icon in a Vue template. Once registered globally, icons can be used directly in templates without additional imports.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/README.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Bee32 />\n</template>\n```\n\n----------------------------------------\n\nTITLE: CDN Configuration Display\nDESCRIPTION: Renders the CDN configuration details for the Loading component using a markdown template.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/loading/loading.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['loading'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Direction Example\nDESCRIPTION: Canvas component used to display an example of the TextDirection component in use.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={TextStories.SetTextDirection} />\n```\n\n----------------------------------------\n\nTITLE: Carbon Dropdown Component Structure Example\nDESCRIPTION: Demonstrates the recommended DOM structure for handling collation in list items, where ordering is determined by DOM structure rather than programmatic sorting.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/coding-conventions.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-dropdown>\n  <cds-dropdown-item value=\"all\">Option 1</cds-dropdown-item>\n  <cds-dropdown-item value=\"cloudFoundry\">Option 2</cds-dropdown-item>\n  <cds-dropdown-item value=\"staging\">Option 3</cds-dropdown-item>\n</cds-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-row with Selection Checkbox\nDESCRIPTION: Displays a table row with a selection checkbox and additional attributes including checked and disabled states.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--table-column-checkbox\">\n  <div>\n    <slot name=\"slug\">\n    </slot>\n    <cds-checkbox\n      checked=\"\"\n      data-table=\"\"\n      disabled=\"\"\n      hide-label=\"\"\n      label-text=\"selection-label-foo\"\n      name=\"selection-name-foo\"\n      value=\"selection-value-foo\"\n    >\n    </cds-checkbox>\n  </div>\n</div>\n<slot>\n</slot>\n\n```\n\n----------------------------------------\n\nTITLE: Installing carbon-components-react with Yarn\nDESCRIPTION: Command to install the necessary packages for using MultiSelect component using Yarn.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add carbon-components-react carbon-components carbon-icons\n```\n\n----------------------------------------\n\nTITLE: Rendering CDS Inline Loading Component with Error Status\nDESCRIPTION: HTML structure for the inline loading component when in error status. Similar to the finished state, the animation container is empty but would likely be populated with an error icon.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-inline-loading.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--inline-loading__animation\">\n</div>\n<p class=\"cds--inline-loading__text\">\n  <slot>\n  </slot>\n</p>\n\n```\n\n----------------------------------------\n\nTITLE: Automating Size Prop Changes with Carbon Upgrade Tool (Bash)\nDESCRIPTION: These commands use the Carbon upgrade tool to automatically migrate small-to-size props and update size props in a Carbon Design System project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/upgrade migrate small-to-size-props --write\nnpx @carbon/upgrade migrate size-prop-updates --write\n```\n\n----------------------------------------\n\nTITLE: Self-Hosted Font Face Configuration with Webpack\nDESCRIPTION: CSS configuration for self-hosted font files using webpack's resolution system.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'IBM Plex Sans';\n  font-weight: 400;\n  src: url(~@ibm/plex/IBM-Plex-Sans/fonts/complete/woff2/IBMPlexSans-Regular.woff2)\n    format('woff2');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Icons with Yarn\nDESCRIPTION: Command to install @carbon/icons package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/icons\n```\n\n----------------------------------------\n\nTITLE: Keyboard Interaction Checklist for Link Component Accessibility\nDESCRIPTION: A markdown checklist specifying the required keyboard interactions for an accessible Link component. It ensures users can focus and activate the link using keyboard controls.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/link-avt.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] the user can focus the link with `tab`\n- [ ] the user can activate the link with `enter`\n```\n\n----------------------------------------\n\nTITLE: Contrast Requirements Checklist for Link Component Accessibility\nDESCRIPTION: A markdown checklist outlining the color contrast requirements for the Link component text and focus outline against the background color to ensure visibility and accessibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/link-avt.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] the link text has a contrast of 4.5:1 minimum against the background color\n- [ ] the link focus outline has a contrast of 4.5:1 minimum against the\n      background color\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and CDN Dependencies\nDESCRIPTION: Import statements for Storybook components and CDN configuration for the menu button component documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/menu-button/menu-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs, cdnCss } from '../../globals/internal/storybook-cdn';\nimport * as MenuButtonStories from './menu-button.stories';\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Pagination with Various Attributes in HTML\nDESCRIPTION: HTML structure for a pagination component with additional attributes, showing item range (11-30) out of a total count (200). Both previous and next buttons are enabled for navigation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--pagination__left\">\n  <slot name=\"page-sizes-select\">\n  </slot>\n  <div class=\"cds-ce--pagination__divider\">\n  </div>\n  <span class=\"cds--pagination__items-count cds--pagination__text\">\n    11–30 of 200 items\n  </span>\n</div>\n<div class=\"cds-ce--pagination__divider\">\n</div>\n<div class=\"cds--pagination__right\">\n  <slot>\n  </slot>\n  <div class=\"cds--pagination__control-buttons\">\n    <button\n      class=\"cds--pagination__button cds--pagination__button--backward\"\n      title=\"Previous page\"\n    >\n    </button>\n    <button\n      class=\"cds--pagination__button cds--pagination__button--forward\"\n      title=\"Next page\"\n    >\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests in Carbon Elements\nDESCRIPTION: Command to execute end-to-end tests using yarn. These tests may take longer to run and require the project to be built first.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:e2e\n```\n\n----------------------------------------\n\nTITLE: Committing Release Changes\nDESCRIPTION: Sequence of git commands to stage, commit and push release changes to a new branch\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\ngit commit -m 'chore(release): vX.Y.Z'\ngit push --set-upstream origin release/vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon CLI with npm\nDESCRIPTION: Command to install @carbon/cli package using npm package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/cli\n```\n\n----------------------------------------\n\nTITLE: SCSS Comment Style Guidelines\nDESCRIPTION: Shows preferred comment formatting for inline and section comments in SCSS files.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n.#{$prefix}--my-component {\n  width: 100%; // Comment about why we need 100% width\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n.#{$prefix}--my-component {\n  // Comment about why we need 100% width\n  width: 100%;\n}\n```\n\nLANGUAGE: scss\nCODE:\n```\n//----------------------------------------------------------------------------\n// Section name\n//----------------------------------------------------------------------------\n```\n\nLANGUAGE: scss\nCODE:\n```\n/// This is a comment for SassDoc\n/// @access public\n.#{$prefix}--my-component {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Menu Button with Inactive State Attributes in HTML\nDESCRIPTION: This snippet demonstrates a header menu button in an inactive state. It includes a custom aria-label, disabled attribute, and specific CSS classes for styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-label=\"button-label-inactive\"\n  class=\"cds--header__action cds--header__menu-toggle cds--header__menu-trigger\"\n  disabled=\"\"\n  part=\"button\"\n>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Component Declaration\nDESCRIPTION: Declares the Storybook Meta component for Radio Button documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/RadioButton/RadioButton.mdx#2025-04-22_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Building the Carbon Repository\nDESCRIPTION: Commands to install dependencies and build the main Carbon repository before setting up the Themes preview.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/examples/preview-v10/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Documenting RadioButtonSkeleton CSS Changes in Markdown\nDESCRIPTION: A markdown note explaining the removal of the radioButtonWrapper class from the top-level element of the RadioButtonSkeleton component. It advises using cds--radio-button-wrapper for style overrides in version 10.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/RadioButton/migrate-to-7.x.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nNo longer adds `radioButtonWrapper` class to the top-level element. Please use\n`cds--radio-button-wrapper` for style overrides.\n```\n\n----------------------------------------\n\nTITLE: Manual Icon Ref Forwarding Fix\nDESCRIPTION: Example of how to manually update code to use React.forwardRef when a component passes a ref to an icon, which is a common case the automated codemod cannot fully handle.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<MyComponent\n  renderIcon={React.forwardRef((props, ref) => (\n    <Search ref={ref} size={16} {...props} />\n  ))}\n/>;\n\n// Or, alternatively:\nconst Search16 = React.forwardRef((props, ref) => {\n  return <Search ref={ref} size={16} {...props} />;\n});\n\n<MyComponent renderIcon={Search16} />;\n```\n\n----------------------------------------\n\nTITLE: Flowchart for Issue Severity Classification in Mermaid\nDESCRIPTION: A decision flowchart that guides contributors through the process of assigning severity levels to bugs in the Carbon Design System. The chart considers whether users can complete tasks, if workarounds exist, and the criticality of immediate fixes to determine appropriate severity ratings from 1-4.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/support.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[There is a bug!] --> B[Can the user/designer/developer </br> still complete the task?]\n    B -->|No| C[Is there a workaround?]\n    B -->|Yes| D[Is there a workaround?]\n    C -->|No| E[Is this major enough to need an immediate fix?*]\n    C -->|Yes| Sev3([Severity: 3])\n    E -->|No| Sev2([Severity: 2])\n    E -->|Yes| Sev1([Severity: 1])\n    D -->|Yes| Sev3\n    D -->|Workaround not needed| Sev4([Severity: 4])\n    B -->|Unrelated to user task| Sev4\n```\n\n----------------------------------------\n\nTITLE: Documenting Slider Component Props Changes in Markdown\nDESCRIPTION: Markdown table showing that the onChange prop behavior changed from firing on both value prop changes and user gestures in v9 to only firing on user gestures in v10.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Slider/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop       | v9                                                       | v10                        |\n| ---------- | -------------------------------------------------------- | -------------------------- |\n| `onChange` | Fires on `value` prop change in addition to user gesture | Fires only on user gesture |\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Theme Dropdown\nDESCRIPTION: Shows how to use the deprecated light prop for improved contrast on matching backgrounds.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dropdown/Dropdown.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Dropdown light>...</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Sass Features Migration Table in Markdown\nDESCRIPTION: A markdown table listing the status of Sass features and mixins in Carbon v10, specifically noting removed features.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/migration/migrate-to-10.x.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Sass feature        | v10     |\n| ------------------- | ------- |\n| `font-size` mixin   | Removed |\n| `line-height` mixin | Removed |\n| `layer` mixin       | Removed |\n```\n\n----------------------------------------\n\nTITLE: Accessibility Enhancement for Side Panel Animation\nDESCRIPTION: Improves the side panel closing animation to respect the reduced motion preference setting, enhancing accessibility for users with motion sensitivity.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n* reduced motion side panel close ([#11608](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11608)) ([dbddbb0](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/dbddbb03b2da53993b6323f99ca95bbb8520c2e2))\n```\n\n----------------------------------------\n\nTITLE: Running Yarn Sync Command\nDESCRIPTION: Command to synchronize package.json with necessary information for publishing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/building-an-icon-library.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn sync\n```\n\n----------------------------------------\n\nTITLE: Displaying Carbon CLI Help Information\nDESCRIPTION: Command to show available CLI options and commands using npx\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/cli --help\n```\n\n----------------------------------------\n\nTITLE: Release Status Table in Markdown\nDESCRIPTION: A markdown table showing the release status, dates, and lifecycle phases for different versions of Carbon Design System, from main branch through v12.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release-schedule.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Release | Status      | Initial release | Begin Active | Begin Maintenance | End of life |\n| ------- | ----------- | --------------- | ------------ | ----------------- | ----------- |\n| `main`  | unstable    | unstable        | unstable     | unstable          | unstable    |\n| v9      | End of life | 2018-06-04      | 2018-06-04   | 2019-03-29        | 2022-03-31  |\n| v10     | Maintenance | 2019-03-29      | 2019-03-29   | 2022-03-31        | 2024-09-30  |\n| v11     | Active      | 2021-08-06      | 2022-03-31   | 2026-03-31        | 2028-03-31  |\n| v12     | Unreleased  | 2025-08-01      | 2026-03-31   | 2028-03-31        | 2029-03-31  |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: Commands to install package dependencies and start the development server for the themes sass modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/examples/sass-modules/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Applying Fluid Token with type-style() Mixin in SCSS\nDESCRIPTION: This snippet demonstrates how to update the usage of the type-style() mixin when applying a fluid token in Carbon Design System v11. It shows the difference between v10 and v11 syntax, where v11 requires an additional boolean parameter to indicate a fluid token.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_31\n\nLANGUAGE: scss\nCODE:\n```\n- @include type.type-style('expressive-heading-04');\n+ @include type.type-style('fluid-heading-04', true);\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Repository\nDESCRIPTION: Commands to install dependencies and build the Carbon repository from the root directory before working with the Themes preview tool.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Preview Jscodeshift Transform Changes\nDESCRIPTION: Command to preview codemod transform changes using dry run and print options in jscodeshift.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/upgrade/transforms/ARCHITECTURE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn jscodeshift -d -p -t transforms/<name>.js 'path/to/file'\n```\n\n----------------------------------------\n\nTITLE: Motion Variables Migration from v10 to v11\nDESCRIPTION: Mapping of motion-related variables and their renamed counterparts between Carbon v10 and v11.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$carbon--ease-in         -> $ease-in\n$carbon--ease-out        -> $ease-out\n$carbon--standard-easing -> $standard-easing\n$transition--base        -> $transition-base\n$transition--expansion   -> $transition-expansion\n$duration--fast-01       -> $duration-fast-01\n$duration--fast-02       -> $duration-fast-02\n$duration--moderate-01   -> $duration-moderate-01\n$duration--moderate-02   -> $duration-moderate-01\n$duration--slow-01       -> $duration-slow-01\n$duration--slow-02       -> $duration-slow-02\n```\n\n----------------------------------------\n\nTITLE: Displaying Icon Change Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table that compares icon statuses between version 9 and version 10 of the Carbon Design System. It includes icon names, their status in v9, and changes or new statuses in v10.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-icons.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Icon                 | v9         | v10                                   |\n| -------------------- | ---------- | ------------------------------------- |\n| add                  | Stable     | Updated                               |\n| add--filled          | _          | New                                   |\n| add--glyph           | Deprecated | Removed                               |\n| add--outline         | Stable     | Stable                                |\n| add--solid           | New        | Replaced by `add--filled`             |\n| api                  | Logo       | Updated                               |\n| apis                 | Logo       | Deprecated                            |\n| app-services         | Logo       | Deprecated                            |\n| applications         | Logo       | Replaced by `apps`                    |\n| apps                 | Logo       | Stable                                |\n| arrow--down          | Stable     | Updated                               |\n| arrow--left          | Stable     | Updated                               |\n| arrow--right         | Stable     | Updated                               |\n| arrow--up            | Stable     | Updated                               |\n| arrows               | Stable     | Stable                                |\n| asleep               | New        | Stable                                |\n| asleep--glyph        | Deprecated | Removed                               |\n| attachment           | New        | Stable                                |\n| awake                | New        | Stable                                |\n| back-to-top          | New        | Updated                               |\n| block-chain          | Logo       | Deprecated                            |\n| calendar             | Stable     | Updated                               |\n| caret--down          | Stable     | Updated                               |\n| caret--left          | Stable     | Updated                               |\n| caret--right         | Stable     | Updated                               |\n| caret--up            | Stable     | Updated                               |\n| cf-apps              | Logo       | Deprecated                            |\n| chat                 | New        | Updated                               |\n| checkmark            | Stable     | Deprecated                            |\n| checkmark--filled    | _          | New                                   |\n| checkmark--glyph     | Deprecated | Removed                               |\n| checkmark--outline   | Stable     | Updated                               |\n| checkmark--solid     | New        | Replaced by `checkmark--filled`       |\n| chevron--down        | Stable     | Updated                               |\n| chevron--left        | Stable     | Updated                               |\n| chevron--right       | Stable     | Updated                               |\n| chevron--up          | Stable     | Updated                               |\n| close                | Stable     | Updated                               |\n| close--filled        | _          | New                                   |\n| close--glyph         | Deprecated | Removed                               |\n| close--outline       | Stable     | Updated                               |\n| close--solid         | New        | replaced by `close--filled`           |\n| cloud-foundry        | Logo       | Replaced by `cloud-foundry--1`        |\n| code                 | New        | Updated                               |\n| console              | Logo       | Deprecated                            |\n| containers           | Logo       | Deprecated                            |\n| copy                 | Stable     | Updated                               |\n| copy--glyph          | Deprecated | Removed                               |\n| crash                | Stable     | Deprecated                            |\n| dashboard            | Logo       | Deprecated                            |\n| data                 | Logo       | Deprecated                            |\n| data--1              | _          | New                                   |\n| delete               | Stable     | Replaced by `trash-can`               |\n| delete--glyph        | Deprecated | Removed                               |\n| devices              | Stable     | Updated                               |\n| devops               | Logo       | Deprecated                            |\n| document             | New        | Updated                               |\n| dollars              | Stable     | Deprecated                            |\n| download             | Stable     | Updated                               |\n| download--glyph      | Deprecated | Removed                               |\n| draggable            | New        | Updated                               |\n| edit                 | Stable     | Updated                               |\n| edit--glyph          | Deprecated | Removed                               |\n| email                | New        | Updated                               |\n| error                | Stable     | Replaced by `error-filled`            |\n| error--glyph         | Deprecated | Removed                               |\n| error--outline       | New        | Replaced by `error`                   |\n| error--solid         | New        | deprecated                            |\n| favorite             | Stable     | Updated                               |\n| favorite--outline    | New        | Replaced by `favorite`                |\n| favorite--solid      | New        | favorite--filled                      |\n| filter               | Stable     | Updated                               |\n| filter--glyph        | Deprecated | Removed                               |\n| finance              | Logo       | Updated                               |\n| financial            | Logo       | Deprecated                            |\n| folder               | New        | Updated                               |\n| folder--glyph        | Deprecated | Removed                               |\n| folder-add           | New        | Updated                               |\n| forum                | New        | Updated                               |\n| functions            | Logo       | Updated                               |\n| grid                 | New        | Updated                               |\n| header--avatar       | New        | Deprecated                            |\n| header--chevron      | New        | Deprecated                            |\n| header--close        | New        | Deprecated                            |\n| header--contact      | New        | Deprecated                            |\n| header--docs         | New        | Deprecated                            |\n| header--hamburger    | New        | Deprecated                            |\n| header--help         | New        | Deprecated                            |\n| header--notification | New        | Deprecated                            |\n| header--search       | New        | Deprecated                            |\n| header--ticket       | New        | Deprecated                            |\n| header--user         | New        | Deprecated                            |\n| help                 | Stable     | Updated                               |\n| help--glyph          | Deprecated | Removed                               |\n| help--outline        | New        | Replace by `help`                     |\n| help--solid          | New        | Replaced by `help--filled`            |\n| hpa                  | Logo       | Deprecated                            |\n| hpa--stress          | Logo       | Deprecated                            |\n| info                 | Stable     | Replaced by `information`             |\n| info--glyph          | Deprecated | Removed                               |\n| info--outline        | New        | Deprecated                            |\n| info--solid          | New        | information--filled                   |\n| infrastructure       | Logo       | Deprecated                            |\n| integration          | Logo       | Updated                               |\n| iot                  | Logo       | Deprecated                            |\n| launch               | Stable     | Updated                               |\n| launch--glyph        | Deprecated | Removed                               |\n| light                | Stable     | Updated                               |\n| light--glyph         | Deprecated | Removed                               |\n| link                 | Stable     | Updated                               |\n| list                 | Stable     | Updated                               |\n| locked               | Stable     | Updated                               |\n| maximize             | New        | Updated                               |\n| menu                 | New        | Updated                               |\n| minimize             | New        | Updated                               |\n| mobile               | Stable     | Updated                               |\n| network              | Logo       | Replaced by `chart--network`          |\n| new-tab              | New        | Updated                               |\n| notification-off     | New        | Updated                               |\n| notification-on      | New        | Replaced by `notification`            |\n| open-whisk           | Logo       | Deprecated                            |\n| overflow-menu        | Stable     | Replaced by `overflow-menu--vertical` |\n| pa                   | Logo       | Replaced by `tag`                     |\n| pa--stress           | Logo       | Deprecated                            |\n| pause                | Stable     | Updated                               |\n| pause--glyph         | Deprecated | Removed                               |\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and OrderedList Stories\nDESCRIPTION: Import statements for Storybook documentation components and OrderedList stories, along with code preview configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/OrderedList/OrderedList.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as OrderedListStories from './OrderedList.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: Commands to install project-specific dependencies and start the development server for the custom data table state manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/examples/custom-data-table-state-manager-vite/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Documenting RadioButton Property Changes in Markdown\nDESCRIPTION: A markdown table comparing properties of the RadioButton component between versions 9 and 10 of the Carbon Design System. It highlights changes to the ref property and the removal of top/bottom options for labelPosition.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/RadioButton/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                                    | v9                                       | v10                 |\n| ------------------------------------------- | ---------------------------------------- | ------------------- |\n| `ref`                                       | Grabs the React class instance reference | Grabs the `<input>` |\n| `top`/`bottom` for `labelPosition` property |                                          | Removed             |\n```\n\n----------------------------------------\n\nTITLE: Rendering TreeView with Links Example in Storybook Canvas\nDESCRIPTION: This snippet shows how to render a TreeView example with links in a Storybook Canvas component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/TreeView.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={TreeViewStories.WithLinks}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Collapsed Side Navigation Menu in HTML\nDESCRIPTION: This snippet demonstrates a side navigation menu in a collapsed state. It's used when the parent side nav is collapsed as a rail.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n  aria-expanded=\"false\"\n  aria-haspopup=\"true\"\n  class=\"cds--side-nav__submenu\"\n  part=\"expando\"\n  type=\"button\"\n>\n  <div\n    class=\"cds--side-nav__icon\"\n    hidden=\"\"\n    id=\"title-icon-container\"\n    part=\"title-icon-container\"\n  >\n    <slot name=\"title-icon\">\n    </slot>\n  </div>\n  <span\n    class=\"cds--side-nav__submenu-title\"\n    part=\"title\"\n  >\n  </span>\n  <div\n    class=\"cds--side-nav__icon cds--side-nav__icon--small cds--side-nav__submenu-chevron\"\n    part=\"expando-icon-container\"\n  >\n  </div>\n</button>\n<ul\n  class=\"cds--side-nav__menu\"\n  part=\"menu-body\"\n>\n  <slot>\n  </slot>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Importing TreeView Stories and Storybook Components in JSX\nDESCRIPTION: This snippet imports necessary components from Storybook and the TreeView stories for documentation purposes. It also imports a utility function for code previews.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TreeView/TreeView.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Meta } from '@storybook/blocks';\nimport * as TreeViewStories from './Treeview.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Listing Available Migration Guides in Markdown\nDESCRIPTION: This snippet provides a markdown-formatted list of available migration guides for the Carbon Design System. It includes a link to the guide for migrating from version 9 to version 10.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Migration Guides\n\nAvailable guides:\n\n- [v9 to v10](./migrate-to-10.x.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Component for AI Skeleton Documentation\nDESCRIPTION: Configures the Storybook Meta component as a template for the AI Skeleton documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AISkeleton/AISkeleton.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-table-batch-action with Minimum Attributes\nDESCRIPTION: Displays the batch action component with minimal configuration, showing a single item selection state and cancel button.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/data-table.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--batch-summary\">\n  <p class=\"cds--batch-summary__para\">\n    0 item selected\n  </p>\n</div>\n<div class=\"cds--action-list\">\n  <slot>\n  </slot>\n  <button class=\"cds--batch-summary__cancel cds--btn cds--btn--primary\">\n    <slot name=\"cancel-button-content\">\n      Cancel\n    </slot>\n  </button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Generating Release Changelog\nDESCRIPTION: Command to generate changelog between two versions using Carbon CLI\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./packages/cli/bin/carbon-cli.js changelog vA.B.C..vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Enabling Structured List Visible Icons with Feature Flags in JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable the visible icons feature in StructuredList component using the Carbon Design System's FeatureFlags component. The flag 'enable-v12-structured-list-visible-icons' is set to true to activate this feature.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/StructuredList/StructuredList.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-v12-structured-list-visible-icons': true,\n  }}>\n  <StructuredList />\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Side Panel Component\nDESCRIPTION: Fixes missing icon-button import and updates the CodeSandbox example for the side panel component, ensuring that all dependencies are properly included.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* **side-panel:** import missing icon-button and codesandbox example ([#11821](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11821)) ([3c51597](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/3c51597f48ffd6a18201f56fe740322b9e15127c))\n```\n\n----------------------------------------\n\nTITLE: CSS Grid Display Property Implementation\nDESCRIPTION: Implementation note showing the base CSS Grid display property usage. The grid uses display: grid but cannot utilize grid-gap due to specific gutter mode requirements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/grid/ARCHITECTURE.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndisplay: grid\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Elements with Yarn\nDESCRIPTION: Command to install @carbon/elements package using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/elements\n```\n\n----------------------------------------\n\nTITLE: Generating Icon Module Directories in Carbon Design System\nDESCRIPTION: Shows how icon source files are transformed into module directories for easy importing in JavaScript applications.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/icons.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nes\n├── cloud\n│   └── menu\n│   │   └── index.js\n├── menu\n│   └── 16.js\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Dependencies\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Building Vue Project for Production\nDESCRIPTION: Command to compile and minify the project for production deployment\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/examples/vue-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Accordion Skeleton in Carbon Web Components\nDESCRIPTION: Applies the carbon element decorator to the accordion skeleton component. This decorator likely ensures proper functionality and styling for the component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* **accordion:** apply carbon element decorator for accordion skeleton ([#11989](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11989)) ([dfdc39b](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/dfdc39bca433fc210e45fd2f4540bf7e19aa4b08))\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon React with Yarn\nDESCRIPTION: Command to install @carbon/react package using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/react\n```\n\n----------------------------------------\n\nTITLE: Executing Lerna Version Patch Command\nDESCRIPTION: Commands to version packages with a patch update without creating git tags or pushing changes\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn lerna version patch --no-git-tag-version --no-push --yes\n```\n\n----------------------------------------\n\nTITLE: Carbon CLI Command Reference\nDESCRIPTION: Complete list of available commands and options for the Carbon CLI tool, including CI checks, contribution commands, publishing, release management, and workspace synchronization features\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: @carbon/cli [options]\n\nCommands:\n  cli ci-check              run CI checks\n  cli contribute <command>  get started contributing with Carbon\n  cli publish <tag>        publish packages that have different versions from\n                           the package registry\n  cli release [bump]       run the release step for the given version bump\n  cli sync [target]        sync files across workspaces\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Machine Folder in VirtualBox\nDESCRIPTION: This snippet shows how to set the default machine folder in VirtualBox preferences.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/setup/virtual-machines.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOpen VirtualBox and open Preferences. Select `/Users/USERNAME/VirtualBox` as your default machine folder.\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Design System Repository\nDESCRIPTION: Commands to build the Carbon repository from its root directory, which prepares the necessary packages for the project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/id-prefix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: InlineCheckbox Component Usage Reference Table\nDESCRIPTION: Markdown table documenting the behavior change of the ref prop between versions 9 and 10 of the InlineCheckbox component. In v9, ref grabs the React class instance reference, while in v10 it grabs the input element directly.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/InlineCheckbox/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop  | v9                                       | v10                 |\n| ----- | ---------------------------------------- | ------------------- |\n| `ref` | Grabs the React class instance reference | Grabs the `<input>` |\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo for Carbon Design System Pagination in React\nDESCRIPTION: This code snippet renders a StorybookDemo component for the Pagination component in the Carbon Design System. It includes a theme selector and multiple variants of the Pagination component, such as default, multiple pagination components, and custom page sizes label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Pagination/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-pagination--default'\n    },\n    {\n      label: 'Multiple Pagination Components',\n      variant: 'components-pagination--multiple-pagination-components'\n    },\n    {\n      label: 'Pagination with custom page sizes label',\n      variant: 'components-pagination--pagination-with-custom-page-sizes-label'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing UnorderedList Component Documentation Resources\nDESCRIPTION: This code imports the necessary Storybook components for documentation, the UnorderedList stories, and a code previewer configuration for Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/UnorderedList/UnorderedList.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as UnorderedList from './UnorderedList.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Icons with NPM\nDESCRIPTION: Command to install @carbon/icons package using NPM package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/icons\n```\n\n----------------------------------------\n\nTITLE: Executing Vendor Styles Copy Script in Bash\nDESCRIPTION: This command runs the copy-vendor-styles.sh script, which copies Carbon Elements packages into the src/styles/vendor directory. This script is typically used after updating Carbon Elements dependencies in package.json.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/vendor-styles.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./tools/copy-vendor-styles.sh\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing a Release for Carbon Design System\nDESCRIPTION: These commands create an annotated git tag for the release and push it to the upstream repository. This triggers the release workflow in the CI/CD pipeline.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v11.2.0-rc.0 -m 'v11.2.0-rc.0'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push upstream v11.2.0-rc.0\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon Combo Box Dependencies\nDESCRIPTION: Import statements for Storybook documentation components and ComboBox stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/combo-box/combo-box.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs, cdnCss } from '../../globals/internal/storybook-cdn';\nimport * as ComboBoxStories from './combo-box.stories';\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Repository\nDESCRIPTION: Commands to install dependencies and build the Carbon repository before working with themes sass modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/examples/sass-modules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing browserslist-config-carbon with npm\nDESCRIPTION: Command to install the browserslist-config-carbon package using npm package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/browserslist-config-carbon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S browserslist-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Migration Guide\nDESCRIPTION: Simple markdown link pointing to the v11 Pictograms React migration guide document.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [v11 Pictograms React](./11.x-pictograms-react.md)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Tearsheet Component\nDESCRIPTION: Updates the tearsheet styles and CodeSandbox example to ensure proper rendering and functionality of the component in various environments.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n* **tearsheet:** tearsheet styles and codesandbox example ([#11792](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11792)) ([f0ddd6e](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/f0ddd6e22c5298e8c612ae113301dc4e2b5292f2))\n```\n\n----------------------------------------\n\nTITLE: Installing stylelint-config-carbon with npm\nDESCRIPTION: Command to install the stylelint-config-carbon package using npm. This adds the package to your project's dependencies.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/stylelint-config-carbon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S stylelint-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Pushing a tag to upstream\nDESCRIPTION: Command to push the newly created tag to the upstream repository.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push upstream v11.2.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table structure displaying contributor information including profile pictures, names, and contribution types using GitHub-style contribution icons and links.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://asudoh.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/1259051?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Akira Sudoh</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=asudoh\" title=\"Code\">💻</a> <a href=\"https://github.com/carbon-design-system/carbon/commits?author=asudoh\" title=\"Documentation\">📖</a> <a href=\"#a11y-asudoh\" title=\"Accessibility\">️️️️♿️</a> <a href=\"#infra-asudoh\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Design System Project\nDESCRIPTION: This snippet shows how to build the Carbon Design System project from the root directory. It installs dependencies and runs the build process.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/codesandbox-styles/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Repository\nDESCRIPTION: Commands to install dependencies and build the Carbon repository from the root directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/class-prefix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-config-carbon with npm\nDESCRIPTION: Command to install the typescript-config-carbon package using npm package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/typescript-config-carbon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S typescript-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Component in JavaScript\nDESCRIPTION: Shows how to import the Stack component from the Carbon Web Components package using JavaScript modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/stack/stack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/stack/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Inline Code Snippet Mode\nDESCRIPTION: Shows the HTML structure of an inline code snippet with minimum attributes. It uses a cds-copy component with specific class names and contains a slot for code content within a code tag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<cds-copy button-class-name=\"cds--snippet cds--snippet--inline\">\n  <code slot=\"icon\">\n    <slot>\n    </slot>\n  </code>\n  <span slot=\"tooltip-content\">\n    Copy to Clipboard\n  </span>\n</cds-copy>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Radio Tile with Various Attributes in HTML\nDESCRIPTION: This snippet demonstrates a radio tile with additional attributes such as name, value, and light theme. It shows how to configure a more complex radio tile.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-tile.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<input\n  class=\"cds--tile-input\"\n  id=\"input\"\n  name=\"name-foo\"\n  tabindex=\"-1\"\n  type=\"radio\"\n  value=\"value-foo\"\n>\n<label\n  class=\"cds--tile cds--tile--light cds--tile--selectable\"\n  for=\"input\"\n  tabindex=\"0\"\n>\n  <div class=\"cds--tile__checkmark\">\n  </div>\n  <div class=\"cds--tile-content\">\n    <slot>\n    </slot>\n  </div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Themes with npm\nDESCRIPTION: Command to install the @carbon/themes package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/themes\n```\n\n----------------------------------------\n\nTITLE: Displaying Migration Table in Markdown\nDESCRIPTION: This code snippet shows a migration table comparing v9 and v10 layout-related variables and functions in the Carbon Design System. It includes changes to spacing, breakpoints, and other layout elements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-layout.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| v9                  | v10                                         |\n| ------------------- | ------------------------------------------- |\n| `$base-font-size`   | `$carbon--base-font-size`                   |\n| `rem`, `em` helpers | `carbon--rem`,`carbon--em`                  |\n| `$grid-breakpoints` |                                             |\n|                     | `carbon--breakpoint-next`                   |\n|                     | `carbon--breakpoint-prev`                   |\n|                     | `carbon--breakpoint-is-smallest-breakpoint` |\n|                     | `carbon--largest-breakpoint-name`           |\n|                     | `carbon--breakpoint-up`                     |\n|                     | `carbon--breakpoint-down`                   |\n|                     | `carbon--breakpoint-between`                |\n|                     | Mixin `carbon--breakpoint`                  |\n|                     | `carbon--largest-breakpoint`                |\n|                     | `$carbon--grid-gutter`                      |\n|                     | `$carbon--grid-gutter--condensed`           |\n|                     | `carbon--key-height`                        |\n|                     | Mixin `carbon--key-height`                  |\n|                     | `$carbon--mini-unit-size`                   |\n|                     | function `carbon--mini-units`               |\n| `$spacing-3xs`      | `$carbon--spacing-01`, `$spacing-01`        |\n| `$spacing-2xs`      | `$carbon--spacing-02`, `$spacing-02`        |\n| `$spacing-xs`       | `$carbon--spacing-03`, `$spacing-03`        |\n| `$spacing-sm`       | `$carbon--spacing-04`, `$spacing-04`        |\n| `$spacing-md`       | `$carbon--spacing-05`, `$spacing-05`        |\n| `$spacing-lg`       | `$carbon--spacing-06`, `$spacing-06`        |\n| `$spacing-xl`       | `$carbon--spacing-07`, `$spacing-07`        |\n| `$spacing-2xl`      | `$carbon--spacing-08`, `$spacing-08`        |\n| `$spacing-3xl`      | `$carbon--spacing-09`, `$spacing-09`        |\n| `$layout-2xs`       | `$carbon--layout-01`, `$layout-01`          |\n| `$layout-xs`        | `$carbon--layout-02`, `$layout-02`          |\n| `$layout-sm`        | `$carbon--layout-03`, `$layout-03`          |\n| `$layout-md`        | `$carbon--layout-04`, `$layout-04`          |\n| `$layout-lg`        | `$carbon--layout-05`, `$layout-05`          |\n| `$layout-xl`        | `$carbon--layout-06`, `$layout-06`          |\n| `$layout-2xl`       | `$carbon--layout-07`, `$layout-07`          |\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class to DatePicker\nDESCRIPTION: Demonstrates adding a custom CSS class to the DatePicker wrapper element for custom styling.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/DatePicker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DatePicker className=\"some-class\">...</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Promoting NPM Package Version\nDESCRIPTION: NPM command to promote a specific package version to the latest tag\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm dist-tag add carbon-components-react@vX.Y.Z latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Skeleton State of Code Snippet Component in JSX/Storybook\nDESCRIPTION: Shows the skeleton state (loading placeholder) of the code snippet component for asynchronous scenarios using a Canvas block. Connects to the 'Skeleton' story from CodeSnippetStories. This assists users in understanding how to display loading states within UIs while awaiting code content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/code-snippet/code-snippet.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Canvas of={CodeSnippetStories.Skeleton} />\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Web Component\nDESCRIPTION: JavaScript import statement for including the notification component from Carbon Web Components package.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/notification/notification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/notification/index.js';\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for Postmortem Files in Markdown\nDESCRIPTION: Demonstrates the correct file naming format for postmortem documents, using the date and a brief title.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/postmortems/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYYYY-MM-DD-title.md\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Combo Box with Minimum Attributes in HTML\nDESCRIPTION: HTML structure of the cds-combo-box component with minimal configuration. The component includes a label, combo box container, input field, and slots for custom content like title text and helper text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-combo-box.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<label\n  class=\"cds--label\"\n  hidden=\"\"\n  part=\"title-text\"\n>\n  <slot name=\"title-text\">\n  </slot>\n</label>\n<div\n  class=\"cds--combo-box cds--dropdown cds--list-box cds--list-box--md\"\n  role=\"listbox\"\n>\n  <div\n    aria-controls=\"menu-body\"\n    aria-expanded=\"false\"\n    aria-haspopup=\"listbox\"\n    aria-labelledby=\"trigger-label\"\n    aria-owns=\"menu-body\"\n    class=\"cds--list-box__field\"\n    part=\"trigger-button\"\n  >\n    <input\n      aria-autocomplete=\"list\"\n      aria-controls=\"menu-body\"\n      aria-label=\"\"\n      class=\"cds--text-input cds--text-input--empty\"\n      id=\"trigger-label\"\n      placeholder=\"\"\n      role=\"combobox\"\n    >\n    <div\n      class=\"cds--list-box__menu-icon\"\n      id=\"trigger-caret\"\n    >\n    </div>\n  </div>\n  <slot name=\"slug\">\n  </slot>\n</div>\n<div\n  class=\"cds--form__helper-text\"\n  hidden=\"\"\n  part=\"helper-text\"\n>\n  <slot name=\"helper-text\">\n  </slot>\n</div>\n<div\n  aria-live=\"assertive\"\n  aria-relevant=\"additions text\"\n  class=\"cds--assistive-text\"\n  role=\"status\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sprint Planning Checkpoints Table in Markdown\nDESCRIPTION: A markdown table defining the key checkpoints in the sprint planning process, including the Dev Sprint Planning Meeting and System Squad Sprint Planning Meeting with their descriptions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/sprint-planning.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Checkpoint                                                                    | Description                                                                                                                                       |\n| :---------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [Dev Sprint Planning Meeting](#dev-sprint-planning-meeting)                   | Load up the dev sprint in [Github Project](https://github.com/orgs/carbon-design-system/projects/39) with the sprint items and assign accordingly |\n| [System Squad Sprint Planning Meeting](#system-squad-sprint-planning-meeting) | Playback the sprint plan along with design leader to the wider team, identify and correct any issues                                              |\n```\n\n----------------------------------------\n\nTITLE: Displaying Table of Contents in Markdown\nDESCRIPTION: This code snippet shows how to include a table of contents in a Markdown file using doctoc comments. It includes sections for 'About' and 'Migrating'.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [About](#about)\n- [Migrating](#migrating)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Generating changelog with Carbon CLI\nDESCRIPTION: Command to generate changelog for a specific version range using Carbon CLI.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./packages/cli/bin/carbon-cli.js changelog v11.5.0..v11.6.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributors to the Carbon Design System project. It includes avatar images, names, GitHub profiles, and contribution types for each contributor.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/digiacomo-a\"><img src=\"https://avatars.githubusercontent.com/u/117646602?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrea DG</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=digiacomo-a\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/lluisrojass\"><img src=\"https://avatars.githubusercontent.com/u/15043356?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Luis</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=lluisrojass\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/lharrison13\"><img src=\"https://avatars.githubusercontent.com/u/172074450?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Luke Harrison</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=lharrison13\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Tabs Component in Carbon Design System\nDESCRIPTION: JSX configuration for a StorybookDemo component that displays the Tabs component from the Carbon Design System in various variants. The configuration specifies the Storybook URL and defines five different variants of the Tabs component to demonstrate its flexibility.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-tabs--default'\n    },\n    {\n      label: 'Contained',\n      variant: 'components-tabs--contained'\n    },\n    {\n      label: 'Icon 20 only',\n      variant: 'components-tabs--icon-20-only'\n    },\n    {\n      label: 'Icon only',\n      variant: 'components-tabs--icon-only'\n    },\n    {\n      label: 'Manual',\n      variant: 'components-tabs--manual'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Table of Contents in Markdown\nDESCRIPTION: This code snippet uses HTML comments to define a section for a table of contents in a Markdown file. It's likely generated automatically by a tool like 'doctoc' and is set to be ignored by prettier formatting.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-motion.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [About](#about)\n- [Migrating](#migrating)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Themes with Yarn\nDESCRIPTION: Command to install the @carbon/themes package using Yarn package manager as an alternative to npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/themes\n```\n\n----------------------------------------\n\nTITLE: Feature Clean-up for Slug Component\nDESCRIPTION: Removes a no longer needed 'dot-type' property from the slug component, simplifying the API and removing deprecated functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n* **slug:** remove no longer needed dot-type prop ([#11726](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11726)) ([2cca4b3](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/2cca4b38955d738104c60739ee09052ae4625c7d))\n```\n\n----------------------------------------\n\nTITLE: Rendering SkeletonIcon Default Story in Canvas\nDESCRIPTION: Displays the default SkeletonIcon story in a Storybook Canvas with an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonIcon/SkeletonIcon.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas\n  of={SkeletonIconStories.Default}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(SkeletonIconStories.Default),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Combobox Import Path\nDESCRIPTION: Fixes the import path for the combobox component to work with various bundlers, resolving issue #11635 for better compatibility across different build systems.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n* **combobox:** fix import path for some bundlers ([#11639](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11639)) ([5c491a0](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/5c491a02a56dc07b69091d2f4e09e6778cf6ad00)), closes [#11635](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11635)\n```\n\n----------------------------------------\n\nTITLE: Running Feature Flags Migration Command\nDESCRIPTION: Command to run the codemod for migrating from flags object prop to individual boolean props.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FeatureFlags/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @carbon/upgrade migrate featureflag-deprecate-flags-prop --write\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Repository\nDESCRIPTION: Initial commands to install dependencies and build the Carbon repository before working with Carbon types.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Utilities with Yarn\nDESCRIPTION: Alternative command to install @carbon/utilities package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/utilities\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components from Carbon React\nDESCRIPTION: Shows how to import the Tabs component and related components from the Carbon React package for use in your project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from '@carbon/react';\n```\n\n----------------------------------------\n\nTITLE: Removing Component Props in React\nDESCRIPTION: Shows the removal of a deprecated prop from a React component, which requires a major version bump due to breaking changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nfunction ExampleComponent({\n  propA,\n-  propB,\n}) {\n  return (\n    <>\n      <span>{propA}</span>\n-      <span>{propB}</span>\n    </>\n  );\n}\n\nExampleComponent.propTypes = {\n  propA: PropTypes.string,\n-  propB: deprecate(PropTypes.string),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/icon-build-helpers with npm\nDESCRIPTION: Command to install the @carbon/icon-build-helpers package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-build-helpers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/icon-build-helpers\n```\n\n----------------------------------------\n\nTITLE: Component Changes Table in Markdown\nDESCRIPTION: A markdown table listing all Carbon Web Components and their migration status between v1 and v2, including links to detailed changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/cwc-v2-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Component            | Changes                                  |\n| -------------------- | ---------------------------------------- |\n| accordion            | View changes [here](#accordion)          |\n| breadcrumb           | View changes [here](#breadcrumb)         |\n| button               | View changes [here](#button)             |\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Carbon Design System React MenuButton\nDESCRIPTION: This code snippet sets up a live Storybook demo for the Carbon Design System React MenuButton component. It uses the StorybookDemo component to render the demo, specifying the Storybook URL and component variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MenuButton/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-menubutton--default'\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structured List Component Demo in HTML\nDESCRIPTION: This code snippet demonstrates the usage of a structured list component, likely from the Carbon Design System. It uses a custom element to render a live demo of the structured list, focusing on the default variant.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/structured-list/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-structured-list--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API Documentation for AI Skeleton\nDESCRIPTION: Renders the ArgTypes component to automatically display the API documentation for the AI Skeleton components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AISkeleton/AISkeleton.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Configuring Carbon with custom theme in SCSS\nDESCRIPTION: SCSS code to configure Carbon with a custom theme by defining custom background and text colors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n// Configure with a custom theme\n@use '@carbon/styles/scss/theme' with (\n  $theme: (\n    background: #e2e2e2,\n    text-primary: #ffffff,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Building Carbon from source\nDESCRIPTION: Commands to install dependencies and build the Carbon repository from source. This is required before running the demo application.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/v10-token-compat-in-v11/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Name with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a header name component with minimum required attributes. It includes a slot for content within an anchor tag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--header__name\"\n  part=\"link\"\n>\n  <slot>\n  </slot>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Building the Carbon Repository\nDESCRIPTION: Commands to install dependencies and build the entire Carbon repository before setting up the Pictograms preview.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-config-carbon with Yarn\nDESCRIPTION: Alternative command to install the typescript-config-carbon package using Yarn package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/typescript-config-carbon/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add typescript-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Documenting Pictogram Changes in Markdown Table\nDESCRIPTION: A markdown table listing all pictogram changes between versions, including new additions, removals, and replacements. The table has two columns: pictogram names and their status in v11.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/migration/11.x-pictograms-react.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Pictograms                             | v11                                         |\n| -------------------------------------- | ------------------------------------------- |\n| `AdvancedFraudProtection`              | new                                         |\n| `AdvancedThreats`                      | new                                         |\n| `AlchemyLanguageAlphabetAExpanded`     | removed                                     |\n| `AnonymousUsers`                       | new                                         |\n| `ApplicationSecurity`                  | new                                         |\n| `Assets`                               | new                                         |\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Metadata in JSX\nDESCRIPTION: This code sets up the Storybook metadata for the UIShell component documentation. It uses the Meta component with the isTemplate prop set to true.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/UIShell/UIShell.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Code from Upstream for Carbon Release\nDESCRIPTION: These commands are used to fetch the latest code from the upstream repository before tagging a release. They ensure the release is based on the most recent changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/motion with Yarn\nDESCRIPTION: Command to install the @carbon/motion package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/motion/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/motion\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Links in Markdown Documentation\nDESCRIPTION: This section creates dynamic links to the component's source code, usage guidelines, and accessibility information using template literals to insert the component name and URL.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/cli/src/component/templates/mdx.template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[Source\ncode](https://github.com/carbon-design-system/carbon/tree/master/packages/react/src/components/<%=\nname %>) &nbsp;|&nbsp; [Usage\nguidelines](https://www.carbondesignsystem.com/components/<%= name %>/usage)\n&nbsp;|&nbsp; [Accessibility](https://www.carbondesignsystem.com/components/<%=\nurl %>/accessibility)\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Links Section\nDESCRIPTION: Section containing various status badges and links for the project, including license, CI status, and community links.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://github.com/carbon-design-system/carbon/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-Apache--2.0-blue.svg\" alt=\"Carbon is released under the Apache-2.0 license\" />\n  </a>\n  <a href=\"https://github.com/carbon-design-system/carbon/actions/workflows/ci.yml\">\n    <img src=\"https://github.com/carbon-design-system/carbon/actions/workflows/ci.yml/badge.svg\" alt=\"CI workflow status\" />\n  </a>\n  <a href=\"https://lerna.js.org/\">\n    <img src=\"https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg\" alt=\"Maintained with Lerna\" />\n  </a>\n  <a href=\"https://github.com/carbon-design-system/carbon/blob/master/.github/CONTRIBUTING.md\">\n    <img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\" alt=\"PRs welcome\" />\n  </a>\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/7034\">\n    <img src=\"https://bestpractices.coreinfrastructure.org/projects/7034/badge\">\n  </a>\n  <a href=\"https://discord.gg/J7JEUEkTRX\">\n    <img src=\"https://img.shields.io/discord/689212587170201628?color=5865F2\" alt=\"Chat with us on Discord\">\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Table of Contents in HTML Comments\nDESCRIPTION: HTML comments containing auto-generated table of contents markers and structure using doctoc.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/sprint-planning.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination Component Examples in Storybook\nDESCRIPTION: These code snippets demonstrate how to render different Pagination component examples using Storybook's Canvas component. Each example includes an additional action to open the code in Stackblitz for further exploration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Pagination/Pagination.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n    of={PaginationStories.Default}\n    additionalActions={[\n      {\n        title: 'Open in Stackblitz',\n        onClick: () => stackblitzPrefillConfig(PaginationStories.Default),\n      },\n    ]}\n  />\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n    of={PaginationStories.MultiplePaginationComponents}\n    additionalActions={[\n      {\n        title: 'Open in Stackblitz',\n        onClick: () => stackblitzPrefillConfig(PaginationStories.MultiplePaginationComponents),\n      },\n    ]}\n  />\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n    of={PaginationStories.PaginationUnknownPages}\n    additionalActions={[\n      {\n        title: 'Open in Stackblitz',\n        onClick: () => stackblitzPrefillConfig(PaginationStories.PaginationUnknownPages),\n      },\n    ]}\n  />\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n    of={PaginationStories.PaginationWithCustomPageSizesLabel}\n    additionalActions={[\n      {\n        title: 'Open in Stackblitz',\n        onClick: () => stackblitzPrefillConfig(PaginationStories.PaginationWithCustomPageSizesLabel),\n      },\n    ]}\n  />\n```\n\n----------------------------------------\n\nTITLE: Rendering NumberInput Skeleton State in Storybook Canvas\nDESCRIPTION: This snippet renders the NumberInput skeleton state story in a Storybook Canvas component, with an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/NumberInput/NumberInput.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={NumberInputStories.Skeleton}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(NumberInputStories.Skeleton),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for CopyButton Documentation\nDESCRIPTION: Imports necessary components from Storybook blocks, CopyButton stories, and a codePreviewer utility for the documentation page.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/CopyButton/CopyButton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Story, Canvas, Meta } from '@storybook/blocks';\nimport * as CopyButtonStories from './CopyButton.stories.js';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table rows displaying contributor information including profile images, usernames, GitHub links, and contribution types. Each cell contains an avatar image, contributor name, and contribution icons.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/amanlajpal\"><img src=\"https://avatars.githubusercontent.com/u/42869088?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aman Lajpal</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=amanlajpal\" title=\"Code\">💻</a> <a href=\"https://github.com/carbon-design-system/carbon/commits?author=amanlajpal\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: HTML Project Header\nDESCRIPTION: Header section containing the Carbon Design System logo and title with centered alignment.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://www.carbondesignsystem.com\">\n    <img alt=\"Carbon Design System\" src=\"https://user-images.githubusercontent.com/3901764/57545698-ce5f2380-7320-11e9-8682-903df232d7b0.png\" width=\"100%\" />\n  </a>\n</p>\n<h1 align=\"center\">\n  Carbon Design System\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Rendering TextArea Skeleton Story in JSX\nDESCRIPTION: This code snippet renders the TextArea skeleton story using Storybook's Canvas component. It includes an additional action to open the example in Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TextArea/TextArea.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={TextAreaStories.Skeleton}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(TextAreaStories.Skeleton),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Slack Integration Command\nDESCRIPTION: Shell command to subscribe to GitHub notifications in Slack for the Carbon Design System repository\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/support.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/github subscribe carbon-design-system/carbon\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/layout with npm\nDESCRIPTION: Command to install the @carbon/layout package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/layout/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/layout\n```\n\n----------------------------------------\n\nTITLE: Custom AILabel Text Example\nDESCRIPTION: Shows how to customize the AILabel text for different languages using the aiText prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/AILabel/AILabel.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<AILabel aiText=\"IA\">\n  <AILabelContent>Explanation of AI-generated content</AILabelContent>\n</AILabel>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for File Uploader\nDESCRIPTION: Configuration of a StorybookDemo component that displays three variants of the file uploader component from Carbon Design System, including theme selector and specific variant configurations.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FileUploader/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-fileuploader--default'\n    },\n    {\n      label: 'File Uploader Drop Container',\n      variant: 'components-fileuploader--file-uploader-drop-container'\n    },\n    {\n      label: 'File Uploader Item',\n      variant: 'components-fileuploader--file-uploader-item'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: SassDoc Documentation Example\nDESCRIPTION: Template for documenting Sass mixins and functions using SassDoc syntax.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_18\n\nLANGUAGE: scss\nCODE:\n```\n/// <Details about the mixin>\n/// @access <public|private>\n/// @group <name-of-group>\n@mixin my-component {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Component Usage\nDESCRIPTION: Meta component used to define the documentation page as a template in Storybook.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: HTML Contributor Table Rows\nDESCRIPTION: HTML markup for displaying contributor information including profile images, GitHub links, and contribution types in a table format\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/warrenmblood\"><img src=\"https://avatars.githubusercontent.com/u/69060697?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Warren Blood</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=warrenmblood\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/vcherneny\"><img src=\"https://avatars.githubusercontent.com/u/11604315?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Cherneny</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=vcherneny\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/jose-biescas\"><img src=\"https://avatars.githubusercontent.com/u/188625806?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jose Biescas</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=jose-biescas\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Colors with NPM\nDESCRIPTION: Command to install the @carbon/colors package using NPM package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/colors\n```\n\n----------------------------------------\n\nTITLE: Using Meta Component as Template in React JSX\nDESCRIPTION: This code snippet uses the imported Meta component as a template for Storybook documentation, setting the isTemplate prop to true.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ModalWrapper/migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/icon-helpers with Yarn\nDESCRIPTION: Command to install the @carbon/icon-helpers package using Yarn package manager as an alternative to npm.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icon-helpers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/icon-helpers\n```\n\n----------------------------------------\n\nTITLE: Default AI Label with Size\nDESCRIPTION: Example showing the default AI Label implementation with size specification.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/ai-label/ai-label.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<cds-ai-label size=\"xs\">\n  <div slot=\"body-text\">AI was used to generate this content</div>\n</cds-ai-label>\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Examples\nDESCRIPTION: Canvas component used to display practical usage examples of the Text component with other Carbon components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={TextStories.UsageExamples} />\n```\n\n----------------------------------------\n\nTITLE: Displaying DefinitionTooltip API Documentation\nDESCRIPTION: Renders the component API documentation using Storybook's ArgTypes component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tooltip/definition-tooltip.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of=\"cds-definition-tooltip\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Tag Component Props Table in Markdown\nDESCRIPTION: This snippet shows a markdown table comparing the 'type' prop usage for the Tag component between version 9 and version 10 of the Carbon Design System. It illustrates the change in accepted values for the prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tag/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop   | v9                                | v10                            |\n| ------ | --------------------------------- | ------------------------------ |\n| `type` | Accepts `beta`, `community`, etc. | Accepts `red`, `magenta`, etc. |\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/motion with npm\nDESCRIPTION: Command to install the @carbon/motion package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/motion/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/motion\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Form component, which is necessary when using Textarea within a form context.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/textarea/textarea.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/form/index.js';\n```\n\n----------------------------------------\n\nTITLE: Rendering Carbon Design System Pages Select Component in HTML\nDESCRIPTION: HTML structure for the pages select subcomponent of the pagination system. It displays a dropdown to select a specific page number, showing 10 pages total with the first page selected.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-pagination.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cds--select__page-number\">\n  <label\n    class=\"cds--label cds--visually-hidden\"\n    for=\"select\"\n  >\n    Page number, of 10 pages\n  </label>\n  <select class=\"cds--select-input\">\n    <option\n      selected=\"\"\n      value=\"0\"\n    >\n      1\n    </option>\n    <option value=\"1\">\n      2\n    </option>\n    <option value=\"2\">\n      3\n    </option>\n    <option value=\"3\">\n      4\n    </option>\n    <option value=\"4\">\n      5\n    </option>\n    <option value=\"5\">\n      6\n    </option>\n    <option value=\"6\">\n      7\n    </option>\n    <option value=\"7\">\n      8\n    </option>\n    <option value=\"8\">\n      9\n    </option>\n    <option value=\"9\">\n      10\n    </option>\n  </select>\n</div>\n<span class=\"cds--pagination__text\">\n  of 10 pages\n</span>\n```\n\n----------------------------------------\n\nTITLE: Organizing Icon Directory Structure in Carbon Design System\nDESCRIPTION: Demonstrates the file structure for organizing icons based on size and prefix in the Carbon Design System.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/icons.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsvg\n├── cloud\n│   └── menu.svg\n├── 16\n│   └── menu.svg\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Icon Component via JavaScript Module\nDESCRIPTION: Shows how to import the Skeleton Icon component as an ES module in JavaScript applications.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-icon/skeleton-icon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/skeleton-icon/index.js';\n```\n\n----------------------------------------\n\nTITLE: MenuItemRadioGroup Basic Implementation\nDESCRIPTION: Demonstrates the implementation of radio group menu items with simple string options.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/Menu.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu open>\n  <MenuItemRadioGroup\n    label=\"Font family\"\n    items={['Sans', 'Serif', 'Mono']}\n    selectedItem=\"Sans\"\n  />\n  <MenuItemDivider />\n  <MenuItemRadioGroup\n    label=\"Text decoration\"\n    items={['None', 'Overline', 'Line-through', 'Underline']}\n    selectedItem=\"None\"\n  />\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta for DefinitionTooltip Documentation\nDESCRIPTION: Configures the Storybook Meta component to use DefinitionTooltip stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/tooltip/definition-tooltip.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={DefinitionTooltipStories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Workflow Events for Issues Action in YAML\nDESCRIPTION: This YAML snippet defines the GitHub workflow events that trigger the issues action. It specifies that the action should run when issues are opened and when comments are created on issues.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/actions/issues/ARCHITECTURE.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Commands to install project dependencies and start the development server, with both yarn and npm alternatives\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/grid/examples/css-grid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Importing Additional Form Components via JavaScript\nDESCRIPTION: This JavaScript snippet imports additional form-related components and icons from the Carbon Design System to enable enhanced UI functionalities like forms and toggles within the popover.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/popover.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/popover/index.js';\nimport '@carbon/web-components/es/components/form/index.js';\nimport '@carbon/web-components/es/components/radio-button/index.js';\nimport '@carbon/web-components/es/components/checkbox/index.js';\n\nimport Settings16 from '@carbon/icons/lib/settings/16.js';\n```\n\n----------------------------------------\n\nTITLE: TooltipIcon to IconButton Migration - Before\nDESCRIPTION: Example of TooltipIcon component usage in v10 before migration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TooltipIcon } from 'carbon-components-react';\n\nfunction ExampleComponent() {\n  return (\n    <TooltipIcon\n      tooltipText=\"Example tooltip\"\n      onClick={() => {\n        // ...\n      }}\n      renderIcon={Filter}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the CSS prefix in Sass using @carbon/react\nDESCRIPTION: This snippet shows how to customize the default CSS class prefix in Sass by configuring the $prefix variable when importing @carbon/react.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ClassPrefix/ClassPrefix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with (\n  $prefix: 'custom'\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Component API Reference\nDESCRIPTION: ArgTypes component that renders the component's props documentation automatically.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes />\n```\n\n----------------------------------------\n\nTITLE: Example Postmortem Filename in Markdown\nDESCRIPTION: Provides a specific example of a correctly formatted postmortem filename, including the date and a descriptive title.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/postmortems/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n10-11-05-critical-layout-breaking-change.md\n```\n\n----------------------------------------\n\nTITLE: Rendering Side Navigation Link with Minimum Attributes in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a side navigation link with minimum required attributes. It includes slots for a title icon and content.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/ui-shell.md#2025-04-22_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  class=\"cds--side-nav__link\"\n  href=\"\"\n  part=\"link\"\n>\n  <div\n    class=\"cds--side-nav__icon\"\n    hidden=\"\"\n    id=\"title-icon-container\"\n    part=\"title-icon-container\"\n  >\n    <slot name=\"title-icon\">\n    </slot>\n  </div>\n  <span\n    class=\"cds--side-nav__link-text\"\n    part=\"title\"\n  >\n    <slot>\n    </slot>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Changing Function Prop Arguments Structure\nDESCRIPTION: Demonstrates a breaking change in function prop argument structure, requiring a major version bump.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport { SomeComponent } from 'carbon-components-react';\n\nfunction ExampleComponent() {\n  function onChange(arg) {\n    // If a or b change types (from number to string) or if they are removed\n    // (a or b no longer exists)\n    const { a, b } = arg;\n  }\n\n  return <SomeComponent onChange={onChange} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for Toggle Documentation\nDESCRIPTION: This snippet imports necessary components from Storybook and the Toggle stories for documentation purposes. It also imports a CDN utility function.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/toggle/toggle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as ToggleStories from './toggle.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and SkeletonText Components in JSX\nDESCRIPTION: Imports Storybook documentation components, SkeletonText stories, and a code previewer utility for the documentation page.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonText/SkeletonText.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as SkeletonTextStories from './SkeletonText.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for Menu Component in React\nDESCRIPTION: This code snippet sets up a StorybookDemo component to showcase the Menu component from the Carbon Design System. It configures the demo with theme selection, a tall layout, and specifies the Storybook URL and variant to display.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-menu--default',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: CommonJS Icon Import\nDESCRIPTION: Alternative import syntax for CommonJS environments\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { Add } = require('@carbon/icons-react');\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for SkeletonIcon Documentation\nDESCRIPTION: Imports necessary components from Storybook blocks, imports SkeletonIcon stories, and includes a code previewer configuration for Stackblitz.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/SkeletonIcon/SkeletonIcon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as SkeletonIconStories from './SkeletonIcon.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and StructuredList Stories in JavaScript\nDESCRIPTION: This code snippet imports necessary components from Storybook and the StructuredList stories. It also imports a utility function for code previewing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/StructuredList/StructuredList.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as StructuredListStories from './StructuredList.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Comparing DatePicker Props Between Carbon v9 and v10\nDESCRIPTION: A markdown table that compares the appendTo prop implementation between Carbon v9 and v10 DatePicker components. The table shows that in v9, appendTo accepted both CSS selectors and DOM nodes, while in v10 it only accepts DOM nodes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/DatePicker/migrate-to-7.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop       | v9                                   | v10                     |\n| ---------- | ------------------------------------ | ----------------------- |\n| `appendTo` | Accepts a CSS selector or a DOM node | Accepts a DOM node only |\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Carbon Overflow Menu\nDESCRIPTION: Implementation of a StorybookDemo component that renders a live demo of Carbon's overflow menu component. The demo is configured to display the default variant and points to the Carbon Web Components documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/overflow-menu/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-overflow-menu--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Carbon Prefix\nDESCRIPTION: Example demonstrating how to override the default Carbon prefix with a custom value.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/sass.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles' with (\n  $prefix: 'my-prefix'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Storybook Meta Component in JSX\nDESCRIPTION: Sets up the Meta component with the isTemplate property to define this as a template documentation page in Storybook.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Dialog/Dialog.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta isTemplate />\n```\n\n----------------------------------------\n\nTITLE: Enabling 16-Column Grid Feature Flag\nDESCRIPTION: SCSS configuration to enable the 16-column grid feature in Carbon v10 using feature flags.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-grid.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n$feature-flags: (\n  grid-columns-16: true,\n);\n\n// Use one of the following two options to then import the grid code:\n// 1) @import 'carbon-components/scss/globals/scss/styles.scss';\n// 2) @import 'carbon-components/scss/globals/grid/grid';\n```\n\n----------------------------------------\n\nTITLE: Implementing Overflow Menu Structure\nDESCRIPTION: Demonstrates the HTML structure for creating an Overflow Menu with multiple menu items and tooltip content\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/overflow-menu/overflow-menu.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<cds-overflow-menu>\n  ${OverflowMenuVertical16({ class: `${prefix}--overflow-menu__icon`, slot: 'icon', })}\n  <span slot=\"tooltip-content\"> Options </span>\n  <cds-overflow-menu-body>\n    <cds-overflow-menu-item>Option 1</cds-overflow-menu-item>\n    <cds-overflow-menu-item>Option 2</cds-overflow-menu-item>\n    <cds-overflow-menu-item>Option 3</cds-overflow-menu-item>\n    <cds-overflow-menu-item>Option 4</cds-overflow-menu-item>\n    <cds-overflow-menu-item>Option 5</cds-overflow-menu-item>\n  </cds-overflow-menu-body>\n</cds-overflow-menu>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components\nDESCRIPTION: Imports required components from Storybook blocks and internal utilities for documentation purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/loading/loading.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs } from '../../globals/internal/storybook-cdn';\nimport * as LoadingStories from './loading.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing a pictogram component using ES modules\nDESCRIPTION: Example of importing a specific pictogram component (Airplane) using ES module syntax.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/pictograms-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Airplane } from '@carbon/pictograms-react';\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in JavaScript\nDESCRIPTION: This snippet shows how to import the Slider component from the Carbon Web Components library using JavaScript modules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/slider/slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@carbon/web-components/es/components/slider/index.js';\n```\n\n----------------------------------------\n\nTITLE: Grid Column Example - v9 Syntax\nDESCRIPTION: Example of column class usage in Carbon v9 using xs breakpoint.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-grid.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bx--col-xs-2\"><!-- Content --></div>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML for Expand/Collapse Button in Multi-Line Code Snippet Mode\nDESCRIPTION: Shows the HTML structure of the expand/collapse button used in multi-line code snippets. It includes a button with expand class and a slot for customizable expand button text.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/cds-code-snippet.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"cds--snippet-btn--expand\"\n  type=\"button\"\n>\n  <span\n    class=\"cds--snippet-btn--text\"\n    id=\"button-text\"\n  >\n    <slot name=\"expand-button-text\">\n      expand-button-text-foo\n    </slot>\n  </span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing TimePicker Documentation Components\nDESCRIPTION: Imports required components from Storybook and TimePicker stories for documentation purposes, along with code previewer configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/TimePicker/TimePicker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Meta, Canvas } from '@storybook/blocks';\nimport * as TimePickerStories from './TimePicker.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Date Picker Range Interval Detection\nDESCRIPTION: Resolves a console error that occurred when detecting changes in date range intervals, addressing issue #11490 for more reliable date picking functionality.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n* **date picker:** detect change range interval console error ([#11532](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11532)) ([eee2c73](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/commit/eee2c73e434f4afed7eccde69017734d0deae0c9)), closes [#11490](https://github.com/carbon-design-system/carbon-for-ibm-dotcom/issues/11490)\n```\n\n----------------------------------------\n\nTITLE: Sass Colors Map Structure\nDESCRIPTION: Example of the Sass map structure used for programmatic color access.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/README.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$colors: (\n  'blue': (\n    10: #edf4ff,\n    // ...\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Carbon Flex Grid Implementation\nDESCRIPTION: Loading Carbon's flex grid system with corresponding grid classes using CDN links for specific versions or next tag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/docs/carbon-cdn-style-helpers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n// SPECIFIC VERSION\n<link\n  rel=\"stylesheet\"\n  href=\"https://1.www.s81c.com/common/carbon/web-components/version/[v2.x.y]/grid.css\" />\n\n// NEXT tag\n<link\n  rel=\"stylesheet\"\n  href=\"https://1.www.s81c.com/common/carbon/web-components/tag/next/grid.css\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-file-uploader with Various Attributes\nDESCRIPTION: This snippet shows the basic structure of the cds-file-uploader component with slots for label title, description, drop container, and file container.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/file-uploader.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"cds--file--label\">\n  <slot name=\"label-title\">\n  </slot>\n</p>\n<p class=\"cds--label-description\">\n  <slot name=\"label-description\">\n  </slot>\n</p>\n<slot name=\"drop-container\">\n</slot>\n<div class=\"cds--file-container\">\n  <slot>\n  </slot>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Component Migration Changes in Markdown\nDESCRIPTION: Detailed markdown documentation of specific changes for each component, including new properties, removed properties, and API changes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/cwc-v2-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### accordion\n\n- New `accordion-skeleton` & `accordion-item-skeleton` components\n- `title-text` property replaced with `title`\n\n### button\n\n- New `cds-button-set` component\n- `size` now accepts `xs`, `sm`, `md`, `lg`, and `xl`, instead of `''`, `sm`, `lg`, `field`\n- `tooltip-text` can add a tooltip component that appears on hover\n- `tooltip-alignment` and `tooltip-position` can be used to modify the tooltip\n```\n\n----------------------------------------\n\nTITLE: Rendering cds-file-uploader-item with Various Attributes\nDESCRIPTION: This snippet shows the cds-file-uploader-item component with additional attributes, including visible form requirements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/tests/snapshots/file-uploader.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"cds--file-filename\">\n  <slot>\n  </slot>\n</p>\n<span class=\"cds--file__state-container\">\n  <cds-loading\n    assistive-text=\"Delete this file\"\n    type=\"small\"\n  >\n  </cds-loading>\n</span>\n<div class=\"cds--form-requirement\">\n  <div class=\"cds--form-requirement__title\">\n  </div>\n  <p\n    class=\"cds--form-requirement__supplement\"\n    hidden=\"\"\n  >\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Carbon Design System CDN Marketing Component\nDESCRIPTION: Markdown snippet showing how to utilize the Carbon Design System CDN to include components such as the copy button. This is generated dynamically through a function call to ensure the correct CDN links are included.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/copy-button/copy-button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown>{`${cdnJs({ components: ['copy-button'] })}`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Demo for Carbon Radio Button\nDESCRIPTION: Sets up a Storybook demo component to showcase the default radio button variant from Carbon Design System. Configures theme selector and points to the React Carbon component library URL.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/RadioButton/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-radiobutton--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Dependencies for Link Components\nDESCRIPTION: This snippet imports necessary dependencies to integrate Link components within a Storybook environment. The imports include ArgTypes, Canvas, Markdown, and Meta from '@storybook/blocks', along with CDN assets and link stories.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/link/link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport { cdnJs, cdnCss } from '../../globals/internal/storybook-cdn';\nimport * as LinkStories from './link.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing Spacing Module from Carbon React Styles - Sass\nDESCRIPTION: Illustrates how to use Carbon's spacing utilities for React by importing the spacing module from the @carbon/react package. The @use rule is mandatory in v11 and requires Dart Sass. It provides spacing variables and mixins, utilized in Carbon React-based projects.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#2025-04-22_snippet_27\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react/scss/spacing';\n```\n\n----------------------------------------\n\nTITLE: Rendering HideAtBreakpoint Component in Storybook Canvas\nDESCRIPTION: This JSX code renders the HideAtBreakpoint component in a Storybook Canvas. It includes an additional action to open the component in Stackblitz for interactive editing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/HideAtBreakpoint/HideAtBreakpoint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={HideAtBreakpoint.HideAtBreakpoint}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(HideAtBreakpoint.HideAtBreakpoint),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Color Variables Migration Table - v9 to v10\nDESCRIPTION: Markdown table documenting the changes in color variable naming conventions between v9 and v10, showing deprecated variables and their new IBM-prefixed replacements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-color.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| v9                   | v10                   |\n| -------------------- | --------------------- |\n| `color__blue-*`      | `ibm-color__blue-*`   |\n| `color__navy-gray-*` | ☠️ Deprecated         |\n| `color__white`       | `ibm-color__white`    |\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Comparing Motion Tokens in Markdown Table\nDESCRIPTION: This Markdown table compares motion tokens between Carbon v9 and v10. It shows which tokens have been removed, which have no breaking changes, and which new tokens have been introduced in v10.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-motion.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| v9                         | v10                 |\n| -------------------------- | ------------------- |\n| `$bx--ease-in`             | Removed             |\n| `$bx--ease-out`            | Removed             |\n| `$bx--ease-out`            | Removed             |\n| `$bx--standard-easing`     | Removed             |\n| `$carbon--ease-in`         | No breaking changes |\n| `$carbon--ease-out`        | No breaking changes |\n| `$carbon--standard-easing` | No breaking changes |\n| `$transition--base`        | No breaking changes |\n| `$transition--expansion`   | No breaking changes |\n| `$transition--fast-01`     | New                 |\n| `$transition--fast-02`     | New                 |\n| `$transition--moderate-01` | New                 |\n| `$transition--moderate-02` | New                 |\n| `$transition--slow-01`     | New                 |\n| `$transition--slow-02`     | New                 |\n```\n\n----------------------------------------\n\nTITLE: Grid Column Example - v10 Syntax\nDESCRIPTION: Updated example of column class usage for Carbon v10 using sm breakpoint (replaces xs).\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/migration/10.x-grid.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bx--col-sm-2\"><!-- Content --></div>\n```\n\n----------------------------------------\n\nTITLE: Feature Request Flow Chart - Mermaid Diagram\nDESCRIPTION: A comprehensive flowchart visualizing the decision process for feature requests in the Carbon Design System, from initial receipt through evaluation, acceptance, and implementation phases. The diagram shows various decision points including PAL support, resource allocation, and implementation requirements.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/support.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Received] --> B[Does it align with the maintainer team's <br />guiding principles for building a design system at IBM?]\n    B -->|No| C[Closed]\n    B -->|Yes| D[Is it supporting a PAL in the DSAG?]\n    D -->|No| E[Is it suporting a PAL not in the DSAG?]\n    E -->|No| F[Is it supporting an IBM product without a PAL?]\n    F -->|No| G[Is it supporting a non-IBM offering that uses Carbon?]\n    G -->|No| C[Closed]\n    D & E & F & G -->|Yes| H([Great! Your request has now been labeled as an `open` proposal. <br />Now we will determine who will be working on this and when.])\n    H --> I[Is this a concept/idea?]\n    H --> J[Is this a fully fleshed out design spec <br /> or code implementation?]\n    I -->|Yes| K[Are you able to dedicate design or <br /> engineering resources to bring this to production?]\n    I <--> |No|J\n    K -->|No| L[Does your request have a low level of effort or a high business impact?]\n    L -->|No| C[Closed]\n    J & K & L -->|Yes| M([Your request has been labeled as an `accepted` <br />proposal and has been added to our Icebox and is <br />being prioritized against competing workstreams])\n    M --> N([Labeled with `Community Contribution` <br /> on GH. Looking for contributions])\n    M --> O([Added to maintainer team's roadmap <br /> and backlog for refinement])\n    N & O --> storm((Design Crits, Code Reviews,<br /> CAG, DSAG meetings, <br /> Office hours when needed))\n    storm --> ide1\n    subgraph ide1 [Evaluate against a definition of done]\n    P[Storybook]\n    Q[Tests]\n    R[Code]\n    S[Final design spec]\n    T[Website docs]\n    U[Kit tooling]\n    end\n    ide1 -->|Yes| C[Closed]\n```\n\n----------------------------------------\n\nTITLE: Configuring Carbon Styles Font Path\nDESCRIPTION: Example showing how to configure Carbon styles with custom font path settings using the with syntax.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/sass.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles' with (\n  $font-path: '@ibm/plex'\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component Documentation Dependencies\nDESCRIPTION: Imports required dependencies for the Link component documentation page, including Storybook blocks and story files.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/Link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as LinkStories from './Link.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: React Component Server-Side Testing\nDESCRIPTION: Shows setup for testing React components in a server-side environment using Node.js and ReactDOMServer.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @jest-environment node\n */\nimport ReactDOMServer from 'react-dom/server';\nimport { ComponentName } from '../ComponentName';\n\ndescribe('ComponentName - SSR', () => {\n  it('should import ComponentName in a node/server environment', () => {\n    expect(ComponentName).not.toThrow();\n  });\n\n  it('should not use document/window/etc', () => {\n    expect(ReactDOMServer.renderToStaticMarkup(ComponentName)).not.toThrow();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Version Workflow Commands - Initial Setup\nDESCRIPTION: Commands to set up a clean working environment for version release by checking out main branch, pulling latest changes, and creating a release branch\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b `release/vX.Y.Z`\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: ListBox Component Structure in Markdown\nDESCRIPTION: Hierarchical structure of the ListBox component showing the main container and its child components including ListBoxField, ListBoxMenuIcon, ListBoxSelection, ListBoxMenu, and ListBoxMenuItem. Also mentions the existence of ListBox-specific prop types.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ListBox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `ListBox` component\n\n`ListBox` is responsible for powering a variety of dropdown-flavored components\nin Carbon. This list includes components like: Dropdown, Combobox, MultiSelect,\nand more!\n\nCurrently, a `ListBox` is broken up into the following pieces:\n\n- `ListBox`: container component that wraps all `ListBox*`-related components\n  - `ListBoxField`: component used for handling input and displaying selections\n    in components like Combobox and MultiSelect\n    - `ListBoxMenuIcon`: indicates the status of the menu, e.g. whether it is\n      open or closed.\n    - `ListBoxSelection`: indicates the status of the selection for the control,\n      works for both single selection and multi-selection components\n  - `ListBoxMenu`: container component for the menu of options available in a\n    `ListBox`\n    - `ListBoxMenuItem`: container component for an option in a `ListBoxMenu`\n\nIn addition, we have `ListBox`-specific `prop` types in `ListBoxPropTypes`.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Selector Issues in SCSS\nDESCRIPTION: Example showing problematic nested selector pattern that makes code harder to maintain and locate specific selectors.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_15\n\nLANGUAGE: scss\nCODE:\n```\n// Early on in the file\n.component {\n  // ...\n}\n\n// ...\n\n// Later on in the file\n.component {\n  &:focus {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Family Font Path Structure\nDESCRIPTION: Example showing the font path structure when using per-family configuration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/ibm-plex.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n<$font-path>/fonts/complete/woff2/IBMPlexSans-Bold.woff2\n```\n\n----------------------------------------\n\nTITLE: Adding Function Prop Arguments\nDESCRIPTION: Shows how to add additional arguments to a function prop type, resulting in a minor version bump.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/versioning.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nimport { SomeComponent } from 'carbon-components-react';\n\nfunction ExampleComponent() {\n-  function onChange(a, b) {\n+  function onChange(a, b, c) {\n    // ...\n  }\n\n  return <SomeComponent onChange={onChange} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flexbox Grid in Carbon Styles\nDESCRIPTION: Example showing how to configure the Carbon styles package to use the flexbox grid implementation instead of the default CSS Grid version.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/styles' with (\n  $use-flexbox-grid: true\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Carbon Elements with NPM\nDESCRIPTION: Command to install @carbon/elements package using NPM package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/elements/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/elements\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet renders a table of contributors to the Carbon Design System project. Each table cell contains a contributor's avatar, name, and icons representing their contributions such as code, documentation, accessibility, and infrastructure.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/jkap\"><img src=\"https://avatars.githubusercontent.com/u/224587?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>jae kaplan</b></sub></a><br /><a href=\"#infra-jkap\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/sierrawetmore\"><img src=\"https://avatars.githubusercontent.com/u/107062203?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sierra Wetmore</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=sierrawetmore\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kcprevatt\"><img src=\"https://avatars.githubusercontent.com/u/68609306?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>kcprevatt</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=kcprevatt\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lewandom\"><img src=\"https://avatars.githubusercontent.com/u/8779205?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marcin Lewandowski</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=lewandom\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/remolueoend\"><img src=\"https://avatars.githubusercontent.com/u/7881606?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>remolueoend</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=remolueoend\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsehull\"><img src=\"https://avatars.githubusercontent.com/u/9935383?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Hull</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=jsehull\" title=\"Code\">💻</a> <a href=\"#a11y-jsehull\" title=\"Accessibility\">️️️️♿️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/awarrier99\"><img src=\"https://avatars.githubusercontent.com/u/17476235?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ashvin Warrier</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=awarrier99\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://galvingao.com/\"><img src=\"https://avatars.githubusercontent.com/u/12567059?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>GalvinGao</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=GalvinGao\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bianca-sparxs\"><img src=\"https://avatars.githubusercontent.com/u/33003148?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Bianca Sparxs</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=bianca-sparxs\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://www.github.com/aze3ma\"><img src=\"https://avatars.githubusercontent.com/u/6822318?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mahmoud Abdulazim</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=aze3ma\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/davesteinberg\"><img src=\"https://avatars.githubusercontent.com/u/3935584?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dave Steinberg</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=davesteinberg\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://seongryoo.github.io\"><img src=\"https://avatars.githubusercontent.com/u/106095943?s=96&v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seong-Hyun Ryoo</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=shryoo-ibm\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/pratikkarad\"><img src=\"https://avatars.githubusercontent.com/u/32093370?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Pratik Karad</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=pratikkarad\" title=\"Code\">💻</a> <a href=\"#a11y-pratikkarad\" title=\"Accessibility\">️️️️♿️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gerzonc\"><img src=\"https://avatars.githubusercontent.com/u/36211892?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gerzon</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=gerzonc\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guidari\"><img src=\"https://avatars.githubusercontent.com/u/52183462?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Guilherme Datilio Ribeiro</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=guidari\" title=\"Code\">💻</a> <a href=\"https://github.com/carbon-design-system/carbon/commits?author=guidari\" title=\"Documentation\">📖</a> <a href=\"#a11y-guidari\" title=\"Accessibility\">️️️️♿️</a> <a href=\"https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Aguidari\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kubijo\"><img src=\"https://avatars.githubusercontent.com/u/11244314?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josef Kubíček</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=kubijo\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/SunnyJohal\"><img src=\"https://avatars.githubusercontent.com/u/19283532?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sunny Johal</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=SunnyJohal\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://www.steveblackonline.com/\"><img src=\"https://avatars.githubusercontent.com/u/7853451?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Steven Black</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=sjbeatle\" title=\"Code\">💻</a> <a href=\"#a11y-sjbeatle\" title=\"Accessibility\">️️️️♿️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mrkjdy\"><img src=\"https://avatars.githubusercontent.com/u/32761859?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Judy</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=mrkjdy\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/anton-tsymuk-viacomcbs\"><img src=\"https://avatars.githubusercontent.com/u/112623876?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Anton Tsymuk</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=anton-tsymuk-viacomcbs\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/modaslam\"><img src=\"https://avatars.githubusercontent.com/u/33179527?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mohammed Aslam P. A.</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=modaslam\" title=\"Code\">💻</a> <a href=\"https://github.com/carbon-design-system/carbon/commits?author=modaslam\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/tongyy\"><img src=\"https://avatars.githubusercontent.com/u/24784725?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tony ZL</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=tongyy\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/tulivlk\"><img src=\"https://avatars.githubusercontent.com/u/67226666?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Petr Kadlec</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=tulivlk\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/djragsdale\"><img src=\"https://avatars.githubusercontent.com/u/4396766?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>David Ragsdale</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=djragsdale\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/haocheng6\"><img src=\"https://avatars.githubusercontent.com/u/7645930?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hao Cheng</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=haocheng6\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/cordesmj\"><img src=\"https://avatars.githubusercontent.com/u/7409239?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>cordesmj</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=cordesmj\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://med-aziz-chebbi.web.app/\"><img src=\"https://avatars.githubusercontent.com/u/60013060?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aziz Chebbi</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=azizChebbi\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/misiekhardcore\"><img src=\"https://avatars.githubusercontent.com/u/58469680?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Michał Konopski</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=misiekhardcore\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://omkarajagunde.web.app/\"><img src=\"https://avatars.githubusercontent.com/u/50138744?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Omkar Ajagunde</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=omkarajagunde\" title=\"Code\">💻</a> <a href=\"https://github.com/carbon-design-system/carbon/commits?author=omkarajagunde\" title=\"Documentation\">📖</a></td>\n  </tr>\n  <tr>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Next.js Project\nDESCRIPTION: Commands to install dependencies and start the development server for the Next.js project.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/id-prefix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Button Story Dependencies in MDX\nDESCRIPTION: Import statements for required Storybook components and Radio Button stories for documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/RadioButton/RadioButton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as RadioButtonStories from './RadioButton.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components in JSX\nDESCRIPTION: Import statements for Storybook components and Text stories used throughout the documentation.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Text/Text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, ArgTypes, Story, Meta } from '@storybook/blocks';\nimport * as TextStories from './Text.stories';\n```\n\n----------------------------------------\n\nTITLE: Building Carbon Design System Project\nDESCRIPTION: Commands to install dependencies and build the Carbon Design System project from the root directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/examples/custom-data-table-state-manager-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Providing Feedback for Grid Component in Markdown\nDESCRIPTION: This snippet encourages users to provide feedback on the Grid component through various channels, including Slack and GitHub. It includes a link for direct editing of the documentation file on GitHub.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions on Slack,\nor updating this file on\n[GitHub](https://github.com/carbon-design-system/carbon/edit/main/packages/react/src/components/Grid/Grid.mdx).\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Error Boundary Stories\nDESCRIPTION: Import statements for Storybook documentation components and Error Boundary stories along with StackBlitz configuration helper.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as ErrorBoundaryStories from './ErrorBoundary.stories';\nimport { stackblitzPrefillConfig } from '../../../previewer/codePreviewer';\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/icons-vue with Yarn\nDESCRIPTION: Command to install the @carbon/icons-vue package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/icons-vue\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/utilities-react with npm\nDESCRIPTION: Command to install the @carbon/utilities-react package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/utilities-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @carbon/utilities-react\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components\nDESCRIPTION: Imports required components from Storybook blocks and related story files for documentation purposes.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/FluidForm/FluidForm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes, Canvas, Story, Meta } from '@storybook/blocks';\nimport * as FluidFormStories from './FluidForm.stories';\n```\n\n----------------------------------------\n\nTITLE: Base ESLint Configuration with Carbon\nDESCRIPTION: ESLint configuration example using the base/vanilla Carbon configuration without React.js specific rules.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/eslint-config-carbon/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"eslint-config-carbon/base\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-keyed-flatten-children Package\nDESCRIPTION: Command to install the react-keyed-flatten-children package via npm for flattening nested React components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/docs/UsingFragmentsWithSwitcher.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-keyed-flatten-children\n```\n\n----------------------------------------\n\nTITLE: Enabling FlexGrid Styles with SCSS\nDESCRIPTION: SCSS configuration to enable FlexGrid styles which are not emitted by default.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Grid/FlexGrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use '@carbon/react' with (\n  $use-flexbox-grid: true\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Two-Tone Icons with SCSS\nDESCRIPTION: SCSS styling example for two-tone icons using data attributes\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-react/README.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\nsvg.my-custom-class {\n  fill: yellow;\n}\n\nsvg.my-custom-class [data-icon-path='inner-path'] {\n  fill: black;\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Code Connect Configuration\nDESCRIPTION: Command to publish Figma Code Connect configuration using a personal access token for local testing.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/code-connect/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx figma connect publish --token <token>\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/feature-flags with Yarn\nDESCRIPTION: Command to install the @carbon/feature-flags package using Yarn package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/feature-flags/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @carbon/feature-flags\n```\n\n----------------------------------------\n\nTITLE: Installing @carbon/styles with npm\nDESCRIPTION: Command to install the @carbon/styles package using npm package manager.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/styles/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @carbon/styles\n```\n\n----------------------------------------\n\nTITLE: Linting Vue Project Files\nDESCRIPTION: Command to run the linter and automatically fix formatting issues\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/examples/vue-cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn run lint\n```\n\n----------------------------------------\n\nTITLE: Running Vue Project Tests\nDESCRIPTION: Command to execute the project's test suite\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/icons-vue/examples/vue-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo for MultiSelect Variants in React\nDESCRIPTION: JSX configuration for a StorybookDemo component that displays different variants of the MultiSelect component. Includes theme selector and various MultiSelect implementations like default, filterable, pre-selected items, and experimental fluid versions.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/MultiSelect/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-multiselect--default'\n    },\n    {\n      label: 'Filterable',\n      variant: 'components-multiselect--filterable'\n    },\n    {\n      label: 'With initial selected items',\n      variant: 'components-multiselect--with-initial-selected-items'\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-unstable-fluidmultiselect--default'\n    },\n    {\n      label: 'Fluid Condensed (unstable)',\n      variant: 'experimental-unstable-fluidmultiselect--condensed'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Tagging a release in Git\nDESCRIPTION: Command to create an annotated tag for a new release version.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v11.2.0 -m 'v11.2.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install dependencies and start the development server for the Themes preview tool, with options for both yarn and npm package managers.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/themes/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Local Package Build Command using Lerna\nDESCRIPTION: Command to build only affected packages and their dependencies using Lerna in the Carbon Design System project\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/guides/reviewing-pull-requests.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn lerna run build --scope='@carbon/{packageName}' --include-dependencies\n```\n\n----------------------------------------\n\nTITLE: Importing Carbon AI Label Component - JavaScript\nDESCRIPTION: Imports the AI Label web component for usage within a JavaScript application. Requires the '@carbon/web-components' library. With this import, developers can use the <cds-ai-label> custom element in HTML; no additional parameters are needed.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/popover/autoalign.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@carbon/web-components/es/components/ai-label/index.js';\n```\n\n----------------------------------------\n\nTITLE: Checking out main branch in Git\nDESCRIPTION: Command to switch to the main branch in Git repository.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Components\nDESCRIPTION: Initial setup commands to install dependencies and build the Carbon repository from root\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/grid/examples/preview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Carbon Project\nDESCRIPTION: This snippet shows how to install project dependencies and build the Carbon project from the root directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/examples/sass-modules/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Carbon Types Development Server\nDESCRIPTION: Commands to install dependencies and start the development server for Carbon types after navigating to the appropriate directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/type/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Rendering Buttons with Custom-sized Icons in JSX\nDESCRIPTION: This snippet shows how to render buttons with icons of a different size by passing a function to the renderIcon prop.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Button/Button.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button renderIcon={(props) => <Add size={24} {...props} />} iconDescription=\"Add\">Add</Button>\n<Button renderIcon={(props) => <TrashCan size={24} {...props} />} kind=\"danger\"  iconDescription=\"TrashCan\">Delete</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing and running the Next.js application\nDESCRIPTION: Commands to install dependencies and start the development server for the Next.js application. This allows you to view the Carbon V10 token compatibility demo.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/v10-token-compat-in-v11/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Carbon Repository\nDESCRIPTION: Commands to install dependencies and build the Carbon repository from root directory.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/examples/drag-and-drop-file-uploader-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install && yarn build\n```\n\n----------------------------------------\n\nTITLE: Implementing Experimental Tile Contrast Feature Flag\nDESCRIPTION: Code snippet showing how to enable the experimental tile contrast feature flag using the FeatureFlags component. This enhancement improves accessibility by ensuring tiles meet contrast minimums for users with visual impairments.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tile/Tile.featureflag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<FeatureFlags\n  flags={{\n    'enable-experimental-tile-contrast': true,\n  }}>\n  ...\n</FeatureFlags>\n```\n\n----------------------------------------\n\nTITLE: MenuItemDivider Usage Example\nDESCRIPTION: Demonstrates how to use MenuItemDivider to visually separate menu items.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Menu/Menu.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu open>\n  <MenuItem label=\"Cut\" />\n  <MenuItem label=\"Copy\" />\n  <MenuItem label=\"Paste\" />\n  <MenuItemDivider />\n  <MenuItem label=\"Delete\" kind=\"danger\" />\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Component Migration Status Table in Markdown\nDESCRIPTION: A detailed markdown table showing the migration status of all Carbon components from v9 to v10, including links to component-specific migration guides and notes about removed components.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/carbon-components/docs/migration/migrate-to-10.x.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Component          | v10                                                                   |\n| ------------------ | --------------------------------------------------------------------- |\n| Accordion          | [Migrate](../../src/components/accordion/migrate-to-10.x.md)          |\n| Breadcrumb         | [Migrate](../../src/components/breadcrumb/migrate-to-10.x.md)         |\n| Button             | [Migrate](../../src/components/button/migrate-to-10.x.md)             |\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Link Story Canvas\nDESCRIPTION: Renders the inline variant of the Link component story with Stackblitz integration.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Link/Link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas\n  of={LinkStories.Inline}\n  additionalActions={[\n    {\n      title: 'Open in Stackblitz',\n      onClick: () => stackblitzPrefillConfig(LinkStories.Inline),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Explicit Arrow Function in JavaScript\nDESCRIPTION: Demonstrates the preferred explicit return style for arrow functions instead of implicit returns. This improves readability and makes debugging easier.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/style.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst add = (a, b) => {\n  return a + b;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands to install local dependencies and start the development server using either yarn or npm\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/colors/examples/preview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n# or\nnpm install\n\n\nyarn develop\n# or\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Pulling latest changes from upstream\nDESCRIPTION: Command to fetch and merge the latest changes from the upstream main branch.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/release.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Embedding Storybook Demo for useContextMenu Hook in React\nDESCRIPTION: This code embeds a Storybook demo of the useContextMenu hook from Carbon Design System. It configures the demo with theme selection capability, taller height, and specific variant configuration pointing to the hooks-usecontextmenu demo.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContextMenu/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  tall\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'hooks-usecontextmenu--use-context-menu'\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ShapeIndicator Component in React\nDESCRIPTION: This code snippet demonstrates how to import the ShapeIndicator component from the Carbon Design System and use it in a React component. The example shows the component being used with 'failed' kind and a custom label.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ShapeIndicator/ShapeIndicator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable__ShapeIndicator as ShapeIndicator } from '@carbon/react';\n\nfunction ExampleComponent() {\n  return (\n    <ShapeIndicator kind=\"failed\" label=\"Failed\">\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing prettier-config-carbon with npm\nDESCRIPTION: Command to install the prettier-config-carbon package using npm package manager\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/config/prettier-config-carbon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S prettier-config-carbon\n```\n\n----------------------------------------\n\nTITLE: Reset Function for Dismissable Tabs\nDESCRIPTION: A simple function to reset dismissable tabs to their original state after tabs have been removed.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Tabs/Tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst resetTabs = () => {\n  setRenderedTabs(tabs);\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to start the development server using either yarn or npm. The server will run on port 5173.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/examples/nextjs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering StorybookDemo Component in React/JSX\nDESCRIPTION: This code snippet demonstrates how to use the StorybookDemo component to display a live demo of a Carbon Design System component. It specifies the URL for the demo and defines a variant option for the default view.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/web-components/src/components/skeleton-placeholder/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<StorybookDemo\n  tall\n  url=\"https://www.ibm.com/standards/carbon/carbon-web-components\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-skeleton-placeholder--default'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: useContextMenu API Signature\nDESCRIPTION: The API signature for the useContextMenu hook. It accepts a trigger parameter which can be a DOM element or React ref and returns props to be passed to the Menu component.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/ContextMenu/useContextMenu.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// returns an object with 'x', 'y', 'open' and 'onClose' set accordingly intended\n// to be passed as pros to the <Menu> component.\nconst menuProps = useContextMenu(\n  // the DOM element or react ref the \"contextmenu\" event should be attached to.\n  // defaults to document.\n  trigger\n);\n```\n\n----------------------------------------\n\nTITLE: HTML Contributors Table Structure\nDESCRIPTION: HTML table layout displaying contributor information including profile links, avatars, names, and contribution types represented by emojis. The table uses colspan and alignment attributes for proper formatting.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/tay1orjones\"><img src=\"https://avatars0.githubusercontent.com/u/3360588?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Taylor Jones</b></sub></a><br /><a href=\"https://github.com/carbon-design-system/carbon/commits?author=tay1orjones\" title=\"Code\">💻</a> <a href=\"https://github.com/carbon-design-system/carbon/commits?author=tay1orjones\" title=\"Documentation\">📖</a> <a href=\"#a11y-tay1orjones\" title=\"Accessibility\">️️️️♿️</a></td>\n    <!-- Additional contributor entries -->\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring StorybookDemo Component for Pagination Variants\nDESCRIPTION: Sets up a StorybookDemo component with theme selector and pagination variants. The demo points to the Carbon Design System's React component library and defines two specific pagination variants.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/packages/react/src/components/Pagination/experimental/docs/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<StorybookDemo\n  themeSelector\n  wide\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'With a Page Selector',\n      variant: 'experimental-unstable-pagination--with-a-page-selector'\n    },\n    {\n      label: 'With no Sizer, Child Input, or Child Selector',\n      variant: 'experimental-unstable-pagination--with-no-sizer-child-input-or-child-selector'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Package Version Reference in Markdown Table\nDESCRIPTION: Markdown table showing action items for resolving the build failure, including updating package.json to set private flag.\nSOURCE: https://github.com/carbon-design-system/carbon/blob/main/docs/postmortems/2019-08-15-icons-angular.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Action item                                                    | Owner      | Bug                                                      |\n| -------------------------------------------------------------- | ---------- | -------------------------------------------------------- |\n| Update `package.json` in `@carbon/icons-angular` to be private | @joshblack | https://github.com/carbon-design-system/carbon/pull/3744 |\n```"
  }
]