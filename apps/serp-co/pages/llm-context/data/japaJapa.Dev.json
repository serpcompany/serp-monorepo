[
  {
    "owner": "japa",
    "repo": "japa.dev",
    "content": "TITLE: Installing Japa with Package Managers\nDESCRIPTION: Commands to install Japa using different package managers. The create-japa initializer sets up the testing framework in an existing project.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// title: npm\nnpm init japa@latest .\n```\n\nLANGUAGE: sh\nCODE:\n```\n// title: yarn\nyarn create japa@latest .\n```\n\nLANGUAGE: sh\nCODE:\n```\n// title: pnpm\npnpm create japa@latest .\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure plugins for the Japa test runner, including using pre-defined plugins and inline functions.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  plugins: [\n    assert()\n  ]\n})\n\n// Or an inline function\nconfigure({\n  plugins: [\n    async function (config, runner, { Test, TestContext, Group }) {\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Tests in Japa\nDESCRIPTION: Shows how to handle asynchronous operations in tests, including using async/await and the waitForDone method for streams and events.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', async () => {\n  await someAsyncOperation()\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', async (ctx, done) => {\n  emitter.on('someEvent', () => {\n    done()\n  })\n})\n.waitForDone()\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Tearing Down Tests in Japa\nDESCRIPTION: Shows how to define setup and teardown hooks for tests using the setup and teardown methods.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.setup(async () => {\n  // executed before the test\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.teardown(async () => {\n  // executed after the test\n})\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Test in Japa\nDESCRIPTION: Example of a basic test file that imports the test function, defines a function to test, and writes an assertion to verify its behavior.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// title: tests/example.spec.js\nimport { test } from '@japa/runner'\n\nfunction sum(a, b) {\n  return a + b\n}\n\ntest('add two numbers', ({ assert }) => {\n  assert.equal(sum(2, 2), 4)\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Japa Test Runner Configuration in TypeScript\nDESCRIPTION: This snippet shows a more comprehensive configuration for the Japa test runner, including suites, plugins, reporters, filters, and advanced options like forceExit and custom importer.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  suites: [{\n    name: 'unit',\n    files: ['tests/unit/**/*.spec.js'],\n    configure: () => {},\n  }],\n  plugins: [assert()],\n  reporters: {\n    activated: [],\n    list: []\n  },\n  filters: {\n    tests: [],\n    tags: [],\n    groups: [],\n    files: [],\n  },\n  timeout: 2000,\n  forceExit: false,\n  importer: (filePath) => import(filePath),\n  refiner: new Refiner({})\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites in Japa\nDESCRIPTION: Shows how to configure test suites to organize tests by type with separate file patterns and lifecycle hooks per suite.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { configure } from '@japa/runner'\n\nconfigure({\n  // delete-start\n  files: ['tests/**/*.spec.js'],\n  // delete-end\n  // insert-start\n  suites: [\n    {\n      name: 'unit',\n      files: 'tests/unit/**/*.spec.js'\n    },\n    {\n      name: 'functional',\n      files: 'tests/functional/**/*.spec.js',\n      configure(suite) {\n        /**\n         * Example showcasing how to start the HTTP\n         * server before running tests from the\n         * functional suite.\n         */\n        suite.setup(() => {\n          const server = startHttpServer()\n          return () => server.close()\n        })\n      }\n    }\n  ],\n  // insert-end\n  plugins: [\n    assert(),\n    expectTypeOf(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Test Runner\nDESCRIPTION: Basic configuration for the Japa test runner in the entry point file. It processes CLI arguments, configures test files and plugins, and runs the tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { assert } from '@japa/assert'\nimport { apiClient } from '@japa/api-client'\nimport { expectTypeOf } from '@japa/expect-type'\nimport { configure, processCLIArgs, run } from '@japa/runner'\n\n// highlight-start\nprocessCLIArgs(process.argv.splice(2))\n// highlight-end\n\n// highlight-start\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [\n    assert(),\n    expectTypeOf(),\n  ],\n})\n// highlight-end\n\n// highlight-start\nrun()\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test Group in TypeScript\nDESCRIPTION: Creates a test group titled 'Maths.add' containing a simple test that checks if 2 + 2 equals 4. The test.group method accepts a title and a callback function that receives a TestGroup instance.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('Maths.add', (group) => {\n  test('add two numbers', ({ assert }) => {\n    assert.equal(2 + 2, 4)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Dataset Usage with Email Validation\nDESCRIPTION: Example showing how to use basic array datasets with the .with() method for email validation testing\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/datasets.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email', ({ assert }, email) => {\n  assert.isTrue(validateEmail(email))\n})\n.with([\n  'some+user@gmail.com',\n  'some.user@gmail.com',\n  'email@123.123.123.123'\n])\n```\n\n----------------------------------------\n\nTITLE: Using Promise-based setTimeout\nDESCRIPTION: Demonstrates how to use the Promise-based setTimeout from Node.js timers/promises module.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setTimeout } from 'node:timers/promises'\n\ntest('generate pdf', async (ctx) => {\n  await operation1()\n\n  // for 5 seconds\n  await setTimeout(5000)\n\n  await operation2()\n})\n```\n\n----------------------------------------\n\nTITLE: Dataset-driven Email Validation Test\nDESCRIPTION: Example showing how to use Japa's dataset feature to test email validation with multiple test cases in a single test definition.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email')\n .with([\n    'some+user@gmail.com',\n    'some.user@gmail.com',\n    'email@123.123.123.123'\n  ])\n  .run(({ assert }, email) => {\n    assert.isTrue(validateEmail(email))\n  })\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with async/await in Japa\nDESCRIPTION: Demonstrates how to test asynchronous code using async/await syntax with the await keyword.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('verify email address', async () => {\n  await validateEmail(email)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Assert in Japa Test\nDESCRIPTION: Example of using the assert property from the Test context in a Japa test case.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntest('add two numbers', ({ assert }) => {\n  assert.equal(2 + 2, 4)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Japa Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom Japa plugin and configure it. The plugin function receives an object with emitter, runner, cliArgs, and config properties, allowing for various customizations and extensions to the Japa testing framework.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction myCustomPlugin() {\n  return function ({ emitter, runner, cliArgs, config }) {\n    console.log('hello world from myCustomPlugin')\n  }\n}\n\nconfigure({\n  plugins: [\n    assert(),\n    myCustomPlugin()\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks for Database Setup in TypeScript\nDESCRIPTION: Sets up lifecycle hooks for database operations within a test group. The group.each.setup method creates database tables before each test and returns a teardown function that drops tables after each test completes.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('register user', (group) => {\n  // highlight-start\n  group.each.setup(async () => {\n    await createTables()\n    return () => dropTables()\n  })\n  // highlight-end\n\n  test('create a new user', async ({ assert }) => {\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms and JSON Data with Japa API Client\nDESCRIPTION: Demonstrates how to submit form data and JSON payloads using the API client in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client\n  .post('/posts')\n  .form({\n    title: 'Japa 101',\n    description: 'Something about the post',\n    tags: [1, 2, 4]\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait client\n  .post('/posts')\n  .json({\n    title: 'Japa 101',\n    description: 'Something about the post',\n    tags: [1, 2, 4]\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Expect Assertions in Tests\nDESCRIPTION: Example showing how to use the expect assertions within a Japa test case. Demonstrates accessing expect from the test context and making a basic assertion.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', ({ expect }) => {\n  expect(2 + 2).toEqual(4)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Test Runner with Basic Options in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `configure` method to set up basic options for the Japa test runner, including file patterns and timeout.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { assert } from '@japa/assert'\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  timeout: 2000,\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejections with expect.rejects in Japa\nDESCRIPTION: Example of using expect.rejects and chaining with toThrow to test that a database operation rejects with a unique constraint error.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('do not insert duplicate emails', ({ expect }) => {\n  await createUser({ email: 'foo@bar.com' })\n  \n  await expect(createUser({ email: 'foo@bar.com' }))\n    .rejects\n    .toThrow(/Unique constraint/)\n})\n```\n\n----------------------------------------\n\nTITLE: Running Tagged Tests in Japa\nDESCRIPTION: Shows how to run tests with specific tags, exclude tests with certain tags, and combine multiple tags. This provides flexibility in test execution.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --tags=\"@payment_gateway\"\n\n# Run all tests except the ones with @payment_gateway tag\nnode bin/test.js --tags=\"~@payment_gateway\"\n\nnode bin/test.js --tags=\"@payment_gateway,@slow\"\n\nnode bin/test.js --tags=\"@payment_gateway\" --tags=\"@slow\"\n\nnode bin/test.js --tags=\"@payment_gateway,@slow\" --match-all\n```\n\n----------------------------------------\n\nTITLE: Basic Japa Browser Test Example\nDESCRIPTION: A simple browser test that visits the Japa documentation website and checks for the browser client documentation.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// title: tests/browser/visit_japa.spec.js\nimport { test } from '@japa/runner'\n\ntest('has docs for browser client', async ({ visit }) => {\n  const page = await visit('https://japa.dev/docs')\n  await page.getByRole('link', { name: 'Browser client' }).click()\n\n  /**\n   * Assertions\n   */\n  await page.assertPath('/docs/plugins/browser-client')\n  await page.assertTextContains('body', 'Browser client')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Different Assertion Styles in Japa\nDESCRIPTION: Demonstrates the different assertion plugins available in Japa: Chai assert, Jest expect, and TypeScript type assertions.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// title: With Chai assert\ntest('add two numbers', ({ assert }) => {\n  assert.equal(2 + 2, 4)\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\n// title: With Jest expect\ntest('add two numbers', ({ expect }) => {\n  expect(2 + 2).toEqual(4)\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\n// title: Asserting Types\ntest('find user by id', async ({ expectTypeOf }) => {\n  const user = await User.find(1)\n  expectTypeOf(user).toMatchTypeOf<User | null>()\n})\n```\n\n----------------------------------------\n\nTITLE: Extending the Test Class in Japa\nDESCRIPTION: Explains how to extend the Test class with custom properties using macros and getters, including TypeScript type definitions.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Test } from '@japa/runner/core'\n\nTest.macro('isSlow', function () {\n  this.tags(['@slow'], 'append')\n  return this\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest('get users list', () => {\n})\n.isSlow()\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@japa/runner/core' {\n  interface Test {\n    isSlow(): this\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites in Japa\nDESCRIPTION: Example of configuring multiple test suites in Japa to organize unit and functional tests in separate directories. Each suite requires a unique name and files property to specify test locations.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@japa/runner'\n\nconfigure({\n  suites: [\n    {\n      name: 'unit',\n      files: ['tests/unit/**/*.spec.js'],\n    },\n    {\n      name: 'functional',\n      files: ['tests/functional/**/*.spec.js'],\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests in Japa\nDESCRIPTION: Explains how to assign tags to tests for filtering and running specific tests, including options for appending or prepending tags.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.tags(['@slow', '@network'])\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// append tags\ntest('add two numbers', () => {\n})\n.tags(['@network'], 'append')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// prepend tags\ntest('add two numbers', () => {\n})\n.tags(['@network'], 'prepend')\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with Return Value in Japa\nDESCRIPTION: Shows how to test asynchronous code by returning a Promise directly from the test callback.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('verify email address', async () => {\n  return validateEmail(email)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous Exceptions with expect.toThrow in Japa\nDESCRIPTION: Example of using the expect.toThrow method to test that a validation function throws an exception with a specific error message.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email format', ({ expect }) => {\n  expect(() => validateEmail('foo'))\n    .toThrow('\"foo\" is not a valid email address')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeout for a Group in TypeScript\nDESCRIPTION: Demonstrates how to set a timeout of 60 seconds for all tests within a group using the group.each.timeout method. This ensures that any test in the group failing to complete within the specified time will be marked as failed.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('register user', (group) => {\n  // highlight-start\n  group.each.timeout(1000 * 60)\n  // highlight-end\n\n  test('create a new user', async ({ assert }) => {\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Parallel Suite Execution\nDESCRIPTION: JSON configuration for package.json to set up scripts for running test suites in parallel using the concurrently package. This defines separate scripts for different test suites and a main test script.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"unit:tests\": \"node bin/test.js unit\",\n    \"functional:tests\": \"node bin/test.js functional\",\n    \"test\": \"concurrently \\\"npm:unit:tests\\\" \\\"npm:functional:tests\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous Exceptions with High Order Assertion in Japa\nDESCRIPTION: Example of using test.throws as a high order assertion method to test that a validation function throws an exception with a specific message.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email format', () => {\n  validateEmail('foo')\n})\n .throws('\"foo\" is not a valid email address')\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Data in HTTP Requests using TypeScript\nDESCRIPTION: Demonstrates various methods to access and parse response data, including text, body, cookies, headers, and status information.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.text()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.body()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = response.cookie('cart_value')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.cookies()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.header('X-Time')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.headers()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.status()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.type()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirects()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.files()\n```\n\n----------------------------------------\n\nTITLE: Basic Assert Usage in Japa\nDESCRIPTION: Examples of using the basic assert function for truthy expressions in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nassert(isTrue(foo))\nassert(foo === 'bar')\nassert(age > 18, 'Not allowed to enter the club')\n```\n\n----------------------------------------\n\nTITLE: Using Datasets in Japa Tests\nDESCRIPTION: Demonstrates how to use datasets in tests, including both static arrays and lazily evaluated functions for providing test data.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email')\n  .with(['virk@adonisjs.com', 'foo@bar.com'])\n  .run(async (ctx, email) => {\n    // executed for each email    \n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getTestEmails () {\n  return ['virk@adonisjs.com', 'foo@bar.com'] \n}\n\ntest('validate email')\n  .with(getTestEmails)\n  .run(async (ctx, email) => {\n    // executed for each email    \n  })\n```\n\n----------------------------------------\n\nTITLE: Object-based Dataset for Email Validation\nDESCRIPTION: Demonstrates using object-based datasets to test both valid and invalid email addresses with expected results\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/datasets.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email', ({ assert }, row) => {\n  assert.equal(validateEmail(row.email), row.result)\n})\n.with([\n {\n   email: 'some+user@gmail.com',\n   result: true,\n },\n {\n   email: 'some.user@gmail.com',\n   result: true,\n },\n {\n   email: 'email@example.com (Joe Smith)',\n   result: false,\n },\n {\n   email: '@example.com',\n   result: false,\n }\n])\n```\n\n----------------------------------------\n\nTITLE: Debugging HTTP Requests using TypeScript\nDESCRIPTION: Demonstrates methods for dumping request data to the console for debugging purposes, including options to dump specific parts of the request.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.dump()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.dumpCookies()\nrequest.dumpHeaders()\nrequest.dumpBody()\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Server Macro in Japa\nDESCRIPTION: Defines a test macro that creates an HTTP server instance and automatically closes it after the test finishes. It demonstrates how to manage network resources in tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_macros.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { promisify } from 'node:utils'\nimport { createServer } from 'node:http'\n\nexport const useServer = test.macro((t, callback) => {\n  /**\n   * Create an HTTP server instance\n   */\n  const server = createServer(callback)\n\n  /**\n   * Assign the hook to close the server when test finishes\n   */\n  t.cleanup(() => promisify(server.close)())\n\n  /**\n   * Listen on some random port\n   */\n  server.listen(':0')\n\n  /**\n   * Return server instance\n   */\n  return server\n})\n```\n\n----------------------------------------\n\nTITLE: Using DeepEqual Assertion in Japa\nDESCRIPTION: Examples of using the deepEqual assertion method for deep equality comparisons of objects and arrays in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nassert.deepEqual({ a: 1, b: 2 }, { a: 1, b: 2 }) // passes\nassert.deepEqual({ b: 2, a: 1 }, { a: 1, b: 2 }) // passes\nassert.deepEqual([1, 2], [1, 2]) // passes\nassert.deepEqual([1, 2], [2, 1]) // fails\nassert.deepEqual(/a/, /a/) // passes\nassert.deepEqual(\n  new Date('2020 01 22'),\n  new Date('2020 01 22')\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Plugin with Custom Options\nDESCRIPTION: Example of configuring the snapshot plugin with custom options like resolveSnapshotPath to customize where snapshot files are stored and prettyFormatOptions to customize the formatting of snapshots.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [\n    snapshot({\n      resolveSnapshotPath: (testPath) => {\n        /**\n         * This will create a snapshot file next to your\n         * test file.\n         */\n        return testPath.replace('.spec.ts', '.spec.ts.cjs')\n      },\n      prettyFormatOptions: {\n        printFunctionName: true\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Types for Custom TestContext Methods in Japa\nDESCRIPTION: Demonstrates how to declare TypeScript types for custom methods added to the TestContext using declaration merging.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test_context.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@japa/runner/core' {\n  interface TestContext {\n    sleep(milliseconds: number): Promise<void>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous Exceptions with assert.throws in Japa\nDESCRIPTION: Example of using the dedicated assert.throws method to test that a validation function throws an exception with a specific error message.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email format', ({ assert }) => {\n  assert.throws(\n    () => validateEmail('foo'),\n    '\"foo\" is not a valid email address'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests in Japa\nDESCRIPTION: Demonstrates how to tag tests and filter them using tags. This is useful for grouping related tests across different files and suites.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// title: payments/new_source.spec.js\ntest('add payment method', () => {\n})\n .tags(['@payment_gateway'])\n```\n\nLANGUAGE: ts\nCODE:\n```\n// title: checkout/logged_in/has_items.spec.js\ntest('charge user and create order', () => {\n})\n .tags(['@payment_gateway'])\n```\n\nLANGUAGE: ts\nCODE:\n```\n// title: orders/refund.spec.js\ntest('cancel order and issue refund', () => {\n})\n .tags(['@payment_gateway'])\n```\n\n----------------------------------------\n\nTITLE: Installing API Client Plugin for Japa\nDESCRIPTION: Demonstrates how to install the API client plugin from npm and register it in the Japa configuration file.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/api-client\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiClient } from '@japa/api-client'\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [apiClient('https://localhost:3333')]\n})\n```\n\n----------------------------------------\n\nTITLE: Using DoesNotThrow Assertion in Japa\nDESCRIPTION: Examples of using the doesNotThrow assertion method to check if a function does not throw an exception in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nfunction foo() { throw new Error('blow up') }\n\nassert.doesNotThrow(foo) // fails\nassert.doesNotThrow(foo, 'failed') // passes\nassert.doesNotThrow(() => {}) // passes\n```\n\n----------------------------------------\n\nTITLE: Basic File System Plugin Usage Example\nDESCRIPTION: Demonstrates basic usage of the file system plugin to create and work with temporary JSON files during tests\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('read rc file', async ({ fs }) => {\n  await fs.createJson('rc.json', {\n    foo: 'bar'\n  })\n\n  await runMethodThatNeedsRcFile()\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Test Titles with Dataset Values\nDESCRIPTION: Shows how to create dynamic test titles using dataset value interpolation\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/datasets.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email - \"{email}\"')\n  .with([\n    {\n      email: 'some+user@gmail.com',\n      result: true,\n    },\n    {\n      email: 'some.user@gmail.com',\n      result: true,\n    },\n  ])\n  .run(({ assert }, { email, result }) => {\n    assert.equal(validateEmail(email), result)\n  })\n```\n\n----------------------------------------\n\nTITLE: Grouping Tests in Japa\nDESCRIPTION: Demonstrates how to organize tests using test groups, which allow for defining lifecycle hooks and filtering tests by group.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\n\nfunction sum(a, b) {\n  return a + b\n}\n\n// insert-start\ntest.group('Maths.add', () => {\n// insert-end\n  test('add two numbers', ({ assert }) => {\n    assert.equal(sum(2, 2), 4)\n  })\n// insert-start\n})\n// insert-end\n```\n\n----------------------------------------\n\nTITLE: Promisifying Streams\nDESCRIPTION: Demonstrates how to convert streams to Promises using the get-stream package.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport getStream from 'get-stream'\nimport { createReadStream } from 'node:fs'\n\ntest('handle file uploads', async (ctx) => {\n  const stream = createReadStream('../package.json')\n  const buffer = await getStream(someReadableStream)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a File Management Macro in TypeScript with Japa\nDESCRIPTION: Defines a test macro that creates a file and automatically deletes it after the test finishes. It uses the test cleanup hook to ensure proper resource management.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_macros.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { writeFile, rm } from 'node:fs/promises'\n\nexport const useFile = test.macro((t, filePath: string, contents: string) => {\n  /**\n   * Assign a hook on the test to remove the file when the\n   * test finishes\n   */\n  t.cleanup(() => rm(filePath))\n\n  /**\n   * Create file\n   */\n  return writeFile(filePath, contents)\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting API Responses with Japa API Client\nDESCRIPTION: Shows how to use assertion methods on the response object to validate API responses in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('get /users', async ({ client, assert }) => {\n  assert.plan(2)\n\n  const response = await client\n    .post('/posts')\n    .form({ title: 'Japa 101' })\n\n  response.assertStatus(201)\n\n  response.assertBody({\n    title: 'Japa 101'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Truthiness in TypeScript\nDESCRIPTION: The ok/isOk and notOk/isNotOk methods assert whether a value is truthy or falsy.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nassert.ok({ hello: 'world' }) // passes\nassert.ok(null) // fails\n\nassert.isOk({ hello: 'world' }) // passes\nassert.isOk(null) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notOk({ hello: 'world' }) // fails\nassert.notOk(null) // passes\n\nassert.isNotOk({ hello: 'world' }) // fails\nassert.isNotOk(null) // passes\n```\n\n----------------------------------------\n\nTITLE: Configuring Filters for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure filters for the Japa test runner, allowing for cherry-picking specific tests to run.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  filters: {\n    tests: [], // by tests title\n    tags: [], // by tags\n    groups: [], // by group titles\n    files: [], // import only mentioned files\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: File Assertion Examples\nDESCRIPTION: Collection of examples demonstrating various file assertion methods including exists, equals, and contains checks\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('make controller', ({ assert, fs }) => {\n  await makeController(fs.basePath, 'users')\n  await assert.fileExists('controllers/users_controller.ts')\n})\n\ntest('make controller', ({ assert, fs }) => {\n  await makeController(fs.basePath, 'users') \n \n  await assert.fileEquals('controllers/users_controller.ts', `\n    export default class UsersController {}\n  `)\n})\n\ntest('make controller', ({ assert, fs }) => {\n  await makeController(fs.basePath, 'users') \n \n  await assert.fileContains(\n    'controllers/users_controller.ts',\n    'class UsersController'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Japa API Client\nDESCRIPTION: Demonstrates how to define and use lifecycle hooks for API requests in Japa tests, both globally and for individual requests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiClient } from '@japa/api-client'\n\nApiClient.setup(async (request) => {\n  // executed before each request\n})\n\nApiClient.teardown(async (response) => {\n  // executed after each request\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntest('get /users', async ({ client }) => {\n  const response = await client\n    .get('/posts')\n    .setup(async () => {\n      await createDummyPosts(20)\n      return () => clearDatabase()\n    })\n\n  response.assertStatus(200)\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Suite in Japa\nDESCRIPTION: Demonstrates how to run tests for specific suites using the command line. This allows for separation of unit, functional, and browser tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Filter tests by suite\n\nnode bin/test.js unit\n\nnode bin/test.js functional\n\nnode bin/test.js browser\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Class for Browser Testing\nDESCRIPTION: Example of creating a class-based page that extends BasePage to encapsulate testing logic for a posts listing page.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { BasePage } from '@japa/browser-client'\n\nexport class PostsListingPage extends BasePage {\n  url = '/posts'\n\n  async assertHasEmptyList() {\n    await this.page.assertTextContains('.posts_list', 'No posts found. Check back later')\n  }\n\n  async assertPostsCount(count: number) {\n    await this.page.assertElementsCount('.post', count)\n  }\n\n  async assertHasPost(title: string) {\n    await this.page.assertExists(\n      this.page.locator('.post h2', { hasText: title })\n    )\n  }\n\n  async paginateTo(page: number) {\n    await this.page.locator('.pagination_links a', { hasText: String(page) }).click()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Server Macro in Japa Tests\nDESCRIPTION: Shows how to use the HTTP server macro in a test case. The macro creates a server with a request handler that will be automatically closed after the test completes.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_macros.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { useServer } from './macros.js'\n\ntest('serve static files', async () => {\n  const server = useServer((req, res) => {\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Various Type Assertion Methods\nDESCRIPTION: Examples of using different type assertion methods like toBeUnknown, toBeAny, toBeNever, toBeFunction, toBeObject, toBeArray, toBeString, toBeNumber, toBeBoolean, toBeSymbol, toBeUndefined, and toBeNullable.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await got.post()\nexpectTypeOf(data).tobeUnknown()\n\nconst { data } = await got.post<any>()\nexpectTypeOf(data).toBeAny()\n\nconst someVariable: never\nexpectTypeof(someVariable).toBeNever()\n\nexpectTypeOf(() => {}).toBeFunction()\n\nclass Foo {}\nexpectTypeOf(new Foo()).toBeObject()\n\nconst foo = {}\nexpectTypeOf(foo).toBeObject()\n\nexpectTypeOf([1, 2]).toBeArray()\n\nexpectTypeOf('hello world').toBeString()\n\nexpectTypeOf(1).toBeNumber()\n\nexpectTypeOf(true).toBeBoolean()\nexpectTypeOf(false).toBeBoolean()\n\nexpectTypeOf(Symbol('foo')).toBeSymbol()\nexpectTypeOf(Symbol.for('foo')).toBeSymbol()\n\nexpectTypeOf(undefined).toBeUndefined()\n\nexpectTypeOf(null).toBeNullable()\n```\n\n----------------------------------------\n\nTITLE: Asserting Deep Inclusion in TypeScript\nDESCRIPTION: The deepInclude and notDeepInclude methods assert whether a collection includes or does not include an item. These methods work for strings, arrays, and objects.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nassert.deepInclude(\n  { foo: { a: 1 }, bar: { b: 2 } },\n  { foo: { a: 1 } }\n) // passes\n\nassert.deepInclude([1, [2], 3], [2]) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notDeepInclude(\n  { foo: { a: 1 }, bar: { b: 2 } },\n  { foo: { a: 4 } }\n) // passes\n\nassert.deepInclude([1, [2], 3], [20]) // passes\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Expect Plugin\nDESCRIPTION: Configuration setup for the @japa/expect plugin in the test entry point file. Shows how to import and register the expect plugin with the Japa runner.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect } from '@japa/expect'\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [expect()]\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Properties using TypeScript\nDESCRIPTION: Shows various assertion methods for validating HTTP response properties, including cookies, headers, status, body content, and redirects.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertCookie('foo')\n\n/**\n * Two assertions are executed under the hood\n * when the value is provided\n */\nresponse.assertCookie('foo', 'bar')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertCookieMissing('foo')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertHeader('X-Time')\n\n/**\n * Two assertions are executed under the hood\n * when the value is provided\n */\nresponse.assertHeader('X-Time', '10')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertHeaderMissing('X-Powered-By')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertStatus(200)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertBody({\n  id: 1,\n  name: 'virk',\n  password: 'secret'\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertBodyContains({\n  id: 1,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertBodyNotContains({\n  id: 1,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertTextIncludes(`<h1> Hello world </h1>`)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertAgainstApiSpec()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertRedirectsTo('/posts/1')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertOk()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertCreated()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertAccepted()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertNoContent()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertMovedPermanently()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertFound()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertBadRequest()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertUnauthorized()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertPaymentRequired()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertForbidden()\n```\n\n----------------------------------------\n\nTITLE: Using Class-Based Pages in Browser Tests\nDESCRIPTION: Example of using a page class to write expressive tests for a posts listing page, including pagination and content verification.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { PostsListingPage } from './pages/listing_page.js'\n\ntest.group('Posts | list', () => {\n  test('see an empty list, when posts does not exists', async ({ visit }) => {\n    const page = await visit(PostsListingPage)\n    await page.assertHasEmptyList()\n  })\n\n  test('see first 10 posts', async ({ visit }) => {\n    await PostsFactory.createMany(10)\n    const page = await visit(PostsListingPage)\n    await page.assertPostsCount(10)\n  })\n\n  test('navigate using pagination', async ({ visit }) => {\n    const posts = await PostsFactory.createMany(20)\n\n    const page = await visit(PostsListingPage)\n    await page.paginateTo(2)\n    await page.assertHasPost(posts[10].title)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in HTTP Requests using TypeScript\nDESCRIPTION: Demonstrates how to configure and handle server redirects, including setting the number of redirects to follow and accessing the redirect URLs.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// follow two redirects from the server\nrequest.redirects(2)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await request.redirects(2)\nconsole.log(response.redirects())\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Test Using Japa Assert\nDESCRIPTION: Example showing how to use the snapshot testing with Japa's assert module. It creates a snapshot of the value '1' and matches it against the stored snapshot.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntest('match snapshot', async ({ assert }) => {\n  assert.snapshot('1').match()\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Group Title in Japa\nDESCRIPTION: Demonstrates how to filter tests by their group title using the --groups flag. This requires an exact match of the group title.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('polls list', () => {\n  test('show list of public polls', () => {\n  })\n})\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --groups=\"polls list\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Playwright API in Japa Browser Tests\nDESCRIPTION: Example showing how to access and use the Playwright API objects (browser, context, page) within Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntest('has docs for browser client', async ({\n  browser,\n  browserContext,\n  visit\n}) => {\n  // Create new page\n  const page = await browserContext.newPage()\n  await page.goto(url)\n\n  // Or use visit helper\n  const page = await visit(url)\n\n  // Create multiple contexts\n  const context1 = await browser.newContext()\n  const context2 = await browser.newContext()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests and Groups within a Suite\nDESCRIPTION: Example showing how to configure tests and groups within a suite using the onTest and onGroup methods. This allows for adding functionality or lifecycle hooks to every test and group in a suite.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure(suite) {\n  // Top level suite tests\n  suite.onTest((test) => {\n    test.setup(() => {})\n  })\n\n  suite.onGroup((group) => {\n    group.tap((test) => {\n      // Tests inside a group\n      test.setup(() => {})\n    })\n  })\n},\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Server Test with Manual Cleanup\nDESCRIPTION: Example of a test that starts an HTTP server and manually closes it after test completion. This approach is problematic as the server won't be closed if an exception occurs during the test.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_resources.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { promisify } from 'node:utils'\nimport { createServer } from 'node:http'\n\ntest('serve static assets', async () => {\n  const server = createServer((req, res) => {\n  })\n  server.listen(somePort)\n  \n  /**\n   * Here, you might make a request to the\n   * HTTP server.\n   *\n   * And write some assertions\n   */\n \n  await promisify(server.close)()\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data in x-www-form-urlencoded Requests using TypeScript\nDESCRIPTION: Shows how to send form data with the application/x-www-form-urlencoded content type using an object of key-value pairs.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.form({\n  title: 'Japa 101',\n  description: 'Something about the post',\n  tags: [1, 2, 4]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring File Patterns for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure file patterns for the Japa test runner, including using glob patterns and exclusions.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  files: ['tests/**/*.spec.js', '!tests/unit/some-test-file.js']\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  files: () => {\n    return []\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  files: '**/*.spec.js',\n  exclude: [\n    'node_modules/**',\n    'bower_components/**',\n    'jspm_packages/**'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending TestContext with Custom Methods in Japa\nDESCRIPTION: Demonstrates how to extend the TestContext class with custom methods using macros. This example adds a 'sleep' method to the TestContext prototype.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test_context.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestContext } from '@japa/runner/core'\n\nTestContext.macro('sleep', function (milliseconds) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Lazy Dataset Generation\nDESCRIPTION: Shows how to generate datasets lazily using an async function with the .with() method\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/datasets.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email', ({ assert }, email) => {\n  assert.isTrue(validateEmail(email))\n})\n.with(async () => {\n  return getEmailsToTest()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks for Test Suites\nDESCRIPTION: Example of adding lifecycle hooks to test suites using the configure method. This demonstrates setting up and tearing down an HTTP server for functional tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  suites: [\n    {\n      name: 'functional',\n      files: ['tests/functional/**/*.spec.js'],\n      // highlight-start\n      configure(suite) {\n        suite.setup(() => {\n          server = createServer(handler)\n          server.start()\n\n          return () => server.close()\n        })\n      },\n      // highlight-end\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout in TypeScript\nDESCRIPTION: Demonstrates how to set a timeout for an HTTP request, after which the request will be aborted if the server hasn't responded.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.timeout(2000)\n```\n\n----------------------------------------\n\nTITLE: Testing Object or Array Contains Subset in TypeScript\nDESCRIPTION: The containsSubset assertion checks if an object or array contains all the properties/elements from another object or array, useful for API response testing.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nassert.containsSubset(\n  { id: 1, created_at: Date },\n  { id: 1 }\n) // passes\n\nassert.containsSubset(\n  [\n    { id: 1, created_at: Date },\n    { id: 2, created_at: Date }\n  ],\n  [{ id: 1 }, { id: 2 }]\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Using Throws Assertion in Japa\nDESCRIPTION: Examples of using the throws assertion method to check if a function throws an exception in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nfunction foo() { throw new Error('blow up') }\n\nassert.throws(foo) // passes\nassert.throws(foo, Error) // passes\nassert.throws(foo, 'blow up') // passes\nassert.throws(foo, 'failed') // fails\n```\n\n----------------------------------------\n\nTITLE: Using NotStrictEqual Assertion in Japa\nDESCRIPTION: Examples of using the notStrictEqual assertion method for strict inequality comparisons in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nassert.notStrictEqual(3, 2) // passes\nassert.notStrictEqual(3, '2') // fails\nassert.notStrictEqual(Symbol.for('foo'), Symbol.for('bar')) // passes\n```\n\n----------------------------------------\n\nTITLE: Using Rejects Assertion in Japa\nDESCRIPTION: Examples of using the rejects assertion method to check if a function rejects a promise in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nawait assert.rejects(() => {\n  throw new Error('')\n}) // passes\n\nawait assert.rejects(() => {\n  async () => throw new HttpError('Resource not found')\n}, HttpError) // passes\n\nawait assert.rejects(() => {\n  async () => throw new HttpError('Resource not found')\n}, 'Resource not found') // passes\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Tests in Japa (TypeScript)\nDESCRIPTION: This example shows how to create todo tests in Japa. Todo tests are placeholder tests without implementation, used to list scenarios to be tested later. They are created by omitting the test callback function.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/skipping_tests.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest('fail if email is invalid')\n\ntest('fail if email is not unique')\n\ntest('register user and send welcome email')\n\ntest('allow email editing post signup')\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents with Japa FS Helper\nDESCRIPTION: Demonstrates how to read directory contents using the fs.readDir method in a Japa test. Returns an array of EntryInfo objects containing path, fullPath, basename, and stats for each file entry.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('copy files', async ({ fs }) => {\n  const entries = await fs.readDir('make')\n\n  entries.forEach((entry) => {\n    console.log(entry.path)\n    console.log(entry.fullPath)\n    console.log(entry.basename)\n    console.log(entry.stats)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using NotExists Assertion in Japa\nDESCRIPTION: Examples of using the notExists assertion method to check if a value is null or undefined in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nassert.notExists(null) // passes\nassert.notExists(undefined) // passes\nassert.notExists('') // fails\nassert.notExists(false) // fails\nassert.notExists(0) // fails\n```\n\n----------------------------------------\n\nTITLE: Installing Japa Expect Plugin\nDESCRIPTION: Command to install the @japa/expect package as a dev dependency using npm.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/expect\n```\n\n----------------------------------------\n\nTITLE: Registering Browser Client Plugin in Japa Configuration\nDESCRIPTION: TypeScript code showing how to register the browser client plugin in the Japa test runner configuration file.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { assert } from '@japa/assert'\nimport { configure } from '@japa/runner'\n// highlight-start\nimport { browserClient } from '@japa/browser-client'\n// highlight-end\n\nconfigure({\n  plugins: [\n    assert(),\n    // highlight-start\n    browserClient({\n      runInSuites: ['browser']\n    })\n    // highlight-end\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Uploading Files in Multipart Form Data Requests using TypeScript\nDESCRIPTION: Demonstrates how to attach files to multipart/form-data requests using absolute file paths or streams. Also shows how to set custom filenames and content types.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.file('avatar', join(__dirname, 'storage', 'avatar.jpg'))\nrequest.file('avatar', fs.createReadStream('./avatar.jpg'))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.file(\n  'avatar',\n  join(__dirname, 'storage', 'avatar.jpg'),\n  {\n    filename: 'profile-pic.jpg',\n    contentType: 'image/jpeg'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Checking select box options with assertSelectedOptions in TypeScript\nDESCRIPTION: Demonstrates how to verify that a select element has specific options selected. This method accepts an array of expected values and compares them against the currently selected options in the select box.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = visit('/')\nawait page.assertSelectedOptions('select[name=\"tags\"]', [\n  'js',\n  'css',\n  'html'\n])\n```\n\n----------------------------------------\n\nTITLE: Activating Reporters via Command Line\nDESCRIPTION: Examples of using CLI commands to activate different reporters in Japa\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode bin/test.js --reporters=dot\nnode bin/test.js --reporters=ndjson\n```\n\n----------------------------------------\n\nTITLE: Marking Tests as Regression in Japa\nDESCRIPTION: Shows how to mark a test as a regression test using the fails method, which is useful for bug reports and fixes.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', ({ assert }) => {\n  assert.equal(add(2, 2), 4)\n})\n.fails('add method should return 4, currently it returns 5')\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Test Suite in Japa\nDESCRIPTION: Example of configuring separate test suites in Japa, with one dedicated to browser tests that uses the browser client plugin.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconfigure({\n  // highlight-start\n  suites: [\n    {\n      name: 'browser',\n      timeout: 30 * 1000,\n      files: ['tests/browser/**/*.spec.js'],\n    },\n    {\n      name: 'unit',\n      files: ['tests/unit/**/*.spec.js'],\n    }\n  ],\n  // highlight-end\n  plugins: [\n    assert(),\n    browserClient({\n      // highlight-start\n      runInSuites: ['browser']\n      // highlight-end\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Decorators for Japa Browser Client Plugin\nDESCRIPTION: This snippet shows how to create and register custom decorators to extend the functionality of page, context, and response objects in Japa browser tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decoratorsCollection } from '@japa/browser-client'\n\ndecoratorsCollection.register({\n  /**\n   * Extend page\n   */\n  page(page) {\n    page.getWidth = function () {\n      return this.viewportSize().width\n    }\n  },\n\n  /**\n   * Extend context\n   */\n  context(context) {\n    context.injectShaHash = function () {\n      this.exposeFunction('sha256', (text) => {\n        return crypto.createHash('sha256').update(text).digest('hex')\n      })\n    }\n  },\n  \n  /**\n   * Extend response\n   */\n  response(response) {\n    response.getResponseTime = function () {\n      return this.headers()['x-response-time']\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Properties in TypeScript\nDESCRIPTION: Various methods to assert the presence, absence, or specific values of object properties.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nassert.properties(\n  { username: 'virk', age: 22, id: 1 },\n  ['id', 'age']\n) // passes\n\nassert.properties(\n  { username: 'virk', id: 1 },\n  ['id', 'age']\n) // fails: \"age\" is missing\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notAllProperties(\n  { id: 1, name: 'foo' },\n  ['id', 'name', 'email']\n) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.onlyProperties(\n  { username: 'virk', age: 22, id: 1 },\n  ['id', 'name', 'age']\n) // passes\n\nassert.onlyProperties(\n  { username: 'virk', age: 22, id: 1 },\n  ['id', 'name']\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notAnyProperties(\n  { id: 1, name: 'foo' },\n  ['email', 'age']\n) // passes\n\nassert.notAnyProperties(\n  { id: 1, name: 'foo' },\n  ['email', 'id']\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.property(\n  { id: 1, username: 'virk' },\n  'id'\n) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notProperty(\n  { id: 1, username: 'virk' },\n  'email'\n) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.propertyVal(\n  { id: 1, username: 'virk' },\n  'id',\n  1\n) // passes\n\nassert.propertyVal(\n  { user: { id: 1 } },\n  'user',\n  { id: 1 }\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notPropertyVal(\n  { id: 1, username: 'virk' },\n  'id',\n  22\n) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.deepPropertyVal(\n  { user: { id: 1 } },\n  'user',\n  { id: 1 }\n) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notDeepPropertyVal(\n  { user: { id: 1 } },\n  'user',\n  { email: 'foo@bar.com' }\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Using toEqualTypeOf for Strict Type Equality\nDESCRIPTION: Examples of using toEqualTypeOf for strict type equality assertions, including failing and passing cases.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {}\nclass Bar {\n  foo = 1\n}\n\nexpectTypeOf(new Foo()).toEqualTypeOf<Bar>()\n\nclass Foo {\n  foo = 1\n}\nclass Bar {}\n\nexpectTypeOf(new Foo()).toEqualTypeOf<Bar>()\n\nclass Foo {}\nclass Bar {}\n\nexpectTypeOf(new Foo()).toEqualTypeOf<Bar>()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Response Parser in Japa API Client\nDESCRIPTION: Example of registering a custom parser for handling responses with the 'application/vnd.api+json' content type. The parser processes the response and converts it to a usable format.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRequest } from '@japa/api-client'\n\nApiRequest.addParser('application/vnd.api+json', function (response, cb) {\n  response.setEncoding('utf-8')\n  response.text = ''\n\n  /**\n   * Concatenate chunks\n   */\n  response.on('data', (chunk) => (response.text += chunk))\n\n  /**\n   * Parse collected chunks as JSON\n   */\n  response.on('end', () => {\n    try {\n      const body = JSON.parse(response.text)\n      cb(null, body)\n    } catch (error) {\n      error.rawResponse = response.text || null\n      error.statusCode = response.statusCode\n      cb(error)\n    }\n  })\n\n  /**\n   * Report error (if any)\n   */\n  response.on('error', (error) => cb(error, null))\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Directory with Japa FS Helper\nDESCRIPTION: Shows how to create a directory recursively using the fs.mkdir method in a Japa test. The method creates the specified directory path including any necessary parent directories.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntest('copy files', async ({ fs }) => {\n  await fs.mkdir('make/controller')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Response Information in HTTP Requests using TypeScript\nDESCRIPTION: Demonstrates how to access response charset, parse Link headers, and determine the status type of HTTP responses.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.charset()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Link: <https://one.example.com>; rel=\"preconnect\", <https://two.example.com>; rel=\"preload\"\n\n{\n  preconnect: 'https://one.example.com',\n  preload: 'https://two.example.com',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.status() // 301\nresponse.statusType() // 3\n\nresponse.status() // 404\nresponse.statusType() // 4\n\nresponse.status() // 202\nresponse.statusType() // 2\n```\n\n----------------------------------------\n\nTITLE: Custom Reporter Implementation\nDESCRIPTION: Example of creating a custom test reporter by extending the BaseReporter class and implementing lifecycle methods\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseReporter } from '@japa/runner/core'\n\nclass MyCustomReporter extends BaseReporter {\n  static name = 'custom'\n\n  onTestStart(testPayload) {\n    console.log('test started \"%s\"', testPayload.title)\n  }\n  onTestEnd(testPayload) {\n    console.log('test completed \"%s\"', testPayload.title)\n  }\n\n  onGroupStart(groupPayload) {\n    console.log('group started \"%s\"', groupPayload.title)\n  }\n  onGroupEnd(groupPayload) {\n    console.log('group ended \"%s\"', groupPayload.title)\n  }\n\n  onSuiteStart(suitePayload) {\n    console.log('suite started \"%s\"', suitePayload.name)\n  }\n  onSuiteEnd(suitePayload) {\n    console.log('suite completed \"%s\"', suitePayload.name)\n  }\n\n  async start() {\n    console.log('starting')\n  }\n  async end() {\n    console.log('completed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom TestContext Methods in Japa Tests\nDESCRIPTION: Shows how to use a custom method (sleep) added to the TestContext within a Japa test.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test_context.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', ({ sleep }) => {\n  await sleep(4000)\n})\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot Test Using Japa Assert\nDESCRIPTION: Example showing how to use inline snapshot testing with Japa's assert module. Instead of creating a separate snapshot file, the snapshot value is stored within the test file.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntest('match snapshot', async ({ expect, assert }) => {\n  assert.snapshot('1').matchInline()\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with Same Members in TypeScript\nDESCRIPTION: The sameMembers assertion tests if two arrays contain the same elements, regardless of order. It uses shallow comparison like assert.equal.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nassert.sameMembers(\n  [1, 2, 3],\n  [1, 2, 3]\n) // passes\n\nassert.sameMembers(\n  [1, { id: 1 }, 3],\n  [1, { id: 1 }, 3]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Registering Snapshot Plugin in Japa Configuration\nDESCRIPTION: Code snippet showing how to import and register the snapshot plugin in Japa's configuration file. This extends the assert and expect modules with snapshot testing capabilities.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// highlight-start\nimport { snapshot } from '@japa/snapshot'\n// highlight-end\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  // highlight-start\n  plugins: [snapshot()],\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing TestContext in Japa Test Group Hooks\nDESCRIPTION: Shows how to access the TestContext in setup and teardown hooks of a Japa test group. The context is accessed via the $test.context property in the hook callbacks.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test_context.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('Maths.add', (group) => {\n  group.each.setup(($test) => {\n    console.log($test.context)\n  })\n\n  group.each.teardown(($test) => {\n    console.log($test.context)\n  })\n\n  test('add two number', (ctx) => {\n    console.log(ctx)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Github Actions Reporter Configuration\nDESCRIPTION: Configuration example for enabling the Github reporter automatically in Github Actions environment\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@japa/runner'\nimport * as reporters from '@japa/runner/reporters'\n\nconst activated = ['spec']\nif (process.env.GITHUB_ACTIONS === 'true') {\n  activated.push('github')\n}\n\nconfigure({\n  reporters: {\n    activated,\n    list: [\n      reporters.spec(),\n      reporters.ndjson(),\n      reporters.dot(),\n      reporters.github(),\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Inline Snapshot Test Using Japa Expect\nDESCRIPTION: Example showing how to use inline snapshot testing with Japa's expect module. Instead of creating a separate snapshot file, the snapshot value is stored within the test file.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntest('match snapshot', async ({ expect, assert }) => {\n  expect('1').toMatchInlineSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet shows how to configure the global timeout for all tests in the Japa test runner.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  timeout: 2000\n}\n\n{\n  // Set value to zero to disable timeout\n  timeout: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Tests in Japa\nDESCRIPTION: Demonstrates how to pin specific tests using the test.pin() method. When tests are pinned, only those tests will be run, which is useful for debugging.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('polls list', () => {\n  test('show list of public polls', () => {\n    // implementation\n  })\n\n  test('show list of participating polls', () => {\n    // implementation\n  })\n  .pin()\n\n  test('show list of authored polls', () => {\n    // implementation\n  })\n  .pin()\n})\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Assertions Plugin in Japa\nDESCRIPTION: Example configuration of the OpenAPI assertions plugin in the test runner setup file. Shows how to import and register the plugin along with @japa/assert and specify schema files.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/openapi-assertions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure, processCliArgs } from '@japa/runner'\nimport { assert } from '@japa/assert'\nimport { openapi } from '@japa/openapi-assertions'\n\nconfigure({\n  ...processCliArgs(process.argv.slice(2)),\n  ...{\n    files: ['tests/**/*.spec.js'],\n    plugins: [\n      assert(),\n      openapi({\n        schemas: [new URL('../api-spec.json', import.meta.url)]\n      })\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Test Resource Helper in a Japa Test\nDESCRIPTION: Example of how to use the createHttpServer helper function in a test. The server is automatically closed after the test completes without requiring explicit cleanup code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_resources.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { createHttpServer } from './helpers.js'\n\ntest('serve static assets', async () => {\n  const server = createHttpServer((req, res) => {\n  })\n\n  /**\n   * Here, you might request to the\n   * HTTP server.\n   *\n   * And write some assertions\n   */\n     \n  /**\n   * No need to close the server. It will be\n   * closed automatically after the test\n   */\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emitters with Done Callback\nDESCRIPTION: Demonstrates how to test event-based code using the done callback pattern and waitForDone method.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('make redis connection', async (ctx, done) => {\n  const redis = new Redis()\n  \n  redis.on('connected', () => {\n    done()\n  })\n\n  await redis.connect()\n})\n.waitForDone()\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Plugin in Test Entry Point\nDESCRIPTION: Example showing how to register and configure the file system plugin in the test entry point file\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fileSystem } from '@japa/file-system'\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [fileSystem()]\n})\n```\n\n----------------------------------------\n\nTITLE: Deep Comparing Arrays with Same Members in TypeScript\nDESCRIPTION: The sameDeepMembers assertion tests if two arrays contain the same elements using deep equality comparison, regardless of order.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nassert.sameDeepMembers(\n  [1, 2, 3],\n  [1, 2, 3]\n) // passes\n\nassert.sameDeepMembers(\n  [1, { id: 1 }, 3],\n  [1, { id: 1 }, 3]\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Skipping in Japa (TypeScript)\nDESCRIPTION: This example shows how to conditionally skip a test based on an environment variable. It checks if the code is running in a CI environment and skips the test accordingly.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/skipping_tests.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\nconst isInCI = !!process.env.CI\n\ntest('add two numbers', () => {\n})\n  .skip(isInCI)\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type and Accept Headers in HTTP Requests using TypeScript\nDESCRIPTION: Shows how to set the Content-Type and Accept headers for an HTTP request, including the use of shorthands for common MIME types.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.type('json') // Content-type: application/json\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.accept('json') // Accept: application/json\n```\n\n----------------------------------------\n\nTITLE: Registering Japa Assert Plugin in Test Configuration\nDESCRIPTION: TypeScript code to import and register the Assert plugin in the Japa test configuration file.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { assert } from '@japa/assert'\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [assert()]\n})\n```\n\n----------------------------------------\n\nTITLE: Registering @japa/expect-type Plugin in Japa Configuration\nDESCRIPTION: TypeScript code to import and register the @japa/expect-type plugin in the Japa test configuration file.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expectTypeOf } from '@japa/expect-type'\nimport { configure } from '@japa/runner'\n\nconfigure({\n  files: ['tests/**/*.spec.js'],\n  plugins: [expectTypeOf()]\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Test Timeout in Japa\nDESCRIPTION: Shows how to reset the timeout duration for a test, including resetting it within the test callback.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('get payments list', (ctx) => {\n  ctx.test.resetTimeout(60 * 10000)\n  \n  await getPaymentsList()\n})\n .timeout(2000)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites for Japa Runner in TypeScript\nDESCRIPTION: This snippet shows how to configure test suites for the Japa runner, including setting name, files, and a configuration function.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  suites: [\n    {\n      name: 'unit',\n      files: ['tests/unit/**/*.spec.js'],\n      configure: (suite) => {\n        // configure suite\n      },\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies with Japa API Client\nDESCRIPTION: Demonstrates how to set and read cookies using the API client in Japa tests, including cookie serialization.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait client\n  .post('/posts')\n  .cookies({\n    preferred_theme: 'dark',\n    some_random_key: 'random_value'\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiClient } from '@japa/api-client'\n\nApiClient.cookiesSerializer({\n  process(key, value) {\n    return unsignCookie(value)\n  },\n  \n  prepare(key, value) {\n    return signCookie(value)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Timeout in Japa\nDESCRIPTION: Demonstrates how to disable the timeout for a specific test using the disableTimeout method.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.disableTimeout()\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Constructor Parameters\nDESCRIPTION: Examples of asserting class constructor parameters and constructibility.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  constructor (name: string, age: number) {}\n}\n\nexpectTypeOf(User)\n  .constructorParameters\n  .toEqualTypeOf<[string, number]>()\n\nclass User {\n  constructor (name: string, age: number) {}\n}\n\nexpectTypeOf(User).toBeConstructibleWith('joda', 10)\n```\n\n----------------------------------------\n\nTITLE: Using expectTypeOf in a Japa Test\nDESCRIPTION: Example of using the expectTypeOf assertion in a Japa test case.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', ({ expectTypeOf }) => {\n  expectTypeOf({ foo: 'bar' }).toEqualTypeOf<{ foo: string }>()\n})\n```\n\n----------------------------------------\n\nTITLE: Using DoesNotReject Assertion in Japa\nDESCRIPTION: Examples of using the doesNotReject assertion method to check if a function does not reject a promise in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nawait assert.doesNotReject(async () => {\n  throw new Error('foo')\n}, HttpError) // passes: Error !== HttpError\n\nawait assert.doesNotReject(\n  async () => {\n    throw new HttpError('Resource not found')\n  }, \n  'Server not available'\n) // passes: Resource not found !== Server not available\n\nawait assert.doesNotReject(async () => {\n  return 'foo'\n}) // passes\n```\n\n----------------------------------------\n\nTITLE: Using StrictEqual Assertion in Japa\nDESCRIPTION: Examples of using the strictEqual assertion method for strict equality comparisons in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nassert.strictEqual(3, 3) // passes\nassert.strictEqual(3, '3') // fails\nassert.strictEqual(Symbol.for('foo'), Symbol.for('foo')) // passes\n```\n\n----------------------------------------\n\nTITLE: Lazy Evaluation for Test Skipping in Japa (TypeScript)\nDESCRIPTION: This snippet illustrates how to use a function for lazy evaluation of whether to skip a test. It pings a service asynchronously and decides to skip based on the response.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/skipping_tests.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest('get payments list', async () => {\n})\n .skip(async () => {\n   const pingStatus = await pingPaymentsService()\n   return pingStatus === 'down' ? true : false\n })\n```\n\n----------------------------------------\n\nTITLE: Retrying Tests in Japa\nDESCRIPTION: Demonstrates how to set retry counts for tests using the retry method, allowing multiple attempts before marking a test as failed.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.retry(3)\n```\n\n----------------------------------------\n\nTITLE: Asserting Array Item Types\nDESCRIPTION: Examples of asserting array item types using the items modifier.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexpectTypeOf([1, 2, 3]).items.toBeNumber()\nexpectTypeOf([1, 2, 3]).items.not.toBeString()\n```\n\n----------------------------------------\n\nTITLE: TypeScript-friendly Dataset Implementation\nDESCRIPTION: Demonstrates the recommended approach for using datasets with proper TypeScript type inference\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/datasets.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email')\n .with([\n    'some+user@gmail.com',\n    'some.user@gmail.com',\n    'email@123.123.123.123'\n  ])\n  .run(({ assert }, email) => {\n    assert.isTrue(validateEmail(email))\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Reporter\nDESCRIPTION: Example of registering a custom reporter in Japa's configuration\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  reporters: {\n    activated: [MyCustomReporter.name],\n    list: [\n      {\n        name: MyCustomReporter.name,\n        handler: (...args) => new MyCustomReporter().boot(...args),\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Equal Assertion in Japa\nDESCRIPTION: Examples of using the equal assertion method for non-strict equality comparisons in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nassert.equal(3, 3) // passes\nassert.equal(3, '3') // passes\nassert.equal(Symbol.for('foo'), Symbol.for('foo')) // passes\n```\n\n----------------------------------------\n\nTITLE: Asserting Function Return Types\nDESCRIPTION: Examples of asserting function return types using the returns modifier.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo () {}\nexpectTypeOf(foo).returns.toBeVoid()\n\nfunction foo () {\n  return 'hello world.'\n}\nexpectTypeOf(foo).returns.toBeString()\n\nclass Foo {}\nfunction foo () {\n  return new Foo()\n}\n\nexpectTypeOf(foo).returns.toEqualTypeOf<Foo>()\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 429 Too Many Requests Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 429 Too Many Requests status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertTooManyRequests()\n```\n\n----------------------------------------\n\nTITLE: Adding a Macro to ApiRequest Class in Japa API Client\nDESCRIPTION: Example of extending the ApiRequest class with a custom macro method to set a request ID header. Macros can be both functions and literal values.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRequest } from '@japa/api-client'\n\nApiRequest.macro('requestId', function (id) {\n  this.header('X-Request-Id', id)\n  return this\n})\n\n// Usage\nawait client\n  .get('/')\n  .requestId('10')\n```\n\n----------------------------------------\n\nTITLE: Testing API Response Validation\nDESCRIPTION: Example test case showing how to validate an API response against OpenAPI specifications using the isValidApiResponse assertion.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/openapi-assertions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('get /users', async ({ assert }) => {\n  const response = await supertest(baseUrl).get('/')\n  assert.isValidApiResponse(response)\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Array Subsets in TypeScript\nDESCRIPTION: Methods to assert whether an array is a subset of another array, with options for deep comparison and ordered comparison.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nassert.includeMembers([1, 2, 4, 5], [1, 2]) // passes\nassert.includeMembers([1, 2, 4, 5], [1, 3]) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notIncludeMembers([1, 2, 4, 5], [1, 3]) // passes\nassert.notIncludeMembers([1, 2, 4, 5], [1, 2]) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.includeDeepMembers(\n  [{ id: 1 }, { id: 2 }],\n  [{ id: 2 }]\n) // passes\n\nassert.includeDeepMembers(\n  [{ id: 1 }, { id: 2 }],\n  [{ id: 3 }]\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notIncludeDeepMembers(\n  [{ id: 1 }, { id: 2 }],\n  [{ id: 3 }]\n) // passes\n\nassert.notIncludeDeepMembers(\n  [{ id: 1 }, { id: 2 }],\n  [{ id: 2 }]\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.includeOrderedMembers(\n  [1, 2, 4, 5],\n  [1, 2, 4]\n) // passes\n\nassert.includeOrderedMembers(\n  [1, 2, 4, 5],\n  [1, 4, 2]\n) // fails\n\nassert.includeOrderedMembers(\n  [1, 2, 4, 5],\n  [1, 2, 5]\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notIncludeOrderedMembers(\n  [1, 2, 4, 5],\n  [1, 4, 2]\n) // passes\n\nassert.notIncludeOrderedMembers(\n  [1, 2, 4, 5],\n  [1, 2, 5]\n) // passes\n\nassert.notIncludeOrderedMembers(\n  [1, 2, 4, 5],\n  [1, 2, 4]\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.includeDeepOrderedMembers(\n  [{ id: 1 }, { id: 2 }, { id: 4 }],\n  [{ id: 1 }, { id: 2 }]\n) // passes\n\nassert.includeDeepOrderedMembers(\n  [{ id: 1 }, { id: 2 }, { id: 4 }],\n  [{ id: 1 }, { id: 4 }]\n) // fails\n\nassert.includeDeepOrderedMembers(\n  [{ id: 1 }, { id: 2 }, { id: 4 }],\n  [{ id: 1 }, { id: 4 }, { id: 2 }]\n) // fails\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notIncludeDeepOrderedMembers(\n  [{ id: 1 }, { id: 2 }, { id: 4 }],\n  [{ id: 1 }, { id: 4 }]\n) // passes\n\nassert.notIncludeDeepOrderedMembers(\n  [{ id: 1 }, { id: 2 }, { id: 4 }],\n  [{ id: 1 }, { id: 4 }, { id: 2 }]\n) // passes\n\nassert.notIncludeDeepOrderedMembers(\n  [{ id: 1 }, { id: 2 }, { id: 4 }],\n  [{ id: 1 }, { id: 2 }]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data in HTTP Requests using TypeScript\nDESCRIPTION: Demonstrates how to send JSON data in a request with the application/json content type.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.json({\n  title: 'Japa 101',\n  description: 'Something about the post',\n  tags: [1, 2, 4]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Configuration\nDESCRIPTION: Example showing how to configure custom base path and auto-clean settings for the file system plugin\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  plugins: [\n    fileSystem({\n      basePath: new URL('./tmp', import.meta.url),\n      autoClean: false,\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 418 I'm a Teapot Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 418 I'm a Teapot status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertImATeapot()\n```\n\n----------------------------------------\n\nTITLE: Testing Value is At Most in TypeScript\nDESCRIPTION: The isAtMost assertion checks if a value is less than or equal to another value. Supports numbers, dates, and luxon datetime objects.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isAtMost(2, 2) // passes\nassert.isAtMost(new Date('2020 12 20'), new Date('2020 12 20')) // passes\n```\n\n----------------------------------------\n\nTITLE: Asserting Types with Value and Generic in expectTypeOf\nDESCRIPTION: Examples of using expectTypeOf with a value and with a generic type.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = { username: string, email: string, password?: string }\nconst user = { username: 'virk', email: 'virk@example.com' }\n\n// Assert with value\nexpectTypeOf(user).toMatchTypeOf<User>()\n\n// Assert with generic\nexpectTypeOf<typeof user>().toMatchTypeOf<User>()\n```\n\n----------------------------------------\n\nTITLE: Converting Callbacks to Promises\nDESCRIPTION: Examples showing how to convert callback-based code to Promises using Node.js util.promisify.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('generate pdf', (ctx, done) => {\n  pdf\n    .create(html, options)\n    .toFile('./businesscard.pdf', function(error, res) {\n      if (error) {\n        done(error)\n      } else {\n        done()\n      }\n    })\n})\n.waitForDone()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { promisify } from 'util'\n\ntest('generate pdf', async (ctx) => {\n  const toFile = promisify(pdf.create(html, options).toFile)\n  await toFile()\n})\n```\n\n----------------------------------------\n\nTITLE: Making API Calls with Japa API Client\nDESCRIPTION: Shows how to make various HTTP requests using the API client in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('dummy test', async ({ client }) => {\n  await client.get('/users')\n\n  await client.post('/users')\n\n  await client.put('/users')\n\n  await client.patch('/users')\n\n  await client.delete('/users')\n\n  await client.head('/users')\n\n  await client.options('/users')\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with Same Members in Same Order in TypeScript\nDESCRIPTION: The sameOrderedMembers assertion tests if two arrays have identical elements in the same order using shallow comparison.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nassert.sameOrderedMembers(\n  [1, 2, 3],\n  [1, 2, 3]\n) // passes\n\nassert.sameOrderedMembers(\n  [1, 3, 2],\n  [1, 2, 3]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Testing Value is At Least in TypeScript\nDESCRIPTION: The isAtLeast assertion checks if a value is greater than or equal to another value. Supports numbers, dates, and luxon datetime objects.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isAtLeast(2, 2) // passes\nassert.isAtLeast(new Date('2020 12 20'), new Date('2020 12 20')) // passes\n```\n\n----------------------------------------\n\nTITLE: Tracing Configuration for Browser Tests\nDESCRIPTION: Configuration example for enabling and customizing trace generation for browser tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { join } from 'path'\n\nbrowserClient({\n  tracing: {\n    enabled: false, // can be enabled using --trace flag\n    event: 'onError',\n    cleanOutputDirectory: true,\n    outputDirectory: join(__dirname, '../tests/traces')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Exists Assertion in Japa\nDESCRIPTION: Examples of using the exists assertion method to check if a value is not null or undefined in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nassert.exists(false) // passes\nassert.exists(0) // passes\nassert.exists('') // passes\nassert.exists(null) // fails\nassert.exists(undefined) // fails\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Japa API Client\nDESCRIPTION: Shows how to upload files using the API client in Japa tests, including support for file paths, buffers, and streams.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client\n  .post('/posts')\n  .file('cover_image', join(__dirname, '..', 'cover-image.jpg'))\n  .fields({\n    title: 'Japa 101',\n    description: 'Something about the post',\n    tags: [1, 2, 4]\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeout in Japa\nDESCRIPTION: Explains how to set a custom timeout for a test using the timeout method, overriding the default config value.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.timeout(6000)\n```\n\n----------------------------------------\n\nTITLE: Deep Comparing Arrays with Same Members in Same Order in TypeScript\nDESCRIPTION: The sameDeepOrderedMembers assertion tests if two arrays have identical elements in the same order using deep equality comparison.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nassert.sameDeepOrderedMembers(\n  [1, { id: 1 }, { name: 'virk' }],\n  [1, { id: 1 }, { name: 'virk' }]\n) // passes\n\nassert.sameDeepOrderedMembers(\n  [1, { id: 1 }, { name: 'virk' }],\n  [1, { name: 'virk' }, { id: 1 }]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots via CLI\nDESCRIPTION: Commands to update existing snapshots by running tests with the --update-snapshots flag or its shorthand -u.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --update-snapshots\n\n# Or use the alias\nnode bin/test.js -u\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Test Title in Japa\nDESCRIPTION: Shows how to filter tests by their individual test title using the --tests flag. This requires an exact match of the test title.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('polls list', () => {\n  test('show list of public polls', () => {\n  })\n})\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --tests=\"show list of public polls\"\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Headers in HTTP Requests using TypeScript\nDESCRIPTION: Shows how to set Basic Auth and Bearer Token authentication headers for HTTP requests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Authorization: Basic dmlyazpzZWNyZXQ=\nrequest.basicAuth('virk', 'secret')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Authorization: Bearer foo-bar\nrequest.bearerToken('foo-bar')\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Reason in Japa (TypeScript)\nDESCRIPTION: This snippet demonstrates how to skip a test using the test.skip method, providing a reason for skipping. It imports the test function from @japa/runner and defines a test that is skipped with a specified reason.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/skipping_tests.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest('get payments list', async () => {\n})\n .skip(true, 'Payments service is down')\n```\n\n----------------------------------------\n\nTITLE: Deep Comparing Arrays with Different Members in TypeScript\nDESCRIPTION: The notSameDeepMembers assertion tests if two arrays contain different elements using deep equality comparison.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notSameDeepMembers(\n  [1, { id: 1 }, 3],\n  [1, { id: 2 }, 3]\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Resolution Types\nDESCRIPTION: Examples of asserting types of resolved promises using the resolves modifier.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function foo () {\n  return 'hello world.'\n}\n\nexpectTypeOf(foo()).resolves.toBeString()\nexpectTypeOf(Promise.resolve(1)).resolves.toBeString()\n\nasync function foo () {\n  return 'hello world.'\n}\n\nexpectTypeOf(foo).returns.resolves.toBeString()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Different Node.js Environments\nDESCRIPTION: Examples of running Japa tests using different Node.js runtimes and TypeScript tooling, including Node.js, Bun, ts-node, and tsx.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Node.js\nnode bin/tests.js\n\n# Bun\nbun bin/tests.js\n\n# TypeScript and TS Node\nnode --import ts-node-maintained/register/esm bin/test.ts\n\n# TypeScript with TSX\nnpx tsx bin/tests.js\n```\n\n----------------------------------------\n\nTITLE: Testing element enablement with assertNotDisabled in TypeScript\nDESCRIPTION: Demonstrates how to assert that an element (like a button) is not disabled in a web page. This method checks that the specified selector does not have a disabled attribute.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = visit('/')\nawait page.assertNotDisabled('button[type=\"submit\"]')\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable HTTP Server Test Resource\nDESCRIPTION: Implementation of a helper function that creates an HTTP server and registers a cleanup function with Japa's API. This approach automates resource cleanup after test completion.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_resources.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/helpers.js\nimport { promisify } from 'node:utils'\nimport { createServer } from 'node:http'\n// highlight-start\nimport { getActiveTest } from '@japa/runner'\n// highlight-end\n\nexport function createHttpServer(callback) {\n  const server = createServer(callback)\n\n  // highlight-start\n  const test = getActiveTest()\n  test.cleanup(() => promisify(server.close)())\n  // highlight-end\n  \n  server.listen(somePort)\n  return server\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Suites in Japa\nDESCRIPTION: Shell command to run tests from multiple suites by specifying multiple suite names. This example shows how to run both unit and functional test suites.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode bin/test.js unit functional\n```\n\n----------------------------------------\n\nTITLE: Testing Object or Array Does Not Contain Subset in TypeScript\nDESCRIPTION: The notContainsSubset assertion checks if an object or array does not contain all properties/elements from another object or array.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notContainsSubset(\n  { id: 1, created_at: Date },\n  { email: 'foo@bar.com' }\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Testing String Matches RegExp in TypeScript\nDESCRIPTION: The match assertion checks if a string matches a regular expression pattern.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nassert.match('foobar', /^foo/) // passes\n```\n\n----------------------------------------\n\nTITLE: Creating Test Directory Structure\nDESCRIPTION: Shell commands to create the tests directory and an example test file following Japa's default convention.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/installation_and_usage.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tests\ntouch tests/example.spec.js\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Done Callback\nDESCRIPTION: Shows how to handle errors in event-based tests using the done callback.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('make redis connection', async (ctx, done) => {\n  const redis = new Redis()\n  \n  redis.on('connected', () => {\n    done()\n  })\n\n  redis.on('error', (error) => {\n    done(error)\n  })\n\n  await redis.connect()\n})\n.waitForDone()\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Test Using Japa Expect\nDESCRIPTION: Example showing how to use the snapshot testing with Japa's expect module. It creates a snapshot of the value '1' and matches it against the stored snapshot.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntest('match snapshot', async ({ assert, expect }) => {\n  expect('1').toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Value is in Collection in TypeScript\nDESCRIPTION: The oneOf assertion tests if a value exists in a provided collection of values. Works only with literal values.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nassert.oneOf('foo', ['foo', 'bar', 'baz']) // passes\nassert.oneOf('foo', ['bar', 'baz']) // fails\n```\n\n----------------------------------------\n\nTITLE: Testing Type of Value in TypeScript\nDESCRIPTION: The typeOf assertion checks if a value is of a specific type, supporting objects, arrays, dates, and primitive types.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nassert.typeOf({ foo: 'bar' }, 'object') // passes\nassert.typeOf(['admin'], 'array') // passes\nassert.typeOf(new Date(), 'date') // passes\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Instance Properties\nDESCRIPTION: Example of asserting class instance properties using the instance modifier.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  constructor(\n    private firstName: string,\n    private lastName: string\n  ) {}\n\n  fullName(): string {\n    return `${this.firstName} ${this.lastName}`\n  }\n}\n\nexpectTypeOf(User).instance.toHaveProperty('fullName')\n\n// FAILS. \"firstName\" and \"lastName\" are private\nexpectTypeOf(User).instance.toHaveProperty('firstName')\nexpectTypeOf(User).instance.toHaveProperty('lastName')\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporters for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet shows how to configure reporters for the Japa test runner, including using pre-defined reporters and inline functions.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconfigure({\n  reporters: [\n    specReporter()\n  ]\n})\n\n// Or an inline function\nconfigure({\n  reporters: [\n    function (runner, emitter) {\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Include Assertion in Japa\nDESCRIPTION: Examples of using the include assertion method to check if a collection includes an item in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nassert.include(\n  { id: 1, name: 'virk' },\n  { name: 'virk' }\n) // passes\n\nassert.include([1, 2, 3], 2) // passes\nassert.include('hello world', 'hello') // passes\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Null Values in TypeScript\nDESCRIPTION: Shows the isNotNull assertion method which checks if a value is not null\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotNull(null) // fails\nassert.isNotNull(true) // passes\nassert.isNotNull(false) // passes\nassert.isNotNull('foo') // passes\n```\n\n----------------------------------------\n\nTITLE: Testing Value is Above in TypeScript\nDESCRIPTION: The isAbove assertion checks if a value is greater than another value. Supports numbers, dates, and luxon datetime objects.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isAbove(5, 2) // passes\nassert.isAbove(new Date('2020 12 20'), new Date('2020 12 18')) // passes\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Options in Japa\nDESCRIPTION: Demonstrates how to access test options and properties within the test callback using ctx.test.options.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', (ctx) => {\n  console.log(ctx.test.options)\n})\n\n/**\n  {\n    title: string\n    tags: string[]\n    timeout: number\n    meta: {\n      suite: Suite,\n      group: Group,\n      fileName: string\n    }\n    retries?: number\n    executor?: TestExecutor<any, any>\n    isTodo: false\n  }\n*/\n```\n\n----------------------------------------\n\nTITLE: Testing Object Types in TypeScript\nDESCRIPTION: Demonstrates the isObject assertion method which verifies that a value is a valid object literal\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isObject({}) // passes\nassert.isObject(new SomeClass()) // passes\nassert.isObject(null) // fails\nassert.isObject([]) // fails\n```\n\n----------------------------------------\n\nTITLE: Using NotEmpty/IsNotEmpty Assertion in Japa\nDESCRIPTION: Examples of using the notEmpty and isNotEmpty assertion methods to check if a value is not empty in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nassert.notEmpty([1, 2]) // passes\nassert.notEmpty({ foo: 'bar' }) // passes\nassert.notEmpty('hello') // passes\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Node.js Command\nDESCRIPTION: A shell command that runs the Japa test suite using the Node.js executable. This command executes the test file located at bin/test.js.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js\n```\n\n----------------------------------------\n\nTITLE: Using exclude and extract for Complex Union Types\nDESCRIPTION: Examples of using exclude and extract methods to narrow down or select specific types from union types.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype User =\n  | { email: string; age: number } \n  | { username: string; age: number }\n\nexpectTypeOf<User>()\n  .exclude<{ email: string }>()\n  .toEqualTypeOf<{ username: string; age: number }>()\n\ntype KeyName = string | number | symbol\n\nexpectTypeOf<KeyName>()\n  .exclude<string>()\n  .toEqualTypeOf<number | symbol>()\n\ntype KeyName = string | number | symbol\n\nexpectTypeOf<KeyName>()\n  .extract<string>()\n  .toEqualTypeOf<string>()\n```\n\n----------------------------------------\n\nTITLE: Installing File System Plugin with NPM\nDESCRIPTION: Command to install the @japa/file-system plugin as a dev dependency\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/file_system.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D @japa/file-system\n```\n\n----------------------------------------\n\nTITLE: Forcing Test Failures in TypeScript\nDESCRIPTION: Shows the fail assertion method which explicitly fails a test with an optional message and comparison values\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nassert.fail() // fail\nassert.fail('Error message for the failure')\nassert.fail(1, 2, 'expected 1 to equal 2')\nassert.fail(1, 2, 'expected 1 to be greater than 2', '>')\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Request Serializer in Japa API Client\nDESCRIPTION: Example of registering a custom serializer for the 'application/vnd.api+json' content type to format request bodies before sending to the server. The serializer converts the request body to a string representation.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiRequest } from '@japa/api-client'\n\nApiRequest.addSerializer('application/vnd.api+json', function (value) {\n  return JSON.stringify(value)\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Titles with the tap Method in TypeScript\nDESCRIPTION: Uses the group.tap method to access and modify each test object within a group. This example prefixes all test titles with \"it\" to create BDD-style test descriptions, affecting how tests appear in the output.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('polls list', (group) => {\n  // highlight-start\n  group.tap((t) => {\n    t.options.title = `it ${t.options.title}`\n  })\n  // highlight-end\n\n  test('shows list of public polls', () => {\n  })\n\n  test('shows list of participating polls', () => {\n  })\n\n  test('shows list of authored polls', () => {\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using File Management Macro in Japa Tests\nDESCRIPTION: Demonstrates how to use the previously defined file management macro in a test case. The macro creates a package.json file that will be automatically removed after the test completes.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_macros.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { useFile } from './macros.js'\n\ntest('read main property from package.json file', async () => {\n  await useFile('package.json', JSON.stringify({ main: 'index.js' }))\n})\n```\n\n----------------------------------------\n\nTITLE: Installing c8 for Code Coverage with Japa\nDESCRIPTION: Installation command for the c8 code coverage tool as a development dependency.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/coverage.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D c8\n```\n\n----------------------------------------\n\nTITLE: Testing Value is Below in TypeScript\nDESCRIPTION: The isBelow assertion checks if a value is less than another value. Supports numbers, dates, and luxon datetime objects.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isBelow(2, 5) // passes\nassert.isBelow(new Date('2020 12 20'), new Date('2020 12 24')) // passes\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Output Directory for Japa Browser Tests\nDESCRIPTION: This snippet shows how to configure the output directory for trace files in Japa browser tests using the browserClient configuration.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nbrowserClient({\n  tracing: {\n    enabled: false, // will be enabled using the --trace flag\n    event: 'onError',\n    cleanOutputDirectory: true,\n    // highlight-start\n    outputDirectory: join(__dirname, '../tests/traces')\n    // highlight-end\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Query String Parameters in HTTP Requests using TypeScript\nDESCRIPTION: Shows how to set query string parameters for an HTTP request.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.qs({\n  order_by: 'id',\n  direction: 'desc'\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing TestContext Inside a Test in Japa\nDESCRIPTION: Demonstrates how to access the TestContext object inside a Japa test. The context is passed as an argument to the test callback function.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test_context.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest('add two numbers', (ctx) => {\n  console.log(ctx)\n})\n```\n\n----------------------------------------\n\nTITLE: Running Tests with nyc Coverage\nDESCRIPTION: Command to execute tests using the npm script configured with nyc for code coverage.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/coverage.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Exit for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the force exit option for the Japa test runner, useful for applications with long-lived connections.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  forceExit: true\n}\n```\n\n----------------------------------------\n\nTITLE: Validating input values with assertInputValue in TypeScript\nDESCRIPTION: Shows how to assert that an input element's value matches an expected string. This assertion works with input, textarea, or select elements and verifies their current value.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = visit('/')\nawait page.assertInputValue('input[name=\"username\"]', 'virk')\n```\n\n----------------------------------------\n\nTITLE: Asserting Function Parameters\nDESCRIPTION: Examples of asserting function parameter types using the parameters modifier.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greetUser(name: string, age: number) {}\n\nexpectTypeOf(greetUser).parameters.toEqualTypeOf<[string, number]>()\n\nfunction greetUser(name: string, age: number) {}\n\nexpectTypeOf(greetUser).parameter(0).toBeString()\nexpectTypeOf(greetUser).parameter(1).toBeNumber()\n```\n\n----------------------------------------\n\nTITLE: Running Japa Browser Tests with CLI Commands\nDESCRIPTION: Commands for running browser tests with various options like headless mode and slow motion.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js\n\n# Run tests for browser suite\nnode bin/test.js browser\n\n# Launch browser\nnode bin/test.js browser --headed\n\n# Run in slow motion\nnode bin/test.js browser --headed --slow\n```\n\n----------------------------------------\n\nTITLE: Installing @japa/expect-type Plugin\nDESCRIPTION: Command to install the @japa/expect-type plugin from npm registry.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/expect-type\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suites in Japa\nDESCRIPTION: Shell command to run tests from a specific suite by specifying the suite name after the test file name. This example demonstrates running only unit tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode bin/test.js unit\n```\n\n----------------------------------------\n\nTITLE: Example of Generated Snapshot File\nDESCRIPTION: Shows the format of the generated snapshot file. Each snapshot is exported with a key that combines the test title and a sequence counter.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexports['match snapshot 1'] = `\"1\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for c8 with Japa\nDESCRIPTION: JSON configuration for package.json that sets up the test script to use c8 for code coverage when running Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/coverage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"c8 node bin/test.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Promisifying Event Listeners\nDESCRIPTION: Shows how to convert event listeners to Promises using the p-event package.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/testing_async_code.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport pEvent from 'p-event'\n\ntest('make redis connection', async (ctx) => {\n  const redis = new Redis()\n  await Promise.all([\n    pEvent(\n      redis,\n      'connected',\n      { rejectionEvents: ['error'] }\n    ),\n    redis.connect()\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Japa Snapshot Plugin via npm\nDESCRIPTION: Command to install the @japa/snapshot package as a development dependency using npm.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/snapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Importer for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet shows how to configure a custom importer function for the Japa test runner to handle file imports.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  importer: (filePath) => import(filePath)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing True Boolean Values in TypeScript\nDESCRIPTION: Demonstrates the isTrue assertion method which verifies that a value is boolean true\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isTrue(true) // passes\nassert.isTrue(false) // fails\nassert.isTrue(1) // fails\nassert.isTrue('foo') // fails\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Multi-Browser Testing in Japa\nDESCRIPTION: This snippet demonstrates how to set up NPM scripts to run Japa tests on different browsers and combine them into a single command.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"test:firefox\": \"node bin/test.js --browser=firefox\",\n  \"test:chromium\": \"node bin/test.js --browser=chromium\",\n  \"test\": \"npm run test:firefox && npm run test:chromium\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using try/finally for Reliable HTTP Server Cleanup\nDESCRIPTION: Example of using try/finally statement to ensure the HTTP server is always closed after the test, even if an exception occurs. While effective, this approach adds visual noise to test code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_resources.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\nimport { promisify } from 'node:utils'\nimport { createServer } from 'node:http'\n\ntest('serve static assets', async () => {\n  const server = createServer((req, res) => {\n  })\n  server.listen(somePort)\n  \n  // insert-start\n  try {\n    /**\n     * Here, you might make a request to the\n     * HTTP server.\n     *\n     * And write some assertions\n     */\n  } finally {\n    await promisify(server.close)()\n  }\n  // insert-end\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by File or Folder in Japa\nDESCRIPTION: Shows how to run tests from specific files or folders using the --files flag. This is useful for organizing tests by resource, action, and scenario.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --files=\"register\"\n\nnode bin/test.js --files=\"users/register\"\n\nnode bin/test.js --files=\"polls/*\"\n```\n\n----------------------------------------\n\nTITLE: Testing Object is Not Sealed in TypeScript\nDESCRIPTION: The notSealed/isNotSealed assertion checks if an object is not sealed, allowing addition of new properties.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notSealed({}) // passes\nassert.notSealed(Object.seal({})) // fails\n\nassert.isNotSealed({}) // passes\nassert.isNotSealed(Object.seal({})) // fails\n```\n\n----------------------------------------\n\nTITLE: Testing String Does Not Match RegExp in TypeScript\nDESCRIPTION: The notMatch assertion checks if a string does not match a regular expression pattern.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notMatch('foobar', /^foo/) // fails\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Assertions Plugin\nDESCRIPTION: Command to install the @japa/openapi-assertions package as a dev dependency using npm.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/openapi-assertions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/openapi-assertions\n```\n\n----------------------------------------\n\nTITLE: Test Summary Structure\nDESCRIPTION: Example structure of the test summary object showing available properties\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  aggregates: {\n    total: 3,\n    failed: 0,\n    passed: 3,\n    regression: 0,\n    skipped: 0,\n    todo: 0\n  },\n  hasError: false,\n  duration: 4,\n  failureTree: [],\n  failedTestsTitles: []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Browser Client Plugin\nDESCRIPTION: Example of the full configuration options available when setting up the browser client plugin.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nplugins: [\n  browserClient({\n    runInSuites: ['browser'],\n    contextOptions: {},\n    tracing: {\n      enabled: false,\n      event: 'onError',\n      cleanOutputDirectory: true,\n      outputDirectory: join(__dirname, '..')\n    }\n  })\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Defined Values in TypeScript\nDESCRIPTION: Shows the isDefined assertion method which checks if a value is not undefined\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isDefined(undefined) // fails\nassert.isDefined(0) // passes\nassert.isDefined(false) // passes\nassert.isDefined('') // passes\nassert.isDefined(null) // passes\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Refiner for Japa Test Runner in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a custom refiner object for the Japa test runner to customize the filter's logic.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/runner_config.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  refiner: {\n    filters: {},\n    pinnedTests: new Set(),\n    \n    add(layer, values) {\n      this.filters[layer].push(...values)\n    },\n      \n    pinTest(test) {\n      this.pinnedTests.add(test)\n    }\n      \n    allows(testOrGroup) {\n      return true \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Context Options Configuration\nDESCRIPTION: Example showing how to configure options for the browser context, such as setting a base URL and color scheme.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nbrowserClient({\n  contextOptions: {\n    baseURL: 'http://localhost:3333',\n    colorScheme: 'dark',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Numerical Proximity in TypeScript\nDESCRIPTION: Demonstrates the closeTo assertion method which checks if a value is within a specified range of another value\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nassert.closeTo(10, 6, 8) // passes\nassert.closeTo(10, 6, 4) // passes\nassert.closeTo(10, 20, 10) // passes\n```\n\n----------------------------------------\n\nTITLE: Testing Object is Not Frozen in TypeScript\nDESCRIPTION: The notFrozen/isNotFrozen assertion checks if an object is not frozen, allowing modification of properties.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notFrozen({}) // passes\nassert.notFrozen(Object.freeze({})) // fails\n\nassert.isNotFrozen({}) // passes\nassert.isNotFrozen(Object.freeze({})) // fails\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS and SSL Options for HTTP Requests in TypeScript\nDESCRIPTION: Shows how to configure TLS settings and handle insecure SSL connections for localhost in HTTP requests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.trustLocalhost()\n\n// disable\nrequest.trustLocalhost(false)\n```\n\n----------------------------------------\n\nTITLE: Testing Non-False Values in TypeScript\nDESCRIPTION: Demonstrates the isNotFalse assertion method which verifies that a value is anything except boolean false\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotFalse(false) // fails\nassert.isNotFalse(true) // passes\nassert.isNotFalse(null) // passes\nassert.isNotFalse(undefined) // passes\n```\n\n----------------------------------------\n\nTITLE: Testing Value is Array in TypeScript\nDESCRIPTION: The isArray assertion checks if a value is a valid array.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isArray([]) // passes\nassert.isArray({}) // fails\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Augmentation for Japa API Client Extensions\nDESCRIPTION: Using TypeScript's module augmentation to declare custom properties added at runtime through getters and macros. This code informs the TypeScript compiler about these new properties.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@japa/api-client' {\n    \n  // Interface must match the class name\n  interface ApiRequest {\n    requestId(id: string): this\n  }\n\n  interface ApiResponse {\n    responseTime: string | undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Example of Nested Groups in TypeScript\nDESCRIPTION: Demonstrates an anti-pattern of using nested test groups with shared state. This example creates a user in the top-level group's setup and attempts to use it in deeply nested tests, which can lead to maintainability issues.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet user\n\ntest.group('A top level group', (group) => {\n  group.setup(() => {\n    user = await getUserForTesting()\n  })\n  \n  test.group('a nested group', () => {\n    test.group('another level of testing', () => {\n      test('use the user in the test', () => {\n        console.log(user)\n      })\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Modified Test File with Inline Snapshots\nDESCRIPTION: Shows how the test file looks after running with inline snapshots. The plugin modifies the test file by adding the snapshot values as arguments to the assertion methods.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/snapshot.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ntest('match snapshot', async ({ expect, assert }) => {\n  // with @japa/assert\n  assert.snapshot('1').matchInline('\"1\"')\n\n  // with @japa/expect\n  expect('1').toMatchInlineSnapshot('\"1\"')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Boolean Negation in TypeScript\nDESCRIPTION: Demonstrates the isNotBoolean assertion method which verifies that a value is not a boolean type\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotBoolean(1) // passes\nassert.isNotBoolean(false) // fails\nassert.isNotBoolean(true) // fails\n```\n\n----------------------------------------\n\nTITLE: Testing Value is Not of Type in TypeScript\nDESCRIPTION: The notTypeOf assertion checks if a value is not of a specific type.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notTypeOf({ foo: 'bar' }, 'array') // passes\nassert.notTypeOf(['admin'], 'string') // passes\n```\n\n----------------------------------------\n\nTITLE: Testing Number Values in TypeScript\nDESCRIPTION: Demonstrates the isNumber assertion method which verifies that a value is a valid number\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNumber(1) // passes\nassert.isNumber(new Number('1')) // passes\nassert.isNumber('1') // fails\n```\n\n----------------------------------------\n\nTITLE: Using LengthOf Assertion in Japa\nDESCRIPTION: Examples of using the lengthOf assertion method to check the length of arrays, maps, sets, and strings in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nassert.lengthOf([1, 2, 3], 3)\nassert.lengthOf(new Map([[1],[2]]), 2)\nassert.lengthOf('hello world', 11)\n```\n\n----------------------------------------\n\nTITLE: Planning Test Assertions in TypeScript\nDESCRIPTION: Demonstrates the plan assertion method which specifies the expected number of assertions in a test\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nassert.plan(2)\n```\n\n----------------------------------------\n\nTITLE: Testing Function Types in TypeScript\nDESCRIPTION: Demonstrates the isFunction assertion method which verifies that a value is a function\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isFunction(function foo () {}) // passes\nassert.isFunction(() => {}) // passes\nassert.isFunction(class Foo {}) // passes\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with Different Order or Members in TypeScript\nDESCRIPTION: The notSameOrderedMembers assertion tests if two arrays have different elements or the same elements in a different order using shallow comparison.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notSameOrderedMembers(\n  [1, 2, 3],\n  [1, 2, 3]\n) // passes\n\nassert.notSameOrderedMembers(\n  [1, 3, 2],\n  [1, 2, 3]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Using the not Modifier for Inverse Assertions\nDESCRIPTION: Examples of using the not modifier to inverse type assertions.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexpectTypeOf(1).not.toBeString()\nexpectTypeOf('hello world').not.toBeNumber()\n\nfunction foo() {\n  return 'hello world.'\n}\nexpectTypeOf(foo).returns.not.toBeAny()\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 410 Gone Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 410 Gone status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertGone()\n```\n\n----------------------------------------\n\nTITLE: Testing Non-True Values in TypeScript\nDESCRIPTION: Shows the isNotTrue assertion method which checks if a value is not boolean true\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotTrue(true) // fails\nassert.isNotTrue(false) // passes\nassert.isNotTrue(1) // passes\nassert.isNotTrue('foo') // passes\n```\n\n----------------------------------------\n\nTITLE: Testing NaN Values in TypeScript\nDESCRIPTION: Demonstrates the isNaN assertion method which verifies that a value is NaN\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNaN(NaN) // passes\nassert.isNaN(Number('hello')) // passes\nassert.isNaN(true) // fails\nassert.isNaN(false) // fails\nassert.isNaN(null) // fails\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with Different Members in TypeScript\nDESCRIPTION: The notSameMembers assertion tests if two arrays have different elements. It uses shallow comparison like assert.notEqual.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notSameMembers(\n  [1, { id: 1 }, 3],\n  [1, { id: 1 }, 3]\n) // passes\n\nassert.notSameMembers(\n  [1, 2, 3],\n  [1, 2, 3]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Object Types in TypeScript\nDESCRIPTION: Shows the isNotObject assertion method which checks if a value is not an object literal\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotObject(null) // passes\nassert.isNotObject([]) // passes\nassert.isNotObject({}) // fails\nassert.isNotObject(new SomeClass()) // fails\n```\n\n----------------------------------------\n\nTITLE: Using Empty/IsEmpty Assertion in Japa\nDESCRIPTION: Examples of using the empty and isEmpty assertion methods to check if a value is empty in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nassert.empty([]) // passes\nassert.empty('') // passes\n\nassert.isEmpty([]) // passes\nassert.isEmpty('') // passes\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 409 Conflict Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 409 Conflict status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertConflict()\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 404 Not Found Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 404 Not Found status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertNotFound()\n```\n\n----------------------------------------\n\nTITLE: Testing String Values in TypeScript\nDESCRIPTION: Demonstrates the isString assertion method which verifies that a value is a string literal\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isString('') // passes\nassert.isString(new String(true)) // passes\nassert.isString(1) // fails\n```\n\n----------------------------------------\n\nTITLE: Deep Comparing Arrays with Different Order or Members in TypeScript\nDESCRIPTION: The notSameDeepOrderedMembers assertion tests if two arrays have different elements or the same elements in a different order using deep equality comparison.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notSameDeepOrderedMembers(\n  [1, { id: 1 }, { name: 'virk' }],\n  [1, { name: 'virk' }, { id: 1 }]\n) // passes\n\nassert.notSameDeepOrderedMembers(\n  [1, { id: 1 }, { name: 'virk' }],\n  [1, { id: 1 }, { name: 'virk' }]\n) // fails\n```\n\n----------------------------------------\n\nTITLE: Example Test Output Showing Modified Test Titles\nDESCRIPTION: Shows the console output from running tests with titles modified by the group.tap method. The output displays the test group name and three successful tests with prefixed titles and execution times.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/grouping_tests.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n// title: Output\nfunctional / polls list (tests/functional/polls/list/logged_in.spec.js)\n  ✔ it shows list of public polls (0.53ms)\n  ✔ it shows list of participating polls (0.04ms)\n  ✔ it shows list of authored polls (0.04ms)\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 405 Method Not Allowed Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 405 Method Not Allowed status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertMethodNotAllowed()\n```\n\n----------------------------------------\n\nTITLE: Using toMatchTypeOf for Less Strict Type Matching\nDESCRIPTION: Examples of using toMatchTypeOf for less strict type matching, allowing additional properties.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/expect_type.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {}\nclass Bar {\n  foo = 1\n}\n\nexpectTypeOf(new Foo()).toMatchTypeOf<Bar>()\n\nclass Foo {\n  foo = 1\n}\nclass Bar {}\n\nexpectTypeOf(new Foo()).toMatchTypeOf<Bar>()\n\nclass Foo {}\nclass Bar {}\n\nexpectTypeOf(new Foo()).toMatchTypeOf<Bar>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bail Layer in Japa Test Runner (Shell)\nDESCRIPTION: These commands demonstrate how to specify the layer at which bail mode should be applied using the --bail-layer CLI flag. Options include 'suite' to skip tests in the current suite, or 'group' to skip tests in the current group.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/bail_mode.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --bail --bail-layer=suite\n\nnode bin/test.js --bail --bail-layer=group\n```\n\n----------------------------------------\n\nTITLE: Testing Object is Frozen in TypeScript\nDESCRIPTION: The frozen/isFrozen assertion checks if an object is frozen, preventing modification of properties and structure.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nassert.frozen(Object.freeze({})) // passes\nassert.frozen({}) // fails\n\nassert.isFrozen(Object.freeze({})) // passes\nassert.isFrozen({}) // fails\n```\n\n----------------------------------------\n\nTITLE: Running Failed Tests in Japa\nDESCRIPTION: Shows how to run only the tests that failed in the previous execution using the --failed flag. This is useful for focusing on fixing failing tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/filtering_tests.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --failed\n```\n\n----------------------------------------\n\nTITLE: Asserting Instance Type in TypeScript\nDESCRIPTION: The instanceOf and notInstanceOf methods assert whether a value is or is not an instance of the expected class.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nassert.instanceOf(new User(), User) // passes\nassert.instanceOf(new User(), Function) // fails\n\nclass User extends BaseUser {}\nassert.instanceOf(new User(), BaseUser) // passes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nassert.notInstanceOf(new User(), Function) // passes\nassert.notInstanceOf(new User(), User) // fails\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 406 Not Acceptable Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 406 Not Acceptable status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertNotAcceptable()\n```\n\n----------------------------------------\n\nTITLE: Conditional Pausing in Japa Browser Tests\nDESCRIPTION: This snippet demonstrates how to use conditional pausing methods in Japa browser tests based on environment variables.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntest('visit home page', async ({ visit }) => {\n  const page = await visit('/')\n  await page.pauseIf(process.env.DEBUG_TEST)\n  await page.pauseUnless(process.env.NO_DEBUG)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Value is Not Array in TypeScript\nDESCRIPTION: The isNotArray assertion checks if a value is not an array.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotArray([]) // fails\nassert.isNotArray({}) // passes\n```\n\n----------------------------------------\n\nTITLE: Testing False Boolean Values in TypeScript\nDESCRIPTION: Shows the isFalse assertion method which checks if a value is exactly boolean false\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isFalse(false) // passes\nassert.isFalse(true) // fails\nassert.isFalse(0) // fails\nassert.isFalse(null) // fails\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 408 Request Timeout Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 408 Request Timeout status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertRequestTimeout()\n```\n\n----------------------------------------\n\nTITLE: Adding a Getter to ApiResponse Class in Japa API Client\nDESCRIPTION: Example of extending the ApiResponse class with a custom getter to access response time from headers. Getters are evaluated lazily when the property is accessed.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiResponse } from '@japa/api-client'\n\nApiResponse.getter('responseTime', function () {\n  return this.header('X-Time')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Value is Boolean in TypeScript\nDESCRIPTION: The isBoolean assertion checks if a value is a boolean (true or false).\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isBoolean(true) // passes\nassert.isBoolean(false) // passes\nassert.isBoolean(1) // fails\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 423 Locked Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 423 Locked status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertLocked()\n```\n\n----------------------------------------\n\nTITLE: Defining ViewPostPage Class in TypeScript for Japa Browser Tests\nDESCRIPTION: This snippet defines a ViewPostPage class that extends BasePage, providing methods for asserting the viewing of a post in browser tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BasePage } from '@japa/browser-client'\n\nexport class ViewPostPage extends BasePage {\n  async assertViewingPost(title: string) {\n    await this.page.assertPathMatches(/\\/posts\\/[0-9]+/)\n\n    await this.page.assertExists(\n      this.page.locator('.post h1', { hasText: title })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with c8 Coverage\nDESCRIPTION: Command to execute tests using the npm script configured with c8 for code coverage.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/coverage.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Custom Browser Launcher Configuration\nDESCRIPTION: Example of implementing a custom browser launcher function to use Firefox with custom options instead of the default Chromium browser.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { firefox } from 'playwright'\n\nbrowserClient({\n  async launcher(options) {\n    return firefox.launch({\n      ...options,\n      ...customOptionsToMerge\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Null Values in TypeScript\nDESCRIPTION: Demonstrates the isNull assertion method which verifies that a value is null\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNull(null) // passes\nassert.isNull(true) // fails\nassert.isNull(false) // fails\nassert.isNull('foo') // fails\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 422 Unprocessable Entity Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 422 Unprocessable Entity status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertUnprocessableEntity()\n```\n\n----------------------------------------\n\nTITLE: Installing nyc for Code Coverage with Japa\nDESCRIPTION: Installation command for the nyc (Istanbul) code coverage tool as a development dependency.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/coverage.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D nyc\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 414 URI Too Long Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 414 URI Too Long status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertURITooLong()\n```\n\n----------------------------------------\n\nTITLE: Testing Undefined Values in TypeScript\nDESCRIPTION: Demonstrates the isUndefined assertion method which verifies that a value is explicitly undefined\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isUndefined(undefined) // passes\nassert.isUndefined(false) // fails\nassert.isUndefined(0) // fails\nassert.isUndefined('') // fails\nassert.isUndefined(null) // fails\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Number Values in TypeScript\nDESCRIPTION: Shows the isNotNumber assertion method which checks if a value is not a number\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotNumber('1') // passes\nassert.isNotNumber(1) // fails\n```\n\n----------------------------------------\n\nTITLE: Using ViewPostPage in Japa Browser Test for Post Creation\nDESCRIPTION: This snippet demonstrates how to use the ViewPostPage class in a Japa test to create a post and assert viewing it after creation.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewPostPage } from './pages/view_post_page.js'\n\ntest.group('Posts | create', () => {\n  test('create post and redirect to single post view', async ({ visit }) => {\n    const page = await visit('/posts/create')\n    const post = await getPostData()\n    await page.submitForm(post)\n\n    await page\n      .use(ViewPostPage)\n      .assertViewingPost(post.title)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for nyc with Japa\nDESCRIPTION: JSON configuration for package.json that sets up the test script to use nyc for code coverage when running Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/coverage.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"nyc node bin/test.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Finite Numbers in TypeScript\nDESCRIPTION: Shows the isFinite assertion method which checks if a value is a finite number\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isFinite(1) // passes\nassert.isFinite(Infinity) // fails\nassert.isFinite(NaN) // fails\n```\n\n----------------------------------------\n\nTITLE: Installing Japa Browser Client Plugin\nDESCRIPTION: Command to install the @japa/browser-client package as a development dependency.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/browser-client\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 413 Payload Too Large Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 413 Payload Too Large status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertPayloadTooLarge()\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Function Types in TypeScript\nDESCRIPTION: Shows the isNotFunction assertion method which checks if a value is not a function\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotFunction({}) // passes\nassert.isNotFunction(null) // passes\nassert.isNotFunction(() => {}) // fails\n```\n\n----------------------------------------\n\nTITLE: Checking Response Properties in HTTP Requests using TypeScript\nDESCRIPTION: Shows methods to check for the presence of body, errors, and fatal errors in HTTP responses.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nif (response.hasBody()) {\n  response.body()\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (response.hasError()) {\n  response.error()\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (response.hasFatalError()) {\n  response.error()\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.error()\n\n// Response status\nresponse.error().status\n\n// Error text\nresponse.error().text\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 415 Unsupported Media Type Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 415 Unsupported Media Type status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertUnsupportedMediaType()\n```\n\n----------------------------------------\n\nTITLE: Testing Non-NaN Values in TypeScript\nDESCRIPTION: Shows the isNotNaN assertion method which checks if a value is not NaN\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotNaN(NaN) // fails\nassert.isNotNaN(Number('hello')) // fails\nassert.isNotNaN(true) // passes\nassert.isNotNaN(false) // passes\nassert.isNotNaN(null) // passes\n```\n\n----------------------------------------\n\nTITLE: Installing Concurrently for Parallel Suite Execution\nDESCRIPTION: Shell command to install the concurrently package from npm, which allows running multiple test suites in parallel.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D concurrently\n```\n\n----------------------------------------\n\nTITLE: Testing Object is Sealed in TypeScript\nDESCRIPTION: The sealed/isSealed assertion checks if an object is sealed, preventing addition of new properties but allowing modification of existing ones.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nassert.sealed(Object.seal({})) // passes\nassert.sealed({}) // fails\n\nassert.isSealed(Object.seal({})) // passes\nassert.isSealed({}) // fails\n```\n\n----------------------------------------\n\nTITLE: Debugging Japa Browser Tests with PWDEBUG Environment Variable\nDESCRIPTION: This snippet shows how to enable debugging for Japa browser tests using the PWDEBUG environment variable.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nPWDEBUG=console node bin/test.js\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 416 Range Not Satisfiable Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 416 Range Not Satisfiable status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertRangeNotSatisfiable()\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 411 Length Required Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 411 Length Required status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertLengthRequired()\n```\n\n----------------------------------------\n\nTITLE: Testing Non-String Values in TypeScript\nDESCRIPTION: Shows the isNotString assertion method which checks if a value is not a string\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nassert.isNotString(1) // passes\nassert.isNotString('') // fails\nassert.isNotString(new String(true)) // fails\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Summary Example\nDESCRIPTION: Example of accessing test summary data in a custom reporter\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyCustomReporter extends BaseReporter {\n  async end() {\n    const summary = this.runner.getSummary()\n    console.log(summary)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Reporters in TypeScript\nDESCRIPTION: Example of registering and activating test reporters in Japa's configuration file. Shows how to set up multiple reporters and activate specific ones.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_reporters.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configure } from '@japa/runner'\nimport * as reporters from '@japa/runner/reporters'\n\nconfigure({\n  reporters: {\n    activated: [\n      'spec'\n    ],\n    list: [\n      reporters.spec(),\n      reporters.ndjson(),\n      reporters.dot(),\n      reporters.github(),\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using NotDeepEqual Assertion in Japa\nDESCRIPTION: Examples of using the notDeepEqual assertion method to check if two values are not deeply equal in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nassert.notDeepEqual({ a: 1, b: 2 }, { a: 1, b: '2' }) // passes\nassert.notDeepEqual([1, 2], [2, 1]) // passes\nassert.notDeepEqual(\n  new Date('2020 01 22'),\n  new Date('2020 01 23')\n) // passes\n```\n\n----------------------------------------\n\nTITLE: Using NotInclude Assertion in Japa\nDESCRIPTION: Examples of using the notInclude assertion method to check if a collection does not include an item in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nassert.notInclude(\n  { id: 1, name: 'virk' },\n  { name: 'harminder' }\n) // passes\n\nassert.notInclude([1, 2, 3], 4) // passes\nassert.notInclude('hello world', 'japa') // passes\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP 412 Precondition Failed Response in Japa API Client\nDESCRIPTION: Method to verify that an API response has a 412 Precondition Failed status code.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/api_client.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.assertPreconditionFailed()\n```\n\n----------------------------------------\n\nTITLE: Declaring Types for Custom Decorators in Japa Browser Tests\nDESCRIPTION: This snippet demonstrates how to use declaration merging in TypeScript to define types for custom properties and methods added by decorators in Japa browser tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'playwright' {\n  export interface Page {\n    getWidth(): number\n  }\n\n  export interface BrowserContext {\n    injectShaHash(): void\n  }\n\n  export interface Response {\n    getResponseTime(): String | undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Release History Table in Markdown\nDESCRIPTION: A markdown table displaying release information for Japa framework packages, including package names, release dates, and change notes with links to GitHub releases.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/releases.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package | Release date | Notes |\n|------------|---------|------------|\n| `@japa/plugin-adonisjs` | Jan 12, 2025 | [Remove startRepl method in favor of repl.start](https://github.com/japa/plugin-adonisjs/releases/tag/v4.0.0) |\n| `@japa/api-client` | Jan 12, 2025 | [Do not throw error for status code >= 500](https://github.com/japa/api-client/releases/tag/v3.0.0) |\n| `@japa/runner` | Jan 9, 2025 | [Add Github annotations reporter](https://github.com/japa/runner/releases/tag/v4.1.0) |\n| `@japa/errors-printer` | Jan 9, 2025 | [Add support for parsing errors to JSON](https://github.com/japa/errors-printer/releases/tag/v4.1.0) |\n| `@japa/runner` | Jan 6, 2025 | [Test macros, support for bail mode and some breaking changes](https://github.com/japa/runner/releases/tag/v4.0.0) |\n| `@japa/errors-printer` | Jan 3, 2025 | [Use beta version of Youch](https://github.com/japa/errors-printer/releases/tag/v4.0.0) |\n| `@japa/openapi-assertions` | Dec 18, 2024 | [First working version](https://github.com/japa/openapi-assertions/releases/tag/v0.1.0) |\n| `@japa/assert` | Dec 18, 2024 | [Fix snapshot comparison logic](https://github.com/japa/snapshot/releases/tag/v2.0.6) |\n| `@japa/snapshot` | Sep 23, 2024 | [Remove OpenAPI assertions to its own package](https://github.com/japa/assert/releases/tag/v4.0.0) |\n| `@japa/errors-printer` | Apr 16, 2024 | [Respect color support before using ansi colors](https://github.com/japa/errors-printer/releases/tag/v3.0.4) |\n| `@japa/runner` | Apr 16, 2024 | [Detect colors support before using ansi colors](https://github.com/japa/runner/releases/tag/v3.1.4) |\n| `@japa/assert` | Mar 29, 2024 | [Upgrade to Chai 5](https://github.com/japa/assert/releases/tag/v3.0.0) |\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests in Japa\nDESCRIPTION: Demonstrates how to skip tests using the skip method, including conditional and lazy evaluation options.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Skip the test\ntest('add two numbers', () => {\n})\n.skip(true)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Skip conditionally\ntest('add two numbers', () => {\n})\n.skip(!!process.env.CI)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Skip lazily\ntest('add two numbers', () => {\n})\n.skip(() => {\n  return findIfShouldBeSkipped()\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.skip(true, 'Cannot run it in CI')\n```\n\n----------------------------------------\n\nTITLE: Pinning Tests in Japa\nDESCRIPTION: Explains how to pin tests using the pin method, which allows only pinned tests to be executed while skipping others.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/reference/test.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntest('add two numbers', () => {\n})\n.pin()\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Suites for Browser Client\nDESCRIPTION: Configuration example showing how to specify which test suites should run with the browser client plugin.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nbrowserClient({\n  runInSuites: ['browser'],\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejections with High Order Assertion in Japa\nDESCRIPTION: Example of using test.throws as a high order assertion method to test that a database operation rejects with a unique constraint error.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntest('do not insert duplicate emails', () => {\n  await createUser({ email: 'foo@bar.com' })\n  \n  /**\n   * The second call will throw an exception, and\n   * there is no need to handle it within the test\n   * callback\n   */\n  await createUser({ email: 'foo@bar.com' })\n})\n .throws(/Unique constraint/)\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Test Suites\nDESCRIPTION: Shell command to run all test suites in parallel using the npm test command, which executes the configured concurrently script.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/test_suites.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejections with assert.rejects in Japa\nDESCRIPTION: Example of using the dedicated assert.rejects method to test that a database operation rejects with a unique constraint error.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('do not insert duplicate emails', ({ assert }) => {\n  await createUser({ email: 'foo@bar.com' })\n  \n  await assert.rejects(\n    async () => createUser({ email: 'foo@bar.com' }),\n    /Unique constraint/ \n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Using NotEqual Assertion in Japa\nDESCRIPTION: Examples of using the notEqual assertion method for non-strict inequality comparisons in Japa tests.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nassert.notEqual(3, 2) // passes\nassert.notEqual(3, '2') // passes\nassert.notEqual(Symbol.for('foo'), Symbol.for('bar')) // passes\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Rejections with try/catch in Japa\nDESCRIPTION: Example of testing a database operation using try/catch to assert that it rejects with a unique constraint error.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('do not insert duplicate emails', ({ assert }) => {\n  await createUser({ email: 'foo@bar.com' })\n\n  try {\n    await createUser({ email: 'foo@bar.com' })\n  } catch (error) {\n    assert.matches(error.message, /Unique constraint/)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Bail Mode in Japa Test Runner (Shell)\nDESCRIPTION: This command enables bail mode in Japa using the --bail CLI flag. When enabled, Japa will skip upcoming tests after encountering an error.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/bail_mode.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode bin/test.js --bail\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependencies for Japa Browser Client\nDESCRIPTION: Commands to install the required peer dependencies (@japa/assert and playwright) before installing the browser client plugin.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/browser_client.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// title: Peer dependencies\nnpm i -D @japa/assert playwright\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with try/catch in Japa\nDESCRIPTION: Example of testing a validation function using try/catch to assert that it throws an exception with a specific error message.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/guides/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('validate email format', ({ assert }) => {\n  try {\n    validateEmail('foo')\n  } catch (error) {\n    assert.equal(error.message, '\"foo\" is not a valid email address')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Japa Assert Plugin via npm\nDESCRIPTION: Command to install the Japa Assert plugin using npm package manager.\nSOURCE: https://github.com/japa/japa.dev/blob/3.x/content/docs/plugins/assert.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/assert\n```"
  }
]