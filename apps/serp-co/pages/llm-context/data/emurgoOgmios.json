[
  {
    "owner": "emurgo",
    "repo": "ogmios",
    "content": "TITLE: Submitting Transaction Example (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to submit a Cardano transaction to Ogmios using a WebSocket connection. It includes setting up the WebSocket, constructing the JSON-RPC message, sending the transaction, and handling the response.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params\n    }));\n}\n\nclient.once('open', () => {\n    const cbor =\n      \"83a4008182582000000000000000000000000000000000000000000000000000\"+\n      \"0000000000000000018282583901010101010101010101010101010101010101\"+\n      \"0101010101010101010101010101010101010101010101010101010101010101\"+\n      \"0101010101011a001e8480825839010202020202020202020202020202020202\"+\n      \"0202020202020202020202020202020202020202020202020202020202020202\"+\n      \"020202020202021a0078175c021a0001faa403191e46a1008182582001000000\"+\n      \"000000000000000000000000000000000000000000000000000000005840d7af\"+\n      \"60ae33d2af351411c1445c79590526990bfa73cbb3732b54ef322daa142e6884\"+\n      \"023410f8be3c16e9bd52076f2bb36bf38dfe034a9f04658e9f56197ab80ff6\";\n\n    rpc(\"submitTransaction\", { transaction: { cbor } });\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n    console.log(response);\n    client.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Acquiring Ledger State\nDESCRIPTION: This code snippet shows how to acquire a specific ledger state by providing a point (slot and hash) to the `acquireLedgerState` method. The point corresponds to a specific location on the Cardano blockchain. Acquiring a state allows for consistent querying of the ledger at that point in time.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"acquireLedgerState\",\n    \"params\": {\n        \"point\": {\n            \"slot\": 1234,\n            \"hash\": \"9e871633f7aa356ef11cdcabb6fdd6d8f4b00bc919c57aed71a91af8f86df590\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying UTXO Set\nDESCRIPTION: This JSON snippet demonstrates how to query the entire UTXO (Unspent Transaction Output) set in Ogmios. It sends a `queryLedgerState/utxo` request without any parameters. The server returns all UTXOs on the ledger.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/utxo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting the next block via JSON-RPC\nDESCRIPTION: This JSON snippet demonstrates how to request the next block from Ogmios using the `nextBlock` method.  The request doesn't take any parameters and is sent as a JSON-RPC 2.0 message.  The response will either contain the next block or indicate a rollback.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"nextBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Submit Transaction Request JSON\nDESCRIPTION: This JSON payload is used to submit a serialized Cardano transaction to the Ogmios server. The 'cbor' field contains the base16-encoded representation of the signed transaction.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"submitTransaction\",\n    \"params\": { \"transaction\": { \"cbor\": { \"<base16>\" } } }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ledger Tip\nDESCRIPTION: This JSON snippet shows how to query the current ledger tip (block height and hash) in Ogmios. It sends a `queryLedgerState/tip` request. The server returns the latest confirmed block's information on the ledger.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding an intersection via JSON-RPC\nDESCRIPTION: This JSON snippet shows how to find a common intersection point between a client's chain and the node's chain using the `findIntersection` method. It accepts a list of points (slot and id pairs) and/or the 'origin' keyword as parameters. Ogmios will set its cursor to the best match found, if any.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"findIntersection\",\n    \"params\": {\n        \"points\": [\n            {\n              \"slot\": 39916796,\n              \"id\": \"e72579ff89dc9ed325b723a33624b596c08141c7bd573ecfff56a1f7229e4d09\"\n            },\n            {\n              \"slot\": 23068793,\n              \"id\": \"69c44ac1dda2ec74646e4223bc804d9126f719b1c245dadc2ad65e8de1b276d7\"\n            },\n            \"origin\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Reward Account Summaries by Scripts\nDESCRIPTION: This JSON snippet illustrates how to query reward account summaries using a list of script hashes in Ogmios. It sends a `queryLedgerState/rewardAccountSummaries` request. The `params` object contains a `scripts` array with script hashes. The server returns the reward account summaries for the specified scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/rewardAccountSummaries\",\n  \"params\": {\n    \"scripts\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"script10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6snywdma\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury and Reserves\nDESCRIPTION: This JSON snippet demonstrates how to query the current treasury and reserves values in Ogmios. It sends a `queryLedgerState/treasuryAndReserves` request. The server returns the current balances of the treasury and reserves.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/treasuryAndReserves\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Network Tip and Stake Distribution with Ogmios (JavaScript)\nDESCRIPTION: This code snippet demonstrates querying the network tip and then, using the tip information, acquiring the ledger state to subsequently query the live stake distribution across all stake pools. It uses WebSockets to communicate with the Ogmios interface and handles different response methods using a switch statement.  It depends on the 'ws' package.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params = {}, id) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n    }));\n}\n\nclient.once('open', () => {\n    rpc(\"queryNetwork/tip\", {})\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n\n    switch (response.method) {\n        case \"queryNetwork/tip\":\n            const point = response.result;\n            rpc(\"acquireLedgerState\", { point });\n            break;\n\n        case \"acquireLedgerState\":\n            rpc(\"queryLedgerState/liveStakeDistribution\");\n            break;\n\n        default:\n            console.log(response.result);\n            client.close();\n            break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Parameters\nDESCRIPTION: This JSON snippet demonstrates how to query the current protocol parameters in Ogmios. It sends a `queryLedgerState/protocolParameters` request without any additional parameters. The server returns the current set of protocol parameters.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/protocolParameters\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Projected Rewards by Scripts\nDESCRIPTION: This JSON snippet illustrates how to query projected rewards using a list of script hashes in Ogmios. It sends a `queryLedgerState/projectedRewards` request. The `params` object contains a `scripts` array with script hashes. The server returns the projected rewards for the specified scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/projectedRewards\",\n  \"params\": {\n    \"scripts\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"script10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6snywdma\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Parameters from Ogmios using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to query the protocol parameters from an Ogmios server using the `protocolParameters()` function. The function returns an object containing various protocol settings such as minimum fee coefficient, minimum fee constant, maximum block sizes, stake credential deposit, stake pool deposit, and stake pool retirement epoch bound.  These parameters govern how the Cardano blockchain operates.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/packages/repl/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nogmios> await protocolParameters()\n{\n  minFeeCoefficient: 44,\n  minFeeConstant: { lovelace: 155381n },\n  maxBlockBodySize: { bytes: 90112 },\n  maxBlockHeaderSize: { bytes: 1100 },\n  maxTransactionSize: { bytes: 16384 },\n  stakeCredentialDeposit: { lovelace: 2000000n },\n  stakePoolDeposit: { lovelace: 500000000n },\n  stakePoolRetirementEpochBound: 18,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ogmios HTTP Request\nDESCRIPTION: This JavaScript code shows how to send a request to Ogmios over HTTP using the `fetch` API.  It sends a `submitTransaction` request with a transaction payload.  It requires the `fetch` API to be available (e.g., via `node-fetch` in Node.js, or built-in in browsers).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require('fetch');\n\nfetch(\"http://localhost:1337\", {\n  method: \"POST\",\n  data: {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"submitTransaction\",\n    \"params\": { \"transaction\": \"...\" }\n  }\n}).then(async response => {\n  const json = await response.json();\n\n  // do something with 'response'\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Proposed Protocol Parameters\nDESCRIPTION: This JSON snippet shows how to query proposed protocol parameters in Ogmios. It sends a `queryLedgerState/proposedProtocolParameters` request. The server responds with the proposed protocol parameter updates, if any.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/proposedProtocolParameters\"\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction Request JSON\nDESCRIPTION: This JSON payload is used to evaluate a serialized Cardano transaction's execution units via Ogmios without submitting the transaction. The 'cbor' field contains the base16-encoded transaction.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"evaluateTransaction\",\n    \"params\": { \"transaction\": { \"cbor\": \"<base16>\" } }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying UTXO by Output Reference\nDESCRIPTION: This JSON snippet demonstrates how to query a specific UTXO by its output reference (transaction ID and index) in Ogmios. It sends a `queryLedgerState/utxo` request with the `outputReferences` parameter. The server returns information about the specified UTXO.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/utxo\",\n  \"params\": {\n    \"outputReferences\": [\n      {\n        \"transaction\": { \"id\": \"ee155ace9c40292074cb6aff8c9ccdd273c81648ff1149ef36bcea6ebb8a3e25\" },\n        \"index\": 2\n      }\n    ]\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Queries: Pool Ranking\nDESCRIPTION: This snippet describes the `poolsRanking` state query, which retrieves stake pools ranking (a.k.a desirabilities).  This information is vital for delegators to choose the optimal pools for maximizing their staking rewards.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nQuery                        | Description\n  ---                          | ---\n  `poolsRanking`               | Retrieve stake pools ranking (a.k.a desirabilities).\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction Response JSON\nDESCRIPTION: This JSON response is returned by Ogmios after a successful transaction evaluation. It includes a list of validators and their corresponding execution budgets (memory and CPU).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"evaluateTransaction\",\n  \"result\": [{\n    \"validator\": \"spend:0\",\n    \"budget\": {\n      \"memory\": 1700,\n      \"cpu\": 476468\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Network Tip\nDESCRIPTION: This JSON snippet demonstrates how to query the network tip in Ogmios. It sends a `queryNetwork/tip` request. The server returns the current network tip (best known block) information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ogmios Block Synchronization Example\nDESCRIPTION: This JavaScript example demonstrates how to connect to an Ogmios WebSocket server, find the intersection with the last Byron block, and then synchronize the first 14 Shelley blocks. It uses the `ws` library for WebSocket communication and sends JSON-RPC requests to the Ogmios server.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params, id) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n    }));\n}\n\nclient.once('open', () => {\n    const lastByronBlock = {\n        slot: 4492799,\n        id: \"f8084c61b6a238acec985b59310b6ecec49c0ab8352249afd7268da5cff2a457\"\n    };\n    rpc(\"findIntersection\", { points: [lastByronBlock] }, \"find-intersection\");\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n\n    switch (response.id) {\n        case \"find-intersection\":\n            if (!response.result.intersection) { throw \"Whoops? Last Byron block disappeared?\" }\n            rpc(\"nextBlock\", {}, 14);\n            break;\n\n        default:\n            if (response.result.direction === \"forward\") {\n                console.log(response.result);\n            }\n\n            if (response.id > 0) {\n                rpc(\"nextBlock\", {}, response.id - 1);\n            } else {\n                client.close();\n            }\n            break;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Protocol Parameters Response (JSON)\nDESCRIPTION: This JSON excerpt represents a sample response from querying the protocol parameters. It includes details like minimum fees, maximum block sizes, stake pool parameters, Plutus cost models, script execution prices, maximum execution units, value size, collateral percentage and versioning. The keys represent different ledger settings.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"minFeeCoefficient\": 44,\n  \"minFeeConstant\": { \"lovelace\": 155381 },\n  \"maxBlockBodySize\": { \"bytes\": 90112 },\n  \"maxBlockHeaderSize\": { \"bytes\": 1100 },\n  \"maxTransactionSize\": { \"bytes\": 16384 },\n  \"stakeCredentialDeposit\": { \"lovelace\": 2000000 },\n  \"stakePoolDeposit\": { \"lovelace\": 500000000 },\n  \"stakePoolRetirementEpochBound\": 18,\n  \"desiredNumberOfStakePools\": 500,\n  \"stakePoolPledgeInfluence\": \"3/10\",\n  \"monetaryExpansion\": \"3/1000\",\n  \"treasuryExpansion\": \"1/5\",\n  \"minStakePoolCost\": { \"lovelace\": 340000000 },\n  \"minUtxoDepositConstant\": 0,\n  \"minUtxoDepositCoefficient\": 4310,\n  \"plutusCostModels\": {\n    \"plutus:v1\": [\n      205665,    812,      1,      1,   1000,    571,      0,       1,\n        1000,  24177,      4,      1,   1000,     32, 117366,   10475,\n           4,  23000,    100,  23000,    100,  23000,    100,   23000,\n         100,  23000,    100,  23000,    100,    100,    100,   23000,\n         100,  19537,     32, 175354,     32,  46417,      4,  221973,\n         511,      0,      1,  89141,     32, 497525,  14068,       4,\n           2, 196500, 453240,    220,      0,      1,      1,    1000,\n       28662,      4,      2, 245000, 216773,     62,      1, 1060367,\n       12586,      1, 208512,    421,      1, 187000,   1000,   52998,\n           1,  80436,     32,  43249,     32,   1000,     32,   80556,\n           1,  57667,      4,   1000,     10, 197145,    156,       1,\n      197145,    156,      1, 204924,    473,      1, 208896,     511,\n           1,  52467,     32,  64832\n    ],\n    \"plutus:v2\": [\n      205665,    812,      1,      1,   1000,    571,      0,       1,\n        1000,  24177,      4,      1,   1000,     32, 117366,   10475,\n           4,  23000,    100,  23000,    100,  23000,    100,   23000,\n         100,  23000,    100,  23000,    100,    100,    100,   23000,\n         100,  19537,     32, 175354,     32,  46417,      4,  221973,\n         511,      0,      1,  89141,     32, 497525,  14068,       4,\n           2, 196500, 453240,    220,      0,      1,      1,    1000,\n       28662,      4,      2, 245000, 216773,     62,      1, 1060367,\n       12586,      1, 208512,    421,      1, 187000,   1000,   52998,\n           1,  80436,     32,  43249,     32,   1000,     32,   80556,\n           1,  57667,      4,   1000,     10, 197145,    156,       1,\n      197145,    156,      1, 204924,    473,      1, 208896,     511,\n           1,  52467,     32,  64832\n    ]\n  },\n  \"scriptExecutionPrices\": {\n    \"memory\": '577/10000',\n    \"cpu\": '721/10000000'\n  },\n  \"maxExecutionUnitsPerTransaction\": {\n    \"memory\": 14000000,\n    \"cpu\": 10000000000\n  },\n  \"maxExecutionUnitsPerBlock\": {\n    \"memory\": 62000000,\n    \"cpu\": 20000000000\n  },\n  \"maxValueSize\": { \"bytes\": 5000 },\n  \"collateralPercentage\": 150,\n  \"maxCollateralInputs\": 3,\n  \"version\": {\n    \"major\": 8,\n    \"minor\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mempool Monitoring Example - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the Ogmios mempool monitoring protocol with a WebSocket connection. It establishes a connection, acquires a mempool snapshot, and then repeatedly requests the next transaction. If a transaction is received, it logs the transaction details.  If the result transaction is null, it re-acquires the mempool snapshot. It uses the 'ws' library.  Dependencies: ws\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-monitor.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\n// Helper function\nfunction rpc(method, params) {\n    client.send(JSON.stringify({\n        jsonrpc: '2.0',\n        method,\n        params\n    }));\n}\n\nclient.on('message', e => {\n  const message = JSON.parse(e);\n  if (message?.result?.transaction === null) {\n    rpc('acquireMempool');\n  } else {\n    console.log(message.result);\n    // Returns transaction id\n    rpc('nextTransaction');\n    // Returns all transaction information\n    // rpc(\"nextTransaction\", { fields: \"all\" });\n  }\n});\n\nclient.once('open', () => {\n  rpc('acquireMempool');\n});\n```\n\n----------------------------------------\n\nTITLE: Event Emitter to Generator Function\nDESCRIPTION: This TypeScript function converts an event emitter into an asynchronous generator. It maintains two queues, `events` and `listeners`, to handle cases where the event arrives before or after the generator's `next` call.  It ensures events are processed in order and prevents memory leaks associated with excessive event listeners. Dependencies include the EventEmitter class.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/016-event-emitter-to-generator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function eventEmitterToGenerator (eventEmitter: EventEmitter, eventName: string) {\n  const events = [] as Event[]\n  const listeners = [] as ((e: Event) => void)[]\n\n  eventEmitter.on(eventName, async (e: Event) => {\n    if (listeners.length > 0) {\n      listeners.shift()(e)\n    } else {\n      events.push(e)\n    }\n  })\n\n  return async function * generator () {\n    while (true) {\n      yield new Promise((resolve) => {\n        if (events.length > 0) {\n          resolve(events.shift())\n        } else {\n          listeners.push(resolve)\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Protocol Parameters using Ogmios with WebSocket (JavaScript)\nDESCRIPTION: This snippet demonstrates how to query the current protocol parameters from the Cardano ledger state using Ogmios. It establishes a WebSocket connection, sends an RPC request to 'queryLedgerState/protocolParameters', and then logs the response to the console before closing the connection. It requires the 'ws' package.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nfunction rpc(method, params = {}, id) {\n    client.send(JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id\n    }));\n}\n\nclient.once('open', () => {\n    rpc(\"queryLedgerState/protocolParameters\");\n});\n\nclient.on('message', function(msg) {\n    const response = JSON.parse(msg);\n    console.log(JSON.stringify(response.result, null, 4));\n    client.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Stake Pools (filtered)\nDESCRIPTION: This JSON snippet illustrates how to query specific stake pools using their IDs in Ogmios. It sends a `queryLedgerState/stakePools` request. The `params` object contains a `stakePools` array, which includes objects with the `id` of each stake pool. The server returns information about the specified stake pools.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/stakePools\",\n  \"params\": {\n    \"stakePools\": [\n      { \"id\": \"pool1pk2wzarn9mu64eel89dtg3g8h75c84jsy0q349glpsewgd7sdls\" },\n      { \"id\": \"4acf2773917c7b547c576a7ff110d2ba5733c1f1ca9cdc659aea3a56\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Script Tier Price Calculation\nDESCRIPTION: This snippet illustrates how the referenceScriptTierPrice is calculated based on the size of reference scripts.  It defines a tier-based pricing model where the cost per byte increases as the size of the reference scripts grows. Understanding this pricing model is critical for optimizing transactions with reference scripts to minimize fees.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\nreferenceScriptTierPrice_{80KiB} = 25600 \\times (44 + 52.8 + 63.36) + 5120 \\times 76.032 = 4489379\n```\n\n----------------------------------------\n\nTITLE: Query Ledger State Live Stake Distribution (JSON)\nDESCRIPTION: This JSON request is asking for the live stake distribution from the ledger state. The result will contain stake amounts for various pools.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/liveStakeDistribution\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Full Transactions - NextTransaction - JSON\nDESCRIPTION: This JSON snippet demonstrates how to request full transaction details using the `nextTransaction` method. By including the `fields: \"all\"` parameter, the response will contain the full transaction data instead of just the transaction ID.  The `fields` parameter is optional; if omitted, only the transaction ID is returned.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-monitor.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"nextTransaction\",\n    \"params\": {\n        \"fields\": \"all\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ledger Epoch\nDESCRIPTION: This example demonstrates how to query the current epoch of the ledger using the `queryLedgerState/epoch` method. No parameters are required. The response will contain information about the current epoch. This is an example of a ledger-state query, which is era-dependent.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"queryLedgerState/epoch\",\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Reward Account Summaries by Keys\nDESCRIPTION: This JSON snippet demonstrates how to query reward account summaries using a list of keys in Ogmios. It sends a `queryLedgerState/rewardAccountSummaries` request. The `params` object contains a `keys` array with stake key hashes and stake addresses. The server returns reward account summaries for the specified keys.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/rewardAccountSummaries\",\n  \"params\": {\n    \"keys\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"stake_vkh10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6s39tk6l\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Ledger State Constitutional Committee (JSON)\nDESCRIPTION: This JSON snippet presents an example query for the Constitutional Committee and its corresponding response format. It demonstrates the data structure containing the members of the committee, including their IDs, delegate status, and mandate information. The quorum requirement is also specified.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/constitutionalCommittee\",\n  \"result\": {\n    \"members\": [\n      {\n        \"id\": \"5f1b4429fe3bda963a7b70ab81135112a785afcf55ccd695b122e794\",\n        \"delegate\": {\n          \"status\": \"authorized\",\n          \"credential\": \"5aa349227e4068c85c03400396bcea13c7fd57d0ec78c604bc768fc5\"\n        },\n        \"status\": \"active\",\n        \"mandate\": {\n          \"epoch\": 379\n        }\n      },\n      {\n        \"id\": \"9393c87a66b1f7dd4f9b486a49232de92e39e18b3b20ac4a539b4df2\",\n        \"delegate\": {\n          \"status\": \"authorized\",\n          \"credential\": \"670994283668cea40218e0ef33c51aff39ca00a74f68ed428cf305ce\"\n        },\n        \"status\": \"active\",\n        \"mandate\": {\n          \"epoch\": 379\n        }\n      },\n      {\n        \"id\": \"b7bfc26ddc6718133a204af6872149b69de83dd3350f60b257e55773\",\n        \"delegate\": {\n          \"status\": \"none\"\n        },\n        \"status\": \"active\",\n        \"mandate\": {\n          \"epoch\": 379\n        }\n      }\n    ],\n    \"quorum\": \"2/3\"\n  },\n  \"id\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing parsing of ScriptFailures from evaluateTx in TypeScript\nDESCRIPTION: This entry describes a fix for handling `ScriptFailures` returned by the `evaluateTx` command within the TypeScript client. Previously, the client would throw `undefined` when such errors occurred. This patch ensures that `ScriptFailures` are correctly parsed and transcribed as `EvaluateTxError` objects.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Querying Health Endpoint via Curl\nDESCRIPTION: This command retrieves real-time information about the running Ogmios server from the `/health` endpoint, including runtime metrics, connection status, and network synchronization. It requires `curl` to be installed. The output is a JSON object containing various metrics and status information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -H 'Accept: application/json' http://localhost:1337/health\n```\n\n----------------------------------------\n\nTITLE: Transaction Submission Errors (Alonzo)\nDESCRIPTION: This snippet lists new possible errors stemming from the Alonzo integration when submitting transactions. These errors cover a variety of issues related to collateral, datums, execution units, missing signatures, and other validation failures in the Alonzo era, enabling more robust error handling in transaction submission logic.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n- New possible errors from the transaction submission (stemming from the Alonzo integration):\n  - `collateralHasNonAdaAssets`\n  - `collateralIsScript`\n  - `collateralTooSmall`\n  - `collectErrors`\n  - `datumsMismatch`\n  - `executionUnitsTooLarge`\n  - `extraDataMismatch`\n  - `extraRedeemers`\n  - `mirNegativeTransferNotCurrentlyAllowed`\n  - `mirProducesNegativeUpdate`\n  - `mirTransferNotCurrentlyAllowed`\n  - `missingDatumHashesForInputs`\n  - `missingRequiredDatums`\n  - `missingRequiredRedeemers`\n  - `missingRequiredSignatures`\n  - `outsideForecast`\n  - `poolMetadataHashTooBig`\n  - `tooManyCollateralInputs`\n  - `unspendableDatums`\n  - `unspendableScriptInputs`\n  - `validationTagMismatch`\n```\n\n----------------------------------------\n\nTITLE: Fixing ScriptFailures parsing in evaluateTx (TypeScript)\nDESCRIPTION: This TypeScript snippet describes a fix for parsing `ScriptFailures` that occur during the `evaluateTx` command in Ogmios. Previously, the client would throw `undefined` when encountering such an error. This patch ensures that `ScriptFailures` are correctly transcribed as `EvaluateTxError`.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Calculate minimum UTxO value in Babbage era (Cardano)\nDESCRIPTION: This snippet illustrates how to calculate the minimum Lovelace requirement on transaction outputs in the Babbage era. It uses the `coinsPerUTxOByte` protocol parameter as a coefficient in a linear function of the serialized (CBOR) output to determine the `minUTxOValue`.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nminUTxOValue(output) =  |serialise(output)| * coinsPerUTxOByte\n```\n\n----------------------------------------\n\nTITLE: Ogmios WebSocket Interaction\nDESCRIPTION: This JavaScript code demonstrates how to interact with Ogmios using the WebSocket protocol.  It uses the `ws` Node.js package to establish a connection, send a `findIntersection` request, and process the response. It requires the `ws` package to be installed (`npm install ws`).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst WebSocket = require('ws');\nconst client = new WebSocket(\"ws://localhost:1337\");\n\nclient.once('open', () => {\n    const request = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"findIntersection\",\n        \"params\": { \"points\": [ \"origin\" ] }\n    };\n    client.send(JSON.stringify(request));\n});\n\nclient.on('message', function(msg) {\n  const response = JSON.parse(msg);\n\n  // do something with 'response'\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing ScriptFailures parsing in evaluateTx (TypeScript)\nDESCRIPTION: This change fixes an issue where the client would throw `undefined` when encountering `ScriptFailures` coming out of the `evaluateTx` command in Ogmios. The client will now correctly transcribe `ScriptFailures` as `EvaluateTxError`, allowing better handling of script evaluation errors.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed parsing of `ScriptFailures` coming out of the `evaluateTx` command. Before this patch, the client would simply throw `undefined` when such an error was encountered. They are now properly transcribed as `EvaluateTxError`.\n```\n\n----------------------------------------\n\nTITLE: Running cardano-node-ogmios Docker container\nDESCRIPTION: This command starts a Cardano node with an Ogmios server using the `cardanosolutions/cardano-node-ogmios` Docker image. It maps port 1337 for Ogmios, creates a named volume for persisting the Cardano node database, and enables interactive support.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it \\\n  --name cardano-node-ogmios \\\n  -p 1337:1337 \\\n  -v cardano-node-ogmios-mainnet-db:/db \\\n  cardanosolutions/cardano-node-ogmios:latest\n```\n\n----------------------------------------\n\nTITLE: Example Network Tip Response (JSON)\nDESCRIPTION: This JSON snippet shows the response from querying the network tip. It includes the block hash and slot number of the latest block on the chain.  The 'method' field specifies the query that was executed.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"queryNetwork/tip\",\n    \"result\": {\n        \"tip\": {\n            \"hash\": \"dbafebb0146b2ec45186dfba6c287ad69c83d3fd9a186b39d99ab955631539e0\",\n            \"slot\": 12526684\n        }\n    },\n    \"id\": \"get-network-tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Testnet Cardano Node and Ogmios Server\nDESCRIPTION: Stops the Cardano node and Ogmios server for the testnet network. This command shuts down the testnet environment after tests are complete or when no longer needed.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nyarn testnet:down\n```\n\n----------------------------------------\n\nTITLE: Fixing data-types with fields parsed as number in TypeScript\nDESCRIPTION: This changelog entry describes a fix for data types in the TypeScript client where fields were incorrectly parsed as `number` instead of `bigint`. This correction ensures that large integer values are accurately represented using `bigint`, preventing potential data loss or incorrect calculations. This fix is technically an internal breaking change.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Querying Stake Pools\nDESCRIPTION: This JSON snippet demonstrates how to query all stake pools in Ogmios. It sends a `queryLedgerState/stakePools` request without any additional parameters. The server returns a list of all stake pools on the ledger.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/stakePools\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Mainnet REPL\nDESCRIPTION: Starts the REPL (Read-Eval-Print Loop) for interacting with the mainnet Cardano node and Ogmios server.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nyarn repl:start\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClient: In-memory queue implementation (TypeScript)\nDESCRIPTION: The `ChainSyncClient` now implements an in-memory queue to ensure `requestNext` responses are processed sequentially when async operations exist in the message handlers. This prevents race conditions and ensures consistent processing. The `sequential` option can bypass this behavior if sequential processing is not needed.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: JSON-RPC 2.0 Request Example\nDESCRIPTION: Demonstrates the new JSON-RPC 2.0 request format adopted in Ogmios API version 6, providing a more lightweight and standardized approach.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/genesisConfiguration\",\n  \"params\": { \"era\": \"shelley\" },\n  \"id\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Testnet REPL\nDESCRIPTION: Starts the REPL (Read-Eval-Print Loop) for interacting with the testnet Cardano node and Ogmios server on a specific port.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nyarn repl:start --port 1337\n```\n\n----------------------------------------\n\nTITLE: Querying Rewards Provenance\nDESCRIPTION: This JSON snippet shows how to query rewards provenance information in Ogmios. It sends a `queryLedgerState/rewardsProvenance` request. The server returns information on how rewards have been distributed.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/rewardsProvenance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ogmios Block Synchronization Alternate Example\nDESCRIPTION: This JavaScript example demonstrates an alternative approach to fetching blocks from Ogmios after finding the intersection point. Instead of waiting for replies to send requests, it sends all `nextBlock` requests in a loop after a successful intersection.  This allows to collect all responses asynchronously.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (response.id) {\n  case \"find-intersection\":\n    if (!response.result.intersection) { throw \"Whoops? Last Byron block disappeared?\" }\n    for (let i = 14; i > 0; i += 1) {\n      rpc(\"nextBlock\");\n    }\n    break;\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing additionalUtxoSet in TxSubmissionClient (TypeScript)\nDESCRIPTION: This change addresses a bug where the `additionalUtxoSet` parameter was being ignored in the `TxSubmissionClient` within the Ogmios TypeScript client library.  The fix ensures that additional UTxOs are correctly included during transaction submission, improving the client's transaction construction capabilities. There are no specific dependencies, but relies on correct implementation of the TxSubmissionClient.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed `additionalUtxoSet` being ignored in the `TxSubmissionClient` of the TypeScript client.\n```\n\n----------------------------------------\n\nTITLE: Fixing additionalUtxoSet in TxSubmissionClient (TypeScript)\nDESCRIPTION: This snippet relates to a bug fix in the Ogmios TypeScript client. The `additionalUtxoSet` was being ignored in the `TxSubmissionClient`. This fix ensures that the `additionalUtxoSet` is properly handled during transaction submission.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Query Network Tip (JSON)\nDESCRIPTION: This JSON snippet exemplifies how to query the network tip, similar to a previous example. It shows the format of the RPC request. The subsequent response would contain the hash and slot of the chain tip.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pipelining `nextBlock` requests with JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to pipeline `nextBlock` requests to Ogmios using a WebSocket connection. It bursts the server's queue with multiple requests initially and then sends a new request immediately after receiving each response, optimizing bandwidth utilization.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-chain-sync.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextBlock = JSON.stringify({\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"nextBlock\",\n});\n\nclient.on('open', () => {\n  // Burst the server's queue with a few requests.\n  for (let i = 0; i < 100; i += 1) {\n    client.send(nextBlock);\n  }\n});\n\nclient.on('message', msg => {\n  client.send(nextBlock); // Ask for next request immediately\n  doSomething(msg);\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Health Check Client with Monad Constraints - Haskell\nDESCRIPTION: This Haskell code snippet defines the type signature for a `newHealthCheckClient` function.  It uses mtl-style signatures (Monad Transformer Library) to explicitly declare the monadic effects required by the function, such as asynchronous operations (`MonadAsync`), clock management (`MonadClock`), logging (`MonadLog`), metrics collection (`MonadMetrics`), environment reading (`MonadReader`), and exception throwing (`MonadThrow`). The function operates within a monad `m` parameterized by an environment `env`.  This enables testing with simulated IO.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/002-server_use-of-simulated-io.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\nnewHealthCheckClient\n  :: forall m env.\n      (\n        MonadAsync m\n      , MonadClock m\n      , MonadLog m\n      , MonadMetrics m\n      , MonadReader env m\n      , MonadThrow m\n      )\n```\n\n----------------------------------------\n\nTITLE: Querying Rewards Provenance\nDESCRIPTION: This state query retrieves the details about rewards calculation for the ongoing epoch. No specific code is provided, but this outlines the query name and its purpose.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: State Queries: Pool Parameters\nDESCRIPTION: This snippet defines the `poolParameters` state query, allowing retrieval of stake pool parameters submitted with registration certificates.  This is important for understanding stake pool configurations and for validating pool information against the blockchain state.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nQuery                        | Description\n  ---                          | ---\n  `poolParameters`             | Stake pool parameters submitted with registration certificates.\n```\n\n----------------------------------------\n\nTITLE: State Queries: Rewards Provenance\nDESCRIPTION: This snippet defines the `rewardsProvenance` state query, which provides details about rewards calculation for the ongoing epoch.  This is useful for analyzing rewards distribution and understanding the factors influencing stake pool performance.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nQuery                        | Description\n  ---                          | ---\n  `rewardsProvenance`          | Get details about rewards calculation for the ongoing epoch.\n```\n\n----------------------------------------\n\nTITLE: Using json-bigint library in TypeScript\nDESCRIPTION: The TypeScript client utilizes the `json-bigint` npm library (a maintained fork) to parse JSON responses from the Ogmios server, specifically for handling potentially large integer values. This library is preferred over the native `JSON.parse` to avoid limitations with JavaScript's number type. The parsed results are further sanitized based on context to ensure consistent use of `BigInt` for specific fields.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/013-typescript-client_bigint-parsing.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fixing TxSubmissionClient in TypeScript\nDESCRIPTION: This changelog entry indicates a fix for the `TxSubmissionClient` in the TypeScript client, specifically addressing an issue where the `additionalUtxoSet` was being ignored. This fix ensures that the `additionalUtxoSet` is properly utilized during transaction submission.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: TypeScript Client Overview\nDESCRIPTION: Describes the addition of a new TypeScript client for Ogmios, including a REPL, type definition generator, and a typed client library. It also mentions automated integration tests against the testnet.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: ChainSyncClientMessageHandlers: Promise requirement (TypeScript)\nDESCRIPTION: The `ChainSyncClientMessageHandlers` methods now must return a promise. This ensures that asynchronous operations within the message handlers are properly handled.  This improves overall asynchronicity management.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Adding TxMonitor support in REPL (TypeScript)\nDESCRIPTION: This change adds support for the `TxMonitor` mini-protocol in the Ogmios REPL (Read-Eval-Print Loop) environment. This new feature enhances the REPL's capabilities for monitoring and interacting with transactions on the Cardano network. It gives developers more tools for debugging and understanding transaction behavior.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nSupport for the _TxMonitor_ mini-protocol in the REPL.\n```\n\n----------------------------------------\n\nTITLE: Querying Ledger Tip from Ogmios using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to query the ledger tip from an Ogmios server. The `ledgerTip()` function available in the REPL returns an object containing the ID and slot of the latest block. This provides information about the current state of the blockchain.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/packages/repl/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nogmios> await ledgerTip()\n{\n  id: '41364e89e44370a009f083ce9963261aabf6138db519b039012232bf40f187f8',\n  slot: 25541023\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Convert Detailed Metadata to JSON\nDESCRIPTION: Introduces a new helper function `unsafeMetatumAsJSON` in the TypeScript client to convert a detailed metadata schema into plain JavaScript whenever possible. This function is designed to work with CIP-0025 metadata and other formats, but it is not guaranteed to be sound in the general case.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n`{ \"list\": [ { \"string\": \"foo\" }, { \"int\": 42 } ] }` → `[\"foo\", 42]`\n```\n\n----------------------------------------\n\nTITLE: Support for TxMonitor mini-protocol in REPL using TypeScript\nDESCRIPTION: This changelog entry announces support for the `TxMonitor` mini-protocol within the REPL (Read-Eval-Print Loop) environment of the Ogmios TypeScript client. This addition enables developers to monitor transaction-related events and interactions directly from the REPL.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Consuming Responses with Async/Await\nDESCRIPTION: This TypeScript snippet demonstrates how to consume responses from the server using the `eventEmitterToGenerator` function and `async/await`. It creates a generator from the event emitter and then sends messages to the socket, awaiting the corresponding responses.  It assumes the server handles requests sequentially and in order.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/016-event-emitter-to-generator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst responses = eventEmitterToGenerator(socket, 'message')\n\nsocket.send('foo')\nawait responses.next()\n\nsocket.send('bar')\nawait responses.next()\n```\n\n----------------------------------------\n\nTITLE: Ogmios Health Check in Dockerfile\nDESCRIPTION: This snippet demonstrates how to use the `ogmios health-check` command within a Dockerfile to monitor the health of a running Ogmios server. It configures a health check that runs every 10 seconds with a timeout of 5 seconds and allows for 1 retry. This is useful for integrating Ogmios health monitoring into containerized environments.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check\n```\n\n----------------------------------------\n\nTITLE: Running Ogmios standalone Docker container\nDESCRIPTION: This command starts a standalone Ogmios server using the `cardanosolutions/ogmios` Docker image. It requires a running Cardano node with its domain socket available under `./ipc`. It maps port 1337 for Ogmios, mounts the Cardano node's socket, and specifies the node configuration file and host address.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm \\\n  --name ogmios \\\n  -p 1337:1337 \\\n  -v ./ipc:/ipc \\\n  cardanosolutions/ogmios:latest \\\n    --node-socket /ipc/node.socket \\\n    --node-config /config/mainnet/cardano-node/config.json \\\n    --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output\nDESCRIPTION: This snippet shows the Prometheus metrics exposed by Ogmios. The metrics include information about active connections, CPU time, heap size, network synchronization, session durations, tip information, and total counts of connections, messages, and unrouted messages. The `ogmios_connected` metric indicates the connection status, where 1 means connected and 0 means disconnected.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# TYPE ogmios_active_connections gauge\nogmios_active_connections  0.0\n# TYPE ogmios_connected gauge\nogmios_connected  1.0\n# TYPE ogmios_cpu_time counter\nogmios_cpu_time  3841629783\n# TYPE ogmios_current_epoch counter\nogmios_current_epoch  363\n# TYPE ogmios_current_heap_size gauge\nogmios_current_heap_size  390.0\n# TYPE ogmios_gc_cpu_time counter\nogmios_gc_cpu_time  3142668337\n# TYPE ogmios_max_heap_size gauge\nogmios_max_heap_size  433.0\n# TYPE ogmios_network_synchronization gauge\nogmios_network_synchronization  0.99999\n# TYPE ogmios_session_duration_max gauge\nogmios_session_duration_max  0.0\n# TYPE ogmios_session_duration_mean gauge\nogmios_session_duration_mean  0.0\n# TYPE ogmios_session_duration_min gauge\nogmios_session_duration_min  0.0\n# TYPE ogmios_slot_in_epoch counter\nogmios_slot_in_epoch  150361\n# TYPE ogmios_tip_block counter\nogmios_tip_block  7756720\n# TYPE ogmios_tip_slot counter\nogmios_tip_slot  71603161\n# TYPE ogmios_total_connections counter\nogmios_total_connections  0\n# TYPE ogmios_total_messages counter\nogmios_total_messages  0\n# TYPE ogmios_total_unrouted counter\nogmios_total_unrouted  0\n```\n\n----------------------------------------\n\nTITLE: Query Network Genesis Configuration (Alonzo Era) (JSON)\nDESCRIPTION: This JSON snippet shows how to query the genesis configuration specifically for the Alonzo era.  The 'params' object contains the 'era' parameter, which specifies the desired genesis configuration era.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/genesisConfiguration\",\n  \"params\": {\n    \"era\": \"alonzo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Health Endpoint JSON Response\nDESCRIPTION: This JSON snippet represents the response from the Ogmios `/health` endpoint. It provides a snapshot of the server's health, including metrics about connections, message processing, runtime statistics (if enabled), and network synchronization status. The metrics are not preserved between restarts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"metrics\": {\n        \"totalUnrouted\": 1,\n        \"totalMessages\": 30029,\n        \"runtimeStats\": {\n            \"gcCpuTime\": 1233009354,\n            \"cpuTime\": 81064672549,\n            \"maxHeapSize\": 41630,\n            \"currentHeapSize\": 1014\n        },\n        \"totalConnections\": 10,\n        \"sessionDurations\": {\n            \"max\": 57385,\n            \"mean\": 7057,\n            \"min\": 0\n        },\n        \"activeConnections\": 0\n    },\n    \"startTime\": \"2021-03-15T16:16:41.470782977Z\",\n    \"lastTipUpdate\": \"2021-03-15T16:28:36.853115034Z\",\n    \"lastKnownTip\": {\n        \"hash\": \"c29428f386c701c1d1ba1fd259d4be78921ee9ee6c174eac898245ceb55e8061\",\n        \"blockNo\": 5034297,\n        \"slot\": 15520688\n    },\n    \"networkSynchronization\": 0.99,\n    \"currentEra\": \"mary\",\n    \"connectionStatus\": \"disconnected\",\n    \"currentEpoch\": 164,\n    \"slotInEpoch\": 324543,\n    \"version\": \"6.0.0\",\n    \"network\": \"mainnet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TxMonitor support in REPL (TypeScript)\nDESCRIPTION: This snippet indicates the addition of support for the `TxMonitor` mini-protocol within the Ogmios REPL (Read-Eval-Print Loop). This enhancement provides developers with the ability to monitor transactions using the REPL interface.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Install and Build Packages\nDESCRIPTION: Installs dependencies and builds the Cardano Ogmios TypeScript client packages using Yarn. This command is essential for setting up the development environment and preparing the packages for testing and distribution.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install && \\\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Transaction Fee Calculation Formula\nDESCRIPTION: This snippet describes the formula for calculating the minimum transaction fee in the Conway era. It includes the components A, B, and C, where C represents the reference scripts tier price. This formula is part of the protocol parameters and impacts the cost of transactions utilizing reference scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\nminFee = A + B + C\n```\n\n----------------------------------------\n\nTITLE: Building Ogmios Server with Cabal\nDESCRIPTION: This snippet shows how to build the Ogmios server executable using cabal. `cabal update` updates the package index, and `cabal build ogmios:exe:ogmios` compiles the executable. This process downloads necessary dependencies if it's the first time being executed.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cabal update\n$ cabal build ogmios:exe:ogmios\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building TypeScript Client\nDESCRIPTION: This command utilizes Yarn to install the necessary dependencies for the TypeScript client and then builds the project.  It requires Yarn to be installed.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ yarn && yarn build\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum UTxO Value - Cardano\nDESCRIPTION: This code snippet represents the formula for calculating the minimum Lovelace requirement for transaction outputs in the Babbage era. It uses `coinsPerUTxOByte` as a coefficient in a linear function of the serialized output size in bytes.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Cardano\nCODE:\n```\nminUTxOValue(output) =  |serialise(output)| * coinsPerUTxOByte\n```\n\n----------------------------------------\n\nTITLE: Ogmios Data Modules Structure - Haskell\nDESCRIPTION: This code snippet represents the structure of the Data modules within the Ogmios application. These modules primarily handle data structures and non-effectful code, including JSON encoders and decoders. The Data modules manage era translations, health information, JSON handling, metrics, protocol definitions and specific blockchain era data definitions.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/README.md#_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── Data\n             |       ├── EraTranslation.hs\n             |       ├── Health.hs\n             |       ├── Json.hs\n             |       ├── Json\n             |       │   ├── Prelude.hs\n             |       │   ├── Orphans.hs\n             |       │   ├── Query.hs\n             |       │   ├── Byron.hs\n             |       │   ├── Shelley.hs\n             |       │   ├── Allegra.hs\n             |       │   ├── Mary.hs\n             |       │   ├── Alonzo.hs\n       Data  |       │   └── Babbage.hs\n             |       ├── Metrics.hs\n             |       ├── Protocol.hs\n             |       └── Protocol\n             |           ├── ChainSync.hs\n             |           ├── StateQuery.hs\n             |           ├── TxMonitor.hs\n             v           └── TxSubmission.hs\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClient: RequestNext function removal (TypeScript)\nDESCRIPTION: The `ChainSyncClient` no longer exposes a `requestNext` function. Instead, developers must invoke the callback provided as the second argument in each of the `rollBackward` and `rollForward` handlers. This enforces a more controlled and explicit way of handling chain synchronization.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: State Queries: Pool Identifiers\nDESCRIPTION: This snippet describes the `poolIds` state query, which retrieves a list of all currently registered and active stake pool identifiers.  It provides a way to programmatically access pool information for monitoring or integration purposes, a crucial feature for stake pool operators and delegators.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nQuery                        | Description\n  ---                          | ---\n  `poolIds`                    | The list of all pool identifiers currently registered and active.\n```\n\n----------------------------------------\n\nTITLE: Example Acquire Ledger State Response (JSON)\nDESCRIPTION: This JSON displays a successful response from acquiring the ledger state using a specific point (tip). It confirms that the ledger state was acquired and provides details about the acquired point, including its ID (hash) and slot number.  The 'method' field indicates the type of query.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"acquireLedgerState\",\n    \"result\": {\n      \"acquired\": \"ledgerState\",\n      \"point\": {\n          \"id\": \"dbafebb0146b2ec45186dfba6c287ad69c83d3fd9a186b39d99ab955631539e0\",\n          \"slot\": 12526684\n      }\n    },\n    \"id\": \"acquire-network-tip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building BLST\nDESCRIPTION: These commands clone, build, and install the BLST library for BLS12-381 cryptography. It includes creating a pkg-config file for the library and copying headers and the library itself to /usr/local.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/supranational/blst\ncd blst\ngit checkout v0.3.10\n./build.sh\ncat > libblst.pc << EOF\nprefix=/usr/local\nexec_prefix=\\${prefix}\nlibdir=\\${exec_prefix}/lib\nincludedir=\\${prefix}/include\n\nName: libblst\nDescription: Multilingual BLS12-381 signature library\nURL: https://github.com/supranational/blst\nVersion: 0.3.10\nCflags: -I\\${includedir}\nLibs: -L\\${libdir} -lblst\nEOF\nsudo cp libblst.pc /usr/local/lib/pkgconfig/\nsudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/\nsudo cp libblst.a /usr/local/lib\nsudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}}\n```\n\n----------------------------------------\n\nTITLE: Calculate Minimum UTxO Value\nDESCRIPTION: Illustrates how to compute the minimum Lovelace requirement on transaction outputs using the `coinsPerUTxOByte` protocol parameter. The formula uses the serialized output size and `coinsPerUTxOByte` as a coefficient in a linear function.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nminUTxOValue(output) =  |serialise(output)| * coinsPerUTxOByte\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response Example\nDESCRIPTION: This JSON snippet shows a possible response to the `findIntersection` request. It contains the same `method` and `id` as the original request.  The `result` field provides the intersection point and the tip of the chain, including the block ID, block number, and slot.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"findIntersection\",\n    \"result\": {\n      \"intersection\": \"origin\",\n      \"tip\": {\n        \"id\": \"d184f428159290bf3558b4d1d139e6a07ec6589738c28a0925a7ab776bde4d62\",\n        \"blockNo\": 4870185,\n        \"slot\": 12176171\n      }\n    },\n    \"id\": \"init-1234-5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Health Check Command\nDESCRIPTION: This Dockerfile snippet demonstrates how to use the `ogmios health-check` command to monitor a running Ogmios server within a Docker container. It sets up a health check with a specified interval, timeout, and number of retries.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_15\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels - Ogmios\nDESCRIPTION: This code snippet demonstrates how to configure the logging levels for different components in Ogmios using command-line options.  It specifically shows disabling health logging and setting the websocket logging level to debug. The ellipsis indicates there may be other command-line options specified in addition to these.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/configuring.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nogmios --log-level-health Off \\\n       --log-level-websocket Debug \\\n       ...\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction with Additional UTXO Set\nDESCRIPTION: This JSON payload demonstrates how to evaluate a transaction with an additional UTXO set in Ogmios. This is used when the transaction refers to non-existing or yet-to-know inputs.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"evaluateTransaction\",\n    \"params\": {\n      \"transaction\": {\n        \"cbor\": \"<base16>\",\n      },\n      \"additionalUtxoSet\": [\n        [\n          {\n            \"transaction\": { \"id\": \"97b2af6dfc6a4825e934146f424cdd6ede43ff98c355d2ae3aa95b0f70b63949\" },\n            \"output\": { \"index\": 3 }\n          },\n          {\n            \"address\": \"addr_test1qp9zjnc775anpndl0jh3w7vyy25syfezf70d\",\n            \"value\": { \"lovelace\": 10000000 }\n          }\n        ]\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Address with Bech32 in Haskell\nDESCRIPTION: This code snippet demonstrates how to encode an address using the fast-bech32 library. It imports the necessary functions from the Data.ByteString.Bech32 module, specifically HumanReadablePart and encodeBech32.  The encodeAddress function takes a ByteString as input and returns a Text representation of the encoded address, prefixed with \"addr\".\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/fast-bech32/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\nimport Data.ByteString.Bech32 \n  ( HumanReadablePart(..), encodeBech32 )\n\nencodeAddress :: ByteString -> Text\nencodeAddress = encodeBech32 (HumanReadablePart \"addr\") \n```\n\n----------------------------------------\n\nTITLE: Cabal Package Configuration for pcre\nDESCRIPTION: This snippet shows how to specify extra include and library directories for the `pcre-light` package in `cabal.project.local` on MacOS. This is necessary if `pcre` is installed via Homebrew and its default paths are not recognized.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_3\n\nLANGUAGE: cabal\nCODE:\n```\npackage pcre-light\n  extra-include-dirs: /opt/homebrew/opt/pcre/include\n  extra-lib-dirs: /opt/homebrew/opt/pcre/lib\n```\n\n----------------------------------------\n\nTITLE: ProposedProtocolParameters Query Fix (TypeScript)\nDESCRIPTION: The `proposedProtocolParameters` query is fixed to ensure all fields are required. It can now return either Shelley or Alonzo protocol parameters. This ensures correct data retrieval and compatibility with different Cardano eras, improving the utility of protocol parameter information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: TypeScript Metadatum Conversion\nDESCRIPTION: This TypeScript helper function converts a detailed metadata schema into plain JavaScript whenever possible, primarily for CIP-0025 metadata. It is unsound in the general case as not every on-chain metadata can be represented as JavaScript objects. It takes a detailed metadata schema as input and attempts to convert it into a plain JavaScript object.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`{ \"list\": [ { \"string\": \"foo\" }, { \"int\": 42 } ] }` → `[\"foo\", 42]`\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Health Check\nDESCRIPTION: This snippet demonstrates how to configure a Docker health check for an Ogmios server using the `ogmios health-check` command. The health check is configured to run every 10 seconds, with a timeout of 5 seconds and 1 retry.  It is intended for monitoring a running Ogmios server container.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check\n```\n\n----------------------------------------\n\nTITLE: Querying Epoch from Ogmios using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to query the current epoch number from an Ogmios server within the REPL environment. It uses the `epoch()` function, which is available in the REPL context, and awaits the result.  The result will be the current epoch number.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/packages/repl/README.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nogmios> await epoch()\n256\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClient: JSON-WSP reflection removal (TypeScript)\nDESCRIPTION: The `ChainSyncClient` no longer exposes JSON-WSP reflection to avoid unexpected results due to the first n messages sharing the same reflected value. This improves reliability and prevents potential issues with reflected values during message processing.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Query Network Start Time (JSON)\nDESCRIPTION: This JSON snippet represents a request to query the network's start time. The successful response (not provided) will contain the timestamp representing the start time of the Cardano network.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/startTime\"\n}\n```\n\n----------------------------------------\n\nTITLE: StateQueryClient: Re-acquiring new points (TypeScript)\nDESCRIPTION: The `StateQueryClient` can now re-acquire new points at will, which is useful for long-running clients where previously acquired points may expire. This prevents stale data and maintains a current view of the blockchain state. This enhances stability and reliability for prolonged usage.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Query Network Block Height (JSON)\nDESCRIPTION: This JSON snippet is a request to query the network's block height. The response (not shown) would contain the current block height of the Cardano network as seen by the Ogmios instance.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/blockHeight\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Projected Rewards by Stake\nDESCRIPTION: This JSON snippet demonstrates how to query projected rewards using a stake value in Ogmios. It sends a `queryLedgerState/projectedRewards` request with the stake amount specified in the `params` field. The `jsonrpc` and `method` fields are mandatory for all Ogmios requests.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/projectedRewards\",\n  \"params\": {\n    \"stake\": [\n      1000000\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ogmios Server Executable\nDESCRIPTION: This command installs the Ogmios server executable using cabal.  The parameters `--install-method=copy --overwrite-policy=always` ensures the executable will be copied to a directory in your PATH and that existing files are overwritten. The second line runs the installed Ogmios with the --help flag.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cabal install ogmios:exe:ogmios --install-method=copy --overwrite-policy=always\n$ ogmios --help\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Log Data Type in Haskell\nDESCRIPTION: Defines a data type `HttpLog` to represent HTTP log messages with different severity levels. It derives `Generic` and `ToJSON` for easy serialization. It implements `HasSeverityAnnotation` to map log types to their severity.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\ndata HttpLog\n    = SomeHttpLog\n    | SomeHttpWarning\n    deriving stock (Generic)\n    deriving anyclass (ToJSON)\n\nnstance HasSeverityAnnotation HttpLog\n   getSeverityAnnotation = \\case\n       SomeHttpLog -> Info\n       SomeHttpWarning -> Warning\n```\n\n----------------------------------------\n\nTITLE: Type reworks and renaming (TypeScript)\nDESCRIPTION: Several TypeScript types have been reworked and renamed for consistency and clarity. Key changes include `AssetQuantity` to `bigint`, `Int` in Metadatum to `bigint`, and unification of `Utxo` types across eras. Type `DelegationsAndRewards` renamed into `DelegationsAndRewardsByAccounts` etc.  This simplifies usage and reduces redundancy in type definitions.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: StateQueryClient Point Re-Acquisition (TypeScript)\nDESCRIPTION: This snippet explains the capability of the `StateQueryClient` in the TypeScript client to re-acquire new points at will. This is particularly useful for long-running clients where previously acquired points may expire, ensuring that state queries always operate against a valid blockchain point.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `StateQueryClient` can now re-acquire new points at will, useful for long-running clients for which previously acquired points may expire.\n```\n\n----------------------------------------\n\nTITLE: ChainSyncClient Message Queue (TypeScript)\nDESCRIPTION: This snippet describes the addition of an in-memory queue to the `ChainSyncClient` in the TypeScript client. This queue ensures sequential processing of `requestNext` responses when async operations are present in message handlers.  It can be bypassed for non-sequential processing by setting the `sequential` option to `false` during construction, offering flexibility based on application requirements.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nThe `ChainSyncClient` now implements an in-memory queue to ensure `requestNext` responses are processed sequentially when there are async operations in the message handlers.  This behaviour can be bypassed where sequential processsing is not required, by setting the new construction option `sequential` to `false`.\n```\n\n----------------------------------------\n\nTITLE: Defining DB Log Data Type in Haskell\nDESCRIPTION: Defines a data type `DbLog` to represent database log messages. It derives `Generic` and `ToJSON` for easy serialization.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ndata DbLog = SomeDbLog\n    deriving stock (Generic)\n    deriving anyclass (ToJSON)\n```\n\n----------------------------------------\n\nTITLE: Start Testnet Cardano Node and Ogmios Server\nDESCRIPTION: Starts the Cardano node and Ogmios server for the testnet network. This command sets up the environment needed for testing the Ogmios client against the testnet.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nyarn testnet:up\n```\n\n----------------------------------------\n\nTITLE: Cloning Ogmios TypeScript Client Repository\nDESCRIPTION: This command clones the Ogmios repository from GitHub using git. The `--depth 1` flag performs a shallow clone, and the `--recursive` and `--shallow-submodules` flags ensure submodules are initialized and cloned shallowly as well. Following the clone, it changes the current directory to the `clients/TypeScript` directory.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git\n$ cd cardano-ogmios/clients/TypeScript\n```\n\n----------------------------------------\n\nTITLE: Native Script 'All' Clause Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a native script 'all' clause.  It includes a \"clause\" field set to \"all\" and a \"from\" field which is an array of native scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"all\",\n  \"from\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Added isBabbageProtocolParameters helper function in TypeScript\nDESCRIPTION: This entry describes the addition of a new `isBabbageProtocolParameters` helper function and extended support of existing ones to Babbage in the TypeScript client. See [#234](https://github.com/CardanoSolutions/ogmios/pull/234).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Convert Metadata to JSON (TypeScript)\nDESCRIPTION: Introduces a new helper function `unsafeMetatumAsJSON` in the TypeScript client to convert a detailed metadata schema into plain JavaScript objects where possible.  This function is specifically designed for CIP-0025 metadata and similar formats, but is considered unsound in the general case as not all on-chain metadata can be represented as JavaScript objects. It handles list structures containing strings and integers.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n`{ \"list\": [ { \"string\": \"foo\" }, { \"int\": 42 } ] }` → `[\"foo\", 42]`\n```\n\n----------------------------------------\n\nTITLE: Native Script 'Before' Clause Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a native script expiration clause (previously 'expiresAt'). It includes a \"clause\" field set to \"before\" and a \"slot\" field containing a slot number.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"before\",\n  \"slot\": \"<slot>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ogmios Server with Cabal\nDESCRIPTION: This command runs the Ogmios server executable directly using cabal. The `-- --help` argument passes the `--help` flag to the Ogmios executable itself, displaying help information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cabal run ogmios:exe:ogmios -- --help\n```\n\n----------------------------------------\n\nTITLE: Stake Delegation Certificate Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a stake delegation certificate. It includes a \"type\" field and separates the credential and stake pool information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakeDelegation\",\n  \"credential\": \"<credential-digest>\",\n  \"stakePool\": {\n    \"id\": \"<stake-pool-id>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Cabal\nDESCRIPTION: This command runs all the unit tests for the project using cabal. It compiles and executes the test suites defined in the cabal project.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ cabal test all\n```\n\n----------------------------------------\n\nTITLE: Adding isBabbageProtocolParameters helper (TypeScript)\nDESCRIPTION: This snippet details the addition of a new helper function, `isBabbageProtocolParameters`, to the Ogmios TypeScript SDK.  It also includes extending support for existing helper functions to the Babbage era.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Genesis Delegation Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a genesis delegation certificate. It includes a \"type\" field and separates the issuer and delegate information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"genesisDelegation\",\n  \"issuer\": {\n    \"verificationKeyHash\": \"<credential-digest>\",\n    \"vrfVerificationKeyHash\": \"<vrf-digest>\"\n  },\n  \"delegate\": {\n    \"verificationKeyHash\": \"<credential-digest>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing string concatenation in UnknownResultError (TypeScript)\nDESCRIPTION: This snippet outlines a TypeScript change that removes superfluous string concatenation within the `UnknownResultError` message. This optimization simplifies the error message generation process.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Starting Ogmios and Cardano node with Docker Compose\nDESCRIPTION: This command starts the Ogmios and Cardano node stack using Docker Compose. It assumes a `docker-compose.yml` file exists in the current directory that defines the services.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Stake Pool Retirement Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a stake pool retirement certificate. It contains a \"poolRetirement\" field with poolId and retirementEpoch.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"poolRetirement\": {\n    \"poolId\": \"<stake-pool-id>\",\n    \"retirementEpoch\": \"<epoch>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Ogmios Server Repository\nDESCRIPTION: This command clones the Ogmios repository from GitHub using git. The `--depth 1` flag performs a shallow clone, and the `--recursive` and `--shallow-submodules` flags ensure submodules are initialized and cloned shallowly as well. Following the clone, it changes the current directory to the `server` directory.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git\n$ cd cardano-ogmios/server\n```\n\n----------------------------------------\n\nTITLE: Querying Pool IDs\nDESCRIPTION: This state query retrieves the list of all pool identifiers that are currently registered and active on the Cardano network. No specific code is provided, but this outlines the query name and its purpose.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Stake Pool Registration Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a stake pool registration certificate. It includes a \"type\" field and nests the stake pool parameters under \"stakePool\".\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakePoolRegistration\",\n  \"stakePool\": {\n    \"id\": \"<stake-pool-id>\",\n    \"parameters\": \"<stake-pool-parameters>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local-State Query Response Example\nDESCRIPTION: Demonstrates the response format for local-state queries in Ogmios' new API, showing how results are linked to their parent queries and includes the chain tip's slot and id.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/tip\",\n  \"result\": {\n    \"slot\": 1234,\n    \"id\": \"1234567890abcdef\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Haskell Data Types with ToJSONViaShow Derivation\nDESCRIPTION: This snippet defines three Haskell data types: `Foo`, `Log`, and `LastUpdate`. Each type derives `Show` using `deriving stock Show` and `ToJSON` using `deriving ToJSON via ToJSONViaShow`. This allows automatic generation of JSON instances based on the `Show` instance.  `UTCTime` is used in LastUpdate.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/json-via-show/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\n{-# LANGUAGE DerivingVia #-}\n\ndata Foo = Foo\n    { foo :: [Int]\n    , bar :: String\n    }\n    deriving stock Show\n    deriving ToJSON via ToJSONViaShow Foo\n\ndata Log = Log Bool LastUpdate\n    deriving stock Show\n    deriving ToJSON via ToJSONViaShow Log\n\nnewtype LastUpdate = LastUpdate\n    { unLastUpdate :: UTCTime\n    }\n    deriving stock Show\n    deriving ToJSON via ToJSONViaShow LastUpdate\n```\n\n----------------------------------------\n\nTITLE: Stake Pool Retirement Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a stake pool retirement certificate. It includes a \"type\" field and nests the poolId and retirementEpoch under \"stakePool\".\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakePoolRetirement\",\n  \"stakePool\": {\n    \"id\": \"<stake-pool-id>\",\n    \"retirementEpoch\": \"<epoch>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Ledger State Constitution (JSON)\nDESCRIPTION: This JSON snippet represents an example query for the Ledger State Constitution and its expected response. It showcases the structure of both the request and the successful response, revealing the metadata associated with the constitution, including URL and hash information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/constitution\",\n  \"result\": {\n    \"metadata\": {\n      \"url\": \"\",\n      \"hash\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"guardrails\": null\n  },\n  \"id\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Ogmios App Modules Structure - Haskell\nDESCRIPTION: This code snippet shows the structure of the App modules within the Ogmios application, responsible for effectful operations. These modules include the client-side implementations of Ouroboros mini-protocols, HTTP server, and WebSocket server handlers, handling interactions with the Cardano node and clients.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/README.md#_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── App\n             |      ├── Health.hs\n             |      ├── Metrics.hs\n             |      ├── Configuration.hs\n             |      ├── Protocol.hs\n             |      ├── Protocol\n             |      │   ├── ChainSync.hs\n      Logic  |      │   ├── StateQuery.hs\n             |      │   ├── TxMonitor.hs\n             |      │   └── TxSubmission.hs\n             |      ├── Server.hs\n             |      └── Server\n             |          ├── Http.hs\n             |          └── WebSocket.hs\n             v\n```\n\n----------------------------------------\n\nTITLE: Transaction Metadata Transformation (Old)\nDESCRIPTION: This JSON snippet illustrates the old format of transaction metadata.  It demonstrates how binary data would be encoded as a JSON object.  Note the discriminant keys such as 'string', 'int', 'map', and 'list'.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"14\": {\n    \"map\": [\n      {\n        \"k\": { \"string\": \"foo\" },\n        \"v\": { \"int\": 42 }\n      },\n      {\n        \"k\": { \"string\": \"bar\" },\n        \"v\": { \"list\": [ { \"int\": 1 }, { \"int\": 2 } ] }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ogmios on preprod with custom port\nDESCRIPTION: This command starts Ogmios and Cardano node on the preprod network, listening on port 1338.  It uses environment variables to configure the network and port, and sets a project name to isolate data volumes.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ NETWORK=preprod OGMIOS_PORT=1338 docker-compose --project-name cardano-ogmios-preprod up\n```\n\n----------------------------------------\n\nTITLE: Run Tests\nDESCRIPTION: Runs the tests for the Cardano Ogmios TypeScript client packages. This requires a testnet environment to be running.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn testnet:up\n```\n\nLANGUAGE: console\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Stake Credential Registration Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a stake credential registration certificate. It includes a \"type\" field and the credential.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakeCredentialRegistration\",\n  \"credential\": \"<credential-digest>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Execution Units Evaluator Handle Interface - Haskell\nDESCRIPTION: This Haskell data type defines an interface for evaluating execution units. It includes a function `evaluateExecutionUnitsM` that takes a UTxO set and a serialized transaction as input, and returns an `EvaluateTxResponse` within a monadic context `m`. This allows for decoupling the evaluation process from the tx-submission client.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/015-script-execution-units-evaluator.md#_snippet_1\n\nLANGUAGE: Haskell\nCODE:\n```\ndata ExecutionUnitsEvaluator m block = ExecutionUnitsEvaluator\n    {\n        evaluateExecutionUnitsM\n            :: UTxO (MostRecentEra block)\n            -> SerializedTx block\n            -> m (EvaluateTxResponse block)\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Hugo\nDESCRIPTION: This shows how to build the documentation using Hugo. It requires Hugo extended version >= 0.96.0 to be installed.  The second command will serve the documentation on localhost:1313.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nhugo\n\n# or, alternatively for a development setup on http://localhost:1313\n\nhugo serve\n```\n\n----------------------------------------\n\nTITLE: Transaction Metadata Transformation (New)\nDESCRIPTION: This JSON snippet illustrates the new format of transaction metadata. It shows a \"cbor\" field which contains the CBOR representation, and a \"json\" field containing a plain JSON object representation (when possible).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"14\": {\n    \"cbor\": \"A263666F6F182A63626172820102\",\n    \"json\": {\n      \"foo\": 42,\n      \"bar\": [ 1, 2 ]\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building secp256k1\nDESCRIPTION: This series of commands clones, configures, builds, and installs a custom revision of bitcoin-core's secp256k1 library with Schnorr signature support enabled. It uses autoconf and libtool for the build process and installs the library to /usr.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/bitcoin-core/secp256k1.git\ncd secp256k1\ngit reset --hard ac83be33d0956faf6b7f61a60ab524ef7d6a473a\n./autogen.sh\n./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental\nmake\nmake check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Querying Projected Rewards by Keys\nDESCRIPTION: This JSON snippet shows how to query projected rewards using a list of keys in Ogmios. It sends a `queryLedgerState/projectedRewards` request. The `params` object contains a `keys` array with stake key hashes and stake addresses. The server returns the projected rewards for the specified keys.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/projectedRewards\",\n  \"params\": {\n    \"keys\": [\n      \"7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\",\n      \"stake_vkh10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6s39tk6l\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Stake Distribution Response (JSON)\nDESCRIPTION: This JSON is a truncated example of the stake distribution across various stake pools. Each pool is identified by its pool ID, and the corresponding stake and VRF (Verifiable Random Function) values are provided. The stake represents the amount of stake delegated to that pool.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"queryLedgerState/liveStakeDistribution\",\n    \"result\": {\n        \"liveStakeDistribution\": {\n            \"pool1w3s6gk83y2g3670emy3yfjw9myz3u4whph7peah653rmsfegyj3\": {\n                \"stake\": 0,\n                \"vrf\": \"29c1a293c550beea756bc0c01416bacd7030ae8992e13ca242d4d6c2aebaac0d\"\n            },\n            \"pool1n5shd9xdt4s2gm27fxcnuejaqhhmpepn6chw2c82kqnuzdtpsem\": {\n                \"stake\": 0.00003058882418046271,\n                \"vrf\": \"7e363eb8bfd8fef018da4c397d6a6ec25998363434e92276e40ee6c706da3ae5\"\n            },\n            \"...\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Hot Key Registration Schema Before Change\nDESCRIPTION: This code represents the schema for the constitutional committee hot key registration before the schema adjustment. It contains the type, member id and hot key. It is part of the governance structure in the Conway era.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeHotKeyRegistration\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"hotKey\": \"0000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pack Packages\nDESCRIPTION: Packs the packages into a distributable format using a shell script.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n./scripts/pack.sh\n```\n\n----------------------------------------\n\nTITLE: Fixing number to bigint data-type parsing (TypeScript)\nDESCRIPTION: This change fixes a data-type issue where certain fields were incorrectly parsed as `number` instead of `bigint` in the Ogmios TypeScript client.  This correction aligns the TypeScript schema with the actual data types and avoids potential issues with large numbers.  While technically a breaking change, the interface was correctly indicated 'bigint'.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed a couple of data-types with fields parsed as `number` instead of `bigint`.\n```\n\n----------------------------------------\n\nTITLE: Remove superfluous string concatenation in UnknownResultError in TypeScript\nDESCRIPTION: This changelog entry notes the removal of unnecessary string concatenation within the `UnknownResultError` message in the TypeScript client. This change aims to improve code clarity and efficiency by simplifying the error message construction.  See [#236](https://github.com/CardanoSolutions/ogmios/pull/236).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Validating JSON Schema using validateToJSON in Haskell\nDESCRIPTION: This snippet demonstrates how to use the `validateToJSON` function from the `Test.Hspec.Json.Schema` module to validate a `ToJSON` instance against a JSON schema.  It specifies the data type to be validated (`MyDataType`) and the location of the schema (`schema.json#/definitions/MyDataType`). The arbitrary instance for the data type is also defined.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/hspec-json-schema/README.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\n{-# LANGUAGE TypeApplications #-}\n\nmodule MyModule\n    ( spec\n    ) where\n\nimport Test.Hspec\n    ( Spec, SpecWith, describe )\nimport Test.Hspec.Json.Schema\n    ( validateToJSON )\n\nspec :: Spec\nspec = do\n    describe \"MyDataType\" $\n      validateToJSON (arbitrary @MyDataType) \"schema.json#/definitions/MyDataType\"\n\ninstance Arbitrary MyDataType\n    arbitrary = {- ... -}\n```\n\n----------------------------------------\n\nTITLE: Pkg REPL\nDESCRIPTION: Starts the REPL in pkg mode. This is likely for packaging or distribution purposes.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nyarn repl:pkg\n```\n\n----------------------------------------\n\nTITLE: Stop Mainnet Cardano Node and Ogmios Server\nDESCRIPTION: Stops the Cardano node and Ogmios server for the mainnet network.  This is a teardown step to cleanly shut down the mainnet environment.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nyarn mainnet:down\n```\n\n----------------------------------------\n\nTITLE: Adding isBabbageProtocolParameters helper (TypeScript)\nDESCRIPTION: This change introduces a new `isBabbageProtocolParameters` helper function and extends support of the existing ones to Babbage in the Ogmios TypeScript client. This provides developers with utilities for determining if protocol parameters are specific to the Babbage era. It relies on the correct implementation of protocol parameter data structures.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nNew `isBabbageProtocolParameters` helper function, and extended support of the existing ones to Babbage.\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request Example\nDESCRIPTION: This JSON snippet demonstrates a valid JSON-RPC request message sent to Ogmios.  It uses the `findIntersection` method, which is related to the chain synchronization protocol. The `params` field specifies a list of points for intersection, and the `id` field is used for tracking state.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/basics.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"findIntersection\",\n    \"params\": { \"points\": [ \"origin\" ] },\n    \"id\": \"init-1234-5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ogmios Control Modules Structure - Haskell\nDESCRIPTION: This code snippet outlines the structure of the Control modules within the Ogmios application, responsible for abstracting I/O effects. This layer utilizes io-sim as a foundation and includes custom additions tailored to Ogmios. Modules in this layer provide abstractions for exception handling, asynchronous operations, clock management, logging, metrics, Ouroboros protocol interactions, STM (Software Transactional Memory), and WebSocket interactions.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/README.md#_snippet_3\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── Control\n             |      ├── Exception.hs\n             |      ├── MonadAsync.hs\n             |      ├── MonadClock.hs\n    Effects  |      ├── MonadLog.hs\n             |      ├── MonadMetrics.hs\n             |      ├── MonadOuroboros.hs\n             |      ├── MonadSTM.hs\n             v      └── MonadWebSocket.hs\n```\n\n----------------------------------------\n\nTITLE: Fixing browser detection for IsomorphicWebSocket in TypeScript\nDESCRIPTION: This entry refers to a fix for browser detection within the `IsomorphicWebSocket` abstraction in the TypeScript client.  It addresses an issue related to correctly identifying the browser environment for WebSocket connections, ensuring compatibility across different platforms. See [#273](https://github.com/CardanoSolutions/ogmios/issues/274)\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Native Script Signature Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a native script signature clause. It includes a \"clause\" field indicating the type of clause and a \"from\" field containing the credential digest.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"signature\",\n  \"from\": \"<credential-digest>\",\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-WSP Request Example\nDESCRIPTION: Illustrates the old JSON-WSP request format used in previous versions of Ogmios for querying information.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"jsonwsp/request\",\n  \"version\": \"1.0\",\n  \"servicename\": \"ogmios\",\n  \"methodname\": \"query\",\n  \"args\": { \"query\": \"genesisConfig\" },\n  \"mirror\": { \"id\": \"foo\" }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Byron Witness Schema\nDESCRIPTION: Adds missing `required` constraints in the JSON schema for Byron witness representation. This ensures that TypeScript types are correctly generated and reflect the required fields. Addresses a previous oversight where TypeScript types were incorrectly generated as optional.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd missing `required` constraints in the JSON schema for Byron witness representation that caused TypeScript types to be generated as optional.\n```\n\n----------------------------------------\n\nTITLE: Native Script Signature Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a native script signature clause. It contains a single key-value pair where the key is the credential digest.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"<credential-digest>\"\n```\n\n----------------------------------------\n\nTITLE: Fixing data-types with bigint in TypeScript\nDESCRIPTION: This snippet describes a bug fix where certain data-types were incorrectly parsed as `number` instead of `bigint` in the Ogmios TypeScript client. Although technically an internal breaking change, it's considered a bug fix as the announced interface correctly specified `bigint`.  Users utilizing `number` may encounter issues as the values will now be `bigint`.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Query Ledger State Constitution (JSON)\nDESCRIPTION: This JSON snippet represents the request for quering ledger state constitution.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/constitution\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Git Revision with Template Haskell (TH)\nDESCRIPTION: This Haskell code snippet demonstrates how to use the gitRevParseHEAD function from the Data.Git.Revision.TH module to embed the current Git revision into the compiled code. It requires the TemplateHaskell language extension and the git command-line tool to be available during compilation. The resulting revision string is then printed to the console.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/git-th/README.md#_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Data.Git.Revision.TH\n  ( gitRevParseHEAD )\n\nmain :: IO ()\nmain = do\n  let revHEAD = $(gitRevParseHEAD)\n  putStrLn $ \"revision: \" <> revHEAD\n```\n\n----------------------------------------\n\nTITLE: Query Ledger State Era Summaries (JSON)\nDESCRIPTION: This JSON snippet depicts how to query era summaries.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/eraSummaries\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Haskell Data Types to JSON using ToJSONViaShow\nDESCRIPTION: This snippet demonstrates how to encode instances of the `Foo` and `Log` data types to JSON using the `encode` function. The `ToJSON` instances are derived using `ToJSONViaShow`, meaning the JSON representation is based on the `Show` representation of the data. Note that `now` represents current time.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/json-via-show/README.md#_snippet_1\n\nLANGUAGE: Haskell\nCODE:\n```\n>>> encode (Foo [42] \"str\")\n{\"Foo\":{\"foo\":[\"42\"],\"bar\":\"str\"}}\n\n>>> encode (Log True (LastUpdate now))\n{\"Log\":[true,{\"LastUpdate\":\"2021-06-05 17:17:54.710264188 UTC\"}]}\n```\n\n----------------------------------------\n\nTITLE: Components of Transaction Fee\nDESCRIPTION: This set of equations defines the components A, B, and C used in the minimum transaction fee calculation. 'A' depends on the transaction size and a coefficient, 'B' is a constant, and 'C' is the reference scripts tier price.  Understanding these components is essential for predicting transaction costs in the Conway era.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{array}{lll}\nA & = & sizeOf(transaction) \\times minFeeCoefficient  \\\\\nB & = & minFeeConstant  \\\\\nC & = & referenceScriptsTierPrice  \\\\\n\\end{array}\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Submission Errors using AsyncAPI schemas\nDESCRIPTION: This snippet defines the structure of various transaction submission errors in Ogmios using AsyncAPI schemas. Each error code is associated with a specific schema definition that describes the failure scenario. The schemas are referenced from the ogmios.json file, and they cover a wide range of potential issues during transaction submission, from era mismatches to governance proposal failures.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-tx-submission.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nasyncapi: '2.4.0'\ninfo:\n  title: \"\"\n  version: '6.0.0'\nservers: {}\nchannels: {}\ncomponents:\n  schemas:\n    3000/IncompatibleEra:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/0\"\n    3001/UnsupportedEra:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/1\"\n    3002/OverlappingAdditionalUtxo:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/2\"\n    3003/NodeTipTooOld:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/3\"\n    3004/CannotCreateEvaluationContext:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/4\"\n    3005/EraMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/0\"\n    3010/ScriptExecutionFailure:\n      $ref: \"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/5\"\n    3011/InvalidRedeemerPointers:\n      $ref: \"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/0\"\n    3012/ValidationFailure:\n      $ref: \"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/1\"\n    3013/UnsuitableOutputReference:\n      $ref: \"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/2\"\n    3100/InvalidSignatories:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/1\"\n    3101/MissingSignatories:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/2\"\n    3102/MissingScripts:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/3\"\n    3103/FailingNativeScript:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/4\"\n    3104/ExtraneousScripts:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/5\"\n    3105/MissingMetadataHash:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/6\"\n    3106/MissingMetadata:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/7\"\n    3107/MetadataHashMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/8\"\n    3108/InvalidMetadata:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/9\"\n    3109/MissingRedeemers:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/10\"\n    3110/ExtraneousRedeemers:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/11\"\n    3111/MissingDatums:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/12\"\n    3112/ExtraneousDatums:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/13\"\n    3113/ScriptIntegrityHashMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/14\"\n    3114/OrphanScriptInputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/15\"\n    3115/MissingCostModels:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/16\"\n    3116/MalformedScripts:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/17\"\n    3117/UnknownOutputReference:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/18\"\n    3118/OutsideOfValidityInterval:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/19\"\n    3119/TransactionTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/20\"\n    3120/ValueTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/21\"\n    3121/EmptyInputSet:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/22\"\n    3122/FeeTooSmall:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/23\"\n    3123/ValueNotConserved:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/24\"\n    3124/NetworkMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/25\"\n    3125/InsufficientlyFundedOutputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/26\"\n    3126/BootstrapAttributesTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/27\"\n    3127/MintingOrBurningAda:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/28\"\n    3128/InsufficientCollateral:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/29\"\n    3129/CollateralLockedByScript:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/30\"\n    3130/UnforeseeableSlot:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/31\"\n    3131/TooManyCollateralInputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/32\"\n    3132/MissingCollateralInputs:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/33\"\n    3133/NonAdaCollateral:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/34\"\n    3134/ExecutionUnitsTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/35\"\n    3135/TotalCollateralMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/36\"\n    3136/SpendsMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/37\"\n    3137/UnauthorizedVotes:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/38\"\n    3138/UnknownGovernanceProposals:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/39\"\n    3139/InvalidProtocolParametersUpdate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/40\"\n    3140/UnknownStakePool:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/41\"\n    3141/IncompleteWithdrawals:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/42\"\n    3142/RetirementTooLate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/43\"\n    3143/StakePoolCostTooLow:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/44\"\n    3144/MetadataHashTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/45\"\n    3145/CredentialAlreadyRegistered:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/46\"\n    3146/UnknownCredential:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/47\"\n    3147/NonEmptyRewardAccount:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/48\"\n    3148/InvalidGenesisDelegation:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/49\"\n    3149/InvalidMIRTransfer:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/50\"\n    3150/ForbiddenWithdrawal:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/51\"\n    3151/CredentialDepositMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/52\"\n    3152/DRepAlreadyRegistered:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/53\"\n    3153/DRepNotRegistered:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/54\"\n    3154/UnknownConstitutionalCommitteeMember:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/55\"\n    3155/GovernanceProposalDepositMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/56\"\n    3156/ConflictingCommitteeUpdate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/57\"\n    3157/InvalidCommitteeUpdate:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/58\"\n    3158/TreasuryWithdrawalMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/59\"\n    3159/InvalidOrMissingPreviousProposals:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/60\"\n    3160/VotingOnExpiredActions:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/61\"\n    3161/ExecutionBudgetOutOfBounds:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/62\"\n    3162/InvalidHardForkVersionBump:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/63\"\n    3163/ConstitutionGuardrailsHashMismatch:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/64\"\n    3164/ConflictingInputsAndReferences:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/65\"\n    3165/UnauthorizedGovernanceAction:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/66\"\n    3166/ReferenceScriptsTooLarge:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/67\"\n    3167/UnknownVoters:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/68\"\n    3998/UnrecognizedCertificateType:\n      $ref: \"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/62\"\n```\n\n----------------------------------------\n\nTITLE: Local-State Query Request Example\nDESCRIPTION: Illustrates a local-state query request in the updated Ogmios API using the JSON-RPC 2.0 format to query the chain tip.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/tip\",\n}\n```\n\n----------------------------------------\n\nTITLE: Add Ogmios Client Package\nDESCRIPTION: This command adds the @cardano-ogmios/client package to your project using yarn. It allows you to use the provided TypeScript client for interacting with the Ogmios interface.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/packages/client/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @cardano-ogmios/client\n```\n\n----------------------------------------\n\nTITLE: Fixing browser detection for IsomorphicWebSocket (TypeScript)\nDESCRIPTION: This TypeScript snippet details a fix related to browser detection within the `IsomorphicWebSocket` abstraction. The fix addresses an issue where browser detection was not functioning correctly.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Publish to npm.org\nDESCRIPTION: Publishes the packages to the npm.org registry using a shell script.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n./scripts/publish.sh\n```\n\n----------------------------------------\n\nTITLE: Fixing IsomorphicWebSocket browser detection (TypeScript)\nDESCRIPTION: This change fixes the browser detection logic for the `IsomorphicWebSocket` abstraction in the Ogmios TypeScript client. This ensures that the correct WebSocket implementation is used in different environments (browser vs. Node.js). The correct websocket implementation increases client stability across platforms.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nFixed browser detection for the `IsomorphicWebSocket` abstraction.\n```\n\n----------------------------------------\n\nTITLE: Lint Code\nDESCRIPTION: Runs the linter to check the code for style and potential errors.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: UTxO Query Update\nDESCRIPTION: The `utxo` query can now accept a list of `TxIn` as an argument and still supports lists of `Address`. Lists can't be heterogeneous and it's not possible to mix `TxIn` and `Address`.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nThe `utxo` query can now accept a list `TxIn` as argument, and still supports list of `Address`. Note that lists can't be heterogeneous and it's not possible to mix `TxIn` and `Address`.\n```\n\n----------------------------------------\n\nTITLE: SubmitTx: Error Handling Updates (TypeScript)\nDESCRIPTION: The `SubmitTx` no longer returns Byron errors, simplifying error handling. Submit errors are now scoped directly under `errors` instead of `errors.byron` or `errors.shelley`. This change streamlines error checking and reduces complexity for developers.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Cabal Package Flags Configuration\nDESCRIPTION: This snippet configures the cabal package `cardano-crypto-praos` to use an external libsodium library with VRF support.  This is required if you are running a validator node. It specifies a flag to indicate the usage of the external libsodium-vrf library.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_0\n\nLANGUAGE: cabal\nCODE:\n```\npackage cardano-crypto-praos\n  flags: -external-libsodium-vrf\n```\n\n----------------------------------------\n\nTITLE: Query Network Genesis Configuration (Shelley Era) (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to query the genesis configuration for the Shelley era.  The 'params' field specifies the era for which the genesis configuration is requested.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryNetwork/genesisConfiguration\",\n  \"params\": {\n    \"era\": \"shelley\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Prometheus Metrics via Curl\nDESCRIPTION: This command retrieves Prometheus metrics from the `/metrics` endpoint of the Ogmios server. It requires `curl` to be installed. The output is in Prometheus exposition format, which can be scraped by a Prometheus server for monitoring and alerting.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/monitoring.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:1337/metrics\n```\n\n----------------------------------------\n\nTITLE: Main Function with Logging Setup in Haskell\nDESCRIPTION: The main function sets up the logging environment using `withStdoutTracer` and runs the HTTP and DB applications concurrently, passing the respective tracers to them. It depends on functions like `myHttpApplication` and `myDbApplication` to function correctly.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\nmain :: IO ()\nmain = do\n    withStdoutTracer mempty emptyConfiguration $ \\tracers -> do\n        concurrently_\n            (myHttpApplication (tracerHttp tracers))\n            (myDbApplication (tracerDb  tracers))\n```\n\n----------------------------------------\n\nTITLE: Native Script 'ExpiresAt' Clause Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a native script expiration clause. It contains an \"expiresAt\" field containing a slot number.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expiresAt\": \"<slot>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script 'StartsAt' Clause Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a native script start clause. It contains a \"startsAt\" field containing a slot number.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startsAt\": \"<slot>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Parameters\nDESCRIPTION: This state query retrieves the stake pool parameters that were submitted with registration certificates. No specific code is provided, but this outlines the query name and its purpose.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: These commands navigate to the TypeScript client directory, install dependencies with Yarn, and then execute the end-to-end tests.  A synced node running on the preview network and Ogmios running on port 1337 are prerequisites.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ cd clients/TypeScript\n$ yarn\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Installing @cardano-ogmios/schema package\nDESCRIPTION: This command installs the @cardano-ogmios/schema package using yarn. This package is essential for working with Ogmios schemas in TypeScript projects.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/packages/schema/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn add @cardano-ogmios/schema\n```\n\n----------------------------------------\n\nTITLE: Querying Pool Ranking\nDESCRIPTION: This state query retrieves the stake pools ranking (also known as desirabilities). No specific code is provided, but this outlines the query name and its purpose.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Start Mainnet Cardano Node and Ogmios Server\nDESCRIPTION: Starts the Cardano node and Ogmios server for the mainnet network.  This is a setup step for interacting with the mainnet.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn mainnet:up\n```\n\n----------------------------------------\n\nTITLE: Cleanup Project\nDESCRIPTION: Cleans up the project, removing temporary files and other build artifacts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/clients/TypeScript/README.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nyarn cleanup\n```\n\n----------------------------------------\n\nTITLE: State Queries: Automatic query against last known tip (TypeScript)\nDESCRIPTION: The `StateQueryClient` now automatically runs queries against the last known tip if no explicit point is provided. This ensures that queries are always performed against the latest blockchain state. This behavior is equivalent to acquiring a new point on every query, improving data freshness.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Query Ledger State Epoch (JSON)\nDESCRIPTION: This JSON snippet shows the request for querying ledger state epoch. The result will indicate the current epoch.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/epoch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluate Transaction Execution Units Function Signature - Haskell\nDESCRIPTION: This Haskell function signature from `cardano-ledger` shows how to evaluate transaction execution units, taking protocol parameters, a transaction, UTxO set, epoch information, system start, and cost models as input. It returns either a basic failure or a redeemer report, encapsulated in a monadic context `m`.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/015-script-execution-units-evaluator.md#_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\nevaluateTransactionExecutionUnits ::\n  Core.PParams (AlonzoEra c) ->\n  Core.Tx (AlonzoEra c) ->\n  UTxO (AlonzoEra c) ->\n  EpochInfo m ->\n  SystemStart ->\n  Array Language CostModel ->\n  m (Either (BasicFailure c) (RedeemerReport c))\n```\n\n----------------------------------------\n\nTITLE: Native Script 'Any' Clause Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a native script 'any' clause. It includes a \"clause\" field set to \"any\" and a \"from\" field which is an array of native scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"any\",\n  \"from\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script 'Any' Clause Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a native script 'any' clause. It contains an \"any\" field which is an array of native scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"any\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script 'Some' Clause Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a native script 'some' clause (previously 'NOf'). It includes a \"clause\" field set to \"some\", an \"atLeast\" field containing an integer, and a \"from\" field which is an array of native scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"some\",\n  \"atLeast\": \"<integer>\",\n  \"from\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script 'NOf' Clause Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a native script 'NOf' clause. It contains an \"NOf\" field which is a map from an integer to an array of native scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"NOf\": {\n    \"<integer>\": [ \"<native-script>\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules\nDESCRIPTION: This command initializes and updates the git submodules of the project.  This is required to run the unit tests.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/building.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ git submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Stake Delegation Certificate Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a stake delegation certificate. It contains a \"stakeDelegation\" field with \"delegate\" and \"delegatee\" fields.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stakeDelegation\": {\n    \"delegate\": \"<credential-digest>\",\n    \"delegatee\": \"<stake-pool-id>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Script 'After' Clause Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a native script start clause (previously 'startsAt'). It includes a \"clause\" field set to \"after\" and a \"slot\" field containing a slot number.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clause\": \"after\",\n  \"slot\": \"<slot>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stake Pool Registration Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a stake pool registration certificate. It contains a \"poolRegistration\" field with stake pool parameters.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"poolRegistration\": \"<stake-pool-parameters>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Blocks' properties are no longer optional in TypeScript\nDESCRIPTION: This entry describes changes where blocks' properties (`header`, `headerHash`, `body`) are no longer marked as optional in the JSON specification (and consequently, in the TypeScript SDK).\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: TypeScript Client Implementation\nDESCRIPTION: This snippet describes the addition of a new TypeScript client for Ogmios. The client is divided into three packages: a REPL, a type definition generator, and a client library. It also includes automated integration tests against the testnet.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Query Ledger State Era Start (JSON)\nDESCRIPTION: This JSON snippet shows how to query the start of an Era.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/mini-protocols/local-state-query.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"queryLedgerState/eraStart\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript TxMonitorClient Fix\nDESCRIPTION: Fixes an issue where `TxMonitorClient`'s `nextTx` method was wrongly throwing an error when called with no argument. The signature of that method was also reworked to provide better usage at the call-site. This ensures correct functionality of the `nextTx` method without arguments.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nFix `TxMonitorClient`'s `nextTx` wrongly throwing an error when called with no argument.\n```\n\n----------------------------------------\n\nTITLE: Native Script 'All' Clause Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a native script 'all' clause. It contains an \"all\" field which is an array of native scripts.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": [ \"<native-script>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing string concatenation in UnknownResultError (TypeScript)\nDESCRIPTION: This change optimizes the `UnknownResultError` message in the Ogmios TypeScript client by removing superfluous string concatenation.  This improves code efficiency and potentially reduces memory allocation. This simplifies the error handling within Ogmios.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nRemove superfluous string concatenation in `UnknownResultError`'s message.\n```\n\n----------------------------------------\n\nTITLE: Ogmios Top-Level Modules Structure - Haskell\nDESCRIPTION: This code snippet represents the top-level module structure of the Ogmios application. It includes modules for application entrypoint (Ogmios.hs), option parsing (Options.hs), custom prelude (Prelude.hs), and version information (Version.hs). These modules are responsible for stitching together the application's various parts and exposing a high-level interface for building the executable.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/README.md#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n             ^  ─── Ogmios.hs\n             |      ├── Options.hs\nApplication  |      ├── Prelude.hs\n             v      └── Version.hs\n```\n\n----------------------------------------\n\nTITLE: Stake Credential Registration Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a stake credential registration certificate. It contains a \"stakeKeyRegistration\" field.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stakeKeyRegistration\": \"<credential-digest>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Tracers in Haskell\nDESCRIPTION: Defines a record `Tracers` to hold tracers for different components like HTTP and DB. It uses higher-kinded types to represent different tracer configurations.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\ndata Tracers m (kind :: TracerDefinition) = Tracers\n    { tracerHttp :: TracerHKD kind (Tracer m HttpLog)\n    , tracerDb   :: TracerHKD kind (Tracer m DbLog)\n    } deriving stock (Generic)\n```\n\n----------------------------------------\n\nTITLE: Metadata No Schema Example - JSON\nDESCRIPTION: This JSON snippet illustrates a metadata example using the \"no-schema\" format. It shows a simple list of integers represented directly in JSON, which is suitable for compatible CBOR objects.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/configuring.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Cloning Ogmios repository for Docker Compose\nDESCRIPTION: This command clones the Ogmios repository from GitHub and changes the directory to the cloned repository.  This is the first step for utilizing the Docker Compose setup provided in the repository.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git clone --depth 1 git@github.com:cardanosolutions/ogmios.git\n$ cd cardano-ogmios\n```\n\n----------------------------------------\n\nTITLE: Stake Credential Deregistration Transformation (New)\nDESCRIPTION: This JSON snippet represents the new format for a stake credential deregistration certificate. It includes a \"type\" field and the credential.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stakeCredentialDeregistration\",\n  \"credential\": \"<credential-digest>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Detailed Schema Example - JSON\nDESCRIPTION: This JSON snippet showcases a metadata example using the \"detailed schema\" format. It describes the CBOR data structure using a domain-specific language within JSON to represent any binary metadata, particularly those not directly mappable using the no-schema approach.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/configuring.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"list\":\n    [ { \"int\": 1 }\n    , { \"int\": 2 }\n    , { \"int\": 3 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stake Credential Deregistration Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a stake credential deregistration certificate. It contains a \"stakeKeyDeregistration\" field.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stakeKeyDeregistration\": \"<credential-digest>\"\n}\n```\n\n----------------------------------------\n\nTITLE: BigInt Parsing for Assets and Metadata\nDESCRIPTION: Asset quantities and transaction metadata's integers are now parsed as native `BigInt`.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nAsset quantities and transaction metadata's integers are now parsed as native `BigInt`.\n```\n\n----------------------------------------\n\nTITLE: Genesis Delegation Transformation (Old)\nDESCRIPTION: This JSON snippet represents the old format for a genesis delegation certificate. It contains a \"genesisDelegation\" field with delegateKeyHash, verificationKeyHash and vrfVerificationKeyHash.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/architectural-decisions/accepted/017-api-version-6-major-rewrite.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"genesisDelegation\": {\n    \"delegateKeyHash\": \"<credential-digest>\",\n    \"verificationKeyHash\": \"<credential-digest>\",\n    \"vrfVerificationKeyHash\": \"<vrf-digest>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constitutional Committee Delegation Schema After Change\nDESCRIPTION: This code represents the schema for the constitutional committee delegation after the schema adjustment. The original schema was changed to align with the new `constitutionalCommittee` ledger query.  It is part of the governance structure in the Conway era.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/changelog/_index.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"constitutionalCommitteeDelegation\",\n  \"member\": {\n    \"id\": \"0000\",\n  },\n  \"delegate\": {\n    \"status\": \"authorized\",\n    \"id\": \"000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tracer Configuration in Haskell\nDESCRIPTION: Defines a default configuration for the tracers, setting the minimum severity level to `Info` for all tracers. This can be loaded from config files or CLI parameters in practice.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/server/modules/contra-tracers/README.md#_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\nemptyConfiguration :: Tracers m MinSeverities\nemptyConfiguration = defaultTracers Info\n```\n\n----------------------------------------\n\nTITLE: Stopping Ogmios and Cardano node with Docker Compose\nDESCRIPTION: This command stops and removes the containers, networks, volumes, and images created by `docker-compose up`.  It cleans up the resources used by the Ogmios and Cardano node stack.\nSOURCE: https://github.com/emurgo/ogmios/blob/master/docs/content/getting-started/docker.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose down\n```"
  }
]