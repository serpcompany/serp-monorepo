[
  {
    "owner": "go-resty",
    "repo": "docs",
    "content": "TITLE: Making POST Request with Automatic Unmarshalling in Resty (Go)\nDESCRIPTION: This snippet demonstrates how to send a POST request with a JSON body using Resty, automatically unmarshal the response into a result struct, and capture errors into an error struct. Dependencies include the github.com/go-resty/resty/v2 package. The SetResult and SetError methods determine the destination structs for successful and error responses. Inputs are the User struct for credentials and the URL; outputs are populated LoginResponse or LoginError structs. Proper error handling and type assertions are also shown.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetBody(User{\n        Username: \"testuser\",\n        Password: \"testpass\",\n    }). // default request content-type is JSON\n    SetResult(&LoginResponse{}).\n    SetError(&LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err)\nfmt.Println(res.Result().(*LoginResponse))\nfmt.Println(res.Error().(*LoginError))\n```\n\n----------------------------------------\n\nTITLE: Performing POST Request with Go-Resty\nDESCRIPTION: Demonstrates how to make a POST request using Go-Resty, including setting the request body, handling the response, and error handling. It uses a User struct for the request body and expects LoginResponse or LoginError structs for the result.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/post-put-patch-request.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetBody(User{\n        Username: \"testuser\",\n        Password: \"testpass\",\n    }). // default request content type is JSON\n    SetResult(&LoginResponse{}). // or SetResult(LoginResponse{}).\n    SetError(&LoginError{}).     // or SetError(LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\nfmt.Println(res.Result().(*LoginResponse))\nfmt.Println(res.Error().(*LoginError))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication via Request Middleware in Go-Resty\nDESCRIPTION: Demonstrates how to implement custom authentication logic using request middleware for more complex authentication scenarios.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/authentication.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.AddRequestMiddleware(func(c *resty.Client, req *resty.Request) error {\n    // perform authentication/authorization logic here\n    // set it on the Request instance\n\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Request Middleware in Go-Resty\nDESCRIPTION: Demonstrates how to add a custom request middleware to a Go-Resty client. The middleware function is executed during the request preparation phase and can perform custom logic. It should return nil if successful, or an error to terminate the request preparation.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient.AddRequestMiddleware(func(c *resty.Client, req *resty.Request) error {\n    // perform logic here\n\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Payload using go-resty in Go\nDESCRIPTION: This example shows how to send a POST request with a JSON payload using go-resty. It demonstrates setting headers, body, and handling the response.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create a Resty Client\nclient := resty.New()\n\nresp, err := client.R().\n    SetBody(map[string]interface{}{\n        \"username\": \"testuser\",\n        \"password\": \"testpass\",\n    }).\n    SetResult(&AuthSuccess{}).    // or SetResult(AuthSuccess{}).\n    SetError(&AuthError{}).       // or SetError(AuthError{}).\n    Post(\"https://myapp.com/login\")\n\n// Explore response object\nfmt.Println(\"Response Info:\")\nfmt.Println(\"  Error      :\", err)\nfmt.Println(\"  Status Code:\", resp.StatusCode())\nfmt.Println(\"  Status     :\", resp.Status())\nfmt.Println(\"  Proto      :\", resp.Proto())\nfmt.Println(\"  Time       :\", resp.Time())\nfmt.Println(\"  Received At:\", resp.ReceivedAt())\nfmt.Println(\"  Body       :\\n\", resp)\nfmt.Println()\n\n// Explore trace info\n//\n// See above example for detailed trace info\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authentication in Go-Resty\nDESCRIPTION: Demonstrates setting up Bearer Token authentication globally or for specific requests. The auth scheme can be customized using SetAuthScheme method.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// for all requests\nclient.SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\")\n\n// for a particular request\nclient.R().\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\")\n\n// outcome:\n// Authorization: Bearer bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Go-Resty\nDESCRIPTION: Demonstrates how to set up Basic Authentication either globally for all requests or for specific requests using the Go-Resty client.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// for all requests\nclient.SetBasicAuth(\"username\", \"password\")\n\n// for a particular request\nclient.R().\n    SetBasicAuth(\"username\", \"password\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Circuit Breaker in Go-Resty\nDESCRIPTION: This snippet demonstrates how to create and configure a circuit breaker, attach it to a Resty client, and start using it. The example shows setting custom timeout, failure threshold, and success threshold values.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/circuit-breaker.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create circuit breaker with required values, override as required\ncb := resty.NewCircuitBreaker().\n\tSetTimeout(15 * time.Second).\n\tSetFailureThreshold(10).\n\tSetSuccessThreshold(5)\n\n// create Resty client\nc := resty.New().\n    SetCircuitBreaker(cb)\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Hooks at Request Level in Go-Resty\nDESCRIPTION: Adds a custom hook to a specific request that will be executed between retry attempts, allowing for custom logic to be performed per request.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient.R().\n    AddRetryHooks(\n        func(res *resty.Response, err error) {\n            // request retry hook\n            // perform logic here\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Content-Type Encoders/Decoders in Go Resty\nDESCRIPTION: This Go snippet demonstrates how to register custom encoding and decoding functions for a specific HTTP content type with a Resty client. It initializes a new Resty client and uses `AddContentTypeEncoder` to define a function that writes encoded data to an `io.Writer` based on an input value `v`. Similarly, `AddContentTypeDecoder` defines a function that reads and decodes data from an `io.Reader` into a target value `v`. These methods allow handling content types beyond the default JSON and XML provided by Resty.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/content-type-encoder-and-decoder.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nc := resty.New()\ndefer c.Close()\n\nc.AddContentTypeEncoder(\"http content type key here\", func(w io.Writer, v any) error {\n    // logic goes here\n\n    return nil\n})\n\nc.AddContentTypeDecoder(\"http content type key here\", func(w io.Reader, v any) error {\n    // logic goes here\n\n    return nil\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Lifecycle Events in Resty SSE with Go\nDESCRIPTION: This snippet illustrates use of Resty's OnOpen and OnError hooks for SSE connections in Go. The code configures handlers for message events, stream open, and error conditions, enabling comprehensive event stream lifecycle control. Each handler logs relevant data (connected URL, errors, incoming events) to stdout. Inputs: Event stream URL, error or event data. Outputs: Human-readable connection status, errors, and received events. Dependencies: Resty v3 with EventSource, fmt package. Handles error and open events in addition to messages.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/server-sent-events.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nes := resty.NewEventSource().\\n    SetURL(\\\"https://sse.dev/test\\\").\\n    OnMessage(\\n        func(e any) {\\n            fmt.Println(e.(*resty.Event))\\n        },\\n        nil,\\n    ).\\n    OnError(\\n        func(err error) {\\n\\t\tfmt.Println(\\\"Error occurred:\\\", err)\\n\\t},\\n    ).\\n    OnOpen(\\n        func(url string) {\\n\\t\tfmt.Println(\\\"I'm connected:\\\", url)\\n\\t},\\n    )\\n\\nerr := es.Get()\\nfmt.Println(err)\\n\\n// Output:\\n//  I'm connected: https://sse.dev/test\\n//  &{  {\\\"testing\\\":true,\\\"sse_dev\\\":\\\"is great\\\",\\\"msg\\\":\\\"It works!\\\",\\\"now\\\":1737510458794}}\\n//  &{  {\\\"testing\\\":true,\\\"sse_dev\\\":\\\"is great\\\",\\\"msg\\\":\\\"It works!\\\",\\\"now\\\":1737510460794}}\\n//  &{  {\\\"testing\\\":true,\\\"sse_dev\\\":\\\"is great\\\",\\\"msg\\\":\\\"It works!\\\",\\\"now\\\":1737510462794}}\\n//  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Client Credentials with Go-Resty (Modified)\nDESCRIPTION: This snippet shows how to use OAuth2 client credentials with Go-Resty while allowing modifications to the client and transport. It creates a Resty client, configures SSL certificates, and adds a custom auth request middleware for token handling.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/oauth2-client-credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclientCredCfg := &clientcredentials.Config{\n    /* initialize values ... */\n}\n\n// create a Resty client\nc := resty.New()\ndefer c.Close()\n\n// configure required Root CA, Client Root CA, or Client SSL certs\n// c.SetRootCertificates(\"/path/to/root/pemFile.pem\")\n// c.SetClientRootCertificates(\"/path/to/client-root/pemFile.pem\")\n// c.SetCertificateFromFile(\"/path/to/certs/client.pem\", \"/path/to/certs/client.key\")\n\n// add custom auth request middleware\nc.AddRequestMiddleware(func(c *resty.Client, req *resty.Request) error {\n    // get the token from client credentials\n    token, err := clientCredCfg.Token(req.Context())\n    if err != nil {\n        return err\n    }\n\n    // set it on the request\n    req.SetAuthScheme(token.Type()). // if it is \"Bearer\", you can skip this line\n        SetAuthToken(token.AccessToken)\n\n    return nil\n})\n\n// start using a resty client\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Retry Parameters in Go-Resty\nDESCRIPTION: Sets up the basic retry parameters including count, wait time, and maximum wait time at the client level.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Retry configuration can be set at the client or request level\nclient.\n    SetRetryCount(3).\n    SetRetryWaitTime(2 * time.Second).\n    SetRetryMaxWaitTime(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Load Balancer in Go\nDESCRIPTION: This snippet explains how to implement a custom load balancer by integrating user-defined algorithms with Resty v3. It describes defining a struct that implements the LoadBalancer interface methods: Next, Feedback, and Close. Inputs vary based on the custom logic implemented, affecting the selection of base URLs for Resty client configuration.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/load-balancer-and-service-discovery.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// create a custom load balancer\nvar _ resty.LoadBalancer = (*MyCustomAlgorithm)(nil)\n\n// MyCustomAlgorithm struct implements a custom load balancer algorithm\ntype MyCustomAlgorithm struct {\n\t// defined required fields\n}\n\n// Next method returns the next Base URL based on the custom algorithm\nfunc (mca *MyCustomAlgorithm) Next() (string, error) {\n    // perform custom load balancer algorithm logic\n    // and return Base URL or error\n\n\treturn baseURL, nil\n}\n\n// Feedback method process the request feedback for custom\n// load balancer algorithm\nfunc (mca *MyCustomAlgorithm) Feedback(rf_ *RequestFeedback) {\n    // process the request feedback and use it\n    // for next Base URL calculation\n}\n\n// Close method does the cleanup activities for the custom load balancer\nfunc (mca *MyCustomAlgorithm) Close() error {\n    // perform clean up activities\n    // such as closing channels, etc.\n\n    return nil\n}\n\n// initialize the custom load balancer\nmc := &MyCustomAlgorithm {\n    // initialize here ...\n}\n\n// create Resty client\nc := resty.New().\n    SetLoadBalancer(mc)\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Use of SetMultipartFields in Go-Resty\nDESCRIPTION: This snippet demonstrates the flexibility of SetMultipartFields method by showcasing various combinations of form data and file upload options in a single request.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmyImageFile, _ := os.Open(\"/path/to/image-1.png\")\nmyImageFileStat, _ := myImageFile.Stat()\n\n// demonstrate with various combinations and possibilities\nclient.R().\n    SetMultipartFields(\n        []*resty.MultipartField{\n            // add form data, order is preserved\n            {\n                Name:   \"field1\",\n                Values: []string{\"field1value1\", \"field1value2\"},\n            },\n            {\n                Name:   \"field2\",\n                Values: []string{\"field2value1\", \"field2value2\"},\n            },\n            // add file upload\n            {\n                Name:             \"myfile_1\",\n                FilePath:         \"/path/to/file-1.txt\",\n            },\n            // add file upload with progress callback\n            {\n                Name:             \"myfile_1\",\n                FilePath:         \"/path/to/file-1.txt\",\n                ProgressCallback: func(mp MultipartFieldProgress) {\n    \t\t\t\t// use the progress details\n    \t\t\t},\n            },\n            // with file name and content-type\n            {\n                Name:             \"myimage_1\",\n                FileName:         \"image-1.png\",\n                ContentType:      \"image/png\",\n                FilePath:         \"/path/to/image-1.png\",\n            },\n            // with io.Reader and file size\n            {\n                Name:             \"myimage_2\",\n                FileName:         \"image-2.png\",\n                ContentType:      \"image/png\",\n                Reader:           myImageFile,\n                FileSize:         myImageFileStat.Size(),\n            },\n            // with io.Reader\n            {\n                Name:        \"uploadManifest1\",\n                FileName:    \"upload-file-1.json\",\n                ContentType: \"application/json\",\n                Reader:      strings.NewReader(`{\"input\": {\"name\": \"Uploaded document 1\", \"_filename\" : [\"file1.txt\"]}}`),\n            },\n            // with io.Reader and progress callback\n            {\n                Name:             \"image-file1\",\n                FileName:         \"image-file1.png\",\n                ContentType:      \"image/png\",\n                Reader:           bytes.NewReader(fileBytes),\n                ProgressCallback: func(mp MultipartFieldProgress) {\n                    // use the progress details\n                },\n            },\n        }...,\n    )\n```\n\n----------------------------------------\n\nTITLE: Making a Simple DELETE Request with Resty in Go\nDESCRIPTION: This code snippet illustrates performing a DELETE HTTP request to remove a specific resource using Resty in Go. The request is authenticated with a bearer token set via SetAuthToken, configures custom error handling using SetError, and targets an article resource. It demonstrates error inspection and parsing custom error types from the response. Dependencies include the Resty library and a defined Error struct; key parameters are the authentication token and target URL. Inputs are set via chaining Resty methods, and the output includes both error and response objects, with sample error extraction.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/delete-request.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    SetError(&Error{}). // or SetError(Error{}).\n    Delete(\"https://myapp.com/articles/123456\")\n\nfmt.Println(err, res)\nfmt.Println(res.Error().(*Error))\n```\n\n----------------------------------------\n\nTITLE: Creating Transport with Custom Timeouts in Resty (Go)\nDESCRIPTION: This snippet demonstrates how to initialize a Resty HTTP transport with custom timeout settings using the TransportSettings struct. It sets non-default values for IdleConnTimeout and TLSHandshakeTimeout before instantiating a Resty client with these transport settings. Dependencies include the resty package and the standard time package. Expected inputs are timeout durations, and the output is a fully configured Resty client ready for use.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/timeout.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create transport with timeouts\n// supply only required values; the rest will use default values\ntransportSettings := &resty.TransportSettings{\n    IdleConnTimeout:     120 * time.Second,\n    TLSHandshakeTimeout: 60 * time.Second,\n}\n\nc := resty.NewWithTransportSettings(transportSettings)\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Hooks at Client Level in Go-Resty\nDESCRIPTION: Adds multiple hooks that will be executed between retry attempts, allowing for custom logic to be performed before each retry at the client level.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Retry configuration can be set at the client or request level\nclient.\n    AddRetryHooks(\n        func(res *resty.Response, err error) {\n            // client retry hook 1\n            // perform logic here\n        },\n        func(res *resty.Response, err error) {\n            // client retry hook 2\n            // perform logic here\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Root Certificates with Watcher in Go-Resty\nDESCRIPTION: Shows how to add root certificates with a watcher for dynamic reloading. The CertWatcherOptions struct is used to configure the watcher, including the pool interval. The SetRootCertificatesWatcher method is used to set up the watcher with the certificates.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/root-certificates.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// create cert watcher options\ncertWatcherOpts := &resty.CertWatcherOptions{\n    PoolInterval: 12 * time.Hour, // default value is 24 hours\n}\n\n// one pem file path\nclient.SetRootCertificatesWatcher(certWatcherOpts, \"/path/to/root/pemFile.pem\")\n\n// one or more pem file path(s)\nclient.SetRootCertificatesWatcher(\n    certWatcherOpts,\n    \"/path/to/root/pemFile1.pem\",\n    \"/path/to/root/pemFile2.pem\"\n    \"/path/to/root/pemFile3.pem\"\n)\n\n// if you happen to have string slices\nclient.SetRootCertificatesWatcher(certWatcherOpts, certs...)\n```\n\n----------------------------------------\n\nTITLE: Sending a DELETE Request with Payload Using Resty in Go\nDESCRIPTION: This snippet shows how to send a DELETE request with a JSON payload using Resty in Go. The payload contains an array of article IDs, allowing for batch deletion. Auth token and custom error type configuration are included; SetBody accepts any Go type, auto-encodes to JSON, and is transmitted as the request body. The snippet depends on Resty and the custom Error struct. Inputs include the auth token, map payload, and API endpoint, while outputs are error and response values, with advanced error handling demonstrated.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/delete-request.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    SetBody(map[string]any{\n        \"article_ids\": []int{1002, 1006, 1007, 87683, 45432},\n    }). // default request content type is JSON\n    SetError(&Error{}). // or SetError(Error{}).\n    Delete(\"https://myapp.com/articles\")\n\nfmt.Println(err, res)\nfmt.Println(res.Error().(*Error))\n```\n\n----------------------------------------\n\nTITLE: Setting Multipart Form Data in Go-Resty\nDESCRIPTION: This snippet demonstrates how to send multipart form data with Go-Resty by using the SetMultipartFormData method with a map of field names and values.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetMultipartFormData(map[string]string{\n        \"first_name\": \"Jeevanandam\",\n        \"last_name\":  \"M\",\n        \"zip_code\":   \"00001\",\n    }).\n    Post(\"https://myapp.com/profile\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate from File in go-resty\nDESCRIPTION: This snippet demonstrates how to set a client certificate from PEM-encoded files containing the public and private key pair.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/client-certificates.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// pass the public/private key pair file paths.\n// the files must contain PEM-encoded data\nclient.SetCertificateFromFile(\"certs/client.pem\", \"certs/client.key\")\n```\n\n----------------------------------------\n\nTITLE: Performing PUT Request with Go-Resty\nDESCRIPTION: Shows how to make a PUT request using Go-Resty, including setting a complex request body (Article struct), adding an authentication token, and handling errors. It uses an Article struct for the request body and expects an Error struct for potential errors.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/post-put-patch-request.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetBody(Article{\n        Title: \"Resty\",\n        Content: \"This is my article content, oh ya!\",\n        Author: \"Jeevanandam M\",\n        Tags: []string{\"article\", \"sample\", \"resty\"},\n    }). // default request content type is JSON\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    SetError(&Error{}). // or SetError(Error{}).\n    Put(\"https://myapp.com/articles/123456\")\n\nfmt.Println(err, res)\nfmt.Println(res.Error().(*Error))\n```\n\n----------------------------------------\n\nTITLE: Adding Response Middleware in go-resty\nDESCRIPTION: This snippet demonstrates how to add a custom response middleware to a go-resty client. The middleware function receives the client and response objects, and can perform custom logic or cascade errors downstream.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient.AddResponseMiddleware(func(c *resty.Client, res *resty.Response) error {\n    // perform logic here\n\n    // cascade error downstream\n    // return errors.New(\"hey error occurred\")\n\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate from String in go-resty\nDESCRIPTION: This example shows how to set a client certificate using PEM-encoded strings containing the certificate and private key.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/client-certificates.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmyClientCertStr := `-----BEGIN CERTIFICATE-----\n... cert content ...\n-----END CERTIFICATE-----`\n\nmyClientCertKeyStr := `-----BEGIN PRIVATE KEY-----\n... cert key content ...\n-----END PRIVATE KEY-----`\n\nclient.SetCertificateFromString(myClientCertStr, myClientCertKeyStr)\n```\n\n----------------------------------------\n\nTITLE: Using url.Values for Multi-Value Form Data with Resty in Go\nDESCRIPTION: This snippet shows how to use url.Values to submit form data with multiple values per key using Resty. It requires importing both the standard library net/url package and Resty, as well as fmt for output. The SetFormDataFromValues method encodes multi-value fields for POST requests with the appropriate Content-Type. Inputs are url.Values with string slices, and outputs are printed error and response objects. This method is useful for forms or search criteria accepting repeated parameters.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/form-data.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\n// sample multi-value form data\ncriteria := url.Values{\n  \"search_criteria\": []string{\"book\", \"glass\", \"pencil\"},\n}\nres, err := c.R().\n      SetFormDataFromValues(criteria).\n      Post(\"https://myapp.com/search\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Creating Weighted Round Robin Load Balancer in Go\nDESCRIPTION: This snippet shows how to create a Weighted Round Robin load balancer using Resty v3, allowing hosts to be assigned different weights for load distribution. Dependencies include Resty and a recovery duration setting. It requires a list of hosts with corresponding weights, affecting the request percentages. The output is an initialized Resty client with a Weighted Round Robin load balancing strategy.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/load-balancer-and-service-discovery.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// create a load balancer\n// accepts one or more Host(s)\nwrr, err := resty.NewWeightedRoundRobin(\n    3*time.Second, // recovery duration\n    []*resty.Host{\n        {\n            BaseURL: \"https://example1.com\",\n            Weight:  50, // determines the percentage of requests to this host\n        },\n        {BaseURL: \"https://example2.com\", Weight: 30},\n        {BaseURL: \"https://example3.com\", Weight: 20},\n    }...,\n)\nif err != nil {\n    log.Printf(\"ERROR %v\", err)\n    return\n}\n\n// by default, the recovery duration is 120 seconds, which can be changed as follows\n// wrr.SetRecoveryDuration(3 * time.Minute)\n\n// create Resty client\nc := resty.New().\n    SetLoadBalancer(wrr)\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Sending Struct as Request Body in Go-Resty\nDESCRIPTION: This snippet demonstrates how to send a struct as the request body using Go-Resty. It sets a User struct as the body, specifies result and error types, and sends a POST request to a login endpoint.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-body-types.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetBody(User{\n        Username: \"testuser\",\n        Password: \"testpass\",\n    }). // default request content type is JSON\n    SetResult(&LoginResponse{}). // or SetResult(LoginResponse{}).\n    SetError(&LoginError{}).     // or SetError(LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting up Digest Authentication in Go-Resty\nDESCRIPTION: Shows how to implement Digest Authentication at the client level. Supports various QOP options (auth, auth-int) and multiple hash functions including MD5, SHA-256, SHA-512 variants.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// for all requests\nclient.SetDigestAuth(\"username\", \"password\")\n```\n\n----------------------------------------\n\nTITLE: Creating Round Robin Load Balancer in Go\nDESCRIPTION: This snippet demonstrates how to create a Round Robin load balancer using Resty v3, which uniformly distributes requests across multiple URLs. Dependencies include the Resty library with support for multiple base URLs. The inputs are a list of URLs, and there's no specific output, but it initializes a Resty client with the Round Robin strategy.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/load-balancer-and-service-discovery.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a load balancer\n// accepts one or more URLs\nrr, err := resty.NewRoundRobin(\n    \"https://example1.com\",\n    \"https://example2.com\",\n    \"https://example3.com\",\n)\nif err != nil {\n    log.Printf(\"ERROR %v\", err)\n    return\n}\n\n// create Resty client\nc := resty.New().\n    SetLoadBalancer(rr)\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Sending Map as Request Body in Go-Resty\nDESCRIPTION: This example shows how to use a map as the request body in Go-Resty. It sets a map with username and password, specifies result and error types, and sends a POST request to a login endpoint.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-body-types.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetBody(map[string]string{\n        \"username\": \"testuser\",\n        \"password\": \"testpass\",\n    }). // default request content type is JSON\n    SetResult(&LoginResponse{}). // or SetResult(LoginResponse{}).\n    SetError(&LoginError{}).     // or SetError(LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: File Upload with Progress Tracking in Go-Resty\nDESCRIPTION: This snippet demonstrates tracking upload progress by using callback functions with MultipartField structs in Go-Resty.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprogressCallback := func(mp resty.MultipartFieldProgress) {\n    // progress argument provides all the required details\n    fmt.Println(\"Name:\", mp.Name)\n    fmt.Println(\"FileName:\", mp.FileName)\n    fmt.Println(\"FileSize:\", mp.FileSize)\n    fmt.Println(\"Written:\", mp.Written)\n}\n\nmyImageFile, _ := os.Open(\"/path/to/image-1.png\")\nmyImageFileStat, _ := myImageFile.Stat()\n\n// demonstrate with various possibilities\nclient.R().\n    SetMultipartFields(\n        []*resty.MultipartField{\n            // minimum required field, rest of the values are inferred\n            // it is recommended to take advantage of input fields\n            {\n                Name:             \"myfile_1\",\n                FilePath:         \"/path/to/file-1.txt\",\n                ProgressCallback: progressCallback,\n            },\n            // with file name and content-type\n            {\n                Name:             \"myimage_1\",\n                FileName:         \"image-1.png\",\n                ContentType:      \"image/png\",\n                FilePath:         \"/path/to/image-1.png\",\n                ProgressCallback: progressCallback,\n            },\n            // with io.Reader and file size\n            {\n                Name:             \"myimage_2\",\n                FileName:         \"image-2.png\",\n                ContentType:      \"image/png\",\n                Reader:           myImageFile,\n                FileSize:         myImageFileStat.Size(),\n                ProgressCallback: progressCallback,\n            },\n        }...,\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unlimited Response Body Reads in go-resty\nDESCRIPTION: This code snippet shows how to use go-resty to make a POST request with unlimited response body reads. It demonstrates response body auto-parsing, saving the response to a file, and reading the response multiple times.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/unlimited-response-body-reads.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nloginResponseFile := \"login-response.txt\"\n\nres, err := client.R().\n    SetHeader(hdrContentTypeKey, \"application/json\").\n    SetBody(&User{Username: \"testuser\", Password: \"testpass\"}).\n    SetResponseBodyUnlimitedReads(true).\n    SetResult(&LoginResponse{}).\n    SetOutputFileName(loginResponseFile).\n    Post(\"/login\")\n\nfmt.Println(err)\n\nfmt.Println(\"\")\nloginResponse := res.Result().(*LoginResponse)\nfmt.Println(\"ID:\", loginResponse.ID)\nfmt.Println(\"Message:\", loginResponse.Message)\n\nfmt.Println(\"\")\nloginResponseCnt, _ := os.ReadFile(loginResponseFile)\nfmt.Println(\"File Content:\", string(loginResponseCnt))\n\n// output:\n// nil\n//\n// ID: success\n// Message: login successful\n//\n// File Content: { \"id\": \"success\", \"message\": \"login successful\" }\n```\n\n----------------------------------------\n\nTITLE: Creating SRV Weighted Round Robin Load Balancer in Go\nDESCRIPTION: This snippet presents the creation of an SRV Weighted Round Robin load balancer using Resty v3, leveraging SRV record discovery for load distribution. Key dependencies include Resty and configuration of SRV records, with inputs being the service name, protocol, domain, and optionally scheme. The output is a Resty client configured to use SRV record-based load balancing.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/load-balancer-and-service-discovery.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// create a load balancer\nswrr, err := resty.NewSRVWeightedRoundRobin(\n    \"_sample-server\",\n    \"tcp\", // default proto is tcp\n    \"example.com\",\n    \"https\", // default scheme is https\n)\nif err != nil {\n    log.Printf(\"ERROR %v\", err)\n    return\n}\n\n// by default, the SRV records refresh duration is 180 seconds, which can be changed as follows\n// swrr.SetRefreshDuration(1 * time.Hour)\n\n// by default, the recovery duration is 120 seconds, which can be changed as follows\n// swrr.SetRecoveryDuration(3 * time.Minute)\n\n// create Resty client\nc := resty.New().\n    SetLoadBalancer(swrr)\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Custom Redirect Policy in Go-Resty\nDESCRIPTION: Shows how to create a simple custom redirect policy using a function that implements the RedirectPolicyFunc interface. This allows for custom redirect logic to be applied to the client.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/redirect-policy.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.SetRedirectPolicy(\n    resty.RedirectPolicyFunc(func(req *http.Request, via []*http.Request) error {\n        // perform redirect logic here\n\n        // return nil to continue; otherwise, return error to exit\n        return nil\n    }),\n)\n```\n\n----------------------------------------\n\nTITLE: Overwriting Retry Hooks at Request Level in Go-Resty\nDESCRIPTION: Sets specific retry hooks for a particular request, replacing any client-level hooks, allowing for request-specific logic to be executed between retries.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.R().\n    SetRetryHooks(\n        func(res *resty.Response, err error) {\n            // request retry hook 1\n            // perform logic here\n        },\n        func(res *resty.Response, err error) {\n            // request retry hook 2\n            // perform logic here\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Ordered Multipart Form Data in Go-Resty\nDESCRIPTION: This snippet shows how to send multipart form data with preserved field order using SetMultipartOrderedFormData method.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetMultipartOrderedFormData(\"first_name\", []string{\"Jeevanandam\"}).\n    SetMultipartOrderedFormData(\"last_name\", []string{\"M\"}).\n    SetMultipartOrderedFormData(\"zip_code\", []string{\"00001\"}).\n    Post(\"https://myapp.com/profile\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Request Middlewares in Go-Resty\nDESCRIPTION: Shows how to set multiple request middlewares in a specific order using Go-Resty. This advanced usage allows for custom middleware execution before and after the default PrepareRequestMiddleware. The RawRequest instance becomes available after PrepareRequestMiddleware execution.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.SetRequestMiddlewares(\n    Custom1RequestMiddleware,\n    Custom2RequestMiddleware,\n    resty.PrepareRequestMiddleware, // after this, `Request.RawRequest` instance is available\n    Custom3RequestMiddleware,\n    Custom4RequestMiddleware,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dry-Run in Go Resty with Custom Transport\nDESCRIPTION: This code demonstrates how to create a custom HTTP transport for Dry-Run functionality in Go Resty. It defines a DryRunTransport struct that implements the http.RoundTripper interface, allowing users to intercept HTTP requests to implement custom Dry-Run logic before initializing a new Resty client with this transport.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/how-to-do-dry-run.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype DryRunTransport struct {\n    http.RoundTripper\n}\n\nfunc (dr *DryRunTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n    // implement Dry-Run logic here ...\n\n    return resp, err\n}\n\nc := resty.New().\n    SetTransport(&DryRunTransport{\n        // initialize dry-run fields\n    })\n\ndefer c.Close()\n\n// start using the Resty client with dry-run ...\n```\n\n----------------------------------------\n\nTITLE: Using MultipartFields for Ordered Form Data in Go-Resty\nDESCRIPTION: This snippet demonstrates using SetMultipartFields method with MultipartField structs to send ordered form data with multiple values per field.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// it is possible to use SetMultipartFields for ordered form-data\nfields := []*resty.MultipartField{\n    {\n        Name:   \"field1\",\n        Values: []string{\"field1value1\", \"field1value2\"},\n    },\n    {\n        Name:   \"field2\",\n        Values: []string{\"field2value1\", \"field2value2\"},\n    }\n}\n\nres, err := client.R().\n    SetMultipartFields(fields...). // it can be combined with SetMultipartOrderedFormData\n    Post(\"https://myapp.com/profile\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Conditions at Client Level in Go-Resty\nDESCRIPTION: Defines custom conditions that determine when a retry should be performed at the client level, evaluated after the default retry conditions.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Retry configuration can be set at the client or request level\n// NOTE: first default retry conditions get applied\n//       before user-defined retry conditions\nclient.\n    AddRetryConditions(\n        func(res *resty.Response, err error) bool {\n            // client retry condition 1\n            // perform logic here\n\n            // return true if retry is required otherwise, return false\n            return false\n        },\n        func(res *resty.Response, err error) bool {\n            // client retry condition 1\n            // perform logic here\n\n            // return true if retry is required otherwise, return false\n            return true\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Flexible and Domain Check Redirect Policies in Go-Resty\nDESCRIPTION: Demonstrates how to set multiple redirect policies for a Go-Resty client, including a flexible policy with a maximum redirect count and a domain check policy for specific hosts.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/redirect-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// default golang client does maximum redirect count as 10,\n// in the Resty, simply set\nclient.SetRedirectPolicy(resty.FlexibleRedirectPolicy(5))\n\n// set one or more redirect policies together\nclient.SetRedirectPolicy(resty.FlexibleRedirectPolicy(5),\n    resty.DomainCheckRedirectPolicy(\"host1.com\", \"host2.org\", \"host3.net\"))\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload in Go-Resty\nDESCRIPTION: This snippet shows how to upload single or multiple files using SetFile and SetFiles methods in Go-Resty.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// add one file\nclient.R().\n    SetFile(\"my_file\", \"/path/to/file/sample.pdf\") // field name and file path\n\n// add multiple files together\nclient.R().\n    SetFiles(map[string]string{\n        // field name and file path\n        \"my_file1\": \"/path/to/file/sample1.pdf\",\n        \"my_file2\": \"/path/to/file/sample2.pdf\",\n        \"my_file3\": \"/path/to/file/sample3.pdf\",\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP3 Transport for Go-Resty\nDESCRIPTION: This code demonstrates how to set up HTTP3 transport for Go-Resty using the quic-go package. It configures a custom HTTP3 transport with TLS and QUIC connection options including timeout and keep-alive settings, then integrates it with the Resty client.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/enable-http3.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Refer to quic-go docs to customize configuration\n// https://quic-go.net/docs/\nhttp3Transport := &http3.Transport{\n    TLSClientConfig: &tls.Config{}, // set a TLS client config, if desired\n    QUICConfig: &quic.Config{ // QUIC connection options\n        MaxIdleTimeout:  45 * time.Second,\n        KeepAlivePeriod: 30 * time.Second,\n    },\n}\ndefer http3Transport.Close()\n\nc := resty.New().\n    SetTransport(http3Transport)\ndefer c.Close()\n\n// You're ready to use HTTP3 with Resty\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Tracing with Go-Resty\nDESCRIPTION: This code snippet demonstrates how to enable and use request tracing in Go-Resty. It creates a client, sends a GET request with tracing enabled, and then prints out various trace information such as DNS lookup time, connection time, and server response time.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-tracing.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a Resty client\nclient := resty.New()\ndefer client.Close()\n\nres, _ = client.R().\n    EnableTrace().\n    Get(\"https://httpbin.org/get\")\n\nti := res.Request.TraceInfo()\n\n// Explore trace info\nfmt.Println(\"Request Trace Info:\")\nfmt.Println(\"  DNSLookup     :\", ti.DNSLookup)\nfmt.Println(\"  ConnTime      :\", ti.ConnTime)\nfmt.Println(\"  TCPConnTime   :\", ti.TCPConnTime)\nfmt.Println(\"  TLSHandshake  :\", ti.TLSHandshake)\nfmt.Println(\"  ServerTime    :\", ti.ServerTime)\nfmt.Println(\"  ResponseTime  :\", ti.ResponseTime)\nfmt.Println(\"  TotalTime     :\", ti.TotalTime)\nfmt.Println(\"  IsConnReused  :\", ti.IsConnReused)\nfmt.Println(\"  IsConnWasIdle :\", ti.IsConnWasIdle)\nfmt.Println(\"  ConnIdleTime  :\", ti.ConnIdleTime)\nfmt.Println(\"  RequestAttempt:\", ti.RequestAttempt)\nfmt.Println(\"  RemoteAddr    :\", ti.RemoteAddr.String())\n\n// Output\n// Request Trace Info:\n//   DNSLookup     : 2.947333ms\n//   ConnTime      : 198.844375ms\n//   TCPConnTime   : 63.088834ms\n//   TLSHandshake  : 132.341ms\n//   ServerTime    : 64.945166ms\n//   ResponseTime  : 74.625µs\n//   TotalTime     : 263.774083ms\n//   IsConnReused  : false\n//   IsConnWasIdle : false\n//   ConnIdleTime  : 0s\n//   RequestAttempt: 1\n//   RemoteAddr    : 3.210.94.60:443\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Client Credentials with Go-Resty (Unmodified)\nDESCRIPTION: This snippet demonstrates how to create a Go-Resty client using OAuth2 client credentials without modifying the client or transport. It initializes the client credentials config, creates a client, and sets up a Resty client.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/oauth2-client-credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclientCredCfg := &clientcredentials.Config{\n    /* initialize values ... */\n}\n\n// create a client\ncredClient := clientCredCfg.Client(context.Background())\n\n// create a Resty client\nc := resty.NewWithClient(credClient)\ndefer c.Close()\n\n// start using a resty client\n```\n\n----------------------------------------\n\nTITLE: Setting Client Root Certificates with Watcher in Go\nDESCRIPTION: This snippet shows how to configure a certificate watcher using the Resty HTTP client. The code initializes CertWatcherOptions and utilizes SetClientRootCertificatesWatcher method to manage root certificates which re-evaluate the files specified every 12 hours or as configured.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/client-root-certificates.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// create cert watcher options\ncertWatcherOpts := &resty.CertWatcherOptions{\n    PoolInterval: 12 * time.Hour, // default value is 24 hours\n}\n\n// one pem file path\nclient.SetClientRootCertificatesWatcher(certWatcherOpts, \"/path/to/client-root/pemFile.pem\")\n\n// one or more pem file path(s)\nclient.SetClientRootCertificatesWatcher(\n    certWatcherOpts,\n    \"/path/to/client-root/pemFile1.pem\",\n    \"/path/to/client-root/pemFile2.pem\"\n    \"/path/to/client-root/pemFile3.pem\"\n)\n\n// if you happen to have string slices\nclient.SetClientRootCertificatesWatcher(certWatcherOpts, certs...)\n```\n\n----------------------------------------\n\nTITLE: Fetching and Reading Unparsed Raw HTTP Response with Resty (Go)\nDESCRIPTION: This snippet demonstrates disabling Resty's automatic response parsing using SetDoNotParseResponse(true) to directly handle the raw HTTP response body. The response body must be closed manually to avoid connection leaks. The example reads the response bytes with io.ReadAll and prints them as a string. Requires github.com/go-resty/resty/v2 and the standard io package. Suitable for special binary content or full control over parsing. Ensure error checks and defers are in place.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetDoNotParseResponse(true).\n    Get(\"https://httpbin.org/json\")\nif err != nil {\n    fmt.Println(err)\n    return\n}\n\ndefer res.Body.Close() // ensure to close response body\n\nresBytes, err := io.ReadAll(res.Body)\nif err != nil {\n    fmt.Println(err)\n    return\n}\n\nfmt.Println(\"Response:\", string(resBytes))\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-Sent Events Consumption with Resty in Go\nDESCRIPTION: This snippet illustrates initializing an EventSource to consume SSE streams from a remote URL using Resty in Go. It shows setting the URL, registering a generic message handler that casts each event to a resty.Event, and starting the streaming connection using the Get method. The handler prints each received event to the console. No custom event structures or authentication headers are required. Inputs: SSE endpoint URL. Outputs: Printed SSE events and error (if any) to stdout. Dependencies: Resty v3 with EventSource support, fmt package.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/server-sent-events.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nes := resty.NewEventSource().\\n    SetURL(\\\"https://sse.dev/test\\\").\\n    OnMessage(func(e any) {\\n        fmt.Println(e.(*resty.Event))\\n    }, nil)\\n\\nerr := es.Get()\\nfmt.Println(err)\n```\n\n----------------------------------------\n\nTITLE: Implementing Zstandard Decompression in Go-Resty\nDESCRIPTION: This code snippet demonstrates how to add a Zstandard decompresser to a Resty client and implement the necessary decompression logic. It includes creating a custom reader that wraps the zstd.Decoder and handles the decompression process.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/decompress-zstandard.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\n// Add decompresser into Resty\nclient.AddContentDecompresser(\"zstd\", decompressZstd)\n\n// Create Zstandard decompress logic\nfunc decompressZstd(r io.ReadCloser) (io.ReadCloser, error) {\n\tzr, err := zstd.NewReader(r, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tz := &zstdReader{s: r, r: zr}\n\treturn z, nil\n}\n\ntype zstdReader struct {\n\ts io.ReadCloser\n\tr *zstd.Decoder\n}\n\nfunc (b *zstdReader) Read(p []byte) (n int, err error) {\n\treturn b.r.Read(p)\n}\n\nfunc (b *zstdReader) Close() error {\n\tb.r.Close()\n\treturn b.s.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TLSClientConfiger interface for CustomTransport in Go\nDESCRIPTION: This snippet demonstrates how to implement the TLSClientConfiger interface for a custom transport structure. It includes methods for RoundTrip, TLSClientConfig, and SetTLSClientConfig.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/tls-client-config-on-custom-roundtriper.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CustomTransport struct {\n   http.RoundTripper\n   resty.TLSClientConfiger\n}\n\nfunc (t *CustomTransport) RoundTrip(r *http.Request) (*http.Response, error) {\n   // custom round trip implementation here ...\n\n   return resp, err\n}\n\nfunc (t *CustomTransport) TLSClientConfig() *tls.Config {\n   // return TLS config instance\n\n   return t.tlsConfig\n}\n\nfunc (t *CustomTransport) SetTLSClientConfig(tlsConfig *tls.Config) error {\n   // handle TLS client config here\n\n   return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Auto Unmarshalling Server-Sent Event Payloads with Resty in Go\nDESCRIPTION: This code demonstrates automatic JSON unmarshalling of incoming SSE payloads into a Go struct using Resty's OnMessage API. The Data struct matches the expected JSON format. The OnMessage handler casts incoming events to *Data, and prints individual fields. It shows how to provide a zero-value struct as the unmarshalling template for Resty. Inputs: JSON-formatted SSE data. Outputs: Field-wise output of unmashalled struct to stdout. Dependencies: Resty v3 with EventSource, encoding/json tags, fmt package.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/server-sent-events.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// https://sse.dev/test returns\\n// {\\\"testing\\\":true,\\\"sse_dev\\\":\\\"is great\\\",\\\"msg\\\":\\\"It works!\\\",\\\"now\\\":1737508994502}\\ntype Data struct {\\n    Testing bool   `json:\\\"testing\\\"`\\n    SSEDev  string `json:\\\"sse_dev\\\"`\\n    Message string `json:\\\"msg\\\"`\\n    Now     int64  `json:\\\"now\\\"`\\n}\\n\\nes := resty.NewEventSource().\\n    SetURL(\\\"https://sse.dev/test\\\").\\n    OnMessage(\\n        func(e any) {\\n            d := e.(*Data)\\n            fmt.Println(\\\"Testing:\\\", d.Testing)\\n            fmt.Println(\\\"SSEDev:\\\", d.SSEDev)\\n            fmt.Println(\\\"Message:\\\", d.Message)\\n            fmt.Println(\\\"Now:\\\", d.Now)\\n            fmt.Println(\\\"\\\")\\n        },\\n        Data{},\\n    )\\n\\nerr := es.Get()\\nfmt.Println(err)\\n\\n// Output:\\n//     Testing: true\\n//     SSEDev: is great\\n//     Message: It works!\\n//     Now: 1737509497652\\n\\n//     Testing: true\\n//     SSEDev: is great\\n//     Message: It works!\\n//     Now: 1737509499652\\n\\n//     ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Brotli Decompression with andybalholm/brotli in Go-Resty\nDESCRIPTION: This code snippet demonstrates how to add Brotli decompression to Go-Resty using the andybalholm/brotli package. It creates a wrapper reader that implements io.ReadCloser and registers it with the Resty client.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/decompress-brotli.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\n// Add decompresser into Resty\nclient.AddContentDecompresser(\"br\", decompressBrotli)\n\n// Create Brotli decompress logic\nfunc decompressBrotli(r io.ReadCloser) (io.ReadCloser, error) {\n\tbr := &brotliReader{s: r, r: brotli.NewReader(r)}\n\treturn br, nil\n}\n\ntype brotliReader struct {\n\ts io.ReadCloser\n\tr *brotli.Reader\n}\n\nfunc (b *brotliReader) Read(p []byte) (n int, err error) {\n\treturn b.r.Read(p)\n}\n\nfunc (b *brotliReader) Close() error {\n\treturn b.s.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificates from Certificate Objects in go-resty\nDESCRIPTION: This snippet illustrates how to load certificates from files and add them to the client. It also shows how to add multiple certificates at once.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/client-certificates.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// loading public/private key pair from files. The files must contain PEM-encoded data.\ncert, err := tls.LoadX509KeyPair(\"certs/client.pem\", \"certs/client.key\")\nif err != nil {\n    log.Printf(\"ERROR while loading client certificate: %v\", err)\n    return\n}\n\n// add client certificate\nclient.SetCertificates(cert)\n\n// ...\n// add one or more certificates\nclient.SetCertificates(cert1, cert2, cert3)\n```\n\n----------------------------------------\n\nTITLE: Configuring SOCKS5 Proxy for HTTP Requests with Go-Resty\nDESCRIPTION: This code snippet demonstrates how to create a Go-Resty client with a SOCKS5 proxy configuration. It sets up the proxy, makes a GET request to a test endpoint, and prints the response and any errors.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/socks5-proxy.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"resty.dev/v3\"\n)\n\nfunc main() {\n\tc := resty.New().\n\t\tSetProxy(\"socks5://127.0.0.1:1080\")\n\tdefer c.Close()\n\n\tres, err := c.R().\n\t\tGet(\"https://httpbin.org/get\")\n\n\tfmt.Println(err, res)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Event Types in Server-Sent Events with Resty in Go\nDESCRIPTION: This snippet shows consuming multiple SSE event types using Resty's AddEventListener method in Go. It defines a custom UserEvent struct that matches expected event payloads. The EventSource setup includes generic and event-specific listeners for 'user_connect' and 'user_message', all casting the event data appropriately. This approach is useful when an SSE stream provides heterogeneous events, and typed handling is desired. Inputs: JSON SSE data for different event names. Outputs: Printed struct or event representations. Dependencies: Resty v3 with EventSource, time package, fmt package.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/server-sent-events.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype UserEvent struct {\\n    UserName string    `json:\\\"username\\\"`\\n    Message  string    `json:\\\"msg\\\"`\\n    Time     time.Time `json:\\\"time\\\"`\\n}\\n\\nes := resty.NewEventSource().\\n    SetURL(\\\"https://sse.dev/test\\\").\\n    OnMessage(\\n        func(e any) {\\n            fmt.Println(e.(*resty.Event))\\n        },\\n        nil,\\n    ).\\n    AddEventListener(\\n        \\\"user_connect\\\",\\n        func(e any) {\\n            fmt.Println(e.(*UserEvent))\\n        },\\n        UserEvent{},\\n    ).\\n    AddEventListener(\\n        \\\"user_message\\\",\\n        func(e any) {\\n            fmt.Println(e.(*UserEvent))\\n        },\\n        UserEvent{},\\n    )\\n\\nerr := es.Get()\\nfmt.Println(err)\n```\n\n----------------------------------------\n\nTITLE: Setting Client Root Certificate from String in Go\nDESCRIPTION: This example demonstrates setting a client root certificate directly from a string. The SetClientRootCertificateFromString method is invoked with a string containing the certificate content in PEM format.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/client-root-certificates.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmyClientRootCertStr := `-----BEGIN CERTIFICATE-----\n... cert content ...\n-----END CERTIFICATE-----`\n\nclient.SetClientRootCertificateFromString(myClientRootCertStr)\n```\n\n----------------------------------------\n\nTITLE: Initializing DNS Resolver with Resty in Go\nDESCRIPTION: This Go code snippet demonstrates how to initialize and configure a custom DNS resolver using Resty v3. It sets up a net.Dialer with a custom DNS resolution strategy using Quad9 DNS, then uses it to create a Resty client for HTTP requests. Dependencies include the Resty v3 module and Go's net package. Important parameters include the network type 'udp' and DNS address '9.9.9.9:53'. Expected input is a URL for an HTTP GET request with output being the HTTP response and error objects.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/custom-dns-resolver.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"resty.dev/v3\"\n)\n\nfunc main() {\n\tdialer := &net.Dialer{\n\t\tResolver: &net.Resolver{\n\t\t\tPreferGo: true,\n\t\t\tDial: func(ctx context.Context, network, address string) (net.Conn, error) {\n\t\t\t\td := net.Dialer{\n\t\t\t\t\tTimeout: time.Duration(20) * time.Second,\n\t\t\t\t}\n\t\t\t\treturn d.DialContext(ctx, \"udp\", \"9.9.9.9:53\") // Quad9 DNS\n\t\t\t},\n\t\t},\n\t}\n\n\tc := resty.NewWithDialer(dialer)\n\tdefer c.Close()\n\n\tres, err := c.R().Get(\"https://httpbin.org/get\")\n\tfmt.Println(err, res)\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Form Data and Multipart Methods in Go-Resty\nDESCRIPTION: This snippet demonstrates how to combine multiple form data and multipart methods in a single request in Go-Resty.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// all form data and multipart methods can be used together\nclient.R().\n    SetFormData(map[string]string{\n        \"first_name\": []string{\"Jeevanandam\"},\n    }).\n    SetFormDataFromValues(url.Values{\n        \"last_name\":  []string{\"M\"},\n    }).\n    SetFiles(map[string]string{\n        // field name and file path\n        \"profile_img\": \"/path/to/profile/image.png\",\n    }).\n    SetMultipartFormData(map[string]string{\n        \"zip_code\": \"00002\",\n    }).\n    SetMultipartField(\n        \"profile_img2\", // field name\n        \"my-profile-img2.png\", // file name\n        \"image/png\", // file content-type\n        bytes.NewReader(profileImg2Bytes), // io.Reader\n    ).\n    SetMultipartFields(\n        &resty.MultipartField{\n            Name:   \"city\",\n            Values: []string{\"city name here\"},\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Content Decompresser in Resty - Go\nDESCRIPTION: This Go code snippet shows how to register a custom content decompresser with the Resty HTTP client by using the AddContentDecompresser method. The user provides a content-encoding key (matching the Content-Encoding header) and a function that processes an io.ReadCloser and returns a decompressed io.ReadCloser or an error. This enables support for custom or unsupported compression algorithms. Prerequisites: importing Resty v3 and necessary Go standard libraries. The main input parameters are the encoding key and the decompression function; expected output is that subsequent HTTP responses matching the key will be transparently decompressed via the custom handler. Limitations: user-defined decompressers will overwrite existing ones for duplicate keys.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/content-decompresser.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.AddContentDecompresser(\"decompress directive/key here\", func(r io.ReadCloser) (io.ReadCloser, error) {\n    // logic goes here\n\n    return nil, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Setting and Using External Pointer Result Struct with Resty (Go)\nDESCRIPTION: This snippet initializes a result struct pointer externally, passes it into SetResult, and accesses the populated struct after the request. This approach enables using an existing instance for response unmarshalling, which is useful when reusing data structures or needing customized memory management. Requires github.com/go-resty/resty/v2.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nloginResponse := &LoginResponse{}\n// set\nclient.R().SetResult(loginResponse)\n\n// access\nfmt.Println(loginResponse)\n```\n\n----------------------------------------\n\nTITLE: Initializing Go-Resty Client\nDESCRIPTION: Creates a new Resty client and defers its closure. This is a common setup for using Go-Resty in applications.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/get-request.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a Resty client\nclient := resty.New()\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Brotli Decompression with dsnet/compress in Go-Resty\nDESCRIPTION: This code snippet shows how to add Brotli decompression to Go-Resty using the dsnet/compress package. It handles potential errors from the reader creation and properly closes both the source reader and brotli reader.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/decompress-brotli.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\n// Add decompresser into Resty\nclient.AddContentDecompresser(\"br\", decompressBrotli)\n\n// Create Brotli decompress logic\nfunc decompressBrotli(r io.ReadCloser) (io.ReadCloser, error) {\n\tbr, err := brotli.NewReader(r, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tb := &brotliReader{s: r, r: br}\n\treturn b, nil\n}\n\ntype brotliReader struct {\n\ts io.ReadCloser\n\tr *brotli.Reader\n}\n\nfunc (b *brotliReader) Read(p []byte) (n int, err error) {\n\treturn b.r.Read(p)\n}\n\nfunc (b *brotliReader) Close() error {\n\t_ = b.r.Close()\n\treturn b.s.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Debug Log Formatter in go-resty\nDESCRIPTION: Shows how to create and set a custom debug log formatter function. This allows for complete customization of the debug log output format.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/debug-log.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// implement custom debug log formatter\nfunc DebugLogCustomFormatter(dl *DebugLog) string {\n    logContent := \"\"\n\n    // perform log manipulation logic here\n\n\treturn logContent\n}\n\n// set the custom debug log formatter\nc := resty.New().\n    SetDebugLogFormatter(DebugLogCustomFormatter)\n```\n\n----------------------------------------\n\nTITLE: Initializing Go-Resty Client\nDESCRIPTION: Creates a new Resty client instance and ensures it's properly closed after use.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/post-put-patch-request.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a Resty client\nclient := resty.New()\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in go-resty\nDESCRIPTION: Demonstrates how to enable debug logging for all requests or a specific request in go-resty. It shows the basic setup for debug mode.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/debug-log.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// enabling debug for all requests\nc := resty.New().\n    SetDebug(true)\n\n// enabling debug for a particular request\nreq := c.R().SetDebug(true)\n\n// few syntactic sugar methods available; see Methods section\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Auth Header in Go-Resty\nDESCRIPTION: Shows how to set up custom authentication headers for services that use non-standard HTTP headers for authentication.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient.SetHeaderAuthorizationKey(\"X-Custom-Auth\")\n\n// outcome:\n// X-Custom-Auth: Bearer bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\n```\n\n----------------------------------------\n\nTITLE: Go Module Requirements Example\nDESCRIPTION: Example showing how to include Resty v3 as a dependency in a Go project.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrequire resty.dev/v3\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Formatter for Debug Logs in go-resty\nDESCRIPTION: Demonstrates how to set the debug log formatter to use JSON output instead of the default human-readable format.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/debug-log.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New().\n    SetDebugLogFormatter(resty.DebugLogJSONFormatter)\n```\n\n----------------------------------------\n\nTITLE: Setting Expected Response Content-Type for Parsing in Resty (Go)\nDESCRIPTION: This snippet enforces a fallback Content-Type for automatic unmarshalling if the HTTP response lacks the Content-Type header. It uses SetExpectResponseContentType; helpful when the server response is missing headers but the format is predictable. Dependency: github.com/go-resty/resty/v2. Takes MIME type string as parameter.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.R().SetExpectResponseContentType(\"application/json\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Custom Redirect Policy in Go-Resty\nDESCRIPTION: Illustrates how to create an advanced custom redirect policy by implementing the RedirectPolicy interface. This approach allows for more complex redirect logic and state management.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/redirect-policy.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar _ resty.RedirectPolicy = (*AdvancedRedirectPolicy)(nil)\n\ntype AdvancedRedirectPolicy struct {\n\t// ... fields here\n}\n\nfunc (a *AdvancedRedirectPolicy) Apply(req *http.Request, via []*http.Request) error {\n\t// perform redirect logic here\n\n\t// return nil to continue; otherwise, return error to exit\n\treturn nil\n}\n\n// set the redirect policy\nclient.SetRedirectPolicy(&AdvancedRedirectPolicy{\n    // initialize field here\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Timeout for a Single Request in Resty (Go)\nDESCRIPTION: This snippet demonstrates how to specify a custom timeout for an individual request in Resty using the SetTimeout method. This overrides the client's default timeout for the current request unless a timeout or deadline is already explicitly set by the user. Requires an initialized Resty client and appropriate context for the request. Returns a request object with the specified timeout.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/timeout.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// set timeout for current request\nclient.R().\n    SetTimeout(3 * time.Minute)\n```\n\n----------------------------------------\n\nTITLE: Setting Single Path Parameter in Resty Go\nDESCRIPTION: Demonstrates how to set a single path parameter in a Resty HTTP request using SetPathParam. The path parameter value is URL-escaped using net/url.PathEscape before substitution. Requires importing the resty library and initializing a client instance. Expects a single placeholder in the URL and substitutes it for the provided parameter value.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-path-params.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetPathParam(\"userId\", \"sample@sample.com\").\n    Get(\"/v1/users/{userId}/details\")\n\n// Result:\n//     /v1/users/sample@sample.com/details\n\n```\n\n----------------------------------------\n\nTITLE: GET Request with Path Parameters in Go-Resty\nDESCRIPTION: Illustrates a GET request using path parameters. It uses SetPathParams to set values for path placeholders in the URL.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/get-request.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetPathParams(map[string]string{\n\t\t\"userId\":       \"sample@sample.com\",\n\t\t\"subAccountId\": \"100002\",\n\t}).\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    Get(\"/v1/users/{userId}/{subAccountId}/details\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Path Parameters in Resty Go\nDESCRIPTION: Shows how to set multiple path parameters at once in a Resty HTTP request using SetPathParams. All parameters are substituted and URL-escaped. Input is a map of keys to values corresponding to placeholders in the request URL. Requires resty setup and supports any number of parameters matching the URL pattern.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-path-params.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetPathParams(map[string]string{\n        \"userId\":       \"sample@sample.com\",\n        \"subAccountId\": \"100002\",\n        \"path\":         \"groups/developers\",\n    }).\n    Get(\"/v1/users/{userId}/{subAccountId}/{path}/details\")\n\n// Result:\n//   /v1/users/sample@sample.com/100002/groups%2Fdevelopers/details\n\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters from url.Values in Go Resty\nDESCRIPTION: Shows how to set query parameters from a `url.Values` object using `SetQueryParamsFromValues`. This is particularly useful when needing multiple values for the same query parameter key, as demonstrated with the 'status' parameter. Requires the `net/url` package.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-query-params.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetQueryParamsFromValues(url.Values{\n        \"status\": []string{\"pending\", \"approved\", \"open\"},\n    }).\n    Get(\"/search\")\n\n// Result:\n//     /search?status=pending&status=approved&status=open\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Single Raw Path Parameter in Resty Go\nDESCRIPTION: Illustrates using SetRawPathParam on a Resty request to insert a single path parameter value without URL escaping. The value is used verbatim, enabling path segments with slashes or special characters. Depends on the resty client setup. Suitable for cases where literal values are required in the URL path.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-path-params.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetRawPathParam(\"path\", \"groups/developers\").\n    Get(\"/v1/users/{userId}/details\")\n\n// Result:\n//     /v1/users/groups/developers/details\n\n```\n\n----------------------------------------\n\nTITLE: File Upload from io.Reader in Go-Resty\nDESCRIPTION: This snippet demonstrates uploading file content from an io.Reader using SetFileReader method in Go-Resty.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// adding bytes or io.Reader\nclient.R().\n    SetFileReader(\n        \"profile_img\", // field name\n        \"my-profile-img.png\", // file name\n        bytes.NewReader(profileImgBytes), // io.Reader\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Raw Path Parameters in Resty Go\nDESCRIPTION: Demonstrates setting multiple raw path parameters with SetRawPathParams in Resty, substituting values as-is without escaping. Input is a map to correspond with URL placeholders. This approach is useful for APIs that require raw path insertion, but care is needed to prevent ambiguous URLs.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-path-params.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetRawPathParams(map[string]string{\n        \"userId\":       \"sample@sample.com\",\n        \"subAccountId\": \"100002\",\n        \"path\":         \"groups/developers\",\n    }).\n    Get(\"/v1/users/{userId}/{subAccountId}/{path}/details\")\n\n// Result:\n//     /v1/users/sample@sample.com/100002/groups/developers/details\n\n```\n\n----------------------------------------\n\nTITLE: Setting Result Struct Inline Non-Pointer with Resty (Go)\nDESCRIPTION: This code sets a result struct by value (non-pointer) using SetResult, then accesses the parsed data through type assertion after the request. It's part of Resty's response handling customization. Dependencies are the same as above. The use of non-pointer may prevent updating the caller's struct but illustrates flexibility in signature.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// set\nclient.R().SetResult(LoginResponse{})\n\n// access\nfmt.Println(res.Result().(*LoginResponse))\n```\n\n----------------------------------------\n\nTITLE: Implementing Constant Delay Retry Strategy in Go-Resty\nDESCRIPTION: Demonstrates how to override the default exponential backoff strategy with a constant delay strategy that always waits for a fixed duration between retries.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Retry configuration can be set at the client or request level\nclient.\n    SetRetryStrategy(func(_ *resty.Response, _ error) (time.Duration, error) {\n        return 3 * time.Second, nil\n    })\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request with Go-Resty\nDESCRIPTION: Demonstrates a basic GET request to 'https://httpbin.org/get' using Go-Resty. The response and any error are printed.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/get-request.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    Get(\"https://httpbin.org/get\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Conditions at Request Level in Go-Resty\nDESCRIPTION: Adds a custom condition to a specific request that determines when a retry should be performed, evaluated after the default retry conditions.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// NOTE: first default retry conditions get applied\n//       before user-defined retry conditions\nclient.R().\n    AddRetryConditions(\n        func(res *resty.Response, err error) bool {\n            // request retry condition\n            // perform logic here\n\n            // return true if retry is required otherwise, return false\n            return true\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: File Upload with Content-Type in Go-Resty\nDESCRIPTION: This snippet shows how to upload a file with a specified content-type using SetMultipartField method in Go-Resty.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/multipart.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// adding bytes or io.Reader with file content-type\nclient.R().\n    SetMultipartField(\n        \"profile_img\", // field name\n        \"my-profile-img.png\", // file name\n        \"image/png\", // file content-type\n        bytes.NewReader(profileImgBytes), // io.Reader\n    )\n```\n\n----------------------------------------\n\nTITLE: Overwriting Retry Conditions at Request Level in Go-Resty\nDESCRIPTION: Sets specific retry conditions for a particular request, replacing any client-level conditions, while still applying default conditions first unless disabled.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/retry-mechanism.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// NOTE: first default retry conditions get applied\n//       before user-defined retry conditions\nclient.R().\n    SetRetryConditions(\n        func(res *resty.Response, err error) bool {\n            // request retry condition 1\n            // perform logic here\n\n            // return true if retry is required otherwise, return false\n            return false\n        },\n        func(res *resty.Response, err error) bool {\n            // request retry condition 2\n            // perform logic here\n\n            // return true if retry is required otherwise, return false\n            return true\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Sending String as Request Body in Go-Resty\nDESCRIPTION: This snippet illustrates sending a string as the request body using Go-Resty. It explicitly sets the content type to JSON, provides a JSON string as the body, and sends a POST request to a login endpoint.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-body-types.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetContentType(\"application/json\").\n    SetBody(`{\"username\":\"testuser\", \"password\":\"testpass\"}`).\n    SetResult(&LoginResponse{}). // or SetResult(LoginResponse{}).\n    SetError(&LoginError{}).     // or SetError(LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go-Resty Client for Saving All Responses\nDESCRIPTION: This snippet demonstrates how to create a Go-Resty client that saves all HTTP responses to a specified directory. It sets the output directory and enables saving for all requests.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/save-response.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a Resty client\nc := resty.New().\n    SetOutputDirectory(\"/path/to/save/all/response\").\n    SetSaveResponse(true) // applies to all requests\ndefer c.Close()\n\n// start using the client ...\n```\n\n----------------------------------------\n\nTITLE: Adding Root Certificates from String in Go-Resty\nDESCRIPTION: Illustrates how to add a root certificate directly from a string using the SetRootCertificateFromString method. This is useful when the certificate content is available as a string rather than a file.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/root-certificates.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmyRootCertStr := `-----BEGIN CERTIFICATE-----\n... cert content ...\n-----END CERTIFICATE-----`\n\nclient.SetRootCertificateFromString(myRootCertStr)\n```\n\n----------------------------------------\n\nTITLE: Saving a Single Response with Automatic Filename\nDESCRIPTION: This example shows how to save a single HTTP response, where the filename is automatically determined from the URL. In this case, it saves an image as 'resty-logo.svg'.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/save-response.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// save this image into the file system as \"resty-logo.svg\"\nclient.R().\n    SetSaveResponse(true).\n    Get(\"https://resty.dev/svg/resty-logo.svg\")\n```\n\n----------------------------------------\n\nTITLE: Adding Root Certificates from Files in Go-Resty\nDESCRIPTION: Demonstrates how to add root certificates from one or multiple PEM files using the SetRootCertificates method. This method can accept multiple file paths as arguments or a slice of file paths.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/root-certificates.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// one pem file path\nclient.SetRootCertificates(\"/path/to/root/pemFile.pem\")\n\n// one or more pem file path(s)\nclient.SetRootCertificates(\n    \"/path/to/root/pemFile1.pem\",\n    \"/path/to/root/pemFile2.pem\"\n    \"/path/to/root/pemFile3.pem\"\n)\n\n// if you happen to have string slices\nclient.SetRootCertificates(certs...)\n```\n\n----------------------------------------\n\nTITLE: Saving a Single Response with Custom Filename\nDESCRIPTION: This snippet demonstrates how to save a single HTTP response with a custom filename. It saves an image as 'resty-logo-blue.svg' instead of using the default name from the URL.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/save-response.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// save this image into the file system as \"resty-logo-blue.svg\"\nclient.R().\n    SetSaveResponse(true).\n    SetOutputFileName(\"resty-logo-blue.svg\"). // can be a relative or absolute path\n    Get(\"https://resty.dev/svg/resty-logo.svg\")\n```\n\n----------------------------------------\n\nTITLE: Setting Client Root Certificates in Go\nDESCRIPTION: This Go code snippet demonstrates how to set client root certificates using file paths. The SetClientRootCertificates method is used, which accepts one or more PEM file paths as arguments. The dynamic certificate watcher feature allows certificates to be reloaded at specified intervals if they are modified.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/client-root-certificates.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// one pem file path\nclient.SetClientRootCertificates(\"/path/to/client-root/pemFile.pem\")\n\n// one or more pem file path(s)\nclient.SetClientRootCertificates(\n    \"/path/to/client-root/pemFile1.pem\",\n    \"/path/to/client-root/pemFile2.pem\"\n    \"/path/to/client-root/pemFile3.pem\"\n)\n\n// if you happen to have string slices\nclient.SetClientRootCertificates(certs...)\n```\n\n----------------------------------------\n\nTITLE: Composing and Sending Form Data via Map with Resty in Go\nDESCRIPTION: This snippet demonstrates initializing a Resty client, submitting login and profile update HTTP POST requests by setting form data with a map[string]string. It requires importing the Resty library (github.com/go-resty/resty/v2), and optionally the fmt package for output. The key method used is SetFormData, which encodes provided map values and sets the proper Content-Type. Inputs are string maps representing form fields, and successful execution returns server responses and errors via fmt.Println. Suitable only for verbs supporting payloads.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/form-data.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\n// login request\nres, err := c.R().\n\tSetFormData(map[string]string{\n\t\t\"username\": \"myusername\",\n\t\t\"password\": \"mypassword\",\n\t}).\n\tPost(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\n\n// followed by profile update\nres, err := c.R().\n\tSetFormData(map[string]string{\n\t\t\"first_name\": \"Jeevanandam\",\n\t\t\"last_name\":  \"M\",\n\t\t\"zip_code\":   \"00001\",\n\t\t\"city\":       \"new city update\",\n\t}).\n\tPost(\"https://myapp.com/profile\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: GET Request with Query Parameters in Go-Resty\nDESCRIPTION: Shows how to make a GET request with query parameters, headers, and an auth token. It uses SetQueryParams to set multiple query parameters at once.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/get-request.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetQueryParams(map[string]string{\n        \"page_no\": \"1\",\n        \"limit\":   \"20\",\n        \"sort\":    \"name\",\n        \"order\":   \"asc\",\n        \"random\":  strconv.FormatInt(time.Now().Unix(), 10),\n    }).\n    SetHeader(\"Accept\", \"application/json\").\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    Get(\"/search_result\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters from a String in Go Resty\nDESCRIPTION: Demonstrates setting query parameters by providing a single, raw, URL-encoded query string using the `SetQueryString` method. Resty parses this string and appends the parameters to the request URL before making the GET request.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-query-params.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetQueryString(\"productId=232&template=fresh-sample&cat=resty&source=google&kw=buy a lot more\").\n    Get(\"/search\")\n\n// Result:\n//     /search?cat=resty&kw=buy+a+lot+more&productId=232&source=google&template=fresh-sample\n```\n```\n\n----------------------------------------\n\nTITLE: GET Request with Payload in Go-Resty\nDESCRIPTION: Demonstrates a GET request with a payload, which is not standard but sometimes required. It uses SetAllowMethodGetPayload to enable payload for GET, sets content type, and includes a JSON body.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/get-request.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetAllowMethodGetPayload(true). // client level options is available\n    SetContentType(\"application/json\").\n    SetBody(`{\n        \"query\": {\n            \"simple_query_string\" : {\n                \"query\": \"\\\"fried eggs\\\" +(eggplant | potato) -frittata\",\n                \"fields\": [\"title^5\", \"body\"],\n                \"default_operator\": \"and\"\n            }\n        }\n    }`). // this is string value as request body\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    Get(\"/_search\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Single Query Parameters in Go Resty\nDESCRIPTION: Demonstrates how to add individual query parameters to a Resty request using the `SetQueryParam` method. Each call adds a key-value pair to the request's query string. The example sets 'search' and 'size' parameters before making a GET request.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-query-params.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetQueryParam(\"search\", \"kitchen papers\").\n    SetQueryParam(\"size\", \"large\").\n    Get(\"/search\")\n\n// Result:\n//     /search?search=kitchen%20papers&size=large\n\n```\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP HEAD Request with Resty in Go\nDESCRIPTION: Executes an HTTP HEAD request to obtain metadata for a resource without the response body using Resty in Go. It sets an authorization token and specifies the video URL. Prints errors and response headers as the main output.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/options-head-trace-request.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres, err = client.R().\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    Head(\"https://myapp.com/videos/hi-res-video\")\n\nfmt.Println(err, res)\nfmt.Println(res.Header())\n```\n\n----------------------------------------\n\nTITLE: Customizing Debug Log Callback in go-resty\nDESCRIPTION: Shows how to register a custom debug log callback function to modify log details. This allows for fine-grained control over the debug output.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/debug-log.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New().\n    OnDebugLog(func(dl *DebugLog) {\n        // logic goes here\n    })\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP TRACE Request with Resty in Go\nDESCRIPTION: Carries out an HTTP TRACE request to echo the received request without any modifications using the Resty library in Go. Requires an authorization token and defines a URL to perform tracing. It prints out any errors or responses.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/options-head-trace-request.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres, err = client.R().\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    Trace(\"https://myapp.com/test\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Client Timeout in Resty (Go)\nDESCRIPTION: This snippet shows how to configure the top-level timeout for a Resty client session by calling SetTimeout with a time.Duration value. While Resty v3 does not use http.Client.Timeout, this method sets the library's internal timeout for all requests initiated through the client. Requires an initialized Resty client and the time package.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/timeout.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.SetTimeout(2 * time.Minute)\n```\n\n----------------------------------------\n\nTITLE: Performing PATCH Request with Go-Resty\nDESCRIPTION: Illustrates how to make a PATCH request using Go-Resty, demonstrating partial updates to a resource. It sets a simple request body (updating tags), includes an authentication token, and handles potential errors. It uses an Article struct for the request body and expects an Error struct for errors.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/post-put-patch-request.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresp, err := client.R().\n    SetBody(Article{\n        Tags: []string{\"new tag1\", \"new tag2\"},\n    }). // default request content type is JSON\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    SetError(&Error{}). // or SetError(Error{}).\n    Patch(\"https://myapp.com/articles/123456\")\n\nfmt.Println(err, res)\nfmt.Println(res.Error().(*Error))\n```\n\n----------------------------------------\n\nTITLE: Forcing Response Content-Type for Parsing in Resty (Go)\nDESCRIPTION: This code snippet overrides the Content-Type detection for unmarshalling by forcibly setting the expected type, regardless of the response header. It uses SetForceResponseContentType and is helpful when servers return incorrect or inconsistent Content-Type headers. Dependency: github.com/go-resty/resty/v2. Takes MIME type string (e.g., \"application/json\").\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nclient.R().SetForceResponseContentType(\"application/json\")\n```\n\n----------------------------------------\n\nTITLE: Sending Bytes as Request Body in Go-Resty\nDESCRIPTION: This example demonstrates how to send a byte slice as the request body in Go-Resty. It sets the content type to JSON, provides a JSON string as bytes, and sends a POST request to a login endpoint.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-body-types.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetContentType(\"application/json\").\n    SetBody([]byte(`{\"username\":\"testuser\", \"password\":\"testpass\"}`)).\n    SetResult(&LoginResponse{}). // or SetResult(LoginResponse{}).\n    SetError(&LoginError{}).     // or SetError(LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: HTTP REST Client Example in Go\nDESCRIPTION: Demonstrates creating a basic HTTP client with request tracing enabled to make a GET request.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// HTTP, REST Client\nclient := resty.New()\ndefer client.Close()\n\nres, err := client.R().\n    EnableTrace().\n    Get(\"https://httpbin.org/get\")\nfmt.Println(err, res)\nfmt.Println(res.Request.TraceInfo())\n```\n\n----------------------------------------\n\nTITLE: Sending io.Reader as Request Body in Go-Resty\nDESCRIPTION: This snippet shows how to use an io.Reader as the request body in Go-Resty. It creates a string reader with JSON content, sets the content type, and sends a POST request to a login endpoint. Note that in Resty v3, the content is streamed for io.Reader.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-body-types.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetContentType(\"application/json\").\n    SetBody(strings.NewReader(`{\"username\":\"testuser\", \"password\":\"testpass\"}`)).\n    SetResult(&LoginResponse{}). // or SetResult(LoginResponse{}).\n    SetError(&LoginError{}).     // or SetError(LoginError{}).\n    Post(\"https://myapp.com/login\")\n\nfmt.Println(err, res)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Query Parameters from a Map in Go Resty\nDESCRIPTION: Illustrates adding multiple query parameters at once using a `map[string]string` with the `SetQueryParams` method in Resty. This approach is convenient for setting several parameters defined in a map data structure before executing the GET request.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/request-query-params.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nc := resty.New()\ndefer c.Close()\n\nc.R().\n    SetQueryParams(map[string]string{\n\t\t\"search\": \"kitchen papers\",\n\t\t\"size\": \"large\",\n\t}).\n    Get(\"/search\")\n\n// Result:\n//     /search?search=kitchen%20papers&size=large\n```\n```\n\n----------------------------------------\n\nTITLE: Performing HTTP OPTIONS Request with Resty in Go\nDESCRIPTION: Performs an HTTP OPTIONS request to determine permitted HTTP methods or handle CORS preflight requests using Resty in Go. Requires setting an authorization token and specifies the URL to check available methods. Expects to print errors and response headers.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/options-head-trace-request.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := client.R().\n    SetAuthToken(\"bc594900518b4f7eac75bd37f019e08fbc594900518b4f7eac75bd37f019e08f\").\n    Options(\"https://myapp.com/servers/nyc-dc-01\")\n\nfmt.Println(err, res)\nfmt.Println(res.Header())\n```\n\n----------------------------------------\n\nTITLE: Setting Result Struct Inline Pointer with Resty (Go)\nDESCRIPTION: This snippet shows how to assign a result struct pointer inline using SetResult with Resty, and then access the parsed response via type assertion. This approach requires the github.com/go-resty/resty/v2 package. The pointer allows direct unmarshal into the target struct. Suitable when the response should populate an empty struct instance provided during request setup.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-auto-parse.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// set\nclient.R().SetResult(&LoginResponse{})\n\n// access\nfmt.Println(res.Result().(*LoginResponse))\n```\n\n----------------------------------------\n\nTITLE: Creating a Resty Client in Go\nDESCRIPTION: Demonstrates how to create and close a Resty client in Go. This snippet sets the groundwork for making HTTP requests using the Resty library. It is required to initialize the Resty client before making any requests.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/options-head-trace-request.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a Resty client\nclient := resty.New()\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Response Middlewares in go-resty\nDESCRIPTION: This example shows how to set multiple response middlewares in a specific order using go-resty. It includes custom middlewares, built-in middlewares like AutoParseResponseMiddleware and SaveToFileResponseMiddleware, and demonstrates the ability to cascade errors.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/response-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nc.SetResponseMiddlewares(\n    Custom1ResponseMiddleware,\n    Custom2ResponseMiddleware,\n    resty.AutoParseResponseMiddleware, // before this, the body is not read except on the debug flow\n    Custom3ResponseMiddleware,\n    resty.SaveToFileResponseMiddleware, // See, Request.SetOutputFileName & Request.SetSaveResponse\n    Custom4ResponseMiddleware,\n    Custom5ResponseMiddleware,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Curl Command with Resty - Go\nDESCRIPTION: This Go code snippet demonstrates how to use the Resty library to generate a curl command for a POST request. It involves setting the option to generate the curl command and handling the request, followed by retrieving and printing the curl command string. The snippet requires the Resty library and a connection to the URL used within the code. Key functionality includes setting a POST request body and obtaining the equivalent curl command. Limitations include no curl body generation for `io.Reader` and multipart requests.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/curl-command.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc := resty.New()\ndefer c.Close()\n\nres, _ := c.R().\n    SetGenerateCurlCmd(true).\n    SetBody(map[string]string{\n        \"name\": \"Resty\",\n    }).\n    Post(\"https://httpbin.org/post\")\n\ncurlCmdStr := res.Request.CurlCmd()\nfmt.Println(curlCmdStr)\n\n// Result:\n// curl -X POST -H 'Accept-Encoding: gzip, deflate' -H 'Content-Type: application/json' -H 'User-Agent: go-resty/3.0.0 (https://resty.dev)' -d '{\"name\":\"Resty\"}' https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Assigning CustomTransport to Resty client in Go\nDESCRIPTION: This snippet shows how to create an instance of the CustomTransport and assign it to a Resty client using the SetTransport method. It also demonstrates proper resource management with defer.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/tls-client-config-on-custom-roundtriper.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntransport := &CustomTransport{\n    /* initialize values */\n}\n\nc := resty.New().\n    SetTransport(transport)\n\ndefer c.Close()\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding defer client.Close() after Client creation in Go\nDESCRIPTION: Demonstrates the new requirement to defer closing the Resty client after creation.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/upgrading-to-v3.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Initializing Resty Client in Go\nDESCRIPTION: This snippet demonstrates initializing a new Resty HTTP client in Go, with proper resource cleanup by deferring the Close method. The Resty client is a prerequisite for making HTTP requests, and this setup must be included before any request operations. No inputs or outputs are handled directly in this snippet; it solely prepares the HTTP client object for subsequent use.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/delete-request.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a Resty client\nclient := resty.New()\ndefer client.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Go-Resty Documentation Page\nDESCRIPTION: This TOML snippet defines the frontmatter for a new documentation page in the Go-Resty project. It sets the date to the current date, marks the page as a draft, and generates a title based on the file name.\nSOURCE: https://github.com/go-resty/docs/blob/main/archetypes/default.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ndate = '{{ .Date }}'\ndraft = true\ntitle = '{{ replace .File.ContentBaseName \"-\" \" \" | title }}'\n+++\n```\n\n----------------------------------------\n\nTITLE: Updating go.mod for Resty v3\nDESCRIPTION: Updates the go.mod file to use the new Resty v3 vanity URL and version.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/upgrading-to-v3.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrequire resty.dev/v3 {{% param Resty.V3.Version %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration sets rules for all user agents, disallowing access to all paths within the website. It's used to control how web crawlers can interact with the go-resty documentation site.\nSOURCE: https://github.com/go-resty/docs/blob/main/resty/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events Client Example in Go\nDESCRIPTION: Shows how to create and configure a Server-Sent Events client with message handling.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/_index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Server-Sent Events Client\nes := NewEventSource().\n    SetURL(\"https://sse.dev/test\").\n    OnMessage(func(e any) {\n        fmt.Println(e.(*resty.Event))\n    }, nil)\n\nerr := es.Get()\nfmt.Println(err)\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for go-resty Documentation Credits Page\nDESCRIPTION: This code snippet defines the frontmatter for the credits page in the go-resty documentation. It specifies the content type as 'docs' and sets the 'bookHidden' property to true, likely to exclude this page from the main navigation.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/credits.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: docs\nbookHidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Performing Basic GET Request with go-resty in Go\nDESCRIPTION: This snippet demonstrates how to make a simple GET request using go-resty. It sends a request to httpbin.org and prints the response body.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a Resty Client\nclient := resty.New()\n\nresp, err := client.R().\n    Get(\"https://httpbin.org/get\")\n\n// Explore response object\nfmt.Println(\"Response Info:\")\nfmt.Println(\"  Error      :\", err)\nfmt.Println(\"  Status Code:\", resp.StatusCode())\nfmt.Println(\"  Status     :\", resp.Status())\nfmt.Println(\"  Proto      :\", resp.Proto())\nfmt.Println(\"  Time       :\", resp.Time())\nfmt.Println(\"  Received At:\", resp.ReceivedAt())\nfmt.Println(\"  Body       :\\n\", resp)\nfmt.Println()\n\n// Explore trace info\nfmt.Println(\"Request Trace Info:\")\nti := resp.Request.TraceInfo()\nfmt.Println(\"  DNSLookup     :\", ti.DNSLookup)\nfmt.Println(\"  ConnTime      :\", ti.ConnTime)\nfmt.Println(\"  TCPConnTime   :\", ti.TCPConnTime)\nfmt.Println(\"  TLSHandshake  :\", ti.TLSHandshake)\nfmt.Println(\"  ServerTime    :\", ti.ServerTime)\nfmt.Println(\"  ResponseTime  :\", ti.ResponseTime)\nfmt.Println(\"  TotalTime     :\", ti.TotalTime)\nfmt.Println(\"  IsConnReused  :\", ti.IsConnReused)\nfmt.Println(\"  IsConnWasIdle :\", ti.IsConnWasIdle)\nfmt.Println(\"  ConnIdleTime  :\", ti.ConnIdleTime)\nfmt.Println(\"  RequestAttempt:\", ti.RequestAttempt)\nfmt.Println(\"  RemoteAddr    :\", ti.RemoteAddr.String())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redirect History with Go-Resty\nDESCRIPTION: This code snippet demonstrates how to use the RedirectHistory method in Resty v3 to access information about redirects that occurred during an HTTP request. It creates a new Resty client, makes a GET request, and then iterates through the redirect history, printing the status code and URL for each redirect.\nSOURCE: https://github.com/go-resty/docs/blob/main/content/docs/example/redirect-history.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"resty.dev/v3\"\n)\n\nfunc main() {\n\tc := resty.New()\n\tdefer c.Close()\n\n\tres, _ := c.R().Get(\"http://resty.dev\")\n\n\tfor _, rh := range res.RedirectHistory() {\n\t\tfmt.Println(rh.StatusCode, rh.URL)\n\t}\n}\n```"
  }
]